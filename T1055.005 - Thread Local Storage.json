
[
  {
    "Is the adversary attempting privilege escalation using thread local storage callbacks? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1055.005 - Thread Local Storage": {
          "A process with a known malicious hash or originating from a suspicious source attempts to acquire a handle to a privileged process (e.g., lsass.exe, services.exe).": {
            "Data": "Windows Event ID 4656",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "On event 4656 (A handle to an object was requested), extract the source `Process Name`. Correlate this process name with threat intelligence data mapping known malicious executables. If an external tool provides alerts for known malicious file hashes on disk, correlate those alerts by process name and timestamp with handle acquisition events. Alert on any correlation between a known malicious file and attempts to access privileged processes like lsass.exe, services.exe, or winlogon.exe."
          },
          "A non-system process acquires a handle to a privileged process with write/execute access rights, which is then followed by anomalous behavior from the target process.": {
            "Data": "Windows Event ID 4656; Windows Event ID 5156; Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Filter for Windows Event ID 4656 events targeting privileged processes with write-access masks (e.g., PROCESS_VM_WRITE, PROCESS_ALL_ACCESS). For each source process, establish a baseline of which target processes it normally accesses. Use frequency analysis to flag source processes that rarely access the privileged target. Correlate these flagged events with subsequent anomalous behaviors from the target process, such as new network connections (Windows Event ID 5156, Zeek conn.log) or child process creation (Windows Event ID 4688), within a short time window (e.g., 5 minutes). This sequence suggests a successful injection pattern."
          },
          "A privileged process (e.g., lsass.exe, services.exe) initiates an outbound network connection, which is highly anomalous behavior indicative of successful code injection.": {
            "Data": "Windows Event ID 5156; Zeek conn.log",
            "Data Platform": "Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously monitor for any network connections originating from critical privileged processes that should not have network access. Create a strict baseline (which should be zero) for network traffic from processes like `lsass.exe`. Monitor Windows Event ID 5156 (`The Windows Filtering Platform has permitted a connection`) and Zeek conn.log where the source process name or host exhibiting the traffic is associated with such a process. Any connection is a high-fidelity alert for process compromise."
          },
          "A process running from a non-standard location (e.g., temporary user folder, masquerading as a system binary) attempts to acquire high-privilege handles to a privileged process.": {
            "Data": "Windows Event ID 4656",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "When a process handle request (Event ID 4656) is logged for a privileged target, analyze the file path of the source process (`Process Name`). Use descriptive statistics and frequency analysis to establish a baseline of standard executable locations. Flag any requests where the source process path is in a low-frequency or known-suspicious directory (e.g., C:\\Users\\...\\AppData\\Local\\Temp\\, C:\\ProgramData\\, C:\\Users\\Public\\). Use regression analysis to correlate suspicious paths with requests for high-privilege access masks (e.g., PROCESS_ALL_ACCESS) to increase alert fidelity."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary attempting defense evasion using thread local storage callbacks? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1055.005 - Thread Local Storage": {
          "A process with a known malicious hash or signature attempts to acquire a handle to a common, non-privileged process often used for masquerading (e.g., explorer.exe, svchost.exe).": {
            "Data": "Windows Event ID 4656",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "On event 4656 (A handle to an object was requested), extract the source `Process Name`. Correlate this process name with threat intelligence data for known malware. If an external tool provides alerts for known malicious file hashes on disk, correlate those alerts by process name and timestamp with handle acquisition events targeting common host processes like explorer.exe, svchost.exe, or browsers. Alert on any match, as this indicates a potential attempt to inject into a trusted process for evasion."
          },
          "A process acquires a handle to a common process (e.g., explorer.exe) with write/execute access, followed by that common process spawning an unusual child process (e.g., cmd.exe, powershell.exe).": {
            "Data": "Windows Event ID 4656; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Create a detection rule that correlates Event ID 4656 (handle request with write access to a common process like explorer.exe) with a subsequent Event ID 4688 (process creation) where the parent process is the one that was just injected into. Establish a baseline of normal child processes for common parent processes (e.g., explorer.exe rarely spawns powershell.exe directly). Flag deviations from this baseline using frequency analysis on the parent-child process relationship. A box-plot of child process frequency can identify rare outliers."
          },
          "A common user-facing process (e.g., explorer.exe, a web browser) spawns a command-line interpreter or initiates a network connection to a new or low-reputation destination.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze process lineage from Windows Event ID 4688 logs to detect when common applications (explorer.exe, chrome.exe, etc.) spawn child processes like cmd.exe, powershell.exe, or wscript.exe. This is highly suspicious behavior. In parallel, monitor Zeek conn.log for new network connections from these same common applications to destinations not seen before or with poor reputation scores. Use correlation analysis to link the suspicious process creation with the network event, indicating a likely post-injection payload execution."
          },
          "A process that is not a standard software installer or updater writes a new executable file to disk and then attempts to inject into a common process.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4656",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Establish a baseline of processes that normally create executable files on disk (e.g., installers, updaters). Monitor for any process outside this baseline that writes a new .exe or .dll file. Correlate this file write event (inferred from process creation event 4688 of the new file) with a subsequent process handle request (Event ID 4656) from the original process targeting a common host process (e.g., svchost.exe). This sequence of 'dropper' creating a file and then attempting to inject suggests a multi-stage evasion tactic."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
