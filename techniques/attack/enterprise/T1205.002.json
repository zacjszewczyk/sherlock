[
  {
    "information_requirement": "Is the adversary maintaining persistence using socket filters?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1205.002",
        "name": "Socket Filters",
        "evidence": [
          {
            "description": "An inbound network connection is recorded where the source IP matches a known malicious C2 address or the packet's attributes (e.g., TCP flags, payload size, port) match a predefined 'magic packet' signature known to activate a socket filter-based backdoor.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway Firewalls, Core Network Switches, Cloud VPC Flow Logs",
            "action": "For all inbound connections, perform three checks in parallel. First (Symbolic): Compare the source IP ('id.orig_h' in Zeek) against a threat intelligence feed of IPs known for socket filter C2. Second (Statistical): For each destination host, calculate a baseline of normal inbound traffic characteristics (ports, flags, packet sizes); alert if an incoming connection's characteristics exceed 3 standard deviations from the norm, indicating a statistical outlier. Third (Machine Learning): Deploy a trained Random Forest classifier that scores each inbound connection based on its features (IP reputation, port, flags, size, payload entropy) for its likelihood of being a malicious trigger packet, alerting on scores above a 0.9 threshold."
          },
          {
            "description": "A process creation event is logged where the process command line contains strings specific to packet capture libraries (e.g., 'pcap', 'WinPcap', 'npf.sys') or raw socket options ('SO_ATTACH_FILTER'), and the process executable is either unsigned or originates from a non-standard directory like a user's temporary folder.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Developer Workstations, Endpoint Detection and Response (EDR) logs",
            "action": "Continuously monitor Windows Event ID 4688 for process creation. First (Symbolic): Create a SIEM rule to alert when a command line contains keywords like 'WinPcap', 'raw_socket', or 'pcap_setfilter' and the process path is within a user-writable directory (e.g., C:\\Users\\* or C:\\Temp\\*). Second (Statistical): For all command-line arguments, calculate the Shannon entropy and length; alert on processes where these values exceed the 99th percentile for that specific process name, suggesting obfuscation or unusual parameters. Third (Machine Learning): Use a DBSCAN clustering algorithm on process features (name, path, parent, command-line entropy) to identify small, anomalous clusters that represent rare execution patterns distinct from normal system activity."
          },
          {
            "description": "A time-series correlation shows a persistent, long-running process with no significant network activity for an extended period (e.g., >6 hours) that suddenly spawns a child process or initiates an outbound connection within seconds after the host receives an anomalous inbound packet.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM correlation environment, Endpoint Detection and Response (EDR) logs, Network Sensor Taps at key egress/ingress points",
            "action": "Create a stateful analytic that correlates network and host data. First (Symbolic): If a packet matches a known trigger signature, create a 10-second window to monitor the destination host for new process creations (Event ID 4688) or new outbound connections (Zeek conn.log) and alert on a match. Second (Statistical): For each host, baseline the rate of process creation and outbound connections. Alert if a spike exceeding 3 standard deviations from the baseline rate occurs immediately following the receipt of a low-volume, high-entropy inbound packet. Third (Machine Learning): Employ a time-series anomaly detection model (e.g., LSTM autoencoder) on the sequence of host and network events to detect low-probability sequences, such as an anomalous inbound packet followed by a system process spawning a command shell, which deviates from learned normal behavior."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using socket filters?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense-Evasion",
    "indicators": [
      {
        "technique_id": "T1205.002",
        "name": "Socket Filters",
        "evidence": [
          {
            "description": "Inbound IP packets are observed with characteristics designed to bypass security controls, such as an abnormally low TTL value (e.g., < 32), the use of an IP protocol number other than TCP/UDP/ICMP, or specific IP fragmentation patterns that reassemble into a known trigger.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter network sensors, Internal network segmentation points, Extranet DMZ",
            "action": "Analyze inbound IP traffic from Zeek logs. First (Symbolic): Alert on any inbound packet where the protocol is not 1 (ICMP), 6 (TCP), or 17 (UDP), or where the TTL is below a threshold of 32, as these are common evasion techniques. Second (Statistical): Profile the distribution of IP protocol numbers and TTL values across the network. Flag any host receiving packets with protocol or TTL values that are statistical outliers (e.g., outside the 99.9th percentile of rarity). Third (Machine Learning): Train a one-class SVM model on features of normal network traffic (protocol, flags, TTL, fragment status) to create a boundary of normalcy; flag any inbound connection that falls outside this learned boundary as a potential evasion attempt."
          },
          {
            "description": "A legitimate, signed process (e.g., svchost.exe) is observed making a network connection that is permitted by a Windows Filtering Platform (WFP) filter, where logs show the filter itself was created by a separate, unauthorized, or suspicious process.",
            "data_sources": [
              "Windows Event ID 5156",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Key servers with Windows Firewall enabled, User endpoints with local firewalls, Centralized Windows Event Log repository",
            "action": "Correlate WFP and process logs. First (Symbolic): Join Event ID 5156 (WFP Connection Permitted) with Event ID 4688 (Process Creation) on the process ID that created the filter. Alert if a legitimate application's traffic is permitted by a filter created by an unsigned or temporary-path executable. Second (Statistical): Establish a baseline of normal (Process Name, Filter Creator Process, Remote Address) tuples from WFP logs. Use frequency analysis to alert on any combination that falls below a 0.1% rarity threshold. Third (Machine Learning): Model WFP events as a graph where nodes are processes and IPs. Use a community detection algorithm to find normal communication clusters; flag nodes or connections that are isolated or bridge communities in unexpected ways as potentially malicious."
          },
          {
            "description": "A temporal correlation is found where a host receives a unique, low-volume inbound packet, followed within minutes by a critical system state change, such as the audit log being cleared (Event ID 1102) or system audit policies being modified (Event ID 4719).",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 1102",
              "Windows Event ID 4719"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controller security logs, Endpoint security logs, Network gateway logs",
            "action": "Implement cross-source correlation. First (Symbolic): Create a rule that alerts if a Windows Event ID 1102 (Log Cleared) or 4719 (Audit Policy Change) occurs on a host within 5 minutes of it receiving an external inbound connection on a non-standard port, as seen in Zeek conn.log. Second (Statistical): For each host, calculate the entropy of inbound source IP/port pairs over a rolling window. Alert if a sharp spike in entropy (indicating a unique, targeted packet) is followed by a critical system event. Third (Machine Learning): Use a Bayesian network that models the conditional probabilities between network events and host state changes. An observation of a low-probability sequence, P(LogCleared | AnomalousPacket), would generate a high-confidence alert."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary establishing command and control via socket filters?",
    "tactic_id": "TA0011",
    "tactic_name": "Command-And-Control",
    "indicators": [
      {
        "technique_id": "T1205.002",
        "name": "Socket Filters",
        "evidence": [
          {
            "description": "An inbound connection is recorded where the source IP matches a known C2 threat intelligence feed and the connection's low-level characteristics (port, protocol, packet size) match a documented 'magic packet' signature for malware that uses socket filters.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Threat Intelligence Platform (TIP) data, Internet-facing network sensors, SIEM alert queue",
            "action": "Scan all inbound network traffic in near-real time. First (Symbolic): Generate a high-severity alert when Zeek conn.log shows an inbound connection where the source IP is on a C2 watchlist AND the destination port and protocol match a known socket filter trigger pattern. Second (Statistical): For connections from suspicious (but unconfirmed) IPs, flag transactions where a very small inbound packet (bottom 1st percentile of size) is followed by a large outbound data flow (top 90th percentile), indicating a potential trigger-and-exfil C2 pattern. Third (Machine Learning): Use a supervised classifier trained on connection features and IP reputation to produce a probabilistic score for C2 likelihood, alerting on high scores."
          },
          {
            "description": "Following a suspected trigger packet, the target host initiates DNS queries for domains with high entropy, excessive length, or other characteristics of algorithmically generated domains (DGAs), especially from a process not typically associated with making network requests.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DNS resolvers/servers, Endpoint process logs, Network egress points",
            "action": "Correlate network triggers with DNS activity. First (Symbolic): After a suspected trigger packet hits a host, monitor its DNS requests (Zeek dns.log) for 60 seconds. Alert if a query is for a domain longer than 100 characters or has a name matching a known DGA pattern. Second (Statistical): For each process, baseline the Shannon entropy of its DNS queries. Alert if a process's query entropy suddenly exceeds the 98th percentile of its historical baseline immediately after a potential trigger event. Third (Machine Learning): Use a time-series forecasting model (e.g., ARIMA) on DNS query volume and characteristics per host. Alert if observed DNS traffic post-trigger significantly deviates from the forecast."
          },
          {
            "description": "A process creation event for a command shell (e.g., cmd.exe, powershell.exe) with reverse shell syntax in its arguments occurs within seconds of an inbound network connection to a port on the same host that has no legitimate listening service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical server process logs, Endpoint process logs, Correlated SIEM logs",
            "action": "Implement a tight time-window correlation analytic. First (Symbolic): Alert if Event ID 4688 logs the creation of powershell.exe with '-enc' or 'IEX' arguments within 5 seconds after Zeek conn.log records an inbound connection to that host on a non-listening, high-numbered port. Second (Statistical): Baseline parent-child process relationships across the environment. Alert if a rare relationship (e.g., frequency < 0.1%) like `some_service.exe` -> `cmd.exe` occurs, especially when temporally linked to an anomalous network event. Third (Machine Learning): Use a graph-based anomaly detection model on process lineage. If a trigger packet is followed by a process creation event that forms a rare or previously unseen process subgraph, flag it as a potential reverse shell activation."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]