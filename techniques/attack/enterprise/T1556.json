[
  {
    "information_requirement": "Is the adversary establishing persistence by modifying authentication processes?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556",
        "name": "Modify Authentication Process",
        "evidence": [
          {
            "description": "A new DLL file is created on a critical system and subsequently loaded by lsass.exe, where the file's hash matches a known malicious tool used for authentication modification (e.g., a malicious LSA notification package).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Federation Services (ADFS) Servers, Critical Application Servers, Privileged Access Workstations (PAWs)",
            "action": [
              "Symbolic: Create a detection rule that triggers when a file creation event (Sysmon Event ID 11) in a system directory (e.g., C:\\Windows\\System32\\) is immediately followed by an image load event (Sysmon Event ID 7) for the same file by the `lsass.exe` process. Correlate the file hash against a threat intelligence feed of known malicious password filters and LSA packages.",
              "Statistical: For all DLLs loaded by `lsass.exe`, calculate the environmental prevalence (stack count) of each file hash. Flag any DLL with a prevalence below a dynamic threshold (e.g., present on <1% of endpoints) for further analysis. Additionally, calculate the Shannon entropy of the file; flag files with unusually high entropy scores, which may indicate packing or encryption.",
              "Machine Learning: Train a time-series model (e.g., ARIMA) on the frequency of `lsass.exe` image load events per host. An anomalous spike in the number of new or unique DLLs being loaded by `lsass.exe` on a given system, especially a Domain Controller, should be flagged as a potential persistence attempt."
            ]
          },
          {
            "description": "A registry modification event is observed for `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages` or `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages` where the value is changed to include a path to a non-standard or recently created DLL.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Windows Servers hosting critical services, System Registry Hives",
            "action": [
              "Symbolic: Create a detection rule that alerts when a registry set event (Sysmon Event ID 13 or Windows Event ID 4657) modifies the values within `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages` or `...\\Security Packages`. The rule should check if the new DLL path is not in a pre-defined allowlist of legitimate system DLLs.",
              "Statistical: Establish a baseline of all DLLs listed in the LSA Notification and Security Packages registry keys across the enterprise. Calculate the prevalence of each DLL. Any DLL with a prevalence below a set threshold (e.g., seen in less than 5% of baselines) or any new addition to the registry value that deviates from the established baseline for that host's role should be flagged.",
              "Machine Learning: Use a one-class SVM or isolation forest model trained on legitimate LSA package registry values (including the process that made the change, e.g., `reg.exe` initiated by a known patching process). Any new modification that the model classifies as an outlier, based on features like the source process name, user context, and the path of the new DLL, should be alerted on as suspicious."
            ]
          },
          {
            "description": "A successful logon event (e.g., interactive, network) occurs on a critical system, but lacks corresponding network authentication protocol traffic (e.g., Kerberos, NTLM) from the source IP within a small time window, suggesting a potential bypass mechanism is in use.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek krb5.log",
              "Zeek ntlm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, VPN Concentrators, Network Egress/Ingress Points",
            "action": [
              "Symbolic: For every successful Windows Logon Event (ID 4624, Type 3/10) on a server, create a rule to query network logs (Zeek `krb5.log`, `ntlm.log`) for a corresponding authentication event from the source IP to the server IP within a 5-second window. Alert if no corresponding network authentication event is found.",
              "Statistical: For each user account, calculate the historical dormancy period (time since last logon). If an account is dormant for over 90 days and then suddenly exhibits regular, periodic logon activity, flag it. Use a moving average to compute the logon frequency and alert when it exceeds two standard deviations above the user's historical baseline.",
              "Machine Learning: Implement a peer group analysis model. Group users by role or department. For each logon event, create a feature vector (e.g., time of day, source IP geolocation, logon type). If a user's logon behavior deviates significantly from the cluster centroid of their peer group (e.g., using Mahalanobis distance), flag it as anomalous, especially if it follows an alert for a potential authentication process modification."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by modifying authentication processes?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense-Evasion",
    "indicators": [
      {
        "technique_id": "T1556",
        "name": "Modify Authentication Process",
        "evidence": [
          {
            "description": "A registry modification event is observed for `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\LsaCfgFlags` where the DWORD value is set to `2`, indicating a direct attempt to disable Windows Defender Credential Guard.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4608",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints with Credential Guard enabled, Domain Controllers, System Registry Hives",
            "action": [
              "Symbolic: Create a high-severity alert that triggers if the registry value `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\LsaCfgFlags` is modified to a DWORD value of `2` (Sysmon Event ID 13 or Windows Event ID 4657). This is a highly specific indicator of an attempt to disable Credential Guard.",
              "Statistical: Baseline the value of `LsaCfgFlags` across all systems where Credential Guard is expected to be enabled. Run a periodic query to identify any hosts where the value deviates from the known-good baseline (e.g., value is not `1` or `0` as expected). Track the count of deviations over time to spot systemic misconfigurations or attacks.",
              "Machine Learning: Develop a state-change model. Correlate a `LsaCfgFlags` modification event with the process that initiated it (e.g., `reg.exe`, `powershell.exe`) and the subsequent system events (e.g., reboot event, Windows Event ID 4608). Use a sequence-based anomaly detection model (like an LSTM) to flag unusual sequences, such as a non-administrator process modifying the key followed by a forced reboot."
            ]
          },
          {
            "description": "An image load event for `lsass.exe` or `winlogon.exe` involves a DLL that is either unsigned or has a low prevalence in the environment. Separately, a Group Policy Object is modified to change an authentication-related setting to a less secure configuration (e.g., disabling NTLMv2, enabling LM hash storage).",
            "data_sources": [
              "Sysmon Event ID 7",
              "Windows Event ID 5136",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for GPO changes), All Windows Endpoints and Servers (for image loads), Group Policy Management Console",
            "action": [
              "Symbolic: Monitor image load events (Sysmon 7) into `lsass.exe` and `winlogon.exe`. Alert if the `Signed` field is 'false' and the `SignatureStatus` is not 'Valid'. Also, create a rule to detect GPO modifications (Windows Event ID 5136) where the `AttributeLDAPDisplayName` relates to authentication policies (e.g., `LMPolicy`, `NTLMLanman`) and the new value represents a weaker setting.",
              "Statistical: Build a stack count of all DLLs loaded by `lsass.exe` across the enterprise. Any DLL that falls below a rarity threshold (e.g., loaded on fewer than 10 machines) should be flagged for review. For GPO changes, calculate the rate of change for security-sensitive policies; a sudden burst of changes outside of a maintenance window should be investigated.",
              "Machine Learning: Use a classification model (e.g., Random Forest) to score the risk of a GPO change event. Features can include the user making the change, the time of day, the specific policy being modified, and whether the change weakens security. Train the model on historical data labeled by security experts. Changes classified as high-risk should generate an alert."
            ]
          },
          {
            "description": "A successful logon event is recorded for a user account enforced by MFA, but no corresponding success log is found in the MFA provider's logs for that user within a defined time window. Additionally, a process not on an established allowlist (e.g., `svchost.exe`, `wininit.exe`) requests high-privilege access to the `lsass.exe` process memory.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4624",
              "MFA Provider Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators, Cloud Service Authentication Logs (e.g., Azure AD), Domain Controllers, Privileged Endpoints",
            "action": [
              "Symbolic: For every successful remote logon (Windows Event ID 4624, Type 10) for an MFA-enforced user, require a matching success event in the MFA provider logs from the same source IP within 60 seconds. If no match is found, alert. Also, alert on any process access to `lsass.exe` (Sysmon 10) where the `GrantedAccess` code includes `0x1000` (PROCESS_VM_READ) and the `SourceImage` is not a known, legitimate system process.",
              "Statistical: Profile the typical processes that access `lsass.exe` on different host types (workstation, DC, web server). Build a frequency distribution (stack count) of `SourceImage` paths. Any process accessing `lsass.exe` that is rare (e.g., in the bottom 5th percentile of frequency) should be flagged as anomalous.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on `lsass.exe` access events, with features like `SourceImage`, `GrantedAccess`, parent process, and user context. Legitimate access patterns will form dense clusters. Any access event that is marked as noise by the algorithm is a strong candidate for a defense evasion or credential access attempt."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary gaining credentials by modifying authentication processes?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential-Access",
    "indicators": [
      {
        "technique_id": "T1556",
        "name": "Modify Authentication Process",
        "evidence": [
          {
            "description": "A file is created in a system directory (e.g., `C:\\Windows\\System32`), its hash matches a known credential dumping utility's authentication package (e.g., Mimikatz's `memssp.dll`), and a subsequent registry modification adds this file to an LSA Security or Notification package.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, System Registry Hives, File System (System32)",
            "action": [
              "Symbolic: Create a high-fidelity detection that chains three events: 1. A file creation (Sysmon 11) in `C:\\Windows\\System32\\`. 2. The hash of the file matches a known malicious credential harvesting DLL. 3. A registry modification (Sysmon 13) to `HKLM\\SYSTEM\\...\\Lsa\\*` keys adds the path of the newly created file.",
              "Statistical: Calculate the Shannon entropy of all new DLLs written to system directories. Malicious DLLs used for credential harvesting are often packed and may have a higher entropy score than legitimate system DLLs. Alert when a new DLL is registered as an LSA package and its entropy is in the top 95th percentile of all DLLs on the system.",
              "Machine Learning: Train a supervised classification model (e.g., XGBoost) to predict if a newly registered LSA package is malicious. Features should include file properties (entropy, size, signature status), the name of the process that wrote the file, the name of the process that modified the registry, and the time difference between file creation and registry modification. The model can be trained on known malware samples and legitimate software installers."
            ]
          },
          {
            "description": "An audit event is generated showing that the `userAccountControl` attribute for one or more user accounts was modified to enable the 'Password not required' or 'Store password using reversible encryption' flag. This may also be observed as a GPO modification affecting a larger set of accounts.",
            "data_sources": [
              "Windows Event ID 5136",
              "Windows Event ID 4738",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Database (NTDS.dit), Group Policy Objects",
            "action": [
              "Symbolic: Create a high-priority alert for any occurrence of Windows Event ID 4738 where the `userAccountControl` attribute change includes 'Password not required' or 'Store password using reversible encryption'. Also, alert on PowerShell logs (Event ID 4104) containing `Set-ADUser` or `Set-ADAccountControl` with the `-AllowReversiblePasswordEncryption $true` parameter.",
              "Statistical: Monitor the rate of change for the `userAccountControl` attribute across all accounts. A sudden spike in modifications, especially from a single administrative account or source host, is anomalous. Calculate the baseline rate of these changes per day and alert if the count exceeds 3 standard deviations from the mean.",
              "Machine Learning: Use peer group analysis on administrative accounts. Model the typical types of changes each admin performs. If an admin who normally only performs user creation tasks suddenly modifies the `userAccountControl` attribute for a privileged account to enable reversible encryption, flag this as a behavioral anomaly inconsistent with their role's typical activity profile."
            ]
          },
          {
            "description": "A process with a low prevalence across the enterprise writes a new DLL file to a system directory, and within a short time window (< 1 minute), a registry key is modified to register that DLL as an LSA Notification Package or Password Filter.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Servers, System Registry Hives, Temporary/User Profile Directories (as staging locations)",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a process creation event (Sysmon 1) is followed by a file creation event (Sysmon 11) for a DLL, and then a registry set event (Sysmon 13) for an LSA package pointing to that DLL, all occurring within 60 seconds and initiated by the same Process GUID.",
              "Statistical: For the behavior described in the symbolic rule, add a statistical condition. Score the rarity of the parent process. If the process image path (from Sysmon 1) has a prevalence of less than 5% across the enterprise, significantly increase the risk score of the alert. A rare process performing this sensitive sequence of actions is highly suspicious.",
              "Machine Learning: Use a graph-based anomaly detection model. Create a graph where nodes are processes, files, and registry keys, and edges represent actions (writes, modifies). A legitimate software installation might create a large, complex graph. A malicious actor's actions might create a small, linear graph (Process -> writes -> DLL -> modifies -> Registry Key). Flag small, high-velocity subgraphs involving these critical assets as malicious."
            ]
          },
          {
            "description": "Network traffic analysis reveals authentication protocols being downgraded to weaker versions (e.g., NTLMv1, LM) or the presence of cleartext credentials in unexpected protocols, subsequent to an alert for a potential authentication process modification on a host.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ntlm.log",
              "Zeek dce_rpc.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic to/from Domain Controllers, Network traffic to external/untrusted networks, Network choke points",
            "action": [
              "Symbolic: Create a rule that triggers when Zeek's `ntlm.log` shows `success = T` but the detected NTLM version is 'v1'. Correlate this with the source or destination host having a recent alert for authentication process modification. This indicates a successful downgrade attack.",
              "Statistical: Profile the distribution of NTLM versions (`ntlm.log`) and Kerberos encryption types (`krb5.log`) across the network. Establish a baseline where NTLMv2 and AES256 are expected. Alert if the percentage of NTLMv1 or RC4-HMAC authentications suddenly increases above a statistical threshold (e.g., > 1% of total authentications) over a 1-hour window.",
              "Machine Learning: Apply a time-series anomaly detection model to network traffic volume (bytes_in/bytes_out in `conn.log`) originating from authentication servers. After a potential compromise (e.g., installation of a malicious password filter), an adversary might exfiltrate captured credentials, causing a spike in outbound traffic that a model like Prophet or an LSTM autoencoder could detect as anomalous compared to the established daily/weekly seasonality."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]