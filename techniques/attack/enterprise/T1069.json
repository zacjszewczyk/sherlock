[
  {
    "information_requirement": "Has the adversary attempted to discover permission groups or settings within the network? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1069",
        "name": "Permission Groups Discovery",
        "evidence": [
          {
            "description": "A process is created with a file hash or name matching a known discovery tool (e.g., BloodHound, SharpHound), or a common system utility (e.g., net.exe) is executed from a non-standard directory (e.g., %TEMP%, user download folders).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": "1. Symbolic: Create a watchlist of file names (e.g., bloodhound.exe, sharphound.exe, AdExplorer.exe) and known malicious file hashes. Query Windows Event ID 4688 logs for process creations matching this list. 2. Statistical: For common utilities like net.exe and whoami.exe, build a statistical baseline of legitimate execution paths. Calculate the rarity of a given path using frequency analysis and flag executions where the path rarity exceeds the 99th percentile (e.g., execution from C:\\Users\\Public\\). 3. Machine Learning: Train a decision tree classifier on labeled historical process execution data (Event ID 4688). Use features such as process name, parent process name, command-line length, command-line entropy, and the statistical path rarity score. Use the model to classify new process executions as benign or suspicious."
          },
          {
            "description": "A command line or PowerShell script block contains specific strings indicative of group enumeration, such as 'net group /domain', 'Get-ADGroupMember', or 'Get-Acl'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, PowerShell Gateways/Logging Servers",
            "action": "1. Symbolic: Use regular expressions to search Windows Event ID 4688 (Process Command Line) and 4104 (Script Block Text) for specific enumeration commands and cmdlets (e.g., 'net group', 'net user', 'net localgroup', 'Get-ADGroupMember', 'Get-Acl', 'whoami /groups'). 2. Statistical: For each user, establish a baseline for the frequency and variety (Shannon entropy) of these enumeration commands over a 30-day rolling window. Trigger an alert if a user's daily command count exceeds three standard deviations above their mean, or if the entropy of commands used in a single session is unusually high. 3. Machine Learning: Use a time-series anomaly detection model (e.g., ARIMA) on the aggregate count of enumeration commands per hour across the enterprise. The model learns the normal rhythm of administrative activity and generates an alert when the observed command volume significantly deviates from the model's forecast."
          },
          {
            "description": "Execution of container orchestration commands, such as kubectl or docker, to enumerate permissions or access controls within Windows-based container environments.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container Host Servers (Windows), Kubernetes Master Nodes, CI/CD Pipeline Servers",
            "action": "1. Symbolic: Monitor Event ID 4688 for process creations of kubectl.exe or docker.exe with command-line arguments matching a watchlist of enumeration commands, such as 'auth can-i --list', 'get rolebindings', 'get clusterrolebindings', and 'docker inspect'. 2. Statistical: Profile the frequency of these commands per user and source host. Calculate the 95th percentile for the number of 'kubectl auth' commands executed by a single user within an hour and alert when breached. Also, track the count of distinct namespaces or containers targeted by a user in a session; a count exceeding 2 standard deviations from the user's norm is suspicious. 3. Machine Learning: Apply an unsupervised learning algorithm like K-Means clustering to kubectl command logs. Cluster sessions based on features like command frequency, command diversity, and source IP. Analyze clusters that are small and distant from the main 'benign admin activity' cluster, as these are likely to represent anomalous enumeration sessions."
          },
          {
            "description": "A non-administrative user account enumerates privileged groups (e.g., 'Domain Admins'), or any account performs enumeration at a time or frequency that is statistically unusual for that account or its peer group.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4798",
              "Windows Event ID 4799"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Federation Services (ADFS), Certificate Authority Servers",
            "action": "1. Symbolic: Create a rule that alerts when the 'Account Name' in Event ID 4798 (local group membership enumerated) or 4799 (domain group membership enumerated) is not on a pre-defined list of authorized administrative accounts, especially when the 'Group Name' is highly privileged (e.g., 'Domain Admins', 'Enterprise Admins'). 2. Statistical: Model each user's enumeration activity (events 4798, 4799) using a time-of-day/day-of-week histogram. Alert if activity occurs in a time bucket with a historically zero or very low frequency for that user's role-based peer group (e.g., a finance user enumerating groups on a Saturday). 3. Machine Learning: Use a One-Class SVM model trained on features from benign administrative sessions (e.g., user, source host, target group, time of day). This model creates a boundary around 'normal' enumeration activity. Any new event that falls outside this boundary is classified as an anomaly."
          },
          {
            "description": "A T1069 discovery event from a specific user/host pair is followed within a 60-minute window by a credential access (e.g., T1003) or lateral movement (e.g., T1021.002) event originating from the same user or host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4798",
              "Windows Event ID 4799",
              "Windows Event ID 4624",
              "Windows Event ID 4648",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Entire Enterprise Network (via SIEM correlation), Key Lateral Movement Paths (e.g., workstation-to-server)",
            "action": "1. Symbolic: Implement a SIEM correlation rule: IF (event matches T1069 for user U on host H) AND (within 60 minutes, an event matching T1003 or T1021.002 occurs with user U or from host H), THEN generate a high-severity alert. Correlate with Zeek conn.log to confirm the network path. 2. Statistical: Calculate the conditional probability P(Technique B | T1069) for all techniques based on historical alert data. Identify low-probability sequences (e.g., P(T1021.002 | T1069) is <0.01 for a given user role). If a T1069 event is followed by a statistically unlikely technique from the same entity, elevate the risk score. 3. Machine Learning: Use a graph-based algorithm to model attack chains. Nodes represent hosts and users, and edges represent actions (techniques). When a T1069 event occurs, create an edge. As subsequent events occur (e.g., T1021), add more edges. A path-finding algorithm can identify and score attack paths in real-time, classifying a sequence of individually low-fidelity events as a high-confidence attack chain."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]