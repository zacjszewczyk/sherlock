[
  {
    "information_requirement": "Is an adversary exploiting remote services for lateral movement within the enterprise network? (PIR)",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1210",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "Network traffic from a single source to a single destination contains specific byte patterns, sequences, or payloads matching signatures of known exploits for services like SMB (e.g., CVE-2017-0144 'EternalBlue'), RDP (e.g., CVE-2019-0708 'BlueKeep'), or VMware vCenter (e.g., CVE-2021-21985).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dce_rpc.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeter, DMZ, and East-West traffic sensors monitoring critical server segments.",
            "action": [
              "Symbolic: Deploy and monitor Network Intrusion Detection System (NIDS) signatures that match known exploit payloads. Correlate NIDS alerts with Zeek conn.log data by joining on the 4-tuple (source IP, source port, destination IP, destination port) and timestamp to investigate the full session context of any potential exploit attempt.",
              "Statistical: For a given service port (e.g., 445/tcp), establish a baseline of normal connection durations and data volumes (orig_bytes, resp_bytes) per host. Alert when a new connection's duration or volume exceeds the 99th percentile of the historical baseline for that specific host-service pair, which could indicate an exploit payload delivery or manipulation.",
              "Machine Learning: Train a supervised classification model (e.g., Gradient Boosting) on labeled PCAP data to identify malicious traffic patterns that do not have a known signature. Features can include packet lengths, inter-arrival times, protocol flags, and payload entropy. Apply the model to live or logged network flows to flag suspicious connections for further analysis."
            ]
          },
          {
            "description": "A process is created with a command line containing patterns characteristic of remote administration or lateral movement tools like PsExec, WMIC, or Impacket scripts (e.g., wmiexec.py, smbexec.py).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 5145"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, application servers, management servers (e.g., vCenter), and high-value user endpoints.",
            "action": [
              "Symbolic: Create a detection rule to search Windows Event ID 4688 (Process Creation) logs for command lines containing 'wmic /node:', 'process call create', or 'PSEXESVC.exe'. Also, monitor for Windows Event ID 4697 (A service was installed) for service names like 'PSEXESVC'.",
              "Statistical: Establish a baseline of all command-line arguments and process names seen in the environment. Calculate the rarity of each command-line argument string. Flag any command line whose rarity score is in the bottom 1st percentile (i.e., extremely rare) for investigation, especially if executed by a network service account.",
              "Machine Learning: Use a sequence analysis model to analyze the sequence of process creations on a host following an inbound remote service connection. Train a model (e.g., an LSTM Autoencoder) on benign sequences. Flag any sequence that has a high reconstruction error, indicating it deviates significantly from normal operational workflows."
            ]
          },
          {
            "description": "A parent process associated with a network service (e.g., services.exe, lsass.exe, svchost.exe, inetinfo.exe) spawns a child process not typically associated with its function, such as cmd.exe, powershell.exe, or whoami.exe.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical service hosts such as Domain Controllers, Exchange servers, SharePoint servers, and web servers.",
            "action": [
              "Symbolic: Create a high-fidelity alert for any process creation event (Windows Event ID 4688) where the parent process name is 'lsass.exe'. Create a lower-fidelity alert where the parent process is 'services.exe' or a network-facing 'svchost.exe' and the child process is 'cmd.exe' or 'powershell.exe'.",
              "Statistical: For each parent process (e.g., 'services.exe'), maintain a frequency count of all child processes it has spawned over a 30-day baseline. Alert when a parent-child relationship occurs that has never been seen before or is in the lowest 1% frequency quantile for that parent, indicating a statistically rare event.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from process creation events (Parent Process Name, Child Process Name, Command Line Length, Command Line Entropy, User Account). Use the model to predict whether a given parent-child pair is malicious. This can identify novel combinations that evade simple rule-based detections."
            ]
          },
          {
            "description": "A service on a host crashes or logs multiple errors (e.g., Windows Event ID 7031, 7034, 1000) within a short time window immediately following a spike in inbound connection attempts to that service's port.",
            "data_sources": [
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Windows Event ID 1000",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Externally-facing application servers and internal servers running potentially vulnerable or legacy remote services.",
            "action": [
              "Symbolic: Trigger an alert if a Windows Event ID 7031, 7034, or 1000 is logged for a critical service (e.g., TermService, Server service) within 5 minutes of a connection from an untrusted IP address being logged in Zeek conn.log to that service's port.",
              "Statistical: For each host, monitor the rate of service error events (e.g., sum of 7031, 7034, 1000 per hour). Use a moving average to establish a baseline. Alert if the current error rate exceeds 3 standard deviations above the 24-hour moving average. Correlate this alert with a corresponding spike in connection attempts from a single source IP.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., SARIMA or LSTM autoencoder) on two parallel data streams for a given host: 1) the count of inbound connections to a specific port per minute, and 2) the count of service error events per minute. An anomaly detected across both series in close succession indicates a likely cause-and-effect relationship from exploit attempts."
            ]
          },
          {
            "description": "A host that recently received a connection to a remote service begins network scanning activity, defined as initiating connections to a high number of unique internal IP addresses or ports in a short period.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and traffic sensors monitoring East-West traffic between internal subnets.",
            "action": [
              "Symbolic: Alert when a single source IP initiates connections to >20 unique destination IPs on a common lateral movement port (e.g., 445, 139, 3389, 5985) within a 1-minute window. This is a classic 'scan' detection.",
              "Statistical: For each source IP, calculate the Shannon entropy of the destination IP addresses it connects to over a 5-minute sliding window. Establish a per-host baseline for this entropy value. Alert when a host's entropy value suddenly increases by more than 2 standard deviations from its 24-hour baseline, indicating a shift from targeted communication to widespread scanning.",
              "Machine Learning: Use a density-based clustering algorithm like DBSCAN on network connection logs, using features like source IP, destination IP, and destination port. Normal, routine traffic will form dense clusters. A compromised host acting as a scanner will appear as a set of 'noise' points or a sparse cluster, as it connects from one source to many disparate destinations, deviating from established clusters."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]