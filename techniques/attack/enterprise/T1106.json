[
  {
    "information_requirement": "Is an adversary using native OS APIs to execute malicious code? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1106",
        "name": "Native API",
        "evidence": [
          {
            "description": "A process creation or module load event contains a file hash (MD5, SHA1, SHA256) that is present on an active threat intelligence feed of known malware.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.",
            "action": [
              "Symbolic: Continuously compare the file hashes from process creation (Sysmon Event ID 1, Windows Event ID 4688) and module load (Sysmon Event ID 7) events against a threat intelligence database of known-malicious hashes. Generate a high-priority alert upon any match.",
              "Statistical: For processes with hashes not found in threat intelligence, calculate the prevalence of each hash across the enterprise over a 30-day rolling window. Flag any hash present on a small number of hosts (e.g., fewer than 5, or below the 5th percentile of prevalence) for further investigation, especially if the parent process is anomalous (e.g., winword.exe).",
              "Machine Learning: Apply a pre-trained file hash reputation model (e.g., a gradient boosting classifier) that scores new, unknown hashes based on static and dynamic analysis features. Prioritize high-score events for analyst investigation when a static IOC match is not found."
            ]
          },
          {
            "description": "A legitimate system binary (e.g., rundll32.exe, regsvr32.exe) is executed with command-line arguments containing indicators of malicious use, such as network protocol schemes (http, ftp), encoded commands, or references to script files in unusual locations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.",
            "action": [
              "Symbolic: From process creation logs with command-line logging (Sysmon Event ID 1), apply regular expressions to detect known malicious patterns for LOLBAS, such as `rundll32.exe javascript:...`, `regsvr32 /s /i:http...`, or `powershell -enc`. Generate an alert on any match.",
              "Statistical: For each major LOLBAS, establish a baseline of normal command-line argument patterns. Calculate the length and Shannon entropy of all command-line arguments. Flag executions where the entropy or length exceeds a dynamic threshold (e.g., 95th percentile or 3 standard deviations above the mean for that specific LOLBAS) as potential obfuscation.",
              "Machine Learning: For each LOLBAS, tokenize its command-line arguments and use a clustering algorithm (e.g., DBSCAN) to group them into clusters of benign usage. Identify and alert on executions classified as noise/outliers or forming new, small clusters, as these represent novel or rare usage patterns."
            ]
          },
          {
            "description": "A process requests a handle to another process with high-risk access rights (e.g., PROCESS_VM_WRITE, PROCESS_CREATE_THREAD, PROCESS_ALL_ACCESS), and the source-target process pair is historically uncommon or suspicious.",
            "data_sources": [
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.",
            "action": [
              "Symbolic: Create a rule to alert whenever a non-security, non-debugging process (e.g., `winword.exe`, `powershell.exe`) requests high-risk access rights (e.g., access mask `0x1F0FFF` for PROCESS_ALL_ACCESS) to a critical system process like `lsass.exe`, `csrss.exe`, or `wininit.exe`.",
              "Statistical: Build a frequency table of all (SourceImage, TargetImage, GrantedAccess) tuples from process access events (Sysmon Event ID 10) over a 30-day period. Score each new event based on its inverse frequency (rarity). Alert on events that exceed a rarity score threshold (e.g., top 1% rarest interactions) to detect unusual process interactions.",
              "Machine Learning: Model process interactions as a directed graph where nodes are processes and edges are handle requests weighted by access rights. Use a graph-based anomaly detection algorithm (e.g., GraphSAGE) to learn embeddings for normal process behavior. Identify and alert on interactions (edges) that the model flags as anomalous within the context of the learned graph structure."
            ]
          },
          {
            "description": "A command-line interpreter (e.g., cmd.exe, powershell.exe) or system utility is spawned by a parent process that does not typically initiate such activity, such as an office application, web browser, or system service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).",
            "action": [
              "Symbolic: Maintain and apply a denylist of parent-child process relationships that are highly indicative of malicious activity, such as `outlook.exe` spawning `cmd.exe`, `winword.exe` spawning `powershell.exe`, or `services.exe` spawning `rundll32.exe`. Generate a high-severity alert on any match.",
              "Statistical: From historical process creation logs (Sysmon Event ID 1), build a probability distribution of all parent-child process pairs in the environment. Alert when a new process creation event corresponds to a pair that falls below a rarity threshold (e.g., observed less than 0.01% of the time).",
              "Machine Learning: Train a classifier (e.g., Isolation Forest) on features derived from parent-child pairs (e.g., parent path, parent user context, child command-line entropy, child image path). Use the model to score each new process creation event; scores indicating a high degree of anomaly should be alerted on as potentially malicious behavior that evades simple rules."
            ]
          },
          {
            "description": "A newly created process from an unusual file path (e.g., temporary directory, high entropy name) initiates network connections to a rare external destination within a short time window after its creation.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, web-facing servers, and network egress points instrumented with Zeek.",
            "action": [
              "Symbolic: Correlate process creation events (Sysmon 1) with network connection events (Sysmon 3, Zeek conn.log) by ProcessGUID within a 60-second window. Generate an alert if a process created from a user-writable path (e.g., `C:\\Users\\*\\AppData\\`) connects to an IP address or domain on a threat intelligence blocklist.",
              "Statistical: For each new process, calculate the Shannon entropy of its image path. If the entropy exceeds a baseline threshold (e.g., 95th percentile), enrich its network connections with DNS query data (Zeek dns.log) and calculate the prevalence of the requested domain's public suffix + 1. A high-entropy path process connecting to a domain with very low prevalence (e.g., seen for the first time) is highly suspicious.",
              "Machine Learning: Use a time-series model to analyze the rate of network connections and file I/O events per process. Train the model to recognize normal application behavior (e.g., a software installation burst). Alert on patterns that deviate from this learned norm, such as the periodic, low-volume 'heartbeat' of C2 beaconing or a sudden, high-volume burst of file modifications characteristic of ransomware."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]