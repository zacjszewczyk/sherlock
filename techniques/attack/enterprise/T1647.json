[
  {
    "information_requirement": "Is an adversary evading defenses by modifying property list (plist) files to alter application behavior or hide execution?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1647",
        "name": "Plist File Modification",
        "evidence": [
          {
            "description": "A property list (.plist) file is created or modified, and its content contains strings (e.g., ProgramArguments, LSEnvironment) that match known-bad indicators of compromise (IOCs) such as malicious file paths, domains, or IP addresses.",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically user workstations and servers.",
            "action": [
              "Symbolic Logic: Scan the contents of newly created or modified .plist files in key directories (`~/Library/LaunchAgents`, `/Library/LaunchAgents`, `/Library/LaunchDaemons`, `~/Library/Preferences/com.apple.dock.plist`) for known-bad domains, IPs, file paths, or argument patterns from a threat intelligence feed.",
              "Statistical Method: For `ProgramArguments` in modified plists, calculate the n-gram frequency of argument components and flag plists containing statistically rare n-grams compared to a historical baseline of all plists in the environment.",
              "Machine Learning: Use a pre-trained text classification model to score the likelihood that the string values within a modified plist (e.g., `ProgramArguments`, `Label`) are malicious based on features learned from known-good and known-malicious plist files."
            ]
          },
          {
            "description": "A `Program` or `ProgramArguments` key within a modified .plist file specifies an executable path located in a directory statistically anomalous for application execution, such as temporary directories (`/tmp`, `/var/tmp`), user-shared spaces (`/Users/Shared/`), or hidden directories.",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.",
            "action": [
              "Symbolic Logic: Create and maintain a watchlist of non-standard executable directories (e.g., `/tmp/`, `/Users/Shared/`, `~/Downloads/`, `~/Documents/`). Alert when a modified plist's `Program` or `ProgramArguments` key points to an executable within one of these watched directories.",
              "Statistical Method: Build a baseline of all executable paths found in plists across the enterprise. For each new or modified plist, calculate the rarity of its executable's parent directory. Flag any plist pointing to a directory in the bottom 5th percentile of frequency.",
              "Machine Learning: Train a decision tree classifier on features of the executable path (e.g., directory depth, presence of special characters, parent directory name, if it's hidden) to classify new plist-specified paths as 'suspicious' or 'benign'."
            ]
          },
          {
            "description": "A modified .plist file's `ProgramArguments` key specifies a common scripting interpreter (e.g., `python`, `osascript`, `bash`, `zsh`, `perl`) followed by arguments exhibiting high entropy or obfuscation characteristics.",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.",
            "action": [
              "Symbolic Logic: Alert on any plist modification where `ProgramArguments` contains a script interpreter followed by suspicious command-line flags like `-c` (command), `-e` (eval), or arguments containing base64 encoded strings.",
              "Statistical Method: For any plist executing a script interpreter, calculate the Shannon entropy of the script content passed in the arguments. Compare the entropy score against a baseline for legitimate scripts. Flag any script argument whose entropy exceeds the 95th percentile of the baseline.",
              "Machine Learning: Use a clustering algorithm like DBSCAN on feature vectors derived from script arguments (e.g., length, entropy, character frequency, special character count). Investigate clusters that form separately from the large, dense cluster of benign scripts."
            ]
          },
          {
            "description": "A .plist file located in a persistence directory (`~/Library/LaunchAgents`, `/Library/LaunchDaemons`) is created or modified by a process not on an allowlist of legitimate software installers or system administration tools (e.g., modified by a browser, document reader, or email client).",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on process-to-file-write event correlation.",
            "action": [
              "Symbolic Logic: Maintain an allowlist of parent processes known to legitimately modify plists in persistence locations (e.g., `installer`, `softwareupdated`, `System Preferences`). Alert on any file modification to a plist in these locations by a process not on the list, especially user-facing applications like `Google Chrome`, `Preview`, or `Microsoft Word`.",
              "Statistical Method: For each process that modifies a plist in a key directory, track the frequency of that process name over time. Use a moving average to establish a baseline. Alert when a rare process (e.g., one not seen modifying plists in the last 90 days) performs a modification.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model on the features of legitimate plist modification events (e.g., parent process name, command line, user context). Use the trained model to identify any new plist modification events that are outliers."
            ]
          },
          {
            "description": "A process initiated by `launchd` (parent PID 1), corresponding to a recently modified .plist file, establishes an outbound network connection to a destination that is statistically rare or has a low reputation score.",
            "data_sources": [
              "macOS EDR Process Creation Logs",
              "macOS EDR File Modification Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all managed macOS endpoints.",
            "action": [
              "Symbolic Logic: Correlate process launch events (parent is `launchd`) with network connection logs (`Zeek conn.log`). If the process was launched from a plist modified in the last hour, check the destination IP/domain against a threat intelligence feed of known C2 servers. Alert on any match.",
              "Statistical Method: For processes launched by `launchd` from a recently modified plist, analyze associated DNS queries (`Zeek dns.log`). Calculate the domain's rarity based on enterprise-wide query frequency using a percentile rank. Alert on connections to domains in the bottom 1% of popularity.",
              "Machine Learning: Use time-series analysis on the volume of new processes launched by `launchd`. Create a forecast model (e.g., ARIMA) based on historical data. Alert when the observed volume of `launchd`-spawned processes exceeds the forecasted upper confidence interval."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has an adversary established persistence by modifying property list (plist) files?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1647",
        "name": "Plist File Modification",
        "evidence": [
          {
            "description": "A property list (.plist) file is created or modified, and its content contains strings (e.g., ProgramArguments, LSEnvironment) that match known-bad indicators of compromise (IOCs) such as malicious file paths, domains, or IP addresses.",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically user workstations and servers.",
            "action": [
              "Symbolic Logic: Scan the contents of newly created or modified .plist files in key persistence directories (`~/Library/LaunchAgents`, `/Library/LaunchAgents`, `/Library/LaunchDaemons`, `~/Library/Preferences/com.apple.dock.plist`) for known-bad domains, IPs, file paths, or argument patterns from a threat intelligence feed.",
              "Statistical Method: For `ProgramArguments` in modified plists, calculate the n-gram frequency of argument components and flag plists containing statistically rare n-grams compared to a historical baseline of all plists in the environment.",
              "Machine Learning: Use a pre-trained text classification model to score the likelihood that the string values within a modified plist (e.g., `ProgramArguments`, `Label`) are malicious based on features learned from known-good and known-malicious plist files."
            ]
          },
          {
            "description": "A `Program` or `ProgramArguments` key within a modified .plist file specifies an executable path located in a directory statistically anomalous for application execution, such as temporary directories (`/tmp`, `/var/tmp`), user-shared spaces (`/Users/Shared/`), or hidden directories.",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.",
            "action": [
              "Symbolic Logic: Create and maintain a watchlist of non-standard executable directories (e.g., `/tmp/`, `/Users/Shared/`, `~/Downloads/`, `~/Documents/`). Alert when a modified plist's `Program` or `ProgramArguments` key points to an executable within one of these watched directories.",
              "Statistical Method: Build a baseline of all executable paths found in plists across the enterprise. For each new or modified plist, calculate the rarity of its executable's parent directory. Flag any plist pointing to a directory in the bottom 5th percentile of frequency.",
              "Machine Learning: Train a decision tree classifier on features of the executable path (e.g., directory depth, presence of special characters, parent directory name, if it's hidden) to classify new plist-specified paths as 'suspicious' or 'benign'."
            ]
          },
          {
            "description": "A modified .plist file's `ProgramArguments` key specifies a common scripting interpreter (e.g., `python`, `osascript`, `bash`, `zsh`, `perl`) followed by arguments exhibiting high entropy or obfuscation characteristics.",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.",
            "action": [
              "Symbolic Logic: Alert on any plist modification where `ProgramArguments` contains a script interpreter followed by suspicious command-line flags like `-c` (command), `-e` (eval), or arguments containing base64 encoded strings.",
              "Statistical Method: For any plist executing a script interpreter, calculate the Shannon entropy of the script content passed in the arguments. Compare the entropy score against a baseline for legitimate scripts. Flag any script argument whose entropy exceeds the 95th percentile of the baseline.",
              "Machine Learning: Use a clustering algorithm like DBSCAN on feature vectors derived from script arguments (e.g., length, entropy, character frequency, special character count). Investigate clusters that form separately from the large, dense cluster of benign scripts."
            ]
          },
          {
            "description": "A .plist file located in a persistence directory (`~/Library/LaunchAgents`, `/Library/LaunchDaemons`) is created or modified by a process not on an allowlist of legitimate software installers or system administration tools (e.g., modified by a browser, document reader, or email client).",
            "data_sources": [
              "macOS EDR File Modification Logs",
              "macOS EDR Process Creation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on process-to-file-write event correlation.",
            "action": [
              "Symbolic Logic: Maintain an allowlist of parent processes known to legitimately modify plists in persistence locations (e.g., `installer`, `softwareupdated`, `System Preferences`). Alert on any file modification to a plist in these locations by a process not on the list, especially user-facing applications like `Google Chrome`, `Preview`, or `Microsoft Word`.",
              "Statistical Method: For each process that modifies a plist in a key directory, track the frequency of that process name over time. Use a moving average to establish a baseline. Alert when a rare process (e.g., one not seen modifying plists in the last 90 days) performs a modification.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model on the features of legitimate plist modification events (e.g., parent process name, command line, user context). Use the trained model to identify any new plist modification events that are outliers."
            ]
          },
          {
            "description": "A process initiated by `launchd` (parent PID 1), corresponding to a recently modified .plist file, establishes an outbound network connection to a destination that is statistically rare or has a low reputation score.",
            "data_sources": [
              "macOS EDR Process Creation Logs",
              "macOS EDR File Modification Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all managed macOS endpoints.",
            "action": [
              "Symbolic Logic: Correlate process launch events (parent is `launchd`) with network connection logs (`Zeek conn.log`). If the process was launched from a plist modified in the last hour, check the destination IP/domain against a threat intelligence feed of known C2 servers. Alert on any match.",
              "Statistical Method: For processes launched by `launchd` from a recently modified plist, analyze associated DNS queries (`Zeek dns.log`). Calculate the domain's rarity based on enterprise-wide query frequency using a percentile rank. Alert on connections to domains in the bottom 1% of popularity.",
              "Machine Learning: Use time-series analysis on the volume of new processes launched by `launchd`. Create a forecast model (e.g., ARIMA) based on historical data. Alert when the observed volume of `launchd`-spawned processes exceeds the forecasted upper confidence interval."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-09-30",
    "last_updated": "2025-09-30",
    "contributors": [
      "Ask Sage",
      "Zachary Szewczyk"
    ]
  }
]