[
  {
    "information_requirement": "Is the adversary maintaining persistence by creating or modifying udev rules?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.017",
        "name": "Udev Rules",
        "evidence": [
          {
            "description": "A udev rule file modification event is observed where the new file content includes a `RUN+=` directive containing a command matching a known malicious signature (e.g., reverse shell) or a path to an executable in a world-writable directory.",
            "data_sources": [
              "Sysmon for Linux Event ID 11 (FileCreate)",
              "Linux auditd logs (syscall=open,openat,creat)",
              "File content scans (YARA)",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.",
            "action": [
              "Symbolic: Create a SIEM rule that triggers on file modifications within udev rule directories (`/etc/udev/rules.d/`, `/run/udev/rules.d/`, etc.). Scan the file content using a regex like `RUN\\s*\\+=\\s*\".*(bash -i|nc -e|curl|wget|/tmp/|/var/tmp/|/dev/shm).*\"` to detect common suspicious commands and paths. Trigger a high-severity alert on match.",
              "Statistical: For each `RUN+=` command identified, calculate the Shannon entropy of the command string. Establish a baseline entropy score for legitimate commands found in rules installed by package managers. Alert on any command whose entropy score exceeds the 95th percentile of the baseline, as this can indicate obfuscation or encoded payloads.",
              "Machine Learning: Develop a time series anomaly detection model (e.g., Seasonal-Hybrid ESD) to monitor the frequency of udev rule modifications per host and across the environment. Train the model on a 30-day baseline of activity. Alert on spikes that deviate significantly from the established pattern of system updates and normal administrative activity, which could indicate a widespread persistence campaign."
            ]
          },
          {
            "description": "A file creation or modification event in a udev rules directory is initiated by a process not on an established allowlist of package managers (e.g., `dpkg`, `yum`, `rpm`, `apt`) or approved configuration management tools (e.g., `ansible`, `puppet`, `chef`).",
            "data_sources": [
              "Linux auditd logs (type=SYSCALL, key=udev_mod)",
              "Sysmon for Linux Event ID 11 (FileCreate)",
              "Sysmon for Linux Event ID 1 (ProcessCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers, Linux workstations, especially those managed by configuration management tools.",
            "action": [
              "Symbolic: Implement a SIEM correlation rule that triggers on a file modification event (Sysmon Event ID 11) in a udev rules directory. The rule must check if the initiating process name (e.g., `Image` field) is not on a pre-defined allowlist containing `dpkg`, `yum`, `rpm`, `apt-get`, `ansible`, `puppet`, `chef`, and other authorized administrative tools.",
              "Statistical: For each user account (e.g., `auid` in auditd, `User` in Sysmon), maintain a rolling 30-day count of udev rule modifications. Establish a baseline for each user (most will be zero). Alert when a user's modification count transitions from 0 to >0 for non-admin users, or when any user's activity exceeds two standard deviations from their own or a peer group's baseline.",
              "Machine Learning: Train a classification model (e.g., Random Forest) to label each udev rule modification event as 'benign' or 'suspicious'. Use features from the event logs, such as `process_name`, `parent_process_name`, `user_id`, `terminal_attached` (e.g., `TerminalSessionId`), `time_of_day`, and `day_of_week`. Route events classified as 'suspicious' to an analyst queue for investigation."
            ]
          },
          {
            "description": "A process creation event is observed where the parent process is `systemd-udevd` and the child process is an unauthorized interpreter (e.g., `bash`, `python`) or initiates an outbound network connection to a destination not on an established allowlist.",
            "data_sources": [
              "Sysmon for Linux Event ID 1 (ProcessCreate)",
              "Sysmon for Linux Event ID 3 (NetworkConnect)",
              "Linux auditd logs (type=EXECVE)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.",
            "action": [
              "Symbolic: Create a SIEM rule that triggers when a process is created (Sysmon Event ID 1) with `ParentImage` ending in `/systemd-udevd`. Alert if the child `Image` is an interpreter (e.g., `/bin/bash`, `/usr/bin/python`) or if the child process ID subsequently generates a network connection event (Sysmon Event ID 3 or Zeek conn.log) to a destination IP on a threat intelligence blocklist.",
              "Statistical: For all processes spawned by `systemd-udevd`, build a frequency distribution (a baseline) of child process names and their command-line arguments. Alert when a process name appears that is statistically rare (e.g., not in the top 99% of common processes). Additionally, calculate the Jaccard similarity between the command-line arguments of a new process and the arguments of known-good processes; a low similarity score indicates a potential anomaly.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on process execution events where the parent is `systemd-udevd`. The feature set should include `process_name` (one-hot encoded), `command_line_entropy`, a boolean `has_network_connection` flag, `destination_port_category` (e.g., well-known, ephemeral), and `destination_ip_rarity_score`. Clusters identified as noise or outliers represent anomalous executions that warrant investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation by creating or modifying udev rules?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.017",
        "name": "Udev Rules",
        "evidence": [
          {
            "description": "A udev rule file is created or modified to include a `RUN+=` directive containing commands or arguments explicitly used for privilege escalation, such as setting the SUID bit on a file (`chmod u+s`), modifying user or password files (`/etc/passwd`), or altering sudoer permissions.",
            "data_sources": [
              "File content scans (YARA)",
              "Sysmon for Linux Event ID 11 (FileCreate)",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.",
            "action": [
              "Symbolic: Deploy a YARA rule or SIEM search to scan the content of modified udev rule files. The rule must search for `RUN+=` directives containing high-confidence privilege escalation strings, such as `chmod u+s`, `chmod 4755`, `/etc/passwd`, `/etc/shadow`, `NOPASSWD:`, `useradd`, `usermod`, or `setcap`. Trigger a critical alert on any match.",
              "Statistical: Calculate TF-IDF (Term Frequency-Inverse Document Frequency) scores for all tokens within `RUN+=` commands across the environment's udev rules to establish a baseline. Alert on any new or modified rule containing tokens that have a high TF-IDF score (indicating rarity) and are also present on a watchlist of privilege escalation keywords. This highlights commands where a sensitive term is unusually prominent.",
              "Machine Learning: Train a text classification model (e.g., a fine-tuned DistilBERT) to categorize the intent of `RUN+=` commands. Use a labeled dataset of shell commands categorized as 'device-setup', 'logging', 'privilege-escalation', etc. Deploy the model to classify new udev rule commands in near real-time and alert on any command classified as 'privilege-escalation'."
            ]
          },
          {
            "description": "A udev rule file modification event is observed where the `RUN+=` directive specifies the execution of a file located in a world-writable directory such as `/tmp`, `/var/tmp`, or `/dev/shm`.",
            "data_sources": [
              "Sysmon for Linux Event ID 11 (FileCreate)",
              "Linux auditd logs (type=SYSCALL)",
              "File content scans"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.",
            "action": [
              "Symbolic: Create a SIEM rule that parses the command within any `RUN+=` directive from a modified udev rule file. Use a regular expression like `RUN\\s*\\+=\\s*\".*(/tmp/|/var/tmp/|/dev/shm/).*\"` to extract the executable path and alert if that path resides in a world-writable directory.",
              "Statistical: For any udev rule that points to a script or binary, analyze the file permissions of the target executable. Maintain a baseline of typical permission sets for executables called by udev. Alert if a `RUN+=` directive points to a file that has a statistically rare combination of attributes, such as being world-writable (`-rw-rw-rw-`) and located in a non-standard path.",
              "Machine Learning: Use a cross-correlation time series analysis. Monitor two time series: 1) the rate of file creation events (Sysmon ID 11) in world-writable directories, and 2) the rate of udev rule modifications. A high correlation score with a short time lag (e.g., under 5 minutes) between a spike in series 1 and a spike in series 2 strongly suggests a payload staging and privilege escalation mechanism setup."
            ]
          },
          {
            "description": "A process creation event is observed where the parent process is `systemd-udevd`, the effective user ID is 0 (root), and the child process subsequently performs high-impact actions like writing to system configuration files, creating a user, or initiating a reverse shell.",
            "data_sources": [
              "Sysmon for Linux Event ID 1 (ProcessCreate)",
              "Sysmon for Linux Event ID 3 (NetworkConnect)",
              "Sysmon for Linux Event ID 11 (FileCreate)",
              "Linux auditd logs (syscalls)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts with root access; Network egress points for outbound traffic analysis.",
            "action": [
              "Symbolic: Create a stateful SIEM rule that triggers when a process is created (Sysmon Event ID 1) with `ParentImage` as `systemd-udevd` and `User` as `root`. The rule should then track the child process ID for subsequent suspicious events: Sysmon ID 11 (FileCreate) with `TargetFilename` in `/etc/`, `/boot/`; Sysmon ID 1 (ProcessCreate) with `Image` being `useradd`, `usermod`, `passwd`; or a Sysmon ID 3 (NetworkConnect) to an IP on a threat intel feed.",
              "Statistical: For root processes spawned by `systemd-udevd`, capture their sequence of system calls using auditd. Convert these sequences into n-grams (e.g., trigrams like `(socket, connect, execve)`). Establish a baseline of common n-grams from legitimate operations. Alert on the appearance of statistically improbable n-grams, especially those involving network connections or the execution of shells.",
              "Machine Learning: Train an Isolation Forest model on the behavioral data of legitimate root processes spawned by `systemd-udevd`. The feature vector for each process should include: count of file write operations, count of network connections, count of child processes spawned, a one-hot encoded vector of syscalls used, and command-line argument entropy. Use the trained model to score new processes and alert on any process classified as an anomaly or outlier."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]