[
  {
    "information_requirement": "Is the adversary maintaining persistence using Launch Agents?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.001",
        "name": "Launch Agent",
        "evidence": [
          {
            "description": "A process, whose parent is 'launchd' and whose executable path is defined in a .plist file within a Launch Agent directory, initiates an outbound network connection to an IP address or domain present on a threat intelligence feed.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) process execution events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points/gateways",
            "action": [
              "Symbolic Logic: Create a correlation rule to identify processes where the parent process is 'launchd' and the executable path is defined within a .plist in `/Library/LaunchAgents/` or `~/Library/LaunchAgents/`. Join the process start time and host IP with outbound network connections from Zeek conn.log. Alert on any connection where the destination IP or resolved domain name matches an entry in a high-confidence threat intelligence feed.",
              "Statistical Method: For processes launched by new Launch Agents, analyze the requested domains from Zeek dns.log. Calculate the character frequency entropy and n-gram model score for each domain. Flag domains that fall in the 98th percentile for entropy or have a low n-gram score, suggesting they are algorithmically generated (DGA).",
              "Machine Learning Application: Train a Random Forest classifier to predict maliciousness based on features from the process (e.g., path, signature status) and the resulting network connection (e.g., destination port, data volume, IP reputation). Use a time-series anomaly detection model on connection frequency and data volume to flag unusual spikes in network activity immediately following the execution of a new Launch Agent."
            ]
          },
          {
            "description": "A .plist file is created in `/Library/LaunchAgents/` or `~/Library/LaunchAgents/` where the 'ProgramArguments' key specifies an executable located in a world-writable directory (e.g., `/tmp/`, `/Users/Shared/`), or the file is created by a suspicious parent process (e.g., `curl`, `python`).",
            "data_sources": [
              "macOS ESF file creation events",
              "macOS ESF process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, User home directories on macOS endpoints",
            "action": [
              "Symbolic Logic: Implement a rule to alert when a .plist file is created in a Launch Agent directory by a parent process such as `sh`, `bash`, `python`, `curl`, or `osascript`, AND the parsed `ProgramArguments` key points to an executable located in `/tmp/`, `/Users/Shared/`, or another user-writable directory.",
              "Statistical Method: Profile the parent processes that legitimately create .plist files in Launch Agent directories. Use frequency analysis to identify rare parent processes performing this action. Alert if a parent process is a statistical outlier (e.g., responsible for less than 1% of such creations across the enterprise). Calculate the entropy of the executable path in `ProgramArguments`; abnormally high entropy can indicate randomization to evade detection.",
              "Machine Learning Application: Use a clustering algorithm like DBSCAN on features of the file creation event (e.g., parent process name, command line arguments, target path, time of day). Group normal, legitimate .plist creation activities into clusters and flag any events that are classified as noise or outliers, as they do not conform to established patterns."
            ]
          },
          {
            "description": "A sequence of events occurs within a short time window (<5 minutes) on a single host: 1) A non-installer process (e.g., a web browser, terminal) writes an executable file. 2) The same process or its child creates a .plist file in a Launch Agent directory pointing to the new executable. 3) The new executable process starts and initiates an outbound network connection.",
            "data_sources": [
              "macOS ESF process execution events",
              "macOS ESF file creation events",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points/gateways, Web content filters",
            "action": [
              "Symbolic Logic: Define a stateful correlation rule that detects the following sequence on a single host within a 5-minute window: a process not on an allowlist of approved installers writes a new executable file, the same parent process then creates a .plist file in a Launch Agent directory pointing to that executable, and the new executable process then initiates an outbound network connection. Alert on a full match of this behavioral chain.",
              "Statistical Method: For the initial process in the chain, analyze the rarity of its file creation behavior. Calculate the percentile rank of the number of executable files created by this parent process type within a 5-minute window. A value in the 99th percentile indicates an anomalously high rate of executable creation and is highly suspicious.",
              "Machine Learning Application: Model the sequence of events (process creates file, process creates .plist, new process executes, new process connects to network) as a directed graph. Train a graph-based anomaly detection model on legitimate software installation and update processes to learn normal event graphs. Flag any observed sequence whose graph structure deviates significantly from the learned normal behavior."
            ]
          },
          {
            "description": "An executable launched by a .plist file created within the last 7 days exhibits anomalous behavior, such as a high-entropy command line, high-frequency network connections, or spawning of unexpected child processes like `sh` or `osascript`.",
            "data_sources": [
              "macOS ESF process execution events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points/gateways",
            "action": [
              "Symbolic Logic: Maintain a dynamic watchlist of all executables launched by Launch Agents created in the last 7 days. Create a rule to alert if any process from this watchlist spawns a shell (`sh`, `bash`, `zsh`), a scripting interpreter (`python`, `perl`, `osascript`), or attempts to access sensitive user data paths like `~/Library/Keychains/` or `~/Library/Mail/`.",
              "Statistical Method: For each process on the watchlist, baseline its network behavior using Zeek logs. Use a moving average and standard deviation on metrics like outbound data volume and connection frequency over 10-minute intervals. Alert if any metric exceeds 3 standard deviations above its 24-hour moving average, indicating a sudden change in behavior.",
              "Machine Learning Application: Apply time-series decomposition (e.g., STL) to the network traffic volume for each monitored process. Run an Isolation Forest anomaly detection algorithm on the residual component of the time series to identify complex anomalies that are not explained by normal trend or seasonality, suggesting non-human, automated activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using Launch Agents?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.001",
        "name": "Launch Agent",
        "evidence": [
          {
            "description": "A file modification or creation event targeting `/System/Library/LaunchAgents/` or `/Library/LaunchAgents/` is denied, where the acting process is running with non-root user privileges (UID > 0).",
            "data_sources": [
              "macOS ESF file creation events",
              "macOS ESF process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide directories on all macOS endpoints",
            "action": [
              "Symbolic Logic: Create a high-severity rule to alert on any file write or creation event in `/System/Library/LaunchAgents/` or `/Library/LaunchAgents/` where the effective user ID of the source process is not 0 (root) and the event result is 'denied' or 'failure'.",
              "Statistical Method: Track the rate of failed file write attempts to these protected directories per user and per process. Establish a baseline of 'normal' failed writes (e.g., from misconfigured apps). A sudden spike in the rate of failures for a single user or process, exceeding the 95th percentile of the baseline failure rate, indicates a potential exploit or brute-force attempt.",
              "Machine Learning Application: Train a Logistic Regression classifier to distinguish between legitimate failed writes (e.g., user error in a GUI app) and malicious attempts. Use features such as the process name, parent process name, command-line arguments, and time of day to predict the likelihood of malicious intent behind the failed write attempt."
            ]
          },
          {
            "description": "A process execution event for `launchctl` with `load` or `bootstrap` subcommands is observed, where the acting user is non-root and the target .plist path is located in a user-writable directory like `~/Library/LaunchAgents/`, `/tmp/`, or `/Users/Shared/`.",
            "data_sources": [
              "macOS ESF process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints",
            "action": [
              "Symbolic Logic: Alert when a process execution event matches `process_name == 'launchctl'` AND (`command_line contains 'load'` OR `command_line contains 'bootstrap'`) AND `user_id > 0` AND the target .plist path in the command line is located in `/tmp/`, `/Users/Shared/`, or a user's home directory.",
              "Statistical Method: For each user, profile the parent directories of .plist files they load via `launchctl`. Maintain a frequency map of (user, path_prefix) tuples. Alert if a user loads a .plist from a path prefix that is statistically rare for them or their role (e.g., in the bottom 5% of observed frequencies), indicating a deviation from normal administrative or user behavior.",
              "Machine Learning Application: Use a one-class SVM (Support Vector Machine) trained on a dataset of legitimate `launchctl` execution events. The features should include user ID, parent process name, and the target .plist path. The model will learn the boundary of normal `launchctl` usage and flag any new executions that fall outside this boundary as anomalous."
            ]
          },
          {
            "description": "A process's effective user ID (EUID) changes to 0 (root), and within 60 seconds, that same process (by PID) writes a .plist file to `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/`. The privilege escalation method is not a standard interactive `sudo` session.",
            "data_sources": [
              "macOS ESF process execution events",
              "macOS ESF file creation events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Authentication logs",
            "action": [
              "Symbolic Logic: Implement a correlation rule that triggers when a process's EUID changes to 0 (and its parent is not a standard administrative process like `login`, `sshd`, or `sudo`), and this event is followed by the same process creating or modifying a .plist file in `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/` within a 60-second window.",
              "Statistical Method: Analyze the time delta between a process gaining root privileges and that process writing to a system-level Launch Agent directory. Calculate the statistical distribution of these time deltas. Events in the lower 1st percentile (indicating an immediate, automated action) are more suspicious than those with longer delays that might suggest interactive administrative work.",
              "Machine Learning Application: Model the state transitions of a process (e.g., `start -> change_euid_to_0 -> write_system_plist`). Use a Hidden Markov Model (HMM) trained on legitimate administrative sessions to learn the normal probabilities of these state transitions. A sequence of events with a very low probability under the trained model, such as a direct exploit-to-persistence chain, would be flagged as a high-confidence anomaly."
            ]
          },
          {
            "description": "A process creating or modifying a .plist file in `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/` is identified as having an invalid, missing, or ad-hoc code signature, or a signature from a developer ID not on an organizational allowlist.",
            "data_sources": [
              "macOS ESF file creation events",
              "macOS ESF process execution events",
              "macOS code signing information logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide directories on all macOS endpoints, Certificate and code signing infrastructure",
            "action": [
              "Symbolic Logic: For every file write event in `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/`, trigger an enrichment lookup of the source process's code signature. Generate an alert if the `signature_status` is `invalid`, `unsigned`, or `ad-hoc`, or if the `signature_authority_name` is not on an approved organizational allowlist of software developers and internal tools.",
              "Statistical Method: Maintain a baseline of all signing authorities and team IDs observed writing to these protected directories. Use frequency analysis to identify new or rare signing authorities. Alert when a new authority appears for the first time or if an authority's write frequency is a statistical outlier (e.g., < 0.1% of all write events to these directories).",
              "Machine Learning Application: Train a decision tree classifier to predict malicious file writes based on features of the code signature (e.g., `is_apple_signed`, `is_valid`, `authority_name`, `team_id`) and the process itself. This can help distinguish between legitimate but unusual activity (e.g., a developer using an ad-hoc signed tool) and a truly malicious unsigned binary."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]