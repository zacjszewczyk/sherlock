[
  {
    "information_requirement": "Is the adversary maintaining persistence by executing code triggered by interrupt signals?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.005",
        "name": "Trap",
        "evidence": [
          {
            "description": "A process with a known-malicious file hash, as identified by a threat intelligence feed, writes to a user's shell startup file (e.g., .bashrc, .profile, .zshrc).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Home Directories on WSL-enabled Endpoints and Linux Servers",
            "action": [
              "Symbolic: Join file write events (Windows Event ID 4663) on shell startup files (`.bashrc`, `.profile`, `.zshrc`) with the initiating process creation event (Windows Event ID 4688). Alert if the process hash from the 4688 event matches a known-malicious hash from a threat intelligence feed.",
              "Statistical: For each process name that modifies a shell startup file, calculate the historical frequency of this activity per user and system-wide. Alert if a process that has never or rarely (< 5th percentile) modified these files before performs a write action.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features from process (4688) and file modification (4663) events, including process name, parent process name, command line, and user context. An alert is generated if the model classifies a modification event as 'suspicious trap installation'."
            ]
          },
          {
            "description": "The content of a shell startup file is modified to include a `trap` command containing arguments for remote payload execution (`curl`, `wget`), obfuscation (`base64`), or direct shell interaction (`bash -c`).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Home Directories on WSL-enabled Endpoints and Linux Servers",
            "action": [
              "Symbolic: Upon a file write event (Windows Event ID 4663) to a shell startup file, trigger a content scan. Use regular expressions to search for `trap` commands that include patterns like `curl`, `wget`, `nc`, `ncat`, `python -c`, or `base64`. An exact match on these patterns generates a high-fidelity alert.",
              "Statistical: For each `trap` command found in shell startup files, calculate the Shannon entropy of the command string. Alert on commands with an entropy score exceeding a baseline threshold (e.g., > 95th percentile for that file type), as high entropy often indicates obfuscation or encoded payloads.",
              "Machine Learning: Use a Natural Language Processing (NLP) model trained on a corpus of benign and malicious shell scripts. When a shell startup file is modified, feed the new `trap` command to the model. An alert is generated if the model classifies the command's semantics as malicious."
            ]
          },
          {
            "description": "A process not typically associated with text editing or shell interaction (e.g., winword.exe, outlook.exe, powershell.exe) writes to a shell startup file within a WSL environment.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "WSL filesystems on Windows Endpoints",
            "action": [
              "Symbolic: Maintain an allowlist of processes that legitimately modify shell startup files (e.g., `code.exe`, `vim`, `nano`, `bash.exe`). Correlate file write events (4663) on these files with the modifying process name (from 4688). Alert if the process name is not on the allowlist.",
              "Statistical: Profile the parent-child process relationships for modifications to shell startup files. Calculate the frequency of each parent process (e.g., `explorer.exe`) spawning a child process (e.g., `vim`) that modifies a startup file. Alert when a statistically rare parent-child pair is observed (e.g., `winword.exe` -> `bash.exe`).",
              "Machine Learning: Model the sequence of user actions leading to a shell file modification using a time-series model (e.g., LSTM) to learn normal sequences of parent processes. An alert is triggered when a sequence deviates significantly from the learned normal patterns."
            ]
          },
          {
            "description": "A process creation event is observed with a recently terminated shell process as its parent (e.g., parent PID from `bash.exe` no longer exists), and this new process initiates an outbound network connection within 2 seconds.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4689",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and Network Telemetry from Endpoints and Network Egress Points",
            "action": [
              "Symbolic: Create a rule that triggers when a shell process (`bash.exe`, `sh.exe`) terminates (Event ID 4689), and within 2 seconds, a new process is created (Event ID 4688) whose parent PID no longer exists. If this new process also makes an external network connection (in Zeek conn.log) to a known-malicious or uncategorized IP, generate an alert.",
              "Statistical: For all processes spawned without an active parent, analyze the destination IP addresses they connect to via Zeek conn.log. Calculate the rarity of the destination IP, ASN, and country. Alert if a process connects to a destination that is statistically rare (e.g., < 1st percentile of occurrence) across the enterprise.",
              "Machine Learning: Use a time-series anomaly detection model on event sequences: [Shell Process Terminate -> New Process Create -> Network Connection]. The model analyzes features like the time delta between events, the new process name, and network connection properties. An alert is raised when a sequence is identified as a statistical outlier."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation by hijacking execution flow with interrupt signals?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.005",
        "name": "Trap",
        "evidence": [
          {
            "description": "A process running with elevated privileges (e.g., as 'root' in WSL, or as NT AUTHORITY\\SYSTEM) executes a script whose file hash is present on a threat intelligence feed for privilege escalation tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin)",
            "action": [
              "Symbolic: Filter process creation events (4688) for those running with high-integrity user accounts (e.g., 'root', 'SYSTEM'). Compare the process's file hash against a curated list of known privilege escalation tool hashes (e.g., LinPEAS, pspy). A match generates a critical alert.",
              "Statistical: Baseline the set of executables run by privileged accounts and calculate the execution frequency for each hash. Alert when a hash that has never been seen before or is in the lowest percentile of execution frequency is run by a privileged account.",
              "Machine Learning: Train a classifier to predict if a privileged process execution is malicious based on features like process name, command line, parent process, and file path. A 'malicious' classification for a new privileged execution triggers an alert."
            ]
          },
          {
            "description": "A privileged, system-wide shell script (e.g., /etc/profile) is modified to include a `trap` command that executes privilege-altering commands (e.g., `usermod -aG sudo`, `chmod u+s /bin/bash`).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4732"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)",
            "action": [
              "Symbolic: Upon a write event (4663) to a system-wide shell script (e.g., `/etc/profile`), trigger content inspection. Use regular expressions to search for `trap` commands followed by privilege escalation keywords like `usermod`, `chmod u+s`, `setcap`, or `chown root`. A match generates an alert.",
              "Statistical: Analyze the complexity of `trap` commands added to privileged files. Establish a baseline for normal command length and character distribution. Alert if a newly added `trap` command's length or character entropy exceeds the 99th percentile of the established baseline.",
              "Machine Learning: Use a sequence-to-sequence model to detect anomalous modifications in configuration files. The model learns the 'normal' structure of files like `/etc/profile` and flags modifications that significantly alter the learned grammatical or structural properties."
            ]
          },
          {
            "description": "A file write event is observed on a privileged script (e.g., a script in /etc/cron.d/) where the initiating process is running in a standard, non-privileged user context.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments",
            "action": [
              "Symbolic: Maintain a list of critical system files and their expected owners/modifiers. Create a rule that alerts when a file write event (4663) occurs on a file from this list, and the User ID of the initiating process (from 4688) is not on the authorized list (e.g., not 'root').",
              "Statistical: For each critical system file, profile the user accounts that modify it over time. Build a frequency distribution of modifying users. Alert if a user who has never modified a specific critical file before (or is in the lowest 1% of modification frequency) performs a write.",
              "Machine Learning: Implement an unsupervised anomaly detection model (e.g., Isolation Forest) on file modification events for critical files. Features should include the user account, process name, and parent process name. The model will flag any event that deviates significantly as a potential privilege escalation setup."
            ]
          },
          {
            "description": "A parent process known to be a privileged service or task (e.g., cron, systemd) spawns a child process that is not on a pre-defined allowlist of expected child processes for that parent, such as `ncat` or `python`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)",
            "action": [
              "Symbolic: For privileged parent processes (e.g., `cron`, `systemd`, `svchost.exe` hosting Task Scheduler), maintain an allowlist of expected child processes. Monitor process creation events (4688) and alert whenever a child process is spawned that is not on its parent's allowlist.",
              "Statistical: Baseline the process execution graph for the system. For each privileged parent, calculate the probability of it spawning each type of child process. Alert when a child process is spawned with a very low probability (e.g., < 0.01%), indicating a rare and suspicious event chain.",
              "Machine Learning: Use a graph-based anomaly detection algorithm on the process creation tree. The model learns normal process relationships. An alert is triggered when a new parent-child relationship appears in the graph that the model deems anomalous, such as `cron` spawning `ncat`."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]