[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying SSH authorized_keys?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1098.004",
        "name": "SSH Authorized Keys",
        "evidence": [
          {
            "description": "A successful SSH public key authentication is recorded from a source IP address that either matches a known malicious IP in a threat intelligence feed or originates from a geographic location or Autonomous System (AS) never before associated with the authenticating user's historical profile.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SSH bastion hosts, Critical Linux/macOS servers, Internet gateways, VPN concentrators, Centralized log repositories",
            "action": [
              "Symbolic: Continuously query successful public key authentication events from Zeek ssh.log where the direction is 'INBOUND'. Correlate the originator IP address ('orig_h') against a high-confidence threat intelligence feed of known malicious IPs (e.g., C2 servers, TOR exit nodes). Generate a high-priority alert on any match.",
              "Statistical: For each user, build a historical baseline of source countries and Autonomous System Numbers (ASNs) from successful logins by joining Zeek ssh.log with geolocation data derived from Zeek conn.log. Generate an alert when a successful login occurs from a country or ASN not present in the user's baseline for the last 90 days. This represents a rare event warranting investigation.",
              "Machine Learning: Train an unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) per user on features from successful SSH logins, including hour of day, day of week, source ASN, source country, SSH client version ('client' field in ssh.log), and public key used. The model will create a profile of normal activity and flag logins that are identified as significant outliers, indicating a potential compromise."
            ]
          },
          {
            "description": "A process creation event is logged showing a command-line utility (e.g., echo, cat, curl, wget) redirecting output to an '.ssh/authorized_keys' file, particularly when executed by a non-interactive user account like 'www-data' or 'nginx'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs (syscall=execve)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers, Developer workstations, Web servers, Application servers, Containerized environments",
            "action": [
              "Symbolic: Monitor process creation logs (e.g., Windows Event ID 4688, Sysmon for Linux Event ID 1) for command lines containing regular expressions that match file redirection to an authorized_keys file. Examples include: '(echo|cat|curl|wget).*>>.*\\.ssh/authorized_keys'. Generate a high-priority alert on any match, especially if the process is executed by a web service user.",
              "Statistical: For all command lines that modify an authorized_keys file, calculate the Shannon entropy of the command string. A command with unusually high entropy (e.g., > 95th percentile of historical modifications) may indicate the use of obfuscation or encoding (e.g., base64) to hide the key being added. Establish a baseline entropy score for legitimate modifications and alert on significant positive deviations.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., SARIMA) to monitor the rate of authorized_keys file modifications per hour across the enterprise. A sudden, coordinated spike in modification events across multiple hosts, detected as an anomaly in the aggregated time-series data, can indicate a widespread, automated campaign to establish persistence."
            ]
          },
          {
            "description": "An authorized_keys file is modified by a process whose parent process is not a typical administrative shell (e.g., bash, zsh) or approved configuration management tool (e.g., ansible, puppet).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers, Application servers, Containerized environments, Jump boxes",
            "action": [
              "Symbolic: Create and maintain an allow-list of legitimate parent process names that are expected to modify authorized_keys files (e.g., 'bash', 'zsh', 'ansible-playbook', 'sshd', 'powershell.exe'). Alert on any process creation event that modifies an authorized_keys file where the parent process is not on this list, such as 'httpd', 'nginx', 'java', or 'python' originating from a web directory.",
              "Statistical: For each parent-child process relationship that results in a modification of an authorized_keys file, calculate its historical frequency across the environment over the last 90 days. Alert on process pairs that are statistically rare, such as those occurring for the first time or falling in the bottom 1st percentile of observed frequencies.",
              "Machine Learning: Train a classification model (e.g., Random Forest or Gradient Boosting) to predict whether a file modification event is malicious. Features should include the parent process name, the user context, the full command-line arguments, file path, and process tree depth. This model can learn to distinguish between legitimate administrative actions and suspicious modifications originating from web shells or malware."
            ]
          },
          {
            "description": "A successful SSH authentication for a user occurs with a previously unseen public key within a short time window (e.g., 15 minutes) following a modification event on that user's authorized_keys file.",
            "data_sources": [
              "Zeek ssh.log",
              "Windows Event ID 4688",
              "Sysmon for Linux Event ID 1",
              "File Integrity Monitoring (FIM) logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All SSH-enabled systems, Authentication servers, Centralized log repositories, File servers hosting user home directories",
            "action": [
              "Symbolic: Maintain a stateful database or lookup file of all known (user, public_key) pairs observed in Zeek ssh.log. Generate a medium-priority alert upon the first successful authentication with any new public key for any user, as this provides situational awareness of key changes.",
              "Statistical: Create a high-fidelity alert by correlating two events: 1) a file modification event on a user's authorized_keys file (from FIM or process logs) and 2) a successful SSH login for that same user with a new public key (from Zeek ssh.log). Use a rule that triggers if the login occurs within a 15-minute window after the file modification. This temporal proximity is a strong statistical indicator of compromise.",
              "Machine Learning: Implement a sequence analysis model (e.g., using a Hidden Markov Model or LSTM network) that processes streams of security events for each host. Train the model to recognize the specific sequence of [file modification of authorized_keys] -> [successful SSH login with new public key] as a high-risk anomalous sequence, distinguishing it from noisy background activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has the adversary gained elevated privileges by modifying SSH authorized_keys?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1098.004",
        "name": "SSH Authorized Keys",
        "evidence": [
          {
            "description": "A successful SSH login to a high-privilege account (e.g., root, administrator) occurs from a source IP on a threat intelligence feed or from a source that is statistically anomalous (e.g., new country, new ASN) for that specific privileged account.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain controllers, Root-enabled servers, Cloud IAM infrastructure, Database administrator hosts, ESXi hypervisors",
            "action": [
              "Symbolic: Filter Zeek ssh.log for successful public key authentications to a defined list of high-privilege accounts (e.g., root, admin, ec2-user, azureuser). Correlate the source IP address ('orig_h') of these specific connections with a high-confidence CTI feed of malicious IPs. Any match generates a critical alert.",
              "Statistical: For each privileged account, establish a strict baseline allow-list of legitimate source IP subnets, ASNs, and countries. Due to the sensitive nature of these accounts, any successful login from a source outside of this tightly defined baseline (e.g., a new country, an unlisted ASN) should be treated as a high-severity statistical anomaly and trigger an immediate investigation.",
              "Machine Learning: Apply an unsupervised anomaly detection model (e.g., One-Class SVM) trained exclusively on the historical login data for privileged accounts. This specialized model can detect subtle deviations in login patterns (e.g., unusual time of day, anomalous source IP, different key) that might be missed by a general model, providing higher-fidelity alerts for potential privileged access abuse."
            ]
          },
          {
            "description": "The SSH daemon configuration file (/etc/ssh/sshd_config) is modified to set 'PermitRootLogin' to 'yes', and this event is followed by a successful root SSH login that leverages the new configuration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon for Linux Event ID 1",
              "Zeek ssh.log",
              "File Integrity Monitoring (FIM) logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All SSH-enabled systems, System configuration management servers, Git repositories storing infrastructure-as-code",
            "action": [
              "Symbolic: Monitor FIM logs or process command lines (e.g., Sysmon for Linux Event ID 1) for modifications to '/etc/ssh/sshd_config'. Create high-priority alerts for changes containing the pattern 'PermitRootLogin yes' or 'PasswordAuthentication yes'.",
              "Statistical: Correlate file modification events on '/etc/ssh/sshd_config' that enable root login with subsequent successful SSH logins to the 'root' account from Zeek ssh.log. An alert should be generated if a root login occurs within a 10-minute window following the modification, as this temporal correlation is highly suspicious.",
              "Machine Learning: Utilize a sequence analysis model to detect the multi-stage attack pattern of: [1] modification of sshd_config to allow root login, followed by [2] a process execution restarting the SSH service (e.g., 'systemctl restart sshd'), followed by [3] a successful root login from a new location. Recognizing this entire sequence provides a very high-confidence detection of privilege escalation."
            ]
          },
          {
            "description": "A modification event on a privileged account's authorized_keys file (e.g., /root/.ssh/authorized_keys) is followed within a short time window by a successful SSH login to that account using a previously unseen public key.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon for Linux Event ID 1",
              "Zeek ssh.log",
              "File Integrity Monitoring (FIM) logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers with privileged accounts, Database servers, Virtualization hypervisors (ESXi), Cloud compute instances with root access",
            "action": [
              "Symbolic: Implement a critical-priority rule that triggers when two conditions are met in sequence within a 5-minute window: 1) A file modification event is logged for '/root/.ssh/authorized_keys' (from FIM or process logs). 2) A successful SSH login is logged in Zeek ssh.log for the 'root' user with a public key that has never been seen before for that account.",
              "Statistical: Establish that the baseline rate of new public key additions for the 'root' account (or other highly privileged accounts) is effectively zero. Any event matching the description\u2014a modification followed by a new key login\u2014is a severe statistical outlier (a greater than 4-sigma event from the mean rate of zero) and should be treated as a confirmed incident pending investigation.",
              "Machine Learning: Employ graph-based anomaly detection. Model users, hosts, and public keys as nodes in a graph, with logins as edges. The addition of a new key to a privileged user (e.g., root), especially if that key was previously associated with a lower-privileged user or a compromised host, creates a new, high-risk path in the graph. Algorithms can detect this 'privilege escalation path' as a structural anomaly."
            ]
          },
          {
            "description": "A cloud provider API call is executed to inject an SSH key into a compute instance's metadata for a privileged user (e.g., root, ec2-user), followed by a successful SSH login to that instance using the newly added key.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure Activity Logs",
              "Google Cloud Audit Logs",
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider audit logs, Cloud virtual machines, Developer workstations with cloud CLI tools installed, IAM services",
            "action": [
              "Symbolic: Monitor cloud audit logs for API calls that add or modify SSH keys. Specific event names include 'projects.setCommonInstanceMetadata' in GCP, 'Update-AzVM' in Azure PowerShell, or 'ModifyInstanceAttribute' in AWS. Alert on any such event initiated by a user or role that does not typically manage instance credentials, or when the source IP of the API call is from an untrusted network.",
              "Statistical: Correlate cloud audit log events for API calls that modify VM SSH keys with subsequent network logs. A successful SSH login (from Zeek ssh.log) to the target VM's public IP (from Zeek conn.log) from a new source IP within 5 minutes of the API call is a strong statistical indicator of this technique.",
              "Machine Learning: Train a classifier on a combined dataset of cloud audit logs and network logs. Features can include the IAM principal making the API call, their permissions, the source IP of the API call, time of day, and features of the subsequent SSH login (source IP, user, key). The model can learn to differentiate between legitimate operational key updates and malicious key injection leading to privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]