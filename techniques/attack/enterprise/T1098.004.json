[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying SSH authorized_keys?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1098.004",
        "name": "SSH Authorized Keys",
        "evidence": [
          {
            "description": "A successful SSH authentication event using public key authentication occurs from an IP address that is either present on a threat intelligence feed or is statistically anomalous based on the user's historical activity.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SSH bastion hosts, Critical Linux/macOS servers, Internet gateways, VPN concentrators",
            "action": [
              "Symbolic: Continuously correlate the originator IP address ('orig_h') from successful public key authentication events in Zeek ssh.log against a high-confidence threat intelligence feed of known malicious IPs (e.g., C2 servers, TOR exit nodes). Generate a high-priority alert on any match.",
              "Statistical: For each user, establish a baseline of historical source IP addresses, Autonomous System Numbers (ASNs), and geographic locations from Zeek conn.log data correlated with successful logins in ssh.log. Alert when a new successful login occurs from a source whose ASN or country falls into a low-frequency percentile (e.g., seen in <1% of the user's past logins) or whose IP address is more than 3 standard deviations from the centroid of their typical geographic login locations.",
              "Machine Learning: Train an unsupervised anomaly detection model (e.g., Isolation Forest) on features extracted from successful SSH logins, including: hour of day, day of week, source ASN, source country, and public key used. The model will create a profile of normal activity for each user and flag logins that are identified as significant outliers, indicating a potential compromise."
            ]
          },
          {
            "description": "A process execution event is observed that uses a command-line utility to append or overwrite content to an .ssh/authorized_keys file.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers, Developer workstations, Web servers, Application servers",
            "action": [
              "Symbolic: Monitor process creation logs (Windows Event ID 4688) for command lines containing regular expressions that match file redirection to an authorized_keys file. Examples include: 'echo .* >> .*\\.ssh/authorized_keys', 'cat .* >> .*\\.ssh/authorized_keys', and 'curl .* >> .*\\.ssh/authorized_keys'. Alert on any match, prioritizing executions by non-interactive or non-standard users (e.g., www-data).",
              "Statistical: Calculate the Shannon entropy of command-line strings that are observed modifying authorized_keys files. A command with unusually high entropy may indicate the use of obfuscation or encoding (e.g., base64) to hide the key being added. Establish a baseline entropy score for legitimate modifications and alert on commands that exceed a threshold (e.g., > 95th percentile).",
              "Machine Learning: Use a time-series anomaly detection model to monitor the rate of authorized_keys file modifications across the enterprise. A sudden, coordinated spike in modification events across multiple hosts, detected as an anomaly in the time-series data, can indicate a widespread, automated campaign to establish persistence."
            ]
          },
          {
            "description": "An authorized_keys file is modified by a process whose parent is not a typical administrative shell or configuration management tool.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers, Application servers, Containerized environments",
            "action": [
              "Symbolic: Create and maintain an allow-list of legitimate parent process names that are expected to modify authorized_keys files (e.g., 'bash', 'zsh', 'ansible-playbook', 'sshd'). Alert on any modification to an authorized_keys file where the parent process (from Windows Event ID 4688) is not on this list, such as 'httpd', 'nginx', 'java', or 'python' originating from a web directory.",
              "Statistical: For each parent-child process relationship that results in a modification of an authorized_keys file, calculate its historical frequency across the environment. Alert on process pairs that are statistically rare, such as those occurring for the first time or falling in the bottom 1st percentile of observed frequencies.",
              "Machine Learning: Train a classification model (e.g., Random Forest) to predict whether a file modification event is malicious. Features should include the parent process name, the user context of the process, the full command-line arguments, and the file path. This model can learn to distinguish between legitimate administrative actions and suspicious modifications originating from web shells or malware."
            ]
          },
          {
            "description": "A new, previously unseen public key is used for a successful SSH authentication, and this event is temporally correlated with a recent modification of the corresponding authorized_keys file.",
            "data_sources": [
              "Zeek ssh.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All SSH-enabled systems, Authentication servers, Centralized log repositories",
            "action": [
              "Symbolic: Maintain a stateful database or lookup file of all known (user, public_key) pairs observed in Zeek ssh.log. Generate a medium-priority alert upon the first successful authentication with any new public key for any user.",
              "Statistical: Create a high-fidelity alert by correlating two events: 1) a file modification event on a user's authorized_keys file (from Windows Event ID 4688) and 2) a successful SSH login for that same user with a new public key (from Zeek ssh.log). Use a rule that triggers if the login occurs within a short time window (e.g., 15 minutes) after the file modification. This temporal proximity is a strong statistical indicator of compromise.",
              "Machine Learning: Implement a sequence analysis model (e.g., using a Hidden Markov Model or LSTM network) that processes streams of security events. Train the model to recognize the specific sequence of [file modification of authorized_keys] -> [successful login with new public key] as a high-risk anomalous sequence, even amidst noisy background activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary gained elevated privileges by modifying SSH authorized_keys?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1098.004",
        "name": "SSH Authorized Keys",
        "evidence": [
          {
            "description": "A successful SSH login to a high-privilege account (e.g., root, administrator) occurs from an IP address on a threat intelligence feed or from a source that is statistically anomalous for that specific privileged account.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain controllers, Root-enabled servers, Cloud IAM infrastructure, Database administrator hosts",
            "action": [
              "Symbolic: Filter Zeek ssh.log for successful public key authentications to a defined list of high-privilege accounts (e.g., root, admin, ec2-user). Correlate the source IP address ('orig_h') of these specific connections with a high-confidence CTI feed of malicious IPs. Any match generates a critical alert.",
              "Statistical: For each privileged account, establish a strict baseline of legitimate source IP subnets, ASNs, and countries. Due to the sensitive nature of these accounts, any successful login from a source outside of this tightly defined baseline (e.g., a new country, an unlisted ASN) should be treated as a high-severity statistical anomaly and trigger an immediate investigation.",
              "Machine Learning: Apply an unsupervised anomaly detection model (e.g., One-Class SVM) trained exclusively on the login data for privileged accounts. This specialized model can detect subtle deviations in login patterns (e.g., unusual time of day, anomalous source IP, different key) that might be missed by a general model, providing higher-fidelity alerts for potential privileged access abuse."
            ]
          },
          {
            "description": "The SSH daemon configuration file (/etc/ssh/sshd_config) is modified to weaken security (e.g., permit root login), and this event is followed by a successful privileged SSH login that leverages the new configuration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All SSH-enabled systems, System configuration management servers, Git repositories storing infrastructure-as-code",
            "action": [
              "Symbolic: Monitor process command lines (Windows Event ID 4688) for the execution of tools like 'sed', 'awk', or 'echo' that modify '/etc/ssh/sshd_config' to alter security directives. Create high-priority alerts for patterns matching 'PermitRootLogin yes' or 'PasswordAuthentication yes'.",
              "Statistical: Correlate file modification events on '/etc/ssh/sshd_config' with subsequent successful SSH logins to privileged accounts (especially 'root') from Zeek ssh.log. An alert should be generated if a root login occurs within a short time window (e.g., 10 minutes) following the modification, as this temporal correlation is highly suspicious.",
              "Machine Learning: Utilize a sequence analysis model to detect the multi-stage attack pattern of: [1] modification of sshd_config, followed by [2] a process execution restarting the SSH service (e.g., 'systemctl restart sshd'), followed by [3] a successful root login from a new location. Recognizing this entire sequence provides a very high-confidence detection of privilege escalation."
            ]
          },
          {
            "description": "A modification event on a privileged account's authorized_keys file (e.g., /root/.ssh/authorized_keys) is followed within a short time window by a successful SSH login to that account using a previously unseen public key.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers with privileged accounts, Database servers, Virtualization hypervisors (ESXi)",
            "action": [
              "Symbolic: Implement a critical-priority rule that triggers when two conditions are met in sequence within a 5-minute window: 1) A process creation event (Windows Event ID 4688) is logged for a command modifying '/root/.ssh/authorized_keys'. 2) A successful SSH login is logged in Zeek ssh.log for the 'root' user with a public key that has never been seen before for that account.",
              "Statistical: Establish that the baseline rate of new public key additions for the 'root' account (or other highly privileged accounts) is effectively zero. Any event matching the description\u2014a modification followed by a new key login\u2014is a severe statistical outlier (a greater than 4-sigma event) and should be treated as a confirmed incident pending investigation.",
              "Machine Learning: Employ graph-based anomaly detection. Model users, hosts, and public keys as nodes in a graph, with logins as edges. The addition of a new key to a privileged user, especially if that key was previously associated with a lower-privileged user or a compromised host, creates a new, high-risk path in the graph. Algorithms can detect this 'privilege escalation path' as a structural anomaly."
            ]
          },
          {
            "description": "A cloud provider CLI or API call is executed to inject an SSH key into a compute instance's metadata for a privileged user, followed by a successful SSH login to that instance using the newly added key.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider audit logs (e.g., CloudTrail, Azure Monitor), Cloud virtual machines, Developer workstations with cloud CLI tools installed",
            "action": [
              "Symbolic: Monitor process command lines (Windows Event ID 4688) on developer endpoints and bastion hosts for CLI commands that add SSH keys to cloud instances. Specific patterns include 'gcloud compute instances add-metadata .* --metadata-from-file ssh-keys' and 'az vm user update .* --ssh-key-value'. Alert on any execution of these commands, especially when run by users or roles that do not typically manage instance credentials.",
              "Statistical: Correlate cloud audit log events for API calls that modify VM SSH keys (e.g., 'UpdateVirtualMachine' in Azure, 'projects.setCommonInstanceMetadata' in GCP) with subsequent network logs. A successful SSH login (from Zeek ssh.log) to the target VM's public IP (from Zeek conn.log) from a new source IP within minutes of the API call is a strong statistical indicator of this technique.",
              "Machine Learning: Train a classifier on a combined dataset of cloud audit logs and host/network logs. Features can include the IAM principal making the API call, their permissions, the source IP of the API call, and features of the subsequent SSH login. The model can learn to differentiate between legitimate operational SSH key updates and malicious key injection leading to privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]