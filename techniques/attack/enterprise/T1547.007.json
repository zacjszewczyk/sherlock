[
  {
    "information_requirement": "Is the adversary maintaining persistence on macOS by modifying 'Reopen windows' login property list files?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.007",
        "name": "Re-opened Applications",
        "evidence": [
          {
            "description": "The 'com.apple.loginwindow.[UUID].plist' file, which manages applications to be reopened, is modified by an unexpected process not associated with normal user logout or system functions.",
            "data_sources": [
              "macOS ESF File Write Events",
              "macOS ESF Process Execution Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User library directories (`~/Library/Preferences/ByHost/`) on all macOS endpoints.",
            "action": [
              "Symbolic Detection: Create a rule to alert whenever a process other than 'loginwindow' or known software installers writes to any file matching the path pattern `~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist`. Correlate the writing process name and hash against a threat intelligence feed of known malware droppers.",
              "Statistical Detection: For each process that modifies this plist file, calculate its prevalence across the environment. Alert on modifications made by processes that are statistically rare (e.g., present on less than 1% of endpoints) or have high name/path entropy, suggesting randomization.",
              "Machine Learning Detection: Train a classification model (e.g., decision tree) on features of the writing process, including its parent process, user context, code signature status, and command-line arguments. Use the model to classify the write event as 'benign' (e.g., by `loginwindow` during logout) or 'suspicious' (e.g., by a shell script or unsigned binary)."
            ]
          },
          {
            "description": "A new, suspicious, or unauthorized application path is added to the 'SessionItems' array within a 'com.apple.loginwindow.[UUID].plist' file.",
            "data_sources": [
              "macOS File Integrity Monitoring Logs",
              "macOS ESF Process Execution Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on macOS endpoints, specifically user preference directories.",
            "action": [
              "Symbolic Detection: Periodically parse or monitor changes to `com.apple.loginwindow.*.plist` files. Extract all application paths from the `SessionItems.CustomListItems` array. Match these paths against a blocklist of known malicious application names or locations (e.g., `/private/tmp/`, `~/Downloads/payload.app`). Alert on any match.",
              "Statistical Detection: For each application path added to the plist, establish a baseline of common, legitimate applications. Calculate the frequency of each application path across the organization. Flag paths that are statistically uncommon or point to atypical locations not normally used for applications (e.g., a user's Documents folder instead of `/Applications/`).",
              "Machine Learning Detection: Use a time-series anomaly detection model to monitor the count of applications in the re-open list for each user over time. A sudden, anomalous spike in the count, deviating from the user's established baseline, could indicate a script has added a malicious item to the list."
            ]
          },
          {
            "description": "A process launched via the re-opened application mechanism exhibits anomalous network activity, such as C2 beaconing or data exfiltration.",
            "data_sources": [
              "macOS ESF Process Execution Events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points monitoring macOS endpoint traffic and the process execution environment on those endpoints.",
            "action": [
              "Symbolic Detection: Identify processes launched at user login. Correlate their network activity (from Zeek conn.log) with a threat intelligence feed of known C2 domains and IP addresses. Alert on any connection from a re-opened application to a known malicious destination.",
              "Statistical Detection: For each auto-launching application, build a statistical baseline of its typical network behavior (e.g., connection frequency, data volume, destination port distribution). Use z-scores or percentile thresholds to detect significant deviations, such as a normally offline application suddenly making regular, periodic outbound connections (beaconing). Calculate the Shannon entropy of requested domain names (from Zeek dns.log) and alert on high-entropy domains indicative of DGA.",
              "Machine Learning Detection: Train an unsupervised learning model (e.g., an autoencoder) on sequences of child processes and network connections spawned by legitimate re-opened applications. A high reconstruction error when analyzing a new session would suggest an anomalous and potentially malicious process execution or network communication chain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary leveraging a re-opened application at user login to escalate privileges on a macOS endpoint?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.007",
        "name": "Re-opened Applications",
        "evidence": [
          {
            "description": "A process launched via the re-opened application mechanism spawns a child process that runs with root (UID 0) privileges, indicating a successful privilege escalation event.",
            "data_sources": [
              "macOS ESF Process Execution Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The process execution environment on all macOS endpoints.",
            "action": [
              "Symbolic Detection: Monitor all process creation events. Create a high-severity alert for any process that has a parent process running as a standard user (UID > 500) but is itself running as root (UID 0), where the parent process was launched as part of the user's login session. Exclude known legitimate escalations like `sudo` or authorization prompts.",
              "Statistical Detection: Establish a baseline of legitimate parent-child privilege transitions. Alert on any transition to root from a parent process that has never been observed performing this action before. Calculate the prevalence of the parent process across the fleet; escalations from rare applications are more suspicious.",
              "Machine Learning Detection: Train a classification model to predict if a process execution is a malicious privilege escalation. Features should include parent process name, parent UID, child process name, child UID, command-line arguments (e.g., presence of known exploit commands), and whether the child process is signed by Apple."
            ]
          },
          {
            "description": "A low-privilege process, initiated from a re-opened application, is observed creating or modifying files in privileged system directories.",
            "data_sources": [
              "macOS ESF Process Execution Events",
              "macOS ESF File Write Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS system directories (e.g., `/System/`, `/Library/LaunchDaemons/`, `/sbin/`) and user library directories on endpoints.",
            "action": [
              "Symbolic Detection: Correlate processes launched at login with subsequent file write events. Create a rule that alerts if a process, whose ancestor is tied to a `com.apple.loginwindow` plist execution, writes to a protected system directory such as `/Library/LaunchDaemons`, `/Library/PrivilegedHelperTools`, or `/etc/sudoers.d/`.",
              "Statistical Detection: Profile the file modification behavior of all processes launched at login. Flag any process that writes to a statistically unusual number of directories or to directories it has never written to before, especially if those directories are outside the user's home directory (`~/`).",
              "Machine Learning Detection: Use a sequence analysis model to track the typical file system interactions of common re-opened applications. An application that normally only interacts with `~/Library/Application Support/` but is now observed writing to `/usr/local/bin` would be flagged by the model as a high-confidence anomaly indicative of post-escalation activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]