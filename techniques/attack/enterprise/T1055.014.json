[
  {
    "information_requirement": "Has the adversary elevated privileges using VDSO hijacking?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.014",
        "name": "VDSO Hijacking",
        "evidence": [
          {
            "description": "An executable file is executed on a Linux host, and its file hash matches a known VDSO hijacking tool or malware sample from a threat intelligence feed.",
            "data_sources": [
              "auditd execve records",
              "osquery process_file_events",
              "EDR process creation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web servers, database servers, authentication servers), Linux developer workstations, Production container environments",
            "action": [
              "Search for all process execution events (e.g., auditd type=execve). Compare the file hash of the executed binary against a continuously updated threat intelligence feed of hashes known to be associated with VDSO hijacking tools. Generate a high-severity alert upon any match.",
              "For each newly observed executable hash across the environment, calculate its prevalence (percentage of hosts on which it has executed). Flag any execution of a hash that is present on fewer than 1% of hosts or has a first-seen timestamp within the last 24 hours. A low prevalence score is a statistical indicator of a potential threat.",
              "Develop a classification model (e.g., Gradient Boosting) trained on file metadata features (e.g., file size, string entropy, imported functions) from both benign system binaries and known malicious executables. Score all newly executed files in real-time to predict the probability of being a malicious tool associated with process injection."
            ]
          },
          {
            "description": "A process with lower privileges executes a `ptrace(PTRACE_ATTACH)` syscall, followed by memory mapping and writing syscalls (e.g., mmap, ptrace POKEDATA), against a process with higher privileges within a 60-second window.",
            "data_sources": [
              "auditd SYSCALL records",
              "eBPF trace data",
              "Falco logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers, Privileged user accounts, Core system daemons (e.g., sshd, cron, systemd)",
            "action": [
              "Implement a stateful detection rule that triggers when a single source process (by PID) targeting a single destination process performs the following syscall sequence: 1) `ptrace(PTRACE_ATTACH)`, 2) `openat` on `/proc/[target_pid]/maps`, and 3) `ptrace(PTRACE_POKEDATA)` or `mmap`. The rule must only trigger if the source process UID is different from and has lower privileges than the target process UID.",
              "Model the typical syscall sequences for each process name (e.g., 'nginx', 'java') using a Markov chain to establish baseline transition probabilities between syscalls. Analyze live syscall sequences and flag any sequence with a joint probability that falls below a dynamic threshold (e.g., the 1st percentile for that process type), especially if the sequence involves `ptrace`.",
              "Train a Recurrent Neural Network (RNN) or LSTM model on sequences of syscalls from benign processes across the environment. Feed real-time syscall sequences from monitored processes into the model. A significant spike in the model's prediction error indicates a deviation from learned normal behavior, suggesting a potential hijacking attempt."
            ]
          },
          {
            "description": "A process, within 5 minutes of being targeted by a `ptrace` syscall, spawns a child process or accesses sensitive files inconsistent with its established baseline behavior.",
            "data_sources": [
              "auditd SYSCALL records",
              "auditd EXECVE records",
              "osquery process_events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System configuration directories (e.g., /etc/, /root/), Authentication-related files (e.g., /etc/shadow, /etc/sudoers), Privileged processes on critical servers",
            "action": [
              "Create a correlation rule that triggers if a process is the target of a `ptrace` call, and within the next 5 minutes, that same process PID spawns a shell (e.g., `/bin/sh`, `/bin/bash`), or opens a sensitive file like `/etc/shadow` or `/etc/sudoers` for writing.",
              "For each high-privilege process name, build a historical baseline of normal child process names and file access paths. Following a `ptrace` event targeting one of these processes, calculate a rarity score for any subsequent child process or file access. If the observed behavior falls in the 99.9th percentile of rarity for that parent process, flag it for investigation.",
              "Employ a one-class SVM or Isolation Forest model to build a behavioral profile for each critical process based on features like child process names, file paths accessed, and user context. Any activity from a process that is flagged as an outlier by the model, especially after being targeted by `ptrace`, indicates a likely compromise."
            ]
          },
          {
            "description": "The instruction pointer for a syscall executed by a monitored process points to a user-space memory address, rather than the expected kernel or vDSO memory regions.",
            "data_sources": [
              "eBPF trace data",
              "Custom Kernel module logging"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kernel memory space on critical Linux hosts, vDSO memory region of running processes",
            "action": [
              "Deploy an eBPF probe attached to a kernel tracepoint (e.g., `sys_enter`). For each syscall, inspect the instruction pointer. If the address falls outside the known, valid memory range for the kernel and the process's mapped vDSO, generate an immediate, high-priority alert.",
              "For each critical process, calculate the entropy of syscall handler instruction pointer addresses over 1-minute windows. A baseline entropy should be very low (near zero). A sudden increase in entropy indicates that syscalls are being redirected to multiple, potentially malicious, locations. Alert if entropy increases by more than 3 standard deviations from its moving average.",
              "Apply a clustering algorithm (e.g., DBSCAN) to the set of all observed syscall handler addresses for a given process name across the enterprise. Normal handlers in the kernel and vDSO will form one or more dense clusters. Any address that is classified as a noise point by the algorithm is a strong candidate for a malicious, user-space hook and should be investigated."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using VDSO hijacking?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.014",
        "name": "VDSO Hijacking",
        "evidence": [
          {
            "description": "A periodic memory scan of a security agent process (e.g., EDR, auditd) identifies an executable memory segment that does not map to any file on disk, or a segment that matches YARA signatures for known vDSO hooks.",
            "data_sources": [
              "Live memory dumps via osquery",
              "YARA scan results",
              "osquery memory_map"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Memory space of security tools (EDR, auditd, AV) on critical Linux hosts and developer workstations",
            "action": [
              "Schedule periodic memory scans on security agent processes (e.g., `auditd`, `osqueryd`) using YARA rules designed to find vDSO hook signatures, shellcode patterns, or pointers to unexpected user-space memory. Generate a critical alert on any YARA match.",
              "For each security process, establish a baseline for its memory map, specifically the count of executable-unbacked (Type=private, Path=NULL) memory segments. Monitor for deviations. An increase in the number of such segments beyond 2 standard deviations from the mean suggests anomalous code injection.",
              "Train a classification model on features extracted from process memory segments (e.g., entropy, size, permissions, proximity to other segments) to distinguish between benign library code and injected malicious code. Apply this model in real-time to memory segments of security tools to detect anomalies indicative of hijacking."
            ]
          },
          {
            "description": "A `ptrace` syscall targets a known security process (e.g., auditd, rsyslogd), followed within 60 seconds by file modification or deletion syscalls targeting that tool's configuration or log directories.",
            "data_sources": [
              "auditd SYSCALL records",
              "eBPF trace data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system paths for security tool configurations and logs (e.g., /etc/audit/, /var/log/audit/, /opt/edr/)",
            "action": [
              "Create a correlation alert for the sequence: 1) `ptrace(PTRACE_ATTACH)` syscall targeting a known security process (e.g., `auditd`, `rsyslogd`), followed within 60 seconds by 2) an `openat` or `unlinkat` syscall from any process that targets a file in that security tool's configuration or log directory.",
              "For every `ptrace` syscall targeting a security process, analyze the source process. Build a profile of processes that legitimately perform this action (e.g., debuggers like `gdb`). Calculate a rarity score for the source process name. Flag any `ptrace` event where the source process is in the bottom 1st percentile of historical initiators, indicating an anomalous actor.",
              "Model process and file interactions as a graph, where nodes are processes and files, and edges are interactions like 'ptrace' or 'write'. Use a graph-based anomaly detection algorithm to learn normal interaction patterns. An edge representing a `ptrace` call from an unexpected process to a security agent node would be identified as a structural anomaly."
            ]
          },
          {
            "description": "A process, within 5 minutes of being targeted by a `ptrace` syscall, initiates outbound network connections exhibiting periodic beaconing behavior or communication with a destination IP or domain with no established history.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "auditd SYSCALL records"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), DNS servers, Critical Linux servers",
            "action": [
              "Correlate `auditd` logs showing a `ptrace` event with subsequent `Zeek conn.log` entries from the same source host IP. If the process targeted by `ptrace` initiates an outbound connection to an IP address present on a threat intelligence feed of C2 servers, trigger a high-severity alert.",
              "Following a `ptrace` event on a host, analyze the subsequent `Zeek conn.log` entries for that host's IP. Calculate the time delta between connections to the same destination IP and port. A low standard deviation in these time deltas indicates periodic beaconing. Also, flag connections to destination IPs that are in the bottom 1st percentile of prevalence across the enterprise network.",
              "For critical processes, use a time series forecasting model (e.g., ARIMA) to predict expected outbound data volume (`orig_bytes` in Zeek `conn.log`). If a `ptrace` event occurs, and the subsequent actual data volume significantly exceeds the forecasted volume's confidence interval, flag the activity as a potential C2 channel or data exfiltration."
            ]
          },
          {
            "description": "The log shipping volume from a Linux host drops significantly or ceases entirely, and this event is temporally correlated with a `ptrace` syscall targeting a logging daemon (e.g., auditd, rsyslogd) on that same host.",
            "data_sources": [
              "SIEM health monitoring logs",
              "auditd SYSCALL records",
              "Log forwarder agent heartbeats"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log aggregation platform (SIEM), Logging daemons (auditd, rsyslogd, journald) on all Linux hosts",
            "action": [
              "Create a dedicated, high-priority alert that triggers if a `ptrace` syscall is ever observed targeting a known logging daemon process, such as `auditd`, `rsyslogd`, or `journald`. This action is unequivocally malicious and indicates tampering.",
              "On the central log aggregator (SIEM), monitor the events-per-second (EPS) rate for each reporting host. Establish a moving average and standard deviation for this rate. If a host's EPS drops more than 3 standard deviations below its baseline for a sustained period (e.g., 5 minutes), generate an alert for a potential offline or tampered sensor.",
              "Employ a time series anomaly detection model (e.g., an autoencoder) on the log volume data for each host. The model learns the host's normal logging rhythm, including daily and weekly cycles. An anomalous drop flagged by the model, when correlated with a recent `ptrace` event on the host, strongly indicates targeted log tampering."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]