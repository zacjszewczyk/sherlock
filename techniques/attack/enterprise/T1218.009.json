[
  {
    "information_requirement": "Is the adversary bypassing application control or other defenses by proxying code execution through Regsvcs.exe or Regasm.exe? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.009",
        "name": "Regsvcs-Regasm",
        "evidence": [
          {
            "description": "Execution of Regsvcs.exe or Regasm.exe where the command-line argument specifies a DLL or EXE file whose SHA256 hash matches an entry on a threat intelligence feed of known malicious indicators.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed Windows hosts (endpoints and servers); Threat Intelligence Platform (TIP) data feeds.",
            "action": [
              "Symbolic: Create a SIEM rule to trigger on process creation events (Windows Event ID 4688 or Sysmon Event ID 1) for 'Regsvcs.exe' or 'Regasm.exe'. Extract the file path of the library from the command line. Calculate the file's SHA256 hash and query the organization's threat intelligence platform (TIP) for a match. Generate a high-severity alert for any positive match.",
              "Statistical: For each Regsvcs.exe or Regasm.exe execution, identify the hash of the target library. Query historical process data to calculate the prevalence of this hash across the enterprise over the last 90 days. Flag any execution involving a library hash seen on a number of hosts below a defined threshold (e.g., fewer than 5 hosts, or in the bottom 1st percentile of prevalence) for investigation as a potentially targeted or rare payload.",
              "Machine Learning: Implement a file reputation classification model (e.g., XGBoost, Random Forest). When a new library is registered by Regsvcs.exe or Regasm.exe, extract features from the binary, such as PE header details (e.g., compile time, sections), imported functions (imphash), string entropy, and digital signature status. Use the pre-trained model to assign a 'malicious' or 'benign' prediction score. Escalate files with a high 'malicious' score for sandbox analysis."
            ]
          },
          {
            "description": "Execution of Regsvcs.exe or Regasm.exe where the command-line argument specifies a file path located in a non-standard or user-writable directory, such as C:\\Users\\Public\\, %APPDATA%, %TEMP%, C:\\PerfLogs\\, or C:\\$Recycle.Bin.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of all managed Windows hosts, specifically monitoring user-writable directories (e.g., C:\\Users\\), temporary locations, and other unusual paths for binary execution.",
            "action": [
              "Symbolic: Write a detection rule that triggers on process creation events for 'Regsvcs.exe' or 'Regasm.exe' where the command line contains a file path matching a regular expression for suspicious locations (e.g., '(\\\\Users\\\\(Public|.*\\\\AppData)\\\\|\\\\Temp\\\\|\\\\Windows\\\\Tasks\\\\|\\\\PerfLogs\\\\|\\\\$Recycle\\.Bin\\\\)'). Alert on any match.",
              "Statistical: From historical process execution data, build a baseline of all directory paths used in Regsvcs.exe/Regasm.exe command lines. For each new execution, determine the frequency of the parent directory in the baseline. Flag executions where the directory path falls into a low percentile of historical usage (e.g., bottom 5th percentile) as anomalous and worthy of investigation.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on command-line invocation features, including tokenized path elements, argument count, and presence of specific flags (e.g., /u, /tlb). Identify clusters representing 'normal' behavior based on historical data from software installations. Flag any new invocation that is classified as a noise point (outlier) by the algorithm as a potential threat."
            ]
          },
          {
            "description": "Execution of Regsvcs.exe or Regasm.exe where the parent process is not a legitimate software installer or developer tool, such as an Office application (winword.exe), script interpreter (powershell.exe), or browser (chrome.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process ancestry data on all managed Windows hosts; focus correlation on endpoints running common productivity software (e.g., Microsoft Office, web browsers, PDF readers).",
            "action": [
              "Symbolic: Create a SIEM rule that alerts when the ParentProcessName for 'Regsvcs.exe' or 'Regasm.exe' is in a defined list of suspicious parents, such as 'winword.exe', 'excel.exe', 'outlook.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'mshta.exe', 'explorer.exe'.",
              "Statistical: For each host, build a baseline of legitimate parent-child process relationships involving Regsvcs.exe/Regasm.exe over a 30-day period. Calculate the conditional probability P(Child | Parent) for each pair. Generate an alert when an observed relationship has a probability below a set threshold (e.g., P(Regsvcs.exe | winword.exe) < 0.01) or involves a parent process never before seen spawning Regsvcs.exe on that host.",
              "Machine Learning: Model process execution chains (e.g., Grandparent -> Parent -> Child) as sequences of process names or hashes. Train a sequence anomaly detection model, such as an LSTM autoencoder, on millions of benign sequences from across the enterprise. Feed new Regsvcs.exe/Regasm.exe execution chains into the model; a high reconstruction error signifies a deviation from learned normal behavior and indicates a potentially malicious sequence."
            ]
          },
          {
            "description": "One or more network connections to an external IP address are initiated from a host within 5 minutes following a Regsvcs.exe or Regasm.exe execution, where the destination IP, port, ASN, or associated DNS query is statistically rare or matches known threat indicators.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and individual host network stacks. Requires correlation within a SIEM or data lake.",
            "action": [
              "Symbolic: Within a SIEM, correlate Regsvcs.exe/Regasm.exe process creation events (Sysmon EID 1) with subsequent network connection events (Sysmon EID 3, Zeek conn.log) from the same host within a 5-minute window. Alert if the destination IP is on a threat intelligence blocklist or if a preceding DNS query (Zeek dns.log) for that connection resolved a known malicious domain.",
              "Statistical: Following a Regsvcs.exe/Regasm.exe execution, analyze subsequent network connections. Calculate the rarity of the destination IP, ASN, and country based on a 90-day baseline of all network traffic. Additionally, for any preceding DNS queries, calculate the character-frequency entropy of the queried domain, where a high entropy score (e.g., $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$ > 4.0) can indicate DGA activity. A combination of rare attributes and high entropy should trigger an alert.",
              "Machine Learning: For each host, train a time-series anomaly detection model (e.g., Prophet, SARIMA) on key network metrics such as bytes sent, connection count per minute, and flow duration. After a Regsvcs.exe/Regasm.exe execution is detected, actively monitor these metrics for the host. An anomalous spike or pattern change identified by the model within a 10-minute follow-on window suggests command-and-control activity and should be alerted."
            ]
          },
          {
            "description": "A behavioral sequence is observed on a host within a 10-minute window, consisting of: 1) A DLL or EXE file is created in a user-writable directory. 2) The same file is then executed/registered via Regsvcs.exe or Regasm.exe. 3) The host subsequently initiates one or more external network connections.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/Data Lake containing correlated host telemetry (process, file system) and network telemetry (DNS, flow logs) from across the enterprise.",
            "action": [
              "Symbolic: Build a SIEM correlation rule that joins three events by hostname and file path within a 10-minute window: 1. A Sysmon Event ID 11 (FileCreate) where TargetFilename ends in .dll/.exe and is in a user-writable path. 2. A Sysmon Event ID 1 (ProcessCreate) for Regsvcs.exe/Regasm.exe where the CommandLine contains the same TargetFilename. 3. A Zeek conn.log record where id.orig_h is the host's IP and id.resp_h is a non-internal, non-CDN IP address.",
              "Statistical: Assign a risk score to each discrete event in a potential chain: FileCreate in %TEMP% (score: 5), Regsvcs.exe execution of that file (score: 10), external connection to a low-prevalence ASN (score: 8). Sum the scores for events linked by host and occurring within a rolling 10-minute window. A cumulative score exceeding a threshold derived from the 99th percentile of normal activity scores generates a high-fidelity alert.",
              "Machine Learning: Model host activity as a directed graph where nodes are entities (processes, files, IPs) and edges are the events that connect them (e.g., 'created', 'executed', 'connected_to'). Use a graph-based anomaly detection algorithm to learn patterns of normal software installation and operation. A subgraph matching the specific pattern 'File -> created_by -> Process -> executed -> Regsvcs -> connected_to -> IP' that is structurally rare or contains anomalous node attributes would be identified as a malicious TTP chain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]