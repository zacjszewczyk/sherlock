[
  {
    "information_requirement": "Has the adversary gained credential access by forging SAML tokens?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1606.002",
        "name": "SAML Tokens",
        "evidence": [
          {
            "description": "A SAML assertion's signing certificate thumbprint or issuer name matches a value on a threat intelligence-provided blocklist of known malicious or compromised indicators.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points with TLS inspection, AD FS / Identity Provider servers, reverse proxies.",
            "action": "1. (Symbolic) Requires TLS visibility. In a SIEM, parse SAML assertions from network traffic (Zeek http.log or files.log). Extract the signing certificate thumbprint and issuer name. Compare these values against a watchlist of known-bad indicators from threat intelligence feeds. An immediate match generates a high-severity alert. 2. (Statistical) For all observed SAML authentications, calculate the frequency of each signing certificate thumbprint and issuer over a 30-day rolling window. Flag any certificate or issuer whose frequency is a statistical outlier (e.g., below the 5th percentile) but is associated with authentications for multiple or high-privilege accounts. 3. (ML) Train a classification model (e.g., Random Forest) on features extracted from the SAML signing certificate (e.g., validity period, key strength, issuer attributes). Use known-good and known-bad (from CTI) certificates to label the training data. Run new certificates through the model to classify them as 'suspicious' or 'benign', alerting on 'suspicious' classifications."
          },
          {
            "description": "A parsed SAML assertion contains a lifetime value (NotOnOrAfter) that exceeds the organizational standard by a defined threshold (e.g., > 8 hours), or contains structural inconsistencies such as a mismatch between the 'NameID' and 'Subject' fields.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Windows Event ID 1202"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "AD FS / Identity Provider servers, application servers acting as Service Providers, network segments with TLS inspection.",
            "action": "1. (Symbolic) Requires TLS visibility. Create a rule to parse SAML assertions and check if the calculated lifetime (NotOnOrAfter - NotBefore) exceeds the maximum duration defined in organizational policy (e.g., 8 hours). Also, check for the presence of known artifacts from forging tools like ADFSpoof. Alert on any match. 2. (Statistical) For each service provider, establish a baseline of normal token lifetimes. Alert when a new token's lifetime exceeds the 99th percentile of this baseline. Additionally, calculate the entropy of the claims block for each user's tokens; a sudden, high-entropy event can indicate claim stuffing. 3. (ML) Use a time-series anomaly detection model (e.g., LSTM) trained on sequences of token attributes (lifetime, claim count, claim types) per user. The model learns the user's normal token request patterns. A sequence of requests with anomalous attributes, such as a sudden change in lifetime followed by unusual claims, will be flagged for investigation."
          },
          {
            "description": "A successful SAML authentication is recorded at a Service Provider (SP) without a corresponding token issuance event (e.g., Windows Event ID 1202) or authentication event (e.g., Windows Event ID 4769) on the Identity Provider (IdP) for the same user within a defined time window (e.g., 2 minutes).",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Windows Event ID 1202",
              "Windows Event ID 1200",
              "Windows Event ID 4769"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "AD FS / Identity Provider servers, Domain Controllers, key Service Provider application servers, network egress points.",
            "action": "1. (Symbolic) Create a SIEM correlation rule: For every SP log or Zeek http.log event indicating a successful SAML login for user 'U' at time 'T', search for an IdP log (Windows Event ID 1200 or 1202) for user 'U' between T-2min and T. If no IdP log is found, generate an alert for a 'Phantom SAML Login'. 2. (Statistical) On an hourly basis, calculate the ratio of SP-observed SAML logins to IdP-issued tokens per application. Establish a baseline for this ratio. An alert is triggered if the current ratio deviates from the historical baseline by more than 3 standard deviations, indicating a potential flood of forged tokens. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on login events with features like user, source IP, SP, and a binary feature 'IdP_Log_Present'. Events that cluster together and consistently lack the 'IdP_Log_Present' feature are highly suspicious and can identify groups of related phantom logins that may represent a single adversary campaign."
          },
          {
            "description": "A successful SAML-based authentication for a user account originates from a source IP address that is geographically impossible given the user's last known location and the time elapsed, or the login occurs from a source ASN or country that is rare for that user (e.g., first time seen in 90 days).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, VPN concentrators, cloud infrastructure (VPCs), application servers logging authentication events.",
            "action": "1. (Symbolic) For each successful SAML login by a user (from Zeek http.log or Windows Event ID 4624), enrich the source IP with geolocation data. Compare the location with the user's previous login location and timestamp. If the calculated speed required to travel between points exceeds a physically impossible threshold (e.g., >600 mph), trigger an 'Impossible Travel' alert. 2. (Statistical) For each user, maintain a 90-day baseline of their source countries, ASNs, and login hours. For each new SAML login, calculate a risk score. Add points if the source country/ASN is outside the user's top 95% most frequent locations, or if the login hour falls into the user's least common 5% of login hours. A score exceeding a statistically determined threshold triggers an alert. 3. (ML) Train a one-class SVM model for each user based on features from their normal login behavior (e.g., source IP subnet, user agent from http.log, time of day, day of week). Any new SAML login that the model classifies as an outlier from the learned 'normal' boundary is flagged as a potential compromise."
          },
          {
            "description": "A logon session initiated via SAML authentication is immediately followed by high-privilege activity, such as the assignment of special privileges (Windows Event ID 4672) or process creation by a high-integrity process (Windows Event ID 4688), that is anomalous for the user's role.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Windows Event ID 4672"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, high-value servers (e.g., database, financial), endpoint devices of privileged users, Certificate Authority servers.",
            "action": "1. (Symbolic) Correlate a SAML-based logon (Windows Event ID 4624 with Logon Type 3/10) with subsequent events sharing the same Logon ID. Trigger an alert if this Logon ID is associated with a Special Privilege Assignment event (Windows Event ID 4672) within 10 minutes, and the user is not a member of a pre-defined administrative group. 2. (Statistical) For each user role, establish a baseline of normal post-authentication process chains (e.g., common parent-child processes from Event ID 4688). Use a statistical measure like Jaccard similarity to compare the set of process chains in a new session to the established baseline. A similarity score below a defined threshold (e.g., 0.5) indicates anomalous post-authentication behavior. 3. (ML) Use a graph-based anomaly detection model where nodes are users, processes, and network destinations. Train the model on normal post-SAML-authentication activity graphs. A new login that results in a sub-graph with a rare or anomalous structure (e.g., a non-admin user's session spawning a process that connects to a domain controller over RPC) would be flagged by the model as a high-risk event."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]