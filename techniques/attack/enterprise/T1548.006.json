[
  {
    "information_requirement": "Has the adversary escalated privileges by manipulating macOS TCC?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548.006",
        "name": "TCC Manipulation",
        "evidence": [
          {
            "description": "A process other than a standard macOS service (e.g., `tccd`, `systemuiserver`) or an approved Mobile Device Management (MDM) agent performs a write operation to the TCC.db SQLite database, located at `/Library/Application Support/com.apple.TCC/TCC.db` or `~/Library/Application Support/com.apple.TCC/TCC.db`.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE",
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.",
            "action": [
              "Symbolic: Create and maintain a watchlist of approved processes allowed to write to TCC.db (e.g., `tccd`, `systemuiserver`, MDM agents). Query file write events where the target file name is `TCC.db`. Trigger an alert if the initiating process name is not on the approved watchlist.",
              "Statistical: Establish a baseline of all processes that write to TCC.db across the environment over a 30-day period. Calculate the frequency of writes per process per host. Alert when a process not present in the historical baseline writes to TCC.db, treating it as a zero-frequency anomaly.",
              "Machine Learning: Train a one-class SVM or isolation forest model on features from known-good TCC.db write events. Use features such as process name, parent process name, process path, code signing identifier, and process ancestry. Deploy the model to score new write events and alert on any event flagged as an anomaly."
            ]
          },
          {
            "description": "The execution of the `sqlite3` command-line utility is observed with the TCC.db file path as a command-line argument, indicating direct, programmatic database manipulation.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC",
              "Process command-line argument logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process execution logs from all macOS devices in the enterprise.",
            "action": [
              "Symbolic: Implement a detection rule that queries process execution logs for a process name of `sqlite3` where the command-line arguments contain the substring `TCC.db`. Alert on any match, as this is highly anomalous and indicative of direct manipulation.",
              "Statistical: Baseline the parent-child process relationships for all `sqlite3` executions. Since legitimate use is rare, any execution is suspicious. Calculate the rarity of the parent process (e.g., `zsh`, `bash`, `Terminal.app`, `Finder.app`). Alert if `sqlite3` is spawned by a statistically rare parent, such as a web browser or office application, by flagging parent-child pairs in the lowest 1st percentile of frequency.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., Prophet, ARIMA) to monitor the aggregate count of `sqlite3` executions targeting `TCC.db` across the entire fleet of macOS endpoints, aggregated per hour. A sudden, sharp increase in this count would be flagged as an anomaly potentially indicating a widespread attack campaign."
            ]
          },
          {
            "description": "A process with existing Full Disk Access (FDA) permissions (e.g., Finder, Terminal) spawns a child process that is either unsigned or signed by an untrusted developer, and this child process subsequently initiates an outbound network connection.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK",
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC",
              "Process code signature logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process and network event collectors on high-value macOS endpoints (developer, admin, server); network sensors at egress points.",
            "action": [
              "Symbolic: Create a detection rule that looks for a sequence: 1) A parent process with known FDA permissions (e.g., `Finder.app`) spawns a child process (e.g., `bash`, `python`, `osascript`). 2) The child process is unsigned or has an invalid signature. 3) The child process initiates an outbound network connection. Alert on this sequence.",
              "Statistical: Build a frequency table of all parent-child process relationships where the parent has FDA permissions. For each relationship, also track the child's code signing status. Alert on any new parent-child pair not seen in a 30-day baseline, or where a known pairing suddenly involves an unsigned child process.",
              "Machine Learning: Employ a graph-based anomaly detection algorithm on process ancestry data. Construct a graph where nodes are processes and edges represent parent-child relationships. Enrich nodes with attributes like FDA status, code signing status, and network connection activity. Score subgraphs and alert on those representing a trusted parent spawning an unsigned child that connects to a low-reputation IP address."
            ]
          },
          {
            "description": "An application's code signature is added to the TCC.db via an INSERT statement within a short time window (e.g., under 60 seconds) of its first-ever execution on the system, without a corresponding user approval event in the macOS Unified Log.",
            "data_sources": [
              "macOS Unified Log",
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE",
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint log collectors across all macOS devices, correlating file, process, and system log events.",
            "action": [
              "Symbolic: Correlate logs to detect a sequence: 1) A process execution event for a new executable (first time seen on host). 2) A file write event to `TCC.db` from a process (e.g., `sqlite3`) containing an SQL INSERT statement within 60 seconds of the execution. 3) Absence of a `traceID` in the Unified Log showing a user-approved TCC prompt for that executable. Alert on this sequence.",
              "Statistical: For every new process granted TCC permissions, calculate the time delta between the process's first execution on the host and the TCC.db write event. Establish a baseline distribution of these time deltas for legitimate, user-approved grants. Alert on any new grant where the time delta is a statistical outlier, falling in the lowest 1st percentile, suggesting programmatic rather than human interaction.",
              "Machine Learning: Implement a sequence classification model (e.g., LSTM, RNN) to distinguish between benign and malicious permission grant sequences. Train the model on event sequences, where a malicious sequence is defined as `[First Execution -> TCC.db Write -> Outbound Network Connection]` occurring in under 5 minutes. Deploy the model to score real-time event sequences."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by manipulating macOS TCC?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548.006",
        "name": "TCC Manipulation",
        "evidence": [
          {
            "description": "A process possessing sensitive TCC permissions (e.g., `kTCCServiceScreenCapture`, `kTCCServiceSystemPolicyAllFiles`) initiates a network connection where the destination IP address, domain, or JA4S hash matches a known malicious indicator.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) process and network events",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek intel.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at internet egress points; DNS resolvers; endpoint network event collectors on all macOS devices.",
            "action": [
              "Symbolic: Join endpoint process logs (to identify processes with TCC permissions) with network logs (Zeek conn.log). Alert immediately if a process with sensitive TCC permissions makes a connection where the destination IP/domain is found in the Zeek intel.log, indicating a match against a threat intelligence feed.",
              "Statistical: For each process with sensitive TCC permissions, establish a 30-day baseline of its network behavior, including destination countries, ASNs, and JA4S hashes. Calculate the Shannon entropy of destination IPs over a 24-hour window. Alert if a connection is made to a country/ASN not in the baseline or if the entropy of destination IPs drops significantly, indicating a shift to a small set of new C2 servers.",
              "Machine Learning: Train a logistic regression or random forest classifier to predict malicious connections. Use features from Zeek logs (duration, protocol, total bytes, connection state, JA4S hash) and enriched endpoint data (process name, TCC permissions). The model should be trained on labeled data (e.g., known C2 traffic) to score new connections from TCC-privileged processes in real-time."
            ]
          },
          {
            "description": "A process with `kTCCServiceScreenCapture` or `kTCCServiceAccessibility` permissions spawns a child process known for network data transfer (e.g., `curl`, `wget`, `ncat`, `scp`), which then initiates an outbound network connection.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK",
              "macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC",
              "Process command-line argument logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process and network event collectors on macOS devices with collaboration software (e.g., Zoom, Slack, Teams) installed.",
            "action": [
              "Symbolic: Implement a high-fidelity rule that triggers an alert when a parent process known to have screen capture or accessibility permissions (e.g., `Zoom.us`, `slack`, `vnc`) spawns a child process from the set [`curl`, `wget`, `ncat`, `scp`]. This parent-child relationship is highly indicative of permission abuse for exfiltration.",
              "Statistical: Analyze the historical frequency of all child processes spawned by applications with screen capture or accessibility permissions. Alert on any parent-child pairing that has never been observed in the 30-day baseline or falls into the lowest frequency percentile (e.g., less than 0.1%), indicating an extremely rare and suspicious event.",
              "Machine Learning: Use a graph-based anomaly detection model on process relationships. A subgraph representing `[App with Screen Capture Perms] -> spawns -> [Network Utility] -> connects to -> [External IP]` would be flagged as a high-risk anomaly, especially if the destination IP is untrusted or has a low reputation score."
            ]
          },
          {
            "description": "A process with `kTCCServiceMicrophone` or `kTCCServiceCamera` permissions establishes a network connection exhibiting beaconing characteristics, defined as periodic, fixed-size packets sent to the same destination over a long duration.",
            "data_sources": [
              "Zeek conn.log",
              "macOS Endpoint Security Framework (ESF) process and network events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors at internet egress points; endpoint network event collectors on macOS devices.",
            "action": [
              "Symbolic: Search network logs for connections originating from a process with microphone or camera permissions where the destination IP is on a threat intel list and the connection state in Zeek's conn.log shows a simple, repeated pattern (e.g., `S1` or `O/OTH`) without a full TCP handshake and closure.",
              "Statistical: For each long-lived connection (>10 minutes) from a process with mic/camera permissions, analyze the corresponding Zeek conn.log data. Calculate the standard deviation of inter-packet arrival times and the standard deviation of packet sizes. A value for both metrics approaching zero is a strong statistical indicator of automated beaconing. Alert if these values fall below a dynamically determined low threshold (e.g., 5th percentile of all connections).",
              "Machine Learning: Apply a time-series decomposition model (e.g., Seasonal-Trend-Loess) to the bytes-per-second data for connections from these processes. A strong periodic component with a non-standard frequency (i.e., not matching known application keepalives) identified by the model would indicate C2 beaconing."
            ]
          },
          {
            "description": "A process, within minutes of gaining `kTCCServiceSystemPolicyAllFiles` (Full Disk Access), initiates a high rate of file open or read events across multiple sensitive user directories, followed by data staging and a large outbound data transfer.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) file and process events",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint collectors on high-value macOS workstations; network sensors monitoring file transfers and outbound connections at egress points.",
            "action": [
              "Symbolic: Define and alert on the following explicit sequence: 1) A write to `TCC.db` grants a process Full Disk Access. 2) Within 5 minutes, the same process reads over 1,000 files from `~/Documents`, `~/Desktop`, or `~/Library/Mail`. 3) The same process writes a single compressed file (e.g., .zip, .gz) >10MB to `/tmp/` or `~/Library/Caches/`. 4) The same process initiates a network connection transferring >10MB of data.",
              "Statistical: For any process that newly acquires Full Disk Access, begin monitoring its file system activity. Calculate a 60-second sliding window average of file read events per second. Alert if this rate exceeds the 99th percentile of all file system activity for that user or host, indicating anomalous mass-file access.",
              "Machine Learning: Use a Hidden Markov Model (HMM) to model process behavior as a sequence of states. Define states like `Idle`, `Gaining_Perms`, `File_Enumeration`, `Data_Staging`, and `Exfiltration`. Train the model on normal user and system behavior. An observed sequence of process activities that has a very low probability under the trained model, but matches the defined attack state path, triggers a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]