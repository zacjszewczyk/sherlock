[
  {
    "information_requirement": "Has the adversary accessed credentials stored in cloud secrets management stores?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555.006",
        "name": "Cloud Secrets Management Stores",
        "evidence": [
          {
            "description": "A successful cloud secret retrieval API call (e.g., AWS CloudTrail GetSecretValue, Azure Key Vault SecretGet, GCP Secret Manager AccessSecretVersion) is recorded where the source IP address is on a threat intelligence blocklist, or the requesting principal (user/role) is not on an explicit allow-list for that secret.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane API endpoints, Network egress points, Virtual Private Cloud (VPC) flow logs",
            "action": [
              "Create a detection rule that queries cloud audit logs for secret retrieval events. For each event, join the sourceIPAddress with a threat intelligence feed of known malicious IPs and alert on any match. Concurrently, maintain an allow-list of (principal_id, secret_arn) pairings and alert on any access that does not match an entry on this list.",
              "For each principal_id, build a historical frequency distribution of source Autonomous System Numbers (ASNs) used for secret access. For each new access event, look up the ASN for the sourceIPAddress. Calculate the rarity of this ASN based on the principal's historical distribution. Alert if the ASN's frequency is below a set percentile, such as the 5th percentile, indicating an unusually rare network origin for that principal.",
              "Develop and deploy a binary classification model (e.g., XGBoost, Random Forest) trained on historical secret access logs. Engineer features such as is_weekend, hour_of_day, source_asn_rarity, user_agent_rarity, and a one-hot encoded principal_id. The model should predict a probability score for is_suspicious. Alert on new access events where the predicted probability exceeds a predefined threshold (e.g., 0.9)."
            ]
          },
          {
            "description": "A process creation event (e.g., Windows Event ID 4688) is logged containing command-line arguments for a cloud CLI tool (e.g., aws.exe, az, gcloud) that includes patterns for enumeration (list-secrets, list-versions) or scripted, iterative retrieval (e.g., get-secret-value within a for loop).",
            "data_sources": [
              "Windows Event ID 4688",
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD servers, Cloud-hosted virtual machines, Container orchestration platforms",
            "action": [
              "Deploy a detection rule that uses regular expressions to scan the CommandLine field of Windows Event ID 4688. The rule should match on cloud CLI executables followed by secret management commands, specifically looking for enumeration flags (e.g., list-secrets) or scripting/query syntax (e.g., --query, | jq, ForEach-Object). Alert on any match.",
              "For each host and user combination, establish a baseline for the ratio of secret enumeration API calls (e.g., ListSecrets) to secret retrieval calls (e.g., GetSecretValue) within a 1-hour window, based on cloud audit logs. Calculate the Z-score for this ratio in each new window. Alert if the Z-score exceeds a threshold (e.g., >3), indicating an abnormal amount of retrieval following enumeration.",
              "Implement a sequence analysis model (e.g., an LSTM or Transformer) to learn legitimate sequences of command-line executions per user/host. Train the model on historical Event ID 4688 data. Flag any sequence of commands that has a low probability under the model, such as a cloud CLI list-secrets command followed by a series of get-secret-value commands and then a curl or powershell -enc command, as potentially malicious."
            ]
          },
          {
            "description": "A cloud audit log records a successful secret retrieval by a principal (user or service role) where either: (1) the principal has never accessed that specific secret before, or (2) the access context (e.g., source IP geolocation, user-agent) is a statistical outlier compared to the principal's established historical baseline for secret access.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane, Authentication logs, Developer workstations, CI/CD servers",
            "action": [
              "Maintain a stateful table or lookup file of all (principal_id, secret_arn) pairs that have been observed accessing each other. For each new secret access event, query this table. If the (principal_id, secret_arn) pair is not found, generate an alert for 'First Time Secret Access by Principal' and add the new pair to the table.",
              "For each principal, create a historical profile of access attributes, including the set of source countries, set of user-agents, and typical access hours. For each new access, assign a risk point for each deviation (e.g., +1 for new country, +1 for access between 12 AM and 5 AM local time). Sum the points to create a total risk score. Alert if this score exceeds the 95th percentile of all historical scores for that principal.",
              "Train an unsupervised anomaly detection model, such as an Isolation Forest, on a dataset of legitimate secret access events. Use features like principal_id, secret_arn, source_ip_subnet, user_agent, and time_of_day. The model will learn the characteristics of normal access. Apply the model to new events in real-time and alert on any event that the model flags as an anomaly."
            ]
          },
          {
            "description": "The count of distinct secrets accessed, or the total volume of secret retrieval API calls, from a single principal or source IP address within a short time window (e.g., 10 minutes) significantly exceeds a predefined threshold or historical baseline.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane, VPC flow logs, Network egress points",
            "action": [
              "Implement a sliding-window counter in the SIEM. Create a rule that alerts if a single principal_id or sourceIPAddress is associated with more than 20 GetSecretValue (or equivalent) events within any 10-minute window. This static threshold should be tuned to avoid false positives from legitimate applications.",
              "For each principal_id, calculate a rolling 30-day baseline of the average and standard deviation for the number of distinct secrets accessed per hour. For each new hour, if the count of distinct secrets accessed exceeds the average by more than 3 standard deviations (Z-score > 3), generate an alert for anomalous access volume.",
              "For high-activity principals, apply a time-series forecasting model (e.g., Prophet) to the minute-by-minute count of secret access API calls. The model will learn the normal intra-day and intra-week seasonality of access. Generate an alert if the observed access count at any point in time exceeds the model's forecasted upper confidence bound (yhat_upper), indicating a statistically significant spike in activity."
            ]
          },
          {
            "description": "A secret retrieval event, identified in cloud audit logs, is followed within a short time window (e.g., 5 minutes) by an outbound network connection from the originating host (identified via IP correlation) to a destination that is either: (1) on a threat intelligence blocklist, (2) a newly observed domain/IP for that host, or (3) associated with a high-risk category (e.g., anonymizing proxy, file sharing).",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Windows Event ID 4688",
              "Windows Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD servers, Cloud-hosted virtual machines, Network egress points",
            "action": [
              "Create a correlation search that joins cloud audit logs (on eventName like GetSecretValue) with network connection logs (Zeek conn.log or Windows Event ID 3) using the source IP and a 5-minute time window. Trigger an alert if a secret retrieval is followed by an outbound connection from that IP to a destination IP found in a high-confidence threat intelligence feed.",
              "For each host, maintain a historical set of destination domains queried (from Zeek dns.log) and IPs connected to (from Zeek conn.log). When a secret access event occurs, monitor the host's subsequent outbound connections for 10 minutes. If a connection is made to a domain or IP not present in the host's historical baseline set (i.e., a 'first time seen' destination for this host), generate an alert.",
              "Train a graph-based anomaly detection model where nodes represent entities (users, hosts, secrets, destination IPs) and edges represent interactions. Legitimate sequences like User -> Host -> GetSecret -> ConnectToInternalDB form normal subgraphs. An anomalous sequence, such as User -> Host -> GetSecret -> ConnectToPastingSiteIP, would form a rare or unseen subgraph pattern, which the model would flag as a high-risk anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]