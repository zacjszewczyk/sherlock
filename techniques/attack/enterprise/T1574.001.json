[
  {
    "information_requirement": "Is the adversary establishing persistence via DLL search order hijacking or sideloading?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL Hijacking",
        "evidence": [
          {
            "description": "A DLL file is written to disk, and its file hash or filename matches a known-bad entry in a threat intelligence database. This file is subsequently loaded by a process associated with a persistence mechanism (e.g., a service, scheduled task, or Run key entry).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Domain Controllers, Application Servers, Persistence locations in the Windows Registry (e.g., HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run), System service binaries.",
            "action": "1. (Symbolic) Continuously monitor file creation events (Sysmon Event ID 11) for files with a .dll extension. Calculate the file hash and query against a threat intelligence feed of known malicious DLL hashes. Create a high-severity alert upon a match. 2. (Statistical) For all DLL load events (Sysmon Event ID 7), calculate the prevalence of each DLL path. Identify DLLs loaded from statistically rare locations (e.g., paths in the bottom 5th percentile of frequency) by processes known to be persistence mechanisms (e.g., svchost.exe). 3. (ML) Develop a classification model (e.g., Random Forest) trained on features from DLL load events (process name, DLL path entropy, DLL is signed, publisher name rarity, parent process) to classify each load as benign or suspicious. A 'suspicious' classification for a DLL loaded by a persistent process triggers an alert."
          },
          {
            "description": "A DLL file is created with a name identical to a legitimate system DLL (e.g., version.dll, dwrite.dll, uxtheme.dll) but is placed in an application's local directory instead of the expected system directory (e.g., C:\\Windows\\System32). The hosting application is configured for persistence.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application installation directories (e.g., C:\\Program Files\\), User profile directories, Startup folders, Windows Registry persistence locations.",
            "action": "1. (Symbolic) Maintain a watchlist of commonly hijacked DLL names (e.g., version.dll, wlbsctrl.dll). Alert when a file creation event (Sysmon Event ID 11) is detected for a DLL on this watchlist in any directory other than C:\\Windows\\System32\\. 2. (Statistical) For each process, baseline the set of DLLs it normally loads. Calculate a Jaccard similarity score between the set of DLLs loaded in a new process instance and its historical baseline. A low score, particularly when the novel DLL has a common name but a rare path, indicates potential hijacking. 3. (ML) Use a time-series anomaly detection model (e.g., LSTM Autoencoder) on the sequence of DLLs loaded by a specific persistent service. An abnormally high reconstruction error when a new sequence is processed indicates a deviation from normal behavior and should be flagged."
          },
          {
            "description": "A DLL file is written to a transient or user-writable directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public\\) and is subsequently loaded by a process within a short time frame (e.g., under 60 seconds).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (%APPDATA%, %LOCALAPPDATA%), Temporary file directories (%TEMP%, C:\\Windows\\Temp), Publicly writable folders (C:\\Users\\Public\\).",
            "action": "1. (Symbolic) Correlate file creation events (Sysmon Event ID 11) for .dll files in user-writable locations with subsequent image load events (Sysmon Event ID 7) for the same file path. Alert if the time delta between creation and load is less than 5 minutes. 2. (Statistical) For each process, calculate the entropy of the file paths from which it loads DLLs. A sudden, sharp increase in path entropy for a process can indicate it is loading libraries from unusual, high-entropy locations. Monitor the 95th percentile of path entropy scores for key processes and alert on breaches. 3. (ML) Use an unsupervised learning model (e.g., DBSCAN) to cluster DLL load events based on features like (ProcessName, DllPath, DllIsSigned). Outlier points identified by the model represent anomalous load events that do not fit into any established cluster of normal behavior."
          },
          {
            "description": "A process associated with a persistence mechanism initiates a network connection to read a DLL file from a remote network share (e.g., SMB or WebDAV).",
            "data_sources": [
              "Zeek smb_files.log",
              "Zeek conn.log",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, File servers, WebDAV servers, Endpoints initiating remote connections.",
            "action": "1. (Symbolic) Monitor Zeek's smb_files.log for any read action where the filename ends in .dll. Correlate the client IP with endpoint logs (Sysmon Event ID 3) to identify the source process. If the process is a known persistence mechanism, generate a high-priority alert. 2. (Statistical) Profile the file extensions accessed over SMB. Calculate the frequency of .dll file reads as a percentage of all SMB file reads. A sudden spike in this ratio, or a client IP becoming a statistical outlier for .dll reads (e.g., exceeding the 99th percentile), indicates anomalous activity. 3. (ML) Train a time-series forecasting model (e.g., ARIMA) on the volume of network traffic to SMB/WebDAV shares. An observed traffic volume that significantly exceeds the forecasted volume can help confirm a remote DLL loading attack."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by abusing DLL loading?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL Hijacking",
        "evidence": [
          {
            "description": "A DLL file is written to a user-writable directory. The file's hash is present in a threat intelligence database and is specifically associated with a known privilege escalation tool (e.g., PrintSpoofer, Juicy Potato).",
            "data_sources": [
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on multi-user systems (e.g., Citrix servers, developer workstations), System-wide temporary folders.",
            "action": "1. (Symbolic) Upon a file creation event (Sysmon Event ID 11) for a DLL, hash the file. Match the hash against a curated list of IOCs for privilege escalation tools. An exact match triggers an immediate, critical alert. 2. (Statistical) Maintain a baseline of all file hashes observed in user-writable directories. A DLL hash that is globally rare (e.g., seen on only one or two machines) and is also unsigned is highly suspicious. Assign a risk score based on rarity. 3. (ML) Use a supervised classifier (e.g., XGBoost) trained on file metadata to predict if a file creation event is part of a privilege escalation attempt. Features include: file path, user context, parent process, and file entropy. A high-confidence prediction of 'privilege escalation' should be investigated."
          },
          {
            "description": "A DLL file is created in a specific, hardcoded path that is known to be vulnerable to hijacking by a high-privilege process (e.g., C:\\Windows\\System32\\wlbsctrl.dll for the IKEEXT service).",
            "data_sources": [
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System directories on servers running specific vulnerable services (e.g., IKEEXT, UsoSvc), Application directories for third-party software running as SYSTEM.",
            "action": "1. (Symbolic) Create a high-fidelity detection rule that monitors for file creation events (Sysmon Event ID 11) for specific DLL filenames in specific, known-vulnerable paths (e.g., FileName = 'wlbsctrl.dll' AND Path = 'C:\\\\Windows\\\\System32\\\\'). 2. (Statistical) For known vulnerable services, baseline their typical DLL load times during system startup. A DLL write to a vulnerable path followed by a deviation in the service's startup behavior is anomalous. Monitor the time delta between file write and service state change. 3. (ML) Develop a Hidden Markov Model for the behavior of services vulnerable to DLL hijacking. The creation of a malicious DLL in a hijack path would represent a transition to a low-probability 'compromised' state, triggering an alert."
          },
          {
            "description": "A process running with High or System integrity level loads a DLL from a directory where standard, non-administrative users have write permissions.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints and servers, particularly those where users have local admin rights or where UAC is disabled. Shared workstations.",
            "action": "1. (Symbolic) Filter image load events (Sysmon Event ID 7) where the IntegrityLevel is 'High' or 'System' and the ImageLoaded path is in a user-writable location (e.g., starts with C:\\Users\\). Alert on any match. 2. (Statistical) For each high-integrity process, build a profile of its normal DLL load paths. Calculate a rarity score for each new DLL load path. A path with a very high rarity score (e.g., in the 99.9th percentile) indicates a significant deviation. 3. (ML) Train a one-class SVM model on legitimate DLL load events for high-integrity processes. The model learns a boundary of normal behavior. Any new DLL load event that falls outside this boundary is classified as an anomaly."
          },
          {
            "description": "A process running with High or System integrity, immediately following the load of a DLL from a user-writable directory, spawns a child process (e.g., cmd.exe, powershell.exe) or initiates an external network connection.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 7",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations (PAWs), Critical servers, Network egress points.",
            "action": "1. (Symbolic) Create a chained rule: (1) A high-integrity process loads a DLL from a user-writable path (Sysmon 7). (2) Within 30 seconds, the same process GUID spawns cmd.exe (Sysmon 1) OR initiates an external network connection (Sysmon 3). 2. (Statistical) For each high-integrity parent process, build a frequency distribution of its child processes. Alert when a child process is spawned that is statistically rare for that parent (e.g., in the bottom 1% of frequency). 3. (ML) Use a Graph Neural Network (GNN) to learn embeddings for normal system activity. A subgraph representing a privileged process loading a user-writable DLL and then spawning a shell would have anomalous embeddings compared to the learned baseline, allowing for its detection."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by abusing DLLs?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL Hijacking",
        "evidence": [
          {
            "description": "A trusted Windows process (e.g., rundll32.exe, svchost.exe, regsvr32.exe) loads a DLL whose file hash is identified by threat intelligence as a component of a known malicious toolkit (e.g., Cobalt Strike Beacon, Mimikatz).",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, particularly those running common 'living-off-the-land' binaries (LOLBins).",
            "action": "1. (Symbolic) Monitor DLL load events (Sysmon 7). If a loaded DLL's hash matches a known malicious hash, and the loading process is a known LOLBin (e.g., rundll32.exe), generate a critical alert. 2. (Statistical) Profile the command lines and loaded DLLs for LOLBins. Calculate the rarity of each DLL name loaded by rundll32.exe. A DLL name that is extremely rare (e.g., seen for the first time) should be flagged. 3. (ML) Train a classification model to distinguish between benign and malicious rundll32.exe executions. Features should include: command-line arguments, name and path of the loaded DLL, and the DLL's signature status. A 'malicious' classification indicates abuse."
          },
          {
            "description": "A process binary signed by a trusted publisher (e.g., 'Microsoft Corporation') loads a DLL that is either unsigned or signed by a publisher not on an allowlist of trusted vendors. The anomalous load is amplified if the DLL resides in a non-standard directory.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, focusing on processes that are part of the core operating system.",
            "action": "1. (Symbolic) Create a rule to detect when a process with a valid 'Microsoft Corporation' signature (Sysmon 7) loads a DLL where SignatureStatus is not 'Valid' or Signature is not in a pre-defined list of trusted publishers. 2. (Statistical) Maintain a baseline of all (Process Signature, DLL Signature) pairs. Identify statistically anomalous pairs. If 99% of DLLs loaded by explorer.exe are signed by Microsoft, a load involving an unsigned DLL is a statistical outlier. 3. (ML) Use an Isolation Forest model on DLL load events. Features include: ProcessIsSigned, ProcessSignature, DllIsSigned, DllSignature, and DllPath. The model will learn to isolate anomalies like unusual combinations of signed processes loading untrusted DLLs."
          },
          {
            "description": "A legitimate system process (e.g., svchost.exe, explorer.exe), after loading a DLL from a non-system directory (e.g., %APPDATA%), performs actions outside its normal behavioral profile, such as initiating a network connection to a suspicious domain or spawning a command shell.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 7",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, All endpoints and servers.",
            "action": "1. (Symbolic) Create a chained alert: (1) A trusted process loads a DLL from a non-system path (Sysmon 7). (2) Within 60 seconds, the same process makes a DNS query for a domain with a known malicious category (Zeek dns.log). 2. (Statistical) For key system processes, baseline their network behavior. Calculate the entropy of DNS queries made by svchost.exe. A sudden spike in entropy may indicate a Domain Generation Algorithm (DGA). Alert when entropy exceeds 3 standard deviations from its moving average. 3. (ML) Model the lifecycle of a process using a sequence-to-sequence autoencoder. A high reconstruction error on a new process lifecycle indicates it is anomalous, such as when a sideloaded DLL causes the process to initiate C2 communications."
          },
          {
            "description": "A process loads a DLL with a filename matching a critical system or security software DLL, but the file's on-disk path is not the legitimate, protected system directory. This suggests an attempt to impersonate a trusted module.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System folders (C:\\Windows\\System32), Security product installation directories (e.g., C:\\Program Files\\CrowdStrike), Application directories.",
            "action": "1. (Symbolic) Maintain a list of critical DLLs and their correct paths (e.g., ntdll.dll -> C:\\Windows\\System32\\). Alert on any image load event (Sysmon 7) where the filename is on the list, but its path does not match the approved path. 2. (Statistical) For each DLL name, create a frequency map of the paths it is loaded from. For ntdll.dll, the path C:\\Windows\\System32\\ should account for >99.9% of loads. Any load from a path in the long tail of the distribution is a severe anomaly. 3. (ML) Use a K-Means clustering algorithm to group processes based on the paths of DLLs they load. A process that loads a system-named DLL from a user-writable directory will fall into a small, outlier cluster, which should be investigated for hijacking."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]