[
  {
    "information_requirement": "Is the adversary attempting to discover browser information on compromised hosts?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1217",
        "name": "Browser Information Discovery",
        "evidence": [
          {
            "description": "A process is created whose name or file hash matches a known browser information discovery or credential dumping tool.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Developer workstations, Administrative jump boxes, Critical servers",
            "action": [
              "Symbolic: Continuously monitor process creation events (Windows Event ID 4688). Correlate the NewProcessName and associated file hash against a maintained threat intelligence list of known browser credential dumping tools (e.g., LaZagne, WebBrowserPassView, Mimikatz modules, SharpWeb). Alert on any exact match for immediate investigation.",
              "Statistical: Analyze the frequency of process names that are partial matches to known tool names (e.g., 'lazagne', 'sharpweb'). Establish a baseline of process execution frequency per host and user. Alert when the execution frequency of a suspicious-looking process name exceeds the 95th percentile of its historical baseline, indicating an unusual occurrence.",
              "Machine Learning: Develop a classification model (e.g., Logistic Regression, Random Forest) trained on process creation events. Features should include process name string characteristics (e.g., length, entropy, presence of keywords like 'pass', 'web', 'browser'), parent process, and user context. The model will classify each process execution as either benign or suspicious, flagging those predicted as suspicious for analyst review."
            ]
          },
          {
            "description": "A scripting interpreter or system utility is executed with command-line arguments that reference default browser profile paths or specific browser database files (e.g., 'Login Data', 'cookies.sqlite').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Developer workstations, Administrative jump boxes, Critical servers",
            "action": [
              "Symbolic: Analyze process creation command lines (Windows Event ID 4688) for the execution of interpreters (e.g., powershell.exe, cscript.exe) or utilities (e.g., sqlite3.exe, esentutl.exe) where the command line contains strings matching known browser profile paths (e.g., 'AppData\\Local\\Google\\Chrome\\User Data', 'AppData\\Roaming\\Mozilla\\Firefox\\Profiles') or database filenames (e.g., 'Login Data', 'cookies.sqlite'). Alert on any match.",
              "Statistical: Calculate the entropy of command-line arguments for common interpreters like powershell.exe. Establish a baseline entropy score for typical command lines per user and host. An unusually high entropy score, potentially indicating obfuscated scripts that access browser data, exceeding 2 standard deviations from the mean should be flagged. Additionally, track the rarity of command-line arguments; arguments containing browser paths that are in the bottom 5% of historical frequency should be scored as high risk.",
              "Machine Learning: Use a Natural Language Processing (NLP) model to analyze command-line arguments. Fine-tune the model to classify command lines into categories like 'benign system administration', 'software installation', or 'suspicious discovery'. The model can learn the semantic context of commands accessing browser files, distinguishing between legitimate and malicious intent, and alert on commands classified as 'suspicious discovery'."
            ]
          },
          {
            "description": "A process, not associated with the browser itself or an approved security tool, reads from sensitive browser database files.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Default user profile directories on endpoints and servers (e.g., C:\\Users\\<username>\\AppData\\)",
            "action": [
              "Symbolic: Enable object access auditing (SACL) on browser profile directories. Monitor for file read events (Windows Event ID 4663 with Accesses containing 'ReadData') targeting files like 'Login Data', 'cookies.sqlite', or 'places.sqlite'. Maintain an explicit allowlist of legitimate process names (e.g., chrome.exe, firefox.exe, approved AV/EDR scanners). Alert on any access from a process not on the allowlist.",
              "Statistical: For each host, create a baseline of processes that access browser data files and their access frequency. Use a statistical measure like Z-score to identify anomalous access. If a rarely seen process (e.g., powershell.exe, rundll32.exe) accesses these files, or if a process accesses them with an anomalous frequency (e.g., 3 standard deviations above its mean access count in a 24-hour period), generate an alert.",
              "Machine Learning: Implement an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM) on file access events. Features for the model should include the process name, parent process name, user account, and time of day. The model will learn the pattern of normal access to browser files and flag any access that significantly deviates from this learned 'normal' behavior as a potential threat."
            ]
          },
          {
            "description": "A sequence of actions where a process accesses browser data files, followed shortly by file creation in a staging directory and/or subsequent outbound network connections.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Temporary file directories (e.g., %TEMP%, C:\\Users\\Public), Network egress points (e.g., firewalls, proxies)",
            "action": [
              "Symbolic: Create a stateful detection rule that triggers on a sequence of events from a single host within a 5-minute window: 1) A process reads a browser data file (Windows Event ID 4663). 2) The same process creates an archive file (e.g., .zip, .rar) in a staging directory (Windows Event ID 4688). 3) The same host initiates an outbound TCP connection (Zeek conn.log) to a low-reputation IP address. Alert if all three conditions are met.",
              "Statistical: For hosts exhibiting browser data access (Event 4663), monitor the size of subsequent outbound network flows (orig_bytes in Zeek conn.log). Establish a baseline of typical outbound data volume per host. If, after browser file access, a host initiates a connection where the data volume exceeds the 99th percentile of its historical baseline, flag it as potential exfiltration. Correlate this with the rarity of the destination IP address; a high-volume transfer to a newly seen IP is a strong indicator.",
              "Machine Learning: Use a time-series analysis model (e.g., LSTM) to predict expected network exfiltration volume for each host based on historical traffic. An alert is generated when the actual outbound data volume significantly deviates from the model's prediction, especially following file access events (Event 4663) related to browser data. This can detect subtle exfiltration that might be missed by simple thresholding."
            ]
          },
          {
            "description": "A memory dumping utility is used to create a memory dump of a running web browser process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process memory space of web browsers on user workstations and servers",
            "action": [
              "Symbolic: Monitor for Sysmon Event ID 10 (ProcessAccess) where the TargetImage is a browser process (e.g., chrome.exe, msedge.exe) and the GrantedAccess code includes '0x1010' (PROCESS_VM_READ and PROCESS_QUERY_INFORMATION), especially if the SourceImage is not a legitimate system or debugging tool (e.g., powershell.exe, rundll32.exe).",
              "Statistical: Profile the frequency of ProcessAccess events (Sysmon Event ID 10) targeting browser processes per host. Use a frequency analysis and alert when the number of access events from a non-standard source process (e.g., powershell.exe) exceeds a statistical threshold (e.g., 3 standard deviations above the hourly mean), indicating potential repeated attempts to dump memory.",
              "Machine Learning: Train a supervised classification model (e.g., Gradient Boosting) on ProcessAccess events. Features would include SourceImage, TargetImage, GrantedAccess flags, user context, and parent process of the source. The model learns to differentiate between benign debugging activities and malicious memory scraping attempts and alerts on events classified as malicious."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]