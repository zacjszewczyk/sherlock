[
  {
    "information_requirement": "Is the adversary modifying malicious tools post-detection to evade signature-based defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.005",
        "name": "Indicator Removal from Tools",
        "evidence": [
          {
            "description": "A process execution event for a known binary packing, obfuscation, or hex editing utility (e.g., UPX, MPRESS, HxD) is observed on a host not categorized as a developer or security research workstation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard User Workstations, Production Servers, Domain Controllers, Critical System File Directories",
            "action": [
              "Create a detection rule to monitor for Windows Event ID 4688. Alert if the NewProcessName field matches a watchlist of modification tools (e.g., 'upx.exe', 'hxd.exe') and the source hostname is not a member of the 'Developer Systems' or 'Security Research' asset groups.",
              "For each execution of a tool from the modification watchlist, calculate the historical execution frequency for the tool on the specific host and by the user. Generate a high-severity alert if the tool has never been observed on the host or if its execution count is in the 99.9th percentile of all process executions for that host over the last 30 days.",
              "Train a Random Forest classifier using features from Event ID 4688, including process name, parent process name (e.g., 'cmd.exe', 'powershell.exe'), user context, and command-line argument patterns (e.g., presence of file paths). Use the model to predict if a process is 'legitimate development' vs. 'potential evasion'. Flag high-confidence 'evasion' predictions for immediate review."
            ]
          },
          {
            "description": "An executable file transferred over the network, with a previously unseen SHA256 hash, has a fuzzy hash (e.g., SSDEEP) similarity score above 85 when compared to a database of known malicious file fuzzy hashes.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DMZ Network Segment, Internal Server-to-Server Traffic",
            "action": [
              "For each new executable file extracted from network traffic (Zeek files.log), compute its SSDEEP fuzzy hash. Alert if the computed hash matches an entry in a threat intelligence feed of known malware fuzzy hashes.",
              "For each executable file from Zeek files.log, calculate its file entropy. Create a risk score by combining the entropy score and the SSDEEP similarity to known malware. Flag files where entropy is > 7.5 (indicating packing/encryption) and SSDEEP similarity to a known malicious file is > 85.",
              "Apply a DBSCAN clustering algorithm to the SSDEEP hashes of all executables observed over the last 7 days. Investigate any cluster that contains a known malicious file hash, as all other files in that cluster are probable variants created through indicator removal."
            ]
          },
          {
            "description": "Within a 60-minute window following an AV/EDR alert that blocked a file, a new process is executed or a network connection is established from the same host, involving a new file hash but exhibiting similar behavioral characteristics (e.g., same C2 destination, similar command-line arguments).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek files.log",
              "AV/EDR Alert Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Infected Host Endpoint, Domain Controllers, Network Gateway",
            "action": [
              "Create a correlation rule that triggers on an AV/EDR 'file blocked' alert. For the next 60 minutes, monitor events from the same host. Alert if a new process (Event ID 4688) is created OR a new network connection (Zeek conn.log) is made to a destination IP/domain on a threat intelligence C2 watchlist.",
              "Upon an AV/EDR block alert, capture the command-line arguments of the blocked process. For all new processes on that host in the next hour, calculate the Levenshtein distance between their command-line arguments and the original. Alert if the executable hash is different but the command-line distance is below a threshold (e.g., less than 20% different), indicating a minor change to evade detection.",
              "Use a time-series anomaly detection model (e.g., ARIMA) to baseline the rate and type of security alerts per host. An AV/EDR block event followed by a statistically significant spike in other, behaviorally related alerts (e.g., suspicious process, anomalous network beacon) from the same host within a short window should be classified as a high-probability automated evasion sequence."
            ]
          },
          {
            "description": "A compiler (e.g., csc.exe, gcc.exe) or build utility (e.g., pyinstaller.exe) is executed on a non-developer host, and within 5 minutes, a newly created executable is run from a temporary or user-writable directory (e.g., %TEMP%, %APPDATA%).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Production Application Servers, Financial Department Workstations, Temporary File Directories (%TEMP%, %APPDATA%)",
            "action": [
              "Create a rule that triggers on Event ID 4688 where NewProcessName is on a compiler watchlist (e.g., 'csc.exe', 'pyinstaller.exe') and the host is not in the 'Developer Systems' group. Correlate this with a subsequent Event ID 4688 from the same host within 5 minutes, where the new process path is in a world-writable directory like '%TEMP%' or '%PUBLIC%'.",
              "Establish a baseline for each host of the time delta between a file write event (Event ID 4663) and a process execution event (Event ID 4688) for the same file path. Flag any sequence where the parent process of the write/execute is a known compiler on a non-developer machine as a statistical anomaly, as this behavior should be zero.",
              "Deploy a pre-trained Hidden Markov Model (HMM) that understands normal process execution sequences on servers and workstations. An observed state transition of 'cmd.exe -> compiler.exe -> file_write_to_temp.exe -> temp.exe' on a production server would be an extremely low-probability sequence, triggering a high-confidence alert."
            ]
          },
          {
            "description": "A file access event shows a process performing a write operation (e.g., 'WriteData', 'AppendData') to a file path that is identical to its own executable image path, and the process is not a known, legitimate software updater.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Directories (e.g., C:\\Program Files), User Profile Directories, System Directories (e.g., C:\\Windows\\System32)",
            "action": [
              "Create a detection rule using Windows Event ID 4663. Alert when the `ProcessName` field is identical to the `ObjectName` field AND the `AccessList` contains a write permission (e.g., '%%4417' for WriteData). Exclude processes on an allowlist of known software updaters.",
              "Profile all processes observed performing self-writes. Create a baseline of legitimate self-writing processes (e.g., 'GoogleUpdate.exe', 'msedge_updater.exe'). Any process not on this baseline that performs a self-write is flagged as anomalous. Increase the risk score if the process's parent is a common scripting engine or shell (e.g., 'powershell.exe', 'wscript.exe').",
              "Train a One-Class SVM (Support Vector Machine) classifier on features of legitimate software update processes (e.g., parent process, user context, file path, digital signature status). Use this model to identify any self-writing process that deviates from the learned 'normal' updater behavior, classifying it as an anomaly indicative of malicious self-modification."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]