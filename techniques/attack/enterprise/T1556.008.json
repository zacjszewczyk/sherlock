[
  {
    "information_requirement": "Is the adversary maintaining persistence by implanting a malicious network provider DLL?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556.008",
        "name": "Network Provider DLL",
        "evidence": [
          {
            "description": "A file hash for a DLL listed in the NetworkProvider registry key value matches a hash on a threat intelligence blocklist.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers (e.g., ADFS, RADIUS), Critical Workstations (e.g., administrator jump boxes), Enterprise Certificate Authority",
            "action": [
              "Symbolic Logic: Join registry value set events (Sysmon Event ID 13) for the key 'HKLM\\System\\CurrentControlSet\\Control\\NetworkProvider\\Order' with file creation events (Sysmon Event ID 11) for the DLL path specified in the registry. Calculate the SHA256 hash of the created DLL file. Compare this hash against a threat intelligence feed of known malicious file hashes. An exact match triggers a high-severity alert.",
              "Statistical Method: For all DLLs identified as network providers, analyze the prevalence of their file hashes across the enterprise. A hash that appears on a very small number of systems (e.g., fewer than 0.1% of endpoints) is a statistical outlier. Calculate a rarity score for each hash; a score in the 99.9th percentile or higher should be flagged for investigation.",
              "Machine Learning Application: Train a supervised classification model (e.g., Random Forest) on features extracted from network provider DLLs, including file properties (size, entropy), digital signature status, and hash prevalence. Label known-good (e.g., standard Windows DLLs) and known-bad samples. Use the model to classify newly observed network provider DLLs, flagging those with a high probability score of being malicious."
            ]
          },
          {
            "description": "The list of providers in the 'HKLM\\System\\CurrentControlSet\\Control\\NetworkProvider\\Order' registry value is modified to include a provider name not on an established allowlist.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers (e.g., ADFS, RADIUS), Critical Workstations (e.g., administrator jump boxes)",
            "action": [
              "Symbolic Logic: Continuously monitor the registry value at 'HKLM\\System\\CurrentControlSet\\Control\\NetworkProvider\\Order' for any modification (Sysmon Event ID 13). Maintain an explicit allowlist of known-good provider names (e.g., 'LanmanWorkstation', 'RDPNP', 'webclient', 'Pnplogon'). Trigger an alert if a provider name is added that is not on this list.",
              "Statistical Method: For each provider name observed in the 'NetworkProvider\\Order' key across all systems, calculate its enterprise-wide frequency. A provider name that is extremely rare (e.g., present on only one machine) is anomalous. Use descriptive statistics to identify names in the lowest percentile of occurrence (e.g., < 1st percentile) and flag for review.",
              "Machine Learning Application: Use an anomaly detection model (e.g., an autoencoder) trained on sequences of legitimate provider names from the 'NetworkProvider\\Order' key. The model learns the normal structure and composition of this comma-separated value. Feed new modifications into the model; a high reconstruction error indicates an anomalous change (e.g., an unusual name or order) that should be alerted on."
            ]
          },
          {
            "description": "The 'mpnotify.exe' process loads a DLL module from a non-standard or user-writable file path, such as '%APPDATA%' or 'C:\\Users\\Public'.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, All Windows Endpoints",
            "action": [
              "Symbolic Logic: Monitor for image load events (Sysmon Event ID 7) where the parent process is 'mpnotify.exe' and the loaded image path is not within 'C:\\Windows\\System32\\'. Maintain an allowlist of known-good DLLs and their paths loaded by this process. Alert on any DLL loaded from a path not on the allowlist, especially from user-writable directories.",
              "Statistical Method: For all DLLs loaded by 'mpnotify.exe' across the enterprise, build a baseline of common file paths. Calculate the frequency of each 'ImageLoaded' path. A path that is a statistical outlier (e.g., in the bottom 1% of frequency) or has high string entropy (suggesting randomization) should be flagged as suspicious.",
              "Machine Learning Application: Develop a time-series model correlating user logon events (Windows Event ID 4624) with subsequent image load events (Sysmon Event ID 7) by 'mpnotify.exe'. An anomaly detection model will flag deviations from the learned normal sequence and timing of DLL loads, such as a new, unexpected DLL being loaded consistently within seconds of every logon."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by using a disguised or obfuscated network provider DLL?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1556.008",
        "name": "Network Provider DLL",
        "evidence": [
          {
            "description": "A DLL registered as a network provider lacks a digital signature, has an invalid signature, or is signed by a publisher not on an established allowlist.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, Critical Workstations, All Windows Endpoints",
            "action": [
              "Symbolic Logic: Upon detection of a new network provider DLL (via Sysmon Event ID 13), query the DLL's signature status from its image load event (Sysmon Event ID 7). Trigger an alert if the 'SignatureStatus' is 'Unsigned', 'Invalid', or if the 'Signature' value (publisher name) is not on a pre-defined allowlist of trusted publishers.",
              "Statistical Method: Profile the digital signature publishers for all network provider DLLs across the environment. Calculate the prevalence of each publisher and alert on those in the lowest percentile (e.g., < 1st percentile), as they may be self-signed or from a newly created, malicious code-signing certificate.",
              "Machine Learning Application: Train a classification model (e.g., Logistic Regression) using features from the DLL's digital signature, such as publisher name, certificate age, and issuing authority. The model can learn to distinguish between legitimate, common publishers and suspicious, rarely seen ones, assigning a risk score to each new network provider DLL."
            ]
          },
          {
            "description": "A new provider name added to the 'NetworkProvider\\Order' registry key has a low Levenshtein distance to a known legitimate provider name, indicating potential typosquatting.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, All Windows Endpoints",
            "action": [
              "Symbolic Logic: Upon modification of 'HKLM\\...\\NetworkProvider\\Order' (Sysmon Event ID 13), extract the new provider name. Compare it against an explicit blocklist of known typosquatted names derived from threat intelligence.",
              "Statistical Method: For each new provider name, calculate the Levenshtein distance to all names on an allowlist of legitimate providers (e.g., 'LanmanWorkstation', 'RDPNP'). A small distance (e.g., 1 or 2) to a legitimate name, where the new name is not itself on the allowlist, indicates a high probability of typosquatting and should be alerted on.",
              "Machine Learning Application: Use a character-level Natural Language Processing (NLP) model trained on a large corpus of legitimate software and provider names. A new provider name that receives a high perplexity (low probability) score from the model is likely anomalous or algorithmically generated and should be flagged."
            ]
          },
          {
            "description": "A DLL registered as a network provider has a calculated file entropy value that significantly exceeds the baseline for typical, un-packed executable files.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, All Windows Endpoints",
            "action": [
              "Symbolic Logic: Upon detection of a new network provider DLL (via Sysmon Event ID 13/11), programmatically calculate its Shannon entropy. If the entropy value exceeds a predefined hard threshold (e.g., > 7.2), which strongly indicates packing or encryption, generate a high-severity alert.",
              "Statistical Method: Calculate the file entropy for all DLLs in 'C:\\Windows\\System32' to establish a baseline distribution for legitimate system files (typically a mean around 6.0). For any newly registered network provider DLL, compare its entropy to this baseline. An entropy value that is a statistical outlier (e.g., > 3 standard deviations above the mean) should be flagged.",
              "Machine Learning Application: Train a one-class SVM on a feature set from known-good DLLs, including entropy, file size, and number of imported functions. When a new network provider DLL is observed, feed its features to the model. If the model flags it as an anomaly, it is likely packed or obfuscated."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary capturing and exfiltrating credentials using a malicious network provider DLL?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1556.008",
        "name": "Network Provider DLL",
        "evidence": [
          {
            "description": "The process 'mpnotify.exe' initiates an outbound network connection or writes to a file, which is inherently anomalous behavior.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Sysmon Event ID 11",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, All Windows Endpoints, Network Egress Points",
            "action": [
              "Symbolic Logic: Create a high-severity alert that triggers on any instance where the process name is 'mpnotify.exe' in a network connection event (Sysmon Event ID 3) or a file creation event (Sysmon Event ID 11). This behavior is illegitimate and is a strong indicator of a compromised provider DLL.",
              "Statistical Method: Across the entire enterprise, the count of network connections (from Sysmon or Zeek logs) or file writes originating from 'mpnotify.exe' should be zero. Periodically query logs for these events. Any host with a count greater than zero is a high-confidence statistical outlier and requires immediate investigation.",
              "Machine Learning Application: Use an unsupervised model (e.g., Isolation Forest) on process behaviors (network connections, file writes, process calls). The model would learn that 'mpnotify.exe' never performs these actions, and any instance where it does would be immediately flagged as a top-scoring anomaly."
            ]
          },
          {
            "description": "A credential-handling process (e.g., 'lsass.exe', 'winlogon.exe') that has loaded a suspicious network provider DLL creates a file in a temporary or user-writable directory.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers, User Workstations, File Servers",
            "action": [
              "Symbolic Logic: Correlate the loading of a suspicious DLL (identified via other indicators) by 'lsass.exe' or 'winlogon.exe' (Sysmon Event ID 7) with subsequent file creation events (Sysmon Event ID 11) by the same process. Alert if the file is created in a staging directory (e.g., 'C:\\Users\\Public\\', '%TEMP%\\') and the filename matches patterns like '*.log', '*.tmp', or 'creds.*'.",
              "Statistical Method: Establish a baseline of normal file write behavior for 'lsass.exe' and 'winlogon.exe'. These processes should almost never write files. Any file creation event (Sysmon Event ID 11) from these processes is a statistical anomaly. Any host showing a non-zero count of such events is a high-confidence outlier.",
              "Machine Learning Application: Train a sequence analysis model (e.g., LSTM) on event logs to learn the typical sequence of events following a user logon (Windows Event ID 4624). An anomalous sequence, such as logon -> lsass.exe loads unknown DLL -> lsass.exe creates file, would be flagged by the model as a deviation from learned normal behavior."
            ]
          },
          {
            "description": "A process that has loaded a suspicious network provider DLL initiates an outbound network connection to a destination associated with low reputation or rarity.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Sysmon Event ID 7",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS servers, Network Egress Points (e.g., firewalls, proxies), Domain Controllers, Authentication Servers",
            "action": [
              "Symbolic Logic: Identify processes that have loaded a suspicious network provider DLL. For these processes, monitor network connection events (Sysmon Event ID 3). Correlate the destination IP and domain (from Zeek conn.log/dns.log) with threat intelligence feeds for known C2 servers or credential drop sites. An exact match triggers an alert.",
              "Statistical Method: For network connections made by processes loading network provider DLLs, analyze the destination. Using Zeek logs, identify destination IPs or domains that are statistically rare across the enterprise (e.g., only one host connects). Enrich this with external data; a destination with a low reputation score or belonging to a rarely used Autonomous System Number (ASN) should be flagged.",
              "Machine Learning Application: Use a time-series anomaly detection model on network traffic volume (e.g., total bytes) from credential-handling processes ('winlogon.exe', 'lsass.exe'). A sharp, anomalous spike in outbound data (captured in Zeek conn.log or Sysmon Event ID 3) immediately following a user logon (Windows Event ID 4624) could indicate the exfiltration of captured credentials."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]