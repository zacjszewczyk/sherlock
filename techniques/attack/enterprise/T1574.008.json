[
  {
    "information_requirement": "Is the adversary maintaining persistence by hijacking application search order?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "An executable file (.exe, .com, .scr, .bat) is written to a directory listed in the system's PATH environment variable, and its filename matches a known system utility or its hash matches a known malicious signature.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Windows Security Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of endpoints and servers, specifically directories listed in system and user PATH variables, and temporary download locations (e.g., browser caches, Downloads folder).",
            "action": [
              "Monitor file creation events (Windows Event ID 4663) or Zeek file analysis logs (files.log). For any new file with an executable extension (.exe, .com, .scr, .bat) in a PATH directory, compute its hash. Alert if the hash matches an entry in a threat intelligence feed of known malware.",
              "For newly created executable files in PATH directories, calculate the Shannon entropy of the filename. Establish a per-directory baseline of filename entropy. Alert on any new file whose filename entropy exceeds the 95th percentile for that directory, indicating potential use of randomly generated names by malware.",
              "Train a Random Forest classifier on features from file creation events: file path depth, filename entropy, file size, number of PE sections, and whether the file is signed. Use labeled historical data of benign and malicious file creations. Deploy the model to score new file creations in real-time, alerting on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A file is created with an extension that has higher precedence in the PATHEXT environment variable (e.g., .com, .bat) than a legitimate system utility of the same base name (e.g., creating 'net.com' in a directory to intercept calls to 'net.exe').",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application installation directories (e.g., 'C:\\Program Files'), system directories ('C:\\Windows\\System32'), and user profile folders where legitimate utilities might be called without a full path.",
            "action": [
              "Maintain a list of critical system executable names (e.g., 'net', 'ipconfig', 'findstr'). Monitor file creation events (Windows Event ID 4663) for any new file where the base name matches this list but the extension has a higher precedence in PATHEXT (e.g., '.com', '.bat', '.cmd') than the legitimate utility's extension ('.exe'). Alert on any such creation.",
              "For each process execution (Windows Event ID 4688), parse the process name and its full path. For common system processes, establish a baseline of execution paths across the enterprise. An execution from a path that falls below a low frequency threshold (e.g., seen in less than 0.1% of all executions for that process name) should trigger an alert for anomalous execution location.",
              "Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA) on the daily count of executions for each key system utility from non-standard paths. The model, trained on historical data, will forecast the expected count. An observed count that significantly exceeds the forecasted upper confidence interval indicates a potential widespread search order hijacking campaign."
            ]
          },
          {
            "description": "A legitimate parent process spawns a child process with a common system utility name, but the child process executes from an unexpected, non-standard path instead of a trusted system directory (e.g., 'explorer.exe' spawns 'C:\\Users\\Public\\net.exe').",
            "data_sources": [
              "Windows Security Event ID 4688 (with command line logging enabled)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Aggregated process execution logs from all Windows endpoints and servers, stored in a central SIEM or data lake.",
            "action": [
              "For each process creation event (Windows Event ID 4688), alert if the child process name is on a list of common system utilities (e.g., 'net.exe', 'cmd.exe') AND its full path is NOT in a trusted system directory (e.g., 'C:\\Windows\\System32\\') AND the parent process is a common user application (e.g., 'winword.exe', 'chrome.exe', 'explorer.exe').",
              "Build a baseline of (parent_process_path, child_process_path) tuples from historical logs. For each new process creation, check if the tuple exists in the baseline. If not, or if its frequency is in the bottom 1st percentile of all tuples for that parent, flag it as anomalous. This highlights 'least-frequent' execution paths.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to process execution events. Use features such as vectorized parent path, vectorized child path, and parent-child process name combination. Normal activity will form dense clusters. Events classified as noise by DBSCAN are outliers representing potentially hijacked process executions and should be investigated."
            ]
          },
          {
            "description": "A process, identified as a masquerading system utility executing from a non-standard path, establishes an outbound network connection to an external, non-corporate IP address.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Filtering Platform Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process and network event logs, correlated with network telemetry from host-based firewalls (WFP) and network sensors (Zeek) at key network egress points.",
            "action": [
              "Correlate process creation events (Windows Event ID 4688) with network connection events (Zeek conn.log or WFP 5156). Alert when a process with a common utility name (e.g., 'svchost.exe') executes from a user-writable directory (e.g., 'C:\\Users\\*') and initiates an outbound TCP/UDP connection to an IP address present on a threat intelligence blocklist.",
              "For network connections from masquerading processes, analyze associated DNS queries (Zeek dns.log). Calculate the Shannon entropy of the queried domain names over a 5-minute window. A high entropy score, or a high ratio of distinct domains to total queries, is a statistical indicator of domain generation algorithm (DGA) activity for C2.",
              "Train a binary classifier (e.g., Gradient Boosting) to distinguish benign vs. malicious TLS connections using features from Zeek conn.log and ssl.log (e.g., duration, bytes sent/received, JA3/JA3S hashes, certificate validity). Apply this model to score traffic originating from processes already flagged as potentially hijacked. A 'malicious' classification elevates the alert severity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by hijacking application search order?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "A low-privilege user account writes an executable file to a world-writable directory (e.g., 'C:\\Windows\\Temp') that is also in the search path of a high-privilege service or scheduled task.",
            "data_sources": [
              "Windows Security Event ID 4663 (Object Access Auditing)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs for world-writable directories such as 'C:\\Windows\\Temp', 'C:\\ProgramData', and directories with misconfigured ACLs on servers and workstations.",
            "action": [
              "Monitor file creation events (Windows Event ID 4663) in world-writable directories. Alert if a new executable (.dll, .exe) is created by a non-SYSTEM/non-ADMINISTRATOR account AND the file's hash matches a known privilege escalation tool (e.g., Juicy Potato, PrintSpoofer) from a threat intelligence feed.",
              "For file creation events in application directories, calculate a risk score based on the disparity between the creating user's privilege level and the directory owner's privilege level. A file created by a 'Medium Integrity' process in a directory owned by 'SYSTEM' where most files are written by 'SYSTEM' is a statistical anomaly. Flag events with a score above a defined threshold.",
              "Train a classification model (e.g., Logistic Regression) to predict suspicious file writes. Features should include: writing process integrity level, target directory ACLs, file extension, and if the directory is in the system PATH. The model can identify file writes that are characteristic of privilege escalation pre-staging."
            ]
          },
          {
            "description": "A file (e.g., DLL or EXE) is written to an application's directory immediately before a privileged process, such as an auto-updater or installer, is executed, where the filename matches a binary the privileged process is known to load insecurely.",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system and process audit logs for directories containing third-party software with update services that run as SYSTEM, especially on servers and developer workstations.",
            "action": [
              "Maintain a watchlist of known vulnerable applications and the specific binaries (DLLs/EXEs) they load insecurely. Create a rule that triggers when a file creation event (4663) for a watched filename occurs in a vulnerable path, followed within 60 seconds by the execution of the vulnerable privileged application (4688).",
              "Establish a baseline of file modification and creation rates per hour for directories containing privileged applications. Use time-series analysis to identify anomalous spikes. A burst of file creations in a directory that is normally static, occurring outside a known patch window, should be flagged as statistically significant and investigated.",
              "Model the normal sequence of events for software updates using an LSTM-based autoencoder. The sequence would include the updater process starting, writing to temp, and modifying Program Files. An observed sequence that deviates, such as a file write to the Program Files directory by an unrelated process just before the updater runs, will produce a high reconstruction error and be flagged as an anomaly."
            ]
          },
          {
            "description": "A process running with a 'High' or 'System' integrity level spawns a child process that matches a common system utility name but executes from a path outside of 'C:\\Windows\\System32' or other trusted system directories.",
            "data_sources": [
              "Windows Security Event ID 4688 (with command line logging)",
              "Windows Event ID 4673 (Privileged Service Called)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on Domain Controllers, application servers, and other high-value assets where services and scheduled tasks run with elevated privileges.",
            "action": [
              "Filter process creation events (Windows Event ID 4688) where the parent process integrity level is 'High' or 'System'. Alert if such a parent spawns a child process with a common utility name (e.g., 'powershell.exe', 'cmd.exe') from a path not located in 'C:\\Windows\\System32' or 'C:\\Windows\\SysWOW64'.",
              "For each process that regularly runs as SYSTEM (e.g., 'services.exe', 'lsass.exe'), profile the set of child processes it normally spawns and their full paths. Calculate the Shannon entropy of the child process paths on a daily basis. A sudden increase in entropy, indicating executions from more varied and unusual locations, is a statistical indicator of hijacking.",
              "Train a One-Class SVM on features of legitimate privileged process executions. Features should include parent image path, child image path, and command-line arguments. This model learns a boundary of normal behavior. Any new execution falling outside this boundary is classified as an anomaly, potentially indicating a successful privilege escalation via search order hijacking."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking application search order?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "An unsigned or improperly signed executable file is created with a filename that masquerades as a legitimate security tool component (e.g., 'MsMpEng.exe', 'Sysmon.exe') in a directory other than its known, legitimate installation path.",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on all endpoints, specifically monitoring the installation directories of security products (e.g., 'C:\\Program Files\\Windows Defender') and system directories for unauthorized file modifications or additions.",
            "action": [
              "Using Sysmon Event ID 1, alert if a process is created where the `Image` filename matches a known security tool (e.g., 'MsMpEng.exe') but the `SignatureStatus` is 'Invalid' or 'Unsigned', or the `Image` path is not the legitimate, expected path for that tool.",
              "Periodically scan directories of trusted and security applications. For each executable/DLL, verify its digital signature. Calculate the percentage of unsigned files in these critical directories across the enterprise. A sudden increase in the proportion of unsigned files from one day to the next is a statistical anomaly that requires investigation.",
              "Train a variational autoencoder on the PE header and section features of legitimate, signed security tool binaries. When a new file masquerading as a trusted component is created, feed its feature vector into the autoencoder. A high reconstruction error indicates the file is structurally dissimilar to legitimate files and is likely a malicious implant."
            ]
          },
          {
            "description": "A process executing from a non-standard path (e.g., 'C:\\Perflogs\\net.exe') is launched with command-line arguments that are syntactically valid for the legitimate utility it impersonates but are contextually suspicious.",
            "data_sources": [
              "Windows Security Event ID 4688 (with Command Line logging enabled)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Aggregated command-line logs from all endpoints, stored and searchable within a SIEM or data lake.",
            "action": [
              "For process creation events (Event ID 4688) where the process name is a system utility but the path is non-standard, search the command line for suspicious argument patterns, such as reconnaissance ('net group \\\"Domain Admins\\\" /domain'), user creation ('net user /add'), or defense disabling. Alert on any match.",
              "For each common system utility, build a baseline of its command-line argument structure (argument count, average argument length, character distribution). Calculate the Mahalanobis distance of a new command line's feature vector from this baseline distribution. A large distance indicates a statistically unusual command line that may be crafted for malicious use.",
              "Train a character-level n-gram language model on a large corpus of legitimate command-line invocations for system utilities. Use this model to calculate the perplexity score of new command lines. A command line with very high perplexity, especially when executed by a masquerading process, is highly suspicious of being novel and potentially malicious."
            ]
          },
          {
            "description": "A trusted, signed parent process (e.g., 'winword.exe', 'chrome.exe') spawns a child process with a common system utility name (e.g., 'cmd.exe') from a user-writable, temporary, or otherwise unexpected directory.",
            "data_sources": [
              "Windows Security Event ID 4688 (with command line logging)",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from user workstations, focusing on parent-child relationships where the parent is a common productivity or browser application.",
            "action": [
              "Create a rule that triggers when a parent process signed by a trusted publisher (e.g., Microsoft Corporation, Google LLC) spawns a child process from a user-writable directory (e.g., 'AppData\\Local\\Temp', 'Downloads') AND the child process is not a known installer or updater process (e.g., 'setup.exe', 'update.exe').",
              "For each trusted parent process (e.g., 'winword.exe'), maintain a frequency distribution of all child process full paths it spawns. Flag any child process execution where the path is a statistical outlier (e.g., in the bottom 1st percentile of frequency, seen for the first time). This 'least frequent path' analysis can uncover novel living-off-the-land and evasion techniques.",
              "Model normal process trees as a graph where nodes are process images and edges represent parent-child relationships, weighted by frequency. A newly observed, low-weight edge originating from a trusted parent node (e.g., 'chrome.exe') to a child node representing a system utility in an unusual path (e.g., 'C:\\Users\\Public\\svchost.exe') would be flagged as a structural anomaly by a graph-based anomaly detection algorithm."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]