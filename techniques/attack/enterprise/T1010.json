[
  {
    "information_requirement": "Is the adversary attempting to discover open application windows on enterprise systems?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1010",
        "name": "Application Window Discovery",
        "evidence": [
          {
            "description": "A process execution event is recorded where the SHA256 hash of the process executable file matches a value present in a threat intelligence feed of known malicious tools that utilize T1010.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, domain controllers, and application servers with process creation logging enabled.",
            "action": [
              "Symbolic: Create a watchlist of SHA256/MD5 hashes of known malicious tools (e.g., Cobalt Strike beacons, DarkWatchman) that perform application window discovery. Query process creation logs (Windows Event ID 4688) every 5 minutes to check if the ProcessHash field matches any hash on the watchlist. An exact match triggers a high-severity alert.",
              "Statistical: For each process hash observed, calculate its prevalence across the enterprise over the last 30 days. Identify hashes that are extremely rare (e.g., seen on < 0.1% of endpoints). If a process with a rare hash also has a parent process that is anomalous (e.g., winword.exe, powershell.exe), increase its risk score. A score exceeding a statistically determined threshold (e.g., 99th percentile) generates a medium-severity alert.",
              "Machine Learning: Develop a binary classification model (e.g., Logistic Regression, Random Forest) trained on labeled process execution data (benign vs. malicious). Features should include process name, parent process name, command-line length, command-line entropy, and the prevalence of the file hash. Use the model to score all new process executions in near-real-time. A prediction score indicating 'malicious' with high confidence (> 0.9) triggers an alert for analyst review."
            ]
          },
          {
            "description": "A command-line execution or PowerShell script block log contains strings indicative of application window discovery, such as 'tasklist /v', 'Get-Process', or 'gwmi win32_process'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, domain controllers, and application servers where command-line and PowerShell script block logging is enabled.",
            "action": [
              "Symbolic: Create a detection rule that searches process command-line logs (Windows Event ID 4688) and PowerShell script logs (Windows Event ID 4104) for exact string matches of known discovery commands, such as `tasklist /v`, `Get-Process | Select-Object MainWindowTitle`, and `gwmi win32_process`. If the parent process is a web server (e.g., w3wp.exe), an Office application (winword.exe), or a scripting engine (wscript.exe, mshta.exe), trigger a high-severity alert.",
              "Statistical: For each host, establish a baseline of the frequency of discovery command execution (e.g., tasklist.exe) per user over a 30-day rolling window. Calculate the mean and standard deviation. Generate an alert when the hourly execution count for a specific user on a host exceeds 3 standard deviations above their established baseline.",
              "Machine Learning: Use a Natural Language Processing (NLP) topic modeling technique like Latent Dirichlet Allocation (LDA) on PowerShell script block logs (Windows Event ID 4104). Train the model on benign administrative scripts to identify common topics. When a new script is executed, classify its topic. If the script is classified into a rare or new 'discovery' topic that involves process/window enumeration cmdlets and is executed by a non-administrative user, flag it for investigation."
            ]
          },
          {
            "description": "A common discovery utility (e.g., 'tasklist.exe') is executed by a parent process not typically associated with it (e.g., 'winword.exe' instead of 'cmd.exe'), or is executed under a service account context outside of scheduled maintenance windows.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, application servers, and developer workstations where parent-child process relationships are logged.",
            "action": [
              "Symbolic: Define a list of known-good parent-child process relationships for discovery utilities (e.g., Parent: explorer.exe, Child: cmd.exe; Parent: cmd.exe, Child: tasklist.exe). Create a rule that alerts whenever a discovery utility is executed by a parent process not on this allowlist, such as outlook.exe or w3wp.exe.",
              "Statistical: For each discovery utility (e.g., tasklist.exe), build a frequency table of all its parent processes across the enterprise over 30 days. Calculate the rarity of each parent-child pair. A pair that falls below a rarity threshold (e.g., observed less than 5 times enterprise-wide, or in the bottom 1st percentile of frequency) should generate a medium-severity alert.",
              "Machine Learning: Train a graph-based anomaly detection model on parent-child process relationship graphs. Represent normal activity as a large graph where nodes are processes and edges are invocations. When a new process execution creates an edge that is structurally dissimilar to the learned graph (e.g., has a high anomaly score based on graph embeddings), flag it as a potential threat."
            ]
          },
          {
            "description": "On a single host, a T1010-related activity (e.g., 'tasklist /v') is observed within a 5-minute window of a file being compressed (T1560.001), a new outbound network connection to a low-reputation IP (T1071), or a credential dumping attempt (T1003).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Host-based logging on critical servers, network traffic at internet gateways and VPN concentrators.",
            "action": [
              "Symbolic: Create a stateful correlation rule that triggers when Event A (T1010, e.g., tasklist.exe execution from Event ID 4688) is followed by Event B (e.g., 7z.exe execution, access to LSASS process via Event ID 4663, or an outbound connection to an IP on a C2 blocklist in Zeek conn.log) from the same hostname within a 5-minute window.",
              "Statistical: For each host, model the time delta between pairs of events (e.g., T1010 and T1071). Establish a baseline distribution of these time deltas for benign activity. If a new event pair occurs with a time delta that is a statistical outlier (e.g., in the 1st percentile, indicating unusually rapid succession), flag the sequence for review.",
              "Machine Learning: Implement a Hidden Markov Model (HMM) where states represent ATT&CK techniques. Train the model on known benign and malicious sequences of activities. Feed real-time host and network events into the model. If the model transitions into a high-probability malicious sequence (e.g., Discovery -> Collection -> Exfiltration) with a Viterbi path probability above a set threshold, generate an alert for the entire identified attack chain."
            ]
          },
          {
            "description": "A PowerShell script block log (Windows Event ID 4104) contains unobfuscated or obfuscated code that uses .NET ('[System.Diagnostics.Process]') or Win32 API calls ('EnumWindows', 'GetWindowText') to enumerate application windows.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.",
            "action": [
              "Symbolic: Create a detection rule that uses regular expressions to search PowerShell script block logs (Windows Event ID 4104) for keywords such as 'DllImport', 'EnumWindows', 'GetForegroundWindow', 'GetWindowText', and '[System.Diagnostics.Process]::GetProcesses()'. An alert is generated upon a match, with higher severity if the script also contains obfuscation indicators like '-join', 'char', or 'FromBase64String'.",
              "Statistical: Calculate the character-level entropy for every script block logged in Event ID 4104. Also, calculate the ratio of non-alphanumeric characters to total characters. Establish a baseline for these metrics across all scripts. A script whose entropy and non-alphanumeric ratio both exceed the 95th percentile is likely obfuscated and should be flagged for manual review.",
              "Machine Learning: Train a classifier (e.g., a Convolutional Neural Network) on a large dataset of PowerShell scripts labeled as benign or malicious. The model learns to identify malicious patterns directly from the script text. Feed all new script blocks (Event ID 4104) into the model for real-time classification. A 'malicious' prediction with high confidence triggers a critical alert."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]