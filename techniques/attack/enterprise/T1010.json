[
  {
    "information_requirement": "Is the adversary attempting to discover open application windows on enterprise systems?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1010",
        "name": "Application Window Discovery",
        "evidence": [
          {
            "description": "A process executes whose file hash (SHA256, MD5) matches an entry on a threat intelligence feed of tools known to perform application window discovery.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.",
            "action": [
              "Continuously compare the SHA256 hash from process creation logs (Windows Event ID 4688) and file transfer logs (Zeek files.log) against a watchlist of known malicious tool hashes (e.g., DarkWatchman, Cobalt Strike). Trigger a high-severity alert on any match.",
              "Calculate the enterprise-wide prevalence (percentage of hosts) for every process hash observed over a 30-day baseline. If a process hash is seen on fewer than 0.1% of hosts, flag it as rare. If a rare process is spawned by an anomalous parent (e.g., winword.exe, powershell.exe), generate a medium-severity alert.",
              "Deploy a pre-trained binary classification model (e.g., Random Forest) to score new process executions in real-time. Use features including parent process, command-line arguments, file hash prevalence, and process name. Trigger a high-severity alert for any process with a 'malicious' prediction confidence score above 0.9."
            ]
          },
          {
            "description": "A command line (Windows Event ID 4688) or PowerShell script block (Windows Event ID 4104) contains specific command strings used for enumerating application windows, such as 'tasklist /v' or 'Get-Process'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers with command-line and PowerShell script block logging enabled.",
            "action": [
              "Search command-line arguments (Event ID 4688) and PowerShell script block content (Event ID 4104) for regular expressions matching discovery commands (e.g., `tasklist /v`, `Get-Process .?MainWindowTitle`, `gwmi .?win32_process`). Escalate to a high-severity alert if the parent process is an Office application, web server, or unsigned script host.",
              "For each user-host pair, establish a 30-day baseline of the hourly execution frequency for known discovery commands (e.g., tasklist.exe). Calculate the mean and standard deviation. Generate a medium-severity alert when a user's execution count in a given hour exceeds three standard deviations above their historical average on that host.",
              "Apply a Latent Dirichlet Allocation (LDA) topic model to all PowerShell script block logs (Event ID 4104) to categorize them into functional topics (e.g., 'system administration', 'software installation', 'discovery'). Alert on scripts that are classified into a rare 'discovery' topic, especially if executed by a non-administrative user or from a non-interactive session."
            ]
          },
          {
            "description": "A common discovery utility (e.g., 'tasklist.exe') is executed from an unusual parent process (e.g., 'outlook.exe') or by a service account outside of a defined maintenance window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.",
            "action": [
              "Maintain an allowlist of legitimate parent-child process relationships for discovery utilities (e.g., explorer.exe -> cmd.exe -> tasklist.exe). Query process creation logs (Event ID 4688) and trigger a high-severity alert for any execution of a discovery utility whose parent process is not on the allowlist.",
              "Build a frequency table of all parent-child process pairs observed enterprise-wide over the last 30 days. Calculate the probability of each pair. Generate a medium-severity alert for any observed pair that falls into the bottom 1st percentile of frequency, indicating a rare relationship.",
              "Utilize a graph-based anomaly detection model trained on historical parent-child process data. Represent each new process execution as an edge in the graph. If the model assigns a high anomaly score to a new edge (e.g., winword.exe -> tasklist.exe), indicating it is structurally inconsistent with the learned graph of normal behavior, flag it for investigation."
            ]
          },
          {
            "description": "An application window discovery action (T1010) occurs in sequence with other suspicious activities on the same host within a short time frame, such as data compression (T1560.001), credential access (T1003), or establishing a new external connection (T1071).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.",
            "action": [
              "Implement a stateful correlation rule that triggers a high-severity alert when a T1010 indicator (e.g., tasklist.exe execution in Event ID 4688) is followed within 10 minutes on the same host by an indicator of collection (e.g., 7z.exe execution), credential dumping (e.g., LSASS access in Event ID 4663), or exfiltration (e.g., new outbound connection to a low-reputation IP in Zeek conn.log).",
              "For all hosts, model the distribution of time deltas between sequential pairs of ATT&CK techniques observed in logs. Generate a medium-severity alert when a sequence like Discovery (T1010) -> Collection (T1560) occurs with a time delta that is a statistical outlier (e.g., in the fastest 5th percentile), suggesting automated or scripted behavior.",
              "Feed a stream of security events, tagged with ATT&CK techniques, into a pre-trained Hidden Markov Model (HMM) or Recurrent Neural Network (RNN). The model should be trained to recognize probable attack sequences. Generate a critical alert when the model identifies a high-probability transition from a 'Discovery' state to a 'Collection' or 'Exfiltration' state originating from the same host."
            ]
          },
          {
            "description": "A PowerShell script uses .NET methods or direct Win32 API calls, potentially obfuscated, to enumerate application windows, bypassing standard command-line tools.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.",
            "action": [
              "Scan PowerShell script block logs (Event ID 4104) with regular expressions for API call signatures related to window enumeration (e.g., 'EnumWindows', 'GetWindowText', '[System.Diagnostics.Process]') in conjunction with obfuscation patterns (e.g., 'FromBase64String', '-join', '[char]'). Trigger a high-severity alert on a match.",
              "For each script block in Event ID 4104, compute its character-level entropy and the ratio of non-alphanumeric characters to total characters. Establish a baseline distribution for these metrics. Flag any script where both metrics exceed the 98th percentile of the baseline, indicating a high likelihood of obfuscation.",
              "Classify all PowerShell script blocks in real-time using a pre-trained deep learning model (e.g., a CNN or transformer-based model) that has learned to distinguish malicious script patterns from benign ones directly from the text. Trigger a critical alert if a script is classified as malicious with a confidence score over 0.95."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]