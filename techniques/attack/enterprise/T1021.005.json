[
  {
    "information_requirement": "Has the adversary moved laterally within the network using VNC?",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1021.005",
        "name": "VNC",
        "evidence": [
          {
            "description": "A VNC connection (TCP ports 5800-5806, 5900-5906) originating from or targeting an internal IP address on a watchlist of compromised or suspicious hosts, or the execution of a VNC client/server process whose file hash matches a known-malicious signature.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic logs from core switches and perimeter firewalls; Process execution logs from all workstations and servers.",
            "action": "1. Symbolic: Continuously monitor Zeek conn.log for traffic on VNC ports (5800-5806, 5900-5906). Cross-reference the source and destination IP addresses against an internal, dynamic watchlist of IPs associated with prior alerts or confirmed compromises. Separately, monitor Windows Event ID 4688 for VNC-related process names (e.g., vncviewer.exe, winvnc.exe, screensharingd) and hash the executable. Compare this hash against a threat intelligence feed of known malicious tool signatures. Generate a high-severity alert on any match. 2. Statistical: Assign a risk score to each internal host based on past security incidents. For each VNC connection, calculate a session risk score by summing the risk scores of the source and destination hosts. Analyze the distribution of session risk scores over a 24-hour window and flag any session whose score exceeds the 95th percentile. 3. ML: Train a classification model (e.g., Logistic Regression) using features from Zeek conn.log (duration, service, bytes sent/received) and host context (source/destination risk score, asset criticality). The model should predict a probability that the VNC session is malicious. Alert on sessions where the predicted probability is > 0.85."
          },
          {
            "description": "A VNC-related process is executed from an atypical file path (e.g., %APPDATA%, %TEMP%), has a name designed to masquerade as a legitimate process, or is launched with high-entropy command-line arguments suggesting obfuscation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and command-line execution logs from endpoint detection and response (EDR) agents on all workstations and servers.",
            "action": "1. Symbolic: Create a detection rule that monitors Sysmon Event ID 1 for process creations where the Image path is not in a whitelisted directory (e.g., C:\\Program Files\\, C:\\Windows\\System32\\) but the OriginalFileName or Description contains 'VNC'. Also, alert if the process name (e.g., svchost.exe) is on a list of commonly abused names but is associated with VNC network behavior. 2. Statistical: For each VNC-related process execution, calculate the Shannon entropy of its command-line arguments. Establish a baseline entropy score for legitimate VNC tools. Alert when a process's command-line entropy exceeds 3 standard deviations above the mean of its respective baseline, indicating likely packing or obfuscation. 3. ML: Use a one-class SVM (Support Vector Machine) model trained on features from legitimate VNC process executions (e.g., file path depth, command-line length, parent process name). Apply this model to new VNC process events; any event classified as an outlier by the model is flagged as a potential anomaly."
          },
          {
            "description": "A pattern of VNC network connections between internal hosts that deviates from an established baseline of normal activity, measured by the accounts used, time-of-day, source-destination pairing frequency, or session duration.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication logs from Domain Controllers and member servers; Network flow data from internal network segments, particularly those housing critical assets.",
            "action": "1. Symbolic: Maintain an explicit access control list defining which user accounts are authorized to initiate VNC sessions to which specific host groups (e.g., 'DBAdmins' to 'SQLServers'). Monitor Windows Event ID 4624 for logon type 10 (RemoteInteractive) and correlate with VNC port traffic from Zeek conn.log. Alert on any VNC connection that violates this predefined policy. 2. Statistical: For each user, build a baseline of normal VNC activity including typical login hours, session durations, and destination hosts. Use a moving average and standard deviation for session counts per hour. Flag any user initiating a VNC session outside of their typical hours (e.g., > 2 standard deviations from their mean login hour) or to a host they have not connected to in the last 90 days. 3. ML: Employ a time-series anomaly detection model (e.g., LSTM) on the aggregate VNC connection volume across the network, segmented by subnet. The model should learn the normal daily and weekly seasonality of VNC usage. An alert is generated when observed traffic significantly deviates from the model's predicted forecast."
          },
          {
            "description": "A statistical spike in failed VNC connection attempts (e.g., TCP resets on VNC ports) or authentication failures (Windows Event ID 4625) from a single source host, followed by a successful connection (established TCP session or Windows Event ID 4624), indicating a brute-force or password spraying attack.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4625",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at key aggregation points (e.g., core switches); Security event logs from all servers, especially authentication servers like Domain Controllers.",
            "action": "1. Symbolic: Implement a stateful rule that triggers when a single source IP generates more than 20 failed VNC connection events (either TCP resets on ports 5900-5906 in Zeek conn.log or Windows Event ID 4625 on a target) within a 5-minute window, immediately followed by a successful connection event (established TCP session or Windows Event ID 4624) from the same source to any of the previous targets. 2. Statistical: For each source IP, calculate the ratio of failed-to-successful VNC authentications (count of Event ID 4625 / count of Event ID 4624) in a rolling 1-hour window. Identify any source IP whose ratio exceeds the 99th percentile for all internal hosts. 3. ML: Use a Hidden Markov Model (HMM) to model attacker behavior. Define two states: 'Brute-Force' (high probability of emitting failed connection events) and 'Success' (high probability of emitting a successful connection event). If the model transitions a source IP from the 'Brute-Force' state to the 'Success' state, generate an alert."
          },
          {
            "description": "During or immediately after an authenticated VNC session, the target host executes reconnaissance commands, credential access tools, or initiates new network connections to other internal systems, indicating post-exploitation activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process and network connection logs from critical servers and high-value user workstations; Network DNS and flow logs from datacenter and user subnets.",
            "action": "1. Symbolic: First, identify an active VNC session by correlating a successful remote logon (Event ID 4624, Logon Type 10) with an established TCP connection on VNC ports. Within a 30-minute window following this event, monitor the target host (via Sysmon Event ID 1) for child processes that match a watchlist of malicious commands (e.g., `whoami`, `net group`, `nltest`, `powershell.exe -enc`). Alert on any match. 2. Statistical: For the set of processes and network connections spawned during a VNC session, calculate a 'rarity score' which is the inverse frequency of each process name and destination port pair in the organization's historical baseline. Flag sessions where the total rarity score exceeds a percentile-based threshold (e.g., 98th percentile). 3. ML: Construct a process execution graph for activity following a VNC login. Use a graph embedding algorithm (like Node2Vec) to create vector representations of these activity graphs. Train a classifier (e.g., Random Forest) on these vectors, labeled with known benign and malicious post-access scenarios, to classify new post-VNC activity in near real-time."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]