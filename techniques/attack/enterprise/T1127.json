[
  {
    "information_requirement": "Is an adversary using a trusted developer utility to proxy the execution of malicious code, thereby bypassing application control defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1127",
        "name": "Trusted Developer Utilities Proxy Execution",
        "evidence": [
          {
            "description": "A trusted developer utility process (e.g., MSBuild.exe, WinDbg.exe) is observed with a file hash matching a known malicious signature, or the process initiates a network connection to a destination IP or domain present on a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, domain controllers, and internet gateway/firewall.",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) for developer utilities with network connection logs (Zeek conn.log, Zeek dns.log). Alert if the process hash matches a known malicious hash from a threat intelligence feed OR if the destination IP/domain is on a blocklist of known C2 infrastructure.",
              "Statistical: For each developer utility execution, calculate the rarity of the destination IP address across the entire organization over the last 30 days. Flag connections to IPs in the top 1% of rarity (i.e., seen by the fewest distinct hosts) for further investigation, as adversaries often use unique or new infrastructure.",
              "Machine Learning: Use a trained classification model (e.g., Random Forest) that takes process metadata (parent process, user context) and network connection features (destination IP reputation, port, JA3/JA3S hash) as input to predict the likelihood of a developer utility's execution being malicious. Train the model on historical labeled data of known good and bad executions."
            ]
          },
          {
            "description": "A trusted developer utility is executed with command-line arguments containing patterns indicative of abuse, such as base64 encoded strings, inline C# tasks (`RoslynCodeTaskFactory`), or references to files in non-standard directories (e.g., C:\\Users\\Public).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those not designated for software development.",
            "action": [
              "Symbolic: Scan the 'CommandLine' field in Windows Event ID 4688 for executions of developer utilities (e.g., MSBuild.exe, RCSI.exe). Use a regularly updated list of regular expressions to match known malicious patterns, such as `(?i)roslyncodetaskfactory`, `FromBase64String`, or file paths pointing to temporary/public directories. Generate a high-severity alert upon a match.",
              "Statistical: For each developer utility, calculate the Shannon entropy of its command-line arguments. Establish a baseline entropy score for legitimate usage per utility. Flag executions where the command-line entropy exceeds a dynamic threshold (e.g., 95th percentile of the historical distribution), as high entropy can indicate obfuscated or packed code.",
              "Machine Learning: Employ a time-series anomaly detection model (e.g., ARIMA, LSTM) on the frequency and complexity (e.g., length, entropy) of command-line arguments for developer utilities on a per-host basis. An alert is triggered when a sudden spike or significant deviation from the established temporal pattern is detected, suggesting a change in usage that may be malicious."
            ]
          },
          {
            "description": "A trusted developer utility process (e.g., MSBuild.exe) spawns a child process that is anomalous to its baseline behavior, such as a script interpreter (powershell.exe), a network utility (certutil.exe), or a process running from a user-writable directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, focusing on process lineage from non-developer systems.",
            "action": [
              "Symbolic: Monitor parent-child process relationships using Windows Event ID 4688. Maintain an explicit allowlist of legitimate child processes for each trusted developer utility (e.g., MSBuild.exe -> csc.exe). Alert on any deviation, especially the creation of `powershell.exe`, `cmd.exe`, `wscript.exe`, `cscript.exe`, `bitsadmin.exe`, or `certutil.exe`.",
              "Statistical: For each parent developer utility (e.g., `WinDbg.exe`), build a frequency distribution of all its child processes observed over a 90-day period. Alert when a child process is spawned that falls below a rarity threshold (e.g., observed in less than 0.1% of all child process instances for that parent), indicating a rare and potentially suspicious relationship.",
              "Machine Learning: Use a graph-based anomaly detection algorithm to model normal process trees. Represent parent-child relationships as a graph where nodes are processes and edges represent spawning. Identify anomalous subgraphs where a developer utility is a parent node and its descendants deviate significantly from the learned 'normal' graph structure."
            ]
          },
          {
            "description": "A trusted developer utility is executed by a user not belonging to a pre-defined 'Developer' group, on a host not categorized as a 'Development' asset, or as a child process of a non-development application like an office suite application (e.g., WINWORD.EXE).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human Resources user role database, Active Directory servers, all non-developer workstations (e.g., Finance, HR, Sales departments), and production servers.",
            "action": [
              "Symbolic: Enrich process creation events (Windows Event ID 4688) with user group and host role information. Create and maintain explicit allowlists for user groups (e.g., 'Developers') and host roles (e.g., 'Build Server') authorized to run these tools. Alert on any execution not matching an entry in both allowlists.",
              "Statistical: Profile the set of parent processes that spawn developer utilities. Calculate the probability $$ P(\\text{child} | \\text{parent}) $$ for pairs like (WINWORD.EXE, MSBuild.exe). Flag any instance where a developer utility is spawned by a parent process that is statistically rare (e.g., probability < 0.001), particularly for non-development applications like browsers or office software.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model on features from legitimate developer utility executions, including user, host, parent process, and time of day. Use the trained model to classify new executions. Events that fall outside the learned 'normal' boundary are flagged as anomalous and potentially malicious."
            ]
          },
          {
            "description": "A sequence of events occurs within a short time window (< 5 minutes) on a single host: 1) A developer utility binary is created in a temporary or user-writable path (e.g., %TEMP%, %APPDATA%). 2) The binary is executed. 3) The process makes an external network connection. 4) The original binary file is deleted.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly temporary file directories (%TEMP%, %APPDATA%), public writeable directories (C:\\Users\\Public), and network egress points.",
            "action": [
              "Symbolic: Create a correlation rule that triggers when the following sequence is observed for the same file path on the same host within 5 minutes: File Handle Request (Windows ID 4656), Process Creation (Windows ID 4688), Network Connection from that Process ID (Zeek conn.log), and an Object Access/Deletion event (Windows ID 4663).",
              "Statistical: Analyze the time delta between file creation and file deletion for executable files in temporary directories. Establish a baseline distribution for this delta. Flag sequences where a developer utility's lifetime (creation to deletion) is an outlier, for example, falling in the lowest 5th percentile (indicating a rapid, scripted execution and cleanup) and is associated with a network connection.",
              "Machine Learning: Use a sequence-based anomaly detection model, such as a Hidden Markov Model (HMM), trained on sequences of events (file create, process exec, network conn, file delete) from normal user activity. The model learns legitimate transition probabilities between states. Flag event sequences that have a low probability under the trained model, indicating a deviation from normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]