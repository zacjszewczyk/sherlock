[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by masquerading file types?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.008",
        "name": "Masquerade File Type",
        "evidence": [
          {
            "description": "A file with a hash matching a known malicious indicator is observed with a file extension from a curated list of non-executable types (e.g., .jpg, .png, .txt, .log, .dat).",
            "data_sources": [
              "Zeek file.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., proxies, firewalls), User workstations, Critical file servers",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of malicious file hashes (MD5, SHA256). Create a rule to scan all files transferred over the network (Zeek file.log) or written to disk (Windows Event ID 4663). Alert if a file's hash matches an indicator and its extension is in a predefined list of non-executables (e.g., .txt, .jpg, .pdf). 2. (Statistical) Maintain a frequency distribution of file extensions associated with malicious hash detections. Prioritize alerts where a known malicious tool (e.g., Mimikatz) masquerades with a statistically rare extension for that tool (e.g., .dat when .txt is more common), indicating a potential attempt to evade more specific rules. 3. (ML) Train a classification model (e.g., logistic regression) with features like file hash reputation, file extension, source process (for file writes), and network source reputation. Use the model's output score to rank alerts, allowing analysts to focus on files with the highest probability of being maliciously masqueraded."
          },
          {
            "description": "A file's observed extension (e.g., .jpg) is inconsistent with its MIME type as determined by its magic bytes (e.g., 'application/x-dosexec'), where the mismatch exceeds a statistically defined rarity threshold.",
            "data_sources": [
              "Zeek file.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., proxies, firewalls), Internal network segments",
            "action": "1. (Symbolic) In Zeek file.log, create a rule to flag any file where the mime_type is 'application/x-dosexec' but the filename extension is in a defined set of non-executables (e.g., .txt, .jpg, .png, .gif). 2. (Statistical) For all files, establish a baseline of (extension, mime_type) pairs over a 30-day period. Calculate the conditional probability $$ P(\\text{mime\\_type} | \\text{extension}) $$. Flag any observed pair where this probability is below the 1st percentile or has never been seen. 3. (ML) Use an unsupervised clustering algorithm (e.g., DBSCAN) on file features from Zeek logs (file size, entropy of filename, source/destination IP reputation, extension, MIME type). Investigate outlier clusters, as they may represent anomalous file transfers including masqueraded executables."
          },
          {
            "description": "An interpreter or loader process (e.g., rundll32.exe, mshta.exe, wscript.exe) executes a file with a non-executable extension (e.g., .txt, .jpg, .dat).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Application servers, Domain controllers",
            "action": "1. (Symbolic) Monitor process creation events (Windows Event ID 4688). Alert whenever a process image name from a list of interpreters (rundll32.exe, mshta.exe, cscript.exe, powershell.exe) is launched with a command-line argument pointing to a file ending in a non-executable extension (.jpg, .png, .txt, .dat). 2. (Statistical) For each interpreter process, baseline the frequency distribution of file extensions found in its command-line arguments. Flag any execution where the file extension falls in the bottom 5th percentile of frequency for that interpreter. 3. (ML) Develop a time-series model (e.g., ARIMA) for the frequency of specific interpreter/extension pairings per host (e.g., count of rundll32.exe executing .dat files per hour). Use the model to detect anomalous spikes that deviate significantly from the forecast, indicating a potential attack."
          },
          {
            "description": "A process associated with handling non-executable files (e.g., mspaint.exe, notepad.exe) spawns a command shell, an interpreter, or another process not typical to its normal function.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Terminal servers",
            "action": "1. (Symbolic) Using process creation events (Windows Event ID 4688), create a rule to detect when a parent process from a list of document/media handlers (e.g., AcroRd32.exe, mspaint.exe, notepad.exe) spawns a child process from a list of interpreters/shells (e.g., cmd.exe, powershell.exe, wscript.exe). 2. (Statistical) Build a parent-child process relationship graph for the environment and calculate the occurrence frequency of each unique parent->child pair. Flag any pair that is statistically rare (e.g., appearing less than 5 times in 30 days enterprise-wide), such as mspaint.exe -> powershell.exe. 3. (ML) Train a classifier (e.g., Random Forest) on features of parent-child process events (parent/child process names, paths, command lines, user context). Use the model to assign a risk score to each new process chain, prioritizing those classified as malicious for analyst review."
          },
          {
            "description": "A file with a non-executable extension is written by a process (e.g., a web browser) to a directory commonly associated with script execution or persistence (e.g., %APPDATA%, %PUBLIC%, startup folders), and is subsequently executed.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Servers with web browsers, Shared network drives",
            "action": "1. (Symbolic) Create a rule that triggers when a file write event (4663) from a browser (e.g., chrome.exe) creates a file with a non-executable extension (.log, .jpg) in a startup directory, and a process creation event (4688) for that same file path occurs within 5 minutes. 2. (Statistical) For each sensitive directory, profile the distribution of file extensions written to it by different processes. Use a chi-squared test to detect significant deviations from the baseline, such as a sudden increase in .jpg files being written to C:\\Windows\\Temp by powershell.exe. 3. (ML) Use a sequence analysis model (e.g., a Hidden Markov Model) to learn common event sequences (process A writes file.ext to path X -> process B executes file.ext). Flag sequences that have a low probability under the model, as they represent anomalous chains of activity indicative of masquerading and execution."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]