[
  {
    "information_requirement": "Is the adversary maintaining persistence via network logon scripts? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037.003",
        "name": "Network Logon Script",
        "evidence": [
          {
            "description": "A process spawned by a network logon script interpreter (e.g., cmd.exe, powershell.exe) has a command line or file hash that matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": [
              "Symbolic: Query process creation logs (Windows Event ID 4688, Sysmon Event ID 1) where the parent process is a logon script interpreter. Match the 'NewProcessName' or 'Image' hash against a threat intelligence feed of known malicious file hashes. Also, use regular expressions to search the 'CommandLine' for known malicious arguments, filenames, or C2 framework patterns.",
              "Statistical: For each logon script, build a profile of typically executed child processes. Calculate the frequency of each child process name. Alert on the execution of a child process that is statistically rare (e.g., seen in less than 1% of historical executions for that specific logon script or user).",
              "Machine Learning: Develop a supervised classification model (e.g., Random Forest) using features from the command line (length, entropy, special character count, keyword presence). Train the model on labeled benign and malicious script executions to classify new, unseen script executions in real-time and assign a risk score."
            ]
          },
          {
            "description": "A network logon script executes using heavily obfuscated commands or invokes Living-Off-the-Land Binaries (LOLBins) to download or execute payloads.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": [
              "Symbolic: Use regular expressions on process command lines to detect common obfuscation patterns, such as PowerShell's '-enc', '-e', 'IEX', 'DownloadString', or VBScript's 'Chr()' and 'Asc()' functions. Maintain a list of LOLBins (e.g., certutil.exe, bitsadmin.exe, mshta.exe) and alert when a logon script invokes them with arguments used for file download or execution.",
              "Statistical: Calculate the character entropy and the ratio of non-alphanumeric characters for all logon script command lines. Establish a baseline distribution and flag any command line where these metrics exceed a dynamic threshold (e.g., 98th percentile), indicating potential obfuscation.",
              "Machine Learning: Use an unsupervised learning model, like an autoencoder, trained on command-line features from known benign logon scripts. A high reconstruction error for a new command line indicates it is anomalous and does not conform to normal patterns, suggesting potential obfuscation or malicious activity."
            ]
          },
          {
            "description": "A network logon script file located in a SYSVOL or Netlogon share is modified by an unauthorized user account or outside of a standard maintenance window.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 5145"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (hosting SYSVOL/Netlogon shares)",
            "action": [
              "Symbolic: Monitor file system and file share audit logs (Windows Event ID 4663, 5145) for write access to files in the Netlogon/SYSVOL scripts directory. Create an alert if the 'SubjectUserName' is not on an approved list of administrator accounts authorized to perform such changes.",
              "Statistical: Profile the timestamps of modification events for logon scripts to establish a baseline of normal change windows (e.g., Tuesdays 2-4 PM). Alert on any modification that occurs more than 2 standard deviations outside the mean modification time or on unusual days of the week.",
              "Machine Learning: Apply time-series anomaly detection (e.g., ARIMA) to the volume and timing of logon script modifications. The model can learn the regular cadence of administrative activity and flag any event that significantly deviates from the forecasted pattern, such as a sudden burst of changes or a single change at an unusual time."
            ]
          },
          {
            "description": "A process spawned by a network logon script initiates an external network connection to an unusual destination or exhibits command-and-control beaconing behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Servers, User Workstations, Member Servers",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688, Sysmon Event ID 1) from logon scripts with subsequent network connection events (Sysmon Event ID 3, Zeek conn.log). Alert if the destination IP address or domain is present on a threat intelligence blocklist.",
              "Statistical: For each process spawned by a logon script, analyze its network connections in 'Zeek conn.log'. Calculate the Shannon entropy of requested domain names to detect domain generation algorithms (DGAs). Also, analyze the time delta between connections to the same destination IP to identify periodic beaconing (e.g., connections with low variance in inter-arrival time).",
              "Machine Learning: Train a one-class SVM or isolation forest model on features of benign network connections originating from logon scripts (e.g., destination port, data volume, connection duration, domain reputation). Use the trained model to classify new connections as either 'normal' or 'anomalous', flagging the latter for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using network logon scripts for privilege escalation? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037.003",
        "name": "Network Logon Script",
        "evidence": [
          {
            "description": "A process spawned by a network logon script has a command line containing arguments or filenames indicative of a known Local Privilege Escalation (LPE) exploit.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Member Servers",
            "action": [
              "Symbolic: Create and maintain a set of regular expressions to search process command lines (from Windows Event ID 4688/Sysmon Event ID 1) for strings associated with LPE tools and exploits (e.g., 'JuicyPotato', 'PrintNightmare', 'BadPotato.exe', specific named pipes or DLL names used in exploits).",
              "Statistical: Establish a baseline of all DLLs loaded by processes originating from logon scripts. Calculate the rarity of each DLL. Alert when a process loads a DLL that is statistically rare across the enterprise (e.g., loaded on <0.1% of endpoints), as this could indicate the loading of a malicious or exploit-related library.",
              "Machine Learning: Use a pre-trained Natural Language Processing (NLP) model, fine-tuned on security data, to analyze command-line arguments. The model can identify semantic similarities between observed commands and a knowledge base of known exploit command structures, flagging suspicious commands even if they do not contain exact IOC strings."
            ]
          },
          {
            "description": "A network logon script invokes a system utility (e.g., net.exe, sc.exe, schtasks.exe) with specific command-line arguments to create or modify user accounts, services, or scheduled tasks for elevation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Member Servers, Domain Controllers",
            "action": [
              "Symbolic: Create high-fidelity alerts by searching command-line logs for exact-match or near-match patterns of privilege escalation, such as 'net localgroup Administrators [username] /add', 'sc create [service] binPath=...', or 'schtasks /create ... /ru SYSTEM' when the parent process is a logon script.",
              "Statistical: Profile the usage of administrative utilities (net.exe, sc.exe, etc.) by logon scripts. For each utility, baseline the frequency of different argument combinations. Flag any execution that uses a statistically rare combination (e.g., 'net.exe' with 'localgroup' and '/add' arguments) that is not part of normal administrative scripting.",
              "Machine Learning: Train a sequence-based model (like an LSTM) on the sequence of commands executed during a normal user logon session. Anomaly detection would trigger if the model observes a sequence that significantly deviates from the learned normal behavior, such as a logon script followed by the creation of a new local administrator."
            ]
          },
          {
            "description": "A logon script file is modified, and subsequently, upon logon by a privileged account, the script executes commands that are anomalous for that account's typical logon process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, User Workstations, Member Servers",
            "action": [
              "Symbolic: Create a correlation rule that triggers when: 1) A file write event (Windows Event ID 4663) occurs on a logon script. 2) Within a short time window, a logon event (Windows Event ID 4624) for a privileged user occurs. 3) A process creation event (Windows Event ID 4688) is observed where the parent is the modified script and the command is on a watchlist of suspicious commands.",
              "Statistical: For each privileged user, baseline the command lines of processes executed by their logon scripts. After a script modification event is detected, compare any new command lines against this baseline. Calculate a similarity score (e.g., Jaccard similarity). If the score is below a certain threshold (e.g., < 0.5), flag the execution as a significant deviation from normal behavior.",
              "Machine Learning: Use a graph-based analysis model where nodes represent users, scripts, and commands. An edge is created for a user modifying a script, and another for a user executing a script that runs a command. Detect anomalous paths, such as 'Low-privilege User A -> modifies -> Script X -> executed by -> Privileged User B -> runs -> Malicious Command Y', which represent a privilege escalation chain."
            ]
          },
          {
            "description": "A process spawned by a network logon script under a standard user context is observed to have an elevated token or spawns a child process running as a more privileged user (e.g., NT AUTHORITY\\SYSTEM).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Member Servers",
            "action": [
              "Symbolic: In Windows Event ID 4688, filter for events where the parent process is a logon script. Create an alert where the 'TokenElevationType' is '%%1936' (TokenElevationTypeFull) but the user context ('SubjectUserName') is not a built-in administrator account. This directly indicates a UAC bypass or elevation.",
              "Statistical: Baseline the 'TokenElevationType' for all processes spawned by logon scripts, segmented by user. A user whose logon script processes are normally '%%1937' (TokenElevationTypeDefault) but suddenly spawn a process with '%%1936' (TokenElevationTypeFull) represents a statistical anomaly worth investigating.",
              "Machine Learning: Train a decision tree classifier on process features including 'ParentProcessName', 'SubjectUserName', 'TokenElevationType', and 'CommandLine'. The model can learn the rules that govern legitimate elevation (e.g., specific admin tools run by admins). Any elevation event that violates these learned rules would be flagged as a potential malicious privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]