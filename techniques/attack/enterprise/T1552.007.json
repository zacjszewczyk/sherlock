[
  {
    "information_requirement": "Has an adversary accessed credentials by exploiting container APIs? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1552.007",
        "name": "Container API",
        "evidence": [
          {
            "description": "An HTTP request to a container API (e.g., Docker, Kubernetes) originates from a source IP address on a threat intelligence list or uses a User-Agent string associated with known malicious scanners or container exploitation tools.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeter firewalls, Kubernetes API Server, Docker Daemon hosts, Cloud network flow logs",
            "action": [
              "Symbolic: Create a detection rule that cross-references the source IP address (`id.orig_h`) in Zeek conn.log and http.log records destined for container API ports (e.g., 2375, 2376, 6443, 10250) against a threat intelligence feed of known malicious IPs. Alert on any match.",
              "Statistical: For traffic matching container API ports, calculate the frequency of User-Agent strings seen in Zeek http.log. Alert on User-Agents that are rare (e.g., appear in less than 0.1% of requests) and match patterns of common scanning tools (e.g., 'Docker-Client', 'Go-http-client', 'curl').",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) on labeled Zeek http.log data to predict malicious requests. Features should include IP reputation score, ASN information, User-Agent string characteristics (length, entropy), and presence of unusual headers. Deploy the model to score new requests in real-time."
            ]
          },
          {
            "description": "An HTTP request is made to a sensitive container API endpoint known to expose credentials, secrets, or provide container execution capabilities (e.g., Kubernetes secrets API, Docker exec endpoint).",
            "data_sources": [
              "Zeek http.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Docker Daemon hosts, Container runtime environment",
            "action": [
              "Symbolic: Create a high-severity alert for any HTTP request in Zeek http.log or Kubernetes Audit Logs targeting a watchlist of highly sensitive API paths, such as `/api/v1/secrets`, `/api/v1/namespaces/.*/pods/.*/exec`, `/containers/.*/exec`, or `/containers/.*/logs`. The rule should trigger regardless of source, with authorized exceptions whitelisted.",
              "Statistical: For each user/source IP, calculate a baseline of API paths accessed. Use a Jaccard distance or similar set-based metric to measure the deviation of API paths accessed in a new session from the user's historical baseline. Flag sessions with a high deviation score, particularly if they include access to sensitive paths.",
              "Machine Learning: Use a sequence analysis model (e.g., an LSTM autoencoder) trained on normal sequences of API calls per user. The model will learn legitimate workflows. Flag any user session where the sequence of API calls has a high reconstruction error, indicating a deviation from normal behavior, especially if the sequence terminates in a sensitive endpoint access."
            ]
          },
          {
            "description": "A single source IP address or user account performs broad API discovery actions followed by targeted access to sensitive resources like secrets or container logs within a short time frame.",
            "data_sources": [
              "Zeek http.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Container orchestration plane",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a source IP first makes requests to discovery endpoints (e.g., `/api`, `/apis`, `/version`) and then, within 10 minutes, makes a request to a sensitive endpoint (e.g., `/secrets`, `/exec`, `/logs`). Alert on this two-stage behavior.",
              "Statistical: For each 5-minute window per source IP, calculate the Shannon entropy of the requested API URI paths from Zeek http.log. A pattern of high entropy (many different paths, indicating discovery) followed by a sharp drop to low entropy with targeted requests to sensitive paths is anomalous. Alert when entropy shifts by more than 2 standard deviations from the source's baseline.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on sessionized API request data. Features for each session could include number of unique API paths, ratio of discovery calls to data access calls, and presence of sensitive endpoint access. Identify and investigate clusters that represent anomalous 'scan-then-exploit' behavior and do not belong to the main cluster of normal activity."
            ]
          },
          {
            "description": "The volume, frequency, or data transfer size of API calls from a single source to container management services significantly exceeds established historical baselines for that source or for all sources.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network load balancers, Kubernetes API Server, Docker Daemon hosts",
            "action": [
              "Symbolic: Define static thresholds for API activity. For example, alert if any single source IP generates more than 1000 API requests in 5 minutes or downloads more than 100MB of data from a container API endpoint. These thresholds should be set based on an initial analysis of the environment.",
              "Statistical: For each source IP and user, establish a dynamic baseline for API request count and total bytes transferred per hour using a 30-day rolling average and standard deviation. Alert if the activity in any given hour exceeds 3 standard deviations above the mean for that specific source.",
              "Machine Learning: Implement a time-series forecasting model (e.g., ARIMA or Prophet) for key metrics like total API requests and bytes transferred per hour for the entire container environment. An alert is generated when the observed values significantly deviate from the forecasted values and their confidence intervals, indicating a system-wide anomaly."
            ]
          },
          {
            "description": "A source IP or user account retrieves an unusually large volume of log data from one or more containers, or accesses the logs of an unusually high number of distinct containers.",
            "data_sources": [
              "Zeek http.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Container log aggregation service, Docker Daemon hosts",
            "action": [
              "Symbolic: Create a rule that alerts when a non-administrative user or an external IP address makes any request to a log retrieval endpoint (e.g., `/containers/.*/logs`, `/api/v1/namespaces/.*/pods/.*/log`). Whitelist known administrative tools and users.",
              "Statistical: For each user, calculate the 95th percentile of (a) data volume downloaded from log endpoints per hour and (b) number of unique containers whose logs are accessed per hour. Alert when a user exceeds either of these established percentile thresholds in a given hour.",
              "Machine Learning: Model user behavior for log access using a peer group analysis (clustering). Group users with similar roles and log access patterns. An alert is triggered when a user's log access behavior (e.g., volume, frequency, number of containers) deviates significantly from the centroid of their assigned cluster, indicating they are behaving unlike their peers."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]