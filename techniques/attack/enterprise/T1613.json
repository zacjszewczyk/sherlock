[
  {
    "information_requirement": "Is the adversary attempting to discover container resources and environment details? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1613",
        "name": "Container and Resource Discovery",
        "evidence": [
          {
            "description": "An API call targeting a container platform endpoint (e.g., Kubernetes API, Docker API) originates from a source IP address listed on a current threat intelligence feed of known malicious hosts.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server, Docker daemon hosts, internet gateway, reverse proxies, cloud provider control plane endpoints.",
            "action": [
              "Correlate the source IP address (`id.orig_h`) from Zeek conn.log and http.log records against an ingested threat intelligence feed. Generate an alert for any match where the destination port (`id.resp_p`) is a known container API port (e.g., 6443, 2375, 2376, 10250).",
              "For all connections to container API ports, track the hourly rate of newly observed source IP addresses. Establish a baseline of this rate over a 30-day period. Generate an alert when the current hourly rate exceeds the 95th percentile of the baseline, indicating a potential reconnaissance scan.",
              "Deploy a pre-trained classification model (e.g., Random Forest) to score the risk of each API connection. Use features such as source IP reputation, source ASN, time of day, country of origin, and a binary flag for 'is new IP'. An alert is triggered when a connection's predicted risk score surpasses a defined threshold, identifying suspicious activity from sources not yet on a threat feed."
            ]
          },
          {
            "description": "The execution of a container-native command-line tool (`kubectl.exe`, `docker.exe`) includes discovery-oriented subcommands (e.g., `get`, `describe`, `ps`, `images`) and is initiated by a non-interactive parent process (e.g., not `explorer.exe` or `cmd.exe`), an unauthorized user, or on a non-administrative host.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Administrative workstations, jump servers, CI/CD runners, container nodes.",
            "action": [
              "Create a detection rule that monitors Windows Event ID 4688 for new process creations. Trigger an alert if `ProcessName` is `kubectl.exe` or `docker.exe`, the `CommandLine` contains discovery keywords (`get`, `describe`, `ps`, `images`, `nodes`, `cluster-info`), and the `ParentProcessName` is not a typical interactive shell like `explorer.exe` or `powershell.exe`.",
              "For each user and host combination, calculate the Shannon entropy of the command-line arguments used with `kubectl.exe` and `docker.exe` within a 5-minute sliding window. Establish a baseline entropy score for each user/host pair. Trigger an alert if the calculated entropy score exceeds three standard deviations from the user's historical average, suggesting automated or scripted enumeration.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to process execution events. Use features such as parent process name, user account, host name, and tokenized command-line arguments to group activity. Flag clusters that are small and isolated from the large, dense clusters representing normal administrative activity as anomalous and potentially malicious."
            ]
          },
          {
            "description": "A single source IP generates a volume of API calls to container endpoints that exceeds a statistical baseline, or originates from a network segment not explicitly authorized for container management.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server, Docker daemon hosts, internal network firewalls and switches.",
            "action": [
              "Implement a SIEM rule that generates a high-severity alert for any connection attempt logged in Zeek conn.log from a source IP in a non-administrative network zone (e.g., user VLANs, guest Wi-Fi) to a destination IP and port combination corresponding to a container API endpoint (e.g., port 6443).",
              "For each source IP, aggregate the count of connections to the Kubernetes API server from Zeek conn.log over 1-minute intervals. Establish a historical baseline connection count for each source IP. Generate an alert if the connection count in any interval exceeds the 99th percentile of that source's specific baseline, indicating a potential brute-force or enumeration attack.",
              "Deploy a time-series anomaly detection model (e.g., ARIMA or Prophet) to monitor the overall API request rate per minute, aggregated from Zeek http.log. Train the model on at least 30 days of historical data. Trigger an alert when the observed request volume significantly deviates from the model's forecasted range, indicating a platform-wide enumeration spike."
            ]
          },
          {
            "description": "A user session interacting with a container management web UI (e.g., Kubernetes Dashboard) shows behavior consistent with automated scanning, defined by an unusually high request rate or a User-Agent string associated with scripting tools.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers hosting container management UIs (Kubernetes Dashboard, Rancher, OpenShift).",
            "action": [
              "Analyze Zeek http.log records for traffic to container management UIs. Generate an alert for any session where the `user_agent` field matches known enumeration tools (e.g., `Kube-hunter`) or common scripting libraries (e.g., `python-requests`, `curl`, `Go-http-client`) not associated with legitimate automation.",
              "For each user session (approximated by source IP and User-Agent pair over a time window), calculate the ratio of unique URI paths accessed to the total number of requests. A ratio approaching 1.0 suggests broad scanning. Generate an alert if this ratio for a session exceeds the 98th percentile of all historical sessions, indicating behavior inconsistent with normal, targeted user interaction.",
              "Model legitimate user navigation patterns by training a sequence-based anomaly detection model (e.g., an LSTM autoencoder) on sequences of URI requests from historical user sessions. Feed new session sequences into the model. Flag sessions with a high reconstruction error as anomalous, likely representing scripted or malicious navigation deviating from learned human behavior."
            ]
          },
          {
            "description": "A single source IP makes API calls to list or get three or more distinct resource types (e.g., pods, secrets, deployments, nodes) within a 5-minute window, indicating broad reconnaissance.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server, container nodes (for pod-to-API traffic).",
            "action": [
              "Create a stateful SIEM rule that triggers if a single source IP, within a 5-minute window, makes API `GET` or `LIST` requests for three or more distinct sensitive resource types, such as `secrets`, `serviceaccounts`, and `clusterroles`, as seen in Zeek http.log URIs.",
              "For each source IP, parse the resource type from the URI in Zeek http.log (e.g., 'pods', 'secrets', 'nodes'). In a 10-minute sliding window, calculate the Shannon entropy of the set of unique resource types requested. A high entropy value indicates discovery across many resource types. Generate an alert if the entropy score exceeds a predefined threshold (e.g., > 3.0) or is more than 3 standard deviations above the source's established baseline.",
              "Construct a bipartite graph where nodes represent source IPs and API resource paths. Create an edge for each API request. Apply a community detection algorithm (e.g., Louvain Modularity) to identify clusters of normal activity. Flag nodes or edges that are weakly connected to any major community as potential anomalous discovery attempts."
            ]
          },
          {
            "description": "A single API response for a sensitive resource (e.g., secrets, configmaps, pod logs) has an anomalously large size, or a client accesses these resources using a User-Agent not associated with approved administrative tools.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server (specifically endpoints for secrets, configmaps, and pod logs).",
            "action": [
              "Create a high-priority alert for any API request observed in Zeek http.log that targets the listing of all secrets across all namespaces (e.g., a GET request to `/api/v1/secrets`) and originates from a source IP not on an explicit allow-list of administrative hosts.",
              "For API requests to sensitive endpoints (e.g., URIs containing `/logs` or `/secrets`), monitor the response size (`resp_bytes`) in the corresponding Zeek conn.log entry. Establish a per-endpoint baseline for response size. Generate an alert if a given response size exceeds the 99th percentile of its historical baseline, indicating potential bulk data exfiltration.",
              "Train a one-class SVM or Isolation Forest model on feature sets derived from legitimate access to sensitive data endpoints. Use features including source IP, User-Agent, time of day, and the specific resource path from Zeek http.log. Any new access attempt that the model flags as an outlier should be treated as a high-fidelity alert for anomalous access."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]