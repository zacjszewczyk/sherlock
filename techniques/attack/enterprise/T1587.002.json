[
  {
    "information_requirement": "Is the adversary leveraging custom, suspicious, or self-signed code signing certificates within the environment? (PIR)",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1587.002",
        "name": "Code Signing Certificates",
        "evidence": [
          {
            "description": "An executed binary's signing certificate thumbprint or a certificate thumbprint observed in a TLS session matches a known-malicious entry on a cyber threat intelligence (CTI) feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssl.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host-based process execution logs, Network egress points (e.g., internet gateway), Internal certificate authority servers",
            "action": "1. (Symbolic) Continuously ingest CTI feeds of malicious certificate thumbprints. Create a rule to join observed thumbprints from process executions (Windows Event ID 4688) and TLS sessions (Zeek ssl.log) against this CTI list. Generate a high-severity alert upon any match. 2. (Statistical) For any CTI match, calculate the prevalence of the certificate's issuer across the enterprise over the last 90 days. A prevalence in the lowest 1st percentile indicates a highly targeted or novel threat, increasing the alert's priority. 3. (Machine Learning) Develop a time series model (e.g., SARIMA) forecasting the expected number of CTI certificate hits per day. An alert is generated when the observed count exceeds the forecasted upper confidence interval (e.g., 99th percentile), which could indicate a new, widespread campaign."
          },
          {
            "description": "Execution of a certificate management utility (e.g., certutil.exe, PowerShell's Import-Certificate) with parameters indicating the addition of a certificate to a high-trust certificate store, such as 'Root' or 'TrustedPublisher'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly domain controllers and application servers",
            "action": "1. (Symbolic) Create a detection rule that monitors for process command lines (Windows Event ID 4688) or PowerShell script blocks (Windows Event ID 4104) containing patterns like 'certutil -addstore Root', 'certutil -addstore TrustedPublisher', or 'Import-Certificate -FilePath .* -CertStoreLocation Cert:\\LocalMachine\\Root'. 2. (Statistical) Establish a baseline of hosts that legitimately perform certificate store modifications (e.g., admin workstations, specific servers). Calculate the rarity of this activity for any given host. An event occurring on a host outside the top 95th percentile of hosts performing this action is considered highly anomalous. 3. (Machine Learning) Train a classification model (e.g., logistic regression) on command-line arguments. Features can include command length, presence of keywords ('-addstore', 'Root'), and user context. The model classifies commands as benign or suspicious, alerting on the latter."
          },
          {
            "description": "An executed binary is signed by a certificate whose metadata (e.g., subject, issuer, validity period, algorithm) matches a known malicious pattern defined by a YARA rule or similar heuristic.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File shares, email gateways, web download directories, and all host-based process execution logs",
            "action": "1. (Symbolic) For every executed binary, apply a ruleset (e.g., YARA) against its signing certificate metadata. The rules should look for known-bad issuer/subject strings, suspicious validity periods (e.g., > 20 years), and weak cryptographic algorithms often used by malware. 2. (Statistical) For all observed certificates, calculate the Shannon entropy of the Subject and Issuer fields. A certificate with an entropy score in the top 5th percentile (high randomness) or bottom 5th percentile (very generic/empty) should be flagged for review, especially if it is also self-signed. 3. (Machine Learning) Use a trained anomaly detection model (e.g., an autoencoder) on a feature vector created from certificate metadata (validity duration, key length, signature algorithm, subject/issuer entropy). Certificates with a high reconstruction error are flagged as anomalous."
          },
          {
            "description": "A binary is executed that is signed by a certificate that is either self-signed (Issuer equals Subject), has not been previously observed in the environment, or has an issuer with a global prevalence below a defined threshold.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssl.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, network traffic at egress points, and software deployment servers",
            "action": "1. (Symbolic) Alert when a process is executed from a binary signed by a certificate where the Issuer field equals the Subject field AND the Subject Common Name contains generic keywords like 'Test', 'Developer', 'Example', or is NULL. 2. (Statistical) Maintain a historical lookup table of all certificate issuers observed. For each new execution, calculate the prevalence of its certificate's issuer. If the issuer's count is below the 5th percentile of all issuer counts, increase the event's risk score. 3. (Machine Learning) Train a one-class SVM (Support Vector Machine) on feature vectors of certificates from known-good, prevalent software. If the model classifies a new certificate as an outlier, it indicates the certificate is dissimilar to trusted ones and should be investigated."
          },
          {
            "description": "A statistically significant spike in the number of unique self-signed certificates observed on a single host or across the enterprise in a short time frame.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssl.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise-wide SIEM or data lake aggregating host and network logs",
            "action": "1. (Symbolic) Alert if a single host generates or uses more than 5 unique, previously unseen, self-signed certificates within a 1-hour window. 2. (Statistical) In a rolling 24-hour window, count unique, new self-signed certificate thumbprints across the enterprise. Alert if the current count exceeds 3 standard deviations above the historical 30-day mean for that window. 3. (Machine Learning) Implement a time series anomaly detection model (e.g., ARIMA) on the hourly count of newly observed self-signed certificates. Alert when the observed count significantly deviates from the model's prediction, exceeding the upper confidence bound."
          },
          {
            "description": "A certificate thumbprint used to sign a locally executed binary is also observed as the server certificate in a TLS session initiated from the same host to an external, non-categorized, or low-reputation destination.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake capable of correlating host-based process data with network session data",
            "action": "1. (Symbolic) Join process execution events (Windows Event ID 4688) with network TLS session logs (Zeek ssl.log) on the host identifier within a 5-minute window. Alert if the binary's signing certificate thumbprint matches the TLS server certificate thumbprint AND the destination IP (from Zeek conn.log) is not on an allowlist of known-good services. 2. (Statistical) Build a baseline of (process_name, signing_cert_issuer, destination_IP_category) tuples and calculate their frequency. A correlation where the tuple's frequency falls below the 1st percentile is flagged as anomalous. 3. (Machine Learning) Use a graph database to model relationships between processes, certificates, and destination IPs. Apply a community detection algorithm. A small, dense cluster containing a new process, a self-signed certificate, and an external IP is a strong indicator of a C2 channel and should be alerted on."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]