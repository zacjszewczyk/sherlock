[
  {
    "information_requirement": "Is the adversary employing masquerading techniques for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036",
        "name": "Masquerading",
        "evidence": [
          {
            "description": "A process creation event is observed where the process's file hash is present in a threat intelligence feed of known malware, but the process name is identical to a common, legitimate system binary (e.g., svchost.exe, lsass.exe, cmd.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers)",
            "action": [
              "Symbolic: For each process creation event (Windows Event ID 4688), join the process hash with a high-confidence threat intelligence feed. Generate a high-priority alert if a hash matches and the process name is on a watchlist of commonly masqueraded system binaries (e.g., svchost.exe, lsass.exe, explorer.exe).",
              "Statistical: Maintain a baseline of hash-to-filename mappings across the enterprise. Calculate the frequency of each mapping. Alert if a critical system binary name (e.g., lsass.exe) is seen with a new, rare hash that has not been observed in the last 90 days, as these binaries should have very few associated hashes.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features from process creation events, including process name, parent process name, command line length, and hash prevalence. Label data using historical alerts and threat intelligence. Use the model to predict the likelihood that a new process execution with a legitimate name but a rare hash is malicious."
            ]
          },
          {
            "description": "A process is executed where the filename contains patterns indicative of masquerading, such as the Right-to-Left-Override (RTLO) Unicode character (U+202E), multiple file extensions (e.g., 'invoice.pdf.exe'), or a name that is a common misspelling of a legitimate binary (e.g., 'svch0st.exe').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers)",
            "action": [
              "Symbolic: Use regular expressions to scan process names in process creation logs for the RTLO character (\\u202E), filenames ending in a benign extension followed by an executable one (e.g., .*\\.(pdf|docx|jpg)\\.exe$), or known typosquatted names of critical binaries.",
              "Statistical: Calculate the Jaro-Winkler distance between new filenames and a list of critical system binaries; flag names that are very close but not identical (eg., 'svch0st.exe' vs 'svchost.exe'). Separately, calculate the character-set distribution for all new process filenames and flag those with statistically significant deviations from a baseline of known-good names.",
              "Machine Learning: Use a Natural Language Processing (NLP) model trained on a large corpus of legitimate and malicious filenames. The model can learn to identify subtle masquerading patterns, such as unusual character combinations or structural anomalies, and classify new filenames as 'suspicious' or 'benign'."
            ]
          },
          {
            "description": "A process with a name corresponding to a legitimate system binary (e.g., svchost.exe, powershell.exe) is executed from a file path outside of its standard, expected directory (e.g., not from C:\\Windows\\System32\\).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), especially user-writable directories (C:\\Users\\*, C:\\ProgramData, C:\\Temp)",
            "action": [
              "Symbolic: Maintain an allowlist of process name-to-path mappings for critical system binaries (e.g., svchost.exe -> C:\\Windows\\System32). Alert on any process creation event where the process name is on the list but the path is not the allowed path, especially in user-writable directories.",
              "Statistical: For each critical process name, calculate the frequency of its execution path across the enterprise. Identify and alert on paths that fall below a low percentile threshold (e.g., 1st percentile), as this indicates a statistically rare execution location for that binary.",
              "Machine Learning: Develop a time-series model to forecast the expected volume of executions for a given process from a specific path. A sudden, unexplained spike in executions of a system binary from a non-standard path could indicate a widespread malware campaign and should be flagged by the anomaly detection model."
            ]
          },
          {
            "description": "A running process's on-disk filename (e.g., svchost.exe) does not match the 'InternalName' or 'OriginalFilename' fields in its Portable Executable (PE) header, or a legitimate system process is spawned by an atypical parent process (e.g., winword.exe spawning cmd.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), Domain Controllers",
            "action": [
              "Symbolic: For process creation events, enrich logs with PE metadata. Compare the process name to the 'InternalName' and 'OriginalFilename' fields and alert on any mismatch. Separately, create rules to detect known-bad parent-child process relationships, such as Microsoft Office applications spawning powershell.exe.",
              "Statistical: Build a baseline of all parent-child process relationships observed in the environment. Calculate the probability of each relationship (e.g., P(child=svchost.exe | parent=services.exe)). Alert when a new, never-before-seen relationship is observed or when an existing relationship's frequency falls into a rare percentile.",
              "Machine Learning: Use a graph-based algorithm to model normal process-spawning behavior, where nodes are processes and edges are parent-child relationships. Anomalies can be detected as new, low-probability edges between distinct communities (e.g., an 'Office App' node spawning a 'System Tool' node)."
            ]
          },
          {
            "description": "A process with a name of a known Microsoft-signed binary (e.g., explorer.exe) is executed, but the binary is either unsigned, has an invalid digital signature, or is signed by a publisher other than a trusted Microsoft entity.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers)",
            "action": [
              "Symbolic: For all processes in C:\\Windows\\*, verify the digital signature status upon execution. Create a high-priority alert if a process that is expected to be signed (e.g., lsass.exe) has a status of 'Unsigned' or 'Invalid', or if the signer is not on an allowlist of trusted publishers.",
              "Statistical: Maintain a list of all unique signers observed in the environment and the count of binaries they have signed. Identify signers that are statistically rare (e.g., have signed < 5 binaries enterprise-wide). Scrutinize any system-like process signed by a rare publisher.",
              "Machine Learning: Train a classification model to predict malicious binaries based on signature features: is_signed, is_valid, signer_name, and signer_prevalence (from statistical analysis). This can identify binaries that are technically signed and valid but are associated with anomalous publishers."
            ]
          },
          {
            "description": "A common system utility (e.g., powershell.exe, rundll32.exe, certutil.exe) is executed with command-line arguments that exhibit high entropy, contain obfuscated or encoded strings, or are uncharacteristically long, deviating from normal activity.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), DMZ servers, Domain Controllers",
            "action": [
              "Symbolic: Scan command-line arguments for known malicious patterns and obfuscation techniques, such as Base64 encoded strings (-enc, -e), PowerShell execution policy bypasses (-bypass, -ep), or keywords associated with LOLBAS execution (e.g., certutil -urlcache).",
              "Statistical: For each common utility, establish a baseline for its command-line length and Shannon entropy. Alert when a new command line exceeds a high percentile threshold (e.g., 95th percentile) for either metric. High entropy is a strong indicator of packed or encrypted scripts.",
              "Machine Learning: Use a time-series anomaly detection model on the average entropy and length of command lines for specific processes (e.g., powershell.exe) across the network. A sudden spike in the average entropy could indicate the start of a fileless malware campaign. A clustering model can also group similar command-line structures to identify rare, outlier clusters."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]