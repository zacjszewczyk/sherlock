[
  {
    "information_requirement": "Is the adversary attempting to exfiltrate data over an unusual network medium? (PIR)",
    "tactic_id": "TA0010",
    "tactic_name": "Exfiltration",
    "indicators": [
      {
        "technique_id": "T1011",
        "name": "Exfiltration Over Other Network Medium",
        "evidence": [
          {
            "description": "A process executes whose file hash matches a known indicator of compromise (IOC) for tools capable of T1011, and this process initiates an outbound network connection over a non-primary network interface (e.g., Wi-Fi, Bluetooth, Cellular) to a destination IP address that is also a known IOC.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints with multiple network interfaces (e.g., laptops, workstations with cellular cards), Network egress points monitoring secondary channels",
            "action": [
              "Symbolic Logic: Monitor process creation events (Windows Event ID 4688) and filter for processes initiating network connections (Windows Event ID 5156). Compare the process file hash against a threat intelligence feed of known malware hashes associated with T1011. Simultaneously, monitor outbound network connections (Zeek conn.log) on non-primary network interfaces and compare destination IP addresses against a threat intelligence feed of known C2 or exfiltration nodes. Alert on any match.",
              "Statistical Method: For each host, build a baseline of common process names that communicate over secondary network interfaces. Calculate the frequency of each process-interface pair across the enterprise. Alert on process-interface pairs that are statistically rare (e.g., in the bottom 5th percentile of frequency).",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using labeled historical data. Features should include process name, parent process, command-line arguments, network interface type, destination IP reputation, and connection byte count. The model will classify each network connection originating from a secondary interface as 'benign' or 'malicious T1011 activity'."
            ]
          },
          {
            "description": "The execution of network configuration utilities (e.g., netsh.exe, ipconfig.exe) or PowerShell cmdlets (e.g., Enable-NetAdapter) with arguments that enable or modify a secondary network interface, where the execution context (user, parent process, time of day) is anomalous.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Domain Controllers (for GPO changes), Endpoint Management Servers (e.g., MECM/SCCM)",
            "action": [
              "Symbolic Logic: Create a detection rule that searches process creation logs (Windows Event ID 4688) and PowerShell script block logs (Event ID 4104) for specific command-line strings such as 'netsh wlan connect', 'netsh interface set interface', 'Enable-NetAdapter', or 'New-NetIPAddress' when associated with a secondary interface type. Alert if the parent process is not a standard administrative tool (e.g., explorer.exe, cmd.exe initiated by a non-admin user).",
              "Statistical Method: Establish a baseline for each user and host of normal network configuration commands. Use frequency analysis to identify commands that are rarely executed. Calculate the entropy of command-line arguments for 'netsh.exe'; a high entropy value for arguments not seen before could indicate randomized or obfuscated commands. Alert when a user executes a network configuration command that is a statistical outlier for their role or for the host.",
              "Machine Learning: Use an unsupervised anomaly detection model (e.g., Isolation Forest) on features extracted from network command executions. Features should include user account, parent process, process name, command-line length, and time of day (e.g., hour, day of week). The model will flag command executions that are highly anomalous compared to the established baseline of legitimate administrative activity."
            ]
          },
          {
            "description": "A timed sequence of events on a single host: [1] A command to enable a secondary network interface, [2] execution of data archiving/compression utilities on sensitive directories, and [3] an outbound network connection over the newly enabled interface with a data volume significantly larger than the host's baseline for that interface.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, File servers, Network egress points",
            "action": [
              "Symbolic Logic: Create a stateful correlation rule that triggers within a 30-minute window on a single host. The sequence must be: 1) Detection of a network interface activation command. 2) Detection of a process creation event (Windows Event ID 4688) for an archiving tool (e.g., 7z.exe, rar.exe, tar.exe). 3) Detection of a large outbound connection (e.g., > 100MB) in Zeek conn.log or Windows Event ID 5156 where the source is the target host and the interface can be inferred as secondary. Alert on a successful sequence match.",
              "Statistical Method: For each host, establish a baseline of outbound data transfer volume over secondary interfaces using a 95th percentile threshold calculated from historical Zeek conn.log data. Monitor for process chains where a data staging command is followed by an outbound connection on a secondary interface that exceeds this percentile threshold. Alert on this combination.",
              "Machine Learning: Implement a time-series analysis model on outbound network traffic volume for each host's secondary interfaces. The model should predict the expected traffic volume for the next time interval. An alert is generated when the actual observed traffic volume significantly exceeds the model's prediction (a prediction error anomaly), especially if the anomaly is preceded by interface activation or data staging commands within a short time window."
            ]
          },
          {
            "description": "Outbound traffic on a secondary network interface exhibits statistically significant deviations from its established baseline in one or more metrics: total bytes transferred, connection duration, destination port, or protocol used.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors at egress points, Wireless Access Points, Endpoints with packet monitoring agents",
            "action": [
              "Symbolic Logic: Create a watchlist of non-standard ports used for exfiltration (e.g., 53 for DNS tunneling, 8080, 4444). Monitor Zeek conn.log for any traffic on secondary network interfaces destined for these ports, especially if the protocol is not what is expected for that port (e.g., non-DNS TCP/UDP traffic over port 53). Alert on any matches.",
              "Statistical Method: For each host's secondary interface, profile normal behavior using historical Zeek conn.log data. Calculate baselines for: 1) outbound bytes transferred (e.g., 99th percentile), 2) connection duration (e.g., 99th percentile), and 3) the set of common destination ports. Alert when a new connection exceeds the byte or duration threshold, or uses a destination port not in the established 'normal' set for that host.",
              "Machine Learning: Apply an unsupervised clustering algorithm (e.g., DBSCAN) to network connection logs (Zeek conn.log) from secondary interfaces. Use features like protocol, destination port, bytes sent, and connection state. After establishing clusters of 'normal' activity, flag any new connections that do not fit into these clusters or form a new, small cluster as anomalous."
            ]
          },
          {
            "description": "A network connection is initiated over a secondary interface by a process that is either [1] not on an allowlist of network-capable applications (e.g., notepad.exe, calc.exe), or [2] a legitimate network-capable process (e.g., powershell.exe, svchost.exe) executing from a non-standard file path (e.g., %APPDATA%, C:\\Temp\\).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers",
            "action": [
              "Symbolic Logic: Maintain an allowlist of standard executable paths for common network-aware processes (e.g., C:\\Windows\\System32\\svchost.exe). Monitor process creation (Windows Event ID 4688) and network connection (Windows Event ID 5156) events. Alert when a network connection is initiated by a process whose full path is not on the allowlist and the connection uses a secondary interface.",
              "Statistical Method: Create a baseline of process-path-interface triples observed across the enterprise. Use frequency analysis to identify rare combinations. For example, a connection from 'powershell.exe' over the primary Ethernet interface might be common, but a connection from 'C:\\Users\\JohnDoe\\Downloads\\ps.exe' over a Bluetooth PAN interface would be extremely rare. Alert on combinations that fall below a defined frequency threshold (e.g., seen on < 0.1% of hosts).",
              "Machine Learning: Train a classification model to predict the likelihood that a given process path is legitimate. Features can include path depth, presence of user-writable directories (e.g., AppData, Temp), and character distribution of the filename. Use the output of this model as a feature in a larger anomaly detection system that also considers the network interface and destination, flagging connections from processes with a high 'malicious path' score."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]