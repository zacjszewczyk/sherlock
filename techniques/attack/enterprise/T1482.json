[
  {
    "information_requirement": "Is the adversary attempting to discover domain trust relationships?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1482",
        "name": "Domain Trust Discovery",
        "evidence": [
          {
            "description": "A process creation event (Windows Event ID 4688) is logged where the process executable's file hash (e.g., SHA256) matches a known hash for a domain reconnaissance tool like BloodHound/SharpHound.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) and match the ProcessHash (e.g., SHA256) against a threat intelligence list of known malicious tool hashes (e.g., BloodHound, Adidnsdump). Trigger a high-priority alert on any match.",
              "Statistical: For all process creation events, calculate the prevalence of each file hash across the enterprise over a 30-day rolling window. Flag any executable hash that appears on a very small number of endpoints (e.g., below the 1st percentile of prevalence) for further inspection, as this indicates a rare tool deployment.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using features from process creation events, including process name, parent process, command line length, and hash prevalence. Use the model to classify each new process as benign or suspicious. A process classified as suspicious, especially if its hash is rare, indicates a likely malicious tool."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) is logged for a native utility (e.g., nltest.exe, powershell.exe) containing command-line arguments specific to domain trust enumeration (e.g., '/domain_trusts', 'Get-ADTrust').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": [
              "Symbolic: Create a detection rule that monitors command-line logging within Windows Event ID 4688. The rule should use regular expressions to search for exact strings and patterns associated with trust discovery, such as `nltest.exe /domain_trusts`, `dsquery * -filter '(objectClass=trustedDomain)'`, or PowerShell commands containing `Get-ADTrust` or `(Get-ADDomain).GetAllTrustRelationships()`.",
              "Statistical: For each user, establish a baseline of normally executed command-line utilities and arguments. Calculate the historical frequency of trust discovery commands (e.g., `nltest /domain_trusts`) per user and per host. An execution by a user or on a host with no prior history of running such commands, or a frequency that exceeds 2 standard deviations from the user's or host's baseline, should be flagged as anomalous.",
              "Machine Learning: Use an unsupervised clustering algorithm (e.g., DBSCAN) on command-line arguments. Cluster commands based on semantic similarity or structure. Identify clusters representing rare or unique command patterns. Investigate clusters that contain domain trust discovery syntax, as they may represent novel or obfuscated adversary techniques not caught by symbolic rules."
            ]
          },
          {
            "description": "A domain trust discovery command is executed by a parent process not typically associated with administrative activity, such as `WINWORD.EXE`, `w3wp.exe`, or `svchost.exe` hosting a non-administrative service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Servers, Application Servers, User Workstations",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a process creation event (Windows Event ID 4688) for a trust discovery command (e.g., `nltest.exe /domain_trusts`) has a `ParentProcessName` from a list of suspicious parents (e.g., `WINWORD.EXE`, `OUTLOOK.EXE`, `w3wp.exe`, `tomcat.exe`).",
              "Statistical: Generate a frequency distribution of parent-child process relationships across the environment. Calculate the probability of a specific parent (e.g., `WINWORD.EXE`) spawning a specific child (e.g., `nltest.exe`). Flag any relationship that falls into a low-probability percentile (e.g., less than 0.1%) as highly anomalous and worthy of investigation.",
              "Machine Learning: Develop a time-series model that correlates remote logons (Windows Event ID 4624, Logon Type 3 or 10) with subsequent process creation events (4688) within a short time window (e.g., 5 minutes) on the same host. Train the model to recognize normal sequences of post-login activity. Use anomaly detection on this time series to identify when a remote logon is followed by an unusual discovery command sequence, indicating non-interactive reconnaissance."
            ]
          },
          {
            "description": "LDAP query traffic observed in network logs (e.g., Zeek ldap.log) originating from a non-Domain Controller source, where the query filter targets objects of class 'trustedDomain'.",
            "data_sources": [
              "Zeek ldap.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments containing Domain Controllers, Network egress points, User network segments",
            "action": [
              "Symbolic: Monitor Zeek ldap.log files for queries where `id.orig_h` is not in the set of authorized Domain Controller IP addresses and the `search_filter` contains `(objectClass=trustedDomain)`. An event matching these criteria should trigger an alert.",
              "Statistical: For each host, profile the volume and diversity of its LDAP queries over time. Calculate the Shannon entropy of the `search_filter` field for each source IP over a 1-hour window. A sudden spike in entropy for a non-DC host indicates it is performing a wide variety of queries, which is characteristic of reconnaissance. Flag hosts whose entropy score exceeds the 95th percentile of the baseline for their role.",
              "Machine Learning: Apply time-series anomaly detection (e.g., using an LSTM model) to the volume of LDAP queries per source host. Train the model on historical LDAP traffic to learn normal patterns. The model should be able to detect sudden, uncharacteristic bursts of LDAP query activity from a single host, which could indicate the execution of a reconnaissance script."
            ]
          },
          {
            "description": "A single host is observed executing a chain of discovery commands within a short time window (e.g., under 1 hour), including T1482 (Domain Trust Discovery) followed by T1018 (Remote System Discovery) or T1135 (Network Share Discovery).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations, SIEM/Log Aggregator",
            "action": [
              "Symbolic: Define a sequence-based rule in the SIEM that looks for a specific chain of ATT&CK techniques from a single host within a 60-minute window. For example: `(T1033: whoami) -> (T1482: nltest /domain_trusts) -> (T1018: net view)`. A match of this sequence triggers a high-severity alert indicating a 'living-off-the-land' reconnaissance playbook.",
              "Statistical: Implement a host-based risk scoring system. Assign points for each discovery-related command execution (e.g., 5 points for `nltest`, 3 for `net view`). Use a time-decay function so that points diminish over time. If a host's risk score exceeds a statistically determined threshold (e.g., the 99th percentile of all host scores), it is flagged for investigation. This method aggregates disparate, low-fidelity signals into a high-fidelity alert.",
              "Machine Learning: Use a Hidden Markov Model (HMM) to model the transition probabilities between different states of discovery activity (e.g., 'No Activity', 'Host Discovery', 'Network Discovery', 'Trust Discovery'). Train the model on benign administrative activity. When live data is fed into the model, sequences of state transitions with very low probability under the benign model are flagged as likely adversary behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]