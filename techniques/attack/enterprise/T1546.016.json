[
  {
    "information_requirement": "Is the adversary establishing persistence using malicious installer packages?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.016",
        "name": "Installer Packages",
        "evidence": [
          {
            "description": "An installer process (e.g., msiexec.exe) executes a child process or writes a file whose hash is present on a threat intelligence feed of known malware.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers, Domain Controllers",
            "action": [
              "Symbolic: Continuously query for process creation events (Windows Event ID 4688) where the parent process is a known installer (e.g., msiexec.exe, setup.exe) and the child process executable's hash matches a list of known malicious indicators from a CTI feed. Alert on any match.",
              "Statistical: For installer processes that launch PowerShell (identified via 4688 parent/child relationship and 4104 script block logs), calculate the character frequency distribution and entropy of the executed script block. Compare the entropy score against a baseline established from legitimate installer scripts. Flag scripts with entropy scores in the top 5th percentile (e.g., > 6.5) as potentially obfuscated and malicious.",
              "Machine Learning: Develop a time-series model to forecast the expected volume of installer-related script executions (e.g., PowerShell child processes of msiexec.exe) per hour. Use this model to detect anomalous spikes in activity which could indicate a widespread campaign deploying a malicious installer. An alert should be generated when the observed count exceeds the forecasted upper confidence interval for a sustained period (e.g., 10 minutes)."
            ]
          },
          {
            "description": "An installer process (e.g., msiexec.exe) creates a new service, scheduled task, or registry run key whose properties (name, path, command) match a known malicious signature.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 4698",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers, Domain Controllers",
            "action": [
              "Symbolic: Monitor for the creation of services (Windows Event ID 4697), scheduled tasks (4698), or registry modifications to Run keys (4657). Correlate these events with a parent installer process (4688). Apply a set of regular expressions against the service name, task name, command-line arguments, and registry value data to detect patterns associated with known malware families or C2 frameworks. Alert on a match.",
              "Statistical: For each new persistence mechanism created by an installer, calculate a rarity score for its properties. For example, for a new service, determine the frequency of the service's executable path across the enterprise. A service pointing to an executable in a user's AppData folder is rarer than one in System32. Aggregate rarity scores for path, name, and user context. Flag persistence entries with a combined rarity score exceeding the 98th percentile of all newly created persistence.",
              "Machine Learning: Train a logistic regression classifier to predict whether a new persistence entry is malicious. Features can include the parent process name (installer), path of the new executable/script, presence of command-line arguments, location of the persistence (e.g., HKCU vs HKLM), and the statistical rarity of the executable path. The model should be trained on a labeled dataset of known-good and known-bad persistence events. Alert on items classified as malicious with a high confidence score (> 0.9)."
            ]
          },
          {
            "description": "An installer process creates a persistence mechanism (e.g., Run keys, Scheduled Tasks, Services) where the type or location of the persistence is inconsistent with a baseline of behavior for that specific installer or for installers in general.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4697",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers, Domain Controllers, Software deployment servers",
            "action": [
              "Symbolic: Create and maintain an explicit allowlist mapping specific, approved installer package names/hashes to the exact persistence mechanisms they are authorized to create (e.g., 'acrobat_installer.msi' can create 'AdobeARMservice'). Alert on any installer that creates a persistence entry not on its specific allowlist.",
              "Statistical: Establish a baseline of normal persistence modifications for all installer processes observed over a 30-day period. For each new persistence creation event by an installer, check if the combination of (installer_name, persistence_type, persistence_path_location) has been seen before. Use frequency analysis to flag events where a common installer creates persistence in a statistically rare location (e.g., a path with high entropy or in a user-writable directory like C:\\Users\\Public).",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features extracted from persistence creation events (parent process name, persistence type, target path, user context). Legitimate installers should form dense clusters. Treat events that are classified as noise or fall into very small, sparse clusters as anomalies requiring investigation. This helps identify novel or rare malicious installers that deviate from established patterns."
            ]
          },
          {
            "description": "An installer process writes a file to a non-standard location (e.g., not Program Files) and that file is subsequently executed, or the installer process initiates a network connection to a destination with a low reputation or that is statistically rare for that installer.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network egress points (firewalls/proxies), DNS resolvers",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) with subsequent network connections (Zeek conn.log) from the same process. Compare the destination IP addresses and domains (from Zeek dns.log) against a CTI feed of known C2 servers or malicious domains. Alert on any match originating from an installer process.",
              "Statistical: For each installer process, build a profile of its typical network behavior. From Zeek conn.log, calculate the historical data transfer volume for each installer. Flag any instance where an installer's network connection transfers a volume of data exceeding the 99th percentile of its historical baseline. Additionally, analyze requested domains in Zeek dns.log and flag installers connecting to newly registered domains or domains with high entropy.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model on features of legitimate installer network activity (e.g., destination port, protocol, JA3/JA3S hash, bytes_out, requested domain TLD). The model learns the boundary of 'normal' behavior. Any new network connection from an installer that falls outside this boundary is flagged as an anomaly."
            ]
          },
          {
            "description": "An installer process (e.g., msiexec.exe) spawns a script interpreter (e.g., powershell.exe) to execute a script block that is either unsigned, has high entropy, or contains commands associated with malicious activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers",
            "action": [
              "Symbolic: From Windows Event ID 4104 (PowerShell Script Block Logging), parse the script content executed by an installer's child process. Use a ruleset (e.g., Sigma rules) to search for specific suspicious string combinations like 'IEX', 'DownloadString', 'Get-ExecutionPolicy', 'Bypass', or base64-encoded commands. Alert on any rule match.",
              "Statistical: For all script blocks logged in Event ID 4104, calculate the entropy of the script content. Establish a baseline entropy score for legitimate scripts run during installations. Alert when an installer-initiated script's entropy exceeds a high threshold (e.g., > 95th percentile), which often indicates packing or obfuscation. Also, track the frequency of specific PowerShell cmdlets used by installers and alert on the use of statistically rare cmdlets.",
              "Machine Learning: Use a pre-trained natural language processing (NLP) model (e.g., a transformer-based model fine-tuned on PowerShell scripts) to classify script blocks as benign or malicious. Feed the script content from Event ID 4104 into the model and alert when the classification is 'malicious' with a confidence score above a set threshold (e.g., 0.85)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges using malicious installer packages?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.016",
        "name": "Installer Packages",
        "evidence": [
          {
            "description": "An installer package is executed, and its file hash or associated certificate is found on a threat intelligence feed listing known vulnerable software versions or exploits (e.g., linked to a specific CVE).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Software repositories, Patch management systems",
            "action": [
              "Symbolic: Upon execution of any installer process (e.g., msiexec.exe, setup.exe) identified in Windows Event ID 4688, extract the file hash. Compare this hash against a continuously updated database of known-vulnerable application installers and malware with privilege escalation capabilities. Generate a high-priority alert on any match.",
              "Statistical: Maintain an inventory of all installed applications and their versions across the enterprise. For each new installation event, compare the installed version against a database of known vulnerabilities (e.g., NVD). Calculate a risk score based on the CVSS score of any associated vulnerabilities. Flag installations of software with known privilege escalation vulnerabilities (CVSS Attack Vector: Local, Privileges Required: Low/None) that have a CVSS score above 7.0.",
              "Machine Learning: Develop a classification model to predict if a given installer is a known vulnerable version of a legitimate application. Features would include software name, version number, publisher, and certificate information. Train the model on historical data of both vulnerable and patched software versions. Use this to proactively flag installations of outdated, vulnerable software."
            ]
          },
          {
            "description": "An installer process launching a known privilege escalation tool or a script with characteristic command-line arguments for privilege escalation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Controllers, High-value asset servers",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) where the parent is an installer. Scan the child process name and command line for exact matches or regular expression patterns corresponding to known privilege escalation tools (e.g., 'JuicyPotato.exe', 'PrintSpoofer.exe', 'Invoke-PowerUp'). For PowerShell, apply similar regex patterns to the script block content from Event ID 4104. Alert immediately on a match.",
              "Statistical: Analyze the command-line arguments of all child processes spawned by installers. Calculate the frequency of each argument and argument combination. Flag child processes that use statistically rare arguments, especially in combination with sensitive system utilities (e.g., `sc.exe create ... binPath=...`, `ntdsutil.exe`). A command line with an entropy score in the 99th percentile for its process name is also highly suspicious.",
              "Machine Learning: Train a sequence-based model (like an LSTM) on command-line arguments of processes spawned by installers. The model learns the normal sequence and structure of arguments for legitimate processes. Flag any command-line execution that the model identifies as a significant deviation from learned legitimate sequences, as this could indicate the use of a novel or obfuscated privilege escalation tool."
            ]
          },
          {
            "description": "An installer process spawns an unexpected child process that runs with a higher integrity level (High or System) than is typical for the parent installer or standard software installations.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, User workstations, Terminal servers",
            "action": [
              "Symbolic: Create a rule to alert any time an installer process (e.g., msiexec.exe) running at 'Medium' integrity level spawns a child process (e.g., cmd.exe, powershell.exe) that is running at 'High' or 'System' integrity level, and the child process is not a known, legitimate elevation mechanism like `UAC.exe`.",
              "Statistical: For each unique installer name, establish a baseline of the typical integrity levels of its child processes. For example, 'vlc-setup.exe' might always spawn child processes at 'Medium' integrity. Alert when an installer spawns a child process with an integrity level that is statistically anomalous for that specific parent installer (e.g., a 'System' level process when none have been observed before).",
              "Machine Learning: Use an anomaly detection algorithm (e.g., Isolation Forest) on process creation events. Features should include parent process name, child process name, parent integrity level, and child integrity level. The model will learn to isolate rare combinations. Events that are quickly isolated by the model, such as a non-system installer spawning a SYSTEM-level command prompt, are flagged as highly anomalous."
            ]
          },
          {
            "description": "An installer process directly modifies user or group memberships, such as adding a user to the local Administrators group, or modifies system configurations to disable security controls.",
            "data_sources": [
              "Windows Event ID 4732",
              "Windows Event ID 4720",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Controllers, Active Directory databases",
            "action": [
              "Symbolic: Create a high-severity alert for any event where a member is added to a privileged local or domain group (e.g., Administrators, Domain Admins) via Windows Event ID 4732 or 4728, and the process responsible for the change can be traced back to an installer process (msiexec.exe, setup.exe) within a short time window (e.g., 5 minutes).",
              "Statistical: Profile the normal rate of user and group modifications over time. Use time-series analysis to detect a sudden spike in these events (e.g., 4732, 4720) immediately following an installation event on a host. A burst of activity that is 3+ standard deviations above the hourly baseline for that host is a strong anomaly.",
              "Machine Learning: Train a classifier to determine if a group membership change is suspicious. Features would include: the process making the change, the user being added, the group being modified, and the time of day. The model can learn that changes made by 'lsass.exe' during business hours are normal, while changes made by 'msiexec.exe' at 3 AM are highly suspicious. Alert when the model classifies a change as suspicious with high confidence."
            ]
          },
          {
            "description": "An installer process attempts to access or modify highly sensitive registry keys associated with privilege escalation or defense evasion, such as Image File Execution Options, Winlogon, or LSA keys.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4657",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Windows Registry hives on critical servers and workstations",
            "action": [
              "Symbolic: Deploy and monitor specific SACLs on critical registry keys (e.g., `HKLM\\SYSTEM\\CurrentControlSet\\Services`, `HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options`). Create a rule that generates a critical alert on any write or delete access event (Windows Event ID 4657, 4663) to these keys where the source process is an installer (e.g., msiexec.exe) or one of its immediate children.",
              "Statistical: Build a frequency profile of processes that legitimately access sensitive registry keys (e.g., `services.exe`, `regedit.exe` initiated by an admin). Any access from a process name that is statistically rare or has never been seen accessing these keys before should be flagged. For example, if `msiexec.exe` appears in the top 1% of rarest processes to access `HKLM\\...\\Image File Execution Options`, generate an alert.",
              "Machine Learning: Use a sequence analysis model to baseline the order of registry key accesses during legitimate software installations. The model learns that a typical installer might write to its own `HKLM\\Software\\Vendor` key, then to `HKLM\\...\\Uninstall`. An anomalous sequence, such as an installer writing to its own key and then immediately to `HKLM\\...\\Image File Execution Options`, would be flagged as a deviation indicative of malicious behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]