[
  {
    "information_requirement": "Has the adversary gained initial access to the network via content injection?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1659",
        "name": "Content Injection",
        "evidence": [
          {
            "description": "An executable file is transferred over an unencrypted protocol (HTTP, FTP), and its hash matches a known malicious signature from a threat intelligence feed. This suggests a malicious file was injected into a legitimate download stream.",
            "data_sources": [
              "Zeek file.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, External-facing Web Proxies, ISP Demarcation Point, Cloud Access Security Brokers (CASBs)",
            "action": [
              "Symbolic: Join the `md5` or `sha1` hash from Zeek file.log against a threat intelligence feed of known malicious file hashes. Alert on any match where the `source` field is 'HTTP' or 'FTP' and the `conn_uids` maps to a connection from an external IP address.",
              "Statistical: For each file hash observed in Zeek file.log, calculate its prevalence (count of unique hosts that have seen the file) across the enterprise over a 30-day period. Flag hashes that fall below the 1st percentile of prevalence, as novel malware injected into traffic will appear as an extremely rare file.",
              "Machine Learning: Train a supervised classification model (e.g., XGBoost) on features derived from Zeek file.log and http.log, such as file mime type, file size, source protocol, and domain reputation. Use the model to predict the likelihood that a downloaded file is malicious and flag files with a high probability score (> 0.9) for investigation."
            ]
          },
          {
            "description": "A web browser process (e.g., chrome.exe, msedge.exe) spawns a command-line interpreter or scripting engine (e.g., cmd.exe, powershell.exe, wscript.exe), and the new process's command line contains a path pointing to a temporary internet file or browser cache directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) Environments",
            "action": [
              "Symbolic: Create a detection rule that triggers on Windows Event ID 4688 where the `ParentProcessName` is a known web browser and the `ProcessName` is a scripting engine, and the `CommandLine` contains strings like '\\INetCache\\', '\\AppData\\Local\\Temp\\', or '\\Downloads\\'. Alert on any match.",
              "Statistical: For each unique parent-child process pair observed in Windows Event ID 4688 logs, maintain a historical frequency count across the environment. Alert when a pair involving a browser parent occurs and its frequency is below the 5th percentile of all observed pair frequencies, or if the pair has never been seen before.",
              "Machine Learning: Train an unsupervised anomaly detection model (e.g., Isolation Forest) on vectorized features from Windows Event ID 4688, including parent process name, process name, command-line length, and command-line entropy. Flag events with high anomaly scores, particularly those involving browser parent processes, for analyst review."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a short time window (e.g., under 60 seconds): 1) a file is downloaded via a web browser, 2) a new process is created from that file, and 3) the new process initiates an outbound network connection to a domain not previously contacted by that host in the last 30 days.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log",
              "Zeek file.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Network Egress Points, Web Proxies",
            "action": [
              "Symbolic: Correlate events on a single host IP: a file download from Zeek file.log (e.g., mime_type containing 'executable' or 'script'), followed within 60 seconds by a process creation from Windows Event ID 4688 where the new process name matches the downloaded file name, followed within 60 seconds by a new outbound connection in Zeek conn.log to a destination not seen from that host in the last 30 days. Alert on the full sequence.",
              "Statistical: For each host, build a historical model of 3-event sequences (download-filetype -> process-name -> destination-domain-tld). Calculate the frequency of each unique sequence pattern. Alert when an observed sequence's frequency falls into the lowest 1st percentile, indicating an anomalous and potentially malicious chain of activity.",
              "Machine Learning: Train a sequence analysis model, such as a Hidden Markov Model (HMM) or an LSTM-based autoencoder, on event chains (file downloads, process creations, network connections) from user endpoints. Feed real-time event sequences for each host into the model and flag any sequence that has a low probability score, indicating a significant deviation from normal learned behavior."
            ]
          },
          {
            "description": "For a given Server Name Indication (SNI), the observed TLS certificate issuer or subject changes to an unexpected value not seen historically, or the HTTP response body length for a specific URL deviates significantly from its historical baseline.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, Internal DNS Servers, Web Proxies, Network TAPs at key aggregation points",
            "action": [
              "Symbolic: For a watchlist of critical external domains, cache the first observed TLS certificate `issuer` and `subject` from Zeek ssl.log. Alert if a subsequent connection to the same domain presents a different `issuer` or a `validation_status` of 'self-signed' or 'unable_to_get_local_issuer'.",
              "Statistical: For each unique URL, calculate the moving average and standard deviation of the `resp_body_len` from Zeek http.log over a 30-day window. Alert if a new response body length for that URL is more than 3 standard deviations from the moving average, which could indicate injected content.",
              "Machine Learning: Apply a change point detection algorithm to the time series of categorical data representing the TLS certificate issuer for a specific high-value domain. An abrupt, detected change point can signal a large-scale man-in-the-middle attack or ISP-level interception that facilitates content injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using content injection for command and control?",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1659",
        "name": "Content Injection",
        "evidence": [
          {
            "description": "Outbound network traffic targets a legitimate, high-reputation domain (e.g., a known CDN or cloud provider), but the request URI, HTTP headers, or POST body contains patterns matching known C2 framework signatures, indicating C2 tunneling.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Resolvers, Cloud Service Gateways, Web Application Firewalls",
            "action": [
              "Symbolic: Apply a signature-based ruleset (e.g., Suricata, YARA) to the full content of HTTP requests in Zeek http.log, specifically targeting URI paths, query parameters, and POST bodies for patterns associated with known C2 frameworks (e.g., Cobalt Strike, Metasploit). Alert on any match.",
              "Statistical: For each JA3 hash seen in Zeek ssl.log, calculate its prevalence (number of source IPs using it) and its rarity (inverse of global frequency). Flag JA3 hashes that are rare globally but used by multiple internal hosts to connect to the same destination, as this suggests a common, non-standard client used for C2.",
              "Machine Learning: Train a supervised classifier (e.g., Logistic Regression) to distinguish between normal and C2 HTTP requests using features like URI length, query parameter count, entropy of URI and POST body, and presence of specific keywords. Apply the model to all outbound HTTP traffic and flag requests with a high C2 probability score."
            ]
          },
          {
            "description": "A single host repeatedly communicates with a specific domain where HTTP request characteristics are static or non-random. This includes a fixed, non-browser User-Agent string and URI parameters that have very high or very low entropy, suggesting automated, structured communication.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Proxies, Network Egress Points, User Workstations",
            "action": [
              "Symbolic: Search Zeek http.log for User-Agent strings that are known to be used by malware, are empty, do not conform to standard browser formats, or are associated with http libraries like 'curl' or 'python-requests' originating from non-server subnets.",
              "Statistical: For each source IP and destination domain pair, calculate the Shannon entropy of the URI query parameters over a 1-hour window. Flag pairs where the entropy is consistently high (> 4.0, suggesting encoded data) or consistently low (< 1.5, suggesting simple check-ins) and deviates from the population baseline for that destination domain.",
              "Machine Learning: Cluster HTTP requests using an algorithm like DBSCAN on a feature set including User-Agent string, URI length, parameter count, and request method. Investigate small, dense clusters that do not correspond to known legitimate applications or browser traffic as potential C2 channels."
            ]
          },
          {
            "description": "A host exhibits C2 beaconing behavior, characterized by outbound connections to a single destination with a highly periodic interval (low jitter), consistent data transfer sizes, and long-running, persistent activity.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, VPN Concentrators, User Workstations, Firewall logs",
            "action": [
              "Symbolic: Create a rule to identify a 'heartbeat' pattern: at least 10 connections from a single source to a single destination within a 1-hour window, where each connection's `orig_bytes` and `resp_bytes` in Zeek conn.log are within 10% of each other across all connections in the window.",
              "Statistical: For each source IP and destination IP pair in Zeek conn.log, calculate the inter-arrival time between connections over a 1-hour window. Compute the standard deviation of these time deltas. Flag pairs with a standard deviation below a low threshold (e.g., 5 seconds) and a mean inter-arrival time greater than 1 minute, indicating automated, periodic beaconing.",
              "Machine Learning: Apply a Fast Fourier Transform (FFT) to the time series of connection events for each source-destination pair. A strong peak in the frequency domain indicates a highly periodic signal characteristic of C2 beaconing. Flag pairs where the dominant frequency's amplitude exceeds a predefined threshold."
            ]
          },
          {
            "description": "C2 data is exfiltrated via covert channels, such as within long DNS query subdomains to an adversary-controlled domain or in HTTP POST requests to legitimate services. The data is often encoded (e.g., Base64) or encrypted, resulting in high string entropy.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS Servers, Web Proxies, Network Egress Points",
            "action": [
              "Symbolic: Apply a regular expression `(?:[A-Za-z0-9+/]{4}){10,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?` to DNS queries in Zeek dns.log and URI parameters in Zeek http.log to find long Base64 strings. Alert on matches, especially in DNS TXT record queries or subdomains longer than 50 characters.",
              "Statistical: For each DNS query in Zeek dns.log, calculate the Shannon entropy of the queried subdomain. Establish a baseline entropy for legitimate queries in your environment (typically < 3.5). Alert on any queries with an entropy greater than 4.5, which strongly suggests DGA or data tunneling.",
              "Machine Learning: Train a character-level classifier (e.g., a Convolutional Neural Network) to distinguish between legitimate domain names and DGA/tunneled domain names. Use features like n-gram frequencies and character distribution. Apply the trained model to all DNS queries in Zeek dns.log and flag any query classified as malicious with high confidence."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]