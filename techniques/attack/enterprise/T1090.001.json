[
  {
    "information_requirement": "Is the adversary using an internal proxy for Command and Control? (PIR)",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1090.001",
        "name": "Internal Proxy",
        "evidence": [
          {
            "description": "A process is created with a file hash or name matching a known internal proxy tool (e.g., HTRAN, Stowaway, GOST), and the host subsequently makes an outbound connection to an IP address or domain on a C2 threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Workstations, Application Servers, Network Egress Points",
            "action": [
              "Create a detection rule that triggers when a process creation event (Windows Event ID 4688) occurs where the ProcessName or OriginalFileName matches a list of known proxy tools (e.g., 'htran.exe', 'gost.exe', 'zxproxy.exe') OR the associated file hash matches a known malicious hash from a threat intelligence feed.",
              "For any host that executes a suspicious proxy tool, analyze its network activity in Zeek conn.log. Calculate the 95th percentile for daily outbound connections and data volume for that host's role (e.g., workstation). Generate an alert if the host's activity exceeds this percentile threshold post-execution, indicating a potential new C2 channel.",
              "Train a decision tree classifier on labeled data (benign vs. malicious process executions). Use features from Windows Event ID 4688 such as parent process, command-line length, and user context, combined with network features from Zeek conn.log like connection duration and destination port rarity. Use the model to score new process executions for their likelihood of being a malicious proxy."
            ]
          },
          {
            "description": "A legitimate system utility (e.g., netsh.exe, ssh.exe) or scripting interpreter (e.g., powershell.exe) is executed with command-line arguments containing patterns indicative of port forwarding, tunneling, or proxying (e.g., 'interface portproxy', '-L', '-R').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Workstations, Jump Servers, Bastion Hosts",
            "action": [
              "Using Windows Event ID 4688 logs, create a detection rule with regular expressions to find command-line arguments containing patterns like 'netsh interface portproxy add', 'ssh -L', 'ssh -R', 'plink.exe -L', or PowerShell invocations of '.Net.Sockets.TcpClient' used for traffic redirection.",
              "For each host, build a baseline of normal command-line arguments for utilities like 'netsh.exe' and 'ssh.exe'. Calculate the Jaccard similarity score for new command lines against this baseline. Alert on commands with low similarity scores or that contain rare terms (e.g., 'portproxy') which deviate significantly from the established norm.",
              "Apply an anomaly detection algorithm, such as an autoencoder, to the command-line arguments of common system utilities. Train the model on historical command-line data to learn normal patterns. Use the model to flag new commands with a high reconstruction error, indicating they are structurally different from typical usage and may represent malicious proxying activity."
            ]
          },
          {
            "description": "A network connection is observed where the dynamically identified protocol (e.g., via Zeek) does not match the IANA-assigned protocol for the destination port (e.g., 'ssl' on port 135/RPC), or the payload entropy of a connection is statistically higher than the baseline for that port.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internal Network Segments (East-West Traffic), Server VLANs",
            "action": [
              "Create a SIEM rule to alert when the 'service' field in Zeek conn.log does not match the expected protocol for the 'id.resp_p' (destination port). For example, alert if conn.log shows 'service' as 'ssl' or 'unknown' on ports like 135, 139, or 445.",
              "For each standard destination port (e.g., 80, 443, 53), establish a baseline of payload entropy using historical Zeek data. Calculate the 99th percentile for entropy on each port. Continuously monitor new connections and alert if the payload entropy exceeds this threshold, suggesting encrypted or packed data within a non-standard tunnel.",
              "Use a time-series forecasting model (e.g., ARIMA or LSTM) to predict expected traffic volume and protocol mix on critical network segments. An alert is generated when observed traffic significantly deviates from the forecast, which could indicate the presence of a new, high-volume internal proxy channel."
            ]
          },
          {
            "description": "An internal host, not designated as a proxy or gateway, shows a statistically significant increase in the ratio of unique internal source IPs connecting to it versus unique external destination IPs it connects to, over a defined time window.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal Network Segments (East-West Traffic), Workstation VLANs, DMZ",
            "action": [
              "Define a list of known proxy servers and gateways. Create a rule that alerts on any host NOT on this list that shows more than 10 internal hosts connecting to it while it maintains a persistent connection to a single external IP address over a 1-hour window.",
              "For each internal host, calculate a 'funnel ratio' = (count of unique internal source IPs) / (count of unique external destination IPs) over rolling 24-hour windows. Establish a baseline mean and standard deviation for this ratio for different host roles (workstations, servers). Alert when a host's funnel ratio exceeds 3 standard deviations above its baseline mean.",
              "Model the internal network as a graph using Zeek conn.log data. Use a community detection algorithm (e.g., Louvain Modularity) to identify normal clusters of communicating hosts. A host that suddenly starts bridging two previously disconnected communities or whose 'betweenness centrality' score rapidly increases is a candidate for a newly established internal proxy."
            ]
          },
          {
            "description": "A persistent network connection (e.g., lasting > 1 hour) is established between two internal hosts or network segments (e.g., workstation-to-workstation) that have no communication history over a 30-day baseline period.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Workstation VLANs, Server VLANs, Interfaces between security zones",
            "action": [
              "Maintain a state table or lookup file of historically observed (source IP, destination IP, destination port) tuples over a 30-day period. Generate a high-priority alert for any new connection tuple that is not in the baseline, especially if it involves workstation-to-workstation communication on non-standard ports or crosses a defined security boundary.",
              "For every source-destination pair in the network, calculate the daily connection frequency. Use a simple count-based anomaly detection method. If a pair that historically has a frequency of zero suddenly shows persistent connections (e.g., > 5 connections per day for 3 consecutive days), flag it as a new and potentially suspicious communication path.",
              "Train a link prediction model on a graph representation of the network's communication baseline. The model learns which connections are likely or 'normal'. Use the trained model to score new connections as they appear. A new, persistent connection that receives a very low probability score from the model is a strong candidate for an anomalous path created by an adversary."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]