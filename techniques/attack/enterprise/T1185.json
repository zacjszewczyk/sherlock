[
  {
    "information_requirement": "Is the adversary leveraging browser sessions for collection or lateral movement?",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1185",
        "name": "Browser Session Hijacking",
        "evidence": [
          {
            "description": "A standard user-facing browser process (e.g., chrome.exe, msedge.exe) initiates a network connection to a destination IP address or domain categorized as a command and control (C2) or malware hosting site on a threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise web proxy, DNS resolvers, and all user endpoints.",
            "action": [
              "Using a SIEM, join network connection events (Windows Event ID 5156, Zeek conn.log) with DNS query logs (Zeek dns.log) on timestamp and IP address. Filter for events where the initiating process is a known browser (e.g., chrome.exe, firefox.exe, msedge.exe). Compare the destination IP or domain against a curated threat intelligence feed of known C2 or malware infrastructure. Trigger a high-severity alert upon any match.",
              "For each user, establish a baseline of domains they typically visit. Calculate the rarity of each new domain visited by a user's browser. If a browser connects to a domain that is in the bottom 1st percentile of prevalence across the organization (i.e., extremely rare) and is less than 30 days old (from WHOIS data), flag the connection for review as it may be newly created C2 infrastructure.",
              "Develop a supervised classification model (e.g., Gradient Boosting) using labeled historical network data. Extract features from Zeek conn.log such as duration, protocol, service, orig_bytes, resp_bytes, and connection state. Enrich with features like destination IP reputation, ASN information, and domain age. Deploy the trained model to score new connections originating from browser processes in real-time. Connections classified as malicious with a confidence score above 0.9 should be escalated for immediate review."
            ]
          },
          {
            "description": "Anomalous process activity is observed, such as a non-standard process (e.g., powershell.exe) accessing browser cookie or credential stores, or a browser process being launched with suspicious command-line flags enabling remote control or security degradation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All user endpoints (workstations, VDIs) and terminal servers. Specifically, monitor user profile directories containing browser data, such as C:\\Users\\<username>\\AppData\\.",
            "action": [
              "Create a detection rule that parses command-line arguments from process creation events (Windows Event ID 4688). Trigger an alert if a browser process is launched with any of the following flags: '--remote-debugging-port', '--load-extension', '--disable-web-security', '--allow-running-insecure-content', or '--user-data-dir' pointing to an unusual location.",
              "Enable object access auditing on critical browser files (e.g., 'Login Data', 'Cookies', 'Web Data' in Chrome/Edge user profiles). Collect file access events (Windows Event ID 4663). For each sensitive file, create a frequency table of all processes that have accessed it over a 30-day baseline period. Calculate the rarity (inverse frequency) of each process. Alert when a process with a rarity score in the top 1st percentile (e.g., a script interpreter or a newly downloaded executable) accesses a protected browser file.",
              "Implement an unsupervised anomaly detection model (e.g., Autoencoder or Isolation Forest) on browser process command-line arguments from Windows Event ID 4688. Pre-process the command lines by tokenizing and applying a TF-IDF vectorizer to create numerical feature vectors. Train the model on a baseline of normal browser launch commands. Apply the model to new events and flag any command line with a high reconstruction error or anomaly score, indicating a deviation from established patterns."
            ]
          },
          {
            "description": "A browser process spawns a suspicious child process, such as a command shell or scripting interpreter, or another process creates a remote thread in a browser process, indicative of process injection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 8"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints running user-facing web browsers, including workstations and terminal servers.",
            "action": [
              "Create two high-fidelity detection rules. Rule 1: From process creation logs (Windows Event ID 4688), alert when a ParentProcessName is a known browser and the ProcessName is a shell or script interpreter (e.g., cmd.exe, powershell.exe, wscript.exe, cscript.exe). Rule 2: From Sysmon Event ID 8 logs, alert when the TargetProcess is a browser and the SourceProcess is not the browser itself or a known legitimate updater/installer process.",
              "Using process creation logs (Windows Event ID 4688), build a historical baseline of all unique parent-child process relationships where the parent is a browser. Calculate the frequency of each child process spawned by browsers across the environment. Schedule a recurring query to identify any new child process that has a frequency of less than 0.1% (or is completely new) and alert for security review.",
              "Construct a process relationship graph for each host, where nodes are processes and edges represent parent-child or remote thread creation relationships. Use a graph-based anomaly detection algorithm to identify rare or unusual subgraphs, such as a browser spawning a chain of processes or receiving a remote thread from a non-standard parent. Flag hosts with anomalous graph structures originating from a browser for investigation."
            ]
          },
          {
            "description": "A user's browser-generated network traffic exhibits anomalous characteristics when compared to their own historical baseline, such as a sudden increase in connections to internal IP addresses, use of non-standard ports, or a significant change in data upload/download ratios.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network gateways, internal network segments (particularly traffic between user subnets and server subnets), and user endpoints.",
            "action": [
              "Create a detection rule that correlates endpoint process network events (Windows Event ID 5156) with network flow data (Zeek conn.log). Trigger an alert when a browser process initiates a connection to an internal IP address (e.g., RFC1918 space) on a port not associated with web traffic, such as 22, 139, 445, or 3389.",
              "For each user, create a 30-day rolling baseline of their typical network behavior originating from browsers. Key metrics should include: bytes sent/received ratio, number of unique internal IPs contacted per hour, and Shannon entropy of destination ports. Alert when any of these metrics deviates more than 3 standard deviations from the user's established baseline, which could indicate pivoting or internal reconnaissance.",
              "On a daily basis, featurize each user's browser activity from the previous 24 hours using metrics from Zeek logs (e.g., total bytes, internal/external traffic ratio, number of unique destination IPs, port variety). Use a clustering algorithm like DBSCAN or K-Means to group users into behavioral profiles (e.g., 'light external browsing', 'heavy internal application use'). Track user cluster membership over time and flag any user who makes an anomalous transition, such as abruptly moving from a 'light external' cluster to a 'heavy internal' one."
            ]
          },
          {
            "description": "A single web application session token (e.g., cookie, JWT) is concurrently used from multiple distinct IP addresses, or from IP addresses with geolocations that imply impossible physical travel, or with conflicting User-Agent strings.",
            "data_sources": [
              "Zeek http.log",
              "Application-level logs (e.g., WAF logs, reverse proxy logs, application server logs)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic inspection points where web application traffic is visible, such as internet gateways, WAFs, and reverse proxy servers.",
            "action": [
              "From WAF or Zeek http.log, parse and extract session identifiers from HTTP headers (e.g., 'Cookie') or request bodies. For each session ID, maintain a state table of its associated User-Agent and source IP address. Trigger an alert if a request arrives with an existing session ID but a different User-Agent string than the one that established the session.",
              "For every request containing a session token, enrich the source IP with geolocation data. Compare the timestamp and location of the current request with the previous request for that same session token. Calculate the velocity required to travel between the two geolocations in the elapsed time. Alert if this velocity exceeds a physically impossible speed (e.g., 800 mph / 1300 km/h).",
              "For each web application, model user sessions as sequences of events (e.g., URL visited, request type, time delta from last action). Train a Recurrent Neural Network (RNN) or LSTM-based autoencoder on legitimate user session sequences. In real-time, feed ongoing session sequences into the model. Flag sessions with high reconstruction error, as this indicates the sequence of actions is inconsistent with learned legitimate user behavior, potentially due to hijacking."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]