[
  {
    "information_requirement": "Is the adversary executing malicious code using systemd timers?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053.006",
        "name": "Systemd Timers",
        "evidence": [
          {
            "description": "A process with a parent process ID (PPID) of 1, indicating it was spawned by systemd, is executed and its file hash or command-line arguments match a known threat intelligence indicator.",
            "data_sources": [
              "auditd execve syscall logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux servers and workstations, particularly those hosting critical services.",
            "action": [
              "Symbolic: Create a detection rule that triggers when a process event shows a PPID of 1 and the executable's file hash (SHA256) matches a list of known malicious hashes from an integrated threat intelligence feed. Also, scan the command-line arguments for specific strings, IPs, or domains associated with known malware or threat actor campaigns.",
              "Statistical: For all processes spawned by systemd (PPID=1), calculate the population rarity of the executable's file hash across the enterprise over a 30-day baseline. Alert on processes where the hash is observed on fewer than 1% of endpoints, flagging it as an anomalous execution.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) on labeled process execution data (PPID, user context, executable path, command-line arguments, file hash). Use the model to predict the probability of a new systemd-spawned process being malicious. Alert when the probability score exceeds a predefined threshold."
            ]
          },
          {
            "description": "The 'systemd-run' command is executed with command-line arguments containing patterns indicative of remote script fetching and execution, such as using 'curl' or 'wget' piped to a shell, or executing Base64-encoded commands.",
            "data_sources": [
              "auditd execve syscall logs",
              "syslog",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux servers and workstations, Network Egress Points.",
            "action": [
              "Symbolic: Deploy a SIEM rule that uses regular expressions to detect 'systemd-run' executions followed by suspicious command-line patterns, such as 'curl ... | bash', 'wget ... -O - | sh', or 'echo ... | base64 -d | sh'. Alert on any matches.",
              "Statistical: Establish a baseline of normal 'systemd-run' command-line argument patterns and length for each user. Calculate the Jaccard similarity between new commands and the user's historical baseline. Flag commands with a low similarity score or statistically significant deviation in length (e.g., >3 standard deviations from the mean length) as suspicious.",
              "Machine Learning: Use an anomaly detection model on the sequence of command-line arguments for 'systemd-run'. Train an autoencoder on historical benign command lines to learn a compressed representation. Flag new commands with a high reconstruction error, indicating they do not conform to the learned normal patterns."
            ]
          },
          {
            "description": "A process with PPID 1 initiates one or more outbound network connections to a destination IP address or domain that is statistically rare or has not been previously observed in network logs.",
            "data_sources": [
              "auditd execve syscall logs",
              "auditd connect syscall logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS servers, All Linux endpoints.",
            "action": [
              "Symbolic: Correlate process execution events (PPID=1) with network connection logs from Zeek conn.log. Alert if the destination IP address or resolved domain from Zeek dns.log is found on a high-confidence threat intelligence blocklist for C2 servers.",
              "Statistical: For each process spawned by systemd, build a historical baseline of its typical destination IPs. Use frequency analysis to identify connections to destinations in the bottom 5th percentile of popularity across the organization. Also, calculate the entropy of DNS domains requested by these processes and alert on unusually high entropy scores, which can indicate DGA activity.",
              "Machine Learning: Apply time-series analysis (e.g., ARIMA) to the volume and frequency of outbound connections from systemd-spawned processes, using data from Zeek conn.log. Alert on anomalous spikes or changes in periodicity that deviate from the forecasted model, suggesting a newly activated malicious timer."
            ]
          },
          {
            "description": "A process with PPID 1 is executed from a file path that is not on an established allowlist of standard binary locations and is located in a world-writable or temporary directory (e.g., /tmp, /dev/shm, /var/tmp).",
            "data_sources": [
              "auditd execve syscall logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux servers and workstations.",
            "action": [
              "Symbolic: Create a detection rule that triggers when a process execution event has a PPID of 1 and the executable path matches a deny-list of suspicious locations, such as '/tmp/.*', '/var/tmp/.*', '/dev/shm/.*', or '/home/.*'.",
              "Statistical: Build a baseline of all executable paths for processes spawned by systemd. Calculate the frequency of each path. Alert on executions from paths that are statistically rare (e.g., seen for the first time or occurring with a frequency below a 1% threshold). Also calculate the entropy of the executable filename and alert on high-entropy names.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features of systemd-spawned processes (executable path, user, command-line arguments). Identify clusters of normal behavior. Flag any new process that does not belong to an existing cluster (i.e., is identified as an outlier) as anomalous."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using systemd timers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053.006",
        "name": "Systemd Timers",
        "evidence": [
          {
            "description": "A file with a '.timer' or '.service' extension is created or modified in a systemd path, and its contents match known malicious patterns, executable names, or C2 indicators from threat intelligence.",
            "data_sources": [
              "auditd file creation/modification logs",
              "File integrity monitoring logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/, ~/.config/systemd/user/) on all Linux hosts.",
            "action": [
              "Symbolic: Monitor for file write/create events on files ending in '.timer' or '.service' within systemd directories. Upon event, scan the file content for IOCs using YARA rules that match known malicious service definitions, C2 domains, or suspicious commands (e.g., 'ExecStart=/tmp/kdevtmpfsi').",
              "Statistical: Profile the contents of benign '.service' files, calculating statistics on the length of the '[Service]' section and the frequency of different 'ExecStart' paths. Flag new or modified files where the content length is a statistical outlier (e.g., >3 standard deviations from the mean) or that reference an executable path seen for the first time.",
              "Machine Learning: Train a text classification model (e.g., using TF-IDF vectorization and a Naive Bayes classifier) on the content of known benign and malicious systemd unit files. Use the model to classify newly created or modified unit files as either 'benign' or 'malicious'."
            ]
          },
          {
            "description": "A new '.service' file is created in a systemd path, and its 'ExecStart' directive points to an executable located in a high-risk, world-writable, or hidden directory (e.g., '/tmp', '/dev/shm', '/home/user/.local/bin').",
            "data_sources": [
              "auditd file creation logs",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd unit file directories and world-writable directories (/tmp, /dev/shm) on all Linux hosts.",
            "action": [
              "Symbolic: Create a rule that triggers when a '.service' file is created or modified, and a subsequent parsing of the file reveals an 'ExecStart' parameter pointing to an executable path matching a regex for suspicious locations like '^/tmp/.*', '^/dev/shm/.*', or '/\\..*'.",
              "Statistical: Maintain a frequency distribution of parent directories for all 'ExecStart' paths found in '.service' files across the environment. Alert when a new service file specifies an 'ExecStart' path from a parent directory that is in the lowest 5th percentile of frequency.",
              "Machine Learning: Use a graph-based anomaly detection approach. Model systemd units, their 'ExecStart' paths, and the properties of those paths (e.g., writability, location) as a graph. Apply algorithms to find anomalous new nodes or edges, such as a new service node connecting to an executable path node with the 'world-writable' property."
            ]
          },
          {
            "description": "A systemd unit file is written or modified by a process not associated with standard system management or package installation, such as a web server process (e.g., 'nginx', 'apache2') or a user's shell process.",
            "data_sources": [
              "auditd file modification logs",
              "auditd execve syscall logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd unit file directories on all Linux hosts, particularly web servers and multi-user systems.",
            "action": [
              "Symbolic: Create a rule to alert when a file write event occurs in a systemd directory (e.g., /etc/systemd/system/) and the parent process name is on a list of non-standard modifiers (e.g., 'nginx', 'apache2', 'sshd', 'php-fpm').",
              "Statistical: For each host, build a baseline of processes that legitimately modify systemd unit files (e.g., 'yum', 'apt', 'dnf', 'systemctl'). Create a frequency count for each modifying process. Alert when a process not on the baseline, or a process with a historically low frequency, modifies a unit file.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) on the features of legitimate unit file modification events (e.g., parent process name, user context, command line). Use the trained model to identify any new modification events that are outliers from the established norm."
            ]
          },
          {
            "description": "Files with '.timer' or '.service' extensions are created in a user-specific systemd path ('~/.config/systemd/user/') for a user account that is a service account or an interactive user with no history of creating such files.",
            "data_sources": [
              "auditd file creation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories (~/.config/systemd/user/) on all multi-user Linux systems.",
            "action": [
              "Symbolic: Alert on any file creation event within a `~/.config/systemd/user/` directory where the user account's UID is below 1000 (typically reserved for system/service accounts) or matches a specific list of service account names.",
              "Statistical: For each user, maintain a count of their historical user-level systemd unit file creations. Alert when a user creates their first-ever user-level timer or service file. This first-occurrence analysis is highly effective for detecting changes in behavior.",
              "Machine Learning: Use a peer group analysis approach. Cluster users based on their roles and activity profiles (e.g., developers, admins, database service accounts). If a user creates a user-level timer and other members of their peer group do not, flag this as an anomalous deviation from group behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges using systemd timers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053.006",
        "name": "Systemd Timers",
        "evidence": [
          {
            "description": "A '.service' file is created or modified in a privileged systemd path (/etc/systemd/system/, /usr/lib/systemd/system/) and its 'ExecStart' directive contains strings or filenames associated with known Linux privilege escalation tools (e.g., 'LinPEAS', 'pspy').",
            "data_sources": [
              "auditd file creation/modification logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/) on all Linux hosts.",
            "action": [
              "Symbolic: Monitor write events to '.service' files in privileged systemd paths. Upon a write, scan the file's content for an 'ExecStart' line containing keywords from a curated list of privilege escalation tools and exploits (e.g., 'pspy', 'linpeas.sh', 'dirtyc0w').",
              "Statistical: Analyze the 'ExecStart' commands in all root-level service files. Calculate the n-gram frequency of command arguments. Alert on the appearance of low-frequency n-grams that are also associated with shell commands, script interpreters, or suspicious arguments (e.g., '-c', 'bash -c').",
              "Machine Learning: Develop a classifier trained on the text of service files, specifically focused on identifying privilege escalation techniques. The model would learn features from the 'ExecStart' command, the 'User' directive (or lack thereof), and other parameters to predict if the service file is being used for privilege escalation."
            ]
          },
          {
            "description": "A '.service' file is created in '/etc/systemd/system/' or a similar privileged path, it does not contain a 'User=' directive, and its 'ExecStart' directive points to an executable in a world-writable location like '/tmp' or '/dev/shm'.",
            "data_sources": [
              "auditd file creation logs",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged systemd unit directories and world-writable directories on all Linux hosts.",
            "action": [
              "Symbolic: Create a high-fidelity rule that triggers if a new or modified '.service' file in '/etc/systemd/system/' simultaneously meets two conditions: (1) the file content does not contain the string 'User=' and (2) the 'ExecStart' value matches a regex for world-writable paths like '/tmp/.*' or '/dev/shm/.*'.",
              "Statistical: Create a risk score for new service files. Add points if 'User=' is not present (+10), if 'ExecStart' path is in /tmp (+5), if the executable has write permissions for non-root users (+10). Alert if the total score exceeds a threshold.",
              "Machine Learning: Use a decision tree classifier to evaluate new service files. The features would be boolean values: Is 'User=' present? Is 'ExecStart' path in a world-writable directory? Is the executable itself writable by others? The model can learn the simple but powerful logic to flag this specific privilege escalation vector."
            ]
          },
          {
            "description": "A file write or creation event occurs within a privileged systemd directory (e.g., '/etc/systemd/system/') and the effective user ID (euid) of the process performing the write is not 0 (root).",
            "data_sources": [
              "auditd file creation/modification logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged systemd unit directories on all Linux hosts.",
            "action": [
              "Symbolic: Implement a critical-severity SIEM rule that alerts on any file write event in '/etc/systemd/system/' or '/usr/lib/systemd/system/' where the process effective user ID ('euid') is not equal to 0. This is a direct detection of a non-root process creating a root-level service.",
              "Statistical: While the symbolic rule is high-fidelity, maintain statistics on the 'euid' of processes writing to these directories. A non-zero 'euid' would be a zero-frequency event and thus a maximum statistical anomaly. This validates the symbolic alert and can be used in broader risk scoring models.",
              "Machine Learning: Train an anomaly detection model (e.g., Isolation Forest) on process and file event data. Features would include the process 'euid', the target file path, and process name. The model will learn that writes to systemd paths by non-root 'euid's are highly anomalous and isolate them quickly."
            ]
          },
          {
            "description": "A process spawned by systemd with PPID 1 and an effective user ID of 0 (root) subsequently modifies a critical system file such as '/etc/passwd', '/etc/shadow', or '/etc/sudoers'.",
            "data_sources": [
              "auditd execve syscall logs",
              "auditd file modification logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts, focusing on directories containing critical configuration files (e.g., /etc/).",
            "action": [
              "Symbolic: Correlate process execution events (PPID=1, euid=0) with subsequent file write events from the same process ID (PID). Trigger a high-severity alert if the target file path of the write event is on a monitored list of critical files (e.g., /etc/passwd, /etc/shadow, /etc/sudoers, /etc/ssh/sshd_config).",
              "Statistical: For each critical file, establish a baseline of modifying processes. Any modification by a systemd-spawned process (PPID=1) that is not on the established baseline (e.g., not 'useradd', 'passwd', 'visudo') should be flagged as a statistical anomaly.",
              "Machine Learning: Use a sequence analysis model to analyze the chain of actions: timer creation -> service execution -> file modification. Train a model (e.g., a Recurrent Neural Network) on legitimate administrative workflows. Flag sequences that deviate from these learned legitimate sequences, such as a timer-spawned process directly editing /etc/passwd."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]