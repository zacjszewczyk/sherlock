[
  {
    "information_requirement": "Is the adversary executing malicious code using systemd timers?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053.006",
        "name": "Systemd Timers",
        "evidence": [
          {
            "description": "A process is observed with a parent process ID (PPID) of 1, and the process's executable file hash or associated command-line arguments match a known indicator of compromise (IOC).",
            "data_sources": [
              "Linux audit.log (syscall=execve)",
              "Threat Intelligence Platform"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux servers and workstations, particularly those hosting critical services.",
            "action": [
              "Query process execution logs for events where the parent process ID (ppid) is 1. For each event, compare the process executable's SHA256 hash and any command-line arguments (e.g., domains, IPs) against a list of known malicious indicators from a threat intelligence feed. Trigger an alert on any match.",
              "For all processes where ppid is 1, calculate the enterprise-wide prevalence of the executable's SHA256 hash over the last 30 days. Flag any process whose hash is present on less than 1% of endpoints or in the 1st percentile of prevalence as a rare and potentially suspicious execution.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using features from historical process execution data (e.g., ppid, user, executable path, command-line argument structure, and hash). Use the model to score new processes where ppid is 1. Alert when the maliciousness probability score exceeds a dynamically tuned threshold."
            ]
          },
          {
            "description": "The 'systemd-run' utility is executed with command-line arguments that include script interpreters and remote file retrieval commands (e.g., 'curl' or 'wget' piped to 'sh' or 'bash'), or Base64-encoded payloads.",
            "data_sources": [
              "Linux audit.log (syscall=execve)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux endpoints, Network egress gateways, DNS resolvers.",
            "action": [
              "Deploy a SIEM rule using regular expressions to detect 'systemd-run' executions that contain suspicious command-line patterns, such as 'curl .*\\|.*sh', 'wget .*\\|.*bash', or 'base64 -d'. Correlate with Zeek dns.log and conn.log to verify any associated network connections are to untrusted endpoints. Alert on any confirmed match.",
              "For each user, establish a baseline of their historical 'systemd-run' command-line argument patterns and lengths. For new commands, calculate the Levenshtein distance or Jaccard similarity to the user's baseline. Flag commands with a low similarity score or a length that exceeds 3 standard deviations from the user's historical mean as anomalous.",
              "Implement an autoencoder model trained on the tokenized command-line arguments of benign 'systemd-run' executions. Feed new command lines into the model and flag any command with a reconstruction error score in the top 5th percentile, indicating it deviates significantly from learned normal patterns."
            ]
          },
          {
            "description": "A process with a parent process ID (PPID) of 1 initiates an outbound network connection to a destination IP or domain that is statistically rare for the host or environment, or has a poor reputation.",
            "data_sources": [
              "Linux audit.log (syscall=execve, syscall=connect)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress gateways, DNS resolvers, All Linux endpoints.",
            "action": [
              "Correlate process execution logs (ppid=1) with network connection logs (e.g., Zeek conn.log). For any outbound connection, check if the destination IP address or the resolved domain (from Zeek dns.log) is present on a high-confidence C2 server blocklist. Trigger an alert on a match.",
              "For each process spawned by systemd, build a historical baseline of destination IPs and requested DNS domains. Identify connections to destinations that fall in the bottom 5th percentile of frequency across the enterprise. Additionally, calculate the Shannon entropy of the subdomain structure for requested domains and alert on high-entropy scores indicative of DGA.",
              "Apply a time-series forecasting model (e.g., SARIMA) to the volume and byte count of outbound connections from systemd-spawned processes on a per-host basis. Generate an alert if the observed network traffic deviates from the forecasted model by more than a set threshold, suggesting a newly activated or anomalously behaving timer."
            ]
          },
          {
            "description": "A process with a parent process ID (PPID) of 1 executes from a non-standard or world-writable directory, such as '/tmp', '/var/tmp', or '/dev/shm'.",
            "data_sources": [
              "Linux audit.log (syscall=execve)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on all Linux servers and workstations.",
            "action": [
              "Create a detection rule that alerts when a process execution event has a ppid of 1 and the executable's file path matches a deny-list of suspicious locations, using a regex like '^/(tmp|var/tmp|dev/shm)/.*'.",
              "For all systemd-spawned processes (ppid=1), maintain a frequency distribution of executable file paths. Alert on any execution from a path that has never been seen before (first occurrence) or whose frequency is below a 1% threshold. Also, calculate the character entropy of the executable filename and flag names with high entropy.",
              "Use a clustering algorithm (e.g., DBSCAN) to group systemd-spawned processes based on features like executable path, user context, and command-line argument patterns. Identify clusters of normal behavior and flag any new process that is classified as a noise point (i.e., an outlier) as anomalous and worthy of investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using systemd timers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053.006",
        "name": "Systemd Timers",
        "evidence": [
          {
            "description": "A file with a '.timer' or '.service' extension is created or modified in a systemd directory, and its content contains IOCs such as known malicious C2 domains, file paths, or command structures.",
            "data_sources": [
              "Linux audit.log (syscall=open, openat)",
              "File content from host",
              "Threat Intelligence Platform"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/, ~/.config/systemd/user/) on all Linux hosts.",
            "action": [
              "Monitor for file write events on files ending in '.timer' or '.service' in systemd directories. Upon detection, automatically scan the file's content using YARA rules designed to match known malicious service definitions, C2 domains, or suspicious commands (e.g., 'ExecStart=/tmp/kdevtmpfsi'). Alert on any YARA match.",
              "Profile the content of all known-good '.service' files, calculating baseline statistics for the length of the '[Service]' section and the frequency of 'ExecStart' paths. Flag any new or modified file where the content length is a statistical outlier (e.g., > 3 standard deviations from the mean) or that references a new or rare 'ExecStart' path.",
              "Train a text classification model (e.g., Naive Bayes with TF-IDF vectorization) on the full text content of known benign and malicious systemd unit files. Use the trained model to classify all newly created or modified unit files, alerting on any file classified as 'malicious' with a high confidence score."
            ]
          },
          {
            "description": "A new '.service' file is created in a systemd directory, and its 'ExecStart' directive specifies an executable located in a high-risk directory (e.g., '/tmp', '/dev/shm') or a hidden directory.",
            "data_sources": [
              "Linux audit.log (syscall=open, openat)",
              "File content from host"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd unit file directories and world-writable directories (/tmp, /dev/shm, /var/tmp) on all Linux hosts.",
            "action": [
              "Create a rule that triggers when a '.service' file is created/modified. The rule should parse the file to extract the 'ExecStart' parameter and alert if its value matches a regular expression for suspicious paths, such as '^/(tmp|dev/shm|var/tmp)/.*' or '/\\..*'.",
              "Maintain a frequency distribution of the parent directories for all 'ExecStart' paths found in '.service' files across the environment. Alert when a new service file specifies an 'ExecStart' path from a parent directory that is statistically rare (e.g., in the lowest 5th percentile of frequency).",
              "Model systemd units, 'ExecStart' paths, and file system properties (e.g., writability, location) as a graph. Use a graph-based anomaly detection algorithm to find anomalous new structures, such as a new service node creating an edge to an executable path node that has the 'world-writable' property."
            ]
          },
          {
            "description": "A systemd unit file is written or modified by an unexpected process, such as a web server daemon ('httpd', 'nginx') or a user's interactive shell, rather than a standard package manager ('yum', 'apt') or administrative command.",
            "data_sources": [
              "Linux audit.log (syscall=open, openat, execve)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd unit file directories on all Linux hosts, especially web servers and multi-user systems.",
            "action": [
              "Create a rule to alert when a file write event occurs in a systemd directory (e.g., /etc/systemd/system/) and the parent process name is on a deny-list of non-standard modifiers (e.g., 'nginx', 'apache2', 'httpd', 'sshd', 'php-fpm').",
              "For each host, build an allow-list baseline of processes that legitimately modify systemd unit files (e.g., 'yum', 'apt', 'dnf', 'systemctl'). Maintain a frequency count for each modifying process. Alert when a process not on the baseline, or a process with a historically low modification frequency, modifies a unit file.",
              "Train a one-class SVM (Support Vector Machine) on the features of legitimate unit file modification events (e.g., parent process name, user context, command line). Use the trained model to identify any new modification events that are classified as outliers from the established norm."
            ]
          },
          {
            "description": "A systemd timer or service file is created in a user's home directory ('~/.config/systemd/user/') for an account that is a service account or has no history of such activity.",
            "data_sources": [
              "Linux audit.log (syscall=open, openat)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories, specifically `~/.config/systemd/user/` paths, on all multi-user Linux systems.",
            "action": [
              "Alert on any file creation event within a `~/.config/systemd/user/` directory where the user account's UID is below 1000 (typically reserved for system/service accounts) or the account name matches a specific list of known service accounts.",
              "For each interactive user, track the creation of user-level systemd unit files. Alert on the first-ever creation of a timer or service file by a user. This first-occurrence analysis flags a significant change in user behavior.",
              "Use a peer group analysis model. Cluster users based on their roles and activity profiles (e.g., developers, administrators, service accounts). If a user creates a user-level timer and other members of their cluster group do not exhibit this behavior, flag this action as an anomalous deviation from group norms."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges using systemd timers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053.006",
        "name": "Systemd Timers",
        "evidence": [
          {
            "description": "A '.service' file is created or modified in a privileged systemd path, and its 'ExecStart' directive contains filenames or commands associated with known privilege escalation tools or scripts (e.g., 'LinPEAS', 'pspy', 'dirtyc0w').",
            "data_sources": [
              "Linux audit.log (syscall=open, openat)",
              "File content from host",
              "Threat Intelligence Platform"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/) on all Linux hosts.",
            "action": [
              "Monitor write events to '.service' files in privileged systemd paths. Upon a write, scan the file's content for an 'ExecStart' line containing keywords from a curated list of privilege escalation tools and exploits (e.g., 'pspy', 'linpeas.sh', 'dirtyc0w'). Alert on a match.",
              "Analyze the 'ExecStart' commands in all root-level service files. Calculate the n-gram frequency of command tokens and arguments. Alert on the appearance of low-frequency n-grams that are also associated with shell interpreters or suspicious arguments (e.g., 'bash -c', 'python -c', '-i').",
              "Develop a text classifier trained specifically on the content of service files used in privilege escalation. The model's features should include the 'ExecStart' command, the presence/absence of the 'User' directive, and other parameters to predict if the service file is being abused for privilege escalation."
            ]
          },
          {
            "description": "A '.service' file is created in a privileged systemd path (e.g., '/etc/systemd/system/'), lacks a 'User=' directive (defaulting to root), and its 'ExecStart' directive points to an executable in a world-writable location.",
            "data_sources": [
              "Linux audit.log (syscall=open, openat)",
              "File content from host"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged systemd unit directories and world-writable directories (/tmp, /dev/shm) on all Linux hosts.",
            "action": [
              "Create a high-fidelity rule that triggers if a new or modified '.service' file in '/etc/systemd/system/' meets three conditions: (1) the file content does not contain the string 'User=', (2) the 'ExecStart' value points to a world-writable path like '/tmp/.*' or '/dev/shm/.*', and (3) the executable file itself has write permissions for non-root users. Alert on match.",
              "Implement a risk scoring system for new privileged service files. Assign points for risky attributes: 'User=' directive is absent (+10), 'ExecStart' path is in /tmp or /dev/shm (+5), the executable file is world-writable (+10). Alert if the cumulative score exceeds a defined threshold (e.g., 20).",
              "Use a decision tree classifier to evaluate new service files. Use boolean features: Is 'User=' present? Is 'ExecStart' path world-writable? Is the executable file world-writable? Train the model to learn the logical path for this specific privilege escalation vector and alert when it is met."
            ]
          },
          {
            "description": "A file write event occurs in a privileged systemd directory (e.g., '/etc/systemd/system/'), and the writing process has an effective user ID (euid) other than 0 (root), indicating a non-root user is creating a root-level service.",
            "data_sources": [
              "Linux audit.log (syscall=open, openat)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/) on all Linux hosts.",
            "action": [
              "Implement a critical-severity SIEM rule that alerts on any file write or create event in '/etc/systemd/system/' or '/usr/lib/systemd/system/' where the associated process effective user ID ('euid') is not 0. This is a direct indicator of a non-root process creating or modifying a privileged service.",
              "Maintain statistics on the 'euid' of all processes that write to privileged systemd directories. A write event from a non-zero 'euid' should be treated as a zero-frequency event and thus a maximum statistical anomaly, validating the symbolic alert and contributing to host risk scores.",
              "Train an anomaly detection model (e.g., Isolation Forest) on process and file event features, including process 'euid', target file path, and parent process name. The model will learn that writes to privileged systemd paths by non-root users are highly anomalous and isolate these events for immediate alerting."
            ]
          },
          {
            "description": "A process spawned by systemd (PPID 1) with root privileges (euid 0) subsequently modifies a critical system configuration file, such as '/etc/passwd', '/etc/shadow', or a file in '/etc/sudoers.d/'.",
            "data_sources": [
              "Linux audit.log (syscall=execve, syscall=open, openat)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts, focusing on directories containing critical authentication and configuration files (e.g., /etc/, /etc/sudoers.d/).",
            "action": [
              "Correlate process execution logs (ppid=1, euid=0) with subsequent file modification logs from the same process ID (pid). Trigger a high-severity alert if the target of the file write event is on a monitored list of critical files, including '/etc/passwd', '/etc/shadow', '/etc/sudoers', and any file within '/etc/sudoers.d/'.",
              "For each critical system file, establish a baseline of legitimate modifying processes (e.g., 'useradd', 'passwd', 'visudo'). Any modification by a systemd-spawned process (ppid=1) that is not on this established baseline should be flagged as a high-confidence statistical anomaly.",
              "Use a sequence analysis model (e.g., a Recurrent Neural Network or Hidden Markov Model) to analyze chains of events: timer creation -> service execution -> file modification. Train the model on legitimate administrative workflows. Flag any sequence that deviates from these learned legitimate patterns, such as a timer-spawned process directly editing /etc/passwd."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]