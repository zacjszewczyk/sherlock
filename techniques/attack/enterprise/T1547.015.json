[
  {
    "information_requirement": "Is the adversary maintaining persistence on macOS hosts using Login Items?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.015",
        "name": "Login Items",
        "evidence": [
          {
            "description": "File modification or creation event for `~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` or a process execution event for `osascript` with command-line arguments containing 'make login item at end with properties' where the target path is an unusual location such as `/tmp`, `~/Downloads`, or `/Users/Shared`.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) file modification events",
              "macOS ESF process execution events",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.",
            "action": [
              "Create a detection rule to trigger on any process execution of `osascript` where the command line contains the strings 'System Events' AND 'make login item'. Correlate the target path specified in the script with a threat intelligence feed of known malicious file paths or hashes.",
              "For each user, baseline the frequency of modifications to the `backgrounditems.btm` file. Alert when the modification count for a user in a 24-hour period exceeds the 95th percentile of their historical activity. Additionally, calculate the enterprise-wide prevalence of the executable path being added as a login item; flag paths with a prevalence of less than 5 hosts as suspicious.",
              "Train a Random Forest classifier to distinguish between benign and malicious login item additions. Use features such as the parent process of `osascript` (e.g., `Terminal.app` vs. a legitimate installer), the target executable's path entropy, its code signing status, and whether the executable has been seen before in the environment. Classify each new login item creation event in real-time."
            ]
          },
          {
            "description": "An API call to `SMLoginItemSetEnabled` is observed, originating from a process that is unsigned, has a low-prevalence hash across the enterprise, or is not a known software installer. The corresponding helper tool is created in a location like `Contents/Library/LoginItems` within the application bundle.",
            "data_sources": [
              "macOS ESF API monitoring events",
              "macOS ESF file creation events",
              "macOS ESF process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.",
            "action": [
              "Alert on any API call to `SMLoginItemSetEnabled(..., true)` originating from a process that is not signed by a trusted developer certificate or whose hash is present on a known-bad IOC list.",
              "Build a profile of legitimate parent processes (e.g., `installer`, `App Store`) that call `SMLoginItemSetEnabled`. Alert when this API is called by an anomalous parent process (e.g., `bash`, `python`, a Microsoft Office application). Calculate the Shannon entropy of the helper tool's path; a high entropy score may indicate a randomly generated name used for evasion.",
              "Use a clustering algorithm (e.g., DBSCAN) on the features of processes that register login items. Features should include code signing information, parent process name, process path, and command-line arguments. Identify and investigate clusters of outliers that do not group with known legitimate installers."
            ]
          },
          {
            "description": "A process whose parent is `launchd` (PID 1) and is spawned shortly after a user login event initiates network connections to a destination IP/domain with a low reputation score, a rare port, or exhibits a data transfer volume inconsistent with its baseline.",
            "data_sources": [
              "macOS ESF process execution events",
              "macOS login events (Unified Log)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints for process and login data, and network egress points (e.g., firewalls, network taps) for Zeek log collection.",
            "action": [
              "For processes launched within 5 minutes of a user login event, correlate the process's network connections with Zeek conn.log. Alert if the destination IP address or domain name (resolved from Zeek dns.log) matches an active C2 server from a threat intelligence feed.",
              "For each known login item process, establish a baseline of its network behavior (e.g., average bytes sent/received, common destination ports, daily connection count). Alert when any metric deviates by more than 3 standard deviations from its 30-day moving average. Also, flag any DNS query from these processes for domains registered within the last 30 days.",
              "Apply a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to the outbound network traffic volume (bytes_out) for each process launched at login. The model will learn the daily/weekly seasonality of normal behavior and flag significant, unexplainable spikes in traffic as potential malicious activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary using Login Items on macOS to escalate privileges?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.015",
        "name": "Login Items",
        "evidence": [
          {
            "description": "A process launched via a Login Item executes `osascript` or calls the `AuthorizationExecuteWithPrivileges` API, which results in a password prompt dialog box being displayed to the user. The prompting application is unsigned, has a typosquatted name (e.g., 'Sytem Preferences'), or is not a known system utility.",
            "data_sources": [
              "macOS ESF process execution events",
              "macOS ESF API monitoring events",
              "macOS Unified Log for authorization events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.",
            "action": [
              "Create a rule that alerts whenever a process, whose ancestry traces back to a login item, executes `osascript` with the phrase 'with administrator privileges'. This is a high-fidelity indicator of a scripted privilege escalation attempt.",
              "Maintain a list of legitimate applications that are allowed to prompt for credentials. Calculate the Levenshtein distance between the name of any new prompting application and the names on the legitimate list. Alert on a small distance (e.g., <=2), which suggests typosquatting. Also, flag any application that prompts for credentials for the first time in the environment.",
              "Train a supervised classification model (e.g., XGBoost) to differentiate between legitimate and malicious credential prompts. Features should include: the parent process name, the path of the prompting executable, its code signing status, the text of the prompt window (if available), and whether the process has active network connections. Use the model to score and alert on suspicious prompts."
            ]
          },
          {
            "description": "A file creation event is detected in a system-wide persistence directory (e.g., `/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) where the acting process is running with a standard user's UID (not UID 0) and is not a known, authorized software installer.",
            "data_sources": [
              "macOS ESF file creation events",
              "macOS ESF process execution events with user context"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.",
            "action": [
              "Generate a high-severity alert for any file write/create event in `/Library/LaunchDaemons` or `/Library/StartupItems` where the process's effective user ID (EUID) is not 0 (root) and the process name is not `system_installd`, `installer`, or another whitelisted software deployment agent.",
              "Establish a baseline of all processes and user accounts that have ever written to system-level persistence locations (`/Library/...`). Alert on any write operation from a process or user account not present in this historical baseline. This represents a 'first-time' access event and is highly suspicious.",
              "Use a one-class SVM (Support Vector Machine) to model legitimate write behavior to system persistence locations. Train the model on features from known-good installation events (e.g., process name, parent process, user context, file path written). Any new write event that the model classifies as an outlier should be flagged for immediate investigation as a potential unauthorized privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]