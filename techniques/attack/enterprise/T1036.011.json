[
  {
    "information_requirement": "Is an adversary evading defenses by overwriting in-memory process arguments to masquerade as a legitimate process?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.011",
        "name": "Overwrite Process Arguments",
        "evidence": [
          {
            "description": "A process is executed from a binary whose file hash matches a known indicator of compromise (IOC) for malware capable of in-memory process argument overwriting.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs (type=EXECVE)",
              "EDR Process Creation Telemetry"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.",
            "action": [
              "Symbolic: Query SIEM for process creation events (e.g., Sysmon for Linux Event ID 1) and join the `process.hash` field against a threat intelligence feed of known malicious file hashes associated with argument-spoofing malware like BPFDoor or XorDdos. Generate a high-severity alert upon a match.",
              "Statistical: For all executed binaries, calculate the prevalence of their file hashes across the environment over the last 30 days. Flag hashes that are extremely rare (e.g., seen on < 0.1% of endpoints or only once) and are also not signed by a trusted publisher. Correlate these rare executions with other suspicious activity like network beaconing or file modification in sensitive directories.",
              "Machine Learning: Develop a supervised machine learning classifier (e.g., a Gradient Boosting or Random Forest model) trained on features from process creation events, including binary hash prevalence, parent process name, user context, and command-line length. Train the model using labeled data from past incidents and known-good binaries. Use the model to score new process executions for their likelihood of being malicious."
            ]
          },
          {
            "description": "A mismatch exists between the initial command-line arguments recorded at process creation (e.g., via Sysmon Event ID 1) and the arguments retrieved from `/proc/[pid]/cmdline` at a later point in the process lifecycle.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs (type=EXECVE)",
              "osquery process table snapshots",
              "EDR agent telemetry"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.",
            "action": [
              "Symbolic: Deploy a detection rule via an EDR or osquery agent that, upon a new process creation event, records the initial command line. The rule will then poll `/proc/[pid]/cmdline` for that PID after a short delay (e.g., 1-2 seconds) and trigger an alert if the initial and current command lines do not match exactly.",
              "Statistical: Analyze the time delta between process creation and the observed argument modification. Calculate the distribution of these deltas across all observed modification events. A tight clustering of deltas (e.g., 95% of modifications occur between 500ms and 1500ms post-creation) can establish a high-confidence behavioral profile for this technique, helping to distinguish it from benign in-memory modifications that might occur at different lifecycle stages.",
              "Machine Learning: Use an anomaly detection model (e.g., a Recurrent Neural Network) on sequences of system calls made by a process immediately following creation. Train the model on legitimate process startup behavior. A sequence containing system calls associated with memory modification (e.g., `prctl` with `PR_SET_NAME`) that deviates from the learned benign sequences would be flagged as a high-scoring anomaly."
            ]
          },
          {
            "description": "A process, identified by a common benign name (e.g., `sshd`, `cron`, `[kworker]`), initiates network connections that are anomalous for that process type, such as connecting to a known-malicious IP, a geographically rare external IP, or using a non-standard port.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Sysmon for Linux Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log",
              "Linux Auditd logs (type=SYSCALL, syscall=connect)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., internet gateway), DNS resolvers, and critical Linux servers.",
            "action": [
              "Symbolic: Create a correlation rule in the SIEM that joins process creation events (from Sysmon Event ID 1) with network connection events (from Zeek conn.log or Sysmon Event ID 3) by host and timestamp. Alert if a process with a name from a watchlist of commonly spoofed processes (e.g., `rsyslogd`, `systemd-journald`, `[kworker]`) connects to an IP address on a C2 blocklist.",
              "Statistical: For each common process name, build a statistical baseline of its network behavior, including: 1) the set of destination ports it typically communicates on, 2) the geographic distribution of destination IPs, and 3) the entropy of its connection destinations ($$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$). Flag any process instance whose behavior deviates significantly from the baseline, such as connecting to a port outside the 99th percentile of common ports or to a country seen in <1% of connections for that process type.",
              "Machine Learning: Implement a time-series analysis model (e.g., ARIMA or LSTM) on network traffic volume (bytes_out) and connection frequency, aggregated per process name per host. An adversary using a spoofed process for C2 will likely create a periodic beaconing pattern. The model can detect these anomalous periodicities that differ from the established baseline for legitimate system processes."
            ]
          },
          {
            "description": "A process with a common, benign-appearing name (e.g., `[kworker]`, `sshd`) is observed with an anomalous parent process (e.g., a web server shell instead of `kthreadd`) or is running from a non-standard file path (e.g., `/tmp/sshd` instead of `/usr/sbin/sshd`).",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs (type=EXECVE)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.",
            "action": [
              "Symbolic: Define a set of rules specifying the legitimate parent process and executable path for critical system processes. For example, `(process_name='[kworker]' AND parent_process_name!='kthreadd')` or `(process_name='sshd' AND process_path NOT IN ('/usr/sbin/sshd'))`. Trigger a high-severity alert on any violation of these rules.",
              "Statistical: For the entire environment, calculate the frequency of all parent-child process relationships (e.g., `(parent='bash', child='sshd')`). Identify relationships that are statistically rare (e.g., occurring less than 5 times in the last 30 days across all systems). Present these rare parent-child pairs to analysts for review, as they often indicate suspicious activity.",
              "Machine Learning: Use a graph-based anomaly detection algorithm. Model process lineage as a directed graph where nodes are processes and edges represent parent-child relationships. Train the model on legitimate process-lineage graphs from baseline system activity. Apply the model to new process creation events to identify subgraphs that have anomalous structures (e.g., unusual chains of execution, unexpected parentage) not seen in the training data."
            ]
          },
          {
            "description": "A running process's command line, as reported by `/proc/[pid]/cmdline`, is unusually short, empty, or consists of null bytes, which is inconsistent with its expected launch parameters and may indicate argument erasure.",
            "data_sources": [
              "osquery process table snapshots",
              "EDR agent telemetry"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.",
            "action": [
              "Symbolic: Create a rule that periodically queries process tables (e.g., via osquery's `processes` table) and alerts if the `cmdline` field is empty for any running process, excluding a pre-defined list of known exceptions like certain kernel threads.",
              "Statistical: For each distinct process name, establish a baseline for its typical command-line length. Calculate the 1st percentile for length over a 30-day period. Flag any running process instance where the `cmdline` length falls below this low-water mark, indicating potential argument truncation or erasure.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features of running processes, including `cmdline` length, process name, and user context. Identify clusters of processes with abnormally short or empty `cmdline` values that separate from the main clusters of legitimate processes and flag them as outliers for investigation."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]