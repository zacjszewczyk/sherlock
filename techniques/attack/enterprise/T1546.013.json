[
  {
    "information_requirement": "Is the adversary maintaining persistence using PowerShell profiles?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.013",
        "name": "PowerShell Profile",
        "evidence": [
          {
            "description": "A PowerShell profile script's file hash matches a known-bad hash from threat intelligence, or its script block content contains strings, commands, or functions associated with known malware or hacking tools (e.g., 'Invoke-Mimikatz').",
            "data_sources": [
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "File monitoring logs for file hashes",
              "Windows Event ID 4688 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Servers, Domain Controllers",
            "action": "1. Symbolic Logic: Ingest a threat intelligence feed of malicious file hashes and PowerShell command patterns. Continuously scan file creation/modification events for PowerShell profile paths (`profile.ps1`, `Microsoft.*_profile.ps1`) and compare file hashes. Concurrently, scan PowerShell Script Block logs (Event ID 4104) for content matching the malicious command patterns using regular expressions or YARA rules. 2. Statistical Analysis: Calculate the Shannon entropy of script blocks executed from profiles. Establish a baseline entropy score for legitimate profile scripts in the environment (e.g., mean and standard deviation). Flag any script block whose entropy exceeds the 95th percentile or 3 standard deviations above the mean of the baseline, as this indicates potential obfuscation or encryption. 3. Machine Learning: Train a supervised classification model (e.g., a Gradient Boosting Classifier) on a labeled dataset of benign and malicious PowerShell scripts. Extract features from script blocks such as character frequency, function call counts, presence of keywords (e.g., 'DownloadString', 'FromBase64String', 'IEX'), and entropy. Deploy the model to score new script blocks from profiles in near real-time, alerting on those classified as malicious with high confidence."
          },
          {
            "description": "A PowerShell profile script contains structural patterns commonly used for persistence, such as encoded commands, network-based download cradles (e.g., IEX(New-Object Net.WebClient).DownloadString), or API calls for creating scheduled tasks or WMI events.",
            "data_sources": [
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4698 (Scheduled Task Created)",
              "Windows Event ID 5861 (WMI Event Filter activity)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Servers, Domain Controllers",
            "action": "1. Symbolic Logic: Use regular expressions to search PowerShell Script Block logs (Event ID 4104) for common persistence patterns, including Base64 encoding (`[Convert]::FromBase64String`), download cradles (`Net.WebClient`, `Invoke-WebRequest`), and direct calls to `Register-ScheduledTask` or `Register-WmiEvent`. Create a correlation rule that links a profile script execution to the immediate creation of a scheduled task (Event ID 4698) or WMI event subscription (Event ID 5861) by the same process. 2. Statistical Analysis: Profile the frequency of specific sensitive cmdlets (e.g., `IEX`, `Invoke-Expression`, `Register-*`) appearing in profile scripts. Establish a baseline frequency for user groups. An alert is generated if the count of such cmdlets in a single profile script exceeds two standard deviations from the established group baseline. 3. Machine Learning: Use a Natural Language Processing (NLP) approach. Tokenize PowerShell script blocks and use a model like TF-IDF to create feature vectors. Train an anomaly detection model (e.g., One-Class SVM) on vectors from known-good profile scripts to identify new profile scripts that are structurally and semantically dissimilar to the established benign corpus."
          },
          {
            "description": "A PowerShell profile file (e.g., profile.ps1) is created or modified by an anomalous process or user, or at a frequency inconsistent with established baselines for administrative activity.",
            "data_sources": [
              "Windows Event ID 4663 (Object Access)",
              "Windows Event ID 4688 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Servers, Domain Controllers, File Servers",
            "action": "1. Symbolic Logic: Create a rule that alerts when a PowerShell profile file is modified (Event ID 4663, with write access) by a process other than `powershell.exe`, `powershell_ise.exe`, `code.exe`, or other approved editors. Further refine by flagging modifications made by non-interactive processes or processes originating from office applications (e.g., `winword.exe`, `outlook.exe`). 2. Statistical Analysis: For each host and user, establish a baseline for the frequency of PowerShell profile modifications. Calculate the mean and standard deviation of modification events over a 30-day rolling window. Generate an alert if the number of modifications in a 24-hour period exceeds the mean plus three standard deviations. 3. Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA) to forecast the expected number of profile modifications per day across the enterprise or per critical server group. An alert is triggered when the actual count significantly deviates from the forecasted value and its confidence interval, indicating an unusual burst of activity."
          },
          {
            "description": "A powershell.exe process, launched without the '-NoProfile' argument, initiates an outbound network connection to a rare or suspicious destination, or transfers an anomalous amount of data, shortly after user logon or shell startup.",
            "data_sources": [
              "Windows Event ID 5156 (Filtering Platform Connection)",
              "Zeek conn.log",
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, User Workstations, Administrative Servers, DNS Servers",
            "action": "1. Symbolic Logic: Correlate process creation events for `powershell.exe` (Event ID 4688, where command line does not contain `-NoProfile`) with subsequent network connection logs (Zeek conn.log). Join on IP and timestamp. Alert if the destination IP or resolved domain (from Zeek dns.log) is present on a threat intelligence blocklist. 2. Statistical Analysis: For each user, build a baseline of normal PowerShell network behavior, including a list of common destination domains and typical data transfer sizes (from `orig_bytes` and `resp_bytes` in conn.log). Flag connections to domains with a low prevalence score (e.g., seen by <1% of users). Also, alert if the data transferred in a single session exceeds the 99th percentile of that user's historical baseline. 3. Machine Learning: Develop a clustering model (e.g., DBSCAN) on features from Zeek conn.log for PowerShell-initiated connections (e.g., destination port, protocol, data volume). Identify clusters of normal behavior. A new connection that does not fall into any existing cluster is flagged as an outlier for investigation as a potential C2 channel established by a profile script."
          },
          {
            "description": "A PowerShell session, initiated without the '-NoProfile' switch, loads a module from a non-standard file path, a module with a high-entropy name, or executes a script block with characteristics of obfuscation.",
            "data_sources": [
              "Windows Event ID 4103 (PowerShell Module Logging)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4688 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Servers, Domain Controllers",
            "action": "1. Symbolic Logic: Create an allow-list of standard PowerShell module paths (e.g., `%WINDIR%\\System32\\WindowsPowerShell\\v1.0\\Modules`). Monitor Module Logging (Event ID 4103) and alert whenever a module is loaded from a path not on this list, such as a user's temporary directory (`%TEMP%`). 2. Statistical Analysis: Calculate the Shannon entropy for all script blocks in Event ID 4104 and module names in Event ID 4103. Establish a baseline for entropy in your environment. Alert on any script block or module name whose entropy score is anomalously high (e.g., > 4.5 for ASCII). Additionally, perform frequency analysis on loaded module names per user/host and alert on the first-time observation of a module. 3. Machine Learning: Train a classification model to distinguish between benign and obfuscated PowerShell code. Use features like character distribution, n-gram frequency, entropy, and the ratio of special characters to alphanumeric characters. Deploy this model to score script blocks from Event ID 4104 that are associated with profile loading, flagging those classified as obfuscated."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using PowerShell profiles?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.013",
        "name": "PowerShell Profile",
        "evidence": [
          {
            "description": "A PowerShell profile script, executed within a high-privilege session (e.g., as SYSTEM or Administrator), contains known privilege escalation code, such as specific functions from PowerSploit's PowerUp module or direct Windows API calls for token manipulation.",
            "data_sources": [
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4624 (Logon)",
              "Windows Event ID 4688 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Administrative Servers, Privileged Access Workstations",
            "action": "1. Symbolic Logic: Correlate PowerShell process creation (Event ID 4688) with logon sessions (Event ID 4624) to identify `powershell.exe` instances running as high-privilege users (e.g., SID S-1-5-18 for SYSTEM). For these processes, scan associated script block logs (Event ID 4104) for signatures of known privilege escalation tools (e.g., 'Invoke-AllChecks', 'Get-System') using YARA or regex rules. 2. Statistical Analysis: Build a vocabulary of all functions and cmdlets used in high-privilege profile scripts. Use TF-IDF (Term Frequency-Inverse Document Frequency) to identify commands that are rare across the general population of scripts but appear in a specific privileged profile. A high TF-IDF score for a sensitive command (e.g., 'Add-Type -TypeDefinition') in a privileged context is a strong indicator. 3. Machine Learning: Create a feature set for privileged script blocks, including presence of reflection APIs (`[System.Reflection.Assembly]::Load`) and P/Invoke signatures (`Add-Type`). Train a logistic regression model to predict the likelihood of a script being part of a privilege escalation attempt. Alert when the model's output probability for a script in a privileged profile exceeds a defined threshold (e.g., 0.85)."
          },
          {
            "description": "A high-privilege PowerShell profile script executes a sequence of commands indicative of privilege escalation, such as reflectively loading a DLL, creating a new service with elevated rights, or accessing the LSASS process.",
            "data_sources": [
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 7045 (New Service Created)",
              "Sysmon Event ID 10 (ProcessAccess)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Administrative Servers, Privileged Access Workstations",
            "action": "1. Symbolic Logic: Create a multi-event correlation rule. Trigger an alert if a `powershell.exe` process running as a high-privilege user (1) executes a script block containing `[System.Reflection.Assembly]::Load` (Event ID 4104), followed by (2) the creation of a new service (Event ID 7045) or (3) a process access event targeting `lsass.exe` (Sysmon Event ID 10). 2. Statistical Analysis: Model normal sequences of commands in privileged profile scripts using Markov chains. Calculate the transition probabilities between commands based on benign administrative scripts. Flag any sequence of commands that has a very low probability under the established model, indicating a novel or unexpected workflow. 3. Machine Learning: Use a sequence-aware model like a Recurrent Neural Network (RNN), trained on sequences of commands from known-benign and known-malicious PowerShell scripts. Feed command sequences from privileged profile executions into the model to classify the entire sequence as benign or malicious."
          },
          {
            "description": "A PowerShell process executed from a high-privilege account's profile is immediately followed by the creation of a new user account, modification of a security group, or creation of a new scheduled task with SYSTEM privileges.",
            "data_sources": [
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 4624 (Logon)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4720 (User Created)",
              "Windows Event ID 4698 (Scheduled Task Created)",
              "Windows Event ID 4732 (Member added to security-enabled local group)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Administrative Servers, Privileged Access Workstations",
            "action": "1. Symbolic Logic: Create a correlation rule that triggers when a `powershell.exe` process (Event ID 4688) running under a privileged account (from Event ID 4624 context) and associated with a profile script (from Event ID 4104) is followed within a 60-second window by a sensitive event like User Creation (4720) or adding a member to an administrative group (4732). 2. Statistical Analysis: For each administrative account, baseline the types and frequency of sensitive follow-on actions that normally occur after a profile script execution. Use a chi-squared test to compare the observed distribution of follow-on actions for a given session against the historical distribution. A significant p-value indicates a deviation from normal behavior. 3. Machine Learning: Model the relationship between profile script characteristics and subsequent system changes as a multi-label classification problem. Features would include script entropy and keywords. Labels would be the types of sensitive events that occur (e.g., `User_Created`). An alert is generated if the model predicts a sensitive action that is not part of the account's established automation baseline."
          },
          {
            "description": "A PowerShell process, spawned from a high-privilege profile, accesses or modifies security-critical registry keys (e.g., LSA, Winlogon, UAC settings) or attempts to write to another user's profile script.",
            "data_sources": [
              "Windows Event ID 4663 (Object Access)",
              "Windows Event ID 4657 (Registry Value Modified)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4688 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Administrative Servers, Endpoints with local admin accounts",
            "action": "1. Symbolic Logic: Create an alert that triggers when a `powershell.exe` process, running with high privileges and tied to a profile execution, generates a registry modification event (Event ID 4657) for keys under `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa` or `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`. 2. Statistical Analysis: Profile the set of files and registry keys normally accessed by privileged profile scripts. Create a baseline of 'normal resource access sets' for each administrative role. For a new execution, calculate the Jaccard similarity between its accessed resource set and the baseline set. A low similarity score indicates anomalous access to unusual resources. 3. Machine Learning: Use an anomaly detection model like Isolation Forest trained on features representing resource access patterns (e.g., a multi-hot encoded vector of registry hives and file paths accessed). The model learns to isolate anomalous access patterns that differ significantly from the dense clusters of normal administrative activity."
          },
          {
            "description": "A PowerShell profile file affecting a high-privilege account (e.g., AllUsersProfile, Administrator's profile) is modified by a lower-privileged user or a non-standard process, followed by that high-privilege account executing PowerShell.",
            "data_sources": [
              "Windows Event ID 4663 (Object Access)",
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 4624 (Logon)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Administrative Servers, File Servers hosting roaming profiles",
            "action": "1. Symbolic Logic: Create a two-stage rule. Stage 1: Alert when a file write event (Event ID 4663) occurs on a privileged profile path (e.g., `C:\\Users\\Administrator\\Documents\\PowerShell\\profile.ps1`) where the user context of the writing process (from Event ID 4688) is NOT an administrator. Stage 2: If Stage 1 fires, monitor for a subsequent logon (Event ID 4624) by the privileged user, followed by a `powershell.exe` execution, and escalate the alert. 2. Statistical Analysis: Analyze the parent-child process relationships for processes that modify privileged profiles. Create a baseline of legitimate parent processes (e.g., `explorer.exe`). Calculate the frequency of each parent process. Alert if a low-frequency or first-seen parent process (e.g., `winword.exe`) modifies a privileged profile. 3. Machine Learning: Model the attack chain as a graph where nodes are users, processes, and files. Train a graph-based anomaly detection model (e.g., GraphSAGE) on graphs of normal activity. A sequence where a low-privilege user's process writes to a privileged profile, which is then executed by a high-privilege user, would form an anomalous subgraph structure that the model would flag."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]