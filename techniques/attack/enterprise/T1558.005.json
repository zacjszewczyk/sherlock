[
  {
    "information_requirement": "Is an adversary stealing or misusing Kerberos ccache files to facilitate credential access?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1558.005",
        "name": "Ccache Files",
        "evidence": [
          {
            "description": "A logon session (Windows Event ID 4624, Logon Type 9) is initiated by a process known to be associated with credential theft tools or by a process not typically associated with creating new logon sessions.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged access workstations, member servers, domain controllers, Tier 0 assets",
            "action": [
              "1. Symbolic Logic: Monitor for Windows Event ID 4688 (Process Creation) where the process name or original filename matches a watchlist of known credential access tools (e.g., `kekeo.exe`, `Rubeus.exe`, `mimikatz.exe`). Correlate the `ProcessGuid` from the 4688 event with the `TargetLogonId` in a subsequent Windows Event ID 4624 (Logon) event where `LogonType` is 9 (NewCredentials). Generate a high-severity alert upon this correlation.",
              "2. Statistical Method: Ingest Windows Event ID 4624 logs where `LogonType` is 9. For each event, identify the parent process that initiated the logon. Maintain a historical frequency table of parent process names that trigger Logon Type 9 events across the enterprise. Flag any event where the parent process falls into the bottom 1st percentile of rarity (e.g., `cscript.exe`, a custom script, or a non-standard administrative tool) as suspicious for investigation.",
              "3. Machine Learning Application: Develop a supervised classification model (e.g., Random Forest, Gradient Boosting) using features extracted from correlated Windows Event ID 4688 and 4624 events. Engineer features such as process name, parent process name, command-line argument count and entropy, user account context, logon type, and source workstation. Train the model on labeled data, where known-benign activity (e.g., `runas.exe /netonly`) is one class and known-malicious or simulated attacks are the other. Deploy the model to score new correlated events in real-time, alerting on those classified as suspicious with high confidence."
            ]
          },
          {
            "description": "A process is executed with command-line arguments containing keywords, file paths, or encoded strings indicative of Kerberos ccache file interaction, ticket conversion, or pass-the-ticket usage.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux/macOS systems with command-line logging, Windows systems used for ticket conversion, domain controllers",
            "action": [
              "1. Symbolic Logic: From process creation logs (Windows Event ID 4688), create a detection rule that uses regular expressions to search the `CommandLine` field for patterns associated with ticket manipulation. Include patterns like `ptt /ticket:`, `tgs::ask`, `tgt::ask`, `klist -c`, `convert /ccache`, and base64-encoded ticket blobs (`[a-zA-Z0-9+/=]{100,}`). Generate an alert on any match, especially if the parent process is a non-standard administrative tool (e.g., not `cmd.exe` or `powershell.exe` run by an admin).",
              "2. Statistical Method: Continuously analyze the command-line arguments from process creation logs (Windows Event ID 4688). For each command, calculate the Shannon entropy of the argument string. Establish a baseline entropy distribution for all commands seen in the environment over a 30-day window. Flag any command whose argument entropy exceeds the 98th percentile of all observed commands, as this may indicate the presence of a long, encoded Kerberos ticket string being passed as an argument.",
              "3. Machine Learning Application: Implement an unsupervised anomaly detection model, such as an Isolation Forest or a Variational Autoencoder, to profile command-line executions. Use features like command-line length, argument count, special character frequency, and entropy. Train the model on a large corpus of historical command-line data. The model will learn normal patterns and can then score new, unseen commands, flagging those with high anomaly scores that deviate significantly from learned baselines, thus detecting novel or obfuscated attack variations."
            ]
          },
          {
            "description": "Anomalous network transfer or local access of a file matching Kerberos ccache naming conventions (`krb5cc_*`, `krb5.ccache`) is observed.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek ftp.log",
              "Zeek smb_files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers hosting Linux user home directories, network egress points, Linux developer workstations",
            "action": [
              "1. Symbolic Logic: Monitor Zeek `files.log`, `ftp.log`, and `smb_files.log` for any file transfer where the filename matches the regular expression `(krb5cc_|krb5\\.ccache)`. Correlate the transaction `uid` with `conn.log` to get the source and destination IP addresses. Generate a high-severity alert if the destination is an external IP address or an internal host not on a pre-defined list of backup or file servers.",
              "2. Statistical Method: On file servers hosting ccache files, use file access auditing (Windows Event ID 4663) to build a baseline of processes that normally access these files (e.g., `sshd`, `smbd`, `nfsd`). Create a frequency distribution of accessing processes. Any access from a process that is statistically rare (e.g., in the bottom 5th percentile of frequency, such as `powershell.exe`, `wscript.exe`, or a newly seen binary) should be flagged as anomalous. Additionally, alert if a known process accesses an unusually high number of ccache files (e.g., > 3 standard deviations above its own baseline).",
              "3. Machine Learning Application: Construct a graph database where nodes represent users, processes, files, and destination IPs, and edges represent actions (e.g., 'executed', 'accessed', 'transferred_to'). Ingest file access logs (Event ID 4663) and network logs (Zeek). Use a graph-based anomaly detection algorithm (e.g., PageRank on subgraphs, community detection) to identify improbable paths, such as a process run by a standard user accessing a ccache file belonging to a privileged user, which is then transferred to an external destination."
            ]
          },
          {
            "description": "A user or system process executes a sequence of commands involving Kerberos utilities (e.g., `klist`) and file access/transfer utilities (e.g., `tar`, `scp`, `powershell`) that deviates from established behavioral norms for that entity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, bastion hosts, servers with interactive logins",
            "action": [
              "1. Symbolic Logic: Create a stateful detection rule that triggers on a specific sequence of events within a short time window (e.g., 5 minutes) for a single host. The sequence is: (1) Execution of `klist` (Windows Event ID 4688); followed by (2) Access to a `krb5cc_*` file (Windows Event ID 4663); followed by (3) Execution of a compression (`tar`, `zip`) or encoding (`base64`) utility (Event ID 4688); followed by (4) An outbound network connection to an external IP (Zeek `conn.log`). Alert on the completion of this sequence.",
              "2. Statistical Method: For each user, model their command execution sequences using N-grams (e.g., bigrams, trigrams) from process creation logs (Event ID 4688). Calculate the probability of each N-gram sequence occurring based on historical data. A sequence involving Kerberos-related commands followed by exfiltration-related commands (e.g., `klist` -> `powershell -enc`) that has a very low probability (e.g., below the 1st percentile) should be flagged as a behavioral anomaly.",
              "3. Machine Learning Application: Employ a sequence-based deep learning model, such as an LSTM autoencoder, trained on sequences of events (process creation, file access, network connections) per user or host. The model learns the normal 'rhythm' of activity. A sequence of events that results in a high reconstruction error, such as `klist` being executed by an unusual parent process (`winword.exe`) at an unusual time, followed by an outbound network connection, would be identified as a significant anomaly indicative of credential theft."
            ]
          },
          {
            "description": "A Kerberos service ticket request (Windows Event ID 4769) or subsequent logon (Windows Event ID 4624) occurs from a source IP, to a destination service, or at a time that is anomalous for the associated user account, suggesting a stolen ticket is being used.",
            "data_sources": [
              "Zeek kerberos.log",
              "Zeek conn.log",
              "Windows Event ID 4769",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain controllers, critical application servers, network choke points",
            "action": [
              "1. Symbolic Logic: Monitor Windows Event ID 4769 (A Kerberos service ticket was requested). Generate a high-priority alert if the `Service Name` is `krbtgt` (requesting a TGT) and the `Client Address` is not the IP address of a Domain Controller. This is a strong indicator of a Golden Ticket attack, which could be enabled by credentials stolen via ccache files.",
              "2. Statistical Method: From Kerberos authentication logs (Zeek `kerberos.log` or Windows Event ID 4769), build a historical profile for each user account. The profile should contain a set of typical source IP subnets, destination Service Principal Names (SPNs), and time-of-day/day-of-week logon windows. For each new authentication, score it based on deviations from this profile. For example, assign points for authenticating from a new country, a new subnet, or to a service accessed for the first time. If the cumulative score exceeds a predefined threshold, generate an alert for anomalous ticket usage.",
              "3. Machine Learning Application: Apply an unsupervised clustering algorithm like DBSCAN or HDBSCAN to authentication data (Windows Event ID 4624/4769). Use features such as user, source IP (enriched with GeoIP and ASN), destination service/SPN, and time of day (converted to cyclical features like hour-of-day). The algorithm will identify dense clusters representing normal 'peer groups' of activity. Any authentication event that is classified as a noise point (i.e., does not belong to any cluster) is a strong candidate for an anomalous logon, such as one originating from a pass-the-ticket attack."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]