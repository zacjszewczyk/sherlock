[
  {
    "information_requirement": "Is the adversary exfiltrating sensitive data via code repositories?",
    "tactic_id": "TA0010",
    "tactic_name": "Exfiltration",
    "indicators": [
      {
        "technique_id": "T1567.001",
        "name": "Exfiltration to Code Repository",
        "evidence": [
          {
            "description": "An outbound network connection is made to a domain or IP address of a code repository service present on a threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points and Proxies",
            "action": [
              "Symbolic Logic: Continuously correlate destination domains (from Zeek dns.log 'query' field and ssl.log 'server_name' field) and destination IP addresses (from conn.log 'id.resp_h' field) against a threat intelligence feed of known malicious code repository indicators. Generate an alert upon a match.",
              "Statistical Method: Calculate the rarity of the Server Name Indication (SNI) or destination domain across the enterprise over a 24-hour window. A domain seen by only one or a very small number of hosts (e.g., < 1st percentile of hosts) that is also a code repository domain is highly suspicious. Alert on such rare occurrences.",
              "Machine Learning: Use a pre-trained classification model (e.g., a deep learning model trained on domain strings) to score requested domains for maliciousness. Combine this score with other features like domain age, ASN, and whether it's a code repository to flag suspicious connections for review."
            ]
          },
          {
            "description": "A process execution sequence on a single host within a short time window shows a data compression utility (e.g., 7z.exe, tar.exe) followed by a 'git.exe' process execution with 'push' arguments.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer Workstations and CI/CD Pipeline Servers",
            "action": [
              "Symbolic Logic: Create a SIEM rule that triggers when a 'git.exe push' command (from Windows Event ID 4688 command line field) is preceded by a known archiving utility process (e.g., '7z.exe', 'rar.exe', 'zip.exe', 'tar.exe') from the same host and user within a 5-minute window.",
              "Statistical Method: For each host, profile parent-child process relationships. Calculate the conditional probability of 'git.exe' running after an archiving tool. An event where this probability is historically low but occurs should be flagged. For example, if P(git|7z) is typically 0.01 but is observed, it is anomalous.",
              "Machine Learning: Develop a sequence analysis model (e.g., a Hidden Markov Model or Recurrent Neural Network) trained on normal process execution sequences per user/host. Feed new process sequences into the model and alert when the model assigns a low probability (high anomaly score) to a sequence involving archiving and git push."
            ]
          },
          {
            "description": "The total outbound bytes sent from a client to a known code repository service significantly exceeds the established baseline for that client or the inbound bytes received in the same session.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points and Internet Gateway",
            "action": [
              "Symbolic Logic: Create a rule that alerts on any single connection to a known code repository domain where the outbound bytes ('orig_bytes' in Zeek conn.log) are greater than a static threshold (e.g., 100MB) and the ratio of outbound to inbound bytes is greater than 10:1.",
              "Statistical Method: For each source IP, establish a baseline of daily outbound data volume to code repository services. Using a moving average and standard deviation over a 30-day window, alert when the daily volume for a host exceeds a dynamic threshold (e.g., 3 standard deviations above the average, or > 99th percentile).",
              "Machine Learning: Use time series forecasting (e.g., ARIMA or Prophet) to predict the expected outbound data volume for each host to code repositories. Compare the actual observed volume to the predicted volume with its confidence interval. An observation that falls significantly outside the confidence interval indicates a statistical anomaly worthy of investigation."
            ]
          },
          {
            "description": "A network connection to a code repository service originates from a host, user account, or process that is not part of the defined 'developer' group or has no historical precedent for such activity.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers and Endpoint Devices (All Departments)",
            "action": [
              "Symbolic Logic: Maintain an explicit allow-list of user accounts and host groups (e.g., 'Developers', 'CI/CD Servers') authorized to connect to external code repositories. Correlate network connection logs (Zeek conn.log) with user logon data (Windows Event ID 4624). Alert on any connection to a code repository from a user or host not on the allow-list.",
              "Statistical Method: Calculate the entropy of destination services for each user. A user account that historically has low entropy (connects to a predictable set of services) and suddenly connects to a code repository service will cause a spike in entropy, which can be flagged as an anomaly.",
              "Machine Learning: Use peer group analysis or clustering algorithms (e.g., K-Means, DBSCAN) to group users based on their network activity patterns (services accessed, data volumes, time of day). If a user is identified as an outlier to all clusters, flag the user's activity for review, especially if it involves code repository access."
            ]
          },
          {
            "description": "A network connection to a code repository service is initiated by a process name that has no history of making such connections on a given host, or is a LOLBin (Living Off the Land Binary) like 'powershell.exe' making an unusual outbound connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Devices and Servers (All Departments)",
            "action": [
              "Symbolic Logic: Create a rule that alerts when a process such as 'powershell.exe', 'cscript.exe', or 'mshta.exe' initiates a network connection (Windows Event ID 5156) to an IP address associated with a known code repository service.",
              "Statistical Method: For each host, build a baseline profile of (ProcessName, DestinationIP/Domain, DestinationPort) tuples from historical network connection events (Windows Event ID 5156). Calculate the frequency of each tuple. Alert when a new, zero-frequency tuple appears where the destination corresponds to a code repository.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) classifier on the baseline of normal process network behavior for each host. The model learns a boundary around 'normal' activity. Any new connection event that falls outside this boundary, such as a rare process connecting to a code repository, is classified as an anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]