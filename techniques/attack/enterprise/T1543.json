[
  {
    "information_requirement": "Is the adversary establishing or maintaining persistence by creating or modifying system processes?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543",
        "name": "Create or Modify System Process",
        "evidence": [
          {
            "description": "A new system service is installed (Windows Event ID 7045/4697) where the 'Service File Name', service name, or service description contains strings matching a known threat intelligence indicator (IOC).",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations, DNS Servers",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of known malicious service names, executable paths, file hashes, and description strings. Create a SIEM rule to query all new service creation events (Windows Event ID 7045/4697) and compare the 'Service Name', 'Service File Name', and description fields against this feed. Alert on any match. 2. (Statistical) For all new services, calculate the Jaccard similarity or Levenshtein distance between the new service name/description and a baseline of all known benign service names/descriptions in the environment. Flag services with scores in the lowest 5th percentile, as they are lexically dissimilar from known-good services. 3. (ML) Train a classification model (e.g., Random Forest) using features extracted from service creation events (e.g., path depth, character distribution of name, presence of keywords like 'update' or 'system', file hash). Use this model to score new services and flag those classified as malicious with high confidence."
          },
          {
            "description": "A system service is created (Windows Event ID 7045/4697) where the service name or associated command-line (from Windows Event ID 4688/Sysmon Event ID 1) exhibits suspicious characteristics such as high string entropy, misspellings of legitimate services, or contains patterns indicative of LOLBAS abuse.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations",
            "action": "1. (Symbolic) Develop and apply a library of regular expressions to the 'Service File Name' and associated process command-line arguments (from Windows Event ID 4688/Sysmon Event ID 1). Search for patterns like 'powershell -e', 'rundll32.exe', 'mshta.exe http', or base64 blobs. Alert on any matches. 2. (Statistical) For every new service, calculate the Shannon entropy of the 'Service Name' and the 'Service File Name'. Establish a baseline distribution of entropy scores from all legitimate services. Generate an alert for any new service whose name or path entropy exceeds the 95th percentile of the baseline. 3. (ML) Implement a time-series anomaly detection model (e.g., LSTM autoencoder) to monitor the rate of new service creations per host and across the enterprise. A sudden spike in the rate of service creation that deviates significantly from the established forecast indicates potential automated adversary scripting and should be investigated."
          },
          {
            "description": "A new system service is created (Windows Event ID 7045/4697) where the 'Service File Name' path is an unusual location (e.g., user profile, temp directory) or the binary is unsigned by a trusted publisher.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": "1. (Symbolic) Define a list of forbidden service executable directories (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Temp\\, C:\\Windows\\Temp\\, C:\\$Recycle.Bin\\). Create a SIEM rule to alert on any service creation event (Windows Event ID 7045/4697) where the 'Service File Name' resides in one of these directories. 2. (Statistical) For each new service, perform a frequency analysis on its directory path across the enterprise. Using a SIEM query, count the occurrences of each unique service binary path. Flag paths that are statistical outliers, such as those that appear on only one machine or fall below the 1st percentile in frequency. 3. (ML) Train a decision tree classifier to predict if a service is suspicious. Use features such as: `path_is_user_profile`, `path_is_temp`, `binary_is_unsigned`, `signer_is_untrusted`, `path_depth`. The model output can be a risk score to prioritize analyst review."
          },
          {
            "description": "A known parent service process (e.g., services.exe, svchost.exe) spawns a child process (Windows Event ID 4688/Sysmon Event ID 1) that is anomalous, such as an interactive shell or a process initiating an external network connection (Zeek conn.log).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress Points",
            "action": "1. (Symbolic) Create a SIEM rule that triggers when a process with a 'ParentProcessName' of 'services.exe' or 'svchost.exe' has a 'ProcessName' of 'cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe', or 'rundll32.exe'. Correlate with network logs (Zeek conn.log or Sysmon Event ID 3) to increase severity if the child process initiates an outbound network connection. 2. (Statistical) For each legitimate parent service, build a baseline of normal child process names and their command-line argument characteristics (e.g., length, word count). Flag any new child process whose name is not in the baseline or whose command-line length exceeds the 99th percentile for that parent-child pair. 3. (ML) Model process parent-child relationships as a directed graph. Use a graph-based anomaly detection algorithm to identify new, rare edges (e.g., a service process spawning a LOLBAS for the first time in the environment). These new relationships represent a significant deviation from normal behavior and should be investigated."
          },
          {
            "description": "Modification of an existing legitimate service's binary path ('ImagePath'), 'ServiceDll', or failure command ('FailureCommand') registry key to execute a malicious payload.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services",
            "action": "1. (Symbolic) Monitor for registry write events (Windows Event ID 4657, Sysmon Event ID 13) specifically targeting the 'ImagePath', 'ServiceDll', or 'FailureCommand' values for any key under HKLM\\SYSTEM\\CurrentControlSet\\Services\\. Alert on any modification not associated with approved change management processes. 2. (Statistical) Periodically snapshot the configurations of all services in the HKLM\\SYSTEM\\CurrentControlSet\\Services hive. For each service, calculate a hash of its configuration (ImagePath, ServiceDll, etc.). Track the rate of hash changes over time. Flag any service whose configuration changes more frequently than 3 standard deviations above its historical mean change rate. 3. (ML) Train a One-Class SVM model on snapshots of known-good service configurations from a golden image or during a baseline period. Use the trained model to classify live service configurations as normal (inliers) or anomalous (outliers) whenever a modification is detected, flagging outliers for review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by creating or modifying system processes?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543",
        "name": "Create or Modify System Process",
        "evidence": [
          {
            "description": "A new service is created (Windows Event ID 7045/4697) to run as 'LocalSystem' and its 'Service File Name' matches the name or hash of a known privilege escalation tool.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": "1. (Symbolic) Create a SIEM rule that triggers if a service creation event (Windows Event ID 7045/4697) has 'Service Account' equal to 'LocalSystem' AND the 'Service File Name' or its hash (from EDR or Sysmon Event ID 11) matches a curated list of known privilege escalation tools (e.g., JuicyPotato, PrintSpoofer, BadPotato binaries). 2. (Statistical) Analyze the command line of the process that created the service (e.g., sc.exe from Windows Event ID 4688). Calculate the frequency of argument combinations used with 'sc.exe create'. Flag commands containing rare combinations, such as a 'binPath=' pointing to a LOLBAS and 'obj= LocalSystem', that fall below a 1% frequency threshold across the environment. 3. (ML) Train a supervised classification model (e.g., Gradient Boosting) to identify service-based privilege escalation. Use features like: `service_account_is_system`, `binary_name_in_lolbas_list`, `binary_path_is_temp`, `creating_process_name`, and `creating_user_is_admin`. Alert on services predicted to be malicious."
          },
          {
            "description": "Modification of a pre-existing, weakly permissioned service's configuration (e.g., ImagePath) to exploit a vulnerability like an unquoted service path.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, particularly older systems or those with third-party software",
            "action": "1. (Symbolic) First, identify all services with unquoted paths containing spaces in their 'ImagePath' registry value. For each vulnerable service, create a detection rule that monitors for file creation events (Sysmon Event ID 11) in the exploitable path segments (e.g., creation of 'C:\\Program.exe' for a service at 'C:\\Program Files\\App\\service.exe'). 2. (Statistical) For services identified with unquoted paths, periodically scan the vulnerable directories for new files. Calculate the Damerau-Levenshtein distance between the intended service executable name (e.g., 'service.exe') and any newly discovered file names (e.g., 'servlce.exe'). A small distance suggests a deliberate typosquatting attempt and should be flagged. 3. (ML) Use a vulnerability scanner or custom script to build a dataset of services with configuration weaknesses (unquoted paths, weak ACLs). Train a simple classifier to assign a risk score to each service. Use this score to prioritize monitoring and remediation efforts, focusing high-fidelity detection rules on the highest-risk services."
          },
          {
            "description": "A system service is created or modified to run with SYSTEM privileges by a user account or process that does not possess administrative rights.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Authentication Logs from Domain Controllers",
            "action": "1. (Symbolic) Create a high-severity alert that triggers if a service creation event (Windows Event ID 7045/4697) shows the 'Service Account' is 'LocalSystem' AND the 'SubjectUserName' in the event is NOT a member of a predefined administrators group (e.g., 'Domain Admins', 'Enterprise Admins'). 2. (Statistical) For each user, establish a baseline of the number of system services they create per day. For any user not in an administrative group, this baseline should be zero; any service creation is a high-confidence anomaly. For administrative users, flag any day where their service creation count exceeds 3 standard deviations above their personal mean. 3. (ML) Use peer group analysis (clustering) to group users based on their typical daily activities (e.g., processes run, logon types, network shares accessed). If a user in a 'Standard User' or 'Developer' cluster performs an action characteristic of the 'System Administrator' cluster (like creating a SYSTEM service), flag this cross-cluster behavior as a high-risk anomaly."
          },
          {
            "description": "A newly created service, configured to run as SYSTEM, spawns an unexpected child process such as a command shell or a tool used for credential dumping or lateral movement.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": "1. (Symbolic) Create a rule that chains events: if a service is created to run as SYSTEM (Windows Event ID 7045/4697), and within 5 minutes that service process ID (from Windows Event ID 4688/Sysmon Event ID 1) spawns a child process whose name or command line matches signatures for credential dumping (e.g., 'mimikatz', 'lsass'), generate a critical alert. 2. (Statistical) For newly created SYSTEM services, monitor the command lines of their child processes. Calculate the n-gram frequency of these command lines and compare them to a baseline of benign SYSTEM service child process command lines. Flag command lines containing rare n-grams (e.g., 'add user', '-w hidden', 'dumplsass'). 3. (ML) Use a sequence analysis model (e.g., a Hidden Markov Model) to detect malicious sequences of actions post-privilege escalation. A high-probability malicious sequence might be: {Service Create (SYSTEM)} -> {Spawn powershell.exe} -> {powershell.exe executes encoded command} -> {powershell.exe spawns rundll32.exe}. The model, trained on benign sequences, would flag this entire chain as anomalous."
          },
          {
            "description": "An existing service's permissions are modified to allow a lower-privileged user to alter its configuration, followed by a modification of that service to execute adversary-controlled code with high privileges.",
            "data_sources": [
              "Windows Event ID 4670",
              "Sysmon Event ID 13",
              "Windows Event ID 4657",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Service configuration objects on Domain Controllers and critical servers",
            "action": "1. (Symbolic) Create a correlation rule that chains two events: (A) A security event (Windows Event ID 4670, requires SACL) shows a non-administrative user being granted write-related permissions on a service object. (B) A registry or service modification event (Sysmon Event ID 13, Windows Event ID 4657/4697) shows the same user modifying that service's 'ImagePath' or 'FailureCommand' within a 1-hour window. 2. (Statistical) Periodically audit service DACLs. For each service, calculate a 'risk score' based on who has write permissions, where standard users contribute more to the score than admins. Track this score over time. A sudden increase in a service's risk score, exceeding 2 standard deviations from its baseline, indicates a potential malicious permission change. 3. (ML) Use an association rule mining algorithm (e.g., Apriori) on security event logs. Search for rules like '{Event=PermissionChange(user=non-admin, perm=write), Object=ServiceX} => {Event=ConfigChange(user=non-admin), Object=ServiceX.ImagePath}'. A rule with high confidence and lift provides a strong, data-driven detection for this specific attack pattern."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]