[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by checking for user activity?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497.002",
        "name": "User Activity Based Checks",
        "evidence": [
          {
            "description": "A process execution event (Sysmon Event ID 1) contains a file hash that matches a known indicator for a sandbox evasion tool that specifically checks for user activity (e.g., mouse movement, open documents).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints (laptops, desktops); Virtual Desktop Infrastructure (VDI) environment; Server infrastructure.",
            "action": [
              "Symbolic Logic: Continuously match the file hashes of newly created processes (from Sysmon Event ID 1) against a threat intelligence feed of known sandbox evasion tools like 'Pafish', 'Al-Khaser', or other malware samples known to implement T1497.002. Generate a high-severity alert on any match.",
              "Statistical: For unsigned executables running from user-writable paths (%TEMP%, %APPDATA%), parse the PE import table. Calculate the frequency of imported functions associated with user activity checks (e.g., 'GetCursorPos', 'GetForegroundWindow', 'GetRecentDocs'). Compare this frequency against a pre-computed baseline for legitimate software. Flag executables where the count of these functions exceeds the 99th percentile of the baseline.",
              "Machine Learning: Develop and deploy a machine learning classifier (e.g., Random Forest, Gradient Boosting) trained on labeled process execution data. Extract features such as parent process name, command-line arguments, execution path, PE import hash, and whether the binary is signed. Use the model to score new process executions in real-time, generating an alert for processes classified as 'evasive' with a confidence score above a defined threshold (e.g., 0.85)."
            ]
          },
          {
            "description": "A single process (identified by ProcessGUID) performs a rapid sequence of file and/or registry read operations within a short timeframe (<15 seconds) against multiple locations indicative of user activity, such as browser history files, recent document lists, and desktop contents.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations; Terminal servers; Domain Controllers; File servers hosting user profiles.",
            "action": [
              "Symbolic Logic: Define and monitor for specific, ordered sequences of file (Sysmon EID 11) and registry (Sysmon EID 13) accesses by a single ProcessGUID within a short time window (<10 seconds). An example sequence is: query 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU', then access '%APPDATA%\\Microsoft\\Windows\\Recent\\', then attempt to read 'C:\\Users\\*\\Desktop'. Alert when a process matches such a predefined behavioral signature.",
              "Statistical: For each new process, aggregate all file and registry access paths within the first 60 seconds of execution. Calculate the Shannon entropy of the set of unique directory and registry hive paths accessed. Compare the entropy score against a pre-established baseline for the process name or image path. Alert on processes with entropy scores exceeding 3 standard deviations above the mean for their baseline, particularly if the process is unsigned and running from a user-writable directory.",
              "Machine Learning: Implement a sequence-to-sequence autoencoder (e.g., using LSTMs) trained on event sequences (Sysmon ProcessGUID, EventType, TargetObject) from benign processes. Feed new process event sequences into the model in real-time. Anomaly scores are generated based on the reconstruction error. Sequences with a high reconstruction error, indicating they do not conform to normal learned behavior, should be flagged for investigation as potentially evasive."
            ]
          },
          {
            "description": "A process spawned by a common document handler (e.g., WINWORD.EXE, ACROBAT.EXE) exhibits a time delay greater than a defined threshold (e.g., 2 minutes) between its creation and its first network connection or first suspicious child process creation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints; Email gateway servers; Network egress points.",
            "action": [
              "Symbolic Logic: Correlate process creation events (Sysmon EID 1) with network connection events (Sysmon EID 3 or Zeek conn.log). Alert when a process whose parent is a document handler (e.g., WINWORD.EXE, ACROBAT.EXE) initiates its first network connection to an external IP after a delay exceeding a fixed threshold (e.g., 3 minutes) from its start time.",
              "Statistical: For each process spawned by a known document handler, calculate the time delta between the process start time (Sysmon EID 1) and its first network connection event (from Zeek conn.log or Sysmon EID 3). Maintain a statistical distribution (e.g., histogram) of these time deltas. Alert on any process where the time delta exceeds the 98th percentile of the historical distribution.",
              "Machine Learning: Train a time-series anomaly detection model (e.g., Isolation Forest) on features extracted from the first 10 minutes of a process's life, specifically those spawned by document handlers. Features should include counts of child processes, network connections, file writes, and registry modifications per 15-second interval. Flag processes that exhibit a long period of inactivity followed by a sudden burst of activity, as this will be identified as an anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary conducting discovery of user activity for profiling or data collection?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497.002",
        "name": "User Activity Based Checks",
        "evidence": [
          {
            "description": "A process command-line argument (from Sysmon Event ID 1 or Windows Event ID 4688) contains patterns indicating a search of user directories using built-in utilities like findstr.exe or scripting languages like PowerShell to query file contents or browser data.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations; Document management systems; Network file shares.",
            "action": [
              "Symbolic Logic: Monitor process command lines (Sysmon EID 1) using a list of regular expressions to detect searching of user directories for sensitive keywords. Example: `findstr.exe /s /i \"password\" C:\\Users\\*\\Documents\\*` or PowerShell scripts accessing browser SQLite files with SQL queries containing 'bank' or 'login'.",
              "Statistical: For every process creation event, calculate the length and Shannon entropy of its command-line arguments. Establish a baseline for these metrics, segmented by process name. Alert on executions where the command-line length or entropy exceeds the 99th percentile for that process, especially if the command line also contains references to user profile paths (e.g., 'C:\\Users\\').",
              "Machine Learning: Train a text classification model (e.g., using FastText or a fine-tuned BERT model) on a large dataset of command lines labeled by category (benign, suspicious, malicious). Deploy the model to classify new command lines in real-time. Flag command lines classified as 'suspicious' or 'malicious-discovery' with high confidence, allowing for the detection of obfuscated or novel command-line search patterns."
            ]
          },
          {
            "description": "A single process, not on an allowlist of backup or indexing services, generates a high volume of file read events (e.g., from Windows Event ID 4663) for unique files in user directories within a short time window.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on endpoints; Departmental and project-specific network file shares.",
            "action": [
              "Symbolic Logic: Define a threshold-based rule that triggers when a single process, excluding known backup/indexing/AV processes, generates more than 100 file access events for distinct files in user directories (`C:\\Users\\*`) within a 1-minute window. Generate an alert that includes the process name, user context, and a sample of files accessed.",
              "Statistical: For each process over a 5-minute sliding window, count the number of unique user documents accessed. Establish a baseline distribution of this count for each process name. Alert when a process's unique file access count exceeds the 99.5th percentile of its historical baseline.",
              "Machine Learning: Continuously featurize process behavior over 5-minute intervals, capturing metrics like file access rate, ratio of read-to-write operations, and entropy of file extensions accessed. Apply a clustering algorithm (e.g., DBSCAN) to this feature space. Investigate processes that are consistently flagged as noise points or that form new, small clusters, as they represent behavioral deviations from established norms and may indicate file scanning activity."
            ]
          },
          {
            "description": "A single process (identified by ProcessGUID) accesses a sensitive user profile file (e.g., browser credential stores, SSH keys) and subsequently initiates an outbound network connection within a short time window (< 60 seconds).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points/Internet gateway; DNS resolvers; Endpoints hosting user profiles.",
            "action": [
              "Symbolic Logic: Create a stateful correlation rule: IF a process (identified by ProcessGUID) accesses a sensitive user file (e.g., Chrome's 'Login Data' or Firefox's 'key4.db', via Sysmon EID 11), THEN within 60 seconds the same process initiates an outbound network connection (Sysmon EID 3) to a destination IP not on an allowlist, THEN generate an alert.",
              "Statistical: For the subset of network connections that occur shortly after a process accesses sensitive files, analyze the `orig_bytes` field from Zeek conn.log. Compare the byte count to a historical baseline for the source host or user. Alert on connections where the outbound data volume is a statistical outlier (e.g., exceeds the 95th percentile or is >2 standard deviations above the mean), indicating potential data exfiltration.",
              "Machine Learning: Build a security data graph where nodes represent entities (processes, files, domains, IPs) and edges represent events (read, connect, execute). Use a graph-based anomaly detection algorithm (e.g., GNN-based autoencoder) to learn normal entity relationships and interaction paths. Score new event chains in real-time. Alert on low-probability paths, such as a process spawned from an unusual parent accessing a credential file and then connecting to a newly seen domain, as this represents a highly suspicious chain of events."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]