[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by clearing command history?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.003",
        "name": "Clear Command History",
        "evidence": [
          {
            "description": "A process is executed with a command line containing a known, case-insensitive string used for explicitly clearing or manipulating command history files. Examples include commands like 'history -c', 'Clear-History', or file operations redirecting null output to a history file.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Linux auditd logs",
              "Syslog from network devices"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, ESXi Hosts, Network Switches and Routers",
            "action": [
              "Create a high-fidelity SIEM rule that alerts upon detection of a process creation event (Windows Event ID 4688, Linux auditd) or PowerShell script block (Windows Event ID 4104) containing literal command line strings such as: 'history -c', 'Clear-History', 'rm ~/.bash_history', 'rm ~/.zsh_history', 'del ConsoleHost_history.txt', 'cat /dev/null > ~/.bash_history', or network device commands like 'clear logging'.",
              "For each host and user, calculate a 30-day rolling average and standard deviation of explicit history-clearing command executions. Generate an alert when the daily count for a user/host pair exceeds its historical mean by more than 3 standard deviations, or when any host's daily count exceeds the 99th percentile of all hosts in the environment.",
              "Develop a supervised classification model (e.g., Random Forest, Gradient Boosting) trained on labeled command-line execution data. Use features such as command-line n-grams, parent process name, user context, and process path. Use the trained model to score all command-line executions in real-time, flagging those with a high probability of being an obfuscated or novel history-clearing command."
            ]
          },
          {
            "description": "A process execution or script block modifies shell environment variables to disable history logging (e.g., 'HISTSIZE=0', 'HISTFILE=/dev/null', 'Set-PSReadlineOption -HistorySaveStyle SaveNothing') or uses obfuscated commands to achieve this.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, Linux/Unix Servers",
            "action": [
              "Implement a SIEM rule using regular expressions to detect process command lines (Windows Event ID 4688, Linux auditd) or script blocks (Windows Event ID 4104) that set history-related variables to null/zero (e.g., /HISTSIZE=0/i, /unset HISTFILE/i, /HISTFILE=\\/dev\\/null/i) or disable saving (e.g., /HistorySaveStyle.*SaveNothing/i).",
              "For each process creation event, calculate the Shannon entropy of the command-line argument string. Establish a per-user and per-parent-process baseline of command-line entropy. Generate an alert when a command's entropy significantly exceeds the established baseline (e.g., > 3 standard deviations), particularly if the command includes strings like 'history', 'HIST', 'PSReadline', or involves environment variable modification.",
              "Deploy a time-series anomaly detection model (e.g., ARIMA) to monitor the frequency of commands that modify critical shell environment variables (e.g., 'HISTSIZE', 'PSReadlineOptions') on a per-host basis. Train the model on historical command execution data. Generate an alert when the observed frequency of these modifications significantly deviates from the forecasted pattern, suggesting an unusual attempt to alter shell behavior."
            ]
          },
          {
            "description": "A file modification or deletion event targets a known shell history file (e.g., 'ConsoleHost_history.txt', '.bash_history', '/var/log/shell.log') where the acting process is not a standard interactive shell (e.g., 'powershell.exe', 'bash') or has an anomalous parent process (e.g., 'services.exe', 'winword.exe').",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 11",
              "Sysmon Event ID 23",
              "Sysmon Event ID 26",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on file servers, Local user profiles on endpoints and servers, Administrator Bastion Hosts, ESXi Hosts, Linux/Unix Servers",
            "action": [
              "Enable file system auditing (SACL on Windows, auditd on Linux) for standard history file locations. Create a SIEM rule to alert on a file deletion or write event (e.g., Windows Event ID 4663 with DELETE access, Sysmon Event ID 23/26, or auditd 'unlink' syscall for '.bash_history', 'ConsoleHost_history.txt', '/var/log/shell.log') where the responsible process is not an expected shell or trusted administrative tool.",
              "Analyze process execution logs (Windows Event ID 4688, auditd) to build a probabilistic graph of parent-child process relationships across the enterprise. For any event involving the modification or deletion of a history file, calculate the rarity of the observed (Parent Process, Child Process) tuple. Generate an alert if the probability of this relationship is below a defined threshold (e.g., <0.01%), indicating an anomalous process lineage.",
              "Train a One-Class SVM model using features from file modification/deletion events associated with history files. Features should include: process name, parent process name, user context, time of day, file path, and process command line. The model learns a boundary of 'normal' activity for managing these files. Any event falling outside this learned boundary is classified as an anomaly and flagged for investigation."
            ]
          },
          {
            "description": "The clearing of command history or deletion of a history file occurs within a 5-minute time window immediately following a successful remote login (RDP, SSH, WinRM) to the same host, especially if the login itself is anomalous (e.g., from a new geography, at an unusual time).",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing servers, VPN gateways, Domain Controllers, Administrator Bastion Hosts, Network perimeter firewalls",
            "action": [
              "Create a stateful SIEM correlation rule that triggers when a successful remote logon event (Windows Event ID 4624 with Logon Type 3 or 10; or a new SSH/RDP session in Zeek conn.log) is followed within 5 minutes by a history-clearing event (identified via evidence #1 or #3) on the same destination host and by the same user account. Join on hostname/IP and username.",
              "For each user, create a statistical baseline of remote login activity using Windows Event ID 4624 and Zeek conn.log. Profile features such as source IP geolocation (country, ASN), time of day, day of week, and logon type. Assign a risk score to each login based on deviations from the norm. Correlate logins with a risk score above the 95th percentile with subsequent history-clearing events within a 10-minute window to generate a high-priority alert.",
              "Implement a sequence analysis model, such as a Hidden Markov Model (HMM), to learn common event sequences within a user session. Train the model on benign sequences of events (e.g., logon, process execution, file access). Trigger an alert when the model observes a low-probability sequence, such as [Anomalous_Remote_Login -> PowerShell_Execution -> History_File_Deletion -> Network_Connection_to_Rare_ASN], indicating a likely malicious session."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]