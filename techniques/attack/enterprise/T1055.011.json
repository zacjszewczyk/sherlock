[
  {
    "information_requirement": "Has the adversary leveraged Extra Window Memory Injection for privilege escalation?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.011",
        "name": "Extra Window Memory Injection",
        "evidence": [
          {
            "description": "A process is observed making API calls indicative of EWM injection, such as using `SetWindowLongPtrA/W` to write a pointer to a window's extra memory (specifically at the GWLP_WNDPROC index), followed by a `SendNotifyMessage` call to trigger execution. This is highly suspicious when the calling process is not a standard window manager and the target process is a different, often higher-privilege, application.",
            "data_sources": [
              "EDR Telemetry (API Call Monitoring)",
              "Sysmon Event ID 25 (Process Tampering)",
              "Sysmon Event ID 10 (ProcessAccess)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Privileged Access Workstations, Critical Application Servers",
            "action": [
              "(Symbolic) Create a high-severity alert for any process that calls `SetWindowLongPtrA/W` on a window handle belonging to a different process, where the index is `GWLP_WNDPROC` (-4), and this call is followed within a short time window (e.g., 1 second) by a `SendNotifyMessage` call to the same window handle. Exclude known good system processes like `dwm.exe` and `csrss.exe` from this rule.",
              "(Statistical) Profile the frequency of `SetWindowLongPtrA/W` and `SendNotifyMessage` API calls per process executable name. Alert when a process exhibits a call frequency that is a significant outlier (e.g., > 3 standard deviations above its historical mean), particularly for processes that do not typically perform window management functions (e.g., `powershell.exe`, `mshta.exe`, `wscript.exe`).",
              "(Machine Learning) Train a sequence-based anomaly detection model (e.g., LSTM or Transformer) on benign API call sequences captured from endpoint telemetry. A sequence containing `[...CreateFileMapping -> MapViewOfFile -> SetWindowLongPtr -> SendNotifyMessage...]` originating from a script interpreter or document reader would be flagged with a high anomaly score, indicating a deviation from normal process behavior."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) for a commonly abused, low-privilege process (e.g., `mshta.exe`, `wscript.exe`) occurs within 60 seconds prior to a sensitive event, such as user creation (Windows Event ID 4720) or service installation (Windows Event ID 4697), by a high-privilege process (e.g., `services.exe`), where no direct parent-child relationship is logged.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4672",
              "Windows Event ID 4720",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged User Workstations",
            "action": [
              "(Symbolic) Create a rule to detect when a process from a watchlist of commonly abused low-privilege processes (e.g., `mshta.exe`, `wscript.exe`, `regsvr32.exe`) generates a process creation event, followed within 60 seconds by a sensitive event (e.g., Event ID 4720 - User Creation, Event ID 4697 - Service Installation) from a high-privilege process (e.g., `services.exe`, `lsass.exe`, `wininit.exe`) on the same host.",
              "(Statistical) For each high-privilege process, establish a baseline of common preceding processes (non-parents) within a 5-minute window. Flag any sequence where the preceding process is statistically rare (e.g., appears in less than 1% of historical sequences for that high-privilege process).",
              "(Machine Learning) Utilize a sequence analysis model (e.g., LSTM) trained on benign host event sequences (process creations, user creations, service installations) to identify and score anomalous sequences. A sequence like `[mshta_activity -> services_creates_user]` would receive a high anomaly score if it has a low probability under the trained model."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows a process running with standard user privileges spawning a command-line interpreter (e.g., `cmd.exe`, `powershell.exe`), followed within 5 minutes by the creation of a new scheduled task (Windows Event ID 4698) by a system process, where the task's command line exhibits high character entropy.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4702",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Application Servers",
            "action": [
              "(Symbolic) Alert when a non-administrative parent process (e.g., `winword.exe`, `acrord32.exe`) launches a command-line interpreter, followed within 5 minutes by a new service installation (Event ID 4697) where the service binary path points to a non-standard directory like `C:\\Users\\Public\\` or `C:\\Windows\\Temp\\`.",
              "(Statistical) For all new scheduled tasks (Event ID 4698), calculate the Shannon entropy of the command-line arguments. Flag any task whose command-line entropy exceeds the 95th percentile of the historical distribution for all tasks on that host, especially if created shortly after a non-admin process spawned a shell.",
              "(Machine Learning) Train a classification model (e.g., Random Forest) using features from process creation (Event ID 4688) and subsequent task/service creation events to predict malicious sequences. Features should include parent/child process names, user context, time delta between events, and command-line argument characteristics (length, entropy, presence of special characters)."
            ]
          },
          {
            "description": "A process not typically associated with debugging (e.g., `notepad.exe`) is assigned `SeDebugPrivilege` (observed in Windows Event ID 4672) and is subsequently observed generating a process access event (Windows Event ID 4656/4663 or Sysmon Event ID 10) targeting `lsass.exe` memory.",
            "data_sources": [
              "Windows Event ID 4672",
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4663",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for LSASS access), Privileged Access Workstations, Tier 0 Servers",
            "action": [
              "(Symbolic) Create a rule that triggers when a process not on a pre-defined allowlist of debuggers and security tools (e.g., `procexp.exe`, `windbg.exe`) is granted `SeDebugPrivilege` (Event ID 4672) and subsequently generates an access event for `lsass.exe` (Event ID 4656/4663 or Sysmon Event ID 10 with TargetProcess `lsass.exe`).",
              "(Statistical) For each process name, maintain a statistical baseline of privileges it is typically assigned (from Event ID 4672). Alert when a process is assigned a privilege that is statistically rare for it (e.g., a privilege that appears in <0.1% of historical instances for that process executable).",
              "(Machine Learning) Use an anomaly detection algorithm (e.g., Isolation Forest) on process behavior feature sets. A feature vector could be `(ProcessName, GrantedPrivilege, TargetProcessName)`. An instance like `(notepad.exe, SeDebugPrivilege, lsass.exe)` would be flagged as a high-scoring anomaly."
            ]
          },
          {
            "description": "A SYSTEM-level process (e.g., `svchost.exe`) initiates a network connection (Zeek conn.log) to an external IP on a non-standard port, or spawns `powershell.exe` (Windows Event ID 4688), within 5 minutes of a user launching a document-reader process (e.g., `acrord32.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Endpoint devices, Internal Network Segments",
            "action": [
              "(Symbolic) Alert when a high-privilege system process (e.g., `services.exe`, `wininit.exe`, `svchost.exe`) initiates a network connection (Zeek conn.log, Event ID 5156) to an IP address or domain on a threat intelligence list, especially if correlated with recent suspicious process activity on the source host.",
              "(Statistical) For each critical system process, profile its common destination ports and child processes. Alert if the process connects to a port not in the 99th percentile of its historical activity or spawns a child process never seen before. For example, `svchost.exe` spawning `powershell.exe` is highly anomalous and should be alerted on.",
              "(Machine Learning) Apply time-series analysis (e.g., ARIMA) to the volume of outbound data (`orig_bytes` in Zeek conn.log) for each critical system process. An alert is triggered if the observed data volume significantly deviates from the forecasted volume, suggesting potential data exfiltration or C2 activity."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary using Extra Window Memory Injection to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.011",
        "name": "Extra Window Memory Injection",
        "evidence": [
          {
            "description": "A process is observed making API calls indicative of EWM injection, such as using `SetWindowLongPtrA/W` to write a pointer to a window's extra memory (specifically at the GWLP_WNDPROC index), followed by a `SendNotifyMessage` call to trigger execution. This allows malicious code to run under the context of a legitimate, allow-listed process, evading process-based defenses.",
            "data_sources": [
              "EDR Telemetry (API Call Monitoring)",
              "Sysmon Event ID 25 (Process Tampering)",
              "Sysmon Event ID 10 (ProcessAccess)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers with GUI components, Virtual Desktop Infrastructure (VDI)",
            "action": [
              "(Symbolic) Create an alert for any process that calls `SetWindowLongPtrA/W` on a window handle belonging to a different process, especially when the target is a commonly allow-listed application like a web browser or office suite application. Exclude known good processes like `dwm.exe` and `csrss.exe`.",
              "(Statistical) For each common GUI application (e.g., `chrome.exe`, `outlook.exe`), establish a baseline of processes that access its memory or interact with its window handles. Alert when a statistically rare process (e.g., `powershell.exe`, a script interpreter) interacts with the target process's windows via EWM-related APIs.",
              "(Machine Learning) Use a graph-based anomaly detection model where nodes are processes and edges are interactions (e.g., API calls like `SetWindowLongPtr`). Train the model on benign process interaction graphs. A new, unseen edge from a script host to a browser process representing an EWM call would be flagged as a structural anomaly in the graph."
            ]
          },
          {
            "description": "A user-facing application (e.g., `iexplore.exe`, `chrome.exe`) generates a DNS query (Zeek dns.log) for a domain with low prevalence or known malicious reputation, and subsequently establishes a TCP connection (Zeek conn.log) to the resolved IP address on a non-standard port (e.g., 4444, 8443), inconsistent with normal browsing behavior.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Web Proxies, Endpoint devices",
            "action": [
              "(Symbolic) Join network connection logs (Zeek conn.log) with a threat intelligence feed of malicious IPs/domains. Alert when a process like `chrome.exe`, `winword.exe`, or `outlook.exe` communicates with a listed indicator, as these processes are common targets for injection.",
              "(Statistical) Analyze the JA3/JA3S hashes from TLS handshakes (Zeek ssl.log) initiated by common user applications. Maintain a baseline of common hashes for each application and alert on the appearance of rare or known-malicious hashes (e.g., flag hashes with a frequency below the 1st percentile), which can indicate a non-standard TLS client library being used by injected code.",
              "(Machine Learning) Use an LSTM-based autoencoder trained on benign network traffic patterns (connection frequency, duration, data size, inter-arrival time) to detect anomalous C2-like beaconing. Highly regular connections with small, fixed-size payloads from a standard user application would be flagged as anomalous by the model."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows a GUI application (e.g., `acrord32.exe`, `winword.exe`) spawning `powershell.exe` with a Base64-encoded or otherwise obfuscated command, which subsequently initiates an outbound network connection (Zeek conn.log or Windows Event ID 5156).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI)",
            "action": [
              "(Symbolic) Alert when a common GUI application parent process (e.g., `winword.exe`, `excel.exe`, `acrord32.exe`) spawns a child process of `cmd.exe`, `powershell.exe`, or `rundll32.exe`. This is a classic indicator of malicious macro execution or exploitation.",
              "(Statistical) For each common GUI parent process, build a frequency distribution of its child processes. Alert when a child process is spawned that is statistically rare (e.g., seen in <0.5% of historical instances). Additionally, calculate the Shannon entropy of the child process's command line; alert on values exceeding the 98th percentile for that parent-child pair.",
              "(Machine Learning) Use a graph-based anomaly detection model on process relationship graphs. Train the model on benign process trees and flag new, unseen subgraphs, such as `acrord32.exe -> powershell.exe -> external_ip_connection`, as anomalous structures indicative of defense evasion."
            ]
          },
          {
            "description": "A non-networking graphical application (e.g., `calc.exe`, `notepad.exe`) is observed initiating an outbound TCP connection (Windows Event ID 5156 and Zeek conn.log) to an external IP address, especially over port 53, indicating potential DNS tunneling for C2.",
            "data_sources": [
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, DNS Servers",
            "action": [
              "(Symbolic) Maintain an explicit list of non-networking applications (e.g., `notepad.exe`, `calc.exe`, `mspaint.exe`). Trigger a high-severity alert if any process on this list generates an outbound network connection event (Event ID 5156 or Zeek conn.log).",
              "(Statistical) For applications that are expected to use the network (e.g. browsers), baseline their destination ports. Alert if a connection is made to a port outside the top 99% of commonly used ports for that application (e.g., `chrome.exe` connecting to port 6667/IRC). This can indicate injected code using a non-standard port.",
              "(Machine Learning) Use a clustering algorithm (e.g., DBSCAN) to group processes based on network behavior features (ports, protocols, data volume, destination ASN). A process like `svchost.exe` suddenly moving from a cluster of 'internal services' to a cluster of 'external C2' would be a significant anomaly, potentially due to injected code."
            ]
          },
          {
            "description": "The process `outlook.exe` exhibits a >10x increase in outbound data volume over its 30-day moving average (from Zeek conn.log), coinciding with a spike in Application Error events (Windows Event ID 1000) for that process, particularly outside of standard business hours.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 1000"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, Mail Servers",
            "action": [
              "(Symbolic) Alert if a process generates more than 5 application crash events (Event ID 1000) within 10 minutes, and this is correlated with network connections to domains or IPs registered within the last 30 days (queried from WHOIS data).",
              "(Statistical) For each major user application, compute a time-series baseline of its network data volume per hour. Alert if the current volume exceeds 3 standard deviations above the moving average for that specific hour of the day and day of the week, indicating anomalous data transfer.",
              "(Machine Learning) Use a change point detection algorithm on multiple time-series streams for a single process (e.g., network connections/min, data volume, application errors/min). An alert is triggered if the algorithm detects a simultaneous, statistically significant change point across multiple metrics, indicating a fundamental shift in the process's behavior due to injection or compromise."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]