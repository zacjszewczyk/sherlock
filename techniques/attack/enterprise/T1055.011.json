[
  {
    "information_requirement": "Has the adversary leveraged Extra Window Memory Injection for privilege escalation?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.011",
        "name": "Extra Window Memory Injection",
        "evidence": [
          {
            "description": "A low-privilege process (e.g., `mshta.exe`) is active within 60 seconds prior to a high-privilege process (e.g., `services.exe`) performing a sensitive action, such as creating a new user account (Windows Event ID 4720), where no direct parent-child relationship exists.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4672",
              "Windows Event ID 4720",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged User Workstations",
            "action": "1. (Symbolic) Create a rule to detect when a process from a watchlist of commonly abused low-privilege processes (e.g., `mshta.exe`, `wscript.exe`, `regsvr32.exe`) generates any event, followed within 60 seconds by a sensitive event (e.g., Event ID 4720 - User Creation, Event ID 4697 - Service Installation) from a high-privilege process (e.g., `services.exe`, `lsass.exe`, `wininit.exe`). 2. (Statistical) For each high-privilege process, establish a baseline of common preceding processes (non-parents) within a 5-minute window. Flag any sequence where the preceding process is statistically rare (e.g., appears in less than 1% of historical sequences). 3. (Machine Learning) Utilize a sequence analysis model (e.g., LSTM) trained on benign host event sequences (process creations, user creations, service installations) to identify and score anomalous sequences. A sequence like `[mshta_activity -> services_creates_user]` would receive a high anomaly score if it has a low probability under the trained model."
          },
          {
            "description": "A process running with standard user privileges spawns a command-line interpreter (e.g., `cmd.exe`, `powershell.exe`), followed within 5 minutes by the creation of a new scheduled task (Windows Event ID 4698) by a system process, where the task's command line has high character entropy.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4702",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Application Servers",
            "action": "1. (Symbolic) Alert when a non-administrative parent process (e.g., `winword.exe`, `acrord32.exe`) launches a command-line interpreter, followed within 5 minutes by a new service installation (Event ID 4697) where the service binary path is in a non-standard directory like `C:\\Users\\Public\\`. 2. (Statistical) For all new scheduled tasks (Event ID 4698), calculate the Shannon entropy of the command-line arguments. Flag any task whose command-line entropy exceeds the 95th percentile of the historical distribution for all tasks, especially if created shortly after a non-admin process spawned a shell. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features from process creation (Event ID 4688) and subsequent task/service creation events to predict malicious sequences. Features should include parent/child process names, user context, time delta between events, and command-line argument characteristics (length, entropy)."
          },
          {
            "description": "A process not typically used for debugging (e.g., `notepad.exe`) is assigned `SeDebugPrivilege` (Windows Event ID 4672) and is subsequently observed attempting to access the `lsass.exe` process memory (Windows Event ID 4656/4663).",
            "data_sources": [
              "Windows Event ID 4672",
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for LSASS access), Privileged Access Workstations, Tier 0 Servers",
            "action": "1. (Symbolic) Create a rule that triggers when a process not on a pre-defined allowlist of debuggers and security tools (e.g., `procexp.exe`, `windbg.exe`) is granted `SeDebugPrivilege` (Event ID 4672) and subsequently generates an access event for `lsass.exe` (Event ID 4656/4663 with ObjectName `lsass.exe`). 2. (Statistical) For each process name, maintain a statistical baseline of privileges it is typically assigned (from Event ID 4672). Alert when a process is assigned a privilege that is statistically unprecedented or rare for it (e.g., a privilege it has never held before, or one that appears in <0.1% of instances). 3. (Machine Learning) Use an anomaly detection algorithm (e.g., Isolation Forest) on process behavior feature sets. A feature set could be `(ProcessName, GrantedPrivilege, TargetProcessName)`. An instance like `(notepad.exe, SeDebugPrivilege, lsass.exe)` would be flagged as a high-scoring anomaly."
          },
          {
            "description": "A SYSTEM-level process such as `svchost.exe` initiates a network connection to an external IP on a non-standard port (e.g., 8443) or spawns `powershell.exe`, within 5 minutes of a document-reader process (e.g., `acrord32.exe`) being launched.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Endpoint devices, Internal Network Segments",
            "action": "1. (Symbolic) Alert when a high-privilege system process (e.g., `services.exe`, `wininit.exe`) initiates a network connection (Zeek conn.log, Event ID 5156) to an IP address or domain on a threat intelligence list. 2. (Statistical) For each critical system process, profile its common destination ports and child processes. Alert if the process connects to a port not in the 99th percentile of its historical activity or spawns a child process never seen before. For example, `svchost.exe` spawning `powershell.exe` would be highly anomalous. 3. (Machine Learning) Apply time-series analysis (e.g., ARIMA) to the volume of outbound data (`orig_bytes` in Zeek conn.log) for each critical system process. An alert is triggered if the observed data volume significantly deviates from the forecasted volume, suggesting exfiltration or C2 activity."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary using Extra Window Memory Injection to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.011",
        "name": "Extra Window Memory Injection",
        "evidence": [
          {
            "description": "A user-facing application like `iexplore.exe` is observed in Zeek logs making a DNS query for a known malicious domain and subsequently establishing a TCP connection to the resolved IP address on a non-standard port like 4444.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Web Proxies, Endpoint devices",
            "action": "1. (Symbolic) Join network connection logs (Zeek conn.log) with a threat intelligence feed of malicious IPs/domains. Alert when a process like `chrome.exe`, `winword.exe`, or `outlook.exe` communicates with a listed indicator. 2. (Statistical) Analyze the JA3 hashes from TLS handshakes (Zeek ssl.log) initiated by common user applications. Maintain a baseline of common hashes for each application and alert on the appearance of rare or known-malicious JA3 hashes, which indicate a non-standard TLS client (e.g., flag hashes with a frequency below 1%). 3. (Machine Learning) Use an LSTM-based autoencoder trained on benign network traffic patterns (connection frequency, duration, data size) to detect anomalous C2-like beaconing. Highly regular connections with small, fixed-size payloads from a user application would be flagged."
          },
          {
            "description": "A GUI application such as `acrord32.exe` (Adobe Reader) is observed spawning `powershell.exe` with a Base64-encoded command line (Windows Event ID 4688), which then initiates a network connection to download a file.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers",
            "action": "1. (Symbolic) Alert when a GUI application (e.g., `winword.exe`, `excel.exe`, `acrord32.exe`) spawns a child process of `cmd.exe`, `powershell.exe`, or `rundll32.exe`. 2. (Statistical) For each common GUI parent process, build a frequency distribution of its child processes. Alert when a child process is spawned that is statistically rare (e.g., seen in <0.5% of instances). Additionally, calculate the Shannon entropy of the child process's command line; alert on values exceeding the 98th percentile. 3. (Machine Learning) Use a graph-based anomaly detection model on process relationship graphs. Train the model on benign process trees and flag new, unseen subgraphs, such as `acrord32.exe -> powershell.exe -> external_ip_connection`, as anomalous."
          },
          {
            "description": "A non-networking graphical application like `calc.exe` is observed making an outbound TCP connection to an external IP address on port 53 (Windows Event ID 5156 and Zeek conn.log), potentially indicating DNS tunneling.",
            "data_sources": [
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, DNS Servers",
            "action": "1. (Symbolic) Maintain an explicit list of non-networking applications (e.g., `notepad.exe`, `calc.exe`, `mspaint.exe`). Trigger a high-severity alert if any process on this list generates an outbound network connection (Event ID 5156 or Zeek conn.log). 2. (Statistical) For applications that are expected to use the network, baseline their destination ports. Alert if a connection is made to a port outside the top 99% of commonly used ports for that application (e.g., `chrome.exe` connecting to port 6667/IRC). 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) to group processes based on network behavior features (ports, protocols, data volume, geolocation). A process like `svchost.exe` suddenly moving from a cluster of 'internal services' to a cluster of 'external C2' would be a significant anomaly."
          },
          {
            "description": "The process `outlook.exe` shows a 10x increase in outbound data volume over its 30-day moving average (from Zeek conn.log), coinciding with a spike in Application Error events (Windows Event ID 1000) for that process, occurring outside of normal business hours.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 1000"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, Mail Servers",
            "action": "1. (Symbolic) Alert if a process generates more than 5 application crash events (Event ID 1000) within 10 minutes, and this is correlated with network connections to domains or IPs registered within the last 30 days. 2. (Statistical) For each major user application, compute a time-series baseline of its network data volume per hour. Alert if the current volume exceeds 3 standard deviations above the moving average for that specific hour of the day and day of the week. 3. (Machine Learning) Use a change point detection algorithm on multiple time-series streams for a single process (e.g., network connections/min, data volume, application errors/min). An alert is triggered if the algorithm detects a simultaneous, statistically significant change point across multiple metrics, indicating a fundamental shift in the process's behavior."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]