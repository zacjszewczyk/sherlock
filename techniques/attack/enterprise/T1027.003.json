[
  {
    "information_requirement": "Is the adversary using steganography to evade defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.003",
        "name": "Steganography",
        "evidence": [
          {
            "description": "An MD5, SHA1, or SHA256 hash of a file, observed either during process execution on an endpoint or during a file transfer over the network, matches a known hash of a steganography tool or a file artifact from a verified threat campaign.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints (workstations, servers), Network egress/ingress points, Internal file shares",
            "action": [
              "Query process creation events (Windows Event ID 4688, Sysmon Event ID 1) and network file transfers (Zeek files.log) to extract all file hashes (MD5, SHA256). Correlate these hashes against a continuously updated threat intelligence feed of known steganography tool hashes and campaign-specific IOCs. Generate a high-severity alert upon any match.",
              "For files where the filename matches a known steganography tool (e.g., 'steghide.exe', 'openstego.jar') but the hash is unknown, calculate the prevalence of the hash across the enterprise. Flag hashes present on a small number of endpoints (e.g., < 5 hosts or < 1% of the population) for investigation as a potential custom or modified tool.",
              "Train a classification model (e.g., Gradient Boosting or Random Forest) using features extracted from file metadata, including file size, byte entropy, PE header information (for executables), MIME type from Zeek files.log, and file name string characteristics (length, special characters). Use this model to score all new executables and media files. High probability scores indicate a file is likely related to steganography and should be prioritized for analysis."
            ]
          },
          {
            "description": "A process command-line string contains a combination of keywords (e.g., 'embed', 'extract'), specific flags (e.g., '-cf', '-ef'), and media file extensions (e.g., .png, .wav, .jpg) that are characteristic of steganography tool execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints (workstations, servers), Application servers, Developer workstations",
            "action": [
              "Using a SIEM, apply a set of regular expressions to all process command-line arguments from Windows Event ID 4688 and Sysmon Event ID 1. The regex should detect patterns combining steganography keywords ('embed', 'extract', 'hide', 'cover'), tool-specific flags ('-ef', '-sf', '-p', '-cf'), and media file extensions (.png, .jpg, .wav, .mp3) within the same command string. Generate an alert on any match.",
              "For each process, calculate the Shannon entropy of its command-line arguments. Establish a per-process baseline entropy (e.g., for powershell.exe, cmd.exe, python.exe). Flag any command execution where the entropy exceeds a high percentile threshold (e.g., 99th percentile) for that specific process name, especially if a media file extension is also present in the arguments. This can detect obfuscated or encoded commands.",
              "Use a natural language processing (NLP) model, such as a one-class SVM or an autoencoder, trained on a large dataset of benign command lines from the environment. This model learns the normal 'grammar' and structure of commands. Flag any command line that has a high reconstruction error or is classified as an outlier, particularly those involving media file paths, as potentially malicious steganography execution."
            ]
          },
          {
            "description": "An anomalous process lineage is observed where a parent process not typically associated with media file handling (e.g., powershell.exe, wscript.exe, python.exe) reads or writes a media file and subsequently spawns a child process that initiates an external network connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Internal web servers hosting user-generated content, Developer environments",
            "action": [
              "Define and monitor for explicit high-risk process parent-child-grandchild sequences. For example: [MS Office App -> powershell.exe -> (file access to .png) -> curl.exe -> (external IP)]. Correlate Windows Event IDs (4688/Sysmon 1, 11) with network events (Sysmon 3, Zeek conn.log) by joining on hostname and a tight time window (e.g., under 60 seconds) to detect and alert on these predefined malicious chains.",
              "Build a Markov chain model or a simple frequency table of all observed parent-child process relationships in the environment to establish a baseline of normal activity. For any new process chain involving media file access and a subsequent network connection, calculate the transition probability for each link in the chain. Alert on chains with an overall probability score below a low percentile threshold (e.g., < 1st percentile), indicating a rare and suspicious sequence.",
              "Employ a graph-based anomaly detection algorithm on process event data. Represent hosts, processes, and files as nodes, and events (creation, access) as edges. Train the model on historical data to learn normal graph structures and subgraphs. Flag new event sequences that form anomalous subgraphs, such as a scripting engine node connecting to a media file node which then connects to a new external IP node."
            ]
          },
          {
            "description": "A media file (e.g., image, audio, video) exhibits statistical properties inconsistent with its format, such as a byte entropy value significantly higher than the baseline for its file type, or a file size that is a statistical outlier when compared to files with similar metadata (e.g., image dimensions, audio bitrate).",
            "data_sources": [
              "Zeek files.log",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points, Critical file shares (e.g., SharePoint, network drives), Web application servers",
            "action": [
              "Deploy YARA rules that scan files in transit (via Zeek) and at rest (via EDR/Sysmon) for steganographic artifacts. Rules should target specific signatures, such as data appended after a PNG IEND chunk, invalid LSB values in image headers, or magic bytes of known steganography tools embedded within media files. Alert on any positive match.",
              "For all media files extracted from network traffic (Zeek files.log) or created on disk (Sysmon Event ID 11), calculate the byte entropy. Maintain a running baseline (mean and standard deviation) of entropy values for each distinct file type (MIME type). Flag any file where the entropy exceeds a dynamic threshold, such as mean + 3 standard deviations or the 99th percentile for its file type, for manual review.",
              "For each major media file type, train a regression model (e.g., linear regression) to predict file size based on its structural metadata (e.g., for a JPEG: image width, height, color depth). Feed the output (the prediction error or residual) along with other features like byte entropy into an unsupervised anomaly detection model like Isolation Forest. This multi-feature model will identify files that are anomalous across several dimensions, making them strong candidates for containing hidden data."
            ]
          },
          {
            "description": "A user or host's network traffic profile shows anomalous patterns related to media file transfers, including a sudden spike in the volume or frequency of such files, transfers to or from geographically rare destinations, or the use of non-standard ports or protocols for exfiltration.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points (firewalls, proxies), VPN concentrators, DNS servers, User subnets",
            "action": [
              "Continuously monitor Zeek http.log and conn.log for media file transfers (identified by MIME type or URI extension) to or from IP addresses, domains, or ASNs present on threat intelligence blocklists or lists of newly registered domains (NRDs). Generate a high-severity alert on any such transfer.",
              "For each user/host, establish a multi-metric baseline of media file transfer activity over a 30-day window. Metrics should include total bytes transferred per hour, frequency of transfers, and a set of unique destination countries/ASNs. Alert when a user's activity exceeds a high percentile threshold (e.g., 95th percentile) on volume/frequency, or when a transfer is made to a destination country/ASN not seen in that user's baseline.",
              "Implement a time-series anomaly detection model (e.g., ARIMA or an LSTM-based autoencoder) for each user's media file data volume (bytes/hour). The model will forecast the expected volume for the next time interval based on historical patterns. Generate an alert if the actual observed volume significantly exceeds the model's prediction confidence interval, indicating a sudden, uncharacteristic burst of data exfiltration disguised as media file transfers."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]