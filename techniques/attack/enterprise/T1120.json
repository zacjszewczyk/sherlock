[
  {
    "information_requirement": "Has the adversary initiated peripheral device discovery?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1120",
        "name": "Peripheral Device Discovery",
        "evidence": [
          {
            "description": "A process is created with a file hash or script block hash that matches a known indicator of compromise (IOC) for a peripheral device discovery tool.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers (e.g., Domain Controllers, Application Servers)",
            "action": "Symbolic: Continuously match file hashes from process creation events (Windows Event ID 4688) and script block content hashes (Windows Event ID 4104) against a CTI feed of known malicious discovery tools (e.g., Seatbelt, SharpHound). Alert on any match. Statistical: For processes not matching known hashes, calculate the entropy of the process name and command line. Flag processes with high entropy process names executing discovery commands, as this may indicate packed or randomized tool names. Establish a baseline for command-line entropy per user and flag deviations greater than 3 standard deviations from the user's norm. ML: Train a classification model (e.g., Random Forest) using features like parent process, command-line arguments, file hash, and user context to predict whether a process execution is malicious. Use labeled data from past incidents and known good administrative activity to score new process events in real-time."
          },
          {
            "description": "Anomalous execution of built-in system utilities or PowerShell cmdlets used for device enumeration, such as 'systeminfo', 'driverquery', 'fsutil fsinfo drives', 'Get-PnpDevice', or 'wmic path CIM_LogicalDevice'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, File Servers",
            "action": "Symbolic: Create a watchlist of specific command strings and PowerShell cmdlets associated with peripheral device enumeration (e.g., 'systeminfo', 'driverquery', 'Get-PnpDevice', 'Get-CimInstance Win32_PnPEntity', 'fsutil fsinfo drives'). Generate an alert for any execution of these commands by users outside of standard IT/administrator groups. Statistical: For each command on the watchlist, establish a baseline of execution frequency per host and per user over a 30-day rolling window. Calculate the 95th percentile for execution counts. Alert when a user or host exceeds this threshold within a 24-hour period. ML: Use an unsupervised learning model (e.g., Isolation Forest) on command-line execution data, using features like the command, user, host, time of day, and parent process. The model will identify anomalous executions that differ from established patterns of normal administrative activity."
          },
          {
            "description": "A peripheral device discovery command is executed by a process with an anomalous parent, such as an Office application, web browser, or web server process, or under a non-interactive service account context.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Servers, Application Servers",
            "action": "Symbolic: Define and enforce explicit forbidden parent-child process relationships. Alert on any instance where a discovery command process (e.g., 'cmd.exe' or 'powershell.exe' with discovery arguments) is spawned by a parent process such as 'WINWORD.EXE', 'OUTLOOK.EXE', 'CHROME.EXE', or 'w3wp.exe'. Statistical: Model normal parent-child process relationships across the environment by calculating the probability of a given parent spawning a child that executes a discovery command. Alert when this conditional probability is exceptionally low (e.g., p < 0.01) based on historical data. ML: Apply a sequence analysis model like a Hidden Markov Model (HMM) to process execution chains. Train the model on benign activity sequences. When a new sequence involving device discovery is observed, calculate its likelihood score under the trained model and flag sequences with very low likelihood scores as anomalous."
          },
          {
            "description": "A single host or user account generates a statistically significant volume of peripheral device discovery queries locally or against remote systems in a short time frame.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek dce_rpc.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Network Segments (monitored by Zeek)",
            "action": "Symbolic: Define a simple threshold rule to alert if a single source host executes more than 10 distinct device discovery commands or targets more than 5 remote hosts with RPC enumeration calls (observed in Zeek dce_rpc.log) within a 5-minute window. Statistical: For each source host, aggregate discovery command counts (from Event ID 4688/4104) into 1-minute time bins. Use a Z-score or Inter-Quartile Range (IQR) method to detect statistical outliers in the time series of command counts, alerting if the count exceeds 3 standard deviations or 1.5 * IQR above the third quartile of the host's historical baseline. ML: Implement a time series forecasting model (e.g., ARIMA) for each host's discovery activity volume. Alert if the observed activity significantly deviates from the model's prediction."
          },
          {
            "description": "Peripheral device discovery activity occurs as part of a logical attack chain, such as immediately following a remote access event and preceding the use of a discovered removable drive for data staging.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, User Workstations with removable media access, File Servers",
            "action": "Symbolic: Create a stateful correlation rule that triggers if the following sequence occurs for the same user/host within a 30-minute window: 1. Successful remote login (Event ID 4624, Logon Type 3/10). 2. Execution of 'fsutil fsinfo drives' (Event ID 4688). 3. Attempt to access an object on a removable drive (Event ID 4663, Object Type 'File'). Statistical: Develop a risk scoring system. Assign points for suspicious events (e.g., remote login from rare geo: +10, discovery command: +5, file write to removable media: +15). Sum scores for a user/host over a rolling 1-hour window. Alert if the cumulative score exceeds a statistically determined threshold (e.g., 99th percentile). ML: Use a graph-based analysis approach. Model entities (users, hosts, processes) as nodes and their interactions as edges. Train a graph neural network (GNN) to identify subgraphs representing malicious sequences, such as 'Logon -> Discover -> Stage', and flag them in real-time."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]