[
  {
    "information_requirement": "Is the adversary using search engines to find exploitable information about our organization? (PIR)",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1593.002",
        "name": "Search Engines",
        "evidence": [
          {
            "description": "One or more publicly indexed documents or web pages accessible via search engines containing specific sensitive keywords ('password', 'confidential', 'internal-only') or file types ('.config', '.sql', '.log') associated with the organization's domains or intellectual property.",
            "data_sources": [
              "Automated Search Engine API Results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing websites, Public code repositories (e.g., GitHub, GitLab) associated with the organization, Public cloud storage buckets",
            "action": [
              "Symbolic: Periodically execute automated search queries (dorks) against public search engines (e.g., Google, Bing) using an API. Match results against a watchlist of high-risk keywords ('password', 'secret', 'api_key'), sensitive file extensions ('pem', 'sql', 'config'), and internal hostnames. Trigger an alert for any direct match.",
              "Statistical: For each discovered public document, calculate a risk score based on the frequency and type of sensitive keywords found. Establish a baseline for 'normal' public document content. Flag documents whose risk score exceeds the 95th percentile of the baseline as requiring manual review.",
              "ML: Use a pre-trained text classification model (e.g., a Naive Bayes or SVM classifier) to categorize discovered documents (e.g., 'sensitive', 'technical', 'benign'). Train the model on a labeled dataset of known sensitive leaks and public marketing materials. Any document classified as 'sensitive' with high confidence should generate an alert."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) on a server or non-developer workstation that executes a command-line download utility (`curl.exe`, `wget.exe`, `bitsadmin.exe`, `certutil.exe`) with a URL argument pointing to a non-corporate, non-whitelisted domain.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (Domain Controllers, Database Servers), User endpoints, DMZ servers",
            "action": [
              "Symbolic: Monitor for process creation events (Windows Event ID 4688) where the process name is `curl.exe`, `wget.exe`, `bitsadmin.exe`, or `certutil.exe` and the command line contains a URL. Correlate the destination IP from the URL with a threat intelligence feed of known malicious domains. Alert on any match.",
              "Statistical: For each host, establish a baseline of command-line download utility usage. Calculate the rarity of each utility's execution per host/user. Flag any execution where the utility's frequency is more than 3 standard deviations below its mean (i.e., it's a rare event for that host/user), especially on server assets.",
              "ML: Develop a logistic regression model to predict the likelihood of a download being malicious. Features could include: host role (server, workstation), user role (admin, developer), file extension of the downloaded file (from URL or `Zeek files.log`), domain age and reputation of the source URL, and time of day. An alert is generated for downloads with a high probability score."
            ]
          },
          {
            "description": "A series of HTTP requests to a public-facing web server, originating from a single external IP address, where the `Referer` header contains a search engine URL with reconnaissance-related keywords (e.g., 'site:mycorp.com filetype:pdf') and the request rate exceeds a defined threshold.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Web server farms, Internet gateway",
            "action": [
              "Symbolic: From `Zeek http.log`, parse the `Referer` header for all inbound traffic. Match the query string portion of the referrer against a list of known 'dorking' operators and keywords (e.g., `filetype:`, `inurl:admin`, `intitle:index of`). Alert on any match from an external source IP.",
              "Statistical: For each external source IP, calculate the entropy of requested URI paths over a 5-minute window. Also, calculate the ratio of successful requests (HTTP 200) to client errors (HTTP 404). Establish a baseline for these metrics. Alert when an IP's URI entropy and 404 error rate both exceed the 98th percentile, indicating scanning or enumeration activity.",
              "ML: Use a time-series forecasting model (e.g., ARIMA or Prophet) on `Zeek conn.log` data to predict the expected volume of traffic from search engine referrers. An alert is triggered when the actual traffic volume significantly deviates from the predicted volume (e.g., exceeds the 99% confidence interval), suggesting a large-scale, automated reconnaissance campaign initiated from search results."
            ]
          },
          {
            "description": "An outbound HTTP GET request from an internal client IP to an external URL that is present on a watchlist of known sensitive data exposures, as identified through external reconnaissance.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Proxy server logs, User subnets",
            "action": [
              "Symbolic: Maintain a dynamic threat intelligence feed or watchlist of URLs known to host leaked corporate data. Ingest this list into the SIEM. Create a rule that triggers an immediate, high-severity alert when `Zeek http.log` shows an outbound request where the `host` and `uri` fields exactly match an entry on the watchlist.",
              "Statistical: For all outbound web traffic, calculate the Jaccard similarity between the requested URL and the URLs on the sensitive data watchlist. While an exact match is a high-fidelity alert, a high similarity score (e.g., > 0.85) could indicate access to a slightly different but related path on the same compromised site. Flag high-similarity requests for investigation.",
              "ML: Use an anomaly detection model (e.g., Isolation Forest) on outbound web traffic patterns per user. Features can include requested domain reputation, category of the destination site, and historical frequency of access by the user or their peer group. The model can flag an access request to a leaked data URL as anomalous even if it's the first time that specific URL is seen, based on its characteristics being dissimilar to the user's normal browsing behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]