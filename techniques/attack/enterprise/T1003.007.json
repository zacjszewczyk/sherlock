[
  {
    "information_requirement": "Has the adversary obtained credentials from the proc filesystem?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1003.007",
        "name": "Proc Filesystem",
        "evidence": [
          {
            "description": "A process execution event is recorded where the process name, command line, or file hash matches a known credential dumping tool that leverages the /proc filesystem (e.g., MimiPenguin, procdump for Linux).",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts, particularly servers hosting sensitive applications (e.g., web servers, database servers) and developer workstations.",
            "action": "Symbolic: Create and maintain a watchlist of process names (e.g., mimipenguin) and file hashes for known /proc-scraping tools. Generate a high-priority alert upon any match from process execution logs (Sysmon for Linux Event ID 1, Auditd execve). Statistical: For processes not on the watchlist, calculate the rarity of the process name on a given host and across the enterprise. A process that is both globally rare and locally rare (e.g., appearing on <1% of hosts and running <5 times on the source host in 30 days) that also accesses /proc should have its risk score elevated. Machine Learning: Train a supervised classification model (e.g., a Random Forest) using features from process execution events (parent process, user context, command-line arguments, file path entropy). Use a labeled dataset of known malicious and benign tool executions to classify new, unknown processes that interact with the /proc filesystem as suspicious or benign."
          },
          {
            "description": "A command-line execution event is recorded involving a common system utility (e.g., grep, strings, dd, gdb, cat) with arguments explicitly targeting sensitive memory-related paths within the proc filesystem, such as '/proc/[0-9]*/mem' or '/proc/[0-9]*/maps'.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs",
              "Shell history logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts, with a focus on servers running multi-user services and systems accessible by external-facing users or services.",
            "action": "Symbolic: Deploy regular expression rules in the SIEM to detect command-line arguments targeting /proc memory structures. Example rule: (process_name IN ('grep', 'cat', 'strings', 'dd', 'gdb') AND command_line CONTAINS '/proc/[0-9]*/mem'). Alert on any matches. Statistical: For each user and host, establish a baseline of command-line argument patterns. Calculate the Shannon entropy of command lines that reference /proc. A command with an unusually high entropy score (e.g., > 99th percentile for that user) or that falls outside the normal Inter-Quartile Range (IQR) of historical command structures for that user/host pairing indicates potential obfuscation or scripting and should be flagged. Machine Learning: Use an unsupervised learning model, such as an autoencoder, trained on command-line logs from system administrators and legitimate monitoring tools. Feed new command-line events into the model; commands with a high reconstruction error suggest a deviation from normal administrative behavior and are likely anomalous or malicious."
          },
          {
            "description": "A process access event is logged where a source process reads the memory of a target process, and this source-target pairing is anomalous or explicitly high-risk (e.g., a web server process reading memory of 'sshd').",
            "data_sources": [
              "Sysmon for Linux Event ID 10",
              "Linux Auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers handling authentication (e.g., LDAP servers, SSH jump hosts) or storing sensitive data in-memory.",
            "action": "Symbolic: Define explicit high-risk rules for process access. For example, (source_process IN ('nginx', 'apache2', 'bash', 'python') AND target_process IN ('sshd', 'sudo', 'gnome-keyring-d', 'keepassxc', 'mysqld')). Any match on these pre-defined risky pairings should generate an immediate alert. Statistical: Build a frequency table of all source-process-to-target-process memory access events over a 30-day period. Identify pairings that are statistically rare (e.g., occurring in the bottom 1st percentile of all pairings). Score these rare pairings based on the sensitivity of the target process. Investigate pairings that exceed a combined rarity and sensitivity score threshold. Machine Learning: Apply a community detection algorithm (e.g., Louvain Modularity) to a graph of process access events. Processes that normally interact will form tight clusters. An access event that bridges two otherwise disconnected clusters (e.g., a web server process accessing a system administration process cluster) represents a significant anomaly and should be investigated."
          },
          {
            "description": "A successful remote authentication event (e.g., SSH, Kerberos, RDP) originates from a Linux host within a short time window (e.g., 1-60 minutes) after a high-risk /proc filesystem access event was detected on that same host.",
            "data_sources": [
              "Linux Auditd logs",
              "Zeek ssh.log",
              "Zeek kerberos.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network choke points (e.g., firewalls), authentication servers (e.g., Domain Controllers, RADIUS servers), and high-value target systems across the enterprise.",
            "action": "Symbolic: Create a SIEM correlation rule that triggers when an alert for T1003.007 on host_A is followed within 60 minutes by a successful authentication event (Zeek ssh.log, Windows Event ID 4624) originating from host_A's IP address to any other system, especially if the destination is a different network segment or a high-value asset. Statistical: For a host that triggers a /proc access alert, analyze the subsequent outbound authentication events. Compare the destination systems and user accounts to the host's historical baseline. A login to a destination server that is in the bottom 5th percentile of destinations for that host, or using an account that has never logged in from that host before, should be considered highly suspicious. Machine Learning: Use a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) on the volume of successful outbound authentications from each host. If a /proc access alert is followed by a statistically significant spike in authentication volume that the model flags as anomalous, escalate for investigation as potential credential abuse and lateral movement."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]