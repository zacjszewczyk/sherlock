[
  {
    "information_requirement": "Is the adversary bypassing network defenses through unauthorized network boundary bridging?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1599",
        "name": "Network Boundary Bridging",
        "evidence": [
          {
            "description": "A connection is established to a network boundary device's management interface (e.g., SSH, HTTPS, Telnet) from an IP address on a threat intelligence feed, OR network traffic destined for the device matches a known vulnerability signature.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Network Device Syslog"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter firewalls, VPN concentrators, Internal network segmentation gateways (e.g., routers, layer-3 switches)",
            "action": [
              "Define a list of network boundary device IP addresses and their management ports (e.g., 22, 23, 443, 8443). Ingest a threat intelligence feed of known malicious IP addresses. Create a rule to alert when an inbound connection in Zeek conn.log has a `id.resp_h` in the device list, a `id.resp_p` in the management port list, and an `id.orig_h` that exists in the threat intelligence feed. Additionally, alert on any signature match in Zeek notice.log where the destination is a boundary device.",
              "For all successful connections to boundary device management interfaces, baseline the source Autonomous System Number (ASN) and source country over a 90-day period. Calculate the frequency of each ASN/country pair. Alert on any new successful connection from an ASN/country pair that has never been seen before or that falls into the bottom 5th percentile of frequency.",
              "Train a time-series forecasting model (e.g., Prophet, ARIMA) on the hourly count of connection attempts to management interfaces, segmented by device. Alert when the observed volume of attempts in an hour exceeds the model's forecasted upper confidence interval (e.g., 95% confidence), which can indicate scanning or brute-force activity."
            ]
          },
          {
            "description": "A process is created on a multi-homed host using a command-line utility to create or modify a network bridge. Examples include using `netsh.exe` with arguments like 'bridge add adapter' or using PowerShell cmdlets like `New-NetAdapter` with bridging-related parameters.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-homed servers (e.g., web servers in a DMZ with an internal management interface), Developer workstations with multiple network adapters (e.g., physical and virtual)",
            "action": [
              "Create a detection rule for Windows Event ID 4688 where `ProcessName` is `netsh.exe` and `CommandLine` contains 'bridge' and 'add' and 'adapter'. Create a parallel rule for PowerShell Event ID 4104 Script Block Logging that triggers on the use of `New-NetAdapter` in conjunction with bridging-related functions.",
              "On known multi-homed hosts, establish a baseline of all command-line arguments used with `netsh.exe` and PowerShell networking cmdlets. Calculate the term frequency-inverse document frequency (TF-IDF) for each argument across the environment. Alert when a command is executed that contains arguments with an exceptionally high TF-IDF score (e.g., top 1%), indicating rarity and potential suspiciousness.",
              "Train a classification model (e.g., Logistic Regression) on command-line strings from Event ID 4688 and 4104, labeled as benign (routine admin tasks) or malicious (bridging, unusual configuration). Use features like tokenized arguments, command length, and presence of special characters. Deploy the model to classify new commands in real-time and alert when a command is classified as malicious with a confidence score above 0.90."
            ]
          },
          {
            "description": "A multi-homed host is observed receiving an inbound connection on one network interface and, within a short time window (e.g., < 2 seconds), initiating a related outbound connection from a second interface to a different network segment, where this traffic-forwarding behavior is not explicitly allowlisted.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps monitoring traffic to/from DMZ segments, Core switch SPAN ports, Multi-homed servers",
            "action": [
              "Identify multi-homed hosts by IP. For each inbound connection to a host (`id.resp_h`), search for an outbound connection from that same host (`id.orig_h`) within 2 seconds. Alert if the outbound destination (`id.resp_h`) is in a different subnet than the inbound source (`id.orig_h`) AND the tuple (inbound port, outbound port, protocol) is not on a pre-defined allowlist for known proxy/relay behavior.",
              "For each multi-homed host, create a baseline profile of traffic forwarding. For each pair of interfaces, calculate the mean and standard deviation of the ratio of `orig_bytes` to `resp_bytes` for connections that exhibit relay behavior (inbound followed by outbound). Alert if a new relaying session shows a byte ratio that is more than 3 standard deviations from the mean for that interface pair and protocol, which could indicate anomalous data transfer.",
              "From Zeek conn.log, create feature vectors for connections on multi-homed hosts, including `id.resp_p` (port), `proto`, `duration`, `orig_bytes`, `resp_bytes`, and the interface subnet. Use a clustering algorithm (e.g., DBSCAN) to group connections into clusters of normal behavior (e.g., 'DMZ Web Traffic', 'Internal Management'). Alert on any connection that the model classifies as an outlier/noise, as it does not conform to any established normal traffic pattern."
            ]
          },
          {
            "description": "One or more network connections are logged that directly violate a defined network segmentation policy. For example, traffic is observed from a workstation subnet to a database server subnet on any port, when policy dictates all access must be via an application server.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segmentation boundaries (e.g., between PCI and corporate LANs), DMZ perimeter, Internet egress/ingress points",
            "action": [
              "Define network zones (e.g., 'Workstations', 'Databases', 'DMZ') by subnet. Create a stateful rule matrix defining allowed traffic paths (Source Zone, Destination Zone, Destination Port, Protocol). Ingest Zeek conn.log, enrich each connection with source and destination zone information based on its IPs. Alert on any connection that does not have a corresponding 'allow' entry in the rule matrix.",
              "For each allowed inter-zone communication path (e.g., Workstation Zone to DMZ Web Server Zone on port 443), calculate the 99th percentile for the number of unique destination hosts contacted from a single source host per hour. Alert when a source host exceeds this threshold, indicating potential misuse of an allowed path for internal scanning or lateral movement.",
              "Train a time-series forecasting model (e.g., SARIMA) on the hourly volume of denied connections at a critical network boundary (as identified by the symbolic rule). Alert when the observed number of denials drops significantly below the model's forecasted lower confidence bound for a sustained period (e.g., >15 minutes). This 'absence of expected denials' could indicate a firewall policy was disabled or compromised."
            ]
          },
          {
            "description": "A successful administrative login to a network boundary device (e.g., firewall, router) from an anomalous source is followed within a 60-minute window by traffic that violates the device's intended segmentation policy.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624",
              "Network Device Syslog"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Firewall management interfaces, Router and switch management interfaces, Configuration management servers, Network taps at segmentation boundaries",
            "action": [
              "Create a list of approved IP addresses/subnets for network administration. Alert when a successful login event (from device syslog or Windows Event ID 4624 on a management host) to a network device occurs from a source IP not on the list. Chain this alert: if it fires, automatically trigger a higher-severity alert for any policy violation (from Evidence 4) originating from that same boundary device in the subsequent 60 minutes.",
              "For all administrative logins to network devices, build a historical profile of source IP geolocation, ASN, and login hour-of-day. For each new login, calculate a risk score based on the rarity (e.g., using percentile rank) of these attributes. If a login's composite risk score exceeds a predefined threshold (e.g., > 95th percentile), flag the session as high-risk and automatically query all traffic passing through the associated device for policy violations for the next hour.",
              "Train an autoencoder neural network on feature vectors representing legitimate administrative sessions on network devices. Features should include source IP geolocation, time of day, day of week, and connection duration from device syslogs. A login session that produces a high reconstruction error from the autoencoder is flagged as anomalous. Use this anomaly flag as a direct trigger for a high-priority SOC investigation into traffic flowing through the associated device."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]