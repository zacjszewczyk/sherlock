[
  {
    "information_requirement": "Is the adversary acquiring information about vulnerabilities to support targeting?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1588.006",
        "name": "Vulnerabilities",
        "evidence": [
          {
            "description": "A connection attempt from an external IP address that is present on a high-confidence threat intelligence feed of known malicious scanners or command and control (C2) infrastructure.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing firewalls, Web application firewalls (WAFs), Network Intrusion Detection/Prevention Systems (NIDS/NIPS)",
            "action": "1. Symbolic (IOC): Continuously ingest high-confidence threat intelligence feeds (e.g., known scanners, botnets, C2 IPs) into a SIEM. Create a rule that joins inbound Zeek conn.log records with this intelligence list on the source IP address. Alert on any match, excluding IPs on an approved scanner allow-list. 2. Statistical: For IPs that match the IOC list, analyze their historical connection patterns. Calculate the entropy of the destination ports they have contacted in the last 7 days. A high entropy score for an IP on a threat feed suggests broad, non-specific scanning and should be prioritized higher than an IP that repeatedly contacts a single port. 3. Machine Learning: Train a logistic regression classifier on historical Zeek conn.log data, using features like source_ip, destination_port, protocol, and connection_state, with a label indicating if the IP was on a threat list at the time. Use this model to predict the probability that a new, unseen IP address is malicious, allowing for the detection of previously unknown malicious scanners."
          },
          {
            "description": "An inbound HTTP request contains a User-Agent, URI path, or request body payload matching a known signature for a vulnerability scanner (e.g., Nmap, Nikto) or a specific vulnerability probe (e.g., JNDI strings for Log4Shell).",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, Application load balancers, Reverse proxies",
            "action": "1. Symbolic (Signature): In the SIEM, apply a ruleset of regular expressions against the user_agent, uri, and request_body fields of Zeek http.log data. These regex patterns should match known scanner User-Agents (e.g., nmap, nikto, acunetix), directory traversal attempts (e.g., ../), and specific vulnerability probes (e.g., jndi:ldap://). Generate an alert on any match from an external source IP. 2. Statistical: For each external source IP, calculate the ratio of HTTP requests that result in a 4xx client error (e.g., 404 Not Found) to total requests over a 1-hour window. A significantly high error ratio (e.g., > 90th percentile of the baseline for all external IPs) indicates forceful browsing or scanning for non-existent but potentially vulnerable endpoints. 3. Machine Learning: Use a pre-trained Natural Language Processing (NLP) model or a character-level Convolutional Neural Network (CNN) to classify URI paths and query parameters as benign or malicious. This can identify novel or obfuscated scanning patterns that regex-based signatures might miss."
          },
          {
            "description": "A single external source IP address establishes connections to a statistically significant number of unique destination hosts (horizontal scan) or unique destination ports on a single host (vertical scan) within a defined time window.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing firewalls, Network Intrusion Detection/Prevention Systems (NIDS/NIPS), DMZ network segments",
            "action": "1. Symbolic (Threshold): Create a rule that for each external source IP, counts the number of unique destination ports contacted within a 5-minute window. If the count exceeds a hard threshold (e.g., > 20 ports), generate a low-severity alert for potential vertical scanning. Similarly, if the count of unique destination hosts exceeds a threshold (e.g., > 50 hosts), alert for horizontal scanning. 2. Statistical: Aggregate Zeek conn.log data by source IP over a 15-minute window. For each IP, calculate the count of distinct destination hosts and distinct destination ports. Establish a baseline distribution for these counts across all external traffic. Flag any source IP where either count exceeds 3 standard deviations from the mean or falls above the 99th percentile. 3. Machine Learning: Use a density-based clustering algorithm like DBSCAN on a dataset of (source_ip, destination_ip, destination_port) tuples from Zeek conn.log. Legitimate traffic will form dense clusters, while scanning activity (both horizontal and vertical) will be identified as noise or sparse clusters, allowing for detection without pre-defined thresholds."
          },
          {
            "description": "A statistically significant increase in connection attempts from a diverse set of external IP addresses, all targeting the same destination port across the network, especially if the activity surge correlates with a recent public vulnerability disclosure for that service.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing firewalls, Public-facing servers (e.g., web, email, VPN), DMZ network segments",
            "action": "1. Symbolic (Correlation): Maintain a vulnerability intelligence feed (e.g., NVD, CISA KEV). When a new high-severity vulnerability is announced for a specific service/port, create a targeted rule to monitor for any increase in inbound connection attempts to that port from new or previously unseen source IPs. 2. Statistical: For each critical destination port, create a time series of the number of unique source IPs connecting per hour. Calculate a moving average and standard deviation. Alert when the current count of unique source IPs exceeds the moving average by a significant margin (e.g., > 4 standard deviations), indicating a potential distributed scanning campaign. 3. Machine Learning: Employ a time series anomaly detection model (e.g., ARIMA) for each critical service port, trained on historical connection volume and unique source IP counts. An alert is generated when observed traffic significantly deviates from the model's forecast, indicating an anomalous event like a low-and-slow scan."
          },
          {
            "description": "A process creation event (e.g., nmap.exe, powershell.exe with Test-NetConnection) on a non-IT/security endpoint is immediately followed by network connections from that host to an anomalously high number of internal IP addresses or ports.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoint subnets, Server subnets, Domain Controllers, Internal network switches and routers",
            "action": "1. Symbolic (Signature): Create a rule that triggers when a process creation event (Windows Event ID 4688) with a process name from a watchlist (e.g., nmap.exe, masscan.exe, advanced_ip_scanner.exe) is observed on a host that is NOT in the 'IT Administrators' or 'Vulnerability Scanners' asset group. 2. Statistical: For each internal host, baseline the number of unique internal IPs and ports it connects to daily using Zeek conn.log. Use the Inter-Quartile Range (IQR) method to define 'normal' behavior. Alert when a host's connection count for a 1-hour window exceeds the upper bound of its baseline (Q3 + 1.5 * IQR), indicating potential internal scanning. 3. Machine Learning: Model the internal network as a graph where nodes are hosts and edges are connections. Use a graph-based anomaly detection algorithm trained on normal communication patterns to score the rarity of new connections. An adversary performing internal reconnaissance will create unusual, high-scoring edges (e.g., a marketing workstation connecting to database admin ports), flagging likely lateral movement preparation."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]