[
  {
    "information_requirement": "Has the adversary used cron for malicious code execution?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053.003",
        "name": "Cron",
        "evidence": [
          {
            "description": "A Linux/Unix host makes an outbound network connection at a statistically significant, repeating interval to a destination matching a known malicious indicator (IP, domain, JA3 hash).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Linux/Unix Server Fleet",
            "action": "1. (Symbolic) Join Zeek conn.log with a threat intelligence feed on destination IP addresses. Separately, join Zeek dns.log query fields with a malicious domain feed and Zeek ssl.log JA3/JA3s hashes with a malicious hash feed. Alert on any matches. 2. (Statistical) For hosts making connections to suspicious (e.g., newly registered domains) but unconfirmed malicious destinations, calculate the inter-arrival time of connections. A low variance or low entropy in these times indicates scheduling. Flag any host where the standard deviation of inter-arrival times for a given destination is below a threshold (e.g., < 1 second). 3. (Machine Learning) Use a time series forecasting model (e.g., ARIMA) on the connection count per minute for each source-destination pair. An autocorrelation function (ACF) plot showing significant lags at regular intervals (e.g., 60, 120, 180 minutes) confirms a periodic schedule."
          },
          {
            "description": "A Windows host shows process creation events for remote administration tools (e.g., PsExec.exe, wmic.exe) where the logon session originates from a Linux/Unix host at a highly regular interval.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Windows Servers (Domain Controllers, File Servers), Linux/Unix management servers",
            "action": "1. (Symbolic) Search for Windows Event ID 4688 events with a ProcessName of 'psexec.exe', 'wmic.exe', or 'powershell.exe' containing remote execution arguments. Correlate the LogonId back to a Windows Event ID 4624 logon event (Type 3 - Network). Alert if the source IP in the 4624 event belongs to a Linux/Unix subnet. 2. (Statistical) For these correlated logon events, group by source IP and target user. Calculate the time difference between consecutive logons. A standard deviation below a small threshold (e.g., < 5 seconds) indicates a machine-generated schedule. Compare the logon frequency to the 99th percentile of logon frequencies for that user or source host. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on the logon timestamps for a given source IP/user pair. A dense cluster of events occurring at the same minute of the hour across multiple days should be flagged as a periodic, scheduled activity."
          },
          {
            "description": "A Linux/Unix host initiates a new, highly periodic outbound 'heartbeat' pattern, characterized by low data volume and low-entropy timing, not associated with known benign applications.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Resolvers, Linux/Unix Server Fleet",
            "action": "1. (Symbolic) Search Zeek conn.log for connections where orig_bytes and resp_bytes are consistently small (e.g., < 1KB) and the destination port is non-standard or known to be used by C2 frameworks. 2. (Statistical) For each source IP, calculate the Shannon entropy of the connection inter-arrival times over a 24-hour window; a very low entropy score indicates regularity. Separately, calculate the 95th percentile of connection data volume for the host; flag periodic connections that are also outliers due to their low data volume. 3. (Machine Learning) Apply time series decomposition (e.g., STL) to the connection count per minute for each source IP. A strong, high-frequency periodic component indicates a scheduled task. Classify the destination IP/domain using a model trained on features like domain age, popularity, and entropy to determine if it is a likely C2 server."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using cron for persistence?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053.003",
        "name": "Cron",
        "evidence": [
          {
            "description": "A host makes recurring, scheduled outbound connections over multiple days to a destination on a threat intelligence feed, or to a destination with characteristics of a C2 server (e.g., DGA-like domain, self-signed cert).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internet Gateway, Linux/Unix Server Fleet",
            "action": "1. (Symbolic) Correlate destination IPs from Zeek conn.log, domains from Zeek dns.log, and server certs/JA3 hashes from Zeek ssl.log against CTI feeds over a 30-day lookback period. Alert on any match that occurs more than once. 2. (Statistical) For hosts with recurring connections to a single external destination, calculate the daily connection frequency. A consistent daily frequency (low variance) over 7+ days is suspicious. Calculate the entropy of the requested subdomain labels in Zeek dns.log for a given parent domain; a high entropy value can indicate DGA, often used with scheduled callbacks. 3. (Machine Learning) Train a classifier (e.g., Random Forest) to identify C2 beaconing using features from Zeek conn.log such as connection duration, byte counts, and inter-arrival time. A time-series model can flag any connection pattern that persists with a strong periodic signal over a long duration (e.g., > 7 days)."
          },
          {
            "description": "A Windows service account experiences successful network logons (Type 3) from a Linux/Unix source IP at a statistically regular interval, outside of known administrative task schedules.",
            "data_sources": [
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication Servers (Domain Controllers), Windows Member Servers",
            "action": "1. (Symbolic) Filter Windows Event ID 4624 for LogonType 3 and a TargetUserName matching a service account pattern. Alert if the source IpAddress is from a non-Windows subnet and not on an allowlist of management servers. 2. (Statistical) For each service account, establish a baseline of logon frequency and source IPs. Alert if the number of logons from a new or rare source IP exceeds 3 standard deviations from the mean. Calculate the time difference between consecutive logons from the same source; a low variance indicates a scheduled task. 3. (Machine Learning) Use an anomaly detection model (e.g., Isolation Forest) on logon events, using features like source IP, target account, time of day, and day of week. The model can identify logons that are outliers compared to the established norm for service account activity."
          },
          {
            "description": "A host begins making periodic DNS requests for a specific domain without subsequent connection attempts (DNS tunneling), or initiates periodic connections over an unusual protocol/port combination (e.g., ICMP), consistent with a covert C2 channel activated by cron.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DNS Resolvers, Network Egress Points, Linux/Unix Server Fleet",
            "action": "1. (Symbolic) Search for periodic DNS TXT or A record requests where the subdomain appears encoded (e.g., a long, random-looking string) and is not followed by a Zeek conn.log entry to the resolved IP from the same source. 2. (Statistical) Calculate the ratio of DNS requests to outbound TCP/UDP connections for each host; a ratio significantly above the network-wide 95th percentile is anomalous. Analyze the periodicity of these DNS requests; low variance in inter-arrival time points to scheduling. 3. (Machine Learning) Use a clustering algorithm to group hosts based on their network protocol usage profile (e.g., percentage of traffic over TCP/80, TCP/443, UDP/53, ICMP). A host that suddenly moves to a cluster characterized by high usage of non-standard protocols is anomalous. A time series analysis on ICMP orig_bytes or DNS query counts can reveal the periodic 'heartbeat'."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using cron to escalate or abuse privileges?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053.003",
        "name": "Cron",
        "evidence": [
          {
            "description": "A successful network logon (Type 3) to a critical Windows host using a privileged account (e.g., Domain Admin) originates from a non-Windows IP and occurs at a fixed, repeating interval.",
            "data_sources": [
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Certificate Authority Servers, Tier 0 Servers",
            "action": "1. (Symbolic) Create a rule to alert on any Windows Event ID 4624 where LogonType is 3, the TargetUserSid is a member of a privileged group (e.g., Domain Admins), and the source IpAddress is not on a pre-approved list of administrative workstations. 2. (Statistical) For filtered privileged logons, group by source IpAddress and TargetUserName. Calculate the time deltas between consecutive events. A recurring pattern (e.g., every hour at the 5-minute mark) or a very low standard deviation (< 5s) in the time deltas is highly indicative of a scheduled task. 3. (Machine Learning) Model the behavior of privileged accounts using an anomaly detection algorithm. Features should include source IP, logon time of day, logon type, and day of week. A logon from a Linux host at 3 AM on a weekend would be flagged as a high-risk anomaly if that account's baseline is 9-5 from a Windows admin workstation."
          },
          {
            "description": "A privileged action, such as adding a user to a high-privilege group, occurs on a Windows system, and the event's timing correlates with periodic network access from a Linux/Unix host.",
            "data_sources": [
              "Windows Event ID 4732",
              "Windows Event ID 4728",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": "1. (Symbolic) Alert on any Windows Event ID 4732 or 4728 where a user is added to a privileged group (e.g., 'Domain Admins', 'Administrators'). 2. (Statistical) Correlate the timestamp of the group-add event with Windows Event ID 4624 logon events that occurred shortly before it (e.g., within 5 minutes). If the logon source is a Linux/Unix host and these correlated event pairs (logon -> group add) occur at a regular interval over time, it suggests an automated privilege escalation and persistence mechanism. 3. (Machine Learning) Use a graph-based analysis to link events. Create nodes for users, hosts, and groups. Create time-stamped edges for logons (4624) and group modifications (4732/4728). Search for subgraphs representing a periodic 'Linux Host -> Logon -> Privileged Group Add' pattern. Anomaly detection on the graph can find rare or suspicious sequences of events."
          },
          {
            "description": "A host from a non-administrative network segment initiates connections to sensitive Windows services (e.g., WinRM, RDP, RPC) on critical servers at a statistically regular interval.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Server Segments (e.g., DC subnet), User Workstation Segments",
            "action": "1. (Symbolic) Create an allowlist of IP ranges/hosts that are permitted to connect to sensitive ports (e.g., 3389, 5985, 135) on critical servers like Domain Controllers. Alert on any connection from a source IP not on this list. 2. (Statistical) For connections to these sensitive services from unapproved sources, analyze the connection timestamps. Use frequency analysis to identify connections occurring at regular intervals (e.g., every 30 minutes). Calculate the entropy of the inter-arrival times; low entropy indicates scheduling. 3. (Machine Learning) Use peer group analysis. Group servers by role (e.g., domain controllers, web servers). For each group, establish a baseline of normal inbound connection sources and protocols. A server receiving periodic connections from a host type that is anomalous for its peer group (e.g., a DC receiving periodic RDP from a dev web server) should be flagged."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]