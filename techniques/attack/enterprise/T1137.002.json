[
  {
    "information_requirement": "Has the adversary established persistence by abusing the Microsoft Office Test registry key?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1137.002",
        "name": "Office Test",
        "evidence": [
          {
            "description": "A DLL file written to the path specified in the '...Office test\\Special\\Perf' registry value lacks a valid Authenticode signature, is signed by a publisher not on an organizational allowlist, or has a hash that matches known-malicious indicators.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers with Microsoft Office installed, Threat Intelligence Platform",
            "action": [
              "Join Sysmon Event ID 13 (where TargetObject contains 'Office test\\Special\\Perf') with Sysmon Event ID 11 (File Create) on FileName and Hostname within a 1-minute window. Extract the SHA256 hash from the Event ID 11 event and query internal and external threat intelligence feeds for a match. Generate a high-severity alert on any match.",
              "Upon detection of the DLL from the symbolic logic step, parse its Authenticode signature. Maintain an enterprise-wide baseline of all software signing authorities observed over the last 90 days. If the DLL is unsigned, immediately flag for review. If it is signed, alert if the signing authority's prevalence is in the bottom 1st percentile, indicating a rare publisher.",
              "Feed the target DLL file into a static analysis pipeline with a pre-trained malware classification model (e.g., Gradient Boosting, LightGBM). The model should be trained on features extracted from the Portable Executable (PE) file, including: section entropies, IAT/EAT function counts, presence of debug symbols, string ratios, and file size. An output probability score exceeding a tuned threshold (e.g., > 0.85) should trigger an alert for manual analysis."
            ]
          },
          {
            "description": "A registry value is created or modified within the key path 'HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf' or 'HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf'.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Windows Event ID 4657",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers with Microsoft Office installed, Active Directory Domain Controllers",
            "action": [
              "Deploy a detection rule that generates a high-severity alert for any Sysmon Event ID 13 (Registry Value Set) or Windows Event ID 4657 (Registry Object Accessed/Modified) where the 'TargetObject' or 'ObjectName' field exactly matches 'HKU\\*\\Software\\Microsoft\\Office test\\Special\\Perf' or 'HKLM\\Software\\Microsoft\\Office test\\Special\\Perf'. As this key is non-default, any modification is inherently suspicious and requires investigation.",
              "For every process that modifies a registry key (Sysmon Event ID 13), build a baseline of typical parent processes from Sysmon Event ID 1. For modifications to the specific '...Office test\\Special\\Perf' key, calculate the rarity of the parent-child process relationship (e.g., 'explorer.exe' -> 'reg.exe'). Flag modifications performed by process relationships that have not been seen in the last 30 days or fall below a 1% frequency threshold.",
              "Train an anomaly detection model (e.g., Isolation Forest or One-Class SVM) on legitimate registry modification events across the enterprise. Use features such as: the process performing the modification ('Image' field), the user context ('User' field), the target registry hive, and the parent process name. A modification to the 'Office test' key by an unusual process/user combination will be flagged as a high-scoring anomaly."
            ]
          },
          {
            "description": "The process that creates or modifies the '...Office test\\Special\\Perf' registry value is an interactive shell, a script interpreter, or is executing from a non-standard file path (e.g., user-writable directories).",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Create a detection rule that triggers when a Sysmon Event ID 13 event targeting '...Office test\\Special\\Perf' is generated by a process image ('Image' field) matching a watchlist, such as 'powershell.exe', 'cmd.exe', 'wscript.exe', 'cscript.exe', 'rundll32.exe', or 'reg.exe'. Further refine by alerting if the process path is in a user-writable location like '%APPDATA%' or 'C:\\Users\\Public\\'.",
              "For each Sysmon Event ID 1 (Process Creation) that leads to a relevant registry modification (Sysmon Event ID 13), calculate the Shannon entropy of the 'CommandLine' field. Establish a per-process baseline for command-line entropy (e.g., the normal entropy for 'powershell.exe' commands). Alert if the entropy for a command that modifies the Office Test key exceeds the 95th percentile for that process, suggesting obfuscation or encoding.",
              "Utilize a supervised learning classifier (e.g., Random Forest) trained on Sysmon Event ID 1 process creation events. Features should include: parent process name, process path, command-line argument length, command-line entropy, user context (system vs. user), and whether the process is signed. The model will classify each process that modifies the Office Test key as 'suspicious' or 'benign', with 'suspicious' classifications creating an alert."
            ]
          },
          {
            "description": "An Office application process (e.g., WINWORD.EXE, EXCEL.EXE) spawns a child process, such as a script interpreter or shell, which is uncharacteristic of normal application behavior. This child process then initiates one or more external network connections.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Network Firewalls/Proxies, Core DNS Servers",
            "action": [
              "Correlate Windows Event ID 4688/Sysmon Event ID 1 where a 'ParentProcessName' is an Office application (e.g., 'winword.exe', 'excel.exe') and the 'NewProcessName'/'Image' is a suspicious child (e.g., 'cmd.exe', 'powershell.exe'). If this occurs, search for a subsequent Sysmon Event ID 3 or Zeek 'conn.log' entry from the same host and process ID, connecting to an external IP address (not in RFC1918 space). Alert on this sequence.",
              "Over a 30-day rolling window, baseline the frequency of all child processes spawned by each unique Office parent process. Generate an alert if an Office application spawns a child process that has never been seen before or falls into the bottom 1% of historical frequency. Concurrently, analyze DNS queries (Zeek 'dns.log') originating from the host around the same time. Calculate a risk score based on DNS query features like query length, entropy, and TLD rarity.",
              "Apply a time-series forecasting model (e.g., Prophet or LSTM) to the number of network connections ('conn.log' entries) per minute for each host. After an Office application is launched (identified via Sysmon Event ID 1), monitor the connection count. If the actual number of connections significantly deviates from the forecasted values (exceeds the prediction interval), flag it as an anomaly. This detects unexpected C2 beaconing or data exfiltration."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a short time frame: 1) The '...Office test\\Special\\Perf' registry value is set to a DLL in a suspicious path (e.g., %APPDATA%, C:\\PerfLogs). 2) An Office application loads this DLL. 3) The Office application process initiates a network connection to a destination with a low reputation score or a recently registered domain.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 7",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress Points, Threat Intelligence Platform, DNS Servers",
            "action": [
              "Construct a chained query that triggers if the following events occur on the same host within a 10-minute window: 1. Sysmon EID 13: 'TargetObject' contains 'Office test\\Special\\Perf'. 2. Sysmon EID 7: 'Image' is an Office process and 'ImageLoaded' matches the DLL from step 1. 3. Sysmon EID 3 or Zeek 'conn.log': The process from step 2 initiates a connection to an IP on a threat intelligence blocklist or a domain flagged as suspicious in 'dns.log'.",
              "For all DLLs loaded by Office processes (Sysmon EID 7), calculate the frequency of the 'ImageLoaded' file path. Create a risk score for paths in rare directories (e.g., 'C:\\Users\\Public', '%TEMP%'). For subsequent network connections from that process, enrich the destination IP with domain age and reputation data. Combine the path rarity score and the domain reputation score. Alert if the combined score exceeds a predefined threshold.",
              "Construct a host-centric event graph where nodes represent processes, files, registry keys, and network destinations, and edges represent actions (e.g., 'writes_to', 'loads', 'connects_to'). Use a graph query language or algorithm to search for the specific subgraph pattern: '[Process A]' -writes_to-> '[Office Test Key]' -contains_path-> '[File B.dll]' <-loads- '[Office Process C]' -connects_to-> '[External IP D]'. The discovery of this complete chain provides a high-confidence indicator of compromise."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]