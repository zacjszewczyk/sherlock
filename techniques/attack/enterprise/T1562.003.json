[
  {
    "information_requirement": "Is an adversary actively impairing command history logging on enterprise endpoints or servers to evade detection? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.003",
        "name": "Impair Command History Logging",
        "evidence": [
          {
            "description": "A process is created whose file hash or name matches a known threat intelligence indicator for a tool used to impair command history.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those in critical tiers (e.g., Domain Controllers, developer workstations).",
            "action": [
              "Symbolic: Continuously monitor process creation events (Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104). Compare the `NewProcessName` and `ProcessCommandLine` fields, as well as the SHA256 hash of the executable, against a threat intelligence feed of known history-clearing tools. Generate an alert upon any match.",
              "Statistical: Analyze the frequency of executions for low-prevalence binaries across the enterprise. Calculate the global prevalence (percentage of hosts a binary has run on) for every executed process hash. Flag any process hash that matches a history-impairment tool signature and also has a prevalence below a 1% threshold, indicating a rare and suspicious tool.",
              "Machine Learning: Train a decision tree classifier on labeled process execution events. Features should include process name characteristics (e.g., entropy, length), command-line arguments, parent process, user context, and whether the hash is present in CTI feeds. Use the trained model to classify new process events as 'history impairment' or 'benign', flagging high-confidence predictions for analyst review."
            ]
          },
          {
            "description": "A process command line contains specific strings, arguments, or regular expression patterns known to disable, clear, or manipulate shell history logging.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with PowerShell logging enabled; all Linux/macOS endpoints and servers with shell logging.",
            "action": [
              "Symbolic: Create a watchlist or regex rule set to scan the `ProcessCommandLine` field of Windows Event ID 4688 and the script block text of PowerShell Event ID 4104. The patterns should detect commands like `Set-PSReadLineOption -HistorySaveStyle SaveNothing`, `unset HISTFILE`, `export HISTFILESIZE=0`, and linking `~/.bash_history` to `/dev/null`. Trigger a high-severity alert on any match.",
              "Statistical: For each command line pattern identified in the symbolic logic, establish a baseline of execution frequency per user and per host. Use a z-score or percentile-based threshold (e.g., > 99th percentile of historical frequency) to detect anomalous spikes in the execution of these commands. A sudden increase in a user running `Set-PSReadLineOption` may indicate malicious activity.",
              "Machine Learning: Use Natural Language Processing (NLP) techniques, like a TF-IDF model, on the command-line field. Train a Naive Bayes classifier to distinguish between benign and malicious command-line activity, specifically labeling commands known to impair history. This can help identify obfuscated or novel variations of history-impairment commands that regex might miss."
            ]
          },
          {
            "description": "A known history impairment command is executed in an anomalous context, such as by a non-interactive service account, from an unusual parent process (e.g., Microsoft Word), or immediately following a remote login.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, internet-facing systems, and high-value user endpoints.",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a history impairment command is executed (from Windows Event ID 4688) within 60 seconds of a remote login event (Windows Event ID 4624 with Logon Type 3 or 10) for the same user on the same host. Additionally, alert if the parent process of a history impairment command is not a standard shell (e.g., `powershell.exe`, `cmd.exe`, `explorer.exe`).",
              "Statistical: Build a baseline of normal parent-child process relationships and user-process relationships. For every execution of a history impairment command, calculate the rarity of the parent process. A command spawned by a parent that is in the bottom 1% of historical frequency for spawning any process should be flagged. Use entropy to score the unusualness of a user's first five commands after login (from Zeek/host logs); a high-entropy start followed by history clearing is suspicious.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., LSTM) for user session activity, combining network data (Zeek conn.log) and host data (Windows Event ID 4688). The model would learn the typical sequence of processes and commands following a login. A session that deviates significantly from the learned pattern by immediately executing history impairment commands would be flagged as anomalous."
            ]
          },
          {
            "description": "A user session exhibits a behavioral pattern where execution of a history impairment command is followed by commands associated with discovery or execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (Domain Controllers, file servers) and administrator workstations.",
            "action": [
              "Symbolic: Define a stateful detection rule that tracks user sessions by Logon ID. The rule enters a 'suspicious' state for a session if a history impairment command is seen. If, while in this state, a subsequent command matches a watchlist of reconnaissance or execution activities (e.g., `whoami`, `net user`, `Invoke-Mimikatz`), an alert is fired. The rule state times out after 30 minutes.",
              "Statistical: For each user session, create a vector representing the sequence of MITRE ATT&CK tactics observed through command-line analysis. Calculate the frequency of all observed tactic sequences across the organization. Flag sequences that are statistically rare (e.g., occur less than 0.1% of the time) and begin with Defense Evasion (T1562.003) as highly suspicious.",
              "Machine Learning: Use a sequence-based classification model like a Recurrent Neural Network (RNN). Train the model on labeled sequences of commands from both benign and known malicious sessions. The model learns the probabilistic transitions between command types. A live user session's command sequence can then be evaluated by the model to determine the likelihood it belongs to a malicious campaign."
            ]
          },
          {
            "description": "The PowerShell or bash history file is deleted, becomes zero-byte, or its last-modified timestamp fails to update despite continued interactive shell activity by the associated user.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on all endpoints and servers, specifically in user profile directories (e.g., `~`, `%APPDATA%`).",
            "action": [
              "Symbolic: Enable file system auditing on default history file paths (`%APPDATA%\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt`). Create a rule to alert on any file deletion event (Event ID 4663 with `Accesses` containing `DELETE`) for these specific files.",
              "Statistical: Periodically poll the metadata (last modified time, size) of shell history files for active users. Correlate this with process execution logs (Event ID 4688) for the same users. If a user has executed more than 5 shell commands in the last 15 minutes but the history file's last modified time has not changed, flag this anomaly for review if it exceeds 2 standard deviations from the user's baseline behavior.",
              "Machine Learning: Create a time-series model for each user's history file size. The model should predict the expected file size growth based on their typical command-line activity levels. An anomaly detection algorithm, such as an Isolation Forest, can then identify points in time where the file size unexpectedly drops to zero or stops growing, which would be inconsistent with the user's ongoing process activity and the model's predictions."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]