[
  {
    "information_requirement": "Is the adversary establishing or maintaining persistence using LC_LOAD_DYLIB injection?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition",
        "evidence": [
          {
            "description": "A known benign Mach-O binary is modified, and a subsequent inspection of its load commands reveals a new entry for a dylib whose path or file hash is present on a threat intelligence feed.",
            "data_sources": [
              "macOS ESF Process Events",
              "File Integrity Monitoring Logs",
              "EDR Module Load Events",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (laptops, desktops), macOS-based servers (e.g., build servers, web servers), and threat intelligence platforms.",
            "action": [
              "Create a detection rule that triggers when a process execution event for a binary modification tool (e.g., `optool`, `install_name_tool`, `yololib`) has command-line arguments that reference a dylib path or name matching an entry in a threat intelligence feed.",
              "For all observed dylib load events across the enterprise, calculate the prevalence (number of hosts loading the dylib). Flag dylibs that fall below a low percentile of prevalence (e.g., 1st percentile) and are not associated with known, legitimate specialized software for further investigation.",
              "Train a classification model (e.g., Random Forest) to predict malicious dylib loads. Engineer features from the process event (parent process name, user context, command-line entropy) and the dylib itself (path location, signing status, enterprise prevalence). Alert on predictions with a high confidence score."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a 5-minute window: 1) A binary modification tool (e.g., `optool`) executes, 2) The tool's command line arguments specify adding a dylib from a user-writable directory (e.g., `/tmp/`, `/Users/Shared/`), 3) The target of the modification is a system or signed application binary.",
            "data_sources": [
              "macOS Process Execution Logs (with command-line arguments and user context)",
              "macOS ESF File Modification Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on macOS endpoints, shared and temporary directories (`/tmp`, `/Users/Shared`) on all macOS systems.",
            "action": [
              "Implement a stateful correlation rule that triggers when a process execution for `optool` or `install_name_tool` with `-add_dylib` arguments is followed by a file modification event, where the dylib path specified in the command line resides in a non-standard location (e.g., `/tmp/*`, `~/.*`, `/Users/Shared/*`).",
              "For each binary modification event, calculate a risk score for the added dylib's path. The score should be based on factors like path location (e.g., `/tmp`=10, `~/Downloads`=8, `/usr/local/lib`=1) and string entropy of the filename. Alert on cumulative scores exceeding a statistically determined threshold, such as the 95th percentile of all observed scores.",
              "Develop a sequence analysis model (e.g., LSTM) trained on legitimate software installation and update event sequences. Feed sequences of process and file events related to binary modifications into the model and alert if the observed sequence has a low probability score, indicating a deviation from normal installation patterns."
            ]
          },
          {
            "description": "A file integrity monitoring system reports a hash change or signature invalidation for a trusted Mach-O binary, and there is no corresponding change request or patch deployment record in the change management system for that host and binary within a 24-hour window.",
            "data_sources": [
              "File Integrity Monitoring Logs (file hash, signature status, modifying process)",
              "Change Management System Logs (patch IDs, deployment times, target hosts)",
              "Software Deployment Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directories containing critical system binaries (`/bin`, `/sbin`, `/usr/bin`), application bundles (`/Applications`), framework directories (`/System/Library/Frameworks`), and change management log repositories.",
            "action": [
              "Create a query that joins file integrity monitoring logs with patch management system logs on hostname and timestamp. Alert on any change to a monitored binary's hash or signature status that does not have a corresponding, authorized patch deployment record within a 24-hour window.",
              "For each monitored binary, establish a baseline of modification frequency from historical patch data. Use time-series analysis to model expected update cycles. Flag any modification that occurs at a time representing a significant statistical outlier (e.g., more than 3 standard deviations from the mean inter-update interval).",
              "Train a one-class SVM or isolation forest model on features of legitimate file modifications (e.g., modifying process name is `patch`, `installer`, user context is `system`, time of day is business hours). Feed all new modification events into the model and flag any event classified as an anomaly."
            ]
          },
          {
            "description": "A module load event is recorded where a process loads a dynamic library from a user-writable directory (e.g., `/tmp`, `/Users/Shared/`), and the combination of the parent process name and the dylib path has never been observed across the enterprise baseline.",
            "data_sources": [
              "macOS ESF Module Load Events (`ES_EVENT_TYPE_NOTIFY_LOADER_OPEN`)",
              "Process Execution Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints and servers, focusing on processes that run with high privilege or handle sensitive data.",
            "action": [
              "Create a detection rule that alerts whenever a process loads a dylib from a path matching a blocklist of suspicious locations (e.g., `/tmp/*`, `~/Downloads/*`, `/Users/Shared/*`) and the dylib is not signed by Apple or a trusted third-party developer.",
              "Maintain a baseline of all process-dylib load pairs observed over a 30-day period. Alert on the first time a new pair is seen where the dylib path is in a user-writable directory. Further risk-score this alert based on the rarity of the dylib's parent directory across all observed loads in the enterprise.",
              "Use a graph-based anomaly detection model where nodes represent processes and dylibs. Train the model on the normal graph structure of dylib loads. A newly observed edge (a process loading a dylib) that connects disparate or unusual clusters (e.g., `sshd` loading a dylib from `/Users/joe/Downloads`) is flagged as a structural anomaly."
            ]
          },
          {
            "description": "Within 5 minutes of a process loading a dylib from a suspicious path (e.g., `/tmp`) or with a known malicious hash, the same process initiates an outbound network connection to an IP address with a low reputation score or that is not on an organizational allowlist.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "macOS ESF Module Load Events",
              "macOS Process Execution Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (monitored by Zeek), macOS endpoints and servers (for process/module context).",
            "action": [
              "Correlate module load events with network connection logs (Zeek conn.log) on hostname and timestamp. Trigger an alert if a process, within 5 minutes of loading a dylib from a suspicious path, makes an outbound connection to an IP address present on a threat intelligence feed.",
              "For any process that loads a suspicious dylib, analyze its subsequent network traffic in `Zeek conn.log`. Calculate the variance in time deltas between connections to the same destination IP and port. A very low variance is indicative of automated beaconing. Alert if the variance falls below a statistically determined threshold (e.g., the 10th percentile of all observed variances).",
              "Use a time-series forecasting model (e.g., ARIMA) to predict the expected outbound data volume for each process based on historical behavior. If a process loads a suspicious dylib and its subsequent outbound data volume significantly exceeds the forecast (e.g., breaks the 99% confidence interval), flag it as an anomaly for potential C2 communication or data exfiltration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using LC_LOAD_DYLIB injection?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition",
        "evidence": [
          {
            "description": "A file modification event is recorded for a Mach-O binary with setuid or setgid permissions enabled. The modification, performed by a tool like `optool`, adds a load command for a dylib whose hash is found on a threat intelligence feed for privilege escalation tools.",
            "data_sources": [
              "File Integrity Monitoring Logs (with file permission attributes)",
              "macOS Process Execution Logs (with command-line arguments)",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directories containing setuid/setgid binaries on macOS endpoints and servers (e.g., `/sbin`, `/usr/bin`).",
            "action": [
              "Create a high-severity alert that triggers when a process like `optool` or `install_name_tool` modifies a file where the file permissions attribute contains the setuid or setgid bit, and the command-line arguments specify adding a dylib whose hash is on a watchlist of privilege escalation payloads.",
              "Maintain a list of all setuid/setgid binaries and profile their modification frequency. Any modification to a rarely- or never-before-modified setuid binary (e.g., a modification frequency in the 1st percentile) should be flagged as a high-risk statistical outlier.",
              "Train a classification model to predict if a file modification is a privilege escalation attempt. Use features such as: `is_suid_sgid` (boolean), `modifying_user_is_root` (boolean), `command_line_entropy`, and `target_file_path_rarity`. Alert on high-probability predictions."
            ]
          },
          {
            "description": "A sequence of correlated events occurs: 1) A process with a non-zero user ID executes `optool` or `install_name_tool`. 2) The target of the modification is a binary with setuid/setgid permissions. 3) Within 10 minutes, the modified binary is executed, resulting in a new process with an effective user ID of 0.",
            "data_sources": [
              "macOS Process Execution Logs (with UID, EUID, command line, and parent process ID)",
              "macOS ESF File Modification Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints and servers, correlating user activity logs with modifications to privileged system files.",
            "action": [
              "Implement a stateful correlation rule that tracks the following sequence on a single host within a 10-minute window: `Process_Exec(user_id != 0, process_name in ['optool', 'install_name_tool'])` -> `File_Modify(target_perms contains 'setuid')` -> `Process_Exec(process_path = target_path, effective_user_id = 0)`. Trigger a critical alert if the sequence completes.",
              "Analyze process execution chains. For any execution of a setuid/setgid binary, trace its ancestry. A lineage originating from a user shell, to a binary modification tool, and then to the privileged execution is a statistically rare and highly suspicious event graph. Flag any such observed chain.",
              "Use a sequence-based anomaly detection model (e.g., Markov Chain or LSTM) trained on legitimate privileged operations and software installations. The malicious sequence of a non-privileged user modifying a SUID binary and then immediately executing it would be identified as a highly improbable sequence, triggering an alert."
            ]
          },
          {
            "description": "A file integrity monitoring alert for a hash change on a setuid/setgid binary, initiated by a non-root user, is followed within 5 minutes by a process execution event for that same binary on the same host.",
            "data_sources": [
              "macOS Process Execution Logs",
              "File Integrity Monitoring Logs (including modifying user context)",
              "macOS Authentication Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers (for user context), macOS endpoints (for FIM and process logs).",
            "action": [
              "Create a detection rule that joins FIM alerts with process execution logs. Trigger an alert if `FIM_Alert.modifying_user != 'root'` AND `FIM_Alert.file_perms` contains 'setuid' AND `Process_Exec.path == FIM_Alert.file_path` AND the time difference is less than 5 minutes.",
              "For all modified setuid/setgid binaries, calculate the time-to-execution (TTE) between the modification event and the next execution event. A TTE in the 1st percentile (e.g., under 5 minutes) is a strong statistical indicator of malicious activity, as legitimate patches are rarely applied and immediately executed by a user.",
              "Train a random forest classifier to score the risk of a setuid/setgid binary execution. Engineer features such as `was_recently_modified`, `modifying_user_is_root`, `time_since_modification_seconds`, and `signature_is_valid`. Alert on executions that receive a high-risk classification score."
            ]
          },
          {
            "description": "A module load event is recorded for a process with an effective user ID (EUID) of 0, where the loaded dylib originates from a path outside of protected system directories (e.g., not `/System/*`, `/usr/lib/*`, `/usr/local/lib/*`).",
            "data_sources": [
              "macOS ESF Module Load Events (must include loading process EUID and module path)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, specifically monitoring module loads for processes running as root.",
            "action": [
              "Create an alert that triggers when a module load event has `process_euid == 0` and the `module_path` matches patterns like `/tmp/*`, `/Users/Shared/*`, or `~/.*`. Maintain an allowlist of known-good exceptions for legitimate software that uses this behavior.",
              "For each distinct root process name (e.g., `sshd`, `sudo`), build a baseline of its legitimate dylib parent directories over a 30-day period. A load from a new, previously unobserved directory for that process constitutes a statistical anomaly. Score the rarity of the directory and alert if it exceeds a threshold.",
              "Use a clustering algorithm (e.g., DBSCAN) on module load events from root processes. Use features derived from the dylib path (e.g., directory depth, character distribution, presence of user-writable paths). Legitimate loads will form dense clusters; flag any loads classified as noise or belonging to very small clusters as anomalous."
            ]
          },
          {
            "description": "After a process with elevated privileges (e.g., from a setuid/setgid binary) loads a dylib from a non-standard path, it spawns a child process that is a shell, interpreter, or networking tool (e.g., `sh`, `bash`, `python`, `nc`), or it initiates a network connection to a destination not seen in the last 30 days of enterprise traffic.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS ESF Module Load Events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (for process ancestry), network gateways (for Zeek logs), DNS servers (for Zeek DNS logs).",
            "action": [
              "Create a chained rule: If a privileged process loads a dylib from a suspicious path (from the previous detection), elevate the alert to critical if the same process subsequently spawns a child process with a name in (`sh`, `bash`, `zsh`, `python`, `perl`, `nc`, `curl`) or initiates an outbound connection in `Zeek conn.log` to a non-allowlisted IP address.",
              "For each setuid/setgid binary, baseline its normal child processes and network destinations. Alert if a child process is spawned whose name is statistically rare for that parent (e.g., `login` spawning `curl`) or if a network connection is made to a destination with a low prevalence score across the enterprise.",
              "Use a Graph Neural Network (GNN) trained on benign host activity graphs (processes, files, network connections). After a suspicious dylib load by a setuid/setgid binary, analyze the subgraph of subsequent activity. Feed this subgraph into the GNN to classify it as benign or malicious based on its structural properties compared to the learned baseline."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]