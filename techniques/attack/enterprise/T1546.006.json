[
  {
    "information_requirement": "Is the adversary establishing or maintaining persistence using LC_LOAD_DYLIB injection?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition",
        "evidence": [
          {
            "description": "A Mach-O binary's load commands are modified to include a dynamic library whose file hash or path matches a known malicious indicator.",
            "data_sources": [
              "Process execution logs with command-line arguments",
              "File integrity monitoring logs",
              "EDR module load events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (laptops, desktops), macOS-based servers (e.g., build servers, web servers).",
            "action": "1. (Symbolic) Monitor process execution logs for tools like `optool`, `install_name_tool`, or `yololib`. Alert if the command-line arguments contain a dylib path or name matching a threat intelligence feed of known malicious dylibs. 2. (Statistical) Calculate the prevalence of each dylib loaded across the environment. Flag dylibs loaded by a small number of hosts (e.g., below the 5th percentile of prevalence) that are not associated with legitimate, specialized software. 3. (ML) Deploy a trained classification model (e.g., gradient boosting) using features from the process event (parent process, user context, command-line entropy) and the dylib (path, signing status, prevalence) to predict if the modification is malicious. Alert on high-probability predictions."
          },
          {
            "description": "A sequence of process events on a single host within a short time window shows a Mach-O modification tool (`optool`, `install_name_tool`) adding a dylib from a user-writable path (`/tmp`, `/Users/Shared/`) to a system or application binary.",
            "data_sources": [
              "Process execution logs with command-line arguments",
              "File modification events from EDR/ESF"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on macOS endpoints, shared and temporary directories on macOS systems.",
            "action": "1. (Symbolic) Create a correlation rule that triggers when a process like `optool` or `install_name_tool` is executed with arguments for adding a dylib (e.g., `-add_dylib`) and the dylib path is in a non-standard location (e.g., `/tmp/*`, `~/.*`, `/Users/Shared/*`). 2. (Statistical) For each binary modification event, calculate a risk score based on the dylib path's string entropy and location (e.g., assign higher scores to `/tmp` than `/usr/lib`). Alert on scores exceeding a statistically determined threshold (e.g., 95th percentile). 3. (ML) Implement a sequence analysis model (e.g., LSTM) trained on legitimate software installation event sequences. Feed sequences of process and file events related to binary modifications into the model and alert if the observed sequence has a low probability, indicating an anomalous pattern."
          },
          {
            "description": "A trusted system or application Mach-O binary's file hash or code signature status changes to invalid, and this change is not correlated with a known, scheduled software update or patch deployment.",
            "data_sources": [
              "File integrity monitoring logs (hash and signature status)",
              "Process execution logs",
              "Software deployment and patch management logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directories containing critical system binaries (`/bin`, `/sbin`, `/usr/bin`), application bundles (`/Applications`), and framework directories (`/System/Library/Frameworks`).",
            "action": "1. (Symbolic) Join file integrity monitoring logs with patch management system logs. Alert on any change to a binary's hash or signature that does not have a corresponding, authorized patch ID within a 24-hour window. 2. (Statistical) For each monitored binary, establish a baseline of modification frequency. Use time-series analysis to model expected update patterns. Alert if a modification occurs at a time that is a significant outlier (e.g., > 3 standard deviations from the mean inter-update interval). 3. (ML) Train a one-class SVM or isolation forest model on features of legitimate file modifications (e.g., modifying process name, user context, time of day). Feed all new modification events into the model and flag those classified as anomalies."
          },
          {
            "description": "A process is observed loading a dynamic library from a user-writable or temporary directory (`/tmp`, `/Users/Shared/`, `~/Library/Application Support/`), and this process-dylib pair has not been previously observed in baselined activity.",
            "data_sources": [
              "ESF `ES_EVENT_TYPE_NOTIFY_LOADER_OPEN` or equivalent EDR module load events",
              "Process execution logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints and servers, focusing on processes that run with high privilege or handle sensitive data.",
            "action": "1. (Symbolic) Alert whenever a process loads a dylib from a path matching a blocklist of suspicious locations (e.g., `/tmp/*`, `~/Downloads/*`) and the dylib is not signed by Apple or a trusted developer. 2. (Statistical) For each process name, build a profile of normal dylib load paths. Calculate the string entropy of newly observed dylib paths. A high entropy score or a path from a statistically rare parent directory for that process generates a high-risk score. Alert on scores above the 99th percentile. 3. (ML) Use a graph-based anomaly detection algorithm where processes and dylibs are nodes. The model learns the normal graph structure. A new edge (dylib load) that is rare or creates an unusual connection (e.g., `sshd` loading a dylib from `/Users/joe/Downloads`) is flagged as a structural anomaly."
          },
          {
            "description": "A process, after loading a dylib from a suspicious path or a dylib with a known malicious hash, initiates one or more network connections to an external IP address not present on an allowlist, or exhibits a beaconing pattern.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "EDR module load events",
              "Process execution logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (monitored by Zeek), macOS endpoints and servers (for process/module context).",
            "action": "1. (Symbolic) Correlate module load events with network logs. Trigger an alert if a process, within 5 minutes of loading a dylib from a suspicious path, makes an outbound connection to an IP address on a threat intelligence feed. 2. (Statistical) For processes with suspicious dylib loads, analyze their network traffic in `Zeek conn.log`. Calculate the variance in time deltas between connections to the same destination. A low variance indicates beaconing. Alert if the variance falls below a threshold (e.g., bottom 10th percentile). 3. (ML) Use a time-series forecasting model (e.g., ARIMA) to predict the expected outbound data volume for a process. If a process loads a suspicious dylib and its subsequent data volume significantly exceeds the forecast, flag it as anomalous for potential data exfiltration."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using LC_LOAD_DYLIB injection?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition",
        "evidence": [
          {
            "description": "A file modification event targets a Mach-O binary with setuid or setgid permissions, and the modification involves adding a load command for a dylib whose file hash matches a known privilege escalation payload.",
            "data_sources": [
              "File integrity monitoring logs (including file permissions)",
              "Process execution logs with command-line arguments",
              "Threat intelligence feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directories containing setuid/setgid binaries on macOS endpoints and servers (e.g., `/sbin`, `/usr/bin`).",
            "action": "1. (Symbolic) Create a rule that triggers if a process like `optool` modifies a file with setuid/setgid permissions, and the command-line arguments specify adding a dylib whose hash is on a watchlist of privilege escalation tools. 2. (Statistical) Maintain a list of all setuid/setgid binaries. Profile the modification frequency for each. Any modification to a rarely- or never-before-modified setuid binary (e.g., frequency in the 1st percentile) is a high-risk statistical outlier. 3. (ML) Train a classification model to predict if a file modification is a privilege escalation attempt based on features like: binary has setuid/setgid bit, modifying user context (root vs. non-root), and command-line arguments. Alert on high-probability predictions."
          },
          {
            "description": "A sequence of events shows: (1) a process running as a non-root user executes a tool like `optool` to (2) modify a setuid/setgid binary by adding a dylib from a user-writable path, followed by (3) the execution of the modified binary.",
            "data_sources": [
              "Process execution logs (with user context and command-line arguments)",
              "File modification events",
              "Process ancestry data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints and servers, correlating user activity with modifications to privileged system files.",
            "action": "1. (Symbolic) Implement a stateful correlation rule for the sequence: `Process_Exec(user != root, name in [optool, install_name_tool], target_perms = SUID/SGID)` -> `File_Modify(target_binary)` -> `Process_Exec(name = target_binary)`. Alert if this sequence completes within 10 minutes. 2. (Statistical) Analyze process chains. For any execution of a setuid/setgid binary, examine its parent processes. A lineage originating from a user shell, to a binary modification tool, then to the privileged execution is a statistically rare and suspicious event. 3. (ML) Use a sequence-based anomaly detection model (e.g., LSTM) trained on legitimate privileged operations. The malicious sequence of `modify-suid-binary -> execute-suid-binary` by a non-privileged user would be identified as a highly anomalous sequence."
          },
          {
            "description": "A process execution event is recorded for a setuid/setgid binary within minutes of a file integrity monitoring alert for the same binary, where the alert indicates a hash change or signature invalidation performed by a non-root user account.",
            "data_sources": [
              "Process execution logs",
              "File integrity monitoring logs (hash, signature, permissions)",
              "User authentication and session logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers (for user context), macOS endpoints (for FIM and process logs).",
            "action": "1. (Symbolic) Create a rule: `Event(FIM_Alert: file_perms=SUID/SGID, modifying_user!=root)` correlated with `Event(Process_Exec: file_path=<FIM_Alert.file_path>)` where `time_delta < 5 minutes`. 2. (Statistical) Calculate the time-to-execution (TTE) for all modified setuid/setgid binaries. A TTE in the 1st percentile (e.g., under 5 minutes) is a strong statistical indicator of malicious activity, as legitimate patches are rarely applied and immediately executed this way. 3. (ML) Train a random forest classifier to score the risk of a setuid/setgid binary execution. Features include: `was_recently_modified`, `modifying_user_is_root`, `time_since_modification`, and `signature_is_valid`. Alert on high-risk classifications."
          },
          {
            "description": "A process running with an effective user ID of 0 (root) loads a dylib from a path outside of standard system directories (`/System/*`, `/usr/lib/*`), such as `/tmp/`, `/Users/Shared/`, or a user's home directory.",
            "data_sources": [
              "EDR module load events (including loading process EUID)",
              "Process creation events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, specifically monitoring module loads for processes running as root.",
            "action": "1. (Symbolic) Create an alert that triggers when `process_euid == 0` and the loaded `module_path` matches patterns like `/tmp/*`, `/Users/Shared/*`, `~/.*`, excluding known-good exceptions from a predefined allowlist. 2. (Statistical) For each root process, baseline its legitimate dylib parent directories. A load from a new, previously unobserved directory constitutes a statistical anomaly. Score the rarity of the directory and alert if it exceeds a threshold. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on root process module loads, using features derived from the dylib path. Legitimate loads will form dense clusters; loads marked as noise by the algorithm are anomalous and should be investigated."
          },
          {
            "description": "A setuid/setgid process, immediately after loading a dylib from a non-standard path, spawns a child process such as a shell (`/bin/sh`), a network utility (`nc`), or establishes an outbound network connection to an unknown destination.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS Process Module Load Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (for process ancestry), network gateways (for Zeek logs), DNS servers (for Zeek DNS logs).",
            "action": "1. (Symbolic) Create a chained rule: If a privileged dylib load is observed, trigger a higher-severity alert if the same process subsequently spawns a shell or network tool, or initiates a connection in `Zeek conn.log` to a non-allowlisted IP. 2. (Statistical) For each setuid/setgid binary, baseline its normal child processes and network destinations. Alert if a child process is spawned whose name is statistically rare for its parent or if a network connection is made to a destination with a low enterprise-wide prevalence. 3. (ML) Use a Graph Neural Network (GNN) trained on benign activity. After a suspicious dylib load by a setuid/setgid binary, feed the subsequent process and network activity graph into the GNN to flag the subgraph as a structural anomaly."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]