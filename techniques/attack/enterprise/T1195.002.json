[
  {
    "information_requirement": "Has the adversary gained initial access by compromising a software supply chain?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1195.002",
        "name": "Compromise Software Supply Chain",
        "evidence": [
          {
            "description": "A downloaded software update executable or installer's hash matches a known-malicious signature, or the file is downloaded from a URL/IP address present on a threat intelligence feed.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Proxy Servers, Endpoints",
            "action": [
              "Symbolic: Continuously monitor file creation events (Windows Event ID 4688) and network downloads (Zeek files.log). For every new executable, calculate its SHA256 hash and perform a real-time lookup against a threat intelligence feed of known malicious file hashes. Simultaneously, correlate the source IP from Zeek conn.log and host from Zeek http.log against a feed of malicious infrastructure. Generate a high-severity alert on any match.",
              "Statistical: For each source IP/domain serving executable downloads, calculate the historical rarity of that source serving files to the enterprise. If a source IP/domain is in the 99th percentile for rarity (i.e., it has rarely or never been seen before) and is serving executables, increase its risk score. A high score triggers an alert for analyst review.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using features from Zeek http.log and files.log (e.g., MIME type, file extension, source IP reputation, domain age, TLS-JA3 hash, URL path structure) to predict the likelihood of a download being malicious. Flag downloads with a probability score exceeding a predefined threshold (e.g., 0.85) for investigation, even without a direct IOC match."
            ]
          },
          {
            "description": "A software update executable or installer is unsigned, possesses an invalid or expired digital signature, or is signed by a publisher certificate that is new, rare, or non-reputable.",
            "data_sources": [
              "Zeek pe.log",
              "Windows Event ID 4688",
              "Windows Event ID 8002"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, Software Distribution Points, Code Signing Certificate Authorities",
            "action": [
              "Symbolic: For any new executable observed (Windows Event ID 4688), query its signature status. Generate an alert if the file is unsigned, the signature is invalid/expired (check Windows Event ID 8002 for code integrity failures), or the publisher's subject name is on an explicit blocklist.",
              "Statistical: Maintain a 90-day rolling baseline of all software publisher subjects seen in the environment. Calculate the frequency of each publisher. When a new executable is signed by a publisher not in the baseline or in the bottom 5th percentile for frequency, flag it for investigation. Additionally, calculate the Shannon entropy of the publisher's subject name; a high entropy score may indicate a randomly generated, malicious name.",
              "Machine Learning: Use an anomaly detection model (e.g., Isolation Forest) on features extracted from the digital certificate, such as issuer, subject, validity period, and key usage. Train the model on all certificates seen historically. The model can identify anomalous certificates that deviate from the established norm, which may indicate a forged or malicious certificate even if it is technically valid."
            ]
          },
          {
            "description": "A legitimate, signed software update package exhibits a statistically significant deviation in file characteristics (e.g., file size, imported functions, section entropy) compared to its historical versions.",
            "data_sources": [
              "Zeek pe.log",
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, File Servers, Software Deployment Systems",
            "action": [
              "Symbolic: For a curated list of critical software components (e.g., `lsass.exe`, key application DLLs), maintain a 'golden image' manifest of known-good file hashes for each version. Alert on any hash mismatch for these specific files following a software update event.",
              "Statistical: For a given software package, baseline its historical file size, section entropy, and the set of imported functions (IMPHASH). Upon detection of a new version (via file write events or Zeek pe.log), calculate the Z-score for the file size and the average entropy of its sections. Calculate the Jaccard similarity between the new and old sets of imported functions. A high Z-score ($$ >3 $$) or low Jaccard similarity ($$ <0.8 $$) indicates a significant, potentially suspicious change.",
              "Machine Learning: Apply time-series forecasting (e.g., ARIMA) to the file size of a specific application's updates over time. If a new update's file size is a significant outlier from the forecasted value and its confidence interval, flag it as anomalous. This can detect unexpected bloating of a file due to a malicious implant."
            ]
          },
          {
            "description": "A legitimate software updater process initiates a network connection to a domain/IP address that is not part of its established baseline of known update servers.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Endpoints",
            "action": [
              "Symbolic: Maintain an allowlist of known-good update domains/IPs for common, high-risk software (e.g., `*.windowsupdate.com`, `*.adobe.com`). Alert when a known updater process (e.g., `TrustedInstaller.exe`) identified via Windows Event ID 4688 makes a network connection (Zeek conn.log) to a destination not on this allowlist.",
              "Statistical: For each known updater process, build a historical profile of destination domains it has queried (from Zeek dns.log). Calculate the frequency of each domain queried by that specific process. Alert when the process queries a domain that is in the bottom 1st percentile of frequency for that process, indicating a rare and potentially unauthorized connection.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on network connection features (destination IP, port, protocol, data volume, JA3 hash) for each specific updater process. This will group normal update behaviors into clusters. Any new connection that does not fall into an existing cluster is flagged as a network anomaly, potentially indicating a compromised updater connecting to a non-standard C2 server."
            ]
          },
          {
            "description": "Following a software update, the updated process or a new child process performs suspicious follow-on actions, such as establishing persistence or initiating command-and-control communications.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4657",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, Domain Controllers, Active Directory",
            "action": [
              "Symbolic: If a process spawned from a known software installer (`msiexec.exe`) or updater (`update.exe`) creates a new scheduled task (Windows Event ID 4698), modifies a registry run key (Windows Event ID 4657), or spawns `powershell.exe` with an encoded command, generate a high-severity alert.",
              "Statistical: Profile the parent-child process relationships for all software updaters. Calculate the conditional probability $$ P(\text{child} | \text{parent}) $$ for all observed relationships. If a newly updated process spawns a child process that has a very low conditional probability (e.g., $$ P(\text{cmd.exe} | \text{SomeUpdater.exe}) < 0.01 $$), flag the activity as suspicious.",
              "Machine Learning: Train a sequence-based model (e.g., an LSTM Autoencoder) on sequences of host events (process creation, registry access, network connection) that typically follow a legitimate software update. During inference, if the sequence of events following an update has a high reconstruction error, it indicates a deviation from normal post-install behavior and a potential compromise."
            ]
          },
          {
            "description": "An executable or library file within a trusted software installation directory is modified by an unauthorized process, indicating potential patch tampering outside of a legitimate update mechanism.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical System Directories (e.g., System32, Program Files), File Servers, Endpoints",
            "action": [
              "Symbolic: Enable file system auditing (SACL) on critical application directories. Create an alert rule that triggers when a write operation (from Windows Event ID 4663) is performed on a .dll or .exe file by a process that is NOT on an explicit allowlist of trusted installers (e.g., `msiexec.exe`, `TrustedInstaller.exe`).",
              "Statistical: Establish a baseline of processes that normally write to protected application directories. Calculate the frequency of each source process performing these writes. If a process that is statistically rare (e.g., in the bottom 5th percentile of frequency, such as `notepad.exe`) writes to a protected file, increase a risk score for that host.",
              "Machine Learning: Use a graph-based anomaly detection model where nodes are processes and files, and edges represent 'writes to' interactions. Train the model on normal file access patterns across the enterprise. A compromised supply chain component might manifest as a new, anomalous edge in the graph (e.g., `svchost.exe` writing to `solarwinds.orion.core.businesslayer.dll`), which the model would flag as a structural anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]