[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying the system boot process? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1542.003",
        "name": "Bootkit",
        "evidence": [
          {
            "description": "A file with a hash matching a known bootkit installer or component is observed being written to an endpoint's file system.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, Email Gateway, Endpoint File Systems, Server File Systems",
            "action": [
              "Symbolic: Continuously match the SHA256 hashes from network file transfers (Zeek files.log) and newly created files on endpoints (Sysmon Event ID 11) against a threat intelligence feed of known bootkit hashes. Trigger a high-severity alert on any match.",
              "Statistical: For every new executable file observed via Sysmon Event ID 11, calculate the Shannon entropy of the file's content. Establish a baseline entropy distribution for legitimate executables in the environment. Flag any new executable with an entropy score exceeding the 98th percentile of the baseline, as this indicates potential packing or encryption common in malware droppers.",
              "Machine Learning: Train a classification model (e.g., Gradient Boosting) using features extracted from PE headers (e.g., number of sections, import table hash), file metadata (size, entropy), and contextual data (source IP reputation from Zeek conn.log, parent process from Sysmon Event ID 1). Use this model to score all newly observed executables and trigger an alert if a file's score exceeds a predefined confidence threshold for being malicious."
            ]
          },
          {
            "description": "The command-line execution of system utilities (`bootsect.exe`, `bcdedit.exe`, `dd`, `debug.exe`) includes arguments used to modify the Master Boot Record (MBR), Volume Boot Record (VBR), or UEFI boot configuration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Symbolic: Create a detection rule that searches Sysmon Event ID 1 logs for a `ProcessName` of `bootsect.exe`, `bcdedit.exe`, or `debug.exe`. Within the `CommandLine` field, use regular expressions to match arguments indicative of MBR/VBR modification (e.g., `/nt60 SYS /mbr`, `/set .* nointegritychecks Yes`, `/set testsigning on`). Trigger a critical alert on any match.",
              "Statistical: For `bcdedit.exe` executions (Sysmon Event ID 1), aggregate and count unique `ParentProcessName` and `CommandLine` argument combinations across the enterprise over a 30-day baseline period. Alert on any new execution where the parent process (e.g., `word.exe`, `powershell.exe`) or the specific combination of arguments has a historical frequency of less than 0.1% (i.e., is statistically rare).",
              "Machine Learning: Use a TF-IDF vectorizer on the `CommandLine` field of Sysmon Event ID 1 events where `ProcessName` is `bcdedit.exe`. Train a classifier (e.g., Logistic Regression) to distinguish benign administrative command patterns from known malicious ones. This allows for the detection of novel or obfuscated malicious command-line arguments that deviate from normal administrative usage."
            ]
          },
          {
            "description": "A non-standard process obtains raw write access to a physical disk, followed by a system shutdown or restart command issued by the same process.",
            "data_sources": [
              "Sysmon Event ID 9",
              "Sysmon Event ID 1",
              "Windows Event ID 1074"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Devices, Physical Servers, Virtualization Hosts",
            "action": [
              "Symbolic: Create a time-series correlation rule. Trigger an alert if a Sysmon Event ID 9 (RawAccessRead) for a `Device` like `\\\\.\\PhysicalDrive0` is generated by a specific `ProcessGuid`, and that same `ProcessGuid` is observed within the next 5 minutes initiating a `shutdown.exe` or `restart.exe` process via Sysmon Event ID 1.",
              "Statistical: Maintain a baseline of all processes that legitimately perform raw disk access (Sysmon Event ID 9). This allowlist should be very small (e.g., backup software, disk imaging utilities). Any execution of a process not on this allowlist that triggers a Sysmon Event ID 9 is a high-confidence statistical anomaly and should generate an immediate alert.",
              "Machine Learning: Train a Hidden Markov Model (HMM) on sequences of Sysmon/Windows events per host. The model learns normal transitions between system states. An alert is triggered when the model observes a low-probability sequence, such as a non-system process launch followed by raw disk access and then a system shutdown command, indicating a deviation from normal operational sequences."
            ]
          },
          {
            "description": "An unauthorized or statistically unusual process creates or modifies files within the EFI System Partition (ESP).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 23",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEFI-based Endpoints, UEFI-based Servers",
            "action": [
              "Symbolic: Using Sysmon Event ID 11 (FileCreate), monitor for any file creation events where `TargetFilename` is within the ESP (e.g., `C:\\EFI\\*`, `C:\\Boot\\*`). Maintain an allowlist of known-good process hashes (e.g., `Bcdboot.exe`, trusted OS update executables). Alert on any file write to the ESP by a process not on the allowlist.",
              "Statistical: For each host, establish a baseline of file modification/creation events (Sysmon Event ID 11) in the ESP. Calculate the mean and standard deviation of daily modification counts. An alert is triggered if the daily count on a host exceeds the mean by more than 3 standard deviations, especially if it occurs outside of a scheduled enterprise patch window.",
              "Machine Learning: Train a one-class SVM model using features from legitimate ESP modification events (Sysmon Event ID 11 correlated with Sysmon Event ID 1). Features should include `ProcessName`, `ParentProcessName`, file extension of `TargetFilename`, and the hour of the day. The model learns the boundary of normal activity, and any new event that falls outside this learned boundary is flagged as a potential anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by loading malicious code before the operating system? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1542.003",
        "name": "Bootkit",
        "evidence": [
          {
            "description": "Outbound network connections from a host to IP addresses, domains, or URLs, or using TLS fingerprints (JA3/JA3S) associated with known bootkit command and control (C2) infrastructure.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, DNS Resolvers, Network Traffic Taps",
            "action": [
              "Symbolic: Join `Zeek dns.log` (for domain lookups) and `Zeek conn.log` (for direct-to-IP traffic) with a threat intelligence feed of known bootkit C2 domains and IP addresses. In parallel, match the `ja3` and `ja3s` fields from `Zeek ssl.log` against a feed of malicious TLS fingerprints. Trigger a high-severity alert on any match.",
              "Statistical: From `Zeek dns.log`, calculate the prevalence of each queried domain across all hosts (domain popularity). Alert on connections to domains that are in the bottom 1st percentile of prevalence (i.e., very rare) and have not been observed in the environment in the last 30 days.",
              "Machine Learning: For each internal host, create a time series of connection events from `Zeek conn.log`. Use an LSTM autoencoder to learn the normal patterns of network traffic. Flag any connection sequence that has a high reconstruction error, which is indicative of anomalous patterns like the fixed-interval, low-data-volume 'heartbeat' of C2 beaconing."
            ]
          },
          {
            "description": "System security features, such as Secure Boot, driver signature enforcement, or PatchGuard, are disabled via command line utilities.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Administrator Workstations, Endpoint Devices",
            "action": [
              "Symbolic: Create a high-priority detection rule that searches Sysmon Event ID 1 for `CommandLine` containing `bcdedit.exe` and arguments such as `/set nointegritychecks Yes` or `/set testsigning on`. Alert immediately on any match, as these commands directly disable core OS security features.",
              "Statistical: Profile the execution of `bcdedit.exe` across the enterprise; it should be an extremely rare event. Any execution of `bcdedit.exe` by a user account that is not a designated Tier 0 administrator is a high-confidence statistical anomaly. Also, track the frequency of execution per admin; a sudden increase may indicate account compromise.",
              "Machine Learning: Ingest command-line execution logs (Sysmon Event ID 1) into a User and Entity Behavior Analytics (UEBA) platform. The platform's models will establish a baseline of normal command-line activity for each user. The model will flag an execution of `bcdedit.exe` by a standard user, or even an administrator who has never used it before, as a severe deviation from their established behavioral profile."
            ]
          },
          {
            "description": "Outbound network connections are observed from a host after a system boot event but before the first interactive user logon, where the destination or protocol is not an approved boot-time service.",
            "data_sources": [
              "Zeek conn.log",
              "Windows System Log Event ID 6005",
              "Windows Security Log Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Traffic Taps, Endpoint System Logs, Endpoint Security Logs",
            "action": [
              "Symbolic: Correlate host and network logs. For a given host, identify the timestamp of the last boot event (System Log Event ID 6005). Identify the timestamp of the first subsequent interactive logon (Security Log Event ID 4624 with LogonType 2 or 10). Query `Zeek conn.log` for any outbound connections from that host's IP within this time window. Alert on any connection whose destination IP/port is not on a pre-defined allowlist of essential services (e.g., DHCP, DNS, NTP, Domain Controller).",
              "Statistical: For each host, create a baseline profile of network activity during the 'boot-to-logon' window, including metrics like total bytes sent, number of unique destination IPs, and a list of destination ports. Using a moving average and standard deviation, alert if any of these metrics for a new boot sequence exceeds 3 standard deviations from the host's historical baseline.",
              "Machine Learning: For all connections in the 'boot-to-logon' window across all hosts, extract features like destination port, protocol, and JA3 hash. Use a density-based clustering algorithm like DBSCAN to group these connections. Legitimate activity (e.g., all hosts talking to the DC on port 88) will form dense clusters. Any connection classified as a noise point (outlier) represents a rare and suspicious boot-time communication channel."
            ]
          },
          {
            "description": "A discrepancy exists where network logs show an active outbound connection from a host, but host-level process or network telemetry fails to attribute that connection to any running process.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Suspect Endpoint Devices, Network Egress Points",
            "action": [
              "Symbolic: This is a hunting query. On a scheduled basis, perform a LEFT JOIN between network-level logs (`Zeek conn.log`) and host-level network logs (`Sysmon Event ID 3`) for a given time window, joining on source/destination IP and port. Return any rows from the Zeek data that have no corresponding match in the Sysmon data. These represent 'ghost' connections not attributed to any host process.",
              "Statistical: Automate the symbolic hunting query to run periodically. Calculate a 'discrepancy score' for each host (e.g., `unattributed_connections / total_connections`). Establish a baseline for this score, which should be near zero for healthy hosts. Alert on any host whose discrepancy score is a statistical outlier compared to its peers.",
              "Machine Learning: Train a one-class SVM or an anomaly detection model on snapshots of 'healthy' host telemetry. Features for each host should include `total_network_connections_zeek`, `total_network_connections_sysmon`, and `unattributed_connection_count`. The model can then score live hosts, flagging any host whose telemetry vector is anomalous, indicating a potential discrepancy caused by a rootkit."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]