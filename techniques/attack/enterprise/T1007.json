[
  {
    "information_requirement": "Is the adversary attempting to discover system services as part of internal reconnaissance?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1007",
        "name": "System Service Discovery",
        "evidence": [
          {
            "description": "Execution of built-in service discovery utilities (sc.exe, net.exe, tasklist.exe) with command-line arguments indicative of broad reconnaissance, such as querying all services or using uncommon argument combinations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially Domain Controllers and Application Servers.",
            "action": [
              "Symbolic: Create a detection rule that searches Windows Event ID 4688 process command lines for exact or partial string matches of known malicious or unusual discovery commands, such as `sc query type= service state= all`, `net start`, or `tasklist /svc` followed by output redirection to a file.",
              "Statistical: For each host, calculate the historical frequency of command-line arguments used with `sc.exe`, `net.exe`, and `tasklist.exe`. Generate an alert when a command is executed with arguments that fall into the bottom 1% of historical usage frequency for that host or its peer group (e.g., all developer workstations), indicating a rare combination.",
              "Machine Learning: Train a logistic regression classifier on labeled command-line executions (benign vs. malicious). Use features such as command length, number of arguments, presence of special characters, and the n-gram frequency of the command string. Deploy the model to score new `sc.exe`, `net.exe`, and `tasklist.exe` executions in real-time and alert on high-probability malicious events."
            ]
          },
          {
            "description": "A service discovery utility (sc.exe, tasklist.exe, net.exe) is spawned by a parent process not typically associated with interactive or administrative activity, such as an Office application (winword.exe), a web server process (w3wp.exe), or a non-system-level script interpreter.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Servers, and Application Servers.",
            "action": [
              "Symbolic: Build and maintain a lookup table of legitimate parent-child process relationships for `sc.exe`, `tasklist.exe`, and `net.exe` (e.g., explorer.exe -> cmd.exe -> sc.exe). Create a rule to alert on any execution of these utilities where the parent process is not in the allowlist, specifically flagging parents like `winword.exe`, `excel.exe`, `outlook.exe`, and `w3wp.exe`.",
              "Statistical: For each parent process name on a given host, calculate the historical probability of it spawning `sc.exe`, `tasklist.exe`, or `net.exe`. Alert when a spawning event occurs with a probability below a set threshold, such as $$ P(\\text{child} | \\text{parent}) < 0.001 $$, to identify statistically rare parent-child relationships.",
              "Machine Learning: Implement a graph-based anomaly detection model on process lineage data where processes are nodes and creation events are directed edges. Identify anomalous edges (parent-child relationships) that deviate significantly from the learned graph structure of normal activity for the environment by scoring the rarity of the path."
            ]
          },
          {
            "description": "Execution of PowerShell script blocks or WMI queries that enumerate system services, especially when combined with obfuscation or executed remotely.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 5861"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers with PowerShell v5+ Script Block Logging and WMI Activity logging enabled.",
            "action": [
              "Symbolic: Scan Windows Event ID 4104 (PowerShell Script Block Logging) for content containing keywords like `Get-Service`, `Get-WmiObject Win32_Service`, `gwmi Win32_Service`, or `Get-CimInstance Win32_Service`. Enhance the rule to also look for indicators of obfuscation like `FromBase64String`, `IEX`, or complex string concatenation around these keywords.",
              "Statistical: Calculate the Shannon entropy of PowerShell script blocks logged in Event ID 4104. Establish a baseline entropy score for legitimate administrative scripts. Alert on script blocks that contain service discovery keywords and also have an entropy score above the 95th percentile, indicating probable obfuscation.",
              "Machine Learning: Train a text classification model, such as a Naive Bayes classifier using TF-IDF vectors, on a corpus of benign and malicious PowerShell scripts. Use the model to classify new script blocks containing service discovery cmdlets as benign or malicious based on the overall script structure, function calls, and variable names."
            ]
          },
          {
            "description": "A single host or user executes a high number of service discovery commands over a short time period, deviating from normal administrative behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Security Information and Event Management (SIEM) system or data lake containing aggregated endpoint logs.",
            "action": [
              "Symbolic: Create a threshold-based rule that alerts if a single source host executes more than 10 service discovery commands (e.g., `sc.exe`, `net.exe`, `Get-Service`) within a 5-minute window.",
              "Statistical: For each host, aggregate service discovery events into 5-minute time bins. Calculate a baseline mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) of command counts per bin over a 30-day period. Generate an alert when the count in a new time bin exceeds a dynamic threshold, such as $$ \\mu + 3\\sigma $$, indicating a statistically significant spike in activity.",
              "Machine Learning: Apply a time-series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) to the stream of service discovery events per host. The model will learn the normal rhythm (e.g., daily/weekly seasonality) of administrative activity and automatically flag unusual bursts or deviations from this learned pattern."
            ]
          },
          {
            "description": "The execution of a service discovery command is followed by other discovery activities (e.g., T1018, T1049) or attempts at lateral movement (e.g., T1021.002) originating from the same host within a short time frame.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregation platform (SIEM/Data Lake) capable of correlating endpoint and network data.",
            "action": [
              "Symbolic: Define a sequence-based correlation rule: IF event A (T1007, e.g., `sc query`) is observed on Host X, AND THEN event B (e.g., T1018, `net view`) or event C (e.g., T1021.002, outbound SMB connection to a new host in `Zeek conn.log`) occurs from Host X within 30 minutes, THEN generate a high-severity alert.",
              "Statistical: For each host, create a transition matrix representing the conditional probability of one ATT&CK technique following another within a 60-minute session, e.g., $$ P(T_{t+1} | T_t) $$. Alert when a sequence of techniques starting with T1007 is observed that has a very low joint probability based on historical data, indicating an anomalous chain of events.",
              "Machine Learning: Use a Hidden Markov Model (HMM) where hidden states represent attacker intent (e.g., 'Discovery', 'Lateral Movement') and observations are the detected ATT&CK techniques. An alert is triggered when the model transitions into a high-risk state sequence (e.g., 'Discovery' -> 'Lateral Movement') with high probability, based on the observed sequence of events."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]