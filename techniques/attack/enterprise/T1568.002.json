[
  {
    "information_requirement": "Is the adversary communicating with command and control infrastructure using Domain Generation Algorithms?",
    "tactic_id": "TA0011",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1568.002",
        "name": "Domain Generation Algorithms",
        "evidence": [
          {
            "description": "A DNS query for a domain or an outbound network connection to an IP address that matches a high-confidence entry on a DGA-specific threat intelligence feed.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS Resolvers, Network Egress Points (e.g., Firewalls, Proxies)",
            "action": "1. (Symbolic) Ingest DGA-specific threat intelligence feeds for domains and IPs into a watchlist. Continuously match the 'query' field in Zeek dns.log and the 'id.resp_h' field in Zeek conn.log against this watchlist. Generate a high-priority alert for any match. 2. (Statistical) For each feed, calculate the hit rate and the ratio of true positives to false positives over a 30-day rolling window. Use this to create a weighted scoring model where matches from higher-performing feeds contribute more to an alert's risk score. 3. (ML) Use a supervised learning model (e.g., Logistic Regression) to periodically re-classify feed effectiveness based on historical performance (hit rate, analyst feedback), automatically adjusting the weightings in the scoring model."
          },
          {
            "description": "A DNS query for a domain name whose structure (e.g., length between 16-32 characters, high numeric ratio, non-standard TLD) matches a known DGA family pattern.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS Resolvers",
            "action": "1. (Symbolic) Develop and apply a library of regular expressions to the 'query' field in Zeek dns.log to detect structural patterns of known DGA families (e.g., ^[a-z0-9]{16,32}\\.com$). Alert on matches. 2. (Statistical) For each matched domain, calculate its statistical rarity within the enterprise over the last 90 days. Combine the rule match with the rarity score (e.g., using a percentile rank < 1%) to increase alert fidelity and prioritize investigation. 3. (ML) Train a classification model (e.g., a Decision Tree) on domain features like length, digit ratio, TLD, and n-gram score to predict if a domain belongs to a known DGA family, allowing for detection of variants that may not perfectly match a rigid regex."
          },
          {
            "description": "A DNS query for a domain name that scores above a statistically-defined threshold for linguistic randomness, as measured by metrics like character entropy or n-gram frequency.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS Resolvers",
            "action": "1. (Symbolic) Maintain a whitelist of known-good high-entropy domains (e.g., CDNs like *.akamaiedge.net, cloud services). Exclude these from analysis. 2. (Statistical) For each new domain in Zeek dns.log (excluding TLD and whitelisted domains), calculate its Shannon entropy and its mean bigram/trigram frequency against a baseline model of legitimate traffic. Flag domains with entropy in the top 5th percentile and n-gram frequency in the bottom 5th percentile. 3. (ML) Implement a pre-trained machine learning classifier (e.g., Random Forest) that takes domain name string features (entropy, length, n-gram score, vowel-consonant ratio) as input and outputs a probability score of it being DGA-generated. Alert on domains with a score > 0.85."
          },
          {
            "description": "An outbound DNS query for a domain that was registered within the last 30 days, has a DNS Time-To-Live (TTL) value below 300 seconds, or is queried by fewer than 0.1% of internal hosts.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS Resolvers, Network Egress Points, Passive DNS and WHOIS databases",
            "action": "1. (Symbolic) For each resolved domain in Zeek dns.log, enrich it with WHOIS data. Flag any domain with a 'Creation Date' within the last 30 days. Also, flag any DNS answer with a TTL < 300 seconds. 2. (Statistical) Calculate the prevalence of each domain across the host population over a 24-hour window. Flag domains queried by a number of hosts falling below the 1st percentile of the distribution. Combine flags (e.g., newly-registered AND rare) to generate a higher-confidence alert. 3. (ML) Use time-series analysis (e.g., anomaly detection on a 'newly registered domain query count' metric) to detect unusual spikes in activity related to newly created domains, which could indicate the start of a new campaign."
          },
          {
            "description": "A single host generating more than 50 unique DNS queries that result in an NXDOMAIN response within a 5-minute window, where the count exceeds the host's historical baseline by 3 standard deviations.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS Resolvers, Endpoint Devices",
            "action": "1. (Symbolic) For each source host, count the number of unique queries in Zeek dns.log where 'rcode_name' is 'NXDOMAIN' over a 5-minute sliding window. Trigger a low-severity alert if the count exceeds a static threshold of 50. 2. (Statistical) For each host, establish a baseline of unique NXDOMAIN counts per 5-minute interval. Continuously monitor and alert if a host's count exceeds its baseline mean by more than 3 standard deviations. Additionally, calculate the Shannon entropy of the set of failed domains; a high entropy score increases the alert's severity. 3. (ML) Use a time-series forecasting model (e.g., SARIMA) for each host's unique NXDOMAIN count. An observation that falls significantly outside the model's prediction interval indicates anomalous behavior and should be flagged for investigation."
          },
          {
            "description": "The temporal correlation within a 60-second window of DGA-like DNS activity from a host (e.g., high entropy queries, NXDOMAIN storm) with the execution of an unsigned or anomalously-named process on that same host.",
            "data_sources": [
              "Zeek dns.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Devices, Domain Controllers, Application Servers, Enterprise DNS Resolvers",
            "action": "1. (Symbolic) When a host triggers a DGA-related network alert (e.g., from high entropy or NXDOMAIN analysis), query host logs (Windows Event ID 4688, Sysmon Event ID 1) from that host for +/- 60 seconds around the alert timestamp. Look for process creation events where the process is unsigned, runs from a non-standard directory (e.g., C:\\Users\\Public), or has a suspicious command line. 2. (Statistical) Establish a baseline of normal parent-child process relationships for the environment. When a DGA network alert occurs, check for associated process creation events on the host that represent a statistically rare parent-child relationship (e.g., winword.exe spawning powershell.exe). 3. (ML) Use an unsupervised learning model (e.g., Isolation Forest) on process features (path, name, parent, command line entropy) to identify anomalous processes. Correlate these host-based anomaly scores with network-based DGA scores in near real-time to create a composite risk score for a given host's activity."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]