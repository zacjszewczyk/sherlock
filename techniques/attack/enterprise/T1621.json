[
  {
    "information_requirement": "Is the adversary attempting to bypass multi-factor authentication by generating excessive requests to fatigue the user? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1621",
        "name": "Multi-Factor Authentication Request Generation",
        "evidence": [
          {
            "description": "An MFA-approved login attempt (Windows Event ID 4624) or a failed login attempt (Windows Event ID 4625) originates from an IP address associated with known malicious infrastructure, such as command and control servers, botnets, TOR exit nodes, or anonymous proxies.",
            "data_sources": [
              "Windows Event ID 4625",
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Azure AD Sign-in Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers (e.g., ADFS, RADIUS), VPN concentrators, Cloud identity provider platforms (e.g., Azure AD, Okta), Internet gateway/firewall, SIEM",
            "action": [
              "Correlate the source IP address from authentication logs (Windows Event IDs 4624/4625, Azure AD Sign-in Logs) against subscribed threat intelligence feeds for known malicious IPs, TOR exit nodes, and anonymous proxies. Generate a high-severity alert on any match.",
              "For each login attempt, enrich the source IP with ASN and geolocation data. Calculate the historical login frequency for each user from a given ASN. Flag any login attempt from an ASN that falls within the bottom 5th percentile of frequency for that user, indicating an unusually rare origin.",
              "Train a logistic regression model using features such as IP threat score, ASN rarity, country of origin, time of day, and day of week from historical login data. Use the trained model to classify each new login attempt as 'benign' or 'suspicious' and alert on events with a high probability score for 'suspicious'."
            ]
          },
          {
            "description": "MFA requests are initiated by clients with User-Agent strings that match known non-standard libraries (e.g., 'python-requests', 'curl'), known adversary tools, or exhibit abnormally low Shannon entropy, suggesting programmatic generation.",
            "data_sources": [
              "Zeek http.log",
              "WAF Logs",
              "Azure AD Sign-in Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web proxies, Application servers hosting MFA endpoints, Cloud identity provider platforms, WAF",
            "action": [
              "Scan HTTP request logs (Zeek http.log, WAF logs) for User-Agent strings matching a maintained watchlist of non-standard libraries ('python-requests', 'curl', 'Go-http-client') or known hacking tools. Trigger an alert on any match associated with an authentication endpoint.",
              "Calculate the Shannon entropy for every User-Agent string observed in authentication request logs. Establish a baseline entropy score from legitimate clients over a 30-day period. Flag any request where the User-Agent entropy is more than 2 standard deviations below the baseline mean.",
              "Train a one-class SVM (Support Vector Machine) model on the set of all User-Agent strings from approved, legitimate enterprise applications. Deploy the model to identify any new User-Agent string in an authentication request that significantly deviates from the learned 'normal' profile, flagging it as an anomaly."
            ]
          },
          {
            "description": "An anomalously high volume of failed login attempts (Windows Event ID 4625) or MFA requests for a single user account is observed, exceeding either a fixed threshold (e.g., >10 requests in 5 minutes) or a statistically derived baseline for that user.",
            "data_sources": [
              "Windows Event ID 4625",
              "Azure AD Sign-in Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM",
            "action": [
              "Implement a rule to trigger an alert if a single user account generates more than 10 failed login events (Windows Event ID 4625) or MFA failure events from the same source IP address within a 5-minute window.",
              "For each user, establish a dynamic baseline of authentication request frequency using an exponential moving average over a 30-day period. Generate an alert when the count of requests within a 5-minute window exceeds 3 standard deviations above this moving average.",
              "Apply a time-series anomaly detection algorithm, such as Seasonal-Hybrid ESD (S-H-ESD), to the stream of authentication events per user. The model will learn the normal hourly, daily, and weekly patterns for each user and flag any burst of activity that is statistically inconsistent with this learned behavior."
            ]
          },
          {
            "description": "Following a series of at least 5 failed login attempts (Windows Event ID 4625), a successful login (Windows Event ID 4624) is authenticated via an MFA approval that occurs in a time duration falling in the bottom 5th percentile of the user's historical MFA response times, suggesting a 'fatigue' approval.",
            "data_sources": [
              "Windows Event ID 4625",
              "Windows Event ID 4624",
              "Azure AD Sign-in Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM/Log aggregator",
            "action": [
              "Create a correlation rule that triggers when a sequence of 5 or more failed login events (Event ID 4625) for a single user is immediately followed by a successful login event (Event ID 4624) from the same source IP for that user within a 1-minute window.",
              "For each user, calculate the historical baseline (mean and standard deviation) of their MFA approval times from MFA provider logs. After detecting a cluster of failed logins, flag any subsequent successful approval where the response time is less than the user's mean minus 2 standard deviations, or below a fixed floor of 1 second.",
              "Develop a decision tree classifier to predict 'fatigue approval'. Use features such as the count of preceding failed logins in the last 15 minutes, time since last successful login, and the current MFA response time. Train the model on labeled historical data and use it to score new successful logins that follow failed attempts."
            ]
          },
          {
            "description": "A successful MFA-approved login (Windows Event ID 4624) occurs from a source IP address whose geodetic coordinates are separated from the previous successful login's coordinates by a distance that is physically impossible to travel in the elapsed time.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Azure AD Sign-in Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN concentrators, Internet gateway/firewall, Cloud identity provider platforms, SIEM/Log aggregator with geolocation enrichment",
            "action": [
              "For each user, cache the timestamp and geolocation of their last successful login. Upon each new successful login (Windows Event ID 4624), calculate the time elapsed and distance traveled. Trigger an alert if the implied velocity exceeds a non-physical threshold (e.g., 1000 km/h).",
              "For each successful login, geolocate the source IP. Calculate the Haversine distance and required velocity from the user's previous login location and time. Flag any login where the calculated velocity exceeds a plausible speed, such as the 99th percentile of all observed inter-login speeds across the organization.",
              "Use a density-based clustering algorithm (e.g., DBSCAN) on the historical geolocations of each user's logins to identify their normal 'clusters' of activity (e.g., office, home, common travel destinations). A new login that does not fall into any existing cluster and is not a precursor to a new cluster is flagged as a geographic outlier for review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]