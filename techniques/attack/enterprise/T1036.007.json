[
  {
    "information_requirement": "Is an adversary attempting to evade defenses by masquerading executable files using double file extensions?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.007",
        "name": "Double File Extension",
        "evidence": [
          {
            "description": "A file is observed being written, executed, or transferred where its filename matches a known-malicious double extension pattern (e.g., 'invoice.pdf.exe') and/or its file hash matches a known indicator of compromise (IOC) associated with this technique.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4688",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (Workstations, Servers), Network Egress/Ingress Points, Email Gateway",
            "action": "1. (Symbolic) Continuously scan the `filename` field in Zeek `files.log` and the `CommandLine`/`NewProcessName` fields in Windows Event IDs 4688/1 against a threat intelligence feed of known malicious file hashes and a curated list of high-confidence malicious filenames. Generate a high-severity alert on any match. 2. (Statistical) For each match, calculate the prevalence of the source IP (from Zeek) or parent process (from Event ID 1) across the organization over the last 30 days. Flag instances where the source or parent process is rare (e.g., falls below the 5th percentile of activity) to increase the alert's priority. 3. (Machine Learning) Feed file hash and filename features (e.g., length, character distribution) from observed double-extension files into a pre-trained classification model (e.g., Random Forest) trained on known malicious and benign files. Use the model's probability score to augment the alert's risk rating; a score >0.9 indicates high confidence of maliciousness."
          },
          {
            "description": "A file creation event is logged where the filename contains a benign-appearing first extension (e.g., .txt, .pdf, .jpg) followed by an executable second extension (e.g., .exe, .scr, .bat, .hta, .lnk).",
            "data_sources": [
              "Windows Event ID 11",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (e.g., Downloads, Temp), Application cache folders, Removable media drives",
            "action": "1. (Symbolic) Using a SIEM rule, parse file creation events (Windows Event ID 11) and process creation events (Windows Event ID 4688). Apply a regular expression like `.*\\.(txt|doc|docx|pdf|xls|xlsx|ppt|pptx|jpg|gif|png)\\.(exe|scr|bat|hta|lnk|vbs|ps1)$` to the `TargetFilename` or `CommandLine` fields. Alert on any match originating from a browser, email client, or office productivity application. 2. (Statistical) For each parent process (e.g., `chrome.exe`, `outlook.exe`), establish a baseline of file extensions it typically creates. Calculate the Shannon entropy of the file extensions created by each parent process over a rolling time window. A sudden spike in entropy or the creation of a double-extension executable that is a statistical outlier (>3 standard deviations from its normal creation frequency) for that parent process should be flagged. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., ARIMA or LSTM) on the count of double-extension file creations per hour, segmented by parent process. Generate an alert when the observed count significantly exceeds the model's forecast confidence interval, indicating a potential mass-dropping event."
          },
          {
            "description": "A process creation event is logged where the process image path contains a double file extension and originates from a non-standard or high-risk directory (e.g., %USERPROFILE%\\Downloads, %TEMP%).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Terminal servers, Virtual Desktop Infrastructure (VDI) instances",
            "action": "1. (Symbolic) Monitor process creation events (Windows Event ID 1 or 4688). Create a rule that triggers when `Image` or `NewProcessName` both matches a double-extension regex AND the path is within a high-risk directory list (e.g., `C:\\Users\\*\\Downloads\\*`, `C:\\Windows\\Temp\\*`, `%LOCALAPPDATA%\\*`). 2. (Statistical) For each user, establish a baseline of directories they execute programs from. Calculate the frequency of executions from each directory path. If a double-extension file is executed from a directory that is statistically rare for that user (e.g., a directory from which they have never executed a file before, or in the bottom 10th percentile of their execution locations), elevate the risk score of the event. 3. (Machine Learning) Train an Isolation Forest model on benign process execution features (e.g., parent process name, image path, user context, command line argument count). Feed new process creation events involving double-extension files into the model. Events flagged as anomalies by the model are highly suspicious and warrant immediate investigation."
          },
          {
            "description": "Network metadata shows a file transfer where the `filename` field contains a double extension pattern, with a benign first extension and an executable second extension.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Web proxy servers, Mail transfer agents (MTAs)",
            "action": "1. (Symbolic) In Zeek `files.log`, apply the regex `.*\\.(pdf|docx?|xlsx?|pptx?|jpe?g|png|gif)\\.(exe|scr|bat|vbs|ps1|hta|lnk)$` to the `filename` field. Correlate the `fuid` with `http.log` to check for suspicious `User-Agent` strings or a missing `Referer` header. Alert on any match. 2. (Statistical) Aggregate all filenames from `files.log` over a 24-hour period. Calculate the frequency of each double-extension pattern observed. If a specific pattern (e.g., `*.pdf.exe`) suddenly appears or its frequency exceeds a dynamic threshold (e.g., the 99th percentile of all double-extension file transfers), it may indicate a new campaign. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on features from Zeek logs (`conn.log`, `http.log`, `files.log`), such as source/destination IP, port, `User-Agent`, file MIME type, and filename. Clusters of activity involving double-extension files that are distinct from the main clusters of benign traffic should be investigated as potentially malicious campaigns."
          },
          {
            "description": "A process, launched from a file with a double extension, subsequently initiates anomalous child processes, makes network connections to untrusted destinations, or modifies system autorun settings.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1",
              "Windows Event ID 11",
              "Windows Event ID 13",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for registry monitoring), Endpoint devices, DNS Servers",
            "action": "1. (Symbolic) Define a chained rule: IF a process is created from a double-extension file (from previous evidence), THEN for the next 10 minutes, monitor that process's ID (PID) and its children for: 1) execution of `reg.exe`, `schtasks.exe`, `wmic.exe`; 2) registry modifications to `Run` keys (Windows Event ID 13); 3) file creation in `System32` or `Startup` folders (Windows Event ID 11); 4) network connections to non-RFC1918 IP addresses (Zeek `conn.log`). Any of these subsequent actions triggers a high-severity alert. 2. (Statistical) For processes launched from double-extension files, profile their child process trees and network connection patterns. Compare these to a baseline of normal application behavior. A process that spawns an unusual number of child processes (> 3 standard deviations above the mean for that parent) or connects to a statistically rare destination port should be flagged. 3. (Machine Learning) Create a sequence-based anomaly detection model (e.g., using an LSTM autoencoder) trained on sequences of events (process create, file create, network connect, registry set) for benign applications. When a double-extension file is executed, feed its subsequent event sequence into the model. A high reconstruction error from the autoencoder suggests the behavior sequence is anomalous and likely malicious."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]