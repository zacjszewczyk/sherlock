[
  {
    "information_requirement": "Has the adversary escalated privileges using PE injection?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.002",
        "name": "Portable Executable Injection",
        "evidence": [
          {
            "description": "A process creates a remote thread in another process, particularly when the source process is not a standard system utility and the target is a high-privilege system process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 8"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially Privileged Access Workstations (PAWs) and Domain Controllers.",
            "action": [
              "Create a high-severity alert for any Sysmon Event ID 8 (CreateRemoteThread) where the SourceImage is not located in 'C:\\Windows\\System32\\' and the TargetImage is a critical system process such as 'lsass.exe', 'services.exe', 'wininit.exe', or 'csrss.exe'.",
              "Profile all legitimate CreateRemoteThread events to establish a baseline of normal SourceImage -> TargetImage pairs. Calculate the frequency of each pair across the enterprise. Flag any pair that is statistically rare (e.g., has occurred < 5 times in 90 days) for manual review.",
              "Train a classification model (e.g., Random Forest, Gradient Boosting) on Sysmon Event ID 8 features, including SourceImage path, TargetImage path, user context, and the reputation of the StartFunction address. Use the model to assign a risk score to each remote thread creation event, flagging high-score events as likely PE injection."
            ]
          },
          {
            "description": "A new process is created from a file whose hash is a known PE injection tool or malware component commonly used for privilege escalation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, general user endpoints.",
            "action": [
              "Query Windows Event ID 4688 logs where the executable's file hash matches a list of known malicious hashes from a threat intelligence feed, specifically looking for hashes tagged as 'injector', 'loader', or 'Cobalt Strike'.",
              "For newly created processes not matching known threats, calculate the prevalence of their file hash across the environment. Generate a medium-priority alert for hashes seen on a very small percentage of endpoints (e.g., < 0.5%) that are also executing from user-writable directories like 'C:\\Users\\Public\\', 'C:\\Temp\\', or '%APPDATA%'.",
              "Implement a machine learning classifier trained on process execution features (file path entropy, parent process name, user context, command-line arguments) to predict if a newly created process is malicious. Elevate the priority if a process flagged by the model is observed accessing or communicating with high-privilege processes."
            ]
          },
          {
            "description": "A process is executed with command-line arguments or parent-child relationships that are characteristic of known PE injection tools.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": [
              "Scan command-line arguments from Windows Event ID 4688 using regular expressions to find patterns indicative of injection, such as specifying a target Process ID (e.g., '--pid [0-9]+') or the use of 'rundll32.exe' to execute a function from a DLL in a non-standard directory.",
              "Establish a baseline of all parent-child process relationships and calculate the frequency of each pair. Alert on statistically rare relationships, especially when a non-interactive parent (e.g., 'services.exe') spawns an interactive shell ('cmd.exe', 'powershell.exe') or a reconnaissance tool ('whoami.exe', 'net.exe').",
              "Use a sequence analysis model (e.g., an LSTM) to learn normal sequences of child processes spawned by a common parent. Flag sequences that deviate significantly from learned benign behaviors, such as 'explorer.exe' spawning 'powershell.exe' which then spawns 'net.exe', as a potential post-injection discovery chain."
            ]
          },
          {
            "description": "A high-privilege process, such as 'lsass.exe' or 'services.exe', initiates an outbound network connection or creates a suspicious child process, contrary to its established behavioral baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls/Gateways), Critical System Servers (e.g., Domain Controllers).",
            "action": [
              "Create a strict 'deny-by-default' rule that triggers a critical alert if a core system process ('lsass.exe', 'csrss.exe', 'wininit.exe', 'winlogon.exe') is observed as the source of an outbound network connection in Zeek conn.log or as the parent of any child process in Windows Event ID 4688.",
              "For each critical system process, baseline normal network destinations and data volumes. Use a percentile-based threshold to alert on outliers, such as a connection to a destination IP with a reputation score in the bottom 5th percentile or a data transfer volume exceeding the 99th percentile of the process's historical activity.",
              "Employ an anomaly detection model like an Isolation Forest on a combined feature set of process and network data (process name, destination port, protocol, bytes sent). Train the model on known-good behavior for critical processes and flag any data point identified as an anomaly as a potential injection event."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary using PE injection to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.002",
        "name": "Portable Executable Injection",
        "evidence": [
          {
            "description": "A legitimate, commonly used process (e.g., 'explorer.exe', 'svchost.exe') initiates a network connection to a known malicious IP address, domain, or a domain with suspicious characteristics.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Resolvers, Web Proxies.",
            "action": [
              "Join network logs (Zeek conn.log, dns.log, ssl.log) against a threat intelligence feed of malicious indicators. Generate a high-priority alert if the source of the traffic is identified via host-network correlation as a common trusted process not associated with user browsing (e.g., 'svchost.exe', 'notepad.exe').",
              "For each trusted process, profile its normal destination domains. Alert if a process communicates with a domain registered within the last 30 days or a domain with high entropy in its name (e.g., 'a8fz9b3c1.xyz'), calculated using the character distribution of the domain string.",
              "Use a time-series anomaly detection model to monitor the volume of data sent by trusted processes to low-reputation domains. A sudden spike in data transfer, even to a destination not on a blocklist, can indicate C2 or exfiltration from an injected process."
            ]
          },
          {
            "description": "A legitimate, trusted process spawns an unusual child process, such as a command-line interpreter or a tool not associated with its normal function.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers.",
            "action": [
              "Create a specific alert rule for any instance where a trusted, non-shell process (e.g., 'WINWORD.EXE', 'explorer.exe') spawns a command-line interpreter ('cmd.exe', 'powershell.exe') or a known living-off-the-land binary ('net.exe', 'whoami.exe', 'certutil.exe').",
              "Calculate the entropy of command-line arguments for child processes spawned by trusted parents. A high entropy score for a PowerShell command spawned from 'explorer.exe' suggests obfuscation or base64 encoding. Alert when the calculated entropy exceeds a baseline threshold (e.g., the 95th percentile for that parent-child pair).",
              "Train a sequence-to-sequence (Seq2Seq) model on legitimate command-line argument patterns for common processes. Use this model to flag command lines that are grammatically unusual or contain argument combinations that do not conform to learned benign patterns, indicating potential abuse."
            ]
          },
          {
            "description": "A legitimate process exhibits anomalous network behavior, such as C2-like beaconing, large data transfers, or connections with unusual TLS attributes, that is inconsistent with its normal function.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Correlated Host Logs.",
            "action": [
              "Monitor Zeek ssl.log and x509.log for trusted processes (e.g., 'svchost.exe') initiating TLS connections that use self-signed certificates or connect to a destination server name that does not match the certificate's subject, especially to non-Microsoft domains.",
              "For each source host/process pair, analyze the time delta between connections to the same destination. A low standard deviation of these time deltas indicates periodic, machine-generated beaconing. Also, calculate the prevalence of the connection's JA3/JA3S hash; a hash that is rare (<1% prevalence) for that process type is highly suspicious.",
              "Apply a clustering algorithm (e.g., DBSCAN) to network connection metadata (duration, bytes sent, port, protocol, JA3 hash) for each common process. Investigate outlier clusters of activity that are distinct from the large, central cluster of benign behavior, as these represent anomalous network patterns indicative of injection."
            ]
          },
          {
            "description": "A short-lived dropper process executes and terminates, immediately followed by a long-running, legitimate process exhibiting new, anomalous network or process behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Email Gateway Servers, Web Proxy Servers.",
            "action": [
              "Hunt for the specific sequence: 1) A process is spawned from an email client or browser. 2) This process downloads a file (Zeek http.log) and terminates within 60 seconds (Windows Event ID 4688). 3) Within 2 minutes on the same host, a legitimate process like 'explorer.exe' begins beaconing (Zeek conn.log) to a new domain. Alert on this correlated sequence.",
              "On a per-host basis, create a time-series of short-lived process creations (lifetime < 60 seconds). A sudden spike in the rate of these events, followed by a statistically significant change in the network baseline of a persistent process on the same host, indicates a dropper-injection sequence.",
              "Use a Hidden Markov Model (HMM) where the hidden states are 'Benign', 'Dropper Active', and 'Injected'. Observed events are process creations, network connections, and file modifications. Train the model on labeled attack scenarios to learn transition probabilities, then apply it to real-time event streams to classify the current threat state of each host."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]