[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using filename manipulation?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.002",
        "name": "Right-to-Left Override",
        "evidence": [
          {
            "description": "The presence of the Right-to-Left Override (RTLO) Unicode character U+202E or its byte representations (e.g., URL-encoded %E2%80%AE, byte sequence E2 80 AE) is detected within a file name, process command line, or registry key/value.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Proxies, Mail Gateways, Active Directory Domain Controllers",
            "action": [
              "Symbolic Detection: Implement a high-priority detection rule to search for the literal Unicode string 'U+202E' and its common encodings (e.g., '\\u202e', '%E2%80%AE') in process command lines (Windows Event ID 4688), registry modifications (Windows Event ID 4657), and filenames transferred over the network (Zeek files.log, Zeek http.log). Trigger an immediate alert upon any match.",
              "Statistical Detection: Calculate the character entropy for all new filenames and process command lines. Establish a baseline entropy distribution for the environment. Flag any filename or command line whose entropy score is a significant outlier (e.g., exceeds the 99.5th percentile), as the inclusion of non-standard characters like RTLO often increases entropy.",
              "Machine Learning Detection: Train a classification model (e.g., Random Forest) to identify suspicious filenames and command lines. Features should include string length, character frequency distributions, presence of non-ASCII characters, and entropy. Use the trained model to score new events in real-time, flagging those with a high probability of being malicious for analyst review."
            ]
          },
          {
            "description": "A file name contains the RTLO character (U+202E) structured to reverse a portion of the string, making a malicious file extension (e.g., .exe, .scr) appear as a benign one (e.g., .docx, .jpg). For example, 'filename[U+202E]cod.exe' is displayed as 'filenameexe.doc'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, User Workstations, Email Servers",
            "action": [
              "Symbolic Detection: Use regular expressions to parse filenames from process creation events and network file transfers. The pattern should detect filenames containing the RTLO character followed by characters that form a reversed executable extension (e.g., 'exe.', 'rcs.', 'tab.'). Correlate this with network logs (Zeek files.log) to confirm a mismatch between the apparent file extension and the server-provided MIME type (e.g., extension is '.jpg', but MIME type is 'application/x-dosexec').",
              "Statistical Detection: Analyze network file transfers (Zeek files.log) to establish a baseline rate of mismatch between file extensions and their corresponding MIME types. A sudden, sharp increase in the count of files with common document/image extensions (.pdf, .jpg, .docx) but an executable MIME type ('application/octet-stream', 'application/x-dosexec') indicates a potential campaign.",
              "Machine Learning Detection: Apply time-series anomaly detection (e.g., ARIMA) to the daily/hourly count of file extension/MIME type mismatches across the enterprise. An anomalous spike in the time series that deviates significantly from the established seasonal or daily patterns should trigger an alert for investigation into a possible masquerading campaign."
            ]
          },
          {
            "description": "A common document-handling parent process (e.g., explorer.exe, winword.exe, acrord32.exe) spawns an anomalous child process, such as a command shell (cmd.exe, powershell.exe) or script interpreter (wscript.exe, cscript.exe), immediately following a user file-open action.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, File Servers",
            "action": [
              "Symbolic Detection: Create and maintain a watchlist of forbidden parent-child process relationships. Trigger a high-severity alert when a process from the 'document handlers' list (e.g., 'winword.exe', 'acrord32.exe', 'excel.exe') is observed as the parent of a process from the 'shells and interpreters' list (e.g., 'cmd.exe', 'powershell.exe', 'wscript.exe').",
              "Statistical Detection: For each parent process name in the environment, build a frequency distribution of all its child process names over a 30-day rolling window. Calculate the rarity of each observed parent-child pair. Generate a medium-severity alert when a newly observed pair falls below a rarity threshold (e.g., it is in the bottom 0.1% of all observed pairs for that parent), indicating statistically unlikely behavior.",
              "Machine Learning Detection: Model process execution chains as directed graphs where nodes are processes and edges represent parent-child relationships. Use a graph-based anomaly detection algorithm to identify never-before-seen or extremely rare paths (e.g., 'explorer.exe' -> 'disguised_file.exe' -> 'cmd.exe'). This approach can uncover not just the initial execution but the subsequent stages of the attack chain."
            ]
          },
          {
            "description": "A file write or download event from a user application (e.g., chrome.exe, outlook.exe) is followed within a short time window (< 60 seconds) by a process creation event on the same host, where the base filename is identical but the executed process name was likely disguised using RTLO.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Network Egress Points",
            "action": [
              "Symbolic Detection: Correlate file download logs (Zeek files.log) with process creation logs (Windows Event ID 4688) on the same host IP and matching filename within a 60-second window. Specifically, look for cases where the downloaded file has a non-executable extension (e.g., 'report.docx') but the executed process contains the RTLO character.",
              "Statistical Detection: For each user, establish a baseline rate of 'download-then-execute' behavior. Use a moving average and standard deviation to model this baseline. An alert is generated when a user's activity exceeds a dynamic threshold (e.g., 3 standard deviations above their personal or peer-group average), which could indicate a successful phish.",
              "Machine Learning Detection: Develop a risk scoring model for all 'download-then-execute' sequences. Features should include the file source reputation, URL category, presence of RTLO in the filename, MIME type/extension mismatch, time between download and execution, and the prevalence of the file hash. A high risk score from the model indicates a high-confidence malicious event."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]