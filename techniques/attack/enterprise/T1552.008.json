[
  {
    "information_requirement": "Has the adversary leveraged enterprise chat services to search for and collect unsecured credentials?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1552.008",
        "name": "Chat Messages",
        "evidence": [
          {
            "description": "A process is created with a file hash or name matching a known credential theft tool or infostealer that specifically targets chat applications (e.g., Mimikatz, Slack-Pirate, Teams-Stealer).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, VDI instances, and servers hosting collaboration tools.",
            "action": [
              "Symbolic: Create a watch list of process names and file hashes associated with known credential harvesting tools that target chat applications. Monitor process creation events (Sysmon Event ID 1, Windows Event ID 4688) and generate a high-severity alert upon a direct match with the watch list.",
              "Statistical: For each new process execution, calculate the prevalence of its file hash across the enterprise. Flag processes where the hash is seen on a small number of endpoints (e.g., fewer than 1% of hosts), as this rarity is a common indicator of malicious tools. Correlate with rare parent processes for higher fidelity.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from process execution events (Sysmon Event ID 1). Features should include process name entropy, command-line argument length, parent process name, user context, and whether the file is signed. Use the model to classify new, unseen process executions as potentially malicious credential harvesting activity."
            ]
          },
          {
            "description": "A scripting engine process (e.g., powershell.exe, python.exe, wscript.exe) is executed with command-line arguments containing both a path to a known chat application's data directory and keywords indicative of credential searching (e.g., 'password', 'token', 'key').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, domain controllers (for script block logging GPOs), and application servers where scripts might be executed.",
            "action": [
              "Symbolic: Deploy a SIEM rule that triggers on process creation events (Sysmon Event ID 1) where the process is a scripting engine (powershell.exe, python.exe) AND the command line contains a regular expression matching keywords like 'password', 'secret', 'token', 'key' AND a path fragment like '%APPDATA%\\Slack' or '%APPDATA%\\Microsoft\\Teams'.",
              "Statistical: For all scripting engine command lines, calculate the Shannon entropy of the command-line string. Establish a baseline entropy score for typical administrative and user scripts. Flag commands with unusually high entropy (> 95th percentile), which can indicate obfuscation or complex, non-standard search patterns.",
              "Machine Learning: Use a pre-trained Natural Language Processing (NLP) model to analyze the semantic content of command-line arguments. Fine-tune the model to recognize the intent of credential searching and extraction, flagging commands that match this pattern even if they use non-standard keywords or syntax."
            ]
          },
          {
            "description": "A process other than the legitimate chat application executable (e.g., slack.exe, teams.exe) or a known benign system process requests read access to files within the chat application's local data storage directories.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on user endpoints, particularly within user profiles (e.g., %APPDATA%) where chat clients store data caches and logs.",
            "action": [
              "Symbolic: Enable SACLs on chat application data directories (e.g., '%APPDATA%\\Microsoft\\Teams', '%APPDATA%\\Slack'). Create an allow-list of process names permitted to read from these directories (e.g., 'teams.exe', 'slack.exe', 'SearchIndexer.exe'). Generate an alert for any process access event (Windows Event ID 4663) where the process name is not on the allow-list.",
              "Statistical: Profile the set of processes that access monitored chat data directories over a 30-day period. For any new access event, calculate a rarity score for the accessing process name. An access by a process that has never been seen accessing that directory before (e.g., 'powershell.exe', 'rundll32.exe') should be flagged for investigation.",
              "Machine Learning: Develop a clustering model (e.g., DBSCAN) based on file access patterns. Features can include accessing process name, user context, time of day, and target file path. The model can group normal access behaviors into clusters. Any access event that falls outside of these established clusters is treated as an anomaly and flagged for review."
            ]
          },
          {
            "description": "Network traffic from an endpoint to a chat service API exhibits anomalous characteristics, such as a data transfer volume or API call frequency that is statistically unusual for the source user.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, proxy server logs, and DNS server logs.",
            "action": [
              "Symbolic: Maintain an allow-list of approved FQDNs for corporate chat services (e.g., '*.slack.com', '*.teams.microsoft.com'). Monitor DNS queries (Zeek dns.log) and TLS handshakes (Zeek ssl.log Server Name Indication) for connections to domains that contain keywords like 'slack' or 'teams' but are not on the allow-list. Alert on any such connection.",
              "Statistical: For each user, establish a baseline of bytes sent ('orig_bytes' in Zeek conn.log) to approved chat service IP ranges over a 30-day rolling window. Calculate the 99th percentile for daily data volume per user. Generate an alert when a user's daily data sent to these services exceeds this threshold, indicating potential bulk data scraping.",
              "Machine Learning: Apply time-series forecasting (e.g., ARIMA or LSTM) to model the volume of network traffic and the frequency of API calls for each host to chat services. The model will predict the expected behavior for the next time interval. An alert is generated when the observed activity significantly deviates from the model's prediction interval, detecting sudden bursts of activity consistent with automated data harvesting."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]