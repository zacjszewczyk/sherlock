[
  {
    "information_requirement": "Is the adversary using Electron applications to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.015",
        "name": "Electron Applications",
        "evidence": [
          {
            "description": "An Electron application process (e.g., teams.exe) establishes a network connection to a destination IP address or domain listed on a high-confidence threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls",
            "action": [
              "Join process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) on the source IP and timestamp to attribute network activity to specific Electron processes. Query the destination IP (from conn.log) or resolved domain (from dns.log) against a threat intelligence database of known malicious indicators. Generate a high-priority alert for any match.",
              "For each destination domain/IP contacted by an Electron app, calculate its enterprise-wide prevalence (i.e., the percentage of total endpoints that have also contacted it in the last 30 days). Generate a medium-priority alert when an Electron application connects to a destination with a prevalence below a low threshold (e.g., <0.1%), indicating a statistically rare connection.",
              "Train a binary classification model (e.g., XGBoost, Logistic Regression) on a labeled dataset of malicious and benign connections. Engineer features from Zeek logs, including destination port, protocol, connection duration, bytes sent/received, domain entropy, and domain age (from WHOIS enrichment). Continuously score new connections from Electron apps and alert on those classified as malicious with a confidence score above a set threshold (e.g., 0.9)."
            ]
          },
          {
            "description": "An Electron application process is launched with command-line arguments known to disable security features, enable debugging, or launch arbitrary executables, such as '--no-sandbox', '--remote-debugging-port', or '--gpu-launcher'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Developer workstations, Production servers",
            "action": [
              "From process creation events (Windows Event ID 4688), parse the command line for processes matching a list of known Electron applications. Use a regular expression to search for and alert on the presence of high-risk arguments, including but not limited to: '--inspect', '--remote-debugging-port', '--gpu-launcher', '--disable-gpu-sandbox', or '--no-sandbox'.",
              "For each Electron application, build a frequency distribution of all observed command-line arguments across the enterprise over a 30-day baseline period. For each new process execution, calculate a rarity score for its arguments based on the baseline. Alert when a process is launched with an argument or combination of arguments that falls into a low-frequency percentile (e.g., bottom 1%), indicating highly unusual usage.",
              "Represent the full command line of each Electron process launch as a vector using a TF-IDF (Term Frequency-Inverse Document Frequency) model. Train an anomaly detection model, such as Isolation Forest or One-Class SVM, on the resulting vectors from a baseline period. Score new process command lines in real-time and alert on those identified as outliers by the model."
            ]
          },
          {
            "description": "A known Electron application process (e.g., slack.exe, teams.exe) spawns a direct child process that is a command-line interpreter or scripting engine, such as cmd.exe, powershell.exe, or wscript.exe.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers",
            "action": [
              "Monitor process creation events (Windows Event ID 4688) for parent-child relationships. Create a high-priority alert for any instance where a parent process from a list of known Electron applications (e.g., teams.exe, slack.exe, discord.exe) spawns a child process from a watchlist of interpreters (e.g., cmd.exe, powershell.exe, pwsh.exe, wscript.exe, cscript.exe, bash.exe).",
              "Build a frequency table of all unique parent-child process pairs observed across the environment over a 30-day period. Alert when a new pair involving a known Electron application as the parent is observed for the first time. Additionally, flag existing pairs whose daily frequency drops into a low percentile (e.g., <1st percentile) compared to their historical norm, indicating a rare event.",
              "Model process lineage as a directed graph where nodes are process names and edges represent parent-child relationships, weighted by frequency. Use a graph-based anomaly detection algorithm (e.g., community detection, centrality analysis) to identify anomalous edges. An alert is triggered by a low-weight edge connecting an 'Electron App' node to a 'Shell/Interpreter' node, indicating a statistically improbable process chain."
            ]
          },
          {
            "description": "An Electron application generates network traffic with statistically anomalous characteristics, such as connecting to a non-standard port for its protocol, transferring an unusually large volume of data, or communicating with a domain rarely seen across the enterprise.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Domain Name System (DNS) resolvers, Endpoint devices",
            "action": [
              "Define an allowlist of standard destination ports (e.g., 80, 443) and expected protocols for each major Electron application. Correlate process data (Windows Event ID 4688) with network logs (Zeek conn.log) to attribute connections. Create a rule that alerts when an application connects to a port not on its specific allowlist.",
              "For each Electron application, establish a historical baseline of network connection metrics from Zeek conn.log, including bytes sent (orig_bytes), bytes received (resp_bytes), and duration. Alert when a new connection's metric exceeds a dynamic threshold, such as the 99th percentile of that application's baseline. Separately, for domains from Zeek dns.log, alert if an application resolves a domain that has been queried by less than 1% of other devices in the last 30 days.",
              "For each key Electron application, model the volume of outbound data (orig_bytes from Zeek conn.log) per host as a time series. Use a forecasting model like SARIMA or Prophet to predict the expected range of data volume for the next hour. Generate an alert if the observed data volume significantly exceeds the model's prediction interval, which could indicate a data exfiltration event."
            ]
          },
          {
            "description": "A child process spawned by an Electron application executes with command-line arguments that contain file paths referencing the parent application's core resource files, such as 'app.asar' or JavaScript files within the application's installation directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices with installed Electron applications",
            "action": [
              "In process creation events (Windows Event ID 4688), inspect the command line of any child process spawned by a known Electron application. Use a regular expression to detect if the command line contains a file path that includes the parent process's name and targets sensitive file types or names, such as 'app.asar', '.js', or '.html'.",
              "Calculate the Shannon entropy of the command-line arguments for child processes spawned by Electron applications. Establish a baseline entropy distribution for legitimate child process commands. Alert when a command line's entropy score is a significant outlier (e.g., exceeds the 98th percentile), as this often indicates obfuscated or injected code.",
              "Train a sequence-based anomaly detection model, such as a Long Short-Term Memory (LSTM) autoencoder, on legitimate sequences of command-line arguments from processes spawned by Electron apps. A malicious sequence, such as an unusual combination of commands and file paths used to modify the application, will have a high reconstruction error when processed by the model, triggering an anomaly alert."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]