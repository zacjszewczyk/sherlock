[
  {
    "information_requirement": "Is the adversary attempting to evade defenses related to virtualization or sandboxing?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "A process is created with a file hash (MD5, SHA1, or SHA256) that matches a known sandbox evasion tool or malware family documented to use T1497.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, application servers, and domain controllers.",
            "action": [
              "Symbolic Logic: Continuously correlate the file hash (e.g., SHA256) of every new process (Windows Event ID 4688, Sysmon Event ID 1) against a threat intelligence feed of known sandbox evasion tools (e.g., Pafish, VBoxHardenedLoader) or malware with documented T1497 capabilities. An alert on any match is a high-confidence indicator.",
              "Statistical Method: Analyze the prevalence of known evasion tool hashes across the environment. Use frequency analysis to identify if a specific tool hash appears on an unusual number of distinct hosts within a short time frame (e.g., > 95th percentile of hash prevalence in a 1-hour window), which could indicate a widespread campaign.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) trained on process metadata (parent process, user context, command line arguments) to predict if a process execution event is malicious. Use the presence of a known evasion hash as a strong feature in the model to distinguish evasion attempts from benign activity."
            ]
          },
          {
            "description": "A process performs one or more file system, registry, or WMI queries for artifacts indicative of a virtualized environment (e.g., VMware, VirtualBox, QEMU) or analysis tool (e.g., Wireshark, Sysinternals).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13",
              "Sysmon Event ID 19",
              "Sysmon Event ID 20",
              "Sysmon Event ID 21"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, critical servers, and developer environments where analysis tools might be present.",
            "action": [
              "Symbolic Logic: Monitor process command lines (Event ID 4688/1) and dedicated event logs for access to a curated list of high-fidelity virtualization/sandbox artifacts. This includes registry keys (e.g., HKLM\\SOFTWARE\\Oracle\\VirtualBox - Sysmon ID 12/13), file paths (e.g., C:\\windows\\System32\\Drivers\\Vmmouse.sys), and WMI queries (e.g., 'SELECT * FROM Win32_BIOS WHERE SerialNumber CONTAINS \"VMware\"' - Sysmon ID 19-21). A match should trigger an alert.",
              "Statistical Method: For each process, calculate a 'suspicion score' by summing weights assigned to each queried artifact. Establish a baseline for normal artifact query activity by legitimate software (e.g., asset management tools). A process whose score exceeds a statistical threshold (e.g., > 99th percentile of all process scores in a 24-hour period) is anomalous and indicates a likely evasion attempt.",
              "Machine Learning: Use a sequence analysis model (e.g., an LSTM or Hidden Markov Model) on the stream of system calls or logged events (file access, registry query, WMI query) for each process. Train the model to recognize the specific sequence of checks characteristic of evasion frameworks like Pafish, distinguishing them from the more random access patterns of normal applications."
            ]
          },
          {
            "description": "A process, after performing one or more sandbox checks, terminates prematurely with a short lifespan and minimal system interaction (e.g., no child processes, no significant network traffic, no file modifications).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 5"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations and servers, especially those in sandboxed or isolated network segments.",
            "action": [
              "Symbolic Logic: Create a rule that triggers when a process (Sysmon Event ID 1) is observed performing a known sandbox check and is then followed by a termination event (Sysmon Event ID 5) within a short timeframe (e.g., < 5 seconds) without any intervening network, file write, or child process events from that same ProcessGUID.",
              "Statistical Method: Establish a baseline of process lifespans for all executables in the environment. For processes that perform sandbox checks, flag any instance where the process lifespan is an outlier (e.g., < 5th percentile of its historical lifespan or the lifespan of its peers) and its network/file I/O is also anomalously low (e.g., < 10th percentile).",
              "Machine Learning: Train a decision tree classifier on features of a completed process session (lifespan, CPU time, bytes sent/received, files written, child processes spawned, sandbox checks performed). The model's objective is to classify sessions as 'evasive termination' vs. 'normal execution'. A process that performs checks and has features indicative of low activity would be flagged."
            ]
          },
          {
            "description": "A process, after performing initial environment checks, enters a prolonged period of inactivity (indicative of a sleep call) before initiating its primary payload, such as C2 network connections or file encryption.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, servers, and network egress points.",
            "action": [
              "Symbolic Logic: Correlate a process creation event (Sysmon Event ID 1) that performs sandbox checks with its first network connection (Sysmon Event ID 3 or Zeek conn.log). Alert if the time delta between process start and first network connection exceeds a long, fixed threshold (e.g., > 5 minutes) for any process not on an allowlist of applications known to have long startup times.",
              "Statistical Method: For each executable name, calculate the baseline distribution of time-to-first-network-connection. Use a time series analysis on process events to identify a burst of discovery activity at launch, followed by a gap, then network activity. Flag any process where this gap is a statistical outlier (e.g., > 99th percentile for that executable or for all new processes).",
              "Machine Learning: Use a time series clustering algorithm (e.g., k-Shape) to group processes based on their system activity patterns over time (e.g., CPU, I/O, network events). Identify clusters that represent a 'delayed execution' profile: high initial activity, a long trough, and then a second burst of activity. Processes falling into this cluster are candidates for delayed execution evasion."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary conducting discovery to identify virtualization or analysis environments?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "A process command line or script content contains high-fidelity strings, filenames, or argument patterns unique to known open-source or private sandbox evasion/discovery tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations and servers, particularly those with PowerShell execution capabilities.",
            "action": [
              "Symbolic Logic: Using regular expressions, search all process command lines (Sysmon Event ID 1) and PowerShell script block logs (Event ID 4104) for unique strings associated with discovery tools (e.g., 'pafish', 'al-khaser', 'Find-AVSignature.ps1', 'Invoke-VBoxHardenedLoader'). A direct match should generate a high-priority alert.",
              "Statistical Method: Calculate the rarity of command-line arguments and script content n-grams across the enterprise. An execution event containing statistically rare n-grams that also appear in public evasion tool repositories is highly suspicious. Flag commands where the Jaccard similarity to a known evasion script exceeds a threshold (e.g., 0.8).",
              "Machine Learning: Train a text classification model (e.g., using TF-IDF vectorization and a Naive Bayes classifier) on a labeled dataset of benign and malicious (specifically, evasion-focused) scripts and command lines. Deploy the model to score all new command lines and script blocks in real-time to identify previously unseen evasion tools that share linguistic features with known ones."
            ]
          },
          {
            "description": "A process executes a system enumeration command (e.g., 'tasklist', 'Get-Process') and pipes the output to a filtering utility (e.g., 'findstr', 'Select-String') to search for keywords associated with security, analysis, or debugging tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations and servers, focusing on non-administrative user accounts.",
            "action": [
              "Symbolic Logic: Create a detection rule that looks for process command lines (Sysmon Event ID 1) containing an enumeration command (e.g., 'tasklist', 'sc query', 'Get-Process') followed by a pipe character ('|') and a filter command (e.g., 'findstr', 'grep', 'Select-String') with arguments matching a list of security tool names (e.g., 'wireshark', 'sysmon', 'procmon', 'x64dbg', 'fiddler').",
              "Statistical Method: Profile the frequency of command-line piping ('|') by user and process. An interactive shell process (e.g., cmd.exe, powershell.exe) executing chained enumeration-and-filter commands that is not associated with a known administrator or administrative script is anomalous. Flag users whose daily count of such chained commands exceeds 3 standard deviations above their own baseline.",
              "Machine Learning: Model parent-child process relationships and command-line structures using a graph-based algorithm. A model can learn that 'explorer.exe' spawning 'cmd.exe' which then spawns 'tasklist.exe' is common, but 'winword.exe' spawning 'cmd.exe' which then runs 'tasklist | findstr sysmon' is highly anomalous. Use the model to detect these abnormal execution chains."
            ]
          },
          {
            "description": "A single process rapidly performs a wide variety of system queries unrelated to its apparent function, checking for user activity (e.g., mouse movement, recent documents), system configuration (e.g., screen resolution, CPU core count), and system uptime.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, as these 'humanity checks' are less relevant on servers.",
            "action": [
              "Symbolic Logic: Identify a process that, within the first 10 seconds of execution, accesses a combination of specific artifacts associated with 'humanity checks', such as querying registry keys for screen resolution (HKCU\\Control Panel\\Desktop), file system for recent documents (e.g., '%USERPROFILE%\\Recent'), and executing commands like 'systeminfo'.",
              "Statistical Method: For each process, calculate the entropy of the types of system events it generates within the first 30 seconds of life (e.g., file system, registry, network, process). A process with unusually high entropy, indicating it is touching many different parts of the system in a non-linear way, is suspicious. Flag processes with an event entropy score in the top 99th percentile.",
              "Machine Learning: Use an unsupervised learning model (e.g., an autoencoder) trained on sequences of events from benign applications. The model learns to reconstruct 'normal' startup behavior. When a malware process performing diverse humanity checks is fed to the model, the reconstruction error will be high, flagging it as an anomaly."
            ]
          },
          {
            "description": "A process makes a single, low-volume network connection (e.g., DNS query and TCP/UDP handshake) to a high-reputation public service (e.g., Google DNS, a public NTP server) immediately after launch, with no subsequent data transfer, indicative of a connectivity check.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Sysmon Event ID 3",
              "Sysmon Event ID 22"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all endpoints capable of initiating external network connections.",
            "action": [
              "Symbolic Logic: Create a rule to detect a DNS query (Sysmon Event ID 22, Zeek dns.log) for a common reachability-test domain (e.g., 'google.com', 'cloudflare.com') followed by a network connection (Sysmon Event ID 3, Zeek conn.log) from the same process where the total bytes transferred ('orig_bytes' + 'resp_bytes' in Zeek) is less than a small threshold (e.g., 512 bytes) and no further connections are made by that process in the next minute.",
              "Statistical Method: For all outbound connections, calculate the distribution of total session bytes. Identify connections that fall below a low percentile (e.g., 5th percentile) and are directed to high-reputation IPs. Correlate these 'micro-connections' with the initiating process. If a process's only network activity is one or more of these micro-connections, it is highly suspicious.",
              "Machine Learning: Train a one-class SVM or isolation forest on features of benign network connections (e.g., duration, bytes sent/received, destination port, server reputation). This model will define a boundary for 'normal' network behavior. Connections that fall outside this boundary, particularly those with extremely low duration and byte counts, will be flagged as anomalous 'canary' checks."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]