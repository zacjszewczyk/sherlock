[
  {
    "information_requirement": "Is the adversary maintaining persistence using malicious browser extensions?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1176.001",
        "name": "Browser Extensions",
        "evidence": [
          {
            "description": "A browser process on an endpoint establishes a network connection to a domain or IP address present on a threat intelligence feed of known command and control (C2) servers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points to the internet (e.g., firewalls, proxies), DNS resolvers, User workstations",
            "action": "Symbolic: Join network flow logs (Zeek conn.log) with DNS logs (Zeek dns.log) to correlate destination IPs with requested domains. Compare both IPs and domains against a high-confidence threat intelligence feed of known C2 indicators. Generate a high-severity alert for any match originating from a user workstation IP. Statistical: Calculate the rarity of each destination domain across the enterprise over a 30-day window. Flag connections to domains in the bottom 1st percentile of prevalence for review, as C2 domains are often unique to a campaign or have low prevalence. Machine Learning: Train a time-series forecasting model (e.g., ARIMA) on the volume of outbound connections and data transferred per user over a rolling 30-day baseline. Trigger an anomaly alert when the observed volume for a user exceeds the predicted upper bound by more than three standard deviations, especially if correlated with connections to statistically rare domains."
          },
          {
            "description": "A non-browser process (e.g., powershell.exe, cmd.exe) writes or modifies files within a user's browser extension or profile directory, or a registry key is modified to force-install an extension.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Domain Controllers (for Group Policy Objects), Configuration management servers",
            "action": "Symbolic: Create a detection rule that monitors for file modification events (Windows Event ID 4663) or process creations with command lines (Windows Event ID 4688) where the target path is a known browser extension directory (e.g., `...\\Google\\Chrome\\User Data\\...\\Extensions\\`, `...\\Mozilla\\Firefox\\Profiles\\...\\extensions\\`) and the initiating process is not a legitimate browser or installer. Also, monitor for registry modifications (Windows Event ID 4657) to keys like `HKLM\\SOFTWARE\\Policies\\Google\\Chrome\\ExtensionInstallForcelist` by unauthorized processes. Statistical: Establish a baseline of all processes that write to browser extension directories across the environment. Calculate the frequency of each source process performing this action. Generate an alert for any process that is statistically rare (e.g., observed on less than 1% of endpoints) writing to these protected locations. Machine Learning: Use a classification model (e.g., Random Forest) trained on process execution logs. Features should include parent process name, command-line arguments (length, presence of keywords like 'extension'), user context, and target file path. The model should classify each event as 'benign install' or 'suspicious sideload'. Flag 'suspicious sideload' events for investigation."
          },
          {
            "description": "A browser process spawns a suspicious child process not associated with normal browsing activity, such as a command shell or scripting engine.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Terminal servers / VDI environments",
            "action": "Symbolic: Create a high-priority alert for any instance where a browser process (`chrome.exe`, `firefox.exe`, `msedge.exe`) is the parent process (as per Windows Event ID 4688) of a command-line interpreter (`cmd.exe`, `powershell.exe`), scripting host (`wscript.exe`, `cscript.exe`), or `rundll32.exe`. This parent-child relationship is highly anomalous and a strong indicator of code execution. Statistical: For each endpoint, build a baseline of normal parent-child process relationships originating from browsers. Calculate the entropy of the child process distribution for each parent browser process. A sudden spike in entropy or the appearance of a child process with a very low historical probability (e.g., p < 0.001) across the enterprise should trigger an alert. Machine Learning: Employ a graph-based anomaly detection algorithm. Model process relationships as a directed graph where nodes are processes and edges represent parent-child lineage. Train the model on benign activity. Flag new or rare subgraphs originating from a browser process as potential malicious activity."
          },
          {
            "description": "A browser process exhibits network behavior that deviates significantly from its established baseline in terms of data volume transferred, connection frequency, or destination characteristics such as domain age or entropy.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points to the internet, Network taps/sensors providing Zeek data, User workstations",
            "action": "Symbolic: Monitor `Zeek http.log` for requests where the `user_agent` string is missing, malformed, or does not match the expected user agent for the browser process identified in host logs. Correlate this with connections to non-categorized or newly-registered domains. Statistical: For each host, create a 30-day rolling baseline of outbound data volume (`orig_bytes` in Zeek conn.log) and connection count per hour. Generate an alert if the hourly data volume or connection count exceeds the 99th percentile of the host's baseline. Additionally, calculate the Shannon entropy of the queried domain names in `Zeek dns.log` per host; a high entropy score can indicate Domain Generation Algorithm (DGA) activity. Machine Learning: Use a time-series anomaly detection model (e.g., LSTM) to forecast the expected outbound data volume and connection frequency for each host. Trigger an alert when observed values significantly deviate from the forecasted range. Additionally, use clustering algorithms (e.g., K-Means) on features from `Zeek conn.log` (duration, bytes sent, service, protocol) to group connections into 'normal' and 'outlier' clusters."
          },
          {
            "description": "A browser on a standard user workstation initiates connections to internal IP addresses (RFC1918) on ports not typically associated with web browsing (e.g., SMB, RDP, SSH) or to network segments containing sensitive servers.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User network segments, Server network segments, Internal network taps/sensors",
            "action": "Symbolic: Create a rule to alert on any connection from a user VLAN to a server VLAN (e.g., containing domain controllers, databases) where the destination port is not 80 or 443. Enrich this alert with host logs (Windows Event ID 5156) to confirm the initiating process is a browser. A browser connecting to a domain controller on port 389 (LDAP) or 445 (SMB) is a high-fidelity indicator. Statistical: Build a baseline of normal internal connections (destination IP, destination port) for each user workstation. Use frequency analysis to identify connections to internal IPs/ports that are rare for a specific user or for the entire user population. A connection from a user in the marketing department to an engineering server, where such a connection has never been observed, should be flagged. Machine Learning: Model the internal network as a graph where nodes are hosts and edges are connections. Use a community detection algorithm (e.g., Louvain Modularity) to identify normal communication patterns. Trigger an alert when a browser process creates an edge that bridges two distinct communities in an unexpected way (e.g., a single workstation connecting directly to a database server outside of a known application path)."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]