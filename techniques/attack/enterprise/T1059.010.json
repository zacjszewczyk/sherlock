[
  {
    "information_requirement": "Has the adversary executed commands using AutoHotKey or AutoIT scripts? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.010",
        "name": "AutoHotKey & AutoIT",
        "evidence": [
          {
            "description": "An executable file, identified as 'AutoHotkey.exe', 'AutoIt3.exe', or a compiled script, is executed and its file hash matches a known malicious signature. Alternatively, the process initiates a network connection to an IP address or domain present on a threat intelligence feed of known command and control (C2) servers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise workstations, Application Servers, Domain Controllers, Network Egress/Internet Gateway",
            "action": [
              "Symbolic (IOC Match): From process creation logs (Windows Event ID 4688), extract the SHA256 hash of the process image for any process named 'AutoHotkey.exe', 'AutoIt3.exe', or any unidentified compiled executable. Query a threat intelligence platform (TIP) for matches. Separately, extract destination IP addresses from network connection logs (Zeek conn.log) associated with the host and process ID and query the TIP for matches against known C2 infrastructure. Generate an alert upon any match.",
              "Statistical (Port Frequency): For processes identified as AutoHotkey/AutoIt interpreters, analyze the destination ports used in their network communications (Zeek conn.log). Calculate the frequency distribution of destination ports used by these processes across the enterprise over a 30-day baseline. An alert is triggered if a process communicates over a port that falls below the 5th percentile of common usage, indicating a potential non-standard C2 channel.",
              "Machine Learning (Classification): Develop a supervised classification model (e.g., Random Forest) trained on labeled datasets of benign and malicious process executions. Features should include process name, parent process, command-line arguments, file hash, and associated network connection attributes (destination IP reputation, port). Deploy the model to score new AutoHotkey/AutoIt execution events in real-time, generating a high-confidence alert for events classified as malicious."
            ]
          },
          {
            "description": "The 'AutoHotkey.exe' or 'AutoIt3.exe' interpreter process is executed from a file path outside of the standard 'C:\\Program Files\\' directory, such as '%APPDATA%', '%TEMP%', or 'C:\\Users\\Public\\'. Additionally, the script file being executed (identified via command-line arguments) is located in a user-writable or temporary directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise workstations, User profile directories on servers, Shared network drives",
            "action": [
              "Symbolic (Path Allow-list): Monitor process creation events (Windows Event ID 4688) for process names 'AutoHotkey.exe' or 'AutoIt3.exe'. Create an allow-list of legitimate installation directories (e.g., 'C:\\Program Files\\AutoHotkey'). Generate an alert for any execution where the interpreter's path is not on the allow-list. Additionally, parse the command line to extract the script file path and alert if it resides in a high-risk directory like '%TEMP%' or '%APPDATA%'.",
              "Statistical (Path Rarity): For all 'AutoHotkey.exe' and 'AutoIt3.exe' executions, extract the parent directory of both the interpreter and the script file. Over a 30-day rolling window, calculate the frequency of each directory path. An alert is generated when an execution occurs from a path that is statistically rare (e.g., seen for the first time or falls below the 1st percentile of frequency), indicating an outlier for investigation.",
              "Machine Learning (Anomaly Detection): Use an unsupervised learning algorithm, such as an Isolation Forest, to detect anomalies in process execution events. Features should include the interpreter path, script file path, parent process name, and user context. The model will learn the normal patterns of AutoHotkey/AutoIt usage and assign an anomaly score to each new event. Events with a score exceeding a predefined threshold are flagged as suspicious."
            ]
          },
          {
            "description": "A process is created from an executable file that is not digitally signed. Analysis of the Portable Executable (PE) file structure reveals section names like '.AU3!.', '.AHK!.', or resource entries characteristic of AutoIt/AutoHotkey compilation, and the file entropy is unusually high, suggesting packing.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Internet Gateway (for PE file capture), Enterprise workstations, Download directories",
            "action": [
              "Symbolic (PE Section Match): From Zeek pe.log data, filter for all executable files transferred over the network. Generate an alert if a file contains PE section names such as '.AU3!.', '.AHK!.', or imports functions commonly used by these tools. Correlate this with endpoint process creation logs (Windows Event ID 4688) to confirm execution of the same file hash.",
              "Statistical (File Entropy): For all executed PE files, calculate the Shannon entropy of the file. Establish a baseline for typical entropy values of legitimate, signed software in the environment (typically between 4.8 and 6.5). Flag executables that are both unsigned and exhibit entropy scores in the top 98th percentile (e.g., > 7.2), which is a strong indicator of packing used to conceal compiled scripts.",
              "Machine Learning (Classification): Train a classification model (e.g., Logistic Regression) on PE file features. Features must include the presence/absence of a valid digital signature, specific section names, imported DLLs, file entropy, and linker timestamp. The model will classify newly observed executables as 'Benign', 'Suspicious-AutoIt/AHK', or 'Malicious'. An alert is generated for any file classified as 'Suspicious-AutoIt/AHK' or 'Malicious'."
            ]
          },
          {
            "description": "A process identified as 'AutoHotkey.exe', 'AutoIt3.exe', or a suspected compiled script (via hash or PE analysis) is observed as the parent process for a new process, such as 'cmd.exe', 'powershell.exe', or other Living Off the Land Binaries (LOLBAS). The command line of the child process contains high-entropy strings, base64-encoded commands, or direct calls to remote resource download/execution functions.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic (Suspicious Child Process): Using process creation logs (Windows Event ID 4688), build process ancestry chains. Trigger an alert when a process with a parent process of 'AutoHotkey.exe' or 'AutoIt3.exe' spawns a child process such as 'cmd.exe', 'powershell.exe', 'wscript.exe', or 'certutil.exe'. Further refine by searching the child process command line for keywords like '-enc', 'IEX', 'DownloadString', or '-decode'.",
              "Statistical (Command-Line Entropy): For all child processes spawned by AutoHotkey/AutoIt, extract and calculate the Shannon entropy of their command-line arguments. Establish a baseline entropy score for legitimate command lines in the environment. Generate an alert for any command line whose entropy score exceeds a high threshold (e.g., > 4.5), indicating probable obfuscation or encoding.",
              "Machine Learning (Sequence Analysis): Develop a sequence-based model (e.g., a Recurrent Neural Network - RNN) to analyze process-child process command-line sequences. Train the model on benign sequences to learn normal behavior. Apply the model to new process chains involving AutoHotkey/AutoIt; sequences that have a low probability under the learned model are flagged as anomalous and potentially malicious."
            ]
          },
          {
            "description": "A process associated with AutoHotkey/AutoIt execution initiates network connections that deviate from established baselines. This deviation is measured by one or more of the following: connection to a destination IP address with a low reputation score or one that is statistically rare for the enterprise; or a repeating, fixed-interval connection pattern (beaconing) with consistent data packet sizes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Internet Gateway, DNS Servers, Enterprise workstations",
            "action": [
              "Symbolic (Threat Intel Match): Join process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) on host IP and timestamp. For any connection originating from 'AutoHotkey.exe' or 'AutoIt3.exe', check the destination IP/domain against a threat intelligence feed of known malicious C2 or sinkhole domains. Generate a high-priority alert on any match.",
              "Statistical (Connection Rarity): For each host, build a baseline of normal outbound network connections. For new connections from an AutoHotkey/AutoIt process, calculate the rarity of the destination IP, ASN, and country using historical Zeek conn.log data. Alert if the destination IP falls into the bottom 1% of previously seen IPs for that host or the entire organization, suggesting an unusual external connection.",
              "Machine Learning (Beacon Detection): Apply time series analysis (e.g., using Fourier transforms or autocorrelation) to network connection logs (Zeek conn.log) for hosts running AutoHotkey/AutoIt. The analysis should focus on connection frequency and bytes transferred to a specific destination. A model trained to detect periodic, 'heartbeat' signals can identify C2 beaconing activity. An alert is generated when a strong periodic pattern is detected that cannot be attributed to legitimate software."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]