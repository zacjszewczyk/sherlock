[
  {
    "information_requirement": "Is the adversary executing code using inter-process communication mechanisms?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1559",
        "name": "Inter-Process Communication",
        "evidence": [
          {
            "description": "A process creates or connects to a named pipe, or instantiates a COM object, where the pipe name or COM CLSID is present on a threat intelligence-derived list of known malicious indicators.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 17",
              "Windows Sysmon Event ID 18"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic Logic: Query for process creation events (Windows Event ID 4688) or named pipe events (Sysmon Event ID 17, 18) and match the pipe name or command-line arguments against a curated list of known malicious pipe names (e.g., \\\\.\\pipe\\msagent_..., \\\\.\\pipe\\postex_...) from threat intelligence feeds. Alert on any match.",
              "Statistical Analysis: For all named pipe creation events (Sysmon Event ID 17), calculate the Shannon entropy of the pipe name. Establish a baseline of entropy scores for legitimate applications. Flag pipe names with entropy scores exceeding the 95th percentile of the established baseline, especially from non-system processes, as potential indicators of algorithmically generated names.",
              "Machine Learning: Train a classification model (e.g., a Random Forest) using features from named pipe events, such as process name, parent process name, pipe name entropy, and user context. The model should be trained on labeled legitimate and known malicious pipe creation activity to classify new, unseen events as benign or suspicious."
            ]
          },
          {
            "description": "A command interpreter process (cmd.exe, powershell.exe) is spawned by a parent process that does not typically create command shells, such as a Microsoft Office application (WINWORD.EXE, EXCEL.EXE) or a PDF reader (AcroRd32.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Remote Desktop Servers",
            "action": [
              "Symbolic Logic: Create a specific rule to alert whenever a process creation event (Windows Event ID 4688) shows a ParentProcessName from the set [WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, AcroRd32.exe] and a NewProcessName from the set [cmd.exe, powershell.exe, wscript.exe, cscript.exe].",
              "Statistical Analysis: For all process creation events, build a frequency table of parent-child process pairs observed over a 30-day period. Calculate the rarity of each pair. Alert on the execution of any parent-child pair that falls into the bottom 1st percentile of frequency, indicating a statistically rare occurrence that warrants investigation.",
              "Machine Learning: Use a time-series anomaly detection model on the frequency of powershell.exe or cmd.exe executions per parent process over time. A sudden, anomalous spike in shell executions from a parent like EXCEL.EXE, which normally has a frequency of zero, would be flagged by the model as a significant deviation from the norm."
            ]
          },
          {
            "description": "Anomalous DCOM/RPC network traffic patterns, such as a single host initiating DCOM/RPC connections to an anomalously high number of distinct destination hosts over a short period, or initiating traffic to hosts outside of its normal communication patterns.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "East-West traffic between workstations, Server-to-workstation traffic lanes, Network egress points monitoring port 135",
            "action": [
              "Symbolic Logic: Create a rule to detect and alert when a single source IP (id.orig_h in Zeek logs) makes DCOM/RPC requests (destination port 135) to more than 20 unique destination IPs (id.resp_h) within a 10-minute window, excluding known scanner systems.",
              "Statistical Analysis: For each source host, calculate the number of unique destination hosts it communicates with via RPC per hour. Establish a baseline distribution for this count for each host or host role. Alert when a host's RPC fan-out exceeds 3 standard deviations above its mean, or exceeds the 99th percentile for its role.",
              "Machine Learning: Apply a time-series forecasting model (e.g., ARIMA) to the volume of RPC traffic between network zones (e.g., workstation-to-workstation, workstation-to-server). An alert is generated if the observed traffic volume significantly deviates from the forecasted volume and its confidence interval, indicating potential widespread lateral movement."
            ]
          },
          {
            "description": "A long-lived, low-volume TCP connection is observed between two internal hosts on a non-standard port, where the ratio of connection duration to data transferred is a statistical outlier, indicating a potential custom socket-based IPC channel.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments (workstation-to-workstation, server-to-server), DMZ-to-internal traffic, VPN user subnets",
            "action": [
              "Symbolic Logic: Query for all successful internal TCP connections (Zeek conn.log where id.orig_h and id.resp_h are internal) on ports not in an allow-list of known application ports. Alert on any connection with a duration greater than 24 hours and total bytes transferred less than 1MB.",
              "Statistical Analysis: For all internal connections, calculate a 'data-to-duration' ratio ((orig_bytes + resp_bytes) / duration). Analyze the distribution of this ratio and flag connections in the lowest 1st percentile (very little data for a long duration). Further enrich this by calculating the periodicity of packets using connection timestamps to identify beaconing behavior.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on connection data with features like duration, orig_bytes, resp_bytes, id.resp_p, and the data-to-duration ratio. This can automatically group normal traffic. Connections that do not belong to any cluster (noise points) are flagged as anomalous and likely represent custom IPC channels."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]