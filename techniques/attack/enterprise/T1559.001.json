[
  {
    "information_requirement": "Is the adversary executing code using Component Object Model (COM)? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1559.001",
        "name": "Component Object Model",
        "evidence": [
          {
            "description": "A process creation event where the command line contains a known malicious COM CLSID or ProgID, or where the process hash matches a known malicious COM server.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Application Servers, Domain Controllers",
            "action": "1. (Symbolic) Query process creation logs (Windows Event ID 4688) for command lines containing known malicious CLSIDs or ProgIDs from a threat intelligence feed. Match process hashes against a blocklist of known malicious COM server executables or DLLs. Alert on any match. 2. (Statistical) For each process creation, extract any CLSIDs from the command line. Calculate the prevalence of each CLSID across the enterprise over a 30-day rolling window. Flag any CLSID that falls below the 5th percentile of prevalence for rarity. 3. (Machine Learning) Train a classification model (e.g., Random Forest) on features from process creation events, including parent process name, command-line entropy, and the presence of a CLSID. Use the model to score new events and alert on those classified as malicious with high confidence."
          },
          {
            "description": "A common COM host process (e.g., svchost.exe, dllhost.exe, explorer.exe, wmiprvse.exe) spawns a script interpreter (e.g., powershell.exe, cmd.exe, cscript.exe) or a LOLBAS (e.g., certutil.exe, mshta.exe) as a child process.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Web Servers",
            "action": "1. (Symbolic) Create a watchlist of high-risk parent-child process relationships (e.g., parent: 'dllhost.exe', child: 'powershell.exe'; parent: 'explorer.exe', child: 'mshta.exe'). Generate an alert for any exact match. 2. (Statistical) For each COM host parent process, build a baseline of its normal child processes over 30 days. Calculate the frequency of each parent-child pair. Alert when a new pair is observed (first-seen) or when a rare pair (e.g., probability < 0.01) occurs. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on features of child processes spawned by COM hosts, such as command-line length and entropy. Identify and investigate small, distant clusters that represent anomalous execution patterns."
          },
          {
            "description": "A COM server process (e.g., dllhost.exe, svchost.exe, wmiprvse.exe) initiates a network connection to an external IP address or an internal IP address on a non-standard port, inconsistent with its established baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls/Gateways), Host-based Firewalls, DNS Servers",
            "action": "1. (Symbolic) Correlate process execution logs with network logs. Alert if a COM host process initiates a connection to an IP address or domain on a threat intelligence blocklist. 2. (Statistical) For each common COM host process, create a baseline of its typical destination ports and requested domain TLDs (from Zeek dns.log). Flag any connection where the port or TLD is a statistical outlier (e.g., a first-seen value). 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., ARIMA) for the volume of outbound data (orig_bytes in Zeek conn.log) from each COM host process. An anomalous spike in traffic volume indicates potential C2 or exfiltration."
          },
          {
            "description": "Network logon events (Windows Event ID 4624, Logon Type 3) on a server are preceded by RPC/DCOM traffic (TCP/135) from a source host not typically associated with remote administration of the destination server.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Internal Network Segments",
            "action": "1. (Symbolic) Alert when a network logon (Type 3) occurs on a critical server from a source IP address that is not on an approved list of administrative workstations, especially if preceded by TCP/135 traffic within the last minute. 2. (Statistical) Create a graph of normal DCOM source-destination host pairs observed over a 30-day baseline. Calculate the frequency of each connection. Alert on any new source-destination pair or pairs in the bottom 5th percentile of frequency. 3. (Machine Learning) Use a community detection algorithm on the graph of DCOM connections. A host attempting to bridge two otherwise separate communities via DCOM is anomalous and could represent lateral movement."
          },
          {
            "description": "A registry modification event (Windows Event ID 4657) targeting a COM CLSID key (e.g., HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\...) is followed within a five-minute window by the execution of the associated legitimate application on the same host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Enterprise Registry Hives",
            "action": "1. (Symbolic) Monitor for registry modifications (Windows Event ID 4657) to known hijackable COM CLSID registry keys, followed by the execution of the corresponding application (e.g., 'explorer.exe'). This sequence is a strong indicator of a COM hijack attempt. 2. (Statistical) Baseline the rate of modifications to COM-related registry keys per host. Use a moving average and standard deviation to calculate a dynamic threshold. Alert when a host exhibits a spike in COM registry modifications that exceeds 3 standard deviations above the moving average. 3. (Machine Learning) Train a sequence analysis model (e.g., a Markov model) on sequences of events (registry write, process create). A low-probability sequence, such as RegWrite(HKCU\\CLSID) -> ProcessCreate(mmc.exe), would be flagged as a suspicious chain of events."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]