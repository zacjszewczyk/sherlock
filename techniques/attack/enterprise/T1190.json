[
  {
    "information_requirement": "Has the adversary gained initial access to the network by exploiting a public-facing application? (PIR)",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1190",
        "name": "Exploit Public-Facing Application",
        "evidence": [
          {
            "description": "A successful or attempted network connection from an IP address on a high-confidence threat intelligence feed, or network traffic that matches a high-fidelity signature for a known exploit (e.g., CVE-2021-44228 Log4Shell, CVE-2021-26855 ProxyLogon) in an intrusion detection system.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek signatures.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeter firewalls, DMZ network segments, Cloud security group flow logs, Internet-facing web servers (e.g., IIS, Apache, Nginx), VPN concentrators, External-facing database servers",
            "action": [
              "Symbolic: In your SIEM, join the source IP address (`id.orig_h`) from Zeek conn.log against a list of known malicious IP addresses from a threat intelligence platform. Generate a high-priority alert for any successful connection (`conn_state` is not 'REJ') to a public-facing application port (e.g., 80, 443, 3389).",
              "Statistical: Monitor Zeek signatures.log for specific CVE-related signature IDs. For each signature, calculate the rate of triggering per source IP over a 1-hour window. Alert on source IPs whose trigger rate for a specific high-severity CVE signature exceeds 3 standard deviations above the mean rate for that signature across all IPs, indicating targeted scanning or exploitation.",
              "Machine Learning: Use a supervised classification model (e.g., Random Forest), pre-trained on labeled historical data (using Zeek conn.log features and threat intel labels), to classify new, incoming connections in near real-time as 'benign' or 'suspicious-exploit-attempt'. Features could include destination port, protocol, connection duration, and bytes transferred. Prioritize connections classified as suspicious for analyst review."
            ]
          },
          {
            "description": "An HTTP request contains URI paths, query parameters, headers, or a POST body that match regular expressions for common exploits (e.g., SQL Injection, Local File Inclusion), or uses a User-Agent string associated with a known vulnerability scanner. Alternatively, an observed HTTP file transfer contains filenames or extensions typical of webshells (e.g., cmd.aspx, shell.php, backdoor.jsp).",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Application Firewalls (WAFs), Public-facing web servers, Reverse proxies, Load balancers",
            "action": [
              "Symbolic: Apply regular expression matching on the `uri`, `user_agent`, and `post_body` fields in Zeek http.log to detect patterns associated with scanners (e.g., 'sqlmap', 'nmap', 'nuclei') or common attack payloads (e.g., '../', 'SELECT', '<script>'). Alert on any match.",
              "Statistical: For each source IP, calculate the Shannon entropy of the URI query parameters in Zeek http.log over a 5-minute window. A sustained entropy score exceeding the 98th percentile of the historical distribution for the target application can indicate fuzzing or parameter brute-forcing attempts. Alert on IPs that cross this threshold.",
              "Machine Learning: Train an unsupervised anomaly detection model (e.g., an autoencoder) on feature vectors derived from single-client HTTP sessions (e.g., sequence of request methods, distribution of response status codes, average URI length). Flag sessions with a high reconstruction error, as they represent a deviation from normal browsing behavior that could be consistent with vulnerability probing."
            ]
          },
          {
            "description": "A web server process (e.g., w3wp.exe, httpd.exe, nginx.exe) spawns a child process that is a command-line interpreter (e.g., cmd.exe, powershell.exe, /bin/bash), a network utility (e.g., whoami.exe, curl, netcat), or any process not on a pre-defined allowlist of expected child processes for that server.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, Application servers in the DMZ, Container hosts running public applications",
            "action": [
              "Symbolic: Create a detection rule to monitor for Windows Event ID 4688 or Sysmon Event ID 1 where the `ParentProcessName` or `Creator Process Name` is a known web server process (e.g., 'w3wp.exe', 'httpd.exe') and the `ProcessName` or `New Process Name` is a command interpreter ('cmd.exe', 'powershell.exe', 'bash', 'sh') or a known reconnaissance tool ('whoami.exe', 'net.exe', 'ipconfig.exe').",
              "Statistical: Build a baseline of all unique parent-child process relationships observed on public-facing servers over a 30-day period and store their frequencies. Generate an alert upon the creation of a new, never-before-seen parent-child pair, or a pair whose occurrence frequency is in the bottom 1st percentile (extremely rare).",
              "Machine Learning: Use a graph-based algorithm to model normal process ancestry trees originating from web server processes (e.g., w3wp.exe). Flag any newly observed parent-child relationship or process chain sequence that deviates significantly from the learned graph structure, as this indicates anomalous post-exploitation activity."
            ]
          },
          {
            "description": "An outbound network connection is initiated from a public-facing server to an external destination IP that is either on a non-standard port, has a low reputation score, is a newly observed destination for that server, or is associated with a suspicious DNS query (e.g., to a dynamic DNS provider), often coupled with a significant increase in outbound data volume compared to baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DMZ network segments, Egress points of the network, DNS resolvers serving the DMZ, Host-based firewalls on public-facing servers",
            "action": [
              "Symbolic: Monitor Zeek dns.log for requests originating from public-facing servers to domains associated with known dynamic DNS providers or C2 frameworks. Correlate the timestamp and source IP with Zeek conn.log to identify the subsequent outbound TCP/UDP connection and generate an alert.",
              "Statistical: For each public-facing server, establish a 30-day baseline of normal outbound destination ports and destination countries. Alert when a new connection is made to a port or country not in the baseline. Additionally, calculate the 99th percentile for outbound bytes transferred (`orig_ip_bytes`) in a single connection and alert on any connection exceeding this threshold.",
              "Machine Learning: Use multivariate time-series analysis (e.g., a Vector Autoregression or VAR model) to model and forecast the volume of outbound data per server, segmented by protocol, in 10-minute intervals. Generate an alert if the observed volume for any protocol significantly exceeds its forecasted confidence interval, which could indicate C2 communication or data exfiltration."
            ]
          },
          {
            "description": "A statistically significant increase in the ratio of server-side error responses (HTTP 5xx) to total requests, a sharp deviation in the distribution of HTTP request methods (e.g., an unusual spike in POST requests), or a sustained period of high-entropy URI parameters from a single source, when compared to an established 30-day rolling baseline.",
            "data_sources": [
              "Zeek http.log",
              "Application error logs (e.g., Apache error.log, IIS Failed Request Tracing)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, Web Application Firewalls (WAFs), Load balancers, Centralized log aggregation platforms",
            "action": [
              "Symbolic: Create a rule to alert if the count of HTTP 500-level status codes from a single web server exceeds a fixed threshold (e.g., 50 errors in 1 minute) for a specific application, which could indicate an exploit is crashing an application component.",
              "Statistical: Calculate a rolling 7-day baseline of the distribution of HTTP request methods (GET, POST, etc.) for each application. Use a Chi-squared test to compare the distribution in any given hour to the baseline. Alert if the Chi-squared statistic exceeds a critical value, indicating a significant shift in application interaction.",
              "Machine Learning: Apply a DBSCAN clustering algorithm to the feature space of HTTP requests (e.g., request size, response size, URI length, user agent). Benign traffic should form dense clusters. Flag requests that the algorithm labels as noise/outliers, as these represent anomalous requests that could be part of an exploit attempt."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]