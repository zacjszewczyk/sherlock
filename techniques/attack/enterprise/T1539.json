[
  {
    "information_requirement": "Has an adversary stolen web session cookies to impersonate a user?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1539",
        "name": "Steal Web Session Cookie",
        "evidence": [
          {
            "description": "A file with a hash matching a known cookie-stealing tool is executed on an endpoint, or a network connection is established to a domain or IP address present on a threat intelligence feed for Adversary-in-the-Middle (AitM) phishing.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Network Egress Points, Web Proxies",
            "action": "For each new process execution (Windows Event ID 4688) or file observation (Zeek files.log), perform three checks. First (Symbolic): Compare the file hash against a threat intelligence feed of known cookie-stealing malware signatures. Generate a high-severity alert on any match. Second (Statistical): Calculate the prevalence of observed file hashes and destination domains across the enterprise over the last 30 days. A hash or domain seen on only a single host, or with a prevalence below the 1st percentile, receives a higher risk score for investigation. Third (Machine Learning): Use a pre-trained file classifier model to score new executables based on static features for the likelihood of being credential theft malware. A score exceeding a predefined confidence threshold should trigger an alert for analyst review."
          },
          {
            "description": "A process is executed with command-line arguments matching known patterns for cookie theft tools (e.g., Mimikatz, LaZagne) or custom scripts are used to interact with browser cookie stores.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Developer Laptops",
            "action": "For each process creation (Windows Event ID 4688) and PowerShell script block execution (Windows Event ID 4104), perform three checks. First (Symbolic): Use regular expressions to search command-line arguments and script content for signatures of known tools (e.g., 'sekurlsa::cookies', 'misc::cookies', 'Get-ChromeCookie') or paths to browser cookie databases (e.g., 'AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies'). An exact match should trigger an immediate alert. Second (Statistical): Calculate the Shannon entropy of command-line arguments for processes like 'powershell.exe'. A command with entropy exceeding the 98th percentile of the established baseline suggests obfuscation and should be flagged. Third (Machine Learning): Train a logistic regression classifier on labeled command-line data (benign vs. malicious) to predict the maliciousness of new commands in real-time. Features can include command length, presence of special characters, and keywords like 'cookie', 'export', or 'exfil'."
          },
          {
            "description": "A process other than a known web browser or an approved utility reads from or requests a handle to the browser's cookie database file.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Virtual Desktop Infrastructure (VDI) instances",
            "action": "For each file access event (Windows Event ID 4663/4656) targeting browser cookie stores (e.g., 'cookies.sqlite', 'Login Data', 'Cookies'), perform three checks. First (Symbolic): Maintain a strict whitelist of approved processes (e.g., 'chrome.exe', 'firefox.exe', 'msedge.exe'). Any access from a process not on this list generates a high-severity alert. Second (Statistical): Profile the set of processes that access cookie stores on each host over a 30-day baseline period. Use a Jaccard similarity score to compare the set of processes seen on a given day to the historical profile. A score below a percentile threshold (e.g., 5th percentile) indicates anomalous process activity. Third (Machine Learning): Use a one-class SVM model trained on benign access patterns (process name, parent process, time of day) to cookie stores. Any access pattern the model flags as an outlier is a candidate for malicious activity."
          },
          {
            "description": "A non-browser or untrusted process requests a handle to a browser process with high-privilege access rights (e.g., PROCESS_VM_READ) indicative of memory scraping.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical System Servers with browser access",
            "action": "For each handle request to a browser process (Windows Event ID 4656), perform three checks. First (Symbolic): Alert whenever a non-system, non-security-tool process (e.g., not lsass.exe, not an EDR agent) requests a handle with 'PROCESS_VM_READ' or 'PROCESS_ALL_ACCESS' rights. Second (Statistical): Establish a baseline of which processes request handles to browser processes and with what access rights. Alert if a process that has never requested such access before does so (first-seen analysis). Additionally, calculate the rate of these requests per host; a sudden spike exceeding 3 standard deviations from the mean is anomalous. Third (Machine Learning): Use a time series forecasting model (e.g., ARIMA) to predict the hourly volume of 'PROCESS_VM_READ' requests to browsers. An actual volume significantly exceeding the predicted confidence interval indicates a potential anomaly."
          },
          {
            "description": "A user's web traffic is routed through an unexpected proxy, the SSL certificate for a trusted site is issued by an unknown authority, or an HTTP request contains an unusually large cookie header sent to a low-reputation domain.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, VPN Concentrators",
            "action": "For network traffic logs, perform three checks. First (Symbolic): Compare the issuer of SSL certificates for high-value internal and external domains against a whitelist of expected Certificate Authorities (CAs) in 'ssl.log'. Any mismatch is a critical alert for potential AitM. Second (Statistical): For each high-value domain, baseline the JA3/JA3S hashes, SSL issuers, and typical cookie lengths observed in 'http.log'. Alert when an observed value is a statistical outlier (e.g., a JA3 hash never seen before for that domain, or a cookie length exceeding the 99th percentile). Third (Machine Learning): Use a clustering algorithm like DBSCAN on HTTP session data (features: host, referer, user-agent, cookie length) to identify distinct patterns of user behavior. Sessions that are flagged as noise or fall into small, isolated clusters may represent AitM activity that deviates from normal browsing."
          },
          {
            "description": "A browser process spawns a child process such as a command shell or scripting interpreter, which is not typical behavior for a web browser.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Proxies, DNS Servers",
            "action": "For each new process creation event (Windows Event ID 4688), perform three checks. First (Symbolic): Generate an alert whenever a browser process ('chrome.exe', 'msedge.exe', 'firefox.exe') is the parent process for 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', or 'curl.exe'. This is a high-fidelity indicator of malicious activity. Second (Statistical): Establish a baseline of legitimate child processes for browsers. Use frequency analysis to identify rare parent-child process relationships. A browser spawning a process seen less than 0.01% of the time across the enterprise is a strong anomaly. Third (Machine Learning): Train a decision tree classifier to predict whether a parent-child process relationship is malicious. Features should include parent process name, child process name, command-line arguments of the child, and user context. The model can learn that 'msedge.exe -> powershell.exe' is highly indicative of malicious activity."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]