[
  {
    "information_requirement": "Is the adversary maintaining persistence by leveraging cloud application integrations?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1671",
        "name": "Cloud Application Integration",
        "evidence": [
          {
            "description": "A cloud application registration or consent event is logged where the Application ID, publisher name, or redirect URI matches a known-bad indicator from a threat intelligence feed.",
            "data_sources": [
              "Microsoft 365 Unified Audit Logs",
              "Azure Active Directory Audit Logs",
              "Threat Intelligence Platform Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft Entra ID tenant, Threat intelligence platforms",
            "action": [
              "Symbolic Logic: Query Azure AD and M365 audit logs for 'Add application' or 'Consent to application' events. For each event, extract the Application ID, publisher name, and redirect URI. Compare these values against a curated list of malicious indicators from threat intelligence feeds. Generate a high-severity alert for any match.",
              "Statistical Method: For all 'Consent to application' events, extract the publisher domain. Calculate the historical frequency of consents for each publisher domain across the enterprise over the last 180 days. Flag any consent to an application from a publisher domain that falls below the 5th percentile of consent frequency, indicating a rare or new publisher.",
              "Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on historical application consent events, using features such as publisher name string properties, domain age of redirect URIs, and the set of requested permission scopes. Use the trained model to score new consent events for their probability of being malicious. Alert on events exceeding a high-probability threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "A new application registration or consent event is logged for an application with a display name indicative of impersonation (e.g., typosquatting, homoglyphs) or from an unverified publisher with a newly registered domain.",
            "data_sources": [
              "Microsoft 365 Unified Audit Logs",
              "Azure Active Directory Audit Logs",
              "Public WHOIS Data",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft Entra ID tenant, Public DNS and WHOIS services, Network egress points",
            "action": [
              "Symbolic Logic: For each 'Add application' or 'Consent to application' event, apply a set of regular expressions to the application display name to detect common impersonation and typosquatting patterns (e.g., 'M.crosoft', '0ffice', 'Goog1e'). Generate an alert if a pattern is matched.",
              "Statistical Method: For each new application from an unverified publisher, extract the publisher's domain. Programmatically query WHOIS data to retrieve the domain's creation date and flag any application whose publisher domain is less than 90 days old. Separately, calculate the Levenshtein distance between the new application's name and a list of legitimate, commonly used applications in the enterprise. Flag applications with a small distance (e.g., 1-2) to a known app name for review.",
              "Machine Learning: Apply an unsupervised learning model like DBSCAN to feature vectors derived from application names (e.g., character n-gram frequencies, presence of non-ASCII characters, string length). Isolate and investigate small, dense clusters or noise points identified by the model, as they may represent sophisticated impersonation attempts that bypass simpler detection methods."
            ]
          },
          {
            "description": "An application consent event is logged that includes high-risk permissions, or the consent is granted by any user from a geographically anomalous or non-corporate IP address.",
            "data_sources": [
              "Microsoft 365 Unified Audit Logs",
              "Azure Active Directory Audit Logs",
              "Zeek conn.log",
              "Windows Security Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft Entra ID tenant, Network gateways and proxies, VPN concentrators",
            "action": [
              "Symbolic Logic: Maintain a static list of high-risk delegated or application permissions (e.g., 'Mail.ReadWrite.All', 'Directory.ReadWrite.All', 'Application.ReadWrite.All'). Query cloud audit logs for 'Consent to application' events. Generate a high-priority alert for any event that grants a permission from the high-risk list.",
              "Statistical Method: For every 'Consent to application' event, correlate the source IP with Zeek conn.log data to enrich with geolocation. For each user, maintain a statistical profile of typical source countries/ASNs. Flag any consent granted from a location that is a statistical outlier (e.g., not in the user's top 95% historical locations). Additionally, calculate the Shannon entropy of the permission scopes requested by an application; flag applications with unusually high entropy scores, indicating an abnormally broad or diverse permission set.",
              "Machine Learning: Train an anomaly detection model (e.g., Isolation Forest) on a feature set from consent events, including user role, permission risk score (based on a predefined risk matrix), time of day, and source IP reputation. Use the model to score each new consent event. Flag events with high anomaly scores, indicating a combination of suspicious factors, for immediate investigation."
            ]
          },
          {
            "description": "A service principal's data access activity, recorded in cloud access logs, deviates from its established baseline with respect to data volume, access frequency, time-of-day, or resource types accessed.",
            "data_sources": [
              "Microsoft 365 Unified Audit Logs (e.g., SharePointFileOperation, ExchangeItem)",
              "Azure Active Directory Sign-in Logs (ServicePrincipalSignIn)",
              "Azure Active Directory Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft 365 services (Exchange Online, SharePoint Online, OneDrive), Microsoft Entra ID tenant",
            "action": [
              "Symbolic Logic: Correlate service principal sign-in and data access events with a threat intelligence feed of known malicious IP addresses, TOR exit nodes, or anonymizing proxies. Generate a high-severity alert for any activity originating from a denied IP address.",
              "Statistical Method: For each service principal, establish a 30-day rolling baseline of hourly data access volume (e.g., count of files accessed, bytes transferred). Calculate the mean and standard deviation for each hour. Generate an alert if the access volume in any given hour exceeds three standard deviations from the historical mean. Also, flag a service principal if the number of unique user mailboxes it accesses in a day exceeds the 99th percentile of its historical daily activity.",
              "Machine Learning: Apply a time-series anomaly detection model, such as an LSTM autoencoder, to the sequence of resource access events for each service principal. Train the model on sequences of normal activity, using features like resource type, access operation, and time delta between events. Flag event sequences that the model reconstructs with a high error, indicating a deviation from learned behavior such as rapid enumeration followed by bulk data access."
            ]
          },
          {
            "description": "A process creation event on an endpoint, indicating the use of a cloud command-line interface (CLI) tool to create a service principal, is observed in close temporal proximity to the first sign-in or data access activity from that new principal.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Azure Active Directory Audit Logs",
              "Azure Active Directory Sign-in Logs (ServicePrincipalSignIn)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise workstations and servers, Microsoft Entra ID tenant",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a process creation event (Windows Event ID 4688) for a cloud CLI tool (e.g., 'az.cmd', 'pwsh.exe' with Azure modules) includes command-line arguments for service principal creation (e.g., 'ad sp create-for-rbac'). If this is followed within 5 minutes by an 'Add service principal' event in Azure AD Audit Logs for the same principal name, generate a medium-severity alert.",
              "Statistical Method: Establish a baseline for the frequency of service principal creation across the environment. Generate an alert if the number of service principals created in a 24-hour period exceeds the 99th percentile of the daily creation count over the last 90 days. Correlate these temporal spikes with host-level process creation data (Windows Event ID 4688) to identify potential source hosts of scripted, high-volume creation activity.",
              "Machine Learning: Train a classifier (e.g., Logistic Regression or a Decision Tree) on features extracted from the event sequence following a service principal's creation. Use features like [Time-to-first-signin, Geolocation of first sign-in, Permissions granted at creation, Time-to-first-data-access]. Use the model to assign a risk score to each new principal's initial activity pattern. Flag patterns with a high risk score, such as immediate sign-in from a rare location followed by high-privilege operations, for review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]