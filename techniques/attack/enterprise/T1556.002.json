[
  {
    "information_requirement": "Is the adversary maintaining persistence by registering a malicious password filter DLL?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556.002",
        "name": "Password Filter DLL",
        "evidence": [
          {
            "description": "A new DLL is registered in the LSA Notification Packages registry key, and the DLL's file hash or name matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controller registry and file systems, particularly the HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa key and the C:\\Windows\\System32\\ directory.",
            "action": "1. (Symbolic) Create a SIEM rule to monitor for registry value modifications to 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages' (Sysmon Event ID 13). Upon alert, automatically query a threat intelligence platform with the file hash and name of the added DLL. Generate a critical alert on any match. 2. (Statistical) Establish a baseline for modifications to this registry key; the rate should be near zero. Any modification is statistically anomalous and should trigger an investigation. Track the frequency of DLL names added; any name not seen before is a statistical outlier. 3. (ML) Deploy a supervised classification model (e.g., Random Forest) trained on registry event features (process making the change, user context, rarity of the DLL name, time of day) to score each modification event and predict whether it is 'benign-system-update' or 'suspicious-persistence'."
          },
          {
            "description": "A DLL added to the LSA Notification Packages registry key is unsigned, has a prevalence of 1 across the enterprise, or is located in a directory other than C:\\Windows\\System32.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controller event logs, enterprise-wide software inventory database, LSASS process memory on Domain Controllers.",
            "action": "1. (Symbolic) Create a rule that alerts if a DLL is added to 'Notification Packages' AND its file properties show it is unsigned OR its path is not 'C:\\Windows\\System32\\'. 2. (Statistical) Upon a registry modification alert, query an asset inventory to determine the prevalence of the DLL file hash across the enterprise. Use a percentile-based threshold; if the prevalence is in the lowest 1st percentile (e.g., installed on only one machine), flag it as highly suspicious. 3. (ML) Use an anomaly detection model (e.g., Isolation Forest) on a feature set for each newly registered DLL, including: is_signed (binary), prevalence (integer), path_is_standard (binary), and publisher_rarity (float). The model will assign an anomaly score to identify outlier DLLs that do not conform to the profile of legitimate password filters."
          },
          {
            "description": "A new or previously unobserved DLL is loaded by the lsass.exe process on a Domain Controller.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "LSASS process memory on all Domain Controllers and member servers, endpoint detection and response (EDR) logs.",
            "action": "1. (Symbolic) For each server OS build, create and maintain a strict allow-list of DLLs that are authorized to be loaded by lsass.exe. Generate a high-severity alert for any DLL loaded by lsass.exe (Sysmon Event ID 7, ImageLoaded: *\\lsass.exe) that is not on this pre-approved list. 2. (Statistical) For each host, establish a baseline set of loaded DLLs in lsass.exe over a 30-day period. On a daily basis, calculate the Jaccard similarity index between the current set of loaded modules and the baseline. A score below a set threshold (e.g., 0.95) indicates a significant and potentially malicious change. 3. (ML) Apply time-series analysis to the count of *new* unique DLLs loaded by lsass.exe per hour. A sudden spike in this count, detected by a time-series anomaly detection algorithm, indicates abnormal loading activity consistent with a compromise."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using a malicious password filter DLL to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1556.002",
        "name": "Password Filter DLL",
        "evidence": [
          {
            "description": "A DLL registered as a password filter has a filename that is a misspelling or slight variation of a legitimate system file (typosquatting), such as 'rassapi32.dll' instead of 'rasapi32.dll'.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controller registry (HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa), file system (C:\\Windows\\System32\\).",
            "action": "1. (Symbolic) Create a watchlist of common system DLL names. When a DLL is registered as a password filter, check its name against this list. If it's not an exact match, proceed to the next checks. 2. (Statistical) For any new DLL name added to the Notification Packages key, calculate the Levenshtein distance between its name and a list of all other DLLs in C:\\Windows\\System32\\. A very low distance (e.g., 1 or 2) to a known DLL, combined with a non-Microsoft signature, is a strong indicator of typosquatting. 3. (ML) Train a character-level n-gram classification model on a dataset of legitimate file names versus known-malicious typosquatted names. Use this model to classify any newly registered DLL name as 'legitimate' or 'suspiciously-similar', triggering an alert for the latter."
          },
          {
            "description": "A new password filter DLL has its file creation timestamp modified to match older, legitimate files in the same directory (timestomping) or is packed, indicated by high file entropy.",
            "data_sources": [
              "Sysmon Event ID 2",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system metadata on Domain Controllers.",
            "action": "1. (Symbolic) Create a high-severity alert for any 'FileCreateTimeChanged' event (Sysmon Event ID 2) where the TargetFilename is a DLL within C:\\Windows\\System32 on a Domain Controller. 2. (Statistical) Upon file creation of a new password filter DLL, calculate the Shannon entropy of the file. Compare this value to the mean and standard deviation of entropy for all other DLLs in the same directory. An entropy value greater than 2 standard deviations above the mean (especially >7.5) indicates probable packing or encryption. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on file metadata for all DLLs in System32. Use features such as entropy, file size, and the delta between the file's creation time and the median creation time of all other files in the directory. The algorithm will automatically group legitimate files and isolate timestomped or packed outliers."
          },
          {
            "description": "The LSA Notification Packages registry key is modified by an unusual process, such as a scripting engine (powershell.exe, cscript.exe) or a process spawned from an Office document.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution and registry audit logs on Domain Controllers.",
            "action": "1. (Symbolic) Create a rule to alert if 'HKLM\\...\\Notification Packages' is modified (Sysmon Event ID 13) and the modifying process name (Image) is in a blocklist of suspicious updaters, such as ['powershell.exe', 'cmd.exe', 'wscript.exe', 'mshta.exe', 'WINWORD.EXE', 'EXCEL.EXE']. 2. (Statistical) Maintain a frequency distribution of process names that modify this registry key. This list should be extremely small and stable (e.g., 'reg.exe', 'svchost.exe'). Alert on any modifying process that is statistically rare (e.g., has a frequency of 0 in the last 180 days). 3. (ML) Train a classification model on process and registry events, using features like process name, parent process name, command line arguments, and user context to classify the registry modification as 'Benign' or 'Malicious'. An update from powershell.exe run by a non-admin user would be flagged as malicious."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary harvesting credentials via an installed malicious password filter DLL?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1556.002",
        "name": "Password Filter DLL",
        "evidence": [
          {
            "description": "The lsass.exe process on a Domain Controller initiates any outbound network connection.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network gateway traffic logs, DNS server logs, and endpoint network connection logs from Domain Controllers.",
            "action": "1. (Symbolic) Create a critical severity rule to alert on any 'Network connection detected' event (Sysmon Event ID 3) where the 'Image' is 'C:\\Windows\\System32\\lsass.exe' and the 'Initiated' field is 'true'. This is fundamentally anomalous behavior. 2. (Statistical) Baseline all network traffic from Domain Controllers. The 'lsass.exe' process should have a baseline of zero outbound connections. Any deviation is a critical statistical anomaly. Further, analyze the destination IP for rarity using historical Zeek data; a connection to a never-before-seen IP is a higher priority. 3. (ML) Use a graph-based anomaly detection model on host and network process relationships. A newly formed edge in the graph originating from the 'lsass.exe' node and terminating at an external IP address node would be identified as a high-scoring structural anomaly, indicative of C2 communication or data exfiltration."
          },
          {
            "description": "The lsass.exe process writes to a file in a temporary directory or a file with a non-system extension like .txt, .log, or .dat.",
            "data_sources": [
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs on Domain Controllers, particularly monitoring C:\\Windows\\Temp\\, C:\\ProgramData\\, and user profile directories.",
            "action": "1. (Symbolic) Create a rule to alert if 'lsass.exe' is the source of a 'FileCreate' event (Sysmon Event ID 11) and the 'TargetFilename' matches a regex for temporary or non-standard locations (e.g., '.*\\\\Temp\\\\.*', 'C:\\\\ProgramData\\\\.*') or has a suspicious extension (e.g., '.log', '.txt', '.dat', '.tmp'). 2. (Statistical) Profile the file write paths and extensions for lsass.exe. This should be a very small and predictable set. Use frequency analysis on the parent directory of any file written by lsass.exe. If the directory is not in the top 99.9th percentile of common system write locations, flag it as anomalous. 3. (ML) Train a classifier to predict if a file write event is malicious based on features of the process and target file (e.g., process name, target path, file extension, entropy of path string). This can distinguish legitimate system writes from credential dumping activity."
          },
          {
            "description": "The lsass.exe process on a Domain Controller spawns a child process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs on all Domain Controllers.",
            "action": "1. (Symbolic) Create a critical severity, zero-tolerance rule that triggers on any process creation event (Sysmon Event ID 1) where the 'ParentImage' field is 'C:\\Windows\\System32\\lsass.exe'. This behavior should never occur under normal operating conditions. 2. (Statistical) The baseline frequency of lsass.exe appearing as a parent process is zero. Any single occurrence is an absolute statistical anomaly and represents a 100% deviation from the norm, requiring immediate incident response. 3. (ML) In a process-lineage graph model, no legitimate edges should originate from the 'lsass.exe' node. A machine learning model trained on this graph structure would immediately flag the creation of any child process from lsass.exe as a topological anomaly with the highest possible risk score."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]