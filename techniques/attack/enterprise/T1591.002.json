[
  {
    "information_requirement": "Is the adversary conducting reconnaissance on our business relationships? (PIR)",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1591.002",
        "name": "Business Relationships",
        "evidence": [
          {
            "description": "Outbound network connections initiated from internal hosts to external IP addresses, or DNS queries for external domains, that match entries on a threat intelligence feed of known reconnaissance infrastructure, malicious proxies, or threat actor domains associated with supply chain attacks.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway/egress points, DNS resolvers, Network Security Monitoring (NSM) sensor grid",
            "action": [
              "Symbolic Logic: Query `conn.log` and `dns.log` data. Join the `uid` field across both logs to correlate DNS queries with their resulting TCP/UDP connections. Compare the `id.resp_h` (destination IP) from `conn.log` and the `query` field from `dns.log` against a high-confidence threat intelligence feed of known reconnaissance infrastructure, anonymization services (e.g., TOR exit nodes, commercial VPNs), and domains associated with supply chain attackers. Generate an alert for any match.",
              "Statistical Method: For all requested domains in `dns.log` not matching an allow list of corporate or known-good domains, calculate the Levenshtein distance against a curated list of legitimate business partner domains. Flag any query with a distance less than 3 but not an exact match as potential typosquatting. For flagged domains, enrich with ASN and WHOIS data; prioritize alerts where the resolved IP's ASN does not match the legitimate partner's known ASNs.",
              "Machine Learning: Develop and apply a classification model (e.g., Random Forest, Gradient Boosting) to predict malicious domains. Engineer features from `dns.log` data (query length, entropy of the subdomain, TLD, number of labels) and external enrichment data (domain age from WHOIS, registration privacy, ASN reputation). Train the model on labeled datasets (e.g., public malicious domain lists vs. an internal allow-list). Run all new, unseen domains through the model to score them for maliciousness and alert on high scores."
            ]
          },
          {
            "description": "A single external source IP (`id.orig_h`) generates a statistically anomalous volume or rate of HTTP requests or DNS queries to public-facing assets, particularly pages listing partners, clients, or supply chain information, exhibiting patterns consistent with automated scraping.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, DMZ network segments, Reverse proxy servers",
            "action": [
              "Symbolic Logic: Create a rule to alert on any DNS query of type `AXFR` or `ANY` in `dns.log`, as these are indicative of zone transfer attempts. In `http.log`, create a signature-based rule to match the `user_agent` string against a list of known web crawlers, scraping tools, and common HTTP libraries (e.g., 'Scrapy', 'HTTrack', 'Wget', 'python-requests', 'Go-http-client').",
              "Statistical Method: Group `http.log` records by source IP (`id.orig_h`) and URL path prefix (e.g., '/about/partners/'). For each group, calculate the request rate per minute. Establish a historical baseline for each path prefix and alert if a source IP's request rate exceeds the 99th percentile. Additionally, for each source IP, calculate the Shannon entropy of the set of requested URIs within a 10-minute window; a low entropy value suggests repetitive scraping of a single directory.",
              "Machine Learning: For key web pages (e.g., partner lists), model the time series of request volume using a SARIMA or Prophet model to account for daily and weekly seasonality. Train the model on at least 30-60 days of `http.log` data. Use the model to forecast expected traffic volume and generate an anomaly alert when the observed request count significantly exceeds the forecasted confidence interval, indicating a potential scraping event."
            ]
          },
          {
            "description": "A statistically significant number of failed (`REJ`, `S0`) or successful connection attempts from a single, unauthorized external IP address to a network service exclusively designated for business partner use (e.g., partner VPN, extranet portal, B2B API gateway).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Partner extranet servers, VPN concentrators, B2B API gateways, DMZ firewalls",
            "action": [
              "Symbolic Logic: Maintain a strict IP address allow-list for all network services designated for partner access. Create a SIEM rule that generates a high-severity alert for any connection attempt in `conn.log` to a designated partner service (e.g., TCP/443 on extranet IPs, UDP/500 on VPN concentrators) where the source IP (`id.orig_h`) is not on the allow-list. Also, alert on any event in `weird.log` with a destination IP of a partner service.",
              "Statistical Method: For connections to partner services from IPs not on the allow-list, group `conn.log` events by source IP (`id.orig_h`) in 5-minute windows. Count the occurrences of failed connection states ('S0', 'REJ'). Calculate the Z-score for this count compared to the historical average and standard deviation of failed connections from all unknown IPs. A Z-score greater than 3.5 indicates a statistically significant deviation, suggesting a port scan or enumeration attempt.",
              "Machine Learning: For a specific partner service, train a one-class SVM (Support Vector Machine) model using features from legitimate, historical connections from known partner IPs. Features should include `duration`, `orig_bytes`, `resp_bytes`, `orig_pkts`, `resp_pkts`, and source port characteristics (e.g., ephemeral or not). Apply the trained model to all new connections from unknown source IPs to classify them as 'normal' or 'anomalous'. Flag anomalous connections for investigation."
            ]
          },
          {
            "description": "A connection originating from an IP address within a known business partner's network range targets an internal host or service outside of the explicitly allowed access scope, or the total data transfer volume for a session is a statistical outlier compared to the historical baseline for that partner.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments, Data center core, Application servers, Internal firewall logs",
            "action": [
              "Symbolic Logic: For each business partner IP range, define a strict firewall-like rule set in your SIEM specifying allowed destination IPs (`id.resp_h`) and ports (`id.resp_p`). Generate a high-severity alert for any connection from a partner IP recorded in `conn.log` that violates this rule set, such as an attempt to connect to an internal domain controller (TCP/389, TCP/88) or a workstation's RDP port (TCP/3389).",
              "Statistical Method: For each defined business partner, aggregate `conn.log` data daily to establish a baseline for total data transfer volume (sum of `orig_bytes` + `resp_bytes`). Use the Inter-Quartile Range (IQR) method to detect outliers. Flag any daily transfer volume that exceeds the upper fence (Q3 + 1.5 * IQR) as a potential anomalous data transfer, possibly indicating unauthorized activity from a compromised partner account.",
              "Machine Learning: Model the internal network and partner connections as a graph, where nodes are IP addresses and edges represent connections from `conn.log`. Use a community detection algorithm (e.g., Louvain Modularity) on historical data to identify normal communication clusters (e.g., 'Partner A' community, 'Application X' community). Apply a graph-based anomaly detection algorithm to flag any new edge (connection) that bridges two communities that do not normally interact, such as an edge from a 'Partner A' node to a 'Human Resources Servers' node."
            ]
          },
          {
            "description": "A user account accesses a statistically anomalous number of files or volume of data from repositories related to business partnerships (e.g., contracts, contact lists, API keys), deviating significantly from their own historical baseline or the baseline of their defined peer group.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4624",
              "Active Directory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers hosting partner data, SharePoint sites for vendor management, Active Directory domain controllers",
            "action": [
              "Symbolic Logic: Using file system auditing, tag sensitive file shares and folders containing partner data as 'critical'. Create a rule that alerts when a single user account generates more than a fixed threshold (e.g., 100) of 'Object Access' events (Windows Event ID 4663) from these tagged locations within a one-hour window, indicating potential bulk data reconnaissance.",
              "Statistical Method: For each user, establish a 30-day rolling baseline (average and standard deviation) of daily file access counts (Windows Event ID 4663) on partner-related data repositories. Alert if a user's daily count exceeds 3 standard deviations from their personal baseline. Concurrently, define peer groups based on Active Directory attributes (e.g., department, role). Alert if a user's activity is in the top 5th percentile for their peer group.",
              "Machine Learning: Deploy or configure a User and Entity Behavior Analytics (UEBA) model that learns each user's typical behavior. The model's features should include file access patterns (count, volume, paths from Event ID 4663), login times and sources (Event ID 4624), and process execution. An alert should be triggered when the model detects a multi-dimensional deviation from a user's established pattern, such as accessing an unusual number of partner contract files outside of normal work hours after logging in from a new location."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]