[
  {
    "information_requirement": "Has the adversary gained initial access to the network via drive-by compromise? (PIR)",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1189",
        "name": "Drive-by Compromise",
        "evidence": [
          {
            "description": "An endpoint makes an HTTP/S request or establishes a network connection to a domain, URL, or IP address that matches an entry in a high-confidence threat intelligence feed for malvertising, exploit kits, or watering hole campaigns.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Internet Gateway Firewall, Internal DNS Resolvers",
            "action": [
              "Symbolic Logic: Continuously correlate the 'host' and 'uri' fields in Zeek http.log and the 'query' field in Zeek dns.log against a threat intelligence feed of known malicious domains and URLs. Generate a high-priority alert for any match.",
              "Statistical Method: Calculate a reputation score for all requested domains based on features like domain age, registration details (e.g., privacy-protected), and historical prevalence in organizational traffic. Alert when a user visits a domain with a reputation score in the lowest 5th percentile.",
              "Machine Learning: Employ a pre-trained classification model (e.g., Random Forest) to predict the maliciousness of a URL based on lexical features (e.g., length, entropy, keyword presence). Run this model on all 'host' and 'uri' fields from Zeek http.log and generate an alert for any URL classified as malicious with a confidence score above 0.90."
            ]
          },
          {
            "description": "An HTTP response body contains obfuscated JavaScript, specific iframe structures, or code patterns that are characteristic of known exploit kits or browser exploits.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Network Intrusion Detection System (NIDS)",
            "action": [
              "Symbolic Logic: Scan HTTP response bodies captured in Zeek logs using YARA rules designed to detect signatures of known exploit kits, heap spraying code, or specific obfuscation function names. Trigger an alert on a rule match.",
              "Statistical Method: For each JavaScript file or block identified in HTTP traffic, calculate the character entropy. Establish a baseline entropy level for legitimate JavaScript on frequently visited sites. Alert when the entropy of a script exceeds the baseline by more than three standard deviations, indicating probable obfuscation.",
              "Machine Learning: Utilize a trained sequence model, such as a Long Short-Term Memory (LSTM) network, to analyze the abstract syntax tree (AST) of JavaScript code. The model, trained on both malicious and benign scripts, classifies new code as suspicious if it contains sequences indicative of exploit code, triggering an investigation."
            ]
          },
          {
            "description": "A web browser process (e.g., chrome.exe, msedge.exe) spawns a command-line interpreter (cmd.exe, powershell.exe) or scripting engine (wscript.exe, cscript.exe) with a command line containing arguments for payload download or execution.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Virtual Desktop Infrastructure (VDI) Fleet",
            "action": [
              "Symbolic Logic: Monitor Windows Event ID 4688 for events where ParentProcessName is a browser and ProcessName is cmd.exe, powershell.exe, wscript.exe, or cscript.exe. Alert if the CommandLine contains high-fidelity strings such as '-enc', 'IEX (New-Object Net.WebClient)', 'mshta.exe javascript:', or 'certutil'.",
              "Statistical Method: Analyze all command lines associated with browser-spawned child processes. Calculate the frequency of individual command-line tokens (arguments, flags). Alert on the presence of tokens that are statistically rare across the enterprise (e.g., appearing in less than 0.1% of all command lines) when originating from a browser process.",
              "Machine Learning: Deploy a classification model that scores the maliciousness of a command line based on its features, including length, character distribution, token sequence, and the presence of suspicious keywords. A command line originating from a browser process that receives a high maliciousness score from the model should generate a high-priority alert."
            ]
          },
          {
            "description": "A web browser process spawns a non-standard child process or writes a file with an executable extension (.exe, .dll, .ps1, .vbs) to a user-writable directory.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers",
            "action": [
              "Symbolic Logic: Create and maintain an allowlist of normal child processes for each web browser. Monitor Windows Event ID 4688 and alert on any parent-child relationship not on the list (e.g., chrome.exe spawning rundll32.exe). Concurrently, monitor Sysmon Event ID 11 (FileCreate) for browser processes writing files with executable extensions to locations like %APPDATA% or %TEMP%.",
              "Statistical Method: Establish a baseline of normal parent-child process relationships and file write locations/extensions for browsers over a 30-day period. Use frequency analysis to identify rare occurrences. Alert when a parent-child process pair or a file write event falls into the bottom 1st percentile of frequency, indicating a highly anomalous event.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on host event data, using features like parent process name, child process name, and file write path. Events that do not belong to any established cluster are flagged as outliers, representing potentially malicious activity resulting from a compromise."
            ]
          },
          {
            "description": "An endpoint establishes a new network connection to a destination IP with a low reputation score or over a non-standard port within five minutes of a web browsing session.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway Firewall, User Workstations",
            "action": [
              "Symbolic Logic: For each source IP, correlate Zeek http.log events with Zeek conn.log events within a 5-minute window. Alert if a connection is made to a destination IP on a CTI blocklist or over a non-standard port (e.g., 4444, 8080) immediately following web browsing.",
              "Statistical Method: For each user, create a baseline of typical destination Autonomous System Numbers (ASNs), countries, and ports. For each new connection following a browsing session, calculate an anomaly score based on deviations (e.g., connection to a rare country, ASN, or port for that user). Alert if the score exceeds the 99th percentile of historical scores for that user.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., Prophet) on the volume and characteristics (port, protocol) of each user's outbound network traffic. An anomalous spike in connections detected by the model immediately after a web browsing event indicates a likely C2 channel establishment."
            ]
          },
          {
            "description": "Multiple endpoints, grouped by subnet or department, access a previously unobserved or low-reputation domain within a narrow timeframe (e.g., one hour).",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS Resolvers, Enterprise Web Proxy",
            "action": [
              "Symbolic Logic: Maintain a list of Newly Observed Domains (NODs) seen in the last 24 hours. Alert when more than 10 unique hosts from the same /24 subnet request the same NOD within a 1-hour window.",
              "Statistical Method: For each domain requested in Zeek dns.log, calculate a 'locality ratio' by dividing the number of unique internal hosts requesting it by its global popularity score (from a third-party source). A high ratio indicates a domain that is unpopular globally but popular internally. Alert when this ratio exceeds a dynamic threshold (e.g., top 5% of all calculated ratios).",
              "Machine Learning: Construct a bipartite graph where nodes represent internal hosts and external domains. Use a community detection algorithm (e.g., Louvain Modularity) to identify clusters of hosts that strongly connect to a small set of domains. A newly formed, dense community is a strong indicator of a targeted watering hole attack against that group of users."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]