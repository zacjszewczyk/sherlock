[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by ensuring a process continues execution despite potential interruptions? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.011",
        "name": "Ignore Process Interrupts",
        "evidence": [
          {
            "description": "A process is created with a command line that is an exact match to a known malicious command string used by a specific malware family to ignore process interrupts.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic Logic: Maintain a threat intelligence list of high-fidelity, complete command-line strings known to be used for this technique. Create an exact-match detection rule that scans the 'CommandLine' or 'Process Command Line' field of Windows Event ID 4688 logs. An alert from this rule indicates a known-bad indicator and should be treated as high-priority.",
              "Statistical Logic: Aggregate alerts from this exact-match rule with other TTP-based alerts on the same host within a 1-hour window. A host that triggers this rule and also a persistence rule (e.g., T1547.001) or a credential access rule (e.g., T1003.001) should have its risk score significantly elevated for automated prioritization.",
              "Machine Learning: Use confirmed true positive alerts from this rule as labeled 'malicious' data to provide feedback for a supervised classification model (e.g., a decision tree or random forest). The model can be trained on command-line features (length, special characters, keywords) to identify previously unseen but similar malicious commands."
            ]
          },
          {
            "description": "A process is created using command-line arguments, scripting parameters, or API call patterns associated with ignoring interrupts, suppressing termination, or detaching from a parent session.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Servers with PowerShell, Windows Subsystem for Linux (WSL) enabled hosts",
            "action": [
              "Symbolic Logic: Use regular expressions to search process command lines (Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104) for patterns such as 'nohup .* &', 'disown', 'setsid', 'Start-Process -WindowStyle Hidden', 'trap { continue; }', or '-ErrorAction SilentlyContinue'.",
              "Statistical Logic: For each identified pattern (e.g., 'nohup'), establish a baseline of normal usage across the enterprise. Calculate the prevalence of each pattern per user, hostname, and parent process name. Flag any usage that is statistically rare (e.g., falls in the bottom 1% of prevalence or is a user's first time using the command) as anomalous for investigation.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) on features extracted from command lines, such as the presence of interrupt-ignoring keywords, command length, character distribution entropy, and the ratio of alphanumeric to special characters. Use a known-good dataset of commands as the benign class and threat intel as the malicious class to predict the likelihood that a new, unseen command is evasive."
            ]
          },
          {
            "description": "A process's termination time significantly exceeds the termination time of its parent process or the logoff time of the associated user session, creating an 'orphaned' process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4634"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication Servers, Domain Controllers, User Workstations, Terminal Servers",
            "action": [
              "Symbolic Logic: Create a rule to identify any process (Windows Event ID 4688) whose parent process is 'explorer.exe' and which continues to run more than 5 minutes after a logoff event (Windows Event ID 4634) associated with that user's Logon ID. Exclude a pre-defined allowlist of known good processes expected to exhibit this behavior.",
              "Statistical Logic: For each parent-child process relationship, calculate the time delta between the parent's termination and the child's termination. Establish a baseline distribution of these deltas for common parent processes (e.g., 'svchost.exe', 'services.exe'). Alert when a new delta exceeds the 99th percentile for its specific parent process, indicating an anomalously long-lived orphaned process.",
              "Machine Learning: Use time series analysis (e.g., ARIMA or Holt-Winters) on the count of active orphaned processes per host, aggregated in 15-minute intervals. Model the expected number of orphans and flag hosts where the observed count significantly deviates from the forecasted range, suggesting a potential mass-detaching of malicious processes."
            ]
          },
          {
            "description": "A process identified as ignoring interrupts initiates external network connections to rare domains or IP addresses, or communicates over non-standard ports.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, DNS Server Logs",
            "action": [
              "Symbolic Logic: Correlate processes identified as ignoring interrupts (via other detections) with network connection logs (Zeek conn.log). Trigger a high-priority alert if such a process communicates with an IP address or domain present on a threat intelligence feed within 5 minutes of process creation.",
              "Statistical Logic: For processes identified as ignoring interrupts, analyze their destination domains from Zeek dns.log. Calculate the domain's age, public suffix list popularity (e.g., using a Tranco top list), and the character entropy of the subdomain. Create a risk score where high entropy, young age, and low popularity contribute to a higher score. Flag processes communicating with domains that exceed a statistical threshold (e.g., a score in the top 5th percentile of all observed domains).",
              "Machine Learning: Train a graph-based anomaly detection model where nodes are processes and IP addresses, and edges represent connections. Use features like process name, command line, connection duration, and data volume. The model learns normal communication patterns (e.g., 'chrome.exe' to many IPs) and can identify anomalous edges, such as a process like 'powershell.exe' that is ignoring interrupts and connecting to a new, rare IP address."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]