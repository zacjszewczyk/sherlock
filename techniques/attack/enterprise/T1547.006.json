[
  {
    "information_requirement": "Is the adversary maintaining persistence via malicious kernel modules/extensions?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.006",
        "name": "Kernel Modules and Extensions",
        "evidence": [
          {
            "description": "A new service is created for a Windows kernel driver (.sys) that is unsigned, stored in a non-standard directory, or has a name associated with known malware.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows endpoint and server fleet (including Domain Controllers and application servers)",
            "action": [
              "Symbolic: Monitor for Windows Event ID 7045 (A service was installed in the system) where the Service Type is 'kernel driver'. For each event, validate the signature of the driver file in the ImagePath. Cross-reference the file hash and service name against a threat intelligence feed of known malicious drivers and rootkits. Alert on any match or if the driver is unsigned.",
              "Statistical: Build a frequency distribution of directories from which kernel drivers are normally loaded (e.g., %SystemRoot%\\System32\\drivers). Flag any driver loaded from a directory in the bottom 5th percentile of this distribution (e.g., %TEMP%, %APPDATA%, user profiles) as anomalous and requiring investigation.",
              "ML: Use a logistic regression model to produce a risk score for each new driver installation. Model features should include: is_unsigned (binary), file_path_rarity (statistical score), service_name_entropy, and if the driver's hash is present in a known-good corpus (e.g., NSRL). A high probability score from the model triggers a high-priority alert."
            ]
          },
          {
            "description": "Anomalous network communications are initiated from a host immediately following the loading of a new kernel driver, indicative of a kernel-level backdoor.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all Windows hosts",
            "action": [
              "Symbolic: Correlate a driver load event (Windows Event ID 7036, Service Started) with subsequent network traffic from the host in Zeek conn.log. Alert if the host initiates connections to known C2 infrastructure or to destinations matching newly registered domain (NRD) feeds within minutes of the driver load.",
              "Statistical: For the host that loaded the driver, calculate the entropy of destination ports and the ratio of outbound to inbound connections in the hour before and after the event. A statistically significant increase in entropy or the connection ratio post-load suggests anomalous activity like C2 beaconing or data exfiltration.",
              "ML: Use a time-series anomaly detection model (e.g., ARIMA) on a host's network traffic volume (bytes_out). Compare the forecasted traffic volume against the actual traffic volume following a driver load event. A large, unexplainable deviation from the forecast constitutes an anomaly worthy of an alert."
            ]
          },
          {
            "description": "Execution of commands to load a Linux kernel module (`insmod`, `modprobe`) from a non-standard directory or a module not associated with a known software package.",
            "data_sources": [
              "Linux Auditd Logs",
              "Syslog",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux server fleet (e.g., web servers, database servers, container hosts)",
            "action": [
              "Symbolic: Create a rule to alert when 'insmod' or 'modprobe' is executed with a target .ko file located in a world-writable or user-owned directory (e.g., /tmp, /var/tmp, /home/*). Correlate with Zeek conn.log to check for prior download of the .ko file from an external source.",
              "Statistical: Establish a baseline of all loaded kernel modules on similarly configured systems. Use set theory to identify modules present on a single host but absent from the baseline set (a set difference operation). Calculate the prevalence of each module across the fleet; flag modules with a prevalence below a 1% threshold as rare.",
              "ML: Train a decision tree classifier on process execution events to distinguish legitimate module loading (e.g., parent process is a package manager like 'apt' or 'yum') from suspicious loading (e.g., parent process is 'bash', 'sshd', or a web server process like 'nginx')."
            ]
          },
          {
            "description": "Execution of `kextload` on macOS to load a kernel extension that is unsigned, signed by an untrusted developer, or has not been approved by an existing policy.",
            "data_sources": [
              "macOS Unified Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoint fleet (especially developer and executive workstations)",
            "action": [
              "Symbolic: Create a rule to alert on any execution of the 'kextload' process. Enrich the alert with the parent process and command-line arguments. Maintain an allow-list of known-good developer IDs for kext signing and alert on any kext signed by an ID not on the list.",
              "Statistical: For each host, maintain a historical list of loaded kexts. Alert when a kext is loaded that has never been seen on that specific host before. Calculate the entropy of destination IPs in Zeek conn.log in the 5 minutes following a 'kextload' event; a sudden spike in entropy may indicate C2 activity.",
              "ML: Use time-series anomaly detection (e.g., LSTM) on the count of 'kextload' events per host. Flag any spike that deviates significantly from the host's historical pattern of software installations and system updates, which the model has been trained on."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has the adversary achieved privilege escalation using malicious kernel modules/extensions?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.006",
        "name": "Kernel Modules and Extensions",
        "evidence": [
          {
            "description": "A non-administrative user loads a known-vulnerable but legitimately signed third-party Windows driver, indicative of a Bring Your Own Vulnerable Driver (BYOVD) attack.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user Windows workstations and servers (e.g., Remote Desktop Session Hosts)",
            "action": [
              "Symbolic: Maintain a watchlist of file names and hashes for drivers known to be vulnerable and used in BYOVD attacks (e.g., 'capcom.sys', 'iqvw64e.sys'). Alert on any process creation (Event ID 4688) or service installation (Event ID 7045) involving these drivers, especially if initiated by a non-SYSTEM or non-Administrator account.",
              "Statistical: Profile `sc.exe` and `fltmc.exe` command-line usage. Establish a baseline of normal arguments and user context. Flag executions by non-admin users with anomalous arguments like 'create type=kernel' or 'load', as this is statistically rare for standard users and indicates potential misuse.",
              "ML: Develop a sequence-based anomaly detection model for user sessions. A sequence of [non-admin shell] -> ['sc.exe create ... vulnerable_driver.sys'] -> ['sc.exe start ...'] -> [process creation with SYSTEM privileges] should be flagged by the model as a high-confidence attack pattern."
            ]
          },
          {
            "description": "A Windows process running with standard user privileges spawns a child process that is running with high-integrity (SYSTEM/Administrator) privileges, shortly after a driver interaction.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers",
            "action": [
              "Symbolic: Using process creation events (Event ID 4688), build process trees. Alert on any instance where a parent process's Security ID (SID) is a standard user and its child process's SID is a privileged account (e.g., S-1-5-18 for SYSTEM), and the parent's Token Elevation Type is not 'Full' (Type 2).",
              "Statistical: For each user account, calculate the historical rate of high-integrity process creation. For most standard users, this rate should be near-zero. A sudden, non-zero rate for a standard user that is not correlated with a legitimate UAC-prompting application is a strong statistical anomaly.",
              "ML: Use a graph-based anomaly detection algorithm on the process creation graph of the host. Edges representing a low-to-high privilege transition are inherently rare. The model can learn the normal graph structure and flag these anomalous edges, especially when they emanate from unexpected parent processes (e.g., 'powershell.exe' instead of 'svchost.exe')."
            ]
          },
          {
            "description": "On Linux, a low-privilege user loads a kernel module and subsequently executes commands or spawns processes with root (UID 0) privileges.",
            "data_sources": [
              "Linux Auditd Logs",
              "Syslog"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Shared Linux environments (e.g., developer shell servers, multi-user systems)",
            "action": [
              "Symbolic: Create a rule that triggers when the same user session (correlated by session ID) executes 'insmod' or 'modprobe' and is followed within 5 minutes by the execution of a process with an effective UID of 0 (e.g., 'whoami' returns 'root', or a new 'bash' shell is spawned with EUID=0).",
              "Statistical: Analyze process execution logs to track user ID (UID) and effective user ID (EUID) for all processes. It is statistically anomalous for a process's EUID to be 0 when its parent process's EUID was not 0. Flag all such transitions for review, as they represent a privilege escalation.",
              "ML: Train a Hidden Markov Model (HMM) on sequences of commands from user sessions. The model learns normal transitions between states (e.g., 'editing code' -> 'compiling'). A transition from a 'standard user' state to a 'root activity' state, especially if preceded by a rare command like 'insmod', would be identified as a low-probability, anomalous sequence."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]