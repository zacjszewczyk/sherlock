[
  {
    "information_requirement": "Is the adversary maintaining persistence using Office application startup mechanisms? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1137",
        "name": "Office Application Startup",
        "evidence": [
          {
            "description": "A file is written to a standard Office startup or template path and its hash matches a known malicious indicator, or a registry key for an Office add-in is modified to point to a known malicious component.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Terminal servers, File servers hosting shared Office templates",
            "action": "For file write events (Windows Event ID 4663) in Office startup paths (`%APPDATA%\\Microsoft\\{Word,Excel,PowerPoint}\\STARTUP`, `%APPDATA%\\Microsoft\\Templates`), hash the file and join against a threat intelligence feed of malicious file hashes; alert on match. For registry modifications (Windows Event ID 4657) under `HKCU\\Software\\Microsoft\\Office\\<app>\\Addins`, match the `ValueName` or `Data` against a watchlist of known malicious add-in names or CLSIDs. For statistical analysis, calculate the file name entropy for all files written to these paths and flag files with entropy scores in the 99th percentile, suggesting obfuscation. To apply machine learning, train a time-series model (e.g., ARIMA) on the volume of file/registry modifications in these sensitive locations per user and alert on observed volumes that significantly exceed the prediction confidence interval."
          },
          {
            "description": "An Office application process (e.g., winword.exe, excel.exe) spawns a child process (e.g., powershell.exe, wscript.exe) with a command line that contains obfuscation patterns, download cradles, or encoded payloads.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Terminal servers, Internet gateway",
            "action": "For process creation events (Windows Event ID 4688) where the parent is an Office application, apply regular expressions to the child process command line to detect high-risk patterns like `-enc`, `-nop`, `IEX`, `DownloadString`, or base64 patterns; alert on match. For statistical detection, calculate the length and character entropy of each command line, establish a baseline for each parent-child pair (e.g., `winword.exe` -> `powershell.exe`), and flag instances where length or entropy is >3 standard deviations above the mean. For machine learning, develop a classification model (e.g., Random Forest) trained on a labeled dataset of command lines, using features like keyword presence and entropy, to predict the probability of maliciousness and alert on high-probability events."
          },
          {
            "description": "An Office application spawns a child process that is statistically rare for the environment or is a system or network utility not typically launched from Office, such as `net.exe`, `regsvr32.exe`, or `whoami.exe`.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Terminal servers",
            "action": "Maintain an explicit allow-list of common and expected child processes for each Office application (e.g., `splwow64.exe`) and alert whenever an Office parent spawns a child process not on this list. For a statistical approach, build a frequency table of all parent-child process relationships observed over a 30-day rolling window and alert when a relationship occurs that falls below a low percentile threshold (e.g., seen in <0.1% of cases) or is entirely new. Use a machine learning clustering algorithm (e.g., DBSCAN) on features from process creation events (parent, child, user, host) to identify clusters of normal behavior and flag any new event that does not fit into an existing cluster as an anomaly."
          },
          {
            "description": "A file with an executable or script extension (.dll, .vbs, .ps1, .js) is written to an Office startup or template directory by a process that is not an Office application or a known software installer (e.g., msiexec.exe).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, File servers hosting shared templates, Terminal servers",
            "action": "Monitor file write events (Windows Event ID 4663) in Office startup/template paths. Correlate the ProcessID with process logs (Windows Event ID 4688) and alert if the writing process is on a denylist (e.g., `powershell.exe`, `cmd.exe`, `rundll32.exe`). For statistical analysis, baseline the processes that normally write to these directories and flag writes from any process that has never been seen writing there before. Also, track the prevalence of file extensions written and flag low-prevalence extensions like `.exe`. Use a machine learning sequence model to analyze the events leading to a file write, flagging sequences that deviate from normal user behavior (e.g., network connection from an unusual IP in `Zeek conn.log` -> `powershell.exe` process creation -> file write to XLSTART)."
          },
          {
            "description": "A registry value under an Office add-in key (`HKCU\\Software\\Microsoft\\Office\\...\\Addins`) is created or modified by an anomalous process (e.g., powershell.exe), or the modification installs an add-in whose `FriendlyName` or DLL path is rare across the enterprise.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Domain Controllers, Terminal servers",
            "action": "Monitor registry modifications (Windows Event ID 4657) to Office add-in keys. Correlate the ProcessID with process logs (Windows Event ID 4688) and alert if the modifying process is on a denylist (e.g., `cmd.exe`, `powershell.exe`, `reg.exe`). For statistical detection, build an enterprise-wide baseline of all Office add-in `FriendlyName` and DLL paths. Calculate the prevalence of each add-in and alert on the installation of any new add-in present on <1% of endpoints. Apply an unsupervised machine learning model (e.g., Isolation Forest) to features of the registry modification event (process name, user, time of day, add-in prevalence score) to flag modifications that are outliers from normal installation profiles."
          },
          {
            "description": "An Outlook rule is created that is configured to launch an external application, contains keywords associated with scripting (`.vbs`, `.ps1`), or has a name with high entropy or consisting only of non-alphanumeric characters (e.g., '.', '..').",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Microsoft Exchange servers, Office 365 tenant",
            "action": "Monitor registry modifications (Windows Event ID 4657) to keys containing Outlook rule data and file creation events (Windows Event ID 4663) for `.rwz` files. Scan the data/file content for strings indicating application execution (`.exe`, `.dll`, `.vbs`, `.ps1`) or known tool names; alert on match. For statistical detection, calculate the entropy of all new rule names and flag those in the 99th percentile or that contain no alphanumeric characters. Also, track the rate of rule creation per user and alert if it exceeds their historical baseline by >3 standard deviations. Apply a time-series machine learning model to the volume of Outlook rule modifications across the organization to detect anomalous spikes in activity indicative of a widespread campaign."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]