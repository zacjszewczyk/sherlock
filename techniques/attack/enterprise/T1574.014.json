[
  {
    "information_requirement": "Is the adversary establishing persistence using AppDomainManager hijacking?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.014",
        "name": "AppDomainManager",
        "evidence": [
          {
            "description": "A .NET process loads an unsigned or low-prevalence DLL, or initiates a network connection to a destination matching a known malicious hash, IP address, or domain associated with AppDomainManager payloads.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers (e.g., IIS), Developer Workstations, Endpoint Fleet",
            "action": "1. (Symbolic) Correlate hashes of modules loaded by .NET processes (Windows Event ID 7) and destination IPs from their network connections (Zeek conn.log) against a CTI feed of known malicious indicators. Alert on any match. 2. (Statistical) For each .NET process, calculate the enterprise-wide prevalence of every module it loads. Flag any loaded module that is present on <1% of endpoints or is unsigned. Similarly, flag connections to destination IPs that are in the 99th percentile of rarity across the organization. 3. (ML) Employ a pre-trained classification model on process behavior features (process name, parent process, loaded modules, network destinations) to score the likelihood of malicious activity. A high probability score for a .NET process that loads a rare module and connects to a new external address would indicate likely hijacking."
          },
          {
            "description": "A process sets the AppDomainManager environment variables (COMPLUS_AppDomainManager_Assembly, COMPLUS_AppDomainManager_Type) via command line or modifies a .NET .config file to insert the <appDomainManagerAssembly> XML tag.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Windows Event ID 1",
              "Windows Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers (e.g., IIS), Developer Workstations, Endpoint Fleet",
            "action": "1. (Symbolic) Use regular expressions to monitor process command lines (Windows Event ID 1) for strings like 'COMPLUS_AppDomainManager_Assembly'. Monitor file modification events (Windows Event ID 11) on files ending in '.config' for the inclusion of '<appDomainManagerAssembly>'. Alert on any match. 2. (Statistical) Profile the frequency of processes that set these environment variables or modify .config files. Calculate an anomaly score based on the rarity of the parent process (e.g., winword.exe) or user context performing the action. An action performed by a statistically anomalous process-user pair receives a higher risk score. 3. (ML) Use an unsupervised learning model (e.g., Isolation Forest) on the full text of process command lines. Train the model on historical data to learn normal patterns. A command line flagged by the model as a high-scoring anomaly that also contains 'COMPLUS_AppDomainManager' is a strong indicator of malicious activity."
          },
          {
            "description": "A .NET process, within minutes of starting, creates a persistence mechanism (e.g., scheduled task, service, Run key) or exhibits network beaconing behavior inconsistent with its established baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4657",
              "Zeek conn.log",
              "Windows Event ID 1",
              "Windows Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Endpoint Fleet, Network Egress Points",
            "action": "1. (Symbolic) Create a rule that triggers when a single process ID, associated with a .NET application (Windows Event ID 1), subsequently creates a scheduled task (Event ID 4698) or modifies a registry Run key (Event ID 13) within a 60-second window. 2. (Statistical) For each .NET process, establish a 30-day baseline of network connection frequency and data volume from Zeek conn.log. Alert if the number of connections in a 5-minute window exceeds the 99th percentile of the baseline, or if the standard deviation of connection time intervals becomes unusually low, suggesting robotic beaconing. 3. (ML) Implement a time-series forecasting model (e.g., ARIMA) for key network metrics per process (e.g., bytes out, unique destination ports). An alert is generated when observed behavior significantly deviates from the forecasted values and confidence interval, indicating a behavioral change post-hijacking."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using AppDomainManager hijacking?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.014",
        "name": "AppDomainManager",
        "evidence": [
          {
            "description": "A .NET process running with high integrity (e.g., as SYSTEM or Administrator) loads a DLL that is unsigned, has a low prevalence across the enterprise, or has a hash matching a known malicious tool.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged Access Workstations (PAWs)",
            "action": "1. (Symbolic) Filter Sysmon Event ID 7 logs for processes running as 'NT AUTHORITY\\SYSTEM'. For each loaded module, check if the `Signed` field is 'false' and the signature status is not trusted. Correlate the module's hash against a threat intelligence feed of known malicious DLLs. 2. (Statistical) For each high-privilege .NET process, baseline its normal loaded modules. Calculate the enterprise-wide prevalence of each DLL loaded by these processes. Flag any instance where a high-privilege process loads a DLL that is present on fewer than 1% of endpoints. 3. (ML) Use a trained classifier to score the risk of a module load event. Model features should include the parent process name, process integrity level, module signature status, module name, and the statistical prevalence of the module. A high risk score indicates a probable malicious load for privilege escalation."
          },
          {
            "description": "A low-privilege process or non-administrative user modifies the configuration file or environment variables of a known high-privilege .NET application to enable AppDomainManager hijacking.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 1",
              "Windows Event ID 11",
              "Windows Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers (especially those running services as SYSTEM), Domain Controllers, Privileged Access Workstations",
            "action": "1. (Symbolic) Create a watchlist of .config files and registry keys for high-privilege .NET services. Alert whenever a modification event (Event ID 4663, 4657, Sysmon 11, 13) is performed by a user or process that is not 'SYSTEM', 'Administrator', or a member of a whitelisted administrative group. 2. (Statistical) Profile user accounts that typically modify service configurations. Calculate a risk score for each modification based on the rarity of the user performing the action on that specific asset. A standard user modifying a SYSTEM service's config would have a high anomaly score (>3 standard deviations from the norm). 3. (ML) Deploy a peer group analysis model. Group users by role and department. The model identifies when a user's behavior (e.g., modifying a system-level .NET config file) deviates significantly from their peers, signaling a potential compromised account being used for privilege escalation."
          },
          {
            "description": "A high-privilege .NET process, such as a Windows Service, spawns an unexpected child process like cmd.exe or powershell.exe, or performs sensitive actions like creating a new administrator account.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4720",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged Access Workstations (PAWs)",
            "action": "1. (Symbolic) Maintain a strict allowlist of legitimate child processes for each high-privilege .NET service. Monitor Sysmon Event ID 1 and alert on any deviation, especially the spawning of `cmd.exe`, `powershell.exe`, `wscript.exe`, or `rundll32.exe`. 2. (Statistical) For each parent-child process pair involving a high-privilege .NET parent, calculate the historical frequency of that relationship. Alert when a rare pairing occurs (e.g., a pairing that accounts for less than 0.1% of the parent's total child process creations). Calculate the entropy of the child process command line; high entropy may indicate obfuscation. 3. (ML) Use a graph-based anomaly detection model to map normal process-spawns-process relationships. A high-privilege .NET service spawning a process that then makes a network connection or modifies a sensitive file would create an anomalous path in the process graph, which the model would flag as suspicious."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using AppDomainManager hijacking?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.014",
        "name": "AppDomainManager",
        "evidence": [
          {
            "description": "A trusted, allow-listed .NET process (e.g., MSBuild.exe) initiates a network connection to a destination IP/domain known for C2, or exhibits network characteristics (e.g., JA3 hash, beaconing) inconsistent with its baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Windows Event ID 5156",
              "Windows Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Endpoint Fleet (especially developer workstations and build servers)",
            "action": "1. (Symbolic) Join network connection logs (Sysmon Event ID 3, Zeek conn.log) with a CTI feed of malicious IPs/domains. Filter for connections where the initiating process is a trusted .NET binary (e.g., `MSBuild.exe`, `InstallUtil.exe`). Any match is a high-fidelity alert. 2. (Statistical) For each trusted .NET process, profile its normal destination ASNs and JA3/JA3S hashes (from Zeek ssl.log). Alert when a connection uses a JA3 hash that has never been seen for that process or goes to a statistically rare ASN. Calculate the entropy of DNS query names (Zeek dns.log); a spike in entropy can indicate DGA activity. 3. (ML) Implement a time-series anomaly detection model on network beaconing behavior. For each trusted .NET process, analyze connection frequency, regularity, and payload size (from Zeek conn.log). The model can detect rigid, periodic patterns characteristic of C2 communication, even to unknown domains."
          },
          {
            "description": "A script or loader process (e.g., powershell.exe) sets the AppDomainManager environment variables in its command line before launching a trusted .NET application as a child process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Fleet, especially developer workstations and servers running .NET applications",
            "action": "1. (Symbolic) Using Sysmon Event ID 1, search for parent processes like `powershell.exe` or `cmd.exe` whose command line contains `COMPLUS_AppDomainManager_Assembly` and which immediately spawn a trusted .NET child process. This direct parent-child action is a strong indicator. 2. (Statistical) Analyze the command-line arguments of all processes. Calculate the character frequency and length distribution for command lines that launch trusted .NET applications. A command line that is an outlier in length (>3 standard deviations from the mean) or contains a high percentage of special characters can be flagged. 3. (ML) Train a sequence-based model (e.g., an LSTM) on parent-child process command-line pairs. The model learns legitimate sequences of process creation and argument passing. An anomalous sequence, such as `cmd.exe` passing environment variables to `aspnet_compiler.exe`, would be flagged as a deviation from learned benign behavior."
          },
          {
            "description": "A trusted .NET 'living-off-the-land' binary (LOLbin) performs anomalous file I/O, such as writing an executable to a world-writable path, accessing credential stores, or attempting to access the memory of a security process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 11",
              "Windows Event ID 13",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Fleet, File Servers (for sensitive data access), Domain Controllers (for security software tampering)",
            "action": "1. (Symbolic) Create a rule that alerts when a process from a watchlist of .NET LOLbins (e.g., `InstallUtil.exe`, `RegAsm.exe`) creates a file with a `.exe` extension in a non-standard directory like `C:\\Users\\Public` (Sysmon Event ID 11), or attempts to access the memory of `lsass.exe` (Sysmon Event ID 10). 2. (Statistical) For each trusted .NET LOLbin, baseline its normal file system access patterns. Use file path rarity analysis; if `MSBuild.exe` accesses a path in a user's browser profile (e.g., `...\\Default\\Login Data`), flag it as anomalous, as this path is statistically rare for this process. 3. (ML) Use an unsupervised clustering algorithm (e.g., DBSCAN) on process activity data (file paths accessed, registry keys modified, network connections). A trusted .NET process that gets clustered with known malware or forms its own small, isolated cluster indicates its behavior is anomalous and likely evasive."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]