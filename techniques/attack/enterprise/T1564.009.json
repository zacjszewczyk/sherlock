[
  {
    "information_requirement": "Is an adversary using macOS resource forks to hide malicious payloads or executables for defense evasion? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.009",
        "name": "Resource Forking",
        "evidence": [
          {
            "description": "A file's resource fork contains data that matches the hash of a known malicious payload or exhibits high entropy.",
            "data_sources": [
              "Apple Endpoint Security Framework file events",
              "EDR telemetry"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (macOS), macOS-based servers, Development environments",
            "action": [
              "Symbolic Logic: Upon file creation or modification events, inspect the file's resource fork. Calculate the SHA256 hash of the resource fork's content and match it against a threat intelligence database of known malicious file hashes. An exact match triggers a high-severity alert.",
              "Statistical Method: Calculate the Shannon entropy of the data within the resource fork. An entropy score in the 95th percentile or higher when compared against a baseline of legitimate resource forks, especially for files not associated with legacy applications, indicates potential packing or encryption and should be flagged for review.",
              "Machine Learning: Train a binary classification model (e.g., Gradient Boosting Machine) using features extracted from the file and its resource fork, including entropy, size, file type, parent process, and permissions. The model will classify files as 'benign' or 'malicious-fork' to score new file modification events in real-time."
            ]
          },
          {
            "description": "A process not typically associated with resource fork manipulation, such as a network utility or script interpreter, writes data to a file's resource fork.",
            "data_sources": [
              "Apple Endpoint Security Framework process and file events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (macOS), macOS-based servers, Development environments",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers when a process from a watchlist (e.g., `curl`, `wget`, `python`, `bash`, `osascript`, `Microsoft Word`, `Microsoft Excel`) writes to any file's resource fork (`<filename>/..namedfork/rsrc`). This is a high-fidelity indicator of payload staging.",
              "Statistical Method: For all processes that write to resource forks, generate a frequency distribution of the source processes across the enterprise. Any process appearing on this list that is not a known-good system process (e.g., `Finder`) and falls into the bottom 1% of frequency (i.e., is rare) is considered anomalous and requires investigation.",
              "Machine Learning: Use graph-based analysis to model normal parent-child process relationships. Identify and alert on anomalous chains where a browser or email client spawns a shell or script interpreter which then writes to a resource fork. Cluster these process chains and flag outliers that deviate from established benign patterns."
            ]
          },
          {
            "description": "A file with execute permissions is created or modified to have a non-zero-sized resource fork, which is highly uncharacteristic of legitimate software on modern macOS.",
            "data_sources": [
              "Apple Endpoint Security Framework file and permission events",
              "EDR telemetry"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)",
            "action": [
              "Symbolic Logic: Implement a rule that alerts on any event where a file's permissions are changed to include execute (`+x`) AND the file's `com.apple.ResourceFork` extended attribute has a size greater than zero. Maintain an allowlist of known legacy applications or code-signed developer tools to reduce false positives.",
              "Statistical Method: Across all executable files, calculate descriptive statistics for resource fork size (mean, median, standard deviation). Any executable file with a resource fork size exceeding 3 standard deviations above the mean, or any non-zero size if the fleet-wide mean is zero, should be flagged as a statistical outlier.",
              "Machine Learning: Use a time-series anomaly detection model on the frequency of executable files created with non-empty resource forks. A sudden spike in the rate of these events on an endpoint or across the network, deviating from the historical baseline, indicates a potential automated malware deployment and should trigger an alert."
            ]
          },
          {
            "description": "A time-bound sequence of events is observed on a host: a file is downloaded, its resource fork is modified, and then a related process is executed.",
            "data_sources": [
              "Apple ES Framework process and file events",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, User workstations (macOS), User download folders",
            "action": [
              "Symbolic Logic: Create a stateful correlation rule that triggers on the following sequence within a 5-minute window on a single host: 1) A network connection event from Zeek conn.log is associated with a process (e.g., browser, `curl`) writing a new file. 2) A file modification event for that same file path shows a write to its resource fork. 3) A process creation event is observed where the parent is the process from step 1 or 2. This sequence is a strong indicator of a staged payload.",
              "Statistical Method: For each file download event, calculate the time delta between the file write and any subsequent execution associated with that file path. Establish a baseline distribution of these time deltas. A sequence where the time delta is exceptionally short (e.g., in the lowest 5th percentile, <10 seconds) and involves a resource fork modification should have its risk score significantly elevated.",
              "Machine Learning: Employ a sequence analysis model, such as a Hidden Markov Model (HMM), trained on sequences of endpoint and network events (file_write, process_create, network_connection, resource_fork_mod). The model learns the probability of transitions between these states. A sequence matching the download-fork-execute pattern will be identified as a low-probability, high-risk sequence indicative of malicious activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]