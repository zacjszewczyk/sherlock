[
  {
    "information_requirement": "Is the adversary attempting to obtain credentials from password stores? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555",
        "name": "Credentials from Password Stores",
        "evidence": [
          {
            "description": "A process creation event is observed where the executable's hash matches a known credential dumping tool signature from a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints (workstations, servers), with high priority on Tier 0 assets like Domain Controllers, Active Directory Federation Services (ADFS), and Privileged Access Workstations (PAWs).",
            "action": [
              "Symbolic: For each process creation event (Windows Event ID 4688, Sysmon Event ID 1), compare the executable's SHA256 hash against a continuously updated threat intelligence list of known credential dumper hashes (e.g., Mimikatz, LaZagne, SafetyKatz). Generate a critical alert on any match.",
              "Statistical: Calculate the enterprise-wide prevalence (unique host count) for each process hash from all process creation events over a 30-day rolling window. Flag any process for review where the hash is present on fewer than 1% of endpoints and the executable is not signed by a trusted publisher.",
              "Machine Learning: Train a classification model (e.g., XGBoost, Random Forest) on features extracted from process creation events, including parent process path, command-line entropy, hash prevalence, and PE header information. Use a labeled dataset of known-good and known-bad (credential dumper) executables. Score all new, unseen processes and alert when the model's confidence score for the 'malicious' class exceeds a calibrated threshold (e.g., > 0.9)."
            ]
          },
          {
            "description": "A process is executed with command-line arguments containing keywords, patterns, or parameters known to be used by credential dumping utilities.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints (workstations, servers), with high priority on Tier 0 assets like Domain Controllers, ADFS, and Privileged Access Workstations (PAWs).",
            "action": [
              "Symbolic: Scan the `CommandLine` or `ProcessCommandLine` field of all process creation events (Windows Event ID 4688) for regular expressions matching known credential dumping commands, such as `sekurlsa::logonpasswords`, `lsadump::sam`, `vault::cred`, or patterns targeting browser profile paths (e.g., `*AppData\\\\..\\\\User Data\\\\Default\\\\Login Data*`). [1]",
              "Statistical: For common script interpreters and utilities (e.g., powershell.exe, cmd.exe, wscript.exe), establish a baseline of command-line argument entropy and length per user or host. Using the formula $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$, calculate the Shannon entropy for each new command line. Flag any execution where the entropy or length exceeds 3 standard deviations from the established baseline, suggesting obfuscation or unusual complexity.",
              "Machine Learning: Fine-tune a pre-trained language model (e.g., a lightweight transformer) on a large dataset of labeled malicious and benign command lines. Deploy the model to score all new command lines in real-time. Anomaly scores or classifications above a set threshold indicate a high probability of malicious intent, allowing detection of novel or obfuscated command structures missed by regex."
            ]
          },
          {
            "description": "A process that is not an approved browser or password manager attempts to read a file known to store credentials.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories on workstations (e.g., `%APPDATA%`, `%LOCALAPPDATA%`) and server directories containing application configuration or credential files.",
            "action": [
              "Symbolic: Configure SACLs to log read access (Windows Event ID 4663) on credential store paths (e.g., `*\\Login Data`, `*\\.kdbx`, `%APPDATA%\\Microsoft\\Credentials\\*`). Alert when the `Process Name` in the event is not on a pre-approved allowlist of legitimate applications (e.g., chrome.exe, firefox.exe, keepass.exe).",
              "Statistical: For each critical credential store path, build a frequency profile of all accessing process names over a 30-day period. Generate an alert when a process that is statistically rare (e.g., in the bottom 5th percentile of access frequency, or never seen before) for that specific file path attempts a read operation.",
              "Machine Learning: For each user, model the sequence of file access events to credential stores as a time series. Train a recurrent neural network (RNN) or LSTM-based autoencoder to learn the user's normal access patterns (e.g., `chrome.exe` reads `Login Data` after user logon). An alert is triggered when the model observes a sequence with a high reconstruction error, indicating a deviation from normal behavior."
            ]
          },
          {
            "description": "An unauthorized process requests memory read access to the Local Security Authority Subsystem Service (LSASS) process, indicating an attempt to dump credentials from memory.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, with the highest priority on Tier 0 assets including Domain Controllers and ADFS servers, where LSASS memory contains high-value domain credentials.",
            "action": [
              "Symbolic: Monitor for Sysmon Event ID 10 where `TargetImage` ends with `lsass.exe` and `GrantedAccess` includes `0x1010` (PROCESS_VM_READ). Alert if the `SourceImage` is not on a strict allowlist of authorized processes (e.g., specific EDR executables, MsMpEng.exe). [2]",
              "Statistical: For all Sysmon Event ID 10 events targeting `lsass.exe`, calculate the enterprise-wide prevalence of each unique `SourceImage` path. Flag any access where the `SourceImage` is rare (e.g., present on < 1% of all hosts) or is not digitally signed by a trusted publisher.",
              "Machine Learning: Apply a density-based clustering algorithm (e.g., DBSCAN) to features from LSASS access events (Sysmon Event ID 10), such as `SourceImage`, `ParentProcess`, `User`, and `GrantedAccess` code. Normal, frequent access patterns (e.g., by EDR tools) will form dense clusters. Any event classified as noise (an outlier) by the algorithm represents a highly anomalous access pattern and should be alerted on immediately."
            ]
          },
          {
            "description": "A read access event on a known credential store is followed within a short time window by an anomalous outbound network connection from the same host, suggesting theft and exfiltration.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake where host and network logs are correlated, endpoint file systems, network egress points (e.g., firewalls, proxies), and DNS servers.",
            "action": [
              "Symbolic: Correlate a file read event (Windows Event ID 4663) on a credential store with a subsequent network connection (Zeek conn.log) from the same `id.orig_h` to a destination IP (`id.resp_h`) on a threat intelligence blocklist within a 5-minute window. Alert on a match.",
              "Statistical: When a credential store read event is detected on a host, monitor its network activity (Zeek conn.log) for the next 5 minutes. Calculate the historical rarity of the destination IP (`id.resp_h`) and the size of the outbound payload (`orig_bytes`). Alert if the host connects to a destination IP in the top 1% of rarity (least frequently seen) and the `orig_bytes` exceeds the 95th percentile of the host's typical outbound connection size.",
              "Machine Learning: Develop a sequence-based anomaly detection model (e.g., Hidden Markov Model or GRU network) trained on correlated streams of host and network events per entity (user/host). The model learns normal sequences of activity. Flag any sequence that matches the pattern `[credential_store_read] -> [external_network_connection_high_entropy_dns/low_prevalence_ip]` as anomalous, as it deviates from learned benign sequences."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]