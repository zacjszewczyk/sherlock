[
  {
    "information_requirement": "Has the adversary executed malicious code using a JavaScript interpreter?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.007",
        "name": "JavaScript",
        "evidence": [
          {
            "description": "A script host process (wscript.exe, cscript.exe, node.exe) initiates an outbound network connection to an IP address or domain matching a threat intelligence feed, or a JavaScript file transferred over the network has a hash matching a known malicious file.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Proxies and Gateways, DNS Servers",
            "action": [
              "For each script host execution (wscript.exe, cscript.exe, node.exe) identified in process creation logs (Windows Event ID 4688), correlate by timestamp and host IP with network logs. Alert if the destination IP (Zeek conn.log), requested domain (Zeek dns.log), or HTTP host header (Zeek http.log) matches an entry in a threat intelligence feed. Separately, alert if the SHA1/MD5 hash of any transferred JavaScript file (Zeek files.log) matches a known-malicious signature.",
              "For each user, build a 30-day baseline of unique domains contacted by script host processes. Calculate the rarity of each domain across the enterprise. Alert when a script host connects to a domain that is both new for the user and globally rare (e.g., seen by <1% of other users), indicating a potential targeted or first-stage payload delivery.",
              "Train a classification model (e.g., Logistic Regression or Gradient Boosting) on URL lexical features (length, entropy, query parameter count, presence of special characters, TLD rarity). For each URL requested by a script host, use the model to generate a maliciousness score. Alert on URLs with a score exceeding a predefined confidence threshold (e.g., >0.90)."
            ]
          },
          {
            "description": "A script host process (wscript.exe, cscript.exe) is executed with either a command line containing obfuscation indicators (e.g., Base64, excessive special characters) or an argument pointing to a script file with high Shannon entropy.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Devices, Application Servers",
            "action": [
              "Analyze the command-line arguments of wscript.exe and cscript.exe processes (Windows Event ID 4688). Alert on the presence of suspicious keywords and patterns like 'eval', 'ActiveXObject', 'setRequestHeader', 'fromCharCode', or regular expressions matching Base64-encoded strings.",
              "For each command-line execution of wscript.exe or cscript.exe, calculate the Shannon entropy of the command-line string. Establish a baseline entropy distribution for benign script executions in the environment. Alert on any command line whose entropy score exceeds the 98th percentile, suggesting obfuscation or packed commands.",
              "Train a classification model (e.g., Random Forest) on features extracted from command lines, including length, argument count, special character frequency, keyword density, and entropy. Use the model to score each script host execution's command line, alerting on those classified with a high probability of being malicious."
            ]
          },
          {
            "description": "JavaScript content extracted from network traffic (e.g., HTTP responses) contains function calls, string patterns, or structural elements matching known malicious frameworks (e.g., BeEF), obfuscation techniques, or command-and-control (C2) protocols.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Web Application Firewalls (WAFs), Intrusion Detection/Prevention Systems (IDS/IPS)",
            "action": [
              "Using network security monitoring tools, inspect the content of JavaScript files transferred over HTTP (from Zeek files.log). Apply signatures (e.g., YARA rules) to detect known malicious JS libraries, functions (e.g., 'eval(atob(...))'), or hardcoded C2 domains and IP addresses.",
              "For each downloaded JavaScript file, calculate the ratio of code to comments and the distribution of AST (Abstract Syntax Tree) node types. Establish a baseline for benign scripts. Alert on scripts with an unusually low comment ratio or a high frequency of nodes associated with obfuscation (e.g., StringLiteral with high entropy, CallExpression with computed members), exceeding 3 standard deviations from the norm.",
              "Tokenize JavaScript code from network traffic. Use a pre-trained or custom-trained NLP model (e.g., a transformer-based classifier or TF-IDF with Naive Bayes) to classify the script's intent. The model should be trained on a labeled dataset of benign and malicious (e.g., droppers, skimmers, C2) JavaScript samples. Alert on scripts classified as malicious with high confidence."
            ]
          },
          {
            "description": "A JavaScript interpreter (wscript.exe, cscript.exe) is spawned by a parent process not typically associated with scripting (e.g., an Office application), or a script is executed from a non-standard file system location (e.g., a temporary or download directory).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Mail Servers, File Servers, Web Servers",
            "action": [
              "From process creation events (Windows Event ID 4688), maintain a list of forbidden parent-child process relationships (e.g., WINWORD.EXE -> wscript.exe, OUTLOOK.EXE -> cscript.exe). Also, maintain a list of disallowed execution directories for scripts (e.g., 'C:\\Users\\*\\Downloads\\', 'C:\\Windows\\Temp\\', 'C:\\Users\\Public\\'). Alert on any match.",
              "Build a frequency map of parent-child process pairs and script execution directories over a 30-day baseline period. Alert when a script host is launched by a parent process or from a directory that is statistically rare (e.g., falls in the bottom 5th percentile of observed frequencies for that host or user).",
              "Use an anomaly detection model (e.g., Isolation Forest or a one-class SVM) on a feature set including parent process name, parent process path, script file path, and user context. Train the model on benign activity to identify and alert on rare combinations of these features that represent a significant deviation from normal execution patterns."
            ]
          },
          {
            "description": "Following a JavaScript execution, the host exhibits subsequent anomalous behavior within a 5-minute window, such as spawning command-line interpreters, modifying persistence-related registry keys, or initiating periodic, low-volume network connections (beaconing).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, Domain Controllers",
            "action": [
              "Correlate a script host execution (Windows Event ID 4688) with subsequent events on the same host. Alert if, within 5 minutes, the script's process spawns a suspicious child (powershell.exe, cmd.exe, bitsadmin.exe, certutil.exe) or if a registry modification event (Windows Event ID 4657) is logged for a known persistence key (e.g., HKCU\\...\\Run, HKLM\\...\\Run).",
              "Following a script execution, analyze subsequent network connections from the host in Zeek conn.log. For connections to a single destination IP, calculate the standard deviation of connection inter-arrival times and the average data volume per connection over a 10-minute window. Alert if the standard deviation of time is near zero (indicating regular intervals) and the data volume is consistently low, a pattern characteristic of C2 beaconing.",
              "Model host event sequences (process creation, file access, network connection) following a script execution as a temporal graph. Use a graph-based anomaly detection algorithm to compare the structure and node attributes of this new activity graph against a library of benign graphs learned during a training period. Alert on sequences that are structurally dissimilar."
            ]
          },
          {
            "description": "The Node.js runtime (node.exe) is executed with a script from an untrusted directory (e.g., user downloads), or its execution is followed by the creation of non-standard child processes or network traffic patterns indicative of C2 or data exfiltration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Development Environments, Web Servers, User Workstations",
            "action": [
              "Monitor for 'node.exe' process creation (Windows Event ID 4688). Alert when the command line indicates a script is being run from a high-risk directory (e.g., %APPDATA%, %TEMP%, Downloads folder) or when 'node.exe' spawns a child process such as 'powershell.exe' or 'whoami.exe' outside of a known administrative or development context.",
              "For hosts running Node.js, establish a baseline of normal child processes and typical network connection volumes. Alert if 'node.exe' spawns a child process that has never been observed before for that host or if the volume of outbound data in a 1-hour window exceeds 3 standard deviations above the established baseline for that process.",
              "Apply a time-series anomaly detection model (e.g., LSTM autoencoder) to network telemetry (bytes out, connection count, protocol mix) originating from 'node.exe' processes. Train the model on legitimate traffic patterns observed during normal development or application use. Alert on significant deviations from the learned patterns that could indicate C2 communication or data exfiltration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]