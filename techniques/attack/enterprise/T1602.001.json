[
  {
    "information_requirement": "Is the adversary collecting network information via SNMP MIB dumps?",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1602.001",
        "name": "SNMP (MIB Dump)",
        "evidence": [
          {
            "description": "An SNMP session (UDP/161) is observed where either the source or destination IP address is external to the defined internal network space, or an internal IP address involved in the session matches an entry on a known malicious infrastructure threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeter firewalls, Core network switches, Threat intelligence platforms",
            "action": [
              "Symbolic: Create a rule to alert on any Zeek conn.log entry where `id.resp_p` is 161 and `id.orig_h` or `id.resp_h` is not within the organization's allocated RFC1918 or public IP address space. Join with an IOC feed of known malicious IPs and alert on any match for either host.",
              "Statistical: For all internal hosts observed making SNMP requests, calculate the ratio of internal to external destination IPs over a 24-hour window. Establish a baseline; a host with a ratio significantly deviating from 0 (e.g., greater than 0.01) should be flagged for review, as internal hosts should not send SNMP requests externally.",
              "Machine Learning: Train a binary classification model (e.g., Logistic Regression) on Zeek conn.log data enriched with IP geolocation and ASN information. Features could include is_external, source_asn, destination_asn, and protocol. Label known-good internal traffic as '0' and any external or threat-intel-matched traffic as '1'. Use the trained model to score new SNMP sessions for maliciousness."
            ]
          },
          {
            "description": "An SNMP request is observed in Zeek snmp.log containing a community string from a predefined list of common, default, or weak strings (e.g., 'public', 'private', 'manager', 'ilmi'), particularly when the request originates from an IP address not on the authorized network management host list.",
            "data_sources": [
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network monitoring sensors (e.g., Zeek), Asset management database, Core network switches",
            "action": [
              "Symbolic: Maintain a denylist of weak/default community strings. Create a rule that triggers an alert when any `community` field value in Zeek snmp.log matches an entry in the denylist. Increase alert severity if the `id.orig_h` (source IP) is not on an allowlist of authorized network management stations.",
              "Statistical: For each source host, calculate the frequency of use for each community string over a 30-day period. Establish a baseline of 'normal' community strings used by authorized administrators. Alert on any host using a community string that is statistically rare for that host or for the network as a whole (e.g., a string used less than 0.1% of the time network-wide).",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) on SNMP session data. Features should include source IP, destination IP, and a categorical representation of the community string. Clusters may naturally form around 'authorized management activity' and 'unauthorized/scanning activity'. Investigate new sessions that fall into clusters characterized by weak community strings and non-management source IPs."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) is logged on a host not designated for network administration, where the new process name or command line arguments match known SNMP enumeration tools (e.g., 'snmpwalk.exe', 'snmp-check', 'nmap -sU -p 161') or associated scripting modules (e.g., PowerShell 'Get-SNMP' cmdlets).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Domain controllers, Application servers, Asset management database",
            "action": [
              "Symbolic: Create a detection rule that monitors Windows Event ID 4688 for `NewProcessName` or `CommandLine` fields containing keywords like 'snmpwalk', 'snmp-check', 'onesixtyone', or 'Get-SNMP'. Trigger an alert if the event's `Computer` name is not on an allowlist of authorized management servers.",
              "Statistical: Profile the command-line arguments used with legitimate processes (like powershell.exe) on authorized management hosts. Calculate the frequency of SNMP-related arguments. On other hosts, alert if the frequency of these arguments exceeds a zero-tolerance threshold, indicating anomalous tool usage.",
              "Machine Learning: Train a classification model on process creation events to distinguish between administrative and non-administrative user behavior. Features can include process name, parent process, command-line length, and user context. The model can then score new process events on non-administrative hosts for their similarity to unauthorized administrative tool usage."
            ]
          },
          {
            "description": "A source host generates a volume of SNMP GET/GETNEXT/GETBULK requests within a defined time window (e.g., 5 minutes) that is a statistically significant outlier compared to its own historical baseline or the baseline of its peer group.",
            "data_sources": [
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network monitoring sensors (e.g., Zeek), SNMP-enabled network devices and servers",
            "action": [
              "Symbolic: Create a simple threshold rule to alert if any single source IP sends more than 1000 SNMP requests to a single destination in a 5-minute window. This is a high-confidence, low-fidelity indicator of a brute-force MIB walk.",
              "Statistical: For each source IP, aggregate the count of SNMP requests in 5-minute intervals. Establish a baseline for each host using a 30-day rolling average and standard deviation. Alert when the current request count for a host exceeds 3 standard deviations above its historical average for that time of day and day of week.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA) for each high-value asset or key management server. The model will learn the normal rhythm of SNMP requests. Alert when the observed request count falls outside the model's predicted confidence interval, indicating a significant and unexpected change in behavior."
            ]
          },
          {
            "description": "A single source host exhibits a high fan-out ratio by sending SNMP requests to a statistically unusual number of unique destination IPs within a short time frame, or queries a statistically unusual number of unique Object Identifiers (OIDs), indicating a broad reconnaissance scan or a full MIB dump.",
            "data_sources": [
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network monitoring sensors (e.g., Zeek), Network infrastructure (routers, switches), Servers and workstations with SNMP agents",
            "action": [
              "Symbolic: Create a rule to alert if a single source IP (`id.orig_h`) communicates with more than 20 unique destination IPs (`id.resp_h`) over UDP port 161 within a 10-minute window, a behavior indicative of a network scan.",
              "Statistical: In a 10-minute window, calculate two metrics for each source IP: 1) the count of unique destination IPs, and 2) the Shannon entropy of the requested OIDs in Zeek snmp.log. Alert on any host that exceeds the 98th percentile for either unique destination count or OID entropy.",
              "Machine Learning: Use an isolation forest model to detect outliers based on a combination of features from Zeek snmp.log. For each source IP over a 10-minute window, featurize: total request count, unique destination count, unique community string count, and OID entropy. The model will learn the manifold of normal SNMP behavior and flag any data points that lie far from this manifold."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]