[
  {
    "information_requirement": "Is the adversary employing defense evasion techniques involving hidden file systems?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.005",
        "name": "Hidden File System",
        "evidence": [
          {
            "description": "A file transfer containing an executable or archive whose file hash, name, or metadata matches a known utility for creating hidden file systems (e.g., VeraCrypt, TrueCrypt, E4sh).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways and network egress points",
            "action": [
              "Symbolic: Create a watch list of file hashes and names for known hidden file system utilities (e.g., VeraCrypt, TrueCrypt, E4sh, BestCrypt). Query network file logs (Zeek files.log) to alert when a downloaded file's hash or name matches an entry on the watch list. Correlate alerts with connection logs (Zeek conn.log) to identify the source and destination of the transfer.",
              "Statistical: For all downloaded executable files (.exe, .dll) identified in Zeek files.log, calculate the entropy of the filename. Establish a baseline for filename entropy across the enterprise. Alert on filenames with unusually high entropy (e.g., > 95th percentile) that are not associated with known software distribution patterns, as this may indicate an attempt to obfuscate a tool's name.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features extracted from network logs for known malicious and benign file downloads. Features should include source/destination IP reputation, port used, file MIME type, file size, filename entropy, and connection duration. Use the model to score new file downloads and alert on those classified as high-risk."
            ]
          },
          {
            "description": "A process creation event for a disk management utility (e.g., diskpart.exe, mountvol.exe, fsutil.exe) containing command-line arguments used to delete a volume mount point, manipulate unpartitioned space, or create non-standard partitions.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, File Servers, Critical application servers, and Administrator workstations",
            "action": [
              "Symbolic: Create a detection rule that triggers on process creation events (Windows Event ID 4688) for `mountvol.exe` where the command line contains the `/d` switch (delete mount point) or for `diskpart.exe` with commands like `create partition` or `delete volume`. Exclude executions originating from known/trusted administrative scripts.",
              "Statistical: For each host, establish a baseline of command-line argument patterns and parent processes for `diskpart.exe`, `mountvol.exe`, and `fsutil.exe`. Calculate the frequency of unique command-line argument combinations. Alert when a rare command-line argument combination (e.g., occurring on < 1% of hosts) is executed, especially if the parent process is not `explorer.exe` or a known admin tool.",
              "Machine Learning: Use a sequence analysis model (e.g., LSTM) to analyze the sequence of commands executed within a single command prompt or PowerShell session. Train the model on benign administrative sessions. Flag sessions that contain a sequence of commands indicative of reconnaissance followed by partition manipulation (e.g., `wmic partition get size` followed by `diskpart` with a `create partition` script)."
            ]
          },
          {
            "description": "A service creation event for a kernel driver, or a driver load failure, where the driver file is unsigned, has a name inconsistent with its function, or is located in a non-standard directory (not \\System32\\drivers).",
            "data_sources": [
              "Windows Event ID 7045",
              "Microsoft-Windows-CodeIntegrity/Operational Event ID 3033"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly Domain Controllers",
            "action": [
              "Symbolic: Monitor for new service creation events (Windows Event ID 7045) where `ServiceType` is a kernel driver (`0x1`) and the `ImagePath` points to an unsigned executable. Also, create a rule to alert on Code Integrity events (Event ID 3033) that explicitly block a kernel driver from loading due to an invalid signature.",
              "Statistical: Across the enterprise, generate a frequency distribution of all service names and image paths for newly installed kernel drivers (Event ID 7045). Calculate the prevalence of each driver. Alert on drivers that are statistical outliers (e.g., installed on only one machine) or whose image path is in a user-writable directory (e.g., C:\\Users\\, C:\\Temp\\).",
              "Machine Learning: Develop an anomaly detection model using a one-class SVM, trained on features of legitimate kernel drivers. Features should include: file path depth, number of non-alphanumeric characters in the service name, and the entropy of the service name. Use the model to flag newly installed drivers that deviate significantly from the learned 'normal' driver profile."
            ]
          },
          {
            "description": "An object access event where a process requests read or write access to a raw physical disk or volume object (e.g., \\Device\\HarddiskVolume1, \\.\\PhysicalDrive0) and the process is not a known, authorized system utility.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those hosting sensitive data like Database Servers",
            "action": [
              "Symbolic: Configure SACLs on raw disk objects (e.g., `\\.\\PhysicalDrive*`) to log access attempts (generates Windows Event ID 4656/4663). Create a detection rule that alerts when the `Process Name` in the event is not on an allow-list of approved disk utilities (e.g., `svchost.exe`, `defrag.exe`, backup agents) and the requested `Accesses` include `WriteData` or `ReadData`.",
              "Statistical: Establish a baseline of processes that access raw disk objects. For each new raw disk access event, calculate a risk score based on the rarity of the process making the request (e.g., inverse document frequency of the process name across the fleet). Alert when the score exceeds a dynamic threshold (e.g., 99th percentile of scores seen in the last 30 days).",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to group raw disk access events based on features like process name, parent process name, access mask, and time of day. Analyze clusters to identify legitimate activity (e.g., a large cluster of backup software running at night). Flag small, sparse clusters or singleton events as anomalies for investigation."
            ]
          },
          {
            "description": "A registry modification event targeting keys that control file system or boot-time drivers, or a raw disk write event to sector 0 of a physical drive, initiated by a process other than a trusted OS installer or patch management tool.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Boot sectors of physical disks and Windows Registry hives on all Windows assets",
            "action": [
              "Symbolic: Create high-priority alerting rules for any modification event (Windows Event ID 4657) to critical registry keys like `HKLM\\SYSTEM\\CurrentControlSet\\Services\\Ntfs` or `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute`. Alert if the responsible process is not `TrustedInstaller.exe` or a similar approved system process.",
              "Statistical: Monitor raw disk write events (Windows Event ID 4663 to `\\.\\PhysicalDrive*`) and analyze the process initiating the write. Maintain a statistical baseline of processes that perform these writes. Alert if a process that has never or rarely been observed writing to raw disk performs such an action, particularly if the write occurs outside a maintenance window.",
              "Machine Learning: Implement a time-series anomaly detection model on the frequency of modifications to critical boot and file system registry keys. A sudden spike in modification events (Event ID 4657) outside of a planned patching cycle could indicate malicious activity like a bootkit installation, which may be used in conjunction with a hidden file system."
            ]
          },
          {
            "description": "The sum of all reported partition sizes on a physical disk is measurably less than the total reported size of that disk, with the discrepancy changing over time, captured by logging the periodic output of disk management commands.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Physical disks on all Windows endpoints and servers",
            "action": [
              "Symbolic: Schedule a recurring script on endpoints to run `wmic diskdrive get size` and `wmic partition get Name, Size, StartingOffset` and log the output. Create a rule to parse these logs and calculate `UnallocatedSpace = TotalDiskSize - SUM(PartitionSizes)`. Alert if this value is non-zero and not attributable to known over-provisioning.",
              "Statistical: For each host, create a time series of the calculated 'UnallocatedSpace' value. Apply a change point detection algorithm to this time series. Alert when a statistically significant increase in unallocated space is detected, as this could indicate an adversary has carved out space for a hidden file system.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) to group hosts based on their disk layout profiles (e.g., number of partitions, percentage of unallocated space). Identify the 'standard' corporate build cluster. Use a classifier to flag any host that deviates from its assigned cluster's profile over time, which could indicate unauthorized disk modifications."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]