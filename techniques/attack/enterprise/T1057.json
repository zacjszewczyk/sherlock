[
  {
    "information_requirement": "Is the adversary performing process discovery on systems or network devices?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1057",
        "name": "Process Discovery",
        "evidence": [
          {
            "description": "Execution of a process whose file hash matches a known malicious tool or script used for system discovery.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Application Servers, Web Servers",
            "action": [
              "From process creation logs (Windows Event ID 4688), extract the file hash (e.g., SHA256) of the new process image. Compare this hash against a threat intelligence feed of known malicious discovery tools (e.g., Seatbelt, SharpHound). Generate a high-severity alert upon a direct match.",
              "For processes that match a known malicious hash, analyze the prevalence of that hash across the environment. Calculate the percentage of endpoints where the hash is observed. If the prevalence is low (e.g., seen on < 1% of hosts), escalate the priority, as it indicates a targeted or isolated incident rather than a widespread, potentially misclassified benign tool.",
              "Develop a classification model (e.g., Logistic Regression, Random Forest) that uses the hash match as a primary feature, but also incorporates contextual features like the parent process name, user context, and command-line arguments. Train the model on historical true/false positives to predict the likelihood that a hash match represents a true malicious event, helping to prioritize alerts from noisy CTI feeds."
            ]
          },
          {
            "description": "Execution of built-in process discovery commands (`tasklist.exe`, `wmic.exe`, `powershell.exe`, `ps`) with parameter combinations indicative of detailed reconnaissance.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Critical Servers, Development Environments",
            "action": [
              "Monitor process creation logs (Windows Event ID 4688) for command lines containing process discovery tools. Use regular expressions to flag invocations with verbose or comprehensive arguments, such as `tasklist /v`, `tasklist /m`, `wmic process get /format:list`, `wmic process list full`, or PowerShell scripts containing `Get-Process | select-object *`.",
              "For each unique command-line variation of a discovery tool, calculate its execution frequency across all hosts and users. Flag commands that fall into a low-frequency percentile (e.g., < 5th percentile), as adversaries often use slightly modified or less common parameter sets to evade simple signature-based rules. Also, calculate the entropy of command-line arguments for a given process; a sudden spike in entropy for `powershell.exe` on a host could indicate obfuscated discovery scripts.",
              "Use a time-series anomaly detection model (e.g., ARIMA) to monitor the hourly count of suspicious discovery command executions per host or user. The model will learn the normal rhythm of administrative activity. An alert is triggered when the observed count significantly exceeds the model's predicted forecast, indicating a potential burst of adversary reconnaissance."
            ]
          },
          {
            "description": "A process discovery command (`tasklist.exe`, `Get-Process`) is executed by a parent process not typically associated with system administration, such as an office application, web browser, or web server process.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations (especially for high-value users), Public-Facing Web Servers, Application Servers",
            "action": [
              "From process creation logs (Windows Event ID 4688), create a whitelist of common, legitimate parent processes for discovery tools (e.g., `explorer.exe`, `cmd.exe`, `powershell_ise.exe`, `mmc.exe`). Alert on any execution where the parent process is not on this list, especially if it is `winword.exe`, `excel.exe`, `outlook.exe`, `chrome.exe`, `w3wp.exe`, or `httpd.exe`.",
              "Build a probabilistic model of parent-child process relationships from historical data (Windows Event ID 4688). For each observed pairing, calculate its conditional probability P(child | parent). Alert when a discovery command is spawned and the calculated probability is below a statistically determined low threshold (e.g., P < 0.001), indicating a rare and suspicious event.",
              "Represent parent-child relationships as a directed graph. Use a graph-based anomaly detection algorithm (e.g., PageRank on a derived graph, or a Graph Neural Network) to identify nodes (processes) with anomalous edge patterns. An office application suddenly creating an edge to `tasklist.exe` would be identified as a structural anomaly within the process graph of that host."
            ]
          },
          {
            "description": "A statistically significant increase in the rate of process discovery command executions originating from a single host or user account over a short duration.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, VPN Concentrators (to track user activity)",
            "action": [
              "Create a simple rule that triggers an alert if a single user or host executes more than a fixed number (e.g., >20) of process discovery commands (`tasklist`, `ps`, `Get-Process`) within a 5-minute window. This provides a basic tripwire for brute-force discovery.",
              "Aggregate process creation events (Windows Event ID 4688) for discovery commands by user and by host over rolling time windows (e.g., 10 minutes, 1 hour). Establish a baseline mean and standard deviation for each entity. Alert when the execution count in a window exceeds a dynamic threshold, such as 3 standard deviations above the mean.",
              "Apply a clustering algorithm (e.g., DBSCAN) to process execution events, using features like `(host, user, command, timestamp)`. The algorithm will group normal, sparse administrative activity into clusters. Bursts of automated discovery activity from a single host/user will appear as dense micro-clusters and be flagged as anomalous outliers."
            ]
          },
          {
            "description": "Execution of process enumeration commands (`show processes`, `ps`) on network infrastructure devices, where the connection originates from an unauthorized source IP or the activity pattern is anomalous.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssh.log",
              "RADIUS/TACACS+ Authentication Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management Subnet, Core Routers and Switches, Firewalls, VPN Concentrators",
            "action": [
              "Correlate network connection logs (Zeek conn.log) to network devices (e.g., on TCP ports 22, 23) with authentication logs (RADIUS/TACACS+). Create a rule to alert when a successful login is followed by a session containing discovery commands (e.g., `show process` from Zeek ssh.log) and the source IP is not from a predefined list of administrative jump boxes or management subnets.",
              "For each administrator account, build a baseline of normal activity including source IP ranges, typical login times (hour of day, day of week), and session duration. Use descriptive statistics to define this baseline. Alert when a session involving process discovery commands deviates on multiple metrics simultaneously (e.g., login from a rare country ASN, at 3 AM local time) using a scoring system.",
              "Model the sequence of commands within each administrative session on network devices. Use a sequence analysis model (e.g., an LSTM-based autoencoder or Markov model) trained on legitimate sessions. The model will learn normal command progressions. An adversary's session, which might involve `show version` -> `show arp` -> `show processes`, could be flagged as an anomalous sequence."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]