[
  {
    "information_requirement": "Is the adversary performing process discovery on systems or network devices?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1057",
        "name": "Process Discovery",
        "evidence": [
          {
            "description": "A process is created (e.g., seatbelt.exe, sharpview.exe) where the file hash of the process executable is present on a threat intelligence feed of known discovery tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Application Servers, Web Servers",
            "action": [
              "From process creation logs (Windows Event ID 4688, Sysmon Event ID 1), extract the file hash (SHA256) of the new process image. Compare this hash against a curated threat intelligence feed of file hashes known to be associated with discovery tools. Generate a high-severity alert upon a match.",
              "For any process matching a malicious hash, calculate its prevalence across the environment over the last 30 days. If the prevalence is below a dynamically set threshold (e.g., observed on fewer than 5 hosts or < 0.1% of the total endpoint population), significantly increase the alert's priority. This isolates targeted attacks from widespread, potentially misclassified benign software.",
              "Train a binary classification model (e.g., Random Forest, Gradient Boosting) to predict the maliciousness of a process execution event. Use features such as the hash match (binary), the parent process name, the user context (e.g., SYSTEM vs. standard user), command-line argument length and entropy, and the prevalence score from the statistical method. This model can help reduce false positives from noisy threat intelligence feeds by considering the full context of the execution."
            ]
          },
          {
            "description": "Execution of native system utilities (e.g., tasklist.exe, Get-Process, ps) with command-line arguments designed to gather comprehensive process details, such as `tasklist /v`, `tasklist /m`, `wmic process list full`, or `ps aux`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Critical Servers, Development Environments, Centralized Log Management Platform (SIEM)",
            "action": [
              "Using process creation logs (Windows Event ID 4688, Sysmon Event ID 1) and PowerShell logs (Event ID 4104), create a detection rule that uses regular expressions to match command-line executions of `tasklist.exe`, `wmic.exe`, `ps`, or `powershell.exe` that include verbose or machine-readable formatting arguments. Examples include `tasklist /v`, `tasklist /m`, `wmic process get /format:list`, `ps aux`, and PowerShell scripts containing `Get-Process | Format-List *`.",
              "For each host, calculate a baseline of the hourly frequency and command-line argument entropy for discovery commands (`tasklist.exe`, `powershell.exe`, etc.). Alert when the execution frequency for a given host exceeds a statistical threshold (e.g., > 3 standard deviations above its own baseline) or when the argument entropy for `powershell.exe` shows a sharp, anomalous increase, suggesting obfuscated or complex script execution.",
              "Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA) for each user account, monitoring the rate of process discovery command executions. The model learns the user's normal administrative cadence. An alert is triggered when the observed count significantly deviates from the model's forecast, indicating a burst of activity inconsistent with the user's established behavior."
            ]
          },
          {
            "description": "A process discovery utility (e.g., `tasklist.exe`, `ps`) is spawned by a parent process that is not a shell or administrative console, such as `WINWORD.EXE`, `CHROME.EXE`, or `w3wp.exe`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations (especially for high-value users), Public-Facing Web Servers, Application Servers",
            "action": [
              "From process creation logs (Windows Event ID 4688, Sysmon Event ID 1), create a rule that alerts when a process discovery command (`tasklist.exe`, `Get-Process`, `ps`) is executed and its parent process image name is on a list of non-standard parents, such as `WINWORD.EXE`, `EXCEL.EXE`, `OUTLOOK.EXE`, `CHROME.EXE`, `w3wp.exe`, `httpd.exe`, or `java.exe`.",
              "From historical process creation logs, build a frequency table of all observed parent-child process pairs in the environment. For each new process creation event involving a discovery tool, calculate the conditional probability P(Child Process | Parent Process). Trigger an alert if this probability falls below a low-frequency threshold (e.g., P < 0.0001), indicating a statistically rare and suspicious event.",
              "Model host activity as a process-level graph where nodes are processes and directed edges represent parent-child relationships. Use a Graph Neural Network (GNN) or other graph-based anomaly detection algorithm to learn the normal graph structure for a typical host. Flag any host whose process graph exhibits a structurally anomalous edge, such as one connecting an Office application node directly to a `tasklist.exe` node, as a potential compromise."
            ]
          },
          {
            "description": "A single host or user account executes an unusually high number of process discovery commands within a short time window, indicating automated scripting or enumeration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, VPN Concentrators, Active Directory Domain Controllers",
            "action": [
              "Create a threshold-based rule that triggers an alert if a single source host or user account executes more than 20 process discovery commands (`tasklist`, `ps`, `Get-Process`) within a 5-minute time window. This acts as a simple tripwire for high-volume, automated discovery.",
              "For each user and host, establish a baseline for the count of discovery command executions over a rolling 1-hour window. Calculate the mean and standard deviation for this baseline. Generate an alert when the current count in a window exceeds a dynamic threshold, such as the mean plus three standard deviations (Z-score > 3), indicating a statistically significant burst of activity.",
              "Apply a density-based clustering algorithm, such as DBSCAN, to process execution events. Use features like `(host_id, user_id, timestamp)` for events related to discovery commands. Normal, sporadic administrative activity will be classified as noise or part of sparse clusters. A rapid succession of commands from a single host/user will form a dense micro-cluster, which the algorithm will identify as an anomalous group, indicative of an automated script."
            ]
          },
          {
            "description": "A network device (e.g., router, switch, firewall) receives process enumeration commands (`show processes`, `ps`) via a remote session (SSH, Telnet) where the session exhibits anomalous characteristics, such as an unusual source IP or command sequence.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssh.log",
              "RADIUS/TACACS+ Authentication Logs",
              "Network device syslog"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management Subnet, Core Routers and Switches, Firewalls, VPN Concentrators",
            "action": [
              "Correlate network connection logs (Zeek conn.log) to TCP ports 22/23 on network devices with authentication logs (RADIUS/TACACS+). Create a rule to alert if a successful administrative login is followed by commands containing 'show process' (from syslog or Zeek ssh.log) and the `id.orig_h` (source IP) in the Zeek log is not within a predefined allow-list of administrative workstations or jump servers.",
              "For each network administrator account, build a statistical baseline of activity from authentication and connection logs. The baseline should include: 1) Set of source IP subnets/ASNs, 2) Typical login hours (hour of day, day of week), 3) Session duration percentiles (e.g., 25th, 50th, 75th). Alert when a session involving process discovery deviates from this baseline on two or more metrics, such as a login from a rare ASN occurring outside of business hours.",
              "Model the sequence of commands executed within each administrative session on network devices using a Markov chain or an n-gram model. Train the model on historical legitimate sessions to learn common command transitions (e.g., `config t` -> `interface X`). Flag a session as anomalous if it contains a low-probability sequence of transitions, such as `show version` -> `show arp` -> `show processes`, which is more indicative of reconnaissance than routine maintenance."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]