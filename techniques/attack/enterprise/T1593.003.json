[
  {
    "information_requirement": "Is the adversary conducting reconnaissance against the organization's public code repositories?",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1593.003",
        "name": "Code Repositories",
        "evidence": [
          {
            "description": "An alert from an external secret scanning service containing a specific credential pattern (e.g., AWS_ACCESS_KEY_ID, rsa-private-key) associated with a commit to a public organizational code repository.",
            "data_sources": [
              "GitHub Advanced Security alert logs",
              "GitGuardian alert logs",
              "Third-party secret scanning service APIs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public code repositories (e.g., GitHub, GitLab)",
            "action": [
              "Symbolic: Create a detection rule that triggers a high-severity alert when an external secret scanning service log contains an event with a `secret_type` matching a predefined list of sensitive patterns (e.g., 'AWS Key', 'GCP Key', 'Private Key') and the `repository_visibility` is 'public'.",
              "Statistical: For each developer, calculate the rate of secret leak alerts over time (e.g., per month). Flag any developer whose alert rate exceeds the 95th percentile for the organization, as this may indicate poor security practices or a compromised developer account.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) on historical secret scanning alerts, using features like repository name, file extension (.pem, .env, .sh), and commit message content. Use the model to predict the probability that a new alert represents a true positive, high-impact leak for automated prioritization."
            ]
          },
          {
            "description": "An account with a creation date of less than 72 hours performs a clone or fork operation on one or more sensitive organizational repositories.",
            "data_sources": [
              "GitHub audit stream",
              "GitLab audit events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud-based Git provider audit logs",
            "action": [
              "Symbolic: Create a detection rule that joins repository audit events (action: `git.clone`, `repo.fork`) with user account metadata. Trigger an alert if `user.created_at` is within 72 hours of the event timestamp for any repository tagged as 'sensitive'.",
              "Statistical: For each repository, establish a baseline of daily clone/fork counts. Alert when the daily count exceeds 3 standard deviations above the 30-day moving average. Further enrich by calculating the percentage of activity from new accounts (age < 30 days); if this percentage also exceeds the 90th percentile, elevate severity.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., ARIMA) to forecast expected clone/fork activity for critical repositories. Generate an alert when the observed activity significantly deviates from the forecasted confidence interval, indicating a potential reconnaissance campaign."
            ]
          },
          {
            "description": "An external IP address performs a clone, fork, or access event against a repository that is marked as 'internal' but is publicly accessible due to misconfiguration.",
            "data_sources": [
              "GitHub audit stream",
              "GitLab audit events",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public code repositories (e.g., GitHub, GitLab)",
            "action": [
              "Symbolic: Maintain a list of repositories intended to be private. Create a detection rule that alerts on any access event (clone, fork, view) from an external IP address (not within the corporate IP range) where the target repository is on this 'intended private' list.",
              "Statistical: Calculate the entropy of repository names being accessed from external sources. A sudden drop in entropy may indicate targeted access to a few specific, potentially misconfigured, repositories. Alert when the daily entropy score for repository access drops below the 10th percentile of the historical distribution.",
              "Machine Learning: Develop an unsupervised learning model (e.g., Isolation Forest) using features from repository access logs, such as source IP reputation, user-agent, and number of repositories accessed in the session. Use the model to score each session for anomalousness; sessions with high anomaly scores targeting non-public repositories are strong indicators of targeted reconnaissance."
            ]
          },
          {
            "description": "A failed or successful authentication event is observed where the source IP is external and the username corresponds to a developer whose credentials were recently found in a public code repository.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Ingest a watchlist of leaked credentials (usernames, API keys) from a secret scanning service. Create a high-priority alert that triggers when a username from this watchlist appears in an authentication log (Windows Event ID 4624/4625) from an external source IP.",
              "Statistical: For each user on the leaked credential watchlist, monitor their authentication success/failure ratio from external IPs. Alert if the failure rate for a watched user spikes to more than 3 standard deviations above their personal baseline, indicating credential stuffing or spraying attempts.",
              "Machine Learning: Train a supervised classifier (e.g., Random Forest) to identify credential abuse. Features should include: if the username is on a watchlist, source IP geolocation rarity, time of day, and authentication result. Use the model to score each external authentication attempt, alerting on those with a high probability of being malicious."
            ]
          },
          {
            "description": "A single external IP address generates multiple failed authentication events (Windows Event ID 4625) across more than 10 distinct user accounts within a 5-minute window, where the usernames match known developer accounts.",
            "data_sources": [
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators",
            "action": [
              "Symbolic: Create a detection rule that triggers when a single source IP generates more than 10 failed logins (Windows Event ID 4625) for more than 5 unique user accounts within 10 minutes. Correlate the target usernames with a known list of developers to increase alert fidelity.",
              "Statistical: Aggregate failed logins by source IP and calculate the ratio of unique accounts targeted to total attempts. A high ratio (near 1.0) is indicative of password spraying. Alert when a source IP's ratio exceeds the 99th percentile of all external authenticating IPs and the total number of targeted accounts is greater than 10.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on authentication logs, with features like source IP, user-agent, and timestamp. A dense cluster of failed logins from a single IP across many accounts in a short time frame will be identified as an anomalous cluster representing a password spraying attack."
            ]
          },
          {
            "description": "An external IP address makes a successful connection or DNS request for an internal, non-public service endpoint (e.g., 'dev-api.internal.corp.com') whose name was likely sourced from a code repository.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter firewalls and web proxies",
            "action": [
              "Symbolic: Maintain a watchlist of internal-only hostnames, FQDNs, and IP addresses. Create a detection rule to alert on any DNS query (Zeek dns.log) or connection attempt (Zeek conn.log) from an external source IP to a destination on this watchlist.",
              "Statistical: For all inbound connections from external IPs, calculate the historical frequency of each destination port and destination IP combination. Alert when a connection attempt is made to a destination (port/IP pair) that falls below the 1st percentile of frequency (i.e., is extremely rare).",
              "Machine Learning: Apply a One-Class SVM model to baseline normal inbound network traffic patterns from the internet, using features like destination port, protocol, and byte counts from Zeek conn.log. Use the model to identify and alert on new inbound connections that are classified as outliers."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]