[
  {
    "information_requirement": "Is the adversary establishing persistence using container services?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.005",
        "name": "Container Service",
        "evidence": [
          {
            "description": "A container creation event is observed (e.g., `docker run`, `podman run`) where the specified container image name, tag, or digest hash is present on a list of known malicious indicators.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Kubernetes control plane nodes, Container image registries, Network sensors monitoring traffic to external registries",
            "action": [
              "From Windows Event ID 4688 logs, parse command lines for `docker.exe` or `podman.exe` to extract container image names and tags. From Zeek http.log, extract image names from URLs targeting registry APIs. Correlate the extracted image name, tag, or digest hash (from Zeek files.log) against a threat intelligence feed of known-malicious container images. Generate an alert on any match.",
              "For every container image seen in the environment, calculate its prevalence (number of unique hosts it runs on). Establish a distribution of image prevalence. Flag any image in the bottom 5th percentile (i.e., running on very few hosts) for review, especially if the image source is an external, non-whitelisted registry.",
              "Implement a classification model (e.g., Logistic Regression) to predict if a newly observed container image is malicious. Train the model using features extracted from image metadata, such as the length of the image name, entropy of the tag, source registry reputation, and number of layers. Score new images and alert on those exceeding a high-risk threshold."
            ]
          },
          {
            "description": "A process creation event for a container runtime (e.g., `docker run`, `podman run`) includes a persistence-related argument such as `--restart=always` or `--restart=on-failure`. Alternatively, a new system service is installed (e.g., via Windows Event ID 4697) with a service binary path that invokes a container.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts",
            "action": [
              "Create a detection rule to scan Windows Event ID 4688 process command lines for the exact strings `--restart=always`, `--restart=on-failure`, or `restart=always`. Also, monitor Windows Event ID 4697 ('A service was installed in the system') and alert if the 'Service File Name' field contains `docker run` or `podman run` commands.",
              "For each user account, baseline the frequency of using container restart flags. Calculate the moving average and standard deviation of this frequency over a 30-day window. Generate an alert if a user's daily usage of these flags exceeds 3 standard deviations above their historical average, indicating a potential change in behavior.",
              "Vectorize container command-line arguments into numerical features (e.g., using TF-IDF or one-hot encoding). Apply a clustering algorithm like DBSCAN to group similar command invocations. Investigate commands that are classified as noise or outliers, as they represent rare and potentially malicious combinations of arguments not seen in normal operations."
            ]
          },
          {
            "description": "A Kubernetes DaemonSet is created, or a Pod is created with a `restartPolicy: Always` (the default), ensuring it is rescheduled if it fails or the node reboots.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Network traffic monitoring points between user segments and the Kubernetes control plane",
            "action": [
              "In Zeek http.log, monitor for HTTP POST requests to the Kubernetes API server paths for DaemonSets (e.g., `/apis/apps/v1/namespaces/{namespace}/daemonsets`). Decode the POST body if unencrypted and alert if the `kind` field is `DaemonSet` and the request originates from a user agent or IP not associated with approved administrative tools or CI/CD pipelines.",
              "Aggregate Kubernetes object creation events by user and object type (Pod, DaemonSet) per hour. For each user, establish a baseline creation rate. Alert if the number of DaemonSets created by a single user in an hour exceeds the 99th percentile of their historical creation rate, or any non-admin user creates a DaemonSet.",
              "Implement an anomaly detection model on the YAML/JSON manifests of submitted Kubernetes objects. Vectorize the manifest content (e.g., image used, security context, host mounts). Train a model (e.g., Isolation Forest) on known-good manifests. Score new submissions and alert on manifests identified as outliers, which may represent malicious configurations."
            ]
          },
          {
            "description": "A container, established for persistence, initiates network connections to rare external IP addresses or uses non-standard ports, indicative of Command and Control (C2) communication.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Network egress points, DNS resolvers",
            "action": [
              "From Zeek conn.log, inspect all connections originating from known container host IP addresses. Correlate the destination IP with a threat intelligence feed of known C2 servers. Additionally, inspect related Zeek dns.log entries for DNS queries to domains on a known-malicious or DGA-flagged list. Alert on any match.",
              "For each container host, baseline the entropy of destination ports and the JA3/JA3S hashes of outbound TLS connections seen in Zeek ssl.log and conn.log. Alert if a new connection is observed with a JA3/JA3S hash that has a low global prevalence (e.g., seen in less than 0.1% of connections) or if the entropy of destination ports for a given host significantly deviates from its norm.",
              "For each container host, model the time series of outbound data volume (e.g., `orig_bytes` in Zeek conn.log) using an LSTM autoencoder. The model learns the normal 'rhythm' of network traffic. Flag time windows where the reconstruction error is high, indicating anomalous traffic patterns such as the periodic, low-and-slow beacons characteristic of C2 channels."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using container services?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.005",
        "name": "Container Service",
        "evidence": [
          {
            "description": "Execution of commands or API calls containing arguments or payloads that match patterns for known container escape or privilege escalation CVEs (e.g., CVE-2019-5736 'runc escape').",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Kubernetes API Server, Network sensors monitoring control plane traffic",
            "action": [
              "Apply a ruleset of regular expressions, derived from public exploit code for known container-related CVEs, to the command-line field in Windows Event ID 4688 and to decoded HTTP bodies in Zeek http.log targeting the container daemon or K8s API. Generate a high-severity alert on any match.",
              "Calculate a baseline for the length and character entropy of command-line arguments for `docker.exe` and `podman.exe`. Alert when a command is executed with arguments whose length or entropy exceeds the 99.9th percentile of the established baseline, as this is a common indicator of shellcode or obfuscated payloads.",
              "Train a one-class SVM model on feature vectors representing normal container command lines (e.g., argument counts, flag usage, argument length). Use the trained model to score new commands in real-time. Commands identified as anomalies by the model indicate a potential zero-day or unknown exploit pattern."
            ]
          },
          {
            "description": "A container is created or executed using command-line patterns that grant high privileges or mount sensitive host system directories.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All container hosts (servers and workstations with Docker/Podman installed)",
            "action": [
              "Create a detection rule to trigger on Windows Event ID 4688 process creation events where the process is `docker.exe` or `podman.exe` and the command line contains any of the following strings: `--privileged`, `--security-opt seccomp=unconfined`, `-v /:/host`, `-v /var/run/docker.sock:/var/run/docker.sock`, or `-v C:\\:/host`.",
              "Maintain an explicit allowlist of user accounts and service accounts authorized to run containers with privileged flags. For any user on this list, baseline their frequency of privileged execution. Alert immediately if a non-allowlisted user attempts a privileged execution, or if an authorized user's rate of privileged execution exceeds their 95th percentile baseline.",
              "Develop a decision tree classifier to determine if a container launch is a privilege escalation attempt. Use features such as: the user's role, `is_privileged_flag_present`, `is_host_root_mounted`, `is_docker_sock_mounted`, and image source (internal vs. external). The resulting tree provides a human-readable model for triaging high-risk container launches."
            ]
          },
          {
            "description": "A process associated with a container runtime spawns an anomalous child process on the host, such as an interactive shell, indicating a container escape.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts",
            "action": [
              "Using Windows Event ID 4688 logs, build process trees. Alert whenever a process like `dockerd.exe`, `containerd.exe`, or `containerd-shim-runc-v2.exe` is the parent of a suspicious child process not on an allowlist, such as `cmd.exe`, `powershell.exe`, `net.exe`, or `whoami.exe`.",
              "For each process on a container host (e.g., `dockerd.exe`), generate a frequency distribution of its child processes over a 30-day period. Alert if a parent-child relationship occurs that has a frequency below a rarity threshold (e.g., seen less than 5 times), indicating a deviation from normal process behavior.",
              "Model process execution history as a directed graph where nodes are processes and edges are parent-child relationships. Use a graph-based anomaly detection algorithm (e.g., GCN-based autoencoder) to learn the normal topology. Flag newly formed subgraphs with a high anomaly score, which can represent a container escape and subsequent lateral movement activity."
            ]
          },
          {
            "description": "A container initiates network connections to internal administrative services or other network segments that violate the principle of least privilege, suggesting a successful privilege escalation and pivot attempt.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors monitoring east-west traffic, Container hosts, DNS resolvers",
            "action": [
              "Maintain a list of IP subnets designated for critical services (e.g., domain controllers, database servers). Monitor Zeek conn.log for any traffic originating from a container host IP address destined for a critical subnet where no explicit firewall rule or application-level justification exists. Alert on any such connection.",
              "For each container host, build a profile of the internal subnets it typically communicates with. Represent this profile as a set of destination subnets. For each new connection, calculate the Jaccard distance between the destination subnet and the historical set. Alert if the distance is 1, meaning the container host is communicating with an entirely new internal subnet for the first time.",
              "Construct a network graph where nodes are internal IP addresses and edges represent observed connections from Zeek conn.log. Apply a community detection algorithm like Louvain to identify normal traffic clusters (e.g., web frontends talking to backend APIs). Flag any connection from a container host that bridges two previously separate communities, as this may indicate an adversary pivoting through a compromised container."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]