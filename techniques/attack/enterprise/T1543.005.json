[
  {
    "information_requirement": "Is the adversary establishing persistence using container services?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.005",
        "name": "Container Service",
        "evidence": [
          {
            "description": "A container is created from an image whose name, tag, or hash matches a known-bad indicator from threat intelligence feeds.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Kubernetes control plane nodes, Container image registries, Network sensors monitoring traffic to external registries",
            "action": [
              "Symbolic: Parse container creation commands (e.g., `docker run`, `podman run`) from Windows Event ID 4688 process logs to extract image names and tags. Correlate these image identifiers against a threat intelligence feed of known malicious container images. Alert on any match.",
              "Statistical: Analyze the frequency of container image usage across the environment. Flag images that are deployed on a statistically small number of hosts (e.g., only one host) as potential one-off malicious deployments, especially if the image is not from an approved internal registry. A deployment on <1% of hosts could be a trigger.",
              "Machine Learning: Develop a classification model trained on features from container image metadata (e.g., image name length, presence of special characters, source registry) and runtime behavior to predict the likelihood of an image being malicious. Use this model to score and prioritize alerts for newly seen images."
            ]
          },
          {
            "description": "A container is launched with a restart policy flag (e.g., `restart=always`) or a new system service (e.g., systemd, Windows Service) is created to launch a container.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Domain Controllers",
            "action": [
              "Symbolic: Create a detection rule to search Windows Event ID 4688 process creation logs for container commands (e.g., `docker run`, `podman run`) that include the literal strings `--restart=always` or `--restart=on-failure`. Concurrently, monitor Windows Event ID 4697 for new services where the 'Service File Name' field contains container-related commands.",
              "Statistical: Establish a baseline of common command-line arguments used with `docker run` and `podman run` in your environment. Calculate the rarity of the `--restart` flag's usage per user or host. Trigger an alert if a user or host who has never used this flag before suddenly employs it, or if its usage frequency deviates by more than 2 standard deviations from the established norm.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on feature vectors of command-line arguments from all container creation events. Isolate and investigate small clusters or outliers that represent unusual combinations of arguments, which may indicate a novel persistence technique not covered by specific string matches."
            ]
          },
          {
            "description": "A Kubernetes DaemonSet is created, or a Pod is created with a `restartPolicy: Always` (the default), ensuring it is rescheduled if it fails or the node reboots.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Network traffic monitoring points between user segments and the Kubernetes control plane",
            "action": [
              "Symbolic: Monitor Zeek http.log for HTTP POST requests to Kubernetes API server endpoints (e.g., `/api/v1/namespaces/{namespace}/pods`, `/apis/apps/v1/namespaces/{namespace}/daemonsets`). Trigger an alert if the request body contains `kind: DaemonSet` and the request originates from an IP address or user-agent not on an approved allowlist.",
              "Statistical: Profile the rate of DaemonSet and Pod creation per user or service account. Use time series analysis to establish a baseline rate. Alert on spikes in creation activity that exceed a dynamic threshold (e.g., 95th percentile of the daily creation rate), which could indicate automated adversarial deployment.",
              "Machine Learning: Train a classification model on the JSON/YAML manifests of Kubernetes objects. Use features like the source of the image, resource requests/limits, security context, and volume mounts to classify deployments as benign or potentially malicious. A manifest that specifies an unknown image registry and requests minimal resources could be flagged as a high-risk persistent implant."
            ]
          },
          {
            "description": "A container, established for persistence, initiates network connections to rare external IP addresses or uses non-standard ports, indicative of Command and Control (C2) communication.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Network egress points, DNS resolvers",
            "action": [
              "Symbolic: For each new network connection in Zeek conn.log originating from a container host, correlate the source IP with a container start event from Windows Event ID 4688. Check the destination IP against a threat intelligence feed of known C2 servers and the requested domain in Zeek dns.log against a DGA blocklist. Alert on any match.",
              "Statistical: For each container image, build a profile of its typical network behavior (destination ports, protocols, data volume). Calculate the entropy of the destination port set for each running container. A high entropy score or connections to statistically rare ports (e.g., outside the top 1000 most common ports in the environment) should be flagged for review.",
              "Machine Learning: Apply time series analysis (e.g., ARIMA or LSTM) to the volume of outbound data (bytes_out) from each container, as recorded in Zeek conn.log. A model trained on normal traffic patterns can detect anomalies like periodic, low-volume 'heartbeat' traffic characteristic of C2 channels, even when the destination is not on a blocklist."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using container services?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.005",
        "name": "Container Service",
        "evidence": [
          {
            "description": "Execution of commands or API calls containing arguments or payloads that match patterns for known container escape or privilege escalation CVEs (e.g., CVE-2019-5736 'runc escape').",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, Kubernetes API Server, Network sensors monitoring control plane traffic",
            "action": [
              "Symbolic: Deploy and maintain a set of regular expression signatures based on public exploit code for known container vulnerabilities. Apply these signatures to process command lines from Windows Event ID 4688 and HTTP request bodies from Zeek http.log targeting the K8s API. An alert on a match is a high-fidelity indicator of an active exploitation attempt.",
              "Statistical: Analyze the length and character distribution (entropy) of command-line arguments and API payloads associated with container operations. Exploits often involve unusually long strings or high-entropy shellcode. Establish a baseline for these metrics and alert when a command's arguments exceed the 99th percentile for length or entropy.",
              "Machine Learning: Use a one-class SVM (Support Vector Machine) trained on legitimate container command lines and API calls. New commands that fall outside the learned 'normal' boundary are flagged as anomalous. This can help detect zero-day or unknown exploit patterns that do not match specific signatures."
            ]
          },
          {
            "description": "A container is created or executed using command-line patterns that grant high privileges or mount sensitive host system directories.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All container hosts (servers and workstations with Docker/Podman installed)",
            "action": [
              "Symbolic: Create a detection rule that searches Windows Event ID 4688 for process creation events of `docker.exe` or `podman.exe` with command-line arguments containing `--privileged`, `security-opt seccomp=unconfined`, or volume mounts (`-v`) mapping to sensitive host paths like `C:\\`, `/etc`, or `/var/run/docker.sock`.",
              "Statistical: Maintain a list of users and service accounts authorized to run privileged containers. For any user, calculate the frequency of using these high-privilege flags. Alert if an unauthorized user attempts to use them, or if an authorized user's frequency of use suddenly spikes, deviating from their historical baseline by more than 3 standard deviations.",
              "Machine Learning: Train a random forest classifier to predict whether a container launch command is high-risk. Features would include binary flags (e.g., `is_privileged`, `is_host_path_mounted`), the user account executing the command, and the image being used. This model can learn complex relationships, such as a specific user running a non-standard image with a privileged flag, and assign a risk score."
            ]
          },
          {
            "description": "A process associated with a container runtime spawns an anomalous child process on the host, such as an interactive shell, indicating a container escape.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts",
            "action": [
              "Symbolic: From Windows Event ID 4688 logs, build process ancestry trees. Create a rule to alert whenever a known container runtime process (e.g., `dockerd.exe`, `containerd-shim-runc-v2.exe`) is the direct parent of an interactive shell (`cmd.exe`, `powershell.exe`) or a sensitive system utility (`net.exe`, `whoami.exe`).",
              "Statistical: Create a baseline of all normal parent-child process relationships on container hosts. For each parent process (like `dockerd.exe`), list its common children and calculate the frequency of each relationship. Alert when a new, statistically rare parent-child relationship appears (e.g., a relationship never seen before or occurring <0.01% of the time).",
              "Machine Learning: Use a graph-based anomaly detection model on process execution data. Represent processes as nodes and parent-child relationships as edges. The model can learn the normal graph structure of processes on a container host and identify anomalous subgraphs, such as a container runtime spawning a chain of processes that leads to network enumeration."
            ]
          },
          {
            "description": "A container initiates network connections to internal administrative services or other network segments that violate the principle of least privilege, suggesting a successful privilege escalation and pivot attempt.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors monitoring east-west traffic, Container hosts, DNS resolvers",
            "action": [
              "Symbolic: Create and maintain a list of critical internal assets and administrative interfaces (e.g., Domain Controller IPs, SSH ports on production servers). Correlate container start events (Windows Event ID 4688) with network flows (Zeek conn.log) and alert if a container attempts to connect to any IP or port on this critical asset list.",
              "Statistical: For each container image, profile its 'network blast radius' by mapping all unique internal IPs it communicates with during normal operation. Alert if a running container attempts to connect to an IP outside its established set of peers. Use a Jaccard similarity score to measure the deviation of a container's current connections from its historical baseline.",
              "Machine Learning: Use a community detection algorithm (e.g., Louvain) on a graph of network connections where nodes are containers/IPs and edges are connections. This can identify clusters of normally communicating services. A container that acts as a 'bridge' between two otherwise disconnected communities is anomalous and could indicate an adversary using a compromised container to pivot."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]