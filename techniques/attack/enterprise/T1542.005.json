[
  {
    "information_requirement": "Is the adversary maintaining persistence using TFTP boot on network devices?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1542.005",
        "name": "TFTP Boot",
        "evidence": [
          {
            "description": "A file is transferred via TFTP (UDP port 69) where the file's SHA256 hash matches a known-malicious signature for a network device OS image, or the source/destination IP address of the TFTP connection is present on a threat intelligence feed of malicious infrastructure.",
            "data_sources": [
              "Zeek file.log",
              "Zeek conn.log",
              "Windows Security Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and routers, Network management servers, Network management VLAN, Internet gateways and perimeter firewalls",
            "action": "Symbolic: Extract file hashes from TFTP transfers (Zeek file.log) and IP addresses from TFTP connections (Zeek conn.log). Compare these against threat intelligence feeds for known-malicious network OS image hashes and C2 server IPs. Alert on any match. Statistical: For TFTP servers, calculate the entropy of filenames being served. A high entropy score for a filename served to a network device may indicate randomized or obfuscated names. Track the 95th percentile of filename entropy scores and alert on deviations. Machine Learning: Train a decision tree classifier on TFTP connection metadata (source IP, destination IP, file size, time of day) labeled with known-benign (e.g., scheduled maintenance) and known-malicious transfers. Use the model to classify new TFTP transfers as suspicious or benign."
          },
          {
            "description": "A file is transferred via TFTP to a network device with a filename matching a pattern of known malicious tools (e.g., backdoor.cfg) or using an executable file extension not typically associated with network device images (e.g., .sh, .py, .elf).",
            "data_sources": [
              "Zeek file.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and routers, Network management servers, Network management VLAN",
            "action": "Symbolic: Using regular expressions, scan TFTP filenames in Zeek file.log for patterns matching known malicious toolkits or suspicious extensions (e.g., \\.sh$, \\.py$, \\.elf$, \\.cfg$) that are not part of the standard OS image naming convention. Alert on matches. Statistical: Establish a baseline of common file extensions seen in TFTP transfers for network device management. Calculate the frequency distribution of extensions over a 30-day rolling window. Alert if a rare extension appears or if its frequency exceeds a statistical threshold (e.g., > 3 standard deviations from the mean). Machine Learning: Use a Natural Language Processing (NLP) model (e.g., TF-IDF) on TFTP filenames. Train the model on legitimate filenames to learn normal patterns and apply it to new filenames to detect anomalous naming conventions that deviate significantly from the learned 'language' of legitimate files."
          },
          {
            "description": "A network device, identified by its source IP, initiates a TFTP connection (destination port 69) to a destination IP address that is not on an established allowlist of authorized network management TFTP servers.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network device management VLAN, Perimeter firewall logs, DNS server logs",
            "action": "Symbolic: Maintain an explicit allowlist of authorized internal TFTP server IPs. Monitor Zeek conn.log for all connections on UDP port 69 originating from network device IP ranges. Alert on any connection where the destination IP is not on the allowlist, with critical severity for external IPs. Statistical: For each network device, profile its typical TFTP destinations. Calculate the historical frequency of communication with each destination server. Alert if a device communicates with a destination IP that is statistically rare (e.g., seen for the first time or in the bottom 5th percentile of connection frequency). Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on TFTP connection pairs (source device IP, destination server IP). Benign activity should form dense clusters around authorized management servers. Connections to unauthorized servers will appear as noise or outliers. Alert on any connection identified as an outlier by the model."
          },
          {
            "description": "TFTP transfer activity involving a network device that deviates from its established baseline across multiple dimensions, such as occurring outside of a scheduled maintenance window, having an anomalously large or small file size, or originating from an atypical source host.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek file.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and routers, Network management servers, Network management VLAN",
            "action": "Symbolic: Define approved maintenance windows (e.g., Saturday 1 AM - 4 AM). Monitor Zeek conn.log and file.log for TFTP traffic involving network devices. Alert on any TFTP activity occurring outside of these defined windows. Statistical: For each network device, create a multi-metric baseline including time-of-day distribution, file size distribution (mean, std dev), and source IP frequency. Use a scoring system where deviations (e.g., activity at 2 PM on a Tuesday, file size > 3 std dev from mean) increment a risk score. Alert if the cumulative score exceeds a defined threshold. Machine Learning: Apply a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to the volume and frequency of TFTP transfers per device. Train the model on at least 30-60 days of historical data to learn the normal rhythm and alert on any transfers that are statistically significant deviations."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using TFTP boot on network devices?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1542.005",
        "name": "TFTP Boot",
        "evidence": [
          {
            "description": "A file is transferred to a network device via TFTP, and the file's SHA256 hash is found on a threat intelligence feed specifically listing hashes of compromised network firmware, bootloaders, or configuration files designed to bypass security controls.",
            "data_sources": [
              "Zeek file.log",
              "Sysmon Event ID 1",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network management servers, File repositories for OS images, Network device management VLAN",
            "action": "Symbolic: Continuously monitor Zeek file.log for all files transferred via TFTP. Calculate the SHA256 hash of every file and compare it against a threat intelligence database of known-malicious network device firmware hashes. An alert on a hash match is a high-fidelity indicator. Statistical: Implement fuzzy hashing (e.g., ssdeep) for all transferred TFTP files. Compare the fuzzy hash of a new file against a baseline of approved, known-good firmware images. Alert if a new file's hash has a high similarity score to a known-good image but is not an exact match, indicating a potentially patched version. Machine Learning: Train a supervised classification model (e.g., Gradient Boosting) on features extracted from the binary files themselves (e.g., entropy of sections, presence of certain strings). Use this model to predict whether a new firmware image transferred via TFTP is malicious, even if its hash is unknown."
          },
          {
            "description": "A correlated sequence of events occurs for a single network device within a short time window: 1) A TFTP file transfer to the device, 2) The device reboots (inferred by a drop and re-establishment of SNMP/SSH/Syslog), and 3) The device initiates new outbound connections matching patterns of covert C2 protocols (e.g., DNS tunneling, ICMP C2).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek file.log",
              "Zeek dns.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and routers, Perimeter firewall logs, DNS resolvers, Network management VLAN",
            "action": "Symbolic: Create a stateful detection rule that triggers on the following sequence for a given device IP within a 15-minute window: [Event 1: Zeek file.log shows TFTP transfer] -> [Event 2: Zeek notice.log shows device_down/device_up] -> [Event 3: Zeek conn.log shows new outbound connection to a known C2 IP OR Zeek dns.log shows requests characteristic of DNS tunneling]. Statistical: After a TFTP transfer and reboot event is detected for a device, analyze the entropy of its subsequent DNS requests. A significant increase in the entropy of requested subdomain labels compared to the device's historical baseline is a strong indicator of DGA-based C2. Machine Learning: Use a Hidden Markov Model (HMM) to model the sequence of network events. An observed sequence of events (TFTP transfer -> reboot -> anomalous outbound traffic) that has a high probability of transitioning to a 'C2 Communication' state would trigger an alert."
          },
          {
            "description": "Following a TFTP file transfer, a network device's post-reboot network traffic profile shows a statistically significant deviation from its pre-transfer baseline, such as communicating on new protocols or ports, contacting a larger number of unique IP addresses, or changing its data transfer volume.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek software.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and routers, East-West traffic collection points, Network management VLAN",
            "action": "Symbolic: For critical devices, define a strict profile of allowed protocols and destination ports (e.g., SNMP 161/162, SSH 22). After a TFTP event, monitor Zeek conn.log for any communication from the device using protocols or ports not on this explicit allowlist. Statistical: For each device, maintain a rolling 30-day baseline of key metrics from Zeek conn.log (unique destination IPs/hr, bytes in/out, protocol mix). After a TFTP event, use a Kolmogorov-Smirnov test to check if the new traffic distribution is significantly different from the baseline. Alert on a low p-value. Machine Learning: Employ an autoencoder neural network trained on vectors representing a device's normal traffic profile. After a TFTP event, feed the device's new traffic profile into the autoencoder. A high reconstruction error indicates the new traffic is anomalous and does not conform to learned normal patterns."
          },
          {
            "description": "A TFTP connection (destination port 69) is initiated towards a network device from a source IP that is either external/internet-routable or is an internal IP not on the authorized network management host allowlist.",
            "data_sources": [
              "Zeek conn.log",
              "Firewall Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter firewalls, Network device management VLAN, Network management servers",
            "action": "Symbolic: Create a high-severity alert for any accepted connection on UDP port 69 at the network perimeter where the destination is a network device. Internally, monitor Zeek conn.log for TFTP connections to network devices and alert if the source IP is not on the network management server allowlist. Statistical: Analyze the geographic and ISP origin of all inbound TFTP connection attempts logged at the firewall. Alert on any connection attempt from a new or statistically rare country or Autonomous System Number (ASN), as this is highly anomalous. Machine Learning: Use a one-class SVM (Support Vector Machine) model trained only on the IP addresses of authorized network management servers. This model creates a boundary around 'normal' TFTP sources. Any TFTP connection attempt from a source IP that falls outside this boundary is flagged as an anomaly."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]