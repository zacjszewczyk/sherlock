[
  {
    "information_requirement": "Is the adversary evading defenses using software packing?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.002",
        "name": "Software Packing",
        "evidence": [
          {
            "description": "Execution of a file that matches a known malicious hash or contains static signatures of a known software packer.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "File content analysis",
              "Threat intelligence feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Application servers, File shares, Email gateways",
            "action": [
              "For each process creation event (Windows Event ID 1), compare the recorded file hash (e.g., SHA256) against a threat intelligence feed of known packed malicious executables. Concurrently, scan the file content using a YARA rule set designed to detect byte sequences or strings specific to common packers like UPX, MPRESS, Themida, and VMProtect. Generate an alert upon a positive match from either the hash list or YARA rule.",
              "For each new executable file observed, extract its PE section names. Maintain a 30-day rolling baseline of the frequency distribution of all PE section names across the enterprise. Generate an alert for any executable that contains section names that are statistically rare (e.g., in the bottom 5th percentile of frequency) or do not conform to the expected naming convention for compiled code (e.g., '.text', '.data', '.rsrc').",
              "Develop and deploy a supervised classification model (e.g., Gradient Boosting, Random Forest) trained on a labeled dataset of packed and non-packed executables. Extract features from the PE header, including section characteristics (names, virtual vs. raw size ratios, entropy), import/export table sizes, and resource properties. Score all new executables in real-time and alert on those classified as 'packed' with a confidence score exceeding a tuned threshold (e.g., > 0.90)."
            ]
          },
          {
            "description": "An executable file exhibits heuristic characteristics of packing, such as abnormally high file entropy and a very low number of imported functions.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "File content analysis"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Development servers, Staging environments",
            "action": [
              "For each new executable file, parse its PE import address table (IAT). Generate an alert if the number of imported functions is below a defined threshold (e.g., fewer than 5 unique API calls) and the file is not on an established allow-list of known legitimate software (e.g., installers, simple utilities). This rule is particularly effective for packers that resolve imports at runtime.",
              "For each new executable, calculate the Shannon entropy of the binary file. Establish a baseline entropy distribution for known-good, non-packed executables in the environment. Generate an alert for any new executable whose entropy is a statistical outlier, such as exceeding the 99th percentile of the baseline or a fixed high-value threshold (e.g., > 7.5 on a scale of 0-8), indicating probable compression or encryption.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN, K-Means) to new executables based on a feature set including file entropy, IAT size, the ratio of virtual size to raw size for PE sections, and the presence of non-standard section flags (e.g., writeable and executable). Isolate and investigate clusters that are distinct from the large, dense cluster of known-good software. These outlier clusters represent groups of files that share anomalous characteristics indicative of unknown or custom packing techniques."
            ]
          },
          {
            "description": "A process with static characteristics of packing (e.g., high entropy) performs suspicious runtime activities, such as spawning command-line interpreters or initiating beaconing-like network communications.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Domain Controllers, Internet gateways, DNS servers",
            "action": [
              "Correlate processes identified with static packing indicators (e.g., high entropy, few imports) with subsequent child process creation events (Windows Event ID 1) and network connection events (Zeek conn.log). Generate an alert if, within 60 seconds of execution, the process spawns a command-line interpreter ('cmd.exe', 'powershell.exe', 'wsl.exe') or initiates a network connection to an IP address or domain on a threat intelligence blocklist.",
              "For processes flagged with high entropy, monitor their network communications via Zeek conn.log and dns.log. Calculate the standard deviation of time intervals between outbound connections (jitter) and the standard deviation of data payload sizes. A low standard deviation in both metrics suggests robotic, non-human beaconing. Additionally, calculate the ratio of unique subdomains to a single registered domain in DNS queries; a high ratio can indicate the use of domain generation algorithms (DGAs). Alert when these metrics exceed statistically determined thresholds.",
              "Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) that profiles the normal sequence of runtime behaviors for applications. For each process, create a time-series vector of events (e.g., child process creations, network connections, file modifications, registry key changes). Train the model on sequences from known-good applications. Monitor new processes that have static packing indicators and generate an alert when their behavioral sequence results in a high reconstruction error, indicating a significant deviation from learned normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]