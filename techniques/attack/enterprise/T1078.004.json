[
  {
    "information_requirement": "Has the adversary gained initial access to the network via compromised cloud accounts?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "A successful cloud authentication event originates from an IP address listed on a current, high-confidence threat intelligence feed of known malicious infrastructure (e.g., C2 servers, TOR exit nodes, anonymous proxies).",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms (e.g., Azure AD, AWS IAM), Internet Gateway, VPN Concentrators",
            "action": [
              "Create a detection rule to join cloud authentication logs with a threat intelligence feed of malicious IP addresses. Generate a critical alert for any successful login where the source IP address matches an entry in the feed.",
              "Calculate the rarity of the Autonomous System Number (ASN) associated with the source IP for each login. Alert on successful logins from ASNs that are statistically rare for the organization (e.g., in the bottom 5th percentile of observed ASNs) and are not associated with legitimate business travel or remote offices.",
              "Train a classification model (e.g., Logistic Regression, Random Forest) on labeled historical login data (IP, ASN, time of day, user, success/failure). Use the model to predict the probability of a new login being malicious. A high probability score (>0.9) triggers an alert for analyst review."
            ]
          },
          {
            "description": "A sequence of cloud API calls is observed with a User-Agent string matching a known offensive security tool (e.g., PowerZure, Pacu, CloudSploit) or a non-standard User-Agent like 'curl' or 'python-requests'.",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud API Endpoints, Cloud Service Provider Management Consoles",
            "action": [
              "Scan the User-Agent field in all cloud audit logs against a curated list of regular expressions for known malicious and unusual tools. Alert on any match, especially when correlated with enumeration or permission-modification API calls.",
              "Calculate the entropy of User-Agent strings across all API calls. Flag a User-Agent with abnormally high or low entropy, or one that is statistically rare for a given user or service principal (e.g., seen < 0.1% of the time).",
              "Use a sequence analysis model (e.g., Hidden Markov Model or LSTM) trained on legitimate API call sequences per user/role. Flag any observed sequence of API calls that significantly deviates from the learned legitimate patterns, indicating potential tool-driven reconnaissance."
            ]
          },
          {
            "description": "A high volume of failed authentication events targeting a single cloud account (brute-force) or multiple accounts with a limited set of passwords (password spraying) is observed from one or more source IP addresses.",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Authentication Endpoints, Federation Services (e.g., ADFS)",
            "action": [
              "Create a rule that triggers an alert when the count of failed logins from a single source IP exceeds 20 in 5 minutes, or when failed logins for a single user account exceed 10 from more than 5 distinct IPs in 10 minutes.",
              "For each source IP, calculate the ratio of failed to successful logins within a rolling 1-hour window. Flag any IP where this ratio exceeds the 99th percentile for all source IPs. Also monitor the number of unique accounts targeted by a single IP; an IP targeting a number of accounts > 3 standard deviations above the mean is suspicious.",
              "Implement a time series anomaly detection model (e.g., SARIMA) on the global count of failed authentication events. A sudden spike in the time series that the model flags as an anomaly indicates a potential large-scale brute-force or password spraying attack is underway."
            ]
          },
          {
            "description": "A successful cloud authentication event occurs from a geographic location that is inconsistent with the user's established pattern of activity, or the time and location of the event make it physically impossible given the user's previous login location ('impossible travel').",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Geolocated IP Address Databases",
            "action": [
              "For each successful login, calculate the great-circle distance from the previous login location and divide by the time elapsed. If the resulting speed exceeds a threshold (e.g., 600 mph), generate an 'impossible travel' alert.",
              "For each user, maintain a baseline of normal login countries, cities, and ASNs. Use frequency analysis to flag any login from a location or ASN that falls outside the user's typical top 95% of locations. A login from a country never before seen for that user is a high-confidence indicator.",
              "Use a clustering algorithm (e.g., DBSCAN) on the geolocations (latitude/longitude) of each user's historical logins to identify their normal 'clusters' of activity. A new login that does not fall into any existing cluster and is not close to one (is flagged as noise by DBSCAN) should be alerted as anomalous."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using compromised cloud accounts or credentials?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "An API call is authenticated using a credential (e.g., API key, service principal secret, session token) that is present on a watchlist of known compromised or leaked credentials.",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud API Endpoints, Internal Credential Watchlist Database",
            "action": [
              "Continuously monitor all API calls and join the access key ID or token hash against a watchlist of known compromised credentials. Any match triggers a critical severity alert.",
              "Analyze the usage frequency of all programmatic credentials. A credential that has been dormant for an extended period (e.g., > 180 days) and suddenly becomes active should be flagged. Calculate the 'time since last use' for every API call and alert if this value exceeds the 99th percentile for that specific credential.",
              "Train a classifier on credential usage patterns (API calls made, source IP, time of day). If a known-compromised credential is used, its subsequent activity can be used as labeled malicious data. The model can then predict if other, unknown credentials are being used in a similarly malicious manner."
            ]
          },
          {
            "description": "A new programmatic credential (e.g., AWS Access Key, Azure AD Service Principal) is created with high-privilege permissions (e.g., AdministratorAccess, Owner), no defined expiration, or a suspicious name (e.g., 'bkup', 'temp', 'test-admin').",
            "data_sources": [
              "AWS CloudTrail Logs (CreateAccessKey, CreateServicePrincipal)",
              "Azure Monitor Audit Logs (Add-AzureADApplicationPasswordCredential)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Change Management Systems",
            "action": [
              "Alert on any credential creation event where the associated policy grants administrative privileges (e.g., contains 'Action': '*' on 'Resource': '*') or the credential name matches a regex list of suspicious terms. Also, alert if the creation event is not associated with an approved change request ticket.",
              "Profile the typical roles and permissions assigned during credential creation. Flag the creation of any new credential where the number of assigned permissions exceeds 3 standard deviations above the average, or where the assigned role is statistically rare for the creating user/service.",
              "Use an anomaly detection model on the graph of principals and permissions. When a new credential (node) and its permissions (edges) are added, the model can evaluate if this addition significantly alters the graph structure in a way that resembles known attack paths, flagging it as high-risk."
            ]
          },
          {
            "description": "An authentication event or API call is observed from a user account, service principal, or API key that has not been used for an extended period (e.g., over 90 days), especially if the activity occurs from a new source IP or at an atypical time.",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Asset and Identity Inventory Database",
            "action": [
              "For every authentication event, look up the timestamp of the principal's previous authentication. If the delta is greater than a fixed threshold (e.g., 90 days), generate a medium-severity alert. Escalate to high severity if the source IP is also new for that principal.",
              "For each principal, calculate the mean and standard deviation of the time between authentications. An authentication event where the time since the last login is more than 3 standard deviations above the mean for that specific principal should be flagged as anomalous 'dormant account' activity.",
              "Use a time series forecasting model for each user's login activity. If a login occurs at a time when the model predicted a near-zero probability of activity (e.g., long period of inactivity), flag it as an anomaly. This is more dynamic than a fixed 90-day threshold."
            ]
          },
          {
            "description": "A configuration change is made to the identity federation settings of the cloud environment, such as adding a new SAML Identity Provider (IdP) or modifying the trust relationship with an existing one, that is not documented in change management records.",
            "data_sources": [
              "AWS CloudTrail Logs (CreateSAMLProvider, UpdateSAMLProvider)",
              "Azure Monitor Audit Logs (Set-MsolDomainFederationSettings)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Federation and Single Sign-On (SSO) configuration pages, On-premises Active Directory Federation Services (ADFS) servers",
            "action": [
              "Create a critical-severity, non-overridable alert for any API call that modifies federation settings (e.g., `UpdateSAMLProvider`, `Set-MsolDomainFederationSettings`). These events should always be manually investigated.",
              "Maintain an inventory of approved IdP domains and signing certificates. Periodically query the federation configuration and perform a diff against the last known-good state. Alert on any change. Statistically, these events are zero-frequency and any occurrence is an anomaly.",
              "Model the behavior of administrators who legitimately perform these changes and flag a modification if the responsible principal's other recent activities do not match the established 'administrator behavior' model. This is a secondary control to rule-based alerting."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary escalated privileges using compromised cloud accounts or misconfigurations?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "An API call that modifies permissions (e.g., iam:AttachUserPolicy, iam:PutUserPolicy, Add-MgGroupMember) is executed with a User-Agent string associated with a known cloud hacking tool or a generic scripting agent.",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Cloud API Gateways",
            "action": [
              "Create a rule that joins the API call name with the User-Agent string. If the API call is on a watchlist of privilege-modifying actions AND the User-Agent matches a list of suspicious tool signatures, generate a high-severity alert.",
              "For each user, profile the User-Agent strings they typically use for sensitive operations. If a privilege-modifying API call is made using a User-Agent that is statistically rare for that user (e.g., they always use the web console but suddenly use 'Python-Boto3'), flag the event.",
              "Train a classification model to predict whether a given API call is part of a privilege escalation chain, using features like the API call name, User-Agent, source IP, and the identity's role. A high probability score for a permission-modifying call indicates a likely attack."
            ]
          },
          {
            "description": "A specific, ordered sequence of API calls is observed from a single identity within a short time window, matching a known pattern for exploiting a cloud IAM misconfiguration (e.g., listing policies, finding a modifiable one, creating a new version with higher privileges, and setting it as default).",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms",
            "action": [
              "Define stateful detection rules that look for a specific sequence of API calls from the same identity, such as `iam:ListAttachedRolePolicies` -> `iam:ListPolicyVersions` -> `iam:CreatePolicyVersion` -> `iam:SetDefaultPolicyVersion` within a 15-minute window. A completed sequence triggers an alert.",
              "Calculate the transition probabilities between different API calls for each user (e.g., what is the probability of calling `CreatePolicyVersion` after `ListPolicyVersions`?). A sequence of calls with a very low joint probability based on the user's historical behavior should be flagged as anomalous.",
              "Use a sequence-aware model like an LSTM autoencoder trained on legitimate API call sequences. The model attempts to reconstruct the observed sequence; a high reconstruction error indicates the sequence is anomalous and does not conform to normal operational patterns."
            ]
          },
          {
            "description": "An event modifying an IAM policy or role is detected where the change introduces high-risk permissions, such as adding a wildcard ('*') to the 'Action' or 'Resource' element, or adding sensitive actions like 'iam:PassRole' or 'sts:AssumeRole'.",
            "data_sources": [
              "AWS CloudTrail Logs (CreatePolicyVersion, PutRolePolicy)",
              "Azure Monitor Audit Logs (Set-AzureADPolicy)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Configuration Management Database (CMDB)",
            "action": [
              "Upon a policy modification event, parse the request parameters containing the new policy document. Use a regex to search for patterns like `\"Action\":\"*\"` or `\"sts:AssumeRole\"`. Any match triggers a high-severity alert.",
              "Score every IAM policy based on the permissions it contains. When a policy is modified, calculate the 'privilege score' before and after the change. A change that results in a score increase beyond a certain threshold (e.g., >95th percentile of all historical score increases) is flagged as a significant privilege escalation.",
              "Use a Natural Language Processing (NLP) based model trained on JSON policy documents to classify policies as 'safe' or 'risky'. When a policy is modified, run the new version through the classifier. If a policy transitions from 'safe' to 'risky', generate an alert."
            ]
          },
          {
            "description": "An identity (user or service) successfully assumes an IAM role for the first time or uses a specific permission for the first time, and this action is immediately followed by suspicious or sensitive activity (e.g., data access, creating new users).",
            "data_sources": [
              "AWS CloudTrail Logs (AssumeRole, and subsequent calls)",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Data stores containing sensitive information (e.g., S3 buckets, databases)",
            "action": [
              "Maintain a baseline of (identity, role) pairs that have been observed. Alert on the first occurrence of a new (identity, role) `AssumeRole` event. Correlate this with subsequent actions; if the new role is used to access sensitive data within 5 minutes, escalate the alert severity.",
              "For each identity, create a frequency distribution of roles they assume. A 'first-time' role assumption is an extreme statistical anomaly (zero prior occurrences). The risk can be weighted by the statistical rarity of the role itself across the organization.",
              "Model the relationship between identities and the resources they access as a bipartite graph. Use a link prediction model to determine the likelihood of a new 'role assumption' edge forming under normal circumstances. A very unlikely but successful link indicates a potential privilege abuse."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using compromised cloud accounts?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "An API call is executed that stops, deletes, or modifies a critical security logging or monitoring service (e.g., AWS CloudTrail, AWS GuardDuty, Azure Security Center, Azure Sentinel).",
            "data_sources": [
              "AWS CloudTrail Logs (StopLogging, DeleteTrail, DeleteDetector)",
              "Azure Monitor Audit Logs (delete on microsoft.security/automations)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Security Service configuration pages (e.g., CloudTrail, GuardDuty, Sentinel), Centralized Log Aggregation Platform",
            "action": [
              "Create a non-overridable, critical-severity alert that triggers on a specific list of API call names associated with disabling security services (e.g., `StopLogging`, `DeleteTrail`, `UpdateDetector` with `Enable: false`). These events require immediate incident response.",
              "Monitor the count of these critical security-disabling events. Any count greater than zero is a major statistical anomaly that constitutes an alert. This is a case where simple statistics (count > 0) are most effective.",
              "Train a model on administrator behavior. If a security-disabling API call is made by a principal whose recent activity does not match the 'IT Security Admin' behavior profile, automatically escalate the alert priority."
            ]
          },
          {
            "description": "A cloud network security rule (e.g., AWS Security Group, Azure Network Security Group) is modified to allow inbound or outbound traffic from/to a broad range like '0.0.0.0/0' or for all ports, especially if not associated with a change ticket.",
            "data_sources": [
              "AWS CloudTrail Logs (AuthorizeSecurityGroupIngress, ModifySecurityGroupRules)",
              "Azure Monitor Audit Logs (Microsoft.Network/networkSecurityGroups/write)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Virtual Private Cloud (VPC) / Virtual Network (VNet) configurations, Network Security Group / Security Group configurations",
            "action": [
              "Monitor network configuration change events. Parse the request parameters and alert if a rule is created or modified where the `CidrIp` is '0.0.0.0/0' or the `ToPort` range is '1-65535', unless the change is associated with an approved deployment process.",
              "Analyze the distribution of port ranges and CIDR block sizes in security rule changes. A change introducing a CIDR block with a prefix length in the bottom 5th percentile (i.e., largest networks) or a port range in the top 5th percentile (i.e., widest ranges) should be flagged for review.",
              "Train a classification model on security group rule configurations, labeling them as 'compliant' or 'non-compliant/risky' based on security policy. When a rule is modified, the new configuration can be classified in real-time. A transition from 'compliant' to 'risky' triggers an alert."
            ]
          },
          {
            "description": "An identity performs an action to delete or alter log data, such as deleting a log-storing S3 bucket, disabling lifecycle policies on a log bucket, or clearing events from a log stream, especially after other suspicious activity.",
            "data_sources": [
              "AWS CloudTrail Logs (DeleteBucket, PutBucketLifecycleConfiguration)",
              "Windows Event ID 4663 (on a log server)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized Log Storage (e.g., S3 Buckets, Azure Storage Accounts), CloudTrail/Log Analytics configuration",
            "action": [
              "Create critical alerts for any API call that targets a known log-archive resource and has a destructive action (e.g., `s3:DeleteObject` on a bucket tagged as 'log-archive'). Ensure logs are shipped to a separate, immutable security account to preserve evidence.",
              "Monitor the volume of logs being ingested into the SIEM from key sources. Use time series analysis to detect a sudden, sustained drop in log volume from a specific source. A drop to zero that is not explained by planned maintenance is a strong indicator of log tampering.",
              "Use a sequence analysis model to detect a pattern of 'Anomalous Login -> Data Access -> `DeleteBucket`'. The model can learn these multi-stage attack patterns and alert on the full sequence, rather than just the individual events."
            ]
          },
          {
            "description": "A successful authentication log for an interactive user session shows that Multi-Factor Authentication was not performed, despite policy requiring it. This is identified by a specific claim in the log entry being false or absent (e.g., mfaAuthenticated: false).",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs (ConsoleLogin event with MFAUsed: No)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Single Sign-On (SSO) provider logs",
            "action": [
              "Create a rule to parse all successful interactive login events. Generate a high-severity alert if the event log contains a field indicating MFA was not used (e.g., `mfaAuthenticated: false` or `MFAUsed: No`), especially for users in privileged groups.",
              "For each user, the percentage of logins with MFA should be 100%. Monitor this percentage over time. Any deviation or a sudden appearance of non-MFA logins for a user who has historically always used MFA is a statistical anomaly requiring investigation.",
              "Train a model to predict the likelihood that a login session is legitimate based on features like IP, location, device, and MFA status. A successful login without MFA would be a very strong feature indicating a potentially illegitimate session (e.g., session token theft), leading the model to flag it with a high risk score."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]