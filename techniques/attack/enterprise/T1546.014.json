[
  {
    "information_requirement": "Is the adversary maintaining persistence using the Emond service?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.014",
        "name": "Emond",
        "evidence": [
          {
            "description": "A newly created Emond rule file's hash matches a known-bad hash from threat intelligence, or the command executed by emond matches a known-malicious command-line signature.",
            "data_sources": [
              "EDR File Creation Events",
              "EDR Process Execution Events (including command line arguments)",
              "Threat Intelligence Hash Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints within the enterprise; Threat Intelligence Platform",
            "action": [
              "Symbolic: Create a detection rule that triggers when a file is created in `/etc/emond.d/rules/`. Upon trigger, calculate the file's hash (e.g., SHA256) and compare it against a threat intelligence feed of known-bad file hashes. Alert on any match.",
              "Statistical: For all commands executed by the `/sbin/emond` process, calculate the Shannon entropy of the command-line arguments. Establish a baseline of entropy scores from known-benign activity (which should be near zero). Alert on commands where the entropy score significantly deviates from this baseline (e.g., exceeds the 99th percentile), as this may indicate obfuscated or complex malicious commands.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) on historical process execution data, using features such as the parent process of `/sbin/emond`'s child, command-line argument structure, and length. The model should classify each emond-spawned process as 'benign' or 'malicious' and score new events in real-time."
            ]
          },
          {
            "description": "A new or modified `.plist` file in `/etc/emond.d/rules/` contains a `RunCommand` or `RunExecutable` key that invokes a script interpreter or a binary from a suspicious path.",
            "data_sources": [
              "EDR File Creation/Modification Events",
              "File Content Inspection Logs (e.g., from EDR or FIM)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints within the enterprise; File Integrity Monitoring Systems",
            "action": [
              "Symbolic: Create a detection rule that parses the content of any new or modified file in `/etc/emond.d/rules/`. Alert if the file's XML content contains a `RunCommand` or `RunExecutable` key and the associated value is a known script interpreter (e.g., `/bin/sh`, `python`, `osascript`) or a binary located in a non-standard path like `/tmp/` or `/Users/Shared/`.",
              "Statistical: For all new or modified emond rule files, parse the command string. Calculate the frequency of different commands being used across the enterprise over a 30-day window. Establish a baseline of legitimate commands (which should be a very small set). Alert on any command that is not on the established allowlist or whose execution frequency is a statistical outlier.",
              "Machine Learning: Use Natural Language Processing (NLP) techniques, such as a Bag-of-Words or TF-IDF model, to analyze the command strings within emond rule files. Train a classifier to distinguish between benign system administration commands and suspicious/malicious commands to identify novel attack patterns that do not match simple string or regex signatures."
            ]
          },
          {
            "description": "An emond rule file is created by an unexpected parent process, or the `/sbin/emond` daemon spawns any child process.",
            "data_sources": [
              "EDR Process Execution Events (including parent-child relationships)",
              "EDR File Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints within the enterprise; Endpoint Detection and Response (EDR) agent logs",
            "action": [
              "Symbolic: Create a detection rule that alerts on any child process spawned by the `/sbin/emond` parent process. Additionally, monitor file creation events in `/etc/emond.d/rules/` and alert if the parent process is not an authorized system administration tool or configuration management agent, but is instead a user-land application like a web browser or office application.",
              "Statistical: Build a historical baseline of parent processes that create files in `/etc/emond.d/rules/`. This baseline should be very small or empty in most environments. Use a frequency analysis model (e.g., a simple count-based allowlist) to alert on any process creating a rule file that has not been seen in the last 90 days.",
              "Machine Learning: Apply a time-series anomaly detection model (e.g., ARIMA) to the count of child processes spawned by `/sbin/emond` per hour. The baseline should be a flat line at zero. Any deviation from this zero-count baseline is a significant anomaly that should trigger an immediate alert, indicating a potential persistence or execution event."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to escalate privileges via the Emond service?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.014",
        "name": "Emond",
        "evidence": [
          {
            "description": "A command executed by the root-level `/sbin/emond` process contains strings or arguments characteristic of known privilege escalation payloads or post-exploitation toolkits.",
            "data_sources": [
              "EDR Process Execution Events (including command line arguments and user context)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, particularly those of administrative users; Cyber Threat Intelligence Feeds",
            "action": [
              "Symbolic: Continuously monitor command lines of processes spawned by `/sbin/emond`. Match the arguments against a curated set of regular expressions and string signatures for known macOS privilege escalation tools and payloads (e.g., commands used by Metasploit, Empire, or specific CVE exploit scripts). Trigger a high-severity alert on any match.",
              "Statistical: Analyze the distribution of command-line argument lengths for processes spawned by `/sbin/emond`. Alert on processes with unusually long or complex argument strings (e.g., exceeding the 95th percentile of historical lengths for all system processes), as this can indicate encoded payloads common in exploits.",
              "Machine Learning: Develop a one-class SVM (Support Vector Machine) model trained only on benign system commands executed with root privileges. Use features like command path, argument structure, and execution frequency. Deploy this model to score commands executed by `/sbin/emond`. Any command that falls outside the learned 'normal' boundary is flagged as a novel and potentially malicious privilege escalation attempt."
            ]
          },
          {
            "description": "An emond rule is created with a `RunCommand` or `RunExecutable` action that targets sensitive system files, user accounts, or privileged persistence locations.",
            "data_sources": [
              "EDR File Creation/Modification Events",
              "EDR Process Execution Events",
              "File Content Inspection Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Key system directories on macOS endpoints (e.g., /etc/, /Library/LaunchDaemons, /System/Library/); User account management logs",
            "action": [
              "Symbolic: Parse the content of new emond rules and use regular expressions to detect commands targeting high-privilege operations. Specifically, look for commands like `dscl` (to add users), `chmod`/`chown` on sensitive files, modifications to `/etc/sudoers`, or writing new `.plist` files to `/Library/LaunchDaemons` or `/Library/LaunchAgents`.",
              "Statistical: Create a risk score for each new emond rule. Assign points based on statistical rarity. For example, add points if the command has never been seen before, if it targets a file path that is rarely modified (e.g., modification frequency is in the bottom 1st percentile), or if it contains an unusually high number of arguments. Alert when the cumulative risk score for a rule exceeds a predefined threshold.",
              "Machine Learning: Use a graph-based analysis model where processes, files, and users are nodes. When an emond rule is created, create an edge from the parent process to the rule file, and another edge from the rule file to the command to be executed. Use a graph algorithm to identify when a low-privilege process creates a rule that executes a high-impact command, indicating a privilege escalation pathway."
            ]
          },
          {
            "description": "A sequence of events indicates privilege escalation: an Emond rule is created, and the resulting process execution leads to the creation of a new administrative account or the installation of a secondary, privileged persistence mechanism.",
            "data_sources": [
              "EDR File Creation Events",
              "EDR Process Execution Events",
              "macOS Unified Logs (via `log` command or EDR)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints; Centralized SIEM/Log Management Platform",
            "action": [
              "Symbolic: Create a chained correlation rule in a SIEM that triggers if the following events occur in sequence within a 5-minute window on the same host: (1) A file is created in `/etc/emond.d/rules/`. (2) The `/sbin/emond` process spawns a child process. (3) That child process (or its descendants) executes `dscl` to create a user or add a user to the admin group, or writes a new file to `/Library/LaunchDaemons/`.",
              "Statistical: For each instance of an emond-spawned process, analyze the subsequent activity within the next 10 minutes. Calculate the number of high-risk subsequent events (e.g., file writes to persistence locations, user creation commands, network connections to rare IPs). If the count of these high-risk follow-on activities exceeds 3 standard deviations above the host's baseline activity level, flag the entire sequence as a likely privilege escalation event.",
              "Machine Learning: Implement a sequence analysis model, such as a Hidden Markov Model (HMM), trained on sequences of system events (process creation, file modification, etc.). An emond-triggered privilege escalation represents a low-probability sequence of state transitions (e.g., `file_write_to_emond` -> `emond_spawn_process` -> `user_creation_command`). Flag any event sequence with a sufficiently low probability score as anomalous."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]