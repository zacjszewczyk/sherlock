[
  {
    "information_requirement": "Is an adversary attempting to harvest credentials from shell history files? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1552.003",
        "name": "Bash History",
        "evidence": [
          {
            "description": "A command line execution event containing a shell history file path (e.g., .bash_history, .zsh_history) and keywords indicative of file inspection or credential searching (e.g., cat, grep, password, token).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, Critical infrastructure management hosts",
            "action": [
              "Symbolic: Create a detection rule that searches command line execution logs (e.g., Windows Event ID 4688 for WSL) for the co-occurrence of a history file name pattern (e.g., *history) and a command used for file inspection (cat, less, grep, strings, awk, sed) along with credential-related keywords (password, apikey, token, secret, aws_, gcp_, azure_).",
              "Statistical: For each host, establish a baseline of command-line argument entropy. Calculate the Shannon entropy for the arguments of all executed commands. A command that includes a long, high-entropy string (potential token or key) read from a history file will have a statistically significant higher entropy score. Alert on executions where argument entropy exceeds the 95th percentile for that host or user.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) on labeled command-line execution logs. Features should include the process name, parent process name, presence of history-related keywords, presence of credential-related keywords, argument length, and argument entropy. The model will classify each command as either benign or suspicious history access."
            ]
          },
          {
            "description": "A file modification or access event on a shell history file (.bash_history) by a non-interactive or anomalous process (e.g., a web server process), or a command execution that disables or clears shell history logging.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on multi-user systems, Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled",
            "action": [
              "Symbolic: Create a detection rule that alerts on command line executions (Windows Event ID 4688) containing exact match strings for disabling history, such as `unset HISTFILE`, `export HISTSIZE=0`, `ln -s /dev/null ~/.bash_history`, or redirecting output to the history file, e.g., `> ~/.bash_history`.",
              "Statistical: Profile the frequency of parent processes that spawn shell commands (bash, sh, zsh). A web server process (e.g., httpd, nginx) or a system service spawning a shell to read a user's .bash_history is a statistical anomaly. Maintain a frequency table of (parent_process, child_process) pairs and alert when a rare pair involving shell history access is observed.",
              "Machine Learning: Use time-series analysis on the size of .bash_history files for key users and servers. A sudden drop to zero or near-zero size is anomalous and indicative of clearing. Model the expected file growth over time and alert on significant negative deviations from the forecast, which would signal deletion or truncation."
            ]
          },
          {
            "description": "Network traffic metadata indicating the transfer of a file with a name matching a shell history file (e.g., files.log filename is .bash_history) to an external or unusual internal destination.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Internet gateways), Internal network segments connecting development environments to production, VPN termination points",
            "action": [
              "Symbolic: Create a detection rule to alert when Zeek's files.log shows a `filename` that matches a regex for common history files (e.g., \\.bash_history, \\.zsh_history, \\.python_history) being transferred over HTTP, FTP, or SMTP to a destination outside the organization's known IP space.",
              "Statistical: For each host, calculate a baseline of outbound file transfer sizes and frequencies from Zeek's files.log and conn.log. Shell history files are typically small (< 500 KB). Alert when a host initiates an outbound transfer of a file whose name matches a 'dotfile' pattern (^\\..*) and whose size falls within this typical history file size range, if such transfers are statistically rare for that host (e.g., > 3 standard deviations from the mean frequency).",
              "Machine Learning: Apply clustering algorithms (e.g., DBSCAN) to network connection logs (Zeek conn.log). Use features such as source IP, destination IP, destination port, protocol, total bytes transferred, and connection duration. A cluster of small, short-lived connections to disparate external IPs, especially when correlated with file transfers of 'dotfiles' from files.log, can represent a distributed exfiltration attempt."
            ]
          },
          {
            "description": "A correlated sequence of events within a short time window on a single host: 1) Directory enumeration, 2) Shell history file access, and 3) A subsequent outbound network connection or new login.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), Network choke points (for observing outbound connections)",
            "action": [
              "Symbolic: Implement a stateful correlation rule in a SIEM. Trigger an alert if, for the same HostName and UserID within a 5-minute window, the following sequence is observed: 1) A process execution (Event ID 4688) with a command like `ls /home`; 2) A second process execution (Event ID 4688) with a command accessing a history file (e.g., `cat ~/.bash_history`); and 3) An outbound network connection to a new IP address (from Zeek conn.log) or a successful remote logon (Event ID 4624, Logon Type 3 or 10) from that host.",
              "Statistical: Develop a risk scoring model. Assign points for suspicious atomic events: +5 for history file access, +2 for home directory listing, +10 for a new external SSH connection. Sum these scores for each host over a rolling 10-minute window. If a host's cumulative score exceeds a statistically determined threshold (e.g., the 99th percentile of all host scores), generate an alert.",
              "Machine Learning: Use a sequence-based anomaly detection model, such as a Long Short-Term Memory (LSTM) network, trained on normal sequences of user and system activities (process creations, file accesses, network connections). An attack sequence, such as directory listing -> history file read -> outbound SSH, will have a low probability under the trained model and be flagged as a significant anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]