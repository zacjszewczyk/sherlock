[
  {
    "information_requirement": "Is an adversary achieving persistence by creating or modifying a macOS Login/Logout Hook?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037.002",
        "name": "Login Hook",
        "evidence": [
          {
            "description": "The `defaults` command-line utility is used to write a `LoginHook` or `LogoutHook` key to the `/Library/Preferences/com.apple.loginwindow.plist` file, or the file's content is directly modified to include these keys.",
            "data_sources": [
              "macOS process execution logs (e.g., ESF ES_EVENT_TYPE_NOTIFY_EXEC)",
              "osquery process_events",
              "File modification events for /Library/Preferences/com.apple.loginwindow.plist",
              "bash/zsh history logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.",
            "action": [
              "Search process execution logs for command lines matching the pattern `defaults write /Library/Preferences/com.apple.loginwindow LoginHook *` or `defaults write /Library/Preferences/com.apple.loginwindow LogoutHook *`. Alert on any match.",
              "Query file monitoring logs to collect the SHA256 hash of `/Library/Preferences/com.apple.loginwindow.plist` from all macOS endpoints daily. Calculate the frequency of each hash across the fleet. Flag any endpoint whose file hash has a prevalence of less than 1% or is not on an approved whitelist of known-good hashes.",
              "Collect a dataset of modification events for `/Library/Preferences/com.apple.loginwindow.plist`, labeling them as legitimate (e.g., performed by MDM software like Jamf) or malicious (simulated). Train a supervised classification model, such as a Random Forest, using features from the modifying process including process name, parent process name, user ID, and command-line arguments. Deploy the model to classify new modification events in real-time and alert on those classified as malicious with a high confidence score."
            ]
          },
          {
            "description": "A process spawned by the `loginwindow` process (parent PID corresponds to `loginwindow`) initiates an outbound network connection recorded in Zeek logs. The connection destination is either present on a threat intelligence feed, has a low reputation score, or represents a statistical anomaly for the source host.",
            "data_sources": [
              "macOS process execution logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, network egress points (gateways, firewalls), DNS resolvers, centralized log management system.",
            "action": [
              "Join macOS process execution logs with Zeek conn.log data on timestamp and source IP address. Filter for macOS processes where the parent process name is `loginwindow`. Alert if the destination IP (`id.resp_h`) from the corresponding Zeek log entry matches an IP on a real-time threat intelligence blocklist.",
              "For each macOS host, create a 30-day baseline of destination IPs and domains contacted by processes spawned by `loginwindow`. For each new connection, calculate its frequency within the host's baseline. Alert on any connection to a destination IP or domain that falls below the 1st percentile of frequency, indicating it is extremely rare for that host.",
              "For each host, create a time-series model, such as Prophet or SARIMA, of the total outbound bytes (`orig_bytes` in Zeek conn.log) per hour for traffic associated with processes spawned by `loginwindow`. The model should account for weekly and daily seasonality. Alert when the observed outbound data volume exceeds the model's predicted upper confidence interval, indicating a potential C2 heartbeat or data staging."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary leveraging a Login/Logout Hook to execute a script with elevated (root) privileges?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037.002",
        "name": "Login Hook",
        "evidence": [
          {
            "description": "A process event is logged showing a process executing with a User ID (UID) of 0 (root), where the parent process is `loginwindow`, and the process's executable path corresponds to the script path defined in the `LoginHook` or `LogoutHook` key within `/Library/Preferences/com.apple.loginwindow.plist`.",
            "data_sources": [
              "macOS process execution logs with user context",
              "osquery process_events table",
              "File content logs for /Library/Preferences/com.apple.loginwindow.plist",
              "macOS Unified Log for login context"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.",
            "action": [
              "Periodically query and cache the script path from the `LoginHook` and `LogoutHook` keys in `/Library/Preferences/com.apple.loginwindow.plist` across the fleet. Create a SIEM rule that triggers if a process execution event occurs with UID=0, parent process name is `loginwindow`, and the executable path matches the cached script path from that same host.",
              "Aggregate all process execution events across the macOS fleet over a 30-day period. Group by process name, UID, and parent process name, and calculate the prevalence of each combination. Alert on any process execution where UID=0 and the parent process is `loginwindow`, if that specific process name has not been observed in this context before or is present on less than 0.5% of the fleet.",
              "Model user sessions as sequences of events (file modifications, process executions). Train a sequence-based anomaly detection model, such as an LSTM autoencoder, on benign user sessions. Apply the model to new sessions and alert when a sequence has a high reconstruction error, particularly for sequences containing: 1) `defaults write ... LoginHook`, 2) modification of the target script, and 3) subsequent execution of that script as root (UID 0) by `loginwindow` after a new login event."
            ]
          },
          {
            "description": "A process spawned by `loginwindow` with root privileges executes commands indicative of defense evasion, credential access, or further persistence, such as modifying system configuration files, creating local user accounts, or disabling security software.",
            "data_sources": [
              "macOS process execution logs",
              "macOS file integrity monitoring logs",
              "macOS Unified Log",
              "bash/zsh history logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.",
            "action": [
              "Create a SIEM rule to detect a process execution event where the parent process is `loginwindow` and the command line contains suspicious strings such as `dscl . -create`, `spctl --master-disable`, `launchctl unload`, `chflags uchg`, or involves writing to sensitive files like `/etc/sudoers`, `/etc/passwd`, `/Library/LaunchDaemons/`, or `/private/etc/crontab`.",
              "For all processes spawned by `loginwindow`, calculate the Shannon entropy of the full command-line string. Establish a baseline distribution of these entropy scores for each host. Alert when a command's entropy score exceeds the 98th percentile of the historical baseline for that host, indicating potentially obfuscated or packed commands.",
              "Construct a process-event graph where nodes are processes and files, and edges represent interactions (e.g., 'executes', 'writes to', 'connects to'). Use a Graph Neural Network (GNN) to learn patterns of normal system behavior post-login. Flag any subgraph originating from a `loginwindow`-spawned process that is topologically anomalous or matches known malicious patterns, such as creating a user, modifying a system timer, and then making a rare external network connection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]