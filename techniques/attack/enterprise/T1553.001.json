[
  {
    "information_requirement": "Is an adversary bypassing macOS Gatekeeper to execute untrusted code?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1553.001",
        "name": "Gatekeeper Bypass",
        "evidence": [
          {
            "description": "A file downloaded to a macOS endpoint, observed in network traffic, has a hash that matches a known malware signature associated with Gatekeeper bypasses, OR a macOS endpoint initiates a connection to a network indicator (IP, domain) on a threat intelligence list for malware known to use this technique.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and web proxies.",
            "action": "1. (Symbolic) Continuously process Zeek files.log, hash all observed files, and join the results against a threat intelligence feed of known-malware hashes. Alert on any match. Simultaneously, join the destination IP from Zeek conn.log and the queried domain from Zeek dns.log against a C2 threat intelligence feed and alert on any match originating from a macOS host. 2. (Statistical) For all macOS hosts, calculate the 30-day moving average and standard deviation of connections to newly seen domains. Alert when a host makes connections to a new domain at a frequency greater than 3 standard deviations above its baseline, especially if occurring within minutes of a file download event. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features from Zeek logs (connection duration, byte counts, protocol, DNS query entropy, JA3/JA3S hash) to distinguish benign traffic from known C2 traffic. Score all new connections from macOS hosts to generate a risk rating and alert on high-risk connections."
          },
          {
            "description": "A process execution event on a macOS endpoint shows the use of the `xattr` command to remove the `com.apple.quarantine` attribute, or the use of utilities like `zip` or `codesign` in a command-line variation known to bypass Gatekeeper.",
            "data_sources": [
              "EDR process execution logs",
              "macOS Endpoint Security Framework events",
              "Sysmon for Linux/macOS Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, particularly developer and executive workstations.",
            "action": "1. (Symbolic) In your SIEM, create a rule to detect process executions where the command line contains `/usr/bin/xattr` and (`-d com.apple.quarantine` or `-c`) on files within user-writable directories like `/Users/*/Downloads/`. Also, create rules for `zip -y` creating an archive from a symlink and `codesign --remove-signature` on a quarantined file. 2. (Statistical) Establish a baseline of command-line arguments for `xattr`, `zip`, and `codesign`. Calculate the rarity of each full command-line execution across the enterprise using a method like TF-IDF. A command with a score in the 99th percentile is a high-confidence indicator of anomalous activity. 3. (Machine Learning) Implement a sequence analysis model (e.g., Hidden Markov Model) on endpoint process event logs. Train the model on benign user activity. Flag any anomalous sequence of events, such as `browser -> file write -> xattr -> process execution -> network connection`, as a potential Gatekeeper bypass."
          },
          {
            "description": "A sequence of events occurs on a macOS host within a short time window (<5 minutes): 1) a file is downloaded, 2) the `com.apple.quarantine` attribute is removed from the file, 3) the file is executed, and 4) the new process initiates an external network connection with anomalous characteristics (e.g., high entropy domain, non-standard port).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "EDR process execution logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points and all managed macOS endpoints.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers when a specific file path from a Zeek files.log event is subsequently seen in an EDR process execution log with `xattr -d com.apple.quarantine` and then as the executed process image, all originating from the same host IP within a 5-minute window. 2. (Statistical) For alerts generated by the symbolic rule, analyze the follow-on network connection. Calculate the entropy of the requested domain in Zeek dns.log and the outbound/inbound byte ratio from Zeek conn.log. Prioritize investigations where domain entropy exceeds 3.5 or the byte ratio is in the top 5th percentile of all host traffic. 3. (Machine Learning) For correlated event chains, apply time-series analysis to the subsequent network connections in Zeek conn.log. Use a Fast Fourier Transform (FFT) or autocorrelation to detect periodic, 'heartbeat' beaconing patterns indicative of C2 communication and alert on any detected periodic signal."
          },
          {
            "description": "A process execution event is logged for a file that possesses the `com.apple.quarantine` attribute, but the process's code signature is invalid, missing, or ad-hoc signed.",
            "data_sources": [
              "EDR process execution logs with code signature details",
              "macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints.",
            "action": "1. (Symbolic) Create a detection rule that triggers on any process execution event where the source file has the `com.apple.quarantine` extended attribute present and the associated code signing status is 'unsigned', 'invalid', or 'ad-hoc signed'. 2. (Statistical) Maintain a baseline of all developer certificate subjects and team IDs seen in your environment. Use frequency analysis to identify any new or rare (e.g., seen on < 3 hosts) certificate subject associated with an executed quarantined file. Calculate the ratio of unsigned to signed quarantined executions per host; a ratio greater than 3 standard deviations above the fleet-wide mean is anomalous. 3. (Machine Learning) Train a one-class SVM model on features of known-good, properly signed applications (e.g., certificate authority, developer name, certificate age, signing flags). Use this model to score all newly executed quarantined applications and identify outliers with suspicious signing characteristics."
          },
          {
            "description": "An unauthorized process (not `launchservicesd` or other known system processes) writes to or deletes the SQLite database at `~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2`, or modifies an application's `Info.plist` to set `LSFileQuarantineEnabled` to `false`.",
            "data_sources": [
              "File Integrity Monitoring (FIM) logs",
              "EDR file modification events",
              "macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User `Library` directories and Application bundle directories on all managed macOS endpoints.",
            "action": "1. (Symbolic) Deploy a FIM rule to alert on any write or delete operation to `*/com.apple.LaunchServices.QuarantineEventsV2` by any process except `launchservicesd`. Create a second rule to alert on any modification to an `Info.plist` file where the diff contains the string `<key>LSFileQuarantineEnabled</key><false/>`. 2. (Statistical) Baseline the set of processes that normally modify `Info.plist` files (e.g., `installer`, `system_profiler`). For any modification by a process not on the baseline, calculate a rarity score based on the inverse frequency of the process name across the environment. Alert on processes with high rarity scores (e.g., in the 99.9th percentile). 3. (Machine Learning) Apply an anomaly detection model (e.g., Isolation Forest) to a time-series of file modification events for the `QuarantineEventsV2` database. Train the model on historical access patterns to identify and alert on modifications that occur at anomalous times (e.g., outside of business hours) or at an anomalous frequency."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]