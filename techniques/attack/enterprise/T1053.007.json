[
  {
    "information_requirement": "Is the adversary executing malicious code using container orchestration jobs?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053.007",
        "name": "Container Orchestration Job",
        "evidence": [
          {
            "description": "A container orchestration job is created or executed where the container image hash, the command-line arguments, or the resulting outbound network connections have a direct match to a high-confidence threat intelligence feed of known-bad indicators.",
            "data_sources": [
              "Kubernetes API Server Audit Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Container Registries, Kubernetes Worker Nodes, Network Egress Points",
            "action": [
              "Symbolic: Query Zeek conn.log for connections where the source IP ('id.orig_h') is within a known container IP range and the destination IP ('id.resp_h') or domain (from Zeek dns.log) matches a list of known C2 indicators from a threat intelligence feed. Concurrently, query Windows Event ID 4688 logs from worker nodes for new processes where the parent process is a container runtime (e.g., 'containerd-shim-runc-v2') and the new process image hash matches a malicious hash from the feed.",
              "Statistical: For each new container job, calculate the Jaccard similarity index between the set of destination Fully Qualified Domain Names (FQDNs) contacted (from Zeek dns.log) and the historical baseline of FQDNs for that application's service profile. A Jaccard index score below a dynamically determined threshold (e.g., 10th percentile of historical scores for that profile) indicates an anomalous communication pattern warranting investigation.",
              "Machine Learning: Train a Random Forest classifier on labeled process execution events (Windows Event ID 4688), using features such as command-line length, Shannon entropy of the command line, presence of special characters, parent process name, and process image path. Use this model to classify new processes spawned by container jobs as malicious or benign based on a predetermined probability threshold."
            ]
          },
          {
            "description": "A process executed by a container orchestration job contains command-line arguments or process names that match regular expression patterns for known reconnaissance tools, C2 frameworks, or cryptocurrency miners.",
            "data_sources": [
              "Windows Event ID 4688",
              "Kubernetes API Server Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes, Kubernetes API Server",
            "action": [
              "Symbolic: Create a SIEM rule to search Windows Event ID 4688 on worker nodes for process command lines originating from container runtimes that match a curated list of regular expressions for reconnaissance tools (`ipconfig`, `hostname`, `net user`), C2 stagers (`powershell -enc`, `IEX`, `DownloadString`), and cryptominer process names (`kinsing`, `xmrig`, `kdevtmpfsi`).",
              "Statistical: For all container job processes, calculate the character-level Shannon entropy of the command lines (from Windows Event ID 4688). Establish a baseline entropy distribution for legitimate jobs per application profile. Flag any command line whose entropy exceeds the 99th percentile of its specific baseline as potentially obfuscated or packed, warranting further analysis.",
              "Machine Learning: Fine-tune a pre-trained Natural Language Processing (NLP) model (e.g., a BERT-based model) on a labeled dataset of shell commands. Use the model to classify the intent of commands executed by container jobs (from Windows Event ID 4688). Flag commands that the model classifies with high confidence as 'C2-Communication', 'Reconnaissance', or 'Payload-Execution'."
            ]
          },
          {
            "description": "Within a 5-minute window following the creation of a container orchestration job, the associated pod exhibits network or process behavior that deviates more than 3 standard deviations from its historical baseline, such as a spike in CPU usage, connections to a geographically rare destination, or execution of a previously unseen process.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Kubernetes API Server Audit Logs",
              "Node Performance Metrics"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes, Network Egress Points, Monitoring and Metrics Platform, Kubernetes API Server",
            "action": [
              "Symbolic: Correlate the creation of a new container job (via Kubernetes audit logs) with a subsequent connection from the resulting pod's IP (in Zeek conn.log) to an IP address on a 'suspicious ASN' or 'TOR exit node' blocklist within a 5-minute window.",
              "Statistical: Establish a 30-day baseline of CPU and memory utilization for each worker node. Monitor for spikes in resource usage that exceed 3 standard deviations above the mean immediately following the start of a new container job. Concurrently, analyze Zeek conn.log for connections from the new pod's IP to destination countries or Autonomous Systems (AS) not seen in the last 30 days for that application's service profile.",
              "Machine Learning: Apply a time-series anomaly detection model, such as an AutoRegressive Integrated Moving Average (ARIMA) or Long Short-Term Memory (LSTM) network, to the volume of outbound data ('orig_bytes' in Zeek conn.log) from pod IPs. Flag anomalies (e.g., a sharp, uncharacteristic spike in data transfer) that coincide with the execution window of a new container job."
            ]
          },
          {
            "description": "A process spawned by a container job accesses sensitive file paths (e.g., service account tokens, kubelet configurations) or initiates internal network connections that are inconsistent with its documented function or violate defined Kubernetes Network Policies.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes, Internal Network Segments, Kubernetes API Server",
            "action": [
              "Symbolic: Create a rule that triggers when a process from a container job (identified by parent process in Windows Event ID 4688) attempts to access a critical file object (logged in Windows Event ID 4663) such as 'kubelet.conf', 'admin.conf', or cloud provider credential files, where the source process name is not on a pre-defined allowlist for such access.",
              "Statistical: Build a baseline communication graph for each application (pod-to-pod, pod-to-service) from historical Zeek conn.log data. For each new job, count the number of new, unseen internal network connections (east-west traffic) established by its pod(s). A count of new graph edges exceeding the 95th percentile of the baseline for that application type is anomalous.",
              "Machine Learning: Apply a clustering algorithm like DBSCAN on features extracted from internal network flows (Zeek conn.log), such as destination port, protocol, and data volume, to group pods into behavioral profiles. Flag jobs whose pods are classified into a new, small cluster or are marked as noise/outliers, indicating they do not conform to established communication patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using container orchestration jobs?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053.007",
        "name": "Container Orchestration Job",
        "evidence": [
          {
            "description": "A container job executes on a periodic schedule and establishes outbound connections to domains, IPs, or JA3/JA4 hashes associated with known C2 servers, exhibiting low variance in connection interval timing (beaconing).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Kubernetes Worker Nodes, Internal DNS Servers",
            "action": [
              "Symbolic: Create a SIEM rule to search Zeek ssl.log for recurring connections originating from container IP ranges where the 'ja3' or 'ja4' hash matches a known malicious fingerprint from a threat intelligence feed. Correlate the source pod IP with recurring process creation events in Windows Event ID 4688 to identify the responsible job.",
              "Statistical: Analyze the inter-arrival time of connections from individual container IPs to the same external destination IP in Zeek conn.log. Calculate the standard deviation of these time intervals. A very low standard deviation (e.g., beaconing every 60 +/- 2 seconds) suggests automated, non-human activity. Flag connections where the standard deviation of inter-arrival time is below a set threshold (e.g., < 5 seconds).",
              "Machine Learning: Apply a time-series decomposition model (e.g., STL) to network beaconing data (e.g., connection counts per minute to a specific external IP). Isolate the periodic component of the time series. If a strong periodic signal is detected that does not correlate with any known legitimate job schedule, classify the activity as a potential persistence mechanism."
            ]
          },
          {
            "description": "A Kubernetes CronJob is created or modified with a schedule in the 99th percentile of frequency for the environment, or its job template specifies the execution of a command containing strings associated with reverse shells or C2 agents.",
            "data_sources": [
              "Kubernetes API Server Audit Logs",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Kubernetes Worker Nodes",
            "action": [
              "Symbolic: Query Kubernetes audit logs for the creation or modification of CronJob objects where the 'schedule' field matches high-frequency patterns (e.g., '*/1 * * * *', '*/5 * * * *') or the container command contains suspicious strings like 'curl', 'wget', 'nc', or 'bash -c'.",
              "Statistical: Analyze the frequency distribution of all CronJob schedules across the cluster. Flag any newly created or modified schedules that fall into the top percentile of frequency (e.g., 99th percentile) for manual review. Additionally, calculate the Levenshtein distance between new CronJob names and existing legitimate job names to detect potential typosquatting.",
              "Machine Learning: Train a classifier (e.g., Logistic Regression or SVM) on labeled CronJob configurations, using features such as schedule frequency, image registry source (e.g., public vs. private), command entropy, and the presence of privileged security context flags. Use the trained model to score all new and modified CronJobs for their likelihood of being a malicious persistence mechanism."
            ]
          },
          {
            "description": "A pattern of periodic network beaconing or process execution is observed originating from a container, but this activity cannot be attributed to any configured CronJob in the cluster's API server logs.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Kubernetes API Server Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes, Network Egress Points, Kubernetes API Server",
            "action": [
              "Symbolic: Identify a recurring network connection in Zeek conn.log (e.g., same source IP, destination IP, and destination port pair every 5 minutes). Query Kubernetes API Server audit logs to find a legitimate CronJob scheduled for that interval that can be attributed to the source pod. If no correlating job is found, flag the activity as suspicious and unattributed.",
              "Statistical: Apply autocorrelation to the time series of process creation events (from Windows Event ID 4688) on a worker node for a specific process name or hash. A high autocorrelation value at a regular lag (e.g., a peak at 300 seconds) indicates periodicity. Compare this detected periodicity against all known CronJob schedules; a mismatch is a strong anomaly indicator.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) on network flow 5-tuples from containers (from Zeek conn.log). Identify tight clusters that represent periodic activity. For each cluster, attempt to attribute it to a known application or configured CronJob. Unattributed clusters represent potentially malicious, hidden persistence mechanisms."
            ]
          },
          {
            "description": "A container job managed by a controller is observed with a restart count in the 99th percentile for the environment, and the pod associated with this job exhibits other suspicious behaviors like high-entropy command lines or connections to IOCs.",
            "data_sources": [
              "Kubernetes API Server Audit Logs",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Kubernetes Worker Nodes",
            "action": [
              "Symbolic: Query Kubernetes audit logs for Job objects created with 'spec.backoffLimit' set to a high number (e.g., > 10) and 'spec.template.spec.restartPolicy' set to 'OnFailure'. Cross-reference this with jobs whose pods are observed making connections to known malicious IPs in Zeek conn.log within minutes of starting.",
              "Statistical: Calculate the restart rate for all pods in the cluster over a rolling 1-hour window. A pod whose restart count is in the 99th percentile and is associated with a Job object is a strong anomaly. Correlate high restart rates with suspicious process executions (e.g., high command-line entropy) in Windows Event ID 4688 from that pod.",
              "Machine Learning: Train a decision tree model to predict pod failure based on features like image source, resource requests, and historical stability. Pods that are predicted by the model to be stable but exhibit a high restart rate are flagged as anomalies, indicating a potentially malicious job is being repeatedly terminated by security controls and automatically restarted by its controller."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using container orchestration jobs?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053.007",
        "name": "Container Orchestration Job",
        "evidence": [
          {
            "description": "A container job is created with high-privilege security context settings (`privileged: true`, `hostPID: true`, `hostNetwork: true`) using an image not on an approved allowlist, and its resulting pod executes a known privilege escalation tool or connects to a C2 server.",
            "data_sources": [
              "Kubernetes API Server Audit Logs",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Kubernetes Worker Nodes, Network Egress Points",
            "action": [
              "Symbolic: Create an alert that triggers when a Kubernetes audit log event shows the creation of a Job with `securityContext.privileged: true` or `hostPID: true` AND a subsequent process creation event (Windows Event ID 4688) from that pod's context shows the execution of a process with a hash matching a known privilege escalation tool or a command-line matching a known exploit.",
              "Statistical: Maintain a baseline of all container images that are approved to run with privileged settings. Flag any new, previously unseen image being run in a privileged job. Calculate the rarity of the image across the environment; an image run only once and in a privileged context is highly suspicious and warrants immediate investigation.",
              "Machine Learning: Use a graph-based anomaly detection algorithm on the Kubernetes object graph. A node representing a Job that is connected to nodes representing both a 'Privileged' security context and a 'Rare Image' (identified via statistical analysis) would be assigned a high anomaly score by the model, indicating a high-risk configuration."
            ]
          },
          {
            "description": "A process executed by a container job includes command-line arguments that match regular expressions for container escape techniques, such as interacting with 'docker.sock', using 'nsenter' to change namespaces, or mounting and accessing sensitive host paths.",
            "data_sources": [
              "Windows Event ID 4688",
              "Kubernetes API Server Audit Logs",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes, Kubernetes API Server",
            "action": [
              "Symbolic: Monitor Windows Event ID 4688 on worker nodes for process command lines originating from containers that contain strings indicative of container escape, such as `/var/run/docker.sock`, `nsenter -t 1`, or mounting `/proc/1/root`, using regular expression matching.",
              "Statistical: Profile the file access patterns of legitimate container jobs using file access audit logs (Windows Event ID 4663). For a new job, count the number of accesses to host paths mounted via `hostPath` that are outside the container's expected filesystem. If this count exceeds the 99th percentile for jobs of that application profile, flag it as anomalous.",
              "Machine Learning: Train an autoencoder on benign command-line sequences from container jobs (from Windows Event ID 4688). A command sequence from a new job that results in a high reconstruction error is considered anomalous and could detect novel or obfuscated breakout techniques that do not match simple regular expressions."
            ]
          },
          {
            "description": "A pod created by a container job initiates a network connection to a privileged service on the host node (e.g., Kubelet API on port 10250, etcd on port 2379) where such access is not explicitly allowed by a Kubernetes NetworkPolicy.",
            "data_sources": [
              "Zeek conn.log",
              "Kubernetes API Server Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes, Kubernetes Control Plane Network, Internal Administrative Networks",
            "action": [
              "Symbolic: Create a SIEM rule that triggers if Zeek conn.log shows a connection where 'id.orig_h' is a pod IP, 'id.resp_h' is its hosting node's IP, and 'id.resp_p' is a sensitive port (e.g., 10250 for Kubelet API, 2379 for etcd), and there is no corresponding allow rule in a Kubernetes NetworkPolicy for that pod.",
              "Statistical: Baseline normal pod-to-node-port communications from Zeek conn.log. For each pod, count the number of unique node ports it connects to. Flag any pod that connects to a number of ports exceeding 3 standard deviations from the mean for its application profile, especially if those ports are unassigned or known to be privileged.",
              "Machine Learning: Train a One-Class SVM on legitimate pod-to-host and pod-to-service communication patterns using features from Zeek conn.log (destination IP, destination port, protocol, connection duration). Any new communication flow that the model classifies as an outlier is flagged as a potential unauthorized access attempt from a compromised pod."
            ]
          },
          {
            "description": "Within a 5-minute window following the execution of a container job, a new local user account is created on the worker node, or a new high-privilege Kubernetes object (e.g., ClusterRoleBinding) is created, and this activity cannot be attributed to a legitimate administrative action.",
            "data_sources": [
              "Windows Event ID 4720",
              "Windows Event ID 4688",
              "Kubernetes API Server Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes Worker Nodes (Authentication Logs), Kubernetes API Server, Domain Controllers",
            "action": [
              "Symbolic: Correlate the execution of a process by a container job (Windows Event ID 4688) with the creation of a local user account on the same worker node within a 1-minute window (Windows Event ID 4720), where the source of the account creation is not a legitimate administrative tool or script.",
              "Statistical: Monitor the rate of creation for high-privilege Kubernetes objects (e.g., ClusterRoleBindings, privileged pods). A sudden spike in the creation rate that deviates from a moving average baseline by more than 3 standard deviations indicates a potential post-escalation event. Correlate the timing of the spike with recently executed container jobs.",
              "Machine Learning: Use a sequence analysis model (e.g., a Hidden Markov Model) trained on legitimate sequences of events (e.g., job create -> pod running -> pod success). Flag sequences as anomalous if they include unexpected state transitions, such as 'job create -> pod running -> new ClusterRoleBinding created', which indicates potential malicious follow-on activity after a privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]