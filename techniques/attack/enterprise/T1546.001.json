[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying file associations?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.001",
        "name": "Change Default File Association",
        "evidence": [
          {
            "description": "A registry modification event (Windows Event ID 4657) is recorded for a `shell\\open\\command` key where the process performing the modification or the new command value matches a known threat intelligence indicator.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations and Servers), Domain Controllers",
            "action": [
              "Symbolic Logic: Create a SIEM rule that triggers an alert when a Windows Event ID 4657 event occurs for any registry key path containing `\\shell\\open\\command` AND the `Process Name` or the `New Value` field matches a threat intelligence feed of known malicious file paths, command lines, or malware hashes.",
              "Statistical Method: For each `Process Name` modifying `\\shell\\open\\command` keys, calculate the historical frequency of this behavior. Alert on processes that have never or rarely (e.g., bottom 5th percentile) performed this action before. Similarly, analyze the `New Value` for statistical rarity across the enterprise; flag commands that are outliers.",
              "Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on features from Event ID 4657 (Process Name, target key path, parent process) and enriched data (process reputation, prevalence). Use the model to classify each registry modification event as benign or malicious. A high-confidence malicious classification triggers an alert."
            ]
          },
          {
            "description": "A registry modification event (Windows Event ID 4657) is recorded for a file extension commonly associated with documents or images (e.g., .txt, .jpg, .pdf, .rtf, .lnk) where the new handler command value points to a script interpreter or a known LOLBin.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations and Servers)",
            "action": [
              "Symbolic Logic: Develop a SIEM rule to detect Windows Event ID 4657 events where the target registry key path contains a common non-executable file extension handler (e.g., `txtfile`, `jpegfile`, `rtffile`) and the `New Value` field contains a known script interpreter (`powershell.exe`, `cscript.exe`, `wscript.exe`, `mshta.exe`) or a LOLBin (e.g., `rundll32.exe`, `regsvr32.exe`, `certutil.exe`).",
              "Statistical Method: Establish a baseline of valid handlers for each file extension across the enterprise. Calculate the entropy of the command string in the `New Value`. A sudden increase in entropy or a deviation from the established baseline (e.g., a handler that is not in the top 99% of common handlers for that extension) should be flagged. For example, a `.txt` file handler changing from `notepad.exe` to `powershell.exe -enc ...` will have a significantly higher entropy score.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means, DBSCAN) to group file association modifications based on features like file extension, new handler process, and command-line arguments. Investigate new, small, or sparse clusters as they may represent novel or targeted malicious activity distinct from common software installation behaviors."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows a common user application that opens files (e.g., explorer.exe, notepad.exe, winword.exe) spawning an anomalous child process, such as a script interpreter or an executable from a non-standard directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations and Servers)",
            "action": [
              "Symbolic Logic: Create a SIEM rule to alert on Windows Event ID 4688 events where the `Parent Process Name` is a common document handler (e.g., `explorer.exe`, `notepad.exe`, `mspaint.exe`, `winword.exe`) and the `New Process Name` is an unexpected executable (e.g., `powershell.exe`, `cmd.exe`, `wscript.exe`) or any process running from a suspicious path like `%APPDATA%`, `%TEMP%`, or `C:\\Users\\Public\\`.",
              "Statistical Method: For each parent process (e.g., `notepad.exe`), build a statistical baseline of its normal child processes and their command lines. Use a frequency analysis or z-score calculation to detect rare or new parent-child relationships. An alert could trigger if a new process relationship occurs and its frequency is more than 3 standard deviations below the mean for that parent.",
              "Machine Learning: Implement a time-series anomaly detection model on the count of specific anomalous parent-child process pairs (e.g., `explorer.exe` -> `powershell.exe`). A sudden spike in the frequency of these events across the enterprise, detected by the model, could indicate a widespread campaign leveraging a malicious file association."
            ]
          },
          {
            "description": "A process, spawned as a result of a file being opened, initiates a network connection (observed in Zeek conn.log) to a destination that is either on a threat intelligence blocklist or is statistically anomalous for the user or host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations and Servers), Network Egress Points (e.g., Firewalls, Gateways)",
            "action": [
              "Symbolic Logic: Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) on host IP and timestamp. Trigger an alert if a child process of a common file handler (e.g., `explorer.exe`, `acrord32.exe`) makes an outbound connection to an IP address, domain, or JA3/JA3S hash present in a threat intelligence feed.",
              "Statistical Method: For each process, establish a baseline of typical network behavior (e.g., destination ports, data volume). When a process is launched via a file association, compare its network activity to this baseline. Calculate the percentile rank of the destination IP's rarity (e.g., using a domain-ranking service) or the entropy of the DNS query. Flag connections to domains in the bottom 1st percentile of popularity or with abnormally high entropy.",
              "Machine Learning: Use an unsupervised learning model (e.g., an Autoencoder) trained on features from correlated process and network logs (process name, parent process, destination IP/port, bytes sent/received, protocol). The model learns to reconstruct 'normal' activity. Events with a high reconstruction error are flagged as anomalies, indicating a deviation like a text editor suddenly communicating with a C2 server."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by modifying file associations?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.001",
        "name": "Change Default File Association",
        "evidence": [
          {
            "description": "A registry modification event (Windows Event ID 4657) is recorded for a `shell\\open\\command` key where the new command value contains strings or patterns indicative of known privilege escalation techniques or tools.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Servers, Privileged Access Workstations (PAWs), Domain Controllers",
            "action": [
              "Symbolic Logic: Deploy a SIEM rule that monitors Windows Event ID 4657 for modifications to `...\\shell\\open\\command` keys. The rule should use regular expressions to scan the `New Value` field for command-line arguments and strings associated with privilege escalation tools (e.g., `invoke-mimi`, `PrintSpoofer.exe`, `JuicyPotato.exe`, specific `rundll32.exe` calls for bypasses).",
              "Statistical Method: Analyze the command-line arguments present in the `New Value` of `shell\\open\\command` modifications. Calculate the frequency of each argument and argument combination. Flag the appearance of extremely rare arguments (e.g., bottom 0.1% percentile) or combinations that have never been seen before.",
              "Machine Learning: Train a text classification model (e.g., using TF-IDF and a Support Vector Machine) on a labeled dataset of benign and malicious command lines. Use this model to classify the `New Value` of every `shell\\open\\command` registry write in real-time. A classification of 'malicious' with high confidence triggers a high-priority alert."
            ]
          },
          {
            "description": "A registry modification event (Windows Event ID 4657) is recorded for a file extension typically handled by system services or high-privilege applications (e.g., .log, .xml, .ini, .cfg), where the new command handler is an executable located in a user-writable path (e.g., C:\\Users\\*, C:\\ProgramData\\, %TEMP%).",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers, Domain Controllers, Systems running scheduled tasks",
            "action": [
              "Symbolic Logic: Create a watchlist of file extensions handled by privileged processes (.log, .xml, .ini, .cfg). Create a SIEM rule that alerts on Windows Event ID 4657 events for these extensions where the `New Value` in the `...\\shell\\open\\command` key contains a path to a user-writable directory (e.g., regex for `C:\\\\Users\\\\`, `%APPDATA%`, `%TEMP%`).",
              "Statistical Method: Profile the standard installation paths for all executable handlers across the environment. For any `shell\\open\\command` modification, calculate the statistical rarity of the executable's directory path. Flag modifications where the handler's path is a statistical outlier (e.g., not within the top 99.9% of common software paths), especially for system-related file types.",
              "Machine Learning: Use a clustering algorithm to group executables based on their path, signing status, and the file extensions they are associated with. An executable that is unsigned, located in a temporary directory, and is newly associated with a system file type would form a distinct, anomalous cluster warranting investigation."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows a process running with high integrity or as a privileged account (e.g., SYSTEM) spawning an unexpected child process (e.g., cmd.exe, powershell.exe) not consistent with its established baseline behavior, suggesting a privileged file handler was triggered.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Servers, Domain Controllers, Systems running services as SYSTEM",
            "action": [
              "Symbolic Logic: Create a SIEM rule to detect Windows Event ID 4688 events where the `Subject User Name` is `SYSTEM` or another privileged account, and the `Parent Process Name` is a system service (e.g., `services.exe`, `svchost.exe`, `lsass.exe`), but the `New Process Name` is an interactive shell or script interpreter (`cmd.exe`, `powershell.exe`, `wscript.exe`).",
              "Statistical Method: For each privileged parent process, establish a statistical baseline of its normal child processes. Alert when a new parent-child relationship is observed that is a statistical anomaly (e.g., a z-score > 3 on its frequency of occurrence). This can detect when a service is tricked into launching a malicious handler for the first time.",
              "Machine Learning: Develop a sequence-based anomaly detection model (e.g., using a Recurrent Neural Network - RNN) that learns the normal sequence of process calls for privileged system operations. If a privileged process opens a file and subsequently spawns a process that deviates from the learned normal sequences, flag it as a potential privilege escalation event."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) is recorded with a full elevated token (`Token Elevation Type == 0x2`) immediately following a user opening a common file type, where the elevated process is not the expected default handler, indicating a UAC bypass or social engineering to elevate a malicious payload.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations)",
            "action": [
              "Symbolic Logic: Write a SIEM correlation rule that looks for a low-privilege process (e.g., `explorer.exe` with a user's token) spawning a child process (Windows Event ID 4688) where `Token Elevation Type` is `%%1936` (Type 2 - Full) and the `New Process Name` is not on an allowlist of common applications that legitimately prompt for UAC.",
              "Statistical Method: Baseline the frequency of UAC elevation events (`Token Elevation Type` == `%%1936`) per user and per parent process. Alert on statistically significant spikes in elevation events originating from a single user or from an unusual parent process (e.g., `notepad.exe`). A user who suddenly has 10x their normal daily elevation events may be compromised.",
              "Machine Learning: Train a classification model to predict whether a UAC elevation request is legitimate. Features could include the parent process, the process being elevated, the file path, command-line arguments, and user context. The model can flag suspicious elevations, such as `rundll32.exe` being elevated by `explorer.exe` after a `.txt` file is opened, as highly anomalous."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]