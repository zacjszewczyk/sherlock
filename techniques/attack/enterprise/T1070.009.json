[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by clearing persistence artifacts? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.009",
        "name": "Clear Persistence",
        "evidence": [
          {
            "description": "A deletion event is recorded (file, registry key/value, or user account) where the target object's identifier (e.g., file path, registry path, account name) has an exact match against a curated threat intelligence feed of known malicious persistence artifacts.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Event ID 4726"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Endpoints of privileged users, User Workstations",
            "action": [
              "Implement a real-time query that joins deletion events (Windows Event IDs 4663, 4657, 4726) with a threat intelligence database. Trigger a high-severity alert if the `ObjectName` (from 4663/4657) or `TargetUserName` (from 4726) matches a known indicator of malicious persistence.",
              "For each user, create a statistical profile of deletion frequency against common persistence locations (e.g., HKLM\\...\\Run, C:\\Users\\...\\AppData\\..., C:\\ProgramData\\...). Calculate a 30-day rolling average and standard deviation. Generate an alert if a user's deletion count in these areas within a 24-hour window exceeds 3 standard deviations above their personal baseline or the baseline of their peer group (e.g., 'Developers').",
              "Develop a supervised classification model (e.g., Gradient Boosting) trained on labeled historical data. Features should include: process name performing the deletion, parent process name, user context (privilege level), object path entropy, time of day, and day of week. Use the model to assign a risk score to each deletion event, alerting on scores that exceed a pre-defined high-confidence threshold."
            ]
          },
          {
            "description": "A process creation event is observed for a common system utility (schtasks.exe, sc.exe, reg.exe) using command-line arguments that specify the deletion of a scheduled task, service, or registry key/value.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0/1 Servers, Endpoint devices of privileged users, DNS Servers, Internet Gateway",
            "action": [
              "Create a SIEM rule to detect process creation events (Windows Event ID 4688) where the process name is `schtasks.exe`, `sc.exe`, or `reg.exe` and the command line contains `/delete` or `delete`. Escalate the alert if the parent process is not a typical administrative tool (e.g., `powershell.exe`, `cmd.exe` spawned from `explorer.exe` or `mmc.exe`) or if the initiating user is not a member of an administrative group.",
              "For each host, compute a baseline for the execution frequency of `schtasks.exe`, `sc.exe`, and `reg.exe` with deletion arguments. Separately, calculate the character-level entropy of the full command line. Generate an alert if the execution frequency for a host exceeds the 95th percentile of its own history, or if the command-line entropy is statistically anomalous (very low or very high) compared to the established norm for that utility.",
              "Implement a sequence-to-sequence autoencoder (using LSTM or Transformer architecture) to model benign sequences of command-line activity per user session. Feed sequences of process creation events (Event ID 4688) into the model. An alert is triggered when the model's reconstruction error for a sequence containing a persistence deletion command is abnormally high, indicating the sequence deviates significantly from learned benign administrative patterns."
            ]
          },
          {
            "description": "Within a 5-minute window, a single user session (identified by Logon ID) or parent process is associated with deletion events affecting two or more distinct persistence mechanisms (e.g., Scheduled Tasks, Services, Registry Run Keys, User Accounts).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4701",
              "Windows Event ID 4657",
              "Windows Event ID 4726",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Active Directory Domain Controllers",
            "action": [
              "Using a stateful correlation rule, group deletion events (4701, 4697, 4657, 4726) by `Logon ID` (from security event headers) over a 5-minute sliding window. Generate a high-priority alert if a single `Logon ID` is linked to events from at least two different categories within one window.",
              "On a per-host basis, aggregate deletion events by `Process ID` in 5-minute intervals. For each interval, count the number of unique persistence categories targeted (e.g., 'Service', 'Task', 'Registry'). Establish an enterprise-wide baseline for this count. Trigger an alert when a single process on any host targets a number of categories exceeding the 99th percentile of this baseline.",
              "Apply a density-based clustering algorithm (DBSCAN) to a dataset of all persistence deletion events. Use features like `(timestamp, host_id, user_id, mechanism_type)`. Analyze the resulting clusters: a cluster containing a high diversity of `mechanism_type` values but a low diversity of `user_id` and `host_id` is a strong indicator of a coordinated cleanup operation and should be flagged for investigation."
            ]
          },
          {
            "description": "A persistence mechanism (e.g., user account, scheduled task, service) is deleted or disabled within 72 hours of its creation, and during its brief lifespan, the artifact was associated with other suspicious activity, such as network connections to known-bad domains or the execution of unsigned binaries.",
            "data_sources": [
              "Windows Event ID 4720",
              "Windows Event ID 4726",
              "Windows Event ID 4698",
              "Windows Event ID 4701",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication Servers (Domain Controllers), Internet Gateway, DNS Servers, Endpoint devices",
            "action": [
              "Create a rule that, upon creation of a persistence object (user via 4720, task via 4698), begins tracking its associated activity (processes, network connections). If any associated activity matches an IOC (e.g., a connection in `Zeek conn.log` to a C2 IP), tag the persistence object as 'high-risk'. A subsequent deletion event for that object (4726, 4701) within 72 hours triggers an immediate, critical alert.",
              "Calculate the empirical cumulative distribution function (ECDF) for the Time-To-Deletion (TTD) of all persistence artifacts (users, tasks, services) across the enterprise. Generate a medium-severity alert for any artifact deleted with a TTD below the 5th percentile. Increase severity to high if the associated user or host also exhibited other statistically anomalous behaviors during the artifact's lifespan.",
              "Construct a dynamic graph where nodes are entities (users, processes, hosts) and edges represent interactions (e.g., 'user_A created process_B'). Use a graph neural network (GNN) to learn embeddings for subgraphs representing the lifecycle of persistence mechanisms. Flag subgraphs that exhibit the pattern 'creation -> anomalous connections -> rapid deletion' as anomalous, as they will have significantly different embeddings from benign administrative lifecycles."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]