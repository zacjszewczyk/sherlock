[
  {
    "information_requirement": "Is the adversary using junk code insertion to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.016",
        "name": "Junk Code Insertion",
        "evidence": [
          {
            "description": "The cryptographic hash of an observed file matches a known-malicious hash from a threat intelligence source, where the malware family is tagged with 'Junk Code Insertion' or 'T1027.016'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log",
              "Windows Event ID 1116"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, User Workstations, Email Gateways, File Servers",
            "action": [
              "Symbolic Logic: Continuously ingest threat intelligence feeds into a SIEM or TIP. Create a watchlist of file hashes where the 'technique' or 'tag' field contains 'T1027.016' or 'Junk Code'. Create a real-time rule to query all new file hashes from Windows Event ID 4688 (Process Creation) and Zeek files.log against this watchlist. Generate a high-severity alert upon a match.",
              "Statistical Method: For all newly observed executable files by hash, calculate their prevalence across the environment. If a file hash is seen on a very small number of endpoints (e.g., < 5, or below the 1st percentile of prevalence) AND it is not signed by a trusted publisher, flag it for automated sandboxing and static analysis.",
              "Machine Learning: Train a binary classification model (e.g., XGBoost, Random Forest) to predict if a file is malicious. Features should include: (1) internal prevalence (count of hosts with the hash), (2) file metadata from external sources like VirusTotal (e.g., number of positive hits, first seen timestamp, associated tags like 'packer', 'upx', 'junkcode'), and (3) file path entropy. Use the model to score all new executables and alert on those with a high probability score (e.g., > 0.90)."
            ]
          },
          {
            "description": "A process creation event shows a process name or command-line arguments that contain strings associated with known software packers or obfuscators (e.g., 'upx.exe', 'themida.exe', '--upx', '-o').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Developer Endpoints, Staging Servers",
            "action": [
              "Symbolic Logic: Create a detection rule that uses regular expressions to scan the 'ProcessName' and 'CommandLine' fields in Windows Event ID 4688 for a list of known packer and obfuscator names and arguments (e.g., `/(upx|themida|mpress|vmprotect)/i`). Generate an alert on any match, to be triaged for legitimate developer activity versus malicious use.",
              "Statistical Method: For all process creation events (Windows Event ID 4688), calculate the Shannon entropy of the command-line argument string. Establish a baseline entropy value for legitimate processes in your environment. Generate an alert when a process exhibits a command-line entropy that significantly deviates from its own baseline or exceeds a high global percentile (e.g., 99th percentile), as this often indicates obfuscation or encoding.",
              "Machine Learning: Periodically, extract features from command lines in Windows Event ID 4688 (length, character frequency, entropy, n-gram distribution). Use a density-based clustering algorithm (e.g., DBSCAN or OPTICS) to group similar command structures. Label large, stable clusters as known-good. Investigate small, newly formed, or outlier clusters as potentially malicious or anomalous activity."
            ]
          },
          {
            "description": "A legitimate Windows system process (e.g., svchost.exe, rundll32.exe) is spawned by a non-system, user-land parent process and subsequently initiates an outbound network connection to a low-reputation or newly observed domain/IP.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, User Workstations, Internal Web Servers, Application Servers",
            "action": [
              "Symbolic Logic: Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log or Windows Event ID 5156) by process ID and timestamp. Trigger an alert if a process (e.g., 'svchost.exe', 'rundll32.exe') whose parent process is not 'services.exe' or is located outside `C:\\Windows\\System32` initiates an outbound network connection to an IP on a C2 threat intelligence list within 60 seconds of its creation.",
              "Statistical Method: For each parent-child process pair (e.g., 'winword.exe' -> 'rundll32.exe'), build a baseline of the parent process file path. Flag any execution where the parent process path is statistically rare (e.g., in the bottom 1% of observed paths for that pair) or originates from a high-risk directory like `C:\\Users\\*\\Downloads\\` or `C:\\ProgramData\\`.",
              "Machine Learning: Train a sequence-based anomaly detection model (e.g., an LSTM Autoencoder) on event chains from a single host. A typical sequence might be `[ParentProcessCreate, ChildProcessCreate, NetworkConnect, FileWrite]`. The model learns normal sequences of system behavior. Feed real-time event chains into the model and alert when the reconstruction error is high, indicating a sequence that deviates significantly from learned benign patterns."
            ]
          },
          {
            "description": "A process with a filename that mimics a legitimate system binary (e.g., 'svchost.exe', 'lsass.exe') is executed from a user-writable or non-standard file path (e.g., `C:\\ProgramData`, `C:\\Users\\Public`, `%APPDATA%`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Public-facing Servers, Shared Network Drives",
            "action": [
              "Symbolic Logic: Maintain an authoritative allowlist mapping critical system process names to their legitimate, full file paths (e.g., `{'svchost.exe': 'C:\\\\Windows\\\\System32\\\\svchost.exe'}`). Create a rule that generates a high-severity alert whenever a process name on this list is executed from a path not on the allowlist.",
              "Statistical Method: For each process execution event (Windows Event ID 4688), calculate the Levenshtein distance between its process name and a list of known critical system binaries. Flag any process with a distance of 1 or 2 (e.g., 'svch0st.exe', 'lsas.exe'). Additionally, for all process names, profile the frequency of their execution paths. Alert on any execution from a path that falls in the bottom percentile (e.g., <1%) for that process name.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression or Random Forest) to distinguish legitimate from masqueraded process executions. Features should include: (1) file path (e.g., one-hot encoded parent directory), (2) process name string length, (3) parent process name, (4) user context (SYSTEM vs. user), and (5) a boolean indicating if the process name exists in the `System32` directory. Use the trained model to score all new process executions in real time."
            ]
          },
          {
            "description": "An executable file, observed for the first time in the environment, initiates network connections that exhibit C2 beaconing patterns (e.g., regular intervals, consistent size) or other anomalies like DNS requests for algorithmically generated domains (DGA).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, All Endpoints and Servers",
            "action": [
              "Symbolic Logic: Correlate process creation events (Windows Event ID 4688) with DNS logs (Zeek dns.log). For processes associated with newly observed file hashes, check their DNS queries against a threat feed of known C2 domains and DGA-related domains. Alert on any match.",
              "Statistical Method: For each source-destination IP pair in Zeek conn.log, group connections into sessions and calculate the standard deviation of the time delta between consecutive connections. A very low standard deviation (e.g., < 2 seconds) over a session with at least 5 connections is a strong indicator of automated beaconing. Enrich with the process information from the endpoint to identify the responsible binary.",
              "Machine Learning: For each internal host, use a time-series forecasting model (e.g., Prophet or SARIMA) on the total bytes of outbound traffic, aggregated per minute. Compare the model's forecast with the actual traffic. A large, periodic spike in the residual error (actual - predicted) that isn't correlated with known user activity can indicate the start of a C2 beaconing process initiated by malware."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]