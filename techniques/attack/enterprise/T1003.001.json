[
  {
    "information_requirement": "Has the adversary attempted to access credentials from LSASS memory?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1003.001",
        "name": "LSASS Memory",
        "evidence": [
          {
            "description": "A process creation event is observed where the process's file hash (SHA256) is present in a threat intelligence feed of known credential dumping tools or malicious Security Support Providers (SSPs).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers, Tier 0/1 Servers",
            "action": [
              "Symbolic Logic: Query process creation logs (Windows Event ID 4688) for any process where the file hash matches a list of known malicious hashes associated with tools like Mimikatz, procdump, or malicious SSPs. An exact match is a high-confidence alert.",
              "Statistical Method: Calculate the prevalence of all executed file hashes across the enterprise over a 30-day rolling window. Identify and score hashes that are extremely rare (e.g., seen on < 0.1% of endpoints or on only one machine). A process accessing LSASS with a rare hash should be highly prioritized for investigation.",
              "Machine Learning: Deploy a supervised machine learning classifier (e.g., Random Forest) trained on process metadata (file path, parent process, command line, entropy of process name) and hash reputation scores. The model will classify each new process execution as benign or suspicious, with a high probability score for 'suspicious' triggering an alert."
            ]
          },
          {
            "description": "A process is executed with command-line arguments containing patterns or keywords strongly associated with LSASS memory dumping techniques.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers, Tier 0/1 Servers",
            "action": [
              "Symbolic Logic: Create a detection rule using regular expressions to search process command-line arguments (from Windows Event ID 4688) for strings indicative of LSASS dumping. Patterns include 'procdump.exe -ma lsass.exe', 'rundll32.exe comsvcs.dll, MiniDump', 'sekurlsa::logonPasswords', 'sekurlsa::minidump', and 'Invoke-Mimikatz'.",
              "Statistical Method: For all command-line arguments, calculate the Shannon entropy of the string. Establish a baseline entropy score for common processes. A command line with an unusually high entropy score (e.g., above the 99th percentile), especially when associated with processes like powershell.exe or rundll32.exe, may indicate obfuscated commands.",
              "Machine Learning: Utilize a Natural Language Processing (NLP) model, such as a transformer-based classifier, trained on a large corpus of benign and malicious command-line arguments. The model analyzes the structure and semantics of new command lines to predict the probability that they are malicious, providing a more robust detection than simple keyword matching."
            ]
          },
          {
            "description": "A registry modification event is observed that adds a new entry to the LSA Security Packages list, where the associated DLL is unsigned, has a low prevalence, or is located in a non-standard directory.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Certificate Services (AD CS) Servers, Privileged Access Workstations",
            "action": [
              "Symbolic Logic: Monitor registry modification events (Windows Event ID 4657) for changes to the keys 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' and 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages'. Alert on any modification that adds a DLL name not present on an approved list of standard SSPs (e.g., kerberos.dll, msv1_0.dll, schannel.dll).",
              "Statistical Method: For any new DLL added to the LSA Security Packages, analyze its file path. Calculate the frequency of file paths for all SSPs across the environment. An alert should be generated if a new SSP is loaded from a statistically anomalous path (e.g., C:\\Users\\, C:\\Temp\\, C:\\Windows\\Temp\\), as determined by path frequency analysis.",
              "Machine Learning: Develop a time-series anomaly detection model on the count of modifications to the LSA registry keys per host. A sudden spike in modification activity on a host, departing from its historical baseline, could indicate an adversary attempting to install or test an SSP. This can be correlated with the process that made the change to increase confidence."
            ]
          },
          {
            "description": "A process requests access to the LSASS process memory with high-risk permissions (e.g., PROCESS_VM_READ), where the source process is not on an approved list or exhibits anomalous parent-child relationships.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers, Tier 0/1 Servers",
            "action": [
              "Symbolic Logic: Configure SACL on lsass.exe to log access attempts (generates Windows Event ID 4656/4663). Create a rule to alert when a process not on a pre-defined allow-list (e.g., wininit.exe, services.exe, svchost.exe) requests access to lsass.exe with specific high-risk access masks like '0x1010' (PROCESS_VM_READ) or '0x1F0FFF' (PROCESS_ALL_ACCESS).",
              "Statistical Method: For each host, build a statistical baseline of which processes normally access lsass.exe. Use a frequency count to track (Source Process, Parent Process) tuples that access LSASS. Alert on any access from a tuple that is rare or has never been seen before (a frequency of 1 after a learning period). Use a Z-score on the daily count of LSASS access events per process to find anomalous spikes.",
              "Machine Learning: Use a graph-based anomaly detection algorithm. Model process relationships as a graph where nodes are processes and edges represent inter-process access. Train the model on normal activity. An alert is triggered when a new, anomalous edge is created, such as 'powershell.exe -> accesses -> lsass.exe', which deviates from the learned graph structure."
            ]
          },
          {
            "description": "A temporal correlation is observed where a single process ID (PID) accesses LSASS memory and, within a short time window, initiates an outbound network connection to a remote host.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Network Egress Points (Firewalls, Proxies)",
            "action": [
              "Symbolic Logic: Create a stateful detection rule that triggers when a specific Process ID is seen in an LSASS access event (Windows Event ID 4663) and is subsequently seen as the source of an outbound network connection (Zeek conn.log) within a 60-second window. The rule's confidence increases if the destination IP is external and not on an allow-list.",
              "Statistical Method: For processes that access LSASS, analyze the destination ports of their subsequent outbound connections from Zeek conn.log. Establish a baseline of common destination ports for legitimate processes. Alert if a process accesses LSASS and then connects to a statistically rare port (e.g., a port not in the top 95th percentile of frequently used ports for that process).",
              "Machine Learning: Implement a time-series correlation model that ingests two streams of events: LSASS access and network connections, keyed by Process ID and hostname. The model learns the typical latency and probability of a network connection following an LSASS access for benign processes. An alert is generated when a sequence of events significantly deviates from this learned temporal pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]