[
  {
    "information_requirement": "Has the adversary attempted to access credentials from LSASS memory?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1003.001",
        "name": "LSASS Memory",
        "evidence": [
          {
            "description": "A process creation event is observed where the created process's file hash (e.g., SHA256) is present on a threat intelligence feed of known credential dumping tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers, Tier 0/1 Servers",
            "action": [
              "Using process creation logs (Windows Event ID 4688, Sysmon Event ID 1), search for any execution where the process's file hash matches an allow-list of known malicious hashes associated with tools like Mimikatz, procdump, or malicious SSPs. An exact match is a high-confidence alert.",
              "From process creation logs, calculate the prevalence of all executed file hashes across the enterprise over a 30-day rolling window. Generate an alert for processes accessing lsass.exe where the process hash is statistically rare (e.g., seen on < 0.1% of endpoints or on a single host).",
              "Deploy a supervised machine learning classifier (e.g., Random Forest, Gradient Boosting) trained on process metadata (file path, parent process, command line, entropy of process name, hash reputation). The model classifies each new process execution as benign or malicious, with a high probability score for 'malicious' triggering an alert for analyst review."
            ]
          },
          {
            "description": "A process is created with command-line arguments containing strings, patterns, or keywords strongly associated with LSASS memory dumping, such as 'sekurlsa::logonPasswords' or 'comsvcs.dll MiniDump'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers, Tier 0/1 Servers",
            "action": [
              "Create a detection rule using regular expressions to search process command-line arguments (from Windows Event ID 4688 or Sysmon Event ID 1) for strings indicative of LSASS dumping. Patterns must include 'procdump.exe -ma lsass.exe', 'rundll32.exe comsvcs.dll, MiniDump', 'sekurlsa::logonPasswords', 'sekurlsa::minidump', and 'Invoke-Mimikatz'.",
              "For all process creation events, calculate the Shannon entropy of the command-line argument string. Establish a baseline entropy score for common processes (e.g., svchost.exe, powershell.exe). Alert on command lines with an entropy score exceeding a dynamic threshold (e.g., above the 99th percentile for that specific process name), which may indicate obfuscated or packed commands.",
              "Utilize a pre-trained Natural Language Processing (NLP) model, such as a transformer-based classifier, fine-tuned on a corpus of benign and malicious command-line arguments. The model analyzes the structure and semantics of new command lines to predict the probability that they are malicious, providing more robust detection than simple keyword matching alone."
            ]
          },
          {
            "description": "A registry modification event is observed that adds or modifies a DLL in the LSA Security Packages list, where the associated DLL is unsigned, has a low prevalence across the enterprise, or is located in a non-standard directory.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Certificate Services (AD CS) Servers, Privileged Access Workstations",
            "action": [
              "Monitor registry modification events (Sysmon Event ID 13, Windows Event ID 4657) for changes to the keys 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' and 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages'. Alert on any modification that adds a DLL name not present on a pre-defined list of approved, standard SSPs (e.g., kerberos.dll, msv1_0.dll, schannel.dll, wdigest.dll, tspkg.dll, pku2u.dll).",
              "For any new DLL added to the LSA Security Packages, analyze its file path. Calculate the frequency of file paths for all SSPs across the environment to establish a baseline. Generate an alert if a new SSP is loaded from a statistically anomalous path (e.g., C:\\Users\\, C:\\Temp\\, C:\\Windows\\Temp\\), as determined by path frequency analysis (e.g., path seen on <1% of hosts).",
              "Develop a time-series anomaly detection model (e.g., ARIMA or LSTM) on the count of modifications to the LSA registry keys per host, per day. A sudden spike in modification activity on a host that departs from its historical baseline could indicate an adversary attempting to install or test an SSP. Correlate this with the source process making the change to increase confidence."
            ]
          },
          {
            "description": "A process not on a pre-defined allow-list requests access to the LSASS process memory with high-risk permissions, such as PROCESS_VM_READ or PROCESS_ALL_ACCESS.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4656",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers, Tier 0/1 Servers",
            "action": [
              "Using process access logs (Sysmon Event ID 10 is preferred; otherwise, configure SACL on lsass.exe to generate Windows Event ID 4656/4663), create a rule to alert when a SourceImage (process) not on a pre-defined allow-list (e.g., wininit.exe, services.exe) accesses the TargetImage lsass.exe. The rule should specifically look for high-risk access masks like '0x1010' or '0x1F0FFF'.",
              "For each host, build a statistical baseline of which processes normally access lsass.exe from Sysmon Event ID 10 logs. Use a frequency count to track (SourceImage, ParentImage) tuples that access LSASS. Alert on any access from a tuple that is statistically rare or has never been seen before (a frequency of 1 after a 30-day learning period). Additionally, use a Z-score on the daily count of LSASS access events per SourceImage to find anomalous spikes.",
              "Use a graph-based anomaly detection algorithm. Model process activity as a graph where nodes are processes (by image path) and edges represent inter-process access events (e.g., 'powershell.exe' -> 'lsass.exe'). Train the model on normal activity across the enterprise. An alert is triggered when a new, anomalous edge is created that deviates from the learned graph structure, indicating a suspicious process interaction."
            ]
          },
          {
            "description": "A single process is observed accessing LSASS process memory and, within a short time window (e.g., 60 seconds), initiating an outbound network connection to an external or non-standard internal IP address.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Network Egress Points (Firewalls, Proxies)",
            "action": [
              "Create a stateful detection rule that correlates Sysmon Event ID 10 (ProcessAccess to lsass.exe) with Sysmon Event ID 3 (NetworkConnect) from the same ProcessGuid within a 60-second window. Enrich the destination IP from the network event with Zeek conn.log data. Alert if the destination IP is external and not on an allow-list of known-good domains or IPs.",
              "For processes that access LSASS, join with network connection logs (Sysmon Event ID 3, Zeek conn.log) and analyze the destination ports. Establish a baseline of common destination ports for legitimate processes that access LSASS. Alert if a process accesses LSASS and then connects to a statistically rare port (e.g., a port not in the top 95th percentile of frequently used ports for that process image).",
              "Implement a sequence analysis model (e.g., using Hidden Markov Models or LSTMs) that ingests two streams of events keyed by ProcessGuid: LSASS access events and network connection events. The model learns the typical latency, probability, and features of a network connection following an LSASS access for benign processes. An alert is generated when an observed sequence of events has a very low probability under the learned model."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]