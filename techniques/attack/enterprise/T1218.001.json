[
  {
    "information_requirement": "Is the adversary evading defenses using compiled HTML files?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.001",
        "name": "Compiled HTML File",
        "evidence": [
          {
            "description": "Within a 5-minute window, a CHM file with a known malicious hash is transferred over the network or accessed on a host, and a child process of the corresponding hh.exe execution communicates with a known malicious C2 domain or IP address.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Email gateway, Web proxy/gateway, DNS servers, Network Security Monitoring (NSM) sensor, Threat Intelligence Platform",
            "action": [
              "From file transfer logs (Zeek files.log) and file access logs (Windows Event ID 4663), calculate the hash of any observed .chm file. Compare this hash against a threat intelligence feed of known malicious file hashes. Concurrently, monitor process creation events (Windows Event ID 4688) where the parent process is hh.exe. For any child process, inspect associated network connections (Zeek conn.log) and DNS queries (Zeek dns.log). Match destination IPs and domains against a threat intelligence feed of known C2 infrastructure. Generate a high-severity alert if both a malicious hash is observed and a subsequent connection to known C2 infrastructure occurs from the process chain.",
              "For any network connection originating from a child process of hh.exe, calculate the rarity of the destination IP, domain, and ASN against a 30-day baseline. Flag any connection where the destination domain was registered within the last 30 days, the destination IP's reputation score is in the bottom 5th percentile, or the destination ASN is rare for the organization. Additionally, calculate the Shannon entropy of the queried domain name in associated DNS logs; a score greater than 3.5 is indicative of DGA and should be flagged.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) to classify hh.exe process chains as malicious or benign. Engineer features from process (Windows Event ID 4688) and network (Zeek conn.log, dns.log) logs, including: process lineage depth, child process name rarity, destination port number, destination IP reputation, domain age, domain entropy, bytes sent/received, and connection duration. A classification of 'malicious' with high confidence should generate an alert for analyst review."
            ]
          },
          {
            "description": "Execution of hh.exe where the command-line arguments (Process Command Line) contain patterns indicative of embedded script execution, remote resource fetching, or obfuscation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)",
            "action": [
              "Using process creation logs (Windows Event ID 4688), create a detection rule that searches for 'hh.exe' as the process name. Apply a regular expression to the 'Process Command Line' field to detect suspicious patterns, such as 'ms-its:', 'mk:@MSITStore:', embedded script handlers (e.g., 'javascript:', 'vbscript:'), or URLs containing http/https. Generate an alert on any match.",
              "For all hh.exe executions logged in Windows Event ID 4688, calculate the Shannon entropy of the entire command-line argument string. Establish a baseline of entropy scores for legitimate hh.exe calls by analyzing activity over a 30-day period. Generate an alert for any execution where the command-line entropy exceeds the 95th percentile of the established baseline, indicating a high likelihood of obfuscation or an unusually complex command.",
              "Deploy an unsupervised anomaly detection model, such as an Isolation Forest, trained on features extracted from benign hh.exe command-line arguments. Key features should include: command-line length, argument count, character frequency distribution (alphanumeric vs. special characters), and the presence/count of specific keywords ('ms-its', 'http'). The model will isolate command-line structures that are statistically rare outliers, flagging them as anomalous for investigation."
            ]
          },
          {
            "description": "The HTML Help process (hh.exe) spawns a child process that is not typically associated with help file viewing, such as a command shell, scripting engine, or other Living-Off-the-Land Binary (LOLBAS).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Critical servers, Log aggregation platform (SIEM)",
            "action": [
              "From process creation logs (Windows Event ID 4688), create a detection rule to find events where the 'Parent Process Name' is 'hh.exe'. Match the 'New Process Name' against a static denylist of suspicious child processes, including 'cmd.exe', 'powershell.exe', 'pwsh.exe', 'wscript.exe', 'cscript.exe', 'rundll32.exe', 'mshta.exe', 'bitsadmin.exe', and 'certutil.exe'. Generate a high-severity alert on any match.",
              "Over a 30-day rolling window, build a frequency table of all parent-child process relationships where the parent is 'hh.exe'. Any child process that is not on a pre-defined allowlist of known-good help viewers or system processes and that has been observed on fewer than 1% of endpoints (or a static count, e.g., < 5 hosts) should be flagged as a rare and suspicious process chain.",
              "Model all parent-child process relationships across the enterprise as a directed graph. Apply a community detection algorithm (e.g., Louvain Modularity) to this graph to identify clusters of normal process activity. A process chain originating from 'hh.exe' that does not belong to a large, well-established community (e.g., a chain like 'hh.exe -> powershell.exe -> whoami.exe') will be identified as a structural anomaly and should be alerted for immediate investigation."
            ]
          },
          {
            "description": "Within a 2-minute window, the execution of hh.exe is followed by the creation of a new script or executable file in a temporary or user-writable directory, which is then subsequently executed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, File servers, Application servers hosting user-writable directories",
            "action": [
              "Create a stateful correlation rule that triggers when a process creation event for 'hh.exe' (Windows Event ID 4688) is followed within a 120-second window by a file creation/write event (Windows Event ID 4663) for a file with a high-risk extension (.exe, .dll, .ps1, .vbs, .js, .bat) in a user-writable directory (e.g., %APPDATA%, %TEMP%, C:\\Users\\*\\Downloads). If this sequence is then followed by a process creation event (4688) for that newly created file, generate a critical-severity alert.",
              "For each process execution, define a 'suspicious file drop score' as the count of executable or script files it creates in temporary/user-writable directories within the first 5 minutes of its execution. Establish a baseline for the 'hh.exe' process, which is expected to be zero. Any instance of 'hh.exe' with a score greater than zero is a significant statistical anomaly and should be immediately investigated.",
              "Implement a time-series anomaly detection model (e.g., LSTM autoencoder) on event sequences from individual hosts. Treat process creations and file creations as event types with associated metadata (process name, file path, extension). Train the model on normal sequences of user and system activity. A sequence of 'hh.exe execution -> file write (.exe in %TEMP%) -> new process execution' within a short temporal window will cause a large reconstruction error, flagging the sequence as a significant deviation from learned normal behavior patterns."
            ]
          },
          {
            "description": "A Compiled HTML file (.chm) is executed from a non-standard or high-risk file path, such as an email client's attachment cache, a web browser's download folder, or a temporary folder used by archiving utilities.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (specifically profile directories), Email client cache directories, Web browser download directories",
            "action": [
              "From process creation logs (Windows Event ID 4688), identify all 'hh.exe' executions. Use a regular expression on the command line to extract the full file path of the .chm file being executed. Match this path against a denylist of high-risk directory patterns, including '\\Downloads', '\\AppData\\Local\\Temp', '\\Temporary Internet Files\\', '\\Local\\Microsoft\\Windows\\INetCache\\', and '\\AppData\\Local\\Microsoft\\Outlook\\'. Generate an alert on any match.",
              "Aggregate all unique .chm execution paths from 'hh.exe' command lines across the enterprise over a 30-day period. For each unique file path, calculate its execution frequency. Flag any path that is not part of a standard application or Windows help directory (e.g., not in C:\\Windows\\Help or C:\\Program Files\\) and that falls below a rarity threshold (e.g., seen on fewer than 1% of endpoints where .chm files are used). This identifies outliers that are not part of legitimate software installations.",
              "Train a Naive Bayes classifier on file paths of known benign .chm files associated with legitimate software. Engineer features from the path string, such as: path depth, presence of keywords ('Temp', 'Download', 'Cache'), whether the path is in a standard program directory vs. a user profile directory, and character ratios. The model can then classify new .chm execution paths as 'benign-like' or 'suspicious-like', flagging the latter for analyst review as potentially user-delivered malicious files."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]