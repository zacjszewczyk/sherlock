[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using fileless storage? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.011",
        "name": "Fileless Storage",
        "evidence": [
          {
            "description": "The content of a newly created or modified Windows Registry value, WMI object, or Event Log entry matches a known malicious signature (YARA rule or string literal) associated with fileless malware payloads or persistence scripts.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 5861",
              "Windows PowerShell Event ID 4103",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM",
            "action": [
              "Symbolic: Scan the `ScriptBlockText` field from PowerShell Event ID 4103 and the `NewValue` field from Registry Event ID 4657 against a library of YARA rules designed to detect obfuscated payloads, droppers, and known fileless malware families.",
              "Statistical: Extract all Base64-encoded strings from PowerShell script blocks (Event ID 4103/4104) and registry values (Event ID 4657). Calculate the Shannon entropy of the decoded content. Establish a baseline entropy for legitimate encoded data (e.g., configuration data). Alert when the entropy of a decoded string exceeds the 99th percentile of the baseline.",
              "Machine Learning: Train a logistic regression model to classify PowerShell script blocks (Event ID 4103) as benign or malicious. Engineer features such as script length, Shannon entropy, ratio of non-alphanumeric characters, frequency of suspicious keywords (e.g., 'IEX', 'Invoke-Expression', 'FromBase64String'), and the presence of specific API calls. Deploy the model to score new scripts in real-time."
            ]
          },
          {
            "description": "A Linux host, known to host applications that could be exploited for fileless execution (e.g., web servers), initiates network traffic to destinations (IPs, domains) or with connection characteristics (JA3/JA4 hash) matching threat intelligence for malware families known to use shared memory (`/dev/shm`) for payloads.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments",
            "action": [
              "Symbolic: Continuously correlate destination IPs from `Zeek conn.log` and queried domains from `Zeek dns.log` against threat intelligence feeds of known C2 servers. Additionally, match `ja3` and `ja4` hashes from `Zeek ssl.log` against lists associated with malware like Muhstik or Kinsing.",
              "Statistical: For each host, analyze `Zeek conn.log` to calculate the time delta between connections to the same destination IP. A low variance in these time deltas (low jitter) across multiple connections is indicative of automated beaconing. Alert on destination IPs where the standard deviation of inter-arrival times is below a threshold (e.g., < 1 second) for more than 10 connections.",
              "Machine Learning: Apply a time-series forecasting model (e.g., Prophet or ARIMA) to model the daily volume of outbound data (`orig_bytes` in `Zeek conn.log`) for each critical Linux server. Alert when the observed data volume exceeds the forecasted upper confidence interval, which could indicate data staging or exfiltration by a fileless payload."
            ]
          },
          {
            "description": "A command-line execution (e.g., `reg.exe`, `powershell.exe`) writes a registry value that is anomalously large (e.g., > 1024 bytes), contains high-entropy data, or targets a non-standard registry key often used for persistence.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4103",
              "Windows PowerShell Event ID 4104",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Windows Servers",
            "action": [
              "Symbolic: From Windows Event ID 4688, create a detection rule for `NewProcessName` of `reg.exe` with `ProcessCommandLine` containing 'add' and a value string longer than 1024 characters. Similarly, for PowerShell Event ID 4103, search for `Set-ItemProperty` or `New-ItemProperty` commands where the `-Value` parameter is a variable containing a large or encoded string.",
              "Statistical: For all registry write operations captured in Event ID 4657, calculate the length of the `NewValue` field. Establish a baseline length for each specific registry key path. Alert when a new write operation to a key path has a value length that exceeds the 99th percentile for that specific path.",
              "Machine Learning: Train a One-Class SVM model on tokenized command-line arguments from Windows Event ID 4688, focusing on processes like `powershell.exe`, `cmd.exe`, `cscript.exe`, and `wscript.exe`. Use the model to identify and alert on anomalous command-line structures indicative of obfuscated script execution or direct writes to fileless storage locations."
            ]
          },
          {
            "description": "A script file (e.g., shell, Python) transferred over the network contains explicit commands to write to or execute from a Linux shared memory directory (e.g., /dev/shm, /run/shm).",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Web Proxies, Linux Server Segments",
            "action": [
              "Symbolic: Using data from `Zeek files.log` and its associated file content, scan all transferred script files (e.g., `mime_type` of 'text/x-shellscript' or 'text/x-python') for regular expressions matching patterns like `'/dev/shm/'`, `'/run/shm/'`, `mktemp -p /dev/shm`, or commands that write and then execute files in these directories.",
              "Statistical: For each Linux server, maintain a list of source domains (`host` field in `Zeek http.log`) from which files are typically downloaded (`fuid` links to `Zeek files.log`). Calculate the rarity of each domain based on historical frequency. Alert when a script file is downloaded from a domain that is in the bottom 5% of historical frequency (a 'rare' domain for that server).",
              "Machine Learning: Train a Naive Bayes classifier on a labeled dataset of benign and malicious shell scripts. Use a bag-of-words or TF-IDF vectorization of the script content as features. Deploy the model to scan and classify all scripts extracted via `Zeek files.log` in real-time, alerting on any script classified as malicious with a high confidence score."
            ]
          },
          {
            "description": "A process not typically associated with system administration (e.g., `winword.exe`, `acrord32.exe`) writes a new value to the Windows Registry, or any process writes an abnormally large value (>16,383 bytes, the max for standard event logs) to a custom event log.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 5861",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM",
            "action": [
              "Symbolic: Create a detection rule that alerts when a process name from an Event ID 4657 (Registry write) or Event ID 5861 (WMI write) is not on an allowlist of expected system/administrative processes (e.g., `svchost.exe`, `msiexec.exe`, `System`). The allowlist should be specific to the target registry key or WMI namespace.",
              "Statistical: For each unique process name observed writing to the registry (Event ID 4657), establish a baseline of the size of data written (`NewValue` length). Use the Interquartile Range (IQR) method to detect outliers. Alert when a process writes a value whose size is greater than $$ Q3 + 1.5 \\times IQR $$.",
              "Machine Learning: Apply K-Means clustering to WMI write events (Event ID 5861), using categorical features like `ProcessName` and `Namespace` and numerical features like data size. Profile normal activity into clusters. Monitor for new events that are assigned to a small 'outlier' cluster or have a large distance to any cluster centroid, indicating anomalous WMI repository modification."
            ]
          },
          {
            "description": "A new persistent WMI event consumer is created by an unsigned or unknown provider, or a WMI-related process (e.g., wmiprvse.exe) executes an anomalous child process or initiates suspicious network connections.",
            "data_sources": [
              "Windows Event ID 5859",
              "Windows Event ID 5860",
              "Windows Event ID 5861",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers",
            "action": [
              "Symbolic: Create a high-priority alert for any occurrence of Windows Event ID 5861 (A permanent WMI event consumer was created), as this is a rare and suspicious event. Correlate this with Event ID 5860 (A permanent WMI event consumer was bound to a filter) and Event ID 4688 to identify the responsible parent process.",
              "Statistical: From Event ID 4688 logs, build a baseline frequency distribution of child processes spawned by `wmiprvse.exe`. Alert when `wmiprvse.exe` spawns a child process (e.g., `powershell.exe`, `cmd.exe`, `rundll32.exe`) that falls into the bottom 5% of historical frequency.",
              "Machine Learning: Construct a graph where nodes are processes (`wmiprvse.exe`, its children) and network endpoints (IPs from `Zeek conn.log`), and edges represent process creation or network connections. Train a graph neural network (GNN) on historical data to learn normal patterns of WMI-initiated activity. Use the trained model to score new WMI-related subgraphs and alert on those with high anomaly scores."
            ]
          },
          {
            "description": "An unauthorized user-land process attempts to directly write to or modify the physical backing files for the Windows Registry (hives) or the WMI repository.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File Systems of Domain Controllers and Critical Windows Servers",
            "action": [
              "Symbolic: Configure System Access Control Lists (SACLs) on the registry hive directories (`%SystemRoot%\\System32\\Config\\`) and the WMI repository (`%SystemRoot%\\System32\\Wbem\\Repository\\`). Create a detection rule to alert on any Windows Event ID 4663 with an `AccessMask` corresponding to write permissions (e.g., `0x2`, `0x4`, `0x6`) where the `ProcessName` is not on a strict allowlist (e.g., `lsass.exe`, `smss.exe`, specific backup solutions).",
              "Statistical: Establish a baseline of normal access patterns to these sensitive directories using Event ID 4663. For each `ProcessName`, calculate the mean and standard deviation of daily access counts. Alert if the access count for a given process on a given day exceeds its historical mean by more than 3 standard deviations.",
              "Machine Learning: Train a random forest classifier on labeled Event ID 4663 data to predict malicious access attempts. Use features such as `ProcessName`, `AccessMask`, `ObjectName`, and the user's security ID (`SubjectUserSid`). Deploy the model to score all access events to these sensitive files and alert on those classified as malicious."
            ]
          },
          {
            "description": "A Linux host initiates anomalous network communications (e.g., beaconing to a new IP, large data upload) shortly after downloading a script or binary that contains patterns associated with shared memory usage.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Linux Server Network Segments",
            "action": [
              "Symbolic: Create a stateful detection rule that triggers when a file is downloaded (`Zeek files.log`) containing content matching `/dev/shm` or `/run/shm`, and within 5 minutes, the same host (`id.orig_h`) initiates an outbound connection (`Zeek conn.log`) to a destination IP that is not in the top 1,000 most common destinations for the entire organization.",
              "Statistical: For each host, calculate a baseline of the daily data upload volume (`orig_bytes` in `Zeek conn.log`). After a file download event from `Zeek files.log` containing shared memory indicators, monitor the upload volume for the next hour. Alert if the total `orig_bytes` in that hour exceeds the 99th percentile of the host's daily baseline.",
              "Machine Learning: Develop a composite anomaly score using multiple machine learning models. A time-series model (e.g., LSTM) flags anomalous beaconing patterns in `Zeek conn.log`. A separate classifier scores downloaded files from `Zeek files.log` for maliciousness. An alert is generated when a host receives a high score from both models within a short time window (e.g., 10 minutes), indicating a malicious fileless payload has been dropped and activated."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]