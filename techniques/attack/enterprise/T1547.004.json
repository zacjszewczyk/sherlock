[
  {
    "information_requirement": "Is the adversary maintaining persistence by abusing Winlogon helper DLL configurations?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.004",
        "name": "Winlogon Helper DLL",
        "evidence": [
          {
            "description": "A modification to a Winlogon registry key (`Userinit`, `Shell`, or a `Notify` subkey) references a new executable or DLL file whose SHA256 hash is present on a known-malicious threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (Workstations, Servers), Domain Controllers, Configuration Management Databases (for baseline validation)",
            "action": [
              "Symbolic: Monitor for registry value set events (Sysmon EID 13, Win EID 4657) targeting `HKLM\\...\\Winlogon\\Userinit`, `...\\Shell`, or `...\\Winlogon\\Notify\\*`. Extract the file path from the new value. Correlate this with a recent file creation event (Sysmon EID 11) for the same path to retrieve the file hash. Query a threat intelligence platform or local IOC database for the hash. Alert on any match.",
              "Statistical: For each modification to a Winlogon key, analyze the referenced file path. Calculate the character-set entropy of the filename and the historical frequency of its parent directory across the enterprise. A filename entropy score exceeding the 95th percentile and a parent directory outside the top 99% most common system directories (e.g., not C:\\Windows\\System32) indicates a high likelihood of evasion. Alert on this combination.",
              "Machine Learning: Train a Random Forest or Gradient Boosting classifier on file and registry event features to predict maliciousness. Features should include: process making the change (e.g., `reg.exe`, `powershell.exe`), parent process, file path entropy, directory rarity, PE header characteristics of the referenced file (e.g., lack of signing certificate, high entropy sections), and time since file creation. A high probability score from the model indicates likely persistence."
            ]
          },
          {
            "description": "The registry value for `HKLM\\...\\Winlogon\\Userinit` or `HKLM\\...\\Winlogon\\Shell` is modified to a value that deviates from the established corporate baseline, or a new subkey is created under the `HKLM\\...\\Winlogon\\Notify` registry key by a non-standard process.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (Workstations, Servers), Domain Controllers, Image and Build Repositories (for baseline definition)",
            "action": [
              "Symbolic: Define a strict baseline for the `Userinit` (default: `C:\\Windows\\system32\\userinit.exe,`) and `Shell` (default: `explorer.exe`) registry values. Monitor for any modification (Sysmon EID 13, Win EID 4657) where the new value does not exactly match the baseline. Additionally, monitor for the creation of any new subkey under `...\\Winlogon\\Notify` and alert if the creating process is not a trusted installer (e.g., `msiexec.exe`, `TrustedInstaller.exe`).",
              "Statistical: For the `Userinit` value, which can legitimately contain multiple comma-separated executables, establish a per-host baseline for the number of entries and total string length. Use a Z-score to measure the deviation of a new value's length from the historical mean for that host. Alert if the Z-score exceeds 3, indicating a statistically significant and suspicious modification.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., SARIMA) on the enterprise-wide frequency of `...\\Winlogon\\Notify` subkey creation events, aggregated per hour. A sudden spike in creation events that deviates significantly from the model's forecast (e.g., exceeds the 99% confidence interval) indicates a potential widespread campaign leveraging this technique."
            ]
          },
          {
            "description": "A command shell (`cmd.exe`), scripting interpreter (`powershell.exe`), or an executable from a non-standard directory (`C:\\Windows\\Temp`, `C:\\Users\\Public`, etc.) is created as a child of `winlogon.exe`, `userinit.exe`, or `explorer.exe` within 90 seconds of a successful interactive user logon (Type 2 or 10).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (Workstations, Servers), Domain Controllers",
            "action": [
              "Symbolic: Correlate successful interactive logon events (Win EID 4624, Type 2 or 10) with subsequent process creation events (Sysmon EID 1) on the same host within a 90-second window. Alert if the parent process image is `winlogon.exe`, `userinit.exe`, or `explorer.exe` and the child process image is `cmd.exe`, `powershell.exe`, or any executable not located in `C:\\Windows\\System32` or `C:\\Program Files\\`.",
              "Statistical: For each parent process (`winlogon.exe`, `userinit.exe`, `explorer.exe`), build a historical baseline of all child process names and their command-line arguments using least-frequency analysis. Alert on any new child process that has a frequency of zero (first-time seen) or falls below the 1st percentile of historical occurrences, especially if launched soon after logon.",
              "Machine Learning: Use a sequence analysis model, such as a Long Short-Term Memory (LSTM) network, to learn normal sequences of processes that occur after a user logon. Input sequences would be `[logon_event, process_1, process_2, ..., process_n]`. An anomalous sequence, such as `logon -> explorer.exe -> powershell.exe -enc <base64>`, would be flagged by the model as a significant deviation from learned benign patterns."
            ]
          },
          {
            "description": "An outbound network connection from `userinit.exe`, or an immediate child process of `explorer.exe` or `userinit.exe`, connects to an external IP address with a low reputation score, a recently registered domain, or over a non-standard port.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Sysmon Event ID 3",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Servers, Endpoint devices (Workstations, Servers)",
            "action": [
              "Symbolic: Monitor for network connection events (Sysmon EID 3) where the initiating process image is `userinit.exe`. For connections from `explorer.exe` or its children, correlate the destination IP/domain from Zeek logs (conn.log, dns.log) with a threat intelligence feed of known C2 servers, recently registered domains (less than 30 days old), or DGA-flagged domains. Alert on any match.",
              "Statistical: For `explorer.exe` and its children, establish a per-host baseline of normal outbound network activity, including destination countries, ASNs, port/protocol combinations, and daily data volume (from Zeek conn.log `orig_bytes`/`resp_bytes`). Alert if a connection is made to a destination country with a zero-frequency in the baseline, or if the daily data uploaded exceeds the 99th percentile of its historical daily average.",
              "Machine Learning: Employ an autoencoder trained on features of benign network connections originating from post-logon processes. Features should include destination port, protocol, data volume, connection duration, and destination IP properties (ASN, country). The model will flag any connection with a high reconstruction error, indicating it does not conform to the learned profile of normal activity, thus detecting novel C2 channels."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by leveraging high-privilege execution via Winlogon?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.004",
        "name": "Winlogon Helper DLL",
        "evidence": [
          {
            "description": "A modification to a Winlogon registry key (`Userinit`, `Shell`, or `Notify`) references a DLL or executable whose file hash is associated with a known privilege escalation or credential dumping tool (e.g., Mimikatz, PowerSploit, LaZagne).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (Workstations, Servers), Domain Controllers, Threat Intelligence Platforms",
            "action": [
              "Symbolic: Upon a Winlogon registry modification (Sysmon EID 13, Win EID 4657), extract the referenced file path. Retrieve the file's hash from a preceding file creation event (Sysmon EID 11) or by direct query. Compare the hash against a curated threat intelligence database specifically populated with hashes of known privilege escalation and credential dumping tools. Alert on any match.",
              "Statistical: Analyze the PE header of the file referenced in the registry modification. A file is statistically anomalous if it is unsigned, has a compile timestamp that is newer than the registry modification time, contains high-entropy sections indicative of packing, or imports suspicious functions (e.g., `LsaGetLogonSessionData`, `OpenProcess`) rarely seen in legitimate Winlogon helpers. Alert if a file exhibits three or more such anomalous characteristics.",
              "Machine Learning: Train a supervised classification model (e.g., XGBoost) to identify malicious file paths referenced in Winlogon registry keys. Features should include path depth, presence of keywords like 'temp', 'public', or 'downloads', filename entropy, file extension rarity for the given directory, and whether the filename appears to be a random string. The model output is a probability score that the path is associated with a malicious implant."
            ]
          },
          {
            "description": "The `HKLM\\...\\Winlogon\\Userinit` registry value is modified to append commands for user account creation, group membership modification, or disabling security tools, in addition to the legitimate `userinit.exe` path.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (Workstations, Servers), Domain Controllers",
            "action": [
              "Symbolic: Monitor `Userinit` registry value modifications (Sysmon EID 13). Use regular expressions to parse the new value for the presence of suspicious command strings such as `net user /add`, `net localgroup administrators /add`, `reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v RunAsPPL`, or `wmic process call create`. Alert on any match.",
              "Statistical: Calculate the character length and token count (splitting by spaces, commas, and slashes) of the `Userinit` registry value. The default value is short and simple. Establish a tight baseline for length and token count. Alert on any value whose length or token count exceeds the 99.9th percentile of the historical distribution for your environment, indicating the likely addition of malicious commands.",
              "Machine Learning: Use a pre-trained Natural Language Processing (NLP) model, fine-tuned to recognize command-line syntax (e.g., a BERT model trained on shell commands). Feed the string from the `Userinit` value into the model. The model can classify the intent of the command sequence (e.g., 'user management', 'service manipulation', 'benign initialization'), alerting on any intent classified as suspicious or malicious."
            ]
          },
          {
            "description": "A correlated sequence of events on a single host where: 1) a process is spawned by `winlogon.exe` or `userinit.exe` with SYSTEM privileges, and 2) this process subsequently creates a new user account or adds an existing account to a privileged local or domain group.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Windows Event ID 4728"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory, Windows Servers, Identity and Access Management Systems",
            "action": [
              "Symbolic: Create a rule that triggers when a process creation event (Sysmon EID 1) with ParentImage `winlogon.exe` or `userinit.exe` and User `NT AUTHORITY\\SYSTEM` is followed within 60 seconds by a user creation event (Win EID 4720), or a group membership change event for a privileged group (Win EID 4732, 4728), initiated by the same ProcessGUID. Alert on this complete sequence.",
              "Statistical: Profile the typical event IDs generated by processes running as `NT AUTHORITY\\SYSTEM`. Create a frequency table of these events. Flag any SYSTEM process that generates a statistically rare event, such as Event ID 4720 (User Creation), especially if that process was a child of `userinit.exe` and is not a known identity management process (e.g., `lsass.exe`).",
              "Machine Learning: Use a graph-based anomaly detection algorithm. Model system activity as a graph where nodes are processes (with user context) and groups, and edges are actions ('spawned', 'added member'). The model learns the normal structure of this graph. An anomalous path like `winlogon.exe(SYSTEM) -> spawned -> evil.exe -> added member -> 'Domain Admins'` would be flagged as a structurally anomalous subgraph."
            ]
          },
          {
            "description": "A child process of `winlogon.exe` or `userinit.exe` requests a handle to the LSASS process memory with `PROCESS_VM_READ` access rights, which is indicative of a credential dumping attempt.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Windows Servers, Windows Workstations",
            "action": [
              "Symbolic: Monitor for process access events (Sysmon EID 10) where the `TargetImage` is `lsass.exe` and the `GrantedAccess` mask includes `0x1010` (PROCESS_VM_READ and query information). Correlate the `SourceProcessGUID` with a process creation event (Sysmon EID 1) to find its parent. Alert if the parent process is `winlogon.exe` or `userinit.exe`.",
              "Statistical: Build a baseline of all process images that legitimately access the LSASS process. This allowlist should be very small (e.g., `svchost.exe`, `csrss.exe`, approved EDR tools). Use frequency analysis to identify any process accessing LSASS that is not on the allowlist. An access from a process spawned by `userinit.exe` would have a frequency of zero and should be immediately alerted on.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) on the features of legitimate LSASS access events. Features should include `SourceImage`, `SourceProcessGUID`'s parent process image, and `GrantedAccess` mask. This model creates a tight boundary around normal activity. Any new access event that falls outside this boundary, such as one from a novel process spawned by `userinit.exe`, is classified as an anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]