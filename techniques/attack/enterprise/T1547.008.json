[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying or adding malicious LSASS drivers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.008",
        "name": "LSASS Driver",
        "evidence": [
          {
            "description": "A DLL file's hash, created on disk, matches a known malicious LSA driver hash from threat intelligence, or a DLL name added to the LSA Security Packages registry key matches a known malicious package name.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers (e.g., AD CS, ADFS), Standard Enterprise Workstations, Threat Intelligence Platforms",
            "action": [
              "Symbolic: Create a detection rule that queries for registry value modifications to 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' (Sysmon Event ID 13 or Windows Event ID 4657). For each added DLL name, and for file creation events (Sysmon Event ID 11), compare the DLL name and file hash against a continuously updated threat intelligence feed of known malicious LSA drivers. Trigger a high-severity alert on any match.",
              "Statistical: For every modification to the 'HKLM\\...\\Lsa\\Security Packages' registry key, calculate the prevalence of the added DLL name across all enterprise endpoints over the last 90 days. Flag any DLL with a prevalence score in the lowest percentile (e.g., present on <1% of endpoints) for analyst review. Additionally, track the rate of modifications to this key per host and alert if a host's modification rate exceeds a statistical threshold (e.g., >3 standard deviations above its own 30-day baseline).",
              "ML: Train a classification model (e.g., Random Forest, Gradient Boosting) on features extracted from DLL files added to the LSA registry path. Features must include file entropy, import/export table hash, presence and validity of a digital signature, signer name, file size, and enterprise prevalence. The model will classify each new DLL as benign or suspicious, generating an alert for 'suspicious' classifications to be investigated."
            ]
          },
          {
            "description": "A new DLL is added to the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' registry key that is either unsigned, has a low enterprise-wide prevalence, or resides in a directory other than the standard 'C:\\Windows\\System32\\'.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 7",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, File Systems on Endpoints and Servers",
            "action": [
              "Symbolic: Implement a rule that triggers when a registry modification event (Sysmon Event ID 13) targets 'HKLM\\...\\Lsa\\Security Packages' and the specified DLL path is not 'C:\\Windows\\System32\\'. Correlate with image load events (Sysmon Event ID 7) to check the 'Signed' and 'SignatureStatus' fields. Alert if the loaded DLL is unsigned or the signature is invalid. Maintain an exception list for known-good, non-standard packages.",
              "Statistical: For each DLL added to the LSA Security Packages key, calculate its enterprise-wide prevalence based on file name and path. Use a percentile-based threshold (e.g., flag any DLL in the bottom 5th percentile of prevalence) to identify anomalously rare packages. Separately, calculate the string entropy of the DLL's file path; paths with high entropy scores may indicate randomization and should be flagged for review.",
              "ML: Employ a clustering algorithm (e.g., DBSCAN) on newly added LSA packages. Use a feature vector for each package including its enterprise prevalence, a boolean for whether it is in System32, a boolean for being signed, and the file path entropy. The algorithm will group legitimate packages. Any package classified as a noise point or belonging to a very small cluster is an anomaly and should be alerted for analyst investigation."
            ]
          },
          {
            "description": "The LSASS process (lsass.exe) loads a DLL module whose file hash is not present in a pre-established baseline of legitimate, expected LSA packages for the specific host's operating system build, role, and patch level.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, Golden Images/Configuration Management Database (CMDB)",
            "action": [
              "Symbolic: For each major OS version and server role, create and maintain a 'golden baseline' set of known-good DLL hashes expected to be loaded by 'lsass.exe'. Create a detection rule that queries for all image load events (Sysmon Event ID 7) where the process is 'lsass.exe' and the loaded module's hash is not in the corresponding baseline. Trigger an alert on any deviation.",
              "Statistical: On each endpoint, establish a baseline of the typical count of DLL modules loaded by 'lsass.exe'. Alert if the module count on a host deviates significantly from its own historical baseline or from its peer group baseline (e.g., >2 standard deviations from the mean for that OS build). Further, calculate the Jaccard similarity score between the set of currently loaded module hashes and the established 'golden' baseline; a score below a defined threshold (e.g., <0.98) indicates a deviation and should be alerted.",
              "ML: Implement a time-series anomaly detection model (e.g., LSTM autoencoder) on the sequence of module load events for 'lsass.exe' on each critical host. The model learns the normal sequence, timing, and names of DLLs loaded during system operation. An alert is generated if the model's reconstruction error for a new sequence of events surpasses a dynamic threshold, indicating an anomalous module load event or an unexpected load order."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to escalate privileges by manipulating LSA Security Packages?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.008",
        "name": "LSASS Driver",
        "evidence": [
          {
            "description": "A process command-line (e.g., from cmd.exe, powershell.exe) or a PowerShell script block contains string patterns or regular expressions known to be used for installing malicious LSA drivers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, PowerShell Script Log Aggregators",
            "action": [
              "Symbolic: Monitor process command-line arguments (Windows Event ID 4688, Sysmon Event ID 1) and PowerShell script block logs (Windows Event ID 4104) using a list of regular expressions that match known LSA driver manipulation commands. Examples: 'reg add HKLM\\\\SYSTEM\\\\.*\\\\Lsa\\\\Security Packages', 'secur32.dll', 'Install-Mimikatz'. Trigger a high-severity alert on any match.",
              "Statistical: Analyze all PowerShell script blocks (Event ID 4104) to calculate the entropy of the script content. Correlate scripts with high entropy (e.g., top 5th percentile, indicating obfuscation) with the presence of LSA-related keywords ('Lsa', 'Security Packages'). Separately, calculate the rarity of command-line argument combinations across the enterprise. A statistically rare command line that also contains LSA-related keywords should be flagged for investigation.",
              "ML: Utilize a pre-trained Natural Language Processing (NLP) transformer model, fine-tuned on a labeled dataset of malicious and benign scripts. Feed all PowerShell script block content (4104) and process command-line arguments (4688) into the model for classification. Generate a high-severity alert for any content classified as 'malicious', and a medium-severity alert for 'suspicious', especially when the executing user is not a privileged system administrator."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a 60-second window: 1) A new DLL file is created in a non-system directory, 2) The LSA Security Packages registry key is modified to include the new DLL, and 3) The lsass.exe process loads that new DLL module.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations",
            "action": [
              "Symbolic: Implement a SIEM correlation rule that triggers when the following sequence is observed on a single host within a 60-second window: 1) A file creation event for a DLL (Sysmon Event ID 11); 2) A registry value set event (Sysmon Event ID 13) for 'HKLM\\...\\Lsa\\Security Packages' where the data contains the name of the new DLL; 3) An image load event (Sysmon Event ID 7) where 'lsass.exe' loads the specified DLL. Trigger a high-severity alert if this sequence is completed.",
              "Statistical: For each host, create a time-series of event counts for file creations (Sysmon EID 11), LSA registry modifications (Sysmon EID 13), and lsass.exe module loads (Sysmon EID 7). Use a moving average to establish a baseline for each event stream. Alert when a correlated spike occurs across all three streams that exceeds a dynamic threshold (e.g., 3 standard deviations above the moving average) within a short time window.",
              "ML: Develop a Hidden Markov Model (HMM) where the hidden states are 'Benign System Activity' and 'LSASS Hijack in Progress'. The observed events are the stream of Sysmon events (1, 7, 11, 13). Train the model on normal system behavior from a variety of machine roles. In real-time, feed the event stream into the model to calculate the probability of being in the 'LSASS Hijack in Progress' state. An alert is triggered if this probability surpasses a defined threshold (e.g., 0.85)."
            ]
          },
          {
            "description": "A failed attempt to load an LSA plugin occurs, indicated by specific Windows Event IDs, immediately following the execution of an unsigned or anomalously-named process.",
            "data_sources": [
              "Windows Event ID 3033",
              "Windows Event ID 3063",
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, System Event Log Aggregators, Endpoint Process Execution Logs",
            "action": [
              "Symbolic: Create a detection rule that alerts when a Windows Event ID 3033 or 3063 (LSA plugin/driver load failure) is logged. The rule should enrich the alert with process creation events (Sysmon Event ID 1 or Windows Event ID 4688) that occurred on the same host within the previous 60 seconds. Prioritize alerts where the preceding process was unsigned, ran from a user-writable path (e.g., 'C:\\Users\\', 'C:\\Temp\\'), or was executed by an interactive shell.",
              "Statistical: Monitor the rate of LSA error events (3033, 3063) per host and across the enterprise. Use time-series analysis to establish a dynamic baseline rate for each host. Alert when the rate on a single host exceeds a high percentile threshold (e.g., the 99th percentile of its own historical hourly rate). Correlate this statistical alert with other suspicious activity on the host to increase confidence.",
              "ML: Use an anomaly detection model (e.g., Isolation Forest) on a feature set describing the system state immediately preceding an LSA error event (3033 or 3063). Features should include the name of the last process created, its parent process, command line arguments, user context, and recent registry/file activity counts. The model identifies anomalous system states that precede LSA errors, pointing to likely malicious attempts rather than benign system issues."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]