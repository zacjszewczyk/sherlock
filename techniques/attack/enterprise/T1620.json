[
  {
    "information_requirement": "Is the adversary evading defenses using reflective code loading?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1620",
        "name": "Reflective Code Loading",
        "evidence": [
          {
            "description": "A process, not typically associated with network or inter-process communication, creates a named pipe whose name matches known malicious patterns (e.g., Cobalt Strike) or exhibits high entropy.",
            "data_sources": [
              "Windows Event ID 17",
              "Windows Event ID 18",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, File Servers, Application Servers, User Workstations",
            "action": [
              "Monitor Sysmon Event ID 17 (Pipe Created) for pipe names matching regular expressions of known malicious C2 patterns (e.g., `^\\\\msse-[0-9]+-server$`, `^\\\\postex_[a-f0-9]+$`). Correlate the creating process (Sysmon Event ID 1) with its parent to identify suspicious origins, such as an Office application spawning a child that creates the pipe.",
              "For each process name, establish a baseline of normal pipe creation activity. Calculate the Shannon entropy of all created pipe names and flag any names in the 95th percentile of entropy scores, as this can indicate algorithmically generated names used by malware. Also, flag any process that creates a named pipe if that process has rarely or never done so historically across the enterprise.",
              "Develop a classification model (e.g., Random Forest) trained on features from Sysmon Event ID 17 and 18. Features should include process name, parent process name, pipe name entropy, user context, and time of day. The model classifies each pipe creation event as benign or suspicious, allowing for detection of novel C2 framework patterns."
            ]
          },
          {
            "description": "A command line, particularly from a scripting interpreter like powershell.exe or cmd.exe, contains substrings indicative of in-memory execution APIs (e.g., `[System.Reflection.Assembly]::Load`), or contains large, high-entropy strings suggesting an encoded payload.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1",
              "Windows PowerShell Operational Log Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Servers with PowerShell Remoting enabled, Domain Controllers",
            "action": [
              "Create a detection rule that searches process command lines (Windows Event ID 4688, Sysmon Event ID 1) and PowerShell script block logs (Event ID 4104) for specific keywords and regular expressions associated with reflective loading, such as `[System.Reflection.Assembly]::Load`, `[System.Runtime.InteropServices.Marshal]::`, `IEX(`, and large base64 encoded blocks (`[A-Za-z0-9+/=]{200,}`).",
              "Calculate the Shannon entropy for all command-line arguments and PowerShell script blocks. Establish a baseline entropy score for common processes and users. Flag any command line or script block whose entropy exceeds the 99th percentile for that specific process or parent process. Also analyze the command line length, flagging commands that are more than 3 standard deviations longer than the mean for that process.",
              "Implement a logistic regression model trained on features like command length, entropy, presence of suspicious keywords, and parent process to classify each command's likelihood of being malicious. This can help score and prioritize alerts for analyst review, reducing fatigue from simple keyword matches."
            ]
          },
          {
            "description": "A non-.NET native Windows process (e.g., notepad.exe, explorer.exe, svchost.exe) loads .NET Common Language Runtime (CLR) modules (e.g., clr.dll, mscoree.dll) that are not present in its established baseline of normally loaded libraries.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Processes on user workstations and servers, especially non-.NET native Windows processes (e.g., notepad.exe, svchost.exe), user-facing applications (e.g., web browsers, Microsoft Office suite), and web server processes.",
            "action": [
              "Create a static watchlist of high-risk process/module load combinations. Alert when a non-.NET process (e.g., `notepad.exe`, `svchost.exe`, `lsass.exe`, Office applications) loads core .NET modules (`clr.dll`, `mscoree.dll`, `mscorwks.dll`). This provides a high-fidelity, low-volume alert for known suspicious behavior.",
              "For every unique process name, build a historical baseline of all modules it has legitimately loaded over a 30-day period using Sysmon Event ID 7. Calculate the rarity of each process-module pair across the enterprise. Alert when a process loads a module that is in the bottom 5th percentile of load frequency for that process, indicating a rare and potentially malicious event.",
              "Develop an unsupervised learning model (e.g., an autoencoder) trained on vectors representing module load events for a given process over time. The model learns the 'normal' pattern of module loads. Deviations from this learned pattern, resulting in a high reconstruction error or anomaly score, indicate a potential injection or reflective loading event that warrants investigation."
            ]
          },
          {
            "description": "A process, such as notepad.exe or an Office application, initiates an outbound network connection when it has no historical baseline of network activity, or the destination IP, domain, or TLS fingerprint is associated with threat intelligence.",
            "data_sources": [
              "Windows Event ID 3",
              "Windows Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), Workstations, Servers hosting sensitive data",
            "action": [
              "For each Sysmon Event ID 3 (Network Connection), join with Zeek conn.log on IP/port/timestamp. Query the destination IP and domain (from Zeek dns.log) against a threat intelligence feed of known malicious indicators. Separately, query the JA3/JA3S hash (from Zeek ssl.log) against a feed of known malicious C2 fingerprints. Alert on any match.",
              "For each process name, establish a baseline of normal network behavior, including common destination ports, data volume (bytes in/out from Zeek conn.log), and connection frequency. Use percentile-based thresholds to detect anomalies, such as a `notepad.exe` process initiating a connection on port 443 where this behavior is in the 99.9th percentile of rarity for that process.",
              "Use a graph-based analysis to model relationships between processes, network connections, and users. Apply community detection algorithms to identify small, isolated clusters of activity showing a legitimate process making a rare external connection, which is linked to a prior script execution. Flag these subgraphs as high-risk indicators of post-exploitation activity."
            ]
          },
          {
            "description": "A process performs cross-process memory access (Sysmon Event ID 10) followed immediately by remote thread creation (Sysmon Event ID 8) in the target process, a pattern used to inject a loader which then reflectively loads a payload.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value processes (lsass.exe, winlogon.exe, explorer.exe), User workstations, Domain Controllers",
            "action": [
              "Create a correlation rule that triggers when a Sysmon Event ID 10 (`ProcessAccess`) from a `SourceImage` is immediately followed by a Sysmon Event ID 8 (`CreateRemoteThread`) from the same `SourceImage` into the same `TargetImage` within a 1-second window. Focus on high-risk combinations, such as `powershell.exe` targeting `lsass.exe`.",
              "Build a frequency table of all `SourceImage`-`TargetImage` pairs for remote thread creation (Event ID 8). Calculate the rarity of each pair across the enterprise and flag pairs that are statistically rare (e.g., occurring less than 5 times in 30 days). Further analyze the `StartAddress` of the remote thread; addresses not mapping to a known, on-disk module in the target process are highly suspicious.",
              "Train a sequence-based model (e.g., LSTM) on streams of Sysmon events per host to learn normal sequences of process interactions. An anomalous sequence, such as `WINWORD.EXE` -> `ProcessAccess` on `svchost.exe` -> `CreateRemoteThread` in `svchost.exe`, would be flagged with a high anomaly score as it deviates from learned benign sequences of system activity."
            ]
          },
          {
            "description": "A process creates a new thread in its own memory space (SourceImage equals TargetImage in Sysmon Event ID 8), where the thread's start address does not map to a legitimate, on-disk module, indicating execution from a private, executable memory region.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All running processes on critical servers and workstations, especially those handling untrusted data (e.g., browsers, email clients, Office applications).",
            "action": [
              "Create a detection rule for Sysmon Event ID 8 events where `SourceImage` path equals `TargetImage` path. For each event, check if the `StartAddress` corresponds to a known module loaded by that process (using a cached baseline from Sysmon Event ID 7). Alert if the `StartAddress` is 'Unknown' or does not map to a valid, signed module on disk.",
              "For each process name (e.g., `powershell.exe`), establish a baseline of common thread start addresses. Calculate the rarity of each `StartAddress` across the enterprise for that process. Flag any thread creation where the `StartAddress` is in a statistically rare memory range (e.g., bottom 1st percentile of frequency), which may indicate dynamically allocated executable memory.",
              "Train a classification model (e.g., XGBoost) to predict if a thread creation event is malicious. Features should include whether the thread is local (`SourceImage` == `TargetImage`), the `StartAddress` location relative to known memory structures, parent process name, and process command line arguments. The model learns to differentiate legitimate in-memory activity (like JIT compilation) from malicious shellcode execution."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]