[
  {
    "information_requirement": "Is an adversary attempting to evade defenses by modifying file or directory permissions on Linux or macOS systems? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1222.002",
        "name": "Linux and Mac File and Directory Permissions Modification",
        "evidence": [
          {
            "description": "Execution of `chmod` or `chown` commands with arguments that grant broad permissions (e.g., `777`, `+x`), change ownership, or recursively alter permissions on sensitive directories.",
            "data_sources": [
              "auditd logs",
              "bash history",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux/macOS servers (web, database, authentication), developer workstations, network file shares.",
            "action": "1. (Symbolic) Create a SIEM rule to search process execution logs (e.g., from auditd) for command lines matching high-risk patterns such as `chmod .* 777`, `chmod .* +x`, `chown .* <suspicious_user>`, or `chmod -R`. Focus on commands executed by non-root users or web service accounts (e.g., `www-data`, `apache`). 2. (Statistical) For each host, establish a baseline of normal `chmod`/`chown` command usage by user and parent process. Calculate the frequency of these commands per user over a sliding time window (e.g., 1 hour) and alert when the frequency exceeds a high percentile (e.g., 99th percentile) of their historical behavior. Calculate the entropy of the parent processes invoking `chmod`/`chown`; a low entropy score may indicate a single script is responsible for many changes. 3. (Machine Learning) Train a time-series forecasting model (e.g., ARIMA) on the count of `chmod`/`chown` events per host. Alert on significant anomalies where the observed count deviates from the forecasted count. Correlate high-probability suspicious events with anomalous network activity (e.g., new outbound connections in Zeek conn.log from the source host) within a short time window."
          },
          {
            "description": "Use of the `chattr` command on Linux to make files immutable (`+i`) to prevent modification by security tools, or to make them append-only (`+a`) to hide malicious additions in log files.",
            "data_sources": [
              "auditd logs",
              "bash history"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers hosting critical applications, log aggregation servers, DNS servers.",
            "action": "1. (Symbolic) Monitor process execution logs for the `chattr` command, specifically looking for arguments `+i` or `+a` applied to sensitive files such as `/etc/passwd`, `/etc/shadow`, shell configuration files (`.bashrc`), or key system binaries. Create an alert for any `chattr` execution by a non-root user or targeting a user's home directory. 2. (Statistical) Profile the typical file paths targeted by `chattr` during normal system administration. Maintain a list of these 'normal' paths and their parent directories. Alert when `chattr` targets a file path whose parent directory is statistically rare or has never been seen before. 3. (Machine Learning) Develop a one-class SVM (Support Vector Machine) model trained on benign `chattr` executions (features: user, parent process, target file parent directory, time of day). Use the model to identify `chattr` executions that are outliers and likely malicious. Correlate these outlier events with preceding file creation events in the same directory to detect a 'drop, modify, execute' pattern."
          },
          {
            "description": "A large number of file permission or ownership change events occurring in rapid succession within a sensitive directory tree (e.g., `/etc/`, `/var/www/`, `/Users/`), often indicative of a `chmod -R` or `chown -R` command.",
            "data_sources": [
              "auditd logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web application directories, user home directories on shared systems, directories containing sensitive configuration files.",
            "action": "1. (Symbolic) Create a SIEM rule that triggers when the count of `chmod`, `fchmod`, `chown`, or `fchown` syscalls from a single process ID exceeds a high threshold (e.g., >100 events in 1 minute) within a specific high-value directory path (e.g., `/etc/*`). 2. (Statistical) Use a sliding window to count file permission change events per host and process. Establish a baseline and alert on spikes that exceed 3-4 standard deviations above the mean for that host. Analyze the distribution of target directories for these events; a sudden focus on a single, high-value directory is anomalous. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on file modification events, using time and parent process ID as features. Benign, widespread changes from package managers will form large, predictable clusters. Small, dense clusters of activity at unusual times or from unusual processes can indicate targeted, malicious recursive changes. Correlate these clusters with network beacons detected in Zeek conn.log originating from the same host to increase confidence."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]