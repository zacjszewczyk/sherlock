[
  {
    "information_requirement": "Is an adversary attempting to evade defenses by modifying file or directory permissions on Linux or macOS systems? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1222.002",
        "name": "Linux and Mac File and Directory Permissions Modification",
        "evidence": [
          {
            "description": "An instance of chmod or chown command execution with arguments indicating high-risk changes, such as granting universal write/execute permissions (e.g., 777, +x), recursive application (-R), or transferring ownership to a non-administrative user, especially when targeting sensitive system directories or user-owned configuration files.",
            "data_sources": [
              "EDR Process Creation Logs",
              "Linux auditd logs",
              "macOS Endpoint Security Framework events",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers.",
            "action": [
              "Using EDR process logs, create a rule to alert on command line executions matching regex patterns like `chmod\\s+(-R\\s+)?(777|666|u\\+s|g\\+s)\\s+/` or `chown\\s+[a-zA-Z0-9_-]+\\s+/etc/`. Prioritize alerts where the parent process is a web server process (e.g., `apache2`, `nginx`, `php-fpm`) or an interactive shell run by a low-privileged user.",
              "For each host and user pair, calculate a baseline frequency of `chmod`/`chown` executions over a 30-day period. Alert if the hourly count for a user exceeds the 99th percentile of their own historical activity or the 95th percentile of their peer group (e.g., 'developers'). Also, calculate the entropy of parent process names invoking these commands for each user; a sharp drop in entropy indicates a single script is likely responsible for many changes and warrants investigation.",
              "Train an Isolation Forest model on benign `chmod`/`chown` executions, using features such as: user account privilege level, parent process name, target file/directory path (featurized), command-line arguments (featurized), and time of day (e.g., hour, day of week). Classify new executions as anomalous if they receive a high outlier score. Correlate high-scoring events with subsequent network connections to new external IPs (from Zeek conn.log) within 5 minutes to prioritize alerts."
            ]
          },
          {
            "description": "Execution of the `chattr` command to set the immutable (`+i`) or append-only (`+a`) attribute on a file, particularly system binaries, configuration files, or user-level shell startup scripts.",
            "data_sources": [
              "EDR Process Creation Logs",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log).",
            "action": [
              "Create a high-severity alert for any process execution of `chattr` with arguments `+i` or `+a` targeting files outside of a pre-defined allow-list of directories typically managed by system administrators (e.g., `/var/log/audit`). The rule should have exceptions for known administrative scripts or parent processes like `ansible` or `puppet`.",
              "Maintain a historical lookup table of file paths targeted by `chattr`. For each new `chattr` execution, calculate the Jaccard similarity between the new target file's parent directory and the set of all previously seen parent directories. A similarity score below a low threshold (e.g., 0.1) indicates a rare and potentially suspicious target location.",
              "Develop a one-class SVM model trained on benign `chattr` executions. Features should include: user name, user's group memberships, parent process name, target file extension, and target file's depth in the directory tree. Use the trained model to score new `chattr` events; scores indicating a significant deviation from the norm should be flagged as anomalous. Enrich these alerts by checking for recent file writes to the target file by the same process just before the `chattr` command was run."
            ]
          },
          {
            "description": "A single process generating more than 100 file permission or ownership modification events (e.g., chmod, fchmodat, chown syscalls) within a 60-second window, particularly within a single directory tree like `/etc/`, `/var/www/`, or a user's home directory.",
            "data_sources": [
              "EDR File Modification Events",
              "Linux auditd logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web application directories, user home directories on shared systems, directories containing sensitive configuration files.",
            "action": [
              "Using `auditd` or EDR syscall logs, create a stateful rule that counts `chmod`, `fchmod*`, and `chown*` syscalls grouped by process ID (`pid`) and parent process ID (`ppid`) over a 1-minute window. Trigger an alert if the count exceeds 100 and the target file paths share a common parent directory.",
              "For each host, ingest file modification syscall events into a time-series database. Calculate a 30-day rolling average and standard deviation of these events per minute. Alert when the event count in a 1-minute window exceeds 4 standard deviations above the mean. Further qualify the alert by calculating the Gini coefficient of the target parent directories within the window; a very low coefficient (near 0) indicates a high concentration of changes in one directory, strengthening the signal.",
              "Apply the DBSCAN clustering algorithm to file modification events over a 10-minute window. Use features like: timestamp (as a Unix epoch), process ID, and a numerical hash of the target file's parent directory. A small, dense cluster (high number of points within a small epsilon radius) from a non-system process (e.g., not `dpkg` or `yum`) indicates a targeted, scripted modification. Correlate the process ID from these malicious clusters with any network connections in Zeek conn.log from the same host that exhibit a regular, 'heartbeat' pattern, which could indicate C2 communication."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]