[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using polymorphic code?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.014",
        "name": "Polymorphic Code",
        "evidence": [
          {
            "description": "A process, identified by its hash and command line, initiates a network connection to a destination IP or domain that is present on a threat intelligence feed for polymorphic malware C2 infrastructure.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress/Ingress Points (Firewall, Proxy), DNS Servers",
            "action": [
              "Join process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log, Zeek dns.log) on hostname and timestamp. Query the destination IP/domain against a threat intelligence list of known polymorphic malware C2 servers (e.g., those associated with Qakbot, Emotet, TrickBot). Generate an alert for any match.",
              "For each unique process hash seen in Windows Event ID 4688 making an external network connection, calculate its enterprise-wide prevalence (count of hosts). Separately, calculate the prevalence of the destination IP address across the enterprise. Flag any connection where the process hash prevalence is below the 5th percentile and the destination IP prevalence is also below the 5th percentile, indicating a rare process communicating with a rare destination.",
              "Train a supervised classification model (e.g., XGBoost, Random Forest) using a labeled dataset of benign and malicious network connections originating from host processes. Engineer features from both host and network data: process-based features (command line length, entropy of process name), and network-based features (destination IP reputation, ASN, JA3 hash, connection duration, bytes transferred). Deploy the model to score new process-initiated connections in real-time, alerting on scores above a defined confidence threshold."
            ]
          },
          {
            "description": "A process is created with a command line containing patterns indicative of obfuscation, loading, or packing techniques commonly used to deploy polymorphic code.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application Servers, Domain Controllers",
            "action": [
              "Scan all process command lines from Windows Event ID 4688 logs using a set of regular expressions designed to find packer and loader artifacts. Patterns should include: PowerShell with '-e' or '-encoded' flags followed by a long base64 string; rundll32.exe calling a DLL in a temporary or user-writable path; mshta.exe executing remote VBScript/JScript. Generate an alert on any regex match.",
              "For each common parent process (e.g., powershell.exe, cmd.exe, wscript.exe), calculate the Shannon entropy of the child process's command-line arguments. Establish a baseline entropy distribution for each parent. Alert when a new process creation event has a command-line entropy that exceeds the 99th percentile of the historical baseline for its specific parent process.",
              "Utilize a pre-trained or custom-trained Natural Language Processing (NLP) model, such as a transformer-based classifier, on process command lines. Fine-tune the model to distinguish between benign administrative scripts and malicious loader commands. The model should analyze the sequence and structure of arguments, identifying anomalous patterns that deviate from normal system and user behavior, indicative of obfuscated execution."
            ]
          },
          {
            "description": "A single parent process (by Process ID) is observed spawning multiple child processes within a short time window (e.g., 5 minutes), where the file hashes of the child process executables are distinct from one another.",
            "data_sources": [
              "Windows Event ID 4688 (with process hash field populated)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Sandboxing/Analysis Environments, File Servers",
            "action": [
              "Identify parent processes (e.g., WINWORD.EXE, OUTLOOK.EXE, ACROBAT.EXE) that should not typically spawn new executables. Alert immediately if a process from this watchlist spawns a child process whose executable path is in a user-writable directory (e.g., %APPDATA%, %TEMP%, C:\\Users\\Public) and whose hash has not been seen before in the environment.",
              "Group child process creation events (Windows Event ID 4688) by Parent Process ID over a 10-minute sliding window. For each group, calculate the ratio of unique child process hashes to the total number of child processes spawned. If this 'uniqueness ratio' is greater than 0.9 (i.e., 90% of children are unique), flag the parent process for investigation. This indicates a high likelihood of a polymorphic engine generating new variants.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to process creation events. Use features such as parent process name, the entropy of the child process executable path, and a binary flag indicating if the child hash is unique within the last 24 hours. The algorithm will group normal, repetitive process behavior. Outlier points or small, sparse clusters identified by the model represent anomalous execution chains that may correspond to a polymorphic dropper creating unique files."
            ]
          },
          {
            "description": "A host's periodic network communications (beacons) to a single external destination exhibit statistically significant variations in transport layer (JA3/JA4) or application layer (HTTP User-Agent, URL path) characteristics over time.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points (Firewall, Proxy), DNS Servers",
            "action": [
              "Continuously monitor network traffic for HTTP User-Agents (Zeek http.log) or TLS JA3/JA4 hashes (Zeek ssl.log) that match a threat intelligence feed of indicators associated with polymorphic C2 frameworks (e.g., Cobalt Strike, Metasploit, Brute Ratel). Generate an alert on any match.",
              "For each source IP and destination IP pair exhibiting beaconing behavior (i.e., regular connections over time), track the set of unique JA3 hashes (from Zeek ssl.log) and User-Agent strings (from Zeek http.log) over a 24-hour window. Calculate the cardinality (count of unique values) for each. Alert if the cardinality of JA3 hashes or User-Agents for a single beaconing channel exceeds a dynamically calculated threshold (e.g., the 98th percentile of cardinalities observed across all beaconing channels in the enterprise).",
              "For each internal host, implement a time series anomaly detection model (e.g., Seasonal-ARIMA or an LSTM-based autoencoder) on its network egress traffic. Model multiple feature streams simultaneously, such as bytes sent per hour, connection count per hour, and the Shannon entropy of the set of JA3 hashes observed per hour. The model learns the host's normal network 'rhythm' and flags periods where these metrics deviate significantly from the learned pattern, which can indicate a polymorphic C2 channel altering its signature."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]