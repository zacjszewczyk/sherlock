[
  {
    "information_requirement": "Is the adversary maintaining persistence via an authentication package modification?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.002",
        "name": "Authentication Package",
        "evidence": [
          {
            "description": "A new DLL name is appended to the multi-string value at HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages, and this new DLL name or its on-disk file hash matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Filter for registry modification events (Sysmon Event ID 13 or Windows Event ID 4657) where the target object is `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages`. Extract the newly added DLL name from the event details. Query your threat intelligence platform or local IOC database for the extracted DLL name and its corresponding file hash. Trigger a high-severity alert upon a match.",
              "For each modification to the LSA `Authentication Packages` key (Sysmon Event ID 13), correlate the `ProcessGuid` with a process creation event (Sysmon Event ID 1) to identify the modifying process name. Maintain a 30-day rolling baseline of the frequency of all processes that modify this key. Calculate the frequency distribution and flag any modification made by a process falling below the 5th percentile of frequency as anomalous.",
              "Develop and deploy a classification model (e.g., Random Forest) trained on historical registry modification events and their corresponding process context. Engineer features such as: parent process name, process command-line entropy, user context, characteristics of the added DLL path (e.g., path entropy, is in user-writable directory), and the prevalence of the modifying process. Use the model to score each new modification event in real-time, classifying it as benign or malicious."
            ]
          },
          {
            "description": "The lsass.exe process loads a DLL module where the module path is not `C:\\Windows\\System32\\*`, its signature status is 'Unsigned' or invalid, or its name is not on a pre-defined allowlist of legitimate authentication packages.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Windows Security Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Monitor for Sysmon Event ID 7 where `Image` is `C:\\Windows\\System32\\lsass.exe`. Create an allowlist of known-good authentication package DLLs (e.g., `kerberos.dll`, `msv1_0.dll`, `schannel.dll`) and their expected path (`C:\\Windows\\System32\\`). Alert if the `ImageLoaded` field contains a DLL not on the allowlist or not originating from the expected path. Additionally, if LSA Protection AuditLevel is enabled, alert on Windows Event ID 4697 where an unsigned DLL attempts to load.",
              "For each DLL loaded by `lsass.exe` (Sysmon Event ID 7), calculate its prevalence across all endpoints over a 30-day baseline. Flag any DLL that is statistically rare (e.g., seen on fewer than 1% of assets). Concurrently, analyze the `SignatureStatus` field; a value of `Unsigned` for a DLL loaded by lsass.exe is a high-confidence statistical anomaly and should be alerted on immediately.",
              "Implement a sequence-based anomaly detection model (e.g., using an LSTM) for each host. The model learns the normal sequence, timing, and names of DLLs loaded by `lsass.exe` during the boot process (captured via Sysmon Event ID 7). The model should flag any deviation from this learned sequence, such as the injection of a new, unexpected DLL or a change in the loading order, as a temporal anomaly."
            ]
          },
          {
            "description": "`lsass.exe` spawns a child process (which is highly anomalous behavior) or initiates external network connections to destinations not on an allowlist, occurring within a short time window after a system boot.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Windows Event ID 4688",
              "Windows Event ID 6005",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, Domain Controllers",
            "action": [
              "Create a high-severity alert rule for any process creation event (Sysmon Event ID 1 or Windows Event ID 4688) where the `ParentImage` or `ParentProcessName` is `C:\\Windows\\System32\\lsass.exe`. In parallel, monitor network connection events (Sysmon Event ID 3 or Zeek `conn.log`) from all hosts and alert if the `DestinationIp` matches a known C2 server from a threat intelligence feed.",
              "A child process of `lsass.exe` is a zero-frequency event and should be treated as a high-confidence statistical anomaly. For network behavior after a boot event (Windows Event ID 6005), establish a 30-minute monitoring window. For all network connections from the host (Zeek `conn.log`), flag any connection where the destination IP has not been seen in the last 30 days across the enterprise (i.e., it is in the 0th percentile of prevalence).",
              "Apply a multivariate time-series anomaly detection model (e.g., LSTM autoencoder) to post-boot network traffic features derived from Zeek `conn.log` for each host. Engineer features from one-minute windows, including bytes sent, connection count, protocol mix, and entropy of destination IPs. Train the model on normal post-boot activity to flag significant deviations, such as periodic, low-volume 'heartbeat' connections characteristic of C2 beaconing."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Ask Sage, Inc.",
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary achieved privilege escalation via an authentication package modification?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.002",
        "name": "Authentication Package",
        "evidence": [
          {
            "description": "A non-SYSTEM user process, or a process whose name, hash, or command-line arguments match a known malicious tool, modifies the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages` registry key.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Standard User Endpoints",
            "action": [
              "Correlate registry modification events (Sysmon Event ID 13 or Windows Event ID 4657) on the LSA key with the source process information (Sysmon Event ID 1). Extract the process name, file hash, and command line. Compare these artifacts against a threat intelligence database of privilege escalation tools (e.g., Mimikatz). Trigger a critical alert on any match.",
              "For every modification to the LSA registry key, analyze the full parent-child process chain. Establish a baseline of benign process chains that modify this key (e.g., `services.exe` -> `svchost.exe` -> `TrustedInstaller.exe`). Calculate the frequency of observed chains and flag any modification originating from a statistically rare chain (e.g., `explorer.exe` -> `cmd.exe` -> `reg.exe`), which indicates manual or scripted modification.",
              "Train a supervised classification model (e.g., XGBoost) to score the maliciousness of the process modifying the LSA key. Engineer features from process (Sysmon Event ID 1) and registry (Sysmon Event ID 13) events, including: user context (e.g., is SYSTEM), parent process name, command-line entropy, and process integrity level. A model trained on known malicious and benign events can predict the likelihood that a new modification is part of a privilege escalation attempt."
            ]
          },
          {
            "description": "A write attempt to the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages` key contains a DLL path located in a user-writable or temporary directory.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Monitor for registry write events (Sysmon Event ID 13 or Windows Event ID 4657) to the LSA `Authentication Packages` key. Parse the new value to extract the DLL path. Use a regular expression to check if the path falls within a non-standard or user-writable directory (e.g., `C:\\Users\\*`, `C:\\ProgramData\\*`, `C:\\Windows\\Temp\\*`, `%APPDATA%`). Alert on any match.",
              "For all new DLL paths written to the LSA key, calculate the string entropy of the full path and the filename separately. Establish a baseline distribution for path and filename entropy using known legitimate system DLLs. Alert on any new path whose path or filename entropy score is a statistical outlier (e.g., exceeds the 98th percentile), as this is indicative of randomized names.",
              "Implement an unsupervised anomaly detection model, like a character-level autoencoder, trained exclusively on the file paths of legitimate system DLLs. The model learns to reconstruct legitimate paths with low error. Feed every new DLL path written to the LSA key into the model. A high reconstruction error score indicates the path is structurally dissimilar to legitimate paths and should be flagged as a high-confidence anomaly."
            ]
          },
          {
            "description": "Within one hour following a modification to the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages` key, the affected host initiates network connections indicative of lateral movement (e.g., mass SMB/RPC connections) or C2 beaconing.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers",
            "action": [
              "Upon detection of an LSA key modification (Sysmon Event ID 13), place the source host on a 'watch list' for 60 minutes. During this window, alert on any outbound network connection (Zeek `conn.log`) to a destination IP on a C2 threat feed. Also monitor Zeek `dce_rpc.log` for any RPC operations from the host targeting sensitive interfaces like `lsass`, `samr`, or `drsuapi`.",
              "After an LSA key modification, monitor the host's network activity in Zeek `conn.log`. Establish a baseline for the number of unique internal hosts contacted over SMB (port 445) by a typical endpoint per hour. Use a percentile threshold (e.g., 99th percentile) to detect a sudden spike in this count from the watched host, indicating lateral movement scanning.",
              "Utilize a graph-based anomaly detection algorithm to model the normal communication graph of the enterprise network (hosts are nodes, connections are edges). After an LSA key modification, monitor for new edges created by that host's node. The model can score the anomalousness of a new edge based on the 'role' of the destination node and the rarity of the connection type, flagging behavior inconsistent with the host's learned role."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Ask Sage, Inc.",
      "Zachary Szewczyk"
    ]
  }
]