[
  {
    "information_requirement": "Is the adversary maintaining persistence via an authentication package modification?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.002",
        "name": "Authentication Package",
        "evidence": [
          {
            "description": "A modification to the multi-string value at `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages` adds a DLL name that matches a known-bad indicator from threat intelligence.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Symbolic Logic: For each Windows Event ID 4657 (A registry value was modified), filter where `Object Name` is `\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa` and `Value Name` is `Authentication Packages`. Extract the new string value added. Compare the extracted DLL name against a threat intelligence list of known malicious authentication package DLLs (e.g., `sekurlsa.dll`). Alert on any match.",
              "Statistical Analysis: For each modification to the LSA `Authentication Packages` key, identify the process responsible by correlating the `Process ID` from Event ID 4657 with a process creation event (Event ID 4688). Maintain a baseline of common processes that modify this key (e.g., `svchost.exe`, `TrustedInstaller.exe`). Calculate the frequency of each modifying process across the environment. Flag any modification made by a statistically rare process (e.g., a process in the bottom 5th percentile of frequency).",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features from registry modification events (Event ID 4657) and associated process creation events (Event ID 4688). Features should include parent process name, process command line, user context, and characteristics of the added DLL path (e.g., path entropy, presence of user-writable directories). Use the model to classify each modification event as benign or malicious."
            ]
          },
          {
            "description": "The `lsass.exe` process loads a DLL that is unsigned, is located in a non-standard directory, or has a name not present on an established allowlist.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Symbolic Logic: Create and maintain an allowlist of legitimate authentication package DLLs (e.g., `kerberos.dll`, `msv1_0.dll`, `schannel.dll`) and their expected file paths (`C:\\Windows\\System32\\`). Prior to reboot, monitor for modifications to the LSA key (Event ID 4657) and alert if the added DLL is not on this explicit allowlist.",
              "Statistical Analysis: For each new DLL added to the LSA key, calculate its prevalence across all endpoints over a 30-day baseline period. Use a percentile-based threshold to identify rare DLLs (e.g., any DLL seen on fewer than 1% of endpoints). Additionally, calculate the entropy of the file path; a high entropy score can indicate a randomized path. Alert on DLLs that are both statistically rare and have high path entropy.",
              "Machine Learning: Develop a time-series anomaly detection model for each host that monitors the sequence and names of DLLs loaded by `lsass.exe` during the boot process (requires advanced logging like Sysmon Event ID 7). The model learns the normal boot sequence. Alert on any deviation, such as the injection of a new, unexpected DLL into the loading chain, which would be flagged as a temporal anomaly."
            ]
          },
          {
            "description": "The `lsass.exe` process initiates anomalous child processes or network connections shortly after a system boot event.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 6005",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, Domain Controllers",
            "action": [
              "Symbolic Logic: Create a critical alert for any Windows Event ID 4688 where the `ParentProcessName` is `lsass.exe`. Additionally, monitor Zeek `conn.log` for any connections originating from a host shortly after a boot event (Event ID 6005) where the destination IP is on a C2 threat intelligence list.",
              "Statistical Analysis: After a boot event (Event ID 6005), establish a 15-minute monitoring window. For network traffic from the host, analyze Zeek `ssl.log` and `dns.log`. Flag any connection where the JA3 hash or requested domain is statistically rare (e.g., seen for the first time in 30 days) across the enterprise. Any child process of `lsass.exe` is a statistical anomaly and should be flagged.",
              "Machine Learning: Apply a time-series anomaly detection model (e.g., LSTM autoencoder) to the host's post-boot network behavior, using Zeek `conn.log` data (bytes out, connection count, protocol mix). Train the model on normal post-boot activity. The model will flag anomalies such as a sudden, periodic, low-volume 'heartbeat' connection indicative of C2 beaconing that deviates from the learned baseline."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary achieved privilege escalation via an authentication package modification?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.002",
        "name": "Authentication Package",
        "evidence": [
          {
            "description": "A process with a file name, hash, or command-line argument matching a known malicious tool writes a new DLL path to the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages` registry key.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Standard User Endpoints",
            "action": [
              "Symbolic Logic: Correlate Windows Event ID 4657 on the LSA key with the source process from Windows Event ID 4688. Extract the process name and command line. Compare the process name (e.g., `mimikatz.exe`), its hash, or command-line arguments against a threat intelligence database of privilege escalation tools. Trigger a critical alert on any match.",
              "Statistical Analysis: Analyze the parent-child process relationships for processes that modify the LSA registry key. Profile common benign chains (e.g., `svchost.exe` -> `TrustedInstaller.exe`). Flag any modification to the LSA key originating from a statistically rare parent-child process pair (e.g., `powershell.exe` -> `reg.exe`), as this indicates an unusual execution chain.",
              "Machine Learning: Train a classifier to score the maliciousness of the process modifying the LSA key. Use features like: process name, parent process name, command-line argument entropy, and user context. A model trained on known malicious and benign events can predict the likelihood that a new modification is part of a privilege escalation attempt."
            ]
          },
          {
            "description": "A write attempt to the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Authentication Packages` key contains a DLL path located in a user-writable or temporary directory.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Endpoints",
            "action": [
              "Symbolic Logic: For each Windows Event ID 4657 on the LSA key, parse the new value being written. Use regular expressions to match against a list of non-standard directory paths (e.g., `C:\\Users\\`, `C:\\Temp\\`, `C:\\Windows\\Temp\\`, `%APPDATA%`). Alert on any match.",
              "Statistical Analysis: For all DLL paths written to the LSA key, calculate the string entropy of the path and filename. Establish a baseline for normal paths (e.g., `C:\\Windows\\System32\\kerberos.dll`). Alert on any new path whose entropy score is a statistical outlier (e.g., exceeds the 95th percentile of all observed paths), as this may indicate a randomized name.",
              "Machine Learning: Use an unsupervised learning model, like an autoencoder, trained on the file paths of all legitimate DLLs. The model learns to reconstruct legitimate paths with low error. When a new, suspicious path (e.g., `C:\\Users\\admin\\AppData\\Local\\Temp\\msv2_0.dll`) is input, the model will have a high reconstruction error, flagging it as an anomaly."
            ]
          },
          {
            "description": "Following a suspicious modification to the LSA `Authentication Packages` key, the host initiates network activity consistent with lateral movement or C2 communication.",
            "data_sources": [
              "Windows Event ID 4657",
              "Zeek conn.log",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers",
            "action": [
              "Symbolic Logic: Correlate a modification to the LSA key (Event ID 4657) with subsequent network connections from that host. Alert if the host initiates connections to destination IPs on a C2 threat intelligence list. Also, monitor Zeek `dce_rpc.log` for RPC calls like `lsass`, `samr`, or `atsvc` from the host, indicating lateral movement attempts.",
              "Statistical Analysis: After an LSA key modification, monitor the host's network activity in Zeek `conn.log`. Establish a baseline for the number of unique internal hosts contacted by an endpoint over one hour. Use a percentile threshold (e.g., 99th percentile) to detect a sudden spike in unique internal connections, which indicates lateral movement scanning.",
              "Machine Learning: Use a graph-based anomaly detection algorithm to model normal east-west traffic. Nodes are hosts and edges are connections. After a suspected privilege escalation on a host (LSA key modification), monitor for new edges created by that host's node. The model can flag anomalous new connections, such as a user endpoint suddenly communicating with multiple domain controllers over RPC."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]