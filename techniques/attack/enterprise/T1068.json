[
  {
    "information_requirement": "Has the adversary exploited a software vulnerability to achieve privilege escalation?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1068",
        "name": "Exploitation for Privilege Escalation",
        "evidence": [
          {
            "description": "A driver (.sys), executable (.exe), or library (.dll) file is created on disk, and its file hash matches a known-vulnerable driver or a known privilege escalation exploit payload.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 15"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (e.g., Domain Controllers, database servers), user workstations, temporary file directories (e.g., C:\\Windows\\Temp, %TEMP%)",
            "action": [
              "Create a SIEM rule to monitor Sysmon Event ID 11 (FileCreate) and Sysmon Event ID 15 (FileCreateStreamHash) events. For each created .exe, .dll, or .sys file, compute its hash (SHA256, MD5) and compare it against a threat intelligence feed of known vulnerable drivers (BYOVD) and exploit payloads. Trigger a high-severity alert on any match.",
              "Implement a statistical analysis of Sysmon Event ID 11 data to establish a baseline of common file names and creation paths for .sys, .dll, and .exe files. Calculate the frequency of each file name and path combination across the enterprise. Flag files created with names or in locations that fall below a low percentile threshold (e.g., 1st percentile) as anomalous and requiring further investigation.",
              "Train a machine learning classification model (e.g., Random Forest, Gradient Boosting) on features extracted from portable executable (PE) files, including file entropy, imported and exported functions, section characteristics, and digital certificate validity. Deploy the model to classify newly created drivers, DLLs, and executables as 'benign' or 'potentially malicious/vulnerable' and generate an alert for items classified with a high probability of being malicious."
            ]
          },
          {
            "description": "A process is created with command-line arguments containing keywords, patterns, or RPC calls associated with known privilege escalation tools or techniques (e.g., PrintNightmare, Juicy Potato).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, Domain Controllers, network traffic to/from print servers and domain controllers",
            "action": [
              "Develop a detection rule using regular expressions to search command-line arguments in Sysmon Event ID 1 and Windows Event ID 4688 for known exploit tool strings (e.g., 'juicypotato', 'printnightmare', 'godpotato') and post-exploitation commands (e.g., 'privilege::debug', 'sekurlsa::logonpasswords'). Correlate host-based alerts with network observations from Zeek dce_rpc.log for specific RPC calls like 'RpcAddPrinterDriverEx' to increase confidence.",
              "For all process creation events (Sysmon Event ID 1), calculate the Shannon entropy of the command-line arguments. Establish a per-process baseline for normal command-line entropy (e.g., the average and standard deviation for 'svchost.exe' commands). Generate an alert when a command's entropy significantly exceeds the established baseline (e.g., > 3 standard deviations), indicating potential obfuscation or complex exploit strings.",
              "Implement a sequence analysis model (e.g., Hidden Markov Model or LSTM) to learn common sequences of commands initiated by users and system processes. Train the model on historical Sysmon Event ID 1 data, using the 'ProcessGuid' to track command chains. Deploy the model to flag command sequences that have a low probability of occurring based on the learned model, as this can indicate an adversary executing an unfamiliar chain of commands post-exploitation."
            ]
          },
          {
            "description": "A high-privilege parent process (e.g., services.exe, lsass.exe, wininit.exe) spawns a child process that is inconsistent with its established baseline behavior, such as creating a command shell or an executable from a temporary directory.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, critical application servers, administrative workstations",
            "action": [
              "Create a SIEM rule with a static list of allowed child processes for critical system parent processes (e.g., 'lsass.exe', 'services.exe', 'wininit.exe'). Trigger a high-severity alert for any process creation event (Sysmon Event ID 1, Windows Event ID 4688) where one of these parent processes spawns a child process not on its explicit allow-list (e.g., 'lsass.exe' spawning 'cmd.exe').",
              "From historical Sysmon Event ID 1 data, build a frequency table of all parent-child process relationships observed in the environment. Calculate the prevalence of each specific relationship (e.g., 'services.exe' -> 'svchost.exe'). Generate a medium-severity alert when a parent-child relationship is observed that falls into a low-frequency percentile (e.g., below the 0.1st percentile), indicating a rare and potentially suspicious event.",
              "Train an anomaly detection model, such as a one-class SVM or an autoencoder, on normal parent-child process relationships. Use features from process creation events, including parent process name, child process name, user context, and command line properties. The model will learn a boundary of normal behavior and flag any new process creation events that fall outside this boundary as anomalous."
            ]
          },
          {
            "description": "A process creation event shows a child process with a higher integrity level than its parent, or a process access event shows a low-privilege process requesting high-privilege access rights to a critical system process (e.g., lsass.exe).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those with EDR agents capable of capturing process access events",
            "action": [
              "Create a high-fidelity SIEM rule to analyze Sysmon Event ID 1 (ProcessCreate) events. Trigger an immediate alert on any event where the 'IntegrityLevel' of the child process is higher than the 'IntegrityLevel' of the parent process (e.g., a process with 'IntegrityLevel: Medium' spawns a child with 'IntegrityLevel: High'), as this is a strong indicator of a UAC bypass.",
              "Analyze Sysmon Event ID 10 (ProcessAccess) events to build a statistical baseline. For each source process ('SourceImage'), calculate the frequency of its target processes ('TargetImage'). Alert when a 'SourceImage' accesses a 'TargetImage' that is statistically rare (e.g., 'winword.exe' accessing 'lsass.exe'). Additionally, baseline the 'GrantedAccess' codes for common process interactions and alert on deviations, such as a process requesting '0x1F0FFF' (PROCESS_ALL_ACCESS) when it normally does not.",
              "Develop a classification model (e.g., Gradient Boosting) to predict malicious process access. Use Sysmon Event ID 10 data as input, with features such as 'SourceImage', 'TargetImage', 'User', and a one-hot encoded representation of the 'GrantedAccess' code. Train the model using labeled data of known malicious access patterns (from threat reports) and known benign patterns (from baselining). Use the model to score new access events in real-time."
            ]
          },
          {
            "description": "A sequence of discrete events occurs within a short time window under a single user or process context, forming a logical chain of post-privilege escalation activity (e.g., user creation, group modification, service creation).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Windows Event ID 4720",
              "Windows Event ID 4728",
              "Windows Event ID 4732"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, and Administrator Workstations",
            "action": [
              "Create a stateful detection rule that correlates events tied to the same 'LogonId' (from Windows Events) or 'ProcessGuid' (from Sysmon) within a short timeframe (e.g., 5 minutes). Trigger a high-severity alert if a specific sequence completes, such as: 1) 'cmd.exe' process created (Sysmon Event ID 1), followed by 2) A new user account created (Windows Event ID 4720), and then 3) The new user is added to a privileged group like 'Domain Admins' (Windows Event ID 4728) or 'Administrators' (Windows Event ID 4732).",
              "Implement a time-decaying risk scoring model for each process ('ProcessGuid') and user ('LogonId'). Assign and increment scores for suspicious actions: +10 for user creation (Event ID 4720), +25 for adding to a privileged group (Event ID 4728/4732), +5 for writing a file to 'System32' (Sysmon Event ID 11). If an entity's cumulative score exceeds a statistically determined threshold (e.g., the 99th percentile of all entity scores) within a 10-minute window, generate an alert.",
              "Use time-series analysis on event logs grouped by host. Train an LSTM autoencoder model on sequences of event IDs and their key attributes from a normal operational baseline. This model learns the typical temporal patterns of system activity. Feed live event streams into the model and flag sequences that produce a high reconstruction error, as this indicates a significant deviation from normal behavior that may represent a post-privilege escalation activity chain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]