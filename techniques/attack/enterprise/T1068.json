[
  {
    "information_requirement": "Has the adversary exploited a software vulnerability to achieve privilege escalation?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1068",
        "name": "Exploitation for Privilege Escalation",
        "evidence": [
          {
            "description": "A file is created with a hash matching a known privilege escalation exploit payload or a vulnerable driver used in a Bring Your Own Vulnerable Driver (BYOVD) attack.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 15"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (e.g., Domain Controllers, database servers), user workstations, temporary file directories (e.g., C:\\Windows\\Temp, %TEMP%)",
            "action": [
              "Symbolic: Monitor Sysmon Event ID 11 (FileCreate) and Sysmon Event ID 15 (FileCreateStreamHash) events. Compute the SHA256 hash of each created executable (.exe), dynamic-link library (.dll), or driver (.sys) file. Compare these hashes against a threat intelligence feed of known vulnerable drivers and exploit payloads. Generate a high-severity alert for any match.",
              "Statistical: Analyze Sysmon Event ID 11 data to establish a baseline of common file names and creation paths for .sys, .dll, and .exe files. Calculate the frequency of each file name and path combination across the enterprise. Flag files created with names or in locations that fall below a low percentile threshold (e.g., 1st percentile) for further investigation, as adversaries may use custom names to evade simple signature-based detection.",
              "Machine Learning: Develop a machine learning classification model (e.g., Random Forest) trained on features extracted from portable executable (PE) files, including file entropy, import/export table functions, section names and sizes, and certificate information. Use the model to classify newly created drivers, DLLs, and executables as 'benign' or 'potentially malicious/vulnerable', flagging those with a high probability score of being malicious."
            ]
          },
          {
            "description": "A process is created with command-line arguments or patterns indicative of exploit execution or post-privilege escalation activity.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, Domain Controllers, network traffic to/from print servers and domain controllers",
            "action": [
              "Symbolic: Using Sysmon Event ID 1 and Windows Event ID 4688, create a detection rule that uses regular expressions to search command-line arguments for known exploit tool strings (e.g., `juicypotato`, `printnightmare`), post-exploitation commands (`privilege::debug`, `sekurlsa::logonpasswords`), or suspicious service/registry modifications (`sc create`, `reg add HKLM`). Correlate with Zeek dce_rpc.log to detect specific RPC calls like `RpcAddPrinterDriverEx` used in PrintNightmare exploits.",
              "Statistical: For all process creation events (Sysmon Event ID 1), calculate the Shannon entropy of the command-line arguments. Establish a per-process baseline for command-line entropy (e.g., the average entropy for `svchost.exe` commands). Alert on instances where the entropy significantly deviates from the norm (e.g., > 3 standard deviations), as obfuscated or complex exploit strings often have higher entropy.",
              "Machine Learning: Implement a sequence analysis model (e.g., Hidden Markov Model or LSTM) to learn common sequences of commands executed by users and system processes. Train the model on historical Sysmon Event ID 1 data, focusing on the `ProcessGuid` to track command chains. Flag command sequences that have a low probability of occurring based on the learned model, as this can indicate an adversary executing an unfamiliar chain of commands post-exploitation."
            ]
          },
          {
            "description": "A high-privilege system process (e.g., services.exe, lsass.exe, wininit.exe) spawns an unexpected or rare child process, such as a command shell or an executable in a temporary directory.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, critical application servers, administrative workstations",
            "action": [
              "Symbolic: Define a static list of allowed child processes for critical system parent processes like `lsass.exe`, `services.exe`, and `wininit.exe`. Create a SIEM rule that triggers an alert for any process creation event (Sysmon Event ID 1) where one of these parent processes spawns a child process not on its explicit allow-list (e.g., `lsass.exe` spawning `cmd.exe`).",
              "Statistical: From historical Sysmon Event ID 1 data, build a frequency table of all parent-child process relationships observed in the environment. Calculate the prevalence of each relationship (e.g., `services.exe` -> `svchost.exe`). Generate a medium-severity alert when a parent-child relationship is observed that falls into a low-frequency percentile (e.g., less than the 0.1st percentile), indicating a rare and potentially suspicious event.",
              "Machine Learning: Use a one-class SVM or an autoencoder to model normal parent-child process relationships. Train the model on features from process creation events, including parent process name, child process name, user context, and command line properties. The model will learn a boundary of normal behavior and flag any new process creation events that fall outside this boundary as anomalous."
            ]
          },
          {
            "description": "A process is created with a higher integrity level than its parent process, or a lower-privilege process accesses the memory of a higher-privilege process.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those with EDR agents capable of capturing process access events",
            "action": [
              "Symbolic: Create a SIEM rule to analyze Sysmon Event ID 1 (ProcessCreate) events. Alert on any event where the `IntegrityLevel` of the child process is higher than the `IntegrityLevel` of the parent process (e.g., a process with `IntegrityLevel: Medium` spawns a child with `IntegrityLevel: High`). This is a strong indicator of UAC bypass or token manipulation.",
              "Statistical: Analyze Sysmon Event ID 10 (ProcessAccess) events. For each `SourceImage` (process requesting access), calculate the frequency of its `TargetImage` (process being accessed). Alert when a `SourceImage` accesses a `TargetImage` that is statistically rare (e.g., `word.exe` accessing `lsass.exe`). Additionally, baseline the `GrantedAccess` codes for common process interactions and alert on deviations, such as a process suddenly requesting `0x1F0FFF` (PROCESS_ALL_ACCESS).",
              "Machine Learning: Develop a classification model (e.g., Gradient Boosting) to predict malicious process access. Use Sysmon Event ID 10 data as input, with features such as `SourceImage`, `TargetImage`, `User`, and the one-hot encoded `GrantedAccess` code. Label known malicious access patterns (e.g., from threat reports) and known benign patterns (from baselining). The model will score new access events in real-time, flagging those classified as malicious."
            ]
          },
          {
            "description": "A single process or user session performs a rapid sequence of actions characteristic of post-privilege escalation, such as creating a new user, adding the user to a privileged group, and modifying system configuration.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Windows Event ID 4720",
              "Windows Event ID 4732"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, and Administrator Workstations",
            "action": [
              "Symbolic: Create a stateful detection rule that looks for a specific sequence of events tied to the same `LogonId` (from Windows Events) or `ProcessGuid` (from Sysmon) within a short timeframe (e.g., 5 minutes). An example sequence is: 1) `cmd.exe` process created (Sysmon Event ID 1), 2) New user account created (Windows Event ID 4720), 3) New user added to 'Administrators' group (Windows Event ID 4732). Trigger an alert if the full sequence completes.",
              "Statistical: For each process (identified by `ProcessGuid`), assign a risk score. Increment the score for suspicious actions: +10 for user creation (Event ID 4720), +20 for adding to a privileged group (Event ID 4732), +5 for writing to `System32` (Sysmon Event ID 11). If a process's cumulative, time-decaying score exceeds a statistically determined threshold (e.g., the 99th percentile of all process scores) within a 10-minute window, generate an alert.",
              "Machine Learning: Use time-series analysis on event logs grouped by host. Train a model (like an LSTM autoencoder) on sequences of event IDs and their key attributes from a normal operational baseline. The model learns the typical temporal patterns of system activity. Feed live event streams into the model and flag sequences that yield a high reconstruction error, indicating a significant deviation from normal behavior that may represent a post-privilege escalation activity chain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]