[
  {
    "information_requirement": "Is the adversary attempting to evade defensive measures by detecting debuggers?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1622",
        "name": "Debugger Evasion",
        "evidence": [
          {
            "description": "A process, not associated with software development or system administration, accesses registry keys or file system artifacts related to known debuggers (e.g., x64dbg, OllyDbg, WinDbg, IDA Pro).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 12 (Sysmon)",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard user workstations, Production servers, Critical application servers",
            "action": [
              "Create a detection rule that alerts when a process creation event (Sysmon Event ID 1) command line contains strings like 'reg query' or 'dir' targeting debugger paths, OR a registry event (Sysmon Event ID 12/13) shows access to a `TargetObject` path containing a known debugger registry key (e.g., `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<debugger.exe>`). Exclude known legitimate processes.",
              "For each process name, establish a baseline of registry keys and file paths it typically accesses. Using Sysmon events (11, 12, 13), calculate the access frequency for debugger-related artifacts. Alert on any process whose access frequency to these artifacts exceeds the 99th percentile for its peer group (e.g., other processes running from the same path or with the same name).",
              "Train a classification model (e.g., Random Forest) using features from process and registry events: process name, parent process name, file path entropy, command-line arguments, and a one-hot encoded vector of accessed registry hive paths. The model will predict the likelihood that the combined activity is malicious based on known labeled data."
            ]
          },
          {
            "description": "A process executes and terminates in under one second after loading modules like 'kernel32.dll' or 'ntdll.dll', a pattern consistent with an API-based anti-debug check.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 5 (Sysmon)",
              "Windows Event ID 7 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Virtual Desktop Infrastructure (VDI) instances, Security analysis sandbox environments",
            "action": [
              "Using a SIEM, create a rule that correlates events by `ProcessGuid`. Trigger an alert if a Sysmon Event ID 7 (Image Load) for 'kernel32.dll' or 'ntdll.dll' is followed by a Sysmon Event ID 5 (Process Terminate) for the same `ProcessGuid` within a 1-second window. Increase severity if the process image is unsigned or resides in a temporary user directory (e.g., '%APPDATA%', '%TEMP%').",
              "Continuously calculate the 1st percentile for process lifetimes across the enterprise using Sysmon Event IDs 1 and 5. Any new or rare process name whose median lifetime falls into this bottom percentile for more than one instance should be flagged for investigation as a potential 'check-and-exit' binary.",
              "Implement a clustering algorithm (e.g., DBSCAN) on process execution data. Use features such as process lifetime, count of loaded DLLs, parent process name, and file path string entropy. Investigate clusters of short-lived processes that are separate from the large, dense clusters of known legitimate software installers or scripts."
            ]
          },
          {
            "description": "A parent process spawns a known debugger process (e.g., ntsd.exe, cdb.exe) and the debugger's command line targets the Parent Process ID (PPID).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers",
            "action": [
              "Create a critical-severity alert that triggers when a process creation event (Sysmon Event ID 1) shows a known debugger process being created, and its command line contains a flag like '-p' or '-pd' followed by the `ParentProcessId` from the same event log. This indicates a process attempting to debug its own parent.",
              "Analyze the frequency of parent-child process relationships where the child is a known debugger. In a typical production environment, the baseline for a process spawning a debugger to attach to its parent is zero. Any occurrence of this event is a statistically significant anomaly warranting immediate investigation.",
              "Utilize a graph database to model process relationships. Define a specific, high-risk graph pattern where a node 'A' creates a child node 'B' (a known debugger process) and an edge attribute on 'A->B' indicates that B's command line targets A's process ID. Continuously query the graph for this specific subgraph pattern and alert on any match."
            ]
          },
          {
            "description": "A non-debugger process raises and handles a single-step (STATUS_SINGLE_STEP) or illegal instruction exception, a pattern used to detect a debugger's presence by observing the exception handling flow.",
            "data_sources": [
              "EDR Telemetry (Exception Events)",
              "Windows Event ID 1000 (Application Error)",
              "Windows Event ID 1001 (Windows Error Reporting)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, especially those not used for software development",
            "action": [
              "Create a rule to alert on any process that generates an exception event with code `0x80000004` (STATUS_SINGLE_STEP) but does not subsequently terminate and is not a known, whitelisted debugger or development tool.",
              "For each executable name, baseline the rate of handled vs. unhandled exceptions. Flag any process that shows a statistically significant increase in the ratio of handled-to-unhandled exceptions, particularly for exception codes related to debugging (e.g., single-step, breakpoints), as this suggests intentional exception generation rather than a genuine crash.",
              "Train an anomaly detection model (e.g., Autoencoder) on sequences of system events for each process. The feature set should include exception codes, process termination status, and loaded modules. Flag sequences where a debugging-related exception occurs without a subsequent termination event as anomalous."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary performing discovery by checking for analysis environments like debuggers?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1622",
        "name": "Debugger Evasion",
        "evidence": [
          {
            "description": "A process is created from an executable whose file hash (SHA256, MD5) matches a known malware sample that, according to threat intelligence, uses debugger detection techniques.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Email gateways, Web proxies",
            "action": [
              "For every process creation event (Sysmon Event ID 1), automate a real-time lookup of the `Hashes` field against a threat intelligence platform. Generate a critical alert on any match. Enrich the alert with intelligence data, specifically flagging capabilities like 'Debugger-Evasion' or 'Anti-Analysis'.",
              "Maintain a database of all file hashes seen in the environment and their prevalence (host count). Any hash that is 'first seen' in the enterprise or has a prevalence of less than 5 hosts should be automatically submitted for threat intelligence lookup. This prioritizes rare and potentially new threats.",
              "Deploy a pre-trained static file classifier (e.g., a gradient-boosted model) that scores new executables based on PE header information, section entropy, and string analysis. High-scoring (likely malicious) files should have their hashes automatically looked up in threat intelligence feeds to confirm and gather context."
            ]
          },
          {
            "description": "A single parent process spawns multiple child processes in under 30 seconds that execute commands to enumerate running processes, especially searching for names of known debuggers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Domain Controllers",
            "action": [
              "Create a rule that triggers when a single `ParentProcessGuid` (Sysmon Event ID 1) is associated with more than three process creation events in 30 seconds, where the child process `CommandLine` contains any string from a watchlist: 'tasklist', 'wmic process get', 'Get-Process', 'pgrep', 'ps', and names of debuggers like 'x64dbg', 'windbg', 'idaq'.",
              "For each `ParentProcessGuid`, count the number of child processes spawned within a 1-minute window whose command lines match a regex for discovery tools. Establish a baseline for legitimate administrative scripts. Alert when a parent process exceeds the 99th percentile for this count, indicating an anomalous burst of discovery activity.",
              "Use sequence analysis on command-line executions per user/host session. Train a model (e.g., Markov Chain or LSTM) on normal command sequences. Flag any observed sequence that has a very low probability of occurring based on the trained model, particularly if it contains a rapid succession of process enumeration commands."
            ]
          },
          {
            "description": "A single host exhibits a correlated sequence of events within a 5-minute window: (1) execution of host-based discovery commands that include debugger or analysis tool checks, followed by (2) internal network connection attempts, and (3) unusual internal DNS queries.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches (for SPAN/TAP port), DNS servers, All Windows endpoints and servers",
            "action": [
              "Define a stateful correlation rule that triggers an alert when the following sequence occurs from the same source IP within 5 minutes: [1] A Windows Event ID 4688 with 'tasklist' or 'wmic process get', [2] Zeek conn.log events showing connections to >10 unique internal IPs on a common service port (e.g., 445, 139, 3389), AND [3] Zeek dns.log events showing a high ratio of NXDOMAIN responses for internal TLDs.",
              "For each host, compute a 'Discovery and Lateral Movement Score' over a rolling 10-minute window. Increment the score for each discovery command, each unique internal IP:port combination contacted (from Zeek conn.log), and each NXDOMAIN DNS response. Weight the score based on the rarity of the command or port. Alert when a host's score exceeds 3 standard deviations above the enterprise mean.",
              "Model host behavior using a composite feature vector that includes: count of discovery commands, network scan fan-out (IPs contacted), network scan fan-in (ports contacted per IP), and DNS query statistics (e.g., NXDOMAIN ratio, query name entropy). Use an anomaly detection algorithm like Isolation Forest to identify hosts whose combined activity profile is abnormal compared to its historical baseline and its assigned peer group."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]