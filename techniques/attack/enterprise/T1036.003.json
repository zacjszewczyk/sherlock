[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by renaming legitimate utilities?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.003",
        "name": "Rename Legitimate Utilities",
        "evidence": [
          {
            "description": "A process executes with a filename that does not match its expected name, while its file hash (e.g., SHA256) corresponds to a known, legitimate system utility.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.",
            "action": [
              "Query process creation events (Sysmon Event ID 1) where the process file hash is present in a known-good hash list for legitimate utilities, but the process 'Image' field (the filename) does not match the expected filename for that hash. This requires a maintained lookup table of {Hash, ExpectedFilename} for utilities like 'powershell.exe', 'cmd.exe', 'rundll32.exe'.",
              "Over a 30-day baseline, for each legitimate utility hash, calculate the frequency distribution of all associated process names. For new process creation events, identify the hash and its corresponding process name. If the process name for that hash falls below a low-frequency threshold (e.g., the 1st percentile of observed names for that hash), flag it for review.",
              "Train a supervised classification model (e.g., Random Forest, XGBoost) on labeled process creation events. Use features such as: parent process name, command-line length, command-line entropy, and a binary feature indicating if the process name matches the expected name for its hash. Use the trained model to score new process events in real-time, classifying them as 'benign' or 'masquerading'."
            ]
          },
          {
            "description": "A process creation event shows a mismatch between the on-disk filename (e.g., 'update.exe') and the 'OriginalFilename' or 'InternalName' fields from the binary's embedded PE metadata (e.g., 'psexec.exe').",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with Sysmon configured to capture and log PE header information.",
            "action": [
              "Create a detection rule for process creation events (Sysmon Event ID 1) that triggers when the `Image` field (e.g., 'C:\\Temp\\audiodg.exe') does not match the `OriginalFileName` field from the PE metadata (e.g., 'psexec.exe'). Prioritize alerts where `OriginalFileName` is on a watchlist of commonly abused utilities (e.g., 'PsExec.exe', 'certutil.exe', 'procdump.exe').",
              "For each unique `OriginalFileName` observed across the enterprise, calculate the Shannon entropy of the set of all associated `Image` filenames. Establish a baseline entropy score for each. Alert when the entropy for a specific `OriginalFileName` on a given host exceeds a dynamic threshold (e.g., 2 standard deviations above the enterprise-wide average for that same `OriginalFileName`), suggesting it is being renamed with high variability.",
              "Develop an anomaly detection model using a one-class SVM or an autoencoder. Train the model on a baseline of known-good (Image, OriginalFileName) pairs from a stable period to learn the normal mapping. Apply the model to new process creation events; flag any pair that the model identifies as a high-error outlier, indicating an anomalous combination not seen in the baseline."
            ]
          },
          {
            "description": "A process with a generic or unexpected name (e.g., 'audiodg.exe') executes using command-line arguments that are highly characteristic of a specific, different legitimate utility (e.g., containing '-enc' for PowerShell).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with command-line process auditing enabled.",
            "action": [
              "Query all process creation events (Windows Event ID 4688 or Sysmon Event ID 1) for command-line arguments matching a library of regular expressions for abused utilities (e.g., 'powershell.exe -enc', 'certutil.exe -urlcache', 'rundll32.exe javascript:'). Generate an alert if the process name in the event is not the expected utility for that command-line pattern (e.g., a command with '-enc' is executed by 'svchost.exe' instead of 'powershell.exe').",
              "For each command-line pattern from the symbolic rule, build a frequency table of the process names that have executed it historically. For new executions, if a process name is not in the top 99% of most frequent names for that specific command-line pattern, flag it as a statistical outlier. This can detect when a common command pattern is executed by a rare or first-seen process name.",
              "Vectorize command-line arguments from all process creation events using a TF-IDF or embedding model. Apply a density-based clustering algorithm (e.g., DBSCAN) to group semantically similar commands. For each resulting cluster, analyze the diversity of process names. A cluster with high command-line similarity but high process name diversity (high entropy) is a strong candidate for a group of renamed utility executions and should be investigated."
            ]
          },
          {
            "description": "A file with a name matching a legitimate system utility (e.g., 'svchost.exe') is created in a non-standard file path (e.g., 'C:\\Users\\Public\\') and is subsequently executed from that path.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\\Temp, C:\\ProgramData), and world-writable directories.",
            "action": [
              "Maintain a lookup table mapping critical system executables ('svchost.exe', 'lsass.exe', etc.) to their legitimate, standard directories ('C:\\Windows\\System32\\'). Create a rule to alert on any process creation event (Sysmon Event ID 1) where the process name is on the list but its path is not in the allowed set. Increase alert severity if a preceding file creation event (Sysmon Event ID 11) for the same file is observed in that non-standard path within a short time window.",
              "For each process name (e.g., 'powershell.exe'), build a historical baseline of all its execution paths across the enterprise. For each new process execution, compare its path to the baseline for that process name. If the path falls into a low-frequency percentile (e.g., bottom 1%), flag it as an anomalous execution path for that binary.",
              "For each host, create a daily time series of the count of critical system utilities executed from non-standard paths (e.g., paths outside 'C:\\Windows\\'). Train a time-series anomaly detection model (e.g., SARIMA or Prophet) on this data. A sudden spike in the count that is flagged as an anomaly by the model indicates a potential burst of malicious activity on that host."
            ]
          },
          {
            "description": "A process, previously identified as a renamed utility, subsequently spawns a command shell or initiates an external network connection to an unusual destination.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.",
            "action": [
              "Create a stateful detection rule. First, tag a process as 'suspected_masquerade' if it triggers any of the previous hash, PE, or path-based symbolic rules. Then, alert with high severity if this 'suspected_masquerade' process (as a parent) spawns a child process of 'cmd.exe' or 'powershell.exe' (Sysmon EID 1), or initiates a network connection (Sysmon EID 3, Zeek conn.log) to a destination IP on a threat intelligence feed.",
              "For any process flagged as 'suspected_masquerade', analyze its subsequent network activity (Zeek conn.log) and DNS requests (Zeek dns.log). Calculate the enterprise-wide rarity of the requested domain (e.g., using a public top 1M list) or the destination port. If the process connects to a domain in the bottom 1% of prevalence or uses a port outside the top 95% of commonly used ports, significantly increase its risk score.",
              "Construct process lineage graphs where nodes are processes and files, and edges are parent-child or file-modification relationships. Train a Graph Neural Network (GNN) or graph-based anomaly detection algorithm on benign process graphs. Apply the model to new process activity. Flag subgraphs as anomalous if they contain a node previously identified as a renamed utility that subsequently spawns a shell or makes a network connection to a node with a rare domain/IP."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]