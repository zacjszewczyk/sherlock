[
  {
    "information_requirement": "Is the adversary using compressed archives or compressed data to obfuscate payloads or exfiltrate data? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.015",
        "name": "Compression",
        "evidence": [
          {
            "description": "A compressed archive file (e.g., .zip, .rar, .7z) is observed in network traffic or created on a host, and its SHA256 hash matches an entry in a threat intelligence feed of known malicious files.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points (web proxies, email gateways), User endpoints, File servers",
            "action": [
              "Monitor Zeek files.log for transferred files and Windows Event ID 4663 for file creation/access events. For each file with a compressed archive extension (.zip, .rar, .7z, .gz), calculate its SHA256 hash. Query an IOC database or threat intelligence platform API with the hash. Generate a high-severity alert if a match is found.",
              "For files identified in Zeek files.log, aggregate filenames by count over a 30-day window. Identify filenames ending in a compressed file extension that fall below the 5th percentile of frequency (i.e., are rare). Correlate these rare filenames with source IPs or domains that have a low reputation score to prioritize for investigation.",
              "Develop and apply a time-series forecasting model (e.g., SARIMA) to the volume of compressed file transfers per hour, segmented by direction (inbound/outbound), using Zeek files.log. Generate an anomaly alert when the observed volume exceeds the 99% prediction interval, which may indicate a mass download of malicious archives or a data exfiltration event."
            ]
          },
          {
            "description": "A command-line execution of a compression utility (e.g., 7z.exe, rar.exe, tar) includes arguments associated with password protection, self-extraction, source file deletion, or archiving of sensitive system directories.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Servers (especially those accessible by users or web applications), Domain Controllers",
            "action": [
              "Create a detection rule to monitor Windows Event ID 4688 and Sysmon Event ID 1 for process creation. Use regular expressions to search the command line field for executions of common compression tools (7z.exe, rar.exe, tar, zip.exe) combined with suspicious flags like `-p` (password), `-sfx` (self-extracting archive), `-sdel` (delete source files), or outputting to unusual directories like C:\\Users\\Public\\ or C:\\Windows\\Temp\\.",
              "For each host and user combination, build a historical set of unique command-line argument combinations used with known compression utilities. For each new execution, calculate the Jaccard similarity score between its argument set and the historical set for that entity. Flag any execution with a score below the 10th percentile as a behavioral outlier for review.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on labeled command-line data. Extract features such as: presence of password flags, use of self-extraction flags, length of the command line, Shannon entropy of the command string, and the target file/directory path category (e.g., system, user, temp). Deploy the model to classify new compression utility command lines as benign or malicious in real-time."
            ]
          },
          {
            "description": "A sequence of correlated events occurs on a single host within a short time window (e.g., under 5 minutes): 1) A compressed archive is downloaded from the internet, 2) a process is created to decompress the archive, and 3) a new executable process is spawned from a temporary or user-writable directory by the decompression process.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Network ingress points, DMZ servers",
            "action": [
              "Create a stateful SIEM correlation rule. The rule should trigger when a Zeek files.log event shows a downloaded archive. Within 5 minutes on the same host (identified by IP address), the rule must observe a Windows Event ID 4688 event for a compression utility process, followed by another 4688 event where the parent process is the compression utility and the child process is an executable running from a temporary directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public\\). Generate an alert on this full sequence.",
              "For each host, analyze the time delta between a file download event (from Zeek files.log) and a subsequent process execution event (from Windows Event ID 4688). Calculate the baseline probability distribution of these time deltas. Flag any 'download-then-execute' sequence where the time delta falls into a low-probability bin (e.g., less than 60 seconds), as this is characteristic of automated or scripted user activity.",
              "Construct a security event graph where nodes are hosts, files, and processes. Create directed edges representing events (e.g., 'downloads' from Zeek conn.log, 'creates' from Windows Event ID 4663, 'executes' from Windows Event ID 4688). Use a graph-based anomaly detection algorithm to identify and score subgraphs that match the 'download-extract-execute' pattern. Score patterns based on features like file hash rarity, process lineage, and execution path reputation."
            ]
          },
          {
            "description": "A command line for an interpreter (e.g., powershell.exe, cmd.exe, wscript.exe) contains a string with a Shannon entropy score significantly higher than its established baseline, indicating the presence of packed or compressed shellcode.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Domain Controllers, Application servers",
            "action": [
              "Create a detection rule to scan the command lines in Windows Event ID 4688 and Sysmon Event ID 1. Use a regular expression to find long Base64-encoded strings (`[A-Za-z0-9+/=]{100,}`) or keywords related to in-memory decompression like `[System.IO.Compression.DeflateStream]` or `FromBase64String` within PowerShell commands.",
              "For each unique process name (e.g., powershell.exe, cmd.exe), establish a rolling 30-day baseline of command-line entropy scores from Windows Event ID 4688. For each new command, calculate its Shannon entropy. Generate an alert if the entropy score exceeds the 99th percentile for that specific process's baseline, indicating a statistically significant deviation.",
              "Implement an unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) on features extracted from process command lines. Use features including: entropy, command length, ratio of non-alphanumeric characters, character frequency distribution, and the presence of encoding keywords. The model will learn the manifold of 'normal' command lines and flag any new instance that is a significant outlier, often corresponding to obfuscated or compressed code."
            ]
          },
          {
            "description": "A compressed archive transferred over the network exhibits a combination of suspicious attributes, such as a low compression ratio (e.g., >0.9), a double file extension (e.g., 'invoice.pdf.zip'), being password-protected, or being transferred over a non-standard port.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points, DMZ",
            "action": [
              "Create a SIEM rule to analyze Zeek files.log and conn.log data. The rule should flag any file transfer where the filename matches a regex for double extensions (e.g., `\\.[a-z]{3,4}\\.(zip|rar|7z)$`), the `is_password_protected` field from files.log is true, and the destination port in conn.log is not 80 or 443. An alert should be generated if two or more of these conditions are met.",
              "Using Zeek files.log, calculate the compression ratio (seen_bytes / total_bytes) for all transferred archives. Establish a baseline distribution of this ratio for common MIME types (e.g., application/zip). Flag any archive with a ratio in the top 5th percentile (e.g., > 0.95), suggesting its content is not highly compressible (like previously encrypted data). Escalate priority if the associated Zeek conn.log entry shows the transfer occurred on a non-standard port.",
              "Apply a clustering algorithm (e.g., DBSCAN) to file transfer events, using features from Zeek files.log and conn.log. Features should include: compression ratio, a binary flag for password protection, a binary flag for double extension, MIME type, and the IANA service name of the destination port. Identify and investigate small clusters or points classified as noise, as these represent multi-dimensionally anomalous transfers that do not conform to common network behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]