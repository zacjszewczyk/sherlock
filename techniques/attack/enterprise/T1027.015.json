[
  {
    "information_requirement": "Is the adversary using compressed archives or compressed data to obfuscate payloads or exfiltrate data? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.015",
        "name": "Compression",
        "evidence": [
          {
            "description": "A compressed archive file (e.g., .zip, .rar, .7z) is created or transferred, and its hash (SHA256, MD5) matches an entry in a threat intelligence feed of known malicious files.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points (web proxies, email gateways), User endpoints, File servers",
            "action": [
              "Symbolic (IOC Match): Continuously monitor Zeek files.log for transferred files and Windows Event ID 4663 for file creation events. For every file with a compressed archive extension (.zip, .rar, .7z, etc.), calculate its SHA256 hash. Compare the calculated hash against a curated list of known malicious file hashes from threat intelligence feeds. Generate a high-severity alert upon a match.",
              "Statistical (Frequency Analysis): For files identified in Zeek files.log, perform frequency analysis on filenames across the enterprise. Isolate filenames that are rare (e.g., appear fewer than 5 times in 30 days) and end in a compressed file extension. Correlate these rare filenames with low-reputation source IPs or domains to increase confidence and prioritize for investigation.",
              "Machine Learning (Time-Series Anomaly Detection): Develop a time-series model (e.g., ARIMA) to forecast the expected volume of compressed file transfers per hour from Zeek files.log, segmented by direction (inbound/outbound). Alert when the observed volume significantly exceeds the forecasted upper confidence interval, which could indicate a mass download of malicious archives or a data exfiltration event."
            ]
          },
          {
            "description": "A command-line execution of a known compression utility (e.g., 7z.exe, rar.exe, tar) includes arguments associated with obfuscation or staging, such as password protection, self-extraction, or source file deletion.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Servers (especially those accessible by users or web applications), Domain Controllers",
            "action": [
              "Symbolic (Pattern Matching): Monitor Windows Event ID 4688 for process creation events. Use regular expressions to search the command line field for executions of common compression tools (7z.exe, rar.exe, tar, etc.) combined with suspicious flags like `-p` (password), `-sfx` (self-extracting archive), `-sdel` (delete source files), or outputting to sensitive/unusual directories like C:\\Windows\\Temp\\.",
              "Statistical (Outlier Detection): For each host, establish a baseline of normal command-line arguments used with compression utilities. Calculate the Jaccard similarity between a new command-line's argument set and the historical baseline for that host/user. A low similarity score (e.g., below the 5th percentile) indicates anomalous usage and should be flagged for review.",
              "Machine Learning (Classification): Train a classification model (e.g., Random Forest) using features extracted from command lines of compression tools. Features should include: presence of password flags, presence of self-extraction flags, length of the command line, entropy of the command line, and the file path being archived. Use the model to classify each new command as benign or suspicious in real-time."
            ]
          },
          {
            "description": "A chain of events on a single host within a short time window: 1) A compressed archive is transferred over the network, 2) a compression utility process is executed, and 3) a new process is spawned from a temporary or user-writable directory.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Network ingress points, DMZ servers",
            "action": [
              "Symbolic (Correlation Rule): Create a stateful correlation rule in the SIEM. Trigger on a Zeek files.log event for a downloaded archive. Within 5 minutes on the same host, look for a Windows Event ID 4688 event where a compression utility is the parent process and a new executable is the child process running from a temporary directory (%TEMP%, %APPDATA%). Alert on a confirmed sequence.",
              "Statistical (Time Delta Analysis): For a given host, analyze the time delta between a file download (from Zeek files.log) and a subsequent process execution (from Windows Event ID 4688). Calculate the baseline distribution of these time deltas. Flag sequences where the time delta falls into an anomalous, low-frequency bin (e.g., 10-30 seconds), as this is characteristic of automated script execution following a download.",
              "Machine Learning (Graph Analysis): Use a graph-based analysis model where hosts, files, and processes are nodes. Create edges based on events (download, create, execute). Apply a community detection algorithm to identify clusters of activity. Analyze clusters that represent the 'download-extract-execute' pattern and score them based on features like file rarity, process parent-child relationships, and execution location."
            ]
          },
          {
            "description": "A command line, particularly for an interpreter like PowerShell or cmd.exe, exhibits an unusually high Shannon entropy score, indicating the presence of packed or compressed shellcode for fileless execution.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Domain Controllers, Application servers",
            "action": [
              "Symbolic (Signature Match): Scan Windows Event ID 4688 command lines for long, Base64-encoded strings (e.g., using regex `[A-Za-z0-9+/=]{50,}`) often used to wrap compressed payloads, especially in commands involving `powershell -enc`.",
              "Statistical (Entropy Threshold): For each Windows Event ID 4688 event, calculate the Shannon entropy of the command-line string. Establish a per-process baseline (e.g., the 99th percentile entropy value for powershell.exe command lines over the last 30 days). Alert on any new command line whose entropy exceeds this dynamic threshold.",
              "Machine Learning (Anomaly Detection): Implement an anomaly detection model (e.g., Isolation Forest) on features extracted from command lines: entropy, length, ratio of non-alphanumeric characters, and character frequency distribution. The model will learn what 'normal' command lines look like and flag outliers that are statistically different, which often correspond to obfuscated or compressed code."
            ]
          },
          {
            "description": "A transferred compressed archive exhibits a combination of suspicious traits: a low compression ratio (indicating pre-encrypted content), a double file extension (e.g., 'file.pdf.zip'), password protection, or transfer over a non-standard port.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points, DMZ",
            "action": [
              "Symbolic (Rule-Based Logic): From Zeek files.log, create a rule to flag any file transfer where the filename matches a regex for double extensions (e.g., `\\.[a-z]{3,4}\\.zip$`) AND the `is_password_protected` field is true.",
              "Statistical (Ratio Analysis): Analyze Zeek files.log to calculate the compression ratio (seen_bytes / total_bytes). Establish a baseline for typical ratios for different MIME types. Flag archives with unusually low ratios (e.g., > 0.95), suggesting the content is not compressible (like encrypted data). Correlate with Zeek conn.log to escalate priority if the transfer occurs on a non-standard port for HTTP/FTP.",
              "Machine Learning (Clustering): Use a clustering algorithm (e.g., DBSCAN) on file transfers from Zeek files.log. Use features such as compression ratio, file extension, MIME type, password protection status, and the destination port from the associated Zeek conn.log entry. Identify and investigate small clusters or noise points, as these represent anomalous transfers that do not fit into the common patterns of network traffic."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]