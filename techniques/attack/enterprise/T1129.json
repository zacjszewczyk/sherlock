[
  {
    "information_requirement": "Has the adversary executed code by loading a malicious shared module? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1129",
        "name": "Shared Modules",
        "evidence": [
          {
            "description": "A module load event is recorded where the loaded module's hash (SHA256) matches a known malicious indicator, or its digital signature is associated with a known untrusted entity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers, Domain Controllers",
            "action": [
              "1) For symbolic logic, query Sysmon Event ID 7 logs where the module's hash (from the `Hashes` field, specifically SHA256) or the signer's name (from the `Signature` field) matches an entry on an integrated threat intelligence feed of malicious DLLs and untrusted signers.",
              "2) For statistical analysis, calculate the prevalence of each module signer across the enterprise over a 30-day baseline. Generate an alert for any module load where the signer's prevalence is below the 1st percentile, indicating extreme rarity and potential for being an unauthorized tool.",
              "3) For machine learning, use a pre-trained classification model (e.g., Gradient Boosting) on module metadata (signature status, signer, name entropy, path characteristics) to produce a 'maliciousness' score for each load event. Alert when this score exceeds a predefined confidence threshold."
            ]
          },
          {
            "description": "A module load event indicates a module was loaded from a network UNC path or a user-writable directory (e.g., %APPDATA%, %TEMP%), and the module is either unsigned or was created within the last 5 minutes.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers, Network File Shares",
            "action": [
              "1) For symbolic logic, define a set of high-risk path patterns, including UNC paths (`\\\\*`), user-writable directories (`C:\\Users\\*\\AppData\\*`, `C:\\ProgramData\\*`, `C:\\Windows\\Temp\\*`, `C:\\Perflogs\\*`), and web server directories (`C:\\inetpub\\wwwroot\\*`). Create a rule that alerts on any Sysmon Event ID 7 event where the `ImageLoaded` path matches a high-risk pattern AND the `Signed` field is 'false' or the `SignatureStatus` is not 'Valid'.",
              "2) For statistical analysis, establish a baseline of module load paths for each process name over a 30-day period. Calculate the z-score for the frequency of loads from high-risk locations per process. Alert when a process exhibits a z-score greater than 3.0 for loading from these paths, indicating a significant deviation from normal behavior.",
              "3) For machine learning, apply a time-series anomaly detection model (e.g., SARIMA) to the count of module loads from high-risk paths per host. Alert if the model detects a sudden spike that deviates significantly from the host's historical norm, suggesting a potential malware drop or lateral movement tool execution."
            ]
          },
          {
            "description": "A module load event shows a module being loaded from a directory path that is statistically rare for the loading process or for the entire environment, excluding standard system and program file paths.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers",
            "action": [
              "1) For symbolic logic, maintain an allow-list of standard module load directories (e.g., `C:\\Windows\\System32\\*`, `C:\\Windows\\SysWOW64\\*`, `C:\\Program Files\\*`, `C:\\Program Files (x86)\\*`). Create a query to alert on any module load (Sysmon Event ID 7) where the module's directory is not on this allow-list and the module is unsigned (`Signed` is 'false').",
              "2) For statistical analysis, for each running process, calculate the Shannon entropy of its module load directory paths over a rolling 24-hour window using the formula $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$. Alert if a process's path entropy score increases by more than 2 standard deviations from its own established baseline, indicating it is loading modules from an unusually diverse set of locations.",
              "3) For machine learning, use a clustering algorithm like DBSCAN on feature vectors of (process_name, module_load_path). Investigate any module load event that is classified as a noise point or outlier, as it represents a rare process-path combination not seen in normal operations."
            ]
          },
          {
            "description": "A module load event occurs for a file that was created on the same host within a 5-minute time window, especially if the creating process is a browser, office application, or script interpreter.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers",
            "action": [
              "1) For symbolic logic, create a correlation rule that triggers an alert when a Sysmon Event ID 11 (FileCreate) for a `.dll`, `.so`, or `.dylib` file is followed within 5 minutes by a Sysmon Event ID 7 (ImageLoad) for the same `TargetFilename` on the same host. Raise the alert's severity if the `ProcessGuid` from Event ID 11 corresponds to a process such as `powershell.exe`, `cscript.exe`, `wscript.exe`, `rundll32.exe`, `msedge.exe`, `chrome.exe`, `winword.exe`, or `excel.exe`.",
              "2) For statistical analysis, calculate the time delta between file creation (Sysmon EID 11) and module load (Sysmon EID 7) for all DLLs across the environment. Flag any load that falls in the 1st percentile of this time delta (shortest time between write and load) as high-risk, as it is characteristic of 'living off the land' droppers.",
              "3) For machine learning, use a sequence analysis model (e.g., Hidden Markov Model) trained on normal sequences of Sysmon events per host. Flag any event sequence with a low probability score, such as `chrome.exe` (process create) -> `payload.dll` (file create) -> `svchost.exe` (process) loads `payload.dll` (image load), as a highly anomalous chain of events."
            ]
          },
          {
            "description": "A sensitive system process (e.g., lsass.exe, svchost.exe, csrss.exe, winlogon.exe) loads a module whose name or path has not been previously observed for that process during a baseline period.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (e.g., Domain Controllers, Certificate Authorities), Enterprise Workstations",
            "action": [
              "1) For symbolic logic, for hyper-sensitive processes (`lsass.exe`, `csrss.exe`), create and maintain a strict allow-list of known-good DLL full paths based on a golden image. Implement a high-severity alert for any module load by these processes that is not on the explicit allow-list.",
              "2) For statistical analysis, for each sensitive process (e.g., `svchost.exe`), build a frequency map of all modules it loads over a 30-day baseline. Alert if the process loads a module whose frequency is in the bottom 5th percentile (or is not present in the baseline), indicating a 'first-seen' or 'rarely-seen' load for that specific service host group.",
              "3) For machine learning, use an autoencoder trained on feature vectors of normal module loads (e.g., path, signature, entropy) for a specific sensitive process. Flag any new load that produces a high reconstruction error, as it does not conform to the learned pattern of normality and may indicate injection or tampering."
            ]
          },
          {
            "description": "A process initiates an external network connection within 2 minutes of loading an unsigned module or a module from a non-standard, high-risk path.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewall, Proxy), Enterprise Workstations and Servers",
            "action": [
              "1) For symbolic logic, create a correlation rule to alert when a Sysmon Event ID 7 event (with `Signed` as 'false' or from a high-risk path) is followed within 2 minutes by a Sysmon Event ID 3 (NetworkConnect) from the same `ProcessGuid` to a destination IP that is not an RFC1918 address. Enrich the alert by correlating the destination IP with Zeek `conn.log` to check for long-lived connections or unusual protocols (non-HTTP/S).",
              "2) For statistical analysis, following a suspicious module load alert, query Zeek `conn.log` and `dns.log` for subsequent connections from the source host. Calculate the rarity of the destination IP's Autonomous System Number (ASN) and the queried domain's suffix (e.g., .top, .xyz). A connection to an ASN or suffix in the bottom 1st percentile of prevalence is a strong indicator of C2 activity.",
              "3) For machine learning, use a time-series model to forecast the expected volume and diversity of network connections for each process. If a process loads a suspicious module and its subsequent connection volume or diversity significantly exceeds the forecast, generating a spike anomaly, trigger an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]