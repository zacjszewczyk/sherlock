[
  {
    "information_requirement": "Is the adversary executing malicious code using shared modules?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1129",
        "name": "Shared Modules",
        "evidence": [
          {
            "description": "A module load event is recorded where the loaded module's hash (e.g., SHA256) matches a known malicious indicator, or its digital signature is associated with a known untrusted entity.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers",
            "action": "Continuously ingest a threat intelligence feed of malicious DLL hashes and signer certificates. 1) For symbolic logic, query Sysmon Event ID 7 logs where the module's hash (from the `Hashes` field) or the signer's name (from the `Signature` field) matches an entry on the threat intelligence list. 2) For statistical analysis, calculate the prevalence of each module signer across the enterprise over a 30-day baseline. Alert on module loads where the signer's prevalence is below the 1st percentile, indicating extreme rarity. 3) For machine learning, use a classification model (e.g., Gradient Boosting) trained on module metadata (signature status, signer, name entropy, path) to produce a 'maliciousness' score for each load event, alerting when the score exceeds a predefined confidence threshold."
          },
          {
            "description": "A module load event indicates a module was loaded from a network UNC path or a user-writable directory (e.g., %APPDATA%, %TEMP%), and the module is either unsigned or was created within minutes of being loaded.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers, Network File Shares",
            "action": "Define a set of high-risk path patterns, including UNC paths (`\\\\*`) and user-writable directories (`C:\\Users\\*\\AppData\\*`, `C:\\ProgramData\\*`, `C:\\Windows\\Temp\\*`). 1) For symbolic logic, create a rule that alerts on any Sysmon Event ID 7 event where the `ImageLoaded` path matches a high-risk pattern AND the `Signed` field is 'false'. 2) For statistical analysis, establish a baseline of module load paths for each process name. Calculate the z-score for the frequency of loads from high-risk locations per process. Alert when a process exhibits a z-score greater than 3.0 for loading from these paths. 3) For machine learning, apply a time-series anomaly detection model to the count of module loads from high-risk paths per host. Alert if the model detects a sudden spike that deviates significantly from the host's historical norm."
          },
          {
            "description": "A module load event shows a module being loaded from a directory path that is statistically rare for the loading process or for the entire environment, excluding standard system and program file paths.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers",
            "action": "First, establish a baseline of all process-to-module-path relationships observed over a 30-day period. 1) For symbolic logic, create an allow-list of standard directories (`C:\\Windows\\System32\\*`, `C:\\Program Files\\*`). Alert on any module load where the path is not on the allow-list and the module is unsigned. 2) For statistical analysis, for each running process, calculate the Shannon entropy of its module load directory paths over a rolling 24-hour window using the formula $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$. Alert if a process's path entropy score increases by more than 2 standard deviations from its own established baseline. 3) For machine learning, use a clustering algorithm like DBSCAN on feature vectors of (process_name, module_load_path). Investigate any module load event that is classified as an outlier, as it represents a rare process-path combination not seen in normal operations."
          },
          {
            "description": "A module load event occurs for a file that was created on the same host within a short time window (e.g., under 5 minutes), especially if the creating process is a browser, office application, or script interpreter.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations and Servers",
            "action": "Correlate module load events with preceding file and process creation events on the same host. 1) For symbolic logic, trigger an alert when a Sysmon Event ID 11 (FileCreate) for a `.dll` or `.so` file is followed within 3 minutes by a Sysmon Event ID 7 (ImageLoad) for the same filename. Increase severity if the process that created the file (from Event ID 11) is `powershell.exe`, `rundll32.exe`, `msedge.exe`, or `winword.exe`. 2) For statistical analysis, calculate the time delta between file creation and module load for all DLLs. Flag loads that fall in the 1st percentile of this time delta (shortest time between write and load) as high-risk. 3) For machine learning, use a sequence analysis model (e.g., Hidden Markov Model) trained on normal sequences of Sysmon events. Flag any event sequence with a low probability, such as `browser.exe` (process create) -> `evil.dll` (file create) -> `svchost.exe` (process) loads `evil.dll` (image load)."
          },
          {
            "description": "A sensitive system process (e.g., lsass.exe, svchost.exe, winlogon.exe) loads a module whose name or path has not been previously observed for that process during a baseline period.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (e.g., Domain Controllers, Application Servers), Enterprise Workstations",
            "action": "Create and maintain profiles for sensitive system processes. 1) For symbolic logic, define a strict allow-list of known-good DLL names and full paths for critical processes like `lsass.exe` and `csrss.exe`. Alert on any module load by these processes that is not on the explicit allow-list. 2) For statistical analysis, for each sensitive process (e.g., `svchost.exe`), build a frequency map of all modules it loads over a 30-day baseline. Alert if the process loads a module whose frequency is in the bottom 5th percentile (or is not present in the baseline), indicating a 'first-seen' or 'rarely-seen' load. 3) For machine learning, use an autoencoder trained on feature vectors of normal module loads for a specific process. Flag any new load that produces a high reconstruction error, as it does not conform to the learned pattern of normality."
          },
          {
            "description": "A process initiates an external network connection within minutes of loading an unsigned module or a module from a non-standard, high-risk path.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewall, Proxy), Enterprise Workstations and Servers",
            "action": "Correlate unusual module loads with subsequent network activity. 1) For symbolic logic, alert when a Sysmon Event ID 7 event (with `Signed` as 'false' or from a high-risk path) is followed within 60 seconds by a Sysmon Event ID 3 (NetworkConnect) from the same Process ID to a destination IP that is not an RFC1918 address. 2) For statistical analysis, after a suspicious module load, analyze the subsequent outbound connection from Zeek conn.log. Calculate the rarity of the destination IP's ASN across the enterprise. A connection to an ASN in the bottom 1st percentile of prevalence is a strong signal of anomalous C2. 3) For machine learning, use a time-series model to forecast the expected volume of network connections for each process. If a process loads a suspicious module and its subsequent connection volume significantly exceeds the forecast, generating a spike anomaly, trigger an alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]