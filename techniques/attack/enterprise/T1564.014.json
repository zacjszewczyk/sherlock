[
  {
    "information_requirement": "Is an adversary hiding malicious payloads or data in file or directory extended attributes (xattrs) to evade detection?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.014",
        "name": "Extended Attributes",
        "evidence": [
          {
            "description": "Anomalous execution of command-line utilities for manipulating extended attributes (`xattr` on macOS, `setfattr`/`getfattr` on Linux), especially by unexpected parent processes or users.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs (type=SYSCALL, key=proc_exec)",
              "macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_EXEC)",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (web, database, application), macOS developer workstations, CI/CD pipeline runners, and Windows hosts with WSL enabled.",
            "action": [
              "Using a SIEM, create a rule that alerts when a process creation event (e.g., Windows Event ID 4688, Sysmon Event ID 1) matches the following: process_name IN ('xattr', 'setfattr', 'getfattr') AND command_line CONTAINS ('-w', 'setfattr -n user.', 'getfattr --only-values'). Escalate priority if the parent_process_name is a web server (e.g., 'httpd', 'nginx'), shell ('sh', 'bash'), or remote access tool and is followed within 5 minutes by execution of a scripting interpreter ('python', 'perl', 'osascript') by the same user on the same host.",
              "For each host and user, aggregate daily counts of 'xattr' and 'setfattr' executions from process audit logs over a 30-day period to establish a baseline. Calculate the 99th percentile of execution counts for each user/host pair. Create a detection that triggers when a user's daily count exceeds this threshold. As a secondary check, calculate the Shannon entropy of the value argument passed to 'xattr -w' or 'setfattr'. Flag any value with an entropy score greater than 6.0, which often indicates compressed or encrypted data.",
              "Collect a dataset of process execution events involving 'xattr' and 'setfattr'. Engineer features including parent process name, grandparent process name, user context (root vs. non-root), command line argument patterns (e.g., presence of '-w', '-p', '-n user.'), and execution time of day. Label data with known benign activity (e.g., software installations, administrative scripts) and known malicious TTPs. Train a decision tree or random forest classifier to predict a 'malicious' or 'benign' label. Deploy the model to score new executions in real-time, alerting on events classified as 'malicious' with high confidence."
            ]
          },
          {
            "description": "Creation of an extended attribute with a non-standard name, an unusual namespace, or containing high-entropy data, indicative of a concealed payload.",
            "data_sources": [
              "Linux Auditd logs (syscall=setxattr)",
              "macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_SETXATTR)",
              "osquery (file_extended_attributes table)",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical system directories (/bin, /usr/bin, /etc), user home directories, and web-accessible directories (/var/www/html) on Linux and macOS hosts.",
            "action": [
              "Implement a detection rule that monitors for 'setxattr' syscall events from Auditd or ESF SETXATTR events on macOS. Alert if: (1) On Linux, the attribute name begins with 'user.' and contains a base64 or hex-encoded string. (2) On macOS, the attribute name does not begin with a known prefix like 'com.apple.' or other legitimate application prefixes. (3) The attribute value, when decoded, contains a known file header (e.g., 'MZ', 'ELF', '#!/bin/bash').",
              "Periodically query endpoints for all extended attributes using osquery (`SELECT path, key, value FROM file_extended_attributes`). For each attribute value, calculate its Shannon entropy. Establish a baseline entropy distribution for legitimate attributes, segmented by file type and attribute key prefix (e.g., 'com.apple.quarantine' vs. 'user.comment'). Generate an alert for any extended attribute whose entropy score exceeds 3 standard deviations from the mean for its segment, suggesting obfuscated content.",
              "Ingest file modification events (including xattr creation) and network download events (e.g., from Zeek files.log or EDR proxy logs) into a time-series database. Train a time-series anomaly detection model (e.g., Prophet or an LSTM-based autoencoder) on the rate of new xattr creation per host, baselined over 30-60 days. Create a high-fidelity alert when the model detects an anomalous spike in xattr creation that is not correlated with a known patching or software deployment window. Increase the alert's score if the spike is preceded by a network file download to the same host within the last 5 minutes."
            ]
          },
          {
            "description": "A process reads an extended attribute and subsequently executes a child process from memory or initiates a network connection to a destination that is rare for the host or organization.",
            "data_sources": [
              "Linux Auditd logs (syscall=getxattr)",
              "Sysmon for Linux Event ID 1",
              "Sysmon for Linux Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway, DNS servers, and endpoint devices of privileged users (e.g., developers, system administrators) with direct internet access.",
            "action": [
              "Create a stateful correlation rule that triggers when: (1) A process reads an extended attribute (e.g., via 'getfattr' command or 'getxattr' syscall). (2) Within 60 seconds, the same Process ID (PID) or a child process either (a) initiates an outbound network connection (Sysmon for Linux Event ID 3, Zeek conn.log) to an IP address present on a threat intelligence feed, OR (b) creates a DNS query (Zeek dns.log) for a domain with a low reputation score.",
              "For each process that reads an xattr, enrich its subsequent network connections (from Zeek conn.log) with contextual data: destination IP's ASN, geographic location, and domain age. For each host, build a historical baseline of typical destination countries, ASNs, and ports over the last 90 days. Score each connection based on rarity: add points for a new country, a new ASN, a non-standard port for the protocol, or a connection with response data volume (`resp_bytes`) in the 95th percentile for that host. Alert on any connection sequence originating from an xattr-reading process that accumulates a risk score above a defined threshold.",
              "Construct a process-file-network graph using data from Sysmon, Auditd, and Zeek. Nodes represent processes, files, and remote network endpoints (IPs/domains). Edges represent interactions (e.g., 'executes', 'reads_xattr_from', 'connects_to'). Apply a community detection algorithm to identify isolated subgraphs of activity. Profile each subgraph with features like: presence of an 'reads_xattr_from' edge, number of nodes, presence of a network node, and rarity of the network node. Train a classifier (e.g., Gradient Boosting) to score these subgraphs as 'suspicious' or 'benign'. A small, isolated subgraph containing an xattr read followed by a connection to a rare external IP is a strong indicator of compromise."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]