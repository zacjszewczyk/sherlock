[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using safe mode boot?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.009",
        "name": "Safe Mode Boot",
        "evidence": [
          {
            "description": "Execution of a process whose file hash is present on a threat intelligence feed of known malware or hacking tools associated with configuring a safe mode boot.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Critical Application Servers, Domain Controllers, Executive Workstations",
            "action": "1. (Symbolic) Ingest process creation events (Windows Event ID 4688). For each new process, calculate the file hash. Compare the hash against a list of known malicious hashes from threat intelligence feeds, specifically those tagged with 'Safe Mode' or 'bcdedit'. Trigger an alert on any match. 2. (Statistical) For any hash match, analyze the parent-child process relationship. Calculate the enterprise-wide prevalence of that specific parent process initiating the malicious child process. If the parent process is in the 10th percentile or lower for prevalence (e.g., winword.exe spawning the tool), significantly increase the alert severity. 3. (Machine Learning) Train a supervised classification model (e.g., Random Forest) on labeled process event data. Use features such as process name, parent process name, command-line arguments, user context, and the hash's presence on CTI feeds to predict if a process execution is part of a 'Safe Mode Boot' attack. Deploy the model to score new process events in real-time."
          },
          {
            "description": "Execution of boot configuration utilities, such as 'bcdedit.exe', with command-line arguments that enable a safeboot configuration (e.g., '/set {current} safeboot minimal').",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Domain Controllers, Infrastructure Servers",
            "action": "1. (Symbolic) Create a detection rule to monitor for process creation events (Windows Event ID 4688) or PowerShell script block logging (Windows Event ID 4104) where the process name is 'bcdedit.exe' and the command line contains strings like 'safeboot', 'minimal', 'network', or 'bootmenupolicy legacy'. Alert on any match. 2. (Statistical) Establish a 30-day rolling baseline for 'bcdedit.exe' executions per user and per host. Alert if the daily execution count for a user or host exceeds the 99th percentile of their respective baselines. Further risk-score by user type; any execution by a standard, non-administrative user is highly suspicious. 3. (Machine Learning) Use an anomaly detection model (e.g., Isolation Forest) trained on features from legitimate 'bcdedit.exe' executions. Features should include command-line length, argument structure, parent process, and time of day. The model will identify executions that are statistical outliers from normal administrative activity, indicating potential abuse."
          },
          {
            "description": "Modification of Windows Registry keys under HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\ to add a new service or driver, or modification of Run keys to add an entry that executes in safe mode (value name prefixed with '*').",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Critical Application Servers, Domain Controllers",
            "action": "1. (Symbolic) Actively monitor for Registry modification events (Windows Event ID 4657) where the target key path is 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\' or its subkeys ('Minimal', 'Network'), or where a value is created/modified under a 'Run' key with a name starting with an asterisk ('*'). Alert immediately on these specific modifications. 2. (Statistical) Create an allowlist of trusted processes (e.g., 'TrustedInstaller.exe', 'msiexec.exe') known to modify the 'SafeBoot' registry keys during legitimate installations. Analyze the frequency of modifications made by processes not on this list. Any non-allowlisted process modifying these keys is a high-confidence indicator. Flag any process whose modification frequency suddenly spikes above 3 standard deviations of its baseline. 3. (Machine Learning) Train a classifier to distinguish between benign (e.g., software install) and malicious registry modifications to these keys. Features can include the process making the change, its parent, the user context, and the specific value being written. This model can reduce false positives from legitimate but rare software updates."
          },
          {
            "description": "A system boot event is followed by an anomalous set of running processes or network connections inconsistent with a standard Safe Mode environment, such as the presence of scripting engines or C2 communication.",
            "data_sources": [
              "Windows Event ID 6009",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Network Egress Points, Authentication Servers",
            "action": "1. (Symbolic) Define a 'Proxy Safe Mode' state by detecting a boot event (Event ID 6009) followed by a low count of system service start events before the first interactive logon (Event ID 4624). While a host is in this state, alert on any process creation (Event ID 4688) for 'powershell.exe', 'cscript.exe', 'rundll32.exe', or any network connection (Zeek conn.log) to a non-standard port or a known-bad IP address. 2. (Statistical) For a host in the 'Proxy Safe Mode' state, establish a 10-minute post-boot monitoring window. Calculate the number of unique processes executed and the entropy of destination ports for outbound connections. Compare these values to a baseline established from normal boot cycles for that host. A process count or port entropy value exceeding the 95th percentile of the normal baseline is anomalous. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on multivariate data streams from normal boot sequences (process creation rate, network I/O, CPU usage). Feed post-boot data into the model; a high reconstruction error score indicates a significant deviation from normal boot behavior, suggesting malicious activity in a compromised safe mode."
          },
          {
            "description": "A correlated sequence of events is observed within a short time window: a boot configuration modification, followed by a system reboot, and then post-reboot anomalous activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 1074"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers",
            "action": "1. (Symbolic) Implement a stateful correlation rule that triggers when Event A (a 'bcdedit.exe /set safeboot' command via Event 4688 OR a registry write to 'SafeBoot' keys via Event 4657) is followed by Event B (a system reboot initiated by a user process via Event 1074) within 30 minutes on the same host. This sequence generates a high-fidelity alert for investigation. 2. (Statistical) Develop a risk scoring system for the correlated sequence. The initial score is based on the trigger event (e.g., bcdedit execution). Add points if the parent process of the trigger event is rare (e.g., in the lowest 5% by prevalence). Add more points if the reboot is followed by statistically anomalous behavior like a spike in network connections. An alert is fired only when the cumulative score exceeds a critical threshold. 3. (Machine Learning) Use a sequence analysis model like a Hidden Markov Model (HMM) to detect the full attack pattern. Define states such as 'Benign', 'Defense Evasion Setup', 'Reboot', and 'Post-Reboot Payload Execution'. Train the model on event log sequences from known attacks and normal operations. The model calculates the probability that a live sequence of events from a host matches the malicious state transition path, providing a probabilistic alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]