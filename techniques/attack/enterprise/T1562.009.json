[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using safe mode boot? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.009",
        "name": "Safe Mode Boot",
        "evidence": [
          {
            "description": "A process execution event (Windows Event ID 4688) is logged where the file hash of the executed process matches a known malicious hash associated with safe mode boot tooling on an integrated threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Critical Application Servers, Domain Controllers, Executive Workstations",
            "action": [
              "1. (Symbolic) Ingest process creation events (Windows Event ID 4688) and calculate the file hash for each new process. Correlate the hash against a threat intelligence feed containing hashes of tools known to manipulate boot configurations. Generate an alert for any match.",
              "2. (Statistical) For any hash match identified, analyze the parent process. Calculate the historical, enterprise-wide prevalence of that parent process name (e.g., 'winword.exe') spawning the malicious child process. If the parent-child relationship falls below the 10th percentile of observed relationships, increase the alert's risk score.",
              "3. (Machine Learning) Train a supervised classification model (e.g., Random Forest) using labeled historical process event data. Use features including the process name, parent process name, command-line arguments, user context, and a binary feature indicating if the hash is on a threat feed. Deploy the model to score new process events in real-time to predict if they are part of a 'Safe Mode Boot' attack."
            ]
          },
          {
            "description": "Execution of a boot configuration utility, such as 'bcdedit.exe' or 'bootcfg.exe', with command-line arguments explicitly enabling a safeboot configuration (e.g., '/set {current} safeboot minimal').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Domain Controllers, Infrastructure Servers",
            "action": [
              "1. (Symbolic) Create a detection rule to query for process creation events (Windows Event ID 4688) where the 'NewProcessName' is 'bcdedit.exe' or 'bootcfg.exe' and the 'CommandLine' contains the string 'safeboot'. Alert on any match.",
              "2. (Statistical) Establish a 30-day rolling baseline of 'bcdedit.exe' execution counts per user and per host. Generate an alert if the daily count for a user or host exceeds the 99th percentile of their respective baseline. Additionally, calculate the prevalence of command-line argument combinations; flag any execution using arguments that are in the bottom 5% of historical usage.",
              "3. (Machine Learning) Use an anomaly detection model (e.g., Isolation Forest) trained on features extracted from legitimate 'bcdedit.exe' executions. Features should include command-line length, argument count, parent process, user account type (standard vs. admin), and time of day. The model will score new executions, flagging those that are statistical outliers from normal administrative activity."
            ]
          },
          {
            "description": "Modification of Windows Registry keys under HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\ to add a new service or driver, or modification of a 'Run' key to add a value name prefixed with an asterisk '*' to ensure execution in safe mode.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Critical Application Servers, Domain Controllers",
            "action": [
              "1. (Symbolic) Monitor for Registry modification events (Windows Event ID 4657) where the 'ObjectName' contains '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\' or where a value is set under a 'Run' key and the value name begins with '*'. Generate a high-severity alert for any such modification.",
              "2. (Statistical) Maintain an allowlist of process names (e.g., 'TrustedInstaller.exe', 'msiexec.exe') known to legitimately modify 'SafeBoot' registry keys. For any modification made by a process not on the allowlist, calculate the historical frequency of that process modifying the registry. If the modification is novel or its frequency exceeds 3 standard deviations above its baseline, flag it as suspicious.",
              "3. (Machine Learning) Train a classification model (e.g., XGBoost) to distinguish between benign (e.g., software installation) and malicious registry modifications to these specific keys. Use features such as the modifying process name, its parent process, user context, and the specific data being written to the value. Use the model to classify new modifications and reduce false positives from legitimate but uncommon system changes."
            ]
          },
          {
            "description": "A system boot event is followed by an anomalous set of running processes or network connections inconsistent with a standard Safe Mode environment, such as the presence of scripting engines or command-and-control communication.",
            "data_sources": [
              "Windows Event ID 6009",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Network Egress Points, Authentication Servers",
            "action": [
              "1. (Symbolic) Create a rule to detect a boot event (Windows Event ID 6009) followed by the absence of expected security agent service start events. In this inferred 'degraded state', alert on any subsequent process creation (Windows Event ID 4688) for 'powershell.exe', 'cscript.exe', or 'rundll32.exe', or any network connection (Zeek conn.log) to an IP address with a low reputation score.",
              "2. (Statistical) For each host, establish a baseline of normal post-boot behavior within the first 15 minutes of a boot event (Windows Event ID 6009). Calculate the number of unique processes executed and the entropy of destination ports for outbound connections (from Zeek conn.log). If, after a boot, the process count or port entropy exceeds the 95th percentile of that host's normal baseline, generate an anomaly alert.",
              "3. (Machine Learning) Employ a time-series anomaly detection model like an LSTM Autoencoder trained on multivariate data streams from normal boot sequences (e.g., process creation rate, network I/O bytes, CPU usage). Feed post-boot telemetry into the live model. A high reconstruction error score indicates a significant deviation from the learned normal boot pattern, suggesting malicious activity in a potentially compromised safe mode environment."
            ]
          },
          {
            "description": "A correlated sequence of events is observed on a single host within a short time window: a boot configuration modification, followed by a system reboot, and then post-reboot anomalous network or process activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 1074"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers",
            "action": [
              "1. (Symbolic) Implement a stateful correlation rule that triggers when Event A (a 'bcdedit.exe /set safeboot' command via Windows Event ID 4688 OR a registry write to 'SafeBoot' keys via Windows Event ID 4657) is followed by Event B (a system reboot initiated by a user process via Windows Event ID 1074) within a 30-minute window on the same host. This sequence generates a high-fidelity alert for immediate investigation.",
              "2. (Statistical) Develop a risk scoring model for event sequences. Assign a base score for the initial trigger (e.g., 'bcdedit' execution). Add points if the parent process of the trigger is rare (e.g., 'outlook.exe'). Add more points if the subsequent reboot is followed by statistically anomalous behavior like a spike in outbound network connections to unique IPs. Fire an alert only when the cumulative score for the sequence exceeds a defined threshold.",
              "3. (Machine Learning) Use a sequence analysis model like a Hidden Markov Model (HMM) to detect the full attack pattern. Define states such as 'Benign', 'Defense Evasion Setup', 'Reboot', and 'Post-Reboot Payload'. Train the model on event log sequences from known attacks and normal operations. In real-time, the model will calculate the probability that an observed sequence of events from a host matches the malicious state transition path, providing a probabilistic alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]