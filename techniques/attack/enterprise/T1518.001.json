[
  {
    "information_requirement": "Has the adversary identified our security software and configurations to inform their next actions? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1518.001",
        "name": "Security Software Discovery",
        "evidence": [
          {
            "description": "Execution of a process where the file hash matches a known malicious tool or script cataloged as performing security software discovery.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Application Servers",
            "action": [
              "Symbolic: Monitor Windows Event ID 4688 process creation events. Compare the file hash of the new process against a threat intelligence feed of known malicious hashes specifically associated with T1518.001. Generate a high-severity alert upon a direct match.",
              "Statistical: For processes not matching a known malicious hash, calculate the prevalence of the file hash across all endpoints over the last 30 days. A process hash seen on a very small number of endpoints (e.g., less than the 1st percentile of hash prevalence) that also executes discovery-related command line arguments should have its risk score significantly elevated.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from process execution events (e.g., parent process name, command line length, hash prevalence, user context). Use the model to classify each new process execution as benign or suspicious. Processes classified as suspicious, particularly those with command line arguments containing keywords like 'antivirus' or 'firewall', should be flagged for analyst review."
            ]
          },
          {
            "description": "Execution of legitimate system utilities (e.g., tasklist, wmic, reg query, Get-Process) with specific command-line arguments or script patterns used to query for security product processes, services, registry keys, or files.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Privileged Access Workstations, Enterprise Servers",
            "action": [
              "Symbolic: Using Windows Event ID 4688 logs, create a detection rule that uses regular expressions to match command-line arguments against a curated list of security discovery commands, such as `wmic /namespace:\\\\root\\securitycenter2 path antivirusproduct get displayName`, `reg query HKLM\\SOFTWARE /s /f 'symantec'`, or `Get-Process -Name '*carbonblack*'`. Alert on any match.",
              "Statistical: For each command-line execution, calculate the Shannon entropy of the command-line string. Establish a baseline entropy score for common processes like 'powershell.exe' and 'cmd.exe'. Flag for review any execution where the command-line entropy exceeds a high percentile (e.g., 95th percentile) for that specific process name and also contains discovery-related keywords (e.g., 'av', 'edr', 'defender').",
              "Machine Learning: Utilize a pre-trained Natural Language Processing (NLP) model to classify command lines based on semantic intent. The model can identify commands that are functionally equivalent to known discovery techniques, even if they use different syntax or obfuscation. Flag commands classified with high confidence as 'Security Discovery' for investigation."
            ]
          },
          {
            "description": "A single process exhibiting a statistically significant high rate of file system or registry read operations in locations associated with installed programs or system drivers.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File Servers, Application Servers, Standard User Workstations",
            "action": [
              "Symbolic: Create a rule that triggers when a single process Process ID generates more than a fixed, high-threshold number of object access events (Windows Event ID 4663) in a short time window (e.g., >1000 events in 1 minute) within sensitive locations like `C:\\Program Files\\` or `HKLM\\SOFTWARE\\`. This acts as a simple, high-volume tripwire.",
              "Statistical: For each process name, establish a baseline of file/registry access events (Windows Event ID 4663) per minute per host. Monitor for processes where the event count in a given minute exceeds a dynamic threshold, such as 3 standard deviations above the mean for that specific process on that host. Add extra weight if accessed object names contain keywords like 'Agent', 'Security', or 'EDR'.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA) on the volume of file and registry read events per process per host. The model will learn the normal rhythm of system activity. Generate an alert when the model detects an unexplainable spike in enumeration activity that deviates significantly from the forecasted behavior, indicating a potential discovery sweep."
            ]
          },
          {
            "description": "Execution of security software discovery commands originating from a parent process not typically associated with administrative activity, such as a Microsoft Office application, web browser, or PDF reader.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Mail Servers, Web Proxies",
            "action": [
              "Symbolic: Create a high-priority detection rule that alerts when a known discovery utility (e.g., 'tasklist.exe', 'wmic.exe', 'powershell.exe') is spawned as a child process of a non-standard parent like 'WINWORD.EXE', 'EXCEL.EXE', 'OUTLOOK.EXE', or 'chrome.exe'. This is a high-fidelity indicator of initial compromise.",
              "Statistical: Profile all parent-child process relationships across the environment over a 30-day period to build a frequency table. Calculate the rarity of each observed parent-child pair. Any execution of a discovery utility from a parent process that falls into a low-frequency percentile (e.g., this pairing is observed less than 0.01% of the time) should be considered anomalous and flagged.",
              "Machine Learning: Train a graph-based anomaly detection model on process lineage data, where processes are nodes and parent-child relationships are edges. The model learns common subgraphs of legitimate activity. An alert is triggered when a new process chain forms a subgraph that is structurally rare or has not been seen before, such as 'OUTLOOK.EXE' -> 'powershell.exe' -> 'tasklist.exe'."
            ]
          },
          {
            "description": "A sequence of on-host security software discovery commands followed within a short time window by a new network connection to an external address or a DNS query for a non-standard domain.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Host Network Interfaces",
            "action": [
              "Symbolic: Correlate a symbolic detection of on-host discovery (e.g., `tasklist /svc` from Event ID 4688) on a specific host with a subsequent network connection (from Zeek conn.log) from the same host to an IP address categorized by threat intelligence as malicious. Use a correlation window of less than 5 minutes.",
              "Statistical: On a per-host basis, monitor for a burst of discovery commands (e.g., >3 commands in 2 minutes). If this burst is followed by a DNS query (from Zeek dns.log) for a domain with high Shannon entropy (indicating randomness, e.g., DGA) or low global prevalence, increase the host's risk score. This pattern suggests reconnaissance followed by C2 communication.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model) trained on combined host and network logs. The model learns legitimate sequences of activity, such as a browser making DNS queries. The model will flag anomalous sequences, such as the execution of `reg.exe` and `wmic.exe` followed by a direct-to-IP connection over a non-standard port, as a deviation from learned normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]