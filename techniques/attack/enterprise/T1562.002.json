[
  {
    "information_requirement": "Has the adversary attempted to evade defenses by disabling or manipulating Windows Event Logging?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.002",
        "name": "Disable Windows Event Logging",
        "evidence": [
          {
            "description": "Execution of a process where the process name, file hash, or command-line arguments match known indicators of compromise (IOCs) for log-clearing utilities or malware families known to employ log-clearing functions.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on Domain Controllers and critical asset groups.",
            "action": [
              "Symbolic Logic: Continuously monitor process creation events (Windows Event ID 4688, Sysmon Event ID 1). Match the 'ProcessName' or calculated file hash against a threat intelligence feed of known log-tampering tools (e.g., Mimikatz, Invoke-Phant0m). Use regular expressions on the command-line field to detect highly specific strings associated with malware log clearing modules. Alert on any match.",
              "Statistical Method: For each process execution, calculate the rarity of the process name and command-line arguments across the enterprise over a 30-day baseline. Assign a risk score based on the inverse frequency (rarer events get a higher score). If a process matches a low-prevalence threshold (e.g., seen on <1% of hosts) and its parent process is also rare (e.g., wscript.exe, mshta.exe), flag for review.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on labeled process execution data, using features such as process name entropy, command-line length, presence of special characters, parent process, and user context. Deploy the model to score new process events in real-time and alert on those classified as 'log-tampering' with high confidence."
            ]
          },
          {
            "description": "Anomalous execution of native Windows utilities (auditpol.exe, sc.exe, wevtutil.exe) with specific parameters to clear logs, stop the 'EventLog' service, or modify audit policies. This also includes direct modification of registry keys controlling the EventLog service or audit configuration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4657",
              "Windows Event ID 12 (Sysmon)",
              "Windows Event ID 13 (Sysmon)",
              "Windows Event ID 4719",
              "Windows Event ID 1102",
              "Windows Event ID 104",
              "Windows Event ID 7035"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies.",
            "action": [
              "Symbolic Logic: Create high-fidelity correlation rules to detect specific command-line invocations in process creation events (Event ID 4688/Sysmon ID 1), such as 'wevtutil cl', 'auditpol /clear', 'auditpol /set .* /success:disable', 'sc config eventlog start= disabled', or 'sc stop eventlog'. Also, create alerts on discrete events like Security Log cleared (Event ID 1102), Audit Policy changed (Event ID 4719), or EventLog service entering a stopped state (Event ID 7035).",
              "Statistical Method: Establish a baseline for the execution frequency of 'auditpol.exe', 'wevtutil.exe', and 'sc.exe' per user and per host. Calculate the 99th percentile for execution frequency. Alert when the execution count for any of these utilities by a non-administrative user or on a server outside of a maintenance window exceeds this threshold in a 24-hour period. Calculate the entropy of command-line arguments for these processes; a sudden spike in entropy may indicate unusual usage.",
              "Machine Learning: Use a sequence analysis model (e.g., a Hidden Markov Model) to identify suspicious chains of activity. Train the model to recognize a common attack pattern: [1] remote login (Event ID 4624 Type 3 or 10), followed by [2] reconnaissance execution (e.g., 'whoami'), followed by [3] execution of 'auditpol /clear', all within a short time window (e.g., 5 minutes). The model would flag this sequence as a high-probability defense evasion attempt."
            ]
          },
          {
            "description": "A statistically significant and sustained decrease or complete halt in the volume of event logs received from an endpoint by a central log aggregator, which is not correlated with a scheduled maintenance window or a known system shutdown event.",
            "data_sources": [
              "SIEM ingestion logs",
              "Windows Event Forwarding logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Central log aggregation platform (e.g., SIEM, data lake) and Windows Event Forwarding (WEF) servers.",
            "action": [
              "Symbolic Logic: Create a 'heartbeat' rule in the SIEM that triggers an alert if no logs of any type are received from a critical asset (e.g., Domain Controller, a specific server VLAN) for a period exceeding a defined threshold (e.g., 15 minutes), excluding hosts known to be in a powered-off state or in a scheduled maintenance window.",
              "Statistical Method: For each log-forwarding endpoint, establish a time series baseline of log volume (events per minute). Calculate a moving average and standard deviation. Generate an alert when the current log volume drops more than 3 standard deviations below the moving average for a sustained period (e.g., >10 minutes) and is not preceded by a graceful shutdown event (e.g., Windows Event ID 1074).",
              "Machine Learning: Implement a time series forecasting model (e.g., ARIMA or Prophet) for each host's log volume. The model will predict the expected number of logs for the next interval (e.g., 5 minutes). If the actual received log count falls outside the model's prediction interval (e.g., below the 99% confidence lower bound), generate an anomaly alert. This method adapts to daily and weekly cyclical patterns in log volume."
            ]
          },
          {
            "description": "A temporal sequence of events on a single host within a constrained timeframe, where the execution of a suspicious or unsigned process is immediately followed by a known log tampering action, and subsequently by command-and-control or lateral movement activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 1102",
              "Windows Event ID 7035",
              "Windows Event ID 4719",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, and network gateways for correlating C2 traffic.",
            "action": [
              "Symbolic Logic: Define a stateful correlation rule that triggers when the following events occur on the same host within 5 minutes: [1] Process execution (Event ID 4688) from a non-standard directory (e.g., C:\\Users\\Public\\) or an unsigned binary, followed by [2] a log clearing event (Event ID 1102 or a 'wevtutil cl' command), followed by [3] an external network connection (Zeek conn.log) to a low-reputation IP address.",
              "Statistical Method: Develop a scoring model for event sequences. Assign risk scores to individual events (e.g., running 'wevtutil cl' = 50 points, process execution from C:\\Temp = 10 points). Apply a time decay function to the scores. If the cumulative score for a single host's event stream exceeds a dynamic threshold calculated from the 99th percentile of all host scores within a 10-minute sliding window, flag the host for investigation.",
              "Machine Learning: Utilize a graph-based anomaly detection algorithm. Model host activity as a graph where nodes are processes, files, and network connections, and edges represent interactions. Train the model on normal activity graphs. A sequence of log tampering would appear as a rare subgraph pattern (e.g., `powershell.exe` -> `sc.exe` -> `unusual_c2_ip_address`), which the model would flag as anomalous compared to the learned baseline of normal system administration graphs."
            ]
          },
          {
            "description": "Identification of non-sequential 'RecordNumber' or 'EventRecordID' values within a specific Windows Event Log stream from a single host, where the gap size is anomalous and cannot be attributed to a system reboot.",
            "data_sources": [
              "Raw Windows Security Event Log (evtx)",
              "Raw Windows System Event Log (evtx)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Central log aggregation platform responsible for parsing raw event logs, or endpoint agents capable of monitoring log file integrity.",
            "action": [
              "Symbolic Logic: During log ingestion or via a scheduled batch query, for each host and log type (e.g., 'Security', 'System'), parse and sort events by their 'RecordNumber'. If `RecordNumber(n) - RecordNumber(n-1) > 1`, flag the event pair as a gap. If the gap size exceeds a static threshold (e.g., > 100) and is not preceded by a system boot event on that host, generate a high-severity alert.",
              "Statistical Method: For each host, calculate the baseline rate of record ID gaps caused by normal reboots (e.g., determine the average gap size after a startup event). For any detected gap, calculate its Z-score relative to this 'reboot gap' distribution. A high Z-score (e.g., > 3) indicates an anomalously large gap that is unlikely to be from a normal reboot and may signify log deletion.",
              "Machine Learning: Use a regression model (e.g., Linear Regression) to predict the next expected 'RecordNumber' based on the previous N records and their timestamps. The model learns the normal rate of event generation. If the actual 'RecordNumber' of the next received event is significantly greater than the predicted number plus a confidence interval, flag it as a potential log tampering event. This can detect more subtle deletions than a simple static threshold."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]