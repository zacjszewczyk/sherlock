[
  {
    "information_requirement": "Has the adversary attempted to access credentials from securityd process memory on a macOS endpoint? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555.002",
        "name": "Securityd Memory",
        "evidence": [
          {
            "description": "A process execution event where the executable's file hash matches a known malicious hash associated with macOS credential dumping tools, or the process name matches a known tool name (e.g., 'chainjett', 'lazagne').",
            "data_sources": [
              "ESF NOTIFY_EXEC events",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS developer workstations, macOS build servers, executive macOS endpoints",
            "action": "Symbolic: Continuously monitor process execution events (ESF NOTIFY_EXEC) for file hashes or process names matching a threat intelligence feed of known macOS credential theft tools. Correlate hashes of executable files transferred over the network (from Zeek files.log) against the same list and alert on any match. Statistical: For processes not matching known malicious selectors, calculate the historical execution frequency for each process name across the enterprise. An execution of a process that is in the bottom 5th percentile of frequency on a given host, especially if the parent process is a shell, warrants investigation. Machine Learning: Train a supervised classification model (e.g., Random Forest) on labeled process execution events. Use features such as parent process name, user context, command-line length, and file path entropy. Use the model to classify new process executions as benign or suspicious, flagging those with a high probability score of being malicious for analyst review."
          },
          {
            "description": "A process execution event involving a system utility (e.g., `grep`, `strings`, `gdb`, `lldb`) where the command-line arguments explicitly reference 'securityd' or its dynamically resolved process ID (PID).",
            "data_sources": [
              "ESF NOTIFY_EXEC events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints",
            "action": "Symbolic: Create a detection rule that monitors process execution events (ESF NOTIFY_EXEC) for system utilities (e.g., 'gdb', 'lldb', 'strings') and uses regular expressions to match command-line arguments containing the literal string 'securityd' or patterns indicating a PID is being passed to the utility (e.g., `gdb -p $(pgrep securityd)`). Statistical: Establish a baseline of command-line argument patterns and entropy for common utilities like `grep` and `strings`. Alert on commands whose argument structure deviates by more than two standard deviations from the established norm, particularly when targeting a system process directory or memory space. Machine Learning: Use an unsupervised learning model, such as an autoencoder, trained on a large corpus of benign command-line logs. The model learns to reconstruct 'normal' commands. Commands that result in a high reconstruction error are flagged as anomalies, suggesting they do not conform to typical usage patterns."
          },
          {
            "description": "A memory access event where a source process, not on an established allowlist of standard system or application processes, attempts to read memory from the 'securityd' target process.",
            "data_sources": [
              "macOS memory access logs (e.g., ESF)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints with EDR agents capable of monitoring memory access APIs",
            "action": "Symbolic: Maintain an allowlist of process names and their expected cryptographic hashes (e.g., 'WindowServer', 'launchd', web browsers) that are authorized to interact with `securityd`. Generate a high-severity alert for any process not on this list that attempts a memory read operation (e.g., via `task_for_pid` or `mach_vm_read` APIs) against the `securityd` process. Statistical: For all processes attempting to access `securityd` memory, calculate the rarity of the source-process-to-target-process interaction across the environment. An interaction pair that falls below a 1st percentile frequency threshold (i.e., is extremely rare) is a strong anomaly. Machine Learning: Develop a graph-based anomaly detection model where nodes are processes and edges represent interactions. Identify communities of normal process interactions. A process attempting to access `securityd` that is not part of the established 'normal' `securityd` interaction cluster is flagged as a high-priority anomaly."
          },
          {
            "description": "A timed sequence of events where a process first executes a discovery command to find the securityd PID, then attempts to read its memory, and subsequently initiates an external network connection.",
            "data_sources": [
              "ESF NOTIFY_EXEC events",
              "macOS memory access logs",
              "ESF NOTIFY_CREATE (for network sockets)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points, DNS servers",
            "action": "Symbolic: Create a stateful detection rule to identify a chain of events from a single parent process within a 2-minute window: 1) Execution of a discovery command like `pgrep securityd`. 2) A subsequent memory read attempt against the `securityd` PID. 3) A new external network connection (observed via ESF network events or Zeek conn.log). Link these discrete events via process ID and user context. Statistical: Within an identified malicious sequence, analyze the destination IP from the network connection (Zeek conn.log). Calculate the historical rarity of this destination IP across the organization. A connection to an IP address in the 99th percentile of rarity significantly increases the alert's confidence score. Machine Learning: Use a Hidden Markov Model (HMM) trained on benign user behavior sequences. A sequence of state transitions such as (shell -> `pgrep`) -> (shell -> `gdb`) -> (`gdb` -> `securityd` memory read) -> (`gdb` -> external IP) would have a very low probability under the benign model, thus triggering a high-confidence alert."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]