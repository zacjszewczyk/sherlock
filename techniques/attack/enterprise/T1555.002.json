[
  {
    "information_requirement": "Has the adversary attempted to access credentials from securityd process memory on a macOS endpoint? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555.002",
        "name": "Securityd Memory",
        "evidence": [
          {
            "description": "A process execution event occurs on a macOS endpoint where the executable's file hash or process name matches a known malicious signature associated with macOS credential dumping tools (e.g., 'chainjett', 'lazagne') from a threat intelligence source.",
            "data_sources": [
              "ESF NOTIFY_EXEC events",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS developer workstations, macOS build servers, executive macOS endpoints",
            "action": [
              "Symbolic: Create a detection rule to monitor process execution events (e.g., ESF NOTIFY_EXEC) for process names or executable file hashes matching a threat intelligence feed of known macOS credential dumping tools. Correlate hashes of executable files transferred over the network (from Zeek files.log) against the same list and alert on any match.",
              "Statistical: For each macOS process execution, calculate the historical execution frequency for that process name across the enterprise over the last 30 days. Flag any execution of a process that falls in the bottom 5th percentile of frequency on a given host, particularly if the parent process is a shell (e.g., zsh, bash) or scripting engine.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on labeled process execution events. Use features such as parent process, user context, command-line length, argument entropy, and file path rarity. Use the deployed model to score new process executions, flagging those with a high probability of being malicious for analyst review."
            ]
          },
          {
            "description": "A process execution event involving a system utility (e.g., `grep`, `strings`, `gdb`, `lldb`) includes command-line arguments that explicitly reference the 'securityd' process name or its dynamically resolved process ID (PID).",
            "data_sources": [
              "ESF NOTIFY_EXEC events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints",
            "action": [
              "Symbolic: Implement a detection rule that monitors process execution events (e.g., ESF NOTIFY_EXEC) for system utilities like 'gdb', 'lldb', 'strings', or 'grep'. Use regular expressions to match command-line arguments that contain the literal string 'securityd' or patterns indicating a PID is being passed to the utility (e.g., '-p $(pgrep securityd)').",
              "Statistical: For common system utilities, establish a baseline of command-line argument patterns, including argument count, length, and character entropy. Alert on any command whose argument structure deviates by more than two standard deviations from the established norm, especially when targeting a system process or memory space.",
              "Machine Learning: Deploy an unsupervised learning model, such as an autoencoder, trained on a large corpus of benign command-line logs. Flag commands that result in a high reconstruction error, as this indicates the command does not conform to typical usage patterns and may be malicious."
            ]
          },
          {
            "description": "A process not on an established allowlist attempts to read memory from the 'securityd' target process, detected via specific API call monitoring.",
            "data_sources": [
              "EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints with EDR agents capable of monitoring memory access APIs",
            "action": [
              "Symbolic: Maintain an allowlist of process names and their cryptographic hashes (e.g., 'WindowServer', 'launchd') authorized to interact with the 'securityd' process. Generate a high-severity alert for any process not on this list that attempts a memory read operation (e.g., via `task_for_pid` or `mach_vm_read` APIs) against the 'securityd' process.",
              "Statistical: For all processes attempting to access 'securityd' memory, calculate the rarity of the source-process-to-target-process interaction across the environment. An interaction pair that falls below a 1st percentile frequency threshold (i.e., is extremely rare) should be flagged as a strong anomaly for investigation.",
              "Machine Learning: Develop a graph-based anomaly detection model where nodes are processes and edges represent interactions (e.g., memory access). Identify communities of normal process interactions through clustering. A process attempting to access 'securityd' that is not part of the established 'normal' 'securityd' interaction cluster should be flagged as a high-priority anomaly."
            ]
          },
          {
            "description": "A timed sequence of events is observed from a single process: 1) discovery of the securityd PID, 2) an attempt to read its memory, and 3) a subsequent external network connection.",
            "data_sources": [
              "ESF NOTIFY_EXEC events",
              "EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls",
              "ESF NOTIFY_CREATE (for network sockets)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points, DNS servers",
            "action": [
              "Symbolic: Create a stateful detection rule to identify a chain of events originating from the same parent process ID within a 2-minute window: 1) Execution of a discovery command like 'pgrep securityd'. 2) A subsequent memory read attempt against the 'securityd' PID. 3) A new external network connection. Correlate these discrete events via process ID and user context using host (ESF) and network (Zeek conn.log) logs to trigger a single, high-fidelity alert.",
              "Statistical: Upon triggering the symbolic rule, analyze the destination IP and domain from network logs (Zeek conn.log and dns.log). Calculate the historical rarity of this destination IP/domain across the organization. A connection to a destination in the 99th percentile of rarity (i.e., seen very infrequently) or a newly registered domain significantly increases the alert's confidence score.",
              "Machine Learning: Use a sequence-based model like a Hidden Markov Model (HMM) or Recurrent Neural Network (RNN) trained on benign user behavior sequences (process executions, file access, network connections). A sequence of state transitions such as (shell -> pgrep) -> (shell -> gdb) -> (gdb -> securityd memory read) -> (gdb -> external IP) would have a very low probability under the benign model, thus triggering a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]