[
  {
    "information_requirement": "Has the adversary moved laterally through the network using SSH?",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1021.004",
        "name": "SSH",
        "evidence": [
          {
            "description": "An SSH connection is established using a client software version string or a server host key hash that matches a known malicious signature.",
            "data_sources": [
              "Zeek ssh.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points, Critical Linux/Unix servers, Bastion hosts",
            "action": "Symbolic: Maintain a threat intelligence feed of known-bad SSH client version strings (e.g., 'PuTTY_KiTTY') and host key hashes. Create a query to scan the 'client' and 'host_key' fields in Zeek ssh.log for exact matches and alert. Statistical: Analyze the frequency of all 'client' strings in Zeek ssh.log across the enterprise over a 30-day period. Flag any client version that falls below a rarity threshold (e.g., present in <0.01% of connections) for review, as adversaries may use uncommon or custom clients. Machine Learning: Train a classification model (e.g., Random Forest) on a labeled dataset of known-good and known-bad SSH client strings. Use features like string length, character distribution, and n-grams to predict if a new, unseen version string is malicious."
          },
          {
            "description": "The SSH client process is executed with command-line arguments designed to bypass host key verification, disable interactive prompts, or obscure forensic artifacts.",
            "data_sources": [
              "Windows Event ID 4688",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows and Linux endpoints and servers, Domain Controllers, Developer Workstations",
            "action": "Symbolic: Use regular expressions to search process creation events (Windows Event ID 4688, Linux auditd) for executions of 'ssh.exe', 'plink.exe', etc., with command-line arguments like '-o StrictHostKeyChecking=no', '-o UserKnownHostsFile=/dev/null', or '-batch'. Alert on any match. Statistical: For each user, establish a baseline of normally used SSH command-line arguments and their frequencies. Calculate a risk score for a new command based on the rarity of its arguments for that user. An SSH command with multiple rare arguments (e.g., in the 99th percentile of rarity) would receive a high score and trigger an alert. Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on vectorized representations of SSH command lines (e.g., using TF-IDF on arguments). This can automatically group command patterns, allowing analysts to identify outlier clusters that represent anomalous or malicious scripted activity without pre-defining the patterns."
          },
          {
            "description": "A successful SSH authentication creates a new connection pathway (user-to-host, host-to-host) not seen within a defined historical baseline, or originates from a geolocated IP address anomalous for the user.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, Critical servers, Network choke points, VPN concentrators",
            "action": "Symbolic: Maintain a state table of all successful '(user, source_ip, destination_host)' SSH connection tuples observed over the last 30 days. Alert on any new successful SSH login (e.g., Windows Event ID 4624 Logon Type 3, Zeek ssh.log) that does not match an existing entry in the state table. Statistical: For each user, model their typical source IP geolocation (Country, ASN) and login time-of-day. Use a scoring system where deviations (e.g., login from a new country, login at 3 AM) add risk points. An event exceeding a percentile-based threshold (e.g., 98th percentile of risk scores) is flagged. Machine Learning: Apply a time series forecasting model (e.g., ARIMA) to the volume of new ('first-seen') SSH pathways created per hour. A sudden spike in new pathways that significantly deviates from the forecast's confidence interval indicates a potential automated lateral movement campaign."
          },
          {
            "description": "A single source IP address or user account initiates successful SSH connections to a statistically significant number of distinct destination hosts within a short time window.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments, Server subnets, Data center core switches",
            "action": "Symbolic: Create a rule that alerts if a single source IP or user account (from Zeek conn.log or Windows Event ID 4624) establishes successful SSH connections to more than a hard-coded number of distinct hosts (e.g., >10) within 15 minutes. Statistical: In a 1-hour sliding window, group successful SSH connections by source IP/user and count distinct destinations. Identify outliers where the count exceeds 3 standard deviations above the mean or the 99th percentile for that window. Machine Learning: Model SSH connections as a graph. Use a community detection algorithm (e.g., Louvain Modularity) to identify clusters of activity. Adversary 'fan-out' behavior will often form a distinct, dense star-shaped community that can be algorithmically separated from normal, sparser connection patterns for analyst review."
          },
          {
            "description": "An SSH session exhibits explicit port forwarding flags or has anomalous data volume and duration characteristics consistent with data tunneling or a proxied interactive session.",
            "data_sources": [
              "Zeek ssh.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic inspection points (e.g., Zeek sensors), DMZ, Internet gateways",
            "action": "Symbolic: Alert on any SSH session recorded in Zeek ssh.log where the 'port_forwarding_requested' field is 'T'. Correlate the session's unique ID (uid) with Zeek conn.log to identify the specific traffic being tunneled and check if the destination is a sensitive internal port (e.g., 3389, 5985). Statistical: For all SSH sessions, calculate the total bytes transferred and the duration. Flag sessions that are statistical outliers in both duration and volume (e.g., in the top 5th percentile for both metrics), as this is characteristic of data exfiltration tunnels, not typical interactive use. Machine Learning: Train a time series anomaly detection model, such as an Autoencoder, on the byte-per-second traffic patterns of legitimate interactive SSH sessions. Feed real-time session traffic data into the model; a high reconstruction error indicates a deviation from normal patterns, such as the steady flow of a tunneled file transfer."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]