[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by masquerading as a legitimate process or resource? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.005",
        "name": "Match Legitimate Resource Name or Location",
        "evidence": [
          {
            "description": "A process is executed with a filename of a known system utility (e.g., svchost.exe) but its file hash matches a hash on a threat intelligence feed of known malware.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly Domain Controllers and critical infrastructure servers.",
            "action": "For each process creation event (Sysmon Event ID 1, Windows Event ID 4688), perform three checks. First, a symbolic logic check: inner join the process executable's hash against a high-confidence threat intelligence feed of malicious hashes. Alert on any match, especially where the filename is a common system utility. Second, a statistical analysis: for any alert, calculate the prevalence of the file hash and filename across the environment; a low prevalence (e.g., present on <1% of assets) significantly increases the suspicion score. Third, a machine learning classification: use a pre-trained classifier that inputs the filename, hash, file path, parent process, and threat intel match status to produce a 'masquerade confidence score' to prioritize alerts for analyst review."
          },
          {
            "description": "A process with a name of a common system utility (e.g., svchost.exe, lsass.exe) executes from a file path outside of its established baseline (e.g., not from %SystemRoot%\\System32).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, servers with user RDP access, and temporary file directories (e.g., C:\\Users\\Public, %TEMP%) across all Windows hosts.",
            "action": "For each process creation event, perform three checks. First, a symbolic logic check: maintain a strict allowlist of parent paths for critical system processes (e.g., lsass.exe must be in %SystemRoot%\\System32) and alert on any deviation. Second, a statistical analysis: for all other processes, establish a baseline of common execution paths. Calculate the frequency of each (process_name, path) pair and flag any pair that falls below a rarity threshold (e.g., observed less than 5 times enterprise-wide in the last 30 days). Third, a machine learning approach: use a clustering algorithm (e.g., DBSCAN) on process execution events using features like file path depth, parent directory name, and process name. Isolate and investigate outlier clusters which represent anomalous execution locations."
          },
          {
            "description": "An executable file with a legitimate name (e.g., rundll32.exe) has PE (Portable Executable) metadata fields, such as OriginalFilename or CompanyName, that are null or do not match the expected values for that binary.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers where detailed process creation logging with PE header information (Sysmon) is enabled.",
            "action": "On process creation (Sysmon Event ID 1), perform three checks for processes matching names of common system utilities. First, a symbolic logic check: compare the 'OriginalFilename', 'InternalName', and 'CompanyName' fields against a known-good baseline for that process name. Alert on any mismatch or null value. Second, a statistical analysis: calculate the Levenshtein distance between the observed 'OriginalFilename' and the on-disk filename; a high distance score indicates a likely rename. Additionally, calculate the Shannon entropy of the 'Description' field; values in the top 98th percentile suggest randomized or junk data. Third, a machine learning classification: train a Random Forest classifier using features such as boolean flags for metadata matches, entropy scores, and string distances to predict if a binary's metadata is consistent with a legitimate file."
          },
          {
            "description": "A core system process (e.g., svchost.exe, lsass.exe) is spawned by a parent process that is not its typical parent (e.g., spawned by winword.exe instead of services.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts, with a focus on systems running user-facing applications like Microsoft Office, web browsers, and script interpreters.",
            "action": "For each process creation event, perform three checks. First, a symbolic logic check: create and enforce an allowlist of known-good parent-child relationships for high-value system processes and alert on any violation. Second, a statistical analysis: for all parent-child process pairs, calculate their frequency across the enterprise over a 30-day rolling window. Flag any pair that is statistically rare (e.g., falls in the bottom 1st percentile of all observed pairs) for investigation. Third, a machine learning time-series analysis: monitor the daily count of specific rare but potentially malicious parent-child pairs (e.g., 'outlook.exe' -> 'powershell.exe'). Use an anomaly detection model (e.g., SARIMA) to alert on sudden spikes in the frequency of these pairs, which could indicate the start of a coordinated campaign."
          },
          {
            "description": "A process with a legitimate name (e.g., svchost.exe) exhibits anomalous behavior, such as using high-entropy command-line arguments, communicating with a non-standard destination port, or resolving a domain with a name characteristic of DGA.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internal network sensor locations, DNS resolvers (for Zeek logs), and all Windows hosts (for process and Sysmon network logs).",
            "action": "For processes with legitimate system names, perform three checks. First, a symbolic logic check: correlate network connections (Sysmon Event ID 3, Zeek conn.log) with threat intelligence feeds. Alert if a process like 'lsass.exe' communicates with a known C2 server IP. Second, a statistical analysis: for each process name, build a profile of normal behavior. Calculate the Shannon entropy of its command-line arguments (from Sysmon Event ID 1) and alert on values above the 95th percentile for that process. For network connections, alert if the destination port is not in the top 99% of historically used ports for that process. For DNS lookups (Zeek dns.log), calculate domain name entropy and flag requests from system processes for high-entropy domains. Third, a machine learning approach: use an Isolation Forest model trained on a feature set of legitimate behavior (command-line length, entropy; network bytes sent, destination port, connection duration). Any new activity that the model flags as an outlier is a high-confidence indicator of masquerading."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]