[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by smuggling malicious payloads within SVG files?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.017",
        "name": "SVG Smuggling",
        "evidence": [
          {
            "description": "An SVG file transferred over the network whose SHA256 hash matches a known-malicious hash from a threat intelligence feed, or an SVG file containing a URL or IP address within its script or link tags that is present on a malicious indicator list.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Mail Gateway, Network Egress Points",
            "action": [
              "Symbolic: For all files with mime_type 'image/svg+xml' in Zeek files.log, calculate the SHA256 hash. Join this hash against a threat intelligence feed of known malicious file hashes. Alert on any match. Concurrently, parse the content of all SVG files from Zeek http.log or files.log to extract all URLs and IP addresses from `href`, `xlink:href`, and script content, and join them against a CTI feed of malicious domains/IPs.",
              "Statistical: From Zeek http.log, extract all destination domains and IPs referenced within SVG file bodies. For each domain, calculate its prevalence across the entire organization over the last 30 days. Flag any SVG-referenced domains that fall below the 5th percentile of prevalence (i.e., are exceptionally rare) for further investigation.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) on features extracted from SVG script content and associated network traffic. Features should include: presence of known malicious URLs (binary), domain rarity score (from statistical analysis), and domain age. Use the model to predict the likelihood that an SVG is malicious based on the domains it contacts. Alert when the predicted probability exceeds a predefined threshold (e.g., 0.85)."
            ]
          },
          {
            "description": "An SVG file's embedded script content includes function names, variable names, or code structures (e.g., specific sequences of API calls like `atob`, `Blob`, `URL.createObjectURL`) that match signatures for known malware families or smuggling techniques.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Cloud Application Security Broker (CASB), User Workstations",
            "action": [
              "Symbolic: Using data from Zeek http.log or files.log, scan the content of embedded scripts within SVG files for regular expression matches against a curated list of signatures. Signatures should target unique function/variable names, obfuscation patterns (e.g., long hex strings), and API call sequences (e.g., `atob` -> `Blob` -> `createObjectURL` -> `a.click`) associated with known SVG smuggling campaigns (e.g., Qakbot, IcedID, DarkGate).",
              "Statistical: For each SVG with script content, calculate the frequency of specific JavaScript keywords and functions (e.g., `eval`, `document.write`, `atob`, `Blob`). Establish a baseline distribution of these keyword frequencies from a large corpus of benign SVG files. Alert on any SVG file where the frequency of a sensitive keyword exceeds the 99th percentile of the benign baseline.",
              "Machine Learning: Develop a Natural Language Processing (NLP) model using a technique like TF-IDF (Term Frequency-Inverse Document Frequency) on the script content of SVG files. Train a classifier on the resulting vectors to distinguish between malicious and benign scripts. Use this model to score all new SVGs with script content, flagging those classified as malicious with high confidence."
            ]
          },
          {
            "description": "An SVG file contains embedded script content that exhibits a Shannon entropy score significantly higher than a baseline of benign SVG files, indicating potential obfuscation or packed data.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Mail Gateway, File Servers",
            "action": [
              "Symbolic: Search for SVG files that contain both a `<script>` tag and a `data:` URI with base64 encoding. Alert on any instance where the decoded base64 content contains a PE header ('MZ') or script header (e.g., '#!/bin/bash', '<#').",
              "Statistical: For every SVG file identified in Zeek files.log containing a `<script>` tag, calculate the Shannon entropy of the script content. Establish a baseline entropy score from a known-good set of SVGs used by internal applications and common websites. Generate an alert for any SVG whose script entropy exceeds 3 standard deviations from the baseline mean, or surpasses a hard threshold (e.g., 6.5).",
              "Machine Learning: Implement an anomaly detection model (e.g., One-Class SVM or Isolation Forest) trained on features extracted from benign SVG files. Features should include file size, script content length, script entropy, and the ratio of script length to total file size. Apply the model to all new SVG files; anomalies flagged by the model represent potential smuggling attempts."
            ]
          },
          {
            "description": "A new process creation event for a script interpreter (`wscript.exe`, `cscript.exe`, `powershell.exe`) or an unsigned executable originates from a browser process on an endpoint within 5 minutes of that endpoint downloading an SVG file.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Active Directory Domain Controllers, Internal DNS Resolvers, Network Egress Points",
            "action": [
              "Symbolic: Correlate logs by source IP and timestamp. Trigger an alert if a Windows Event ID 4688 (Process Creation) event shows a browser process (e.g., `chrome.exe`, `msedge.exe`) spawning a child process of `wscript.exe`, `cscript.exe`, or `powershell.exe` within 5 minutes after a Zeek http.log event shows the same source IP downloading a file with mime_type 'image/svg+xml'.",
              "Statistical: For each endpoint, establish a baseline of normal child processes spawned by browsers. After an SVG download is observed for an endpoint, monitor its process creation events (Windows Event ID 4688) for the next 10 minutes. If a child process is created that is statistically rare for that user or for the general population (e.g., a process that has never been seen as a child of a browser), generate a high-severity alert.",
              "Machine Learning: Use a time-series analysis model to monitor the rate of DNS queries (from Zeek dns.log) and new outbound connections (from Zeek conn.log) for each host. If, after an SVG download is recorded in Zeek http.log, the time-series model detects a significant anomaly (a spike) in DNS query rate or new connection attempts that deviates from the host's predicted behavior, correlate this with the SVG download event and flag for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]