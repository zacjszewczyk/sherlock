[
  {
    "information_requirement": "Is the adversary evading defenses by smuggling malicious payloads in SVG files?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.017",
        "name": "SVG Smuggling",
        "evidence": [
          {
            "description": "An SVG file, identified in network traffic, either has a file hash matching a known-malicious signature or contains an embedded URL/IP address that matches an entry on a threat intelligence blocklist.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Mail Gateway, Network Egress Points, Threat Intelligence Platform",
            "action": [
              "For every file with mime_type 'image/svg+xml' logged in Zeek files.log, compute its SHA256 hash and query against a threat intelligence feed of malicious file hashes. Additionally, from Zeek http.log or file extractions, parse all SVG content to extract URLs and IP addresses from `<script src=...>`, `<a href=...>`, and `xlink:href` attributes, then query these indicators against a CTI feed of malicious domains and IPs. Generate an alert upon any match.",
              "From Zeek http.log and dns.log, aggregate all domains requested by the enterprise over the last 30 days and calculate their request frequency. For any domain found within an SVG file, determine its rarity. Generate an alert for SVGs referencing domains that fall into the bottom 5th percentile of request frequency, as these are anomalously rare.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using a labeled dataset of benign and malicious SVGs. Extract features such as: presence of script tags (boolean), length of script content, number of URLs, domain age and reputation of embedded URLs (via external enrichment), and the rarity score of the domain (from the statistical method). Deploy the model to score all new SVG files and alert when the malicious probability score exceeds a determined threshold (e.g., > 0.90)."
            ]
          },
          {
            "description": "The script content within an SVG file contains code patterns, function names, or API call sequences that match known malicious JavaScript droppers or smuggling frameworks.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Cloud Application Security Broker (CASB), User Workstations",
            "action": [
              "Deploy regular expression (YARA) rules to scan the content of all 'image/svg+xml' files extracted from network traffic (Zeek files.log). The rules must target specific strings and patterns associated with smuggling, such as `atob(`, `Blob(`, `URL.createObjectURL(`, `msSaveBlob(`, and function chains used by malware like Qakbot, IcedID, or DarkGate to deobfuscate and launch payloads. Alert on any rule match.",
              "For all SVGs containing script tags, calculate the frequency distribution of JavaScript keywords (e.g., `eval`, `atob`, `document.write`) and API calls. Establish a baseline distribution from a large, trusted corpus of benign SVGs. Alert on any SVG where the frequency of a high-risk keyword (like `eval`) exceeds the 99.9th percentile of the benign baseline, or the overall keyword distribution significantly deviates from the baseline as measured by a Kullback-Leibler divergence score.",
              "Develop a sequence-based model (e.g., a Recurrent Neural Network - RNN or LSTM) trained on the Abstract Syntax Trees (ASTs) or token sequences of JavaScript from known benign and malicious SVGs. The model learns to identify malicious code structures and sequences. Apply the trained model to classify the script content of all new SVGs, alerting on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "The script content within an SVG file has a calculated Shannon entropy value that significantly exceeds the established baseline for benign script content, suggesting the presence of packed or encrypted data.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Web Proxy, Mail Gateway, File Servers",
            "action": [
              "Create a rule to detect SVG files that simultaneously contain a `<script>` tag and a Base64-encoded `data:` URI within the script. As a secondary check, decode the Base64 content and search for file headers indicative of an executable (e.g., 'MZ', 'PE') or a secondary script (e.g., '#!/bin/bash', '<#', 'VBS'). Alert on any match.",
              "For every SVG file containing a `<script>` tag (from Zeek files.log), calculate the Shannon entropy of the script's content. Maintain a rolling 30-day baseline of entropy values for script-bearing SVGs in your environment. Alert on any SVG whose script entropy exceeds the 98th percentile of this baseline, indicating an anomalously high degree of randomness typical of obfuscation.",
              "Implement an anomaly detection model (e.g., Isolation Forest) trained on features extracted from a known-benign set of SVG files. Features should include: overall file size, script content length, script-to-file-size ratio, script entropy, number and length of hex-encoded strings, and number and length of Base64-encoded strings. Use the model to score all new SVGs; alerts are generated for files identified as anomalies."
            ]
          },
          {
            "description": "A script interpreter process (e.g., wscript.exe, powershell.exe) is created by a browser process on an endpoint, where the event occurs within a short time window (e.g., 5 minutes) following the same endpoint downloading an SVG file.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Active Directory Domain Controllers, Internal DNS Resolvers, Network Egress Points",
            "action": [
              "Create a SIEM correlation rule that joins network and endpoint logs. The rule should trigger an alert when: 1) A Zeek http.log event shows a host downloading a file with mime_type 'image/svg+xml', and 2) A Windows Event ID 4688 from the same host (matched by IP) shows a browser process (e.g., `chrome.exe`, `msedge.exe`, `firefox.exe`) as the ParentProcessName for a NewProcessName of `wscript.exe`, `cscript.exe`, `powershell.exe`, `mshta.exe`, or `rundll32.exe` within 5 minutes of the download.",
              "For each host, create a baseline of all parent-child process relationships involving browser processes over a 30-day period. Following an observed SVG download on a host, monitor its process creation events (Windows Event ID 4688). Generate an alert if the browser spawns a child process that has never been observed in its baseline (a 'first seen' relationship), or if the spawned process is in the bottom 1st percentile of prevalence for all browser-spawned child processes across the enterprise.",
              "Deploy a time-series anomaly detection model (e.g., SARIMA or LSTM-based autoencoder) for each host, monitoring key indicators like outbound network connection rate (from Zeek conn.log), DNS query volume (from Zeek dns.log), and process creation rate (from Windows Event ID 4688). If the model detects a statistically significant anomaly spike in one or more of these time series within 10 minutes after an SVG download is logged for that host, generate a correlated alert for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]