[
  {
    "information_requirement": "Is the adversary establishing persistence by hijacking an accessibility feature?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.008",
        "name": "Accessibility Features",
        "evidence": [
          {
            "description": "An accessibility feature binary (e.g., sethc.exe, utilman.exe) is replaced by a file with a known malicious hash, or its Image File Execution Options (IFEO) registry key (HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<binary>) is modified to point to a malicious debugger executable.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 4663",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations",
            "action": [
              "Query for file creation events (Sysmon Event ID 11, Windows Event ID 4663) in C:\\Windows\\System32\\ where the target filename is a known accessibility binary. Compare the file's hash against a threat intelligence feed of known malicious hashes. Separately, query for registry value set events (Sysmon Event ID 13) modifying the 'Debugger' value under an accessibility feature's IFEO key. Compare the new value (executable path) against known malware paths. Alert on any match.",
              "For all 'Debugger' value modifications under IFEO keys for accessibility binaries, establish a baseline of legitimate debugger values (e.g., procdump.exe). Use frequency analysis to identify rare or first-seen values across the enterprise. A debugger executable path with a population prevalence below a defined threshold (e.g., present on <0.1% of endpoints) should be flagged for review.",
              "Train a classification model (e.g., XGBoost) using features from file and registry modification events. For file modifications, use features like parent process, file signature status, and hash entropy. For registry modifications, use features like process path, user context, and characteristics of the new debugger path. The model, trained on labeled benign (patching) and malicious data, will predict the likelihood that a new modification event is part of an attack."
            ]
          },
          {
            "description": "A sequence of file system operations occurs on an accessibility feature binary within a short time window: 1) ownership is changed (e.g., via takeown.exe), 2) permissions are modified (e.g., via icacls.exe), and 3) the file is overwritten or renamed.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Windows Event ID 4670",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations",
            "action": [
              "Create a correlation rule that alerts when a process creation for takeown.exe or icacls.exe targeting an accessibility binary (Sysmon Event ID 1) is followed within 5 minutes by a file write/overwrite event on the same binary (Sysmon Event ID 11, Windows Event ID 4663), all originating from the same host and logon session.",
              "For each host, profile the rate of permission changes (Windows Event ID 4670) on files within C:\\Windows\\System32\\. Use a moving average and standard deviation to model this baseline rate. Generate an alert if the count of permission changes on accessibility binaries within a 5-minute window exceeds a statistical threshold (e.g., 3 standard deviations above the mean), indicating anomalous tampering.",
              "Implement a sequence analysis model, such as a Long Short-Term Memory (LSTM) network, to learn normal sequences of file system events (process creation, permission change, file write) on system binaries during legitimate activities like software patching. An anomalous sequence, such as takeown -> icacls -> write on sethc.exe outside a known maintenance window, will be flagged by the model as a high-probability attack pattern."
            ]
          },
          {
            "description": "A process not associated with standard system maintenance (e.g., WINWORD.EXE, POWERSHELL.EXE) writes to an accessibility feature binary or modifies its associated IFEO registry key.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations",
            "action": [
              "Maintain an allowlist of trusted parent processes (e.g., TrustedInstaller.exe, msiexec.exe, svchost.exe) authorized to modify system files in System32 or specific IFEO keys. Create a rule that alerts whenever a process not on this list performs a file write (Sysmon Event ID 11) to an accessibility binary or a registry set (Sysmon Event ID 13) to its IFEO 'Debugger' value.",
              "Across the enterprise, analyze parent-child process relationships for all modifications to accessibility binaries or their IFEO keys. Calculate the population frequency of each parent process performing such a modification. A parent process that is statistically rare (e.g., in the 1st percentile of observed parent processes for system file modifications) should be flagged as suspicious.",
              "Train a decision tree or random forest classifier on process creation events (Sysmon Event ID 1) that lead to system modifications. Use features such as parent process name, parent command line, child command line, user context, and process integrity level. The model will learn to classify modification events as either 'benign-system-activity' or 'suspicious-user-driven-modification'."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by executing a previously hijacked accessibility feature?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.008",
        "name": "Accessibility Features",
        "evidence": [
          {
            "description": "A command shell (cmd.exe, powershell.exe) is executed as a child process of an accessibility feature binary, and its command line contains keywords, patterns, or arguments indicative of reconnaissance, credential dumping, or establishing a reverse shell.",
            "data_sources": [
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations and Servers), especially Domain Controllers and Remote Desktop Gateway Servers",
            "action": [
              "Query for process creation events (Sysmon Event ID 1) where the ParentImage is an accessibility binary. Scan the CommandLine of the child process using regular expressions for high-confidence malicious patterns (e.g., 'mimikatz', 'iex(new-object net.webclient)', 'net user /add', 'whoami /all'). Alert on any match.",
              "For all command lines executed by shells spawned from accessibility feature processes, calculate the Shannon entropy of the command line string. Establish a baseline distribution of entropy scores for legitimate commands. Flag any command line whose entropy score exceeds a high percentile threshold (e.g., > 95th percentile), as this often indicates obfuscation or encoding (e.g., Base64).",
              "Fine-tune a pre-trained Natural Language Processing (NLP) model (e.g., a transformer-based model) on a labeled dataset of malicious and benign command lines. Deploy the model to classify new command lines originating from accessibility feature processes as malicious or benign, enabling detection of novel attack syntax."
            ]
          },
          {
            "description": "A sequence of events is observed originating from a process spawned by an accessibility feature: 1) a shell is created, 2) a new user account is created, and 3) the new account is added to a privileged local or domain group, all within a short time window.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Windows Event ID 4728",
              "Windows Event ID 4756"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Logon screens of all Windows systems, Domain Controllers, Active Directory databases",
            "action": [
              "Create a correlation rule that triggers when: 1) an accessibility feature spawns a shell (Sysmon Event ID 1), followed within 2 minutes by 2) a user creation event (Windows Event ID 4720), and then 3) an event adding a member to a privileged group (e.g., Administrators, Domain Admins - Windows Event ID 4732, 4728). All events must be linked to the same host and originating logon session.",
              "Analyze the time delta between a shell being spawned by an accessibility feature (Sysmon Event ID 1) and a subsequent user creation (4720) or group addition (4732/4728) event on the same host. A time delta in the lowest percentile (e.g., < 5 seconds) is highly indicative of a scripted attack, as opposed to manual administrative actions which exhibit larger, more variable delays.",
              "Use a graph-based anomaly detection model where nodes represent processes, users, and groups, and directed edges represent actions (e.g., 'spawns', 'creates', 'adds-to'). Train the model on benign administrative activity to learn normal graph structures and sequences. An attack sequence forming a distinct subgraph pattern (e.g., utilman.exe -> cmd.exe -> net.exe (user) -> net.exe (group)) will be identified as a structural anomaly."
            ]
          },
          {
            "description": "A process creation event is observed where the parent process is a known accessibility binary and the child process is a command shell, scripting interpreter, or remote access tool.",
            "data_sources": [
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (Workstations and Servers), Remote Desktop Gateway Servers",
            "action": [
              "Generate a high-severity alert for any process creation event (Sysmon Event ID 1) where ParentImage is in the set {'sethc.exe', 'utilman.exe', 'osk.exe', 'magnify.exe', 'narrator.exe', 'DisplaySwitch.exe', 'atbroker.exe'} and Image is in the set {'cmd.exe', 'powershell.exe', 'pwsh.exe', 'wscript.exe', 'cscript.exe', 'mshta.exe'}. This is a high-fidelity indicator of abuse.",
              "Establish a baseline of all parent-child process relationships across the enterprise over a 30-day period. Calculate the frequency of each unique pair. Generate an alert for any observed parent-child pair involving an accessibility binary as a parent that has a frequency below a very low threshold (e.g., seen less than 5 times enterprise-wide), flagging it as a rare and suspicious event.",
              "Train an autoencoder neural network on vector representations of normal parent-child process relationships (features could include process names, paths, integrity levels). When a malicious event, such as utilman.exe spawning cmd.exe, is passed to the trained model, the high reconstruction error will flag it as a novel anomaly not seen in the benign training data."
            ]
          },
          {
            "description": "A process spawned by an accessibility feature binary initiates an outbound network connection to an external IP address.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Firewall and proxy servers, Remote Desktop Gateway Servers, Domain Controllers",
            "action": [
              "Correlate host-based process creation events (Sysmon Event ID 1) where the parent is an accessibility binary with network connection events (Sysmon Event ID 3, Zeek conn.log) from the child process ID or source IP/port. Alert if the destination IP address matches a threat intelligence feed of known C2 servers or if the destination port is a common C2 or reverse shell port.",
              "From network logs (Zeek conn.log), for all outbound connections originating from processes spawned by accessibility features, perform frequency analysis to identify rare destination IP addresses, domains (from Zeek dns.log), or destination ports. Additionally, from Zeek ssl.log, calculate the JA3/JA3S hash of any TLS connection and flag hashes with low prevalence in the environment or that are associated with known malware.",
              "Apply time-series analysis (e.g., ARIMA or Prophet) to the volume of outbound data (e.g., orig_bytes from Zeek conn.log) associated with the source IP and timeframe of the suspicious process activity. Train a model on normal network egress patterns to detect anomalous, sustained data flows that deviate from learned baselines, which could indicate data exfiltration or an active C2 channel."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]