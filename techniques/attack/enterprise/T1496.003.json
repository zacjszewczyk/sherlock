[
  {
    "information_requirement": "Is the adversary causing financial or availability impact via SMS pumping?",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1496.003",
        "name": "SMS Pumping",
        "evidence": [
          {
            "description": "A measurable volume of outbound SMS messages are sent to phone numbers or country code prefixes appearing on threat intelligence lists for SMS fraud, or web form submissions originate from source IP addresses or User-Agents associated with known botnets.",
            "data_sources": [
              "Cloud Messaging Service Logs (e.g., Twilio API Logs, AWS SNS Logs)",
              "Zeek http.log",
              "Web Server Access Logs (e.g., IIS, Nginx, Apache)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers hosting OTP/verification forms, API Gateway, Cloud tenant for Messaging Services, Threat Intelligence Platform",
            "action": "1. (Symbolic) Ingest threat intelligence feeds for fraudulent phone number prefixes and known malicious botnet IPs/User-Agents. Create a detection rule to cross-reference these lists in real-time against destination phone numbers from Cloud Messaging Service Logs and source IPs/User-Agents from Zeek http.log and Web Server Access Logs. Generate a high-severity alert on any match. 2. (Statistical) For each web form, calculate the frequency of requests per source IP. Establish a baseline and alert if an IP exceeds the 99th percentile of requests within a 5-minute window, as this may indicate a bot that is not yet on a threat list. 3. (Machine Learning) Deploy a classification model (e.g., Logistic Regression, Random Forest) trained on features such as IP reputation, User-Agent string commonality, time of day, and country of origin. Use the model to score each incoming OTP/form request in real-time and flag those classified as 'high-risk bot' for investigation."
          },
          {
            "description": "Submissions to web forms that handle SMS messaging exhibit characteristics of automation, such as a low-variance, high-frequency request rate, or command-line execution of known SMS pumping tools is observed on internal systems.",
            "data_sources": [
              "Web Server Access Logs",
              "Cloud Messaging Service Logs",
              "Zeek http.log",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers, Internal hosts with API access to messaging services, Web Application Firewalls (WAFs), Endpoint Detection and Response (EDR) platform",
            "action": "1. (Symbolic) Monitor Windows Event ID 4688 (Process Creation) for command-line arguments containing names or hashes of known SMS pumping scripts (e.g., 'smspump.py'). Similarly, search Zeek http.log data for specific User-Agent strings associated with known automation tools like 'HeadlessChrome' or 'cURL' that deviate from typical browser traffic. 2. (Statistical) For each source IP submitting to an OTP form, calculate the time between consecutive requests. A low mean and very low standard deviation of these inter-arrival times indicates automation. Alert if the standard deviation for an IP's request timing over a 1-minute window is below a threshold (e.g., < 0.5 seconds). 3. (Machine Learning) Use a clustering algorithm like DBSCAN on web log data, using features such as source IP, User-Agent, and request timing. This can group automated bot-like activity into distinct clusters, separating it from the more varied patterns of legitimate human users, even without prior signatures."
          },
          {
            "description": "The volume or rate of outbound SMS message requests from a specific source (API key, web form, internal service) exceeds a statistically defined baseline by a significant margin.",
            "data_sources": [
              "Cloud Messaging Service Logs",
              "Web Server Access Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "API Gateway, Cloud Messaging Service Console/Dashboard, Network Egress Points, SIEM Platform",
            "action": "1. (Symbolic) Implement a simple threshold rule that triggers a medium-severity alert if a single API key is used to generate more than 100 SMS requests within a 1-minute window, indicating a likely compromised key or abusive service. 2. (Statistical) For each API key and web form endpoint, establish a baseline for the number of SMS requests per 5-minute interval using a 30-day moving average. Generate an alert if the current count exceeds the baseline by more than 3 standard deviations. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., ARIMA or Prophet) on the total volume of SMS requests across the organization. The model forecasts the expected volume with a confidence interval; an alert is triggered if the actual volume significantly surpasses the upper bound of the forecast, indicating a system-wide event."
          },
          {
            "description": "A significant and unexpected increase in messaging service costs is directly correlated with a high volume of API calls to phone numbers with high-risk, premium-rate, or geographically concentrated prefixes not typical for the business.",
            "data_sources": [
              "Cloud Provider Billing and Cost Management Logs",
              "Cloud Messaging Service Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Billing Console, Financial Reporting Systems, Cloud Messaging Service Console, Network Sensor Grid",
            "action": "1. (Symbolic) Create a rule that triggers if a cloud billing alert for SMS cost overruns occurs within the same 24-hour period that Cloud Messaging Service Logs show messages were sent to phone prefixes on a manually curated list of high-risk or non-business-relevant countries. 2. (Statistical) Monitor the daily cost for SMS services. Alert if the daily cost exceeds the 95th percentile of costs from the previous 90 days. Upon alert, automatically calculate the frequency distribution of destination country codes for that day; a low-entropy distribution heavily skewed towards one or two unusual countries is a strong indicator of fraud. 3. (Machine Learning) Use a multivariate correlation analysis to model the relationship between cost, SMS volume, and geographic distribution. An anomaly detection model can identify periods where the cost is disproportionately high given the message volume and destination mix, suggesting a shift to more expensive, fraudulent numbers."
          },
          {
            "description": "The geographic distribution of destination phone numbers for SMS messages deviates significantly from established patterns, or 'impossible travel' scenarios are observed where OTP requests originate from diverse geolocations in an unrealistically short time frame.",
            "data_sources": [
              "Cloud Messaging Service Logs",
              "Web Server Access Logs with IP Geolocation Enrichment",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers, Geolocation Enrichment Service, Cloud Messaging Service Console, DNS resolvers",
            "action": "1. (Symbolic) Maintain a list of countries where the organization has no legitimate users or business operations. Create a rule to alert whenever an SMS message is sent to a phone number with a country code from this explicit blocklist. 2. (Statistical) Calculate the Shannon entropy of the destination country codes from messaging logs over a rolling 1-hour window. A sharp drop in entropy from the established baseline indicates traffic is being focused on a small set of countries. Alert if the entropy value falls more than 2 standard deviations below the mean. 3. (Machine Learning) For each user session, create a sequence of (timestamp, source_IP_geolocation) from web logs. Apply a sequence-based anomaly detection model (e.g., an LSTM autoencoder) to identify 'impossible travel' events, where successive requests from a session originate from locations that are physically impossible to travel between in the elapsed time."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]