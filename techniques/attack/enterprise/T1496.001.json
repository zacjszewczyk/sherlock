[
  {
    "information_requirement": "Is the adversary impacting system or service availability through compute hijacking?",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1496.001",
        "name": "Compute Hijacking",
        "evidence": [
          {
            "description": "A host process creates a network connection to a known cryptocurrency mining pool domain/IP address, or a process executes with a file hash matching a known cryptominer.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise DNS resolvers, Internet gateways and network egress points, All host endpoints and servers",
            "action": [
              "Symbolic Logic: Continuously compare all DNS queries (Zeek dns.log query field) and outbound connection destination IPs (Zeek conn.log id.resp_h) against a high-fidelity, frequently updated threat intelligence feed of known cryptomining pool domains and IP addresses. Simultaneously, compare the file hash of every new process (from Windows Event ID 4688) against a threat intelligence feed of known cryptominer executable hashes. Generate a high-severity alert upon any match.",
              "Statistical Method: Analyze Zeek dns.log to calculate the entropy of subdomains for each registered domain queried. Identify domains with unusually high entropy in their subdomains (e.g., 95th percentile), as this can indicate the use of domain generation algorithms (DGAs) or randomized pool connection strings. Correlate high-entropy domains with long-duration connections in Zeek conn.log to increase confidence.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from Zeek conn.log and dns.log. Features should include connection duration, bytes transferred, protocol, DNS query length, and whether the destination IP is in a residential or cloud hosting ASN. Label training data using known mining IOCs. Use the trained model to classify new, unlabeled connections and flag those with a high probability of being related to cryptomining."
            ]
          },
          {
            "description": "A process executes with command-line arguments containing patterns or keywords strongly associated with cryptomining software, such as pool connection URLs, wallet addresses, or algorithm specifications.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, particularly web servers and application servers",
            "action": [
              "Symbolic Logic: Using Windows Event ID 4688 (Process Creation) and 4104 (Script Block Logging), scan command-line arguments and script content for regular expressions matching cryptomining patterns. Look for flags like '--o', '--url', '-u', '--user', '-p', '--pass', '--algo', '--threads' and patterns matching wallet addresses or Stratum protocol URLs (e.g., 'stratum+tcp://'). Alert on any match.",
              "Statistical Method: For each unique process name, calculate the historical distribution of its command-line argument length and character entropy. Identify statistical outliers where a common process name (e.g., 'svchost.exe', 'powershell.exe') is executed with command-line arguments that are significantly longer or have higher entropy (e.g., > 3 standard deviations from its own baseline) than is typical for that process across the enterprise.",
              "Machine Learning: Use a Natural Language Processing (NLP) model trained on millions of benign and malicious command lines. Feed new process command-line arguments (from Event ID 4688) into the model to classify them as benign, suspicious, or malicious. This can detect novel or obfuscated mining commands that regular expressions and simple statistics might miss."
            ]
          },
          {
            "description": "A host exhibits sustained, abnormally high CPU utilization (e.g., >80% for over 30 minutes) that is statistically unusual for the host's historical baseline and is attributed to a non-standard or unauthorized process.",
            "data_sources": [
              "Windows Performance Counters (Processor\\% Processor Time)",
              "Windows Performance Counters (Process\\% Processor Time)",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, Cloud compute instances, Virtualization hypervisors",
            "action": [
              "Symbolic Logic: Create a rule that triggers an alert when a host's 'Processor\\% Processor Time' counter exceeds a hard threshold (e.g., 90%) for a sustained period (e.g., 60 minutes) outside of a pre-defined maintenance or heavy workload window. Correlate this with the process-specific 'Process\\% Processor Time' counter to identify the top CPU-consuming process during that interval.",
              "Statistical Method: For each host, establish a multi-faceted baseline of CPU utilization using a 30-day rolling window, segmented by hour-of-day and day-of-week. Use a Z-score or percentile-based calculation to detect periods where current CPU usage is a significant statistical outlier (e.g., exceeds the 99th percentile for that specific time window). Trigger an alert when a host remains in an outlier state for a sustained duration (e.g., > 20 minutes).",
              "Machine Learning: Implement a time series forecasting model (e.g., ARIMA, LSTM) for each host's CPU utilization. The model, trained on historical data, will predict the expected CPU load for the next interval. Generate an anomaly score based on the delta between the predicted and actual CPU usage. A consistently high anomaly score indicates a deviation from normal behavior, prompting an investigation into the running processes (via Event ID 4688) during that time."
            ]
          },
          {
            "description": "A chronological sequence of events on a single host within a short timeframe: 1) A security or monitoring service is stopped or disabled, 2) A new, unknown, or suspicious process is created, 3) The host exhibits a sustained spike in CPU utilization, and 4) The new process initiates long-lived network connections to an external IP address with a low reputation.",
            "data_sources": [
              "Windows System Event Log (Event ID 7036)",
              "Windows Event ID 4688",
              "Windows Performance Counters (Processor\\% Processor Time)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, Domain Controllers (for security policy changes), Network egress points",
            "action": [
              "Symbolic Logic: Create a stateful correlation rule that triggers when the following events occur on the same host within 15 minutes: [Event A: Windows Event ID 7036 for a service name matching 'WinDefend', 'Sysmon', etc. enters the 'stopped' state] FOLLOWED BY [Event B: Windows Event ID 4688 for a process not in a known-good allowlist] FOLLOWED BY [Event C: Zeek conn.log shows a connection from the host to an external IP with a duration > 10 minutes]. Alert on this sequence.",
              "Statistical Method: Develop a risk scoring model. Assign risk points to discrete events: +10 for a security service stopping unexpectedly, +5 for a process created from a non-standard path (e.g., %TEMP%), +15 for CPU usage exceeding the 95th percentile, +20 for a connection to a newly seen IP address. Sum the risk score for a given host over a rolling 30-minute window. If the cumulative score exceeds a statistically determined threshold, trigger an alert.",
              "Machine Learning: Use a graph-based analytics platform to model host activity. Represent hosts, processes, and network destinations as nodes, and events (process creation, network connection) as edges. Train a graph neural network (GNN) to learn the structure of normal activity. Apply the model to new event data to identify subgraphs that are topologically anomalous, such as the specific chain of defense evasion -> process creation -> high CPU -> external connection."
            ]
          },
          {
            "description": "A host experiences a statistically significant increase in the rate of application crash events, service failures, or system hardware thermal warnings that temporally correlates with periods of sustained, anomalously high CPU utilization.",
            "data_sources": [
              "Windows Application Event Log (Event ID 1000, 1002)",
              "Windows System Event Log (Event ID 7031, 7034)",
              "Windows Performance Counters (Processor\\% Processor Time)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, especially those with critical applications",
            "action": [
              "Symbolic Logic: Create an alert that triggers if a host generates more than a fixed number (e.g., 5) of Application Error events (Event ID 1000) or Application Hang events (Event ID 1002) within a 1-hour window. Upon alert, an analyst should manually correlate this with the host's CPU performance chart for the same time period.",
              "Statistical Method: For each host, establish a baseline rate of application/system error events (e.g., Event IDs 1000, 1002, 7031, 7034) per hour. Use a Poisson distribution or standard deviation model to detect when the number of errors in a given hour is a statistical outlier (e.g., > 3 standard deviations above the mean). Automatically cross-reference these time windows with CPU utilization data to find correlations between instability and high resource usage.",
              "Machine Learning: Employ a Bayesian network to model the conditional probabilities between system states. The network would learn relationships like P(ApplicationCrash | HighCPU) and P(HighCPU | UnknownProcess). When the system observes a high rate of application crashes, the model can perform inference to calculate the most likely root cause, guiding the analyst's investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]