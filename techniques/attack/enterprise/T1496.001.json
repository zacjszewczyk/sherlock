[
  {
    "information_requirement": "Is the adversary impacting system or service availability through compute hijacking?",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1496.001",
        "name": "Compute Hijacking",
        "evidence": [
          {
            "description": "A process initiates a network connection to a destination IP address or resolves a domain name present on a threat intelligence feed of known cryptocurrency mining pools. Alternatively, a process executes with a file hash matching a known cryptominer executable.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS servers, network egress points (e.g., firewalls, proxies), all server and workstation endpoints.",
            "action": [
              "Symbolic Logic: Continuously compare all DNS queries (Zeek dns.log query field) and outbound connection destination IPs (Zeek conn.log id.resp_h) against a high-fidelity, frequently updated threat intelligence feed of known cryptomining pool domains and IP addresses. Simultaneously, compare the file hash of every new process (from Windows Event ID 4688 or Sysmon Event ID 1) against a threat intelligence feed of known cryptominer executable hashes. Generate a high-severity alert upon any match.",
              "Statistical Method: Analyze Zeek dns.log to calculate the entropy of subdomains for each registered domain queried. Identify domains with unusually high entropy in their subdomains (e.g., 95th percentile), as this can indicate the use of domain generation algorithms (DGAs) or randomized pool connection strings. Correlate high-entropy domains with long-duration connections (> 10 minutes) in Zeek conn.log to increase confidence.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from Zeek conn.log and dns.log. Features should include connection duration, bytes transferred, protocol, DNS query length, and whether the destination IP is in a residential or cloud hosting ASN. Label training data using known mining IOCs. Use the trained model to classify new, unlabeled connections and flag those with a high probability of being related to cryptomining."
            ]
          },
          {
            "description": "A process is created with command-line arguments or script block content containing patterns indicative of cryptomining, such as wallet addresses, pool URLs (e.g., stratum+tcp://), algorithm specifications (e.g., --algo), or configuration flags (e.g., -o, -u, -p).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "PowerShell Script Block Logging (Event ID 4104)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, particularly web servers and application servers.",
            "action": [
              "Symbolic Logic: Using Windows Event ID 4688 and PowerShell Event ID 4104, scan command-line arguments and script content for regular expressions matching cryptomining patterns. Look for flags like '--o', '--url', '-u', '--user', '-p', '--pass', '--algo', '--threads' and patterns matching wallet addresses or Stratum protocol URLs (e.g., 'stratum+tcp://'). Alert on any match.",
              "Statistical Method: For each unique process name, calculate the historical distribution of its command-line argument length and character entropy over a 30-day period. Identify statistical outliers where a common process name (e.g., 'svchost.exe', 'powershell.exe') is executed with command-line arguments that are significantly longer or have higher entropy (e.g., > 3 standard deviations from its own baseline) than is typical for that process across the enterprise.",
              "Machine Learning: Use a pre-trained Natural Language Processing (NLP) model specialized in classifying command-line arguments. Feed new process command-line arguments (from Sysmon Event ID 1) into the model to classify them as benign, suspicious, or malicious. This can detect novel or obfuscated mining commands that regular expressions and simple statistics might miss."
            ]
          },
          {
            "description": "A host's total CPU utilization exceeds a statistically significant threshold (e.g., 99th percentile of its historical baseline) for a sustained period (e.g., > 30 minutes), and the anomalous utilization is attributed to a single process that is either unauthorized, unsigned, or running from an unusual file path.",
            "data_sources": [
              "Windows Performance Monitor Logs (Processor\\% Processor Time)",
              "Windows Performance Monitor Logs (Process\\% Processor Time)",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, Cloud compute instances, Virtualization hypervisors.",
            "action": [
              "Symbolic Logic: Create a rule that triggers an alert when a host's 'Processor\\% Processor Time' counter exceeds a hard threshold (e.g., 90%) for a sustained period (e.g., 60 minutes) outside of a pre-defined maintenance or heavy workload window. Correlate this with the process-specific 'Process\\% Processor Time' counter to identify the top CPU-consuming process during that interval.",
              "Statistical Method: For each host, establish a multi-faceted baseline of CPU utilization using a 30-day rolling window, segmented by hour-of-day and day-of-week. Use a Z-score calculation to detect periods where current CPU usage is a significant statistical outlier (e.g., Z-score > 3). Trigger an alert when a host remains in an outlier state for a sustained duration (e.g., > 20 minutes) and enrich the alert with the top 5 consuming processes.",
              "Machine Learning: Implement a time series forecasting model (e.g., ARIMA, LSTM) for each host's CPU utilization. The model, trained on historical data, will predict the expected CPU load for the next interval. Generate an anomaly score based on the delta between the predicted and actual CPU usage. A consistently high anomaly score indicates a deviation from normal behavior, prompting an investigation into the running processes (via Sysmon Event ID 1) during that time."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a 15-minute window: 1. A security service (e.g., Windows Defender, Sysmon) is stopped (Windows Event ID 7036). 2. An unsigned or new process is created from a temporary or user-writable directory (Windows Event ID 4688). 3. The host's CPU utilization exceeds its 95th percentile baseline. 4. The new process establishes a network connection with a duration exceeding 10 minutes (Zeek conn.log).",
            "data_sources": [
              "Windows System Event Log (Event ID 7036)",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Windows Performance Monitor Logs (Processor\\% Processor Time)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, Domain Controllers (for security policy changes), Network egress points.",
            "action": [
              "Symbolic Logic: Create a stateful correlation rule that triggers when the following events occur on the same host within 15 minutes: [Event A: Windows Event ID 7036 for a service name matching 'WinDefend', 'Sysmon', etc. enters the 'stopped' state] FOLLOWED BY [Event B: Sysmon Event ID 1 for a process not in a known-good allowlist and path is suspicious] FOLLOWED BY [Event C: Zeek conn.log shows a connection from the host to an external IP with a duration > 10 minutes]. Alert on this sequence.",
              "Statistical Method: Develop a risk scoring model. Assign risk points to discrete events: +10 for a security service stopping unexpectedly, +5 for a process created from a non-standard path (e.g., %TEMP%), +15 for CPU usage exceeding the 95th percentile of its hourly baseline, +20 for a connection to a newly seen IP address. Sum the risk score for a given host over a rolling 30-minute window. If the cumulative score exceeds a statistically determined threshold, trigger an alert.",
              "Machine Learning: Use a graph-based analytics platform to model host activity. Represent hosts, processes, and network destinations as nodes, and events (process creation, network connection) as edges. Train a graph neural network (GNN) to learn the structure of normal activity. Apply the model to new event data to identify subgraphs that are topologically anomalous, such as the specific chain of defense evasion -> process creation -> high CPU -> external connection."
            ]
          },
          {
            "description": "A host shows a statistically significant increase in the rate of application error events (e.g., Windows Event ID 1000, 1002) or unexpected service termination events (e.g., Windows Event ID 7031, 7034) per hour. This increase in instability is temporally correlated (within the same hour) with CPU utilization exceeding the host's 95th percentile baseline.",
            "data_sources": [
              "Windows Application Event Log (Event ID 1000, 1002)",
              "Windows System Event Log (Event ID 7031, 7034)",
              "Windows Performance Monitor Logs (Processor\\% Processor Time)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers, especially those with critical applications.",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a host generates more than 5 Application Error events (Event ID 1000) within a 1-hour window AND the host's average CPU utilization ('Processor\\% Processor Time') for that same hour exceeds 90%. Enrich the alert with the top 5 CPU-consuming processes during that time.",
              "Statistical Method: For each host, establish a baseline hourly rate of error events (Event IDs 1000, 1002, 7031, 7034) over a 30-day period. Use a Poisson distribution model to identify hours where the event count is a statistical outlier (e.g., p-value < 0.01). If an outlier hour is detected, query the host's performance data to check if CPU utilization also exceeded its 95th percentile baseline during that same hour. Alert on this correlation.",
              "Machine Learning: Implement a Bayesian network to model the probabilistic dependencies between system state variables (e.g., 'HighCPU', 'AppCrash', 'UnknownProcessRunning'). Train the model on historical data to learn the conditional probability table (e.g., P(AppCrash | HighCPU)). In real-time, feed observed evidence (e.g., a spike in Event ID 1000) into the network and perform inference to calculate the posterior probability of 'HighCPU' being the cause. Alert when this probability exceeds a predefined threshold (e.g., 0.85)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]