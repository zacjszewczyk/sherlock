[
  {
    "information_requirement": "Has the adversary escalated privileges using UAC bypass techniques?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548.002",
        "name": "Bypass User Account Control",
        "evidence": [
          {
            "description": "An unauthorized or anomalous modification is made to a registry key within the HKEY_CURRENT_USER (HKCU) hive, specifically targeting keys known to be abused by auto-elevating processes (e.g., eventvwr.exe, sdclt.exe, fodhelper.exe) to execute arbitrary commands.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Windows Servers",
            "action": "1. Symbolic Logic: Create and maintain a watchlist of specific HKCU registry keys and paths known to be abused for UAC bypass (e.g., `HKCU\\Software\\Classes\\mscfile\\shell\\open\\command`). Trigger an alert when a registry modification event (Sysmon Event ID 13, Windows Event ID 4657) matches a key on this list and the new value contains a suspicious file path or command (e.g., points to `powershell.exe`, `cmd.exe`, or a file in a temporary or user-writable directory).\n2. Statistical Analysis: For each user, establish a baseline of normal registry modification activity within the HKCU hive. Calculate the Shannon entropy of the new registry value's content. Alert if the entropy of a new value for a sensitive key exceeds the 95th percentile for that user or key type, which can indicate obfuscated commands. Additionally, track the frequency of modifications to these sensitive keys per user/host; a sudden spike exceeding two standard deviations from the user's or host's 30-day moving average is anomalous.\n3. Machine Learning: Develop a classification model (e.g., Random Forest) trained on features extracted from registry modification events. Features should include the key path (tokenized), process making the change, parent process, entropy of the new value, and whether the value contains file paths or commands. Use the model to classify each modification to a sensitive HKCU path as 'benign' or 'suspicious UAC bypass attempt' and use the output score to prioritize alerts."
          },
          {
            "description": "A legitimate, auto-elevating Windows binary (e.g., `eventvwr.exe`, `sdclt.exe`) is executed with an anomalous parent process (e.g., `winword.exe`, `powershell.exe`) or with unusual command-line arguments, indicating a hijack attempt to inherit elevated privileges.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Windows Servers",
            "action": "1. Symbolic Logic: Create a rule that alerts when a known auto-elevating binary (e.g., `eventvwr.exe`, `fodhelper.exe`, `sdclt.exe`) is spawned by a parent process that is not on an approved list (e.g., `explorer.exe`, `svchost.exe`). The rule should also match command lines against a library of known UAC bypass patterns from public research like the UACME project.\n2. Statistical Analysis: Profile all parent-child process relationships across the enterprise to establish a rarity score for each pair. Alert when a pair involving an auto-elevating binary as the child has a rarity score below a given threshold (e.g., seen in <1% of the environment). Separately, calculate the length and entropy of command-line arguments for these binaries; flag executions where these values exceed the 98th percentile of the process's historical baseline.\n3. Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on process creation events, using vectorized features like parent process name, command-line arguments, and user context. This can identify outlier clusters representing novel or previously unseen UAC bypass techniques that deviate from established behavioral norms."
          },
          {
            "description": "A process chain is observed where a non-elevated process spawns a trusted auto-elevating Windows process, which in turn immediately launches a command shell or other unexpected process that is now running with a high integrity level.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Windows Servers",
            "action": "1. Symbolic Logic: Implement a stateful rule that correlates process creation events based on ProcessID and ParentProcessID. Alert IF (Process A with Integrity Level != High) creates (Process B from auto-elevator_watchlist) AND (Process B creates Process C where C.name is `cmd.exe`/`powershell.exe` OR C.path is in a non-standard directory) AND (C.Integrity Level == High) WITHIN a 10-second window.\n2. Statistical Analysis: Analyze process chains of length 3 (grandparent-parent-child). Calculate the conditional probability of Process C being spawned, given the specific Process A and Process B. Chains with extremely low probability (e.g., P(cmd.exe | eventvwr.exe, winword.exe) < 0.001) are highly suspicious and should be flagged.\n3. Machine Learning: Employ a sequence analysis model, such as a Recurrent Neural Network (RNN) or Hidden Markov Model (HMM), trained on benign process creation sequences (including integrity levels). The model will assign a likelihood score to new sequences in real-time. Sequences with a very low likelihood score are flagged as anomalous, enabling the detection of novel bypass chains not covered by symbolic rules."
          },
          {
            "description": "A remote network logon (Logon Type 3) by an administrative account is immediately followed by the creation of high-integrity interactive shells or other suspicious processes on the target system, bypassing the local UAC prompt mechanism.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Administrative Workstations",
            "action": "1. Symbolic Logic: Correlate events to detect when a Windows Event ID 4624 (Logon Type 3, for a member of the local Administrators group) from a source IP is followed within 5 seconds by a Windows Event ID 4688/Sysmon Event ID 1 on the same host, where the new process is an interactive shell (`cmd.exe`, `powershell.exe`) running at a high integrity level. Enrich the alert with Zeek `conn.log` data to determine if the source IP is external or from an unexpected internal subnet.\n2. Statistical Analysis: For each administrative user, baseline the set of processes they typically launch immediately following a remote logon. Use frequency analysis to identify the top 95% of common processes. Alert if a process is launched that falls outside this common set. Additionally, track the source subnets for each admin's remote logons and alert if a logon occurs from a statistically rare subnet for that user.\n3. Machine Learning: Apply a time-series anomaly detection model to the frequency of remote admin logons that are immediately followed by interactive shell creation. A sudden, coordinated spike across multiple hosts originating from a single source IP, as detected by the model, is a strong indicator of a widespread lateral movement campaign leveraging this bypass."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary bypassing UAC for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548.002",
        "name": "Bypass User Account Control",
        "evidence": [
          {
            "description": "A process, running with high integrity shortly after a suspected UAC bypass event, executes commands or modifies registry keys associated with disabling security tools, clearing logs, or otherwise degrading defensive capabilities.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Windows Servers",
            "action": "1. Symbolic Logic: Create a high-severity alert by correlating a UAC bypass detection with a subsequent event matching a defense evasion signature. For example, IF (UAC Bypass Alert on Host H) is followed WITHIN 5 minutes by (Process creation on Host H with command line matching `wevtutil.exe cl`, `netsh advfirewall`, or `Set-MpPreference -DisableRealtimeMonitoring`), THEN escalate priority.\n2. Statistical Analysis: Develop a 'Defense Evasion Score' for command lines based on a weighted sum of suspicious keywords (e.g., `stop`, `disable`, `delete`, `-DisableRealtimeMonitoring`). Compare the score of a command executed by a high-integrity process against the historical distribution of scores for that process name. An outlier score, such as one in the 99th percentile, indicates a likely evasion attempt.\n3. Machine Learning: Train a text classification model (e.g., using TF-IDF vectorization and a Naive Bayes classifier) on a labeled dataset of command lines (benign vs. defense evasion). Use this model to score all command lines executed by high-integrity processes in real-time to identify novel or obfuscated evasion commands that do not match static signatures."
          },
          {
            "description": "A process, spawned from a UAC bypass chain, injects code into a legitimate high-integrity system process (e.g., `explorer.exe`, `lsass.exe`) or causes an elevated process to load an unsigned or unusually located DLL.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 8",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Windows Servers",
            "action": "1. Symbolic Logic: Create a rule that alerts IF (Sysmon Event ID 8 - CreateRemoteThread) has a `SourceProcess` that recently triggered a UAC bypass alert AND the `TargetProcess` is a high-integrity system process. Also, create a rule for Sysmon Event ID 7 (ImageLoad) where the `ImageLoaded` is unsigned or its path is in a user-writable directory (`%TEMP%`, `%APPDATA%`) AND the loading process is running at high integrity.\n2. Statistical Analysis: For each standard high-integrity process, baseline the set of DLLs it normally loads. Calculate the prevalence of each DLL across the enterprise. Alert when a process loads a DLL that is statistically rare for that process or the environment (e.g., loaded on < 0.1% of hosts). Additionally, calculate the entropy of the loaded DLL's file path; a high entropy value can indicate randomization used to evade detection.\n3. Machine Learning: Use a graph-based anomaly detection model where nodes are processes and DLLs and edges represent 'loads' or 'injects'. Train the model on normal system behavior. When a UAC bypass is suspected, analyze the subgraph of subsequent activity. The model can flag anomalous structures, such as a process loading an unusual combination of DLLs or injecting into an atypical target."
          },
          {
            "description": "A high-integrity process, spawned after a UAC bypass, performs anomalous file system activity, such as writing executables to non-standard locations, modifying critical system files, or accessing an unusually high volume of user data.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File Servers, User Workstations, Administrative Workstations, Application Servers",
            "action": "1. Symbolic Logic: Alert IF a Sysmon Event ID 11 (FileCreate) is generated by a high-integrity process that was recently involved in a UAC bypass chain, AND the `TargetFilename` has an executable extension (`.exe`, `.dll`, `.ps1`), AND the file is written to a user-writable directory like `%APPDATA%` or `%TEMP%`.\n2. Statistical Analysis: For common high-integrity processes, baseline their normal file access patterns (e.g., common paths, file types, read/write ratios). Use the Interquartile Range (IQR) method to define normal bounds for the volume of file operations per hour. Alert if a process's activity exceeds the upper bound (e.g., Q3 + 1.5*IQR), which indicates an anomalously high volume of file access.\n3. Machine Learning: Train an Isolation Forest model on benign file system activity for specific high-integrity processes. The model learns a boundary of normal behavior based on features like process name, file path, access type, and file extension. Any file operation that the model scores as a significant outlier is flagged as anomalous, potentially indicating post-bypass malicious activity like staging tools or exfiltrating data."
          },
          {
            "description": "A high-integrity process, especially one that is unsigned, running from an unusual path, or recently created via UAC bypass, initiates suspicious outbound network connections.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, User Workstations, Windows Servers",
            "action": "1. Symbolic Logic: Alert IF a Sysmon Event ID 3 (Network Connection) is generated by a high-integrity process that is also unsigned or running from a non-standard path, AND the `DestinationPort` is not 80/443, AND the `DestinationIp` is external. Correlate the destination IP/domain with Zeek `dns.log` to check if the domain is newly registered or belongs to a known malicious category from a threat intelligence feed.\n2. Statistical Analysis: For each process, calculate the Shannon entropy of the destination domains it connects to over a rolling time window. A sudden spike in entropy for a high-integrity process could indicate Domain Generation Algorithm (DGA) activity. Also, use percentile-based thresholding on data volume from `Zeek conn.log` or `Sysmon Event ID 3`: alert if a typically non-networked, high-integrity process (e.g., `fodhelper.exe`) sends outbound data exceeding its historical 99th percentile.\n3. Machine Learning: Use a time-series forecasting model (e.g., ARIMA) on the volume of outbound traffic per high-integrity process. An observed data volume that significantly exceeds the model's prediction and confidence interval is flagged as an anomaly. Additionally, use a clustering algorithm on connection metadata from Zeek and Sysmon to identify clusters of command-and-control-like beaconing that deviates from normal traffic patterns."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]