[
  {
    "information_requirement": "Is the adversary maintaining persistence through boot or logon autostart execution?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547",
        "name": "Boot or Logon Autostart Execution",
        "evidence": [
          {
            "description": "A new file is created in a common startup folder, or a new registry value is added to an autorun key, where the file's hash or the registry value's data matches a known-bad indicator from threat intelligence.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, particularly those of privileged users and critical service hosts.",
            "action": "1. (Symbolic) Monitor file creation (Sysmon EID 11) in startup paths (e.g., %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup) and registry value sets (Sysmon EID 13, Windows EID 4657) in keys like HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run. Extract file hashes from associated process creation events (Sysmon EID 1) or registry values. Alert on any exact match against a high-fidelity threat intelligence feed of malicious hashes, filenames, or registry values. 2. (Statistical) Calculate the historical frequency (e.g., over 90 days) of executable names and registry values created in these autostart locations across the enterprise. Flag any names that fall below a low percentile threshold (e.g., 5th percentile), indicating rarity. 3. (Machine Learning) Use a trained classification model (e.g., logistic regression, random forest) that ingests features like file path, filename entropy, signer status, and threat intel matches to predict the likelihood of a new autostart entry being malicious. Alert when the predicted probability exceeds a defined risk threshold (e.g., >0.85)."
          },
          {
            "description": "A scripting engine (e.g., powershell.exe, cscript.exe) is executed via an autostart mechanism with command-line arguments indicative of obfuscation or defense evasion.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially those with advanced PowerShell logging enabled.",
            "action": "1. (Symbolic) Monitor process creation events (Windows EID 4688, Sysmon EID 1) for scripting engines. Use regular expressions to flag command lines containing suspicious arguments like '-enc', '-w hidden', '-nop', or long Base64 strings. Correlate the parent process to identify if it was launched from a known persistence mechanism (e.g., by tracing back to a registry key modification via Sysmon EID 13). 2. (Statistical) Calculate the entropy of the command-line arguments for all autostarted script processes. Establish a baseline entropy score for legitimate scripts in your environment. Flag executions where the command-line entropy exceeds a high percentile threshold (e.g., 95th percentile), suggesting obfuscation. 3. (Machine Learning) Employ a Natural Language Processing (NLP) model trained on legitimate and malicious scripts/command lines to classify the executed command as malicious. The model can analyze features like argument structure, function calls, and string characteristics to provide a risk score."
          },
          {
            "description": "A modification to a common autostart location (e.g., Registry Run keys, Startup folders, WMI event subscriptions) that does not temporally correlate with approved software installation or system patching activity.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4698",
              "Windows Event ID 4702",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Change management database, software deployment servers, all Windows endpoints and servers.",
            "action": "1. (Symbolic) Ingest change management tickets and software deployment logs to create an allowlist of expected modifications and associated time windows. Monitor for autostart modifications (Sysmon EID 11, 13; Windows EID 4657, 4698, 4702) and alert on any change not present in the allowlist. 2. (Statistical) For each host, model the rate of autostart modifications over time. Use time-series analysis to detect anomalous spikes in modification activity that deviate significantly (e.g., >3 standard deviations) from the host's established baseline. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on features of the modification event (e.g., process making the change, time of day, target path, user context) to group similar activities. Legitimate software installers will form dense clusters, while one-off malicious changes will be flagged as noise or outliers."
          },
          {
            "description": "A process launched via an autostart mechanism initiates periodic, fixed-interval outbound network connections to an external destination with a low reputation score or that is rare across the enterprise.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), DNS servers, all Windows endpoints and servers.",
            "action": "1. (Symbolic) Correlate process creation at logon (Sysmon EID 1) with network connections (Sysmon EID 3, Zeek conn.log). Enrich destination IPs and domains (from Zeek dns.log) with threat intelligence feeds. Alert if an autostart process connects to a known C2 server or a newly registered domain. 2. (Statistical) For each autostart process and destination IP pair, analyze the inter-arrival time of connections in Zeek conn.log. A very low standard deviation of these time deltas indicates highly regular, machine-generated beaconing. Also, identify destination IPs that are in the 99th percentile of rarity (i.e., contacted by very few hosts). 3. (Machine Learning) Apply a time-series forecasting model (e.g., ARIMA) to the connection events for a given process. If the model can predict future connection times with high accuracy, it suggests a programmatic, non-human pattern. A high-confidence forecast combined with a rare destination is a strong indicator of C2 beaconing."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation via boot or logon autostart execution?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547",
        "name": "Boot or Logon Autostart Execution",
        "evidence": [
          {
            "description": "A new Windows Service is created (Event ID 7045) or an existing service's binary path is modified, pointing to an executable whose hash matches a known-bad indicator, and the service is configured to run with SYSTEM privileges.",
            "data_sources": [
              "Windows Event ID 7045",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, critical application servers, and administrator workstations.",
            "action": "1. (Symbolic) Upon a service creation event (Windows EID 7045), extract the 'Service File Name' and 'Service Account'. If the account is 'LocalSystem', trigger a hash lookup of the file against a threat intelligence feed. Alert on a match. Similarly, monitor registry modifications (Sysmon EID 13) to HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\ImagePath and perform the same hash lookup. 2. (Statistical) Maintain a baseline of common service executable paths and names across the enterprise. Flag the creation of a new service whose ImagePath is statistically rare (e.g., located in C:\\Users\\ or C:\\Temp\\) or has high name entropy, especially if it runs as SYSTEM. 3. (Machine Learning) Train a classification model on service creation events, using features like 'Service File Name' path, 'Service Account', parent process that created the service, and file signature status. Use the model to score the risk of each new service, alerting on those classified as high-risk and running with elevated privileges."
          },
          {
            "description": "A command-line utility (e.g., sc.exe, schtasks.exe) is executed with parameters to create or modify an autostart entry to run with `SYSTEM` privileges, and the execution is initiated by a non-standard administrative process or user context.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "1. (Symbolic) Create regex rules to detect process creation events (Sysmon EID 1) for `sc.exe create`, `schtasks.exe /create ... /ru SYSTEM`, and `reg.exe add HKLM\\...\\Run`. Alert on any match where the new entry is configured to run with elevated privileges. 2. (Statistical) Analyze the parent-child process relationships for these utilities. Establish a baseline of normal parent processes (e.g., explorer.exe, a known software installer). Flag executions where the parent process is statistically anomalous (e.g., winword.exe, an unmanaged powershell.exe instance). 3. (Machine Learning) Use an anomaly detection model on process command-line arguments. Vectorize the arguments (e.g., using TF-IDF) and use a one-class SVM or isolation forest to identify command-line invocations that are outliers compared to the historical baseline of legitimate administrative activity."
          },
          {
            "description": "A trusted system process that starts at boot (e.g., services.exe, lsass.exe) loads a DLL (Sysmon Event ID 7) that is either unsigned or located in a user-writable directory (e.g., %APPDATA%), deviating from its established baseline of loaded modules.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, particularly those running critical system services.",
            "action": "1. (Symbolic) Monitor DLL load events (Sysmon EID 7). Create an allowlist of known DLLs and their expected paths for critical, privileged autostart processes (e.g., services.exe, winlogon.exe). Alert when one of these processes loads a DLL not on its specific allowlist, or any DLL that is unsigned ('Signed: false'). 2. (Statistical) For each privileged process, build a profile of its typically loaded DLLs, including the frequency of each path. Flag any DLL load event where the path is a statistical outlier (e.g., C:\\ProgramData\\, C:\\PerfLogs\\) compared to the process's baseline. Calculate path entropy to find abnormally complex or random-looking paths. 3. (Machine Learning) Use a sequence-based anomaly detection model (e.g., an LSTM autoencoder) trained on the sequence of DLLs loaded by a process during a normal boot. During inference, feed the observed DLL load sequence and flag any sequence that has a high reconstruction error, indicating a deviation from the learned normal behavior."
          },
          {
            "description": "A process is created at boot or logon with `SYSTEM` privileges (IntegrityLevel: System) from an executable path that is rare across the enterprise or has not been seen on the specific host before.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "1. (Symbolic) Monitor process creation events (Sysmon EID 1). Alert if 'User' is 'NT AUTHORITY\\SYSTEM' and the 'Image' path is in a user-writable location (e.g., C:\\Users\\*, C:\\Temp\\*, C:\\ProgramData\\*) and the file is unsigned. 2. (Statistical) Build a frequency table of all executable paths that run as SYSTEM across the enterprise over a 30-day period. Alert when a new SYSTEM process is created from a path that falls below a rarity threshold (e.g., seen on <1% of hosts or in the 1st percentile of execution frequency). 3. (Machine Learning) Use a one-class SVM or other novelty detection algorithm trained on features of legitimate SYSTEM processes (e.g., image path, parent process, file signature status, file entropy). Flag any new SYSTEM process that the model identifies as a novelty or outlier."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]