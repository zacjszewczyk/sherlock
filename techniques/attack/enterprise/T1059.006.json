[
  {
    "information_requirement": "Is an adversary leveraging Python for unauthorized code execution on enterprise endpoints or servers? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.006",
        "name": "Python",
        "evidence": [
          {
            "description": "Execution of a Python process (python.exe) whose command-line includes a script with a file hash matching a known-malicious indicator, or that establishes a network connection to a destination IP/domain on a threat intelligence watchlist.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway/proxy servers, All Windows endpoints and servers",
            "action": [
              "Symbolic: Continuously monitor Windows Event ID 4688 for process creation events where the process name is 'python.exe'. Extract the command line, parse the script path, calculate its hash, and compare it against a threat intelligence feed of known malicious file hashes. Simultaneously, monitor Zeek conn.log for connections where the source host has a recent python.exe execution, and compare the destination IP/domain against a C2 watchlist. Generate a high-severity alert on any match.",
              "Statistical: For all python.exe network connections observed in Zeek conn.log, calculate the frequency of destination Autonomous System Numbers (ASNs) and domain registrars. Establish a baseline of common, legitimate ASNs/registrars. Flag connections to destinations associated with ASNs or registrars that fall outside the 99th percentile of normal frequency, as these often represent non-standard or suspicious hosting.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from both process and network data (parent process, command-line length, connection duration, bytes sent/received, destination port). Label historical data with known malicious and benign python.exe executions. Use the trained model to classify new, unseen python.exe activity in real-time, flagging events with a high probability of being malicious."
            ]
          },
          {
            "description": "Execution of a Python process where the command-line arguments contain patterns indicative of reverse shells, obfuscated code execution (e.g., base64 encoding), or the use of known offensive security tools.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (e.g., Domain Controllers, database servers), User workstations, Development environments",
            "action": [
              "Symbolic: For each Windows Event ID 4688 event with process name 'python.exe', apply a set of regular expressions to the command-line field. Search for patterns like 'python -c', 'import socket', 'subprocess.Popen', 'base64.b64decode', 'pty.spawn', and argument structures associated with tools like Impacket. Alert on any match.",
              "Statistical: Calculate the Shannon entropy of the command-line string for all python.exe executions. Establish a baseline entropy score for normal Python scripts in the environment (e.g., mean and standard deviation). Flag any execution where the command-line entropy exceeds a statistically determined threshold (e.g., greater than 3.5 or 3 standard deviations above the mean), as this indicates potential obfuscation or encoding.",
              "Machine Learning: Use a Natural Language Processing (NLP) approach to generate vector embeddings for each python.exe command line. Apply a clustering algorithm (e.g., DBSCAN) to the embeddings. Investigate new command lines that fall into sparse clusters or are identified as outliers, as they represent structurally unique and potentially malicious commands."
            ]
          },
          {
            "description": "A python.exe process is executed from an atypical file path (e.g., C:\\Users\\Public, %APPDATA%), is spawned by an unusual parent process (e.g., a Microsoft Office application), or is executed by a user account that does not typically use Python.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, User profile directories, Temporary file directories",
            "action": [
              "Symbolic: Create and maintain allowlists of approved execution paths for python.exe (e.g., 'C:\\Program Files\\Python*') and expected parent processes (e.g., 'cmd.exe', 'explorer.exe', 'powershell.exe', known IDEs). Monitor Windows Event ID 4688 and alert on any python.exe execution where the process path or parent process is not on the respective allowlist.",
              "Statistical: For each user, establish a baseline of their python.exe usage frequency. Alert when a user who has rarely or never used Python (e.g., usage in the bottom 25th percentile) suddenly executes a python.exe process. Additionally, perform a frequency analysis on python.exe execution paths across the enterprise and flag executions from paths that are statistically rare (e.g., appearing less than 0.1% of the time).",
              "Machine Learning: Develop a time-series model (e.g., ARIMA or LSTM) for each user's python.exe execution count over time. The model will learn the user's normal rhythm of activity. Flag any execution that causes a significant anomaly score or deviation from the forecasted behavior, indicating an unexpected spike in activity."
            ]
          },
          {
            "description": "A Python process (python.exe) spawns a child process that is a known Living-off-the-Land Binary (LOLBin) such as 'wmic.exe', 'bitsadmin.exe', or 'rundll32.exe'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those with EDR agents capable of capturing parent-child process relationships",
            "action": [
              "Symbolic: From Windows Event ID 4688 logs, filter for events where the Parent Process Name is 'python.exe'. Compare the child Process Name against a curated list of high-risk LOLBins and suspicious tools (e.g., 'whoami.exe', 'net.exe', 'schtasks.exe', 'powershell.exe', 'wmic.exe', 'certutil.exe'). Generate a high-priority alert for any match.",
              "Statistical: Build a baseline of normal parent-child process relationships for python.exe in your environment. Represent this as a probability matrix P(child | parent='python.exe'). Alert when python.exe spawns a child process that has a very low conditional probability (e.g., in the bottom 5th percentile), indicating a rare and potentially unauthorized action.",
              "Machine Learning: Model process trees as graphs. Use a graph-based anomaly detection algorithm to identify unusual subgraphs originating from a python.exe node. Train the model on benign process trees. Flag any new execution chain where the structure (e.g., spawning 'cmd.exe' which then spawns 'powershell.exe') deviates significantly from learned benign graphs."
            ]
          },
          {
            "description": "A network connection initiated by a python.exe process exhibits anomalous characteristics, such as a periodic 'heartbeat' pattern, unusually high data transfer volume, or communication over a non-standard port.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, All Windows endpoints and servers",
            "action": [
              "Symbolic: Correlate Windows Event ID 5156 (filtering for Application Name 'python.exe') with Zeek conn.log data. Create a rule to alert if python.exe communicates over a port not on an allowlist of common ports for Python (e.g., 80, 443, 8080) or to a destination IP associated with a newly registered domain (e.g., domain age < 30 days, identified via Zeek dns.log and WHOIS enrichment).",
              "Statistical: For each host, baseline the volume of data sent (orig_bytes) and received (resp_bytes) in Zeek conn.log by python.exe processes. Use percentile-based thresholds (e.g., 95th percentile) to detect unusually large data transfers that could signify data exfiltration. Separately, calculate the standard deviation of inter-arrival times for connections to the same destination; a very low standard deviation indicates a periodic, machine-generated 'heartbeat' typical of C2 beaconing.",
              "Machine Learning: Apply a time-series decomposition model (e.g., Seasonal-Trend-Loess) to the connection frequency and data volume logs for python.exe network traffic. This will separate the data into trend, seasonal, and residual components. Flag anomalies based on the residual component, which represents unexplained variations in the traffic pattern, often indicative of C2 activity that does not follow normal user or system rhythms."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]