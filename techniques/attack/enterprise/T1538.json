[
  {
    "information_requirement": "Is the adversary attempting to discover cloud resources or services via the management console? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1538",
        "name": "Cloud Service Dashboard",
        "evidence": [
          {
            "description": "A cloud console login event where the source IP address matches a known malicious indicator (e.g., C2 server, TOR exit node) or originates from a geographic location or Autonomous System (AS) inconsistent with the user's established baseline.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure SignIn Logs",
              "Google Cloud Audit Logs (Admin Activity)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud IAM infrastructure, Internet gateways and proxies, Endpoint devices of privileged users",
            "action": [
              "Symbolic: Correlate the 'sourceIPAddress' from cloud console login events (e.g., AWS 'ConsoleLogin', Azure 'SignInLogs') against a threat intelligence feed of known malicious IPs and anonymizing proxy exit nodes. Generate a high-severity alert for any match.",
              "Statistical: For each user account, build a 90-day baseline of source IP geolocations and ASNs. For each new login, calculate the historical frequency of the source country and ASN for that user. A login from a country or ASN in the bottom 5th percentile of frequency for that user should generate a medium-severity alert.",
              "Machine Learning: Utilize an 'impossible travel' detection model that analyzes the time and distance between consecutive user logins. If a user logs in from two geographically distant locations in a time frame that would be physically impossible (e.g., login from New York at 1:00 PM and from Tokyo at 1:30 PM), classify the second login as anomalous and generate a high-severity alert for immediate investigation."
            ]
          },
          {
            "description": "A cloud console login or subsequent API activity is associated with a User-Agent string from a known offensive security tool, an unauthorized script, or is highly anomalous for the specific user.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure Activity Logs",
              "Google Cloud Audit Logs (Admin Activity)",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud management consoles (e.g., AWS Management Console, Azure Portal), Internet gateways and proxies, Cloud API endpoints",
            "action": [
              "Symbolic: Match the 'userAgent' field from cloud activity logs against a curated list of regular expressions for known offensive tools (e.g., 'Pacu', 'CloudMapper'), common scripting libraries ('python-requests', 'boto3') not approved for administrative use, or headless browsers. Generate an alert on any match originating from a console session.",
              "Statistical: For each user, establish a baseline of legitimate User-Agent strings from the last 90 days of console login activity. If a login occurs with a User-Agent string never before seen for that user, increment a risk score. An alert can be triggered if this occurs in combination with other indicators.",
              "Machine Learning: Train a character-level Convolutional Neural Network (CNN) or similar text classifier on a large dataset of User-Agent strings labeled as 'benign-browser', 'benign-script', and 'malicious-tool'. Use the model to classify User-Agents from new console sessions in real-time and alert on 'malicious-tool' classifications."
            ]
          },
          {
            "description": "A high volume of read-only API calls (e.g., 'List*', 'Describe*', 'Get*') originates from a single user console session within a short time window, indicating systematic reconnaissance rather than normal administrative activity.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure Activity Logs",
              "Google Cloud Audit Logs (Data Access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud API endpoints, Cloud management consoles, Specific cloud service infrastructure (e.g., S3, EC2, RDS)",
            "action": [
              "Symbolic: Create a rule that triggers a medium-severity alert if a single user session generates over 100 'List*' or 'Describe*' API calls across more than 5 distinct services (e.g., 'ec2', 's3', 'rds', 'iam', 'lambda') within a 15-minute window.",
              "Statistical: For each user session, calculate the Shannon entropy of the API event names invoked. A session entropy score in the 99th percentile when compared to the distribution of all historical user session entropies indicates unusually broad and non-repetitive enumeration activity and should be flagged for review.",
              "Machine Learning: Train a sequence-based anomaly detection model, such as an LSTM autoencoder, on sequences of API calls from normal user sessions. Feed new session sequences into the model and flag sessions with a high reconstruction error, as they represent a significant deviation from learned normal patterns of administrative activity."
            ]
          },
          {
            "description": "API calls from a console session target the discovery of sensitive resources, such as secrets, encryption keys, or user permissions, especially when performed by a user who does not typically access such resources.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure Activity Logs",
              "Google Cloud Audit Logs (Data Access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Secrets management services (e.g., AWS Secrets Manager, Azure Key Vault), IAM infrastructure, Data storage services hosting sensitive information",
            "action": [
              "Symbolic: Create a watchlist of highly sensitive, discovery-related API calls (e.g., 'secretsmanager:ListSecrets', 'iam:GetAccountAuthorizationDetails', 's3:GetBucketAcl') and generate a high-severity alert on any invocation from a console session by a user not in a pre-approved 'Cloud Security Admin' or 'Auditor' group.",
              "Statistical: For each sensitive API call on the watchlist, establish a baseline of which user roles typically invoke it. Alert when a user invokes a sensitive call and their role's historical invocation frequency for that specific call is in the bottom 1st percentile (i.e., it is extremely rare for that role to perform that action).",
              "Machine Learning: Use a graph-based anomaly detection model where nodes are users and resources, and edges represent access events. Train the model on normal access patterns. Anomaly detection can be framed as link prediction; if the model predicts a very low probability for an observed access (e.g., a marketing team user accessing a production KMS key), flag it as a high-risk anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]