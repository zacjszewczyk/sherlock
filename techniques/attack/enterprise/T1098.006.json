[
  {
    "information_requirement": "Is the adversary maintaining persistence by adding roles to container accounts?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1098.006",
        "name": "Additional Container Cluster Roles",
        "evidence": [
          {
            "description": "A successful HTTP POST or PUT request is made to a Kubernetes RBAC API endpoint (e.g., /apis/rbac.authorization.k8s.io/v1/clusterrolebindings) where the source IP address is present on a threat intelligence feed or the User-Agent string matches a known malicious tool signature.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Network Egress/Ingress Points, Threat Intelligence Platform",
            "action": [
              "Symbolic: Continuously compare the source IP (id.orig_h) from Zeek conn.log for traffic destined to the Kubernetes API server against a threat intelligence feed of known malicious IPs and TOR exit nodes; alert on any match. Concurrently, scan the 'user_agent' field in Zeek http.log for requests to RBAC endpoints, matching against a list of known Kubernetes attack tool signatures (e.g., 'kube-hunter', 'peirates'); alert on any match.",
              "Statistical: For each source IP communicating with the Kubernetes API, calculate the historical rarity of its associated ASN and country of origin. Establish a baseline of normal traffic sources. Alert if an RBAC modification request originates from an IP belonging to an ASN or country that falls below a rarity threshold (e.g., accounts for less than 0.1% of historical API traffic).",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) using features from Zeek http.log and conn.log, such as User-Agent string characteristics, request method, URI path, and source IP reputation score. Use labeled historical data of known benign and malicious requests to train the model. Deploy the model to score new requests to RBAC endpoints in real-time and alert on requests classified as malicious with high confidence."
            ]
          },
          {
            "description": "An HTTP POST request to a 'rolebindings' or 'clusterrolebindings' API endpoint results in a new binding where the binding's 'metadata.name' contains suspicious keywords (e.g., 'backdoor', 'pwn'), the 'roleRef.name' is a high-privilege role (e.g., 'cluster-admin'), and the 'subjects' field specifies a non-administrative user or service account.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": [
              "Symbolic: Monitor Zeek http.log for HTTP POST requests to Kubernetes RBAC endpoints. Parse the JSON payload and trigger an alert if 'roleRef.name' is 'cluster-admin' and 'subjects[0].kind' is 'ServiceAccount' in a namespace other than 'kube-system'. Additionally, use regular expressions to alert if the 'metadata.name' field matches suspicious patterns like '.*-backdoor.*', '.*-pwn.*', or 'system:.*-stealth'.",
              "Statistical: Maintain an inventory of all existing high-privilege role bindings. Calculate the frequency of new high-privilege roles being bound to subjects. Alert if a high-privilege role is bound to a new subject, and this type of binding event is statistically rare (e.g., occurs less than once per quarter or exceeds the 99th percentile of binding event frequencies).",
              "Machine Learning: Use a trained anomaly detection model (e.g., Isolation Forest) on the features of the binding request, including subject name, subject kind, role name, creator's user agent, and source IP. Train the model on a baseline of legitimate binding creation events to identify novel and suspicious requests that the model flags as outliers with a high anomaly score."
            ]
          },
          {
            "description": "A successful RBAC modification (POST/PUT to 'rolebindings' or 'clusterrolebindings') is executed by a user principal that has not previously performed such actions, or the action occurs at a time that significantly deviates from the established baseline for that user or from approved change control windows.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Identity and Access Management System",
            "action": [
              "Symbolic: Maintain a static list of administrator accounts authorized to modify RBAC. Alert on any RBAC modification API call observed in Zeek http.log originating from a user principal not on this list. This provides a clear, high-fidelity signal for unauthorized changes.",
              "Statistical: For each authorized administrator, build a baseline of the time-of-day and day-of-week they perform RBAC changes. Use descriptive statistics (mean, standard deviation) to define normal working hours for these activities. Alert if an RBAC change occurs more than two standard deviations outside of this established time window (e.g., 3 AM on a Sunday).",
              "Machine Learning: For each administrator, employ a time-series forecasting model (e.g., ARIMA) trained on their history of RBAC modification events. The model will predict the expected number of changes for a given time interval (e.g., per hour). Trigger an alert if the actual number of changes significantly exceeds the model's prediction and its associated confidence interval."
            ]
          },
          {
            "description": "A single user principal or source IP address generates a high volume of GET requests enumerating RBAC resources (e.g., '/apis/rbac.authorization.k8s.io/v1/roles') within a short time window, immediately followed by a POST or PUT request from the same source to create or modify a 'RoleBinding' or 'ClusterRoleBinding'.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": [
              "Symbolic: Implement a stateful rule that triggers when a single source IP (id.orig_h in Zeek conn.log) generates more than 50 GET requests to RBAC API endpoints within a 5-minute window, followed by a POST or PUT request to a 'rolebindings' or 'clusterrolebindings' endpoint from the same IP within the subsequent 5 minutes.",
              "Statistical: For each user, establish a baseline ratio of read operations (GET) to write operations (POST, PUT, PATCH) on RBAC objects over a rolling time window. Calculate the 99th percentile for this ratio across all administrative users. Trigger an alert if a user's read/write ratio in a short time window exceeds this threshold, indicating abnormal enumeration activity before a modification.",
              "Machine Learning: Use a sequence analysis model, such as a Hidden Markov Model (HMM), trained on sequences of API calls from legitimate administrative users. Flag user sessions whose sequence of actions (e.g., a rapid series of 'list roles', 'get role', 'list clusterroles', followed by 'create clusterrolebinding') has a low probability under the trained model, indicating a deviation from normal administrative behavior patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by adding roles to container accounts?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1098.006",
        "name": "Additional Container Cluster Roles",
        "evidence": [
          {
            "description": "A successful RBAC modification API call originates from a pod or node IP address that has been associated with suspicious activity (e.g., reverse shell connection, anomalous process execution) within a preceding time window, such as the last 60 minutes.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cluster Worker Nodes, Kubernetes API Server, Security Incident and Event Management (SIEM) System",
            "action": [
              "Symbolic: Create a stateful correlation rule in the SIEM. If an alert for a suspicious process (e.g., command line containing 'powershell.exe -enc') is generated from a host via Windows Event ID 4688, add the host's IP to a watchlist for 60 minutes. If any Kubernetes RBAC modification API call (observed in Zeek http.log) originates from an IP on this watchlist, trigger a critical alert.",
              "Statistical: Develop a risk score for each node IP address, where the score increases based on security events (e.g., +10 for an anomalous process, +5 for a connection to a rare IP). If an RBAC modification is initiated from an IP with a cumulative risk score that exceeds the 95th percentile of all node risk scores, flag the event for investigation.",
              "Machine Learning: Use a graph-based anomaly detection model where nodes represent entities (pods, nodes, users) and edges represent actions (API calls, processes). A path such as '(Anomalous Process) -> [on Node X] -> (Kubernetes API Call to Modify RBAC) -> [from Node X IP]' would be identified by the model as a highly anomalous subgraph, indicative of a multi-stage privilege escalation attack."
            ]
          },
          {
            "description": "A 'RoleBinding' or 'ClusterRoleBinding' is created or modified, and the referenced 'Role' or 'ClusterRole' contains rules granting high-risk permissions, such as the 'impersonate' verb, create/update permissions on RBAC objects themselves, or wildcard ('*') permissions.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": [
              "Symbolic: For all RBAC binding changes observed in Zeek http.log payloads, parse the referenced role definition. Trigger an immediate alert if the role's 'rules' array contains an object with 'verbs: ['impersonate']', or 'verbs: ['*']', or 'resources: ['*']', or if 'resources' contains 'rolebindings' or 'clusterrolebindings' and 'verbs' contains 'create' or 'update'.",
              "Statistical: Calculate a 'privilege score' for each role based on its permissions (e.g., 'impersonate'=10, 'verbs:*'=5, 'resources:*'=5). Establish a baseline for the average privilege score of roles assigned to non-administrative service accounts. Alert if a new binding assigns a role with a score that is a statistical outlier (e.g., more than 3 standard deviations above the mean for that subject type).",
              "Machine Learning: Train a classification model to categorize Kubernetes roles as 'high-risk' or 'low-risk' based on their rule definitions. If the model classifies a role as 'high-risk' and it is bound to a subject (user or service account) not previously associated with high-risk roles, flag the binding as a potential privilege escalation event."
            ]
          },
          {
            "description": "A 'ClusterRoleBinding' is created that binds a 'ServiceAccount' subject to the 'cluster-admin' 'ClusterRole'. This is identified by a POST request to the 'clusterrolebindings' API endpoint with a payload specifying 'subjects[].kind: ServiceAccount' and 'roleRef: { name: 'cluster-admin', kind: 'ClusterRole' }'.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": [
              "Symbolic: Create a high-severity, zero-tolerance rule. Monitor Zeek http.log for POST requests to the '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings' URI. If the parsed request body contains a subject of 'kind: ServiceAccount' AND a 'roleRef' pointing to 'name: 'cluster-admin'', trigger an immediate, critical alert.",
              "Statistical: Maintain a count of 'cluster-admin' bindings for each subject kind (User, Group, ServiceAccount). A baseline count for ServiceAccount bindings to 'cluster-admin' should be zero in a secure environment. Any increase from this baseline is a critical statistical deviation that must be alerted on.",
              "Machine Learning: While best handled by symbolic logic, an anomaly detection model trained on legitimate binding events would identify a ServiceAccount-to-cluster-admin binding as a massive outlier with a high anomaly score, as this pattern should not exist in the training data. This serves as a confirmatory detection method."
            ]
          },
          {
            "description": "A Kubernetes API request to create or modify an RBAC binding succeeds (HTTP 200/201), but the user identity associated with the request does not have the required privileges for that action, indicating a possible vulnerability exploitation or misconfiguration.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Identity and Access Management System",
            "action": [
              "Symbolic: Maintain an up-to-date cache of user-to-role mappings. When an RBAC modification is observed in Zeek http.log, query the cache to check if the source user principal has 'create' or 'update' permissions on 'rolebindings' or 'clusterrolebindings'. If the user lacks the permission but the API call returned a successful status code (200 or 201), trigger an alert for potential privilege escalation exploitation.",
              "Statistical: Profile the 'privilege delta' of RBAC modifications initiated by each user, where delta is the change in privilege score of the role being granted. If a user who normally only grants low-privilege roles suddenly grants a high-privilege role, this action will create a statistical anomaly in their behavior. Alert on any privilege deltas that exceed the 95th percentile for that user's historical actions.",
              "Machine Learning: Use a peer group-based anomaly detection model. Group users by their assigned roles or departments. The model learns the typical RBAC modification behavior for each peer group. If a user's action (e.g., granting a high-privilege role) significantly deviates from the established behavior of their peers, it is flagged as an anomaly."
            ]
          },
          {
            "description": "The execution of a process associated with a known container-escape or privilege escalation exploit is observed on a cluster node, followed within 15 minutes by a Kubernetes API call from the compromised node's IP address to create or modify an RBAC role.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cluster Worker Nodes, Kubernetes API Server",
            "action": [
              "Symbolic: Maintain a list of process names and command-line arguments associated with known Kubernetes exploits. Monitor Windows Event ID 4688 ('NewProcessName' and 'CommandLine' fields) on all cluster nodes for matches. Upon a match, correlate the node's IP with Zeek conn.log and http.log to check if it makes an RBAC modification API call within the next 15 minutes. Trigger a critical alert if this sequence occurs.",
              "Statistical: Calculate the Shannon entropy of command-line arguments for all processes executed on cluster nodes (from Windows Event ID 4688). If a process is observed with an argument entropy score in the 99th percentile (indicating high randomness typical of obfuscated scripts), treat this as a suspicious event and correlate with any subsequent Kubernetes API calls originating from that host's IP address.",
              "Machine Learning: Train a classifier on Windows Event ID 4688 data to identify malicious process execution based on features like parent process, command-line content, and user context. When the classifier flags a process as malicious, use this as a trigger for a downstream logic app that actively monitors for and critically alerts on any subsequent Kubernetes API interactions from that host's IP for a set duration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]