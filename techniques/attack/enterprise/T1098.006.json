[
  {
    "information_requirement": "Is the adversary maintaining persistence by adding roles to container accounts?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1098.006",
        "name": "Additional Container Cluster Roles",
        "evidence": [
          {
            "description": "A successful HTTP POST/PUT request to a Kubernetes RBAC API endpoint (e.g., /apis/rbac.authorization.k8s.io/v1/clusterrolebindings) where the source IP address is found on a threat intelligence feed or the User-Agent string matches a known malicious tool signature.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Network Egress/Ingress Points",
            "action": "1. Symbolic: Continuously join Zeek conn.log source IPs (id.orig_h) against a threat intelligence feed of known malicious IPs and TOR exit nodes for traffic destined to the K8s API server. Alert on any match. Similarly, scan Zeek http.log user_agent fields for signatures of known K8s attack tools (e.g., 'kube-hunter', 'peirates'). 2. Statistical: For each source IP communicating with the K8s API, calculate the historical rarity of its associated ASN/country. Alert if an RBAC modification request originates from an IP in a statistically rare location for the organization (e.g., a country that accounts for <1% of API traffic). 3. Machine Learning: Train a classification model (e.g., Logistic Regression) on Zeek http.log features (User-Agent, request method, URI, source IP reputation) to predict malicious RBAC modification attempts. Use labeled historical data for training and deploy the model to score new requests in real-time."
          },
          {
            "description": "An HTTP POST request to a Kubernetes 'rolebindings' or 'clusterrolebindings' API endpoint creates a new binding where the binding's 'metadata.name' contains suspicious keywords or the 'roleRef.name' is a high-privilege role (e.g., 'cluster-admin') and the 'subjects' field specifies a non-administrative user or service account.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": "1. Symbolic: Monitor Zeek http.log for HTTP POST requests to K8s RBAC endpoints. Parse the JSON payload and alert if 'roleRef.name' is 'cluster-admin' AND 'subjects[0].kind' is 'ServiceAccount' in a namespace other than 'kube-system'. Use regex to alert if 'metadata.name' matches patterns like '.*-backdoor.*', '.*-pwn.*', or 'system:.*-stealth'. 2. Statistical: Maintain a list of approved high-privilege role bindings. Calculate the frequency of new roles being bound. Alert if a high-privilege role is bound to a new subject, and this type of binding event is statistically rare (e.g., occurs less than once per quarter). 3. Machine Learning: Use a trained anomaly detection model (e.g., Isolation Forest) on the features of the binding request (subject name, subject kind, role name, creator's user agent, source IP). The model should be trained on a baseline of legitimate binding creations to identify novel and suspicious requests as outliers."
          },
          {
            "description": "A successful RBAC modification (POST/PUT to 'rolebindings' or 'clusterrolebindings') is executed by a user principal whose identity has not previously performed such actions, or the action occurs at a time that deviates significantly from the established baseline for that user or for change control windows.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Identity and Access Management System",
            "action": "1. Symbolic: Maintain a static list of authorized administrator accounts permitted to modify RBAC. Alert on any RBAC modification API call originating from a user not on this list. 2. Statistical: For each authorized administrator, build a baseline of the time-of-day and day-of-week they perform RBAC changes. Use descriptive statistics to define normal working hours. Alert if an RBAC change occurs more than 2 standard deviations outside of this time window (e.g., 3 AM on a Sunday). 3. Machine Learning: Employ a time-series forecasting model (e.g., ARIMA) for each administrator, trained on their history of RBAC modification events. The model will predict the expected number of changes for a given time interval. An alert is triggered if the actual number of changes significantly exceeds the model's prediction with its confidence interval."
          },
          {
            "description": "A single user principal or source IP address generates a high volume of GET requests to enumerate RBAC resources ('/apis/rbac.authorization.k8s.io/v1/roles', 'clusterroles') within a short time window, immediately followed by a POST or PUT request to create or modify a 'RoleBinding' or 'ClusterRoleBinding'.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": "1. Symbolic: Create a rule that triggers when a single source IP (id.orig_h in Zeek conn.log) generates more than 50 GET requests to RBAC API endpoints within 5 minutes, followed by a POST/PUT request to a 'rolebindings' or 'clusterrolebindings' endpoint from the same IP within the next 5 minutes. 2. Statistical: For each user, establish a baseline ratio of read (GET) to write (POST/PUT/PATCH) operations on RBAC objects. Calculate the 99th percentile for this ratio. An alert is triggered if a user's read/write ratio in a short time window exceeds this threshold, indicating abnormal enumeration before modification. 3. Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model) trained on sequences of API calls from legitimate users. Flag user sessions whose sequence of actions (e.g., 'list roles' -> 'get role' -> 'list clusterroles' -> 'create clusterrolebinding') has a low probability under the trained model, indicating a deviation from normal administrative behavior."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by adding roles to container accounts?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1098.006",
        "name": "Additional Container Cluster Roles",
        "evidence": [
          {
            "description": "A successful RBAC modification API call originates from an IP address of a pod or node that has been flagged for suspicious activity (e.g., reverse shell connection, anomalous process execution) within a preceding, configurable time window (e.g., 60 minutes).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cluster Worker Nodes, Kubernetes API Server, Security Incident and Event Management (SIEM) System",
            "action": "1. Symbolic: Create a stateful correlation rule. If an alert for a suspicious process (e.g., 'powershell.exe -enc ...') is generated from a host via Windows Event ID 4688, add the host's IP to a watchlist for 60 minutes. If any K8s RBAC modification API call (seen in Zeek http.log) originates from an IP on this watchlist, trigger a critical alert. 2. Statistical: Develop a risk score for each node IP. The score increases based on security events (+10 for anomalous process, +5 for connection to rare IP). If an RBAC modification is initiated from an IP with a score exceeding the 95th percentile of all node risk scores, flag it. 3. Machine Learning: Use a graph-based anomaly detection model where nodes are entities (pods, nodes) and edges are actions (API calls, processes). A path like '(Anomalous Process) -> [on Node X] -> (K8s API Call to Modify RBAC) -> [from Node X IP]' would be identified as a highly anomalous subgraph, indicative of privilege escalation."
          },
          {
            "description": "A 'RoleBinding' or 'ClusterRoleBinding' is created or modified via an API call, where the referenced 'Role' or 'ClusterRole' contains rules granting high-risk permissions. These include the 'impersonate' verb, create/update permissions on RBAC objects ('roles', 'clusterroles', 'rolebindings'), or wildcards ('*') in the 'verbs' or 'resources' fields.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": "1. Symbolic: In Zeek http.log payloads for RBAC binding changes, parse the referenced role definition. Alert immediately if the role's 'rules' array contains an object with 'verbs: ['impersonate']', or 'verbs: ['*']', or 'resources: ['*']', or 'resources' containing 'rolebindings' with 'verbs' containing 'create'. 2. Statistical: Calculate a 'privilege score' for each role based on its permissions ('impersonate'=10, '*'=5). Baseline the average privilege score of roles assigned to non-admin service accounts. Alert if a new binding assigns a role with a score that is a statistical outlier (e.g., >3 standard deviations above the mean). 3. Machine Learning: Train a classification model to categorize roles as 'high-risk' or 'low-risk' based on their rule definitions. If a model-classified 'high-risk' role is bound to a subject not previously associated with high-risk roles, flag it as a potential privilege escalation."
          },
          {
            "description": "A 'ClusterRoleBinding' is created that binds a 'ServiceAccount' subject to the 'cluster-admin' 'ClusterRole', identified by a POST request with a payload specifying 'subjects[].kind: ServiceAccount' and 'roleRef: { name: 'cluster-admin', kind: 'ClusterRole' }'.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server",
            "action": "1. Symbolic: Create a high-severity, zero-tolerance rule. Monitor Zeek http.log for POST requests to '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings'. If the parsed request body contains both a subject of 'kind: ServiceAccount' and a 'roleRef' pointing to 'name: 'cluster-admin'', trigger an immediate, critical alert. 2. Statistical: Maintain a count of 'cluster-admin' bindings for each subject kind (User, Group, ServiceAccount). If the count of ServiceAccount bindings to 'cluster-admin' ever increases from its baseline (which should be zero), this statistical deviation serves as a secondary confirmation. 3. Machine Learning: This scenario is best handled by symbolic logic. However, an anomaly detection model trained on legitimate bindings would see a ServiceAccount-to-cluster-admin binding as a massive outlier (high anomaly score) because this pattern should not exist in the training data, thus flagging it."
          },
          {
            "description": "The user identity associated with a Kubernetes API request to create or modify an RBAC binding possesses insufficient privileges for that action, yet the request succeeds due to a misconfiguration or other vulnerability. This is observed by correlating the source user of the API call with their known (lower) privilege level.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Identity and Access Management System",
            "action": "1. Symbolic: Maintain a cache of user-to-role mappings. When an RBAC modification is observed in Zeek http.log, check if the source user has 'create' or 'update' permissions on 'rolebindings'/'clusterrolebindings'. If they do not, but the API call returned a 200/201 status, it indicates a privilege escalation vulnerability is being exploited. 2. Statistical: Profile the 'privilege delta' of RBAC modifications initiated by each user. If a user normally only grants roles with a low privilege score and suddenly grants a high-score role, this is a statistical anomaly in their behavior. Alert on deltas exceeding the 95th percentile for that user. 3. Machine Learning: Use a peer group-based anomaly detection model. Group users by their assigned roles. A model learns the typical RBAC modification behavior for each peer group. If a user's action significantly deviates from the behavior of their peers, it is flagged as an anomaly."
          },
          {
            "description": "The execution of a known container-escape or privilege escalation exploit process on a cluster node (identified via Windows Event ID 4688) is followed within minutes by a Kubernetes API call from the compromised node's IP address to create or modify an RBAC role.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cluster Worker Nodes, Kubernetes API Server",
            "action": "1. Symbolic: Maintain a list of process names and command-line arguments associated with known K8s exploits. Monitor Windows Event ID 4688 ('NewProcessName' and 'CommandLine' fields) on cluster nodes for matches. Upon a match, correlate the node's IP with Zeek conn.log and http.log to see if it makes an RBAC modification API call within the next 15 minutes. 2. Statistical: Calculate the entropy of command-line arguments for processes on cluster nodes. If a process with an argument entropy score in the 99th percentile is observed (Windows Event ID 4688), treat this as a suspicious event and correlate with subsequent K8s API calls from that host's IP. 3. Machine Learning: Train a classifier on Windows Event ID 4688 data to identify malicious process execution based on features like parent process and command-line content. When the classifier flags a process as malicious, use this as a trigger to a downstream logic app that actively monitors for and critically alerts on any subsequent K8s API interactions from that host's IP."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]