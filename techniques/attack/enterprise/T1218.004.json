[
  {
    "information_requirement": "Has the adversary executed code via InstallUtil for defense evasion? (TA0005 - Defense Evasion)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.004",
        "name": "InstallUtil",
        "evidence": [
          {
            "description": "The SHA256 hash of the .NET assembly specified in the InstallUtil.exe command line matches a known malicious hash from a threat intelligence source.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly developer workstations and build servers where .NET development is common.",
            "action": "1. (Symbolic) For each process creation event (Windows Event ID 4688) where the process name is 'InstallUtil.exe', parse the command line to extract the target assembly's file path. Calculate the SHA256 hash of the file and cross-reference it against a threat intelligence feed of known malicious hashes. Alert on any match. 2. (Statistical) Maintain a baseline of all assembly hashes executed by InstallUtil.exe across the enterprise. Calculate the prevalence of each hash. Flag and investigate any hash that is extremely rare (e.g., seen only once or on a single machine), as this is a common attribute of custom malware. 3. (ML) Develop a classification model that uses file metadata (e.g., entropy, import/export tables, string features) from the assembly to predict maliciousness. Use this model to score new, unseen hashes that are not present in the threat intelligence feed, flagging those with a high probability score."
          },
          {
            "description": "InstallUtil.exe is executed with the '/u' or '/uninstall' switch, and the target assembly resides in a suspicious, user-writable directory (e.g., C:\\Users\\*, C:\\ProgramData\\*, C:\\Windows\\Temp\\*).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on non-developer user workstations.",
            "action": "1. (Symbolic) Create a rule to detect process creation events (Windows Event ID 4688) for 'InstallUtil.exe' where the command line contains '/u' or '/uninstall' AND the file path of the target assembly matches a regex for suspicious locations like 'C:\\Users\\*', 'C:\\ProgramData\\*', 'C:\\Windows\\Temp\\*'. 2. (Statistical) For all InstallUtil.exe executions, calculate the entropy of the target file path. Establish a baseline of path entropy for legitimate executions. Flag executions where the path entropy is in the top 95th percentile, as adversaries often use randomized directory names. 3. (ML) Train a decision tree or logistic regression classifier using features such as the parent process name, the presence of the '/u' switch, path depth, and whether the path is in a user-writable directory. Use the model to assign a risk score to each InstallUtil.exe execution."
          },
          {
            "description": "The parent process of InstallUtil.exe is an application not typically associated with software installation or development, such as an Office application, web browser, or script interpreter.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those running Microsoft Office or used for general web browsing.",
            "action": "1. (Symbolic) Alert on any 'InstallUtil.exe' process creation (Windows Event ID 4688) where the parent process name is in a predefined list of suspicious parents (e.g., 'winword.exe', 'excel.exe', 'outlook.exe', 'powershell.exe', 'wscript.exe', 'mshta.exe'). 2. (Statistical) For each host, build a baseline of legitimate parent-child process relationships for 'InstallUtil.exe' over a 30-day period. Calculate the frequency of each parent process. Trigger an alert if an execution occurs with a parent process not seen in the baseline or whose frequency is below a 1% threshold. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on features like parent process name, command-line arguments, and user context. Identify clusters of normal behavior and flag any 'InstallUtil.exe' execution that falls outside these clusters as an anomaly."
          },
          {
            "description": "Within 60 seconds of an InstallUtil.exe execution, the host initiates one or more outbound network connections to an IP address or domain with a low reputation score or that has not been previously observed in the enterprise.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., internet gateway), DNS servers, and all Windows endpoints/servers.",
            "action": "1. (Symbolic) Correlate 'InstallUtil.exe' process creation events (Windows Event ID 4688) with subsequent network connections (Zeek conn.log) from the same host IP within a 60-second window. Alert if the destination IP is on a threat intelligence blocklist. 2. (Statistical) For each correlated network connection, analyze the destination. Calculate the enterprise-wide rarity of the destination IP, port, and requested domain (from Zeek dns.log). If the combination of (IP, port, domain) is in the 1st percentile of rarity (i.e., very rare), flag it for investigation. 3. (ML) Use a time-series anomaly detection model on the host's outbound byte count (from Zeek conn.log). Following an 'InstallUtil.exe' execution, monitor for a statistically significant spike in outbound traffic that deviates from the host's established baseline network behavior. Alert on such anomalies."
          },
          {
            "description": "InstallUtil.exe executes a .NET assembly that was written to disk from a network source less than 5 minutes prior to execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., internet gateway) and all Windows endpoints/servers.",
            "action": "1. (Symbolic) Create a rule that triggers when a file transfer event (Zeek files.log) is followed within 5 minutes by a process creation event (Windows Event ID 4688) for 'InstallUtil.exe' on the same host, where the filename in the file transfer matches the assembly name in the 'InstallUtil.exe' command line. 2. (Statistical) For all observed download-then-execute sequences involving 'InstallUtil.exe', calculate the distribution of the time delta between file write and execution. Flag sequences with a time delta in the bottom 5th percentile (very fast execution after download) as highly suspicious. 3. (ML) Model process and file events as a graph, where nodes are processes, files, and network connections, and edges are actions (e.g., 'writes', 'executes', 'connects to'). Use a graph-based anomaly detection algorithm to identify rare or abnormal sequences, such as a browser downloading a file that is then immediately executed by 'InstallUtil.exe'."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]