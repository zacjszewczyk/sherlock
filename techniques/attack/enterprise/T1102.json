[
  {
    "information_requirement": "Is the adversary using legitimate web services for command and control? (PIR)",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1102",
        "name": "Web Service",
        "evidence": [
          {
            "description": "A network connection event where the destination IP/hostname, associated DNS query, or the server name in the TLS handshake matches a known C2 indicator from an active threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), DNS Resolvers",
            "action": [
              "Continuously ingest C2 threat intelligence feeds (domains, IPs, JA3/JA4 hashes, SSL cert hashes). Create a real-time rule that joins Zeek conn.log, dns.log, and ssl.log data on the UID and alerts when a connection's destination IP/domain or TLS fingerprint matches an indicator.",
              "For each host, count the number of distinct C2 IoC hits over a 24-hour period. Calculate the 95th percentile for this count across all hosts. Flag any host whose IoC hit count exceeds this percentile, indicating an unusual level of contact with known malicious infrastructure.",
              "Train a supervised classification model (e.g., Gradient Boosting) using labeled historical data (IoC hits as 'malicious'). Use features from Zeek logs such as duration, orig_bytes, resp_bytes, proto, and TLS-related features (cipher, version). Use the trained model to predict the probability that a new, unseen connection is C2."
            ]
          },
          {
            "description": "An HTTP request or decrypted HTTPS request contains a URI path, User-Agent string, or custom HTTP header that matches a known C2 framework's static signature (e.g., Cobalt Strike's JQuery GET URI, Empire's default User-Agent).",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application-Layer Proxies with TLS Inspection, Network Taps with Decryption Capabilities",
            "action": [
              "Deploy and maintain a set of regular expressions (regex) or signature rules (e.g., Suricata/Zeek signatures) that match known C2 patterns in HTTP fields. Scan all Zeek http.log records for matches in the uri, user_agent, and host fields and alert on any hit.",
              "For traffic to common web services (e.g., GitHub, Pastebin, Discord), calculate the Shannon entropy of URI paths and User-Agent strings. Establish a baseline entropy range for each service. Alert when a request's entropy falls significantly outside this range (e.g., below the 10th percentile for overly simplistic UAs, or above the 99th percentile for encoded data in URIs).",
              "Use a time-series forecasting model (e.g., Prophet, ARIMA) on the count of requests matching a specific C2 regex pattern (e.g., requests to pastebin.com/raw/). An observed count that significantly exceeds the forecasted upper confidence bound indicates a potential new C2 campaign or outbreak."
            ]
          },
          {
            "description": "A sequence of outbound network connections from a single internal source host to a single external destination (IP and port) exhibits a low standard deviation in inter-arrival times (jitter) and/or byte counts, indicative of automated C2 beaconing.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), Endpoint Detection and Response (EDR) agents on workstations and servers",
            "action": [
              "For each source-destination pair in Zeek conn.log, create a rule that alerts if the connection count exceeds a high threshold (e.g., >60 connections in 1 hour) to the same destination port, especially if the destination is a known public web service on a non-standard port.",
              "For each source IP, group connections by destination IP and port. Calculate the time difference between consecutive connections in each group. Compute the standard deviation of these time differences over a rolling window (e.g., 1 hour). Flag any group where the standard deviation is extremely low (e.g., < 2 seconds), which signifies robotic, non-human timing.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to connection events. Use features such as source IP, destination IP, destination port, orig_bytes, and the standard deviation of inter-arrival times. Isolate and investigate small, dense clusters that represent multiple hosts beaconing to the same C2 service."
            ]
          },
          {
            "description": "A network connection to a public web service (e.g., cloud storage, social media) shows a ratio of uploaded bytes to downloaded bytes that is a statistical outlier compared to the established baseline for that specific service, suggesting data exfiltration.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), Data Loss Prevention (DLP) Systems",
            "action": [
              "Create a rule that alerts on any single connection (Zeek conn.log entry) to a file sharing or paste site where the uploaded bytes (orig_bytes) are greater than 10MB and the upload/download ratio (orig_bytes / resp_bytes) is greater than 10.",
              "For each distinct web service (identified by destination IP or SNI), calculate a historical baseline for the mean and standard deviation of the upload/download byte ratio. For each new connection, calculate the Z-score of its ratio against the service's baseline. Alert on any connection with a Z-score > 3.",
              "Train an unsupervised anomaly detection model (e.g., Isolation Forest) on connection log features (orig_bytes, resp_bytes, duration, proto, destination port). Use the model to assign an anomaly score to each connection. Investigate the highest-scoring anomalies, prioritizing those with a high upload-to-download ratio."
            ]
          },
          {
            "description": "A network connection to an external web service is initiated by: 1) a process not expected to make network connections (e.g., lsass.exe), 2) a legitimate process running from an unusual file path (e.g., powershell.exe from %APPDATA%), or 3) a parent-child process chain inconsistent with normal user activity (e.g., winword.exe spawning cmd.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers (especially Domain Controllers and Application Servers), Endpoint Detection and Response (EDR) agents",
            "action": [
              "Create a watchlist of sensitive processes (e.g., lsass.exe, winlogon.exe, csrss.exe). Join process creation logs (Sysmon EID 1/Win EID 4688) with network connection logs (Sysmon EID 3/Win EID 5156) and alert if any process on the watchlist makes an outbound network connection to a non-local IP address.",
              "For each process name (e.g., svchost.exe, powershell.exe), build a baseline of common parent processes, command-line arguments, and file paths. Calculate the frequency of each combination. Alert when a rare combination occurs, such as svchost.exe running from a path not in C:\\Windows\\System32.",
              "Train a classification model (e.g., Random Forest) on process lineage data. Use features like parent process name, child process name, command-line argument entropy, and file path depth. The model should classify a process creation event chain as benign or suspicious. Correlate 'suspicious' classifications with subsequent network connections to web services for high-fidelity alerts."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]