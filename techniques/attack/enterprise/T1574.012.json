[
  {
    "information_requirement": "Is the adversary maintaining persistence by abusing the COR_PROFILER environment variable?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.012",
        "name": "COR_PROFILER",
        "evidence": [
          {
            "description": "A COR_PROFILER registry key (HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\COR_PROFILER or HKCU\\Environment\\COR_PROFILER) is modified to point to a DLL, or a COM object is registered as a profiler DLL (HKCR\\CLSID\\{GUID}\\InprocServer32), and the associated DLL's file hash matches a known malicious signature or the CLSID is linked to known malware.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers",
            "action": [
              "Symbolic: Create a detection rule to trigger on registry modification events (Windows Event ID 4657, Sysmon Event ID 13) where TargetObject contains 'COR_PROFILER' or 'COR_PROFILER_PATH'. Extract the specified DLL path or CLSID. For the DLL, calculate its hash and check against threat intelligence feeds. For the CLSID, check against a known-bad list. Generate a high-severity alert on any match.",
              "Statistical: Establish a baseline of all legitimate profiler DLLs, their file paths, and their CLSIDs in the environment. For any new COR_PROFILER registry modification, calculate the prevalence of the DLL/CLSID across the environment. Flag any DLL that is statistically rare (e.g., present on < 0.5% of endpoints), located in an unusual directory (e.g., C:\\Temp\\, C:\\Users\\Public\\), or has high path entropy.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features from registry events, including the parent process name (e.g., reg.exe, powershell.exe, wmic.exe), user context, target key path, and characteristics of the DLL path (path depth, presence of user-writable directories, string entropy). Use the model to score the likelihood of a COR_PROFILER registry modification being malicious."
            ]
          },
          {
            "description": "A .NET process is created with an environment block setting `COR_ENABLE_PROFILING=1` and `COR_PROFILER`, and the associated profiler DLL is not on an established allowlist of known legitimate profilers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Symbolic: Create a detection rule to trigger on process creation events (Sysmon Event ID 1) where the process's environment block contains both 'COR_ENABLE_PROFILING=1' and 'COR_PROFILER'. Maintain an allowlist of legitimate application installers and profiler DLLs; alert on any process that sets a profiler DLL not on this list.",
              "Statistical: For all processes launched with profiling enabled, calculate the entropy of the command line and the profiler DLL path. High entropy values may indicate obfuscation. Profile parent-child process relationships; flag any rare parent process (e.g., winword.exe) spawning a .NET process with a profiler as anomalous and worthy of investigation.",
              "Machine Learning: Use an unsupervised learning algorithm, like an autoencoder, trained on legitimate process creation events (Sysmon Event ID 1), including features like process image, parent image, command line, and environment variables. An event involving COR_PROFILER that results in a high reconstruction error would indicate a significant deviation from normal behavior, suggesting unauthorized use."
            ]
          },
          {
            "description": "A .NET process launched with a profiler initiates network connections exhibiting a periodic, low-volume 'heartbeat' pattern to an external destination, or communicates with a domain having a low reputation score or recent registration date.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints",
            "action": [
              "Symbolic: Correlate process creation events with profiling enabled (Sysmon Event ID 1) with subsequent network connections from the same process (Sysmon Event ID 3, Zeek conn.log). Extract the destination IP/domain and check against threat intelligence feeds for known C2 servers. Alert on any match.",
              "Statistical: For network connections from profiled processes, group flows by source/destination pair and calculate the standard deviation of inter-arrival times and bytes transferred. A low standard deviation in both indicates periodic, fixed-size beaconing. For TLS traffic, compare the JA3/JA3S hash from Zeek ssl.log against a baseline of legitimate client fingerprints; flag rare or known-malicious fingerprints.",
              "Machine Learning: Apply a time-series anomaly detection model (e.g., LSTM) to the network traffic byte counts and connection frequency of profiled processes. A significant deviation between the predicted and actual traffic could indicate the start of C2 activity. Use a clustering algorithm (e.g., DBSCAN) on connection features (duration, bytes sent, protocol) to isolate clusters of C2-like behavior distinct from normal traffic."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges from a low-integrity to a high-integrity context by abusing COR_PROFILER?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.012",
        "name": "COR_PROFILER",
        "evidence": [
          {
            "description": "A COR_PROFILER registry key is set to a DLL in a user-writable location (e.g., %APPDATA%, %TEMP%, C:\\Users\\Public), and a .NET process subsequently executes with a high integrity level (e.g., High, System), indicating a potential UAC bypass.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Citrix/VDI Environments",
            "action": [
              "Symbolic: Create a rule that triggers when a COR_PROFILER registry key (HKLM or HKCU) is set to a DLL path not in a protected directory (e.g., C:\\Windows\\, C:\\Program Files\\) and, within a short time window (e.g., 5 minutes), a .NET process launch is observed running as SYSTEM or with High integrity. This sequence is a strong indicator of a setup for privilege escalation.",
              "Statistical: For each process that modifies COR_PROFILER registry keys, analyze its integrity level. Baseline the expected integrity level for processes that perform this action (e.g., installers running as System). A modification by a process with a lower-than-expected integrity level (e.g., Medium) is a statistical anomaly and should be investigated.",
              "Machine Learning: Train a sequence-based model (e.g., RNN or Transformer) on event logs (registry, process) to learn normal sequences of user and system activity. The model can flag a sequence as anomalous if a low-privilege process modifies a user-scope profiler registry key and this is immediately followed by the execution of a high-privilege .NET application by the same user, a pattern indicative of a UAC bypass exploit."
            ]
          },
          {
            "description": "A process running with Medium integrity modifies the HKCU\\Environment\\COR_PROFILER key, and within a short time window (e.g., less than 60 seconds), a .NET process known to auto-elevate launches with High integrity, inheriting the malicious profiler.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations with UAC enabled",
            "action": [
              "Symbolic: Create a correlation rule that looks for this specific event chain within a 60-second window for the same LogonId: 1) Sysmon Event ID 13 (RegistrySet) where TargetObject is 'HKCU\\Environment\\COR_PROFILER' and the initiating process has an IntegrityLevel of 'Medium'. 2) Sysmon Event ID 1 (ProcessCreate) for a .NET process where IntegrityLevel is 'High'.",
              "Statistical: Profile the time delta between HKCU registry modifications and subsequent high-integrity process launches for each user. Establish a baseline distribution of these time deltas. A cluster of events with a very short time delta (e.g., < 1 second), typical for automated exploits, would fall into a low percentile (e.g., < 5th percentile) and should be investigated as a likely attack.",
              "Machine Learning: Use a graph-based analysis platform to model processes, users, and registry keys as nodes and their interactions as edges. An attack path for privilege escalation would appear as a specific subgraph pattern: (User Node) -> [Launches] -> (Medium-Integrity Process) -> [Modifies] -> (HKCU Registry Key) -> [Inherited by] -> (High-Integrity Process). Use graph algorithms to actively search for this malicious subgraph pattern in near-real-time."
            ]
          },
          {
            "description": "A profiled .NET process, running with elevated privileges, spawns a suspicious child process (e.g., cmd.exe, powershell.exe) or performs a privileged action (e.g., creating a user, adding to a group) that is inconsistent with the parent application's established behavioral baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Windows Event ID 4704",
              "Sysmon Event ID 1",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Active Directory Domain Controllers, Member Servers, Privileged Access Workstations",
            "action": [
              "Symbolic: For any process launched with COR_PROFILER enabled, monitor for subsequent child processes or specific security events. Alert if the profiled process spawns cmd.exe/powershell.exe, or generates a Windows Event ID 4720 (User Account Created), 4732 (Member Added to Security-Enabled Local Group), or 4704 (User Right Assigned).",
              "Statistical: For each parent .NET application (e.g., mmc.exe), create a baseline of its normal child processes and their command-line arguments. Use frequency analysis to identify rare or never-before-seen child processes or argument patterns spawned by a profiled instance of that application. A process spawning a child that appears in less than 1% of its historical instances is a high-risk statistical anomaly.",
              "Machine Learning: Train a classifier on process lineage data (parent image, child image, command line, user context, integrity level). The model learns which child processes are legitimate for a given parent. When a profiled, high-privilege .NET process spawns a child, the model can classify the parent-child relationship as 'benign' or 'suspicious'. A 'suspicious' classification is a strong signal of post-escalation activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary impairing or disabling security controls by using COR_PROFILER to hijack .NET-based security tools?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.012",
        "name": "COR_PROFILER",
        "evidence": [
          {
            "description": "The COR_PROFILER environment variable is set for a process associated with a known security tool (e.g., MsMpEng.exe, SentinelAgent.exe, CbDefense.exe), and the specified profiler DLL is not digitally signed by the security vendor or Microsoft.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints with EDR/AV installed, Security Management Servers",
            "action": [
              "Symbolic: Maintain an allowlist of process names for installed security tools. Create a rule that triggers on an Image Load event (Sysmon Event ID 7) where the Image is a security tool and the LoadedImage is a profiler DLL whose signature is invalid or does not belong to the security vendor or Microsoft. Correlate with the process creation event (Sysmon EID 1) to confirm profiling was enabled.",
              "Statistical: Establish a baseline of all DLLs loaded by each security tool process across the enterprise. Calculate the load frequency for each DLL. If a profiler DLL is loaded by a security tool and that DLL is statistically rare (e.g., loaded on only one machine) or loaded from a non-standard path (e.g., %APPDATA%), it is highly suspicious and warrants immediate investigation.",
              "Machine Learning: Use a file-based classifier trained on features of benign and malicious DLLs (e.g., entropy, PE header info, import/export tables, string analysis, signature status). When a profiler DLL is loaded into a security process, extract its features and feed them to the model to get a maliciousness score. A high score indicates a likely defense evasion attempt."
            ]
          },
          {
            "description": "A process modifies the COR_PROFILER registry keys, and this is followed by a measurable and statistically significant drop in security telemetry volume from the affected endpoint, or a failure to block a subsequent, known-bad test event.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Windows Event Logs",
              "Zeek logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/Log Aggregator, All Endpoints",
            "action": [
              "Symbolic: After detecting a COR_PROFILER registry modification (Sysmon Event ID 13), automatically trigger a synthetic test on the endpoint, such as a process that mimics an EICAR download. If the security tool fails to generate an alert in the SIEM for this known-bad event, it is a high-confidence indicator that the defense has been impaired.",
              "Statistical: In the SIEM, monitor the log volume (events per minute) for each host. For any host where a COR_PROFILER modification has occurred, calculate the Z-score of the log volume in the hours following the event compared to a 30-day baseline. A Z-score below -3 (indicating a drop of more than 3 standard deviations) suggests the security tool has been tampered with.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., Prophet, LSTM) on the log ingestion rate for each host. The model learns the normal daily and weekly cycles of log production. Generate an alert when the actual log volume deviates significantly from the model's forecast immediately following a suspicious COR_PROFILER-related event on the host."
            ]
          },
          {
            "description": "A security tool process, confirmed to be profiled via COR_PROFILER, terminates unexpectedly (crashes), or a critical service associated with it enters a stopped state.",
            "data_sources": [
              "Windows Event ID 4689",
              "Windows System Event Log Event ID 7034",
              "Sysmon Event ID 1",
              "Sysmon Event ID 5",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints with EDR/AV installed",
            "action": [
              "Symbolic: Create a correlation rule: IF a security tool process is created with profiling enabled (Sysmon Event ID 1), THEN monitor for its termination event (Sysmon Event ID 5) with a non-zero exit code, a System log event 7034 for that service, OR a ProcessAccess event (Sysmon Event ID 10) targeting it with Terminate privileges from an unauthorized process.",
              "Statistical: Calculate the mean time to failure (MTTF) or average uptime for security tool processes across the environment. If a profiled security process terminates in a time frame that is a statistical outlier (e.g., in the bottom 5th percentile of all historical uptimes for that process), flag it for review as a potential crash induced by a malicious profiler.",
              "Machine Learning: Develop a Markov Chain model for security process states (e.g., 'running', 'scanning', 'updating', 'stopped', 'crashed'). Train the model on normal state transition probabilities. An anomalous transition, such as from 'running' directly to 'crashed' with high probability immediately after a profiling event, would be flagged as a high-risk event indicative of tampering."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]