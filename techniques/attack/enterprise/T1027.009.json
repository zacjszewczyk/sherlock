[
  {
    "information_requirement": "Is the adversary evading defenses by concealing malicious code within seemingly benign files? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.009",
        "name": "Embedded Payloads",
        "evidence": [
          {
            "description": "A file transferred over the network or executed on a host has a hash matching a known malicious hash associated with embedded payloads, or its PE header entropy exceeds a predefined statistical threshold (e.g., > 7.5), or it contains section names matching patterns of known packers.",
            "data_sources": [
              "Zeek files.log",
              "Zeek pe.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway Firewalls, Web Proxies, User Workstations, File Servers",
            "action": "1. (Symbolic) Query for file hashes from Zeek files.log and from files identified by Windows Event ID 4688 execution paths. Match these hashes against a threat intelligence feed of known malicious hashes for droppers and loaders. 2. (Statistical) For all PE files in Zeek pe.log, calculate the Shannon entropy for each section. Establish a baseline entropy distribution for legitimate executables in the environment. Flag any PE file where a section's entropy is in the 99th percentile or exceeds 3 standard deviations from the mean entropy of its corresponding section type (e.g., .text, .data). 3. (Machine Learning) Develop a logistic regression classifier trained on labeled PE file features (section count, section names, section entropy, import table hash, overlay size) to predict the probability of a file containing an embedded payload. Feed features from Zeek pe.log into the model and alert on files with a high probability score."
          },
          {
            "description": "A PE file exhibits an overlay size that constitutes a statistically significant percentage (e.g., > 50%) of the total file size or contains PE sections with entropy values that are statistical outliers compared to a baseline of known-good executables.",
            "data_sources": [
              "Zeek pe.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway Firewalls, Web Proxies, Email Gateways",
            "action": "1. (Symbolic) Create a rule to detect PE files where the overlay size (calculated as `total_bytes` from files.log minus the sum of header and section sizes from pe.log) is larger than the PE structure itself, or where section names match a regex for known packers (e.g., 'UPX[0-9]', '.aspack'). 2. (Statistical) For all PE files, calculate the ratio of overlay size to total file size. Establish a baseline distribution for this ratio across legitimate software. Alert on files where this ratio exceeds the 95th percentile. Also, track the count of PE sections and flag files with a count greater than 2 standard deviations above the mean for legitimate executables. 3. (Machine Learning) Use an unsupervised anomaly detection algorithm like Isolation Forest on a feature set derived from Zeek pe.log (section count, average section entropy, overlay size ratio, number of imported functions). Train the model on a large corpus of network traffic to learn 'normal' PE file structures and flag files that the model identifies as strong outliers."
          },
          {
            "description": "A PowerShell script log (Windows Event ID 4104) contains content with a Shannon entropy score above a defined threshold (e.g., > 4.5), includes Base64-encoded strings longer than a specific length (e.g., > 256 characters), and calls functions associated with in-memory execution like Invoke-Expression or [System.Reflection.Assembly]::Load.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4103"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers, Exchange Servers",
            "action": "1. (Symbolic) Using regex, search PowerShell script block logs (Event ID 4104) for the presence of keywords like `FromBase64String`, `Invoke-Expression`, `IEX`, or `[System.Reflection.Assembly]::Load` occurring in conjunction with large, encoded text blocks. 2. (Statistical) For each script block in Event ID 4104, calculate the Shannon entropy of the content and the character frequency distribution. Establish a baseline for legitimate administrative and user scripts. Alert on scripts with entropy scores exceeding the 98th percentile or where the character distribution deviates significantly (measured by chi-squared distance) from the established norm. 3. (Machine Learning) Train a Naive Bayes or simple neural network text classifier on a labeled dataset of malicious and benign PowerShell scripts using features like keyword frequency, n-grams, and entropy. Deploy the model to classify incoming script blocks from Event ID 4104 in near real-time and alert on those classified as malicious with high confidence."
          },
          {
            "description": "A process injection event (Sysmon Event ID 8 or 10) is observed where the source process is a non-system binary (e.g., WINWORD.EXE) and the target is a system process (e.g., svchost.exe), and the injected memory region is of type `MEM_PRIVATE` and lacks a corresponding on-disk file.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 8 (Sysmon)",
              "Windows Event ID 10 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers, Terminal Servers, Domain Controllers",
            "action": "1. (Symbolic) Create a rule that triggers on Sysmon Event ID 8 (CreateRemoteThread) where the `SourceImage` is an Office application, browser, or script interpreter and the `TargetImage` is a common system process (e.g., svchost.exe, explorer.exe, rundll32.exe), especially if the `StartModule` field is null. 2. (Statistical) Analyze the frequency of process injection pairs (SourceImage -> TargetImage). Establish a baseline of common, legitimate injection events (e.g., from security tools). Flag injection pairs that are statistically rare (e.g., occurring less than 5 times in the last 90 days) in the environment. 3. (Machine Learning) Use a graph-based anomaly detection model. Create a graph where nodes are processes and edges represent injection events. Enrich nodes with metadata (parent, user, image path). Train the model on benign activity to learn normal process interaction graphs and flag new, anomalous edges (injections) that deviate from learned patterns."
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows a file with a non-executable extension (e.g., .txt, .jpg, .dat) being executed, which correlates with a network file transfer (Zeek files.log) where the file's MIME type (e.g., `application/x-dosexec`) contradicts its filename extension.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Proxies, Email Gateways, Network Egress Points",
            "action": "1. (Symbolic) Create a SIEM rule that joins Zeek files.log with Windows Event ID 4688 on filename. Alert when a file transferred with `mime_type` = `application/x-dosexec` has a `filename` extension in a deny-list (e.g., .jpg, .png, .txt, .pdf, .log) and is subsequently executed on an endpoint. 2. (Statistical) Perform frequency analysis on the file extensions of all executed processes from Event ID 4688. Maintain a list of the top 95% most common extensions. Alert whenever a process is created from a file with an extension outside this common set. 3. (Machine Learning) Develop a time-series anomaly detection model on the frequency of process executions grouped by file extension. A sudden, anomalous spike in the execution of a typically non-executed file type (e.g., `.iso`, `.img`) across multiple hosts could indicate a coordinated attack campaign. The model would flag such deviations from the established temporal baseline."
          },
          {
            "description": "A file with an executable extension (.exe, .dll, .ps1) is created (Sysmon Event ID 11) and subsequently executed (Windows Event ID 4688) by the same parent process within a short time window (e.g., < 60 seconds), where the parent process is not a known software installer or updater (e.g., WINWORD.EXE, CHROME.EXE).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Temporary File Directories (%TEMP%, %APPDATA%)",
            "action": "1. (Symbolic) Create a correlation rule that triggers when a Sysmon Event ID 11 (FileCreate) for an executable file is followed by a Windows Event ID 4688 (ProcessCreate) for the same file path within 1 minute, where the `ProcessGuid` of the creating process matches the `ParentProcessGuid`. Exclude known installer processes from the parent process list. 2. (Statistical) For all observed 'FileCreate -> ProcessCreate' sequences, calculate the time delta between the two events. Establish a baseline distribution of these time deltas. Flag sequences where the time delta is in the lowest 5th percentile (indicating automated, immediate execution) and the parent process is not on an allow-list of installers. 3. (Machine Learning) Use a sequence analysis model like an LSTM-based autoencoder to learn normal sequences of events (file creates, process creates, network connections) following a file download. Flag event sequences that deviate significantly from the learned 'normal' post-download behavior, which would include unexpected drop-and-execute patterns."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]