[
  {
    "information_requirement": "Is the adversary maintaining persistence through system firmware modification?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1542.001",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A file hash matching a known malicious firmware utility or a specific EFI/BIOS module associated with persistent threats is observed during process execution or file write events.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 11 (Sysmon FileCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical system endpoints (e.g., domain controllers, database servers) and administrator workstations.",
            "action": "1. (Symbolic) Create a detection rule in the SIEM to monitor for process creation (Windows Event ID 4688) and file creation (Windows Event ID 11) events. Compare the file hash of the process executable or created file against a threat intelligence feed of known malicious firmware utility hashes (e.g., LoJax, TrickBoot, MosaicRegressor). Generate a high-severity alert upon a match. 2. (Statistical) For any process hash match, analyze the prevalence of that hash across the enterprise. Calculate the enterprise-wide execution frequency; a hash seen on fewer than 1% of endpoints should be considered highly suspicious and have its priority elevated. 3. (ML) Train a classification model (e.g., a Random Forest classifier) on process metadata (parent process, user context, command line arguments, hash prevalence) to predict whether a process execution is malicious. Use known firmware utility executions as positive labels and benign admin activity as negative labels to score new, unknown process executions for potential firmware modification behavior."
          },
          {
            "description": "Execution of a known firmware management utility or script with command-line arguments indicative of firmware writing, dumping, or modification, observed outside of authorized change windows or initiated by a non-privileged user account.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed endpoints and servers, particularly those with remote management capabilities.",
            "action": "1. (Symbolic) Deploy a SIEM rule that triggers on process creation (Windows Event ID 4688) where the process name matches a watchlist of firmware utilities (e.g., AFUWIN.exe, FWUpdLcl.exe, chipsec_util.py) OR the command line contains keywords like '/writerom', '/O', '/gan', 'dumpefi', '-w'. Alert if the executing user is not on an approved list of system administrators. 2. (Statistical) For each host, establish a baseline of command-line argument entropy for legitimate administrative tools. Monitor for executions of these tools where the command-line entropy score significantly deviates (e.g., >3 standard deviations) from the host's historical baseline, suggesting unusual or obfuscated parameters. Also, track the frequency of these tool executions per user; an anomalous spike for a specific user account above the 95th percentile of their typical daily activity warrants investigation. 3. (ML) Use a time-series anomaly detection model (e.g., ARIMA or LSTM) to monitor the execution frequency of firmware utilities across the enterprise. Model the expected patterns, accounting for scheduled maintenance windows. An alert is generated when a spike in activity occurs outside of the model's predicted confidence interval, indicating a potential coordinated and unauthorized firmware modification campaign."
          },
          {
            "description": "A process or network connection is initiated immediately following a system boot event, where the process is not a known, legitimate OS startup item or the network connection destination is anomalous.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows System Event Log (Event ID 6005/6009)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, network gateway (for correlating boot-time traffic), and log aggregation platform.",
            "action": "1. (Symbolic) For each host, correlate the system boot event timestamp (Windows System Event ID 6005 or 6009) with subsequent process creation (Windows Event ID 4688) and network connection (Zeek conn.log) events. Alert if a network connection to an external IP on a non-standard port (not 80/443) occurs within 60 seconds of boot, or if a process launches from a non-standard location (e.g., %TEMP%, %APPDATA%) within the same timeframe. 2. (Statistical) For each host, calculate the baseline time delta between boot completion and the first network connection. Monitor for new connections where this delta is an outlier (e.g., below the 5th percentile of the historical distribution for that host), suggesting pre-OS or early-boot network activity. 3. (ML) Train a one-class SVM (Support Vector Machine) on features of legitimate boot-time processes (e.g., parent process, user context, path, signature status). Use the trained model to classify new boot-time processes as either 'normal' or 'anomalous'. Anomalous processes, especially those that are unsigned and have no parent, are strong candidates for firmware-based persistence."
          },
          {
            "description": "An access or modification attempt is logged against a firmware-related memory region, device, or EFI variable by a process or user account not explicitly whitelisted for such activity.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value servers and administrator workstations with SACLs configured for physical memory and firmware-related objects.",
            "action": "1. (Symbolic) Configure and deploy a System Access Control List (SACL) to audit access to the \\Device\\PhysicalMemory object. Create a SIEM rule to alert on any process generating a write-access event (Windows Event ID 4656/4663 with specific access masks) to this object, where the process name is not on a pre-approved whitelist of legitimate system and firmware update utilities. 2. (Statistical) For whitelisted processes, establish a baseline of access frequency to \\Device\\PhysicalMemory. Use a moving average or percentile-based threshold (e.g., alert if hourly access count exceeds the 99th percentile of the historical daily distribution) to detect anomalously high access rates that could indicate misuse of a legitimate tool. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on features of physical memory access events, including the accessing process name, user context, access mask, and time of day. Identify clusters of activity and investigate any new, small clusters that appear, as these may represent a novel or low-and-slow firmware access technique."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading detection through system firmware modification?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1542.001",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A file hash matching a known bootkit or a tool designed to disable security controls at the firmware level is observed during process execution, or there is evidence of low-level system hooks being modified.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 11 (Sysmon FileCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, particularly those running critical security software (EDR, AV).",
            "action": "1. (Symbolic) Maintain and monitor against a watchlist of file hashes for known bootkits and firmware-level defense evasion tools (e.g., components of FinFisher, GrayFish). Generate a critical alert in the SIEM if a hash match is found in process creation (Windows Event ID 4688) or file write (Sysmon Event ID 11) logs. 2. (Statistical) Periodically run an integrity checking tool that dumps and hashes critical system tables like the Interrupt Descriptor Table (IDT). Compare these hashes to a known-good baseline for the specific OS build. Alert on any deviation. Track the entropy of these tables over time; a sudden increase in entropy can indicate patching or hooking. 3. (ML) Train a classification model on the characteristics of processes that attempt to load drivers or interact with kernel memory. Features could include process signature status, command-line arguments, parent process, and user. The model can be trained to identify processes exhibiting behaviors similar to known rootkit loaders, providing a score for how likely a new process is to be attempting low-level system modification for evasion."
          },
          {
            "description": "Execution of a command-line tool or script that modifies the Boot Configuration Data (BCD) or UEFI variables in a manner consistent with bypassing boot-time security controls.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All UEFI-based endpoints and servers, especially those with Secure Boot enabled.",
            "action": "1. (Symbolic) Create a SIEM rule to detect executions of `bcdedit.exe` (via Windows Event ID 4688) with command-line arguments containing `/set` and keywords like `bootstatuspolicy ignoreallfailures`, `testsigning Yes`, or `integrityservices disable`. Alert immediately on any match. 2. (Statistical) Establish a baseline for the normal frequency of `bcdedit.exe` usage per host and per user. An execution by a non-administrative user or a spike in usage by an administrator that exceeds their 99th percentile of historical activity should be flagged for review. 3. (ML) Use a sequence analysis model (e.g., Markov chain) to learn legitimate sequences of administrative commands. An anomalous sequence, such as `bcdedit.exe` being used immediately after a file is downloaded from a suspicious URL (identified from Zeek logs), would be flagged as a high-risk event."
          },
          {
            "description": "A network connection is initiated from an endpoint before the host's EDR or security agent service has started, indicating a boot-time process is evading initial security inspection.",
            "data_sources": [
              "Zeek conn.log",
              "Windows System Event Log (Event ID 6005/6009)",
              "Windows System Event Log (Event ID 7036 for service status)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, network firewalls and sensors, and log aggregation platform.",
            "action": "1. (Symbolic) For each host, identify the timestamp for the EDR/AV service starting (Windows System Event Log ID 7036, 'service entered the running state'). Create a SIEM rule to correlate this with network connection logs (Zeek conn.log). Alert if any outbound network connection from that host's IP is established *before* the security service has started. 2. (Statistical) For each host, profile the time difference between the OS boot event (Event ID 6009) and the security service start event (Event ID 7036). A sudden, significant increase in this time delta (>3 standard deviations from the mean) could indicate a malicious boot component delaying the security service to perform actions unmonitored. 3. (ML) Use a time-series forecasting model to predict the data volume (bytes_out) from each host in the first 5 minutes after boot. An actual data volume that significantly exceeds the forecasted amount (outside the 95% confidence interval) may indicate pre-monitoring data exfiltration or C2 communication by a firmware-level implant."
          },
          {
            "description": "An attempt to terminate, unload, or reconfigure a host-based security sensor or its logging components is observed, originating from an unsigned or anomalously behaving process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4719",
              "Windows System Event Log (Event ID 7034/7036)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers with host-based security sensors installed.",
            "action": "1. (Symbolic) Create a SIEM alert for any process creation (Windows Event ID 4688) of `taskkill.exe`, `sc.exe stop`, or `fltmc.exe unload` where the command line targets a known EDR/AV process, service, or filter driver. Also, alert on any change to audit policy (Windows Event ID 4719) not associated with a change control ticket. 2. (Statistical) Baseline the normal operational state of security services. Monitor for unexpected service stop or failure events (Windows System Event ID 7034/7036). Calculate the Mean Time Between Failures (MTBF) for these services; a sudden, drastic decrease in MTBF for a specific host or group of hosts is a strong statistical indicator of tampering. 3. (ML) Develop a risk scoring model that ingests events related to potential firmware compromise (e.g., alerts from other actions in this plan). If a host accumulates a high-risk score, use this as a feature to increase the severity of subsequent, otherwise low-priority events like a security service error, creating a composite alert that indicates a likely successful defense evasion via firmware."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]