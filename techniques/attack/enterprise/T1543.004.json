[
  {
    "information_requirement": "Is the adversary using Launch Daemons for persistence?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.004",
        "name": "Launch Daemon",
        "evidence": [
          {
            "description": "The SHA256 hash of a newly created or modified plist file in `/Library/LaunchDaemons/`, or its associated executable binary, matches a known-malicious hash from a threat intelligence feed.",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_CREATE",
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_WRITE",
              "Threat Intelligence Hash Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All company-managed macOS workstations and servers.",
            "action": [
              "Symbolic: Create a SIEM rule that triggers on a file creation or modification event within `/Library/LaunchDaemons/`. The rule will automatically parse the plist to identify the executable path, compute the SHA256 hash for both the plist and the executable, and cross-reference both hashes and the executable's file path against an integrated threat intelligence feed of known-bad indicators. Generate a high-severity alert upon any match.",
              "Statistical: For all executables referenced by Launch Daemons, calculate the prevalence of their file hashes across the entire macOS fleet. A hash that appears on a very small number of machines (e.g., below the 1st percentile of prevalence) should be flagged for review, as this indicates rare software not yet in threat feeds.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using features extracted from Launch Daemon plists and their associated binaries, such as file size, hash prevalence, code signing status, and binary entropy. The model will classify new Launch Daemons as 'benign' or 'malicious' based on patterns learned from known goodware and malware samples."
            ]
          },
          {
            "description": "A Launch Daemon plist file contains high-entropy strings in its `ProgramArguments` key, references an executable in a user-writable directory (e.g., `/tmp/`, `/Users/Shared/`), or uses a name designed to masquerade as a legitimate system daemon.",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_CREATE",
              "Plist file content"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of all company-managed macOS workstations and servers.",
            "action": [
              "Symbolic: Deploy YARA rules to scan the content of new plist files in `/Library/LaunchDaemons/`. The rules should detect suspicious patterns such as base64 encoded strings, shell script execution (`/bin/sh -c`), references to `/tmp/`, or names that closely mimic legitimate Apple daemons (e.g., `com.apple.xprotect.plist` vs. the real `com.apple.Xprotect.plist`).",
              "Statistical: For each new plist file, calculate the Shannon entropy of the `ProgramArguments` string array. Establish a baseline entropy score for legitimate daemons in your environment. Flag any new daemon whose argument entropy exceeds a high percentile (e.g., the 95th percentile) of the baseline for manual review.",
              "Machine Learning: Use an unsupervised clustering algorithm (e.g., DBSCAN) on features extracted from all Launch Daemon plist files. Features should include the parent directory of the executable, the number of arguments, the length of arguments, and the presence of specific keywords (`.sh`, `curl`, `python`). Clusters that do not group with known-good daemons represent anomalous configurations requiring investigation."
            ]
          },
          {
            "description": "A process spawned by a newly created Launch Daemon initiates network connections to a low-reputation IP address, a newly registered domain (NRD), or exhibits periodic beaconing behavior consistent with command and control (C2).",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_CREATE",
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_EXEC",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points monitoring traffic from macOS subnets and all company-managed macOS endpoints.",
            "action": [
              "Symbolic: Correlate a file creation event in `/Library/LaunchDaemons/` with subsequent process execution and network connection events from the new daemon's process. Enrich destination IPs and domains from `Zeek conn.log` and `Zeek dns.log` with threat intelligence (reputation, registration date). Alert if the process connects to a known-bad indicator or a domain registered within the last 30 days.",
              "Statistical: For processes spawned by Launch Daemons, analyze `Zeek conn.log` to profile their network behavior. Calculate the jitter (standard deviation of time between connections) and connection size. A very low jitter and consistent packet size for outbound connections to a single destination is indicative of C2 beaconing. Flag processes with connection jitter below the 5th percentile of normal network traffic.",
              "Machine Learning: Apply a time-series anomaly detection model (e.g., LSTM Autoencoder) to the network traffic volume and connection frequency generated by each daemon-spawned process. Train the model on a baseline of normal network activity. The model will flag significant deviations from the learned baseline, identifying potential C2 communications or data exfiltration."
            ]
          },
          {
            "description": "The file hash of an executable referenced by a pre-existing, legitimate Launch Daemon plist is modified, indicating a potential hijack.",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_WRITE",
              "File Integrity Monitoring logs",
              "Golden Image Hashes"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of all company-managed macOS workstations and servers, focusing on application and system binaries.",
            "action": [
              "Symbolic: Create and maintain a manifest of file paths and their corresponding SHA256 hashes for all executables referenced in `/Library/LaunchDaemons/` plists on a golden image or known-good system. Implement a file integrity monitoring rule that triggers an alert whenever a file modification event occurs for a file on this manifest and the new hash does not match the baseline.",
              "Statistical: For each executable targeted by a Launch Daemon, establish a baseline of its modification frequency. Legitimate updaters may cause periodic changes, but most system files should rarely change. An alert should be generated if the modification frequency for a specific file exceeds two standard deviations above its historical mean, suggesting anomalous activity.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) on features of file modification events for legitimate binaries (e.g., parent process of the write is a known software updater, time of day is during a maintenance window). The model will identify file modification events that do not conform to this learned 'normal' profile as anomalous and potentially malicious."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has the adversary achieved privilege escalation via Launch Daemons?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.004",
        "name": "Launch Daemon",
        "evidence": [
          {
            "description": "A plist file created in `/Library/LaunchDaemons/` or its associated executable is identified by hash or name as a known privilege escalation tool or malware component.",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_CREATE",
              "Threat Intelligence Hash Feeds",
              "YARA rules for privilege escalation tools"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All company-managed macOS workstations and servers.",
            "action": [
              "Symbolic: Create a SIEM rule to monitor file creation in `/Library/LaunchDaemons/`. Upon creation, hash the plist and its referenced executable and compare them against a threat intelligence database specifically populated with hashes of macOS privilege escalation tools (e.g., components of XCSSET, SwiftSploit). Alert on any match.",
              "Statistical: Analyze the string content of newly created plists and their executables. Calculate the term frequency-inverse document frequency (TF-IDF) score for keywords associated with privilege escalation (e.g., `dscl`, `security`, `AuthorizationExecuteWithPrivileges`). A high TF-IDF score, relative to a baseline of benign daemons, indicates a high likelihood of malicious intent.",
              "Machine Learning: Train a document classifier (e.g., Naive Bayes) on the text content of plist files and the string dumps of their executables. The model should be trained on a labeled dataset of benign daemons and known privilege escalation scripts/binaries to learn to distinguish between them based on their content."
            ]
          },
          {
            "description": "A process, particularly one running in a non-administrative user context, executes `launchctl load` with `sudo` to load a plist from a non-standard path (e.g., `/tmp/`, `/Users/Shared/`).",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_EXEC",
              "macOS Unified Logging",
              "Process command-line arguments"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All company-managed macOS workstations, focusing on process execution logs.",
            "action": [
              "Symbolic: Create a detection rule that searches process execution logs for the command-line pattern `sudo launchctl load` where the file path argument does not start with `/System/Library/` or `/Library/`. This is a strong indicator of an attempt to load a custom daemon with root privileges.",
              "Statistical: Establish a baseline of which users and processes typically execute `sudo launchctl`. The execution of this command by a user who has never done so before, or by a parent process not associated with software installation (e.g., a web browser or document reader), should be flagged as a statistical anomaly.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model) to analyze the sequence of commands executed by users. Train the model on normal user behavior. A sequence such as `curl` to a temporary directory, followed by `chmod +x`, and then `sudo launchctl load` from that directory would be identified as a highly anomalous and suspicious sequence."
            ]
          },
          {
            "description": "A file is created in the root-only directory `/Library/LaunchDaemons/` by a process running with an effective user ID (EUID) other than 0 (root).",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_CREATE",
              "macOS Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of all company-managed macOS endpoints.",
            "action": [
              "Symbolic: Implement a SIEM rule that triggers on any file creation event in the `/Library/LaunchDaemons/` directory where the `process.euid` or equivalent field is not equal to `0`. This directly detects the exploitation of a misconfiguration or a vulnerability allowing an unauthorized write.",
              "Statistical: Profile the parent processes that legitimately write to `/Library/LaunchDaemons/` (e.g., `systemd`, `installer`). A file write to this directory from a parent process that is statistically rare (e.g., `launchd` itself, or a user-facing application) should generate an alert for anomalous behavior.",
              "Machine Learning: Use an anomaly detection model on process lineage data. Train a graph-based model on normal process creation chains that lead to writes in sensitive directories. A process chain where, for example, a browser spawns a shell that then writes to `/Library/LaunchDaemons/` would be flagged as a structural anomaly in the process graph."
            ]
          },
          {
            "description": "A process launched by `launchd` as root (UID 0) subsequently executes commands to create a new user, modify user privileges, or disable security controls.",
            "data_sources": [
              "macOS Endpoint Security Framework ES_EVENT_TYPE_NOTIFY_EXEC",
              "macOS Unified Logging",
              "Process command-line arguments"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on all company-managed macOS endpoints.",
            "action": [
              "Symbolic: Create a correlation rule that looks for a process spawned by `launchd` with UID 0, which then spawns a child process executing sensitive commands like `dscl . -create /Users/`, `sysadminctl`, or `spctl --master-disable`. The rule should trigger if these events occur within a short time window (e.g., 5 minutes) of each other.",
              "Statistical: Baseline the frequency and command-line arguments of administrative commands (`dscl`, `sysadminctl`, etc.) executed on your systems. An execution of one of these commands by a process whose parent is `launchd` (and not a known administrative script or tool) should be scored as a high-risk statistical outlier.",
              "Machine Learning: Model the sequence of actions taken by root processes spawned from `launchd`. A supervised classifier can be trained on labeled sequences of 'benign daemon activity' vs. 'malicious post-escalation activity'. A new sequence involving file modification followed by user creation would be classified as malicious."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]