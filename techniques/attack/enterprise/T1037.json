[
  {
    "information_requirement": "Has the adversary established persistence by modifying or creating a boot or logon initialization script? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "A process spawned by a boot or logon script initiates an outbound network connection to an IP address or domain present on a threat intelligence feed of known command and control (C2) infrastructure.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Internet Gateway/Egress Points, DNS Resolvers",
            "action": "1. (Symbolic) Correlate process creation events (Windows Event ID 4688) where the parent process is a script interpreter with network connection logs (Zeek conn.log). Join the destination IP or domain (from Zeek dns.log) with a high-confidence threat intelligence feed. Alert on any match. 2. (Statistical) For connections from logon script processes, calculate the rarity of the destination Autonomous System Number (ASN) and destination port combination across the enterprise baseline. Flag combinations that fall in the bottom 1st percentile of frequency. 3. (Machine Learning) Use a time-series analysis model (e.g., Prophet) on the data volume and connection frequency from logon script processes to specific destinations. Flag periodic, heartbeat-like connections (beaconing) that are characteristic of C2 channels."
          },
          {
            "description": "The command line arguments for a boot or logon script process contain high-entropy strings, Base64 encoding patterns, or keywords for creating persistence, such as 'schtasks', 'reg add', or 'HKCU\\\\...\\\\Run'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Application Servers",
            "action": "1. (Symbolic) Scan command line arguments from Windows Event ID 4688 for script processes using regular expressions to detect keywords (`schtasks`, `reg add`), persistence locations (`CurrentVersion\\\\Run`), and encoding patterns (`-enc`, `-e`, `[Convert]::FromBase64String`). 2. (Statistical) Calculate the Shannon entropy of the command line string. Establish a baseline for normal script command lines and alert on commands with entropy scores exceeding 3 standard deviations from the mean, or a fixed threshold (e.g., >4.5) indicative of obfuscation. 3. (Machine Learning) Train a classification model (e.g., Logistic Regression with TF-IDF vectorization) on a labeled dataset of benign and malicious command lines. Use the model to score new script command lines and alert on those with a high probability of being malicious."
          },
          {
            "description": "A boot or logon script file is modified or created by a user account not in an authorized administrator group, or by a process not on an established whitelist of change management tools.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (SYSVOL share), File Servers hosting roaming profiles, Enterprise Workstations",
            "action": "1. (Symbolic) Monitor file system auditing events (Windows Event ID 4663) for write access to logon script paths. Create a whitelist of authorized user groups (e.g., 'Domain Admins') and parent processes (e.g., 'gpupdate.exe'). Alert on any modification event where the SubjectUserName or ProcessName is not on the whitelist. 2. (Statistical) For each script path, build a statistical model of normal modification times (hour of day, day of week). Flag modifications that are temporal outliers (e.g., occurring at 3 AM on a Sunday) by calculating the z-score of the event time against the historical distribution. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on event features (user, process, host, time). Normal change management activity will form dense clusters. Flag modification events that are classified as noise or outliers by the algorithm."
          },
          {
            "description": "A process spawned by a boot or logon script is unsigned, executes from a user-writable directory (e.g., %TEMP%, %APPDATA%), or has a process name that is a statistical outlier.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Application Servers",
            "action": "1. (Symbolic) From Windows Event ID 4688, check if the child process of a script is executing from a suspicious path (e.g., `C:\\Users\\*\\AppData\\`, `C:\\Windows\\Temp\\`). Enrich process data to verify if the executable is signed by a trusted publisher. Alert on unsigned processes running from user-writable locations. 2. (Statistical) Establish a baseline of legitimate parent-child process relationships for logon scripts. Calculate the rarity of a new parent-child pair. Alert on process relationships that have a population frequency of less than 1%. 3. (Machine Learning) Train a one-class SVM on features of legitimate child processes (e.g., path depth, command line length, parent process name). Use the trained model to identify anomalous child process creation events that deviate significantly from the learned 'normal' profile."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has the adversary escalated privileges by abusing a boot or logon initialization script? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "The command line of a process launched by a boot or logon script contains specific keywords or patterns associated with privilege escalation tools or techniques, such as 'Invoke-Mimikatz', 'runas /user:administrator', or known UAC bypass methods.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Servers with local administrator accounts",
            "action": "1. (Symbolic) Use a regularly updated library of regular expressions to search Windows Event ID 4688 command line arguments for strings indicative of privilege escalation tools (e.g., `PsExec.exe -s`, `Invoke-AllChecks`). 2. (Statistical) Analyze the n-gram frequency (e.g., bigrams, trigrams) of commands and arguments executed by scripts. Flag rare sequences that are statistically associated with privilege escalation activity in open-source threat intelligence. 3. (Machine Learning) Train a supervised classification model (e.g., Gradient Boosting) on command line features (token presence, argument counts, string length) to classify a command as a potential privilege escalation attempt. The model should be trained on a labeled dataset of benign and malicious script commands."
          },
          {
            "description": "A sequence of events is observed within a short time window consistent with known script-based privilege escalation patterns, such as a script modifying a service's binary path in the registry followed by that service restarting.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Windows Event ID 7040",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Enterprise Workstations",
            "action": "1. (Symbolic) Create a correlation rule that triggers when the following sequence occurs on a single host within a 5-minute window: a script process (Event 4688) writes to a service's ImagePath registry key (Event 4657), followed by the service start type changing (Event 7040) or the service entering a running state (Event 7036). 2. (Statistical) Profile the frequency of modifications to service registry keys by different processes. Flag modifications made by processes that are statistical outliers (e.g., a process modifying a service key for the first time, placing it in the 1st percentile of modifier frequency). 3. (Machine Learning) Use a sequence analysis model, like a Recurrent Neural Network (RNN), trained on sequences of system events from normal operations. Flag event sequences that the model identifies as having a low probability of being normal."
          },
          {
            "description": "A process spawned by a logon script associated with a standard user logon (Logon Type 2) is observed running with a High or System integrity level and a TokenElevationType of Type 1 (full admin token) or Type 2 (UAC elevated).",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)",
            "action": "1. (Symbolic) Join logon events (Windows Event ID 4624) with subsequent process creation events (Windows Event ID 4688) using the Logon ID. Alert if a process spawned by a logon script has an Integrity Level of 'High' or 'System' when the corresponding logon event was for a user not in a privileged group. 2. (Statistical) For each user, profile the distribution of Integrity Levels of processes they launch via logon scripts. Flag any process whose Integrity Level is a statistical outlier for that user (e.g., a user who 99% of the time runs 'Medium' integrity processes suddenly spawns a 'High' integrity process). 3. (Machine Learning) Use a clustering algorithm (e.g., K-Means) on process event features (User SID, Logon Type, Parent Process, Integrity Level). Identify clusters of normal activity and flag events that fall outside these clusters as anomalous privilege escalations."
          },
          {
            "description": "A process spawned by a high-privilege machine startup script is observed requesting a handle to lsass.exe with PROCESS_VM_READ access or modifying critical system files like the SAM database.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Credential Stores (LSASS process memory), Security Databases (SAM file)",
            "action": "1. (Symbolic) Create a rule to detect when a process, whose parent is a high-privilege script, generates a handle request event (Windows Event ID 4656) for the `lsass.exe` process with an `AccessMask` containing `0x10` (PROCESS_VM_READ). 2. (Statistical) For each high-privilege script, create a statistical profile of the objects it typically accesses (using Event 4656/4663). Calculate the Jaccard similarity between the set of objects accessed in a new execution and the historical profile. A low similarity score indicates anomalous access patterns requiring investigation. 3. (Machine Learning) Model system activity as a graph where nodes are processes and files, and edges are interactions. Train a graph neural network (GNN) to learn embeddings for normal system activity graphs. Flag script executions whose resulting activity subgraphs are identified as anomalous by the GNN."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]