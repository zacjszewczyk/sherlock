[
  {
    "information_requirement": "Is an adversary achieving persistence on macOS endpoints by hijacking dylib loads in auto-starting applications?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.004",
        "name": "Dylib Hijacking",
        "evidence": [
          {
            "description": "A dynamic library (.dylib) file is written to a disk location within a legitimate, auto-starting application's dylib search path, and the dylib is either unsigned, ad-hoc signed, or has a hash matching a known malicious file.",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)",
              "osquery file table (path, sha256)",
              "osquery authenticode table"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, specifically LaunchAgent/LaunchDaemon plists in /Library/LaunchDaemons, /Library/LaunchAgents, ~/Library/LaunchAgents, and application bundles in /Applications/, ~/Applications/, and user-writable library paths like ~/Library/.",
            "action": [
              "Upon a dylib file creation event (ES_EVENT_TYPE_NOTIFY_CREATE), compute its SHA256 hash and query against a threat intelligence feed of known-malicious dylib hashes. Simultaneously, inspect the dylib's code signature using osquery's authenticode table. Generate an alert if the hash is a match, the dylib is unsigned, ad-hoc signed, or signed by a non-trusted developer certificate.",
              "For each auto-starting application (identified by parsing LaunchAgent/LaunchDaemon plists), establish a baseline set of dylibs loaded at startup by querying osquery's process_open_files table over a 30-day period. Monitor for new dylibs created in the application's search paths (including resolved @rpath locations). Calculate the Jaccard similarity index between the new set of dylibs and the historical baseline. Alert on a similarity score below a set threshold (e.g., < 0.95), indicating a significant change.",
              "Train a Random Forest classification model to predict if a dylib file write event is malicious. Features should include: file path entropy, the name of the writing process (e.g., 'curl', 'Safari'), a boolean for whether the path is user-writable, and the time delta between the file write and the next launch of the associated application. Deploy the model to score new file write events in real-time and alert on those classified as malicious with high confidence (> 0.9)."
            ]
          },
          {
            "description": "A process spawned by launchd (PID 1) loads a dynamic library from a directory that is user-writable (e.g., /Users/Shared/, /tmp/, ~/Downloads) or statistically rare for that specific process.",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_MMAP)",
              "osquery process_open_files table",
              "osquery processes table (for parent PID)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, focusing on processes spawned by launchd (PID 1) and their file open/memory map events, specifically monitoring user-writable locations like /tmp/, /Users/Shared/, and user home directories.",
            "action": [
              "Create a detection rule that triggers when a process with parent PID 1 loads a .dylib file (via ESF NOTIFY_MMAP or osquery process_open_files) from a user-writable directory (e.g., path starts with '/Users/Shared/', '/tmp/', or '/Users/*/'). Maintain an allowlist of known-good software updaters and developer tools to reduce false positives.",
              "For all processes across the environment, aggregate and calculate the frequency of all dylib load paths over a 30-day period to create a global rarity score for each path. Alert when a process associated with an auto-start item (parent PID 1) loads a dylib from a path in the bottom 5th percentile of frequency, indicating a strong deviation from common behavior.",
              "Implement a graph-based anomaly detection model where nodes represent processes (e.g., 'CalendarAgent'), dylibs (e.g., 'libsqlite3.dylib'), and file paths (e.g., '/usr/lib/'). Edges represent 'loads from' relationships observed over a baseline period. Continuously monitor for the creation of new, high-risk edges, such as an edge connecting an auto-starting process node to a dylib node in a user-writable path node (e.g., '~/Downloads/')."
            ]
          },
          {
            "description": "A legitimate macOS process associated with an auto-start mechanism (e.g., CalendarAgent, Spotlight) initiates network connections to an unusual external destination or exhibits anomalous data transfer patterns shortly after system boot or user login.",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and macOS endpoints (for process context).",
            "action": [
              "Correlate process execution events (ESF) on endpoints with network connection logs (Zeek). Alert if an auto-starting process, which is not expected to make network connections (e.g., a system utility on a static allowlist), communicates with any external IP address (not in RFC1918 space) or resolves a domain not on an organizational allowlist.",
              "For each auto-starting process, baseline normal network behavior using Zeek logs, creating a profile of (destination ASN, destination port, protocol, JA3 hash, daily data volume). Flag any new connection where one or more features deviate significantly from the baseline, such as a connection to a port never used by the process before or a total data transfer volume (sum of `orig_bytes` and `resp_bytes`) exceeding 4 standard deviations from the daily average.",
              "For each key auto-starting application, build a univariate time-series model (e.g., ARIMA) to forecast the expected network traffic volume (sum of bytes) per hour. Continuously feed real-time Zeek data into the model. An alert is generated if the observed traffic volume significantly exceeds the forecasted volume's confidence interval, especially within the first hour after a user login or system boot event."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on macOS by exploiting a privileged application's dylib search path?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.004",
        "name": "Dylib Hijacking",
        "evidence": [
          {
            "description": "A dylib file is created in a user-writable directory by a low-privilege process (UID > 500), followed within a short time window (e.g., < 60 seconds) by the execution of a SUID/GUID binary or privileged helper tool known to be vulnerable to dylib hijacking.",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_EXEC)",
              "osquery suid_bin table",
              "system.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, focusing on SUID/GUID binaries, privileged helper tools, and world-writable directories such as /tmp/ and /Users/Shared/.",
            "action": [
              "Maintain a list of known-vulnerable privileged executables (e.g., from the `osquery suid_bin` table). Trigger an alert when a .dylib is created in a world-writable path (e.g., /tmp, /Users/Shared) by a non-root user (UID > 500) and a process from the vulnerable list is executed by any user within a 60-second window on the same host.",
              "Profile the dylib loading behavior of all processes that execute with effective UID 0. Establish a baseline of legitimate dylibs and their full paths for each privileged process. Alert when a root-level process loads a dylib from a path not in its established baseline, especially if the path is user-writable and the dylib's creation timestamp is more recent than the process's last baseline update.",
              "Train a Long Short-Term Memory (LSTM) network on sequences of events from ESF logs, including process executions and file creations. The model learns normal sequences leading to legitimate privileged execution. Flag event sequences as anomalous when a dylib file write by a user process is immediately followed by a privileged execution via a vulnerable binary, as this pattern deviates from learned legitimate sequences."
            ]
          },
          {
            "description": "A process running with standard user privileges (UID > 500) successfully creates a .dylib file in a SIP-protected or otherwise restricted system directory (e.g., /System/, /Library/, /usr/lib).",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)",
              "osquery file_events table"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Protected macOS directories such as /System/, /Library/, /usr/bin/, /usr/sbin/, and privileged Application bundles in /Applications/.",
            "action": [
              "Create a critical severity alert that triggers on any successful file creation event (`ES_EVENT_TYPE_NOTIFY_CREATE`) for a file ending in `.dylib` within a protected system directory (e.g., /System/Library/, /usr/lib/, /Library/) where the initiating process's effective user ID (euid) is greater than 0.",
              "For each user, establish a baseline of directories they normally write to. Calculate the frequency of writes per user per directory path. Alert if a user process writes a file to a directory path that is statistically rare for that user or user group (e.g., a path in the bottom 1% of write locations for that user), especially if the file is a dylib and the path is a system directory.",
              "Use a one-class SVM trained on legitimate file modification events (`osquery file_events`) by non-root user processes, using features like file path, process name, and file extension. The model learns a boundary representing normal file write behavior. Flag any new file write event, particularly a dylib creation in a system path, that falls outside this boundary as a high-confidence anomaly indicative of a privilege escalation exploit."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using dylib hijacking on macOS for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.004",
        "name": "Dylib Hijacking",
        "evidence": [
          {
            "description": "A trusted, signed macOS process (e.g., Finder, Safari, a third-party security agent) initiates a network connection where the destination IP/domain is on a threat intelligence feed or the connection's TLS fingerprint (JA3/S) is anomalous for that process.",
            "data_sources": [
              "Zeek conn.log (id.resp_h, ja3, ja3s)",
              "Zeek dns.log (query, answers)",
              "macOS Endpoint Security Framework logs (for process name and path)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and macOS endpoints running trusted, signed applications.",
            "action": [
              "Ingest a C2 threat intelligence feed. For every connection in `conn.log`, correlate the destination IP (`id.resp_h`) against the feed. If a match occurs, use the timestamp and source IP (`id.orig_h`) to query endpoint logs for the originating process name. Generate a critical alert if the process is a trusted, signed binary from Apple or a known security vendor (e.g., path starts with `/System/Applications/`).",
              "For each trusted process, create a baseline of network connection profiles from Zeek logs, including destination ports, protocols, and JA3/JA3S hashes. Use the Mahalanobis distance to score the abnormality of new connections based on this multi-feature profile. Alert on connections with a high distance score, indicating a statistically significant deviation from the process's established network behavior.",
              "Train an autoencoder neural network on legitimate network connection metadata from trusted applications. Use a feature vector like `[process_name_encoded, dest_port, protocol_encoded, ja3_hash_encoded]`. The model learns to reconstruct normal connection patterns with low error. A high reconstruction error on a new connection indicates it is anomalous and potentially the result of a hijack."
            ]
          },
          {
            "description": "A legitimate macOS application binary, identified by its name (e.g., 'Safari'), is executed from a user-writable directory (e.g., /Users/Shared/, ~/Downloads) instead of its default, protected installation path (e.g., /System/Applications/Safari.app).",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)",
              "osquery process_events table (path, cmdline)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on macOS endpoints, such as ~/Downloads, ~/Documents, /Users/Shared/, and /tmp/.",
            "action": [
              "Create a rule to detect when a process name matching a binary in a trusted system path (e.g., in `/System/Applications/`, `/Applications/`) is executed from a user-writable path (e.g., `/Users/*/`, `/tmp/`, `/var/tmp/`). This is a strong indicator of an adversary staging a legitimate application for side-loading.",
              "Calculate the Shannon entropy of the directory path for every process execution event. Establish a baseline entropy score for each unique process name (e.g., 'Safari' typically has a low path entropy). Alert on executions of known-good process names from paths with an entropy score above the 99th percentile for that specific process, indicating an unusually complex or randomized path.",
              "Use the DBSCAN clustering algorithm on process execution events, using features like process path string, parent process name, and user ID. This can identify small, dense clusters of anomalous executions that represent a tactic, like a trusted app running from a strange location, which are often missed by single-event rules that lack context."
            ]
          },
          {
            "description": "A signed, typically non-network-facing macOS application (e.g., Calculator.app, TextEdit.app) either initiates an external network connection or spawns a shell process (e.g., zsh, bash, sh).",
            "data_sources": [
              "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_FORK)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints and network egress points.",
            "action": [
              "Maintain an explicit list of signed, non-network-facing applications (e.g., Calculator, TextEdit, Font Book). Create a high-priority alert that triggers if any process from this list (A) is the source of a network connection to an external IP in `Zeek conn.log`, or (B) is the parent process of `zsh`, `bash`, `sh`, or `osascript` in ESF process events.",
              "For all parent processes, create a frequency distribution of their spawned child processes over a 30-day baseline period. Alert when a non-network-facing application spawns a child process that is statistically rare for it (e.g., a child process it has never spawned before, or one with a frequency of <0.01%), such as `curl`, `nc`, or `python`.",
              "Train a graph-based model (e.g., GraphSAGE) on legitimate process parent-child relationships observed across the enterprise. The model learns embeddings for each process that capture its typical lineage context. Flag the creation of new, previously unseen edges in the process graph, such as an edge from `TextEdit` to `zsh`, as a high-confidence anomaly indicative of hijacking."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]