[
  {
    "information_requirement": "Has an adversary staged tools on external infrastructure for use against our network? (PIR)",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1105",
        "name": "Ingress Tool Transfer",
        "evidence": [
          {
            "description": "A file is downloaded (e.g., EXE, DLL, PS1, ZIP, MSI) where the source IP address or domain in the HTTP request or DNS query matches a known malicious indicator from a Cyber Threat Intelligence (CTI) feed.",
            "data_sources": [
              "Zeek http.log",
              "Zeek file.log",
              "Zeek dns.log",
              "CTI Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways, web proxies, and DNS resolvers.",
            "action": [
              "Correlate the Zeek http.log `host` field and dns.log `query` field against a CTI feed of known malicious domains and IPs. If a match is found, check for a corresponding file transfer in file.log by joining on the connection UID. Generate an alert for any file download from a CTI-flagged source.",
              "For all file downloads, calculate the historical access frequency (prevalence) of the source domain/IP across the enterprise over the last 90 days. Create a risk score by combining the inverse prevalence (rarer is riskier) with the confidence score from a CTI feed. Alert on downloads where the combined score exceeds the 99th percentile.",
              "Deploy a supervised classification model, such as a Random Forest, trained on labeled historical data. Use features from Zeek logs (e.g., http.log.user_agent, file.log.mime_type, file.log.seen_bytes, source ASN, domain age) and a CTI score. Score new downloads in real-time and alert when the model's predicted malicious probability exceeds a defined threshold (e.g., > 0.90)."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688 or Sysmon Event ID 1) is logged for a Living-Off-the-Land Binary (LOLBin) such as certutil.exe, bitsadmin.exe, powershell.exe, curl.exe, or wget.exe, where the command line arguments contain flags and URLs indicating a file download from a remote source.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (Domain Controllers, database servers), user workstations, and application servers.",
            "action": [
              "Scan the ProcessCommandLine field from Windows Event ID 4688 for regular expressions matching known download patterns, such as `certutil -urlcache`, `bitsadmin /transfer`, `powershell IWR`, `curl -o`, and `wget http`. Generate a high-severity alert upon any match.",
              "For each host, baseline the parent-child process relationships for common LOLBins. Calculate the frequency of each observed parent (e.g., winword.exe -> powershell.exe). Additionally, calculate the Shannon entropy of command-line arguments for these LOLBins. Alert when a rare parent-child relationship is observed (e.g., bottom 1st percentile of frequency) OR the command-line entropy exceeds the 98th percentile for that specific process.",
              "Deploy a time-series anomaly detection model (e.g., SARIMA) to monitor the frequency of LOLBin download commands per hour, aggregated across the enterprise. The model will learn the normal daily and weekly seasonality of this activity. Generate an alert when the observed count of download commands significantly exceeds the forecasted range."
            ]
          },
          {
            "description": "A file is transferred over HTTP where its inferred type, based on magic bytes analysis (e.g., Zeek's file.log.mime_type), is inconsistent with the file extension in the URI (http.log.uri) or the server-provided Content-Type header (http.log.resp_mime_types). For example, a file identified as 'application/x-dosexec' is downloaded from a URI ending in '.jpg'.",
            "data_sources": [
              "Zeek file.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways and network sensor tap points where traffic is mirrored.",
            "action": [
              "Create a detection rule that joins `file.log` and `http.log` on the connection UID. Trigger an alert when `file.log.is_exe` is true OR `file.log.mime_type` is 'application/x-dosexec', but the `http.log.uri` ends with a non-executable extension (e.g., .jpg, .png, .gif, .txt, .css).",
              "Maintain a frequency table of all observed triplets: (URI file extension, `http.log.resp_mime_types`, `file.log.mime_type`). After excluding a pre-defined allowlist of known-good mismatches, alert on any triplet that falls into the bottom 0.1% of historical occurrences, especially when `file.log.mime_type` indicates an executable or script.",
              "Implement an unsupervised Isolation Forest model to detect anomalous file transfers. Use features such as the categorical codes for URI extension, HTTP response MIME type, and inferred file MIME type, along with numerical features like file size and connection duration. The model will identify unusual combinations that deviate from normal traffic patterns as outliers, indicating potential file masquerading."
            ]
          },
          {
            "description": "A sequence of events occurs: 1) A DNS query is made for a domain registered within the last 60 days (Newly Registered Domain). 2) A TCP connection is established from the querying host to the resolved IP. 3) An executable file (PE, ELF, Mach-O) or script (PS1, VBS, Python) is downloaded over that connection.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek file.log",
              "WHOIS Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, DNS forwarders, and internet gateways.",
            "action": [
              "For every DNS query in `dns.log`, enrich with domain registration date via a WHOIS lookup. If the domain age is less than 60 days, monitor the source host's connections. If the host connects to the resolved IP (join `dns.log.answers` with `conn.log.id.resp_h`) and downloads a file (`conn.log.uid` links to `file.log.conn_uids`) where `file.log.is_exe` is true, trigger a high-severity alert.",
              "Develop a domain risk score based on domain age (inverse relationship), DNS query entropy (high entropy subdomains are risky), TTL value (very low TTLs can be risky), and historical prevalence within the organization. Alert when a file download is observed from a domain whose risk score is in the 99th percentile of all externally queried domains.",
              "Construct a communication graph where nodes are internal hosts, domains, and external IPs. Use a graph neural network (GNN) or community detection algorithm to identify groups of internal hosts that suddenly begin communicating with a cluster of related Newly Registered Domains. A subsequent download of files with similar characteristics (e.g., size, type) across this group indicates a coordinated campaign."
            ]
          },
          {
            "description": "A file is downloaded from a legitimate code or file hosting service (e.g., GitHub, GitLab, Pastebin, Discord CDN, MEGA) where the activity is anomalous for the source host or the organization. Anomalies include downloads by non-technical users or servers, unusual User-Agent strings, or file types inconsistent with the host's role.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek file.log",
              "Active Directory"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways, developer workstations, and servers or endpoints that are expected to interact with code repositories or file sharing services.",
            "action": [
              "Define a watchlist of hosts that should never download files from code repositories (e.g., Domain Controllers, HR department workstations). Create a rule to alert on any file download from domains like `raw.githubusercontent.com`, `gitlab.com/-/raw/`, `pastebin.com/raw/`, or `cdn.discordapp.com` originating from an IP address on this watchlist.",
              "For each host, establish a 30-day rolling baseline profile of activity towards file-sharing sites, including distributions of file MIME types, file sizes, and User-Agent strings. Use the Interquartile Range (IQR) method to detect outliers. Alert if a host downloads a file where the size is an outlier (e.g., > Q3 + 1.5*IQR) or the MIME type has not been seen from that host before.",
              "Deploy a one-class SVM or other anomaly detection model per user or user group (e.g., 'Developers', 'Sales' from Active Directory). Train the model on features of their normal download activity from these platforms (e.g., `http.log.user_agent`, `file.log.mime_type`, hour of day, day of week, domain). Flag any download activity that the model classifies as an anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]