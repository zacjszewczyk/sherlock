[
  {
    "information_requirement": "Is the adversary attempting to gain credential access using Adversary-in-the-Middle techniques?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1557",
        "name": "Adversary-in-the-Middle",
        "evidence": [
          {
            "description": "An SSL/TLS certificate is observed with a fingerprint (SHA1) matching a known-malicious list, or an issuer/subject combination associated with AiTM phishing kits, when clients access sensitive services.",
            "data_sources": [
              "Zeek x509.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Servers hosting SSO/VPN/email, Web Proxies",
            "action": "1. (Symbolic) Query Zeek x509.log for certificate SHA1 hashes and compare them against a threat intelligence feed of known malicious certificates associated with AiTM. Generate a high-severity alert on any match. 2. (Statistical) For each external service (identified by SNI in Zeek ssl.log), track the historical set of observed certificate issuers. Calculate the rarity of a new issuer for a given service. Alert if a rarely-seen issuer (e.g., seen in <0.1% of historical connections for that service) suddenly appears, especially for high-value services like SSO portals. 3. (Machine Learning) Train a classification model (e.g., a decision tree) on certificate features (validity period, issuer, subject, key algorithm, self-signed status) from both legitimate and known-malicious certificates. Score all new certificates observed in x509.log in real-time and flag those classified as malicious with a high confidence score."
          },
          {
            "description": "A single MAC address is observed claiming multiple IP addresses within a short time frame, or a known gateway IP address is associated with a new, unauthorized MAC address. Additionally, specific AiTM tools are executed on an endpoint.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core Network Switches, Client Workstation Segments, Domain Controllers, Wireless Access Points",
            "action": "1. (Symbolic) Monitor Zeek notice.log for specific notices such as `ARP_Spoofing` or `DNS_Spoofing_Attack`. On endpoints, create a rule to detect the execution of known AiTM tools (e.g., `responder.py`, `ettercap`, `bettercap.exe`) by matching process names or command-line arguments in Windows Event ID 4688. 2. (Statistical) From Zeek conn.log data or ARP monitoring, count the number of unique IP addresses associated with a single MAC address in a 5-minute window. Alert if this count exceeds a defined threshold (e.g., >5 IPs). Also, baseline the MAC address for the default gateway; alert on any change. 3. (Machine Learning) Use a time-series anomaly detection model (e.g., SARIMA) to monitor the volume of LLMNR and NBT-NS responses originating from a single non-authoritative host. A sudden, sharp spike indicates potential poisoning activity from a tool like Responder."
          },
          {
            "description": "A measurable increase in the proportion of network sessions to sensitive services using deprecated protocols (e.g., TLS 1.0, 1.1) or weak cipher suites, indicating a potential downgrade attack.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internal Application Servers, Web Proxies",
            "action": "1. (Symbolic) Create a high-priority alert in the SIEM for any connection observed in Zeek ssl.log where the `version` field is 'TLSv1' or 'TLSv1.1' or where the `cipher` field matches a list of known weak/export-grade ciphers when connecting to critical internal or external services. 2. (Statistical) For each critical service (by SNI), establish a baseline of accepted TLS versions and ciphers. Calculate a moving average of weak-session-protocol percentage. Alert if the current percentage exceeds the 95th percentile of its historical values. 3. (Machine Learning) Train a logistic regression model to predict the probability of a session being illegitimately downgraded. Features could include client OS (from User-Agent in http.log), destination service, and time of day. Flag sessions with a high probability score for analyst review."
          },
          {
            "description": "Multiple client devices are observed resolving a high-value external domain (e.g., sso.example.com, login.microsoftonline.com) to the same, unexpected internal or non-corporate IP address.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS Resolvers, Client Workstation Segments, Network Egress Points",
            "action": "1. (Symbolic) Maintain a list of critical external domains and their legitimate IP ranges. Query Zeek dns.log for responses to queries for these domains. Alert immediately if a resolved IP falls within an internal RFC1918 range (and is not a designated proxy) or an external IP not in the legitimate range. 2. (Statistical) For each queried domain, calculate the Shannon entropy of the set of resolved IP addresses over a 1-hour window. A sudden drop in entropy for a high-value domain (indicating many clients are suddenly resolving it to a single, new IP) suggests poisoning. Alert if entropy drops below a learned threshold. 3. (Machine Learning) Use a clustering algorithm like DBSCAN on the feature space of (client IP, queried domain, resolved IP). An anomalous cluster will form when a group of clients begins resolving a common domain to a new, shared, non-legitimate IP address. Flag these clusters for investigation."
          },
          {
            "description": "A user account is observed submitting POST requests, potentially containing credentials, to a suspicious domain (e.g., typosquatted, recently registered) shortly after other AiTM indicators for that user's host have been triggered.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Web Proxies, Client Workstation Segments",
            "action": "1. (Symbolic) Correlate AiTM alerts (e.g., DNS poisoning, malicious cert) with subsequent HTTP POST requests from the affected client IP in Zeek http.log. Match the destination host against a threat intelligence feed of known phishing and typosquatted domains. Alert on a match. 2. (Statistical) For each user, baseline the domains to which they submit POST requests. Enrich destination domains with registration date (via WHOIS lookup). Alert if a user posts to a domain registered within the last 30 days, especially if it's a domain they've never visited before (first-seen). 3. (Machine Learning) Use a trained classifier to score HTTP POST requests for credential submission likelihood based on URI path patterns (`/login`, `/auth`, `/signin`), presence of form fields like `password`, and destination domain features (age, TLD, reputation). Flag high-likelihood submissions to low-reputation or newly observed domains, especially if correlated with prior AiTM indicators."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary collecting sensitive data by intercepting or manipulating network traffic via Adversary-in-the-Middle?",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1557",
        "name": "Adversary-in-the-Middle",
        "evidence": [
          {
            "description": "Network traffic to or from a suspected AiTM node contains sensitive data patterns (e.g., PII, financial data) in unencrypted form, or sensitive files are transferred to an unauthorized location.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core Network Switches, File Servers, Database Servers, Client Workstation Segments",
            "action": "1. (Symbolic) Once an AiTM node is suspected, use an IDS/DLP tool to inspect traffic flowing to/from it. Alert on traffic containing regex matches for sensitive data patterns (e.g., social security numbers, credit card numbers) or specific internal project codenames. 2. (Statistical) Monitor Zeek files.log for file transfers involving the suspected AiTM node. Baseline the typical file types and sizes for network flows. Alert if sensitive file types (e.g., `.pst`, `.kdbx`, `.sql`) or unusually large archives (`.zip`, `.7z`) are transferred, especially over non-standard ports. 3. (Machine Learning) Use a time-series model to monitor the byte count (in `orig_bytes` and `resp_bytes` from Zeek conn.log) of flows involving the suspected AiTM node. An anomalous spike in outbound data volume, especially during non-business hours, can indicate bulk data collection."
          },
          {
            "description": "HTTP response bodies are modified to inject malicious content (e.g., JavaScript, iframes), or downloaded files are altered in transit, as identified by hash mismatches.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Web Proxies, Client Workstation Segments",
            "action": "1. (Symbolic) Create signatures to detect the injection of known malicious JavaScript functions, script sources, or iframe structures in HTTP response bodies observed in Zeek http.log. 2. (Statistical) For files downloaded from trusted software repositories, automatically compare the file hash from Zeek files.log (`sha1`) against the official vendor-provided hash. Track the network-wide rate of hash mismatches for known files; alert if this rate exceeds a statistically significant threshold (e.g., >1%). 3. (Machine Learning) Train an autoencoder on the structural features of legitimate HTTP response bodies for critical internal web applications. A high reconstruction error on a live response suggests an anomalous modification, such as an injected script, indicating potential data manipulation."
          },
          {
            "description": "Internal network traffic from multiple hosts is unexpectedly routed through a single, non-gateway endpoint, which acts as a new communication choke point.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core Network Switches, Internal Network Segments, Datacenter Network Fabric",
            "action": "1. (Symbolic) Maintain an explicit allow-list of authorized network gateways, routers, and proxies. Generate a high-severity alert for any internal host that is not on this list but is observed routing traffic between two other internal hosts. 2. (Statistical) For each internal host, establish a baseline of its communication patterns (e.g., number of unique peers, ratio of inbound-to-outbound connections). Use percentile-based outlier detection to identify a host that suddenly communicates with an anomalously high number of internal peers, deviating from its role-based baseline (e.g., a workstation acting like a server). 3. (Machine Learning) Model internal network flows from Zeek conn.log as a directed graph. Use a graph algorithm to periodically calculate the 'betweenness centrality' for each node (host). An endpoint whose centrality score suddenly and significantly increases, placing it on the critical path between many other nodes, is a strong candidate for an AiTM node."
          },
          {
            "description": "A sudden, widespread increase in SSL/TLS certificate validation errors (e.g., 'self-signed', 'hostname mismatch') is observed across a group of clients, particularly when accessing a common service.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Client Workstation Segments, Authentication Servers",
            "action": "1. (Symbolic) Create a rule to alert on any connection where the `validation_status` in Zeek ssl.log is 'self_signed_certificate_in_chain' or 'host_name_mismatch' when the `server_name` (SNI) is a known-critical internal or external service. 2. (Statistical) Monitor the rate of all certificate validation errors per network segment over time. Alert if the error rate for a specific segment exceeds a dynamic threshold, such as the 99th percentile of its 30-day historical data. 3. (Machine Learning) Use time-series forecasting (e.g., ARIMA) on the total volume of certificate validation errors network-wide. An observed error count that significantly exceeds the forecasted value and its confidence interval indicates a network-wide anomaly potentially caused by a widespread AiTM attack."
          },
          {
            "description": "An internal host, not authorized as a network proxy or gateway, is observed acting as a central data aggregator, receiving connections from many hosts and sending aggregated data to another location.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core Network Switches, Datacenter Network Fabric, Client Workstation Segments",
            "action": "1. (Symbolic) Create a behavioral rule that flags any single client endpoint that receives connections from more than 'N' unique internal hosts (e.g., N=20) within a 10-minute window, as this behavior is indicative of a collection point. 2. (Statistical) For each internal host, calculate the ratio of total bytes received from internal peers to total bytes sent to a single, different peer. A host with a high ratio (many-to-one traffic pattern) that is not a designated log collector or server is a statistical outlier and a potential intermediary collection point. 3. (Machine Learning) Use a graph-based community detection algorithm (e.g., Louvain) on the network communication graph. A host acting as a collection point will often form a 'star' topology, connecting disparate communities or having an anomalously high 'degree centrality' (number of connections) compared to other hosts of its type (e.g., other workstations)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]