[
  {
    "information_requirement": "Has an adversary modified cloud compute configurations to evade defenses or enable resource hijacking?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1578.005",
        "name": "Modify Cloud Compute Configurations",
        "evidence": [
          {
            "description": "A cloud CLI process ('az.exe', 'aws.exe', 'gcloud.exe') or an associated script is executed from a non-standard parent process (e.g., an Office application) or its process hash matches a known malicious hash, and the process generates network traffic to an IP address or domain on a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Administrator workstations, DevOps jump boxes, CI/CD pipeline servers, and network egress points.",
            "action": [
              "Symbolic: Query process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for executions of 'az.exe', 'aws.exe', or 'gcloud.exe'. Alert if the parent process is not 'explorer.exe', 'cmd.exe', or 'powershell.exe'. Correlate the process hash against a known malware hash database. Join the process start time and host IP with network logs (Zeek conn.log) and DNS logs (Zeek dns.log) to check if the destination IP or queried domain for connections made within 5 minutes of execution match a high-confidence CTI feed.",
              "Statistical: For each cloud CLI execution, calculate the Shannon entropy of the command-line arguments. Establish a baseline entropy score for legitimate CLI usage by user role. Alert if an execution's entropy score exceeds the 95th percentile for that user's role, suggesting obfuscated or unusually complex commands. Also, monitor the frequency of CLI executions per host; an increase of more than 3 standard deviations above the host's 30-day moving average warrants investigation.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on labeled historical process creation and network logs to distinguish benign from malicious cloud CLI usage. Engineer features including: process name, parent process name, command-line argument length, command-line argument entropy, user context, destination IP/domain reputation from CTI, and connection byte counts. Deploy the model to score new events in real-time and alert on predictions with a high confidence score of being malicious."
            ]
          },
          {
            "description": "A sequence of command-line arguments captured in process creation logs matches the known syntax, module names, or operational flow of offensive security tools like Pacu, PowerZure, or Cloudsplaining.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Administrator workstations, developer endpoints, and servers with cloud SDKs/CLIs installed.",
            "action": [
              "Symbolic: Scan the command-line arguments field in process creation logs (Windows Event ID 4688, Sysmon Event ID 1) against a curated library of regular expressions that match unique commands, flags, and module execution syntax of known offensive cloud tools (e.g., `pacu --import-keys`, `Invoke-PowerZure -Module 'All'`, `cloudsplaining scan-bucket`). Generate a high-severity alert upon any match.",
              "Statistical: For each user, define a session as a series of commands executed within a 30-minute window. Parse CLI commands and calculate the n-gram (n=2, 3) frequency of these command sequences across the organization. Alert when a user executes a command sequence that is in the bottom 1st percentile of frequency (i.e., extremely rare) and involves modification commands ('set', 'modify', 'update', 'put-policy', 'create-instance').",
              "Machine Learning: Use a sequence-based anomaly detection model, such as a Long Short-Term Memory (LSTM) autoencoder, trained on sequences of benign administrative commands. The model learns the 'grammar' of normal administrative workflows. Feed new command sequences from user sessions into the model and alert when the model's reconstruction error for a sequence is high, indicating a significant deviation from learned benign patterns."
            ]
          },
          {
            "description": "A cloud configuration modification API call (e.g., 'ModifyVpcAttribute', 'Set-AzPolicyDefinition', 'Update-ServiceQuota') is logged, originating from a user, role, or source IP address that has a zero or near-zero historical frequency of performing such administrative actions.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services (e.g., AWS CloudTrail S3 bucket, Azure Log Analytics Workspace), Identity and Access Management (IAM) systems, and VPN/remote access logs.",
            "action": [
              "Symbolic: Create and maintain an allow-list of user accounts and service principals authorized to make sensitive cloud configuration changes. Ingest cloud audit logs (CloudTrail, Azure Activity Logs, GCP Audit Logs) and trigger a high-priority alert whenever a modification API call (e.g., AWS `ModifyInstanceAttribute`, Azure `Microsoft.Authorization/policyAssignments/write`, GCP `compute.projects.setCommonInstanceMetadata`) is executed by an identity not on this list.",
              "Statistical: For all identities, build a historical baseline from cloud audit logs of sensitive API calls made. Alert when a 'first-seen' event occurs, such as: 1) A user makes a specific sensitive API call for the first time ever. 2) A sensitive API call is made from a geographic location or ASN not seen for that user in the past 90 days. 3) The hourly count of sensitive API calls from a user exceeds their 99th percentile.",
              "Machine Learning: Develop an unsupervised clustering model (e.g., Isolation Forest or DBSCAN) on cloud audit log data. Features should include a one-hot encoded representation of the API call name, user agent string, source IP details (ASN, geo), time of day, and key-value pairs from API parameters. Identify clusters of 'normal' behavior for different user roles. Alert on any API call that is flagged as an anomaly or outlier by the model, indicating it does not fit any known benign behavior cluster."
            ]
          },
          {
            "description": "A configuration change is logged that enables or modifies policies for a cloud region not on the organization's approved list, immediately followed by resource deployment API calls targeting that unauthorized region.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services, corporate cloud governance documentation, and the corporate Asset Management Database.",
            "action": [
              "Symbolic: Maintain a definitive list of approved/supported cloud regions from governance documentation. Create a SIEM rule to ingest cloud audit logs and trigger a high-severity alert for any API call that enables, modifies, or deploys resources where the 'region' or 'location' parameter in the event data is not on this approved list. Example events: `CreateSubnet` or `RunInstances` with `awsRegion: 'ap-southeast-3'` when it is not an approved region.",
              "Statistical: Profile the historical usage of cloud regions across the organization from the last 365 days of audit logs. Calculate the frequency of resource deployments per region. Alert on any resource deployment in a region with a historical frequency of zero, or any region that has not been used in the past 180 days. This detects both net-new and dormant region abuse.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) or Isolation Forest model on the feature set of benign resource deployments, with features like cloud region (categorical), instance type, user identity, and time of day. The model learns the boundary of 'normal' deployments. Any new deployment that falls outside this boundary, particularly because it uses a region not seen in the training data, would be flagged as a high-confidence anomaly."
            ]
          },
          {
            "description": "A cloud configuration change, such as increasing a service quota for compute instances, is immediately followed by a burst of resource provisioning API calls and a corresponding spike in network traffic volume indicative of resource hijacking.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "VPC Flow Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services, network flow log sources, network egress points, and cloud billing/cost management dashboards.",
            "action": [
              "Symbolic: Create a correlated rule that triggers an alert on the following sequence: 1) A cloud audit log event for a service quota increase (e.g., AWS `RequestServiceQuotaIncrease`, Azure `Microsoft.Capacity/resourceproviders/locations/serviceLimits/write`, GCP `compute.projects.setUsageExportBucket`). 2) Within 1 hour, more than 20 resource creation calls (e.g., `RunInstances`, `Create VirtualMachine`) from the same identity. 3) Within the next hour, network flow logs show an aggregated egress of >1GB from the newly created resources to a single destination IP.",
              "Statistical: For each cloud account, establish a 30-day rolling baseline of the hourly rate of resource creation API calls. Monitor for cloud audit log events related to quota increases. Following such an event, if the rate of resource creation calls in the subsequent 24 hours exceeds the baseline by more than 3 standard deviations, generate an alert. Enrich the alert with time-of-day context, flagging activity outside of standard business hours with higher severity.",
              "Machine Learning: Use a time-series model with changepoint detection capabilities (e.g., Prophet) to forecast the expected volume of resource provisioning API calls and network data transfer for each account. Feed real-time data from cloud audit and network logs into the model. Alert when the model detects a significant changepoint (a structural break from the forecast) that occurs immediately after a configuration change event like a quota increase, as this indicates a state change from normal to abusive behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]