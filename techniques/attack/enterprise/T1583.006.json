[
  {
    "information_requirement": "Is the adversary developing or leveraging resources using external web services for malicious purposes?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1583.006",
        "name": "Web Services",
        "evidence": [
          {
            "description": "An internal host initiates a network connection to a URL, domain, or IP address hosted on a legitimate web service (e.g., GitHub, Pastebin) that is present on a threat intelligence feed of known malicious indicators.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies)",
            "action": [
              "Symbolic: Continuously correlate outbound network logs (Zeek dns.log for domains, http.log for URLs, conn.log for IPs) against a threat intelligence feed of known malicious indicators associated with web services. Trigger a high-severity alert on any match for immediate investigation.",
              "Statistical: For all connections to common web services, calculate the Shannon entropy of the URI path and query parameters in Zeek http.log. Establish a baseline entropy distribution for benign traffic. Flag connections with entropy scores exceeding the 99th percentile, as this may indicate algorithmically generated or randomized C2 URIs.",
              "Machine Learning: Train a time-series anomaly detection model (e.g., ARIMA, LSTM) on the volume of traffic (bytes and connection counts from Zeek conn.log) to domains associated with popular web services. Alert on significant deviations from the forecasted volume, which could indicate the activation of a C2 channel or a large-scale staging operation."
            ]
          },
          {
            "description": "An outbound HTTP/S request is made to a URL on a legitimate web service that structurally matches a known pattern for malware staging, tool retrieval, or command and control.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies)",
            "action": [
              "Symbolic: Scan Zeek http.log URIs using regular expressions for patterns associated with malware staging (e.g., /raw/, /download/, api.github.com/repos/.*/releases) on services like GitHub, Pastebin, and Discord. Match JA3 or JA3S hashes from Zeek ssl.log against a list of known malicious C2 client/server fingerprints.",
              "Statistical: For requests to code/file hosting sites, analyze the file types identified in Zeek files.log (e.g., 'application/x-dosexec', 'application/x-powershell'). Establish a baseline of downloaded file types per user role. Flag any user downloading a file type inconsistent with their role (e.g., an HR user downloading a PowerShell script from GitHub), especially if the file's 'seen_bytes' size is small, suggesting a stager.",
              "Machine Learning: Use a trained classification model (e.g., Random Forest) on features extracted from Zeek http.log and ssl.log (e.g., URI length, number of query parameters, user-agent string rarity, JA3 hash) to classify each connection to a web service as 'benign' or 'suspicious C2-like'. Alert on connections classified as suspicious with high confidence."
            ]
          },
          {
            "description": "A user's browsing activity includes an anomalously high frequency of visits to pages on web services associated with account creation, API key management, or new repository setup, inconsistent with their job role.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal Network Segments (User Workstations)",
            "action": [
              "Symbolic: Create a watchlist of URI paths and keywords related to resource creation (e.g., '/signup', '/join', '/new', 'settings/tokens', 'generate_key'). Alert whenever a user accesses a high number of these pages from different services within a short time window (e.g., >3 services in 1 hour).",
              "Statistical: For each user, establish a baseline count of monthly visits to resource-creation-related pages. Use a Z-score to detect outliers, flagging any user whose activity for the current month exceeds 3 standard deviations from their historical norm. This can indicate a compromised account being used for resource setup.",
              "Machine Learning: Employ a peer group analysis model. Cluster users based on their web browsing habits (domains visited, types of pages). Identify users whose activity profile deviates significantly from their assigned cluster, particularly with a sudden spike in visits to development or infrastructure-related web services."
            ]
          },
          {
            "description": "An internal host uploads or downloads data to/from a legitimate web service where the transfer size, frequency, or data entropy is statistically anomalous compared to a historical baseline for that host or its peer group.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies)",
            "action": [
              "Symbolic: Define a static threshold rule that alerts on any single upload to a file-sharing or code-hosting service that exceeds a high-water mark (e.g., 100MB), especially if the destination is not an approved corporate account or repository.",
              "Statistical: For each host-service pair (e.g., host A to github.com), create a baseline of upload/download sizes using 'resp_body_len' from Zeek http.log. Alert when a transfer size exceeds the 95th percentile of the historical distribution for that pair. Additionally, calculate the entropy of file contents from Zeek files.log; a consistently high entropy may indicate encrypted/packed data staging.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on connection features from Zeek conn.log (total bytes, duration, protocol) for traffic to web services. Identify and alert on clusters that represent anomalous behavior, such as 'short duration, high byte count' connections which may represent rapid tool staging."
            ]
          },
          {
            "description": "An internal host connects to a resource (e.g., a specific GitHub repository, Pastebin URL) on a legitimate web service that has never been accessed before by anyone in the organization, and is accessed by a very small number of internal hosts.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DNS Resolvers",
            "action": [
              "Symbolic: Maintain a state table of all fully-qualified domain names (FQDNs) and URLs from Zeek dns.log and http.log that have been previously accessed. Generate an alert when a request is made to a FQDN/URL on a high-risk service (e.g., *.github.io, *.pastebin.com) that is not in the historical table.",
              "Statistical: For each newly observed FQDN/URL, count the number of distinct internal hosts that access it within the first 24 hours. Calculate a prevalence score (1 / number of unique hosts). Flag resources with a very low access count (e.g., 1-2 hosts), as this is a common pattern for targeted C2 infrastructure testing.",
              "Machine Learning: Implement a 'First Seen' anomaly detection model. For each parent domain (e.g., github.io), model the rate of new subdomain/URL discovery over time. Use a time-series forecasting model to predict the expected number of new resources. An alert is triggered if the actual number of newly seen resources in a given time window significantly exceeds the forecast."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]