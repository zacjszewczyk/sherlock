[
  {
    "information_requirement": "Is the adversary collecting and staging data on local systems prior to exfiltration? (PIR)",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1074.001",
        "name": "Local Data Staging",
        "evidence": [
          {
            "description": "A process hash matching a known staging tool (e.g., 7z.exe, rar.exe) is observed executing, or an archive file is created in a common staging directory with a filename or hash matching a known indicator of compromise (IOC).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, application servers, and domain controllers, focusing on common staging directories (e.g., C:\\Windows\\Temp, C:\\Perflogs, C:\\Users\\Public, %APPDATA%\\Temp, and user Recycle Bins).",
            "action": [
              "Implement a SIEM rule that continuously compares process hashes from process creation events (Windows Event ID 4688) and file hashes from file creation events (Windows Event ID 4663) against a threat intelligence watchlist of known malicious staging tools and archive file IOCs. Trigger an alert upon a match, especially for files created in common staging directories.",
              "For each host, profile the size of created archive files (.zip, .rar, .7z). Establish a baseline for the 95th percentile of archive file sizes created per day. Generate an alert if a newly created archive's size exceeds this host-specific threshold. Enrich the alert by correlating the file creation event (EID 4663) with the parent process (EID 4688) to flag archives created by non-standard processes (e.g., svchost.exe, powershell.exe).",
              "Develop and deploy a Random Forest or Gradient Boosting classification model trained on features from process creation events (Windows EID 4688). Use features such as parent process name, user context, command-line length, and argument patterns. Use the model to score the probability that a process is a malicious staging tool, even if its hash is unknown. Flag processes with a probability score above a determined threshold (e.g., 0.90) for immediate analyst review."
            ]
          },
          {
            "description": "Command-line arguments (cmd.exe) or PowerShell script block content is observed containing syntax patterns for recursively finding, copying, and archiving files (e.g., using 'for /R', 'robocopy', 'Get-ChildItem | Compress-Archive') into a single location, especially when targeting sensitive user or system directories.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Command-line and PowerShell execution logs from all endpoints and servers, with heightened monitoring on systems hosting sensitive data (e.g., file servers, developer workstations) or belonging to privileged users.",
            "action": [
              "Deploy SIEM rules with regular expressions to search process command lines (Windows Event ID 4688) and PowerShell script blocks (Windows Event ID 4104). The regex should detect the co-occurrence of file discovery commands (e.g., 'dir /s', 'Get-ChildItem -Recurse'), copying commands ('copy', 'robocopy'), and archiving tools ('7z.exe', 'rar.exe', 'tar.exe', 'Compress-Archive'), especially when targeting multiple sensitive directories or using password protection flags (e.g., '-p', '-hp').",
              "For PowerShell script block logs (EID 4104), calculate the Shannon entropy of the script content. Establish a per-host or per-user baseline entropy score for legitimate administrative scripts. Trigger an alert when a script's entropy significantly deviates from the baseline (e.g., exceeds 3 standard deviations from the mean) and also contains archiving cmdlets like 'Compress-Archive'. High entropy can indicate obfuscation or encoding.",
              "Implement a pre-trained or fine-tuned Natural Language Processing (NLP) model (e.g., a BERT-based classifier) to analyze and classify command-line strings (EID 4688) and PowerShell scripts (EID 4104) as either benign administrative activity or malicious staging. Train the model on a labeled dataset of known adversary TTPs and legitimate scripts to learn semantic patterns indicative of staging that go beyond simple keyword matching."
            ]
          },
          {
            "description": "A single process is observed reading an anomalously high number of unique files from diverse directory paths within a short time frame, followed by a single large file write operation, consistent with collecting and archiving data.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs (Object Access) on high-value assets such as file servers, database servers, and endpoints of privileged users. Focus monitoring on directories containing intellectual property, PII, financial data, user profiles, and system configuration files.",
            "action": [
              "Create a stateful correlation rule that triggers when a single Process ID (from EID 4688) generates a high volume of file read events (EID 4663) from more than 10 unique directory paths within a 5-minute window. The rule should only alert if this activity is immediately followed by a file write event for a common archive file type (.zip, .rar, .7z) in a known staging location (e.g., C:\\Windows\\Temp).",
              "For each running process, calculate the Shannon entropy of the directory paths it reads from (using EID 4663) over a 10-minute sliding window. Establish a baseline path entropy for common processes (explorer.exe, powershell.exe, cmd.exe). Alert when the path entropy for a process exceeds the 99th percentile of its historical baseline, as a sudden increase indicates the process is accessing files in an unusually diverse set of locations.",
              "Deploy a time-series anomaly detection model, such as an LSTM autoencoder, to monitor the count of file I/O operations (reads and writes) per process per host. Train the model on baseline activity to learn normal operational patterns. An anomaly flagged by the model, characterized by a large spike in file read events followed by a large, single file write event, should be escalated as a potential staging event."
            ]
          },
          {
            "description": "A single host exhibits a burst of network file access activity (e.g., SMB reads) from numerous distinct network shares, which is temporally correlated with the creation of a large, local archive file on that same host.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek smb_files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic logs (Zeek) at key network chokepoints (e.g., data center ingress/egress, core switches) and local file system logs (Windows Event Log) on endpoints and file servers that access network shares.",
            "action": [
              "Create a cross-source SIEM rule that alerts when a single source host IP (from Zeek logs) is observed reading files from more than 5 distinct network shares (server IPs and share paths from Zeek smb_files.log) within a 15-minute window. This alert should only trigger if the network activity is followed within the same window by the creation of a local archive file larger than 100MB on that same host (identified by correlating the IP to a hostname and checking Windows Event ID 4663).",
              "For each host, use Zeek conn.log and smb_files.log to establish a baseline of daily SMB read bytes and the number of unique shares accessed. Create an alert that triggers when a host's total SMB read volume in a single hour exceeds its historical 95th percentile, and the number of unique shares accessed in that same hour exceeds its historical mean by more than 3 standard deviations.",
              "Use a graph-based anomaly detection algorithm on network connection data. Model hosts and file shares as nodes and SMB read operations as weighted, directed edges. Identify anomalous activity by detecting a sudden increase in the 'fan-in' of edges to a single host node from multiple share nodes in a short time period. Correlate the timestamp of this graph-based anomaly with local file creation events (EID 4663) on the anomalous host to confirm staging activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]