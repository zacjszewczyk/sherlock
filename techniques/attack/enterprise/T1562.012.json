[
  {
    "information_requirement": "Has the adversary attempted to disable or modify the Linux audit system?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.012",
        "name": "Disable or Modify Linux Audit System",
        "evidence": [
          {
            "description": "A file is transferred over the network to a Linux host, and its MD5, SHA1, or SHA256 hash matches an entry on a threat intelligence feed for tools known to manipulate the Linux audit system.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DMZ, connections between workstations and the Linux server environment.",
            "action": [
              "Symbolic Logic: From Zeek files.log, extract the MD5/SHA1 hash of any file transferred to a Linux server subnet. Compare each hash against a threat intelligence database of known malicious hashes associated with auditd tampering tools. Enrich the findings with source IP reputation data. Trigger an alert upon a match, correlating with the session details from Zeek conn.log using the connection UID (unique ID).",
              "Statistical Analysis: For executable files or scripts (e.g., MIME types 'application/x-executable', 'text/x-shellscript') transferred to Linux servers, calculate the Shannon entropy of the file content. Establish a baseline entropy for legitimate scripts and binaries by asset type. Flag files with entropy scores in the top 98th percentile, as high entropy can indicate packing or encryption used to hide malicious code.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) to predict malicious file transfers. Train the model using features from Zeek files.log and conn.log, such as file MIME type, size, entropy, source/destination IP reputation, connection duration, protocol, and port. Deploy the model to score new file transfers in real-time, alerting on those classified as high-probability malicious."
            ]
          },
          {
            "description": "A process creation event on a Windows host shows a remote shell client (e.g., ssh.exe, plink.exe, wsl.exe, pwsh.exe) executing a command containing keywords or patterns associated with disabling or modifying the Linux `auditd` service on a remote host.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows management workstations, Jump servers, Domain Controllers, and other systems with remote access tools.",
            "action": [
              "Symbolic Logic: Monitor Windows Event ID 4688 for new processes. Using regular expressions, search the 'CommandLine' field for remote access clients (e.g., ssh.exe, plink.exe, wsl.exe, pwsh.exe) executing commands that contain strings such as 'systemctl stop auditd', 'systemctl disable auditd', 'service auditd stop', 'killall -9 auditd', 'auditctl -e 0', or 'auditctl -D'. Generate a high-severity alert on any match.",
              "Statistical Analysis: For each user, build a historical baseline of commands executed via remote shell clients. Calculate a rarity score for each new command based on its historical frequency of use by that user and across the organization. Flag commands that fall into the 99th percentile of rarity, especially those involving system services or configuration, for analyst review. Correlate with recent authentication events to identify session hijacking.",
              "Machine Learning: Implement a sequence analysis model (e.g., an LSTM) to analyze the sequence of commands within a single remote session, reconstructed from parent-child process relationships and timestamps. Train the model on known benign administrative sessions. The model should flag sessions containing anomalous sequences, such as privilege escalation immediately followed by disabling a security service (e.g., 'sudo -i' -> 'service auditd stop'), which deviate from normal administrative patterns."
            ]
          },
          {
            "description": "A remote login session to a critical Linux server is immediately followed by a complete and anomalous cessation of expected network logging traffic (e.g., syslog) from that server to a central collector.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Syslog/SIEM collectors, Network core switches monitoring traffic from critical Linux servers, Authentication servers.",
            "action": [
              "Symbolic Logic: Create a rule that triggers if a new SSH connection to a critical server is observed in Zeek ssh.log, and within the next 5 minutes, no syslog traffic (e.g., UDP/514, TCP/6514) is seen from that server's IP in Zeek conn.log for a continuous 2-minute period. Correlate the SSH session details (source IP, user) with the log stoppage event.",
              "Statistical Analysis: For each critical Linux server, establish a baseline of logging volume (bytes per minute) to the SIEM/syslog collectors using a 30-day rolling window of Zeek conn.log data. Monitor for deviations. Trigger an alert if the logging volume drops by more than 3 standard deviations below the mean for a sustained period (e.g., 5 minutes), and enrich the alert with any recent remote login activity to that server.",
              "Machine Learning: Deploy a time-series forecasting model (e.g., ARIMA or Prophet) for each critical server's log stream. The model will predict the expected log volume for the next 5-minute interval based on historical patterns (e.g., time of day, day of week). Generate an alert if the actual observed log volume falls significantly below the model's predicted lower confidence bound, indicating an unforeseen outage potentially caused by tampering."
            ]
          },
          {
            "description": "A file transfer operation, observed over the network, writes to or modifies a critical Linux audit configuration file, such as `/etc/audit/audit.rules`, `/etc/audit/auditd.conf`, or files within `/etc/audit/rules.d/`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek smb_files.log",
              "Zeek ftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows management workstations, File servers used for staging, Critical Linux servers hosting audit configurations.",
            "action": [
              "Symbolic Logic: Monitor network file transfer logs (Zeek smb_files.log, ftp.log) and process command-line logs (Windows Event ID 4688 for scp/pscp) for write operations involving the exact filenames 'audit.rules', 'auditd.conf', or any file path ending in '/etc/audit/rules.d/'. Any unauthorized write or modification to these files should trigger a high-priority alert.",
              "Statistical Analysis: Maintain a baseline of which users and automated accounts are authorized to modify audit configuration files. Profile the typical source hosts, time of day, and frequency for these modifications. Alert on any modification that deviates significantly from this baseline, such as a modification by a non-administrator account, from an unusual IP address, or outside of a designated change management window.",
              "Machine Learning: Train a classification model to distinguish between legitimate and suspicious configuration file modifications. Use features such as the user's role, source/destination of the change, time of day, relation to a change management ticket (if available via API), and the size/nature of the change. The model will score each modification, flagging high-risk changes that are characteristic of adversarial tampering for immediate investigation."
            ]
          },
          {
            "description": "A command is executed on a Linux host to stop, disable, kill, or reconfigure the auditd service, or to delete its rules, as observed through command line logging.",
            "data_sources": [
              "Zeek command.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web servers, database servers, authentication servers), Linux administrator workstations.",
            "action": [
              "Symbolic Logic: Monitor Zeek command.log data for execution of commands matching regular expressions for auditd tampering, such as `/(systemctl|service)\\s+(stop|disable)\\s+auditd/`, `/kill(all)?\\s+(-9\\s+)?auditd/`, `/auditctl\\s+(-e\\s+0|-D)/`, or `/rm\\s+(-f\\s+)?\\/etc\\/audit\\/rules\\.d\\/.*/`. Trigger a high-severity alert on match.",
              "Statistical Analysis: For each Linux host, establish a baseline of administrative commands (e.g., those run with `sudo` or by the root user). Calculate the historical frequency of commands that manage services or modify configurations. Alert on the execution of an auditd-related management command that is rare for that host or for the environment (e.g., falls in the 99th percentile of rarity), especially if executed outside of a planned maintenance window.",
              "Machine Learning: Use a natural language processing (NLP) or sequence model to analyze shell command history streams from Zeek command.log. Train the model to identify anomalous sequences of commands that indicate defense evasion. For example, flag a sequence where a user downloads a file with `curl` or `wget`, makes it executable with `chmod`, and then executes a command to disable `auditd`."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]