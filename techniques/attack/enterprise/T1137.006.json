[
  {
    "information_requirement": "Is the adversary maintaining persistence using malicious Office add-ins? (TA0003 - Persistence)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1137.006",
        "name": "Add-ins",
        "evidence": [
          {
            "description": "An Office add-in file (.wll, .xll, .xlam, .ppam) is created, or a registry key/value is set to load an add-in, where the file hash or registry value matches a known indicator of compromise (IOC).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Sysmon Event ID 11",
              "Windows Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoint workstations, Virtual Desktop Infrastructure (VDI) instances, Microsoft Office 365 tenants",
            "action": "1. (Symbolic) Continuously monitor file creation events (Sysmon EID 11) in standard Office add-in directories (e.g., %APPDATA%\\Microsoft\\AddIns, %APPDATA%\\Microsoft\\Word\\STARTUP) and registry value set events (Sysmon EID 13) for known add-in load points (e.g., HKCU\\Software\\Microsoft\\Office\\<version>\\<application>\\Options). Compare file hashes and full registry key/value strings against a threat intelligence feed of known malicious add-in IOCs. Generate a high-severity alert on any match. 2. (Statistical) For all newly created add-in files, calculate the file name entropy. Establish a baseline of typical entropy scores for legitimate add-in names in the environment. Flag files with entropy scores exceeding the 95th percentile as potentially obfuscated. 3. (ML) Train a classification model (e.g., Random Forest) on features of known benign and malicious add-in files (file size, entropy, PE header characteristics, strings). Use this model to score all new add-in files. Files classified as malicious with high confidence (>0.9) should trigger an automated investigation or alert."
          },
          {
            "description": "An Office add-in is loaded from a non-standard file path (e.g., a temporary or downloads folder), or the add-in's binary is unsigned or signed by a publisher not on an established allow-list.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Sysmon Event ID 11",
              "Windows Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoint file systems (especially user profiles, temp directories, and download folders), code signing certificate stores",
            "action": "1. (Symbolic) Maintain an allow-list of trusted digital signature publishers for Office add-ins. For every add-in file loaded (identified via registry monitoring - Sysmon EID 13), verify its signature. Alert on any add-in that is unsigned or signed by a publisher not on the allow-list. 2. (Statistical) Profile the frequency of all file paths from which add-ins are loaded across the enterprise. Use a rarity score (e.g., inverse document frequency) to identify paths that are uncommon across the enterprise. Paths with a rarity score in the top 5% should be flagged for review. 3. (ML) Develop a one-class SVM (Support Vector Machine) or Isolation Forest model trained exclusively on legitimate add-in installation paths. Use this model to detect anomalous paths that deviate significantly from the learned 'normal' distribution, indicating a potential non-standard installation."
          },
          {
            "description": "An Office application (e.g., winword.exe, excel.exe) spawns a child process that is not part of its typical behavior, such as a command shell, scripting interpreter, or a living-off-the-land binary (LoLBin).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on user endpoint workstations and servers running Microsoft Office",
            "action": "1. (Symbolic) Create a rule to detect when an Office parent process (winword.exe, excel.exe, powerpnt.exe, outlook.exe) spawns a direct child process from a blocklist, including cmd.exe, powershell.exe, wscript.exe, cscript.exe, rundll32.exe, or mshta.exe. This should trigger a medium-severity alert. 2. (Statistical) For each parent Office process, build a statistical baseline of its normal child processes and command-line arguments. Calculate the Levenshtein distance between a new command line and the historical baseline for that parent-child pair. Deviations exceeding a set threshold indicate anomalous execution. 3. (ML) Use a sequence analysis model like a Long Short-Term Memory (LSTM) network to model normal process execution chains (parent -> child -> grandchild). Feed real-time process events into the model and flag any sequences with low prediction probability as anomalous."
          },
          {
            "description": "An Office application or its direct child process initiates an outbound network connection to a destination with a low reputation score, an unusual port/protocol combination, or exhibits periodic 'beaconing' behavior.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 1",
              "Windows Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), DNS servers, and process/network logs on endpoints",
            "action": "1. (Symbolic) Correlate process execution events (Sysmon EID 1) with network connection events (Sysmon EID 3, Zeek conn.log). Enrich destination IPs and domains with threat intelligence feeds. Alert if an Office process or its child connects to a known malicious C2 server or a domain registered within the last 30 days (from Zeek dns.log). 2. (Statistical) For each Office application, baseline the distribution of destination ports and data volume transferred (Zeek conn.log's orig_bytes and resp_bytes fields). Use z-scores to detect outliers. Alert if an Office process initiates a connection on a port outside 2 standard deviations of the norm. 3. (ML) Apply a time series analysis algorithm (e.g., Fourier transform) to network connection logs (Zeek conn.log) for each host. Search for periodic, low-volume connections ('heartbeats') characteristic of C2 beaconing originating from Office processes. A strong, regular signal in the time series data should be flagged as potential beaconing."
          },
          {
            "description": "Following the launch of an Office application, file write or registry modification events occur in sensitive system locations or involve executables, which is outside the application's normal operational baseline.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 1",
              "Windows Sysmon Event ID 11",
              "Windows Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint file systems (especially Windows system directories), endpoint registry hives (especially HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run), and application startup folders.",
            "action": "1. (Symbolic) Define a list of critical system directories (e.g., C:\\Windows\\System32) and persistence registry keys (e.g., HKCU\\...\\Run). Create a rule that alerts when any Office process or its child writes a file with an executable extension (.exe, .dll, .bat, .ps1) to a critical location or modifies a critical persistence key. 2. (Statistical) For each Office application, establish a baseline of normal file write and registry modification paths. Calculate the entropy of file and registry key names being written. An entropy score in the 99th percentile, especially when combined with a rare path, suggests obfuscation. 3. (ML) Train a behavioral clustering model (e.g., DBSCAN) on features from file and registry events (path, process name, operation type) that occur within 5 minutes of an Office application launch. Identify clusters of normal behavior. Any activity that does not fall into a known 'good' cluster should be flagged as an anomaly for analyst review."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]