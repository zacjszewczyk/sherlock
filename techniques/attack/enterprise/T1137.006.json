[
  {
    "information_requirement": "Is the adversary maintaining persistence using malicious Office add-ins? (TA0003 - Persistence)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1137.006",
        "name": "Add-ins",
        "evidence": [
          {
            "description": "An Office add-in file with a suspicious extension (e.g., .wll, .xll, .xlam, .ppam) is created on disk, or a registry key is modified to load an add-in, where the file's hash or the registry value matches a known indicator of compromise (IOC).",
            "data_sources": [
              "Windows Sysmon Event ID 11",
              "Windows Sysmon Event ID 13",
              "Windows Event ID 4663",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoint workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers where Office is installed. Specifically, user profile directories (%APPDATA%) and system-wide add-in registry hives (HKLM and HKCU).",
            "action": [
              "Create a detection rule to monitor file creation events (Windows Sysmon Event ID 11) in common Office add-in directories (e.g., %APPDATA%\\Microsoft\\AddIns, %APPDATA%\\Microsoft\\Word\\STARTUP) and registry value set events (Windows Sysmon Event ID 13) for add-in load points (e.g., HKCU\\Software\\Microsoft\\Office\\<version>\\<application>\\Options). Compare the file hash (`Hashes` field) and full registry key/value strings against a threat intelligence feed of known malicious IOCs. Generate a high-severity alert on any match.",
              "For each file creation event (Windows Sysmon Event ID 11) in designated add-in directories, calculate the Shannon entropy of the `TargetFilename`. Establish an enterprise-wide baseline of typical entropy scores for legitimate add-in names. Flag files with entropy scores exceeding the 95th percentile of the baseline as potentially using algorithmically generated or obfuscated names.",
              "Develop and deploy a Random Forest classifier trained on features extracted from add-in files (e.g., file size, entropy, PE header characteristics if applicable, string analysis). Use this model to score all new add-in files captured by file creation events. Files classified as malicious with a confidence score greater than 0.9 should trigger an automated investigation workflow."
            ]
          },
          {
            "description": "An Office add-in DLL or library is loaded from a non-standard file path (e.g., a temporary folder, downloads folder, or network share), or the loaded binary is unsigned or signed by a publisher not on a pre-defined allow-list.",
            "data_sources": [
              "Windows Sysmon Event ID 7",
              "Windows Sysmon Event ID 13",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process and image load logs, focusing on user-writable locations like %TEMP%, %APPDATA%, and Downloads folders. Endpoint code signing certificate validation logs and events.",
            "action": [
              "Implement a detection rule that triggers on an ImageLoad event (Windows Sysmon Event ID 7) where the `ImageLoaded` file is an Office add-in type and the `ProcessName` is an Office application. Alert if the `SignatureStatus` is 'Unsigned' or if the `Signature` field does not match a pre-defined allow-list of trusted publishers.",
              "For all add-in load events (identified via Windows Sysmon Event ID 7), aggregate the file paths of the loaded images. Calculate a rarity score for each path's parent directory (e.g., 1 divided by its frequency across the enterprise). Flag add-ins loaded from directories with a rarity score in the top 5% for manual review.",
              "Deploy an Isolation Forest model trained exclusively on legitimate add-in file paths and parent directories from the past 90 days. Score all new add-in load events in real-time; paths that the model identifies as significant anomalies should generate a medium-severity alert for further analysis."
            ]
          },
          {
            "description": "An Office application (e.g., winword.exe, excel.exe, powerpnt.exe) spawns a child process that is uncharacteristic of normal user activity, such as a command shell, scripting interpreter, or a known Living-Off-the-Land Binary (LOLBin).",
            "data_sources": [
              "Windows Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on all user endpoint workstations and servers running Microsoft Office applications.",
            "action": [
              "Define a list of high-risk child processes (e.g., cmd.exe, powershell.exe, wscript.exe, cscript.exe, rundll32.exe, mshta.exe, certutil.exe). Create a detection rule that triggers when a known Office parent process (winword.exe, excel.exe, powerpnt.exe, outlook.exe) spawns a direct child from this list, based on Windows Sysmon Event ID 1 events.",
              "For each Office parent process, build a baseline of common child processes and their associated command-line arguments. For each new process creation, calculate the Levenshtein distance of its command line against the historical baseline for that specific parent-child pair. A command line with a distance score exceeding a tuned threshold (e.g., greater than 2 standard deviations from the mean distance) indicates a significant deviation and should be flagged.",
              "Implement a sequence-to-sequence autoencoder trained on legitimate process ancestry chains (e.g., explorer.exe -> winword.exe -> svchost.exe). Feed real-time process creation events (Windows Sysmon Event ID 1) into the model. Flag any process chain with a high reconstruction error as an anomalous sequence potentially initiated by a malicious add-in."
            ]
          },
          {
            "description": "An Office application or its direct child process initiates an outbound network connection to a destination with a poor reputation, uses an uncommon port, or exhibits a periodic, 'heartbeat'-like communication pattern.",
            "data_sources": [
              "Windows Sysmon Event ID 3",
              "Windows Sysmon Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), DNS server logs, and endpoint process and network connection logs.",
            "action": [
              "Join process creation events (Windows Sysmon Event ID 1) with network connection events (Windows Sysmon Event ID 3) on `ProcessGuid`. For connections where the initiating process is an Office application or its immediate child, enrich the `DestinationIp` from Zeek conn.log and `QueryName` from Zeek dns.log against threat intelligence feeds. Generate a high-severity alert for any connection to a known malicious C2 or a domain registered within the last 30 days.",
              "Using Zeek conn.log, establish a baseline for each host of connection time deltas between successive connections to the same destination IP. Calculate the standard deviation of these time deltas. A very low standard deviation (e.g., under 1 second for a series of 10+ connections) is characteristic of automated beaconing and should be alerted on.",
              "For each host, create a time series from network connection events (Zeek conn.log) grouped by source IP. Apply a time series anomaly detection model (e.g., Seasonal-Hybrid ESD) to identify regularly spaced, periodic connections indicative of C2 beaconing. A strong, consistent signal with a low data payload (`orig_bytes`) originating from a process tied to an Office application should be flagged as a potential C2 channel."
            ]
          },
          {
            "description": "Following the launch of an Office application, a file write or registry modification event occurs in a known persistence location (e.g., Run keys, Startup folder) which is outside the application's normal operational baseline.",
            "data_sources": [
              "Windows Sysmon Event ID 11",
              "Windows Sysmon Event ID 13",
              "Windows Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint file systems and registry hives, specifically focusing on known persistence locations such as `HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`, `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce`, and user/system Startup folders.",
            "action": [
              "Maintain a watchlist of critical persistence registry keys and file system directories. Create a detection rule that alerts when a process launched by an Office application (identified via parent-child process relationships from Windows Sysmon Event ID 1) performs a write operation (Windows Sysmon Event ID 11 or 13) to one of these monitored locations.",
              "For all file write (EID 11) and registry set (EID 13) events originating from an Office process tree, create a frequency baseline of all target paths. Identify rare paths using an inverse document frequency (IDF) model across the enterprise. A write to a path with a high rarity score (e.g., in the 99th percentile) should trigger a medium-severity alert.",
              "Within a 5-minute window following an Office application launch, collect features from subsequent system events (file writes, registry sets, process creations). Use a DBSCAN clustering algorithm to group these activity sessions. Any session that does not fall into a known 'benign' cluster (i.e., is labeled as noise by DBSCAN) should be flagged as an anomalous sequence of actions requiring analyst investigation."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]