[
  {
    "information_requirement": "Is the adversary establishing persistence using a malicious Port Monitor?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.010",
        "name": "Port Monitors",
        "evidence": [
          {
            "description": "A DLL file is created in C:\\Windows\\System32 or the 'Driver' value of a registry key under HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors is modified to point to a DLL whose file hash or name matches a known malicious indicator.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Windows Print Servers, Windows Domain Controllers",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers when a file creation event (Sysmon Event ID 11) in C:\\Windows\\System32 or a registry value modification (Sysmon Event ID 13) to 'Driver' under HKLM\\...\\Print\\Monitors involves a DLL whose file hash or file name is present in a threat intelligence feed of known malware.",
              "Statistical Analysis: For all DLLs specified in the 'Driver' value of Print Monitor registry keys, calculate the enterprise-wide prevalence (i.e., the percentage of hosts where the DLL is observed). Alert on DLLs with a prevalence below a dynamic threshold (e.g., less than 1% of the fleet), excluding known-good software installer paths.",
              "Machine Learning: Train a classification model (e.g., Random Forest) to predict if a newly registered Port Monitor DLL is malicious. Features can include: DLL file entropy, absence of a valid digital signature, low prevalence across the organization, temporal proximity to other suspicious events, and the parent process name."
            ]
          },
          {
            "description": "A new subkey is created under HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors, and its 'Driver' value points to a DLL file that was created on the system within a short time window (e.g., less than 5 minutes) before the registry modification.",
            "data_sources": [
              "Sysmon Event ID 12",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Windows Print Servers",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a registry key creation event (Sysmon Event ID 12) under HKLM\\...\\Print\\Monitors is followed within 5 minutes by a file creation event (Sysmon Event ID 11) for the DLL specified in the new key's 'Driver' value. This indicates a 'drop and persist' pattern.",
              "Statistical Analysis: Maintain a baseline of all legitimate Port Monitor subkey names (e.g., 'Local Port', 'Standard TCP/IP Port', 'USB Monitor'). Use frequency analysis to alert on the creation of new, rarely seen subkey names under this registry path, especially if the name appears to be randomly generated (high character entropy).",
              "Machine Learning: Use a time-series anomaly detection model on the rate of new Port Monitor subkey creations per host. A sudden spike in creation events on a single host, deviating significantly from its own historical baseline and the fleet's baseline, could indicate malicious activity outside of a standard patching or software installation window."
            ]
          },
          {
            "description": "The Print Spooler service (spoolsv.exe) loads a DLL module from a file path outside of established baselines of legitimate locations such as C:\\Windows\\System32 or C:\\Program Files.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Windows Print Servers",
            "action": [
              "Symbolic Logic: Create a detection rule that alerts when 'spoolsv.exe' loads a DLL (Sysmon Event ID 7) from a user-writable path, such as C:\\Users\\*, C:\\ProgramData\\*, C:\\Windows\\Temp\\*, or any world-writable directory.",
              "Statistical Analysis: For each host, build a statistical baseline of all DLL paths loaded by 'spoolsv.exe' over a 30-day period. Alert when a newly loaded DLL path is a statistical outlier, either by being a new, unseen path for that host or by having a very low prevalence (e.g., bottom 1st percentile) across the entire enterprise.",
              "Machine Learning: Develop an anomaly detection model that scores each 'spoolsv.exe' image load event. Features for the model can include the path entropy of the loaded DLL, whether the DLL is signed, the prevalence of the DLL's hash, and the parent process that initiated the spooler activity. High anomaly scores indicate suspicious loads."
            ]
          },
          {
            "description": "The process 'spoolsv.exe' initiates an outbound network connection to a non-private (RFC1918) IP address, where the destination is not a known, legitimate print service or update server.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Network Egress Points (Firewalls/Proxies), DNS Servers",
            "action": [
              "Symbolic Logic: Create a detection rule that alerts when 'spoolsv.exe' (Sysmon Event ID 3) initiates a network connection to a destination IP address or domain listed in a threat intelligence feed for C2 servers. Correlate with Zeek conn.log for additional context like connection duration and bytes transferred.",
              "Statistical Analysis: Establish a baseline of legitimate destination IPs, domains, and ports that 'spoolsv.exe' communicates with across the enterprise. Alert when 'spoolsv.exe' connects to a destination IP/port pair that is statistically rare (e.g., seen on <0.1% of hosts). Use Zeek dns.log to analyze the rarity of the requested domain.",
              "Machine Learning: Use a time-series model on Zeek conn.log data to monitor the volume and frequency of data egress from 'spoolsv.exe' on each host. A sudden change in the pattern, such as the emergence of a periodic 'heartbeat' connection or a large data transfer, should be flagged as an anomaly, especially if it follows a recent Port Monitor installation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using Port Monitors?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.010",
        "name": "Port Monitors",
        "evidence": [
          {
            "description": "A process execution event, matching the file hash or name of a known privilege escalation tool (e.g., PrintSpoofer, Juicy Potato), is observed, followed by file creation of a DLL and modification of the HKLM\\...\\Print\\Monitors registry key within a short time window.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Windows Servers (Non-Domain Controllers)",
            "action": [
              "Symbolic Logic: Create a high-fidelity correlation rule that triggers when a process execution event (Sysmon Event ID 1) with a hash matching a known exploit tool is followed within 60 seconds by a registry modification (Sysmon Event ID 13) to the 'Driver' value of a key under HKLM\\...\\Print\\Monitors.",
              "Statistical Analysis: Profile the command-line arguments used during Port Monitor registry modifications. The execution of known exploit tools often involves specific or unusual command-line patterns. Alert when a process that modifies the Port Monitor registry is launched with command-line arguments that have high entropy or are statistical outliers compared to a baseline of legitimate administrative activity.",
              "Machine Learning: Develop a sequence analysis model (e.g., using a Hidden Markov Model) trained on event logs. The model should learn the sequence of events associated with legitimate software installation versus exploit tool execution. Flag sequences that match the exploit pattern: [Low-privilege shell -> Exploit tool execution -> DLL creation -> Port Monitor registry write -> Spooler service loads new DLL]."
            ]
          },
          {
            "description": "A registry modification event for a key under HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors is attributed to a process (ProcessID) that is running under a non-administrative security context (e.g., a standard user account, not SYSTEM or Administrator).",
            "data_sources": [
              "Sysmon Event ID 13",
              "Windows Event ID 4657",
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Domain Controllers (for user context lookup)",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers when a registry write event (Windows Event ID 4657 or Sysmon Event ID 13) to HKLM\\...\\Print\\Monitors has a Subject/User name that is not 'SYSTEM', 'LOCAL SERVICE', 'NETWORK SERVICE', or a member of the 'Domain Admins' or local 'Administrators' group.",
              "Statistical Analysis: For each registry write to the Print Monitors key, track the integrity level of the source process. Establish a baseline that >99.9% of these writes come from processes with 'High' or 'System' integrity. Alert on any write originating from a 'Medium' or 'Low' integrity process, as this is a strong statistical anomaly indicative of privilege escalation.",
              "Machine Learning: Train a classifier to score the risk of a Print Monitor registry write. Features should include the user account context (e.g., standard vs. admin), the integrity level of the process, the parent process name, and whether the process is running interactively. The model learns that writes from non-interactive, SYSTEM-level processes like 'svchost.exe' are benign, while writes from an interactive 'cmd.exe' under a standard user account are highly suspicious."
            ]
          },
          {
            "description": "The parent process of a process that modifies the HKLM\\...\\Print\\Monitors registry is an anomalous process, such as an interactive shell (powershell.exe, cmd.exe) or an Office application (winword.exe), rather than a trusted installer (msiexec.exe, svchost.exe).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Application Servers",
            "action": [
              "Symbolic Logic: Create a detection rule that alerts when a process that modifies a Print Monitor registry key (identified via Sysmon Event ID 13) has a parent process with an image name of 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'winword.exe', 'excel.exe', or 'outlook.exe'.",
              "Statistical Analysis: Generate a frequency distribution of all parent process names that lead to the modification of Print Monitor registry keys. Establish a baseline of common, legitimate parent processes (e.g., 'svchost.exe', 'msiexec.exe'). Alert when a modification is triggered by a parent process that falls outside the top 95th percentile of frequent parents, indicating a rare process lineage.",
              "Machine Learning: Use a graph-based anomaly detection algorithm to model process relationships. Represent process creations as a graph where nodes are processes and edges are parent-child relationships. A subgraph representing the creation of a process that modifies the Port Monitor registry from an unusual parent (e.g., 'outlook.exe' -> 'cmd.exe' -> 'rundll32.exe') would be flagged as a structural anomaly."
            ]
          },
          {
            "description": "The 'spoolsv.exe' process loads a new or low-prevalence DLL (Sysmon Event ID 7) within minutes of the same host exhibiting user-level reconnaissance activity (e.g., execution of 'whoami', 'net user', 'ipconfig') or credential access attempts.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Domain Controllers",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a 'spoolsv.exe' image load event (Sysmon Event ID 7) for an unsigned DLL occurs within 5 minutes after a process access event (Sysmon Event ID 10) where the target is 'lsass.exe' and the source is not a known security tool.",
              "Statistical Analysis: Develop a risk scoring system for hosts. Increment a host's risk score for activities like reconnaissance command execution ('net group \"Domain Admins\"'), LSASS access, and anomalous logins. If a host's risk score surpasses a statistical threshold (e.g., 3 standard deviations above the mean host risk score), and is then followed by a rare DLL load by 'spoolsv.exe', generate a high-severity alert.",
              "Machine Learning: Implement a time-series model that ingests a feature vector of suspicious activities on a host (recon commands, failed logins, etc.). The model should learn to predict the probability of a privilege escalation event. When the model's predicted probability spikes and is temporally correlated with a new DLL being loaded by 'spoolsv.exe', this provides a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]