[
  {
    "information_requirement": "Is the adversary maintaining persistence by hijacking process execution flow via KernelCallbackTable?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.013",
        "name": "KernelCallbackTable",
        "evidence": [
          {
            "description": "A process creation event is observed where the process's file hash matches a known threat intelligence indicator associated with KernelCallbackTable hijacking malware.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Create a SIEM rule to monitor all process creation events (Windows Event ID 4688). Compare the 'Process' or 'NewProcessName' file hash against a continuously updated threat intelligence feed of hashes for malware and tools known to use KernelCallbackTable hijacking. Generate a high-severity alert for any match.",
              "For each executed file hash, calculate its prevalence across the enterprise over a 30-day rolling window. Flag any hash that is both extremely rare (e.g., seen on < 0.1% of endpoints or < 5 total executions) and has a high entropy value (e.g., > 7.5), suggesting it is packed. A combination of low prevalence and high entropy warrants investigation.",
              "Train a binary classification model (e.g., Gradient Boosting Machine) using features extracted from process creation events, including process name, parent process, command line arguments, and file hash properties (e.g., signing status, entropy). Deploy the model to score new process creation events in real-time, alerting on those classified as malicious with high probability."
            ]
          },
          {
            "description": "A common GUI process (e.g., explorer.exe, iexplore.exe) initiates persistence mechanisms, such as creating a scheduled task or modifying a registry autorun key, which is anomalous for its normal function.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Member Servers",
            "action": [
              "Create a SIEM rule that triggers when a process creation event (Windows Event ID 4688) for 'schtasks.exe' or 'reg.exe' has a parent process name that is on a list of common GUI applications (e.g., 'explorer.exe', 'chrome.exe', 'outlook.exe'). Also, monitor for registry modification events (Windows Event ID 4657) to common autorun keys where the subject process name is a GUI application. Alert on any such occurrence.",
              "For each GUI process name, establish a baseline of its typical child processes over a 30-day period. Calculate the frequency distribution of these child processes. Generate an alert if a GUI process spawns a child process (like 'schtasks.exe') that falls below a rarity threshold (e.g., in the 1st percentile of child process frequencies for that parent) or has never been seen before.",
              "Use a clustering algorithm (e.g., DBSCAN) on event sequences represented as tuples of (Parent Process, Child Process, Registry Key Modified/Scheduled Task Action). Cluster normal behaviors, such as 'svchost.exe' creating legitimate tasks. Identify outliers or small clusters where a GUI process is the parent in a sequence that establishes persistence. These outlier sequences are highly suspicious."
            ]
          },
          {
            "description": "A common GUI process initiates a persistence action (e.g., creates a scheduled task) within a short time window (e.g., < 5 minutes) after a handle with write-access was requested to it by another process.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4698",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers",
            "action": [
              "Create a correlation rule that triggers when a handle request event (Windows Event ID 4656) with write access rights (e.g., 0x20 for PROCESS_VM_WRITE, 0x1FFFFF for PROCESS_ALL_ACCESS) targeting a GUI process is followed within 5 minutes by a persistence event (e.g., Windows Event ID 4698, 4657) initiated by that same GUI process. Alert on this sequence.",
              "For each source process that requests a handle to a GUI process, track the subsequent actions taken by that GUI process. Calculate the conditional probability P(Persistence Action | Handle Request from Process X). If this probability for a specific source process X is a statistical outlier (e.g., > 3 standard deviations above the mean) compared to the baseline probabilities for all source processes, flag it as anomalous.",
              "Model the sequence of events as a time series or a graph. Use a sequence-based anomaly detection model like an LSTM autoencoder, trained on benign sequences of process interactions and subsequent actions. Feed real-time event sequences into the model and alert when the reconstruction error exceeds a predefined threshold, indicating a deviation from normal, learned behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges by hijacking process execution flow via KernelCallbackTable?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.013",
        "name": "KernelCallbackTable",
        "evidence": [
          {
            "description": "A process at a lower integrity level successfully requests a handle with write permissions to a GUI process running at a higher integrity level.",
            "data_sources": [
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers",
            "action": [
              "Enable 'Audit Handle Manipulation' and 'Audit Kernel Object' policies. Create a SIEM rule to trigger on Windows Event ID 4656 where the Object Type is 'Process', the Accesses field contains write permissions (e.g., 'PROCESS_VM_WRITE'), the target process is a GUI application, and the source process's integrity level is lower than the target process's integrity level (e.g., Medium -> High, Low -> High). This is a high-fidelity indicator.",
              "Build a baseline of normal process handle requests between different integrity levels. Calculate the frequency of all source-to-target integrity level request pairs. Any request from a lower to a higher integrity level is an anomaly by definition, but you can rank the anomaly score based on the rarity of the specific source/target process pair (e.g., a pair never seen before gets the highest score).",
              "Use a graph-based anomaly detection approach. Model processes as nodes and handle requests as directed, weighted edges where weights incorporate access rights and integrity level differences. Train a graph neural network (GNN) on benign process interaction graphs. A handle request from a low- to high-integrity process will appear as an anomalous edge that the model has not seen, triggering an alert."
            ]
          },
          {
            "description": "A GUI process, after being accessed by another process, spawns a child process with an integrity level higher than its own (e.g., a Medium integrity 'explorer.exe' spawns a High integrity 'cmd.exe').",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Servers with GUI access",
            "action": [
              "Create a SIEM rule that triggers on Windows Event ID 4688 (process creation) where the new process's integrity level is higher than its parent process's integrity level, and the parent is a common GUI application. For higher fidelity, correlate this with a preceding Windows Event ID 4656 (handle request) targeting the parent process from a different source within a short time window (e.g., < 1 minute).",
              "For each parent process, establish a baseline of the integrity levels of its child processes. For a process like 'explorer.exe', the vast majority of child processes will run at the same (Medium) integrity level. Alert if a child process is spawned at an integrity level that is a statistical outlier for that parent (e.g., a High integrity child, which should have a frequency near zero).",
              "Train a decision tree or random forest classifier to predict whether a parent-child process relationship is indicative of privilege escalation. Features would include parent process name, parent integrity level, child process name, and child integrity level. The model can learn legitimate elevation scenarios (e.g., those involving 'consent.exe' for UAC) and flag illegitimate ones, such as a GUI process silently spawning a high-integrity child."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking process execution flow via KernelCallbackTable?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.013",
        "name": "KernelCallbackTable",
        "evidence": [
          {
            "description": "A common GUI process, which typically has predictable network behavior, initiates an outbound network connection to a destination IP or domain with a low reputation score or that is present on a threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, User Workstations, Web Proxies",
            "action": [
              "Join endpoint network connection logs (Windows Event ID 5156, which provides the Application/Process Name) with network gateway logs (Zeek conn.log) on IP/port/timestamp. For every connection initiated by a common GUI process, check the destination IP/domain against a threat intelligence feed of known C2 servers. Alert on any match.",
              "For each GUI process, profile its normal network behavior: common destination ports, data volume, and connection frequency. Calculate the JA3 hash for TLS connections (from Zeek ssl.log) and the entropy of requested domain names (from Zeek dns.log). Alert when a new connection from a GUI process deviates significantly from its baseline, e.g., connecting to a port it never uses (e.g., > 99th percentile of port rarity), or using a JA3 hash with low global prevalence.",
              "Use a time-series anomaly detection model (e.g., ARIMA or Prophet) on the volume of outbound data per GUI process, per hour. A sudden, unexplained spike in traffic from a process like 'notepad.exe' that normally has no network traffic would be flagged as anomalous. This can detect data exfiltration masked by a legitimate process."
            ]
          },
          {
            "description": "A trusted GUI process (e.g., explorer.exe) spawns a command-line interpreter (cmd.exe, powershell.exe) or a common reconnaissance tool.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Create a high-severity alert rule for any process creation event (Windows Event ID 4688) where the parent process is in a set of common GUI applications {'explorer.exe', 'iexplore.exe', 'chrome.exe', 'outlook.exe', 'winword.exe'} and the child process is in a set of interpreters or recon tools {'cmd.exe', 'powershell.exe', 'wsl.exe', 'whoami.exe', 'net.exe', 'quser.exe', 'tasklist.exe'}.",
              "Build a parent-child process graph for the entire organization. Calculate the transitional probability from a parent process to a child process. A transition from 'winword.exe' to 'whoami.exe' is likely extremely rare. Alert on parent-child pairs with a transition probability below a set threshold (e.g., < 0.001%) or that have never been observed before.",
              "Implement a one-class SVM (Support Vector Machine) model trained only on benign parent-child process relationships observed in the environment. For each new process creation, extract the parent-child pair and feed it to the model. The model will identify any pair that falls outside the learned 'normal' boundary as a novel and potentially malicious anomaly."
            ]
          },
          {
            "description": "A common GUI process performs a combination of anomalous activities simultaneously, such as spawning rare child processes while also making network connections to unusual destinations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Network Egress Points, File Servers",
            "action": [
              "Create a complex event processing rule that looks for a sequence: a handle request to a GUI process (Event ID 4656), followed by that GUI process spawning a shell (Event ID 4688), followed by that shell making an external network connection (Event ID 5156 and Zeek conn.log). This multi-event correlation is a strong indicator of compromise.",
              "For each GUI process instance, develop a multi-metric risk score. Assign points for anomalous behaviors: +1 for spawning a rare child process (based on historical frequency), +1 for an outbound connection to a rare port, +1 for high-entropy command line arguments. Sum the points over a short time window (e.g., 5 minutes). If the cumulative score for a single process instance exceeds a threshold determined by the 99th percentile of scores for benign activity, trigger an alert.",
              "Use an unsupervised clustering algorithm like DBSCAN on process sessions. A session is a collection of all activities (child processes, network connections, file accesses) originating from a single process instance over its lifetime. Features can include counts of activities, entropy of domains/filenames, etc. Normal GUI process sessions will form dense clusters. Hijacked processes will appear as noise points or in small, anomalous clusters, which should be investigated."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]