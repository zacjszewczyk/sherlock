[
  {
    "information_requirement": "Is the adversary attempting to discover domain groups and permissions? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1069.002",
        "name": "Domain Groups",
        "evidence": [
          {
            "description": "The command line of a created process (Windows Event ID 4688) or PowerShell script block (Windows Event ID 4104) contains a unique string, function name, or parameter combination directly matching a signature from a known malicious domain enumeration tool (e.g., AdFind, PowerView, BloodHound ingestor).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged User Workstations",
            "action": "1. (Symbolic) Maintain a list of high-fidelity string signatures for tools like AdFind (e.g., '-gcb', '-f \"&(objectCategory=group)\"'), PowerView (e.g., 'Get-NetGroup', 'Invoke-GroupHunter'), and BloodHound (e.g., 'BloodHound.ps1', 'Get-BloodHoundData'). Create a detection rule to scan process command lines (Windows Event ID 4688) and PowerShell script content (Windows Event ID 4104) for these exact strings and alert on any match. 2. (Statistical) For all observed PowerShell scripts, calculate the Shannon entropy of the script block content. Establish a baseline entropy score for legitimate administrative scripts. Flag scripts with unusually high entropy, which can indicate obfuscation. Alert when a script's entropy exceeds the 95th percentile of the established baseline. 3. (ML) Train a classification model (e.g., Random Forest) on features extracted from process command lines, such as length, special character count, and presence of known enumeration tool function names. Label known-good administrative commands and known-bad enumeration tool commands. Use the model to classify new command line executions and alert on those classified as malicious."
          },
          {
            "description": "A sequence of native discovery commands (e.g., `net group`, `Get-ADGroupMember`) is executed by a single user or process on a single host within a short time window (e.g., less than 5 minutes), deviating from single, isolated administrative actions.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially Domain Controllers and administrative workstations",
            "action": "1. (Symbolic) Create a correlation rule that triggers when a single user or process executes more than three distinct domain group enumeration commands (e.g., 'net group /domain', 'net localgroup', 'Get-ADGroup', 'Get-ADGroupMember') within a 5-minute window. 2. (Statistical) For each user, establish a baseline for the frequency and variety of discovery commands executed per hour. Use a moving average and standard deviation to model this behavior. Generate an alert when a user's command frequency exceeds 3 standard deviations above their typical hourly average, indicating an abnormal burst of activity. 3. (ML) Use a sequence analysis model, such as a Hidden Markov Model (HMM), trained on command execution logs. Define 'benign' states (e.g., single command, long pauses) and 'discovery' states (e.g., rapid sequence of 'net group' followed by 'Get-ADGroupMember'). The model can predict the probability of a user being in a 'discovery' state based on the observed sequence of commands and alert when this probability crosses a predefined threshold."
          },
          {
            "description": "A single source IP address generates a volume of LDAP search requests for Active Directory group objects that is statistically anomalous compared to its own historical baseline and the baseline of its peer group (e.g., other workstations).",
            "data_sources": [
              "Zeek ldap.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments monitoring traffic to and from Domain Controllers",
            "action": "1. (Symbolic) From Zeek ldap.log, create a rule to alert on any LDAP query containing a filter characteristic of a BloodHound ingestor, such as '(|(samaccounttype=268435456)(samaccounttype=268435457)(samaccounttype=536870912)(samaccounttype=536870913))'. These specific filters are highly indicative of malicious reconnaissance. 2. (Statistical) From Zeek ldap.log, for each source IP, calculate the hourly count of LDAP search operations targeting group objects. Alert when the hourly query count for a source IP exceeds the 99th percentile of its own 30-day historical distribution. 3. (ML) Apply time series forecasting (e.g., ARIMA) to the LDAP query volume for each host. The model will predict the expected query volume for the next hour. Generate an alert if the actual observed query volume significantly exceeds the model's prediction interval, indicating a sudden, uncharacteristic spike in activity."
          },
          {
            "description": "A user account accesses the membership list of a highly sensitive Active Directory group (e.g., Domain Admins, Enterprise Admins) where the account is not a member of a pre-defined administrative allow list, or the access occurs from a host or at a time that is anomalous for that user.",
            "data_sources": [
              "Windows Event ID 4662",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": "1. (Symbolic) Enable SACL auditing on sensitive AD groups to generate Event ID 4662 on member enumeration. Create a static allow list of administrative user accounts and management hosts. Trigger a high-severity alert if Event ID 4662 for one of these groups is generated by any account or from any source host not on the allow list. 2. (Statistical) For legitimate administrators on the allow list, baseline their normal activity against these sensitive groups. Profile the typical hours of access and source workstations. Generate a medium-severity alert if a legitimate administrator accesses these groups outside of their normal profiled hours (e.g., using a z-score greater than 3 on the hour of day) or from a new source workstation not seen in the last 90 days. 3. (ML) Train a one-class SVM model on features from legitimate administrative access to sensitive groups (Event ID 4662 correlated with Event ID 4624 logon data). Features should include user, source hostname, time of day, and day of week. The model learns the boundary of 'normal' access. Any new access event that falls outside this learned boundary is flagged as an anomaly."
          },
          {
            "description": "Execution of domain group enumeration commands or high-volume LDAP queries originates from a user account or host whose functional role (e.g., web server, finance department user) has no legitimate reason to perform such discovery activities.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek ldap.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, particularly non-IT/developer workstations and single-function servers like Web Servers or Database Servers",
            "action": "1. (Symbolic) Categorize all user accounts and hosts into functional roles (e.g., 'IT-Admin', 'Finance', 'WebServer'). Create a high-severity alert that triggers if any process (Event ID 4688) or PowerShell command (Event ID 4104) matching an enumeration pattern (e.g., 'net group', 'Get-ADGroup') originates from a user or host not in an authorized role. 2. (Statistical) For each user, calculate a 'discovery activity score' based on the weekly count of enumeration commands. Group users by their department or role. Alert if a user's discovery score is a statistical outlier within their peer group (e.g., exceeds the 95th percentile of the group's scores). 3. (ML) Use a clustering algorithm like DBSCAN on host activity data, with features like process names executed and network protocols used. This will automatically group hosts into clusters of similar behavior. If a host known to be in a 'web server' cluster suddenly begins executing domain enumeration commands, it will be flagged as a noise point or outlier by the model."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]