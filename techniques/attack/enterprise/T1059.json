[
  {
    "information_requirement": "Is the adversary executing commands and scripts on target systems using built-in interpreters?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059",
        "name": "Command and Scripting Interpreter",
        "evidence": [
          {
            "description": "A process execution event for a script interpreter (e.g., powershell.exe, cmd.exe, wscript.exe) contains a command-line argument with a domain or IP address present on a threat intelligence feed, or the hash of an executed script file matches a known malicious hash.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers, Network Egress Points",
            "action": [
              "Symbolic (IOC Matching): Implement a rule to continuously parse command-line arguments from process creation events (Sysmon Event ID 1, Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104). Extract all IP addresses, domains, and file hashes. Compare these extracted values against curated threat intelligence feeds for known malicious indicators. Generate a high-severity alert upon a match.",
              "Statistical (Frequency Analysis): For domains and IPs extracted from command lines that are not on a known-bad IOC list, calculate their prevalence across the enterprise over a 30-day rolling window. Flag any domain or IP that falls below a 5th percentile prevalence threshold (i.e., is extremely rare) when invoked by a script interpreter. Correlate with Zeek dns.log to confirm if the domain was newly observed in the environment.",
              "Machine Learning (Classifier Model): Train a logistic regression or random forest classifier on labeled historical command-line data. Engineer features including: command length, character entropy, presence of keywords like 'IEX', 'DownloadString', '-enc', and the rarity score of any contained domains/IPs. Use the model to score new command-line executions in real-time, flagging those with a high probability of being malicious."
            ]
          },
          {
            "description": "A command interpreter's command-line arguments contain high-entropy character strings indicative of encoding, specific keywords associated with download/execution cradles (e.g., 'IEX', 'DownloadString'), or parameter structures known to be used by offensive security tools.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Servers, Mail Servers, Domain Controllers",
            "action": [
              "Symbolic (Regex Pattern Matching): Scan all command-line arguments from process creation events (Sysmon Event ID 1, Windows Event ID 4688) and script block content (Windows Event ID 4104) using a library of regular expressions. These expressions must detect known malicious patterns, such as PowerShell download cradles (e.g., IEX(New-Object Net.WebClient).DownloadString), Base64 encoding flags (-e, -enc, -encodedCommand), and command structures specific to frameworks like Metasploit or Cobalt Strike. Alert on any match.",
              "Statistical (Entropy and Length Analysis): For every command-line execution event, calculate the Shannon entropy of the argument string and its total length. Establish a host-specific baseline distribution for common processes (e.g., powershell.exe, cmd.exe). Flag any execution where the entropy or length exceeds the 98th percentile of the historical baseline for that specific process on that host, as this is a strong indicator of obfuscated or embedded payloads.",
              "Machine Learning (N-gram Anomaly Detection): Build a character-level n-gram model (e.g., trigrams) on a large corpus of benign command-line arguments from your environment. Use this model to calculate the perplexity (a measure of how well the model predicts the data) of new, unseen command lines. Command lines with unusually high perplexity scores are anomalous and likely contain obfuscated or malicious syntax not seen in normal operations. Flag these for analyst review."
            ]
          },
          {
            "description": "A process creation event shows a command interpreter (e.g., cmd.exe, powershell.exe) being spawned as a child process of a parent process that does not typically perform such actions, such as WINWORD.EXE, EXCEL.EXE, OUTLOOK.EXE, or a web browser process (e.g., chrome.exe).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Remote Desktop Servers, Mail Servers",
            "action": [
              "Symbolic (Parent-Child Blacklist): Maintain and apply a list of known-bad parent-child process relationships (e.g., WINWORD.EXE -> cmd.exe, OUTLOOK.EXE -> powershell.exe, chrome.exe -> cmd.exe). Create a high-priority alert for any process creation event (Sysmon Event ID 1) that matches an entry on this blacklist.",
              "Statistical (First-Seen Parent-Child Analysis): For every process creation event, create a tuple of (ParentProcessName, ChildProcessName). Store these tuples and their first-seen timestamp for each host and for the entire environment. Alert whenever a new, never-before-seen parent-child relationship involving a script interpreter is observed. Calculate the population frequency of all pairs and flag those in the lowest percentile (e.g., < 1%) as suspicious.",
              "Machine Learning (Graph-Based Anomaly Detection): Model process execution chains as a directed graph where nodes are processes and edges are parent-child relationships derived from Sysmon Event ID 1. Use a graph analytics platform or algorithm to establish a baseline of normal process activity flow. Identify anomalous executions as subgraphs that deviate significantly from this baseline, such as a short, unusual chain originating from an Office application and terminating in a script interpreter."
            ]
          },
          {
            "description": "A file with a script extension (.ps1, .bat, .vbs, .js) is created in a world-writable directory (e.g., %PUBLIC%, %TEMP%, %APPDATA%) and is immediately followed by a process creation event where an interpreter executes that same file path within a short time window (e.g., less than 10 seconds).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, File Servers, Web Application Servers",
            "action": [
              "Symbolic (Write-Then-Execute Rule): Create a correlation rule that triggers when a file creation event (Sysmon Event ID 11) for a script file (*.ps1, *.bat, *.vbs) in a world-writable or temporary directory is followed by a process creation event (Sysmon Event ID 1) for that same file path within a 10-second window. This is a high-fidelity indicator of malware staging.",
              "Statistical (Directory Path Rarity): For all script executions identified via process creation events (Sysmon Event ID 1), parse the file path from the command line. Calculate the frequency of each directory path used for script execution across the enterprise. Flag executions from directories that are in the bottom 5th percentile of frequency, which helps identify scripts running from unusual locations beyond a simple static list of temporary directories.",
              "Machine Learning (Time Series Anomaly Detection): For critical system directories (e.g., C:\\Windows\\System32), model the rate of script file creation (.ps1, .bat, etc.) over time using Sysmon Event ID 11 data. Use a time-series anomaly detection algorithm (like SARIMA or an LSTM-based autoencoder) to identify sudden, anomalous spikes in the number of script files being written, which could indicate dropper activity or living-off-the-land binary replacement."
            ]
          },
          {
            "description": "A script interpreter process (e.g., powershell.exe, cscript.exe) initiates an outbound network connection to an external IP address that matches a threat intelligence feed, has a low reputation score, or is using a statistically uncommon destination port.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, User Workstations, DMZ Servers",
            "action": [
              "Symbolic (Process-Network IOC Correlation): For every network connection event (Sysmon Event ID 3) where the 'Image' field is a script interpreter (e.g., powershell.exe, python.exe), check the 'DestinationIp' against threat intelligence feeds. Enrich with domain information from Zeek dns.log lookups for the 'DestinationIp' and also check the domain against threat intelligence. Alert on any match.",
              "Statistical (JA3/JA3S and Port Rarity): For network connections initiated by script interpreters (Sysmon Event ID 3), analyze the TLS fingerprint (JA3/JA3S hash from Zeek ssl.log) and destination port (from Zeek conn.log). Establish a baseline of common JA3 hashes and ports used by legitimate scripts in the environment. Alert when a script interpreter uses a JA3 hash or a destination port that is statistically rare (e.g., seen in <1% of connections) for that process, indicating non-standard or malicious libraries.",
              "Machine Learning (Connection Behavior Clustering): For each process-destination pair (e.g., powershell.exe -> 1.2.3.4), track metrics over time from Zeek conn.log: bytes sent/received, connection duration, and inter-arrival time between connections. Use a clustering algorithm (e.g., DBSCAN) to group connections into 'normal' behavior clusters. Flag connections that fall into outlier clusters or are flagged as noise, which could indicate C2 beaconing (regular, low-volume) or data exfiltration (large, single transfer)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]