[
  {
    "information_requirement": "Is an adversary attempting to modify or suppress critical process alarms? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0838",
        "name": "Modify Alarm Settings",
        "evidence": [
          {
            "description": "Unauthorized modification or replacement of an alarm configuration file (e.g., .ALM, .XML, .INI within a project directory) on a critical ICS host (HMI, EWS) by a non-whitelisted process, or outside of established maintenance windows.",
            "data_sources": [
              "Windows Event ID 4663 (Object Access - File System)",
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 4656 (Handle Request)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, Data Gateways/OPC Servers",
            "action": "1. **Symbolic Logic (Whitelist/Rule-based)**: Identify critical alarm configuration file paths and names (e.g., C:\\SCADA\\Projects\\*.ALM, D:\\HMI_Config\\*.XML) on EWS and HMI assets. Configure SACLs to audit write (FILE_WRITE_DATA) and delete (FILE_DELETE_CHILD) access, generating Windows Event ID 4663. Establish a whitelist of known legitimate processes (e.g., 'Vendor_SCADA_Editor.exe', 'Project_Deployer.exe') and their expected command-line arguments that are authorized to modify these files. Alert immediately for any Event ID 4663 on these files where the 'Process Name' (from Windows Event ID 4688 correlated by 'Process ID' and 'Creation Time') is not on the whitelist, or if the command-line arguments are unexpected (e.g., 'powershell.exe -command \"Set-Content...\"', 'cmd.exe /c \"copy...\"').\n2. **Statistical Method (Anomaly Detection)**: Collect the daily count of unique modifications (Event ID 4663) to critical alarm configuration files per host. Establish a 30-day moving average and standard deviation for this metric. Generate an alert when the daily modification count for any critical host exceeds the 99th percentile of its historical distribution or is more than 3 standard deviations above the moving average, indicating an anomalous spike in modification activity.\n3. **Machine Learning (Classification)**: Develop a classification model (e.g., Random Forest or SVM) trained on historical Windows Event ID 4663 and 4688 data. Features should include 'Process Name', 'Parent Process Name', 'User Account', 'Time of Day', 'Day of Week', 'File Path', and 'File Extension'. Label known legitimate modifications (e.g., during scheduled maintenance by authorized users) as 'benign' and known unauthorized attempts as 'malicious'. Deploy the model to classify new modification events, alerting on classifications with a high probability of 'malicious' activity."
          },
          {
            "description": "Detection of a configuration file (e.g., .ALM, .XML, .PRJ) containing alarm settings being transferred to an ICS endpoint (PLC, HMI, EWS) from a source IP address or via a protocol/port combination not explicitly whitelisted for such transfers, or with an atypical file size or hash.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek smb.log",
              "Zeek ftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT boundary firewalls, Industrial Demilitarized Zones (IDMZ), Control Network segments (Process Control, Safety Instrumented Systems), Wireless Industrial Networks",
            "action": "1. **Symbolic Logic (Whitelist/Rule-based)**: Create a watchlist of known critical alarm configuration file extensions (e.g., '.ALM', '.PRJ', '.XML', '.CFG') and their typical file sizes. Filter Zeek 'files.log' for transfers involving these extensions where the destination IP is within the ICS network ranges. Establish a whitelist of authorized source IPs (e.g., specific EWSs, Historian servers) and allowed protocols/ports (e.g., SMB, FTP, proprietary vendor protocols). Alert on any transfer of a watchlisted file type to an ICS destination from a non-whitelisted source IP, using an unauthorized protocol/port, or if the file hash does not match a known good baseline (if available).\n2. **Statistical Method (Entropy/Volume Anomaly)**: For file transfers to ICS assets (Zeek 'files.log'), calculate the entropy score of file names and content (if available for analysis). Baseline the typical entropy scores for legitimate configuration files. Additionally, track the frequency and volume of file transfers (bytes/second) to critical ICS devices over time. Alert if the entropy score of a transferred configuration file deviates significantly (e.g., > 2 standard deviations) from the established baseline, or if the transfer volume to a specific ICS asset exceeds the 99th percentile of its normal activity, indicating an unusual surge.\n3. **Machine Learning (Time Series Anomaly Detection)**: Implement a time-series anomaly detection model (e.g., Isolation Forest or LSTM) on the aggregated byte volume and count of file transfers to ICS devices from Zeek 'conn.log' and 'files.log'. Train the model on historical network traffic patterns, accounting for scheduled transfers and maintenance activities. Alert when the current transfer volume or frequency to critical ICS assets is classified as anomalous, indicating potential unauthorized data movement that could include modified configuration files."
          },
          {
            "description": "A critical Windows service responsible for alarm management, HMI runtime, or process control is stopped (e.g., SERVICE_STOPPED state) without prior authorization, outside of scheduled maintenance, or without correlation to a legitimate system shutdown or restart event.",
            "data_sources": [
              "Windows Event ID 7036 (Service Control Manager - Service Change)",
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 1074 (System Shutdown/Restart)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator Stations, Human-Machine Interfaces (HMIs), Alarm management servers, SCADA Servers, Data Historian Servers",
            "action": "1. **Symbolic Logic (Whitelist/Rule-based)**: Identify the exact service names for all critical ICS alarm, HMI runtime, and control application services (e.g., 'Rockwell_Alarm_Service', 'Siemens_HMI_Runtime'). Create a watchlist of these service names. Monitor for Windows Event ID 7036 where a watched service enters the 'stopped' state. Correlate these events with Windows Event ID 4688 to identify the process responsible for the stoppage (e.g., 'sc.exe', 'net.exe', 'taskkill.exe') and Windows Event ID 1074 for legitimate system shutdowns. Alert immediately if a critical service is stopped by an unauthorized process, by a user not typically associated with service management, or if the stoppage does not correlate with a scheduled maintenance window, a known software update, or a system shutdown/restart event.\n2. **Statistical Method (Frequency/Uptime Anomaly)**: Establish a baseline for the typical uptime and frequency of restarts for each critical ICS service over a 90-day period. Calculate the median and standard deviation of service uptime. Implement a monitoring rule that triggers an alert if any critical service's uptime falls below the 5th percentile of its historical uptime, or if the number of unexpected 'stopped' states (Event ID 7036 not correlated with authorized events) for a service exceeds its 99th percentile of daily occurrences, indicating an unusual pattern of service disruption.\n3. **Machine Learning (Classification)**: Develop a supervised machine learning model (e.g., Gradient Boosting Classifier) to predict the legitimacy of service stop events. Features for the model should include 'Service Name', 'User Account', 'Process Name' (from 4688), 'Time of Day', 'Day of Week', 'Duration of Stoppage', and correlation with 'Event ID 1074'. Train the model on historical data, labeling service stops during maintenance windows or system restarts as 'legitimate' and other known unauthorized stops as 'malicious'. Deploy the model to classify new service stop events, generating high-priority alerts for predictions indicating 'malicious' intent."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]