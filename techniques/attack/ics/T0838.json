[
  {
    "information_requirement": "Is an adversary attempting to modify or suppress critical process alarms? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0838",
        "name": "Modify Alarm Settings",
        "evidence": [
          {
            "description": "An unauthorized modification (write, delete, or permission change) to a critical alarm configuration file on a key ICS asset, where the modification is performed by a non-whitelisted user account or process, occurs outside of a scheduled maintenance window, or originates from a non-standard parent process (e.g., not explorer.exe or a known vendor application).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 5145",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, Data Gateways/OPC Servers",
            "action": "1. Symbolic Logic (Rule-based Correlation): Define a watchlist of critical alarm configuration file paths and extensions (e.g., C:\\SCADA\\Projects\\*.ALM, D:\\HMI_Config\\*.XML). Monitor for Windows Event ID 4663 (Object Access) with write or delete access masks, or Windows Event ID 5145 (Detailed File Share) for remote modifications. Correlate the ProcessId from these events with Windows Event ID 4688 (Process Creation) to identify the responsible user, process name, and parent process name. Generate a high-priority alert if the modifying process (e.g., powershell.exe, cmd.exe, certutil.exe) or user account is not on a pre-defined whitelist of authorized administrative tools and accounts, or if the modification occurs outside a scheduled maintenance window. 2. Statistical Method (Baseline Deviation): For each monitored file path, establish a baseline of modification activity by collecting the hourly count of modification events (Event ID 4663/5145) over a 60-day period. Calculate the 99th percentile for modification counts for each hour of the day and day of the week. Alert when the count of modifications in a given hour exceeds this established percentile. Additionally, calculate the Shannon entropy of the parent process name field for processes modifying these files; a sudden decrease in entropy indicating a single anomalous parent process, or a sharp increase indicating randomized parent process names, should trigger an alert. 3. Machine Learning (Classification Model): Train a supervised classification model (e.g., Gradient Boosting) to predict if a file modification is malicious. Engineer features from Event IDs 4663 and 4688, including: process name, parent process name, user account, user's group memberships, time of day, day of week, file extension, file path depth, a boolean flag for 'is_scripting_engine', and a boolean flag for 'is_outside_maintenance_window'. Label historical data based on incident response findings and known-good administrative activities. Deploy the model to score new events in real-time, generating a high-priority alert for events classified as 'malicious' with a confidence score > 0.9."
          },
          {
            "description": "A network file transfer event where the file characteristics (name, extension, or content hash) match a critical alarm configuration file, and the transfer context is anomalous. Anomalous context includes transfer from a non-whitelisted source IP, over an unapproved protocol or port, or a file hash/size that deviates from known-good versions.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek smb_files.log",
              "Zeek ftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT boundary firewalls, Industrial Demilitarized Zones (IDMZ), Control Network segments (Process Control, Safety Instrumented Systems), Wireless Industrial Networks",
            "action": "1. Symbolic Logic (Whitelist/Watchlist): Create a watchlist of critical alarm configuration file names (e.g., *.alm, *.prj, *.cfg) and a whitelist of their known-good SHA1 hashes. Monitor Zeek's files.log. For any file transfer where the filename matches the watchlist and the destination IP (rx_hosts) is a critical ICS asset: (1) Join with conn.log on the unique ID (uid). (2) Alert if the source IP (id.orig_h) or destination port (id.resp_p) is not on a strict whitelist of approved engineering stations and protocols. (3) Alert if the 'sha1' hash in files.log does not match the known-good hash whitelist for that specific configuration file. 2. Statistical Method (Volume and Ratio Anomaly): For each critical ICS asset, baseline file transfer activity from Zeek logs over a 60-day period. Calculate the 99th percentile for the daily count of config file transfers and the daily volume (sum of 'total_bytes' from files.log). Alert if daily activity exceeds these thresholds. Additionally, calculate the entropy of source IPs (id.orig_h) transferring config files to these assets; a sudden drop in entropy indicates a single source IP is responsible for an unusual number of transfers and warrants investigation. 3. Machine Learning (Unsupervised Anomaly Detection): Develop a time-series anomaly detection model (e.g., Autoencoder) using features aggregated hourly from Zeek's conn.log and files.log for traffic to critical ICS assets. Features should include: total byte count, packet count, count of unique protocols, count of file transfers, average file size, ratio of inbound to outbound bytes, and average session duration. Train the model on at least 90 days of data to learn normal network behavior. Alert when the model flags a time window with a high reconstruction error (anomaly score), indicating a deviation from the established pattern of network and file activity."
          },
          {
            "description": "A critical ICS application service (e.g., alarm manager, HMI runtime, OPC server) enters a 'stopped' state, and the stop event is not preceded by a system shutdown event (Windows Event ID 1074) within a 5-minute window and is not initiated by a whitelisted administrative account or script.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 1074",
              "Windows Event ID 4688",
              "Windows Event ID 7040"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator Stations, Human-Machine Interfaces (HMIs), Alarm management servers, SCADA Servers, Data Historian Servers",
            "action": "1. Symbolic Logic (Contextual Correlation): Create a watchlist of critical ICS service names (e.g., 'CitectAlarm', 'FTAEAlarms', 'Kepware.KEPServerEX.V6.Service'). Monitor for Windows Event ID 7036 where a watchlisted service (param1) enters the 'stopped' state. Suppress the alert if a Windows Event ID 1074 (System Shutdown/Restart) occurred on the same host within the previous 5 minutes. If not suppressed, correlate with process creation events (Event ID 4688 for processes like 'net.exe' or 'sc.exe') to identify the initiating user. Alert for any un-correlated or unauthorized stop event. Also monitor for Event ID 7040 (Start type changed) for these services, as changing a service to 'Disabled' is a precursor to inhibiting it. 2. Statistical Method (Uptime and Frequency Analysis): For each critical service, track its uptime between 'started' and 'stopped' states using Event ID 7036. Calculate the historical mean time between service stops over a 90-day period. Alert if a service's current uptime before stopping is less than the 5th percentile of its historical uptime distribution, indicating a premature stop. Also, track the daily frequency of unsuppressed stop events per service and alert if this count exceeds the 99th percentile of its historical daily counts. 3. Machine Learning (Event Classification): Train a supervised classification model (e.g., Logistic Regression) to determine the legitimacy of a service stop event. Use features from Event ID 7036 and correlated logs, such as: service name, time of day, day of week, host criticality, a boolean flag for correlation with Event ID 1074, and the name of the user/process that initiated the stop (if available). Train the model on historical data labeled as 'legitimate' (e.g., during patching) or 'suspicious'. Deploy the model to score new stop events, alerting on those classified as 'suspicious' with a probability > 0.85."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]