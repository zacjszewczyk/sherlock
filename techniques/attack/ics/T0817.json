[
  {
    "information_requirement": "Has an adversary compromised a host in our ICS environment via a drive-by attack? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0817",
        "name": "Drive-by Compromise",
        "evidence": [
          {
            "description": "A web browser process (e.g., chrome.exe, iexplore.exe) on a critical ICS asset, such as an engineering workstation or HMI, spawns a child process not typically associated with web browsing. Anomalous child processes include command shells (cmd.exe, powershell.exe), script interpreters (wscript.exe, cscript.exe), or unsigned executables executing from a temporary or user-writable path such as `C:\\Users\\<user>\\AppData\\Local\\Temp\\` or `C:\\Windows\\Tasks\\`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint hosts including Engineering Workstations, Human-Machine Interface (HMI) terminals, operator consoles, and data historians within the Supervisory Control (Purdue Level 2) and Site Operations (Purdue Level 3) networks where process creation logs are collected.",
            "action": "1. Symbolic Logic: Monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for events where ParentProcessName is a known web browser and ProcessName is a shell, script interpreter, or living-off-the-land binary (e.g., cmd.exe, powershell.exe, wscript.exe, cscript.exe, mshta.exe, regsvr32.exe). Create high-priority alerts for command lines containing suspicious patterns such as 'mshta.exe http://', 'rundll32.exe javascript:', 'certutil.exe -urlcache', or PowerShell download cradles (e.g., IEX, Invoke-WebRequest, Net.WebClient). Correlate the timestamp and host from the process event with network connection logs (Zeek conn.log) to identify the source IP/domain that likely initiated the compromise.\n2. Statistical Method: For each host group (e.g., HMIs, Engineering Workstations), aggregate process creation events over a 30-day period to establish a baseline of normal parent-child process relationships. Alert when a browser spawns a child process that falls into the bottom 1st percentile of frequency for that host group, indicating it is exceptionally rare. Further, tokenize command-line arguments and calculate baseline frequencies for n-grams (bi-grams, tri-grams) of tokens; alert on the appearance of rare token combinations whose joint probability deviates more than 3 standard deviations from the established norm for that browser and host combination.\n3. Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on features extracted from process creation logs. Features should include: parent process name, parent process path, child process name, child process path, command-line length, command-line entropy, presence of suspicious substrings (e.g., 'http', 'download', 'invoke'), and the parent process's integrity level. Use the trained model to score the maliciousness of each new browser-spawned child process in real-time. Prioritize alerts for analyst review that have a model-assigned probability score above a tuned threshold (e.g., 0.85), especially on critical ICS assets."
          },
          {
            "description": "Network traffic from an ICS or supporting corporate host shows DNS queries or direct connections to domains that are known malicious, newly registered (e.g., created within the last 30 days), algorithmically generated (high character entropy), or use TLS certificates with anomalous attributes. Such attributes include being self-signed, having an unusually short validity period (e.g., < 90 days), using a weak signature algorithm, or having a Common Name (CN) or Subject Alternative Name (SAN) that does not match the requested domain.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors at egress points, internal DNS resolvers, ICS network gateways, and the DMZ between IT and OT networks (Purdue Level 3.5) where Zeek or equivalent network security monitoring logs are generated.",
            "action": "1. Symbolic Logic: Ingest Zeek logs into a SIEM. Join `dns.log` with a threat intelligence feed of known malicious domains and an internal watchlist of domains registered in the last 30 days. Join `dns.log` with `ssl.log` and `x509.log` on the connection UID. Alert if `ssl.log.validation_status` contains 'selfsigned', if the `x509.log.certificate.key_alg` is weak (e.g., 'rsa' with a key length < 2048), or if the `dns.log.query` does not appear in the `x509.log.certificate.san.dns` field for the same connection.\n2. Statistical Method: For all unique domains in `dns.log`, calculate the Shannon entropy of the second-level domain name. Alert on domains with an entropy score in the top 2nd percentile (e.g., > 4.0), as this is indicative of DGA. Calculate the JA3 and JA3S hash for each TLS session in `ssl.log`. Establish a baseline of common hashes for the environment and alert on the appearance of a JA3/JA3S hash that is in the bottom 1st percentile of frequency. For each host, calculate the ratio of unique DNS queries to successful TCP handshakes in `conn.log` over a 5-minute window; alert on hosts where this ratio exceeds 3 standard deviations of their own 7-day rolling average, which may suggest post-compromise beaconing.\n3. Machine Learning: Model DNS query activity as a bipartite graph connecting internal hosts to external domains. Apply community detection algorithms (e.g., Louvain Modularity) to identify clusters of internal assets (e.g., multiple HMIs) unexpectedly communicating with the same set of rare external domains, which is a strong indicator of a targeted watering hole attack. Alternatively, train an Isolation Forest model on numerical features from `conn.log` and `dns.log` (e.g., connection duration, bytes sent, query length, response TTL) to score each connection for anomalousness, flagging events with high anomaly scores originating from critical assets."
          },
          {
            "description": "A web browser on an ICS or corporate host downloads a file with an executable MIME type (e.g., application/x-dosexec), a suspicious script extension (.ps1, .vbs), a low-prevalence hash, or a mismatch between its apparent file type and its true content type (e.g., an executable file named 'report.pdf'). The download originates from a low-reputation, uncategorized, or historically uncommon source domain.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internet gateway proxy servers, ICS network gateways, and local download folders (e.g., `%USERPROFILE%\\\\Downloads`) on engineering workstations and HMIs.",
            "action": "1. Symbolic Logic: From `files.log`, identify files with executable MIME types (e.g., 'application/x-dosexec') or script extensions. Extract the file hash (md5, sha1) and query a file reputation service (e.g., VirusTotal API). Alert if positive detections > 1. Correlate the network event via connection UID to `http.log` to check the source 'host' and 'referrer' against threat intelligence. On the endpoint, correlate the `files.log` hash with Sysmon Event ID 11 (`Hashes`) to confirm the file write and its `TargetFilename` on disk.\n2. Statistical Method: For each source domain ('host' in `http.log`), baseline the typical MIME types of files it serves over 30 days. Alert if a domain that normally serves 'text/html' suddenly provides a file of type 'application/x-dosexec'. For each downloaded file in `files.log` with available content, calculate its Shannon entropy. Alert if a file's entropy is > 3 standard deviations from the mean for its given MIME type, as high entropy can indicate a packed or encrypted payload designed to evade signature-based detection.\n3. Machine Learning: Train a binary classification model (e.g., Gradient Boosting) to predict malicious downloads. Use features from `http.log` (host reputation, URI length, URI entropy), `files.log` (MIME type, file size, file entropy), `conn.log` (connection duration, bytes transferred), and externally enriched data (file hash reputation, domain age). Prioritize alerts with a model probability score greater than a tuned threshold (e.g., 0.80) for analyst review."
          },
          {
            "description": "An outbound HTTP/S request from a host in the ICS or supporting environment contains a User-Agent (UA) string that is anomalous. Anomalies include: matching a known-malicious signature, representing an outdated and vulnerable browser version, being statistically rare for the environment, being empty or malformed, or mismatching the parent process that generated the network traffic (e.g., a `curl` UA from a `chrome.exe` process).",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 3 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint hosts such as Engineering workstations and HMIs where Sysmon logs are collected, and network gateways (corporate internet gateway, ICS network gateways) where Zeek logs are generated.",
            "action": "1. Symbolic Logic: From `http.log`, extract the `user_agent` and connection 4-tuple (`id.orig_h`, `id.orig_p`, `id.resp_h`, `id.resp_p`). Match the `user_agent` against a threat intelligence list of malicious strings and a watchlist of vulnerable browser versions. On the endpoint, use the 4-tuple to find the corresponding network connection event in Sysmon Event ID 3 logs. Alert if the `user_agent` string is inconsistent with the `Image` field (process name) in the Sysmon event.\n2. Statistical Method: Stack count all `user_agent` strings seen in `http.log` over a 30-day period. Alert if a host, particularly a critical ICS asset, generates a `user_agent` that is in the bottom 5th percentile of frequency for its peer group (e.g., other HMIs). Calculate the length of all User-Agent strings and alert on User-Agents whose length is a statistical outlier (e.g., < 1st percentile or > 99th percentile), as this can indicate non-standard or malformed clients.\n3. Machine Learning: Train an autoencoder neural network on the character-level vector representations of all normal User-Agent strings seen over a 30-day baseline period. For each new User-Agent string, calculate its reconstruction error. A high reconstruction error score, one exceeding the 99th percentile of errors from the training set, indicates a significant deviation from learned normal patterns and should be flagged as a high-fidelity anomaly for investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]