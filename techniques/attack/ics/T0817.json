[
  {
    "information_requirement": "Has an adversary compromised a host in our ICS environment via a drive-by attack? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0817",
        "name": "Drive-by Compromise",
        "evidence": [
          {
            "description": "A web browser process (e.g., chrome.exe, iexplore.exe, firefox.exe, msedge.exe) on a critical ICS asset, such as an engineering workstation or HMI, spawns a child process that is inconsistent with legitimate user browsing activity. Anomalous processes include command shells (cmd.exe), script interpreters (powershell.exe, wscript.exe), or unsigned/uncommon executables executing from a temporary or user-writable path.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, Human-Machine Interface (HMI) terminals, data historians, any host with web browsing capability within the control or corporate environment.",
            "action": "1. Symbolic Logic: Continuously monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for events where a web browser is the parent process and the child process is a shell or script interpreter (e.g., cmd.exe, powershell.exe, wscript.exe). Create high-priority alerts for command lines containing suspicious patterns such as 'mshta.exe http://', 'rundll32.exe javascript:', or PowerShell download cradles (e.g., IEX, Invoke-WebRequest, Net.WebClient). Correlate with network logs to confirm the parent browser process connected to the source of the payload.\n2. Statistical Method: For each host group (e.g., HMIs, Engineering Workstations), establish a baseline of normal child processes spawned by web browsers over a 30-day period. Alert when a browser spawns a child process that falls into the bottom 1st percentile of frequency for that host group. Additionally, tokenize command-line arguments and alert on the appearance of rare tokens or a combination of tokens that deviates more than 3 standard deviations from the established baseline for that browser/host combination.\n3. Machine Learning: Train a classification model (e.g., Random Forest) using features from process creation logs such as parent process name, child process name, command-line length, command-line entropy, child process path, and user context. Use the model to score the maliciousness of each browser-spawned child process. Prioritize alerts with a model confidence score above 0.85, especially on critical ICS assets."
          },
          {
            "description": "Network traffic from an ICS or supporting corporate host exhibits DNS queries or direct connections to domains identified as known malicious (IOC match), newly registered (e.g., < 30 days old), algorithmically generated (high entropy DGA score), or having anomalous TLS certificate attributes.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, ICS network gateways, corporate internet gateway.",
            "action": "1. Symbolic Logic: Ingest Zeek logs. Cross-reference all domains in dns.log against threat intelligence feeds. Enrich non-matching domains with WHOIS data to flag domains registered within the last 30 days. Analyze ssl.log for connections using self-signed certificates or certificates from uncommon issuers not on an allowlist. Alert on connections to IPs associated with domains that match any of these criteria.\n2. Statistical Method: Calculate the Shannon entropy for all unique domains in dns.log and alert on domains exceeding the 98th percentile for the environment, which is indicative of DGA. For each host, calculate the ratio of unique DNS queries to successful TCP handshakes in conn.log over a 5-minute window; a ratio exceeding 20:1 suggests reconnaissance or DGA. Alert on hosts whose ratio is 3 standard deviations above their own 7-day rolling average.\n3. Machine Learning: Model DNS queries and their IP resolutions as a bipartite graph. Use community detection algorithms (e.g., Louvain Modularity) to find clusters of internal hosts querying a similar set of suspicious external domains, which could identify a targeted watering hole attack. Use time-series anomaly detection (e.g., ARIMA) on DNS query volume per host to flag sudden, unexplained spikes in activity."
          },
          {
            "description": "A web browser on an ICS or supporting corporate host downloads a file with an executable MIME type (e.g., application/x-dosexec, application/octet-stream) or a script extension (.exe, .dll, .ps1, .vbs, .js) from a low-reputation, uncategorized, or historically uncommon source domain.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internet gateway proxy servers, ICS network gateways.",
            "action": "1. Symbolic Logic: Analyze files.log for files with executable MIME types or script extensions. For each, pivot via conn_uids to http.log and inspect the 'host' and 'referrer' fields. Alert if the 'host' is on a threat intelligence list or if the 'referrer' matches a known watering hole. Check if the file's hash has been seen from multiple internal hosts within a short time frame.\n2. Statistical Method: For each source domain ('host' in http.log), baseline the typical MIME types of files it serves. Alert if a domain that normally serves 'text/html' or 'image/jpeg' suddenly provides a file of type 'application/x-dosexec'. Additionally, baseline file sizes per MIME type and alert on downloads that are statistical outliers (e.g., above the 99th percentile), as this may indicate a payload hidden in an otherwise normal-looking file.\n3. Machine Learning: Train a binary classification model (e.g., Gradient Boosting) to predict malicious downloads. Use features from http.log (host reputation, URI length, URI entropy), files.log (MIME type, file size, file entropy), and externally enriched data (file hash reputation from VirusTotal). Prioritize alerts with a model probability score greater than 0.80 for analyst review."
          },
          {
            "description": "An outbound HTTP/S request from an ICS-related host contains a User-Agent string that is anomalous. Anomalies include strings matching known-malicious signatures, representing severely outdated/vulnerable browser versions, being statistically rare for the environment, or mismatching the parent process that generated the traffic.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, HMIs, corporate network internet gateway, ICS network gateways.",
            "action": "1. Symbolic Logic: Extract 'user_agent' strings from http.log. Alert on exact matches to threat intelligence feeds of malicious User-Agents. Create rules to flag User-Agents for browser versions with known, unpatched RCE vulnerabilities. Correlate the connection's 4-tuple with process network connection logs (Sysmon Event ID 3) to verify the User-Agent is consistent with the generating process (e.g., alert if chrome.exe generates traffic with a 'curl' User-Agent).\n2. Statistical Method: Establish a baseline of 'user_agent' strings on a per-host and per-user-group basis. Alert if a host begins using a 'user_agent' that is in the bottom 5th percentile of frequency for its peer group (e.g., other HMIs) or for the entire organization. Monitor for a sudden increase in the diversity of User-Agents from a single host.\n3. Machine Learning: Train an autoencoder on the character-level representation of all normal User-Agent strings seen over a 30-day period. Feed all new User-Agent strings into the trained model. A high reconstruction error indicates a significant deviation from learned normal patterns and flags the User-Agent as a potential anomaly for investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]