[
  {
    "information_requirement": "Has an adversary compromised a host in our ICS environment via a drive-by attack? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0817",
        "name": "Drive-by Compromise",
        "evidence": [
          {
            "description": "A web browser process (e.g., chrome.exe, iexplore.exe) on a critical ICS asset, such as an engineering workstation or HMI, spawns a child process that is inconsistent with legitimate browsing. Anomalous child processes include command shells (cmd.exe, powershell.exe), script interpreters (wscript.exe, cscript.exe), or unsigned executables executing from a user-writable path such as `C:\\Users\\<user>\\AppData\\Local\\Temp\\` or `C:\\Windows\\Tasks\\`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, Human-Machine Interface (HMI) terminals, operator consoles, data historians, and any host with web browsing capability within the Supervisory Control (Purdue Level 2) and Site Operations (Purdue Level 3) networks.",
            "action": "1. Symbolic Logic: Monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for events where ParentProcessName is a known web browser and ProcessName is a shell, script interpreter, or living-off-the-land binary (e.g., cmd.exe, powershell.exe, wscript.exe, certutil.exe, bitsadmin.exe). Create high-priority alerts for command lines containing suspicious patterns such as 'mshta.exe http://', 'rundll32.exe javascript:', 'certutil.exe -urlcache', or PowerShell download cradles (e.g., IEX, Invoke-WebRequest, Net.WebClient). Correlate with network logs to confirm the parent browser process connected to the source of the payload.\n2. Statistical Method: For each host group (e.g., HMIs, Engineering Workstations), aggregate process creation events over 30 days to establish a baseline of normal child processes spawned by web browsers. Alert when a browser spawns a child process that falls into the bottom 1st percentile of frequency for that host group. Tokenize command-line arguments and calculate baseline frequencies for tokens; alert on the appearance of rare tokens or a combination of tokens whose joint probability deviates more than 3 standard deviations from the established norm for that browser/host combination.\n3. Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on features from process creation logs including: parent process name, parent process path, child process name, child process path, command-line length, command-line entropy, and process integrity level. Use the trained model to score the maliciousness of each new browser-spawned child process in real-time. Prioritize alerts for analyst review that have a model confidence score above 0.85, especially on critical ICS assets."
          },
          {
            "description": "Network traffic from an ICS or supporting corporate host shows DNS queries or direct connections to domains that are known malicious, newly registered (< 30 days), algorithmically generated (high entropy), or use TLS certificates with anomalous attributes. Anomalies include self-signed certificates, short validity durations (< 90 days), or a mismatch between the certificate Common Name (CN) and the domain being queried.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internal DNS resolvers, ICS network gateways, corporate internet gateway, and the DMZ between IT and OT networks (Purdue Level 3.5).",
            "action": "1. Symbolic Logic: Ingest Zeek logs into a SIEM. Join `dns.log` events with a threat intelligence feed of known malicious domains and an internal watchlist of domains registered in the last 30 days. Join `dns.log` with `ssl.log` on the connection UID. Alert if `ssl.log.validation_status` is not 'ok', if `ssl.log.issuer` is not in an approved CA list, or if the certificate's subject CN does not match the `dns.log.query`. Alert on any matches.\n2. Statistical Method: For all unique domains in `dns.log`, calculate the Shannon entropy of the domain name string. Alert on domains with an entropy score in the top 2nd percentile (e.g., > 4.0), as this is indicative of DGA. Calculate the JA3 and JA3S hash for each TLS session in `ssl.log`. Establish a baseline of common hashes for the environment and alert on the appearance of a JA3/JA3S hash that is in the bottom 1st percentile of frequency. For each host, calculate the ratio of unique DNS queries to successful TCP handshakes in `conn.log` over a 5-minute window; alert on hosts where this ratio exceeds 3 standard deviations of their own 7-day rolling average.\n3. Machine Learning: Model DNS queries and their IP resolutions as a bipartite graph. Use community detection algorithms (e.g., Louvain Modularity) to find clusters of internal hosts querying a similar set of suspicious external domains, which could identify a targeted watering hole attack. Alternatively, train an Isolation Forest model on numerical features from `conn.log` and `dns.log` (e.g., connection duration, bytes sent, query length) to score each connection for anomalousness, flagging events with high anomaly scores originating from critical assets."
          },
          {
            "description": "A web browser on an ICS or corporate host downloads a file with an executable MIME type (e.g., application/x-dosexec), a suspicious script extension (.ps1, .vbs), or a low-prevalence hash. The download originates from a low-reputation, uncategorized, or historically uncommon source domain for that file type.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internet gateway proxy servers, ICS network gateways, and local download folders on engineering workstations and HMIs.",
            "action": "1. Symbolic Logic: From `files.log`, identify files with executable MIME types (e.g., 'application/x-dosexec') or script extensions. Extract the file hash (md5, sha1) and query a file reputation service (e.g., VirusTotal API). Alert if the number of positive detections is > 1. Correlate the network event via connection UID to `http.log` to check the source 'host' and 'referrer' against threat intelligence. Correlate the network event with host logs (Sysmon Event ID 11) to confirm the file write on the endpoint.\n2. Statistical Method: For each source domain ('host' in `http.log`), baseline the typical MIME types of files it serves over 30 days. Alert if a domain that normally serves 'text/html' suddenly provides a file of type 'application/x-dosexec'. For each downloaded file in `files.log` with available content, calculate its Shannon entropy. Alert if a file's entropy is > 3 standard deviations from the mean for its given MIME type, as this can indicate a packed or encrypted payload.\n3. Machine Learning: Train a binary classification model (e.g., Gradient Boosting) to predict malicious downloads. Use features from `http.log` (host reputation, URI length, URI entropy), `files.log` (MIME type, file size, file entropy), and externally enriched data (file hash reputation, domain age). Prioritize alerts with a model probability score greater than 0.80 for analyst review."
          },
          {
            "description": "An outbound HTTP/S request from an ICS-related host contains a User-Agent string that is anomalous. Anomalies include strings matching known-malicious signatures, representing an outdated/vulnerable browser version, being statistically rare for the environment, being empty or malformed, or mismatching the parent process that generated the traffic.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 3 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, HMIs, corporate network internet gateway, ICS network gateways.",
            "action": "1. Symbolic Logic: From `http.log`, extract the `user_agent` and connection 4-tuple (`id.orig_h`, `id.orig_p`, `id.resp_h`, `id.resp_p`). Match the `user_agent` against a threat intelligence list of malicious strings and a watchlist of vulnerable browser versions. Join with `Sysmon Event ID 3` logs on the IP/port. Alert if the `user_agent` is inconsistent with the process `Image` (e.g., a 'curl' User-Agent for a 'chrome.exe' process).\n2. Statistical Method: Establish a baseline of all `user_agent` strings seen in `http.log` over a 30-day period. Alert if a host begins using a `user_agent` that is in the bottom 5th percentile of frequency for its peer group (e.g., other HMIs). Calculate the length of all User-Agent strings and alert on User-Agents whose length is a statistical outlier (e.g., < 1st percentile or > 99th percentile), as this can indicate non-standard clients.\n3. Machine Learning: Train an autoencoder model on the character-level representation of all normal User-Agent strings seen over a 30-day period. Feed all new User-Agent strings into the trained model to generate a reconstruction error score. A high reconstruction error indicates a significant deviation from learned normal patterns; flag these User-Agents as anomalies for investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]