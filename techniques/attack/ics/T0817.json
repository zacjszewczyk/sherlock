[
  {
    "information_requirement": "Has an adversary compromised a host in our ICS environment via a drive-by attack? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0817",
        "name": "Drive-by Compromise",
        "evidence": [
          {
            "description": "A web browser process (e.g., `chrome.exe`, `iexplore.exe`, `firefox.exe`, `msedge.exe`) on an engineering workstation or HMI spawns an unauthorized or unusual child process, such as a command shell (`cmd.exe`), script interpreter (`powershell.exe`, `wscript.exe`, `cscript.exe`), or an unknown executable, not observed in established baselines.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, Human-Machine Interface (HMI) terminals, any host with web browsing capability within the control or corporate environment.",
            "action": "1. **Symbolic Logic:** Continuously monitor Windows Event ID 4688 for process creation events where the `ParentProcessName` is a known web browser (e.g., `chrome.exe`, `firefox.exe`, `iexplore.exe`, `msedge.exe`) and the `NewProcessName` is a known command shell or script interpreter (e.g., `cmd.exe`, `powershell.exe`, `wscript.exe`, `cscript.exe`). Additionally, flag `CommandLine` arguments containing base64 encoding, suspicious download cradles (e.g., `Invoke-WebRequest`, `certutil -urlcache`), or execution from temporary directories (e.g., `%TEMP%`).\n2. **Statistical Method:** Establish a baseline of legitimate `NewProcessName` and `CommandLine` combinations for each `ParentProcessName` (browser) over a 30-day period for all monitored hosts. Generate an alert if a `NewProcessName` or `CommandLine` combination is observed that falls below the 1st percentile of historical frequency for that specific browser, or if its `NewProcessName` count deviates by more than 3 standard deviations from the host's 7-day rolling average.\n3. **Machine Learning:** Implement a process execution classification model (e.g., using a Random Forest or SVM) trained on historical `ParentProcessName`, `NewProcessName`, and `CommandLine` features. The model should identify anomalous child process spawns from web browsers, prioritizing alerts from the model for review based on a confidence score exceeding 0.8."
          },
          {
            "description": "Network traffic from an ICS or supporting corporate host exhibits DNS queries or direct connections to domains identified as known malicious (IOC match), newly registered (e.g., < 30 days old), or algorithmically generated (high entropy DGA score).",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, ICS network gateways, corporate internet gateway.",
            "action": "1. **Symbolic Logic:** Continuously ingest Zeek `dns.log` and `conn.log`. Cross-reference all queried domains in `dns.log` against up-to-date threat intelligence feeds (e.g., MISP, OTX) for known malicious or suspicious domains. For domains not on these lists, enrich with WHOIS data to calculate the domain's age and flag any domains registered within the last 30 days. Correlate suspicious DNS lookups with successful connections in `conn.log` to confirm if a connection was established.\n2. **Statistical Method:** Calculate the Shannon entropy score for all unique domains observed in `dns.log`. Alert on domains with an entropy score exceeding a dynamically calculated threshold (e.g., the 95th percentile of entropy scores for the environment), indicative of DGA. Additionally, monitor the frequency of distinct DNS queries per host and alert on hosts showing a sudden surge (e.g., 3 standard deviations above their 7-day rolling average) in distinct domain queries.\n3. **Machine Learning:** Apply unsupervised clustering (e.g., k-means, DBSCAN) to group domains based on their lexical features (e.g., length, character distribution, TLD) and entropy scores. Investigate clusters that are small, isolated, and exhibit high entropy, as these may represent novel DGA families. Additionally, use a time-series anomaly detection model on DNS query volume and destination diversity per host to identify sudden, unexplained spikes in activity from specific hosts."
          },
          {
            "description": "A web browser on an ICS or supporting corporate host downloads a file with an executable MIME type (e.g., `application/x-dosexec`, `application/octet-stream`) or a script extension (`.exe`, `.dll`, `.ps1`, `.vbs`, `.js`) from a low-reputation, uncategorized, or historically uncommon source domain.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internet gateway proxy servers, ICS network gateways.",
            "action": "1. **Symbolic Logic:** Analyze Zeek `files.log` to identify all files transferred over the network. Filter for files with `mime_type` indicating executables (`application/x-dosexec`, `application/octet-stream`) or `filename` extensions (`.exe`, `.dll`, `.ps1`, `.vbs`, `.js`). For each identified file, use the `conn_uids` field to pivot to the corresponding Zeek `http.log` entry. Analyze the `host` and `referrer` fields to determine the download source. Flag downloads where the source domain is present in a threat intelligence blacklist or is categorized as 'uncategorized' by web filtering services.\n2. **Statistical Method:** Establish a 90-day baseline of `host` domains from which executable or script files are legitimately downloaded. Alert on downloads originating from `host` domains not observed in the top 99th percentile of this baseline. Additionally, calculate the percentile rank of the downloaded file size against historical downloads of similar `mime_type` and alert on significant deviations (e.g., >95th percentile or <5th percentile, indicating abnormal payloads).\n3. **Machine Learning:** Train a binary classification model (e.g., Logistic Regression or Gradient Boosting) using features from `files.log` (e.g., `mime_type`, `file_size`, `md5_md` or other hashes) and `http.log` (e.g., `host` reputation score, `uri_length`, `user_agent`). The model should identify potentially malicious file downloads, prioritizing downloads scoring above a certain probability threshold (e.g., 0.75) for analyst review."
          },
          {
            "description": "Outbound HTTP/S traffic originating from an ICS or supporting corporate host contains a User-Agent string that is either known malicious, associated with an outdated/vulnerable browser version, or statistically rare (e.g., in the bottom 5th percentile of observed User-Agents) for the environment.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, HMIs, corporate network internet gateway, ICS network gateways.",
            "action": "1. **Symbolic Logic:** Extract all `user_agent` strings from Zeek `http.log`. Create rules to alert on `user_agent` strings that exactly match known malicious User-Agents from threat intelligence feeds or patterns indicating significantly outdated and vulnerable browser versions (e.g., specific old browser versions, generic HTTP client strings like 'Python-urllib', 'curl').\n2. **Statistical Method:** Calculate the frequency of all unique `user_agent` strings per host over a 30-day period. Alert on `user_agent` strings observed from a host that fall below the 5th percentile of overall environmental frequency or exhibit a sudden, statistically significant increase (e.g., 3 standard deviations above the mean) in occurrences from a single host where it was previously rare. Additionally, compute the Shannon entropy of `user_agent` strings and flag those in the top 95th percentile.\n3. **Machine Learning:** Utilize an unsupervised anomaly detection algorithm (e.g., Isolation Forest or One-Class SVM) on `user_agent` strings, considering features such as length, entropy, and character distribution, to identify statistically anomalous User-Agents that deviate significantly from the learned normal patterns. Cluster `user_agent` strings to identify small, unusual groups that may represent custom or exploit-kit specific agents."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]