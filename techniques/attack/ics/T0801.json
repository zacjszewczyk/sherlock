[
  {
    "information_requirement": "Has an unauthorized entity accessed or queried process state data from key ICS components? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0801",
        "name": "Monitor Process State",
        "evidence": [
          {
            "description": "A network connection from an unapproved source IP or user account makes an ICS protocol read request (e.g., Modbus Function Code 0x03/0x04, DNP3 Function Code 0x01/0x02) to a critical asset like a Data Historian or PLC. Alternatively, an approved source initiates a volume of read requests or transfers a data volume that exceeds its statistically established high-water mark (e.g., 99th percentile) over a 24-hour period.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek opc.log",
              "Windows Event ID 4624",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data Historian servers (Level 3), Process Control Network (PCN) gateways (Level 3/2), PLC subnets (Level 1/2), HMI/EWS subnets (Level 2.5/2), DMZ between IT and OT networks.",
            "action": "1. Symbolic Logic: Step 1: Maintain an allow-list (e.g., SIEM lookup table) of (Source IP, User Account, Destination Asset IP) tuples authorized for ICS read operations. Step 2: Create a SIEM rule to monitor Zeek ICS protocol logs (modbus.log, dnp3.log, opc.log) for read function codes/services. Step 3: Trigger an alert if a read request's (source_ip, user, destination_ip) tuple is not present in the allow-list. Step 4: For enrichment, automatically correlate the source IP from the alert with Windows logon events (Event ID 4624) and object access events (Event ID 4663) on the destination asset that occurred within 5 minutes of the network event. 2. Statistical Method: Step 1: For each authorized source IP/user, create a 30-day rolling baseline of two daily metrics from Zeek logs: (a) the total count of ICS read function calls, and (b) the total bytes transferred (orig_bytes + resp_bytes) to ICS assets. Step 2: Calculate the 99th percentile for both metrics for each source. Step 3: Create a SIEM rule to alert if either the daily read count or daily byte volume for an approved source exceeds its 99th percentile threshold, indicating anomalous collection volume. 3. Machine Learning: Goal: Detect anomalous ICS read requests using unsupervised anomaly detection. Model: Isolation Forest. Step 1 (Features): From Zeek logs, engineer features for each request: source_ip, destination_ip, destination_port, ics_function_code, data_transfer_size, hour_of_day, day_of_week. Convert categorical features to numerical representations. Step 2 (Execution): Train the model on historical 'known good' traffic. Run live traffic through the trained model to generate an anomaly score for each request. Step 3 (Interpretation): Alert on requests with a high anomaly score. A high score indicates the request is a rare combination of features (e.g., a normal user reading an unusual tag at 3 AM from a new workstation) and warrants investigation."
          },
          {
            "description": "An ICS host, such as an HMI or EWS, initiates connections to an anomalously high number of unique ICS devices or ports within a short time frame, indicating network reconnaissance or sweeping behavior. This includes connections to devices outside its documented operational zone.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek opc.log",
              "Windows Event ID 5156",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) (Level 2), Human-Machine Interface (HMI) systems (Level 2), Level 2/3 network boundary devices, PLC/RTU subnets (Level 1/2), ICS application servers (Level 2.5).",
            "action": "1. Symbolic Logic: Step 1: Maintain a network communication map or allow-list defining which source hosts (e.g., EWS) are allowed to communicate with which destination ICS devices and on which ports. Step 2: Create a SIEM rule to monitor Zeek conn.log for connections on ICS-related ports (e.g., 502, 20000, 4840). Step 3: Trigger an alert if a connection is initiated from a source to a destination that is not on the approved communication map. Step 4: Correlate alerts with process creation events (Windows Event ID 4688) on the source host just before the connection to identify the responsible process (e.g., nmap.exe, powershell.exe). 2. Statistical Method: Step 1: For each ICS host (source IP), use Zeek conn.log to calculate a 30-day baseline for the count of unique destination IPs it connects to on ICS ports over a 15-minute rolling window. Step 2: Calculate the 99th percentile for this unique destination count for each source host. Step 3: Create a SIEM rule to alert when any source host's count of unique destination IPs in a 15-minute window exceeds its 99th percentile, indicating a potential network scan. 3. Machine Learning: Goal: Identify hosts exhibiting anomalous communication patterns compared to their peers. Model: DBSCAN clustering. Step 1 (Features): For each host, create a feature vector representing its communication patterns over a 1-hour window (e.g., set of destination ports, set of destination subnets, entropy of destination IPs). Step 2 (Execution): Run the DBSCAN algorithm on the feature vectors of all hosts. Hosts that are part of a dense cluster exhibit 'normal' behavior for that group. Step 3 (Interpretation): Alert on hosts that are marked as 'noise' points by DBSCAN. These are hosts whose communication patterns do not fit any established group profile, indicating anomalous behavior like scanning across subnets it normally does not interact with."
          },
          {
            "description": "A successful remote interactive logon (e.g., RDP) to a critical ICS host like an HMI or EWS exhibits multiple anomalous characteristics (e.g., unusual geolocation, off-hours timing, first-time access for that user/host pair). This logon is immediately followed by a burst of ICS read requests from that host to multiple field devices (PLCs, RTUs).",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4648",
              "Zeek conn.log",
              "Zeek rdp.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek opc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs) (Level 2), Engineering Workstations (EWS) (Level 2), ICS Application Servers (Level 2.5), Jump Servers (Level 3/2.5), Active Directory Domain Controllers (Level 3).",
            "action": "1. Symbolic Logic: Step 1: Define rules for a 'high-risk logon' on critical ICS hosts (HMIs, EWS) using Windows Event ID 4624 (Logon Type 10). A high-risk logon is one that matches conditions like: source IP is from a non-standard country/ASN, logon time is outside 8am-6pm business hours, or the (user, host) pair is seen for the first time in 90 days. Step 2: Upon detecting a high-risk logon, trigger a secondary search. Step 3: Monitor Zeek ICS logs (modbus.log, dnp3.log, opc.log) for any read requests originating from the host that had the high-risk logon, occurring within 10 minutes after the logon. Step 4: Alert if more than 3 unique destination PLCs/RTUs are queried in that 10-minute window. 2. Statistical Method: Step 1: For each critical ICS host, establish a 30-day baseline for the number of unique destination devices queried with ICS read requests within a 10-minute window following a successful remote logon (Event ID 4624, Type 10). Step 2: Calculate the 95th percentile for this count. Step 3: Create a SIEM rule that, upon a successful remote logon, tracks the subsequent read requests from that host. Step 4: Alert if the number of unique devices queried within 10 minutes exceeds the 95th percentile. This threshold is lower because the event is already conditioned on a logon, making any subsequent scanning more significant. 3. Machine Learning: Goal: Classify logon sessions as benign or malicious-precursor. Model: Random Forest classifier. Step 1 (Features): For each logon session, create a feature vector including: logon_hour, logon_day_of_week, source_ip_geolocation, is_first_time_user_on_host (boolean), AND post-logon features like unique_dest_ips_in_5_mins, total_read_requests_in_5_mins, and entropy_of_dest_ports_in_5_mins. Step 2 (Execution): Train the model on labeled historical data (past incidents). Deploy the model to score new, live logon sessions. Step 3 (Interpretation): Alert when the model classifies a session with a high probability of being a 'malicious-precursor'. The model output can also provide feature importance, telling the analyst why it was flagged (e.g., 'high-risk due to off-hours login combined with high fan-out to PLCs')."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]