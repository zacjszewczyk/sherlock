[
  {
    "information_requirement": "Is an adversary discovering detailed information about our remote ICS systems and their peripherals? (PIR)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0888",
        "name": "Remote System Information Discovery",
        "evidence": [
          {
            "description": "An unknown or previously unobserved source IP address initiates a high volume of requests for ICS device identification attributes (e.g., Modbus function code 43 - Read Device Identification, DNP3 Object Group 10 Variation 0 - Device Attributes, EtherNet/IP Identity Object services) to more than 5 unique ICS devices (e.g., PLCs, RTUs, IEDs, Intelligent Electronic Devices) within a 60-second window. Alternatively, an authorized source IP exhibits a statistically significant surge in such requests, exceeding its 95th percentile of historical activity for both total request count and the number of unique destination ICS devices contacted within any 5-minute interval, indicating a deviation from its established baseline of periodic, low-volume polling.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT/ICS Network Segments (e.g., Process Control Networks, Safety Instrumented System Networks), DMZ/Industrial Demilitarized Zone (IDMZ) gateways, SCADA Server subnets, Engineering Workstation subnets, Data Historian networks.",
            "action": "1. **Symbolic Logic (Unauthorized Communications):**\n    *   **Step 1 (Identify Discovery Requests):** From `Zeek modbus.log`, `Zeek dnp3.log`, and `Zeek enip.log`, filter for specific ICS discovery function codes and services:\n        *   `modbus.log`: `function_code = 43` (Read Device Identification)\n        *   `dnp3.log`: `object_group = 10` AND `variation = 0` (Device Attributes)\n        *   `enip.log`: `service = \"List Identity\"` or `service = \"Get_Attribute_All\"` (Identity Object)\n    *   **Step 2 (Identify Source/Destination):** For each identified discovery request, extract the `id.orig_h` (source IP) and `id.resp_h` (destination IP).\n    *   **Step 3 (Asset Whitelisting Check):** Compare the `id.orig_h` against a predefined whitelist of authorized ICS management systems (e.g., SCADA servers, Engineering Workstations). Simultaneously, compare the `id.resp_h` against a whitelist of authorized ICS assets expected to be polled.\n    *   **Step 4 (Alerting - Unauthorized Source/Destination):** Generate an immediate, high-priority alert if:\n        *   The `id.orig_h` is *not* present in the authorized source whitelist.\n        *   The `id.resp_h` is *not* present in the authorized destination whitelist for the given source.\n    *   **Step 5 (Alerting - High Volume from Unknown):** Additionally, if an `id.orig_h` not in the authorized source whitelist initiates discovery requests to more than 5 unique `id.resp_h` within a 60-second sliding window, generate a high-priority alert, indicating rapid enumeration by an unknown entity.\n    *   **Analyst Action:** Investigate the source IP for compromise or unauthorized presence on the OT network. Block the source IP if confirmed malicious. Review the targeted ICS devices for any configuration changes or further compromise attempts.\n2. **Statistical Method (Volume Anomaly Detection):**\n    *   **Step 1 (Baseline Establishment):** For each authorized `id.orig_h` (SCADA servers, EWS) identified in Step 1 of Symbolic Logic, establish a rolling 7-day baseline. Calculate the average count of ICS discovery requests (`modbus.log`, `dnp3.log`, `enip.log` discovery events) per 5-minute interval and the average count of unique `id.resp_h` contacted per 5-minute interval. Compute the 95th percentile for both metrics for each source IP.\n    *   **Step 2 (Real-time Monitoring):** Continuously monitor current ICS discovery requests (as defined in Symbolic Logic Step 1). For each authorized `id.orig_h`, aggregate the count of discovery requests and unique `id.resp_h` within a 5-minute sliding window.\n    *   **Step 3 (Anomaly Detection):** Compare the current 5-minute aggregated counts against the established 95th percentile baselines for the respective `id.orig_h`.\n    *   **Step 4 (Alerting):** Generate a medium-priority alert if *both* the current request count *and* the number of unique destinations for an authorized `id.orig_h` exceed their respective 95th percentile thresholds within the same 5-minute window.\n    *   **Analyst Action:** Review the specific `id.orig_h` for unusual activity, potential compromise, or misconfiguration. Verify if a legitimate operational change accounts for the surge. Correlate with user login activity (Windows Event ID 4624) on the source system if applicable.\n3. **Machine Learning (Time-Series Anomaly Detection):**\n    *   **Step 1 (Data Preparation):** Aggregate the total count of ICS discovery requests (from `modbus.log`, `dnp3.log`, `enip.log` discovery events) per source IP (`id.orig_h`) into 1-minute time windows over at least 30 days of historical data.\n    *   **Step 2 (Model Training):** Train a time-series anomaly detection algorithm (e.g., Isolation Forest, ARIMA model, or Exponential Smoothing with Anomaly Detection) on this historical data for each `id.orig_h`. The model learns the normal patterns and expected ranges of discovery requests over time.\n    *   **Step 3 (Real-time Prediction & Scoring):** In real-time, feed new 1-minute aggregated counts of discovery requests for each `id.orig_h` into its trained model. The model will output an anomaly score (e.g., 0-1, where 1 is highly anomalous) or a prediction error if using forecasting models.\n    *   **Step 4 (Alerting):** Generate a medium-priority alert if the anomaly score for any `id.orig_h` exceeds a predefined threshold (e.g., 0.7 for Isolation Forest) or if the prediction error significantly deviates (e.g., >3 standard deviations from the mean prediction error) from historical norms for a sustained period (e.g., 3 consecutive 1-minute intervals).\n    *   **Analyst Action:** Investigate the source IP and the nature of the detected anomaly. Look for sudden spikes, sustained high volumes, or unusual periodicity in discovery requests. Correlate with other security events and operational logs."
          },
          {
            "description": "On an Engineering Workstation (EWS) or similar OT host, a new or un-whitelisted process (identified by process name, file path, or hash) is observed via Windows Event ID 4688 (Process Creation). Within 30 seconds of its creation, this process initiates network connections (observed in `Zeek conn.log`) to more than 3 unique ICS devices (e.g., PLCs, RTUs, IEDs) on common ICS ports (e.g., TCP/502 - Modbus, TCP/20000 - DNP3, TCP/44818 - EtherNet/IP). This activity is further supported if subsequent `Zeek modbus.log`, `Zeek dnp3.log`, or `Zeek enip.log` entries show these connections utilizing information-gathering function codes (e.g., Modbus FC 43, DNP3 Object Group 10 Variation 0, EtherNet/IP Identity Object).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interface (HMI) Workstations, SCADA Servers, Data Historians, and Jump Servers/Bastion Hosts within the Industrial Demilitarized Zone (IDMZ) or OT network segments.",
            "action": "1. **Symbolic Logic (Unauthorized Process/Network Activity):**\n    *   **Step 1 (Process Whitelisting):** Maintain a comprehensive whitelist of authorized process names, file paths, and SHA256 hashes for all legitimate ICS software and utilities expected to run on EWS and other OT hosts.\n    *   **Step 2 (Monitor Process Creation):** Monitor Windows Event ID 4688 for all process creation events on EWS and OT hosts. Extract `Process Name`, `New Process Path`, and `Process Command Line`.\n    *   **Step 3 (Identify Unauthorized Process):** Alert immediately if a process is executed that is *not* present in the established whitelist. This is a high-priority alert.\n    *   **Step 4 (Correlate with Network Activity):** For any newly created process (whitelisted or not), join its `ProcessId` and `EventTime` from Windows Event ID 4688 with `Zeek conn.log` entries where `id.orig_h` matches the host IP and `ts` (timestamp) is within 30 seconds *after* the `EventTime`.\n    *   **Step 5 (Identify ICS Connections):** Filter these correlated `Zeek conn.log` entries for connections where `id.resp_p` (destination port) is an ICS-specific port (e.g., TCP/502, TCP/20000, TCP/44818).\n    *   **Step 6 (Count Unique ICS Destinations):** Count the `COUNT_DISTINCT(id.resp_h)` for these ICS-specific connections initiated by the new process.\n    *   **Step 7 (Alerting - Rapid ICS Enumeration):** Generate a high-priority alert if a new process (especially an un-whitelisted one) initiates connections to more than 3 unique ICS destination IPs within 30 seconds of its creation. Further enrich the alert by checking `Zeek modbus.log`, `dnp3.log`, `enip.log` for discovery function codes from these connections.\n    *   **Analyst Action:** Isolate the EWS. Investigate the unauthorized process, its origin, and any associated user activity (Windows Event ID 4624). Examine targeted ICS devices for compromise.\n2. **Statistical Method (Anomalous New Process Network Behavior):**\n    *   **Step 1 (Baseline New Process Network Activity):** For legitimate, whitelisted processes on EWS, establish a baseline of typical network activity within 60 seconds of their creation (e.g., average unique destination IPs, average unique ports, average bytes transmitted). Calculate the 99th percentile for `COUNT_DISTINCT(id.resp_h)` and `COUNT_DISTINCT(id.resp_p)` for new processes.\n    *   **Step 2 (Monitor New Process Activity):** When a new process (from Windows Event ID 4688) is created, collect its network activity from `Zeek conn.log` for the subsequent 60 seconds, specifically focusing on connections to ICS ports.\n    *   **Step 3 (Calculate Metrics):** Calculate the number of unique destination IPs (`COUNT_DISTINCT(id.resp_h)`) and unique destination ports (`COUNT_DISTINCT(id.resp_p)`) for the new process's ICS-related connections.\n    *   **Step 4 (Anomaly Detection):** Compare these real-time metrics against the established 99th percentile baselines.\n    *   **Step 5 (Alerting):** Generate a medium-priority alert if *both* the unique destination IPs count *and* unique destination ports count exceed their respective 99th percentile thresholds for any new process, especially if it's an un-whitelisted process.\n    *   **Analyst Action:** Investigate the process and its network activity. Determine if the activity is legitimate (e.g., new software installation, patch) or indicative of malicious behavior. Correlate with other host and network indicators.\n3. **Machine Learning (Supervised Process Classification):**\n    *   **Step 1 (Feature Engineering):** For each process creation event (Windows Event ID 4688), extract features such as `Process Name`, `Parent Process Name`, `Command Line`, `User`, `Logon Type` (from Windows Event ID 4624 if correlated). Enrich these with network features from `Zeek conn.log` within 60 seconds post-creation: `COUNT_DISTINCT(id.resp_h)`, `COUNT_DISTINCT(id.resp_p)`, `total_bytes_out`, `protocol_distribution`, and the presence of connections to known ICS ports.\n    *   **Step 2 (Data Labeling):** Manually label historical process activity as 'benign' (e.g., standard operational software, authorized updates) or 'malicious/suspicious' (e.g., observed malware, unauthorized tools).\n    *   **Step 3 (Model Training):** Train a supervised machine learning model (e.g., Random Forest Classifier, Gradient Boosting Machine) on the labeled dataset. The model learns to distinguish between benign and malicious process behaviors based on the engineered features.\n    *   **Step 4 (Real-time Classification):** In real-time, extract features for new process creation events and feed them into the trained model. The model will output a probability score indicating the likelihood of the process being malicious.\n    *   **Step 5 (Alerting):** Generate a high-priority alert for any process classified with a 'malicious' probability score exceeding a predefined threshold (e.g., >0.8), indicating a high likelihood of unauthorized or malicious activity.\n    *   **Analyst Action:** Review the alerted process, its command line, and its network connections. Use the model's feature importance to understand why it was flagged. Initiate incident response procedures if confirmed malicious."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]