[
  {
    "information_requirement": "Is an adversary discovering detailed information about our remote ICS systems and their peripherals? (PIR)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0888",
        "name": "Remote System Information Discovery",
        "evidence": [
          {
            "description": "A source IP address, not present on a pre-defined whitelist of authorized OT management systems, initiates ICS discovery protocol requests (e.g., Modbus function code 43, DNP3 Object Group 10, EtherNet/IP Identity Object services) to more than 5 unique ICS device IPs within a 60-second window. Alternatively, an authorized source IP exceeds its own 95th percentile historical baseline for both the total count of discovery requests and the number of unique destination devices contacted within any 5-minute interval, indicating a deviation from its established periodic polling behavior.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT/ICS Network Segments (e.g., Process Control Networks, Safety Instrumented System Networks), DMZ/Industrial Demilitarized Zone (IDMZ) gateways, SCADA Server subnets, Engineering Workstation subnets, Data Historian networks.",
            "action": "1. Symbolic Logic (Whitelist Violation and Sweep Detection):\n    *   Step 1 (Filter Discovery Traffic): From Zeek logs (modbus.log, dnp3.log, enip.log), filter for records matching ICS discovery functions: modbus.log where func='Read Device Identification', dnp3.log where object_group=10, enip.log where command='ListIdentity'.\n    *   Step 2 (Check Source Authorization): For each discovery event, compare the source IP (id.orig_h) against a maintained asset list of authorized management hosts (e.g., EWS, SCADA servers). \n    *   Step 3 (Alert on Unauthorized Source): If the source IP is not on the authorized list, generate a high-priority alert. Enrich the alert with asset inventory data for the destination device (id.resp_h).\n    *   Step 4 (Detect Sweeps): For any single unauthorized source IP, count the number of unique destination IPs (id.resp_h) it contacts with discovery requests within a 60-second sliding window. \n    *   Step 5 (Alert on Sweep): If the count of unique destinations exceeds 5, escalate the alert priority to critical, indicating a network-wide discovery sweep. \n    *   Analyst Action: Immediately investigate the unauthorized source IP. If confirmed malicious, block the IP at network boundaries and inspect targeted ICS devices for signs of further compromise.\n\n2. Statistical Method (Authorized Host Anomaly Detection):\n    *   Step 1 (Establish Baselines): For each authorized management host IP, create a historical baseline from the past 30 days of Zeek logs. Group data by source IP, hour-of-day, and day-of-week. For each group, calculate the 95th percentile for two metrics in a 5-minute window: (a) total count of discovery requests and (b) count of unique destination IPs contacted.\n    *   Step 2 (Monitor Real-time Activity): In real-time, aggregate the same two metrics (total requests, unique destinations) for each authorized source IP over a 5-minute sliding window.\n    *   Step 3 (Detect Deviations): Compare the current 5-minute counts for each host against its corresponding baseline (correcting for time-of-day and day-of-week). \n    *   Step 4 (Alert on Anomaly): Generate a medium-priority alert if, for a single authorized host, both the total request count and the unique destination count exceed their 95th percentile thresholds in the same 5-minute window.\n    *   Analyst Action: Investigate the anomalous host. Correlate the activity with user logins (Windows Event ID 4624) on the system to determine if the behavior was user-driven. Check for new software, scripts, or signs of compromise on the host.\n\n3. Machine Learning (Time-Series Anomaly Detection):\n    *   Step 1 (Prepare Time-Series Data): For each authorized source IP, create a time-series dataset by aggregating the total count of ICS discovery requests into 1-minute intervals. Include features for protocol type (Modbus, DNP3, ENIP), hour-of-day, and day-of-week.\n    *   Step 2 (Train Model): Train a time-series anomaly detection model (e.g., Isolation Forest, LSTM Autoencoder) for each source IP using at least 30 days of historical data. The model learns the normal rhythm and volume of discovery activity.\n    *   Step 3 (Score Real-time Data): In real-time, feed new 1-minute data points for each host into its trained model. The model will output an anomaly score (e.g., a value from 0 to 1).\n    *   Step 4 (Alert on High Score): Generate a medium-priority alert if a host's anomaly score exceeds a statistically determined threshold (e.g., > 0.8) for more than two consecutive minutes, indicating a sustained deviation from normal behavior.\n    *   Analyst Action: Review the activity that triggered the high anomaly score. Examine the specific protocol and destination devices involved. Use the model's output to pinpoint the exact time of the anomaly and correlate with other available host and network logs."
          },
          {
            "description": "A process is created on an OT host (e.g., EWS, HMI) and observed via Windows Event ID 4688. The process's file hash is not present in a pre-approved software whitelist. Within 30 seconds of its creation, this process initiates network connections (observed in Zeek conn.log) to more than 3 unique ICS device IPs on standard ICS ports (e.g., 502, 20000, 44818). This is strongly corroborated if subsequent Zeek protocol logs (modbus.log, dnp3.log) show ICS discovery function codes originating from these connections.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interface (HMI) Workstations, SCADA Servers, Data Historians, and Jump Servers/Bastion Hosts within the Industrial Demilitarized Zone (IDMZ) or OT network segments.",
            "action": "1. Symbolic Logic (Un-whitelisted Process with Network Scan):\n    *   Step 1 (Monitor Process Creation): On critical OT hosts, monitor Windows Event ID 4688 for new process creation events. Extract the ProcessId, file path, file hash (if available via Sysmon or EDR), and creation timestamp.\n    *   Step 2 (Check Process Whitelist): Compare the process file hash or path against a maintained whitelist of approved applications for that host type.\n    *   Step 3 (Correlate Host to Network): For any process not on the whitelist, use its creation timestamp and host IP to query Zeek conn.log for all connections where id.orig_h matches the host IP and the connection timestamp is within 30 seconds of the process creation time.\n    *   Step 4 (Filter for ICS Discovery): From the correlated network connections, filter for those where the destination port (id.resp_p) is a common ICS port (e.g., 502, 20000, 44818).\n    *   Step 5 (Alert on Scan Behavior): If the un-whitelisted process connects to more than 3 unique ICS destination IPs (id.resp_h) on ICS ports, generate a high-priority alert. Enrich the alert with the process name, command line, user context (from Windows Event ID 4624), and the list of targeted ICS devices.\n    *   Analyst Action: Isolate the affected host from the network. Initiate digital forensics to analyze the malicious process. Review targeted ICS devices for any unauthorized configuration changes or commands.\n\n2. Statistical Method (Anomalous New Process Network Behavior):\n    *   Step 1 (Baseline Legitimate Processes): For each whitelisted process (e.g., `Studio5000.exe`), establish a baseline of its typical network behavior during the first 60 seconds after launch. Using historical data (Windows Event ID 4688 correlated with Zeek conn.log), calculate the 99th percentile for the count of unique destination IPs contacted on ICS ports.\n    *   Step 2 (Monitor New Processes): In real-time, when any new process is created (Event ID 4688), monitor its network activity for the first 60 seconds.\n    *   Step 3 (Calculate Network Metrics): For each new process instance, count the number of unique destination IPs it connects to on ICS ports within that 60-second window.\n    *   Step 4 (Detect Anomaly): If the process is whitelisted, compare its unique destination count to its specific 99th percentile baseline. If the process is not whitelisted, compare its count to a generic, low threshold (e.g., 3). \n    *   Step 5 (Alert on Deviation): Generate a medium-priority alert if a whitelisted process exceeds its baseline or an un-whitelisted process exceeds the generic threshold. \n    *   Analyst Action: Investigate the process activity. For a whitelisted process, determine if a recent project change or software update explains the behavior. For an un-whitelisted process, treat as suspicious and investigate its origin.\n\n3. Machine Learning (Supervised Process Classification):\n    *   Step 1 (Feature Engineering): For historical process creation events (Windows Event ID 4688), create a feature set. Host features: Parent Process Name, command line argument count/entropy. Network features (from the first 60 seconds of activity in Zeek): count of unique destination IPs, count of unique destination ports, total bytes sent, one-hot encoded vector of protocols used (TCP, UDP, Modbus, DNP3, etc.).\n    *   Step 2 (Label Data): Using findings from past incidents and threat intelligence, label each historical process event as 'benign-discovery' or 'malicious-discovery'.\n    *   Step 3 (Train Classifier): Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on the labeled feature set. The model will learn the patterns that distinguish legitimate from malicious discovery activity.\n    *   Step 4 (Classify in Real-time): For each new process creation event, extract the same feature set in real-time and feed it to the trained model for classification.\n    *   Step 5 (Alert on Malicious Classification): If the model classifies a process as 'malicious-discovery' with a confidence score above a set threshold (e.g., 0.9), generate a high-priority alert. Include the top features that contributed to the model's decision to aid analysis.\n    *   Analyst Action: Immediately begin incident response on the host where the process was detected. The model's feature importance output can guide the investigation (e.g., 'flagged due to high number of unique DNP3 destinations from an unusual parent process')."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]