[
  {
    "information_requirement": "Is an adversary executing commands on critical ICS assets via a command-line interface?",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0807",
        "name": "Command-Line Interface",
        "evidence": [
          {
            "description": "A parent process associated with a known ICS management shell (e.g., cmd.exe, powershell.exe, or vendor-specific CLIs like Rockwell's FactoryTalk View SE Client.exe or Siemens' SIMATIC WinCC.exe) on a critical ICS asset spawns a child process (e.g., net.exe, ipconfig.exe, whoami.exe, certutil.exe, bitsadmin.exe) that is either not on a pre-defined whitelist for that parent/host combination, has not been observed in the last 90 days, or represents a statistically rare occurrence (e.g., below the 0.01st percentile of all child processes for that parent over a 30-day period).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers (PCS), Data Gateways, Application Servers within the Process Control Network (PCN) and Manufacturing Zone (MZ)",
            "action": "1. Pre-requisite: Ensure Windows Event ID 4688 (Process Creation) with command-line auditing is enabled on all critical ICS assets. \n2. Symbolic Logic (Whitelisting): Create and maintain a strict whitelist of allowed parent-child process relationships for critical ICS assets. Implement a SIEM rule to generate a high-severity alert for any process creation event where the parent process is a known shell but the child process is not on the explicit whitelist for that parent-host pair. \n3. Statistical (Baseline Deviation): For each ICS host, create a 90-day rolling baseline of parent-child process relationships from Windows Event ID 4688. For each parent process, calculate the execution frequency of all its child processes. Generate an alert when a child process is spawned that has either never been seen in the baseline or whose execution frequency falls into a low percentile (e.g., less than the 0.01st percentile), indicating an anomalous execution. \n4. Machine Learning (Time Series Anomaly): For each critical host, model the daily count of unique child processes spawned by each shell process as a time series. Apply a seasonal-hybrid anomaly detection algorithm (e.g., SARIMA) to account for regular operational cycles (e.g., daily/weekly batch processes). Alert on any data point that is flagged as a statistical anomaly (e.g., a count exceeding 3 standard deviations from the forecast), suggesting an abnormal burst of diverse command executions."
          },
          {
            "description": "A successful remote interactive logon (e.g., RDP, indicated by Windows Event ID 4624 with Logon Type 10) to a critical ICS asset from an untrusted or unexpected network segment (identified via Zeek conn.log) is followed within a short time window (e.g., 60 seconds) by command-line process creation (Windows Event ID 4688) under the same logon session. The activity is considered anomalous if the command has not been executed by that user from that source subnet in the last 90 days, or if the logon/execution occurs outside of pre-defined operational hours or maintenance windows.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS DMZ/Perimeter, Remote Access Gateways, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Jump Servers, Terminal Servers within the ICS network.",
            "action": "1. Pre-requisite: Collect and centralize Windows Event ID 4624 (Logon Type 10), Windows Event ID 4688 (with command lines), and Zeek conn.log/rdp.log from remote access gateways and critical ICS assets. \n2. Symbolic Logic (Correlation): Create a SIEM correlation rule that links a successful Windows Event ID 4624 (Logon Type 10) with a subsequent Windows Event ID 4688 from the same Logon ID within a 60-second window. The rule should trigger if the source IP in the logon event is from a non-RFC1918 address or a subnet not on the approved remote access list, AND the command line in the process event contains reconnaissance commands (e.g., whoami, net user, systeminfo, ipconfig, tasklist, quser). \n3. Statistical (Anomaly Scoring): For each user account, build a 90-day baseline profile of remote access behavior, including source IP subnets/countries, login times/days of the week, and the set of commands executed. For a new remote session, calculate a risk score. Increment the score for each deviation: login from a new source country (+3), login outside of 07:00-17:00 M-F (+2), Jaccard similarity of executed commands to historical sets is less than 0.2 (+5). Alert on any session with a cumulative score exceeding a defined threshold (e.g., 6). \n4. Machine Learning (Session Behavior Anomaly): For each user, create a feature vector for each remote session summarizing its behavior (e.g., session duration, number of processes spawned, command-line entropy, ratio of read-only vs. modification commands). Train an unsupervised anomaly detection model like Isolation Forest on the historical session vectors for all users. Score each new session in real-time and alert on sessions identified as outliers, indicating behavior that is abnormal for that user or for the overall population of remote users."
          },
          {
            "description": "A command-line execution (Windows Event ID 4688) on an ICS asset contains indicators of obfuscation, defense evasion, or discovery. This includes the use of suspicious string patterns (e.g., 'powershell -enc', 'Invoke-Expression', 'IEX', 'certutil -urlcache'), command-line arguments exhibiting high Shannon entropy (e.g., > 4.5) indicative of encoding, or the use of common reconnaissance tools targeting sensitive system or network information.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows-based ICS assets, including HMIs, EWS, Historian Servers, Process Control Servers (PCS), and Data Gateways within the Process Control Network (PCN) and higher zones.",
            "action": "1. Pre-requisite: Ensure full command-line auditing is enabled for Windows Event ID 4688 on all ICS assets. \n2. Symbolic Logic (Pattern Matching): Deploy a SIEM rule that uses regular expressions to scan the command-line field of Windows Event ID 4688 events. The rule should alert on the presence of known malicious patterns, such as PowerShell encoding flags ('-e', '-enc'), download cradles ('IEX(New-Object Net.WebClient).DownloadString'), file transfer utilities used with remote URLs ('bitsadmin /transfer', 'certutil -urlcache'), or attempts to disable security tools. \n3. Statistical (Entropy Analysis): Continuously analyze all command lines from Windows Event ID 4688. For each command, calculate the Shannon entropy of the arguments. Establish a baseline entropy score for common processes (e.g., svchost.exe). Alert when a command's entropy exceeds a high, fixed threshold (e.g., 4.5) or deviates significantly (e.g., > 3 standard deviations) from the historical baseline for that specific executable. Additionally, flag command lines with extreme length (e.g., > 99th percentile for that process). \n4. Machine Learning (Text Classification): Train a supervised text classification model (e.g., a Gradient Boosting classifier) on a labeled dataset of benign and malicious command lines specific to ICS environments. Features should include character-level n-grams, word-level n-grams, entropy, and length. Deploy the model to classify incoming command lines in real-time and alert on any command classified as malicious with high confidence (e.g., > 0.9)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]