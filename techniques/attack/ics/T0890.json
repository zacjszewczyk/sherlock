[
  {
    "information_requirement": "Is an adversary exploiting vulnerabilities to escalate privileges on critical ICS assets like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0890",
        "name": "Exploitation for Privilege Escalation",
        "evidence": [
          {
            "description": "A new process is created (Windows Event ID 4688) where the parent process (ParentProcessName) is a known ICS application (e.g., HMIServer.exe, OPCServer.exe) but the child process (NewProcessName) is an administrative, scripting, or reconnaissance utility (e.g., cmd.exe, powershell.exe, whoami.exe, net.exe, psexec.exe, rundll32.exe). This is identified by the parent-child process relationship being absent from a 90-day baseline of normal activity for that specific host AND the parent process running with elevated privileges (TokenElevationType is '%%1936' for full elevation, or IntegrityLevel is 'System' or 'High').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, and OPC Servers within the Process Control Network (PCN) and Manufacturing Zone (MZ).",
            "action": "1. Symbolic Logic: For each Windows Event ID 4688, perform the following check: (ParentProcessName IN [ics_app_allowlist]) AND (NewProcessName IN [suspicious_utility_watchlist]) AND (TokenElevationType == '%%1936'). The ics_app_allowlist contains approved ICS application executables (e.g., HistorianService.exe, HMIServer.exe). The suspicious_utility_watchlist contains executables not expected to be spawned by ICS applications (e.g., cmd.exe, powershell.exe, pwsh.exe, whoami.exe, net.exe, sc.exe, psexec.exe, mimikatz.exe, rundll32.exe, mshta.exe). Generate an alert for any match, including ComputerName, ParentProcessName, NewProcessName, and CommandLine. 2. Statistical Method: For each host, build a baseline of normal parent-child process relationships observed over the last 90 days. For each new Event ID 4688, represent the relationship as a tuple (ParentProcessName, NewProcessName). If this tuple has not been seen in the baseline for that host, calculate a rarity score. Alert if the (ParentProcessName, NewProcessName) tuple is new AND the child process is statistically rare (e.g., seen on less than 5% of other ICS assets). Use a query to COUNT occurrences of each tuple and flag any with a count of 0 in the baseline period. 3. Machine Learning: Collect features from Windows Event ID 4688 including ParentProcessName, NewProcessName, and command-line arguments. Train an Isolation Forest or One-Class SVM model on a baseline of known-good process creation events from critical ICS assets to learn normal parent-child-argument patterns. In production, score each new process creation event. An event with an anomaly score in the top 1st percentile indicates a significant deviation from normal behavior and should trigger an alert for analyst review."
          },
          {
            "description": "A new service is installed (Windows Event ID 4697 or 7045) on an ICS asset where the service's executable path (ServiceFileName) is in a user-writable or temporary directory (e.g., C:\\ProgramData\\, C:\\Users\\Public\\, C:\\Windows\\Temp\\), the executable name is not on an established allowlist for that host, or the service name (ServiceName) appears randomly generated. The service is configured to run with high privileges (ServiceAccount is 'LocalSystem').",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers, OPC Servers, and other critical Windows-based ICS infrastructure components within the PCN/MZ.",
            "action": "1. Symbolic Logic: For each Windows Event ID 4697 or 7045, check if the ServiceFileName is NOT in a pre-defined allowlist of service executables for that asset class. Additionally, check if the ServiceFileName path matches a regex for suspicious directories like `^C:\\\\(Users\\\\Public|ProgramData|Windows\\\\Temp)`. Also, check if ServiceAccount is 'LocalSystem'. Generate an alert if (ServiceFileName is not on allowlist OR path is suspicious) AND (ServiceAccount is 'LocalSystem'). 2. Statistical Method: For each new service creation event (4697 or 7045), calculate the Shannon entropy of the ServiceName and the filename portion of ServiceFileName. Compare these values against a pre-computed baseline of entropy scores from all known-good services in the environment. Alert if the entropy of either the ServiceName or the filename exceeds the 95th percentile of the baseline distribution, suggesting a randomly generated name. 3. Machine Learning: Extract features from service creation events (4697, 7045) such as: path depth of ServiceFileName, entropy of ServiceName, character distribution of ServiceFileName (e.g., percentage of digits), ServiceType, and ServiceStartType. Train a Random Forest classifier on a labeled dataset of 'benign' and 'malicious' service installations. Deploy the model to score new service creations. A prediction probability score greater than 0.85 for the 'malicious' class should generate a high-priority alert."
          },
          {
            "description": "A network connection is observed in Zeek logs (conn.log, dns.log) from a critical ICS asset to a destination IP or domain not seen in the last 90 days, immediately followed within 120 seconds by a host-based indicator of privilege escalation on the same asset. This includes a file transfer of an executable or script (files.log, http.log) followed by anomalous process creation (Windows Event ID 4688) or new service installation (Windows Event ID 4697/7045).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek smb.log",
              "Zeek files.log",
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting EWS, HMIs, and servers within the PCN/MZ; industrial demilitarized zones (IDMZ) and network gateways connecting the PCN to enterprise IT networks.",
            "action": "1. Symbolic Logic: Join Zeek logs with Windows Event logs on the host IP address and a 120-second time window. Trigger an alert if ( (Zeek files.log shows an executable download to host X with mime_type 'application/x-msdownload') OR (Zeek conn.log shows a connection from host X to a non-internal IP not on an allowlist) ) AND ( (Windows Event ID 4688 on host X shows an anomalous parent-child process pair) OR (Windows Event ID 4697/7045 on host X shows a new suspicious service) ) within 120 seconds of the network event. 2. Statistical Method: Maintain a 90-day baseline of (destination_ip, destination_port) tuples from Zeek conn.log for each critical ICS asset. For each new connection, if the tuple is not in the baseline, flag it as rare. Similarly, maintain a baseline of queried domains from Zeek dns.log and flag new domains. If a rare network connection or DNS query occurs, check for any host-based alerts on the source host within the next 2 minutes. The combination of a statistically rare network event followed by a host anomaly significantly increases the confidence of a true positive. 3. Machine Learning: Develop a composite alert scoring system. Ingest alerts from disparate sources (e.g., the ML models for process creation and service installation, and the statistical model for rare network connections). For a given host, if multiple alerts fire within a 5-minute window, use an aggregation model to increase the overall risk score for that host. For example: $$ RiskScore = (0.5 * ProcessAnomaly) + (0.5 * ServiceAnomaly) + (0.7 * NetworkAnomaly) $$. If the composite RiskScore exceeds a defined threshold, escalate a high-fidelity alert summarizing the correlated events."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]