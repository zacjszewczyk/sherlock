[
  {
    "information_requirement": "Has an adversary modified the tasking of an ICS controller to execute unauthorized code? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0821",
        "name": "Modify Controller Tasking",
        "evidence": [
          {
            "description": "An ICS program modification command, such as S7comm 'Download block' (0x1A), Modbus 'Write Multiple Registers' (0x10), or EtherNet/IP 'Write Tag' (0x4B), is observed in network traffic originating from an IP address not on the authorized Engineering Workstation (EWS) whitelist or occurring outside of a scheduled maintenance window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments within the Process Control Network (PCN) where Engineering Workstations (EWS) communicate with controllers; network taps at the PCN/DMZ boundary; SPAN ports on core switches.",
            "action": "1. Symbolic Logic (Rule-Based Correlation): Create a SIEM rule that triggers when a specific ICS modification function code is detected in Zeek protocol logs (e.g., s7comm.log 'function_code' is 0x1A or 0x1C; modbus.log 'function_code' is 0x10; enip.log 'command_code' is 0x4B). The rule logic should be: `(ICS_Modification_Command_Detected) AND (Source_IP NOT IN EWS_Whitelist OR Destination_IP NOT IN Controller_Whitelist OR Current_Time NOT IN Approved_Maintenance_Windows)`. Enrich the resulting alert with connection details from Zeek conn.log, including connection duration and total bytes transferred.\n2. Statistical Method (Frequency Baselining): For each unique source EWS IP and destination controller IP pair, establish a 90-day historical baseline of the hourly counts for modification-related function codes. Calculate the mean (\u03bc) and standard deviation (\u03c3) for these counts. Implement a detection that alerts when the command count for any pair in a given hour exceeds \u03bc + 3\u03c3. This identifies a statistically significant increase in programming activity that deviates from established norms.\n3. Machine Learning (Time-Series Anomaly Detection): Train a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) on the aggregated count of all modification-related function codes across the network, sampled in 15-minute intervals. Features should include the raw count, day of week, and a binary flag for 'is_maintenance_window'. Train the model on at least 90 days of data. An alert is generated when the model identifies an anomaly point that exceeds a high confidence threshold (e.g., 99%), indicating a pattern of activity inconsistent with historical operational rhythms."
          },
          {
            "description": "An ICS engineering software process (e.g., TIA Portal.exe, Studio 5000.exe) is created on an Engineering Workstation (EWS) by an unauthorized user account, from a suspicious parent process (e.g., powershell.exe), or at an anomalous time, followed within 5 minutes by network connections from the EWS to an ICS controller.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4672",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Dedicated Engineering Workstations (EWS); Active Directory Domain Controllers providing authentication for the Process Control Network.",
            "action": "1. Symbolic Logic (Whitelist/Blacklist Correlation): Create a SIEM rule that monitors for Windows Event ID 4688 (Process Creation) on EWS hosts where the 'NewProcessName' matches known ICS engineering software. The rule should trigger if the 'SubjectUserSid' (from EID 4688) is not on a pre-defined whitelist of authorized engineers, OR if the 'ParentProcessName' is on a blacklist of suspicious processes (e.g., cmd.exe, powershell.exe, wscript.exe). Correlate this event with Zeek conn.log to see if the EWS source IP initiates a connection to a controller IP within 5 minutes, increasing the alert's priority.\n2. Statistical Method (Behavioral Time Windowing): For each authorized user on each EWS, profile their typical activity hours by analyzing Windows Event ID 4624 (logon) and 4688 (process creation for ICS software) over a 60-day period. Calculate the 5th and 95th percentile for their start and end times, creating a 'normal activity window'. Generate an alert if an authorized user executes ICS engineering software outside this established time window, especially if it coincides with a logon of an unusual type (e.g., Type 3 Network Logon vs. Type 2 Interactive Logon).\n3. Machine Learning (User Behavior Analytics - UBA): Implement a UBA model (e.g., Isolation Forest) that creates a feature vector for each user session on an EWS. Features should include: login time and type (EID 4624), process command line entropy (EID 4688), parent-child process relationships (EID 4688), special privileges assigned (EID 4672), and destination IP/port/protocol entropy (Zeek conn.log). Train the model on 90 days of normal user activity. The model will assign an anomaly score to each new session; scores exceeding a dynamically adjusted threshold (e.g., the 99.5th percentile of historical scores) indicate a likely compromised account or malicious insider."
          },
          {
            "description": "A cryptographic hash mismatch is found between a controller's live tasking configuration and its trusted baseline, or an anomalous number of network commands modifying controller configuration (e.g., S7comm 'Write block' (0x19), 'Write System Data' (0x28)) are detected for a specific controller.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Controller configuration backups / 'golden image' repository",
              "Controller internal logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directly on Programmable Logic Controllers (PLCs) and Distributed Control Systems (DCS); Secure baseline repository or Configuration Management Database (CMDB) storing controller golden images; Network segments carrying configuration traffic.",
            "action": "1. Symbolic Logic (Baseline Integrity Check): Automate a process to periodically (e.g., every 4 hours) poll critical controllers to retrieve the configuration blocks related to tasking (e.g., via S7comm 'Read Block'). For each polled configuration, compute its SHA-256 hash. Compare this computed hash against a stored, known-good hash from a secure 'golden image' repository. Generate a critical alert if the hashes do not match, indicating an unauthorized modification. The alert should include both the expected and the actual hash values.\n2. Statistical Method (Change Rate Anomaly): In Zeek, monitor for network commands indicative of configuration changes (e.g., S7comm 'Write block'). Establish a 30-day baseline of the frequency of these commands per controller, aggregated into 1-hour time windows. Calculate the 98th percentile of the hourly change count for each controller. Generate an alert if the count of change commands for a single controller in any given hour exceeds this 98th percentile threshold, indicating an abnormally high rate of modification activity.\n3. Machine Learning (Change Classification): Develop a supervised classification model (e.g., Random Forest) to classify observed configuration changes as either 'Benign' or 'Malicious'. Train the model using labeled historical data. Features for the model should include: source IP, user account (if available), type of change command, controller ID, time of day, day of week, and a binary feature 'is_change_ticket_open' (by integrating with an IT Service Management system). The model will classify new changes in real-time. Alerts are triggered for any change classified as 'Malicious', providing a high-fidelity signal that filters out noise from approved maintenance."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]