[
  {
    "information_requirement": "Is an adversary using a compromised ICS host as a proxy for Command and Control communications?",
    "tactic_id": "TA0101",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T0884",
        "name": "Connection Proxy",
        "evidence": [
          {
            "description": "A host (e.g., Engineering Workstation, HMI, Jump Server) exhibits a 'fan-out' network pattern where it receives an inbound connection from an external (non-ICS network) IP address and, within a defined time window (e.g., 5 minutes), initiates connections to 5 or more distinct internal ICS assets (e.g., PLCs, RTUs, data historians) that it does not typically communicate with. This pattern deviates significantly from established ICS network baselines.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeters between IT and OT zones, ICS DMZ/Jump Servers, Engineering Workstations, HMIs, Data Historians, and critical control servers (e.g., SCADA servers).",
            "action": "1. **Symbolic Logic:** Identify all Zeek `conn.log` entries where `id.resp_h` is an ICS asset and `id.orig_h` is an internal host within the ICS environment. Correlate these with `conn.log` entries where `id.orig_h` is the same internal host and `id.resp_h` is an external IP (not in internal network ranges) that occurred within a 5-minute window. Flag any internal host that acts as a pivot from an external connection to 5 or more distinct internal ICS assets (unique `id.resp_h`) that it does not typically communicate with. 2. **Statistical Method:** For each critical ICS host, establish a daily baseline of the unique internal destination IP count from Zeek `conn.log` (unique `id.resp_h` where `id.orig_h` is the ICS host). Using a 7-day rolling window, calculate the Z-score for the current day's unique destination IP count. Trigger a medium-severity alert if the Z-score exceeds 3.0, indicating a significant deviation from normal fan-out behavior. Further prioritize if Windows Event ID 5156 on the host shows an unexpected process initiating these connections. 3. **Machine Learning:** Apply a graph-based anomaly detection algorithm (e.g., Louvain method for community detection or Node2Vec for embedding) on Zeek `conn.log` data, where nodes are IPs and edges are connections. Train the model on historical ICS network traffic to learn normal communication patterns and communities. Flag any host that suddenly becomes a central node connecting to a high number of previously unobserved or rarely observed internal ICS assets, especially when preceded by an external inbound connection, indicating a potential proxy."
          },
          {
            "description": "A host (e.g., Jump Server, OT DMZ host) acts as an intermediary, receiving an inbound connection from an external IP address and subsequently initiating one or more outbound connections to internal ICS assets (e.g., PLCs, RTUs) within 30 seconds, specifically utilizing ICS-native protocols (e.g., Modbus/TCP on port 502, DNP3 on port 20000, S7 on port 102/TCP, EtherNet/IP on port 44818/TCP).",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT DMZ hosts, Jump Servers, SCADA servers, and network segments containing PLCs, RTUs, and other field devices.",
            "action": "1. **Symbolic Logic:** Monitor Zeek `conn.log` for inbound connections from external IP addresses (`id.orig_h` not in internal network ranges) to designated OT DMZ or Jump Server hosts. For each such event, immediately check for outbound connections from the same `id.resp_h` to internal ICS assets (e.g., PLCs, RTUs) within a 30-second window, specifically matching known ICS protocol ports (e.g., 502/TCP, 20000/TCP, 102/TCP, 44818/TCP). If a match is found, trigger a critical alert. Additionally, query Windows Event ID 4624 on the proxy host for `Logon Type` 3 (network logon) or 10 (remote interactive) events within 1 minute prior to the network activity. 2. **Statistical Method:** For each OT DMZ or Jump Server host, calculate the daily count of unique (external IP, internal ICS IP, ICS protocol) triplets observed. Establish a 14-day rolling average and standard deviation for this metric. Alert if the current day's count exceeds the average by 3 standard deviations, especially if the internal ICS IP is a high-value asset. This identifies statistically anomalous relaying behavior. 3. **Machine Learning:** Utilize a sequence prediction or state-machine model (e.g., Hidden Markov Model or Recurrent Neural Network) trained on historical Zeek `conn.log` data for OT DMZ and Jump Server hosts. The model should learn typical inbound-outbound connection sequences and protocol usage. Alert on sequences that deviate significantly from learned normal patterns, specifically flagging instances where an external inbound connection is followed by an unexpected ICS protocol connection to an internal asset, indicating a novel or malicious relay."
          },
          {
            "description": "A host exhibits network traffic consistent with protocol tunneling, where C2 communications are encapsulated within legitimate protocols (e.g., DNS, HTTP, ICMP). This is evidenced by statistically anomalous data volumes (e.g., high byte counts for DNS queries/responses), unusually long or high-entropy DNS query strings, or non-standard HTTP request methods/user agents, followed by subsequent connections from that same host to other internal ICS assets.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS servers, hosts with direct or proxied internet access from the OT environment (e.g., Historians, Engineering Workstations), and perimeter firewalls/proxies.",
            "action": "1. **Symbolic Logic:** Create a rule to flag Zeek `dns.log` entries where the `query` field contains non-alphanumeric characters, has a length exceeding 64 characters, or matches known C2 domain generation algorithm (DGA) patterns (e.g., specific regex for pseudo-random strings). For HTTP tunneling, monitor `http.log` for non-standard user-agents, unusual HTTP methods (e.g., `CONNECT` to non-proxy ports), or high `orig_bytes` for `GET` requests. Upon detection, search Zeek `conn.log` for any connections originating from the same `id.orig_h` to internal ICS assets within 1 minute. Also, check Windows Event ID 4688 on the source host for processes like `powershell.exe`, `cmd.exe`, `rundll32.exe` interacting with network resources around the same time. 2. **Statistical Method:** For each host, compute a 7-day rolling average and standard deviation for the byte count of DNS queries and responses (`orig_bytes`, `resp_bytes` in `dns.log`). Alert if a host's daily total DNS bytes exceeds its average by 3 standard deviations, especially if the `query` entropy (calculated using Shannon entropy) is also 2 standard deviations above its baseline. For HTTP, calculate the entropy of `uri` and `user_agent` fields in `http.log`. Correlate these events with subsequent internal connections from Zeek `conn.log`. 3. **Machine Learning:** Train a supervised machine learning classifier (e.g., Random Forest or XGBoost) on Zeek `dns.log` and `http.log` features such as query/URI length, entropy, TLD distribution, presence of numeric/special characters, and HTTP method/status codes, labeled as normal or tunneled/DGA. Deploy the model to continuously score live DNS/HTTP traffic. When a high-confidence prediction for tunneling is made for a host, immediately analyze Zeek `conn.log` for any new or unusual connections from that host to internal ICS assets that follow within 60 seconds, indicative of C2 un-tunneling and proxying."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]