[
  {
    "information_requirement": "Is an adversary collecting sensitive project files or configuration data from our ICS assets? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0807",
        "name": "Command-Line Interface",
        "evidence": [
          {
            "description": "Detection of command-line interpreter processes (e.g., `cmd.exe`, `powershell.exe`) executing file system commands (`dir`, `copy`, `type`, `Get-ChildItem`, `Get-Content`) that target directories containing ICS project files (e.g., `C:\\SCADA_Projects`, `D:\\Historian_Configs`, `\\\\Shared_ICS_Data`) or files with extensions like `.ACD`, `.L5K`, `.SCX`, `.HMI`, `.XML`, `.INI`, `.CSV`, `.DB`. This activity is considered anomalous if it involves accessing more than 10 unique sensitive files within a 5-minute window or if it originates from an unusual user account or process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek smb.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) within the OT network, Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers, File Shares containing critical ICS configurations or project files, Jump Servers used to access the OT network.",
            "action": "1. **Symbolic Logic:** Create a detection rule that triggers on Windows Event ID 4688 (Process Creation) where `NewProcessName` is `cmd.exe` or `powershell.exe`, and the `CommandLine` argument contains file access keywords (`dir`, `copy`, `type`, `Get-ChildItem`, `Get-Content`, `findstr`, `xcopy`, `robocopy`) AND any of the following sensitive ICS file extensions (`.ACD`, `.L5K`, `.SCX`, `.HMI`, `.XML`, `.INI`, `.CSV`, `.DB`) or known sensitive directory paths (e.g., `C:\\SCADA_Projects`, `D:\\Historian_Configs`, `\\\\Shared_ICS_Data`). Prioritize alerts where the `ParentProcessName` is atypical (e.g., not explorer.exe, not a known administrative tool).\n2. **Statistical Method:** For each NAI, establish a baseline of normal command-line activity by counting the number of unique files accessed by `cmd.exe` or `powershell.exe` per user per hour over the past 30 days. Calculate the 99th percentile for this count. Generate an alert when any user on an NAI exceeds this 99th percentile for unique file accesses by command-line interpreters. Additionally, monitor the total volume of data accessed by these processes; flag activity that represents a 3-sigma deviation from the daily average for that specific host.\n3. **Machine Learning:** Implement a clustering algorithm (e.g., K-Means) on command-line arguments and associated file paths from Windows Event ID 4688 logs. Cluster similar command patterns and file access behaviors. New or infrequent clusters, particularly those involving sensitive ICS file types or paths, should be flagged for review by an analyst. Alternatively, use a time-series anomaly detection model (e.g., Isolation Forest) to identify anomalous spikes in command-line file access activity on individual NAIs, considering factors like time of day, user, and file type distribution."
          }
        ]
      },
      {
        "technique_id": "T0853",
        "name": "Scripting",
        "evidence": [
          {
            "description": "Evidence includes the execution of scripting engines (`powershell.exe`, `python.exe`, `wscript.exe`, `cscript.exe`) that, via their command-line arguments or script block content, enumerate or read more than 5 unique files within 2 minutes from sensitive ICS directories (e.g., `C:\\ProgramData\\Rockwell Automation`, `D:\\SCADA_Backups`, `\\\\OPC_Server_Configs`) or target files with known sensitive extensions (`.ACD`, `.L5K`, `.SCX`, `.HMI`, `.XML`, `.INI`, `.CSV`, `.DB`). This activity is further suspicious if the script appears obfuscated (high entropy in command-line/script content) or is initiated by an uncommon parent process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104 (PowerShell Script Block Logging)",
              "Windows Event ID 4103 (PowerShell Module Logging)",
              "Zeek conn.log",
              "Zeek file.log",
              "Zeek smb.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) in the Control Network, Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers, Configuration Management Servers for ICS devices, File Servers/Shares containing ICS project or configuration files, Jump Servers.",
            "action": "1. **Symbolic Logic:** Configure alerts for Windows Event ID 4688 where `NewProcessName` is `powershell.exe`, `python.exe`, `wscript.exe`, or `cscript.exe`, and the `CommandLine` or associated script block content (from Windows Event ID 4104/4103) contains file access functions/cmdlets (`Get-ChildItem`, `Get-Content`, `System.IO.File::ReadAllText`, `open()`, `read()`) targeting specific sensitive ICS directories (e.g., `C:\\ProgramData\\Rockwell Automation`, `D:\\SCADA_Backups`) or files with extensions (`.ACD`, `.L5K`, `.HMI`, `.SCX`, `.XML`, `.INI`). Additionally, create rules for known malicious script hashes or specific strings found in attacker toolkits.\n2. **Statistical Method:** Calculate the entropy score for the `CommandLine` field in Windows Event ID 4688 events and the `ScriptBlockText` in Windows Event ID 4104 events for scripting engine processes. Establish a baseline of normal entropy scores for each NAI over 30 days. Alert on any script execution where the entropy score exceeds the 99th percentile, indicating potential obfuscation. Furthermore, track the count of unique sensitive files accessed by scripts per hour per NAI; flag instances where this count deviates by more than 3 standard deviations from the historical average for that host.\n3. **Machine Learning:** Apply a natural language processing (NLP) technique (e.g., TF-IDF or word embeddings) to the `ScriptBlockText` from Windows Event ID 4104/4103 logs to identify anomalous patterns in script content that deviate from a learned 'normal' script behavior profile for each NAI. Utilize a supervised machine learning classifier (e.g., Random Forest or SVM) trained on known benign and malicious script samples to classify new script executions as benign or malicious based on their command-line arguments, parent process, target files, and script block content. Correlate with Zeek `conn.log` and `file.log` to identify any associated network activity (e.g., C2, data exfiltration) that follows script execution, using graph neural networks to detect unusual communication patterns."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]