[
  {
    "information_requirement": "Is an adversary manipulating the I/O image of a PLC to inhibit its response function?",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0835",
        "name": "Manipulate I-O Image",
        "evidence": [
          {
            "description": "Anomalous Modbus Function Code 5 (Force Single Coil) or 15 (Force Multiple Coils) commands observed in network traffic, targeting PLCs, where the source IP address is not on the authorized Engineering Workstation (EWS) allowlist, the originating process on the EWS is not an approved engineering application, or the command occurs outside of documented operational or maintenance windows for the targeted PLC.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Industrial Demilitarized Zone (IDMZ) network segments, Control Network segments (Level 3.5 and 3 of Purdue Model), Engineering Workstation (EWS) endpoints, PLC network interfaces.",
            "action": "1. **Symbolic Logic:** Filter `Zeek modbus.log` for `function_code:5` or `function_code:15`. For each instance, check if the `id.orig_h` (source IP) is *not* present in a centrally managed allowlist of authorized EWS IPs permitted to issue force commands. If not, generate a high-priority alert. Additionally, correlate `id.orig_h` from `Zeek modbus.log` with `ComputerName` from `Zeek conn.log` and `ProcessName` from `Windows Event ID 4688` (process creation) on the originating EWS within a 5-minute window. Compare this `ProcessName` against a strict allowlist of approved engineering software (e.g., 'Studio5000.exe', 'TIA_Portal.exe'). If the process is not on the allowlist, generate an alert. Finally, check if the `ts` (timestamp) of the Modbus command falls outside pre-approved operational windows (e.g., 07:00-17:00 M-F) or scheduled maintenance periods. If any of these conditions are met, generate a high-priority alert detailing the source, target, function code, process, and time.\n2. **Statistical Method:** For each unique (target PLC, source EWS IP) pair, establish a 30-day rolling baseline for the hourly frequency of Modbus Function Code 5 and 15 commands. Calculate the 99th percentile of this hourly frequency. Alert if the current hourly count for any pair exceeds its 99th percentile, indicating an unusual surge in force commands. Additionally, track the mean and standard deviation of the `ts` (timestamp) for these commands, aggregated by (target PLC, source EWS IP) and day of week. Alert if a command's timestamp falls outside the mean +/- 3 standard deviations for that specific PLC, EWS, and day of week, indicating an unusual time of execution.\n3. **Machine Learning:** Develop a supervised machine learning model (e.g., Random Forest or XGBoost) trained on historical `Zeek modbus.log` data for Function Codes 5 and 15. Features should include `id.orig_h` (source IP), `id.resp_h` (destination IP), `function_code`, `coil_address`, `coil_value`, `ts` (hour of day, day of week), and `ProcessName` from correlated `Windows Event ID 4688` data. Label known authorized operations as 'normal' and simulated unauthorized operations as 'anomalous'. Deploy the trained model to classify real-time Modbus commands. Generate a high-confidence alert if a command is classified as 'anomalous' with a prediction probability exceeding 0.9, indicating a potential manipulation."
          },
          {
            "description": "Detection of Modbus Function Code 6 (Preset Single Register) or 16 (Preset Multiple Registers) commands in network traffic, specifically targeting PLC I/O image registers, where the source IP address is not on the authorized EWS allowlist, the originating process on the EWS is not an approved engineering application, or the command attempts to write values outside of expected operational ranges for the targeted register.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments (Level 2 of Purdue Model), critical PLC backplanes, Engineering Workstation (EWS) endpoints, PLC network interfaces.",
            "action": "1. **Symbolic Logic:** Filter `Zeek modbus.log` for `function_code:6` or `function_code:16`. For each command, first, verify if `id.orig_h` (source IP) is on a centrally managed allowlist of authorized EWS IPs. If not, generate an immediate high-priority alert. Second, if the source IP is authorized, correlate `id.orig_h` from `Zeek modbus.log` with `ComputerName` from `Zeek conn.log` and `ProcessName` from `Windows Event ID 4688` (process creation) on the corresponding EWS within a 5-minute window. Verify `ProcessName` against a strict allowlist of approved engineering applications. If an unauthorized process is identified, generate an alert. Third, for known critical I/O image registers, check if the `register_address` and `register_value` in the Modbus command fall outside pre-defined safe operational ranges for the targeted PLC (e.g., a temperature setpoint exceeding critical limits). If so, generate an alert.\n2. **Statistical Method:** For each target PLC, establish a 30-day rolling baseline for the hourly frequency of Modbus Function Code 6 and 16 commands. Calculate the 99th percentile of this hourly frequency. Alert if the current hourly count for any PLC exceeds its 99th percentile, indicating an unusual surge in write commands. Additionally, monitor the `register_value` for critical I/O image registers. Calculate the historical mean and standard deviation of these values over the last 30 days. Alert if a newly written `register_value` for a critical register deviates by more than 3 standard deviations from its historical mean, indicating an anomalous manipulation of a critical process parameter.\n3. **Machine Learning:** Employ an unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) on features extracted from `Zeek modbus.log` for Function Codes 6 and 16. Features should include `id.orig_h`, `id.resp_h`, `function_code`, `register_address`, `register_value`, `data_length`, `ts` (hour of day, day of week). Train the model on several months of historical 'normal' Modbus write activity. Ingest real-time Modbus commands and calculate an anomaly score. Generate an alert if the anomaly score for a command exceeds the 95th percentile of historical anomaly scores, indicating a potentially malicious or highly unusual write operation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]