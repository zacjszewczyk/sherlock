[
  {
    "information_requirement": "Is an adversary attempting to discover systems on the ICS network? (TA0102 - Discovery)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0846",
        "name": "Remote System Discovery",
        "evidence": [
          {
            "description": "A single source host, not on a pre-defined 'Authorized Scanners' watchlist, generates a high volume of connection attempts, defined as exceeding the 99th percentile of its own historical 5-minute average, AND these attempts target more than 50 unique destination IPs or 100 unique destination ports within a 5-minute window. This is especially suspicious if targeting common ICS/OT ports (e.g., 502, 102, 44818, 20000).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (e.g., Control Network, Safety Instrumented System Network), OT/IT DMZ, Engineering Subnet, Process Control Network (PCN)",
            "action": "1. Symbolic Logic: Query Zeek conn.log for events where `id.orig_h` is not on an 'Authorized ICS Management Hosts' watchlist. Aggregate results by `id.orig_h` in 5-minute windows. Generate an alert if, for a single `id.orig_h`, the distinct count of `id.resp_h` is > 50 OR the distinct count of `id.resp_p` is > 100. Prioritize alerts where `id.resp_p` includes common ICS ports (502, 102, 44818, 20000). 2. Statistical Method: For each `id.orig_h`, establish a 7-day rolling baseline of its 5-minute window metrics, including `unique_dest_ips`, `unique_dest_ports`, and `total_connections`. Generate an alert if any of these current metrics for a given `id.orig_h` exceeds the 99th percentile of its own baseline, particularly if the source host is not an authorized management station. 3. Machine Learning Application: Train a time-series anomaly detection model (e.g., Isolation Forest) on `Zeek conn.log` data, aggregated by `id.orig_h` over 5-minute windows. Use features such as `count(id.resp_h)`, `dcount(id.resp_h)`, and `dcount(id.resp_p)`. After training on at least 30 days of data, apply the model to new data to flag any `id.orig_h` with a high anomaly score, indicating a significant deviation from its normal scanning behavior."
          },
          {
            "description": "A process on an ICS host (e.g., EWS, HMI) executes a known network discovery utility (e.g., ping.exe, net.exe, arp.exe, nmap.exe) with command-line arguments indicative of subnet-wide enumeration (e.g., CIDR notation like 192.168.1.0/24, or flags like -sP, -sn, /a). The activity is considered highly anomalous if initiated by an unexpected parent process (e.g., a Microsoft Office application) or user.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, HMIs, Data Historians, Jump Servers within the OT network",
            "action": "1. Symbolic Logic: Query Windows Event ID 4688 for `NewProcessName` that matches known discovery utilities (`ping.exe`, `net.exe`, `nbtstat.exe`, `arp.exe`, `nmap.exe`). Filter for `CommandLine` containing arguments like `(?i)/a|/enum|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}|-sP|-sn`. Alert if the `ParentProcessName` is not a whitelisted process (e.g., `explorer.exe`, `cmd.exe` by an authorized admin) or the `SubjectUserName` is not an authorized account. 2. Statistical Method: For each host-user pair, establish a 30-day baseline for the execution frequency of discovery utilities with enumeration arguments. Alert if the count in a rolling 24-hour window exceeds the 99th percentile for that specific host-user pair. Additionally, calculate the entropy of the `ParentProcessName` for these discovery tool executions; a sudden drop in entropy (indicating a single scripted parent) or a novel parent process should be investigated. 3. Machine Learning Application: Model process execution chains from Windows Event ID 4688 as a directed graph (`ParentProcessName` -> `NewProcessName`). Use a graph-based anomaly detection algorithm to learn normal process trees and parent-child relationships. Alert on newly observed or rare edges, especially where the child node is a discovery utility and the parent is an unusual process (e.g., `winword.exe`, `svchost.exe` under an unexpected context)."
          },
          {
            "description": "A source IP address not on a pre-defined 'Authorized ICS Management Hosts' watchlist initiates more than 10 unique ICS-specific discovery requests (e.g., EtherNet/IP 'List Identity', Modbus 'Read Device Identification', S7comm 'Get Block Info') to more than 5 unique destination ICS devices (e.g., PLCs, RTUs) within a 1-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek enip.log",
              "Zeek modbus.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control System LAN, connections to PLCs and RTUs, SCADA Server Network, Field Device Network",
            "action": "1. Symbolic Logic: Query Zeek's ICS protocol logs (`s7comm`, `enip`, `modbus`, `dnp3`) and filter for requests where `id.orig_h` is not on the 'Authorized ICS Management Hosts' watchlist. Within this filtered data, group by `id.orig_h` over a 1-minute window. Alert if a single `id.orig_h` sends discovery-related function codes to >5 unique `id.resp_h` OR sends >10 total discovery requests in that window. 2. Statistical Method: For each `id.orig_h`, establish a 30-day baseline of the rate and variety of ICS function codes used. Alert if a host, especially one not on an authorized list, suddenly begins using discovery-related function codes it has not historically used. Also, alert if the ratio of discovery requests to total requests from a host exceeds 3 standard deviations above its historical mean. 3. Machine Learning Application: Use an unsupervised clustering algorithm (e.g., DBSCAN) on features from Zeek ICS protocol logs, aggregated per source over 1-minute intervals. Features should include `id.orig_h`, `protocol`, and a categorical representation of `function_code`. Train on at least 30 days of data to define normal communication clusters. Points that are classified as noise/outliers, especially those from an un-whitelisted `id.orig_h` using discovery functions, should be alerted on as anomalous."
          },
          {
            "description": "A single process on an EWS or HMI is responsible for over 50 failed network connection attempts (e.g., TCP RST, ICMP Destination Unreachable) to more than 20 unique destination IP addresses within a 60-second period. The originating process is not a known, legitimate network management or vulnerability scanning tool.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek icmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, HMIs, ICS Network Segments, Servers within the OT network",
            "action": "1. Symbolic Logic: Filter `Zeek conn.log` for failed connections (`conn_state` is 'REJ', 'RSTO', 'S0') and `Zeek icmp.log` for 'Destination Unreachable' messages. Group by `id.orig_h` in 60-second windows. If any `id.orig_h` has >50 failed attempts to >20 unique `id.resp_h`, pivot to Windows Event ID 4688 on that host at that timestamp to identify the responsible `NewProcessName`. Alert if this process is not on a 'Known Good Scanners' watchlist. 2. Statistical Method: For each host-process pair, calculate a Connection Success Ratio, $$ R_{success} = \\frac{Successful\\_Connections}{Total\\_Connections} $$, using correlated Zeek `conn.log` data over a 10-minute window. Establish a 30-day baseline for this ratio for each pair. Alert if the ratio for a given pair drops more than 3 standard deviations below its historical mean, especially if the absolute number of failed connections is high (>50). 3. Machine Learning Application: For each host, create a time-series of the count of failed connections per minute. Use a time-series anomaly detection model (e.g., Prophet, LSTM) to forecast the expected number of failures. Alert when the actual count significantly exceeds the forecasted upper confidence bound, indicating an anomalous spike in failed connections. Correlate spikes with process execution data from Windows Event ID 4688 to identify the source process."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]