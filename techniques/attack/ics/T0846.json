[
  {
    "information_requirement": "Is an adversary attempting to discover systems on the ICS network? (TA0102 - Discovery)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0846",
        "name": "Remote System Discovery",
        "evidence": [
          {
            "description": "A single source IP address, especially one not categorized as an engineering workstation or server, generates a total connection count exceeding the 99th percentile of its historical 5-minute average, AND this activity involves connection attempts to more than 50 unique destination IP addresses or 100 unique destination ports within a 5-minute window, particularly targeting common ICS/OT ports (e.g., 502 Modbus, 102 S7comm, 44818 EtherNet/IP, 20000 DNP3) or a wide range of ports across a subnet.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek icmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (e.g., Control Network, Safety Instrumented System Network), OT/IT DMZ, Engineering Subnet, Process Control Network (PCN)",
            "action": "1. **Symbolic Logic**: From Zeek conn.log, filter for connections where `id.orig_h` is not in a known whitelist of legitimate scanning/management tools. Identify destination ports (`id.resp_p`) that are common ICS/OT ports or within common ephemeral ranges. 2. **Statistical Method**: For each unique `id.orig_h`, calculate the count of unique `id.resp_h` and `id.resp_p` within rolling 5-minute windows. Establish a dynamic baseline for these counts for each host using a 7-day moving average. Alert when a host's unique destination count or connection rate exceeds the 99th percentile of its normal behavior, particularly if the destination ports are diverse or target critical ICS assets. 3. **Machine Learning Application**: Apply a time-series anomaly detection model (e.g., Isolation Forest) to the aggregated connection counts (unique IPs/ports per source IP per time window) to identify sudden, significant deviations from established patterns that might indicate a network sweep."
          },
          {
            "description": "A process on an ICS Engineering Workstation (EWS) or Human-Machine Interface (HMI) executes known network discovery utilities (e.g., `ping.exe`, `net.exe`, `nbtstat.exe`, `ipconfig.exe`, `arp.exe`, or potentially `nmap.exe` if installed) with command-line arguments indicative of network enumeration (e.g., `/a`, `/enum`, subnet ranges like `192.168.1.0/24`, `-sP` for ping scan). This activity is initiated by an unexpected parent process or user context, or occurs outside of scheduled maintenance windows.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, HMIs, Data Historians, Jump Servers within the OT network",
            "action": "1. **Symbolic Logic**: Monitor Windows Event ID 4688 (Process Creation) and filter for `New Process Name` matching common discovery executables (e.g., `ping.exe`, `net.exe`, `nbtstat.exe`, `arp.exe`). Further filter based on `CommandLine` arguments using regex patterns (e.g., `\\b(?:\\d{1,3}\\.){3}\\d{1,3}/\\d{1,2}\\b`, `/enum`, `/a`) that indicate network range scanning or enumeration. 2. **Statistical Method**: Establish a baseline of normal execution frequency for these discovery utilities on critical ICS assets per user and time of day. Calculate the rolling 24-hour count of these executions. Alert when the execution count exceeds the 99th percentile of its historical average for a specific user/host combination, or if the `ParentProcessName` is atypical (e.g., a non-interactive service spawning `ping.exe`). 3. **Machine Learning Application**: Use a process tree analysis model (e.g., graph-based anomaly detection) on enriched Windows Event ID 4688 data (including parent/child process relationships and command-line arguments) to classify process execution chains. Flag instances where a benign process spawns a discovery tool with suspicious arguments as anomalous, particularly if the user is not a known administrator."
          },
          {
            "description": "A source IP address not present in a pre-defined whitelist of authorized ICS engineering or management hosts initiates more than 10 unique ICS-specific discovery requests (e.g., EtherNet/IP List Identity requests, Modbus Read Device Identification, S7comm Get Block Info, DNP3 Get Device Attributes) to more than 5 unique destination ICS devices (PLCs, RTUs, HMIs) within a 1-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek enip.log",
              "Zeek modbus.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control System LAN, connections to PLCs and RTUs, SCADA Server Network, Field Device Network",
            "action": "1. **Symbolic Logic**: Monitor Zeek logs for ICS protocols (s7comm, enip, modbus, dnp3). Filter for specific discovery-related function codes or commands (e.g., EtherNet/IP 'List Identity', Modbus 'Read Device Identification', S7comm 'Get Block Info'). Cross-reference `id.orig_h` against a whitelist of authorized engineering workstations and management servers. Alert if a non-whitelisted host initiates any of these discovery requests. 2. **Statistical Method**: For each non-whitelisted `id.orig_h`, count the number of unique destination ICS devices and the total number of ICS discovery requests within a 1-minute window. Alert on any activity where these counts exceed zero or a very low, established baseline (e.g., 3 standard deviations above the mean for 'silent' hosts). 3. **Machine Learning Application**: Apply unsupervised anomaly detection (e.g., K-Means clustering or DBSCAN) to the metadata of ICS protocol logs (source IP, destination IP, protocol, function code, number of requests) to identify clusters of activity that deviate significantly from normal operational patterns, highlighting unusual discovery activities by source or target."
          },
          {
            "description": "A process on an Engineering Workstation (EWS) or HMI generates over 50 failed network connection attempts (e.g., TCP RST/SYN-ACK-RST, ICMP Destination Unreachable, or connection timeouts) to more than 20 unique destination IP addresses within a 60-second period, where the source process is not a known legitimate network diagnostics or management tool, and the activity occurs outside of normal operational hours.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek icmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, HMIs, ICS Network Segments, Servers within the OT network",
            "action": "1. **Symbolic Logic**: Correlate `ProcessId` from Windows Event ID 4688 with `id.orig_h` and `id.orig_p` from Zeek conn.log. Filter Zeek conn.log for `conn_state` values indicative of failed or incomplete connections (e.g., `REJ`, `RSTO`, `S0`, `S1`, `SH`, `RSTR`, `RSTRH`). Identify source processes that are not part of a known legitimate network diagnostics or monitoring application. 2. **Statistical Method**: For each unique process on an EWS/HMI, calculate the ratio of failed connections to total connection attempts to unique destination IPs within a rolling 60-second window. Establish a baseline for this ratio. Alert when this ratio exceeds the 99th percentile of its historical average, or if the number of unique destination IPs with failed connections exceeds 3 standard deviations from the mean for that process. 3. **Machine Learning Application**: Use a supervised classification model (e.g., Random Forest or SVM) trained on historical network activity (features: process name, source IP, number of unique destination IPs, number of failed connections, connection states distribution) to classify activity as 'normal' or 'scanning'. Continuously feed new network connection patterns and associated process information to this model to detect anomalous scanning attempts."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]