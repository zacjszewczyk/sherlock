[
  {
    "information_requirement": "Is an adversary attempting to impact our industrial process by denying operator control? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0813",
        "name": "Denial of Control",
        "evidence": [
          {
            "description": "A sudden, sustained increase (e.g., 5x the 99th percentile of 5-minute rolling average) in network traffic volume (orig_bytes, resp_bytes, and connection_count) to a critical ICS device IP (e.g., PLC, RTU) as observed in Zeek conn.log. This increase is accompanied by a concurrent increase in connection attempts with 'S0' (SYN sent, no reply), 'REJ' (connection rejected), or 'RSTO' (connection reset by originator) states, indicating potential resource exhaustion or denial of service.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary points of Level 1 (Control) and Level 2 (Supervisory) ICS network segments, including firewalls and network taps monitoring traffic to PLCs, RTUs, HMIs, and SCADA servers.",
            "action": "1. Symbolic Logic: Identify Zeek conn.log entries where `id.resp_h` is a critical ICS device IP and `proto` is a common ICS protocol (e.g., Modbus/TCP, EtherNet/IP, S7Comm). Filter for `conn_state` values of 'S0', 'REJ', or 'RSTO'. Generate an alert if the count of such connections from a single `id.orig_h` exceeds 100 within a 60-second window, or if `id.orig_h` matches an external IP address not whitelisted for ICS communication. 2. Statistical Method: For each critical ICS device IP (`id.resp_h`), calculate the 5-minute rolling average and 99th percentile for `orig_bytes`, `resp_bytes`, and `connection_count` (sum of connections) from all unique `id.orig_h` sources over the last 30 days. Generate an alert when the `connection_count` or total bytes (`orig_bytes` + `resp_bytes`) sent to a specific ICS device from a single source IP (`id.orig_h`) exceeds its 99th percentile by a factor of 5 or more for at least two consecutive 5-minute intervals. 3. Machine Learning: Apply a time-series anomaly detection model (e.g., Isolation Forest, LSTM-based autoencoder) to the aggregated `orig_bytes` and `connection_count` metrics for each critical ICS device (`id.resp_h`), sampled at 1-minute intervals. Train the model on 30 days of historical data. Alert on significant deviations from the learned normal pattern, specifically when the anomaly score exceeds a predetermined threshold (e.g., a z-score of 3 or higher) and correlates with an increase in 'S0' or 'REJ' `conn_state` values in Zeek conn.log."
          },
          {
            "description": "Observation of specific ICS control commands (e.g., Modbus function code 0x05 'Force Single Coil' in modbus.log, S7Comm 'Write Var' in s7comm.log) targeting critical PLC/RTU IPs. This activity originates from: (1) a source IP (id.orig_h) not present in an authorized whitelist for ICS command issuance; (2) a user account (TargetUserName from Windows Event ID 4624) not authorized for ICS control; or (3) an unexpected process (Process_Name from Windows Event ID 4688) on an authorized Engineering Workstation (EWS) or HMI, deviating from established baselines for typical process execution of ICS commands.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, and network taps monitoring Level 2 (Supervisory) to Level 1 (Control) network traffic, as well as Active Directory/Identity Management systems for user authentication.",
            "action": "1. Symbolic Logic: Maintain an authorized whitelist of (TargetUserName, Workstation_IP, Process_Name, Target_PLC_IP, Allowed_Command_Types) tuples. Query Zeek logs (e.g., modbus.log for `function_code`, s7comm.log for `opcode` and `item_address`) for control commands sent to critical ICS device IPs (`id.resp_h`). Correlate `id.orig_h` from Zeek logs with `TargetUserName` from Windows Event ID 4624 (successful logon) and `Process_Name` from Windows Event ID 4688 (process creation) on the corresponding workstation IP. Generate an alert if a command originates from a tuple not present in the whitelist, or if a known malicious command signature (IOC) is detected within the command payload or parameters (e.g., `value` in modbus.log). 2. Statistical Method: Baseline the normal frequency and timing (time-of-day) of specific ICS control commands (e.g., 'stop', 'start', 'write') for each authorized (TargetUserName, Workstation_IP, Target_PLC_IP) triplet over the past 90 days. Calculate the inter-quartile range (IQR) for command frequency and typical command execution time-of-day. Alert on command sequences that occur outside of normal operational hours (e.g., 2 standard deviations from the mean login time for that user/workstation) or if a user/workstation attempts to send more than 5 critical commands within a 1-minute window, exceeding the 99th percentile of their historical activity for that specific triplet. 3. Machine Learning: Implement a user/entity behavior analytics (UEBA) model (e.g., using unsupervised clustering or a Recurrent Neural Network) to learn normal patterns of ICS command execution. Ingest correlated data including `TargetUserName` (from Windows Event ID 4624), `Workstation_IP`, `Process_Name` (from Windows Event ID 4688), `id.resp_h` (target PLC), `function_code` (from modbus.log) or `opcode` (from s7comm.log), and `timestamp`. Alert when a sequence of commands or an individual command's characteristics (e.g., command type, frequency, target, or time of day) significantly deviates from the learned normal behavior for that specific operator, indicating a potential compromise or unauthorized activity."
          },
          {
            "description": "Detection of repeated (e.g., 3 or more within a 15-minute window) critical HMI/SCADA client software crashes (Windows Event ID 1000 - Faulting_Application_Name matching known HMI executables) or unresponsiveness (Windows Event ID 1002 - Application Hang) on an operator workstation. Each occurrence is immediately preceded (within 60 seconds) by anomalous inbound network traffic to the workstation's HMI listening port (id.resp_p) as recorded in Zeek conn.log, exhibiting characteristics such as: (1) a sudden surge in connection_count or orig_bytes from a single id.orig_h (e.g., 10x the 99th percentile); (2) communication over unexpected ports/protocols; or (3) malformed packet indicators (e.g., unusually short duration, significantly imbalanced orig_bytes vs resp_bytes for expected protocol).",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1002",
              "Zeek conn.log",
              "Zeek dce_rpc.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator workstations (Level 2), Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and network taps monitoring traffic to and from these critical endpoints within the ICS network.",
            "action": "1. Symbolic Logic: Monitor for Windows Event ID 1000 (Application Error) or 1002 (Application Hang) where `Faulting_Application_Name` matches known HMI/SCADA client executables (e.g., Siemens_WinCC.exe, Rockwell_FactoryTalk.exe). Upon detection, immediately query Zeek conn.log for all inbound network connections (`id.resp_h` matching the affected workstation IP) within the 60 seconds prior to the event timestamp. Look for connections from known malicious IPs (IOC watchlist), unexpected ports (`id.resp_p`) or `proto` for HMI communication, or traffic exhibiting characteristics of malformed packets (e.g., `orig_bytes` significantly smaller than `resp_bytes` for an expected protocol, or `duration` being extremely short for many connections from a single `id.orig_h`). 2. Statistical Method: For each critical HMI/SCADA workstation, establish a baseline of normal inbound `orig_bytes` and `connection_count` over 1-minute intervals, segmented by `id.orig_h` and `id.resp_p` (destination port), using the past 30 days of Zeek conn.log data. When a Windows Event ID 1000/1002 for an HMI application occurs, analyze the network traffic in the preceding 5 minutes. Generate an alert if the inbound `orig_bytes` or `connection_count` from a single source IP (`id.orig_h`) to the HMI's listening port (`id.resp_p`) exceeds the 99th percentile of its historical baseline by a factor of 3 or more. 3. Machine Learning: Develop a supervised machine learning classifier (e.g., Random Forest, SVM) trained on network flow features extracted from Zeek conn.log data that immediately preceded known HMI/SCADA crashes (labeled as 'malicious') versus normal operational periods (labeled as 'benign'). Features should include `orig_bytes`, `resp_bytes`, `duration`, `conn_state` distribution, `id.orig_p` entropy, and `id.resp_p`. When a new HMI crash event occurs, use the network traffic from the preceding 30 seconds (specifically from `id.resp_h` matching the affected workstation) as input to the classifier to predict if the traffic pattern is indicative of an attack, alerting on high confidence 'malicious' classifications."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]