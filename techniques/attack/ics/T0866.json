[
  {
    "information_requirement": "Is an adversary exploiting remote services to gain initial access into the ICS environment?",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0866",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "An inbound network connection from an IT network segment to an OT asset's service port (e.g., SMB/445, RDP/3389, VNC/5900, Modbus/502, DNP3/20000) that is not on an approved communication whitelist, targets a port with no established communication baseline, exhibits a protocol anomaly (e.g., a non-standard SMB negotiation sequence, an unexpected Modbus function code), or has a payload entropy (Shannon entropy) that exceeds the 95th percentile for that protocol's typical traffic.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek smb.log",
              "Zeek rdp.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Industrial Demilitarized Zone (IDMZ) network segments, firewalls at the IT/OT boundary, remote access gateways for OT, historian servers with external interfaces, and network switches/routers connecting IT and OT zones.",
            "action": "1. (Symbolic) Ingest Zeek logs into a SIEM. Create a rule that triggers on any Zeek conn.log entry where orig_h is in a designated IT IP range and resp_h is in a designated OT IP range, AND resp_p is a known remote service port (e.g., 445, 3389, 5900, 502, 20000), AND the combination of {orig_h, resp_h, resp_p} is not found on a pre-defined IT/OT communication whitelist. Correlate hits with Zeek notice.log for specific exploit signatures (e.g., 'SMB_NT_Trans_Pipe_Access_SMBv1_Exploit_Attempt', 'Scan::Port_Scan', 'DNP3_Parse_Error') occurring within 5 minutes for the same source/destination pair.\n2. (Statistical) For each whitelisted IT/OT communication channel (defined by source/destination IP and destination port), establish a 30-day rolling baseline for connection count, total bytes transferred, and payload entropy using Zeek conn.log. For payload entropy, calculate the Shannon entropy of the first 1024 bytes of the application layer payload. Alert when a new connection's payload entropy exceeds the 95th percentile for that specific channel, or when the connection count or byte volume for a 1-hour window exceeds 3 standard deviations from its historical mean.\n3. (Machine Learning) Implement a time-series anomaly detection model (e.g., an Isolation Forest or ARIMA) on aggregated IT-to-OT network flow statistics. Collect features per 5-minute interval, such as total connection volume, unique source/destination pairs, and protocol distribution. Train the model on at least 30 days of historical data. Trigger an alert when the model flags an interval as anomalous, indicating a statistically significant deviation from learned communication patterns, which could represent a coordinated scan or widespread exploit attempt."
          },
          {
            "description": "A critical OT asset's service (e.g., on an HMI, SCADA server) registers an application crash (Windows Event ID 1000) or an unexpected service termination (Windows Event ID 7031, 7034) within 60 seconds of receiving an inbound network connection from an IT network segment, where the connection's destination port matches the affected service's listening port.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 7034",
              "Windows Event ID 7031",
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Historian servers, and critical Windows-based control system assets in the Process Control Network (PCN) or Supervisory Control Network (SCN).",
            "action": "1. (Symbolic) Join network data (Zeek conn.log) with host data (Windows Event Logs) on IP address and timestamp. Create a rule that triggers when a Windows Event ID 1000 (Application Error), 7034 (Service Terminated Unexpectedly), or 7031 (Service Terminated) is logged on an OT asset, AND a Zeek conn.log entry exists showing a connection from an IT IP address to that OT asset's IP within the preceding 60 seconds, AND the destination port of the connection corresponds to the service that crashed.\n2. (Statistical) For each critical service on key OT assets, establish a 30-day baseline of the hourly frequency of crash-related events (Event IDs 1000, 7034, 7031). Create an alert that triggers when the count of these events for any service in a 1-hour window exceeds its 99th percentile or is more than 3 standard deviations above its historical average. Raise the alert's priority if the spike is preceded by an increase in network connections from IT segments to that host.\n3. (Machine Learning) Develop and train a binary classification model (e.g., Logistic Regression or Random Forest) to predict if a service crash is exploit-induced. Features for the model should include network metadata from Zeek (source IP's ASN and geolocation, connection duration, bytes transferred) and host event details from Windows Logs (faulting module path, exception code from Event ID 1000, service name). Train the model on labeled historical data of known legitimate and suspicious crashes to classify new events in real-time."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary exploiting remote services to move laterally within the ICS environment?",
    "tactic_id": "TA0109",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T0866",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "An OT host initiates connections on common remote service ports (e.g., SMB/445, RDP/3389, VNC/5900) or ICS protocols (e.g., Modbus/502, DNP3/20000) to more than 10 unique destination OT hosts within a 5-minute window, or to a number of unique destinations that is at least double its 99th percentile baseline for a 24-hour period.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek smb.log",
              "Zeek rdp.log",
              "Zeek dce_rpc.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Supervisory Control Network (SCN), Process Control Network (PCN), individual device networks (e.g., for PLCs, RTUs, IEDs), internal OT firewalls, and network switches/routers within the OT environment.",
            "action": "1. (Symbolic) Analyze Zeek conn.log for intra-OT traffic (where both orig_h and resp_h are in OT subnets). For each source host (orig_h), count the number of unique destination hosts (resp_h) it connects to on remote service or ICS ports (445, 3389, 5900, 502, 20000) within a 5-minute sliding window. Trigger an alert if the count exceeds 10, or if any connection is made to a designated 'honey-host' asset within the OT network.\n2. (Statistical) For each OT host, establish a 30-day rolling baseline of the 99th percentile for unique destination IPs contacted per hour on remote service and ICS ports. Create an alert that triggers when a host's current count of unique destinations within a 10-minute window exceeds this 99th percentile baseline by a factor of 2 or more. This identifies hosts exhibiting fan-out behavior that is anomalous for that specific host.\n3. (Machine Learning) Model intra-OT host communication from Zeek conn.log as a directed graph where nodes are hosts and edges are connections. Use graph algorithms to detect anomalies. For example, apply the PageRank algorithm periodically and alert on any node (host) whose rank suddenly increases dramatically, indicating it has become a new hub of activity. Alternatively, use community detection algorithms (e.g., Louvain Modularity) to identify hosts that begin communicating with previously separate network clusters, suggesting lateral spread across security zones."
          },
          {
            "description": "A critical OT application process (e.g., Historian.exe, HMI_Runtime.exe) on an OT asset spawns a child process (Windows Event ID 4688, Sysmon Event ID 1) that is not on its established legitimate child process whitelist, such as a command interpreter (cmd.exe, powershell.exe) or an unsigned executable, within 120 seconds of receiving an inbound network connection from another OT asset.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Historian servers, and other critical Windows-based control system assets within the Process Control Network (PCN) or Supervisory Control Network (SCN).",
            "action": "1. (Symbolic) Join intra-OT network data (Zeek conn.log) with host process data (Sysmon Event ID 1) on IP address and timestamp. Create a rule that triggers when a process creation event occurs on an OT asset where the parent process is a critical OT application (e.g., 'HMI_Runtime.exe') and the child process is not on a pre-defined whitelist for that parent (e.g., child is 'cmd.exe', 'powershell.exe', 'net.exe', 'rundll32.exe'), AND the event occurs within 120 seconds of a network connection from another OT host.\n2. (Statistical) For each parent-child process relationship observed in Sysmon Event ID 1 data, establish a baseline for the entropy and length of the command-line arguments. Alert when a new process creation event exhibits command-line entropy or length that is a statistical outlier (e.g., > 3 standard deviations from the mean for that specific parent-child pair), which can indicate obfuscated or unusually complex commands associated with post-exploitation activity.\n3. (Machine Learning) Train a sequence model, such as a Hidden Markov Model (HMM) or an LSTM-based autoencoder, on streams of process creation events (Sysmon Event ID 1) from critical OT assets. The model learns the normal sequences of process execution chains (e.g., Parent A -> Child B -> Child C). The model should flag any observed sequence with a low probability score, indicating a deviation from learned normal behavior, such as an HMI runtime suddenly spawning PowerShell, which in turn makes a network connection."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]