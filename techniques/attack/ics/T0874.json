[
  {
    "information_requirement": "Is an adversary executing malicious code on critical ICS components like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process (e.g., HMI runtime, engineering software) loads a dynamic-link library (DLL) that is either unsigned, has a low prevalence in the environment (e.g., <1% across all observed endpoints), or is loaded from a non-standard or user-writable directory (e.g., %TEMP%, %APPDATA%), indicating potential API hooking.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)",
            "action": "1. **Symbolic Logic (Allowlist/Blocklist):** For critical ICS processes (e.g., 'HMIRuntime.exe', 'RSLogix.exe'), establish a strict allowlist for `Windows Event ID 7 (Sysmon - Image Loaded)` events based on `Image`, `Signed`, `Signature`, `ImageHashed`, and `TargetFilename` fields. Generate an alert when a critical process loads a module where the `Image` or `TargetFilename` is not on the allowlist, `Signed` is false, or the `Image` path is from a known suspicious directory (e.g., `%TEMP%`, `%APPDATA%`).\n2. **Statistical (Prevalence/Entropy):** For all `Windows Event ID 7` events, calculate the prevalence of each unique `ImageHashed` across all EWS/HMIs over a 30-day rolling window. Alert if a module loaded by a critical process has a prevalence below the 5th percentile for that specific process. Additionally, calculate the Shannon entropy of the `TargetFilename` path; alert if the entropy exceeds a threshold (e.g., 4.0), indicating an obfuscated or randomly generated path.\n3. **Machine Learning (Anomaly Detection on Load Time/Location):** Develop a time series model (e.g., Isolation Forest or Prophet) for `Windows Event ID 7` events for each critical ICS process, baselining typical load times, source directories (`Image`), and `TargetFilename`. Alert on significant deviations from the established baseline in terms of frequency, time of day, or new, never-before-seen load locations (e.g., `Image` path)."
          },
          {
            "description": "A critical ICS application process establishes an outbound network connection to an IP address or domain not observed within its established baseline of normal communications, or utilizes a non-standard port/protocol for that process, potentially indicating C2 or data exfiltration resulting from API hooking.",
            "data_sources": [
              "Windows Event ID 3 (Sysmon - Network Connection)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers",
            "action": "1. **Symbolic Logic (IOC/Allowlist):** Create an allowlist of permitted destination IP addresses, ports, and protocols for each critical ICS process using `Windows Event ID 3 (Sysmon - Network Connection)` and `Zeek conn.log` (correlating `id.orig_h` with `SourceIp` and `id.resp_h` with `DestinationIp`). Alert if a critical process initiates a connection to an IP address or port not on its established allowlist, or if `Zeek dns.log` shows `id.resp_h` resolving to a known malicious IP/domain from threat intelligence feeds.\n2. **Statistical (Rare Destination/Port):** For each critical ICS process, calculate the historical frequency of destination IP addresses and destination ports observed in `Zeek conn.log` and `Windows Event ID 3`. Alert when a critical process connects to a destination IP or port that falls below the 1st percentile of observed frequency for that process, especially if the destination is external to the PCN or is a non-standard port for the application.\n3. **Machine Learning (Behavioral Profiling):** Use a clustering algorithm (e.g., K-Means or DBSCAN) on `Zeek conn.log` data, enriched with `Windows Event ID 3` process information, to group similar network connection behaviors for each critical ICS process. Profile normal connection patterns (e.g., volume, duration, byte counts, destination entropy). Alert when a connection from a critical process deviates significantly from its established cluster centroids, indicating an anomalous communication pattern."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on ICS network hosts to gain deeper control? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process running with elevated privileges loads a dynamic-link library (DLL) that is not signed by a trusted vendor, has an executable signature mismatch, or is statistically rare (e.g., in the lowest 1st percentile of loaded modules for that process across the environment), suggesting an attempt to inject malicious code for privilege escalation.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN",
            "action": "1. **Symbolic Logic (Signature Verification/Path Allowlist):** For `Windows Event ID 7 (Sysmon - Image Loaded)` events, specifically for processes running with `IntegrityLevel` 'System' or 'High', verify that `Signed` is 'true' and `SignatureStatus` is 'valid'. Additionally, maintain an allowlist of legitimate `Image` paths for these critical processes. Alert if `Signed` is 'false', `SignatureStatus` is 'invalid', or the `Image` path is not on the allowlist or is found in known user-writable or temporary directories (e.g., `%TEMP%`, `%APPDATA%`, `C:\\Users\\*\\Downloads`).\n2. **Statistical (Entropy/Prevalence):** Calculate the Shannon entropy of the `Image` (file path) field for all `Windows Event ID 7` events associated with high-integrity ICS processes. Alert if the entropy exceeds a defined threshold (e.g., 4.5), suggesting obfuscation or dynamic path generation. Concurrently, calculate the global prevalence of each `ImageHashed` for these processes across all monitored ICS assets; alert if a loaded module's hash is in the lowest 0.5th percentile.\n3. **Machine Learning (Outlier Detection on Module Attributes):** Train an unsupervised anomaly detection model (e.g., One-Class SVM or Isolation Forest) on `Windows Event ID 7` events from high-integrity ICS processes, using features like `ImageSize`, `Hashes`, `Signed` status, and `Image` path characteristics (e.g., depth, special characters). Identify and alert on module loads that are significant outliers from the established normal profile for these critical processes."
          },
          {
            "description": "A critical ICS process (e.g., an HMI runtime or SCADA application), after loading a previously identified suspicious DLL, initiates a child process that deviates from its normal execution patterns, such as spawning a command shell (cmd.exe, powershell.exe) or an administrative utility (net.exe, taskmgr.exe), indicating successful code injection and execution.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)",
              "Windows Event ID 4688 (Security - A process has been created)",
              "Windows Event ID 1 (Sysmon - Process Create)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers",
            "action": "1. **Symbolic Logic (Chained Event Correlation & Blocklist):** Construct a correlation rule: IF (a `Windows Event ID 7 (Sysmon - Image Loaded)` event for a critical ICS process indicates a module load that is unsigned OR not on the process's allowlist) AND THEN (within 60 seconds, a `Windows Event ID 1 (Sysmon - Process Create)` or `Windows Event ID 4688` event shows the `ParentProcessName` matching the critical ICS process AND `NewProcessName` is on a blocklist of suspicious executables (e.g., `cmd.exe`, `powershell.exe`, `net.exe`, `wmic.exe`, `sc.exe`, `psexec.exe`)). Alert on such chained events.\n2. **Statistical (Child Process Anomaly Score):** For each critical ICS parent process, establish a baseline of normal child process execution (frequency of `NewProcessName`, typical command-line arguments, `ProcessCommandLine` length) using `Windows Event ID 1` and `Windows Event ID 4688` over a 60-day period. Assign a risk score to each child process spawn based on deviations from this baseline (e.g., `NewProcessName` not seen before, `ProcessCommandLine` length > 3 standard deviations from mean). Trigger an alert if the cumulative risk score for a child process exceeds a predefined threshold.\n3. **Machine Learning (Parent-Child Relationship Modeling):** Develop a graph-based ML model or a sequence prediction model to learn legitimate parent-child process relationships for critical ICS applications using `Windows Event ID 1` and `Windows Event ID 4688`. Model the expected sequence and types of child processes for each parent. Identify and alert on instances where a critical ICS process spawns a child process that breaks the established sequence or relationship model, especially after a suspicious `ImageLoaded` event (integrating context from `Windows Event ID 7`)."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]