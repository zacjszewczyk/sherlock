[
  {
    "information_requirement": "Is an adversary executing malicious code on critical ICS components like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process (e.g., HMI runtime, engineering software) loads a suspicious or unauthorized module (DLL), which could be used to hook API functions.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations",
            "action": "For critical ICS processes, establish a baseline of normally loaded modules (DLLs) using Windows Event ID 7 (Sysmon - Image Loaded). Create an allowlist of module names, hashes, and file paths. Generate an alert when a critical process loads a module that is not on the allowlist, is unsigned, or is loaded from a non-standard directory (e.g., %TEMP%, %APPDATA%). Calculate the frequency of each loaded module hash across the environment; a hash that is globally rare (e.g., in the lowest 5th percentile) is a strong indicator of suspicion."
          },
          {
            "description": "A legitimate and trusted ICS application process initiates an anomalous network connection, potentially as a result of its functions being hooked by malicious code.",
            "data_sources": [
              "Windows Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers",
            "action": "Correlate process launch information from Windows Event ID 3 (Sysmon - Network Connection) with network session data from Zeek conn.log. For each critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe'), establish a baseline of normal network behavior, including typical destination IPs, ports, and protocols. Alert on deviations, such as connections to new or rare IP addresses (statistically infrequent destinations), communication over non-standard ports, or connections to external addresses from a process that should only communicate internally."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on ICS network hosts to gain deeper control? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process, which typically runs with elevated privileges, loads an unexpected or unsigned module (DLL). Adversaries may use this to inject code into a high-privilege process to execute their own code with the same permissions.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN",
            "action": "Using Windows Event ID 7 (Sysmon - Image Loaded), monitor high-integrity processes associated with ICS operations. Create a strict baseline of all modules loaded by these processes. Alert on any module load that deviates from this baseline, paying special attention to modules that are unsigned, have low prevalence in the environment, or are loaded from user-writable directories. Calculate the entropy of the file path for loaded modules; a high-entropy path may indicate a randomly generated location used by malware."
          },
          {
            "description": "Following a suspicious module load into a critical process, that same process spawns a new, unexpected child process (e.g., cmd.exe, powershell.exe), indicating successful code execution via hooking.",
            "data_sources": [
              "Windows Event ID 7",
              "Windows Event ID 4688",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers",
            "action": "Create a detection that chains events. First, identify a suspicious module load via Windows Event ID 7 (Sysmon) based on criteria like being unsigned or not on a baseline allowlist. Then, monitor for subsequent process creation events (Windows Event ID 4688 or Sysmon Event ID 1) originating from the parent process that loaded the suspicious module. Alert if the parent ICS process (e.g., 'FactoryTalk.exe') spawns a child process not associated with normal operations, such as command-line interpreters or reconnaissance tools."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]