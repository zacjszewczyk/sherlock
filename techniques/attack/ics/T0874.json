[
  {
    "information_requirement": "Has the adversary gained initial access to critical ICS components like Engineering Workstations or HMIs via malicious code execution? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe') loads a dynamic-link library (DLL) where the 'Signed' status is 'false', the 'SignatureStatus' is 'invalid', the DLL's hash ('ImageLoadedHash') has a prevalence below the 1st percentile across all monitored ICS endpoints over the last 30 days, or the 'ImageLoaded' path is from a known non-standard or user-writable directory (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp), indicating potential API hooking for code execution.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)",
            "action": "1. Symbolic Logic (Allowlist/Blocklist): For Windows Event ID 7 (Sysmon - Image Loaded) events, identify critical ICS processes (e.g., where 'Image' field matches 'HMIRuntime.exe' or 'RSLogix.exe'). Establish an allowlist for loaded modules based on the 'ImageLoaded' path, 'ImageLoadedHash', and 'Signed' status. Generate an alert when a critical process loads a module where 'Signed' is 'false', 'SignatureStatus' is 'invalid', or the 'ImageLoaded' path is not on the allowlist or originates from a known suspicious directory (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp).\n2. Statistical (Prevalence/Entropy): For all Windows Event ID 7 (Sysmon - Image Loaded) events, calculate the prevalence of each unique 'ImageLoadedHash' across all monitored ICS assets (EWS, HMIs, Servers) over a 30-day rolling window. Alert if a module loaded by a critical process has a prevalence below the 1st percentile for that specific process. Additionally, calculate the Shannon entropy of the 'ImageLoaded' file path; alert if the entropy exceeds a threshold (e.g., 4.0), indicating an obfuscated or randomly generated path.\n3. Machine Learning (Anomaly Detection on Load Time/Location): Develop an unsupervised anomaly detection model (e.g., Isolation Forest or Autoencoder) for Windows Event ID 7 (Sysmon - Image Loaded) events. For each critical ICS process, baseline normal module loading behavior using features such as 'ImageLoaded' path, 'ImageLoadedHash', 'Signed' status, and time of day. Train the model on historical data (e.g., 90 days) and alert on new 'ImageLoaded' events that represent significant deviations from the learned baseline, such as new or rare 'ImageLoaded' paths, unusual load times, or changes in 'Signed' status."
          },
          {
            "description": "A critical ICS application process (e.g., 'HMIRuntime.exe', 'RSLogix.exe') establishes an outbound network connection to a 'DestinationIp' or 'DestinationPort' not observed within its established baseline of normal communications, or resolves to a domain not previously seen for that process, potentially indicating C2 or data exfiltration resulting from API hooking.",
            "data_sources": [
              "Windows Event ID 3 (Sysmon - Network Connection)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers",
            "action": "1. Symbolic Logic (IOC/Allowlist): For each critical ICS process (identified by 'Image' in Windows Event ID 3 or correlated 'process_name' from other host logs), establish an allowlist of permitted 'DestinationIp' addresses, 'DestinationPort' numbers, and 'Protocol' values. Correlate 'Windows Event ID 3 (Sysmon - Network Connection)' with 'Zeek conn.log' (matching 'SourceIp'/'id.orig_h' and 'DestinationIp'/'id.resp_h', 'DestinationPort'/'id.resp_p'). Alert if a critical process initiates a connection to an IP address or port not on its established allowlist. Additionally, cross-reference 'Zeek dns.log' ('query' field) against known malicious domains from continuously updated threat intelligence feeds; alert if a query from a critical ICS asset matches a malicious domain.\n2. Statistical (Rare Destination/Port): For each critical ICS process, calculate the historical frequency and unique count of 'DestinationIp' and 'DestinationPort' observed in 'Zeek conn.log' and 'Windows Event ID 3' over a 90-day rolling window. Alert when a critical process initiates a connection where the 'DestinationIp' or 'DestinationPort' falls below the 1st percentile of observed frequency for that specific process, particularly if the destination is external to the Process Control Network (PCN) or uses a non-standard port for the application's typical communication.\n3. Machine Learning (Behavioral Profiling): Develop an unsupervised anomaly detection model (e.g., Isolation Forest or DBSCAN) for network connections from critical ICS processes. Utilize 'Zeek conn.log' and 'Windows Event ID 3 (Sysmon - Network Connection)' data, correlating process information. Extract features such as 'DestinationIp', 'DestinationPort', 'Protocol', 'duration', 'orig_bytes', 'resp_bytes', and entropy of destination domains (from 'Zeek dns.log'). Train the model on historical network traffic (e.g., 90 days) to establish normal communication patterns for each critical process. Alert on new connections that are outliers from the learned normal clusters, indicating highly anomalous network behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on ICS hosts to gain deeper control over critical industrial processes? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process running with elevated privileges (e.g., 'IntegrityLevel' of 'System' or 'High' in Windows logs) loads a dynamic-link library (DLL) where the 'Signed' status is 'false', the 'SignatureStatus' is 'invalid', the DLL's hash ('ImageLoadedHash') has a prevalence below the 0.5th percentile across all monitored ICS endpoints over the last 30 days, or the 'ImageLoaded' path is from a known non-standard or user-writable directory (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp), suggesting an attempt to inject malicious code for privilege escalation.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN",
            "action": "1. Symbolic Logic (Signature Verification/Path Allowlist): For Windows Event ID 7 (Sysmon - Image Loaded) events, filter for critical ICS processes running with 'IntegrityLevel' 'System' or 'High'. Establish an allowlist for loaded modules based on the 'ImageLoaded' path, 'ImageLoadedHash', and 'Signed' status. Generate an alert if 'Signed' is 'false', 'SignatureStatus' is 'invalid', or the 'ImageLoaded' path is not on the allowlist or is found in known user-writable or temporary directories (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp, C:\\Users\\*\\Downloads).\n2. Statistical (Entropy/Prevalence): Calculate the Shannon entropy of the 'ImageLoaded' (file path) field for all 'Windows Event ID 7 (Sysmon - Image Loaded)' events associated with high-integrity ICS processes. Alert if the entropy exceeds a defined threshold (e.g., 4.5), suggesting obfuscation or dynamic path generation. Concurrently, calculate the global prevalence of each 'ImageLoadedHash' for modules loaded by these processes across all monitored ICS assets over a 30-day rolling window; alert if a loaded module's hash is in the lowest 0.5th percentile.\n3. Machine Learning (Outlier Detection on Module Attributes): Train an unsupervised anomaly detection model (e.g., One-Class SVM or Isolation Forest) on 'Windows Event ID 7 (Sysmon - Image Loaded)' events originating from high-integrity ICS processes. Use features such as 'ImageLoadedSize', 'ImageLoadedHash', 'Signed' status, 'SignatureStatus', and characteristics of the 'ImageLoaded' path (e.g., path depth, presence of special characters, directory entropy). Identify and alert on module loads that are significant outliers from the established normal profile for these critical processes, indicating potential malicious injection."
          },
          {
            "description": "A critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe'), after loading a previously identified suspicious DLL (from a 'Windows Event ID 7' alert), initiates a child process ('NewProcessName' in 'Windows Event ID 1' or '4688') that deviates from its normal execution patterns, such as spawning a command shell (e.g., 'cmd.exe', 'powershell.exe') or an administrative utility (e.g., 'net.exe', 'taskmgr.exe', 'wmic.exe'), indicating successful code injection and execution for privilege escalation.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)",
              "Windows Event ID 4688 (Security - A process has been created)",
              "Windows Event ID 1 (Sysmon - Process Create)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers",
            "action": "1. Symbolic Logic (Chained Event Correlation & Blocklist): Construct a correlation rule: IF (a 'Windows Event ID 7 (Sysmon - Image Loaded)' event for a critical ICS process ('Image') indicates a module load ('ImageLoaded') where 'Signed' is 'false' OR 'SignatureStatus' is 'invalid' OR 'ImageLoaded' path is from a suspicious directory) AND THEN (within 60 seconds, a 'Windows Event ID 1 (Sysmon - Process Create)' or 'Windows Event ID 4688 (Security - A process has been created)' event shows the 'ParentProcessName' matching the critical ICS process AND 'NewProcessName' is on a blocklist of suspicious executables (e.g., 'cmd.exe', 'powershell.exe', 'net.exe', 'wmic.exe', 'sc.exe', 'psexec.exe', 'bitsadmin.exe')). Alert on such chained events, providing context from both events.\n2. Statistical (Child Process Anomaly Score): For each critical ICS parent process ('ParentProcessName' in Windows Event ID 1/4688), establish a baseline of normal child process execution patterns (frequency of 'NewProcessName', typical 'ProcessCommandLine' arguments, 'ProcessCommandLine' length, and user context) using 'Windows Event ID 1 (Sysmon - Process Create)' and 'Windows Event ID 4688 (Security - A process has been created)' over a 90-day period. Assign a risk score to each child process spawn based on deviations from this baseline (e.g., 'NewProcessName' not seen before, 'ProcessCommandLine' containing rare keywords, 'ProcessCommandLine' length exceeding 3 standard deviations from the mean for that process). Trigger an alert if the cumulative risk score for a child process exceeds a predefined threshold (e.g., 70 out of 100).\n3. Machine Learning (Parent-Child Relationship Modeling): Develop a graph-based ML model or a sequence prediction model (e.g., LSTM or Transformer) to learn legitimate parent-child process relationships for critical ICS applications. Use 'Windows Event ID 1 (Sysmon - Process Create)' and 'Windows Event ID 4688 (Security - A process has been created)' to map 'ParentProcessName' to 'NewProcessName' and their respective 'ProcessCommandLine's. Model the expected sequence and types of child processes for each parent. Integrate context from 'Windows Event ID 7 (Sysmon - Image Loaded)' alerts. Identify and alert on instances where a critical ICS process spawns a child process that significantly breaks the established sequence or relationship model, particularly if it follows an alert for a suspicious DLL load."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]