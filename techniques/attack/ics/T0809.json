[
  {
    "information_requirement": "Is an adversary attempting to destroy critical operational data or system files to inhibit response functions in the ICS environment? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0809",
        "name": "Data Destruction",
        "evidence": [
          {
            "description": "Anomalous process creation (Windows Event ID 4688) on a critical ICS asset, indicated by the CommandLine field containing known data destruction utility keywords (e.g., 'sdelete', 'killdisk', 'cipher /w', 'wevtutil cl'), or a command line whose character entropy or length exceeds 3 standard deviations from the 30-day rolling baseline for that specific process name and host.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, Process Control Servers (PCS), Operator Workstations",
            "action": "1. Symbolic Logic (IOC Match): Configure a SIEM rule to generate a high-priority alert upon detection of Windows Event ID 4688 where the `NewProcessName` or `CommandLine` field contains case-insensitive matches for known data destruction tools or commands, such as 'sdelete', 'killdisk', 'cipher.exe /w', 'format', 'wevtutil cl', or 'fsutil file setzerodata'. The rule should be scoped to trigger only on assets within the defined NAIs. Maintain a strict whitelist of approved administrative scripts or processes that may legitimately use these commands to reduce false positives. 2. Statistical Method: For each unique `NewProcessName` on each host within the NAIs, establish a 30-day rolling baseline of its hourly execution frequency, `CommandLine` length, and `CommandLine` Shannon entropy. Generate an alert if: (a) the hourly count for a process exceeds its 99th percentile, (b) a process is executed that has not been seen on that host in 30+ days, or (c) the `CommandLine` length or entropy score for a given execution deviates by more than 3 standard deviations from the established baseline for that specific `NewProcessName`. Correlate with parent process data to flag rare parent-child relationships (e.g., `explorer.exe` spawning `fsutil.exe`). 3. Machine Learning (Anomaly Detection): Train an unsupervised anomaly detection model (e.g., Isolation Forest) on a 90-day historical dataset of Windows Event ID 4688 logs from NAIs. Features for the model should include `NewProcessName` (one-hot encoded), `ParentProcessName` (one-hot encoded), `SubjectUserName` (one-hot encoded), `CommandLine` length, `CommandLine` character entropy, hour of day, and day of week. Continuously score new process events against the model. Generate a high-priority alert for events classified as outliers, providing the anomaly score and the top contributing features to the analyst for investigation."
          },
          {
            "description": "A high volume of file deletion events (Windows Event ID 4663 with 'DELETE' in Accesses field) originating from a single user or process within a short time frame (e.g., over 50 events in 60 seconds), targeting directories containing critical ICS project files, configurations, or backups (e.g., `C:\\Siemens\\`, `D:\\HistorianData\\`, `E:\\ICS_Backups\\`).",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS File Servers, Data Historians, ICS Backup Servers, Engineering Workstations (EWS), Process Control Servers (PCS)",
            "action": "1. Symbolic Logic (Rule-based): First, ensure 'Audit object access' for 'Delete' is enabled via GPO on critical ICS directories (`C:\\ProgramData\\Rockwell Automation`, `C:\\Siemens`, `D:\\HistorianArchives`, etc.). Create a SIEM correlation rule that triggers when the count of `Windows Event ID 4663` with `Accesses` containing 'DELETE' from a single `SubjectUserName` or `ProcessName` exceeds a threshold of 50 events in a 60-second window, where the `ObjectName` path matches a predefined list of critical ICS directories. Exclude authorized backup and maintenance process names from the rule logic. 2. Statistical Method: For each `SubjectUserName` and `ProcessName` on NAIs, calculate a 30-day rolling baseline (average and standard deviation) for `DELETE` event counts in 5-minute intervals. Alert if the current 5-minute count for any user or process exceeds 3 standard deviations above its baseline or is above the 99.5th percentile of its historical distribution. Additionally, calculate the entropy of the set of file extensions deleted within the same window; a sudden spike in entropy suggests indiscriminate deletion and should trigger an alert. 3. Machine Learning (Time Series Anomaly Detection): For each critical NAI, deploy a multivariate time-series anomaly detection model (e.g., VAR, LSTM autoencoder) trained on 90-day historical data. The model should track 1-minute aggregated counts of `DELETE` events, segmented by `SubjectUserName` and `ProcessName`. The model learns normal deletion patterns, including seasonality (e.g., end-of-day cleanup). Generate a high-priority alert when the actual `DELETE` count significantly deviates from the model's predicted range (e.g., falls outside the 99.5% prediction interval), indicating an anomalous surge in deletions."
          },
          {
            "description": "Deletion of one or more files with a high-value ICS-specific extension (e.g., .ACD, .S7P, .PCV, .ap16, .DSR, .gfx, .PLC) detected via Windows Event ID 4663 ('DELETE' in Accesses field) on a critical ICS asset, especially if performed by a non-standard user or process.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), File servers hosting ICS project files, Data Historians, ICS Backup Servers",
            "action": "1. Symbolic Logic (IOC Match): Configure a high-priority SIEM alert to trigger immediately upon `Windows Event ID 4663` where `Accesses` contains 'DELETE' and the `ObjectName` field ends with a critical ICS extension from a comprehensive list (e.g., `.ACD`, `.S7P`, `.PCV`, `.ap16`, `.DSR`, `.gfx`, `.HMI`, `.SCADA`, `.PLC`, `.BAK_PLC`). This rule should have a very strict whitelist for `SubjectUserName` and `ProcessName` combinations authorized for such actions, ideally restricted to specific maintenance windows. Any deletion outside this whitelist is a critical alert. 2. Statistical Method: Establish a 90-day baseline of all deletion activities involving critical ICS file extensions. For each deletion event, calculate a rarity score based on the historical frequency of that specific `SubjectUserName` deleting that specific file extension. A deletion by a user who has never deleted that file type before (or has done so with very low frequency) receives a high rarity score and generates an alert. Also, baseline the time of day for legitimate deletions and alert if a deletion occurs more than 3 standard deviations outside the normal time window (e.g., 3 AM deletion vs. normal 9-5 PM activity). 3. Machine Learning (Classification): Train a supervised classification model (e.g., Random Forest) on labeled historical `Windows Event ID 4663` data, distinguishing 'legitimate' from 'malicious' deletions of critical files. Features should include: `SubjectUserName` (one-hot encoded), `ProcessName` (one-hot encoded), file extension (one-hot encoded), `Source Workstation`, `TimeOfDay`, `DayOfWeek`, `IsMaintenanceWindow` (boolean), and the rarity score calculated in the statistical method. New deletion events are classified in real-time, and any event classified as 'malicious' with a confidence score > 0.9 generates a critical alert with contributing features for context."
          },
          {
            "description": "Detection of an executable file transferred into the OT/ICS network, identified via Zeek logs (`files.log`, `pe.log`), that exhibits malicious characteristics such as a high Shannon entropy score (>7.5), a hash matching threat intelligence, or PE header values that are anomalous compared to a baseline of legitimate ICS software.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary between IT and OT networks (ICS DMZ), Core ICS network segments, SCADA network, Process Control Network (PCN)",
            "action": "1. Symbolic Logic (IOC Match): Correlate Zeek logs using the `fuid`. Create a SIEM rule to alert on `files.log` entries where `resp_h` is in an OT/ICS subnet and `mime_type` indicates an executable ('application/x-dosexec'). Correlate with `pe.log` to confirm it is a PE file. Check the `sha256` hash from `files.log` against integrated threat intelligence feeds (e.g., CISA ICS Advisories, VirusTotal). Also, correlate with `conn.log` (via `uid`) to alert if the transfer occurs over a non-standard port or service (e.g., SMB over TCP/8445). Generate a high-priority alert on any match. 2. Statistical Method: For all executables transferred into the OT network (identified via `files.log` and `pe.log`), calculate the Shannon entropy of the file content. Maintain a 60-day rolling baseline of entropy values for legitimate executables from approved vendors. Alert if a new file's entropy exceeds 3 standard deviations from the mean or is above a threshold like 7.5 (indicative of packing/encryption). Similarly, baseline key PE header fields from `pe.log` (`num_sections`, `num_imports`, `linker_time`) against a known-good repository of ICS software. Alert on deviations of >3 standard deviations from this trusted baseline. 3. Machine Learning (Classification): Train a supervised binary classification model (e.g., LightGBM) on a labeled dataset of legitimate vs. malicious file transfers into the OT network. Use Zeek logs to engineer features: from `files.log` (file `size`, `mime_type`, content entropy), from `pe.log` (`num_sections`, `num_imports`, `linker_time`), and from `conn.log` (`service`, `duration`, `orig_bytes`, `resp_bytes`). Enrich with external data like IP reputation for `orig_h`. Continuously classify new file transfers, and alert on any file classified as 'malicious' with a confidence score > 0.9, presenting the model's feature importance to the analyst for faster triage."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]