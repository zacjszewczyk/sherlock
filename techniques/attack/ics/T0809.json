[
  {
    "information_requirement": "Is an adversary attempting to destroy critical operational data or system files to inhibit response functions in the ICS environment? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0809",
        "name": "Data Destruction",
        "evidence": [
          {
            "description": "Detection of process creation events (Windows Event ID 4688) on critical ICS assets where the CommandLine field contains specific data destruction utility keywords (e.g., 'sdelete', 'killdisk', 'cipher /w') or exhibits a statistically significant deviation in string length or character distribution compared to historical baselines for that process.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, Process Control Servers (PCS)",
            "action": "1. Symbolic Logic (IOC Match): Continuously monitor for process creation events (Windows Event ID 4688) on all NAIs. In the SIEM, create a rule to alert immediately when the `ProcessName` or `CommandLine` field matches known data destruction tool names (e.g., `sdelete.exe`, `killdisk.exe`, `cipher.exe`) or contains suspicious arguments (e.g., `/w`, `-z`, `format C:`). 2. Statistical Method: Calculate a 7-day rolling baseline for the count of each unique `ProcessName` and `CommandLine` value observed per hour on each NAI. For any 5-minute interval, alert if the count of a `ProcessName` or `CommandLine` exceeds the 99th percentile of its historical hourly baseline, or if a `ProcessName` or `CommandLine` that has not been observed in the last 30 days appears (0th percentile). 3. Machine Learning (Classification): Deploy an unsupervised anomaly detection model (e.g., Isolation Forest) trained on historical Windows Event ID 4688 data (features: `ProcessName`, `ParentProcessName`, `CommandLine` string length, `User`, `LogonId`). Continuously feed new process creation events into the trained model. Generate a high-priority alert for events classified as outliers with an anomaly score exceeding a predefined threshold (e.g., >0.7), indicating anomalous process execution on an ICS asset."
          },
          {
            "description": "Detection of a statistically significant surge in file deletion events (Windows Event ID 4663 where Accesses includes 'DELETE') from a single SubjectUserName or ProcessName targeting directories containing critical ICS configurations, project files, or historical data within a short time window (e.g., 5 minutes).",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS File Servers, Data Historians, ICS Backup Servers, Engineering Workstations (EWS) local storage",
            "action": "1. Symbolic Logic (Rule-based): Enable object access auditing for 'Delete' on critical ICS directories (e.g., SCADA project folders, historian archives) to generate Windows Event ID 4663. In the SIEM, create a rule to alert immediately when a single `SubjectUserName` or `ProcessName` generates more than 50 `Accesses: DELETE` events within a 60-second sliding window, specifically targeting whitelisted critical ICS data paths. 2. Statistical Method: For each unique `SubjectUserName` and `ProcessName`, calculate a 7-day rolling baseline for the average and standard deviation of `DELETE` event counts per 5-minute interval. Alert if the current 5-minute `DELETE` count for any `SubjectUserName` or `ProcessName` on a critical NAI exceeds 3 standard deviations above its rolling average, or if the count falls above the 99.5th percentile of the baseline distribution for that user/process. 3. Machine Learning (Time Series Anomaly Detection): Deploy a time-series anomaly detection model (e.g., Prophet) trained on historical 5-minute aggregated `DELETE` event counts for each `SubjectUserName` and `ProcessName` on critical NAIs. The model should predict expected deletion volumes. Generate an alert when the actual 5-minute `DELETE` count falls outside the 99th percentile prediction interval, indicating a statistically significant and anomalous surge in deletions."
          },
          {
            "description": "Detection of DELETE events (Windows Event ID 4663 where Accesses includes 'DELETE') targeting files with specific, high-value ICS extensions (e.g., .ACD, .S7P, .PCV, .HMI, .SCADA) on critical ICS assets or backup locations.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), File servers hosting ICS project files and backups, Data Historians",
            "action": "1. Symbolic Logic (IOC Match): In the SIEM, configure a high-priority rule to alert on Windows Event ID 4663 where `Accesses` includes 'DELETE' and `ObjectName` ends with any extension from a predefined list of critical ICS file types (e.g., `.ACD`, `.S7P`, `.PCV`, `.HMI`, `.SCADA`, `.BAK_PLC`, `.DBF_HIST`, `.MDB`). Implement whitelisting for known legitimate `SubjectUserName` and `ProcessName` combinations that are authorized to delete these file types during specific maintenance windows. 2. Statistical Method: Establish a 30-day baseline of legitimate deletion events for critical ICS file types, recording the `SubjectUserName`, `Source Workstation`, and `Time of Day`. Alert immediately if a deletion of a critical ICS file type occurs from a `SubjectUserName` or `Source Workstation` that has no historical record of deleting such files (0th percentile) or if the deletion occurs outside of a defined legitimate time window (e.g., 3 standard deviations from the average deletion time for that file type/user, or outside of scheduled maintenance hours). 3. Machine Learning (Classification): Develop a supervised classification model (e.g., Random Forest) trained on labeled historical data of legitimate and malicious deletions of critical ICS file types. Features for the model should include `SubjectUserName`, `ProcessName`, `ObjectName` extension, `Source Workstation`, `Time of Day`, and `DeletionRateInLastMinute`. Continuously feed new `DELETE` events (Windows Event ID 4663) into the model. Generate an alert for events classified as 'malicious deletion' with a high confidence score (e.g., >0.9)."
          },
          {
            "description": "Detection of file transfer events (Zeek files.log) from IT to OT/ICS networks where the transferred file is an executable (e.g., `mime_type` indicates executable, or `file_type` from `pe.log` is PE32) and exhibits high Shannon entropy, anomalous PE header characteristics (e.g., `linker_time`, `num_sections` outside of baseline), or matches known malicious hashes/signatures.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary between IT and OT networks (e.g., ICS DMZ), Core ICS network segments, SCADA network segments",
            "action": "1. Symbolic Logic (IOC Match): In the SIEM, create a rule to alert on `Zeek files.log` events where `mime_type` contains 'executable' or 'msdownload', or where correlation with `Zeek pe.log` confirms `file_type` is PE32. Further filter these alerts if the `tx_hosts` or `rx_hosts` are not within a predefined whitelist of approved IT/OT file transfer servers. Additionally, integrate `Zeek files.log` `sha256` hashes with external threat intelligence platforms to alert on matches with known data destruction tools. 2. Statistical Method: For all executable files identified in `Zeek files.log`, calculate the Shannon entropy of the file content. Establish a 30-day rolling baseline for entropy values of legitimate ICS executables. Alert if a transferred executable's entropy value exceeds the 99th percentile of this baseline (e.g., >7.5 bits per byte). Additionally, for these executables, correlate with `Zeek pe.log` data. Calculate baselines for PE header fields such as `num_sections`, `num_imports`, and `linker_time`. Alert if any of these values for a new executable fall outside 3 standard deviations of their respective historical means. 3. Machine Learning (Classification): Deploy a binary classification model (e.g., Gradient Boosting Classifier) trained on features extracted from `Zeek files.log` and `Zeek pe.log` (e.g., file size, Shannon entropy, `mime_type`, `is_exe` flag, `num_sections`, `linker_time`, count of `imports`, count of `exports`, source/destination IP reputation from `conn.log`). This model should be trained on labeled data of legitimate software deployments and known malicious file transfers. Continuously feed new file transfer events into the model. Generate a high-priority alert for any executable file transfer classified as 'malicious' with a confidence score exceeding 0.9."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]