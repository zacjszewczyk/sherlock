[
  {
    "information_requirement": "Is an adversary using trusted host or application binaries to execute malicious commands or payloads on ICS systems? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0894",
        "name": "System Binary Proxy Execution",
        "evidence": [
          {
            "description": "Execution of a trusted ICS application binary or a standard Windows system binary (e.g., `svchost.exe`, `rundll32.exe`) where the command-line arguments contain specific suspicious keywords (e.g., 'powershell', 'cmd.exe /c', 'mshta', 'regsvr32'), base64 encoded strings, unexpected network paths (e.g., `\\\\unc\\path` to external/untrusted shares, `http://` or `https://` URLs), or exhibit an abnormally high entropy score (e.g., > 4.5 bits/char) indicating obfuscation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Data Gateways within the OT network.",
            "action": "1. **Symbolic Logic (IOC Match)**: Create a watch list of known suspicious command-line keywords (e.g., 'powershell.exe -enc', 'cmd.exe /c', 'mshta.exe', 'regsvr32.exe /s /i:', 'rundll32.exe javascript:') and untrusted network path patterns (`\\\\<external_ip>`, `http://`, `https://`) relevant to ICS. Query Windows Event ID 4688 (Process Creation) logs for command lines of whitelisted ICS application binaries and common system utilities (e.g., `svchost.exe`, `rundll32.exe`, `wscript.exe`, `cscript.exe`) that contain any of these suspicious keywords or patterns. Alert on matches.\n2. **Statistical Method (Percentile/Entropy)**: For each unique trusted ICS application binary or system utility, establish a baseline of command-line argument length and Shannon entropy (bits/character) over a a 30-day period. Calculate the 99th percentile for both metrics. For new process creations, calculate the current command-line length and entropy. Generate an alert if either metric exceeds its respective 99th percentile threshold, especially for processes typically having low entropy or short command lines (e.g., `svchost.exe` spawning with a high-entropy command line).\n3. **Machine Learning (Classification/Anomaly Detection)**: Develop a machine learning model (e.g., a text classifier using TF-IDF or word embeddings) trained on known benign and malicious ICS command-line arguments. Apply this model to new Windows Event ID 4688 command-line entries from trusted binaries. Alternatively, use a time-series anomaly detection algorithm (e.g., Isolation Forest or ARIMA) on the daily count of unique command-line arguments or the average entropy for specific trusted binaries. Alert on classifications indicating maliciousness or significant anomalies in command-line behavior."
          },
          {
            "description": "A whitelisted ICS application binary or a standard Windows system binary (e.g., `services.exe`, `svchost.exe`) establishes an outbound network connection to an IP address categorized as external to the OT/IT network, a known malicious IP (IOC), or a destination within the OT network using an unexpected application-layer protocol (e.g., HTTP/S, FTP, SMB, DNS tunneling) for that specific process, as observed through network flow data.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (Control Network, Process Network), Industrial Demilitarized Zone (IDMZ), Internet Gateway, SCADA Firewalls.",
            "action": "1. **Symbolic Logic (IOC Match/Whitelist)**: Maintain a whitelist of approved destination IP ranges and protocols for critical ICS application binaries and system services. Correlate Zeek conn.log entries with Windows Event ID 4688 (Process Creation) logs by source IP and timestamp to attribute network connections to specific processes. Alert on any connection initiated by a whitelisted ICS process to an IP address outside the approved ranges or using a protocol not on the whitelist (e.g., `HMI.exe` connecting to an external IP on port 80/443, or `PLC_Config.exe` using SMB). Additionally, cross-reference destination IPs/domains from Zeek conn.log and dns.log against threat intelligence feeds for known malicious IPs/domains and alert on matches.\n2. **Statistical Method (Frequency/Percentile)**: For each critical ICS application process, establish a baseline of its normal network connection count, unique destination IPs, and data volume (bytes_orig, bytes_resp) over a 30-day period using Zeek conn.log. Calculate the 99th percentile for these metrics. Monitor for instances where an ICS process's network activity (e.g., number of connections, data volume) significantly exceeds its historical 99th percentile, indicating unusual data exfiltration or command and control activity. Use Zeek dns.log to identify DNS queries from ICS hosts to domains with low reputation scores or domains that are newly observed (less than 30 days old) within the environment.\n3. **Machine Learning (Anomaly Detection/Classification)**: Train a network traffic anomaly detection model (e.g., an unsupervised clustering algorithm like k-means or a neural network autoencoder) on Zeek conn.log data, specifically focusing on source-destination IP pairs, ports, and protocol distributions for traffic originating from ICS hosts. Apply this model to real-time network flow data to identify deviations from established normal communication patterns. Alternatively, use a supervised classification model to classify DNS queries (from Zeek dns.log) as benign or malicious based on features like domain length, TLD, entropy of the domain name, and historical query patterns, alerting on high-confidence malicious classifications."
          },
          {
            "description": "A whitelisted parent process, specifically a trusted ICS application binary or a critical Windows system binary (e.g., `services.exe`, `svchost.exe`), creates a child process that is not part of its established legitimate execution chain. This includes spawning command shells (e.g., `cmd.exe`, `powershell.exe`), script interpreters (e.g., `wscript.exe`, `cscript.exe`), or other known suspicious executables (e.g., `mshta.exe`, `bitsadmin.exe`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Jump Hosts in the OT environment.",
            "action": "1. **Symbolic Logic (Whitelist/Blacklist)**: Establish a comprehensive whitelist of approved parent-child process relationships for all critical ICS application binaries and key Windows system processes (e.g., `services.exe`, `svchost.exe`) based on known good system behavior. Simultaneously, create a blacklist of highly suspicious child processes (e.g., `cmd.exe`, `powershell.exe`, `wscript.exe`, `cscript.exe`, `mshta.exe`, `bitsadmin.exe`) when spawned by non-standard parent processes. Query Windows Event ID 4688 (Process Creation) logs and alert immediately when a whitelisted ICS parent process spawns a child process that is on the blacklist, or when an unapproved child process is created by a trusted parent.\n2. **Statistical Method (Frequency/Rarity)**: Over a 60-day period, calculate the frequency of all unique parent-child process combinations within the ICS environment using Windows Event ID 4688. Identify the least common (e.g., bottom 5th percentile) parent-child relationships. For any new process creation event, compare its parent-child pair against this baseline. Generate an alert if a trusted ICS binary or system process spawns a child process combination that falls into the lowest percentile of observed frequency, or if a completely new, previously unobserved parent-child relationship emerges, especially if the child is an executable typically associated with malicious activity.\n3. **Machine Learning (Graph Anomaly Detection)**: Construct a graph representing parent-child process relationships from Windows Event ID 4688 data, where nodes are processes and edges represent spawning events. Apply a graph-based anomaly detection algorithm (e.g., Graph Neural Networks, PageRank variations, or community detection) to identify unusual patterns or deviations in the process execution graph for trusted binaries. For example, detect sudden expansions in a process tree from a single trusted parent, or a trusted binary becoming a parent to an unusually high number of diverse child processes, which could indicate a compromised execution chain."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]