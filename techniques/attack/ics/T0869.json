[
  {
    "information_requirement": "Is an adversary leveraging standard application layer protocols (e.g., DNP3, Modbus, HTTP) for command and control within the ICS network? (PIR)",
    "tactic_id": "TA0101",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T0869",
        "name": "Standard Application Layer Protocol",
        "evidence": [
          {
            "description": "A Zeek conn.log record showing an established connection using a known ICS or enterprise protocol (e.g., DNP3, Modbus, RDP, HTTP) where the destination port ('id.resp_p') is not the IANA-assigned standard port for that protocol's identified 'service' field, nor an organization-approved alternate port. This is considered high-fidelity evidence when the connection originates from or terminates at an external IP address, or traverses a defined IT/OT network segmentation boundary.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT Demarcation Points (e.g., firewalls, DMZ), ICS Zone Gateways, Enterprise Network Perimeter, Internet Proxies, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, PLCs, RTUs, Jump Servers.",
            "action": "1. Symbolic Logic: Step 1: Define and maintain a configuration map (e.g., a lookup file or table) that pairs services identified by Zeek (e.g., 'dnp3', 'modbus', 'rdp') with a list of approved TCP/UDP ports (e.g., DNP3: [20000], RDP: [3389, 3390]). Step 2: Implement a real-time SIEM query on Zeek conn.log streams. Step 3: The query should alert if `conn_state` is 'SF' or 'S1', the `service` field is in the defined map, AND the `id.resp_p` is NOT in the list of approved ports for that service. Step 4: Elevate the alert's severity if the `id.orig_h` or `id.resp_h` is a non-RFC1918 address (external) or if the source and destination IPs belong to different pre-defined network zones (e.g., IT vs. OT). 2. Statistical Method: Step 1: Create a scheduled query (e.g., run nightly) to analyze the last 30 days of Zeek conn.log. Step 2: For each unique `service` (e.g., 'dnp3'), group by `id.resp_p` and calculate the frequency for each port. Step 3: Identify ports that fall below a low-frequency threshold (e.g., the 1st percentile) for that service, flagging them as 'statistically rare ports'. Step 4: Implement a detection rule that cross-references live Zeek conn.log events against this generated list of rare ports. Step 5: Generate an alert when a new connection uses a protocol on a port identified as statistically rare, especially if it involves external IP addresses. 3. Machine Learning: Step 1: Train an unsupervised anomaly detection model (e.g., Isolation Forest) on historical Zeek conn.log data. Step 2: Use features such as: `proto`, `service` (one-hot encoded), `id.resp_p`, `duration`, `orig_bytes`, `resp_bytes`, `conn_state` (one-hot encoded), and categorical representations of source/destination subnets. Step 3: After training, deploy the model to score new connection events in real-time. Step 4: Generate an alert when a connection's anomaly score exceeds a predetermined threshold, prioritizing investigation for alerts where a critical ICS protocol is used on an unusual port or between subnets that rarely communicate."
          },
          {
            "description": "A statistically significant deviation from an established baseline in the behavioral characteristics of application-layer protocol traffic. This includes anomalies in data volume (e.g., `orig_bytes`), request/response patterns (e.g., DNP3 function codes), or metadata characteristics (e.g., URI or user-agent entropy), particularly for traffic originating from or destined for sensitive ICS assets or crossing IT/OT boundaries.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), SCADA Servers, Historian Servers, Human-Machine Interfaces (HMIs), DMZ Web Servers, Process Control Networks (PCN) Segments, Enterprise Proxies, Internet Gateways, Domain Controllers, Jump Servers.",
            "action": "1. Symbolic Logic: Step 1: For DNP3, establish a strict profile for each master-outstation communication path (`id.orig_h` to `id.resp_h`) in Zeek dnp3.log. This profile should be an allowlist of expected `function_code` values (e.g., 'READ', 'WRITE'). Step 2: Implement a SIEM rule that alerts when a DNP3 transaction is logged with a `function_code` not on the allowlist for that specific path (e.g., 'DIRECT_OPERATE_NR' where not expected). Step 3: Create a correlation rule to query for process creation events (Windows Event ID 4688) on the source or destination host within a 5-minute window of the DNP3 alert. Escalate the alert if a suspicious process (e.g., powershell.exe, cmd.exe) is launched by an unexpected parent process (e.g., an HMI software executable). 2. Statistical Method: Step 1: For outbound HTTP traffic from the ICS network (Zeek http.log), establish a 30-day rolling baseline for each source host (`id.orig_h`) of the 95th percentile for request body size (`orig_bytes`). Alert when a new request's size exceeds this baseline by a significant margin (e.g., >50%). Step 2: For the same traffic, calculate the Shannon entropy of the `uri` and `user_agent` fields. Alert if a new request's URI entropy exceeds 4.5 bits or its user-agent entropy exceeds 3.5 bits (common indicators of DGA or C2), or if the values deviate by more than 3 standard deviations from the host's specific baseline. 3. Machine Learning: Step 1: Implement a multivariate time-series anomaly detection model (e.g., LSTM Autoencoder) on aggregated Zeek log data for critical ICS protocols. Step 2: For each master-outstation pair, create time-series data by aggregating metrics into hourly buckets: count of messages, distribution of function codes, average transaction duration, and total bytes transferred. Step 3: Train the model on at least 30-60 days of this data to learn normal operational rhythms. Step 4: Generate an alert when the model's reconstruction error for a new time window exceeds a dynamic threshold, indicating a pattern deviation like a sudden flood of write commands or unusual data volume."
          },
          {
            "description": "A successful remote interactive logon (Windows Event ID 4624 with Logon Type 10) to an ICS asset that meets one or more of the following measurable criteria: the 'Source Network Address' is an unapproved external IP; the logon occurs at a statistically anomalous time (e.g., outside a 99% confidence interval for that user/asset); the session originates from a source host not typically associated with the destination asset; or the session duration is a statistical outlier.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4634",
              "Zeek conn.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Jump Servers/Bastion Hosts, Domain Controllers, Remote Access VPN Concentrators, IT/OT Demarcation Points, Active Directory Servers.",
            "action": "1. Symbolic Logic: Step 1: Maintain an explicit allowlist of authorized external IP addresses/subnets for RDP access. Step 2: Implement a SIEM rule to generate a high-severity alert for any successful logon (Windows Event ID 4624, Logon Type 10) where the `Source Network Address` is external (not RFC1918) and NOT on the allowlist. Step 3: For internal RDP, maintain a baseline of user-to-asset RDP permissions. Alert if a user account successfully logs on via RDP to an asset they are not explicitly approved to access. 2. Statistical Method: Step 1: For each user-asset pair, profile RDP logon hours using Windows Event ID 4624 from the last 90 days to establish a baseline distribution. Alert when a new logon occurs at an hour that is a statistical outlier (e.g., >3 standard deviations from the mean logon hour). Step 2: Correlate logon events (Event ID 4624) with logoff events (Event ID 4634) using the `Logon ID` to calculate RDP session durations. Baseline the 95th percentile of session duration for each user-asset pair. Alert if a new session's duration exceeds this percentile. 3. Machine Learning: Step 1: Construct a graph where nodes are users and ICS assets. Create edges between nodes representing historical RDP sessions (from Windows Event ID 4624 and Zeek rdp.log), enriched with features like time of day, duration, and bytes transferred. Step 2: Apply a graph-based anomaly detection algorithm (e.g., Local Outlier Factor on node embeddings) to identify anomalous edges. Step 3: Generate an alert for edges that represent a new, previously unseen connection (e.g., an HMI RDPing to another HMI), or an existing connection with highly anomalous features (e.g., a session at 3 AM with 10x the normal data transfer), indicating potential lateral movement or C2."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]