[
  {
    "information_requirement": "Has an adversary attempted to impair process control by sending unauthorized command messages to industrial control system devices? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0855",
        "name": "Unauthorized Command Message",
        "evidence": [
          {
            "description": "A Modbus Write (function code 0x06, 0x10, 0x16), DNP3 Operate (function code 0x01), EtherNet/IP Write ('Write Tag' service), or S7comm Write command message is observed in Zeek ICS protocol logs (e.g., modbus.log, dnp3.log) where the source IP address in the `id.orig_h` field is not explicitly listed in the 'Approved_ICS_Command_Initiators' whitelist, which contains authorized Engineering Workstations, HMIs, and control servers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, including network taps/sensors monitoring traffic to/from PLCs, RTUs, and field controllers at the Level 3.5 Industrial Demilitarized Zone (IDMZ), Level 3 Manufacturing Operations Management (MOM) Layer, and Level 2 Control System Layer.",
            "action": "1. Symbolic Logic: Create and maintain an explicit allow-list of IP addresses for all authorized devices (e.g., 'Approved_ICS_Command_Initiators') permitted to send critical command messages. For each command message identified in Zeek's ICS protocol logs, execute a SIEM rule that compares the `id.orig_h` field against this allow-list. Generate a high-priority alert for any command originating from an IP address not found in the allow-list. 2. Statistical Method: Over a 30-day rolling window, aggregate daily command counts per source IP (`id.orig_h`) from all Zeek ICS protocol logs. Identify any source IP not seen in the past 30 days. Separately, calculate the 99th percentile of daily command counts across all established IPs. Generate a medium-priority alert if a newly observed IP's daily command count exceeds this 99th percentile threshold, indicating a new and unusually active command source. 3. Machine Learning: Deploy a pre-trained supervised classification model (e.g., Gradient Boosting or Random Forest) that ingests features from Zeek conn.log and ICS protocol logs (e.g., `id.orig_h`, `id.resp_h`, `proto`, `service`, `duration`, `orig_bytes`, `resp_bytes`, `conn_state`, and parsed ICS command types). Score each new command event in real-time. Generate an alert if the model classifies the event as 'unauthorized' with a confidence score greater than 0.9."
          },
          {
            "description": "A Modbus, EtherNet/IP, S7comm, or DNP3 command message is observed in Zeek ICS protocol logs where the timestamp in the `ts` field falls outside established operational schedules (e.g., 22:00-06:00 local time) or approved maintenance windows. Alternatively, the command frequency for a specific command type from a given source IP exhibits a sudden burst exceeding 3 standard deviations from its 30-day historical hourly mean.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SCADA/HMI server segments, data historians, network taps, and industrial firewalls monitoring HMI, SCADA server, and PLC/RTU communications within the ICS network, including Level 1 Basic Control Layer and Level 0 Process Layer.",
            "action": "1. Symbolic Logic: Define and maintain time-based rules (e.g., 'no write commands between 22:00-06:00') and approved maintenance windows in a SIEM lookup table. For each command identified in Zeek ICS logs, create a SIEM rule to check if its `ts` timestamp falls within a prohibited time block. Generate an alert for any command executed outside of its approved schedule. 2. Statistical Method: For each critical command type, aggregate hourly counts from Zeek logs over a 90-day baseline period. For each hour of the day and day of the week, calculate the historical mean and standard deviation of command counts. In real-time, compare the current hourly command count against its specific historical baseline. Generate an alert if the current count exceeds the mean by more than 3 standard deviations. 3. Machine Learning: Continuously feed the timestamp (`ts`) and command type from Zeek ICS logs into a trained time-series anomaly detection model (e.g., Prophet or an LSTM Autoencoder). The model, trained on at least 90 days of data, learns seasonality and normal patterns. Generate an alert when the model flags a data point or sequence with an anomaly score exceeding a predefined threshold (e.g., > 0.7), indicating a deviation from learned temporal behavior."
          },
          {
            "description": "Windows Event ID 4688 records the creation of a critical ICS control application process (e.g., 'Siemens.WinCC.exe', 'Rockwell.FactoryTalk.exe') where its `ParentProcessName` is a non-standard process like 'powershell.exe', 'cmd.exe', 'wscript.exe', or any process not in the 'Approved_ICS_Parent_Processes' whitelist. This process creation is immediately followed by outbound ICS protocol network traffic (seen in Zeek conn.log, modbus.log, etc.) from the same host's IP address (`id.orig_h`) to a known PLC or RTU IP address (`id.resp_h`) within a 60-second window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and SCADA/Historian Servers within the control network.",
            "action": "1. Symbolic Logic: On critical Windows-based ICS hosts, monitor for process creation events (Windows Event ID 4688). Maintain an explicit whitelist of 'Approved_ICS_Parent_Processes' for each critical ICS application. Create a SIEM rule that triggers when a critical ICS application's `NewProcessName` is spawned by a `ParentProcessName` not on its approved list (especially `powershell.exe` or `cmd.exe`). Correlate this host event by IP and timestamp with Zeek logs to confirm outbound ICS protocol traffic to a control device within 60 seconds, and generate a high-priority alert if confirmed. 2. Statistical Method: From Windows Event ID 4688 logs over a 60-day baseline, calculate the frequency of all unique `ParentProcessName`-`NewProcessName` pairs. In real-time, identify any observed pair involving a critical ICS application that has a historical frequency in the bottom 1st percentile (i.e., is extremely rare). Escalate the priority of this finding if the parent is a scripting engine and the event correlates with outbound ICS network traffic from the host within 60 seconds. 3. Machine Learning: Model process activity from Windows Event ID 4688 as a directed graph where nodes are processes and edges are parent-child relationships. Use a graph-based anomaly detection algorithm (e.g., GraphSAGE) trained on historical data to learn normal graph structures. Score new process creation events based on their deviation from the learned graph. Generate a high-priority alert for anomalous process chains that involve critical ICS applications and are temporally correlated with outbound ICS protocol traffic from the same host, as seen in Zeek logs."
          },
          {
            "description": "A Modbus Write (e.g., function code 0x06, 0x10) or DNP3 Operate (function code 0x01) message, as observed in Zeek ICS protocol logs, contains a data value (e.g., from `modbus.log` `write_value` field) for a critical control parameter (e.g., valve position, temperature setpoint) that falls outside its predefined safe operational range. Alternatively, the message uses a `function_code` (from Zeek's `func` field) not approved for the specific target device or current process state.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, with a focus on traffic destined for critical final control elements (e.g., actuators, valves), safety instrumented systems (SIS), Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and Intelligent Electronic Devices (IEDs).",
            "action": "1. Symbolic Logic: In collaboration with process engineers, create a detailed 'process specification' lookup file containing, for each critical control point, the target device IP, valid function codes, valid register addresses, and min/max safe values. Parse Zeek ICS protocol logs (e.g., `modbus.log`, `dnp3.log`). For each write/operate command, cross-reference its `id.resp_h`, `func`, `addr`, and value fields against the process specification. Generate a critical alert for any command that violates the defined safe operational envelope. 2. Statistical Method: For each critical register address, establish a 90-day baseline distribution of its written value from Zeek logs. Calculate the mean, standard deviation, and interquartile range (IQR). Generate an alert if a new write value is an outlier (e.g., > 3 standard deviations from the mean or > 1.5 * IQR from the quartiles). Additionally, calculate the Shannon entropy of the value field in 1-hour windows; generate a separate alert if entropy changes significantly (> 2 standard deviations from its historical norm), suggesting fuzzing. 3. Machine Learning: For each critical device, train an unsupervised anomaly detection model (e.g., Autoencoder) on the historical distribution of its command parameters (e.g., function, address, value) from Zeek logs. In real-time, feed new command parameters into the model and calculate a reconstruction error. Generate an alert if the reconstruction error exceeds a dynamically tuned threshold, indicating the command's parameters are inconsistent with learned normal operations."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]