[
  {
    "information_requirement": "Has an adversary attempted to impair process control by sending unauthorized command messages to industrial control system devices? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0855",
        "name": "Unauthorized Command Message",
        "evidence": [
          {
            "description": "A Modbus Write (function code 0x06, 0x10, 0x16), DNP3 Operate (function code 0x01), EtherNet/IP Write (e.g., 'Write Tag' service), or S7comm Write command message is observed in Zeek ICS protocol logs where the source IP address (`id.orig_h`) is not explicitly listed in the 'Approved_ICS_Command_Initiators' whitelist, which contains authorized Engineering Workstations, HMIs, and control servers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, including network taps/sensors monitoring traffic to/from PLCs, RTUs, and field controllers at the Level 3.5 Industrial Demilitarized Zone (IDMZ), Level 3 Manufacturing Operations Management (MOM) Layer, and Level 2 Control System Layer.",
            "action": "1. Symbolic Logic: Maintain an explicit 'Approved_ICS_Command_Initiators' IP address allow-list in a SIEM lookup table for all authorized devices permitted to send critical command messages. For each command message identified in Zeek's ICS protocol logs (e.g., modbus.log, dnp3.log, enip.log, s7comm.log) where `id.orig_h` is present, query the SIEM to compare `id.orig_h` against this allow-list. Generate a high-priority alert for any command originating from an IP address not found in the allow-list. 2. Statistical Method: Establish a 30-day rolling baseline of unique source IP addresses (`id.orig_h`) and their daily command message volume from Zeek ICS protocol logs. Calculate the 99th percentile for daily command counts across all observed IPs. Trigger an alert when a new IP address (one not seen in the last 30 days) initiates command messages and its daily volume exceeds this 99th percentile, indicating a sudden and significant, previously unobserved source of command activity. 3. Machine Learning: Utilize a supervised classification model (e.g., Gradient Boosting or Neural Network) trained on historical Zeek conn.log and ICS protocol logs. Features for training would include `id.orig_h`, `id.resp_h`, `proto`, `service`, `duration`, `orig_bytes`, `resp_bytes`, `conn_state`, and parsed ICS command types. The model would classify source IP behavior as 'authorized' or 'unauthorized'. Flag source IPs as anomalous if the model's prediction confidence for 'authorized' activity drops below a defined threshold (e.g., 0.8) for more than 5 consecutive command messages, or if it directly classifies activity as 'unauthorized' with high confidence."
          },
          {
            "description": "A Modbus, EtherNet/IP, S7comm, or DNP3 command message is observed in Zeek ICS protocol logs where the timestamp (`ts` field) falls outside established operational schedules (e.g., 22:00-06:00 local time) or approved maintenance windows, or where the command frequency for a specific command type from a given source IP exhibits a sudden burst exceeding 3 standard deviations from its 30-day historical hourly mean.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SCADA/HMI server segments, data historians, network taps, and industrial firewalls monitoring HMI, SCADA server, and PLC/RTU communications within the ICS network, including Level 1 Basic Control Layer and Level 0 Process Layer.",
            "action": "1. Symbolic Logic: Define explicit operational schedules and approved maintenance windows for critical ICS command types (e.g., Modbus Write) in a SIEM configuration. For each command message in Zeek's ICS protocol logs, extract the `ts` field. Create a SIEM rule that checks if `ts` falls outside these predefined periods. Generate an alert for any command execution occurring during non-operational hours or unscheduled times. 2. Statistical Method: For each critical ICS command type, perform a time-series analysis on at least 90 days of historical Zeek log data. Aggregate command counts per hour per day of the week. Calculate the mean and standard deviation of command counts for each specific hour of the day and day of the week. Generate an alert when the observed command count in a given time window exceeds 3 standard deviations from its historical mean, indicating an unusual burst or activity at an anomalous time. 3. Machine Learning: Apply a time-series anomaly detection algorithm (e.g., an Isolation Forest or a Prophet model) to monitor the frequency of specific critical ICS command messages from Zeek logs. Train the model on historical command log data (using the `ts` field) to learn normal temporal patterns. Alert when the model identifies a significant deviation from the expected pattern (e.g., anomaly score above 0.7), indicating an unusual command surge or activity at an unexpected interval."
          },
          {
            "description": "Windows Event ID 4688 records a critical ICS control application process (e.g., 'Siemens.WinCC.exe', 'Rockwell.FactoryTalk.exe', 'GE.CIMPLICITY.exe') where its `ParentProcessName` is 'powershell.exe', 'cmd.exe', 'wscript.exe', or any process not explicitly in the 'Approved_ICS_Parent_Processes' whitelist. This process creation is immediately followed by outbound ICS protocol network traffic (Zeek conn.log, Zeek modbus.log, etc.) from the same host's IP address (`id.orig_h`) to a known PLC or RTU IP address (`id.resp_h`) within a 60-second window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and SCADA/Historian Servers within the control network.",
            "action": "1. Symbolic Logic: On critical Windows-based ICS hosts, monitor for process creation events (Windows Event ID 4688). Maintain an explicit whitelist of 'Approved_ICS_Parent_Processes' for each critical ICS application. Create a SIEM rule that alerts when a critical ICS application's `NewProcessName` (from Event ID 4688) is spawned by a `ParentProcessName` not in its approved whitelist, or specifically matches known suspicious parents like `powershell.exe` or `cmd.exe`. Correlate these alerts with Zeek conn.log (and relevant ICS protocol logs) by matching the `Computer` field from Event ID 4688 to `id.orig_h` in Zeek logs, confirming outbound ICS protocol traffic from the same source to a known PLC/RTU within 60 seconds of the process creation. 2. Statistical Method: Establish a baseline of normal parent-child process relationships on ICS hosts over 30-60 days by calculating the frequency of all `ParentProcessName`-`NewProcessName` pairs from Windows Event ID 4688. Alert when a previously unseen or extremely low-frequency parent-child relationship (e.g., below the 1st percentile of historical occurrences) is observed for a critical ICS application, especially if the parent is a common scripting or shell interpreter. Further filter these alerts by correlating with Zeek conn.log for outbound ICS traffic to control devices within a 60-second window. 3. Machine Learning: Implement a graph-based anomaly detection algorithm (e.g., using a Graph Neural Network or a node2vec embedding with clustering) that models process execution chains on ICS endpoints. Train the model on historical Windows Event ID 4688 logs to learn normal process trees, using `ProcessId`, `ParentProcessId`, `NewProcessName`, and `ParentProcessName` as features. Flag execution paths that deviate significantly from the learned normal graph structure (e.g., a new parent-child relationship with a low graph traversal probability), especially when involving critical ICS applications and correlating with outbound ICS protocol traffic identified in Zeek conn.log from the same host within a short time window (e.g., 60 seconds)."
          },
          {
            "description": "A Modbus Write (e.g., function code 0x06, 0x10) or DNP3 Operate (function code 0x01) message, as observed in Zeek ICS protocol logs, contains a data value for a critical control parameter (e.g., valve position, temperature setpoint, motor speed) that falls outside its predefined safe operational range (e.g., 'valve_pos > 100%', 'temp_setpoint < -20C' or '> 150C'). Alternatively, the message uses a `function_code` (e.g., from Zeek modbus.log, dnp3.log) not approved for the specific target device or current process state.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, with a focus on traffic destined for critical final control elements (e.g., actuators, valves, breakers), safety instrumented systems (SIS), Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and Intelligent Electronic Devices (IEDs).",
            "action": "1. Symbolic Logic: In collaboration with process engineers and asset owners, define explicit safe operational envelopes (minimum/maximum values, valid `function_code`s, valid `register_address`es, and associated `value`s) for each critical control point and device. Parse the data fields (e.g., `function_code`, `register_address`, `value`) from Zeek's ICS protocol logs for write/operate commands. Compare the values and function codes in these commands against the predefined safe envelopes and approved lists. Alert on any command containing a value or `function_code` that violates these process-aware rules. 2. Statistical Method: For critical data values (e.g., `value` field in modbus.log) within ICS commands, establish a historical distribution over 90 days. Calculate the mean, standard deviation, and interquartile range (IQR). Alert on values that fall outside 3 standard deviations from the mean, or beyond 1.5 times the IQR from the first or third quartile, indicating an extreme outlier. Additionally, calculate the Shannon entropy of the `value` field for specific commands over time; a sudden and significant change in entropy (e.g., 2 standard deviations from the historical mean entropy over a 1-hour window) could indicate an adversary is fuzzing parameters or sending malformed, unauthorized values. 3. Machine Learning: Train an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM, or Autoencoder) on the distribution of data values for critical ICS parameters and command types (e.g., `function_code`, `register_address`, `value` fields from Zeek logs). The model would learn the normal range and patterns of these values in their context. Alert on data values that the model identifies as outliers (e.g., anomaly score above 0.6), indicating a potentially unsafe or unauthorized command. This approach can dynamically adapt to minor process drifts better than static thresholds."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]