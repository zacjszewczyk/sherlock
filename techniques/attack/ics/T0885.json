[
  {
    "information_requirement": "Is an adversary using a commonly used ICS or IT port for Command and Control?",
    "tactic_id": "TA0101",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T0885",
        "name": "Commonly Used Port",
        "evidence": [
          {
            "description": "A network connection is recorded in Zeek conn.log on a common ICS or IT port (e.g., TCP/80, TCP/443, TCP/53, TCP/502, TCP/102, TCP/20000, TCP/44818) where the value of the 'service' field does not match the IANA-assigned or expected application protocol for that port, indicating protocol masquerading.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT network boundary, ICS DMZ, network segments connecting to the internet, perimeter firewalls, core OT network switches",
            "action": "1. Symbolic Logic: Using a SIEM or direct query, filter Zeek conn.log for connections where `id.resp_p` is a common port and the `service` field does not match its expected protocol. Example rules: (`id.resp_p`=80 AND `service`!='http'), (`id.resp_p`=443 AND `service`!='ssl'), (`id.resp_p`=53 AND `service`!='dns'), (`id.resp_p`=502 AND `service`!='modbus'), (`id.resp_p`=102 AND `service`!='s7comm'). Investigate any resulting connections for further anomalous activity. 2. Statistical Method: For each source IP (`id.orig_h`) that generates protocol mismatches, calculate the daily count and total byte volume of these mismatched connections over a 30-day baseline. Flag any source IP where the daily count or volume exceeds its own historical 95th percentile, indicating a statistically significant increase in this specific anomalous activity. 3. Machine Learning: Deploy a pre-trained Random Forest or Gradient Boosting classification model that uses features from conn.log (e.g., `id.resp_p`, `service`, `duration`, `orig_bytes`, `resp_bytes`, `conn_state`) to classify each connection as 'benign' or 'protocol_mismatch_c2'. The model must be trained on labeled historical data, including known-good protocol mismatches (e.g., custom applications using standard ports) and examples of malicious C2 tunneling to reduce false positives."
          },
          {
            "description": "An outbound connection is initiated from a critical ICS asset (e.g., PLC, HMI, Engineering Workstation) to an external IP address (not within RFC1918 or an approved organizational whitelist) on a commonly used IT or OT port.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS DMZ, ICS Level 2 (Supervisory Control) and Level 1 (Basic Control) networks, Engineering Workstations, HMIs, Process Control Networks",
            "action": "1. Symbolic Logic: Query Zeek conn.log where `id.orig_h` is in the asset list of critical ICS devices AND `id.resp_h` is not in a private IP space (e.g., 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) or the external IP whitelist AND `id.resp_p` is in [80, 443, 53, 23, 161, 502, 102, 20000, 44818]. On Windows-based ICS assets (EWS, HMI), correlate these network events by timestamp and IP with Windows Event ID 5156 to identify the responsible process (`Application`) and check it against an approved application whitelist. 2. Statistical Method: For each critical ICS asset, establish a 14-day rolling baseline of its outbound connection frequency and data volume to external IPs on common ports. Calculate a moving average and standard deviation. Generate an alert when an asset's daily connection count or data volume exceeds three standard deviations above its baseline, signaling abnormal external communication behavior. 3. Machine Learning: Apply a density-based clustering algorithm like DBSCAN to network connection metadata (`id.orig_h`, `id.resp_h`, `id.resp_p`, `duration`, `orig_bytes`) from ICS assets. Normal, repetitive operational traffic will form dense clusters. Isolate and investigate any connections classified as noise or belonging to small, sparse clusters, as these represent anomalous communication patterns potentially indicative of C2."
          },
          {
            "description": "A network connection on a common IT/OT port exhibits anomalous behavioral characteristics, such as unusually long duration, high data volume asymmetry, or high payload entropy, when compared to a historical baseline for similar connections in the ICS environment.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core ICS network switches, Level 3 (Manufacturing Operations) and Level 2 (Supervisory Control) network segments, perimeter network sensors, DNS servers within the ICS network",
            "action": "1. Symbolic Logic: For DNS traffic on port 53, query Zeek dns.log for queries where `query_length` > 255 or `answer_length` > 512, or where the `query` field contains an excessive number of subdomains (>5), indicating potential DNS tunneling. For HTTP/S traffic, query Zeek http.log for connections where `id.orig_h` is an ICS asset and the `user_agent` is a non-standard value (e.g., 'PowerShell', 'curl', 'python-requests'). 2. Statistical Method: For each unique communication 5-tuple (`id.orig_h`, `id.resp_h`, `proto`, `id.orig_p`, `id.resp_p`), establish a 30-day baseline for `duration`, `orig_bytes`, and `resp_bytes`. Calculate the Shannon entropy of the initial data payload (e.g., from the `seen_bytes` field in Zeek's files.log correlated by connection UID) if available. Flag any connection where these metrics individually or collectively deviate by more than three standard deviations from the established baseline for that specific 5-tuple. 3. Machine Learning: Implement a time-series anomaly detection model, such as an LSTM Autoencoder, on key connection metrics (e.g., aggregated `orig_bytes` and `resp_bytes` per minute) for traffic on critical OT ports (e.g., 502, 102, 20000, 44818). The model learns the normal rhythm of data flow and flags time windows with high reconstruction error, indicating a deviation from the learned pattern of normal operations."
          },
          {
            "description": "A process on an ICS endpoint, which is not an approved web browser or known application, establishes periodic, low-volume outbound connections to the same external IP on a common web port (e.g., 80, 443), consistent with C2 beaconing.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Supervisory Control) and Level 3 (Manufacturing Operations) endpoints, Engineering Workstations, HMIs, IT/OT network boundary",
            "action": "1. Symbolic Logic: Correlate Windows Event ID 5156 (WFP Connection) with Zeek conn.log data. First, identify non-browser processes making outbound connections on ports 80/443 from EWS/HMI endpoints using Event ID 5156 where `Application` is not in a browser whitelist. For each event, extract the `Source Address`, `Destination Address`, and `Destination Port`. Then, query Zeek conn.log for a matching connection (`id.orig_h`, `id.resp_h`, `id.resp_p`) occurring at the same time where the `id.resp_h` is confirmed to be an external, non-whitelisted IP address. An alert is generated on a successful correlation. 2. Statistical Method: From Zeek conn.log, group connections by source IP, destination IP, and destination port (`id.orig_h`, `id.resp_h`, `id.resp_p`). For each group, calculate the time difference (delta) between consecutive connection timestamps. Compute the standard deviation of these deltas over a 1-hour window. Flag groups that exhibit a very low standard deviation (e.g., < 5 seconds across at least 5 connections) and a consistently small connection size (e.g., `orig_bytes` + `resp_bytes` < 1024), which is characteristic of machine-generated beaconing. 3. Machine Learning: Train a supervised classification model (e.g., Logistic Regression) to distinguish beaconing from normal user web browsing. Use features derived from a session of connections, such as the standard deviation of inter-arrival times, mean and variance of packet sizes, ratio of outbound to inbound bytes, and the entropy of destination domains. Deploy this model to score sessions from ICS endpoints in near-real-time."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]