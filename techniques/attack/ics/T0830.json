[
  {
    "information_requirement": "Has the adversary established an Adversary-in-the-Middle (AiTM) position to intercept or manipulate ICS network communications? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0830",
        "name": "Adversary-in-the-Middle",
        "evidence": [
          {
            "description": "Anomalous ARP activity is observed, defined as: 1) The IP address of a critical ICS asset (e.g., PLC, HMI, EWS) resolving to a MAC address that is not on a pre-defined allowlist for that asset. 2) A single MAC address being associated with multiple (e.g., >3) distinct IP addresses within a short time window (e.g., 60 seconds). 3) The MAC address associated with a critical ICS asset's IP changes frequently (e.g., >3 times in 5 minutes). 4) Command-line execution on an EWS or server of `arp.exe` or `netsh` to statically modify the ARP cache for a critical asset's IP.",
            "data_sources": [
              "Zeek arp.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) switches, managed industrial switches, network taps/sensors within the PCN, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Domain Controllers.",
            "action": "1. Baseline Creation: From Zeek arp.log, create and maintain a state table mapping the static IP addresses of critical ICS assets to their known-good MAC addresses. For Windows endpoints, baseline normal `arp.exe` and `netsh` command-line usage via Windows Event ID 4688, noting any legitimate administrative scripts. 2. Symbolic Logic (Rule-based): Implement a query to join Zeek arp.log data with the IP-to-MAC baseline. Generate a high-severity alert when an ARP reply (`op` == 'reply') is observed where a critical IP's MAC address does not match the baseline. Create a rule to detect command-line arguments in Windows Event ID 4688 for processes like `arp.exe` or `netsh.exe` containing flags like `-s`, `-d`, `add neighbors`, or `delete neighbors` targeting critical ICS IP addresses. 3. Statistical Method (Anomaly/Threshold): Using a sliding window (e.g., 5 minutes) on Zeek arp.log, calculate the number of unique IPs per MAC. Generate a medium-severity alert if this count exceeds a dynamic threshold (e.g., 99th percentile of all MACs in the segment) or a static threshold (e.g., >3). Similarly, track the rate of MAC changes for each critical IP; alert if the rate exceeds 3 standard deviations from its historical norm. 4. Machine Learning (Clustering/Time-Series Anomaly): Use a clustering algorithm (e.g., DBSCAN) on features from Zeek arp.log (e.g., source/dest MAC/IP, ARP op code, network segment) to model normal network segments and asset groupings. Flag ARP events that are classified as noise/outliers as potential poisoning attempts. Alternatively, apply a time-series anomaly detection model (e.g., LSTM autoencoder) to the volume of gratuitous ARP packets per segment, alerting on sudden spikes inconsistent with historical patterns."
          },
          {
            "description": "Network flow data shows a communication path from a critical ICS asset to an expected destination being routed through an unauthorized intermediary device. This is evident when a connection `A -> B` is immediately followed by `B -> C`, where `A` is the critical asset, `C` is the legitimate destination, and `B` is an IP address not on the allowlist of approved gateways or proxies for the A-to-C communication path.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network backbone switches within the PCN, firewalls/routers at PCN-DMZ/Enterprise boundaries, SCADA servers, Historian servers, network taps/sensors deployed at critical communication choke points.",
            "action": "1. Baseline Creation: From Zeek conn.log, generate a graph or state table of all legitimate source-destination communication pairs for critical ICS protocols (e.g., Modbus, DNP3, S7comm). Explicitly identify and allowlist any known gateways, proxies, or data diodes. 2. Symbolic Logic (Rule-based): Implement a stream processing query that searches for the pattern `(src_ip=A, dst_ip=B)` followed within a short time window (e.g., <1s) by `(src_ip=B, dst_ip=C)`. If the original expected path was `A -> C` and `B` is not an approved intermediary for that path, generate a high-severity alert. Augment this by alerting on any `proxy_host` value in Zeek http.log that is not on the approved proxy allowlist for traffic originating from critical ICS assets. 3. Statistical Method (Threshold/Percentile): For each established communication path `A -> C`, count the number of intermediary hops over a rolling 1-hour window. Alert if the hop count for a direct path becomes > 0. Calculate the distribution of traffic volume (bytes_out) for path `A -> C`; alert if a significant percentage (>5%) is suddenly routed via a new intermediary `B`. 4. Machine Learning (Graph Anomaly): Model the ICS network as a directed graph using Zeek conn.log data. Apply a graph-based anomaly detection algorithm (e.g., GraphSAGE with an anomaly scoring head) to identify changes in the graph topology, such as the insertion of a new node (`B`) between two previously connected nodes (`A` and `C`). An alert is triggered when a structurally anomalous path change involving a critical asset is detected."
          },
          {
            "description": "Anomalies in TLS/SSL certificates are observed during encrypted sessions involving critical ICS assets. This evidence includes: 1) A certificate's validation status is anything other than 'ok' (e.g., 'self_signed', 'expired', 'revoked'). 2) A certificate's key attributes (fingerprint, subject, issuer, serial number) do not match the known-good baseline for that specific asset or service. 3) A certificate is newly observed and has characteristics of being algorithmically generated (e.g., high-entropy subject/issuer fields).",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps/sensors at the perimeter of the PCN, network gateways, SCADA servers, Historian servers, remote access VPN concentrators, Engineering Workstations (EWS) that establish encrypted sessions.",
            "action": "1. Baseline Creation: From Zeek x509.log and Zeek ssl.log, create and maintain a baseline (allowlist) of all known-good certificate attributes (fingerprint, subject, issuer, serial) for services running on critical ICS assets. Differentiate between expected CA-signed and legitimately self-signed certificates. 2. Symbolic Logic (Rule-based): Implement a query on Zeek ssl.log and x509.log to generate a high-severity alert if any connection to a critical asset uses a certificate where: a) `validation_status` is not 'ok', b) `self_signed` is true for a service expecting a CA-signed cert, or c) the certificate's fingerprint or issuer does not match the established baseline for that asset. 3. Statistical Method (Entropy/Frequency): Calculate the Shannon entropy of the `subject` and `issuer` common name fields for newly observed certificates. Generate a medium-severity alert if the entropy score exceeds the 99th percentile of historical values for the network segment, suggesting non-human-readable, potentially malicious values. Track the rate of `validation_status` errors per critical asset; alert if the rate exceeds 3 standard deviations from the norm over a 24-hour period. 4. Machine Learning (Classification/Anomaly): Train a classification model (e.g., Random Forest) on features from Zeek x509.log (key length, algorithm, validity period, CA status, extensions) to distinguish between legitimate and known-malicious or anomalous certificates. For novel threats, use an unsupervised autoencoder trained on the feature vectors of all baselined 'good' certificates. Any new certificate with a high reconstruction error is flagged as a potential AiTM tool."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]