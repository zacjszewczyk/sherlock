[
  {
    "information_requirement": "Has an adversary manipulated the operator's view of the industrial process? (TA0105 - Impact)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0831",
        "name": "Spoof Reporting Message",
        "evidence": [
          {
            "description": "Detection of network-level anomalies indicative of a Man-in-the-Middle (MitM) precursor, including duplicate MAC addresses on the same network segment, gratuitous ARP requests not initiated by a device reboot, or any change in the IP-to-MAC address mappings for critical ICS assets (PLCs, HMIs) not corresponding to a documented maintenance activity.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek arp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process control network segments connecting PLCs, HMIs, and other critical control system devices within the Operational Technology (OT) network.",
            "action": "1. Symbolic Logic (Static Mapping): Maintain a static IP-to-MAC address mapping table for all critical ICS assets. Create a rule to query Zeek arp.log and conn.log and ALERT on any `orig_l2_addr` or `resp_l2_addr` that does not match the approved MAC address for a given `id.orig_h` or `id.resp_h` in the critical asset list. Also, monitor Zeek notice.log for `ARP::Spoofing` or `ARP::Duplicate_IP_Detected` notes. 2. Statistical Method (Frequency Analysis): For each IP address on critical segments, establish a baseline for the number of associated MAC addresses observed over a 24-hour period (this value should be 1). ALERT if `COUNT(DISTINCT mac_address) > 1` for any critical IP in a 5-minute window, as observed in Zeek conn.log and arp.log, which is a statistically significant deviation. 3. Machine Learning (Graph Analysis): Model the L2/L3 relationships of the control network as a graph where nodes are IPs and MACs and edges represent observed communications from Zeek conn.log and arp.log. Train a graph neural network (GNN) to learn the normal topology. An alert is triggered if the model detects structural anomalies, such as a new edge forming between a critical asset's IP and an unknown MAC address, which indicates a potential MitM attack."
          },
          {
            "description": "Detection of ICS protocol messages (e.g., Modbus, DNP3) originating from an unauthorized or spoofed source IP address that report process state information, where the message does not correlate with a legitimate request from an HMI or historian, or contains values inconsistent with the last known state from the legitimate PLC.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network gateways between control zones, and network taps monitoring traffic to and from HMIs and Historian servers.",
            "action": "1. Symbolic Logic (Stateful Protocol Analysis): For response messages from PLCs (e.g., `is_response=true` in Zeek logs), track the transaction ID (e.g., `modbus.log` `trans_id`). ALERT if a response is seen without a corresponding request from a whitelisted HMI or historian. Also, ALERT if a message reporting process state originates from an IP not associated with a known PLC. 2. Statistical Method (Value Consistency Check): Maintain a time-series database of the last reported value for critical process tags from legitimate PLCs. For each new reporting message, compare its value to the last known value. ALERT if the new value represents a change greater than 3 standard deviations from the historical rate of change for that tag, especially if no corresponding control action was logged. 3. Machine Learning (Sequence Analysis): Train a sequence model (e.g., an LSTM) on the normal sequence of ICS protocol transactions (request-response pairs) between HMIs and PLCs. The model should learn patterns based on features like source IP, destination IP, function code, and transaction timing. The model would flag a spoofed reporting message as an anomaly if it appears out of sequence, such as a PLC response with no preceding HMI request."
          }
        ]
      },
      {
        "technique_id": "T0867",
        "name": "Use of Legitimate Operational Protocol",
        "evidence": [
          {
            "description": "Detection of ICS protocol write commands (e.g., Modbus FC 0x06, 0x10) that originate from an unauthorized source IP, occur at a frequency >50% above the hourly baseline, or attempt to set process variable values outside pre-defined engineering limits (e.g., temperature > 100C, pressure > 150 PSI).",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of PLCs and other field controllers, particularly on segments accessible by engineering workstations and HMIs.",
            "action": "1. Symbolic Logic (Rule-Based Filtering): Create a rule to ALERT when an ICS write command (e.g., `zeek.modbus.log` `function_code` IN [5, 6, 15, 16]) is detected where the `id.orig_h` is not in a pre-approved list of authorized HMIs/workstations for the target PLC (`id.resp_h`). Additionally, for each write, compare the `value` field against a lookup table of engineering limits for the specific register address and ALERT if outside the safe range. 2. Statistical Method (Thresholding): For each HMI-to-PLC communication pair, calculate the 99th percentile of hourly write commands from a 30-day baseline using relevant Zeek ICS logs. ALERT if the current hour's count exceeds this threshold. For process values, ALERT if a written `value` falls outside 4 standard deviations of the historical distribution for that specific register, indicating an attempt to write an anomalous value. 3. Machine Learning (Classification): Train a classification model (e.g., Random Forest) using features from ICS protocol logs: `id.orig_h`, `id.resp_h`, `function_code`, `value`, `hour_of_day`, `day_of_week`. Label historical data based on authorized/unauthorized sources and normal/abnormal operational values. Use the trained model to classify new write commands in real-time as either benign or malicious."
          }
        ]
      },
      {
        "technique_id": "T0848",
        "name": "Modify Program",
        "evidence": [
          {
            "description": "Detection of any file write, creation, or deletion event affecting a file within a critical HMI application directory (e.g., C:\\Program Files\\SCADA_App\\) that originates from a process other than a vendor's official patch utility, a whitelisted administrative tool, or the primary HMI application itself.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of HMI application servers, engineering workstations, and historian servers, specifically monitoring application directories and configuration folders.",
            "action": "1. Symbolic Logic (File Integrity Monitoring): Maintain a whitelist of approved process hashes (`ProcessHash` from Event ID 4688) and user accounts (`SubjectUserSid` from Event ID 4663) authorized to modify files in HMI application paths. Use `Windows Event ID 4663` (File Write) to ALERT if a critical HMI file is modified and the responsible `ProcessName` or `SubjectUserSid` is not on the approved list. 2. Statistical Method (Entropy Analysis): Calculate the entropy of the `ProcessName` field from `Windows Event ID 4688` for processes that subsequently perform file modifications (correlated via `ProcessId` to `Event ID 4663`) in HMI directories. A sudden spike in entropy, exceeding the 95th percentile of a 30-day baseline, indicates that many new or unusual processes are performing modifications and should trigger an alert. 3. Machine Learning (Sequence Analysis): Utilize a sequence analysis model (e.g., Hidden Markov Model) to learn the normal sequences of process execution (`ProcessName` from Event ID 4688) on HMI hosts. An anomalous sequence, such as the execution of `powershell.exe` or `certutil.exe` followed by a file modification (`Event ID 4663`) of an HMI executable, would be flagged by the model as a high-risk deviation from normal behavior."
          }
        ]
      },
      {
        "technique_id": "T0832",
        "name": "Manipulation of View",
        "evidence": [
          {
            "description": "A persistent discrepancy (>2% for analog values, or any mismatch for discrete values) between a process variable read from a PLC (e.g., via `zeek.modbus.log`) and the value recorded by the historian or displayed on an HMI (inferred from network traffic to those systems) for the same timestamp.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI servers, Historian servers, and network segments connecting PLCs to HMIs and Historians, focusing on data gateways and visualization platforms.",
            "action": "1. Symbolic Logic (Cross-Source Validation): Correlate ICS read responses from a PLC IP (`zeek.modbus.log`, `is_response`=true) with data sent from an HMI IP to a historian IP for the same process tag within a 5-second window. ALERT if the values differ by more than a pre-defined engineering threshold (e.g., 2% for analog, any mismatch for boolean). 2. Statistical Method (Correlation Analysis): For each critical process tag, create two time series: one for the value reported by the PLC (from Zeek logs of PLC responses) and one for the value reported by the HMI (from Zeek logs of HMI traffic). Calculate a rolling 10-minute cross-correlation between these series. ALERT if the correlation coefficient drops below 0.9 for more than 5 minutes, indicating a divergence. 3. Machine Learning (Multivariate Anomaly Detection): Train a multivariate autoencoder on synchronized time-series data. The feature vector should include: `[PLC_reported_value, HMI_reported_value, Historian_recorded_value, associated_control_output_value]`. The model learns the normal state relationships. A high reconstruction error upon inference indicates a divergence between sources, such as a manipulated view, and triggers an alert."
          },
          {
            "description": "Unauthorized modification of HMI graphical configuration files (e.g., `.gfx`, `.xml`, `.ini`) evidenced by a file write event (`Windows Event ID 4663`) originating from a process (`ProcessName` from `Windows Event ID 4688`) not on a pre-approved whitelist of HMI editing software.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on HMI servers and engineering workstations, specifically directories containing HMI screen and logic configuration files.",
            "action": "1. Symbolic Logic (Whitelist Violation): Maintain a strict whitelist of `ProcessName` and `ProcessHash` values for authorized HMI editing and deployment software. Create a rule to monitor `Windows Event ID 4663` for write access to files with extensions like `.gfx`, `.xml`, `.ini` in HMI project directories. Correlate with `Windows Event ID 4688` via `ProcessId` and ALERT if the `ProcessName` or `ProcessHash` is not on the whitelist. 2. Statistical Method (Frequency Baselining): For HMI configuration files, baseline the frequency of modification (`Event ID 4663`) per user and per process over a 30-day period. ALERT if the modification frequency for any single file by a single user or process exceeds the 99th percentile of its own historical behavior, indicating unusually rapid or repeated editing activity. 3. Machine Learning (User and Entity Behavior Analytics): Employ a UEBA model focused on file access patterns. The model would create a baseline of normal file modification activity for each user and process on HMI systems. Features would include files touched, frequency, time of day, and source process. The model would flag any deviation, such as an administrator account suddenly modifying HMI display files via a script (`powershell.exe`) instead of the standard HMI editor, as anomalous."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]