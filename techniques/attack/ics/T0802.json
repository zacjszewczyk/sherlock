[
  {
    "information_requirement": "Is an adversary performing automated collection of data from our ICS/OT environment? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0802",
        "name": "Automated Collection",
        "evidence": [
          {
            "description": "A single source IP initiates successful connections to an abnormally high number of unique destination IPs within the ICS network over a short time frame. This activity deviates from established baselines and is not associated with known, legitimate scanning or polling systems (e.g., HMI refresh cycles).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps/SPAN ports on ICS network segments (Control Network, Process Network, DMZ), specifically monitoring traffic to/from PLCs, RTUs, and HMIs.",
            "action": "1. Symbolic Logic (Watchlist & Policy Violation): A. Create and maintain a watchlist of known malicious IP addresses associated with ICS threats and another list of authorized scanning systems (e.g., vulnerability scanners, asset inventory tools). B. Query Zeek conn.log in real-time. C. Generate a high-priority alert if 'id.orig_h' or 'id.resp_h' matches an IP on the malicious watchlist. D. Generate a medium-priority alert if a host not on the authorized scanner list connects to more than 20 unique destination IPs on an ICS-specific port (e.g., 502 for Modbus, 102 for S7) within a 5-minute window. 2. Statistical (Baseline Deviation): A. For each source IP ('id.orig_h') in Zeek conn.log, calculate the count of unique destination IPs ('id.resp_h') over a 5-minute rolling window. B. Establish and maintain a 30-day historical baseline of this count for each source IP, storing the 99th percentile value. C. Generate an alert when the current count for any source IP exceeds its established 99th percentile baseline. The alert should include the source IP, the number of unique destinations, and the baseline value. D. Additionally, calculate the Shannon entropy of destination ports per source IP over the same window; a sudden increase in entropy can indicate port scanning. 3. Machine Learning (Network Activity Anomaly Detection): A. Train an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM) on at least 30 days of normal ICS network traffic. B. For each source IP ('id.orig_h'), create feature vectors from 5-minute windows of Zeek conn.log data, including: count of unique destination IPs, count of unique destination ports, total connection count, total bytes transferred, and protocol distribution. C. In real-time, feed new feature vectors into the trained model. D. Generate an alert if the model outputs an anomaly score exceeding a pre-defined threshold (e.g., top 1% of scores), identifying the source IP as potentially performing automated collection and including the features that contributed most to the score."
          },
          {
            "description": "A process creation event on a critical ICS asset (e.g., Engineering Workstation, HMI) involves a non-allowlisted executable or a scripting interpreter (e.g., powershell.exe, python.exe), and is immediately followed by a burst of network connections from that host to multiple other devices within the ICS network.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Host logging agents on Engineering Workstations (EWS), Operator Stations / HMIs, and ICS Application Servers; Network taps/SPAN ports positioned to capture traffic originating from these assets.",
            "action": "1. Symbolic Logic (Process Allowlist Violation): A. For each critical ICS asset, create and maintain a strict allowlist of known-good process names ('NewProcessName') and command lines ('CommandLine') based on a 30-day baseline. B. Monitor Windows Event ID 4688 in real-time. C. Generate a high-priority alert if a created process is not on the allowlist. D. Specifically trigger an alert if the 'CommandLine' contains scripting interpreters (powershell.exe, python.exe, wscript.exe, cscript.exe) or known dual-use reconnaissance tools (nmap.exe, netcat.exe, PsExec.exe) not part of a documented, approved task. 2. Statistical (Correlated Burst Detection): A. Upon triggering an alert from the symbolic logic rule, immediately execute a correlated query. B. Using the source hostname and timestamp from the Windows Event ID 4688 alert, query Zeek conn.log for all connections where 'id.orig_h' matches the host's IP within a 60-second window following the process creation. C. Count the number of unique destination IPs ('id.resp_h'). D. Compare this count to a 30-day baseline of the 99th percentile for post-process-creation network connections for that specific host. E. Escalate the initial host alert to critical if the network connection count exceeds this baseline, indicating an anomalous process followed by a network burst. 3. Machine Learning (Command Line Classification & Network Correlation): A. Train a classification model (e.g., Random Forest) to identify malicious or anomalous command lines using features from Windows Event ID 4688, such as command line entropy, length, character distribution, and the presence of suspicious keywords. B. In parallel, monitor network activity with a time-series anomaly detection model on Zeek conn.log data, identifying sudden spikes in connections from individual hosts. C. Generate a high-confidence alert when the command line classifier flags a process as anomalous AND the network model detects a connection burst from the same host within a 60-second window, providing both host and network context for rapid investigation."
          },
          {
            "description": "A single source host or user account generates a statistically significant volume of successful network logon events (Windows Event ID 4624, Logon Type 3) to one or more ICS servers (e.g., Historian, OPC server) in a short period, deviating from established baselines for the source, user, and/or destination.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Host logging agents on OPC Servers, Data Historians, and Domain Controllers servicing the ICS environment; Network taps/SPAN ports near these servers to correlate logon events with protocol-level traffic.",
            "action": "1. Symbolic Logic (Policy & Watchlist Violation): A. Continuously monitor Windows Event ID 4624 with Logon Type 3 on critical ICS servers. B. Maintain a watchlist of known compromised or suspicious user accounts and source IP addresses. C. Generate an immediate high-priority alert if the 'AccountName' or 'IpAddress' in the event matches an entry on the watchlist. D. Generate a medium-priority alert if a successful logon occurs from an account not part of an approved role-based access control group for that specific server, or if a non-service account logs on outside of standard business hours. 2. Statistical (Logon Rate Anomaly): A. For each unique source-IP-to-destination-server pair, count successful logon events (Windows Event ID 4624, Logon Type 3) within a 5-minute rolling window. B. Establish and maintain a 30-day historical baseline for this logon rate, storing the mean and standard deviation for each pair. C. Generate an alert when the current 5-minute logon rate for any pair exceeds 3 standard deviations above its historical mean, indicating a potential brute-force or rapid access attempt. 3. Machine Learning (Time-Series Forecasting & Protocol Correlation): A. For each critical ICS server, train a time-series forecasting model (e.g., ARIMA, Prophet) on the aggregated count of successful logon events (Event ID 4624, Type 3) per 5-minute interval, using at least 30 days of historical data. B. In real-time, compare the observed logon count to the model's forecast. C. Generate an alert when the observed count significantly exceeds the forecasted value (e.g., falls outside the 99% prediction interval). D. Automatically enrich this alert by querying Zeek conn.log for the same time period and source/destination IPs to confirm a corresponding high volume of ICS-specific protocol traffic (e.g., OPC, Modbus, S7), which strongly corroborates automated collection activity."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]