[
  {
    "information_requirement": "Has an adversary compromised our OT environment via a trusted supply chain relationship? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0862",
        "name": "Supply Chain Compromise",
        "evidence": [
          {
            "description": "Within a 72-hour window following a software installation (Windows Event ID 4697/4688) or a firmware/project file download (detected via Zeek files.log or vendor logs) on an OT asset, the asset initiates outbound network connections (Zeek conn.log) to external destinations that are either: 1) identified as malicious by threat intelligence feeds, 2) statistically rare for that specific asset, such as a destination Autonomous System Number (ASN) not seen in the asset's 90-day communication baseline, or 3) involve an unusually large data transfer, with an outbound data volume (bytes_orig) exceeding the 99th percentile of the asset's historical behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek files.log",
              "Vendor engineering station logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points from OT segments (e.g., OT DMZ firewalls), Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and IT/OT boundary firewalls.",
            "action": [
              "For each asset, upon detection of a software installation event, begin a 72-hour monitoring window. For all outbound connections from the asset's IP (from Zeek conn.log), join with DNS queries (Zeek dns.log) to get domain names. Compare destination IPs and domains against a threat intelligence feed of known C2 servers and malware drop sites. Generate a high-severity alert for any match.",
              "For each OT asset, maintain a 90-day rolling baseline of destination IPs, destination Autonomous System Numbers (ASNs), and destination countries. After a software update event, for each new outbound connection in the following 72 hours, check if the destination IP, ASN, or country is new (not in the baseline). Generate a medium-severity alert if an asset communicates with a new ASN or country. Additionally, for each connection, if the outbound bytes (`orig_bytes` in conn.log) exceeds the 99th percentile of that asset's historical outbound connection sizes, generate a medium-severity alert.",
              "Train a time-series anomaly detection model (e.g., LSTM Autoencoder) on sequences of network flow data for critical OT assets. Input features should be derived from Zeek conn.log and include: destination port, protocol, connection duration, total bytes (orig_bytes + resp_bytes), connection state (e.g., 'SF', 'REJ'), and time-based features like hour-of-day and day-of-week. After a software update, feed the asset's real-time connection data into the trained model. A sustained reconstruction error score exceeding the model's 99th percentile threshold indicates a significant behavioral deviation and should generate a high-severity alert."
            ]
          },
          {
            "description": "A process, masquerading as a legitimate ICS vendor application, is executed, where the evidence of inauthenticity is one or more of the following: 1) the process executable's file hash does not match a known-good hash from an allow-list, 2) the process executes from a non-standard file path (e.g., C:\\Temp\\), 3) the process is spawned by an unusual parent (e.g., outlook.exe), or 4) the executable's embedded digital signature is missing or invalid.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (Process Creation)",
              "File hash repository"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices within the Process Control Network (PCN) and Manufacturing Zone, specifically Engineering Workstations, HMIs, application servers, and other Windows-based OT assets.",
            "action": [
              "Maintain an allow-list database for critical ICS applications that maps process names to their known-good file hashes, expected file paths, and authorized parent processes. Monitor Sysmon Event ID 1 and Windows Event ID 4688. Generate a high-severity alert if a process is created that violates this allow-list (e.g., a known process name with a hash mismatch, a process in a disallowed path, or a process with an unauthorized parent like 'winword.exe').",
              "For each process creation event (Sysmon Event ID 1), calculate the Shannon entropy of the full file path and the command-line arguments. Establish a per-host, per-process-name baseline of these entropy scores over 30 days. Generate a medium-severity alert if the entropy of a newly created process's path or arguments exceeds the 95th percentile of its historical baseline, as this can indicate randomized paths or obfuscated arguments used by malware.",
              "Train a supervised machine learning classifier (e.g., Gradient Boosting or Random Forest) on labeled process creation events from Sysmon Event ID 1. Use features such as: parent process name, file path depth, file path entropy, command-line argument length and entropy, a boolean for whether the path is user-writable, and the digital signature status ('Valid', 'Invalid', 'NotFound'). Continuously classify new process events in real-time. An event classified as 'malicious' with a confidence score greater than 0.9 should generate a high-severity alert for immediate investigation."
            ]
          },
          {
            "description": "Following a firmware update or project download to an embedded controller (PLC, RTU, IED), the device's network traffic exhibits anomalous industrial protocol usage or network patterns. Evidence includes: 1) an unauthorized source IP issuing a critical state-changing command (e.g., Modbus Function Code 5/6, DNP3 Function Code 1/2 'Cold/Warm Restart', S7comm 'Stop/Run'), 2) the device initiating outbound connections using non-industrial protocols like HTTP or FTP, or 3) communication with new internal or external IP addresses not present in its 90-day communication baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Industrial Firewall logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments at Level 1 (Basic Control) and Level 2 (Area Supervisory Control) of the Purdue Model, particularly network taps and span ports monitoring traffic to/from PLCs, RTUs, and IEDs.",
            "action": [
              "For critical controllers, define a strict allow-list of (Source IP, Destination IP, Protocol, Function Code) tuples. Monitor industrial protocol logs (e.g., Zeek's modbus.log, s7comm.log). Generate an immediate critical alert if a packet matches a deny-list rule (e.g., any IP not in the 'Authorized EWS' group sending an S7comm 'Stop' command) or does not match any entry in a strict allow-list.",
              "For each controller (by IP), create a 90-day baseline of its communication patterns from Zeek conn.log and protocol-specific logs. The baseline profile should include: a set of peer IPs, a set of destination ports/protocols, a frequency distribution of industrial protocol function codes used, and the mean/standard deviation of data volume per hour. Generate a medium-severity alert if, in a given 24-hour period, the device: a) communicates with a new peer IP, b) uses a function code not seen in its baseline, or c) its hourly data volume exceeds the baseline mean by more than 3 standard deviations.",
              "For each critical controller, train an unsupervised anomaly detection model (e.g., Isolation Forest or a one-class SVM) on its historical network traffic. Use features derived from Zeek logs, such as: destination IP, destination port, protocol (one-hot encoded), connection duration, total bytes, and specific function codes/commands (one-hot encoded). The model learns the device's normal communication fingerprint. Feed live traffic into the model. Any flow flagged with a high anomaly score indicates a significant deviation from learned normal behavior and should generate a high-severity alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]