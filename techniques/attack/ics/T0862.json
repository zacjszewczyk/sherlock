[
  {
    "information_requirement": "Has an adversary compromised our OT environment via a trusted supply chain relationship? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0862",
        "name": "Supply Chain Compromise",
        "evidence": [
          {
            "description": "Within a 72-hour window following a software installation (Windows Event ID 4697/4688) or firmware update on an OT asset (e.g., HMI, EWS), the asset initiates outbound network connections (Zeek conn.log) to external destinations (IPs from conn.log, domains from dns.log) that are either: 1) identified as malicious (e.g., C2, malware hosting) by threat intelligence feeds, or 2) statistically anomalous, such as a destination IP/domain not seen in the asset's 90-day communication baseline, or an outbound data transfer volume (bytes_orig) that exceeds the 99th percentile of the asset's historical behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points from OT segments (e.g., OT DMZ firewalls), Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and IT/OT boundary firewalls.",
            "action": "1. Symbolic Logic (IOC Match): Upon detection of a software installation (Windows Event ID 4697 or 4688 with installer characteristics) or a reported firmware update, create a 72-hour monitoring rule for the source asset's IP. Query all outbound connections from this IP in Zeek conn.log and dns.log. Compare every destination IP and domain against a consolidated threat intelligence database of known malicious indicators. Generate a high-severity alert for any match. 2. Statistical Method (New Connection Ratio): For each OT asset, maintain a 90-day baseline of unique destination IP addresses. After a software update event, calculate the ratio of new (not in baseline) destination IPs to total unique destination IPs contacted by the asset in the subsequent 72-hour period. If this 'new connection ratio' exceeds a dynamically set threshold (e.g., >20% for an asset that is typically static), generate a medium-severity alert for investigation. Also, monitor the total outbound bytes (bytes_orig) per connection; alert if any single connection's volume exceeds the 99th percentile of the asset's 90-day baseline. 3. Machine Learning Application (Time-Series Anomaly Detection): Train a time-series anomaly detection model (e.g., LSTM Autoencoder) on sequences of network flow data for critical assets. Features should include: destination port, protocol, connection duration, total bytes (orig_bytes + resp_bytes), and connection state from Zeek conn.log. After a software update, feed the asset's real-time connection data into the model. An anomaly score persistently exceeding the 99th percentile of historical scores indicates a significant deviation from normal behavior, warranting an alert."
          },
          {
            "description": "A process, identified by name as a legitimate ICS vendor application (e.g., 'TIA_Portal.exe'), executes from a non-standard file path (e.g., 'C:\\Users\\Public\\') instead of its expected installation directory (e.g., 'C:\\Program Files\\Siemens\\'). Alternatively, the process is spawned by an unusual parent process (e.g., 'outlook.exe' spawning an ICS engineering tool), or the executable file lacks a valid digital signature when the legitimate version is known to be signed.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices within the Process Control Network (PCN) and Manufacturing Zone, specifically Engineering Workstations, HMIs, application servers, and other Windows-based OT assets.",
            "action": "1. Symbolic Logic (Allow-List Violation): Maintain an allow-list database mapping legitimate ICS process names to their expected file paths and parent processes. Monitor Windows Event ID 4688 (Process Creation) in real time. Generate a high-severity alert if: a) a known ICS process name executes from a path not on the allow-list, b) a known ICS process is spawned by a parent process not on its allow-list (e.g., an office application), or c) the executable's signature is invalid or missing (requires endpoint tool integration). 2. Statistical Method (Path and Argument Entropy): For each process creation event (Windows Event ID 4688), calculate the Shannon entropy of the full file path and any command-line arguments. Establish a 30-day baseline of these entropy scores for legitimate processes on each host. Generate a medium-severity alert if the entropy of a new process's path or arguments exceeds the 95th percentile of the baseline, especially if the process name is masquerading as a known tool. This can detect randomized paths used by malware droppers. 3. Machine Learning Application (Classification): Train a supervised machine learning classifier (e.g., Random Forest) on labeled process creation events. Features should include: process name, parent process name, file path depth, file path entropy, command-line argument length/entropy, and a binary flag indicating if the path is in a user-writable directory (e.g., 'AppData', 'Temp'). Continuously feed new process events (Windows Event ID 4688) into the classifier. An event classified as 'malicious' with high confidence (>0.9) generates a high-severity alert."
          },
          {
            "description": "Following a firmware update on an embedded controller (e.g., PLC, RTU, IED), the device's network traffic exhibits anomalous behavior, such as: 1) initiating connections using unexpected protocols (e.g., HTTP from a PLC), 2) communicating with new internal or external IP addresses not seen in its 90-day baseline, or 3) using legitimate industrial protocols in an unusual manner, such as an unauthorized host issuing a 'Stop CPU' or 'Program Download' command (e.g., Modbus function codes 5, 6, 8; DNP3 function code 1, 2).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Industrial Firewall logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments at Level 1 (Basic Control) and Level 2 (Area Supervisory Control) of the Purdue Model, particularly network taps and span ports monitoring traffic to/from PLCs, RTUs, and IEDs.",
            "action": "1. Symbolic Logic (Protocol and Function Code Violation): For critical controllers, define a strict allow-list of authorized communication partners (IPs), protocols, and industrial protocol function codes. Monitor industrial protocol logs (e.g., Zeek's modbus.log, s7comm.log). Generate an immediate critical alert if a device receives a dangerous or unauthorized command (e.g., PLC Stop, Program Modify) from an unauthorized source IP, or if it initiates/receives traffic using a non-allowed protocol (e.g., FTP, SSH). 2. Statistical Method (Communication Pattern Baselining): For each controller, create a 90-day baseline of its communication patterns using Zeek logs. The baseline should include: set of destination IPs, set of destination ports, distribution of industrial protocol function codes used, and average data volume per hour. After a firmware update, monitor for deviations. Generate a medium-severity alert if: a) the device contacts a new IP address, b) a new, non-baseline function code is used, or c) the hourly data volume exceeds the baseline mean by more than 3 standard deviations. 3. Machine Learning Application (Unsupervised Anomaly Detection): Deploy an unsupervised anomaly detection model (e.g., Isolation Forest) trained on network traffic features for each controller. Features should include: source/destination IP, destination port, protocol, connection duration (from conn.log), and specific command/function codes (from modbus.log, etc.). The model learns the device's 'normal' communication fingerprint. Post-update, any traffic flow that the model flags with a high anomaly score indicates a significant deviation that could represent malicious control or C2 activity, warranting a high-severity alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]