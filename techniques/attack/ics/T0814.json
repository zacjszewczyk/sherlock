[
  {
    "information_requirement": "Is an adversary attempting to disrupt industrial control system (ICS) device functionality via Denial of Service? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0814",
        "name": "Denial of Service",
        "evidence": [
          {
            "description": "A sustained, anomalous increase in network traffic volume (bytes or packets per second) or connection rate (new connections per second) directed at a critical ICS device (e.g., PLC, RTU, HMI). The anomaly is defined as traffic metrics exceeding the 99th percentile of a 30-day historical baseline for three consecutive 60-second intervals. This is often accompanied by a high rate of ICS protocol-specific errors, such as Modbus exception codes, EtherNet/IP status errors, DNP3 errors, or S7comm error classes, detected in protocol-specific logs.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek ether_ip.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (Purdue Levels 1-3), Control System DMZ, and network interfaces of critical devices (PLCs, RTUs, IEDs, HMIs, EWS, Historians).",
            "action": "1. Symbolic Logic: Construct a query to filter Zeek conn.log where `id.resp_h` is in a predefined watchlist of critical ICS device IPs and `id.resp_p` is in a list of known ICS ports (e.g., 502/TCP, 20000/TCP, 44818/TCP, 102/TCP). Concurrently, query protocol-specific logs (modbus.log, ether_ip.log, dnp3.log, s7comm.log) for the same `id.resp_h` where an exception or error field is present and not null. Generate a high-priority alert if a high volume of connections to a critical asset coincides with a burst of protocol errors within the same 1-minute window. \n2. Statistical Method: For each critical ICS device IP, compute a 30-day rolling baseline of 1-minute interval statistics for total bytes, total packets, and new connection counts from Zeek conn.log. Generate an alert if any of these metrics exceed the 99th percentile for three consecutive minutes. Additionally, calculate the Shannon entropy of the source IP addresses (`id.orig_h`) targeting the device in each interval. A simultaneous alert for high traffic volume and a sharp drop in source IP entropy (e.g., below 1.0) strongly indicates a targeted flood from one or a few sources. \n3. Machine Learning: Implement a multivariate time-series anomaly detection model (e.g., VAE, Prophet) on aggregated 1-minute interval data for each critical ICS asset. Use features such as `total_bytes`, `packet_count`, `connection_count`, `unique_source_ips`, and the `rate_of_protocol_errors` (derived from ICS-specific Zeek logs). Train the model on at least 30 days of normal activity. Generate an alert when the model's reconstruction error or anomaly score for a given interval surpasses a dynamically adjusted threshold, indicating a significant deviation from learned normal traffic patterns."
          },
          {
            "description": "A sustained, anomalous rate of connection resets (TCP RST) or rejections originating from a critical ICS device, defined as the count of rejection-related connection states ('REJ', 'RSTO', 'RSTR') exceeding the 99th percentile of a 30-day baseline for at least 60 seconds. This is typically observed when traffic from a small cluster of source IPs (e.g., fewer than 5 unique IPs) accounts for over 90% of the total connection attempts to the device during the event window, indicating the device is overwhelmed or is rejecting malformed traffic.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (Purdue Levels 1-3), Control System DMZ, and network interfaces of critical devices (PLCs, RTUs, IEDs, HMIs, EWS, Historians).",
            "action": "1. Symbolic Logic: Create a rule that triggers when, for a single critical ICS device IP (`id.resp_h`), the count of Zeek conn.log entries with `conn_state` IN ['REJ', 'RSTO', 'RSTR', 'RSTRH'] exceeds a static threshold (e.g., 100 events in 60 seconds). As a secondary condition, verify that the number of unique source IPs (`id.orig_h`) responsible for these rejected connections is less than 5. \n2. Statistical Method: For each critical ICS device, establish a 30-day rolling baseline for the 1-minute count of connections with reset/rejection states. Generate an alert if this count exceeds the 99th percentile of its baseline. Upon alert, automatically analyze the source IP distribution for that minute; if a single source IP accounts for >80% of the total traffic (bytes or connections) to the victim device, escalate the alert's priority. \n3. Machine Learning: Use an unsupervised clustering algorithm (e.g., DBSCAN) on Zeek conn.log data, executed every 5 minutes. Use features such as `id.resp_h` (as a category), `duration`, `orig_bytes`, `conn_state` (encoded numerically), and `service`. The algorithm will group connections into clusters of normal and abnormal behavior. Identify and alert on clusters characterized by a high density of points with a single `id.resp_h` (a critical asset), short `duration`, zero or low `orig_bytes`, and a `conn_state` indicating rejection. These clusters represent a DoS attack pattern."
          },
          {
            "description": "The unexpected crash or hang of a critical ICS application or service on a Windows-based host (e.g., HMI, EWS, Historian), evidenced by an Application Error (Windows Event ID 1000), Application Hang (Windows Event ID 1002), or Service Control Manager abnormal termination event (Windows Event ID 7031, 7034). This host-level event occurs within a 60-second window immediately following a correlated, statistically significant surge in network traffic directed at the host.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1002",
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (Purdue Levels 1-3), Control System DMZ, and network interfaces of critical devices (PLCs, RTUs, IEDs, HMIs, EWS, Historians).",
            "action": "1. Symbolic Logic: Maintain a configuration file or database table mapping critical ICS host IPs to their critical process/service names (e.g., '10.10.1.5' -> 'hmi.exe', 'historian_svc.exe'). Create a correlation rule that triggers an alert when a Windows Event ID (1000, 1002, 7031, or 7034) involving a monitored process/service is logged, and within the preceding 60 seconds, the same host IP received an anomalous number of connections (e.g., >500) from a single source IP in Zeek conn.log. \n2. Statistical Method: Upon detection of a critical process/service termination event (from Event IDs 1000, 1002, 7031, 7034), initiate an automated forensic query. This query retrieves network traffic metrics (connection count, total bytes) from Zeek conn.log for the affected host over the 5 minutes preceding the event. It compares these metrics to the host's 30-day historical distribution for the same time of day and day of week. If the recent traffic metrics fall above the 99th percentile of the historical distribution, the event is flagged as a potential network-induced DoS. \n3. Machine Learning: Train a sequence-aware model, such as a Recurrent Neural Network (RNN) or a Transformer, on time-ordered event data. The input sequence consists of network traffic features (e.g., connection rate, byte rate, source IP entropy) from Zeek conn.log, and the target is a binary label indicating whether a critical host crash event (e.g., Event ID 1000) occurred in the next minute. An alert is generated when the model predicts a high probability of a crash given a real-time sequence of network activity, indicating that the observed traffic pattern is a known precursor to system instability."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]