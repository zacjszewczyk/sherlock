[
  {
    "information_requirement": "Is an adversary attempting to disrupt industrial control system (ICS) device functionality via Denial of Service? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0814",
        "name": "Denial of Service",
        "evidence": [
          {
            "description": "A sustained increase (exceeding the 95th percentile of the 7-day historical baseline) in network traffic volume (bytes/second or packets/second) or connection establishment rate (new connections/second) directed at a critical ICS device (e.g., PLC, RTU, HMI) over a continuous period of at least 60 seconds. This increase may be accompanied by Zeek-detected protocol anomalies such as Modbus exception responses (e.g., modbus.log exception_function_code indicating illegal function or data address), EtherNet/IP status errors (e.g., ether_ip.log status_code indicating an unsupported service or bad segment), or a high rate of TCP connections with zero payload bytes and non-zero duration (empty floods).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek ether_ip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments, particularly the network interfaces of critical controllers (PLCs, RTUs) and Human-Machine Interfaces (HMIs), and the Control System DMZ.",
            "action": "1. Symbolic Logic: Query Zeek conn.log for entries where id.resp_h matches a predefined watchlist of critical ICS device IP addresses and id.resp_p matches known ICS protocol ports (e.g., Modbus TCP 502, EtherNet/IP 44818). Identify and flag connections where orig_bytes or resp_bytes are zero for a given time window (e.g., 5 seconds) while duration is non-zero, indicating potential empty floods. Additionally, identify connections with conn_state 'S0' (SYN sent, no reply) or 'RSTO' (originator sent TCP reset) at a rate exceeding 10 per minute directed at ICS devices. 2. Correlate with Zeek modbus.log and ether_ip.log for the same ICS device IPs. Flag instances where modbus.log records exception_function_code values (e.g., 0x01, 0x02, 0x03) or ether_ip.log records status_code values indicating errors (e.g., 0x01, 0x02) that coincide with high traffic volumes. 3. Statistical Method: For each critical ICS device IP address, calculate the rolling 5-minute average and standard deviation for orig_bytes, resp_bytes, orig_pkts, resp_pkts, and unique id.orig_h counts from conn.log directed at that device. Generate an alert when any of these metrics exceed 3 standard deviations from their respective rolling means or cross the 99th percentile of historical values (e.g., last 7 days) for a continuous period of at least 60 seconds, specifically for traffic directed at ICS assets. Additionally, for modbus.log and ether_ip.log, calculate the rolling 5-minute average of error-related fields (e.g., modbus.log exception_function_code count, ether_ip.log status_code non-zero count) and alert if these exceed the 99th percentile of their historical baseline. 4. Machine Learning: Implement a time-series anomaly detection model (e.g., Prophet or Isolation Forest) on aggregated conn.log data (e.g., total bytes per minute, connection count per minute, unique source IP count per minute) directed at critical ICS devices. Train the model on historical data to learn normal traffic patterns. Trigger an alert when the model identifies a significant, sustained deviation from these learned patterns, indicating a potential DoS event. Extend the model to include features derived from ICS protocol logs (e.g., rate of Modbus exceptions, EtherNet/IP errors) to enhance detection of protocol-specific DoS attempts."
          },
          {
            "description": "A sustained, statistically anomalous increase (exceeding the 95th percentile of the 7-day historical baseline) in network connection resets (RST flag) or explicit rejections (Zeek conn_state 'REJ', 'RSTO', 'RSTR', 'RSTRH') originating from a specific critical ICS device, occurring within 30 seconds of receiving a high volume of traffic from a single or small cluster of source IP addresses, indicating the device is overwhelmed or malformed traffic is being sent.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control System DMZ, network interfaces of Programmable Logic Controllers (PLCs) and Remote Terminal Units (RTUs), and SCADA Servers.",
            "action": "1. Symbolic Logic: Filter Zeek conn.log for entries where id.resp_h is a critical ICS device IP and conn_state is one of 'REJ', 'RSTO', 'RSTR', or 'RSTRH'. Identify connections where resp_pkts is greater than 5 times orig_pkts but with resp_bytes less than 10 bytes for a given duration, indicating potential malformed replies or device struggle. Correlate these events with id.orig_h counts to identify single or few sources (e.g., 1-5 unique source IPs). 2. Statistical Method: For each critical ICS device, establish a 5-minute rolling average and standard deviation for the count of connections with conn_state indicating resets/rejections. Trigger an alert if this count exceeds the 99th percentile of its historical baseline (e.g., last 7 days) for at least 30 seconds. Correlate this alert with a sudden spike in traffic originating from a small cluster of source IPs (e.g., less than 5 unique id.orig_h values contributing to more than 80% of the traffic directed at the ICS device). 3. Machine Learning: Apply an unsupervised clustering algorithm (e.g., K-Means or DBSCAN) to group conn.log entries based on id.resp_h, id.orig_h, conn_state, duration, orig_pkts, and resp_pkts. Identify clusters that represent unusual patterns of high-frequency, short-duration connections with error states (e.g., 'REJ', 'RSTO', 'RSTR', 'RSTRH') to specific ICS devices. Focus on clusters where these patterns originate from a limited set of source IPs, indicating potential DoS activity, and generate an alert for such clusters."
          },
          {
            "description": "An unexpected Application Error (Windows Event ID 1000), Application Hang (Windows Event ID 1002), or Service Control Manager event indicating abnormal termination (Windows Event ID 7031, 7034) for a critical ICS process or service (e.g., HMI.exe, HistorianService.exe) on a Windows-based ICS host, occurring within 60 seconds of a statistically significant increase in network connection attempts (from Zeek conn.log) or other resource-intensive network activity directed at that host.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1002",
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), and Historian Servers within the ICS network.",
            "action": "1. Symbolic Logic: Define a watchlist of critical processes and services (e.g., hmi_app.exe, historian.exe, scada_server.exe) on Windows-based ICS hosts. Configure alerts for Windows Event IDs 1000 (Application Error), 1002 (Application Hang), 7031 (Service terminated unexpectedly), and 7034 (Service terminated unexpectedly) when generated by processes or services on this watchlist. Prioritize alerts from high-value ICS assets. 2. Statistical Method: Upon detection of any critical application or service error or hang event (from Symbolic Logic action), query Zeek conn.log for the affected host's inbound traffic during the 60 seconds prior to the event. Calculate the percentile rank of orig_bytes, resp_bytes, and connection_count directed at the host during that period compared to the host's historical 5-minute average (e.g., last 7 days). Generate an alert if any of these network metrics exceed the 99th percentile, especially if originating from an internal IP address with no prior communication history with the affected host. 3. Machine Learning: Develop a correlation model (e.g., using a graph neural network or a Bayesian network) to identify unusual temporal relationships between spikes in network traffic (e.g., connection count, bytes/second from Zeek conn.log) directed at a specific Windows-based ICS host and the subsequent occurrence of critical application or service error or hang events (Windows Event IDs 1000, 1002, 7031, 7034) on that host. Train the model to learn typical network-to-host event causality. Flag deviations where high network activity immediately precedes host instability, particularly when the network activity involves known DoS attack patterns, and generate an alert."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]