[
  {
    "information_requirement": "Is an adversary attempting to discover information about the ICS network topology, protocols, or credentials by sniffing network traffic? (PIR)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0842",
        "name": "Network Sniffing",
        "evidence": [
          {
            "description": "Existence of a process (Windows Event ID 4688) or service (Windows Event ID 7045) on an ICS host whose name, command line, or file hash matches known network sniffing tools (e.g., Wireshark, tcpdump, tshark) or promiscuous mode driver files (e.g., npf.sys, ndiscap.sys), or the observed process exhibits anomalous network interface configuration changes (e.g., promiscuous mode enabled).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, Human-Machine Interfaces (HMIs), Data Historians, and other Windows-based systems within the Process Control Network (PCN) and Manufacturing Zone.",
            "action": "1. **Symbolic Logic (IOC Match)**: Continuously monitor Windows Event ID 4688 (Process Creation) and Windows Event ID 7045 (Service Installation) on all critical ICS assets. Maintain a regularly updated watchlist of known network sniffing tool executables (e.g., 'wireshark.exe', 'tcpdump.exe', 'rawcap.exe', 'tshark.exe', 'dumpcap.exe') and common packet capture driver names (e.g., 'npf.sys', 'ndiscap.sys'). Generate an immediate high-priority alert upon detection of any process execution or service installation matching these names. 2. **Statistical Method**: For each critical ICS asset, establish a 7-day rolling baseline for the count of unique new processes observed (Windows Event ID 4688 where the process name is not in a known allowlist). Calculate the 99th percentile for this count. Trigger an alert if the daily count of unique new processes on an asset exceeds this 99th percentile, indicating an unusual surge in software activity that could include sniffing tools. 3. **Machine Learning Application**: Develop a machine learning classification model (e.g., Random Forest or SVM) trained on historical Windows Event ID 4688 data from ICS assets. Features for the model should include process name, parent process name, command-line arguments, process hash, and execution path. Train the model to distinguish between legitimate ICS process activity and known malicious or anomalous process executions (including those related to sniffing tools). Deploy the model to continuously analyze new process creation events, flagging executions with a high anomaly score or classifying them as 'suspicious sniffing tool' activity for analyst review."
          },
          {
            "description": "An ICS host (e.g., EWS, HMI, PLC) exhibits a statistically significant increase in the number of unique destination IP addresses contacted within a defined time window (e.g., 1 hour) compared to its established baseline, or communicates with IP addresses outside its normal operational network segment, as recorded in network flow logs.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting PLCs, RTUs, and SCADA servers; network choke points between the IT and OT networks; switch port mirror/SPAN sessions on critical ICS segments.",
            "action": "1. **Statistical Method**: Using Zeek conn.log, for each critical ICS host (e.g., EWS, HMI, SCADA server), establish a 30-day rolling baseline of its typical 'network fan-out' \u2014 the number of unique destination IP addresses it communicates with per hour. Calculate the 99th percentile for this hourly count. Trigger an alert if a host's hourly unique destination IP count consistently exceeds this 99th percentile for more than three consecutive hours, indicating persistent network discovery. 2. **Symbolic Logic (Rule-based)**: On critical ICS network segments, identify any host (especially non-router/switch devices like EWS or HMIs) generating network traffic destined for an IP range not belonging to the defined ICS network asset inventory or known operational IP space. Specifically, alert on any connections originating from an EWS or HMI to an IP address outside the established OT network boundaries (e.g., internal IT network, external internet IP) that is not explicitly allowlisted for patching or specific OT services. 3. **Machine Learning Application**: Implement a time-series anomaly detection model (e.g., Isolation Forest or ARIMA) on the hourly counts of unique destination IP addresses and total bytes transferred for each critical ICS host as observed in Zeek conn.log. Train the model on several weeks of baseline data. Generate an alert when the model detects significant deviations (e.g., an anomaly score above a configured threshold) from the expected patterns, indicating a potential sniffing or network mapping attempt."
          },
          {
            "description": "Detection of unencrypted protocol communication (e.g., Telnet, FTP, HTTP, Modbus TCP, DNP3) involving critical ICS assets that deviates from established allowlists, exhibits anomalous session parameters (e.g., duration, byte counts), or originates from/terminates at an unauthorized host, as captured in network protocol logs.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek modbus.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data historians, SCADA servers, and network segments carrying administrative or industrial protocol traffic; DMZ segments for external ICS access.",
            "action": "1. **Symbolic Logic (Rule-based)**: Configure Zeek to parse and log specific unencrypted ICS protocols (e.g., Modbus TCP on TCP/502, DNP3 on TCP/20000, EtherNet/IP). Establish a strict allowlist of source-destination-port combinations and associated hosts for all traffic using these protocols. Generate a high-priority alert for any observed communication flow in Zeek conn.log or specific protocol logs (e.g., modbus.log, dnp3.log) that deviates from this allowlist, indicating unauthorized use of unencrypted ICS protocols. Log new or unallowlisted protocol usage in Zeek notice.log. 2. **Statistical Method**: For all established unencrypted protocol sessions (e.g., Telnet, FTP, Modbus TCP, DNP3) identified in Zeek conn.log, calculate the 30-day rolling average and standard deviation for the total byte count (orig_bytes + resp_bytes) for each unique source-destination-protocol-port tuple. Alert if any single session's byte count exceeds the average by more than 3 standard deviations, or if the 95th percentile of daily byte transfer volume for a given unencrypted protocol sees a sudden increase (e.g., >200% increase compared to the previous 7-day average), which could indicate bulk data exfiltration or extensive sniffing. 3. **Machine Learning Application**: Employ an unsupervised machine learning clustering algorithm (e.g., K-Means or DBSCAN) on connection features extracted from Zeek conn.log, specifically focusing on unencrypted protocols. Features should include source/destination IP/port, protocol, service, duration, and byte counts (orig_bytes, resp_bytes). Train the model to group similar connection patterns. Continuously analyze new connection data and flag any sessions that fall into a new or sparsely populated cluster, or are classified as outliers, indicating anomalous unencrypted communication potentially related to sniffing or unauthorized data access."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]