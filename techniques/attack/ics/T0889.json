[
  {
    "information_requirement": "Has an adversary modified program logic on an ICS controller to establish persistence?",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0889",
        "name": "Modify Program",
        "evidence": [
          {
            "description": "A network packet containing an ICS program modification command (e.g., S7COMM 'Program Download' function code 0x1B, Modbus 'Write Multiple Registers' function code 0x10, EtherNet/IP 'Write Tag' service code 0x4C) is observed targeting a controller, where the command originates from an unauthorized source or occurs outside a scheduled maintenance window.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic analysis points on the Process Control Network (Purdue Level 2/3), Engineering Workstation (EWS) subnets (Level 3), network interfaces of critical PLCs/Controllers (Level 1/2)",
            "action": "1. Symbolic Logic: Construct a SIEM query to detect ICS program modification function codes in Zeek protocol logs (e.g., s7comm.log, modbus.log, enip.log). Join the source IP from the network event (Zeek conn.log) with a pre-defined allowlist of authorized Engineering Workstation (EWS) IP addresses. Generate a high-priority alert if the source IP is not on the allowlist OR if the command occurs outside a pre-defined maintenance calendar.\n2. Statistical Method: For each controller, establish a 30-day rolling baseline of hourly program modification command counts using Zeek ICS protocol logs. Calculate the mean and standard deviation for the hourly count. Generate an alert if the count in any given hour exceeds three standard deviations from its historical mean (a 3-sigma event), indicating a statistically significant burst of activity.\n3. Machine Learning: Train a time-series anomaly detection model (e.g., Isolation Forest or an autoencoder) on the count of program modification commands per controller, per hour. Engineer features including command count, source/destination IP pair, protocol, and time-of-day. Deploy the model to score live traffic and alert when it flags a time window as anomalous with a high confidence score, suggesting a deviation from learned normal behavior."
          },
          {
            "description": "A network packet containing an ICS controller mode change command (e.g., S7COMM 'CPU Control' to STOP/PROGRAM, EtherNet/IP 'Set Attribute Single' on operational mode) is observed, where the state change is not correlated with a documented maintenance activity or originates from an unauthorized source.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek dnp3.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of critical PLCs/Controllers (Level 1/2), Process Control Network (Purdue Level 2/3) monitoring points, network choke points between Level 3 and Level 2",
            "action": "1. Symbolic Logic: Create a rule to detect ICS controller mode change commands (e.g., to 'STOP' or 'PROGRAM') in Zeek ICS protocol logs. Correlate the event's source IP (from Zeek conn.log) with an allowlist of authorized EWS IPs. Generate a high-priority alert if the source IP is not on the allowlist or if the timestamp of the event does not correspond to an active, approved change management ticket.\n2. Statistical Method: For each critical controller, baseline the frequency and duration of non-'RUN' states over a 90-day period. Calculate the 99th percentile for the daily total duration spent in 'STOP' or 'PROGRAM' mode. Generate an alert if the daily duration for a controller exceeds this statistical threshold, indicating an abnormally long period in a non-operational, modifiable state.\n3. Machine Learning: Develop a sequence analysis model (e.g., a Hidden Markov Model) trained on historical Zeek ICS logs to learn normal operational sequences (e.g., RUN -> STOP -> DOWNLOAD -> RUN). The model should learn the probability of state transitions. Alert on any sequence of events that deviates from the learned high-probability paths, such as a transition to 'PROGRAM' from an unauthorized IP or a 'STOP' command that is not followed by an expected authorized action within a defined timeframe."
          },
          {
            "description": "A discrepancy is detected between the running program on an ICS controller or its project file on an EWS and its verified 'golden' baseline, identified by a change in file hash, size, or modification timestamp.",
            "data_sources": [
              "Zeek files.log",
              "Sysmon Event ID 11",
              "Sysmon Event ID 23",
              "Windows Event ID 4663",
              "ICS Integrity Monitoring System Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of Engineering Workstations (EWS) (Level 3), ICS-specific integrity monitoring platforms (Level 3.5), Centralized log servers, network file transfer inspection points",
            "action": "1. Symbolic Logic: Monitor logs from dedicated ICS integrity monitoring tools for any 'hash mismatch' or 'configuration change' alerts. On EWS hosts, create a rule to monitor for the creation (Sysmon Event ID 11) or deletion (Sysmon Event ID 23) of critical ICS project files (e.g., *.ACD, *.S7P, *.L5X) outside of approved change windows. Cross-reference file hashes from network transfers (Zeek files.log) against a threat intelligence feed of known-malicious hashes.\n2. Statistical Method: For ICS project files transferred over the network (observed in Zeek files.log), calculate a baseline Shannon entropy score for each file type. Generate an alert if a transferred file's entropy is a statistical outlier (e.g., deviates by more than 3 standard deviations from the mean for its type), which can indicate obfuscation, encryption, or packing not typical of benign project files.\n3. Machine Learning: Train a binary classification model (e.g., Random Forest) to distinguish between 'authorized' and 'unauthorized' ICS project file transfers. Engineer features from network transfer metadata (Zeek files.log) and host events (Sysmon), including file size, entropy, source/destination IP, time of transfer, and the presence of a corresponding authorized user session (Windows Event ID 4624) on the source EWS. Alert on any file transfer classified as 'unauthorized' with a high confidence score."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]