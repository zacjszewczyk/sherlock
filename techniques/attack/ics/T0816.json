[
  {
    "information_requirement": "Has a critical ICS device been restarted or shut down outside of a scheduled maintenance window? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0816",
        "name": "Device Restart-Shutdown",
        "evidence": [
          {
            "description": "Observation of Windows System Event ID 1074 (user-initiated restart/shutdown), Event ID 6006 (clean shutdown), or Event ID 6008 (unexpected shutdown) on critical Windows-based ICS assets (e.g., HMIs, EWS, SCADA Servers), indicating a change in operational state. Evidence includes the 'ShutdownReason' and 'InitiatingProcessName' for user-initiated events, and the 'ShutdownType' for unexpected events, along with the timestamp and source host.",
            "data_sources": [
              "Windows Event ID 1074",
              "Windows Event ID 6006",
              "Windows Event ID 6008",
              "Windows Event ID 4624",
              "Windows Event ID 4634",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Operator Stations, and SCADA Servers within the Process Control Network (PCN).",
            "action": "1. Symbolic Logic:\na. Query SIEM for Windows Event ID 1074 on all critical ICS assets. Filter for events where the 'ShutdownReason' field is not associated with known scheduled maintenance activities (e.g., 'Planned', 'Maintenance'). Additionally, check the 'InitiatingProcessName' field against a predefined whitelist of approved processes (e.g., 'shutdown.exe', 'wuauclt.exe' for updates) and a blacklist of known malicious processes. Generate an alert if an Event ID 1074 occurs outside of maintenance windows, or if the 'InitiatingProcessName' is not whitelisted or is blacklisted.\nb. Query SIEM for Windows Event ID 6006 on critical ICS assets. Identify the 'ShutdownType' and 'InitiatingProcessName'. Alert if 'ShutdownType' is 'clean shutdown' but occurs outside of scheduled maintenance and the 'InitiatingProcessName' is not whitelisted.\nc. Immediately alert for any occurrence of Windows Event ID 6008 on critical ICS assets, as this indicates an unexpected system shutdown or reboot, which is inherently anomalous.\n2. Statistical Method:\na. For each critical ICS asset, establish a 90-day rolling baseline for the daily count of Windows Event ID 1074 (user-initiated restart/shutdown) and Event ID 6006 (clean shutdown).\nb. Calculate the average and 99th percentile for these daily counts, distinguishing between events occurring during and outside of known scheduled maintenance windows.\nc. Generate an alert if the number of Event ID 1074 or 6006 events for an asset in a 24-hour period exceeds its 99th percentile outside of a maintenance window.\nd. Additionally, monitor the 'ShutdownReason' field for Event ID 1074. Calculate the frequency distribution of all observed 'ShutdownReason' values over the past 180 days. Alert if a 'ShutdownReason' value is observed that falls below the 1st percentile of historical frequency, indicating a statistically rare or unprecedented reason for shutdown.\n3. Machine Learning:\na. Train a supervised classification model (e.g., Random Forest, XGBoost) using 6-12 months of historical Windows Event ID 1074, 6006, and 6008 data from critical ICS assets.\nb. Engineer features including: EventID, encoded 'ShutdownReason', encoded 'InitiatingProcessName', encoded 'InitiatingUser', 'time_of_day', 'day_of_week', and a binary feature indicating 'preceding_login_activity' (derived from Windows Event ID 4624 within a 15-minute window prior to the shutdown event).\nc. Label historical events: 'benign' for known legitimate shutdowns (e.g., scheduled maintenance, authorized updates) and 'malicious' for unexpected or unauthorized shutdowns.\nd. Deploy the trained model to continuously classify new incoming Windows Event ID 1074, 6006, and 6008 events. Generate an alert for any event classified with a high confidence score (e.g., > 0.8) as 'malicious', particularly when the 'ShutdownReason' or 'ShutdownType' is indicative of an abrupt or unplanned event."
          },
          {
            "description": "Observation of specific ICS protocol function codes or commands (e.g., DNP3 Function Code 1 (Restart IIN), DNP3 Function Code 2 (Cold Restart), Modbus Function Code 8 (Diagnostic) with sub-function 0x01 (Return Query Data) or 0x0A (Clear Counters and Restart), EtherNet/IP 'Reset' service request, or IEC 61850 GOOSE/SV messages indicating a device restart state change) targeting a critical PLC, RTU, or IED. Evidence includes the source IP address of the command, the destination device, the specific function code/command, and the timestamp of execution.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek opcua.log",
              "Zeek iec61850goose.log",
              "Zeek iec61850sv.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic monitoring points between Level 1 (Basic Control) and Level 2 (Supervisory Control) of the Purdue Model, specifically targeting PLCs, RTUs, and IEDs, and in DMZ segments separating IT and OT networks.",
            "action": "1. Symbolic Logic:\na. Configure SIEM to ingest and parse Zeek logs for DNP3 (dnp3.log), Modbus (modbus.log), EtherNet/IP (enip.log), OPC UA (opcua.log), and IEC 61850 GOOSE (iec61850goose.log).\nb. Create correlation rules to detect specific restart/shutdown commands:\ni. DNP3: dnp3.log where function_code is 1 ('Restart IIN') or 2 ('Cold Restart').\nii. Modbus: modbus.log where function_code is 8 ('Diagnostic') AND sub_function is 0x01 ('Return Query Data') or 0x0A ('Clear Counters and Restart').\niii. EtherNet/IP: enip.log where the service field indicates a 'Reset' command (e.g., 'Reset').\niv. OPC UA: opcua.log where specific method_call or data_change events signify a device restart or shutdown state.\nv. IEC 61850 GOOSE: iec61850goose.log for specific dat_attribute values (e.g., 'stVal', 'q') indicating a device state change to restart or shutdown.\nc. For any detected command, immediately alert if the id.orig_h (source IP address) is not present in the 'Authorized ICS Engineering Workstations' or 'Approved HMI' whitelist. Enrich the alert with context from Zeek conn.log for full connection details.\n2. Statistical Method:\na. For each critical PLC, RTU, or IED, establish a 30-day rolling baseline for the daily count of restart/shutdown function codes (as defined in the Symbolic Logic step) observed in Zeek dnp3.log, modbus.log, enip.log, opcua.log, and iec61850goose.log.\nb. Calculate the average and 99th percentile for the daily count of these commands for each destination device. Generate an alert if the daily count of restart/shutdown commands targeting a critical device exceeds its 99th percentile, excluding known maintenance periods.\nc. Additionally, for each critical device, calculate the Shannon entropy of the id.orig_h (source IP address) field associated with these restart/shutdown commands over a 24-hour rolling window. Establish a 30-day baseline for this entropy. A sudden drop in entropy (e.g., a single source IP initiating multiple commands) compared to the baseline, specifically if it falls below the 1st percentile of historical entropy values, should trigger an alert, indicating a potential concentrated attack.\n3. Machine Learning:\na. Deploy an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM) trained on 6-12 months of historical Zeek ICS protocol logs (dnp3.log, modbus.log, enip.log, opcua.log, iec61850goose.log).\nb. Use features such as: protocol type, function_code, sub_function (if applicable), encoded id.orig_h (source IP), encoded id.resp_h (destination IP), packet_size, time_of_day, and day_of_week.\nc. Train the model on 'normal' ICS command patterns, ensuring that known legitimate restart events (e.g., during scheduled maintenance) are either excluded from training or carefully labeled to avoid false positives.\nd. The model should continuously process new ICS protocol command events. Generate an alert for command patterns or sequences that exhibit a high anomaly score (e.g., exceeding the 99th percentile of anomaly scores observed during training), indicating significant deviation from learned normal behavior and potential anomalous restart/shutdown attempts."
          },
          {
            "description": "Sustained absence of expected periodic network communication (e.g., Modbus polling, DNP3 heartbeats, EtherNet/IP I/O messaging, OPC UA data updates, or IEC 61850 GOOSE messages) from a critical controller (PLC, RTU, IED) for a duration exceeding its established normal communication interval threshold (e.g., 1.5 times the average inter-arrival time). Evidence includes the last observed communication timestamp, the expected communication interval, and the current duration of silence for a specific controller and protocol.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek opcua.log",
              "Zeek iec61850goose.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic flows to and from critical controllers on the Process Control Network (PCN), specifically at network aggregation points or switch mirror ports for Level 0/1/2 devices.",
            "action": "1. Symbolic Logic:\na. For each critical PLC, RTU, or IED, establish a baseline of its expected communication partners and their normal polling/heartbeat intervals (e.g., 5 seconds for Modbus, 1 second for GOOSE). Maintain a whitelist of critical controller IPs.\nb. Configure SIEM to continuously monitor Zeek conn.log and relevant ICS protocol logs (dnp3.log, modbus.log, enip.log, opcua.log, iec61850goose.log) for communication events where id.orig_h or id.resp_h matches a critical controller's IP.\nc. Implement a rule that tracks the last_seen timestamp for each critical controller's expected communication stream. If the current time minus the last_seen timestamp for a controller and its primary communication protocol exceeds 1.5 * normal_polling_interval, generate a 'Communication Loss' alert.\nd. Ensure this rule is suppressed during known scheduled maintenance windows for the specific controller.\n2. Statistical Method:\na. For each critical controller, utilize Zeek conn.log and relevant ICS protocol logs to calculate a 7-day rolling average and standard deviation of the inter-arrival times of expected periodic communication packets (e.g., Modbus requests, DNP3 heartbeats).\nb. If the observed inter-arrival time for a controller's communication stream exceeds its 99th percentile or is greater than 3 standard deviations from its mean, trigger an alert for potential communication loss.\nc. Additionally, analyze the duration field from Zeek conn.log for connections involving critical controllers. Establish a 7-day rolling baseline for the average connection duration for each controller. If the average connection duration for a controller abruptly drops below its 1st percentile of historical values for a sustained period (e.g., 5 consecutive polling intervals), generate an alert indicating an anomaly in connection behavior potentially related to device instability or shutdown.\n3. Machine Learning:\na. For each critical controller, train and deploy a time-series forecasting model (e.g., Prophet, ARIMA, LSTM) on 6-12 months of historical Zeek conn.log and ICS protocol log data.\nb. The model should predict expected communication metrics such as daily/hourly bytes_orig and bytes_resp from conn.log, or the count of protocol-specific messages (e.g., modbus.log:count, dnp3.log:count). The model should incorporate features for daily/weekly seasonality and known maintenance windows.\nc. Continuously compare observed communication metrics against the model's predicted range (e.g., a 95% confidence interval). If the observed communication volume for a controller falls below the model's predicted lower bound for a duration exceeding its normal polling interval (e.g., 1.5 times), classify this as an anomaly and generate an alert, indicating a potential unexpected shutdown or communication interruption."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]