[
  {
    "information_requirement": "Is the adversary executing unauthorized scripts on critical ICS assets like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0853",
        "name": "Scripting",
        "evidence": [
          {
            "description": "Execution of `powershell.exe` on an Engineering Workstation (EWS) or Human-Machine Interface (HMI) with command-line arguments indicating obfuscation (e.g., base64 encoded strings, high-entropy content), unsigned script execution, or initiation of network connections to unapproved external or internal destinations. This includes `powershell.exe` being spawned by an unusual parent process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers",
            "action": "1. **Symbolic Logic**: Create a watch list for `powershell.exe` process creations (Windows Event ID 4688) on EWS/HMIs where the command line contains known malicious arguments (e.g., `-EncodedCommand`, `-NonInteractive`, `-nop`, `-w hidden`) or executes unsigned scripts. Identify `powershell.exe` activity originating from non-standard parent processes (e.g., directly from a browser or Office application, instead of expected management tools). 2. **Statistical Method**: Analyze PowerShell Script Block logs (Windows Event ID 4104) for script content. Calculate the Shannon entropy of script block content strings; alert when entropy exceeds the 95th percentile established from a 30-day baseline of legitimate scripts. For network connections (Zeek conn.log), establish a baseline of destination IP/port pairs and connection volumes initiated by `powershell.exe` over a 7-day period; flag connections to destinations not in the top 99th percentile of observed activity or to known external threat intelligence IPs. 3. **Machine Learning**: Apply a time series anomaly detection model (e.g., Isolation Forest or ARIMA) to the frequency and duration of `powershell.exe` executions on each critical ICS asset (Windows Event ID 4688) over a rolling 24-hour window, alerting on statistically significant deviations from the learned baseline. Use a text classification model (e.g., TF-IDF with SVM) trained on known benign and malicious PowerShell script blocks (Windows Event ID 4104) to score and identify potentially malicious script content."
          },
          {
            "description": "Execution of `python.exe` or `pythonw.exe` on an ICS asset (e.g., EWS, HMI, PLC controller) that is not explicitly authorized via a software whitelist. This includes instances where the Python executable itself or associated `.py` script files were recently transferred onto the asset via network protocols or removable media.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log",
              "Zeek http.log",
              "Zeek smb.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Process Control Servers, OT Network Segments (for Zeek logs), Jump Servers",
            "action": "1. **Symbolic Logic**: Establish a strict whitelist of approved `python.exe` paths and authorized parent processes on all ICS assets; generate an alert (Windows Event ID 4688) for any `python.exe` execution from an unapproved path or by an unauthorized parent process. Configure alerts for `python.exe` executing from temporary directories or user-writable locations. Correlate Zeek files.log and http.log entries for `.py` file transfers to an ICS asset with subsequent `python.exe` process creations (Windows Event ID 4688) on that same asset within a 5-minute window. 2. **Statistical Method**: For all `python.exe` executions (Windows Event ID 4688), calculate the historical frequency of the executing user account and the script's directory path. Alert if a user account executes `python.exe` from a path that falls below the 1st percentile of its typical execution frequency. Analyze Zeek dns.log for domains contacted by systems running `python.exe`; use a statistical rarity score (e.g., inverse document frequency) to identify communication with domains that are rare within the overall network traffic or are not part of an approved domain list. 3. **Machine Learning**: Implement an unsupervised machine learning model (e.g., One-Class SVM) to profile normal `python.exe` execution behavior (Windows Event ID 4688) on each ICS asset based on factors like execution time, duration, and associated network connections. Alert on significant deviations from these learned profiles. Utilize a classification model to identify suspicious `.py` file transfers (Zeek files.log) by analyzing file size, source IP reputation, and file extension, flagging those that resemble known malicious Python scripts or are sourced from uncharacteristic locations."
          },
          {
            "description": "Execution of `wscript.exe` or `cscript.exe` on an ICS asset with command-line arguments that are highly obfuscated (e.g., base64 encoded, long strings of random characters) or that execute scripts from non-standard, user-writable directories (e.g., `%TEMP%`, `%APPDATA%`, `C:\\Users\\Public`). This also includes execution by an unusual parent process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers",
            "action": "1. **Symbolic Logic**: Create an alert (Windows Event ID 4688) for `wscript.exe` or `cscript.exe` process creations where the command line arguments include known malicious patterns (e.g., specific URLs, IP addresses, or known C2 domains) or execute files from common temporary directories (`%TEMP%`, `C:\\Windows\\Temp`, `%APPDATA%`, `C:\\Users\\Public`). Implement a rule to flag executions where the parent process is unusual (e.g., a web browser or email client directly launching a script host). 2. **Statistical Method**: For all `wscript.exe` and `cscript.exe` executions (Windows Event ID 4688), calculate the Shannon entropy of the command-line arguments. Generate an alert if the entropy score exceeds the 99th percentile of a 60-day baseline, indicating potential obfuscation. Track the frequency of script execution paths; flag any execution from a path that has not been observed in the last 90 days or falls below the 0.1st percentile of observed paths. 3. **Machine Learning**: Employ a supervised machine learning model (e.g., Random Forest) trained on historical `wscript.exe`/`cscript.exe` command-line arguments and their outcomes (benign/malicious) to classify new executions (Windows Event ID 4688). Additionally, use a clustering algorithm (e.g., K-Means) on command-line argument features to identify new, anomalous clusters of script host activity that deviate from established benign groups."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]