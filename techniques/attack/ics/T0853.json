[
  {
    "information_requirement": "Is the adversary executing unauthorized scripts on critical ICS assets like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0853",
        "name": "Scripting",
        "evidence": [
          {
            "description": "Evidence of PowerShell execution on an ICS asset (e.g., Engineering Workstation, HMI) characterized by one or more of the following: 1. Process execution (powershell.exe) with command-line arguments containing obfuscation (e.g., -EncodedCommand, base64 strings, Shannon entropy > 4.5), suspicious flags (-NonInteractive, -ExecutionPolicy Bypass, -WindowStyle Hidden), or download cradles (IEX(New-Object Net.WebClient).DownloadString). 2. Process (powershell.exe) spawned by an anomalous parent process such as an Office application (winword.exe), web browser (chrome.exe), or another script host, rather than an interactive shell or management tool. 3. Script block content (Windows Event ID 4104) containing obfuscated code, calls to suspicious .NET APIs (e.g., System.Reflection.Assembly.Load), or high entropy. 4. Outbound network connections from powershell.exe to known malicious, newly registered, or statistically rare external domains/IP addresses.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, Process Servers, Jump Servers, Domain Controllers",
            "action": "1. Symbolic Logic: Continuously monitor for powershell.exe process creation (Windows Event ID 4688, Sysmon Event ID 1) on critical ICS assets. Trigger a high-severity alert if the command line contains any of: -EncodedCommand, -ExecutionPolicy Bypass, IEX, (New-Object Net.WebClient).DownloadString. Create a medium-severity alert if the parent process is not in a pre-defined allow-list (e.g., explorer.exe, cmd.exe, approved management tools) and is instead an Office application, browser, or other script host. Correlate process creation with outbound network connections (Zeek conn.log) from the same host to IPs/domains on a threat intelligence feed. 2. Statistical Method: For all PowerShell script block logs (Windows Event ID 4104), calculate the Shannon entropy and character frequency of the script content. Establish a 30-day rolling baseline of these metrics per host. Alert when a new script's entropy exceeds the 98th percentile of the baseline for that host. For command lines (Event ID 4688), baseline the length and argument count per user and host. Alert if a command's length or argument count exceeds 3 standard deviations from the user's or host's historical average. For network connections from powershell.exe, baseline destination port popularity across the NAI; alert if a connection uses a port outside the top 99% most common ports. 3. Machine Learning: Train a text classification model (e.g., a lightweight convolutional neural network or FastText) on a labeled dataset of benign and malicious PowerShell scripts (from public repositories and internal logs). Deploy the model to score all new script blocks (Windows Event ID 4104) in real-time, alerting on any script with a malicious probability score > 0.85. Separately, use an Isolation Forest model to detect anomalous process execution events (Sysmon Event ID 1) based on features like parent process, command-line length, user context, and time of day, identifying novel malicious execution patterns."
          },
          {
            "description": "Evidence of unauthorized Python script execution on an ICS asset, identified by: 1. Execution of a Python interpreter (python.exe, pythonw.exe) from a file path not included in a strict, pre-approved software inventory for that asset class. 2. Temporal correlation where a Python script file (.py, .pyc) is transferred to a host (via HTTP, SMB, or other means) and is executed within a short time window (e.g., < 10 minutes). 3. A Python process initiating network connections to destinations that are either statistically rare for the environment, not on an approved list, or associated with known malicious infrastructure. 4. A Python process being spawned by an anomalous parent, such as a web server process on an HMI or a SCADA application.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek files.log",
              "Zeek http.log",
              "Zeek smb.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Process Control Servers, Data Historians, OT Network Segments, Jump Servers",
            "action": "1. Symbolic Logic: Implement and enforce a strict application allow-list for Python interpreters on all ICS assets. Trigger a high-severity alert for any execution of python.exe or pythonw.exe (Windows Event ID 4688, Sysmon Event ID 1) from a path not on the allow-list. Create a rule that correlates a file transfer event (from Zeek files.log, http.log, smb.log) containing a .py file with a subsequent process execution of that same filename on the destination host within 15 minutes. Alert if the Python process initiates a connection (Zeek conn.log) to an IP on a threat intelligence blocklist. 2. Statistical Method: For each ICS asset, establish a 60-day baseline of all executed script paths (from command-line arguments in Event ID 4688/Sysmon Event ID 1). Alert on any execution of a Python script from a path that has never been seen before on that asset. For network activity, analyze dns.log records associated with Python processes. Calculate the inverse domain frequency (IDF) for all requested domains across the OT network over a 30-day period. Flag any request from a Python process for a domain with a very high IDF score (i.e., extremely rare), indicating a potential C2 domain. 3. Machine Learning: Develop an unsupervised anomaly detection model (e.g., One-Class SVM) to create a profile of 'normal' Python execution on each critical asset. Use features such as parent process, command-line arguments, user context, and associated network traffic patterns (e.g., data volume, destination port). Alert when a new execution is flagged as an outlier by the model. For file analysis, train a Gradient Boosting classifier on features extracted from Python scripts (e.g., import statements, function calls, string literals, presence of eval() or exec()) to predict if a transferred .py file is malicious before it is even executed."
          },
          {
            "description": "Evidence of Windows Script Host execution on an ICS asset indicative of malicious activity, characterized by: 1. Process execution (wscript.exe, cscript.exe) that runs a script file (.js, .vbs, .wsf) from a temporary or user-writable directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public\\). 2. The script host is spawned by a non-interactive or unusual parent process, such as an Office application, web browser, or PDF reader, instead of explorer.exe or cmd.exe. 3. Command-line arguments for the script host exhibit signs of obfuscation, such as high Shannon entropy (> 4.5), or contain encoded content. 4. The script host process initiates outbound network connections to destinations not on an established allow-list or that are statistically rare for the asset.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, Process Servers, Jump Servers",
            "action": "1. Symbolic Logic: Trigger a high-severity alert for any execution of wscript.exe or cscript.exe (Sysmon Event ID 1) where the parent process is winword.exe, excel.exe, outlook.exe, or a browser process. Create an alert for any file creation event (Sysmon Event ID 11) with a .js, .vbs, or .wsf extension in common temporary directories (%TEMP%, C:\\Windows\\Temp\\), immediately followed by an execution of that file by wscript.exe or cscript.exe. Block and alert on any network connection from these script hosts (Zeek conn.log) to known malicious IPs. 2. Statistical Method: For every wscript.exe/cscript.exe execution (Event ID 4688), calculate the length of the command-line argument. Establish a 90-day baseline of command-line lengths per host. Alert if a new execution's command-line length exceeds the 99th percentile of its historical baseline, indicating an unusually long or complex script argument. Additionally, create a frequency map of script file extensions executed by these hosts. Alert if a rare extension (e.g., .jse) is used, especially if it has not been seen in the environment before. 3. Machine Learning: Use a clustering algorithm like DBSCAN on features extracted from script host process events (Sysmon Event ID 1). Features should include parent process name, command-line arguments (tokenized), user context, and hour of execution. The goal is to automatically group normal, recurring administrative script executions into clusters and flag any new executions that do not fit into an existing cluster as anomalous 'noise' points requiring investigation. This can uncover novel adversary techniques that do not match pre-defined rules."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]