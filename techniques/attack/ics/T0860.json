[
  {
    "information_requirement": "Is an adversary attempting to gain initial access to the ICS network via wireless compromise? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0860",
        "name": "Wireless Compromise",
        "evidence": [
          {
            "description": "A `Zeek conn.log` record showing a `id.orig_h` or `id.resp_h` (IP address) or `id.orig_l2_addr` or `id.resp_l2_addr` (MAC address) on an ICS wireless network segment that is not present in the pre-approved, authorized ICS wireless asset inventory, indicating an unauthorized device.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Wireless Access Points (WAPs) within the Process Control Network (PCN) and Manufacturing Zone, network taps or SPAN ports on wireless network infrastructure connecting to Level 1/2 devices, dedicated wireless sensor network gateways.",
            "action": "Maintain an up-to-date allowlist of all authorized MAC addresses (`id.orig_l2_addr`, `id.resp_l2_addr`) and IP addresses (`id.orig_h`, `id.resp_h`) for ICS wireless devices and their expected communication patterns. \n1.  **Symbolic Logic:** Continuously monitor `Zeek conn.log` for connections on ICS wireless network segments. Immediately generate a high-severity alert for any connection where either the source or destination MAC/IP address is not present in the authorized asset allowlist, especially if communicating with Level 1 (e.g., PLCs, RTUs) or Level 2 (e.g., HMIs, Control Servers) devices.\n2.  **Statistical Method:** For connections from unknown MAC/IP addresses, calculate the statistical rarity (e.g., Z-score or percentile rank) of the observed protocol (`proto`) and port (`id.resp_p`) combinations against historical baseline distributions for the specific ICS network segment over the last 30 days. Alert if the combination falls below the 5th percentile of observed protocol/port usage, indicating highly unusual traffic.\n3.  **Machine Learning:** Employ an unsupervised learning model (e.g., Isolation Forest or One-Class SVM) on `Zeek conn.log` to identify anomalous network flows based on features like `orig_bytes`, `resp_bytes`, `duration`, `proto`, and `service` for connections observed on ICS wireless segments. Train the model on 90 days of historical 'normal' ICS wireless traffic. Generate a high-priority alert for any flow classified as an outlier, particularly if involving unknown MAC/IP addresses or unusual traffic characteristics."
          },
          {
            "description": "A `Zeek conn.log` record from an authorized ICS wireless device (`id.orig_h`) exhibiting communication patterns outside of its established baseline, specifically: connecting to a new `id.resp_h` (destination IP address), using an unapproved `id.resp_p` (destination port) or `proto` (protocol), or showing `orig_bytes` + `resp_bytes` (total data transfer volume) significantly higher than its historical 95th percentile.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments where HMIs, EWS, Historian Servers, and other wireless-connected ICS field devices reside; network taps on switch uplinks for these segments; ICS protocol deep packet inspection (DPI) sensors.",
            "action": "For each authorized ICS wireless device (`id.orig_h`), establish a communication baseline using at least 60 days of `Zeek conn.log` and relevant ICS protocol logs (e.g., `modbus.log`, `dnp3.log`). Baselines should include: 1) an allowlist of normal destination IPs, 2) an allowlist of normal destination ports and protocols, and 3) the 95th percentile of total bytes (`orig_bytes` + `resp_bytes`) per connection for each unique (source, destination, port, protocol) tuple. \n1.  **Symbolic Logic:** Continuously monitor `Zeek conn.log` and ICS protocol logs. Alert on any connection from an authorized wireless device to a destination IP or using a port/protocol not in its established baseline allowlist. Correlate with `Windows Event ID 4624` on the destination host if it's a Windows system to identify potential successful logins associated with the anomalous network activity.\n2.  **Statistical Method:** For each authorized wireless device, calculate the daily average and standard deviation of its total `orig_bytes` + `resp_bytes` and connection count. Alert if the daily total bytes or connection count exceeds 3 standard deviations from the 30-day moving average. Additionally, calculate the Shannon entropy of destination port distribution for each device over 15-minute windows; a sudden increase in entropy (e.g., exceeding the 99th percentile of historical entropy scores) suggests a broader range of unusual communication.\n3.  **Machine Learning:** Implement a time-series anomaly detection model (e.g., using Prophet or ARIMA models) on the daily total data volume (`orig_bytes` + `resp_bytes`) for each critical ICS wireless device. Train the model on 90 days of historical data. Generate an alert when the predicted data volume deviates significantly from the actual observed volume (e.g., actual value outside the 99% confidence interval of the prediction), indicating a potential compromise or operational issue. This can detect subtle, persistent increases or decreases in data flow."
          },
          {
            "description": "A `Windows Event ID 4688` (Process Creation) on an ICS HMI or EWS, where `NewProcessName` is a known high-risk executable (e.g., `powershell.exe`, `cmd.exe`) and occurs within 3 minutes of an anomalous `Zeek conn.log` entry originating from an ICS wireless device targeting that HMI/EWS (as identified by previous detection methods).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows-based HMIs, EWS, and Control Servers within the Process Control Network (PCN) and DMZ; endpoint detection and response (EDR) agents or Windows Event Forwarding (WEF) infrastructure on these hosts.",
            "action": "Establish a correlation rule to link network and host activities. \n1.  **Symbolic Logic:** Create a detection rule that triggers when an anomalous network connection from an ICS wireless device (identified by actions in previous evidence blocks) is followed within a 3-minute window by a process creation event (`Windows Event ID 4688`) on the destination Windows HMI or EWS. Specifically, alert if the created process is `powershell.exe`, `cmd.exe`, `wscript.exe`, `cscript.exe`, `mshta.exe`, `rundll32.exe`, `certutil.exe`, or other known high-risk executables.\n2.  **Statistical Method:** For all `Windows Event ID 4688` events on HMIs/EWS, calculate the Shannon entropy of the `CommandLine` field. Maintain a rolling 30-day baseline of entropy scores for each process name. Alert if the entropy of a `CommandLine` for a high-risk process (as defined above) exceeds the 99th percentile of its historical entropy distribution for that specific process, indicating potential obfuscation or unusual command execution.\n3.  **Machine Learning:** Implement a supervised machine learning classifier (e.g., Logistic Regression or Random Forest) trained on historical `Windows Event ID 4688` data from HMIs/EWS. Label known malicious and benign command lines/process execution patterns. The model should analyze features extracted from `NewProcessName`, `CommandLine`, `ParentProcessName`, and `ParentCommandLine` fields. Generate an alert for any new process creation event that the model classifies as malicious or highly suspicious, particularly when correlated with recent anomalous wireless network activity identified via `Zeek conn.log`."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]