[
  {
    "information_requirement": "Has an adversary disabled or degraded critical protective functions? (TA0105 - Impact)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0837",
        "name": "Loss of Protection",
        "evidence": [
          {
            "description": "An industrial control command known to affect safety systems (e.g., 'Stop CPU', 'Program/Logic Download', 'Key Switch/Mode Change') targets a Safety Instrumented System (SIS) controller, and the action meets at least one of the following criteria: the source IP is not on an approved Engineering Workstation (EWS) whitelist; the associated user account is not authorized for SIS modification; or the command occurs outside a documented maintenance window.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek dnp3.log",
              "Zeek bacnet.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIS network segments (Level 0/1), Engineering Workstation (EWS) network segment (Level 2/3), Process Control Network (PCN) segments where EWS communicate with SIS devices, Active Directory Domain Controllers",
            "action": "1. Symbolic Logic: Create and maintain watchlists of critical SIS controller IPs and approved EWS IPs. Monitor industrial protocol logs (e.g., Zeek s7comm.log, modbus.log) for safety-impacting commands ('Stop CPU', 'Program/Logic Download') targeting an SIS IP. For each match, verify the source IP is on the EWS whitelist. If the source is not whitelisted, generate a high-severity alert. Correlate the source IP and timestamp with Windows Event ID 4624 on the EWS to identify the user; if the user is not in an authorized SIS engineer group, escalate alert severity.\n2. Statistical Method: For each SIS controller, establish a 60-day baseline of logic download events from industrial protocol logs, recording frequency (downloads per hour) and file size (bytes). Calculate the mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) for both metrics. Generate a medium-severity alert if a new download's size exceeds $$ \\mu + 3\\sigma $$. Generate a high-severity alert if the hourly download frequency for a controller exceeds its $$ \\mu + 3\\sigma $$ threshold. If a download's checksum changes outside a scheduled maintenance window, generate a critical alert.\n3. Machine Learning: Develop an unsupervised anomaly detection model (e.g., Isolation Forest) using 90+ days of industrial protocol logs. Engineer features for each 5-minute window per SIS controller, including: count of total commands, count of distinct command types, ratio of critical-to-non-critical commands, and entropy of source IPs. Train the model to learn the normal range of these feature combinations. In production, feed new data through the model to generate an anomaly score. Generate an alert when the score exceeds the 99th percentile of scores from the training data, indicating a significant deviation from the established operational profile."
          },
          {
            "description": "A write command is observed in industrial protocol logs (e.g., OPC-UA, Modbus, S7comm) or HMI audit logs that modifies a critical alarm setpoint, deadband, or inhibit flag. The command originates from an unauthorized source IP or user account, or its value changes the parameter to a less safe state, such as increasing a high-pressure trip point.",
            "data_sources": [
              "Zeek opc-ua.log",
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "HMI application audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI network segment (Level 2), EWS network segment (Level 2/3), Process Control Network (PCN) segments (Level 1/2), Data Historian servers",
            "action": "1. Symbolic Logic: Maintain a lookup table of critical alarm tags/registers and their defined safe value ranges. Monitor industrial protocol write commands and HMI audit logs for modifications to these tags. Generate a high-severity alert if a write command modifies a critical tag and originates from an IP or user account not on the authorized list. Generate a critical alert if a write command changes a tag's value to a state outside its defined safe range, regardless of the source.\n2. Statistical Method: For each HMI and user account, establish a 30-day baseline for the hourly rate of alarm management actions (setpoint changes, inhibitions) from HMI audit and protocol logs. Calculate the mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) for this rate. Generate a medium-severity alert if the current hourly rate for any user or HMI exceeds its historical $$ \\mu + 3\\sigma $$. Escalate alert severity if multiple distinct critical alarms are modified within a 5-minute window.\n3. Machine Learning: Train a supervised classification model (e.g., Random Forest) using historical alarm modification data labeled as 'benign' or 'malicious'. Engineer features for each event, including source IP, user, tag modified, previous value, new value, and time of day. In production, classify each new alarm modification event in real-time. Generate a high-confidence alert for any event classified as 'malicious', providing the model's feature importance as context for the analyst."
          },
          {
            "description": "A critical protective device, such as a Safety PLC or protective relay, stops sending expected network traffic (e.g., heartbeat messages, status polls) for a duration that exceeds a pre-defined tolerance. This is observed as a lack of relevant entries in network flow (Zeek conn.log) or industrial protocol logs.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "ICMP logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Level 0/1 field device network segments, Level 2 SCADA/DCS network segments, Substation network segments, Process Control Network (PCN) segments",
            "action": "1. Symbolic Logic: Create and maintain a watchlist of all critical protective device IPs, their expected communication protocols, and their normal heartbeat interval (e.g., 10 seconds). For each device, run a continuous query checking for recent communication in logs like Zeek conn.log. If no logs from or to the device's IP are seen for a period of 2x its normal interval, generate a critical 'Device Unresponsive' alert.\n2. Statistical Method: For each critical protective device, use 30 days of Zeek conn.log data to establish a baseline for its communication volume (bytes per minute) and connection frequency (connections per minute). Calculate the 5th percentile for both metrics to define a minimum expected communication threshold. Generate a medium-severity alert if either the byte volume or connection frequency drops below its 5th percentile threshold for three consecutive minutes.\n3. Machine Learning: For each critical device, develop a time series forecasting model (e.g., Prophet) trained on 90+ days of historical connection counts per minute from Zeek conn.log to learn its normal communication patterns. In production, forecast the expected connection count for the next 5-minute interval, including a 95% confidence interval. If the actual count falls below the lower bound of the confidence interval for two or more consecutive intervals, generate a high-severity alert for an anomalous communication disruption."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]