[
  {
    "information_requirement": "Has an adversary disabled or degraded critical protective functions? (TA0105 - Impact)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0837",
        "name": "Loss of Protection",
        "evidence": [
          {
            "description": "Successful execution of specific industrial control commands (e.g., 'Stop CPU', 'Program/Logic Download', 'Key Switch/Mode Change', 'Force Output', 'Write to Protected Register') targeting Safety Instrumented System (SIS) controllers, where the source IP address is not on an approved whitelist for SIS operations, the user account associated with the command (if available) is not authorized for SIS modifications per an access control list, or the command execution timestamp falls outside of documented maintenance windows for SIS changes as recorded in a Configuration Management Database (CMDB). This indicates an unauthorized attempt to disable or alter critical protective logic.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek dnp3.log",
              "Zeek bacnet.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 4656",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIS network segments (Level 0/1), Engineering Workstation (EWS) network segment (Level 2/3), Process Control Network (PCN) segments where EWS communicate with SIS devices, Active Directory Domain Controllers (for authentication data)",
            "action": "1. Symbolic Logic (Unauthorized SIS Command): From Zeek industrial protocol logs (s7comm.log, modbus.log, enip.log, dnp3.log, bacnet.log), identify events where the 'command' field matches a known SIS-impacting operation (e.g., 'Stop CPU', 'Program/Logic Download', 'Key Switch/Mode Change', 'Force Output', 'Write to Protected Register') and the 'destination_ip' is a whitelisted SIS controller. Correlate these events with 'Windows Event ID 4624' (successful login) and 'Windows Event ID 4688' (process creation, specifically for engineering software like Siemens TIA Portal, Rockwell Studio 5000, etc.) on known Engineering Workstations (EWS) within a 5-minute window prior to the industrial command. Generate a high-priority alert if the 'source_ip' of the industrial command is not a whitelisted EWS, or if the 'user_account' associated with the correlated Windows events is not authorized for SIS modifications per an access control list (ACL).\n2. Statistical Method (Anomalous Logic Download): For each unique SIS controller ('destination_ip') identified from Zeek industrial protocol logs (s7comm.log, enip.log), establish a 60-day rolling baseline for the 'frequency' of 'Program/Logic Download' commands (e.g., counts per hour) and the 'size' of each download (bytes). Calculate the mean (\u03bc) and standard deviation (\u03c3) for these metrics. Additionally, track the 'checksum' of the downloaded logic (if available in logs or via external configuration management). Generate an alert if a 'Program/Logic Download' command is observed where: a) the 'frequency' for that controller exceeds (\u03bc + 3\u03c3) or falls below (\u03bc - 3\u03c3) within a 1-hour window, OR b) the 'size' of the download deviates by more than 3 standard deviations from the baseline, OR c) the 'checksum' of the downloaded logic changes and this event occurs outside of documented SIS maintenance windows (stored in a lookup table or CMDB). The alert severity should increase if multiple criteria are met simultaneously.\n3. Machine Learning (Command Anomaly): Develop a multivariate time series anomaly detection model (e.g., Isolation Forest or One-Class SVM) using 90 days of historical Zeek industrial protocol logs (s7comm.log, modbus.log, enip.log, dnp3.log, bacnet.log). Extract features such as: 'command_frequency' (per minute, per SIS device), 'unique_command_types' (count of distinct commands), 'proportion_of_critical_commands' (e.g., 'Stop CPU', 'Force Output' relative to total commands), and 'source_destination_pair_frequency'. Train the model to establish a normal operational profile. Continuously feed new log data into the trained model. Generate an alert when the anomaly score for a given time window (e.g., 5-minute interval) exceeds a dynamically calculated threshold (e.g., 99th percentile of historical anomaly scores), indicating a statistically significant deviation from normal SIS command patterns."
          }
        ]
      },
      {
        "technique_id": "T0837",
        "name": "Loss of Protection",
        "evidence": [
          {
            "description": "Detection of specific industrial protocol write commands or entries in HMI application audit logs that modify critical alarm setpoints (e.g., increasing trip thresholds, widening deadbands) or inhibit critical alarms, originating from an unauthorized Human-Machine Interface (HMI) or Engineering Workstation (EWS) source IP, or executed by an unauthorized user account. This indicates an attempt to suppress alerts or bypass safety limits, potentially degrading process safety.",
            "data_sources": [
              "Zeek opc-ua.log",
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "HMI application audit logs",
              "Data Historian logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI network segment (Level 2), EWS network segment (Level 2/3), Process Control Network (PCN) segments (Level 1/2), Data Historian servers",
            "action": "1. Symbolic Logic (Unauthorized Alarm Modification): From Zeek industrial protocol logs (opc-ua.log, modbus.log, s7comm.log, dnp3.log), identify write commands (e.g., 'opc_ua.request_type: Write', 'modbus.function_code: Write Multiple Registers', 's7comm.function_code: Write Variable') where the 'destination_tag' or 'memory_address' corresponds to a known critical alarm setpoint or inhibition flag (pre-defined in a CMDB or lookup table). Correlate these write events with 'Windows Event ID 4624' (successful login) and 'Windows Event ID 4688' (process creation for HMI/SCADA software) on the 'source_ip' (HMI/EWS). Generate a high-priority alert if: a) the 'source_ip' is not a whitelisted HMI/EWS, OR b) the 'user_account' is not authorized for alarm modifications, OR c) the 'timestamp' of the write command falls outside documented operational hours or scheduled maintenance windows for alarm system changes.\n2. Statistical Method (Surge in Alarm Management Actions): For each HMI/EWS device ('source_ip') and unique user account (from 'Windows Event ID 4624' correlated with Zeek logs), establish a 30-day rolling baseline for the 'hourly rate' of 'alarm inhibition' and 'setpoint modification' events (identified from Zeek industrial protocol logs and HMI application audit logs). Calculate the mean (\u03bc) and standard deviation (\u03c3) for this hourly rate. Continuously monitor the current hourly rate. Generate an alert if the current 'hourly rate' for any device or user exceeds (\u03bc + 3\u03c3) of its historical baseline, indicating a statistically significant and sudden increase in alarm management actions. Prioritize alerts where multiple distinct alarms are inhibited or modified within a short timeframe (e.g., 5 minutes).\n3. Machine Learning (Predictive Alarm Tampering): Develop a supervised machine learning classification model (e.g., Random Forest or Gradient Boosting Classifier) trained on 180 days of historical Zeek industrial protocol write commands (opc-ua.log, modbus.log, s7comm.log, dnp3.log) and HMI application audit logs. Label historical data as 'normal' or 'anomalous' based on known incidents, maintenance, or validated security events. Extract features for the model including: 'source_ip', 'destination_ip', 'command_type', 'tag_or_register_modified', 'value_written' (e.g., new setpoint value, inhibition status), 'day_of_week', 'hour_of_day', and 'user_account'. Continuously feed new write commands into the trained model. Generate a high-confidence alert for any command classified as 'anomalous' by the model, especially when 'value_written' corresponds to a non-protective state or 'tag_or_register_modified' is a critical alarm parameter."
          }
        ]
      },
      {
        "technique_id": "T0837",
        "name": "Loss of Protection",
        "evidence": [
          {
            "description": "Detection of a sudden and sustained cessation or significant degradation of expected network communication (e.g., polling requests, heartbeat messages, status updates, process variable telemetry) from identified critical Safety Instrumented System (SIS) field devices, protective relays, or safety interlocks. This is observed in network flow logs (Zeek conn.log) and industrial protocol logs, indicating a potential physical disablement, bypass, or network disruption impacting safety functions.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "ICMP logs",
              "Firewall logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Level 0/1 field device network segments (e.g., for safety interlocks, sensors), Level 2 SCADA/DCS network segments (for protective relays, circuit breakers), Substation network segments (for IEDs), DMZ/Perimeter firewalls",
            "action": "1. Symbolic Logic (Loss of Critical Device Communication): Maintain a CMDB or lookup table containing 'device_ip', 'device_type' (e.g., protective relay, safety PLC, safety interlock), 'expected_protocol' (e.g., DNP3, Modbus/TCP, S7comm), and 'normal_heartbeat_interval' (e.g., 10 seconds, 60 seconds) for all critical protective devices. For each device, create a continuous monitoring rule in the SIEM. If 'Zeek conn.log' entries with 'id.orig_h' or 'id.resp_h' matching the 'device_ip' (and 'service' matching 'expected_protocol'), or specific industrial protocol logs (dnp3.log, modbus.log, s7comm.log) associated with the device, are not observed for a duration exceeding 'normal_heartbeat_interval' plus a defined tolerance (e.g., 'normal_heartbeat_interval * 2'), generate a critical alert. This indicates a complete cessation of expected communication.\n2. Statistical Method (Degraded Communication Volume/Frequency): For each critical protective device ('device_ip'), establish a 30-day rolling baseline for its 'average bytes per minute' and 'average connections per minute' using 'Zeek conn.log' (filtered by 'id.orig_h' or 'id.resp_h' and 'service'). Calculate the 5th percentile for both metrics over the baseline period. Continuously monitor current 'bytes per minute' and 'connections per minute'. Generate an alert if either the current 'bytes per minute' or 'connections per minute' drops below the established 5th percentile for that device for a sustained period (e.g., 5 consecutive minutes). This indicates a significant degradation in communication volume or frequency, potentially preceding a full loss.\n3. Machine Learning (Predictive Communication Disruption): For each critical protective device ('device_ip'), develop a time series forecasting model (e.g., ARIMA, Prophet, or LSTM) using 90 days of historical 'Zeek conn.log' data to predict the 'expected connection count per 5-minute interval'. The model should learn daily, weekly, and seasonal patterns. Continuously compare the actual 'connection count' from 'Zeek conn.log' against the model's predicted range, including a defined prediction interval (e.g., 95% confidence interval). Generate an alert if the actual 'connection count' falls below the lower bound of the prediction interval for two or more consecutive 5-minute intervals, indicating an unexpected and sustained communication disruption that deviates significantly from learned normal patterns."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]