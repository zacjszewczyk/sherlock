[
  {
    "information_requirement": "Is an adversary using a rootkit to hide their presence on ICS assets? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0851",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A quantitative mismatch between established network connections (as observed in Zeek conn.log) originating from an ICS host and the reported active processes or network connections on that same host (as observed in Windows Event ID 4688 for process creation and Windows Event ID 5156 for network filtering platform events), where the network connection lacks a corresponding host-reported process or connection within a defined time window.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Data Gateways/Firewalls segmenting OT networks",
            "action": "1. **Symbolic Logic:** Identify any external connections in Zeek conn.log (e.g., `id.orig_h` internal, `id.resp_h` external, `id.resp_p` on common internet ports) from an ICS asset that have no corresponding `ProcessId` in Windows Event ID 4688 (process creation) or matching `Source Port`/`Destination Port` in Windows Event ID 5156 (network connection) on that same host within a 5-second timestamp window. 2. **Statistical Method:** Calculate a daily baseline of this 'unattributed traffic' volume (e.g., total bytes or connection count) for each critical ICS asset using a 30-day rolling window. Generate a medium-priority alert if the volume of unattributed traffic for an asset exceeds the 99th percentile of its established baseline for three consecutive 15-minute intervals. 3. **Machine Learning:** Implement a time-series anomaly detection model (e.g., Isolation Forest or LSTM autoencoder) on the 'unattributed traffic' volume for each critical asset. Train the model on historical data to learn normal patterns. An alert is triggered when the model detects a significant deviation from predicted normal behavior, indicating a sustained increase in hidden network activity."
          },
          {
            "description": "Detection of a new Windows service installation (Windows Event ID 7045) or an unauthorized modification to an existing service's start type or binary path (Windows Event ID 7040) on a critical ICS asset, not correlated with an approved change management record.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 7040"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers",
            "action": "1. **Symbolic Logic:** Maintain an inventory of approved services, their `Service Name`, `Service File Name`, and `Start Type` for all critical Windows-based ICS assets. When Windows Event ID 7045 (Service installed) or 7040 (Service start type changed) is observed, compare the `Service Name` and `Service File Name` (from 7045) or `Start Type` (from 7040) against the approved baseline. Any new service or modification not present in the baseline triggers an immediate high-priority alert. 2. **Statistical Method:** Monitor the frequency of service installation (Event ID 7045) and modification (Event ID 7040) events across all ICS assets. Calculate the daily average and standard deviation for these event types. An alert is generated if the number of such events for a single asset or across a group of similar assets exceeds three standard deviations above the 30-day rolling average, indicating a statistically unusual volume of service changes. 3. **Machine Learning:** Develop a classification model (e.g., Random Forest) trained on historical service events, categorizing them as 'authorized' or 'unauthorized' based on correlation with change management records or known good configurations. For new events, extract features like `Service Name`, `Service File Name`, `Account Name`, and `Start Type`. The model predicts the likelihood of an event being unauthorized. High-confidence 'unauthorized' predictions trigger an alert for analyst review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary using a rootkit to inhibit the response function of an ICS device? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0851",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A statistically significant and sustained increase in failed TCP connection states (e.g., 'REJ', 'RSTO', 'RSTR' in Zeek conn.log) or other error states for ICS protocols, observed specifically between critical supervisory control hosts (e.g., HMIs, SCADA servers) and their managed field devices (e.g., PLCs, RTUs).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN)",
            "action": "1. **Symbolic Logic:** Filter Zeek conn.log for traffic on known ICS protocol ports (e.g., 502/TCP, 20000/TCP, 44818/TCP) where `id.orig_h` is an HMI/SCADA server and `id.resp_h` is a PLC/RTU. Identify connections where the `conn_state` field is 'REJ', 'RSTO', or 'RSTR'. Log these events as 'failed ICS connections' for further analysis. 2. **Statistical Method:** For each unique HMI-to-PLC communication pair, establish a 7-day rolling baseline of the average hourly count and standard deviation of 'failed ICS connections'. Monitor for 15-minute intervals where the count of failed connections exceeds the 99th percentile of its baseline for that specific pair, triggering a medium-priority alert. A sustained exceedance over a 1-hour window (e.g., 4 consecutive 15-min alerts) escalates to high-priority. 3. **Machine Learning:** Apply a clustering algorithm (e.g., K-means, DBSCAN) to the `conn_state` field and other relevant Zeek conn.log fields (e.g., `duration`, `orig_bytes`, `resp_bytes`) for ICS protocol traffic. Train the model to identify 'normal' and 'anomalous' connection clusters. A sudden shift in the distribution of connection states towards an 'anomalous' cluster, particularly those characterized by high `REJ`/`RSTO`/`RSTR` counts, triggers an alert, indicating a potential change in device responsiveness."
          },
          {
            "description": "Repeated occurrences of critical HMI or SCADA application crashes (Windows Event ID 1000, 1001) on operator workstations, specifically after initiating or receiving communications with a particular field device (identified via Zeek conn.log correlation), suggesting potential malformed data transmission or corrupted device responses.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1001",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations",
            "action": "1. **Symbolic Logic:** On HMI/operator workstations, monitor for Windows Event ID 1000 (Application Error) or 1001 (Application Crashing Events) where the 'Faulting application name' matches known HMI/SCADA software executables (e.g., `scada_app.exe`, `hmi_client.exe`). For each detected crash, extract the `TimeCreated` and `Computer` fields. Correlate this timestamp (e.g., +/- 10 seconds) with Zeek conn.log entries from the `Computer`'s IP address, specifically looking for recent communications with field devices (PLCs/RTUs) on ICS ports. 2. **Statistical Method:** For each HMI workstation and for each unique field device it communicates with, calculate a 30-day rolling average and standard deviation of associated HMI application crashes. An alert is generated if the number of crashes linked to a specific field device from a single HMI exceeds the 95th percentile of its historical average within a 1-hour window, indicating a statistically abnormal frequency of crashes related to that device. 3. **Machine Learning:** Employ a supervised machine learning model (e.g., Support Vector Machine or Gradient Boosting) to classify HMI application crashes as 'normal' or 'anomalous'. Features for the model could include: `Faulting application name`, `Faulting module name`, `Exception Code`, and the `id.resp_h` (field device IP) from correlated Zeek logs. Train the model on historical crash data, labeling known legitimate crashes (e.g., software bugs, expected restarts) as 'normal' and unknown or unusual patterns as 'anomalous'. An alert is triggered for high-confidence 'anomalous' classifications, especially if linked to specific field devices."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]