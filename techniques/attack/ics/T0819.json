[
  {
    "information_requirement": "Is an adversary attempting to exploit our public-facing ICS applications for initial access? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0819",
        "name": "Exploit Public-Facing Application",
        "evidence": [
          {
            "description": "A sudden and statistically significant increase (e.g., >2 standard deviations from the 7-day average) in inbound connection attempts or data volume to a public-facing ICS application (e.g., Historian, Web HMI) from an unapproved geographic region, a known malicious IP/ASN, or a source IP exhibiting multiple failed authentication attempts immediately followed by a successful authentication.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network DMZ segment hosting public-facing ICS applications (e.g., Historians, Web HMIs, Remote Access Gateways, OPC UA Servers)",
            "action": "1. **Symbolic Logic (IOC Match):** Search Zeek `http.log` `uri`, `request_body`, and `user_agent` fields for known exploit strings (e.g., SQL injection patterns, command injection payloads, web shell indicators) using pre-defined regular expressions or Yara rules. Concurrently, cross-reference source IPs from Zeek `conn.log` against up-to-date threat intelligence feeds for known malicious IPs, ASNs, or TOR exit nodes. Generate an alert for any matches.\n2. **Statistical Method (Percentile Threshold/Baseline):** For each public-facing ICS application, establish a 7-day moving average and standard deviation for inbound connection count and total bytes (from Zeek `conn.log`) per source IP and destination port. Set a threshold to alert if any source IP's connection count or total bytes exceeds the mean by 3 standard deviations within a 15-minute window. Additionally, identify and alert on connection attempts from a geographic region (using MaxMind GeoIP data on `id.orig_h` in `conn.log`) not observed in the preceding 30 days or not part of an approved whitelist.\n3. **Machine Learning Application (Classification/Anomaly Detection):** Apply a clustering algorithm (e.g., DBSCAN or K-means) to Zeek `conn.log` entries targeting ICS applications, utilizing features such as `orig_bytes`, `resp_bytes`, `duration`, `orig_pkts`, and `resp_pkts` to identify anomalous connection clusters that deviate significantly from established normal communication patterns. Train a binary classifier (e.g., Random Forest) on historical Zeek `http.log` data to detect anomalous HTTP requests based on `uri_len`, `param_count`, `method`, and entropy of `request_body`, flagging requests with a high probability of being exploit attempts. Correlate high-scoring anomalies with Zeek `notice.log` for events like 'Scan::Address_Scan' to prioritize suspicious sources for investigation."
          },
          {
            "description": "A process associated with a public-facing ICS application (e.g., `historian.exe`, `hmi_web_server.exe`) creates a child process that is not part of its normal operational whitelist, particularly within 5 minutes of an inbound network connection from an external IP, with the child process being an interactive shell (e.g., `powershell.exe`, `cmd.exe`), a reconnaissance utility (e.g., `whoami.exe`, `ipconfig.exe`, `net.exe`), or a known malware payload.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing ICS application servers (e.g., Windows-based HMI servers, data historians, engineering workstations in DMZ)",
            "action": "1. **Symbolic Logic (IOC Match/Whitelist):** Define and maintain a strict whitelist of legitimate child processes for each public-facing ICS application process (e.g., `historian.exe` is allowed to spawn `logger.exe` but not `powershell.exe`). Generate an immediate alert if `Windows Event ID 4688` records an ICS application process as `ParentProcessName` and a non-whitelisted executable (e.g., `powershell.exe`, `cmd.exe`, `bitsadmin.exe`, `certutil.exe`, `net.exe`, `whoami.exe`) as `NewProcessName`. Prioritize alerts where this process creation is correlated with an inbound Zeek `conn.log` entry from an external IP to the server's public-facing port within a 5-minute window.\n2. **Statistical Method (Entropy/Baseline):** For each public-facing ICS application, calculate the Shannon entropy of `NewProcessName` values (from `Windows Event ID 4688`) within rolling 1-hour windows. Establish a 30-day baseline for this entropy score. Generate an alert if the current entropy score deviates by more than 2 standard deviations from the historical mean, indicating a sudden increase in diverse or unusual process creations, especially when correlated with an inbound network connection (from Zeek `conn.log`) to that application within the same window.\n3. **Machine Learning Application (Behavioral Anomaly Detection):** Train a behavioral anomaly detection model (e.g., Isolation Forest or One-Class SVM) on historical `Windows Event ID 4688` data from public-facing ICS application servers, using features such as `ParentProcessName`, `NewProcessName`, `CommandLine`, `ProcessId`, and `ParentProcessId`. The model should learn normal process execution patterns. Flag new process creations by ICS applications that are scored as anomalous by the model, particularly when preceded by suspicious network activity identified from Zeek `conn.log` within a short time frame (e.g., 5 minutes)."
          },
          {
            "description": "A public-facing ICS application server establishes an outbound network connection to an internal ICS network segment (e.g., Level 1/0, Process Control Network) that is not part of its established operational baseline, particularly using protocols like SMB, RDP, or proprietary ICS protocols, or targeting high-value assets such as PLCs, RTUs, or engineering workstations.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary between the IT/DMZ and the OT/ICS network, Internal ICS network segments (e.g., Process Control Network, Safety Instrumented System Network, Level 1/0 Control Network)",
            "action": "1. **Symbolic Logic (Whitelist/Blacklist):** Maintain a strict whitelist of allowed outbound connections from public-facing ICS application servers to internal ICS network segments, specifying source IP, destination IP, destination port, and protocol (from Zeek `conn.log`). Generate an immediate alert for any connection from a public-facing ICS server attempting to egress the DMZ and enter the ICS network that is not explicitly whitelisted, particularly if the destination port corresponds to common remote access or file transfer protocols (e.g., 3389/RDP, 445/SMB, 22/SSH, 502/Modbus, 102/S7COMM) or known ICS protocols. Investigate all alerts.\n2. **Statistical Method (Jaccard Index/Threshold):** For each public-facing ICS application server, establish a 30-day baseline of unique destination IPs and ports contacted within the internal ICS network, derived from Zeek `conn.log`. Calculate the Jaccard index (or a similar similarity metric) comparing current-day connections against this baseline. Generate an alert if the similarity score drops below a predefined threshold (e.g., 0.5), indicating a significant deviation from normal internal communication patterns. Additionally, monitor for a sudden increase (e.g., >3 standard deviations from the 7-day average) in the number of internal hosts contacted by the ICS application server within a 1-hour window, and alert on such deviations.\n3. **Machine Learning Application (Graph-based Anomaly Detection):** Utilize a graph-based anomaly detection model on Zeek `conn.log` data, where nodes represent hosts and edges represent network connections. Train the model on historical ICS network traffic to learn and characterize normal communication patterns between public-facing ICS servers and internal ICS hosts. Flag new connections or changes in connection topology (e.g., a public-facing server initiating a connection to a previously uncontacted PLC or RTU) that are identified as anomalous by the model, as these may indicate potential lateral movement or network reconnaissance."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]