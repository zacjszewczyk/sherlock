[
  {
    "information_requirement": "Is an adversary attempting to exploit our public-facing ICS applications for initial access? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0819",
        "name": "Exploit Public-Facing Application",
        "evidence": [
          {
            "description": "Observable network traffic patterns indicating an attempted or successful exploit: 1) A significant increase (e.g., 3 standard deviations above the 30-day moving average within a 15-minute window) in inbound connection attempts or total bytes to a public-facing ICS application port (e.g., 80/TCP, 443/TCP, 4840/TCP for OPC UA). 2) Inbound connections from a source IP/ASN identified on a threat intelligence blacklist, or originating from an unexpected geographic region (e.g., not observed in the last 90 days or outside approved countries). 3) Multiple failed authentication attempts (e.g., >5 attempts within 60 seconds from a single source IP targeting a web login form or application API) immediately followed by a successful authentication event from the same source IP to the ICS application.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek notice.log",
              "Windows Event ID 4624",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network DMZ segment hosting public-facing ICS applications (e.g., Historians, Web HMIs, Remote Access Gateways, OPC UA Servers, SCADA Servers, ICS API Gateways)",
            "action": "1. Symbolic Logic (IOC Match & Correlation): Search Zeek http.log uri, request_body, and user_agent fields for known web exploit signatures (e.g., SQL injection, command injection, path traversal, web shell indicators) using pre-defined regular expressions or Yara rules. Concurrently, cross-reference source IPs from Zeek conn.log against up-to-date threat intelligence feeds for known malicious IPs, ASNs, or TOR exit nodes. Additionally, correlate Windows Event ID 4625 (failed logins) for the public-facing application's service account or local accounts with subsequent Windows Event ID 4624 (successful login) from the same source IP within a 5-minute window. Generate an alert for any matches.\n2. Statistical Method (Baseline & Percentile Threshold): For each public-facing ICS application's destination IP and port, establish a 30-day moving average and standard deviation for inbound connection count and total bytes (from Zeek conn.log) per source IP. Set a threshold to alert if any source IP's connection count or total bytes exceeds the mean by 3 standard deviations within a 15-minute window, or if it falls into the top 99th percentile of all source IPs for that period. Additionally, enrich Zeek conn.log id.orig_h with geolocation data (e.g., MaxMind GeoIP) and alert on connections originating from countries or ASNs not observed in the preceding 90 days or not on an approved whitelist, particularly if the connection count exceeds the 75th percentile for that destination port.\n3. Machine Learning Application (Anomaly Detection & Classification): Apply a clustering algorithm (e.g., DBSCAN) to Zeek conn.log entries targeting ICS applications, utilizing features such as orig_bytes, resp_bytes, duration, orig_pkts, resp_pkts, and proto to identify anomalous connection clusters that deviate significantly from established normal communication patterns. Train a binary classifier (e.g., Isolation Forest, SVM) on historical Zeek http.log data to detect anomalous HTTP requests based on uri_len, param_count, method (e.g., unexpected HTTP verb), status_code (e.g., 400s/500s bursts), and Shannon entropy of request_body or user_agent string. Flag requests with a high anomaly score, especially when correlated with Zeek notice.log events indicating suspicious activity like 'Scan::Address_Scan' or 'HTTP::Unusual_User_Agent'."
          },
          {
            "description": "An unauthorized or anomalous child process is spawned by a public-facing ICS application process on a DMZ server. This includes: 1) A child process identified as an interactive shell (powershell.exe, cmd.exe, sh.exe, bash.exe), a data transfer utility (bitsadmin.exe, certutil.exe, wget.exe, curl.exe), a reconnaissance tool (whoami.exe, ipconfig.exe, net.exe, systeminfo.exe), or a known malware payload (based on hash or signature), where the parent process is a legitimate ICS application (e.g., HistorianService.exe, WebHMI.exe, OPCUA_Server.exe). 2) This process creation event is not part of the ICS application's established operational process whitelist. 3) The process creation occurs within 300 seconds of an inbound network connection (Zeek conn.log) to the server from an external IP address, especially if that connection involved suspicious HTTP requests (Zeek http.log) or showed signs of exploitation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing ICS application servers (e.g., Windows-based HMI servers, data historians, engineering workstations in DMZ, Linux-based web servers for ICS applications)",
            "action": "1. Symbolic Logic (Whitelist & Correlation): Maintain a strict whitelist of legitimate child processes for each public-facing ICS application process (e.g., HistorianService.exe is allowed to spawn logger.exe but not powershell.exe). Generate an immediate alert if Windows Event ID 4688 records an ICS application process as ParentProcessName and a non-whitelisted executable (e.g., powershell.exe, cmd.exe, bitsadmin.exe, certutil.exe, net.exe, whoami.exe, wmic.exe, tasklist.exe) as NewProcessName or CommandLine contains suspicious strings (e.g., base64 encoded commands, download/execute patterns). Prioritize alerts where this process creation is correlated with an inbound Zeek conn.log entry from an external IP to the server's public-facing port within a 5-minute window, especially if the conn.log or http.log indicates suspicious activity (e.g., high orig_bytes from external source, HTTP POST requests to unusual URIs).\n2. Statistical Method (Entropy & Frequency Analysis): For each public-facing ICS application server, calculate the Shannon entropy of NewProcessName and CommandLine values (from Windows Event ID 4688) within rolling 1-hour windows. Establish a 30-day baseline for these entropy scores. Generate an alert if the current entropy score for either metric deviates by more than 2 standard deviations from the historical mean, indicating a sudden increase in diverse or unusual process creations or command line arguments. Additionally, monitor for processes with NewProcessName or CommandLine arguments that appear for the first time or exceed the 99th percentile of their historical frequency, especially when correlated with an inbound network connection (from Zeek conn.log) to that application within the same window.\n3. Machine Learning Application (Behavioral Anomaly Detection): Train a behavioral anomaly detection model (e.g., Isolation Forest or One-Class SVM) on historical Windows Event ID 4688 data from public-facing ICS application servers, using features such as ParentProcessName, NewProcessName, CommandLine (hashed or vectorized), ProcessId, ParentProcessId, and User. The model should learn normal process execution patterns for each ICS application. Flag new process creations by ICS applications that are scored as anomalous by the model, particularly when preceded by suspicious network activity (e.g., high volume, unusual ports/protocols, exploit patterns) identified from Zeek conn.log and http.log within a short time frame (e.g., 5 minutes)."
          },
          {
            "description": "Unauthorized outbound network connections from a public-facing ICS application server in the DMZ to internal ICS network segments. This includes: 1) Connections to destination IPs or ports within the internal ICS network (e.g., Process Control Network, Safety Instrumented System Network, Level 1/0 Control Network) that are not part of the server's explicitly defined and whitelisted outbound communication profile. 2) Communication using protocols typically associated with lateral movement, remote access, or ICS-specific protocols (e.g., SMB 445/TCP, RDP 3389/TCP, SSH 22/TCP, Modbus TCP 502/TCP, S7COMM 102/TCP, EtherNet/IP 44818/TCP) when these protocols are not legitimately required for the application's function. 3) Connections targeting critical ICS assets such as PLCs, RTUs, Engineering Workstations, or SCADA servers that the public-facing application server should not directly communicate with.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary between the IT/DMZ and the OT/ICS network, Internal ICS network segments (e.g., Process Control Network, Safety Instrumented System Network, Level 1/0 Control Network, Historian Network, Engineering Workstation Network)",
            "action": "1. Symbolic Logic (Whitelist & Blacklist): Maintain a strict whitelist of allowed outbound connections from public-facing ICS application servers to internal ICS network segments, specifying source IP, destination IP, destination port, and protocol (from Zeek conn.log). Generate an immediate alert for any connection from a public-facing ICS server attempting to egress the DMZ and enter the ICS network that is not explicitly whitelisted. Prioritize alerts if the destination port corresponds to common remote access (e.g., 3389/RDP, 22/SSH), file transfer (e.g., 445/SMB, 21/FTP), or known ICS protocols (e.g., 502/Modbus, 102/S7COMM, 44818/EtherNet/IP) and the destination IP is within a known critical ICS segment. Additionally, monitor Zeek dns.log for outbound DNS queries from public-facing ICS servers resolving to internal, non-whitelisted ICS hostnames, or known command-and-control domains.\n2. Statistical Method (Jaccard Index & Entropy): For each public-facing ICS application server, establish a 30-day baseline of unique destination IPs, ports, and protocols contacted within the internal ICS network, derived from Zeek conn.log. Calculate the Jaccard index comparing current-day connections against this baseline for a rolling 1-hour window. Generate an alert if the similarity score drops below a predefined threshold (e.g., 0.6), indicating a significant deviation from normal internal communication patterns. Additionally, calculate the Shannon entropy of destination ports accessed by the ICS application server within the internal network. Alert if the entropy score exceeds the 95th percentile of its 30-day historical distribution, suggesting an unusual diversification of ports being accessed, potentially indicative of port scanning or reconnaissance.\n3. Machine Learning Application (Graph-based Anomaly Detection): Utilize a graph-based anomaly detection model (e.g., using Graph Neural Networks or statistical graph metrics) on Zeek conn.log data, where nodes represent hosts (public-facing ICS servers, internal ICS assets) and edges represent network connections (weighted by orig_bytes, resp_bytes, duration). Train the model on historical ICS network traffic to learn and characterize normal communication patterns between public-facing ICS servers and internal ICS hosts. Flag new connections or changes in connection topology (e.g., a public-facing server initiating a connection to a previously uncontacted PLC, RTU, or Engineering Workstation, or an unusual burst of connections to multiple internal hosts) that are identified as anomalous by the model (e.g., low anomaly score), as these may indicate potential lateral movement, network reconnaissance, or C2."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]