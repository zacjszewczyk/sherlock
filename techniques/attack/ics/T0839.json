[
  {
    "information_requirement": "Is an adversary establishing persistence on control system devices via unauthorized firmware modifications? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0839",
        "name": "Module Firmware",
        "evidence": [
          {
            "description": "Zeek conn.log entries showing service fields matching known firmware update protocols (e.g., 'tftp' on UDP 69, 'ftp' on TCP 21, 'ssh' for SCP/SFTP on TCP 22) where the id.orig_h is not present in the authorized Engineering Workstation (EWS) IP whitelist, OR the connection timestamp falls outside of the defined maintenance schedule. This must be correlated with Zeek files.log indicating a file transfer to an ICS device IP (id.resp_h) with a file_size greater than 0.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) perimeter firewalls, Engineering Workstations (EWS) network segments, network switches connecting PLCs/RTUs.",
            "action": "1. Symbolic Logic: Maintain a whitelist of authorized Engineering Workstation (EWS) IP addresses and a schedule of approved maintenance windows. Create a SIEM rule to alert on Zeek conn.log entries where service matches known firmware protocols (e.g., 'tftp', 'ftp', 'ssh') AND id.orig_h is NOT in the EWS whitelist AND id.resp_h is a known ICS device IP. Additionally, alert if such activity occurs outside of scheduled maintenance windows, cross-referencing with Zeek files.log for evidence of file transfer to the ICS device. 2. Statistical Method: For any identified file transfer via files.log (e.g., mime_type indicating 'application/octet-stream' or 'application/x-executable'), calculate the Shannon entropy of the file_bytes field. Flag transfers where entropy exceeds the 95th percentile of historical legitimate firmware images for that device type, indicating potential obfuscation or encryption. 3. Machine Learning: Develop a time-series anomaly detection model (e.g., Isolation Forest or Prophet) on the frequency and volume of firmware-related network traffic from conn.log to ICS devices. Train the model on historical data to learn normal patterns, including scheduled updates. Flag significant deviations (e.g., 3 standard deviations from the predicted norm) as anomalous, indicating unscheduled or unusual firmware activity."
          },
          {
            "description": "A sudden cessation of expected periodic network communications (e.g., Modbus/TCP, EtherNet/IP heartbeats) from a critical ICS device, identified by a gap exceeding 2x the normal communication interval in Zeek conn.log entries, occurring within 10 minutes of a detected firmware-related file transfer or anomalous connection to that device.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments where critical PLCs and RTUs reside, network taps near critical ICS assets.",
            "action": "1. Symbolic Logic: Establish a rule to correlate conn.log entries indicating a sudden cessation of regular communication from a critical ICS device (e.g., no conn.log activity for a device that normally communicates every 5-10 seconds for 2 consecutive intervals) with files.log entries showing any file transfer to that device within the preceding 10 minutes. 2. Statistical Method: For each critical ICS device, calculate a 7-day rolling average and standard deviation of its conn.log byte volume (sum of orig_bytes + resp_bytes). Alert if the current 5-minute average byte volume drops below 3 standard deviations from the rolling average, indicating a significant communication anomaly. Use descriptive statistics to identify devices with the highest inter-quartile range in connection duration, which may indicate unstable communication. 3. Machine Learning: Train a supervised classification model (e.g., SVM or Gradient Boosting) using historical conn.log data to predict device stability. Features could include orig_bytes, resp_bytes, duration, state, and missed_bytes. Label known communication failures or reboots. The model would then classify real-time device communication patterns to predict potential impending reboots or failures based on unusual communication characteristics."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to impair process control by manipulating module firmware on critical PLCs or RTUs? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0839",
        "name": "Module Firmware",
        "evidence": [
          {
            "description": "Windows Event ID 4688 (Process Creation) records showing the New Process Name field matching known ICS firmware update utility executables (e.g., 'SiemensFirmwareUpdate.exe', 'RockwellFlashUtility.exe') where the Computer field (source hostname) is not present in the authorized EWS hostname whitelist, OR the CommandLine field contains an IP address of an ICS device not typically managed by that specific EWS.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) within the Process Control Network (PCN), management servers with access to the PCN.",
            "action": "1. Symbolic Logic: Maintain a whitelist of authorized EWS hostnames/IPs and a list of known legitimate firmware update utility process names (e.g., 'SiemensFirmwareUpdate.exe', 'RockwellFlashUtility.exe'). Create a SIEM rule to alert on Windows Event ID 4688 where New Process Name matches a whitelisted utility AND Computer (source host) is NOT in the EWS whitelist. Additionally, monitor for specific command-line arguments (e.g., '/target:192.168.1.100') that indicate targeting of critical ICS devices. 2. Statistical Method: Establish a baseline of typical execution frequency and user accounts for each firmware utility on authorized EWS using historical Windows Event ID 4688 data. Use a percentile-based anomaly detection: alert if a firmware utility is executed by a user account that has never or rarely executed it (e.g., below the 5th percentile of historical user execution frequency) or on an EWS that historically shows very low usage of such utilities (e.g., 99th percentile deviation from its own historical average). 3. Machine Learning: Implement a user and entity behavior analytics (UEBA) model (e.g., using clustering or classification) on Windows Event ID 4688 data. Train the model to profile normal process execution behavior for each user and host within the ICS network. Flag execution of firmware utilities by users or on hosts that deviate significantly from their established behavioral profiles as potentially malicious, even if the host is technically an EWS but the behavior is anomalous for that specific user or machine."
          },
          {
            "description": "Zeek conn.log entries for critical ICS devices containing id.orig_h, id.resp_h, id.resp_p, proto, or service tuples that have not been observed within the preceding 30 days of historical baseline data for that specific device, and for which no corresponding change management record exists.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) core network switches, network taps at the PCN boundary and between zones.",
            "action": "1. Symbolic Logic: For each critical ICS device, establish and maintain a strict whitelist of approved (id.orig_h, id.resp_h, id.resp_p, proto, service) tuples based on historical Zeek conn.log data and network architecture documentation. Create a SIEM rule to alert on any conn.log entry where the observed tuple for a critical ICS device does not match an entry in its whitelist. 2. Statistical Method: Continuously monitor Zeek conn.log for each critical ICS device. Calculate the percentage of 'new' connections (those not in the historical baseline) over a 1-hour rolling window. Alert if this percentage exceeds a dynamic threshold (e.g., 95th percentile of historical 'new connection' rates), indicating a sudden surge in novel communication. Additionally, calculate the Shannon entropy of id.resp_p (destination ports) for each device over 1-hour windows; a significant increase (e.g., >2 standard deviations from baseline) could indicate port scanning or novel service usage. 3. Machine Learning: Apply an unsupervised anomaly detection algorithm (e.g., autoencoder or one-class SVM) to Zeek conn.log features (e.g., duration, orig_bytes, resp_bytes, proto, service, id.resp_p) for each critical ICS device. Train the model on historical 'normal' communication patterns. Flag connections with high anomaly scores (e.g., top 1% of scores) as potential indicators of compromised firmware introducing new or malicious network behavior."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]