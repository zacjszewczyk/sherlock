[
  {
    "information_requirement": "Is an adversary exploiting software vulnerabilities in ICS devices to evade security controls? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0820",
        "name": "Exploitation for Evasion",
        "evidence": [
          {
            "description": "Detection of network connections involving ICS devices (e.g., PLCs, RTUs, HMIs) where the protocol is not an approved ICS protocol, the destination port is not standard for the observed protocol, or the connection's byte volume (orig_bytes, resp_bytes) or duration deviates by more than 3 standard deviations from the 30-day baseline for that specific source-destination-port-protocol tuple.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek dce_rpc.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN), Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Network boundary between IT and OT networks, Industrial Demilitarized Zone (IDMZ)",
            "action": "1. Establish a 30-day baseline of normal network communications (source IP, destination IP, destination port, protocol, service, connection duration, orig_bytes, resp_bytes) between EWS/HMIs and field devices (e.g., PLCs, RTUs) using Zeek conn.log. Focus on common ICS protocols (Modbus, S7Comm, EtherNet/IP) and their standard ports. For each unique source-destination-port-protocol tuple, calculate the mean and standard deviation for 'orig_bytes', 'resp_bytes', and 'duration'. 2. Symbolic Logic: Generate high-priority alerts for Zeek conn.log entries showing connections from IPs not whitelisted as EWS/HMI assets to known ICS device engineering ports (e.g., Modbus/TCP 502, S7Comm 102, EtherNet/IP 44818). Additionally, alert on the use of protocols not explicitly whitelisted for ICS communications (e.g., HTTP/S, FTP, SMB) to ICS devices. Cross-reference alerts with Zeek notice.log for signatures of known ICS exploits (e.g., CVE-XXXX-YYYY hits) that might correspond to these anomalous connections. 3. Statistical Method: For each unique source-destination-port-protocol tuple, alert on Zeek conn.log entries where 'orig_bytes', 'resp_bytes', or 'duration' exceed the 99th percentile or deviate by more than 3 standard deviations from their established 30-day baselines. Specifically, flag connections with 'orig_bytes' or 'resp_bytes' exceeding these thresholds, indicating unusually high data volume transfers (e.g., large configuration backups or firmware downloads outside of maintenance windows). Also, flag connections with 'duration' exceeding these thresholds. 4. Machine Learning: Apply a time series anomaly detection model (e.g., Isolation Forest or Prophet) to monitor daily connection counts and aggregated byte volumes (orig_bytes + resp_bytes) for critical ICS devices. Train the model on at least 90 days of historical data. Flag significant deviations (e.g., sudden spikes in connections to a PLC that is typically stable, or sustained high data transfers) from historical patterns as potential exploit attempts or post-exploitation activity for evasion. The model output should include an anomaly score, and alerts should trigger for scores exceeding a predefined threshold (e.g., 0.8). 5. Analyze Zeek dce_rpc.log and rdp.log for anomalous RDP/DCE/SMB activity. Specifically, look for RDP connections to PLCs or RTUs (which are typically not RDP-enabled) or DCE/SMB activity originating from unauthorized sources or destined for ICS devices not typically accessed via these protocols. Correlate these with Zeek conn.log to identify full connection details."
          },
          {
            "description": "Detection of process creation (Windows Event ID 4688) on EWS or HMIs where the executable is unsigned, the execution path is from a temporary or uncommon directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public), the command-line arguments exhibit high Shannon entropy (e.g., exceeding the 99th percentile), or known LOLBins (e.g., powershell.exe, cmd.exe, certutil.exe) are used with suspicious parameters, indicating potential exploit payload execution or post-exploitation activity for evasion.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Jump Servers within the OT network",
            "action": "1. On EWS and HMI systems, monitor for process creation (Windows Event ID 4688). Establish a whitelist of legitimate engineering software, system utilities, their expected execution paths, and typical command-line arguments. For known LOLBins and scripting interpreters (e.g., powershell.exe, cmd.exe, wscript.exe), define legitimate usage patterns and expected command-line argument structures. 2. Symbolic Logic: Generate high-priority alerts for Windows Event ID 4688 when a process execution is observed where: the executable is not present in the established whitelist, or it matches a known malicious tool (e.g., mimikatz, nmap, psexec); the process executes from a temporary directory (%TEMP%, %APPDATA%) or an unexpected system location (e.g., C:\\Users\\Public); or a scripting interpreter or LOLBin (e.g., certutil.exe, bitsadmin.exe) executes with command-line arguments containing base64 encoded strings, network discovery parameters, or download commands not matching legitimate patterns. 3. Statistical Method: For each Windows Event ID 4688, calculate the Shannon entropy of the full command-line arguments. Alert on command lines with an entropy score exceeding the 99th percentile of historical entropy scores for that host. Additionally, identify rare parent-child process relationships by analyzing historical Windows Event ID 4688 data; flag any parent-child relationship occurring less frequently than the 1st percentile of observed relationships (e.g., a Microsoft Word process spawning cmd.exe, or an HMI application spawning a network scanner). 4. Machine Learning: Implement a process behavior classification model (e.g., Random Forest or XGBoost) trained on historical Windows Event ID 4688 data. The model should use features such as process name, parent process name, execution path, command-line arguments (including tokenized arguments and entropy), and user account. Train the model to classify process executions as legitimate or anomalous. Flag processes that receive an anomaly score (e.g., probability of being malicious) above a predefined threshold (e.g., 0.7) as potential evasion attempts. 5. Correlate suspicious process execution events (Windows Event ID 4688) with subsequent outbound network connections (Windows Event ID 5156 - Filtering Platform Connection) from the same process on the same host. Prioritize investigations where the destination is an ICS device, an unauthorized network segment, or an external IP address indicative of C2."
          },
          {
            "description": "Detection of file transfers (Zeek files.log, Windows Event ID 4663) of firmware (.bin, .hex, .fw), configuration (.xml, .cfg), or project files (.prj, .acd) to ICS devices (e.g., PLCs, RTUs, IEDs) where the source IP is unauthorized, the file hash (SHA256) does not match a known-good baseline, or the transfer occurs outside of scheduled maintenance windows, indicating an attempt to manipulate device firmware or configurations for evasion.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN), Engineering Workstations (EWS), Industrial Demilitarized Zone (IDMZ) for firmware update servers, OT File Servers",
            "action": "1. Filter Zeek files.log for file transfers over common industrial protocols (e.g., FTP, TFTP, HTTP, SMB) with file extensions associated with firmware (.bin, .hex, .fw, .img, .upd) or critical configuration/project files (.xml, .cfg, .prj, .acd). For Windows-based file shares, monitor Windows Event ID 4663 (An attempt was made to access an object) for write access to these file types. 2. Symbolic Logic: Create a whitelist of authorized source systems (e.g., specific EWS IPs), authorized destination ICS devices, and known-good file hashes (SHA256) for legitimate firmware and configuration files. Immediately alert on any transfer of these file types originating from an unauthorized source IP, destined for an unauthorized device, or having an unknown/mismatched file hash. Additionally, alert on such transfers occurring outside of defined maintenance windows (e.g., 24/7 monitoring with exceptions for scheduled changes). 3. Statistical Method: Identify instances where the same firmware or configuration file (based on SHA256 hash from Zeek files.log or calculated from Windows Event ID 4663 file paths) is transferred to an unusually high number of devices within a short period (e.g., exceeding the 99th percentile for device count per file hash per hour). Analyze the byte count and duration of firmware transfers from Zeek files.log, flagging any significant deviations (e.g., more than 3 standard deviations from the mean) from historical norms for specific firmware types or devices. 4. Machine Learning: Employ a classification model (e.g., Gradient Boosting Classifier or LightGBM) to categorize firmware and configuration transfer events as legitimate or malicious. Features for the model should include source IP reputation, destination device type, file hash entropy, file extension, transfer protocol, time of day, day of week, and historical transfer patterns. The model should flag events with a high probability (e.g., >0.8) of being malicious for further investigation. 5. For each anomalous file transfer detected, analyze the corresponding Zeek conn.log record to identify the full connection details (source, destination, service, connection duration). For Windows Event ID 4663 alerts, investigate the user account and process responsible for the access attempt, correlating with Windows Event ID 4624 (successful login) and 4688 (process creation) to understand the preceding activity."
          },
          {
            "description": "Detection of specific Windows Event IDs (1102, 7040, 4719, 4657) on EWS, HMIs, or other critical Windows servers within the ICS network, indicating the clearing of security logs, the stopping or disabling of critical security services (e.g., antivirus, EDR agent, host-based firewall, logging services), or unauthorized modifications to system security configurations, signifying an adversary's attempt to remove forensic evidence, disable host-based defenses, or establish persistence.",
            "data_sources": [
              "Windows Event ID 1102",
              "Windows Event ID 7040",
              "Windows Event ID 4719",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Windows Servers within the ICS network, OT Domain Controllers",
            "action": "1. Configure high-priority, immediate alerts for Windows Event ID 1102 (The audit log was cleared) on all critical HMI, EWS, and Windows servers within the ICS network. 2. Symbolic Logic: Monitor for Windows Event ID 7040 (A service was installed/started/stopped) specifically targeting critical security tools (e.g., antivirus, EDR agent, host-based firewall, logging services, security update services). Alert immediately if these services are stopped, disabled, or their startup type is changed to disabled. Also, alert on Windows Event ID 4719 (System audit policy was changed) and Windows Event ID 4657 (A registry value was modified) when changes are made to known security-related registry keys (e.g., disabling security features, modifying boot settings) or audit policies that could reduce logging (e.g., disabling process creation auditing). 3. Statistical Method: Perform a frequency analysis of service state changes (Event ID 7040) across all monitored systems. Alert on any service status change that falls outside the 99th percentile of historical occurrences for that specific service, especially if it's a security-critical service. Monitor the aggregate volume of security event logs (e.g., Event ID 4624, 4688, 4663) for each host; a sudden, significant drop (e.g., 90% reduction within 5 minutes, exceeding 3 standard deviations from the mean log volume) in log volume could indicate log tampering or a successful log clearing attempt. 4. Machine Learning: Apply a sequence analysis model (e.g., Hidden Markov Model or a state-based anomaly detection model) to identify patterns of evasion. Train the model to learn typical sequences of events on EWS/HMIs. For example, identify and flag sequences where an anomalous login (Windows Event ID 4624) or suspicious process execution (Windows Event ID 4688) is immediately followed by a log clear (Event ID 1102) or security service disable (Event ID 7040/4657). The model should generate an alert when a high-risk sequence (e.g., unseen or rare sequence with known malicious elements) is observed. 5. Correlate these security-impacting events (Event ID 1102, 7040, 4719, 4657) with preceding anomalous login activity (Windows Event ID 4624) or process execution (Windows Event ID 4688) on the same host within a defined time window (e.g., 5-15 minutes). Investigate the user account or process responsible for these security-impacting changes to understand the full attack chain and context of the evasion activity."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]