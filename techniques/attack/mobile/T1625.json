[
  {
    "information_requirement": "Has an adversary established persistence on a mobile device by hijacking its execution flow? (TA0028 - Persistence)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1625",
        "name": "Hijack Execution Flow",
        "evidence": [
          {
            "description": "A mobile device management (MDM) or mobile threat defense (MTD) log indicates a device integrity check failure. This is evidenced by a specific log field containing a failure status (e.g., `attestation_status = 'failed'`, `integrity_check = 'mismatch'`) or a calculated cryptographic hash for a critical system component (e.g., bootloader, OS kernel, system partition) that does not match the expected baseline hash provided by the device manufacturer or established by the MDM.",
            "data_sources": [
              "Mobile Device Management (MDM) attestation logs",
              "Mobile Threat Defense (MTD) integrity scan logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/MTD management console, managed mobile endpoints (iOS, Android), and centralized log aggregator (SIEM) ingesting events from the MDM/MTD cloud infrastructure.",
            "action": "Symbolic: Create a SIEM detection rule that generates a high-severity alert upon ingestion of an MDM/MTD log where a field explicitly indicates attestation or integrity failure. Logic: `(log_source='MDM' OR log_source='MTD') AND (attestation_status='failed' OR integrity_status='failed' OR bootloader_hash_match='false')`. The alert must include the device identifier, associated user, OS version, and the specific reason for failure.\nStatistical: For each device profile (e.g., combination of device model and OS version), establish a 30-day baseline of attestation failure rates. Create a scheduled query that runs hourly to calculate the failure rate over a rolling 24-hour window. Trigger a medium-severity alert if the current failure rate for any single device profile exceeds the 99th percentile of its historical baseline, which could indicate a targeted issue with an OS update or a specific exploit.\nMachine Learning: Implement a time-series anomaly detection model (e.g., Prophet, LSTM) on the aggregate count of all attestation failures across the mobile fleet, bucketed into 1-hour intervals. Train the model on at least 90 days of historical data. An alert is triggered if the observed failure count in a given hour significantly exceeds the model's forecasted upper confidence bound for three consecutive intervals, indicating a potential widespread campaign or systemic issue."
          },
          {
            "description": "An outbound network connection from a mobile device's IP address exhibits characteristics inconsistent with normal system activity. This is evidenced by a connection to a destination IP address, domain, or SSL/TLS certificate on a threat intelligence blocklist, or by connection metadata (e.g., destination port, data volume, protocol) that is a statistical outlier compared to the device's established baseline behavior.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Zeek intel.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors (e.g., Zeek) deployed at key egress points, including corporate Wi-Fi network gateways, VPN concentrators serving mobile devices, and DNS resolvers used by mobile clients.",
            "action": "Symbolic: Monitor the Zeek `intel.log` file, which automatically correlates metadata from `conn.log`, `dns.log`, and `ssl.log` against configured threat intelligence feeds. Create a real-time SIEM rule to generate a high-severity alert for any `intel.log` entry where `intel.seen.where` is `Conn::IN_RESP`, `DNS::IN_QUERY`, or `SSL::IN_SERVER_CERT` and the originator IP (`id.orig_h`) is within the designated mobile device IP range (e.g., DHCP or VPN subnets).\nStatistical: For each mobile device IP, run a scheduled query every hour to build and compare against a 30-day rolling baseline of network behavior. Generate an alert if: 1) A connection is made to a destination port not in the established set of 'normal' ports for that device (from `id.resp_p` in `conn.log`). 2) The entropy of DNS queries made in the last hour exceeds a high threshold (e.g., 4.5), calculated from the `query` field in `dns.log`. 3) The total outbound data (`orig_bytes` in `conn.log`) in the last hour exceeds the 98th percentile of the device's historical hourly outbound traffic.\nMachine Learning: Develop and deploy a supervised machine learning classifier (e.g., Gradient Boosting, Random Forest) to score the maliciousness of each connection from the mobile IP space. Engineer features from Zeek logs, such as: `duration`, `log(orig_bytes+1)`, `log(resp_bytes+1)`, `proto` (as one-hot encoded), `conn_state` (as one-hot encoded), `history` string patterns, and destination port category (e.g., well-known, registered, ephemeral). An alert is triggered when a connection's predicted probability of being malicious surpasses a calibrated threshold (e.g., 0.90)."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]