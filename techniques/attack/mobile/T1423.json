[
  {
    "information_requirement": "Is a compromised mobile device being used to perform network service discovery on the internal network? (TA0032 - Discovery)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1423",
        "name": "Network Service Scanning",
        "evidence": [
          {
            "description": "A mobile device IP initiates an anomalously high number of connections to unique internal IP addresses (horizontal scan) or unique ports on a single host (vertical scan) within a short time frame, significantly deviating from its own baseline and the population norm.",
            "data_sources": [
              "Zeek conn.log",
              "DHCP Server Logs",
              "VPN Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments accessible by mobile devices (e.g., corporate Wi-Fi, VPN address pools), Core network switches, VPN concentrators, DHCP servers",
            "action": "Step 1 (Symbolic): Deploy network canaries (honeypots) on unused IP addresses within mobile-accessible network segments. Create a high-priority alert to trigger on any connection attempt from a mobile device IP range to a canary IP or a predefined canary port on a production server. Step 2 (Statistical): Write a scheduled query to run every 5 minutes that, for each mobile device IP, counts unique destination IPs and unique destination ports from Zeek conn.log. Establish a 7-day rolling baseline for each device's typical activity. Trigger an alert if a device's count for either metric exceeds its own baseline by 3 standard deviations AND also surpasses the 99th percentile for all mobile devices in that same time window. Step 3 (Machine Learning): On a daily basis, create a feature set for each mobile device's network activity using metrics such as unique destination IP count, unique port count, ratio of TCP to UDP connections, and the Shannon entropy of destination ports. Apply an unsupervised density-based clustering model (e.g., DBSCAN) to this feature set to identify devices that form anomalous clusters or are identified as noise points, representing atypical scanning behavior."
          },
          {
            "description": "A mobile device IP generates a statistically significant ratio of failed or rejected connections (e.g., Zeek conn_state 'S0', 'REJ', 'RSTO', 'RSTR') to successful connections ('SF'), indicating a potential scan against closed ports or firewalled hosts.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments accessible by mobile devices (e.g., corporate Wi-Fi, VPN address pools), Core network switches, Network firewalls",
            "action": "Step 1 (Symbolic): Create a real-time alert that triggers if a single mobile source IP generates more than 10 connections with a 'REJ' (Connection rejected) state in Zeek conn.log to any single destination host within a 1-minute window, which indicates a host-based firewall is actively dropping scan packets. Step 2 (Statistical): Write a scheduled query to run every 10 minutes that, for each mobile device IP, calculates the ratio of failed connection states ('S0', 'REJ', 'RSTO', 'RSTR') to successful states ('SF'). Trigger an alert if this ratio exceeds the 95th percentile observed across all mobile devices, flagging an abnormal rate of connection failures indicative of scanning. Step 3 (Machine Learning): Implement a time series anomaly detection model (e.g., Seasonal-Hybrid ESD) for each mobile device. Train the model on the per-minute count of failed connections ('S0', 'REJ'). The model will learn the normal background 'noise' of connection failures for each user and alert on sudden, statistically significant spikes that deviate from this learned pattern."
          },
          {
            "description": "Traffic originating from a mobile device IP matches known signatures of scanning tools (e.g., specific User-Agent strings in http.log, payload patterns) or triggers Zeek's built-in scanning detection notices (e.g., Scan::Port_Scan).",
            "data_sources": [
              "Zeek notice.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek signatures.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network tap or span port monitoring the ingress/egress of mobile device network segments (Wi-Fi, VPN).",
            "action": "Step 1 (Symbolic): Configure and monitor Zeek's notice.log for 'Scan::Port_Scan' or 'Scan::Address_Scan' notices. Create a high-severity alert if the originator IP falls within a mobile device IP range. Additionally, create and monitor custom signatures in Zeek (signatures.log) or a SIEM to detect scanner-specific User-Agent strings (e.g., 'Nmap Scripting Engine', 'masscan') in http.log. Step 2 (Statistical): Write a scheduled query to calculate the Shannon entropy of the first 64 bytes of the payload for TCP sessions initiated by mobile devices where Zeek did not identify an application layer protocol ('OTH' in conn.log). Alert if a device's average payload entropy over a 10-minute window exceeds the 98th percentile for all mobile devices, indicating potentially obfuscated scanner traffic. Step 3 (Machine Learning): Train a supervised classification model (e.g., Random Forest) on labeled network flow data to distinguish between benign traffic and traffic generated by various scanning tools. Use features from Zeek conn.log such as duration, packet counts, byte counts, TCP flags, and connection state to classify new network flows from mobile devices in near-real-time to identify scanning activity."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]