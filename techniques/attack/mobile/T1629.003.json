[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile security controls by disabling or modifying security tools? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.003",
        "name": "Disable or Modify Tools",
        "evidence": [
          {
            "description": "Evidence is a log entry from an MDM/UEM platform where the 'device_administrator' status for a required security application changes from 'active' to 'inactive', or a log showing a previously unknown or non-allowlisted application gaining device administrator privileges.",
            "data_sources": [
              "MDM/UEM Audit Logs",
              "MDM/UEM Device Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM management console, SIEM platform aggregating MDM/UEM logs, managed Android and iOS devices",
            "action": "1. (Symbolic) Query MDM/UEM audit logs for events indicating a change in device administrator status. For each event, compare the application name against a maintained allowlist of required security tools and approved administrators. Generate a high-severity alert if a required security tool is removed or if an application not on the allowlist is added. 2. (Statistical) For each device, calculate the daily count of device administrator change events over a 30-day rolling window. Establish a fleet-wide baseline for this metric and identify the 99th percentile. Generate a medium-severity alert for any device whose daily change count exceeds this statistical threshold, indicating an abnormal frequency of administrative modifications. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using labeled historical MDM/UEM logs. Use features such as application name, application category, time of day, day of week, device compliance status before the change, and whether the application was sideloaded. The model will predict the likelihood of a change event being 'malicious' or 'benign'. Automatically escalate events classified as 'malicious' with a high confidence score for immediate analyst review."
          },
          {
            "description": "Evidence is a log from the MTD management console explicitly stating an agent's status is 'disabled', 'unresponsive', or 'tampered', or the sustained absence of 'agent_health_status' logs from a device for a period exceeding a statistically defined threshold.",
            "data_sources": [
              "MTD Agent Health Telemetry",
              "MTD Management Console Event Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MTD management console, SIEM platform aggregating MTD logs, managed mobile device fleet",
            "action": "1. (Symbolic) Create a SIEM rule to generate a high-severity alert when an MTD management console event log contains a field-value pair like `agent_status: 'disabled'`, `agent_status: 'stopped'`, or `agent_status: 'tampered'`. Correlate this alert with MDM compliance logs to verify if the device is simultaneously marked as non-compliant. 2. (Statistical) For each device, ingest MTD agent heartbeat logs and calculate the mean and standard deviation of the check-in interval over a 14-day baseline period. Trigger a medium-severity alert if a device fails to check-in for a duration exceeding the `mean + (3 * standard_deviation)`. Additionally, monitor the total count of silent agents per hour across the fleet; an hourly count exceeding the 95th percentile of the daily average indicates a potential widespread issue. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM) on the aggregate volume of MTD heartbeat data ingested by the SIEM, segmented by device OS and geographic region. The model learns the normal cyclical patterns of agent telemetry. Generate a high-severity alert when a sudden, statistically significant drop in telemetry volume is detected that deviates from the model's forecast, suggesting a coordinated disabling of MTD agents."
          },
          {
            "description": "Evidence is a device compliance log from a managed Android device where the SELinux status is explicitly reported as 'permissive' or 'disabled', contrasting with the required corporate security baseline of 'enforcing'.",
            "data_sources": [
              "MDM/UEM Device Compliance Logs",
              "MTD Security Posture Assessment Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM and MTD management consoles, SIEM platform, managed Android device fleet",
            "action": "1. (Symbolic) Configure a critical-severity SIEM alert to trigger immediately if any MDM or MTD compliance log for an Android device contains the field-value pair `selinux_status: 'permissive'` or `selinux_status: 'disabled'`. This alert should automatically trigger a device quarantine workflow via MDM/UEM integration. 2. (Statistical) Establish a baseline where the expected count of SELinux status changes per device per day is zero; any non-zero count is a critical anomaly. Separately, calculate the Shannon entropy of key security setting values (e.g., `selinux_status`, `root_status`, `encryption_status`) on a per-device basis over 24-hour windows. An abnormally high entropy score for a device indicates rapid, suspicious configuration changes and should generate a medium-severity alert. 3. (Machine Learning) Develop an unsupervised anomaly detection model (e.g., Isolation Forest) using device posture telemetry as input features. Include numeric and one-hot encoded categorical features like `selinux_status`, `root_status`, `screen_lock_enabled`, `is_sideloading_enabled`, and `days_since_last_patch`. Train the model on the fleet to learn the profile of a secure device. Any device the model flags as a significant outlier should be automatically queued for Tier 2 analyst investigation."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]