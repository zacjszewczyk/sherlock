[
  {
    "information_requirement": "Is an adversary using obfuscated files or information to evade defenses on mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406",
        "name": "Obfuscated Files or Information",
        "evidence": [
          {
            "description": "A file transferred to a mobile device IP address exhibits high entropy or a mismatched file signature. This is observed when a file's Shannon entropy score exceeds a statistically-derived baseline (e.g., $$ E > 7.5 $$ for encrypted content) or its `mime_type` in `Zeek files.log` (e.g., `application/vnd.android.package-archive` for an APK) does not match its `filename` extension (e.g., `.jpg`).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi access points, Mobile Device Management (MDM) servers, network gateways, and VPN concentrators.",
            "action": [
              "Create a SIEM rule to monitor `Zeek files.log` for files transferred to the mobile IP address space. Alert if a file's `mime_type` is a known mobile executable (`application/vnd.android.package-archive`, `application/x-itunes-ipa`) but its `filename` extension suggests a benign type (e.g., `.png`, `.jpg`, `.pdf`, `.docx`).",
              "For all file transfers captured in `Zeek files.log`, execute a script to calculate the Shannon entropy of the file payload. Establish and maintain a 30-day rolling baseline of entropy scores for each distinct `mime_type`. Generate an alert when a new file's entropy exceeds the 95th percentile for its declared type or has an absolute entropy value of $$ E > 7.5 $$, which strongly suggests packing or encryption.",
              "Develop and deploy a random forest classifier model trained on labeled historical data from `Zeek files.log` and `http.log`. Engineer features including file entropy, file size, `mime_type`, file extension, HTTP user-agent, and source IP reputation. Run the model to classify each file download in near real-time as 'benign' or 'suspiciously obfuscated', providing a confidence score for analyst review."
            ]
          },
          {
            "description": "A single mobile device IP address receives multiple (e.g., $$ > 3 $$) small file fragments from a single source IP over a short time window (e.g., $$ < 5 $$ minutes). This is identified by filenames in `Zeek files.log` that follow a common archival splitting pattern (e.g., `archive.z01`, `payload.001`, `data.part1`).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, corporate Wi-Fi segments, and DNS resolvers servicing mobile device clients.",
            "action": [
              "Create a SIEM detection rule that groups `Zeek files.log` entries by destination IP (`id.resp_h`) and source IP (`id.orig_h`). Trigger an alert if the count of files with filenames matching the regex `.*\\\\.(part[0-9]+|z[0-9]+|r[0-9]+|[0-9]{3})$` from a single source to a single destination exceeds 3 within a 5-minute window. Correlate with `Zeek conn.log` using the `uid` to confirm a single session.",
              "For each mobile device IP, calculate a count of files downloaded from a single source IP within a 1-minute sliding window. Using a 30-day historical baseline from `Zeek files.log`, calculate the mean and standard deviation of this 'file velocity' metric across the mobile device population. Flag any device where the file velocity from a single source exceeds 3 standard deviations above the population mean. Enrich alerts by querying `Zeek dns.log` and external WHOIS data to determine if the source domain is newly registered (e.g., < 30 days old).",
              "Implement a DBSCAN clustering algorithm on connection data from `Zeek conn.log` and `files.log`. Use features such as source IP, destination IP, protocol, destination port, total bytes transferred, and the inter-arrival time between connections. Investigate any cluster identified as an outlier (noise in DBSCAN) or a dense micro-cluster that contains a high number of small connections from one source to one destination, which is characteristic of split payload delivery. Correlate IPs in suspicious clusters with threat intelligence feeds."
            ]
          },
          {
            "description": "On a developer-owned host, a process creation event shows the use of a known encoding or packing utility (e.g., `certutil`, `ProGuard`, `iXGuard`). This is followed shortly by a network connection from the same host to a mobile device IP range or a public file-sharing service, indicating potential staging and transfer of an obfuscated payload.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD build servers, code repositories, and artifact management systems.",
            "action": [
              "Deploy a chained SIEM rule on NAIs. First, detect process creation (Windows Event ID 4688) where the `ProcessCommandLine` contains strings for encoding or mobile packing, such as `certutil -encode`, `base64`, `openssl enc`, `ProGuard`, `DexGuard`, `iXGuard`, or `upx`. If a match occurs, correlate by hostname and timestamp to find a subsequent network connection in `Zeek conn.log` from that host to an IP in the mobile device VLAN or a domain categorized as 'File Sharing' in `Zeek dns.log` within 10 minutes.",
              "For each unique process name on developer hosts, calculate the Shannon entropy of its command-line arguments from Windows Event ID 4688 logs. Establish a 30-day rolling baseline of normal command-line entropy for common development processes (e.g., `git.exe`, `gradle.bat`, `xcodebuild`). Generate an alert when a command line's entropy exceeds the 98th percentile for that specific process name, as high entropy can indicate the presence of embedded, encoded data or scripts.",
              "Develop a time-series anomaly detection model using an LSTM (Long Short-Term Memory) network to learn normal sequences of parent-child processes on development hosts from Windows Event ID 4688 data. Train the model on legitimate build and development workflows (e.g., `jenkins.exe` -> `mvn.cmd` -> `javac.exe`). Alert on sequence anomalies, such as `javac.exe` -> `certutil.exe` -> `curl.exe`, that deviate from learned patterns. Correlate this host-based anomaly with subsequent file transfers (`Zeek files.log`) or connections (`Zeek conn.log`) from the same host."
            ]
          },
          {
            "description": "A mobile device downloads a file containing executable code from a source that is not an authorized app store or known CDN. This is seen in network logs where the device's IP and User-Agent download a file with a `mime_type` of `application/octet-stream` or a file extension of `.dex`, `.so`, `.jar` (Android), or `.ipa` (iOS).",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi access points, DNS resolvers, and network egress points.",
            "action": [
              "Create a SIEM rule to alert when `Zeek files.log` shows a file download to a mobile device IP where the filename extension is `.dex`, `.so`, `.jar`, or `.ipa`, and the `host` field in the corresponding `Zeek http.log` entry is not on an allowlist of known software repositories or CDNs (e.g., `*.google.com`, `*.apple.com`, `*.akamai.net`).",
              "Profile the `mime_type` and file extension of all downloads per mobile application, identified by the `User-Agent` string in `Zeek http.log`. For each application, calculate the frequency distribution of its downloaded file types over a 30-day period. Generate an alert if an application downloads a file with a `mime_type` or extension that is statistically rare for that application (e.g., falls outside the top 99% of its typical file types), with a focus on `application/octet-stream`, `application/x-java-archive`, and other executable formats.",
              "Train an isolation forest model on features from `Zeek http.log`, `files.log`, and `dns.log` to detect anomalous downloads. Engineer features including: HTTP request method, User-Agent string, response `mime_type`, file size, source IP reputation score, and domain age. The model will score each download and flag outliers that deviate significantly from the normal traffic patterns of the mobile device fleet, indicating potential unauthorized dynamic code loading or side-loading."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]