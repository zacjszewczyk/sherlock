[
  {
    "information_requirement": "Is an adversary using obfuscated files or information to evade defenses on mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406",
        "name": "Obfuscated Files or Information",
        "evidence": [
          {
            "description": "A file transferred over the network to a mobile device IP address exhibits properties of obfuscation, such as a Shannon entropy score above a statistically-derived baseline (e.g., $$ > 7.5 $$ for executable content) or a mismatch between its observed `mime_type` (e.g., `application/vnd.android.package-archive`) and its file extension (e.g., `.jpg`).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi access points, Mobile Device Management (MDM) servers, network gateways, and VPN concentrators.",
            "action": "1. (Symbolic) Create a SIEM rule to continuously monitor `Zeek files.log` for files transferred to the mobile IP address space. The rule should trigger an alert if a file's `mime_type` is a known mobile executable type (e.g., `application/vnd.android.package-archive`, `application/x-mach-binary`) but its `filename` extension suggests a benign document or image (e.g., `.pdf`, `.docx`, `.png`, `.jpg`). 2. (Statistical) For all files captured in `Zeek files.log`, execute a script to calculate the Shannon entropy of each file payload. For each distinct `mime_type`, establish and maintain a 30-day rolling baseline of entropy scores. Generate an alert when a new file's entropy exceeds the 95th percentile for its declared `mime_type` or has an absolute entropy value of $$ E > 7.5 $$, which strongly suggests packing or encryption. 3. (Machine Learning) Develop and deploy a random forest classifier model trained on labeled historical data from `Zeek files.log` and `http.log`. Engineer features including file entropy, file size, `mime_type`, file extension, HTTP user-agent, and source IP reputation score. The model's purpose is to classify each file download in near real-time as 'benign' or 'suspiciously obfuscated'. For analyst review, alerts should include the model's confidence score and the top features that contributed to the classification."
          },
          {
            "description": "A single mobile device IP address receives multiple (e.g., $$ > 3 $$) small (e.g., $$ < 1MB $$) file fragments from a single source IP over a short time window (e.g., $$ < 5 $$ minutes), where the filenames in `Zeek files.log` exhibit a sequential or common archival pattern (e.g., 'part1.bin', 'archive.z01', 'payload.001').",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, corporate Wi-Fi segments, and DNS resolvers servicing mobile device clients.",
            "action": "1. (Symbolic) Create a SIEM detection rule that groups `Zeek files.log` entries by destination IP (`id.resp_h`) and source IP (`id.orig_h`). Trigger an alert if the count of files with filenames matching the regex `.*(part[0-9]+|\\.z[0-9]+|\\.r[0-9]+|\\.[0-9]{3})$` exceeds 3 within a 5-minute window. Correlate with `Zeek conn.log` using the `uid` field to confirm events belong to a single session. 2. (Statistical) For each mobile device IP, aggregate a count of files downloaded from a single source IP in a 1-minute sliding window. Using a 30-day historical dataset from `Zeek files.log`, calculate the mean and standard deviation of this count across the entire mobile device population. Flag any device where the download count from a single source exceeds 3 standard deviations above the population mean. Enrich this alert by querying `Zeek dns.log` and external WHOIS data to determine if the source domain is newly registered (e.g., < 30 days old), which significantly increases the risk score. 3. (Machine Learning) Implement a DBSCAN clustering algorithm on network traffic data from `Zeek conn.log` and `files.log`. Use features such as source IP, destination IP, total bytes transferred, and inter-arrival time between connections to group related network activities. An analyst should investigate any identified cluster that contains a high density of points (many small connections from one source to one destination) with a low total data volume, as this is characteristic of split payload delivery. Correlate IPs in suspicious clusters with threat intelligence feeds."
          },
          {
            "description": "On a developer host, a process creation event (Windows Event ID 4688) shows the use of a known encoding utility (e.g., `base64`, `certutil`) or a mobile application packing tool (e.g., `ProGuard`, `iXGuard`), creating an output file. This is followed within 10 minutes by a network connection from the same host to a mobile device IP range or a known public file-sharing service, as seen in `Zeek conn.log`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD build servers, code repositories, and artifact management systems.",
            "action": "1. (Symbolic) Deploy a chained SIEM rule on NAIs. Step 1: Detect process creation (Windows Event ID 4688) with command-line logs containing strings indicative of encoding or packing, such as `certutil -encode`, `base64`, `openssl enc`, `ProGuard`, `DexGuard`, or `iXGuard`. Step 2: If a match occurs, correlate by hostname and timestamp to find a subsequent network connection in `Zeek conn.log` from that host to an IP in the mobile device VLAN or a domain categorized as file sharing in `Zeek dns.log` within 10 minutes. 2. (Statistical) For each unique process name on developer hosts, calculate the entropy of its command-line arguments from Windows Event ID 4688 logs. Establish a 30-day rolling baseline of normal command-line entropy for common development processes (e.g., `git.exe`, `gradle.bat`, `xcodebuild`). Generate an alert when a command line's entropy exceeds the 98th percentile for that specific process name, as this may indicate the presence of embedded, encoded data or scripts. 3. (Machine Learning) Develop a time-series anomaly detection model using an LSTM (Long Short-Term Memory) network to learn normal sequences of parent-child processes on development hosts from Windows Event ID 4688 data. A normal build sequence might be `jenkins.exe` -> `mvn.cmd` -> `javac.exe` -> `jar.exe`. An alert should be generated when a sequence anomaly is detected, such as `javac.exe` -> `certutil.exe` -> `curl.exe`. Correlate this host-based anomaly with subsequent network file transfers from the same host in `Zeek files.log` to identify potential side-loading of the obfuscated payload."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]