[
  {
    "information_requirement": "Has an adversary gained initial access by pushing a malicious update to a previously benign mobile application? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "Within 24 hours of an application update event, the mobile application initiates network connections to a destination IP/FQDN that is either found on a threat intelligence feed, has a domain registration date less than 90 days old, or establishes a TLS session with a fingerprint (JA3/JA3S) that is new or rare for that application.",
            "data_sources": [
              "MDM Application Update Log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "External WHOIS Data Feed",
              "External Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.",
            "action": [
              "Join application update events from MDM logs with network logs (Zeek conn.log, dns.log) on device identifier and timestamp. For any network connection within 24 hours of an update, query the destination FQDN and IP address against an active threat intelligence feed. Separately, enrich the FQDN with WHOIS data and create an alert if the domain's creation date is less than 90 days in the past. An alert from either check constitutes a match.",
              "For each application, build a historical baseline of JA3 and JA3S hashes from Zeek ssl.log. Following an update, if a new TLS connection uses a JA3/JA3S hash not present in the application's baseline and the hash's global prevalence across the enterprise is below the 1st percentile, generate an alert. Additionally, calculate the Shannon entropy for each new FQDN queried in Zeek dns.log post-update and alert if the score exceeds the 99th percentile of the application's historical FQDN entropy scores.",
              "Train and apply a time-series forecasting model (e.g., Prophet, ARIMA) on the application's historical outbound data volume (sum of `orig_bytes` from Zeek conn.log), aggregated in 15-minute intervals. If the observed data volume in any interval within 24 hours post-update exceeds the model's 95% prediction interval, flag it as a volumetric anomaly and generate an alert."
            ]
          },
          {
            "description": "Following an MDM-detected application update, the application's new permission set includes a high-risk permission, shows a Jaccard similarity score below 0.8 when compared to the previous version, or includes a permission that is statistically rare (<2% prevalence) for its declared App Store category.",
            "data_sources": [
              "MDM Application Inventory Log (pre/post update)",
              "Curated High-Risk Permission List",
              "Pre-computed App Store Category Permission Baselines"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.",
            "action": [
              "Upon detecting an application update via MDM logs, extract the pre- and post-update permission sets. Compare any newly granted permissions against a static, curated list of high-risk permissions (e.g., `android.permission.BIND_DEVICE_ADMIN`, `com.apple.developer.kernel.extended-memory-access`). Generate a high-severity alert for any match.",
              "For each update, calculate the Jaccard similarity index between the pre- and post-update permission sets. Generate an alert if the score is below 0.8. For each new permission granted, query a pre-computed baseline of permission prevalence by app store category and flag any permission with a prevalence of less than 2% within its category.",
              "Represent each application's permission set as a fixed-length binary vector. Train a supervised classification model (e.g., Random Forest) on a labeled dataset of 'benign' and 'malicious' permission sets. After an update, if the application's new permission vector is classified as 'malicious' when its previous version was 'benign', generate an alert for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by hiding malicious code within a legitimate application update? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "An application update is signed with a developer certificate whose thumbprint differs from the historical set for that application, is less than 90 days old, or is associated with known malicious indicators in threat intelligence.",
            "data_sources": [
              "MDM Application Inventory Log (with certificate details)",
              "Historical Application Certificate Thumbprint Database",
              "External Certificate Transparency Log Data",
              "External Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM platform, application manifest repositories, and the SIEM platform where threat intelligence and certificate data are correlated.",
            "action": [
              "For each application update detected via MDM, extract the code-signing certificate's thumbprint. Compare this thumbprint against a maintained allow-list of all historical thumbprints for that specific application ID. Generate a high-severity alert on any mismatch. Concurrently, query the new thumbprint against a threat intelligence feed of known malicious certificates and alert on a match.",
              "For each new certificate, calculate a risk score. Add 50 points if the certificate's 'valid from' date is less than 90 days old. Add 30 points if the issuer's prevalence across all managed mobile applications is in the bottom 5th percentile. Add 20 points if the Levenshtein distance between the new and previous certificate's subject name is greater than 5. Generate an alert if the total score exceeds 75.",
              "Maintain a graph database where nodes are applications, certificates, and developers. After an update, add the new certificate and its relationships. Run a community detection algorithm (e.g., Louvain Modularity) to identify clusters. If the new certificate connects a previously trusted application node to a community previously identified as malicious or high-risk, generate an alert."
            ]
          },
          {
            "description": "Post-update, the application's network traffic from a mobile device exhibits C2-like behavior, defined as periodic outbound connections with low time-delta variance (beaconing), high-entropy DNS queries (DGA), or anomalous data transfer volumes and patterns compared to a 30-day baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "MDM/EDR Network Flow Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), CASB, and the SIEM platform aggregating network flow data (Zeek, EDR/MDM) for behavioral analysis.",
            "action": [
              "Monitor Zeek logs for traffic originating from updated applications. Create a rule to alert on any non-TLS protocol (e.g., HTTP, DNS) using destination port 443. Additionally, match the `server_name` field in Zeek ssl.log and the `query` field in dns.log against regular expression patterns for known C2 frameworks and threat intelligence indicators.",
              "To detect beaconing, group outbound connections from the application (Zeek conn.log) by destination IP and port. Within a 1-hour window, calculate the standard deviation of the time difference between consecutive connections. An alert is generated if this value is below the 5th percentile of historical values for that application, indicating regular periodicity. To detect DGA, calculate the Shannon entropy of the queried domain (excluding TLD) in dns.log and alert if it exceeds the 98th percentile of that app's baseline.",
              "For each application, train an autoencoder on feature vectors derived from its normal network sessions (e.g., duration, `orig_bytes`, `resp_bytes`, protocol, port, inter-arrival time). After an update, process new sessions through the trained model. If the reconstruction error for a session exceeds a dynamically set threshold (e.g., 99th percentile of reconstruction errors from the training set), classify the session as anomalous and generate an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]