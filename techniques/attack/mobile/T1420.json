[
  {
    "information_requirement": "Is an adversary attempting to discover sensitive information on our corporate mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1420",
        "name": "File and Directory Discovery",
        "evidence": [
          {
            "description": "An application on a managed Android device performs rapid file enumeration, defined as accessing more than 100 unique file paths in external storage (e.g., '/sdcard/Download/', '/sdcard/Documents/') within a 5-minute window. This file access rate exceeds the application's established 30-day baseline count by more than 3 standard deviations, or targets file extensions associated with sensitive data (e.g., .kdbx, .pem, .gnucash).",
            "data_sources": [
              "MTD/EDR file access logs containing process name, file path, and timestamp",
              "Android logcat filtered for 'FileAccess' or 'Vold' tags",
              "Application-specific sandboxed file I/O logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/MTD/UEM management consoles aggregating endpoint telemetry from corporate-owned or managed Android devices. Specific focus on devices assigned to executives or users with privileged access.",
            "action": "1. (Symbolic) Create a SIEM rule to alert when a process not on the approved application allow-list accesses more than 20 files with sensitive extensions (e.g., .kdbx, .pem, .bak, .sql) within a 10-minute window. Also, alert on any non-browser, non-email client application accessing files in protected credential storage locations like '/data/misc/keystore/'. 2. (Statistical) For each managed application, ingest file access events to establish a baseline. Calculate the 99th percentile of unique file paths accessed per hour for each app. Generate an alert if the hourly count for an app exceeds this threshold. Additionally, calculate the Shannon entropy of directory names accessed by a process in a 5-minute window; alert if the entropy score is anomalously high compared to the application's historical distribution, suggesting enumeration of randomized or obfuscated directories. 3. (Machine Learning) Develop and deploy an Isolation Forest model on endpoint file access data. Use features such as: count of file read/write operations per minute, average file path depth, ratio of directory listings to file reads, and time between file access events. Train the model on baseline data from known-good applications. A low anomaly score from the model indicates a high probability of malicious file discovery activity."
          },
          {
            "description": "A user grants a high-risk storage permission (e.g., `android.permission.READ_EXTERNAL_STORAGE`, `android.permission.MANAGE_EXTERNAL_STORAGE`) to an application that is not on the corporate allow-list. The risk is elevated if the application has a low reputation score, was installed from an untrusted source (sideloaded), or its category (e.g., 'Flashlight') is incongruous with the need for broad file system access.",
            "data_sources": [
              "MDM application inventory and permission status logs",
              "MTD security policy violation events",
              "Google Play Store API for application metadata (category, developer)",
              "MDM logs detailing application source (e.g., Google Play, Sideloaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate MDM/UEM platform, MTD management console, and the internal repository defining the corporate application allow-list and associated expected permissions.",
            "action": "1. (Symbolic) Using MDM logs, create a high-priority alert that triggers whenever `permission.state` changes to 'GRANTED' for `android.permission.MANAGE_EXTERNAL_STORAGE` and the application's package name is not in the corporate allow-list, OR the `app.source` is 'Sideloaded'. 2. (Statistical) Aggregate MDM permission grant logs daily. For each app category (e.g., 'Productivity', 'Games'), calculate the baseline rate of storage permission grants. Alert if a specific application's grant rate suddenly spikes more than 3 standard deviations above the category average, indicating a potential social engineering campaign or a trojanized update. 3. (Machine Learning) Train a logistic regression classifier to produce an 'Application Risk Score'. Features should include: application source, developer reputation, number of requested permissions, age of the app on the Play Store, and a binary flag for whether its category matches its requested permissions. A high-risk score combined with a recent storage permission grant event should trigger an automated action, such as quarantining the device or notifying the user and SOC."
          },
          {
            "description": "Within 60 minutes of a precursor alert (anomalous file access or high-risk permission grant) on a specific mobile device, the same device initiates one or more outbound network connections resulting in a total data transfer exceeding 50MB. This exfiltration is directed to a destination IP address or domain not previously contacted by the user in the last 30 days.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "VPN access logs",
              "MTD/EDR network flow logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors (e.g., Zeek) monitoring traffic from the corporate Wi-Fi SSID, VPN concentrator egress points, and CASB proxies. Logs should be aggregated in a central SIEM.",
            "action": "1. (Symbolic) Create a correlation rule in the SIEM. Trigger: 'Anomalous File Access' or 'High-Risk Permission Grant' alert for a device IP. Action: For the next 60 minutes, monitor `Zeek dns.log` and `conn.log` for traffic from that IP. Generate a critical alert if the `query` field in `dns.log` or the `id.resp_h` field in `conn.log` matches a high-confidence threat intelligence feed of C2 servers or known exfiltration endpoints. 2. (Statistical) Upon a precursor alert for a device, query `Zeek conn.log` for all connections where `id.orig_h` matches the device IP in the next hour. Sum the `orig_bytes` field. Compare this sum to the user's 95th percentile for hourly outbound data volume, calculated from a 30-day baseline. Alert if the threshold is breached. Concurrently, identify destination IPs (`id.resp_h`) that are 'rare' (not present in the user's 30-day connection history) and flag for investigation. 3. (Machine Learning) For each user/device, train a time-series forecasting model (e.g., Prophet) on historical hourly outbound data volume (`orig_bytes` from `Zeek conn.log`). When a file-access-related precursor alert is triggered, compare the actual outbound data volume in the subsequent hour to the model's forecast. If the actual volume significantly exceeds the forecast's upper confidence bound (`yhat_upper`), it indicates an anomalous data transfer event, likely exfiltration, triggering a high-severity alert."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]