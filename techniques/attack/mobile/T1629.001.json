[
  {
    "information_requirement": "Is an adversary preventing the removal of malicious applications on our managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.001",
        "name": "Prevent Application Removal",
        "evidence": [
          {
            "description": "An application package not on the corporate allow-list is granted 'Device Administrator' or 'Accessibility Service' permissions. The package name may also exhibit a high Shannon entropy score compared to a baseline of legitimate applications or a low Levenshtein distance to a known legitimate application name, indicating potential typosquatting.",
            "data_sources": [
              "MDM/EMM application inventory logs",
              "MDM/EMM permission audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM Management Server, Managed Mobile Device Fleet, Centralized Log Aggregator (SIEM)",
            "action": "1. (Symbolic) From MDM/EMM permission audit logs, continuously monitor for grant events for 'Device Administrator' or 'Accessibility Service'. For each event, compare the application package name against a curated allow-list of approved business and system applications. Trigger a high-severity alert for any grant to an application not on this list. 2. (Statistical) For any non-allow-listed application granted high-risk permissions, calculate the Shannon entropy of its package name string. Flag packages with an entropy score exceeding the 95th percentile of a pre-computed baseline of all known-good application package names in the environment. Concurrently, calculate the Levenshtein distance between the suspicious package name and a list of common, high-value corporate and public app package names. Flag names with a distance of 1 or 2 for review as potential typosquatting. 3. (Machine Learning) Develop and deploy a Random Forest classifier trained on a labeled dataset of benign and malicious mobile application metadata. Use features such as package name length, character entropy, the number and type of requested permissions, and Levenshtein distance scores to popular apps. For any application flagged by other methods, use the classifier to generate a malice probability score. Automatically trigger a device quarantine via MDM/EMM if the model's confidence score is above 0.90."
          },
          {
            "description": "A user's attempt to access the application uninstall settings is immediately followed by a `performGlobalAction(GLOBAL_ACTION_BACK)` or `performGlobalAction(GLOBAL_ACTION_HOME)` API call originating from a non-system application, preventing the user from completing the uninstall action.",
            "data_sources": [
              "Mobile Threat Defense (MTD) API call logs",
              "Endpoint Detection and Response (EDR) for Mobile logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Device Fleet, Mobile Threat Defense (MTD) Console, SIEM",
            "action": "1. (Symbolic) Create a detection rule in the SIEM to correlate two events in sequence from the same device within a 2-second window: Event A is a user navigating to the device's application management or uninstall screen, and Event B is a `performGlobalAction` API call with argument `1` (BACK) or `2` (HOME) initiated by a user-installed application. Trigger a critical-severity alert upon a match. 2. (Statistical) For each device, establish a 7-day rolling baseline of application-initiated `performGlobalAction` calls. Calculate the frequency of these calls per application. Flag any application that initiates these calls at a rate more than three standard deviations above the mean for its application category, or any application that shows a sudden spike in these calls post-installation. 3. (Machine Learning) Train a sequence-based classifier, such as a Recurrent Neural Network (RNN), on sequences of user actions and system API calls from mobile devices to learn legitimate patterns of user-application interaction. Flag any real-time sequence that has a low probability under the model, particularly sequences where a user's attempt to access settings is followed by an unexpected `GLOBAL_ACTION_BACK` or `GLOBAL_ACTION_HOME` event from a non-system application, as a high-confidence indicator of malicious interference."
          },
          {
            "description": "A mobile device initiates network connections to a newly registered domain or a known malicious destination within 60 minutes of a high-risk permission grant. The traffic pattern may exhibit beaconing characteristics, such as small, periodic, similarly-sized data transfers to a single IP address, or use rare TLS hashes.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Gateway Firewalls, Internal DNS Servers, Network Security Monitoring (NSM) Sensor Grid at egress points",
            "action": "1. (Symbolic) For any device with a suspicious permission grant, query Zeek dns.log for all DNS requests made by the device's IP in the subsequent 60 minutes. Enrich each requested domain with WHOIS data to find its creation date. Trigger an alert if the device communicates with any domain registered within the last 30 days or any destination IP/domain on a threat intelligence feed of known C2 servers. 2. (Statistical) From Zeek conn.log data for the flagged device, establish a 30-day baseline of connection metrics (duration, orig_bytes, resp_bytes). Alert if any connection post-permission-grant has metrics exceeding 3 standard deviations from the baseline mean. From Zeek ssl.log, identify the JA3 and JA3S hashes for TLS connections and alert if any observed hash has a prevalence of less than 1% across the enterprise network. 3. (Machine Learning) Ingest the device's post-grant network telemetry (bytes per minute, connections per minute, and protocol distribution from Zeek conn.log) into a pre-trained time-series anomaly detection model, such as an LSTM Autoencoder. Generate an alert if the model's reconstruction error for the traffic pattern is statistically significant (e.g., exceeds the 99th percentile of errors from the training data), indicating a deviation from normal behavior consistent with C2 beaconing."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]