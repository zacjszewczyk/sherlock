[
  {
    "information_requirement": "Is an adversary executing commands or scripts on our managed mobile endpoints? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A mobile application, not on a pre-defined allowlist, invokes a Java method for shell execution, specifically `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder`. Alternatively, an allowed application executes a command whose arguments are anomalous when compared to a historical baseline.",
            "data_sources": [
              "MDM/MTD API Call Log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized MDM/MTD log repository; Corporate VPN concentrators and Wi-Fi access points; Managed Android and iOS device fleet.",
            "action": "1. Symbolic Detection: Implement a SIEM rule that generates a high-severity alert when an `MDM/MTD API Call Log` event records a call to `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder`. The rule should trigger if either: (a) the source application is not on a pre-defined 'shell execution allowlist', or (b) the command argument contains high-risk strings from a maintained watchlist (e.g., 'su', 'pm install', 'am start', 'reboot', 'chmod').\n2. Statistical Analysis: For each application, establish a baseline of shell execution frequency and command argument characteristics over a 30-day rolling window. Generate a medium-severity alert if an application's execution frequency on a single device exceeds the 99th percentile for that application across the fleet. Additionally, calculate the Shannon entropy of the command string for every execution; flag any command whose entropy score is anomalously high (e.g., > $$ 4.5 $$) and is not part of a known-good command profile for that application, as this can indicate obfuscated or randomized commands.\n3. Machine Learning: For any device triggering a shell execution alert, enrich the event with network data. Query `Zeek conn.log` and `http.log` for all outbound connections within a 5-minute window following the API call. Utilize a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on each device's typical outbound data volume (`orig_bytes` from `conn.log`). Generate a correlated high-severity alert if the shell execution event is immediately followed by an anomalous spike in outbound traffic (e.g., reconstruction error > 3 standard deviations from the mean), particularly to a destination IP with a low reputation score or one not seen in the last 30 days."
          },
          {
            "description": "A shell process (e.g., `sh`, `bash`) is spawned by a parent process corresponding to a mobile application. This parent-child process relationship is either explicitly forbidden (parent is on a deny-list) or is statistically rare, having not been observed across the managed device fleet within a 90-day baseline period.",
            "data_sources": [
              "MDM/MTD Process Event Log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OS-level telemetry from managed mobile devices (via MTD agent); Centralized MDM/MTD log repository; Corporate DNS resolvers; Network egress points.",
            "action": "1. Symbolic Detection: Create a SIEM rule to generate a critical alert when an `MDM/MTD Process Event Log` shows a shell process (e.g., process name 'sh', 'bash') is spawned by a parent application that is on a defined deny-list (e.g., non-system apps, productivity suites, social media apps). The rule should automatically enrich the alert by querying any IP or domain found in the command-line arguments against a threat intelligence feed.\n2. Statistical Analysis: For every application in the fleet, build a historical profile of its legitimate child processes. Calculate the prevalence of each parent-child process pair (e.g., 'com.company.app' -> 'sh'). Generate a medium-severity alert when a new, previously unobserved parent-child pair is detected. Escalate the severity to high if this novel pair is observed on fewer than 0.5% of devices where the parent application is installed. Additionally, profile the command-line argument length for all shell processes and flag any execution where the length exceeds the 98th percentile for that specific parent process.\n3. Machine Learning: Develop a supervised classification model (e.g., Random Forest or Gradient Boosting) trained on labeled process event data. Extract features for each event, including: parent process name, child process name, command-line argument entropy, command-line length, parent process prevalence score (from the statistical method), and time of day. The model will classify each process creation event as benign or malicious. An event classified as malicious with high confidence ($$ p > 0.9 $$) should generate an alert for immediate analyst investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]