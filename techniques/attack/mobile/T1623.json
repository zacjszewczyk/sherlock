[
  {
    "information_requirement": "Is an adversary executing commands or scripts on our managed mobile endpoints? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A log from a Mobile Threat Defense (MTD) agent shows a non-system application invoking a shell execution method, such as `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder`. This becomes strong evidence if the command arguments are obfuscated (high entropy), contain suspicious keywords, or are statistically rare for the calling application.",
            "data_sources": [
              "MDM/MTD API Call Log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet; Centralized log aggregator/SIEM; Network egress gateways; VPN concentrators.",
            "action": [
              "Create a detection rule that searches `MDM/MTD API Call Logs` for events where `method_name` is `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder`. Trigger a high-severity alert if the `source_app_package_name` is not on a pre-approved allowlist OR if the `command_arguments` string contains keywords from a threat intelligence watchlist, such as `su`, `pm install`, `wget`, `curl`, `base64`, or `nc -l -p`.",
              "For each application package name, calculate a baseline of its shell command execution behavior over a 30-day period. Trigger a medium-severity alert if a new execution event meets any of the following statistical criteria: (a) the count of executions from a single device in a 24-hour period exceeds the 99th percentile for that application across the device fleet; (b) the Shannon entropy of the `command_arguments` string exceeds a dynamic threshold of 3 standard deviations above the application's mean entropy, or a static threshold of $$ 4.5 $$; (c) the command string is novel, having a Jaccard similarity score below $$ 0.2 $$ compared to the set of previously observed commands for that application.",
              "For devices with a shell execution alert, apply a pre-trained time-series anomaly detection model (e.g., LSTM Autoencoder) to analyze network flow data from `Zeek conn.log` in the 5 minutes following the event. Model features should include `bytes_out`, `bytes_in`, `connection_count`, and `distinct_destination_ip_count`. If the model's reconstruction error for the post-event window exceeds the 98th percentile of its normal error distribution, escalate the alert to critical. Enrich the escalated alert with destination IP reputation data from a threat intelligence provider and ASN information."
            ]
          },
          {
            "description": "A log from an MTD agent records a shell process (e.g., `sh`, `bash`) being created by a parent process that is a non-system mobile application. This is considered strong evidence if the parent application is on a deny-list for this behavior or if the specific parent-child process relationship is statistically rare across the device fleet.",
            "data_sources": [
              "MDM/MTD Process Event Log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet; Centralized log aggregator/SIEM; Corporate DNS resolvers; Network egress gateways.",
            "action": [
              "Deploy a SIEM rule that searches `MDM/MTD Process Event Logs` for events where `child_process_name` is `sh` or `bash`. Trigger a critical alert if the `parent_process_package_name` is found on a curated deny-list of applications forbidden from spawning shells (e.g., social media, games, productivity apps from untrusted developers). Automatically enrich the alert with device owner details from the MDM and threat intelligence data for any IP addresses or domains found within the process's command-line arguments.",
              "Establish a 90-day baseline of all parent-child process relationships across the mobile fleet. Trigger a medium-severity alert when a process creation event involves a parent-child pair observed on fewer than 1% of devices running the parent application. Escalate the alert to high severity if the command-line arguments' length for this rare pair exceeds the 98th percentile of all observed argument lengths, or if the arguments contain tokens (words) not seen in the baseline for that parent process.",
              "Apply a pre-trained supervised classification model (e.g., Gradient Boosting) to score each process creation event. Train the model using features such as parent package name (one-hot encoded), parent is system app (boolean), child process name (one-hot encoded), command-line argument entropy, command-line argument length, and the statistical parent-child prevalence score. If the model classifies an event as 'malicious' with a probability score $$ p > 0.9 $$, generate a high-severity alert for immediate SOC investigation. Implement a feedback loop where analyst dispositions are used to label new data for periodic model retraining."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]