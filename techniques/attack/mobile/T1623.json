[
  {
    "information_requirement": "Is an adversary executing commands or scripts on our mobile endpoints? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A mobile application invokes Java methods known to execute shell commands, such as `Runtime.exec()` or `ProcessBuilder`. Application vetting services can often detect these invocations [1].",
            "data_sources": [
              "Mobile Threat Defense (MTD) API Call Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices",
            "action": "Continuously monitor MTD logs for any application invoking `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder`. Create and maintain a baseline of applications that are authorized to use these functions (e.g., device management agents, specialized tools). Generate a high-severity alert for any non-baselined application attempting these API calls. For each alert, correlate the device and timestamp with network connection logs (Zeek conn.log) within a 5-minute window to identify any subsequent command-and-control traffic. Analyze the destination IP/domain against threat intelligence feeds and for statistical rarity across the enterprise."
          },
          {
            "description": "An unexpected shell process (e.g., `sh`, `bash`) is observed as a child process of a non-system mobile application.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Process Creation Logs",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint processes on corporate-managed mobile devices",
            "action": "Using MTD process creation logs, monitor for any mobile application spawning a shell process (e.g., `sh`, `bash`, `zsh`). Establish a baseline of normal parent-child process relationships for all managed applications. Use statistical analysis to flag any anomalous relationship (e.g., a parent process that has never spawned a shell before). For any identified anomalous shell execution, calculate the Shannon entropy of the command-line arguments; high entropy scores (> 3.5) may indicate obfuscated or packed commands. Correlate the device and timestamp with Zeek dns.log to check for any unusual DNS queries immediately following the process creation, which could indicate C2 communication."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]