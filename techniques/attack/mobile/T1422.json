[
  {
    "information_requirement": "Is an adversary discovering the network configuration of our corporate mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1422",
        "name": "System Network Configuration Discovery",
        "evidence": [
          {
            "description": "On an MDM-managed Android device (version 10 or later), a non-system, non-carrier, or non-default SMS application requests or is granted the 'READ_PRIVILEGED_PHONE_STATE' permission, which is logged by an MTD/MDM solution.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Application Scan Logs",
              "Mobile Device Management (MDM) Policy Compliance Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android mobile device fleet; MDM/MTD management servers; Network egress points",
            "action": "1. (Symbolic) Query MDM/MTD logs for all events indicating a request for or grant of the 'READ_PRIVILEGED_PHONE_STATE' permission. For each event, check if the application's package name is on a pre-defined allow list of system, carrier, and approved business applications. Trigger an alert for any application not on the allow list. 2. (Statistical) For each alert generated by the symbolic rule, extract the device's internal IP address and the event timestamp. Query Zeek conn.log for all outbound connections (`id.orig_h`) from that IP within a 15-minute window of the event. Calculate the historical prevalence of each destination IP (`id.resp_h`) and destination port (`id.resp_p`) pair across the entire mobile subnet over the last 30 days. Flag connections where the destination IP/port pair has been contacted by less than 1% of the mobile device fleet as statistically rare and requiring investigation. 3. (Machine Learning) Develop a Random Forest or Gradient Boosting classifier to produce a risk score for applications requesting sensitive permissions. Use features from MDM/MTD logs such as: application category, developer reputation, number of installs, requested permission set (one-hot encoded), and install source (e.g., Google Play Store vs. side-loaded). For any new application requesting 'READ_PRIVILEGED_PHONE_STATE', use the pre-trained model to generate a risk score. Escalate applications with a score above a pre-determined threshold (e.g., > 0.85) for manual review."
          },
          {
            "description": "An application on an Android device instrumented with an EDR/MTD agent generates a high-frequency burst of calls to the 'java.net.NetworkInterface' API, deviating significantly from its own historical baseline or from the baseline of similar applications.",
            "data_sources": [
              "Mobile EDR/MTD API Call Monitoring Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices with EDR/MTD agents installed, especially those used by high-value targets; EDR/MTD management servers; Network traffic monitoring points",
            "action": "1. (Symbolic) Create a detection rule in the Mobile EDR/MTD platform to trigger an immediate alert whenever a call to the 'java.net.NetworkInterface' API is made by an application whose package name or signing certificate hash matches a known malicious indicator from integrated threat intelligence feeds. 2. (Statistical) For each monitored application, ingest API call counts for 'java.net.NetworkInterface' into a time-series database, aggregated into one-minute intervals. For each application, calculate a 30-day rolling baseline (mean and standard deviation) of call frequency. Generate an alert if the call count in any one-minute interval exceeds three standard deviations above the historical mean for that specific application. 3. (Machine Learning) For high-value applications or devices, deploy a time-series anomaly detection model, such as an LSTM-based autoencoder, trained on historical 'java.net.NetworkInterface' API call data. The model learns the normal temporal patterns of API usage for each application. Generate an alert when the model's reconstruction error for a new time interval surpasses a dynamically tuned threshold, indicating a behavioral anomaly inconsistent with previously learned patterns."
          },
          {
            "description": "Within minutes of a new application installation or update logged by an MDM/MTD, the associated mobile device initiates a network connection to a domain or IP address that is either statistically rare across the device fleet or has characteristics of a Domain Generation Algorithm (DGA).",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM/MTD Application Install Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers; MDM management servers",
            "action": "1. (Symbolic) Continuously correlate MDM/MTD application installation logs with network traffic logs. For any network connection originating from a device within five minutes of a new application installation, check the destination domain (from Zeek dns.log `query`) and destination IP address (from Zeek conn.log `id.resp_h`) against a threat intelligence feed of known malicious C2 infrastructure. Generate a critical alert on any match. 2. (Statistical) For every DNS query recorded in Zeek dns.log originating from the mobile subnet, calculate the Shannon entropy of the queried domain name (`query` field, excluding the TLD). Flag domains with an entropy score greater than 3.5 that are not on an organizational allow list. Concurrently, calculate the prevalence of the resolved IP address across the entire enterprise over the last 30 days. An event combining a high-entropy domain and a low-prevalence IP (e.g., seen by <5 devices) constitutes a high-confidence indicator of potential DGA activity. 3. (Machine Learning) Apply a density-based clustering algorithm like DBSCAN to network connection metadata from the mobile fleet, sourced from Zeek conn.log. Use a feature vector for each connection that includes destination port (`id.resp_p`), protocol (`proto`), connection duration (`duration`), and total bytes transferred (`orig_bytes` + `resp_bytes`). Label large, dense clusters as normal network behavior. Flag all connections classified as noise (outliers) by the model for investigation, as these represent anomalous network patterns potentially linked to post-discovery C2 communication."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]