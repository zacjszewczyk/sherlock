[
  {
    "information_requirement": "Is an adversary collecting call log data from our managed mobile devices? (TA0035 - Collection) (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.002",
        "name": "Call Log",
        "evidence": [
          {
            "description": "An Android application, not present on the corporate application allowlist, is identified in the UEM inventory with the 'android.permission.READ_CALL_LOG' permission listed in its manifest.",
            "data_sources": [
              "MDM/UEM Application Inventory Log",
              "AndroidManifest.xml",
              "Application Allowlist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) console, Cloud-based application sandbox, Corporate application store",
            "action": [
              "Query UEM application inventory logs to identify all applications requesting the 'android.permission.READ_CALL_LOG' permission. For each identified application, cross-reference its package name and signing certificate against the corporate application allowlist. Generate a high-severity alert for any application that requests the permission but is not on the allowlist.",
              "Analyze the UEM application inventory to compute the prevalence of all requested permissions across the entire mobile device fleet. Isolate permissions that fall into the 99th percentile for rarity (i.e., requested by <1% of apps). Generate a medium-severity alert if an application requests 'android.permission.READ_CALL_LOG' and this permission is also flagged as statistically rare within the environment.",
              "Utilize a pre-trained machine learning classifier (e.g., Random Forest, Gradient Boosting) within a sandboxed environment to analyze application characteristics, including permissions, API calls, and code structure. If an application requests 'android.permission.READ_CALL_LOG' and is classified as 'malicious' or 'Potentially Unwanted Application (PUA)' with a model confidence score greater than 0.85, trigger an automated response to block the application and generate a critical incident for immediate SOC review."
            ]
          },
          {
            "description": "A process running on a managed Android endpoint, whose SHA256 hash is not on an approved application allowlist, makes a runtime API call to access the call log content provider URI 'content://call_log/calls'.",
            "data_sources": [
              "Mobile EDR Process and API monitoring logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android endpoints, Unified Endpoint Management (UEM) console, SIEM platform",
            "action": [
              "Deploy a mobile EDR rule to monitor for and alert on any process accessing the Android call log content provider URI ('content://call_log/calls'). For each triggered event, compare the SHA256 hash of the source process against a centrally managed allowlist of approved applications. Generate a high-severity alert for any access from a process not on the allowlist.",
              "Ingest mobile EDR API access logs into a SIEM. For each application on each device, establish a 14-day rolling baseline of call log access frequency by calculating the mean and standard deviation of accesses per hour. Generate a medium-severity alert when an application's hourly access count exceeds its baseline by more than three standard deviations.",
              "Train a sequence analysis model, such as an LSTM autoencoder, on historical API call data from approved applications to learn normal behavior patterns. Monitor real-time API call sequences from all managed devices. Generate a critical alert if the model detects an anomalous sequence where access to the call log provider is followed within a 60-second window by suspicious subsequent actions like network connection initiation, writing to external storage, or invoking encryption APIs."
            ]
          },
          {
            "description": "A managed mobile device's total outbound network traffic in a one-hour window exceeds its 30-day 98th percentile for that hour, and this anomaly occurs within 24 hours of installing an application that has the 'android.permission.READ_CALL_LOG' permission.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM/UEM Application Installation Event Logs",
              "Threat Intelligence Platform Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi network gateways, VPN concentrators, DNS resolvers",
            "action": [
              "Implement a SIEM correlation rule that joins MDM/UEM logs with network flow logs and a threat intelligence feed. Generate a critical alert when all of the following conditions are met for a single device: 1) The MDM/UEM log shows the installation of an app with the 'READ_CALL_LOG' permission. 2) Within 24 hours of installation, a Zeek conn.log record from the device's IP shows an outbound connection. 3) The destination IP or resolved domain of that connection matches an entry on a C2 server threat intelligence list.",
              "For each managed mobile device, create an hourly scheduled SIEM query to calculate its 30-day, 98th percentile baseline for outbound data volume using 'orig_bytes' from Zeek conn.log. Generate a high-severity alert if a device's outbound data volume in any given hour exceeds this baseline AND MDM/UEM logs show an application with 'READ_CALL_LOG' permission was installed within the preceding 24 hours. Enrich this alert by calculating the Shannon entropy of the device's DNS queries ('qname' from Zeek dns.log) in the same hour; a high entropy score suggests potential DGA activity and increases alert priority.",
              "For each device, employ a time-series forecasting model (e.g., ARIMA, Prophet) on historical Zeek conn.log data to predict its expected outbound traffic volume. Generate an alert if the actual traffic volume significantly deviates from the model's prediction interval. Concurrently, use an unsupervised clustering algorithm (e.g., DBSCAN) on network connection features (destination port, JA3/JA3S hash, connection duration, protocol) to identify outlier network flows. Escalate the alert priority if both anomalies occur within 24 hours of an application installation involving the 'READ_CALL_LOG' permission."
            ]
          }
        ]
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]