[
  {
    "information_requirement": "Is an adversary establishing command and control with a mobile device using a non-standard port? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1509",
        "name": "Non-Standard Port",
        "evidence": [
          {
            "description": "A connection originating from a mobile device IP address utilizes a service (e.g., 'ssl' as identified by Zeek) on a destination port that is not the IANA-registered standard port for that service (e.g., 'ssl' on port 8080 instead of 443).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate and guest Wi-Fi network segments, VPN termination points, Mobile Device Management (MDM) traffic inspection points, and Internet gateway proxies where mobile device traffic is visible.",
            "action": "Symbolic: 1. Create and maintain a lookup table of IANA standard ports for common services identified by Zeek (e.g., ssl:443, http:80, smtp:25). 2. For each new connection in `Zeek conn.log` from a mobile device IP range, compare the `service` and `id.resp_p` (destination port) against the lookup table. 3. Alert if the port does not match the standard for the identified service. 4. Enrich alerts by cross-referencing the destination IP against a threat intelligence feed of known C2 servers. | Statistical: 1. Using at least 30 days of `Zeek conn.log` data, compute the frequency of every unique `(service, id.resp_p)` tuple observed across the enterprise. 2. Calculate the percentile rank for each tuple's frequency. 3. Monitor new connections from mobile device IP ranges. 4. Alert when a connection's `(service, id.resp_p)` tuple falls below a low percentile threshold (e.g., 2nd percentile), indicating a statistically rare and suspicious pairing. | Machine Learning: 1. Generate a labeled dataset from historical `Zeek conn.log` data, marking known benign and malicious connections. 2. Engineer features for each connection, including: `id.resp_p` (destination port), a boolean for non-standard port, `proto` (protocol), `duration`, `orig_bytes`, `resp_bytes`, and a boolean for `is_mobile_source`. 3. Train a supervised classification model (e.g., Random Forest, Gradient Boosting) to predict the probability of a connection being malicious. 4. Deploy the model to score new connections from mobile devices in real-time, generating a high-priority alert for connections with a score exceeding a tuned threshold (e.g., > 0.90)."
          },
          {
            "description": "A mobile device exhibits a rhythmic beaconing pattern to an external IP address on a non-standard port, characterized by highly regular time intervals between connections and consistent connection durations.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points for all corporate and guest networks, specifically monitoring subnets allocated to mobile devices via DHCP for Wi-Fi or VPN pools.",
            "action": "Symbolic: 1. In `Zeek dns.log`, monitor DNS queries originating from mobile IP ranges for domains with high Shannon entropy scores in the subdomain or domain name, indicative of Domain Generation Algorithms (DGA). 2. Correlate the timestamp and source IP of a high-entropy DNS query with subsequent connections in `Zeek conn.log`. 3. Generate an alert if the connection following a suspicious DNS query goes to a non-standard port. | Statistical: 1. Over a rolling 1-hour window, group connections from `Zeek conn.log` by the tuple `(id.orig_h, id.resp_h, id.resp_p)`. 2. For groups where `id.orig_h` is in a mobile IP range, `id.resp_p` is a non-standard port, and the connection count exceeds a threshold (e.g., 15), calculate statistics on the time delta between consecutive connections. 3. Alert if the standard deviation of the time delta (jitter) is exceptionally low (e.g., < 2 seconds) and the standard deviation of the connection `duration` is also low, indicating automated, machine-like communication. | Machine Learning: 1. For each `(source_ip, dest_ip, dest_port)` tuple from mobile devices, construct a time series of connection event timestamps. 2. Apply a time series anomaly detection model (e.g., Seasonal-Hybrid ESD) to identify patterns that are overly periodic. 3. Alternatively, train an LSTM (Long Short-Term Memory) autoencoder on time series of benign connection patterns. 4. Process new connection patterns through the trained autoencoder and alert when the reconstruction error is high, indicating a deviation from normal traffic patterns."
          },
          {
            "description": "An SSL/TLS connection from a mobile device to a non-standard port displays suspicious certificate attributes (e.g., self-signed, short validity, anomalous issuer) or uses a client-server TLS fingerprint (JA3/JA3S) that is rare within the environment.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors with Deep Packet Inspection (DPI) at internet gateways, VPN concentrators, and forward proxies. Mobile Device Management (MDM) solutions with traffic inspection capabilities are also a key NAI.",
            "action": "Symbolic: 1. Join `Zeek conn.log` with `Zeek ssl.log` on the connection UID. 2. Alert on any connection where the source IP is a mobile device, the destination port is not 443, and the `validation_status` in `ssl.log` is 'self-signed certificate' or 'unable to get local issuer certificate'. 3. Further enrich these alerts by joining with `Zeek x509.log` to check for certificate validity periods of less than 90 days and cross-referencing the certificate's `issuer` and `subject` fields against a deny-list of known malicious indicators. | Statistical: 1. From 30 days of `Zeek ssl.log` data, create frequency distributions for all observed JA3 (client) and JA3S (server) hashes. 2. For new SSL/TLS connections from mobile devices to non-standard ports, look up the frequency of the connection's JA3 and JA3S hash. 3. Generate an alert if either the JA3 or JA3S hash falls into a low-frequency percentile (e.g., bottom 1%), indicating a client application or server software rarely seen in the environment. | Machine Learning: 1. Use an unsupervised clustering algorithm (e.g., DBSCAN or K-Means) on features extracted from `Zeek ssl.log`, `conn.log`, and `x509.log` for connections from mobile devices. 2. Key features should include: destination port, a boolean for non-standard port, TLS version, JA3 hash (as a categorical feature), certificate validity duration, a one-hot encoded `validation_status`, and connection `duration`. 3. Automatically flag and queue for analyst review any small, dense clusters that form, especially those characterized by a combination of non-standard ports, rare JA3 hashes, and self-signed certificates."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]