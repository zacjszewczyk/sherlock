[
  {
    "information_requirement": "Has an adversary exploited a software vulnerability to gain initial access to a mobile device? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1664",
        "name": "Exploitation for Initial Access",
        "evidence": [
          {
            "description": "A mobile device's network traffic matches a known malicious indicator (IP, domain, SSL/TLS fingerprint) or deviates significantly from its established baseline in terms of data volume, destination port entropy, or observed JA3/JA3S hashes.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, Guest Wi-Fi network, VPN concentrators, Internet gateway proxy/firewall logs, and MDM/UEM servers.",
            "action": [
              "Continuously ingest mobile-specific threat intelligence feeds containing malicious IPs, domains, and SSL/TLS certificate hashes (e.g., JA3, JA3S). Create a real-time query against Zeek `conn.log`, `dns.log`, and `ssl.log` to match connections from mobile device IP ranges against these indicators. Specifically, check `conn.log` for destination IPs (`id.resp_h`), `dns.log` for requested domains (`query`), and `ssl.log` for certificate hashes (`ja3`, `ja3s`). Trigger a high-severity alert upon any match.",
              "For each unique mobile device ID (e.g., MAC address), establish a 30-day rolling baseline of network behavior using Zeek logs. Calculate hourly aggregates for: total bytes transferred (sum of `orig_bytes` and `resp_bytes` in `conn.log`), Shannon entropy of destination ports (`id.resp_p` in `conn.log`), and the count of unique JA3/JA3S hashes from `ssl.log`. Generate a medium-severity alert if any metric for a device exceeds a dynamic threshold, such as the 98th percentile of its own historical distribution.",
              "Develop a per-device anomaly detection model using a Long Short-Term Memory (LSTM) Autoencoder. For each device, create training data by sequencing its historical network connections from Zeek `conn.log` into fixed-length vectors (e.g., features: `duration`, `orig_bytes`, `resp_bytes`, `proto`, `service`). Train the autoencoder to reconstruct these sequences. In real-time, feed new connection sequences into the trained model and calculate the reconstruction error. Generate a medium-severity alert if the reconstruction error exceeds the 99th percentile of errors observed on the training data, indicating a pattern of network activity that is significantly different from the device's learned norm."
            ]
          },
          {
            "description": "Analysis of network file transfers shows a mobile device downloading a file that either: (a) has a hash matching a known mobile malware signature, (b) is a mobile application package (.apk, .ipa) originating from a domain not on the approved app store list, or (c) exhibits a mismatch between its declared MIME type and its Zeek-inferred file type.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway, Web Proxy, Guest Wi-Fi network, Corporate Wi-Fi network segments, and Content Delivery Network (CDN) logs.",
            "action": [
              "Implement two detection rules. Rule 1: Continuously monitor Zeek `files.log` and compare the `md5` and `sha1` hashes of all files transferred to mobile devices against a threat intelligence feed of mobile malware signatures; generate a high-severity alert on a match. Rule 2: Monitor Zeek `http.log` for file downloads with URI paths ending in `.apk` or `.ipa`. For each, check if the `host` header value is on a pre-approved allowlist of official app stores (e.g., `play.google.com`, `apps.apple.com`). If the host is not on the allowlist, generate a high-severity alert for a potential sideloading attempt.",
              "For each mobile device, establish a 30-day baseline of file transfer characteristics using Zeek `files.log`. Calculate the daily rate of MIME type mismatches (where `mime_type` from the server does not match Zeek's `inferred_mime_type`). Compare this rate to both the device's own historical average and the fleet-wide average. Generate a medium-severity alert if a device's daily mismatch rate exceeds 3 standard deviations above its own baseline OR the fleet-wide baseline, suggesting an unusual amount of potentially obfuscated file downloads.",
              "Implement a URL scoring model for file downloads to mobile devices. For each download event in Zeek `http.log`, extract the full URL. Engineer features from the URL, such as length, query parameter entropy, number of subdomains, TLD, and domain age/reputation from external services. Use a pre-trained classification model (e.g., Gradient Boosting, Random Forest) to assign a maliciousness probability score (0.0 to 1.0) to each URL. Generate a medium-severity alert for analyst review for any file download originating from a URL with a score above a set threshold (e.g., 0.9)."
            ]
          },
          {
            "description": "A mobile device exhibits a network pattern indicative of a zero-click exploit: an inbound connection from a known push notification service is immediately followed (e.g., within 5 seconds) by an outbound connection to a low-reputation, newly observed, or known-malicious domain, suggesting automated activity without user interaction.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network, Guest Wi-Fi network, Internet Gateway, and VPN termination points.",
            "action": [
              "Create and maintain an allowlist of IP subnets for legitimate mobile push notification services (e.g., Apple Push Notification Service, Firebase Cloud Messaging) and a blocklist of known malicious C2 domains/IPs. Implement a stateful correlation rule that triggers when, for the same mobile device IP (`id.orig_h` or `id.resp_h`), an inbound connection from an allowlisted push service IP is followed within a 60-second window by an outbound connection to a blocklisted IP or domain. Generate a critical-severity alert upon this sequence detection.",
              "For each mobile device, analyze historical Zeek `conn.log` data to model user behavior. Specifically, identify all inbound connections from push notification service IPs and find the next outbound connection initiated by the device. Calculate the time delta for each pair and create a historical probability distribution of these deltas for the device. Generate a high-severity alert if a new event occurs where the time delta is a statistical outlier (e.g., below the 5th percentile of the user's historical distribution) AND the destination is a domain not previously visited by that device in the last 30 days.",
              "Apply a Hidden Markov Model (HMM) to model the sequence of network events for each mobile device. Define states based on connection properties, such as `Idle`, `Inbound_Push_Notification`, `Outbound_Web_Browsing`, `Outbound_API_Call`. Train a per-device HMM on historical sequences of Zeek log events to learn the normal transition probabilities between these states. In real-time, evaluate new event sequences. Flag any state transition with an extremely low probability under the model, such as a direct transition from `Inbound_Push_Notification` to an `Outbound_Beaconing_To_New_Domain` state, as a high-confidence anomaly indicative of a potential exploit."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]