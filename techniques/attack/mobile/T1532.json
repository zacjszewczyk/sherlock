[
  {
    "information_requirement": "Is an adversary collecting and archiving sensitive data on corporate mobile devices prior to exfiltration? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1532",
        "name": "Archive Collected Data",
        "evidence": [
          {
            "description": "A file with an archive extension (e.g., .zip, .rar, .7z, .tar.gz) is created by a process not associated with a standard file management or backup utility. The file's size is in the top 5% (95th percentile) for all files on that device, or it is created in a directory with a path entropy score greater than 3.0, and its creation is followed by a significant outbound network connection within 5 minutes.",
            "data_sources": [
              "MTD File Creation Events",
              "MDM File Inventory Logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories. Network egress points instrumented with Zeek for traffic correlation.",
            "action": "1. (Symbolic Logic) Continuously monitor MTD file creation events for new files with extensions `.zip`, `.rar`, `.7z`, or `.tar.gz`. For each match, cross-reference the creating application's package name and signing certificate against an allowlist of legitimate utilities (e.g., file managers, backup apps) and a denylist from threat intelligence. Alert if the creating app is on the denylist or not on the allowlist and has permissions to access sensitive data (e.g., contacts, photos). 2. (Statistical Analysis) For each managed mobile device, establish and maintain a 30-day rolling baseline of file sizes and directory path entropy scores. Calculate path entropy using the Shannon entropy formula on the character distribution of the full directory path. Alert if a newly created archive file's size exceeds the 95th percentile for that device OR its directory path entropy score is more than 2.5 standard deviations above the mean path entropy for that device. Correlate this alert with data from `Zeek conn.log` to escalate priority if the device initiates an outbound connection with `orig_bytes` > 1MB within 5 minutes of the file creation. 3. (Machine Learning) Train a Random Forest or Gradient Boosting classifier to predict malicious file staging events. Use features such as: `file_extension`, `file_size_percentile`, `directory_path_entropy`, `creating_app_package_name`, `creating_app_permissions`, `time_of_day`, `is_foreground_app`, and `subsequent_5min_outbound_bytes` (from Zeek conn.log). A model prediction with a high confidence score (>0.90) indicates a likely malicious data collection and archiving event."
          },
          {
            "description": "A process on a mobile device, running while the device screen is off, sustains CPU utilization above 80%, memory usage above the 95th percentile, and disk write I/O greater than the 98th percentile of its normal background activity for a continuous 60-second window. This behavior is not attributable to a whitelisted system, update, or backup process.",
            "data_sources": [
              "MTD Performance Logs",
              "MDM Device Health Metrics",
              "Mobile OS Performance Counters"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents.",
            "action": "1. (Symbolic Logic) For any process exhibiting sustained high resource consumption (CPU, memory, disk I/O) while the device screen is off, immediately check its package name and signing certificate. Generate a high-severity alert if the process matches a known malicious signature from a threat intelligence feed. Generate a medium-severity alert if the process is not on a pre-defined allowlist of legitimate background tasks (e.g., system updates, cloud backups, email sync). 2. (Statistical Analysis) For each application on each device, create separate 30-day rolling baselines of CPU utilization, memory usage, and disk write I/O for 'screen on' and 'screen off' states. Using a 60-second sliding window, calculate the average for each metric. Generate an alert if the moving average for a process during a 'screen off' state simultaneously exceeds 3 standard deviations above the mean for its CPU, memory, and disk I/O baselines. 3. (Machine Learning) Deploy a multivariate time-series anomaly detection model, such as an LSTM Autoencoder, trained on telemetry from healthy devices. The model should be trained on feature vectors including `cpu_utilization`, `memory_rss`, `disk_write_io_bytes`, `network_tx_bytes`, and a binary `screen_status` flag. An anomaly is flagged when the model's reconstruction error for a given time window surpasses a dynamically calculated threshold (e.g., 99th percentile of reconstruction errors on validation data), indicating a behavioral pattern inconsistent with the device's learned normal operation."
          },
          {
            "description": "An application without a clear business need (e.g., not a file manager, cloud storage client, or secure messenger) invokes a sequence of API calls including data access (e.g., Contacts, Photos), followed by compression (`java.util.zip`, `Compression.framework`) or encryption (`javax.crypto`, `CommonCrypto`), and finally a network connection (`java.net.Socket`, `CFSocket`). This activity occurs while the app is in the background or the screen is off.",
            "data_sources": [
              "MTD API Call Monitoring Logs",
              "Application Sandboxing Logs",
              "MDM Application Inventory and Permissions Logs",
              "OS-level API tracing logs (e.g., Frida traces)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications. This includes monitoring system library calls for file system access, data access (contacts, photos), compression, cryptography, and networking.",
            "action": "1. (Symbolic Logic) Define high-risk API call chains, such as `[Read_Contacts -> Zip_Data -> Open_Socket]`. Monitor MTD API logs for applications executing these chains within a 60-second window. Cross-reference the application's category from the MDM inventory; if the category is not on an allowlist (e.g., 'Productivity', 'Communication'), generate a high-severity alert. 2. (Statistical Analysis) For each application, baseline the n-gram (n=3) frequency of its API call sequences over a 30-day period. Calculate the Shannon entropy of API call types within a 5-minute sliding window. Generate an alert if an application executes a rare API call sequence (e.g., a sequence never seen before or in the bottom 1% of frequency) or if the API call entropy for a window exceeds 3 standard deviations from the application's established norm, particularly if the sequence includes compression or encryption APIs. 3. (Machine Learning) Train a sequence-aware classifier, such as a Recurrent Neural Network (RNN) or a transformer model, on sequences of API calls to predict malicious behavior. Features for each step in the sequence can include `api_call_name`, `app_permissions`, `is_foreground_app`, and `time_since_last_call`. The model should be trained to classify an entire sequence as benign or malicious. A high probability score for a sequence containing data access, compression/encryption, and networking calls indicates a likely attempt to archive and exfiltrate data."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]