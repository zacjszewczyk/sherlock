[
  {
    "information_requirement": "Is the adversary using geofencing to evade detection or analysis on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627.001",
        "name": "Geofencing",
        "evidence": [
          {
            "description": "An application's manifest requests high-risk location permissions (e.g., Android: `ACCESS_BACKGROUND_LOCATION`; iOS: `NSLocationAlwaysAndWhenInUseUsageDescription`) and its functional category, as defined by the app store or internal policy, does not justify such persistent access (e.g., a 'Calculator' app requesting background location).",
            "data_sources": [
              "MDM App Inventory Report",
              "Static Analysis Tool Output (e.g., MobSF JSON report)",
              "Corporate Application Policy/Whitelist",
              "Application Store Metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) Platform, Application Vetting Sandbox, Corporate App Store/Repository, Managed Mobile Endpoints",
            "action": "1. (Symbolic) Query MDM inventory data to identify all applications with `ACCESS_BACKGROUND_LOCATION` or `requestAlwaysAuthorization` permissions. Cross-reference this list against an approved application whitelist and a policy-defined list of application categories (e.g., 'Navigation', 'Ride-sharing') where such permissions are justified. Alert on any application that has these permissions but is not on the whitelist or in an approved category. 2. (Statistical) For all managed mobile applications, group by their App Store category. For each category, calculate the prevalence rate (percentage of apps) for each high-risk location permission. Establish a baseline prevalence for each category (e.g., 80% of 'Navigation' apps request 'Always' access). Alert on any application that requests a permission where the prevalence in its category is below a defined threshold (e.g., less than the 5th percentile), flagging it as a statistical outlier. 3. (Machine Learning) Implement a classification model (e.g., Random Forest) trained on a labeled dataset of 'benign' and 'malicious' applications. Engineer features from static analysis reports, including: the full list of requested permissions (one-hot encoded), presence of specific geofencing API calls (e.g., `GeofencingClient`, `CLLocationManager`), app category, and indicators of code obfuscation. Deploy the model to score all new and updated applications, generating a risk score from 0 to 1. Applications with a score exceeding a threshold (e.g., 0.8) are flagged for manual review."
          },
          {
            "description": "During dynamic analysis in a sandboxed environment, a simulated change in the device's GPS coordinates from a 'permitted' to a 'restricted' region results in an observable, programmatic change in application behavior within 120 seconds. This is confirmed by one or more of the following: 1) Cessation of periodic network callbacks to a specific IP address or domain. 2) A greater than 80% reduction in total egress data volume. 3) A shift in DNS requests from high-entropy, suspicious domains to low-entropy, common service domains.",
            "data_sources": [
              "Mobile Application Vetting Sandbox Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Static Analysis Report (APK/IPA)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Vetting Sandbox, Network Egress Points (VPN, Corporate Wi-Fi), DNS Resolvers, Web Proxy Servers",
            "action": "1. (Symbolic) In a dynamic analysis sandbox, establish a 10-minute baseline of the application's network activity using Zeek logs. Identify any periodic connections (beacons) defined as connections to the same destination IP with a consistent time interval (+/- 10%) and similar payload size. Simulate a GPS location change to a country outside the organization's area of operations. Alert if the identified beaconing activity ceases and does not resume for at least 5 minutes after the location change. 2. (Statistical) During the sandboxed test, capture all network traffic via Zeek logs. In 60-second windows, calculate two metrics: 1) The Shannon entropy of the set of requested second-level domains from `dns.log`. 2) The 90th percentile of outbound bytes (`orig_bytes`) per connection from `conn.log`. After simulating the GPS location change, compare the post-change moving average of these metrics to the pre-change baseline. Alert if the DNS entropy drops by more than 1.5 standard deviations AND the 90th percentile of `orig_bytes` drops by more than 75%. 3. (Machine Learning) Train a multivariate time-series anomaly detection model (e.g., LSTM autoencoder) on network telemetry from a baseline set of known-good sandboxed applications. The feature vector for each time step (e.g., 30 seconds) should include: connection count, total `orig_bytes`, total `resp_bytes`, DNS request count, and DNS request entropy. During analysis of a new app, feed its telemetry into the model. Introduce the simulated GPS location change as an exogenous event. A high reconstruction error (anomaly score) immediately following the location change, which then settles into a new, lower-activity state, indicates a high probability of geofencing-based evasion."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]