[
  {
    "information_requirement": "Is an adversary using SSL Pinning to conceal Command and Control communications on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1521.003",
        "name": "SSL Pinning",
        "evidence": [
          {
            "description": "A mobile application's network traffic, when passed through a TLS-inspecting proxy, exhibits a statistically significant increase in TLS handshake failures. This is evidenced by a spike in non-'ok' validation_status codes (e.g., 'self signed certificate in certificate chain', 'unable to get local issuer certificate') in Zeek ssl.log for connections originating from mobile device subnets, while direct, uninspected connections from the same application to the same server may succeed.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic egress points for mobile device VLANs (corporate-managed and guest Wi-Fi) where a TLS-inspecting proxy is deployed; Zeek sensors monitoring pre- and post-proxy traffic; DHCP server logs to map IPs to mobile device hostnames; MDM logs for device context.",
            "action": "Symbolic: Create and maintain a watchlist of mobile applications known to use SSL pinning legitimately (e.g., banking, social media apps). For any application not on this list, trigger an alert if a connection from a mobile IP range recorded in Zeek ssl.log shows a validation_status other than 'ok' (e.g., 'self signed certificate in certificate chain') and the corresponding conn.log entry for the same uid shows a conn_state of 'REJ', 'RST0', or 'RSTRH'. Correlate the server_name from ssl.log against a threat intelligence feed of known mobile malware C2 domains. Statistical: For each mobile application (identified by server_name in ssl.log from mobile IP ranges), establish a 30-day rolling baseline of the hourly count of TLS validation failures (where validation_status is not 'ok'). Calculate the mean and standard deviation of these failures. Generate an alert if the current hourly failure count for an application exceeds its baseline mean by more than 3 standard deviations. Additionally, calculate the ratio of failed to successful connections per application; an alert is triggered if this ratio spikes above the 95th percentile of its historical values. Machine Learning: Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA or Prophet) on the stream of TLS validation failure counts per mobile application (server_name). The model will learn the normal daily and weekly patterns of failures. An alert is triggered when the model flags a residual error (the difference between predicted and actual failure counts) that is statistically significant (e.g., exceeds a predefined Z-score of 3.5), indicating a deviation from the learned pattern suggestive of newly introduced pinning for C2."
          },
          {
            "description": "A mobile application establishes a successful TLS connection (conn_state is 'SF' in Zeek conn.log) using a certificate that is either self-signed (certificate.issuer equals certificate.subject in Zeek x509.log) or issued by a statistically rare Certificate Authority (CA). A rare CA is defined as one that has issued less than a defined threshold (e.g., 0.05%) of all certificates observed across the network in the last 90 days. This indicates the application trusts a specific certificate or public key outside of the device's standard trust store.",
            "data_sources": [
              "Zeek x509.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Zeek sensors at internet egress points monitoring all outbound traffic from designated mobile device subnets; Certificate Transparency (CT) logs for external validation of observed certificates; Mobile Device Management (MDM) platforms to correlate application names, versions, and installation dates with network activity; Threat intelligence platform containing known malicious certificate hashes and C2 domains.",
            "action": "Symbolic: Periodically query Zeek x509.log for certificates where certificate.issuer equals certificate.subject. For each resulting certificate id, search Zeek ssl.log for associated connections (uid). Correlate with Zeek conn.log to verify the connection originated from a mobile IP range and was successful (conn_state = 'SF'). If the server_name in ssl.log matches a domain or the certificate hash matches an indicator on a threat intelligence feed for mobile malware, escalate as a high-priority incident. Statistical: On a daily basis, compute the frequency distribution of all certificate.issuer values from Zeek x509.log over the past 90 days to identify 'rare issuers' that account for less than 0.05% of all issuances. Monitor Zeek ssl.log for successful connections (conn_state = 'SF') from mobile devices to server_names using certificates from these rare issuers. For each such connection, calculate the Shannon entropy of the server_name FQDN. A combination of a rare issuer and a high entropy score (e.g., > 3.5) significantly increases the risk score of the connection and should trigger an alert. Machine Learning: Develop a classification model (e.g., XGBoost or Random Forest) to assign a risk score to each TLS session from a mobile device. Engineer features including: is_self_signed (binary, from x509.log), issuer_rarity_score (continuous, from statistical analysis), certificate_validity_duration_days, server_name_entropy, JA3 and JA3S hash rarity (based on historical frequency), and connection duration and data volume (from conn.log). Train the model on historical data labeled by analysts. Deploy the model to score new sessions in real-time; sessions exceeding a probability threshold (e.g., >0.90) are flagged for automated enrichment and immediate analyst investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]