[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile analysis or sandbox environments by performing system checks? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633.001",
        "name": "System Checks",
        "evidence": [
          {
            "description": "A mobile application, within the first 60 seconds of execution, makes API calls (e.g., Android's 'android.os.SystemProperties.get' or runtime execution of 'getprop') to query specific system properties or reads files associated with known emulator or sandbox environments. The properties or files queried match a watchlist of artifacts (e.g., properties containing 'goldfish', 'ranchu', 'qemu', 'vbox'; file path '/system/bin/qemu-props'), and this activity is not followed by application behavior that logically requires these properties.",
            "data_sources": [
              "Mobile EDR API call logs",
              "Mobile EDR file access logs",
              "Mobile Application Vetting (MAV) sandbox logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application sandboxing environment, Corporate-managed mobile devices (Android & iOS), Mobile Device Management (MDM) platform",
            "action": "1. (Symbolic) In a SIEM, create a detection rule that triggers on Mobile EDR logs where an application process calls a system property API or reads a file path matching a watchlist of high-confidence emulator artifacts (e.g., property contains 'goldfish', 'ranchu', 'qemu', 'vbox', 'generic_x86'; file path is '/system/bin/qemu-props', '/proc/cpuinfo' contains 'goldfish'). Enrich alerts with the application name, developer certificate, and installation source. 2. (Statistical) For each new application's first 60 seconds of execution, calculate the count of unique system properties queried. Establish a baseline distribution of this count from all applications, segmented by application category (e.g., 'Productivity', 'Games') if available. Generate an alert for any application whose query count exceeds the 98th percentile of its category-specific baseline. 3. (Machine Learning) Train a Random Forest classifier using labeled data from MAV sandbox runs. Engineer features including: a) a binary flag for each known emulator property queried, b) the total count of distinct properties queried, c) the entropy of queried property prefixes (e.g., 'ro.build.', 'ro.product.'), and d) the time-to-first-query. Deploy the model to assign an 'evasion probability' score to new applications during automated vetting."
          },
          {
            "description": "A mobile application queries for the list of available hardware sensors (e.g., accelerometer, gyroscope, light sensor) upon startup, but this query is not followed by a corresponding registration to listen for sensor data from the same process within a 60-second window. This indicates the query was for environment detection rather than legitimate functionality.",
            "data_sources": [
              "Mobile EDR API call logs",
              "MAV sandbox dynamic analysis logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Bring-Your-Own-Device (BYOD) fleet with security agents, Application sandboxing environment",
            "action": "1. (Symbolic) Construct a SIEM correlation rule that triggers when a process on a mobile device generates an API call event for 'SensorManager.getSensorList' (Android) or queries 'CMMotionManager' properties (iOS) and is not followed by an event for 'registerListener' (Android) or 'start...Updates' (iOS) from the same process ID within 60 seconds. 2. (Statistical) For each new application, query Mobile EDR logs to calculate the ratio of 'sensor list' queries to 'sensor register' calls during its initial 5 minutes of execution. Compare this ratio to a baseline established from legitimate applications, segmented by category (e.g., a fitness app may have a 1:1 ratio, a calculator app should have a 0:0 ratio). Alert on ratios exceeding three standard deviations from the category-specific mean. 3. (Machine Learning) Use a clustering algorithm like DBSCAN on features representing sensor interaction patterns for each app. Features should include: count of sensor list queries, count of sensor registrations, mean time between query and registration, count of unique sensor types queried, and a binary flag if GPS/Location sensor is queried but not used. Isolate and investigate clusters that exhibit a high query count and a low registration count."
          },
          {
            "description": "A mobile application queries for network interface details (e.g., MAC address, DHCP server), and this query is temporally correlated with a significant state change in the device's network traffic. The change manifests as a sudden cessation of diverse traffic, a pivot to using only encrypted DNS (DoH), or a shift to communicating with a single, non-CDN IP address after previously communicating with many diverse endpoints.",
            "data_sources": [
              "Mobile EDR API call logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway), DNS resolvers, Corporate-managed mobile devices",
            "action": "1. (Symbolic) Create a SIEM correlation rule that links a Mobile EDR alert for a network interface query (e.g., Android's 'NetworkInterface.getHardwareAddress()') to network logs from the same device IP. Generate an alert if, within 3 minutes of the query: a) the device's outbound connections in Zeek conn.log (excluding whitelisted OS/MDM traffic) cease for more than 10 minutes, OR b) all DNS traffic in dns.log switches to a non-corporate DNS-over-HTTPS (DoH) resolver identified in Zeek ssl.log by its SNI. 2. (Statistical) For each mobile device IP, use a script to process Zeek logs in 5-minute, non-overlapping windows. Calculate the Shannon entropy of destination IPs (conn.log) and requested domains (dns.log), and the ratio of unique domains to unique destination IPs. Generate an alert if the entropy score for destination IPs or domains drops by more than 80% between windows, or if the domain-to-IP ratio collapses towards 1:1, signaling a switch from normal browsing to hardcoded C2. 3. (Machine Learning) Implement a time-series anomaly detection model for each device. Create a multivariate time series from Zeek logs with features like 'bytes_out', 'distinct_dest_ips', 'connection_count', 'entropy of JA3 hashes in ssl.log', and 'ratio of UDP to TCP connections' per minute. Train an LSTM autoencoder on a baseline of normal behavior. A sharp spike in the model's reconstruction error indicates a significant behavioral deviation requiring investigation."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]