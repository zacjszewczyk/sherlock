[
  {
    "information_requirement": "Has an adversary illegitimately gained Device Administrator permissions on a corporate mobile device? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1626.001",
        "name": "Device Administrator Permissions",
        "evidence": [
          {
            "description": "An application's AndroidManifest.xml contains the 'android.permission.BIND_DEVICE_ADMIN' permission, and the application's package name and signing certificate SHA-256 hash are not present on an established organizational allow-list.",
            "data_sources": [
              "Mobile Threat Defense (MTD) static analysis report",
              "Mobile Application Management (MAM) application inventory",
              "Organizational Application Allow-list"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application repository; Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms; Security Information and Event Management (SIEM) platform for allow-list hosting and correlation.",
            "action": "1. (Symbolic) Create an automated static analysis rule to parse the AndroidManifest.xml from all submitted or discovered application packages (APKs). The rule must flag any APK declaring the 'android.permission.BIND_DEVICE_ADMIN' permission. For each flagged application, cross-reference its package name and signing certificate hash against the organizational allow-list of approved device administrators. Generate a high-severity alert for any application that is not on the allow-list. 2. (Statistical) For any application requesting BIND_DEVICE_ADMIN, calculate the Shannon entropy of its package name string. Using a baseline distribution of package name entropy from all known-good applications in the corporate app store, flag applications with entropy scores exceeding the 95th percentile. Concurrently, calculate the Jaccard similarity index between the full permission set of the candidate application and the permission sets of legitimate applications that also require device admin rights. A low Jaccard score (<0.5) combined with high entropy indicates a suspicious and outlier permission model. 3. (Machine Learning) Train a supervised classification model (e.g., Random Forest, Gradient Boosting) to produce a risk score for APKs. Extract features including: binary flag for 'BIND_DEVICE_ADMIN', count of total permissions requested, presence of other high-risk permissions (e.g., 'SYSTEM_ALERT_WINDOW', 'READ_SMS', 'INSTALL_PACKAGES'), package name entropy, string analysis for known obfuscation libraries (e.g., ProGuard, DexGuard), and the ratio of native code size to DEX file size. Label data using historical analysis of approved and malicious apps. Deploy the model to score all new applications, flagging those with a risk score above a tuned threshold for manual review."
          },
          {
            "description": "A 'Device Administrator Enabled' event is logged by an MDM/MTD agent for an application not on the approved allow-list, and this event occurs within a 5-minute window of network connections from the device to a newly observed or threat-intelligence-flagged domain or IP address.",
            "data_sources": [
              "MDM/MTD Audit Log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feed",
              "Organizational Application Allow-list"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoint devices (Android); Network egress points (e.g., corporate WiFi gateways, VPN concentrators); Security Information and Event Management (SIEM) platform for log aggregation and correlation.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers when a 'Device Administrator Enabled' event is received from MDM/MTD logs. The rule must first verify if the application package name in the event is on the approved device admin allow-list. If not on the list, the rule then queries network logs (Zeek conn.log, dns.log) for any connections or DNS lookups originating from the device's IP address within a +/- 5-minute window of the event. Generate a critical alert if any of the destination IPs or domains are found on a threat intelligence feed or have not been previously observed from any device in the organization in the last 30 days. 2. (Statistical) For each user, establish a baseline profile of device management activities using MDM/MTD logs, modeling the typical time-of-day and day-of-week distributions for such events. Use a Z-score or modified Z-score to detect 'Device Administrator Enabled' events that occur at statistically anomalous times (e.g., > 3 standard deviations from the user's mean activity time). Additionally, calculate the organizational prevalence of each package name being granted admin rights. An event for a package name with a prevalence of <1% across all devices should have its risk score significantly increased. 3. (Machine Learning) Develop a time-series anomaly detection model, such as an LSTM-based autoencoder, on event sequences from individual devices. The feature set for each event should include: event type (e.g., app_install, permission_change, admin_enabled), application package name, and the delta time from the previous event. Train the model on event logs from a large population of devices to learn normal sequences of device management. Deploy the model to analyze event streams in near-real-time. A high reconstruction error for a sequence containing a 'Device Administrator Enabled' event indicates a deviation from normal behavior and should trigger an alert for investigation."
          },
          {
            "description": "A rapid burst of automated input events (e.g., >10 touch events/sec with low coordinate variance) is detected in device logs within a 2-second window immediately preceding a 'Device Administrator Activated' event, indicating non-human interaction to bypass user consent.",
            "data_sources": [
              "Android logcat",
              "MTD agent behavioral log",
              "MDM/MTD Audit Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value or high-risk mobile devices enrolled in an enhanced MTD monitoring program capable of collecting and streaming detailed behavioral logs (e.g., logcat); SIEM or security data lake for log stream analysis.",
            "action": "1. (Symbolic) Using a stream processing engine or complex event processing (CEP) in a SIEM, create a rule to detect a specific high-fidelity sequence on a single device within a 2-second time window: 1) A UI window change event containing text like 'Activate device admin app?'. 2) A series of >10 input events (e.g., from logcat InputReader tag). 3) A 'Device Administrator Enabled' event from MDM/MTD logs. An alert from this rule indicates a likely automated permission grant via UI manipulation. 2. (Statistical) From detailed device logs (e.g., logcat, MTD agent), establish a per-user baseline for touch interaction patterns. Calculate two key metrics for 1-second rolling windows: touch event frequency and the standard deviation of touch X/Y coordinates. Flag any window where the event frequency exceeds the user's 99th percentile AND the coordinate standard deviation is below the user's 1st percentile (indicating robotic, localized tapping). If this statistical anomaly is temporally correlated (within 5 seconds of) a 'Device Administrator Enabled' event for a new application, escalate to a high-priority incident. 3. (Machine Learning) Train a sequence classification model (e.g., GRU, Transformer) on streams of low-level UI and system events (e.g., touch coordinates, window focus changes, key presses, system calls) from labeled datasets of benign user activity and malicious automation. Features should include event type, event metadata (e.g., window text), and precise inter-event timing. The model's objective is to classify short sequences of events (e.g., 3-5 seconds) as either 'human-driven' or 'machine-driven'. Deploy the model for real-time analysis on high-risk devices, triggering an alert when a sequence is classified as 'machine-driven' and culminates in a sensitive action like device admin activation."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]