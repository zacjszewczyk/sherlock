[
  {
    "information_requirement": "Is an adversary manipulating transmitted data on mobile devices to cause an impact?",
    "tactic_id": "TA0034",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1641.001",
        "name": "Transmitted Data Manipulation",
        "evidence": [
          {
            "description": "Evidence of clipboard content replacement is defined as an HTTP POST request originating from a mobile device IP address that contains a sensitive data pattern (e.g., cryptocurrency wallet address, IBAN) being transmitted to a destination domain that meets one or more of the following criteria: flagged as malicious by threat intelligence, has a low reputation score, was recently registered, or is statistically anomalous for the source device or user.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Platform Data",
              "DHCP Server Logs",
              "VPN Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate and guest Wi-Fi network access points, VPN concentrators, Perimeter firewalls, Web proxies, Cloud Access Security Broker (CASB)",
            "action": "1. (Symbolic) Imperative: Identify mobile device IP ranges from DHCP and VPN logs. In `Zeek http.log`, filter for HTTP POST requests originating from these IPs. Apply regular expressions to the POST body to detect patterns for cryptocurrency addresses or IBANs. For each match, extract the destination `Host` from the HTTP header. Enrich this domain using a threat intelligence platform to retrieve its reputation, age, and threat category. Correlate with `Zeek conn.log` to confirm connection details. Trigger a high-severity alert if a sensitive pattern is sent to a domain that is categorized as malicious, has a reputation score below a defined threshold (e.g., 40), was registered in the last 60 days, and is not on a corporate allowlist for financial transactions. 2. (Statistical) Imperative: For each unique device (mapped via IP/MAC), establish a 30-day rolling baseline of destination domains associated with POST requests containing sensitive data patterns. Calculate the frequency distribution of these destinations. Trigger a medium-severity alert when a sensitive data pattern is posted to a domain that falls outside the 95th percentile of the device's typical destinations. Additionally, for each unique user-form field combination, calculate a baseline Shannon entropy score for the submitted data. Trigger a medium-severity alert if a new submission's entropy deviates by more than 3 standard deviations from its baseline, indicating a significant and unexpected change in data structure. 3. (Machine Learning) Imperative: Develop a feature vector for each HTTP POST transaction containing sensitive data. Features should include: source IP geolocation, User-Agent string components, destination domain reputation, domain age, destination ASN, Shannon entropy of the POST body payload, POST request size in bytes, and time-of-day features (e.g., is_weekend, hour_of_day). Train a supervised classification model, such as a Random Forest, on a labeled dataset of benign and malicious transactions. Deploy the model to assign a real-time risk score (e.g., $$ [0, 1] $$) to new transactions. Trigger a high-severity alert for any transaction with a score exceeding a tuned threshold (e.g., > 0.85), indicating a high probability of data manipulation."
          },
          {
            "description": "Evidence is defined as a mobile device initiating a network connection to a destination that is either identified as malicious by threat intelligence or is a statistical outlier based on its connection metadata (e.g., domain, TLS/SSL fingerprint, connection frequency) when compared to the device's historical baseline.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Threat Intelligence Platform Data",
              "DHCP Server Logs",
              "VPN Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate DNS resolvers, Internet gateway, Wi-Fi network sensors, Cloud Access Security Broker (CASB)",
            "action": "1. (Symbolic) Imperative: From DHCP/VPN logs, identify mobile device IP address ranges. Monitor `Zeek dns.log` for queries from these IPs. Enrich each queried domain with threat intelligence (reputation, category). Correlate the DNS query with `Zeek conn.log` for connection state and `Zeek ssl.log` for TLS certificate details (e.g., `issuer`, `validation_status`). Trigger a high-severity alert if a connection is established to a domain categorized as command-and-control, malware, or phishing, or if the connection uses a self-signed TLS certificate not associated with an internal Public Key Infrastructure (PKI). 2. (Statistical) Imperative: For each mobile device, maintain a 30-day rolling baseline of contacted domains and their JA3/JA3S TLS fingerprints from `Zeek ssl.log` and `Zeek conn.log`. Calculate the hourly rate of 'first-time-seen' domains per device. Trigger a medium-severity alert if this rate exceeds the 98th percentile of the device's historical norm. Concurrently, trigger a medium-severity alert if the device initiates a connection using a JA3/JA3S hash that has never been seen for that device before, suggesting a new or modified client application is making the connection. 3. (Machine Learning) Imperative: Train an unsupervised anomaly detection model, such as an Isolation Forest, on a per-device basis using network connection features. The feature set should include: domain name characteristics (length, entropy, TLD), DNS query type, connection duration, total bytes sent/received (from `Zeek conn.log`), JA3 hash, and destination port. Use the trained model to generate an anomaly score for each new connection. Trigger an alert for connections with scores indicating a significant deviation from the device's normal network behavior, flagging them for analyst investigation."
          },
          {
            "description": "Evidence is defined as an application installed on a managed mobile device that programmatically registers a clipboard listener API (e.g., Android's `OnPrimaryClipChangedListener`), where this capability is not justified by a user-facing feature and the application also possesses permissions for network communication.",
            "data_sources": [
              "Mobile EDR application manifest data",
              "Mobile EDR API call monitoring logs",
              "MDM application inventory reports",
              "Application store metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices (corporate-owned or BYOD enrolled in MDM)",
            "action": "1. (Symbolic) Imperative: Using MDM/EDR, periodically inventory all installed applications on managed devices. Scan application manifests for declarations of clipboard listener APIs. Cross-reference this with the application's network permissions (e.g., `android.permission.INTERNET`). Trigger a high-severity alert for any non-system application that both registers a clipboard listener and has internet permissions, unless the application is on a pre-approved allowlist (e.g., password managers, official corporate apps). 2. (Statistical) Imperative: Scrape application store data to establish a baseline for the prevalence of clipboard listener usage within different app categories (e.g., Finance, Productivity, Games). For each managed device, when a new application is installed, determine its category. Trigger a medium-severity alert if the new app uses a clipboard listener and belongs to a category where this functionality is statistically rare (e.g., its usage prevalence is below the 10th percentile for that category), indicating an anomalous and potentially suspicious capability. 3. (Machine Learning) Imperative: Construct a feature vector for each installed application using data from MDM/EDR and app store metadata. Features should include: binary flags for all requested permissions, sensitive API calls made, app store category, user rating distribution, download count, developer history, and a binary flag for clipboard listener usage. Train a supervised classification model (e.g., Logistic Regression) to produce a Potentially Unwanted Application (PUA) risk score. An application receiving a high score, driven by the combination of clipboard listener usage and other risky features, should trigger an alert for analyst review and potential automated quarantine of the device."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]