[
  {
    "information_requirement": "Is an adversary collecting calendar entries from managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.001",
        "name": "Calendar Entries",
        "evidence": [
          {
            "description": "An application with calendar access permissions initiates a network connection to a destination matching threat intelligence feeds, or the connection's data volume is a statistical outlier compared to its historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile Device Management (MDM) Application Inventory",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network gateways, VPN concentrators, DNS resolvers, and MDM/UEM platforms monitoring mobile device traffic and application installations.",
            "action": "1. (Enrichment) From the MDM platform, generate a list of applications with calendar permissions (`android.permission.READ_CALENDAR` or `NSCalendarsUsageDescription`) and the devices they are installed on. Correlate devices to their assigned IP addresses using VPN or wireless access point logs. 2. (Symbolic Detection) For all network connections in Zeek conn.log originating from these device IPs, join the destination IP/domain with a threat intelligence feed of known malicious C2 or data exfiltration nodes. Alert on any match. 3. (Statistical Detection) For each unique application-device pair, calculate a baseline of total bytes transferred (`orig_bytes` + `resp_bytes`) per connection over the last 30 days. Alert when a new connection's data volume exceeds the 99th percentile of its baseline. Simultaneously, calculate the Shannon entropy of requested subdomains in Zeek dns.log for the destination domain; a high entropy score (e.g., > 3.5), suggesting DGA, combined with a high-volume data transfer to that domain, should be a high-priority alert. 4. (Machine Learning) Apply a trained time-series anomaly detection model, such as an LSTM autoencoder, to the total outbound data volume per device, aggregated into 1-hour windows. Trigger an alert if the model's reconstruction error for any given hour surpasses a dynamically calculated threshold (e.g., 3 standard deviations above the mean reconstruction error), indicating a significant deviation from the device's normal network behavior."
          },
          {
            "description": "An application on a managed device requests calendar access and exhibits multiple risk factors, including an application category not typically requiring calendar access, a low installation count across the organization, and absence from an approved application allowlist.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile Threat Defense (MTD) Scan Results",
              "Public App Store Metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform, Mobile Threat Defense (MTD) platform, and public application stores (e.g., Google Play, Apple App Store).",
            "action": "1. (Enrichment) Continuously ingest application inventory data (including bundle IDs, versions, and permissions) from the MDM/MTD platform. Maintain a curated allowlist of approved applications that are permitted to access calendar data. 2. (Symbolic Detection) For any newly installed application requesting calendar permissions, compare its bundle ID or signature against the internal allowlist and a denylist of known malicious applications. Generate an immediate, high-severity alert for any application found on the denylist. 3. (Statistical Detection) For each application with calendar permissions that is not on the allowlist, retrieve its public App Store category. Assign a risk score based on the category (e.g., 'Games' = high risk, 'Productivity' = low risk). Calculate the installation prevalence of the application across the device fleet. An application with a high-risk category and low prevalence (e.g., installed on <2% of devices) should be flagged for manual review. 4. (Machine Learning) Employ a trained classification model (e.g., Random Forest or Gradient Boosting) to generate a 'malice score' between 0 and 1 for each application requesting calendar access. Use features such as app category, developer reputation, number of other permissions requested, user ratings from public app stores, and enterprise installation prevalence. Rank all applications by this score to create a prioritized queue for security analysts to perform in-depth vetting."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]