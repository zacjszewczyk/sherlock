[
  {
    "information_requirement": "Is an adversary using a compromised mobile device's camera to collect video or images? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1512",
        "name": "Video Capture",
        "evidence": [
          {
            "description": "An installed mobile application requests camera permissions (`android.permission.CAMERA` or `NSCameraUsageDescription`) and meets one of the following criteria: 1) The application's developer is not on a corporate-approved software list. 2) The application's App Store category has a statistically low rate (<5th percentile) of apps requesting this permission. 3) The application is not present in the official corporate application catalog.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "App vetting platform scan results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed corporate mobile devices, Corporate application store, Mobile Application Management (MAM) console",
            "action": "First (Symbolic Logic), use an MDM inventory query to generate a list of all devices with applications that have camera permissions enabled. Join this list against the corporate allow-list of developers and application package names. Generate a medium-severity alert for any application not on the allow-list. Second (Statistical), from MDM application inventory logs, ingest application metadata including package name, category, and permissions. For each App Store category, calculate the percentage of applications that request camera access. Generate a medium-severity alert for any application that requests camera access and belongs to a category where this permission is in the bottom 5th percentile of prevalence. Third (Machine Learning), train a Gradient Boosting classifier using features from an app vetting platform and MDM logs, such as `{permissions_list, app_category, developer_reputation_score, number_of_downloads, user_rating, time_since_last_update}`. The model's target is a binary label ('malicious'/'benign') derived from historical analysis and sandbox reports. Continuously score all new and updated applications; flag any app with a 'malicious' prediction probability above a calibrated threshold (e.g., 0.85) for manual reverse engineering."
          },
          {
            "description": "A mobile device, identified by its IP address, exhibits a total outbound data volume (`orig_bytes`) in a 24-hour period that exceeds its own historical 99th percentile. This is correlated with either: 1) Connections to a destination IP not resolving to a domain on an established 'allow list' of cloud or corporate services. 2) The presence of video or image file types (e.g., `video/mp4`, `image/jpeg`) in associated Zeek `files.log` entries for the same connection UID.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate Wi-Fi, VPN concentrators, and cellular data gateways",
            "action": "First (Symbolic Logic), create a SIEM rule to monitor `Zeek conn.log` for connections from the mobile device IP space to destination IPs on a threat intelligence feed of known C2 servers. Generate a high-severity alert if a match occurs, the connection's `orig_bytes` is significantly larger than `resp_bytes` (e.g., >10x ratio), and a corresponding entry in `files.log` (joined by the connection UID) shows a `mime_type` of `video/*` or `image/*`. Second (Statistical), for each mobile device IP, maintain a 30-day rolling baseline of total daily outbound bytes from `Zeek conn.log`. Generate a medium-severity alert if a device's total for a 24-hour period exceeds the 99th percentile. Enrich the alert by joining the destination IP with `Zeek dns.log` to check if the queried domain has a Shannon entropy score greater than 3.5 (indicating potential DGA) or was registered within the last 60 days (via WHOIS enrichment). Third (Machine Learning), apply a time-series anomaly detection model like SARIMA to each device's hourly outbound byte count to detect anomalous spikes that deviate from established seasonality (e.g., work hours). Concurrently, use a DBSCAN clustering algorithm on connection metadata `{dest_ip, dest_port, protocol, total_bytes}` from all mobile devices. Isolate and investigate small, dense clusters that do not map to known services, as these may represent covert C2 channels for exfiltrating captured media."
          },
          {
            "description": "Mobile EDR telemetry shows a process invoking camera-related API calls (e.g., Android's `android.hardware.camera2`, iOS's `AVCaptureDevice`) under one of the following conditions: 1) The application's UI is in a background or inactive state for more than 60 seconds. 2) The call is not preceded by a direct user-input event (e.g., a screen tap) within a typical timeframe (e.g., 2 seconds).",
            "data_sources": [
              "Mobile EDR logs",
              "OS-level API call logs",
              "Application lifecycle event logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value target mobile devices (e.g., executive leadership, system administrators) with EDR agents installed",
            "action": "First (Symbolic Logic), create a high-severity SIEM alert that triggers when a Mobile EDR log event for a camera API call (e.g., `AVCaptureDevice.startRunning`) has the same process ID as a preceding 'application entered background' event within a 60-second window. Suppress alerts for approved conferencing apps (e.g., 'com.zoom.us', 'com.microsoft.teams') that are known to use this functionality legitimately. Second (Statistical), for each unique application across the device fleet, use Mobile EDR logs to calculate a baseline distribution of time deltas between a user interface interaction event (e.g., 'touch_event') and a subsequent camera API call. Generate a medium-severity alert if a camera API call occurs at a time delta that falls beyond the 99.9th percentile for that specific application, suggesting non-user-initiated camera activation. Third (Machine Learning), train a Hidden Markov Model (HMM) on sequences of API and application lifecycle events from known benign applications. The HMM states represent normal operational phases (e.g., 'App_Launch', 'UI_Active', 'Camera_User_Activated', 'Background_Idle'). Ingest real-time event sequences from monitored devices and calculate the probability of the sequence given the trained model. A sequence with a very low log-likelihood score, particularly one involving a direct transition from a 'Background_Idle' state to a 'Camera_User_Activated' state, should trigger a high-confidence alert for immediate investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]