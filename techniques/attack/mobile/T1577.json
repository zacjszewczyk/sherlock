[
  {
    "information_requirement": "Has an adversary established persistence by modifying a legitimate application executable on a mobile device? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1577",
        "name": "Compromise Application Executable",
        "evidence": [
          {
            "description": "The cryptographic hash (e.g., SHA-256) of an application package installed on a mobile device does not match the known-good hash value recorded in the official organizational application manifest for the identical application identifier and version. This indicates a potential unauthorized modification, such as rebuilding an application with malicious code [2].",
            "data_sources": [
              "MDM application inventory report",
              "Mobile EDR agent logs",
              "Organizational Application Manifest"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (iOS, Android); Mobile Device Management (MDM) or Unified Endpoint Management (UEM) server; Organizational application manifest repository.",
            "action": [
              "On a scheduled basis, join the application inventory data from MDM/EDR logs with the organizational application manifest, using application ID and version as the join key. Trigger a high-severity alert for any device reporting an application whose file hash does not exactly match the manifest's corresponding known-good hash.",
              "For each unique application ID across the device fleet, aggregate the counts of all reported application versions. Calculate the fleet-wide prevalence for each version. Flag any device reporting an application version whose prevalence is below a statistically determined rarity threshold (e.g., installed on fewer than 0.5% of devices or in the bottom 1st percentile) for manual review as a non-standard or potentially patched version.",
              "For each device, generate a feature vector representing its installed application profile (e.g., a multi-hot encoded vector of application IDs). Train an unsupervised anomaly detection model, such as an Isolation Forest, on the feature vectors from the entire device fleet to establish a baseline of normal application combinations. Score each device in real-time and alert on devices with high anomaly scores, which indicate a significantly unusual set of installed software."
            ]
          },
          {
            "description": "Static analysis of an Android Application Package (APK) file reveals the presence of data bytes appended after the ZIP central directory but before the Dalvik Executable (DEX) file. This specific file structure is a known artifact of the Janus vulnerability (CVE-2017-13156) exploitation [1].",
            "data_sources": [
              "Raw APK files from endpoints",
              "Mobile App Vetting (MAV) static analysis reports",
              "Digital forensic image of device storage"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android device fleet; Application sandbox environment; Mobile security analysis platforms.",
            "action": [
              "Implement a static analysis rule within a Mobile App Vetting (MAV) platform to scan every submitted APK file. The rule must parse the APK's ZIP structure and check for the presence of non-zero byte sequences located between the end of the ZIP central directory and the start of the DEX file. Trigger a critical-severity alert if this specific condition is met.",
              "For all analyzed APKs, programmatically calculate the size difference using the formula: $$ \\Delta = FileSize_{OnDisk} - (Offset_{CentralDirectory} + Size_{CentralDirectory}) $$. Establish a historical distribution for the $$ \\Delta $$ value across all scanned applications. Alert on any APK where $$ \\Delta $$ is a statistical outlier (e.g., greater than the 99.9th percentile of the historical distribution), indicating unexpected data has been added to the file.",
              "Train a supervised classification model (e.g., Random Forest or Gradient Boosting) using features extracted from the static analysis of APK files. Features should include binary structure properties like header flags, section counts, file size discrepancies (the $$ \\Delta $$ value), and the Shannon entropy of various file sections. Use a labeled dataset of known-benign, Janus-exploited, and other repacked malicious APKs to train the model to classify and assign a risk score to all new and updated applications."
            ]
          },
          {
            "description": "Network traffic from a managed mobile device, attributed to a trusted application, exhibits behavior inconsistent with its established profile. This includes communicating with known malicious domains/IPs, using DNS queries with entropy characteristic of DGA, or transferring data volumes that are statistical outliers from its historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "CASB logs",
              "Mobile EDR network logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways; VPN egress points; DNS resolvers; Cloud Access Security Broker (CASB).",
            "action": [
              "Enrich network flow data (Zeek conn.log) with application context from Mobile EDR or CASB logs, joining on device IP and timestamp. Correlate the destination IP address or the requested domain (from Zeek dns.log) against a threat intelligence feed of known command-and-control (C2) servers. Generate a high-severity alert if a trusted, whitelisted application initiates a connection to a known malicious indicator.",
              "For each unique application on each device, establish a 30-day rolling baseline of network behavior. A) Using Zeek conn.log, calculate the 95th percentile for total bytes transferred ($$ orig_bytes + resp_bytes $$) per session and alert if a new session from that application exceeds this threshold. B) Using Zeek dns.log, calculate the average Shannon entropy of DNS queries made by the application and alert if a new query's entropy score is more than three standard deviations above the established average, suggesting potential DGA activity.",
              "For each unique device-application pair, generate a multivariate time-series dataset from network logs (e.g., Zeek conn.log), using features like bytes sent per minute, bytes received per minute, and new connections per minute. Train a Long Short-Term Memory (LSTM) Autoencoder model to learn the normal temporal patterns of network activity for that pair. In production, feed live data into the model and alert when the reconstruction error exceeds a dynamically calculated threshold, indicating a behavioral anomaly not explained by past activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]