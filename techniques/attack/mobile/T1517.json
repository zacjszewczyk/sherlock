[
  {
    "information_requirement": "Is an adversary intercepting sensitive information, such as one-time passwords, from mobile device notifications? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1517",
        "name": "Access Notifications",
        "evidence": [
          {
            "description": "An application is identified with the `BIND_NOTIFICATION_LISTENER_SERVICE` permission granted, and its package name or the hash of its code-signing certificate is not present on the curated corporate application allowlist.",
            "data_sources": [
              "MDM/MTD Application Permission Logs",
              "MDM/MTD Application Inventory Logs",
              "Corporate Application Allowlist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Management Console; Mobile Threat Defense Platform; Corporate Application Allowlist Repository",
            "action": "1. (Symbolic) Execute a recurring query on the MDM/UEM platform to retrieve all applications with the `BIND_NOTIFICATION_LISTENER_SERVICE` permission. For each application, cross-reference its package name and signing certificate hash against the corporate application allowlist. Generate a high-severity alert for any application not found on the allowlist, including the device ID, user, and application name in the alert. 2. (Statistical) For any unlisted application with this permission, calculate its installation prevalence across the managed device fleet. Flag for investigation any application that is a statistical outlier, defined as being installed on fewer than 1% of devices or falling below the 5th percentile ($$ P_{install} < 0.05 $$) of installation frequency. Additionally, compare the full set of permissions requested by the outlier app to the average permission set of its App Store category; a high Jaccard distance from the category norm should increase the risk score. 3. (Machine Learning) For any application with notification access, input its metadata (e.g., permissions requested, developer name, app store age, signing certificate validity period, presence of obfuscated code identified by static analysis) into a pre-trained binary classification model (e.g., XGBoost, Random Forest). An application with a predicted maliciousness score exceeding a predefined threshold (e.g., > 0.85) should be prioritized for immediate investigation and potential automated quarantine via MDM."
          },
          {
            "description": "An application possessing `BIND_NOTIFICATION_LISTENER_SERVICE` permission initiates a network connection where the destination IP/domain is found on a threat intelligence feed, has a low reputation score, or the queried domain name exhibits a high entropy score indicative of a domain generation algorithm (DGA).",
            "data_sources": [
              "MDM/MTD Application Permission Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate VPN Concentrators; Corporate WiFi Access Points; Cloud Access Security Broker (CASB); Internal and External DNS Resolvers",
            "action": "1. (Symbolic) Correlate MDM logs identifying devices with notification-accessing apps with network logs from the same devices using device IP and timestamp. For every outbound TLS/SSL connection from these apps, check the destination IP (from Zeek conn.log) and server name from the SNI field (from Zeek ssl.log) against subscribed threat intelligence feeds. Also, check the JA3/JA3S hash (from Zeek ssl.log) against known malicious client/server fingerprints. Generate a critical alert on any match. 2. (Statistical) For each application with notification access, analyze its DNS queries from Zeek dns.log. Calculate the Shannon entropy of the queried FQDNs within a 5-minute sliding window using the formula $$ H(X) = - \\sum p(x) \\log_2 p(x) $$. A spike in entropy exceeding the 95th percentile of the application's historical baseline suggests DGA activity. Additionally, monitor connection frequency in conn.log; a highly periodic, low-volume connection ('heartbeat') to an unknown service, identified using Fourier analysis on the connection timestamps, can indicate C2 beaconing. 3. (Machine Learning) Deploy a time-series anomaly detection model (e.g., an LSTM autoencoder) trained on benign network behavior from corporate mobile devices. Feed a feature vector from Zeek conn.log for each flow, including `orig_bytes`, `resp_bytes`, `duration`, `proto`, and character counts from the `history` field. An anomalously high reconstruction error for a flow originating from a notification-accessing app, especially if MDM logs report the app is in the background, indicates potential C2 communication and should trigger an alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting and exfiltrating data from mobile device notifications? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1517",
        "name": "Access Notifications",
        "evidence": [
          {
            "description": "A user help-desk ticket reporting a missing sensitive notification (e.g., MFA token, password reset link) correlates within a 15-minute window to the installation of a new application, a change in application permissions, or anomalous process activity on the user's device.",
            "data_sources": [
              "User-reported incidents (Help Desk tickets)",
              "MDM/MTD Device Process Logs",
              "MDM/MTD Application Installation Logs",
              "MDM/MTD Application Permission Change Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Help Desk Ticketing System; SIEM Platform; MDM/UEM Console; User Endpoint Devices",
            "action": "1. (Symbolic) Upon creation of a help desk ticket containing keywords like 'MFA', 'missing notification', '2FA code not received', or 'one-time password', trigger an automated query against MDM and SIEM logs. The query should search for new application installations, grants of `BIND_NOTIFICATION_LISTENER_SERVICE`, or suspicious process executions (e.g., `su`) on the user's device within a +/- 15-minute window of the reported incident time. Alert if a new, unvetted app or a suspicious permission change is found. 2. (Statistical) For the affected user's device, analyze the timeline of application background data usage from MDM/MTD logs around the incident time. Compare the frequency and volume of background data transfers for each non-system app to its 30-day baseline for that user. A deviation greater than 3 standard deviations from the mean ($$ Z > 3 $$) for an app with notification access is highly suspicious and should be flagged for forensic review. 3. (Machine Learning) Implement an NLP classification model (e.g., a fine-tuned BERT model) to parse help desk ticket subjects and bodies. Automatically categorize and assign a risk score to tickets related to 'missing MFA,' 'stolen code,' or 'unreceived notification.' For high-confidence classifications (e.g., probability > 0.90), automatically assign a critical priority, tag the associated user/device as high-risk in the SIEM, and trigger the symbolic and statistical analysis playbooks."
          },
          {
            "description": "An application with `BIND_NOTIFICATION_LISTENER_SERVICE` permission exhibits an outbound data transfer volume that is a statistical outlier compared to its own historical baseline or the baseline of its application category, particularly when the application is operating in the background.",
            "data_sources": [
              "Zeek conn.log",
              "MDM/MTD Application Permission Logs",
              "MDM/MTD Application Usage Logs (foreground/background status)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators; Corporate WiFi Access Points; Cloud Access Security Broker (CASB)",
            "action": "1. (Symbolic) For all applications with `BIND_NOTIFICATION_LISTENER_SERVICE` permission, create a SIEM rule to alert on any outbound connection from Zeek conn.log where the `id.resp_p` (destination port) is not on a pre-defined allowlist of expected ports for that application's category. Also, inspect the `history` field in conn.log; the presence of connection-level anomalies like retransmissions or resets (`R` flag) in conjunction with large outbound data transfers should elevate alert severity. 2. (Statistical) For each app with notification access, establish a historical baseline of its hourly outbound data volume (`orig_bytes` from Zeek conn.log) and the ratio of outbound to inbound bytes ($$ orig\\_bytes / resp\\_bytes $$). Generate an alert when the hourly volume exceeds the 99th percentile of its own 30-day history, or the data ratio exceeds the 99th percentile of its peer application group. Elevate the alert's priority to critical if MDM logs confirm the application was in a background state during the transfer. 3. (Machine Learning) Use an unsupervised anomaly detection algorithm like Isolation Forest on network flow features from Zeek conn.log for all apps with notification access. The feature set should include `orig_bytes`, `resp_bytes`, `duration`, destination port, and a one-hot encoded `proto` field. Any flow that is scored as a high-level anomaly, particularly if it occurs outside the user's typical active hours, should be flagged for investigation as a potential anomalous exfiltration channel."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]