[
  {
    "information_requirement": "Is an adversary attempting to steal credentials on corporate mobile devices via GUI impersonation? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An Android application is present on a managed device that both possesses the 'android.permission.SYSTEM_ALERT_WINDOW' permission in its manifest and is not found on the corporate application allowlist, identified by its package name and signing certificate hash.",
            "data_sources": [
              "MDM Application Inventory",
              "Mobile EDR Application Installation Events",
              "Corporate Application Allowlist",
              "Mobile Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized MDM/UEM platform, Mobile EDR data repository, and corporate application vetting database.",
            "action": [
              "Define a SIEM rule that joins the MDM application inventory with the corporate allowlist and a mobile threat intelligence feed on the application package name and signing certificate. Trigger a high-severity alert for any application that: (1) has the 'android.permission.SYSTEM_ALERT_WINDOW' permission, (2) is NOT on the corporate allowlist, AND (3) has a package name or signing certificate hash matching a known malicious indicator in the threat feed.",
              "Schedule a daily query of the MDM application inventory to identify all applications with the 'android.permission.SYSTEM_ALERT_WINDOW' permission. For this subset, calculate the installation prevalence (percentage of total devices) for each application. Generate a medium-priority alert for any application not on the corporate allowlist with a prevalence score below the 5th percentile, indicating an unusually rare application that warrants investigation.",
              "Upon a new application installation event captured by the Mobile EDR, automate a feature extraction process from the application's manifest. Features should include: total permission count, a binary flag for the presence of 'SYSTEM_ALERT_WINDOW', binary flags for other high-risk permissions ('BIND_ACCESSIBILITY_SERVICE', 'READ_SMS'), and the count of exported activities. Feed this feature vector into a pre-trained Random Forest classifier model designed to predict malware. If the model's output probability for the 'malicious' class is greater than 0.85, trigger an automated workflow to create a critical incident and quarantine the device via an MDM API call."
            ]
          },
          {
            "description": "A newly installed application possesses a display name with a Levenshtein distance of 2 or less from a known high-value application (e.g., 'Okta Verify'), but its package name and/or signing certificate do not match the legitimate application's official metadata.",
            "data_sources": [
              "MDM Application Inventory",
              "Mobile EDR Application Installation Events",
              "Corporate Application Metadata Store"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized MDM/UEM platform and the corporate application metadata repository containing official names, package IDs, and signatures.",
            "action": [
              "Maintain a reference table of high-value applications, mapping their display names to official package names and signing certificate hashes. Upon each new application installation event, trigger a script to calculate the Levenshtein distance between the new application's display name and every name in the reference table. If the distance is less than or equal to 2 AND the package name or certificate hash does not match the corresponding entry in the reference table, generate a critical alert for potential brand impersonation.",
              "On a daily basis, query the entire MDM application inventory. For each application not on the official allowlist, calculate the Jaro-Winkler similarity score of its display name against a list of high-value target application names. Track the daily count of applications exceeding a similarity threshold of 0.95. Analyze this count as a time series to detect statistically significant spikes (e.g., a daily count exceeding 3 standard deviations above the 30-day moving average) that could indicate a coordinated typosquatting campaign.",
              "Periodically, extract feature vectors for all installed applications across the device fleet. Vectorize text fields (display name, package name, developer name) using character n-grams (e.g., trigrams). Apply a density-based clustering algorithm like DBSCAN to this feature space. Automatically flag clusters for analyst review that meet a profile of suspicion: (1) contain no allowlisted applications, (2) have a small device footprint (e.g., installed on fewer than 10 devices), and (3) contain members with high string similarity to each other, suggesting a polymorphic or evolving malware family."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to collect sensitive data from users on corporate mobile devices using deceptive GUI overlays? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A correlated event sequence occurs on a single device: (1) A Mobile EDR log shows a sensitive application (e.g., SSO client, banking app) in the foreground. (2) Within 5 seconds, a subsequent EDR log shows a different, non-allowlisted application with overlay capabilities gaining foreground focus. (3) Within 60 seconds of the focus switch, Zeek logs show the device initiating a network connection to a destination IP on a threat intelligence blocklist or resolving a domain name registered within the last 30 days.",
            "data_sources": [
              "Mobile EDR Foreground App Events",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Blocklist (IP/Domain)",
              "Passive DNS (Domain Age)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR data repository, network egress points instrumented with Zeek sensors (e.g., VPN gateways, corporate Wi-Fi controllers), and APIs for threat intelligence and passive DNS services.",
            "action": [
              "Implement a SIEM correlation rule joining Mobile EDR and Zeek logs by device IP and timestamp. The rule logic is: IF (EDR event indicates sensitive app 'A' is in foreground) AND (within 5 seconds, a second EDR event shows non-allowlisted, overlay-capable app 'B' is in foreground) AND (within 60 seconds, a Zeek conn.log or dns.log event shows a connection to a blocked IP/domain OR a request for a domain registered < 30 days ago), THEN generate a critical alert detailing the device, user, applications, and destination.",
              "For each user, create a baseline of normal application switching behavior by calculating a transition probability matrix from foreground app events in Mobile EDR logs. Continuously monitor for transitions where a sensitive app is followed by an overlay-capable app. If the observed transition probability falls below the 1st percentile for that user, trigger a secondary analysis. This analysis calculates the Shannon entropy of FQDNs requested in the device's Zeek dns.log for the 5 minutes post-transition. If the entropy score is more than 3 standard deviations above the user's 30-day rolling average entropy, flag the event for investigation.",
              "Train an LSTM-based autoencoder model per device on a time series of network behavior features extracted from Zeek conn.log (e.g., bytes_out per minute, unique destination IPs per minute, protocol distribution). When a rare application transition event (as identified by the statistical method) occurs, query the autoencoder model for the reconstruction error of the network feature vector at that point in time. If the reconstruction error exceeds the 99th percentile of the device's historical error distribution, interpret this as a severe network anomaly coinciding with a suspicious application event, and trigger an automated response to quarantine the device and escalate to the SOC."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]