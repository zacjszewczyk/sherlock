[
  {
    "information_requirement": "Is an adversary maintaining persistence on mobile devices by abusing broadcast receivers? (TA0028 - Persistence)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1624.001",
        "name": "Broadcast Receivers",
        "evidence": [
          {
            "description": "An application's manifest file (AndroidManifest.xml) statically declares a <receiver> for a high-risk system broadcast intent and a corresponding <uses-permission> that enables a malicious capability.",
            "data_sources": [
              "SAST scan results (JSON/XML)",
              "UEM application inventory data (JSON/CSV)",
              "Android Package (APK) files"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Unified Endpoint Management (UEM) platform; Static Application Security Testing (SAST) pipeline; Internal corporate application repository; Third-party application vetting sandboxes",
            "action": [
              "Query application manifest data for the presence of broadcast receivers on a watchlist of high-risk intents (e.g., 'android.intent.action.BOOT_COMPLETED', 'android.provider.Telephony.SMS_RECEIVED'). Generate an alert for any non-allowlisted application that registers a receiver from this watchlist.",
              "Parse all application manifests to extract declared broadcast receivers. Calculate the population frequency for each unique receiver across the entire application inventory. For each application, identify declared receivers that fall below a statistical rarity threshold (e.g., 5th percentile). Flag applications with rare receivers for manual review.",
              "Extract features from application manifests, including multi-hot encoded vectors for declared receivers and permissions. Train a random forest classifier on a labeled dataset of known benign and malicious APKs. Use the trained model to scan and classify all new and updated applications, flagging any with a malicious probability score above a set threshold (e.g., > 0.8) for sandbox analysis."
            ]
          },
          {
            "description": "A mobile security agent observes an application at runtime dynamically registering a broadcast receiver via the `registerReceiver()` API call, where the intent filter corresponds to a sensitive system event not justified by the application's function.",
            "data_sources": [
              "Mobile EDR API call logs (JSONL)",
              "Android Debug Bridge (adb) logcat output",
              "Dynamic analysis sandbox API call trace logs",
              "Frida instrumentation trace logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint fleet of corporate-managed mobile devices; Mobile EDR/Threat Defense management console; Automated dynamic application security testing (DAST) pipeline",
            "action": [
              "Create a detection rule in the Mobile EDR platform or SIEM to trigger an alert when a `registerReceiver()` API call is logged with an IntentFilter for a high-risk action (e.g., 'android.provider.Telephony.SMS_RECEIVED', 'android.intent.action.NEW_OUTGOING_CALL') and the parent application's category is not 'Communications' or 'System Tools'.",
              "Ingest Mobile EDR API call logs into a SIEM. For each application on each device, establish a 30-day baseline profile of unique intents registered via `registerReceiver()`. Generate an alert if an application registers an intent not seen in its historical baseline, indicating anomalous runtime behavior.",
              "For each device, create time-ordered sequences of `(timestamp, application_package_name, registered_intent_action)` tuples from `registerReceiver()` calls. Train a Long Short-Term Memory (LSTM) autoencoder model on these sequences from a known-benign period. In production, continuously feed new sequences into the model and flag any sequence with a reconstruction error in the top 1st percentile for analyst investigation."
            ]
          },
          {
            "description": "Static analysis of an application's AndroidManifest.xml file identifies the co-occurrence of a specific broadcast receiver and a set of permissions which, in combination, create a high-impact malicious capability, also known as a 'toxic combination'.",
            "data_sources": [
              "SAST scan results (JSON/XML)",
              "UEM application inventory data (JSON/CSV)",
              "Google Play Store manifest data (via API)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM application inventory database; Static Application Security Testing (SAST) platform; Mobile Threat Defense (MTD) management console",
            "action": [
              "Define and maintain a list of 'toxic combinations,' where each combination is a set containing one broadcast receiver and one or more permissions (e.g., {'receiver': 'android.provider.Telephony.SMS_RECEIVED', 'permissions': ['android.permission.READ_CONTACTS', 'android.permission.INTERNET']}). Scan all application manifests against this list and generate a critical alert for any application that contains a complete match.",
              "From all parsed manifests, create a co-occurrence matrix for all (receiver, permission) pairs. Calculate a rarity score for each pair, such as $$ S = -\\\\log(P(pair)) $$, where $$ P(pair) $$ is the pair's observed probability across the inventory. For each application, calculate a total risk score by summing the rarity scores of all its declared (receiver, permission) pairs. Flag applications with the highest total risk scores (e.g., top 5%) for manual analysis.",
              "For each application, create a binary feature vector where each element represents the presence (1) or absence (0) of a specific receiver or permission from the set of all possible receivers/permissions observed in the environment. Apply a density-based clustering algorithm like DBSCAN to these vectors. Manually analyze the resulting clusters; small, dense clusters that are not associated with known legitimate software are highly suspicious and should be prioritized for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]