[
  {
    "information_requirement": "Is an adversary using native code to obscure malicious activity on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1575",
        "name": "Native API",
        "evidence": [
          {
            "description": "An application contains native libraries (.so files) with unusually high entropy or a minimal number of exported functions, suggesting the use of packing or obfuscation to hinder analysis.",
            "data_sources": [
              "Application Package (APK) file analysis",
              "File system dump of installed application directories"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Corporate application store/repository",
            "action": "For each application's native libraries (.so files), calculate the Shannon entropy. Establish a baseline entropy value for legitimate, unpacked libraries of similar sizes. Flag libraries with entropy scores exceeding the 95th percentile as potentially packed or encrypted. Concurrently, analyze the library's exported function table; a very small number of exports (e.g., only JNI_OnLoad) is a strong indicator of dynamic symbol resolution used by packers to hide function calls."
          },
          {
            "description": "An application dynamically loads a native library from a non-standard location, such as a file downloaded from a remote server at runtime, instead of from its packaged 'lib' directory.",
            "data_sources": [
              "Android Logcat",
              "Network Traffic Capture (PCAP)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint mobile devices, Network egress points/gateways",
            "action": "Continuously monitor Android Logcat for logs containing calls to 'System.load' and 'System.loadLibrary'. Correlate the timestamps of these load events with network traffic logs from the same application. Search for a pattern where an application downloads a file (e.g., .so, .jar, .dex) and subsequently attempts to load it into memory. Score the risk of this behavior based on the reputation of the source domain and the frequency of occurrence across the device fleet."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary executing malicious commands or binaries on mobile devices via native code? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1575",
        "name": "Native API",
        "evidence": [
          {
            "description": "An application's native code invokes low-level system functions like 'system()' or 'execve()' to execute shell commands or other binaries on the device, a behavior that is highly anomalous for most applications.",
            "data_sources": [
              "Application Package (APK) file analysis",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint mobile devices, Corporate application store/repository",
            "action": "Perform static analysis on native libraries within APKs, searching for embedded strings such as '/system/bin/sh', 'su', or common shell commands ('pm install', 'cat /proc', 'rm'). At runtime, monitor Logcat for output that could correspond to the execution of shell commands by non-system applications. Maintain a list of legitimate applications that use shell access (e.g., terminal emulators) and alert on any application outside this baseline that exhibits this behavior."
          },
          {
            "description": "An application that heavily utilizes native code establishes network connections to known malicious C2 servers or performs anomalous file system operations inconsistent with its stated purpose.",
            "data_sources": [
              "Network Traffic Capture (PCAP)",
              "File system access logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint mobile devices, Network egress points/gateways",
            "action": "Correlate network flows (source/destination IP, port, protocol, data volume) with the specific applications generating them. For apps known to use native code, compare destination IPs against threat intelligence feeds. Use statistical analysis to detect anomalous network patterns, such as periodic, low-volume 'heartbeat' traffic to a single IP or connections on non-standard ports. A sudden spike in outbound data from an app using native code is a high-confidence indicator of data exfiltration."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]