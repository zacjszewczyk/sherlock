[
  {
    "information_requirement": "Is an adversary using native code to obscure malicious activity on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1575",
        "name": "Native API",
        "evidence": [
          {
            "description": "An APK's native library (.so file) exhibits characteristics of packing or obfuscation, defined by one or more of the following: 1) a calculated Shannon entropy value for the executable section is in the top 1% for all scanned libraries (e.g., >7.5), or 2) the library exports three or fewer JNI functions where 'JNI_OnLoad' is one of the exports, a pattern used to hide dynamically registered functions from static analysis.",
            "data_sources": [
              "APK static analysis reports (JSON/XML)",
              "MDM application inventory logs",
              "Static analysis tool raw output"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application vetting system (static analysis sandbox), MDM server application inventory database, and file systems of enrolled mobile devices.",
            "action": [
              "For all applications in the MDM inventory, query the corresponding static analysis report for native library (.so) file hashes. Match these hashes against a threat intelligence feed of known malicious or packed libraries. Generate a critical alert for any match, including device, user, and application details.",
              "For each native library, parse its static analysis report to extract the Shannon entropy of its executable section and the list of exported JNI functions. Calculate the 99th percentile for entropy across all scanned libraries in the environment. Alert if a library's entropy exceeds this percentile. Separately, alert if a library exports three or fewer functions and 'JNI_OnLoad' is one of them. A high-confidence alert is generated if both conditions are met for the same library.",
              "Score all new or updated native libraries using a pre-trained binary classification model (e.g., Gradient Boosting). The model will use features such as file size, executable section size, Shannon entropy, the count of imported and exported functions, the presence of specific JNI functions (JNI_OnLoad), and the count of string imports related to dynamic symbol resolution (e.g., 'dlsym'). Escalate any library with a predicted malicious probability score greater than 0.85 for manual reverse engineering."
            ]
          },
          {
            "description": "A process associated with an Android application loads a native library from a non-standard, world-writable directory (e.g., /data/data/[app_name]/files, /sdcard/downloads) within 120 seconds of the device downloading a file with a .so, .dex, or .jar extension from a domain with low or no reputation.",
            "data_sources": [
              "Android Logcat streams from MDM",
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dns.log",
              "Mobile EDR file modification events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise wireless and VPN network traffic inspection points, DNS resolvers, and real-time log streams from enrolled mobile endpoints.",
            "action": [
              "In the SIEM, create a correlation rule that joins Zeek dns.log, files.log, and Android Logcat data by device IP address and a 120-second time window. Generate a high-severity alert if a DNS query to a domain on a threat intelligence blocklist is followed by a download of a file ending in .so, .dex, or .jar, and a subsequent Android Logcat message containing 'System.load' or 'System.loadLibrary' with a path outside of the standard '/data/app/' directory.",
              "For each application package, establish a historical baseline of library load paths from Android Logcat and Mobile EDR data. Calculate the frequency of library loads originating from non-standard, world-writable directories. Alert if an application's rate of loading from such directories exceeds 3 standard deviations above its own 30-day moving average or is a 'first-of-its-kind' event for that application.",
              "Implement a sequence analysis model (e.g., a Hidden Markov Model or Recurrent Neural Network) trained on labeled event chains. Feed the model sequences of events per device, such as [DNS Query to new TLD -> File Download (.so) -> Library Load from /data/data/.../files]. Flag event sequences that have a high probability of matching a trained malicious pattern for analyst review."
            ]
          },
          {
            "description": "An application uses Java Reflection APIs (e.g., 'Class.forName', 'Method.invoke') to execute functions from a dynamically loaded native library, where the target class or method names are obfuscated (e.g., base64 encoded, encrypted, or algorithmically generated) and resolved at runtime.",
            "data_sources": [
              "Mobile EDR API monitoring logs",
              "Android Logcat streams from MDM",
              "Dynamic analysis sandbox logs (e.g., Frida traces)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR/MTP agent data feeds and real-time log streams from enrolled mobile endpoints.",
            "action": [
              "Create a SIEM correlation rule that triggers when a Mobile EDR log shows a call to 'java.lang.reflect.Method.invoke' immediately preceded by 'java.lang.System.loadLibrary' within the same thread in a 100ms window. Escalate the alert's priority if the method name argument to 'invoke' does not exist as a plaintext string within the application's original APK, indicating it was dynamically resolved or deobfuscated.",
              "Using Mobile EDR or dynamic analysis logs, profile each application's use of Java Reflection. Calculate the Shannon entropy of all string arguments passed to reflection methods like 'Class.forName' and 'Method.invoke'. Generate an alert if the entropy for a given call exceeds the 98th percentile of all observed reflection calls for that specific application, which suggests the argument was deobfuscated at runtime rather than being a plain string.",
              "Train a supervised classifier on API call traces from a dynamic analysis sandbox. Use features like the sequence of API calls, the presence of reflection APIs, the entropy of their arguments, and the presence of dynamic code loading APIs. Classify API traces as benign or suspicious, flagging suspicious behavior involving reflection and native code for analyst investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary executing malicious commands or binaries on mobile devices via native code? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1575",
        "name": "Native API",
        "evidence": [
          {
            "description": "A static analysis of an APK's native library (.so file) reveals command execution capabilities, defined as either: 1) importing execution-related C functions like 'system', 'execve', or 'popen', or 2) containing embedded plaintext strings indicative of shell commands, such as '/system/bin/sh', 'su', 'pm install', 'am start', 'reboot', or 'setprop'.",
            "data_sources": [
              "APK static analysis reports (JSON/XML)",
              "MDM application inventory logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application vetting system (static analysis sandbox) and MDM application inventory database.",
            "action": [
              "During static analysis of an APK, scan all included native libraries for a blocklist of imported C functions ('system', 'execve', 'popen') and embedded strings ('/bin/sh', 'su'). Compare the parent application's package name against an allowlist of approved tools that legitimately use these functions. Generate a medium-severity alert for any non-allowlisted application that contains these indicators.",
              "Implement a risk scoring model for native libraries. Calculate the fleet-wide prevalence of suspicious indicators (e.g., 'system' import, 'su' string). Assign a risk score to each indicator that is inversely proportional to its frequency (rarer is riskier). Sum the scores for all indicators found in a library. Flag applications containing libraries whose total risk score exceeds the 98th percentile of scores across all applications for manual review.",
              "Train a supervised classification model (e.g., Random Forest) to classify applications as 'potential native executor' or 'benign'. Use features from static analysis reports, including a binary flag for each suspicious function import, the count of shell-like strings, the set of requested Android permissions, and the ratio of the executable section size to the total file size. Escalate applications classified as 'potential native executor' with high confidence (>0.90) to a dynamic analysis sandbox."
            ]
          },
          {
            "description": "An application known to contain native libraries generates network traffic consistent with command and control (C2) beaconing. This is defined by observing repeated connections to the same destination that exhibit low jitter (standard deviation of time intervals), consistent small packet sizes (e.g., < 2KB), a persistent TLS fingerprint (JA3/JA4S hash), and a destination domain/IP not on a known-good service allowlist.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log",
              "MDM application inventory logs",
              "Mobile EDR network connection logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewall/Proxy), Enterprise DNS servers, VPN concentrators, and mobile endpoint network logs.",
            "action": [
              "Ingest Zeek conn.log, ssl.log, and dns.log into the SIEM and enrich with threat intelligence feeds. Generate a high-severity alert for any connection from a mobile device IP to a destination IP, domain, or JA3/JA4S hash found on a C2 blocklist. Use Mobile EDR logs to correlate the device IP and timestamp to the responsible process and application.",
              "For each unique 4-tuple (Source IP, Destination IP, Destination Port, Protocol) in Zeek conn.log over a 24-hour window, calculate the standard deviation of the time delta between connections and the standard deviation of the originator payload size ('orig_bytes'). Alert on flows that exhibit a time delta standard deviation below 2 seconds and a payload size standard deviation below 100 bytes, and where the destination is not on an established commercial service allowlist. This identifies periodic, low-variance traffic patterns.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to network flow data from Zeek conn.log. Use features such as connection duration, total bytes, protocol, destination port, time-between-connections standard deviation, byte count standard deviation, and the entropy of the destination domain name. Isolate and investigate small, dense clusters of activity that are distinct from large clusters of benign traffic, as these often represent unidentified C2 channels."
            ]
          },
          {
            "description": "A process associated with a mobile application, which contains native libraries, spawns a suspicious child process (e.g., '/system/bin/sh', 'su') or executes a command via 'Runtime.exec()' that is anomalous for the application's established behavioral baseline.",
            "data_sources": [
              "Mobile EDR process event logs",
              "Android SELinux audit logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR/MTP agent data feeds, and real-time log streams from enrolled mobile endpoints.",
            "action": [
              "Create a SIEM rule that alerts on any process creation event from a Mobile EDR where the parent process is a non-system mobile application and the child process name is 'sh', 'su', or 'pm'. Cross-reference the parent application against an allowlist of approved tools that legitimately spawn these processes. An alert signifies potential unauthorized command execution.",
              "For each application package name, use Mobile EDR logs to build a 30-day historical baseline of all child processes it spawns and all command-lines it executes. The baseline should contain the set of child process names and command-line argument patterns. Generate a high-severity alert if an application spawns a child process or executes a command that has never been observed for that application across the entire device fleet (a 'first seen in fleet' event).",
              "Train a classification model (e.g., an Isolation Forest) on process creation events to detect anomalies. Features should include: parent process package name, child process name, command-line argument count, and the presence of sensitive keywords in arguments (e.g., 'setprop', 'install', 'reboot'). The model will flag events that deviate significantly from the learned normal behavior for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]