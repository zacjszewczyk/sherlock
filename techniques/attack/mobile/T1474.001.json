[
  {
    "information_requirement": "Has an adversary compromised our mobile applications by injecting malicious code into their software dependencies or development tools? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1474.001",
        "name": "Compromise Software Dependencies and Development Tools",
        "evidence": [
          {
            "description": "A mobile application, running on a corporate-managed device, generates network traffic that matches one or more of the following conditions: (1) connection to a destination IP/domain on a threat intelligence feed; (2) connection using an SSL certificate issuer or JA3/JA3S hash that is statistically rare across the enterprise; (3) a 25% or greater increase in total data egress over a 24-hour period compared to its 30-day rolling average; (4) communication using a user-agent string not associated with standard mobile application libraries or frameworks.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Zeek http.log",
              "Mobile Device Management (MDM) logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.",
            "action": "1. (Symbolic Logic) In a SIEM, join network logs (Zeek conn.log, dns.log, http.log) with threat intelligence feeds of known malicious IPs, domains, JA3/JA3S hashes, and user agents. Create a rule to generate a high-severity alert for any connection from a mobile device IP range that matches an indicator in the feeds. 2. (Statistical Method) For each mobile application, create a 30-day rolling baseline of network behavior. A) Using Zeek conn.log, calculate the 95th percentile for daily data egress per application and alert if the current daily volume exceeds this baseline. B) Using Zeek dns.log, calculate the Shannon entropy of requested domains per application per hour; alert on entropy values that are more than 3 standard deviations above the application's typical entropy baseline. C) Using Zeek ssl.log and http.log, build a frequency table of SSL certificate issuers, JA3 hashes, and user-agent strings seen across all mobile applications. Alert when an application uses an issuer, hash, or user-agent that falls in the bottom 1% of rarity. 3. (Machine Learning) Implement an unsupervised learning model, such as Isolation Forest, using features from Zeek conn.log (e.g., connection duration, protocol, service, total bytes), ssl.log (e.g., certificate validity period, server_name), and http.log (e.g., user_agent). Train the model on historical network data to identify outlier connections that deviate from established patterns of legitimate traffic. Flag these outliers for analyst investigation as potential C2 channels."
          },
          {
            "description": "A software development process on a developer workstation or build server exhibits one or more of the following behaviors: (1) spawns a child process such as powershell.exe or cmd.exe containing base64 encoded commands or download strings; (2) creates a child process that is unsigned and not on an established allowlist for that parent; (3) initiates a network connection to a destination IP/domain first observed within the last 72 hours across the enterprise; (4) modifies critical project configuration files (e.g., build.gradle, Podfile, package.json) to add or alter dependency URLs or script execution hooks, detected via file integrity monitoring.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 1",
              "Windows Sysmon Event ID 3",
              "Windows Sysmon Event ID 11",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.",
            "action": "1. (Symbolic Logic) Using Windows Event ID 4688 or Sysmon Event ID 1, create a detection rule that triggers when a known development process (e.g., `devenv.exe`, `xcodebuild`, `MSBuild.exe`) spawns a child process (e.g., `powershell.exe`, `cmd.exe`) with suspicious command-line arguments such as `-enc`, `-w hidden`, `IEX`, `DownloadString`, or `Invoke-Expression`. Using Sysmon Event ID 11, create a rule to alert on modifications to dependency manifest files (`package.json`, `build.gradle`, `Podfile`) by processes other than approved IDEs or source control tools. 2. (Statistical Method) For each developer host, establish a baseline of normal parent-child process relationships (Sysmon Event ID 1) and file modifications (Sysmon Event ID 11) originating from development tools. A) Calculate the rarity of a given child process being spawned by a parent development tool; alert when a relationship's frequency is below the 1st percentile. B) For command lines in Sysmon Event ID 1, calculate the entropy and length; alert when a command line's entropy or length exceeds 3 standard deviations from the historical norm for that specific parent-child pair. C) Alert when a dependency manifest file is modified by a process that has historically never modified it. 3. (Machine Learning) Train a supervised classification model (e.g., Random Forest) on labeled data from Sysmon Event ID 1 (Process Creation), Event ID 3 (Network Connection), and Event ID 11 (File Create). Use features such as parent process name, process name, command-line entropy, user context, network destination attributes (reputation, ASN), and target filename. The model will classify new event chains originating from development tools as 'benign' or 'suspicious', with 'suspicious' classifications generating an alert for review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]