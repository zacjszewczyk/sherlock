[
  {
    "information_requirement": "Is an adversary disrupting our communications by blocking or redirecting legitimate phone calls on corporate mobile devices?",
    "tactic_id": "TA0034",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application manifest, for an application not on the approved communications application allowlist, contains permissions indicative of call interception, specifically one or more of: `ANSWER_PHONE_CALLS`, `PROCESS_OUTGOING_CALLS`, or `MANAGE_OWN_CALLS`.",
            "data_sources": [
              "MDM application inventory logs",
              "Android application manifest file"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform; Mobile Application Management (MAM) server; Application vetting and sandboxing environment.",
            "action": [
              "Query the UEM application inventory for all installed applications and their permissions. Join this data with a pre-defined allowlist of approved communication apps (e.g., native dialer, Microsoft Teams). Generate an alert for any application not on the allowlist that possesses the `PROCESS_OUTGOING_CALLS` or `ANSWER_PHONE_CALLS` permission.",
              "Define a permission risk score by assigning weights to high-risk permissions (e.g., `PROCESS_OUTGOING_CALLS`:10, `ANSWER_PHONE_CALLS`:10, `MANAGE_OWN_CALLS`:8). For each application, calculate its total score. Within each App Store category (e.g., 'Productivity', 'Games'), calculate the 98th percentile of these scores. Flag any application with a score exceeding its category's percentile threshold.",
              "Train a Random Forest classifier on a labeled dataset of benign and malicious application manifests. Engineer features including a binary vector of all requested permissions, the total count of permissions, the count of high-risk call-related permissions, and categorical features for declared services and receivers. Deploy the model to scan newly installed applications and flag any classified as 'malicious' with a confidence score above 0.85."
            ]
          },
          {
            "description": "Android Logcat events from a single device show a `NEW_OUTGOING_CALL` intent immediately followed by an `abortBroadcast()` call from a non-system, third-party application package within a 1-second window, indicating an outgoing call was programmatically blocked.",
            "data_sources": [
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregator (SIEM) collecting real-time Logcat streams from managed devices; Endpoint Detection and Response (EDR) for Mobile platform.",
            "action": [
              "Deploy a SIEM correlation rule that triggers when an `ACTION_NEW_OUTGOING_CALL` intent event is followed within 1 second by an `abortBroadcast()` event from the same device. The rule must only fire if the source package name of the abort event is not on a pre-defined allowlist of system or approved telephony packages.",
              "For each managed device, calculate a daily ratio of `abortBroadcast` calls to `ACTION_NEW_OUTGOING_CALL` intents. Maintain a 30-day rolling average and standard deviation of this ratio for each device. Alert if a device's daily ratio exceeds its own historical baseline by 3 standard deviations or if it exceeds the 95th percentile of the entire device fleet's ratio for that day.",
              "Apply a time-series anomaly detection model, such as Seasonal-Hybrid ESD (S-H-ESD), to the fleet-wide count of `abortBroadcast()` events per minute. A sudden spike that the model flags as a significant anomaly, outside of established daily and weekly patterns, should trigger an investigation into the top devices and source packages contributing to the spike."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary performing audio surveillance by programmatically answering, initiating, or hiding calls?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application's manifest contains a suspicious combination of permissions enabling surveillance, specifically (`CALL_PHONE` or `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` or `READ_CALL_LOG`), and is not an approved recording application.",
            "data_sources": [
              "MDM application inventory logs",
              "Android application manifest file"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform; Mobile Application Management (MAM) server; Data warehouse containing application metadata.",
            "action": [
              "Configure a high-priority UEM/MDM alert to trigger upon installation of any application whose manifest contains the permission set (`CALL_PHONE` OR `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` OR `READ_CALL_LOG`). Maintain an exception list for pre-vetted applications like compliant enterprise voice recorders or accessibility tools.",
              "Implement a 'Spyware Potential Score' for each application. Assign weights to risky permissions (e.g., `RECORD_AUDIO`:10, `CALL_PHONE`:8, `WRITE_CALL_LOG`:5, `READ_CALL_LOG`:5, `ACCESS_FINE_LOCATION`:5). Sum the weights for each application. Calculate the 99th percentile score for each application category (e.g., 'Productivity', 'Social'). Alert on any application exceeding the 99th percentile for its category or having a raw score above a high-water mark of 20.",
              "Represent each application as a multi-hot encoded vector of its requested permissions. Apply a density-based clustering algorithm like DBSCAN to this vector space. Investigate any small, dense clusters (e.g., min_samples=3) that are not associated with known, legitimate application types, as these represent apps with rare and potentially malicious permission combinations."
            ]
          },
          {
            "description": "A discrepancy exists between carrier-provided Call Detail Records (CDRs) and the on-device call log, where an outgoing or incoming call record is present in the CDR but absent from the corresponding device's log, indicating log tampering via the `WRITE_CALL_LOG` permission.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "MDM-retrieved device call logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data warehouse or SIEM containing both ingested telecom provider CDR feeds and UEM-polled device call logs; Telecom Expense Management (TEM) platform.",
            "action": [
              "Schedule a daily automated script that performs a `LEFT JOIN` from the CDR table to the device call log table on `device_identifier`, `call_timestamp` (with a +/- 5-second tolerance), and `destination_or_source_number`. Alert on any record that exists in the CDRs but is null (unmatched) in the device logs.",
              "For each device, create two sets of call records for a rolling 24-hour window: Set A from CDRs and Set B from device logs. Each record is a tuple of (`normalized_number`, `timestamp_rounded_to_minute`). Calculate the Jaccard similarity coefficient $$ J(A,B) = |A \\cap B| / |A \\cup B| $$. Alert if this coefficient for any device drops below a dynamically calculated baseline (e.g., 10th percentile of the fleet's daily Jaccard scores) or a static threshold of 0.95.",
              "Train a regression model (e.g., Gradient Boosting Regressor) to predict the expected number of device log entries for a user in a 24-hour period. Use features like the number of CDR entries, the user's role, historical call volume, and time of day. Flag any user where the actual count of device log entries falls below the 5th percentile of the model's prediction interval, indicating statistically significant log deletion."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using automated or programmatic phone calls as a command and control (C2) channel?",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "A device's Call Detail Records (CDRs) exhibit beaconing behavior, characterized by a high frequency of short-duration (e.g., less than 5 seconds) outgoing calls to a small set of destination numbers at regular intervals.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Telecom provider data feeds ingested into a central SIEM or data lake; Telecom Expense Management (TEM) platform.",
            "action": [
              "Create a SIEM rule to alert on any single device making more than 5 outgoing calls with a duration of less than 5 seconds to the same destination number within a 1-hour period. Maintain an allowlist of known automated service numbers (e.g., voicemail, system status hotlines) to reduce false positives.",
              "For each device over a 24-hour window, filter CDRs for calls with duration < 5 seconds. Calculate the Shannon entropy of the unique destination numbers for these short calls using $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$. A low entropy score indicates low randomness. Alert on devices that are simultaneously in the top 5% for the count of short calls and the bottom 5% for destination number entropy across the fleet.",
              "For each device, create a time series of inter-arrival times between short-duration calls to the same number. Use a clustering algorithm like K-Means on features derived from this time series, such as the mean and variance of inter-arrival times. A tight cluster with low variance indicates periodic beaconing and should be investigated."
            ]
          },
          {
            "description": "A temporal correlation is observed where a short-duration outgoing call from a device (from CDRs) is immediately followed within seconds by outbound network activity (e.g., DNS query, TCP/UDP connection) from the same device's IP address (from Zeek logs), suggesting a call-initiated C2 callback.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake with correlation capabilities, ingesting logs from telecom providers (CDRs) and network infrastructure (Zeek sensors on Wi-Fi controllers, VPN concentrators, and internet gateways).",
            "action": [
              "Create a SIEM correlation rule that triggers on a CDR entry with a call duration < 5 seconds. The rule then searches for any `Zeek dns.log` or `Zeek conn.log` entry from the device's last known IP address occurring within 10 seconds of the call's end time. Alert if the destination IP or resolved domain matches a threat intelligence feed of known C2 infrastructure.",
              "For each device, create two binary time series with 1-second resolution over a 24-hour period: Series A marks the end of short calls (< 5s) from CDRs, and Series B marks new outbound connections from `Zeek conn.log`. Calculate the cross-correlation function between A and B. Alert on devices showing a statistically significant correlation peak at a small positive lag (e.g., 1-10 seconds), indicating calls consistently precede network traffic.",
              "Ingest CDR and Zeek logs as a unified, time-ordered event stream for each device. Use a sequential pattern mining algorithm (e.g., PrefixSpan) to discover frequently occurring event sequences within a 30-second window. Specifically search for the pattern `(event:short_call_end) -> (event:dns_query_for_rare_domain) -> (event:tcp_connection_start)`. Rank discovered patterns by their support and confidence to identify strong indicators of call-based C2."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]