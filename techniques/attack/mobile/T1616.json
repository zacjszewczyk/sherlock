[
  {
    "information_requirement": "Is an adversary disrupting our communications by blocking or redirecting legitimate phone calls on corporate mobile devices?",
    "tactic_id": "TA0034",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application, not present on a pre-defined allowlist of approved communications applications, possesses one or more high-risk permissions in its manifest, specifically `ANSWER_PHONE_CALLS`, `PROCESS_OUTGOING_CALLS`, or `MANAGE_OWN_CALLS`.",
            "data_sources": [
              "UEM application inventory logs",
              "Android application manifest file"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform; Mobile Application Management (MAM) server; Application vetting and sandboxing environment.",
            "action": [
              "Construct a query against the UEM platform to retrieve all installed application package names and their granted permissions. Join this data against a maintained allowlist of approved communication application packages (e.g., native dialer, approved VoIP apps). Generate an alert for any application not on the allowlist that possesses the `PROCESS_OUTGOING_CALLS` or `ANSWER_PHONE_CALLS` permission.",
              "Define a permission risk score by assigning weights to high-risk permissions (e.g., `PROCESS_OUTGOING_CALLS`: 10, `ANSWER_PHONE_CALLS`: 10, `MANAGE_OWN_CALLS`: 8). For each application, sum the weights of its permissions to get a total score. Group applications by their App Store category (e.g., 'Productivity', 'Games') and calculate the 98th percentile of these scores for each category. Flag any application with a score exceeding its category's percentile threshold for manual review.",
              "Train a supervised classification model (e.g., Random Forest) on a labeled dataset of benign and malicious application manifests. Engineer features for the model including a multi-hot encoded vector of all requested permissions, the total count of permissions, a specific count of high-risk call-related permissions, and categorical features for declared services and broadcast receivers. Deploy the model to scan newly installed applications and flag any classified as 'malicious' with a confidence score above 0.85."
            ]
          },
          {
            "description": "An Android Logcat event stream from a single device contains a `NEW_OUTGOING_CALL` broadcast intent immediately followed by an `abortBroadcast()` method call from a non-system, third-party application package within a 1-second window, indicating a programmatically blocked outgoing call.",
            "data_sources": [
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregator (SIEM) collecting real-time Logcat streams from managed devices; Endpoint Detection and Response (EDR) for Mobile platform.",
            "action": [
              "Implement a SIEM correlation rule that triggers when an event with tag `Telephony` and message `ACTION_NEW_OUTGOING_CALL` is followed within 1 second by an `abortBroadcast()` event from the same device `process_id`. The rule must filter and only fire if the source package name of the abort event is not on a pre-defined allowlist of system or approved telephony packages.",
              "For each managed device, calculate a daily ratio of `abortBroadcast` calls to `ACTION_NEW_OUTGOING_CALL` intents originating from non-system packages. Maintain a 30-day rolling average and standard deviation of this ratio for each device. Generate an alert if a device's daily ratio exceeds its own historical baseline by 3 standard deviations or if it exceeds the 95th percentile of the entire device fleet's ratio for that day.",
              "Apply a time-series anomaly detection model, such as Seasonal-Hybrid ESD (S-H-ESD), to the fleet-wide count of `abortBroadcast()` events per minute. The model should be trained on at least 30 days of data to learn daily and weekly seasonality. A sudden spike that the model flags as a statistically significant anomaly, outside of established patterns, should trigger an investigation into the top devices and source packages contributing to the spike."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary performing audio surveillance by programmatically answering, initiating, or hiding calls?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application's manifest contains a combination of permissions indicative of surveillance, specifically (`CALL_PHONE` or `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` or `READ_CALL_LOG`), and the application is not on an allowlist of approved call recording or unified communications tools.",
            "data_sources": [
              "UEM application inventory logs",
              "Android application manifest file"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform; Mobile Application Management (MAM) server; Data warehouse containing application metadata and allowlists.",
            "action": [
              "Configure a high-priority alert in the UEM/MDM platform to trigger upon the installation of any application whose manifest contains the permission set (`CALL_PHONE` OR `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` OR `READ_CALL_LOG`). Maintain an exception list for pre-vetted applications like compliant enterprise voice recorders or accessibility tools to reduce false positives.",
              "Develop a 'Spyware Potential Score' for each application. Assign numerical weights to risky permissions (e.g., `RECORD_AUDIO`: 10, `CALL_PHONE`: 8, `WRITE_CALL_LOG`: 5, `READ_CONTACTS`: 5, `ACCESS_FINE_LOCATION`: 5). Sum the weights for each application. Calculate the 99th percentile score for each application category (e.g., 'Productivity', 'Social'). Alert on any application exceeding the 99th percentile for its category or having a raw score above a predetermined high-water mark of 20.",
              "Represent each application as a multi-hot encoded vector based on its requested permissions. Apply a density-based clustering algorithm like DBSCAN to this vector space. Investigate any small, dense clusters (e.g., min_samples=3) that are not associated with known, legitimate application types, as these represent applications with rare and potentially malicious permission combinations indicative of spyware."
            ]
          },
          {
            "description": "One or more call records, identified by timestamp and destination/source number, are present in carrier-provided Call Detail Records (CDRs) for a device but are absent from the on-device call log retrieved by the UEM/MDM platform for the corresponding time period.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "UEM-retrieved device call logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data warehouse or SIEM containing both ingested telecom provider CDR feeds and UEM-polled device call logs; Telecom Expense Management (TEM) platform.",
            "action": [
              "Execute a daily automated script that performs a `LEFT JOIN` from the CDR table to the device call log table, joining on `device_identifier`, `call_timestamp` (with a +/- 5-second tolerance), and `destination_or_source_number`. Generate an alert for any record that exists in the CDRs but results in a null (unmatched) entry from the device logs, indicating a missing record.",
              "For each device, create two sets of call records for a rolling 24-hour window: Set A from CDRs and Set B from device logs, where each record is a tuple of (`normalized_number`, `timestamp_rounded_to_minute`). Calculate the Jaccard similarity coefficient $$ J(A,B) = |A \\cap B| / |A \\cup B| $$. Alert if this coefficient for any device drops below a dynamically calculated baseline (e.g., 10th percentile of the fleet's daily Jaccard scores) or a static threshold of 0.95.",
              "Train a regression model (e.g., Gradient Boosting Regressor) to predict the expected number of device log entries for a user in a 24-hour period. Use features such as the number of CDR entries, user's department, historical call volume, and time of day. Flag any user where the actual count of device log entries falls below the 5th percentile of the model's prediction interval, indicating a statistically significant and anomalous number of deleted log entries."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using automated or programmatic phone calls as a command and control (C2) channel?",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "A device's Call Detail Records (CDRs) show a pattern of repeated, short-duration (e.g., less than 5 seconds) outgoing calls to a small set of unique numbers at regular, periodic intervals, inconsistent with normal user behavior.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Telecom provider data feeds ingested into a central SIEM or data lake; Telecom Expense Management (TEM) platform.",
            "action": [
              "Create a SIEM rule that alerts when a single device makes more than 5 outgoing calls with a `duration` of less than 5 seconds to the same `destination_number` within a 1-hour period. Exclude known automated service numbers (e.g., voicemail, system status hotlines) from the rule via an allowlist.",
              "On a daily basis, for each device, filter its 24-hour CDRs for calls with duration < 5 seconds. Calculate the Shannon entropy of the unique destination numbers for these short calls using $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$. A low entropy score indicates low randomness (i.e., calling the same few numbers repeatedly). Alert on devices that are simultaneously in the top 5% for the count of short calls and the bottom 5% for destination number entropy across the fleet.",
              "For each device, extract the time series of inter-arrival times (time between calls) for short-duration calls made to the same number. Use a clustering algorithm like K-Means on features derived from this time series, such as the mean and variance of inter-arrival times. A tight cluster with low variance indicates periodic, machine-like beaconing and should be investigated as high-priority."
            ]
          },
          {
            "description": "A temporal correlation exists where a short-duration outgoing call record in a device's CDR is followed within a short window (e.g., under 10 seconds) by an outbound network connection from the device's assigned IP address, as recorded in Zeek conn.log or dns.log.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake with correlation capabilities, ingesting logs from telecom providers (CDRs) and network infrastructure (Zeek sensors on Wi-Fi controllers, VPN concentrators, and internet gateways).",
            "action": [
              "Create a SIEM correlation rule that triggers on a CDR entry with a call `duration` < 5 seconds. The rule then searches for any `Zeek conn.log` or `Zeek dns.log` entry from the device's last known IP address occurring within 10 seconds of the call's end time. Generate a high-severity alert if the destination IP or resolved domain in the Zeek log matches a threat intelligence feed of known C2 infrastructure.",
              "For each device, create two binary time series with 1-second resolution over a 24-hour period: Series A has a '1' at the second a short call (< 5s) ends (from CDRs), and '0' otherwise. Series B has a '1' at the second a new outbound connection is initiated (from `Zeek conn.log`), and '0' otherwise. Calculate the cross-correlation function between series A and B. Alert on devices showing a statistically significant correlation peak at a small positive lag (e.g., 1-10 seconds), indicating calls consistently precede network traffic.",
              "Ingest CDR and Zeek logs into a unified, time-ordered event stream for each device. Use a sequential pattern mining algorithm (e.g., PrefixSpan) to discover frequently occurring event sequences within a 30-second window. Specifically search for the pattern `(event:short_call_end) -> (event:dns_query_for_rare_domain) -> (event:tcp_connection_start)`. Rank discovered patterns by their support and confidence to identify strong, repeated sequences indicative of call-based C2."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]