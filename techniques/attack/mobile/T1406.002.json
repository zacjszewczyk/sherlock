[
  {
    "information_requirement": "Is an adversary using packed or obfuscated applications to evade detection on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406.002",
        "name": "Software Packing",
        "evidence": [
          {
            "description": "An Android Application Package (APK) file, identified via network transfer or file creation, exhibits a calculated Shannon entropy score that falls in the upper percentile (e.g., >95th) of a baseline established from known-good, corporate-approved mobile applications, indicating the presence of highly compressed or encrypted code.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), Corporate Wi-Fi and VPN termination points, Developer workstations and build servers, MDM/EMM application inventories.",
            "action": "Symbolic: From Zeek http.log, identify all downloads of files with MIME type 'application/vnd.android.package-archive' (APKs). Correlate the source domain (from dns.log) and IP address (from conn.log) against threat intelligence feeds for known malware distribution points. Generate an alert for any match. Statistical: Continuously monitor Zeek files.log and Windows Sysmon Event ID 11 for new APK files. For each new APK, calculate its byte-level Shannon entropy. Maintain a statistical baseline (mean, standard deviation, percentiles) of entropy scores for all applications currently approved in the MDM/EMM. Flag any new APK with an entropy score exceeding the 95th percentile of the baseline for manual review. Machine Learning: Develop and deploy a binary classification model (e.g., Random Forest, XGBoost) trained on a labeled dataset of benign and packed/malicious APKs. Extract features for each APK including Shannon entropy, file size, permissions requested (from parsed manifest), and network context from Zeek logs (e.g., source ASN, domain age, TLS JA3 hash). An APK classified as 'packed/malicious' with high confidence (e.g., >0.9) should trigger an automated detonation in a sandbox or a high-priority SOC alert."
          },
          {
            "description": "An APK file contains specific byte sequences, strings, or executable section names (e.g., '.UPX0', '.aspack', '.pdata') that are characteristic of known software packers such as UPX, FTT, or DexProtector.",
            "data_sources": [
              "Zeek files.log",
              "Windows Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on developer and user endpoints, Corporate application repositories, Network file transfer inspection points, Sandboxed analysis environments.",
            "action": "Symbolic: Configure a file analysis pipeline to automatically scan APKs identified in Zeek files.log and Windows Sysmon Event ID 11. Use a comprehensive YARA ruleset designed to detect signatures of mobile application packers (e.g., UPX, DexProtector) and known obfuscation libraries. A YARA rule match should generate a high-fidelity alert with the matched rule name and file hash for immediate investigation. Statistical: For each new APK, parse its internal structure to extract all executable section names. Establish a baseline of common section names (e.g., '.text', '.data', '.dex') and their frequencies from the approved MDM/EMM application inventory. Calculate the frequency of non-standard or obfuscated-looking section names (e.g., random strings, non-ASCII characters) for each new APK. An APK with a high count of unusual section names (e.g., > 3 standard deviations above the baseline mean) should be flagged for deeper analysis. Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA, Prophet) on the hourly count of YARA rule hits for 'Software Packing' detections. A statistically significant spike in detections that deviates from the established pattern (e.g., exceeding the 99th percentile of the moving average) could indicate a new adversary campaign. This anomaly should trigger a proactive threat hunt to identify the scope and origin of the campaign."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]