[
  {
    "information_requirement": "Is an adversary attempting to gather detailed system and hardware information from our mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1426",
        "name": "System Information Discovery",
        "evidence": [
          {
            "description": "An adversary's attempt to discover system information is evidenced by one of three network patterns originating from a mobile device: (A) A single HTTP/S connection where the outbound data volume in `conn.log` is minimal (e.g., 100 bytes to 5 KB), the destination is a low-reputation or newly registered domain, the URI in `http.log` contains a high-entropy string (Shannon entropy > 4.0), and the TLS client fingerprint in `ja3.log` is rare or associated with known malware. (B) A DNS query in `dns.log` for a high-entropy or algorithmically generated subdomain, followed by a small data transfer, indicating DNS tunneling of device details. (C) A direct-to-IP connection in `conn.log` (lacking a preceding DNS query for the destination IP) with a small, periodic outbound data payload, suggesting a hardcoded C2 channel for exfiltration.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log",
              "Zeek ja3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate and guest Wi-Fi, VPN concentrators, enterprise DNS resolvers, and secure web gateways where mobile device traffic is inspected.",
            "action": "As an analyst, execute the following three-part detection strategy using SIEM queries on Zeek logs from the specified NAIs:\n1. Symbolic Detection (IOC Matching): Execute continuous SIEM queries against Zeek logs from the mobile device IP space. First, monitor `dns.log` and `http.log` for requests to destinations (domains, IPs) present on threat intelligence feeds for C2, malware, or fingerprinting services. Second, in `ssl.log`, search for JA3 hashes known to be associated with malicious tools. Third, in `http.log`, search for suspicious User-Agent strings (e.g., 'Mozilla/5.0' with no other tokens, or strings associated with enumeration tools). Finally, cross-reference requested domains in `dns.log` with a Newly Registered Domain (NRD) feed, flagging any domain registered within the last 90 days. Generate a high-severity alert for any match.\n2. Statistical Anomaly Detection: For each mobile device IP, establish a 30-day rolling baseline and flag deviations. First, in `conn.log`, identify connections with outbound bytes between 100 and 5120 and flag any destination IP receiving such traffic from >5% of the mobile fleet within 24 hours. Second, calculate the Shannon entropy of the URI in `http.log` and the query portion of `dns.log`. Flag any value exceeding the 98th percentile of the device's historical baseline. Third, in `ja3.log`, flag any JA3 hash that is present on less than 0.5% of the mobile device fleet. Finally, analyze the inter-arrival time of connections in `conn.log` between a specific source-destination pair. Flag any connection series where the standard deviation of the inter-arrival time is below a low threshold (e.g., < 2 seconds for a 1-hour window), indicating robotic beaconing. A device triggering multiple statistical flags within a 10-minute window should generate a medium-severity alert for correlation.\n3. Machine Learning-Based Detection: Deploy and monitor three ML models to analyze mobile device traffic. First, for DGA Detection, use an LSTM-based classifier on domain names from `dns.log` to identify and flag algorithmically generated domains with high confidence. Second, for TLS Fingerprint Analysis, use a Random Forest classifier trained on labeled JA3 and JARM fingerprints from `ssl.log` to classify TLS sessions as benign, suspicious, or malicious. Third, for Connection Anomaly Detection, employ an Isolation Forest model trained on a feature set from `conn.log` (e.g., `orig_bytes`, `resp_bytes`, `duration`, `proto`, destination port) to identify anomalous connection patterns that deviate from a learned baseline of normal fleet-wide mobile behavior. Escalate to a high-confidence incident if a device triggers a DGA or malicious TLS alert that is also flagged as an anomaly by the connection model, especially if correlated with statistical flags like small payload size."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]