[
  {
    "information_requirement": "Is an adversary using masquerading techniques on corporate mobile devices to evade detection? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1655.001",
        "name": "Match Legitimate Name or Location",
        "evidence": [
          {
            "description": "An installed mobile application has a package name, display name, or icon that closely mimics a known legitimate application, but its signing certificate differs from the authentic application's certificate. Additionally, the application's package name or signer certificate hash appears on a threat intelligence feed of known malicious indicators.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) server database; Cloud-hosted MDM administrative consoles; Corporate-managed iOS and Android devices.",
            "action": [
              "Query MDM application inventory logs for all installed application package names and signer certificate hashes. Correlate these fields against a threat intelligence feed of known malicious mobile application identifiers. Generate a high-severity alert for any exact match.",
              "1. Establish and maintain an organizational allowlist of approved applications, storing tuples of (package_name, signer_certificate_thumbprint, icon_hash). 2. On a daily basis, query all installed applications and group them by display name. 3. For each group, count the unique signer certificates. If a display name is associated with more than one signer certificate (and is not a known legitimate variant), flag it for review. 4. Calculate the Levenshtein distance between all installed package names and the allowlisted package names; alert on any application with a distance score greater than 0 but less than 3 as potential typosquatting.",
              "Develop and apply a Random Forest classification model trained on application manifest data to identify masquerading apps. Extract features such as: count of requested permissions, presence of high-risk permissions (e.g., SMS_READ, BIND_DEVICE_ADMIN), number of exported activities/services, and string characteristics of the package name (e.g., character entropy, n-gram frequency). Flag applications classified as 'masquerade' with a model confidence score above 0.90 for analyst investigation."
            ]
          },
          {
            "description": "A mobile application, identified as potentially masquerading, exhibits anomalous network behavior when compared to the baseline of the legitimate application it imitates. Anomalies include: communication with known malicious domains or IPs, high-entropy domain name queries, connections to unusual destination ports, or use of TLS fingerprints (JA3) associated with malware.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Mobile Device Management (MDM) Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), Corporate WiFi network segments, and VPN concentrators",
            "action": [
              "From MDM logs, identify the IP address of devices running a suspected masquerading app. Filter Zeek logs for that IP. Join `dns.log` queries against a threat intelligence feed of malicious domains. Separately, join `ssl.log` JA3 client hashes against a feed of malicious JA3 hashes. Generate a high-severity alert upon any match.",
              "For each suspect application's network traffic: 1. In `dns.log`, calculate the Shannon entropy for all queried domains. Flag any domain with an entropy score exceeding the 99th percentile of all organizational DNS queries over the last 30 days. 2. In `conn.log`, create a profile of destination ports used by the legitimate application. Alert if the suspect application communicates on any port not in this established profile. 3. Calculate the ratio of outbound to inbound bytes; flag if this ratio deviates by more than three standard deviations from the legitimate application's baseline.",
              "Deploy a pre-trained LSTM Autoencoder model to detect anomalies in network traffic patterns. For each device running a suspect app, create 5-minute time-series vectors of features from Zeek logs (e.g., connection count, unique destination IPs, total bytes transferred, DNS query count). Feed this vector into the model trained on legitimate application traffic. A reconstruction error exceeding a dynamically set threshold (e.g., 99th percentile of errors on the training set) indicates anomalous behavior and should trigger an alert for manual review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]