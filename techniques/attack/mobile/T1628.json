[
  {
    "information_requirement": "Is an adversary hiding artifacts on managed mobile devices to evade detection?",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1628",
        "name": "Hide Artifacts",
        "evidence": [
          {
            "description": "The presence of an installed application package on a mobile device, as reported by the MDM/UEM inventory, which is simultaneously reported as not having a user-launchable icon. This condition is considered evidential when the application's package name or hash is not present on an established whitelist of legitimate, non-interactive system applications and services.",
            "data_sources": [
              "MDM Application Inventory Log (Fields: device_id, package_name, package_hash, version, permissions)",
              "MDM Application State Log (Fields: device_id, package_name, has_launcher_icon)",
              "Internal Whitelist of Known-Good Iconless Applications (Fields: package_name, justification)",
              "Threat Intelligence Feed (Fields: mobile_app_hash, mobile_package_name)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (both corporate-owned and BYOD), Mobile Device Management (MDM) and Unified Endpoint Management (UEM) platform administrative consoles and underlying databases.",
            "action": "1. (Symbolic Detection) On a scheduled basis (e.g., hourly), execute a query to identify iconless applications. a) From MDM logs, create a set of all installed packages (`all_apps`). b) Create a second set of packages reported to have a launcher icon (`launcher_apps`). c) Compute the set difference: `hidden_apps = all_apps - launcher_apps`. d) Filter this result set against the internal whitelist of known-good iconless applications. e) For each remaining package, query against the threat intelligence feed using its hash and package name. A match generates a high-severity alert for immediate SOC investigation.\n2. (Statistical Detection) For all non-whitelisted, iconless applications identified in step 1, perform statistical baselining to find outliers. a) Fleet Prevalence: For each hidden app, calculate its prevalence as `(count of devices with app) / (total number of managed devices)`. Flag applications with a prevalence score below the 1st percentile of all application prevalences for review as potentially targeted or rare. b) Device Anomaly Count: For each device, count the total number of non-whitelisted, iconless apps. Compare this count to a fleet-wide distribution. Alert on devices with a count exceeding the 99th percentile, indicating an unusual accumulation of hidden software. c) Permission Analysis: For each hidden app, extract its list of declared permissions from the MDM inventory. Calculate the Shannon entropy of this permission set. A high entropy score, relative to the average entropy of whitelisted system apps, suggests an unusually broad and potentially malicious set of requested capabilities and should be flagged for analyst review.\n3. (Machine Learning Detection) To proactively identify novel threats, deploy a machine learning classification model. a) Feature Engineering: For each newly observed, non-whitelisted iconless application, generate a feature vector containing: prevalence score (from 2a), count of permissions, permission entropy score (from 2c), a one-hot encoded vector of high-risk permissions (e.g., `READ_SMS`, `INSTALL_PACKAGES`, `ACCESS_FINE_LOCATION`), age and issuer of the signing certificate, and the installation source (e.g., 'AppStore', 'Sideloaded'). b) Model Training & Deployment: Train a Random Forest or Gradient Boosting classifier on a labeled historical dataset of benign and malicious iconless applications. Deploy the trained model via a scheduled job or API endpoint. c) Inference & Alerting: Use the deployed model to score all new hidden applications in near-real-time. An application receiving a maliciousness probability score greater than a tuned threshold (e.g., $$ > 0.90 $$) automatically triggers a medium-severity alert containing the app details and the model's score for analyst triage."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]