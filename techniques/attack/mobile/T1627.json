[
  {
    "information_requirement": "Is an adversary using execution guardrails to evade detection and ensure payload execution only on targeted mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627",
        "name": "Execution Guardrails",
        "evidence": [
          {
            "description": "A mobile application's manifest file (e.g., AndroidManifest.xml) contains a statistically rare combination of permissions (e.g., ACCESS_FINE_LOCATION, READ_PHONE_STATE, QUERY_ALL_PACKAGES) that falls below the 5th percentile for its declared app store category. Static code analysis further confirms that the application's decompiled source code contains conditional logic that checks environmental factors (e.g., device locale, network operator name via `TelephonyManager.getNetworkOperatorName()`, or Wi-Fi SSID via `WifiInfo.getSSID()`) before executing core malicious logic, rather than for legitimate user-facing features.",
            "data_sources": [
              "Mobile Application Manifest Files (e.g., AndroidManifest.xml)",
              "Mobile Threat Defense (MTD) permission analysis logs",
              "Static analysis reports from decompiled application source code (e.g., APK, IPA)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile Device Management (MDM) platform, internal application vetting/sandbox environments, and public/private mobile application marketplaces.",
            "action": [
              "For each new or updated application, parse its manifest file to extract requested permissions. Compare the permission set against a predefined watchlist of high-risk combinations (e.g., `READ_SMS` + `ACCESS_FINE_LOCATION` + `READ_CONTACTS`) known to be used by specific malware families. Additionally, scan the decompiled code for string references to known target-specific values, such as corporate domain names or internal Wi-Fi SSIDs. Generate an alert for any match.",
              "For each application, calculate the Jaccard similarity of its permission set against the median permission set for its app store category. Flag applications with a similarity score below the 10th percentile for review. Concurrently, calculate the Shannon entropy of the requested permissions based on their frequency across all monitored devices; an entropy score in the top 95th percentile indicates an unusual and potentially evasive combination requiring further analysis.",
              "Generate a feature vector for each application including one-hot encoded permissions, the count and type of exported services/receivers, and the presence of specific API calls associated with guardrailing (e.g., `TelephonyManager.getNetworkCountryIso`, `LocationManager.getLastKnownLocation`, `WifiManager.getConfiguredNetworks`). Train a classifier (e.g., Random Forest, Gradient Boosting) on a labeled dataset of benign and malicious applications. Quarantine any new application where the model predicts a malicious probability score of $$ p(malicious) > 0.90 $$ for subsequent dynamic analysis."
            ]
          },
          {
            "description": "In a dynamic analysis sandbox, an application exhibits minimal baseline activity (e.g., egress network traffic < 1KB/min, no sensitive API calls). After a specific environmental trigger is programmatically applied (e.g., GPS coordinates set to a target city, Wi-Fi SSID changed to a corporate name, SIM card MCC/MNC set to a target country's value, or device language changed to a specific language), the application's behavior changes dramatically. This change is marked by a sudden spike in egress network traffic (>1MB) to a low-reputation domain and new, previously unobserved API calls to access sensitive data (e.g., contacts, SMS, call logs) are logged.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Dynamic analysis sandbox logs (API call traces, system call logs, file system access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate mobile devices (via VPN or proxy), guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.",
            "action": [
              "Within a dynamic sandbox, sequentially apply a list of environmental triggers (e.g., specific GPS coordinates, corporate Wi-Fi SSIDs, specific SIM country codes). Monitor `Zeek dns.log` and `conn.log` for any network activity initiated within 60 seconds following each trigger. Generate a high-severity alert if a DNS query is made to a domain on a threat intelligence feed or a connection is established to an IP address with a low reputation score.",
              "Establish a 5-minute behavioral baseline for the application, calculating the mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) of outbound bytes per 10-second window from `Zeek conn.log`. After applying an environmental trigger, alert if any subsequent 10-second window's outbound byte count exceeds the threshold of $$ \\mu + 3\\sigma $$. Concurrently, calculate the entropy of destination ports and requested DNS domains (from `dns.log`) before and after the trigger; a statistically significant increase in both volume and entropy indicates a state change to active C2 or data exfiltration.",
              "From a baseline of normal operation in the sandbox, generate a time-series vector of network flow features (bytes out/sec, packets out/sec, flow duration, protocol) from `Zeek conn.log`. Train a Long Short-Term Memory (LSTM) autoencoder model on this baseline data to learn the application's normal network behavior. Continuously monitor the application's network traffic, and after applying an environmental trigger, generate an alert if the model's reconstruction error spikes above the 99th percentile of its historical distribution, indicating a significant behavioral anomaly inconsistent with its learned normal state."
            ]
          }
        ]
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]