[
  {
    "information_requirement": "Is an adversary using execution guardrails to evade detection and ensure payload execution only on targeted mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627",
        "name": "Execution Guardrails",
        "evidence": [
          {
            "description": "A mobile application's manifest (AndroidManifest.xml) requests a set of permissions (e.g., ACCESS_FINE_LOCATION, READ_PHONE_STATE, GET_ACCOUNTS) whose combined occurrence is statistically rare, falling below the 5th percentile for its declared application store category. Static analysis of the decompiled code confirms that API calls corresponding to these permissions are checked as conditions before primary malicious logic is executed, rather than to support user-facing features.",
            "data_sources": [
              "Mobile Application Manifest Files (AndroidManifest.xml)",
              "Mobile Threat Defense (MTD) logs",
              "Static analysis reports from decompiled application code"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile Device Management (MDM) platform, and internal application vetting/sandbox environments.",
            "action": "1. (Symbolic Logic) For each new or updated application, parse its AndroidManifest.xml. Alert if a high-risk permission combination (e.g., `READ_SMS` + `ACCESS_FINE_LOCATION` + `READ_CONTACTS`) is present, which matches a predefined watchlist of suspicious sets used by known malware. 2. (Statistical Analysis) For each application, extract its full permission set. Calculate the Jaccard similarity index of this set against the typical permission set for its app store category. Flag applications with a similarity score below a dynamic threshold (e.g., 1st quartile) for that category. Additionally, calculate the Shannon entropy of the requested permissions based on their global frequency in your environment; an entropy score in the top 95th percentile suggests an unusual and suspicious combination requiring review. 3. (Machine Learning) For each application, create a feature vector including one-hot encoded permissions, the count of exported services, and the presence of specific API calls associated with guardrailing (e.g., `TelephonyManager.getNetworkCountryIso`, `LocationManager.getLastKnownLocation`). Input this vector into a trained Random Forest or Gradient Boosting classifier. Quarantine any application where the model predicts a malicious probability score $$ p(malicious) > 0.90 $$ for dynamic analysis."
          },
          {
            "description": "During dynamic analysis in a sandbox, an application exhibits minimal network activity (e.g., egress traffic under 1KB/min) and no sensitive API calls. After a specific environmental condition is met (e.g., GPS coordinates set to a specific city, Wi-Fi SSID changed to a known corporate name, SIM card country ISO changed), the application's behavior dramatically changes. This change is characterized by a sudden spike in network traffic (>1MB egress) to a low-reputation domain (e.g., newly registered, DGA-like) identified in Zeek logs, and new system calls to access sensitive data (e.g., contacts, SMS, device identifiers) are observed via API hooking.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Dynamic analysis sandbox logs (API call traces, system call logs, file system access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate mobile devices (via VPN or proxy), guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.",
            "action": "1. (Symbolic Logic) In a dynamic sandbox, systematically apply environmental triggers from a pre-defined list (e.g., specific GPS coordinates, Wi-Fi SSIDs, device language settings). Monitor `Zeek dns.log` and `conn.log`. Trigger a high-severity alert if, immediately following a change, a DNS query is made to a domain on a threat intelligence feed or a connection is established to a known malicious IP address. 2. (Statistical Analysis) Establish a 5-minute baseline of application behavior, calculating the mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) of outbound bytes per 10-second interval from `Zeek conn.log`. After applying an environmental trigger, identify any 10-second interval where outbound bytes exceed $$ \\mu + 3\\sigma $$. Concurrently, calculate the entropy of destination ports used during the baseline and post-trigger phases. A significant increase in both outbound volume and port entropy indicates a potential state change from dormant to active C2 communication. 3. (Machine Learning) Continuously feed a time-series vector of network flow features (e.g., bytes out per second, packets out per second, flow duration) from `Zeek conn.log` into a trained LSTM autoencoder model. Monitor the model's reconstruction error. An alert is generated if the reconstruction error spikes above the 99th percentile of its historical distribution immediately following the application of an environmental trigger, indicating a behavioral anomaly inconsistent with the application's established baseline."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]