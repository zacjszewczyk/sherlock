[
  {
    "information_requirement": "Has an adversary successfully collected contact list data from corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.003",
        "name": "Contact List",
        "evidence": [
          {
            "description": "An application on a managed mobile device has 'read contacts' permission and belongs to an App Store category where this permission is statistically rare (e.g., <2% prevalence) compared to other applications in the same category across the organization's device fleet.",
            "data_sources": [
              "MDM Application Inventory Log",
              "MTD Permission Audit Log",
              "Application Vetting Service Results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM/MTD log aggregation platform, Application Vetting Service Portal",
            "action": [
              "Create a SIEM rule that joins the MDM application inventory with a threat intelligence feed of malicious mobile application identifiers (e.g., package names, SHA256 hashes). Trigger a high-priority alert if an installed application has 'read contacts' permission AND its identifier matches an entry in the feed.",
              "On a scheduled basis (e.g., daily), query MDM inventory logs to group all installed applications by their store category. For each category, calculate the percentage of applications that have 'read contacts' permission. Generate a list for analyst review of all applications that possess the permission but belong to a category where the permission prevalence is below a 2% threshold.",
              "Train a supervised classification model (e.g., Random Forest) using application metadata from MDM/MTD logs as features (e.g., one-hot encoded permissions, developer reputation, app store rating, number of installs, app category, age of app). The model's target variable is a binary label for 'malicious' or 'benign' based on historical analysis and threat intelligence. Run this model against all applications with contact access and create a case for any application predicted as 'malicious' with a confidence score exceeding 0.90."
            ]
          },
          {
            "description": "A process on a mobile device makes an anomalous number of OS API calls to access the contact list within a 60-minute window, immediately followed by one or more network connections from the same device to a destination IP/domain that is on a threat intelligence blocklist, has a high DNS query entropy score (>3.5), or has not been previously observed in the last 90 days of network traffic.",
            "data_sources": [
              "MTD OS API Call Log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile VPN concentrators, Network egress points for mobile device traffic, DNS resolvers serving mobile clients",
            "action": [
              "Create a SIEM correlation rule that triggers when an MTD log event shows a contact list access event (e.g., api_call: 'Contacts.lookup') from a device_id, and within the subsequent 5 minutes, a Zeek conn.log entry shows a connection where the id.orig_h (source IP) maps to the same device_id and the id.resp_h (destination IP) is present in a 'Mobile Malware C2' threat intelligence feed.",
              "For each unique device_id and application pair, query MTD logs to compute a 30-day rolling baseline of hourly contact list API call counts. Trigger an alert if the current hourly count for any pair exceeds the 99th percentile of its historical baseline. Enrich this alert by correlating the device's IP at the time of the alert with Zeek dns.log to identify any DNS queries in the same hour to domains with a calculated Shannon entropy score > 3.5 or to a FQDN not previously observed in the last 90 days.",
              "Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on sequences of multimodal device event vectors. Each vector represents a time slice (e.g., 1 minute) and contains features like api_call_count, network_connection_count, bytes_out, and bytes_in from MTD and Zeek logs. An alert is generated when the model's reconstruction error for a real-time event sequence containing a contact list access event exceeds a dynamically tuned threshold, indicating a significant deviation from the device's learned normal behavior pattern."
            ]
          },
          {
            "description": "A managed mobile device generates a 'device compromised' or 'integrity check failed' status alert in MDM logs, and an application inventory for the same device shows an app installed from an unofficial source ('sideloaded') that also possesses 'read contacts' permission.",
            "data_sources": [
              "MDM Device Compliance Log",
              "MDM Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM administration console, Device compliance reporting dashboards",
            "action": [
              "Implement a SIEM rule that generates a critical alert when logs for a single device_id meet three conditions in a short time window (e.g., 1 hour): (1) an MDM compliance log event with status: 'compromised' or integrity_check: 'failed'; (2) an MDM application inventory log event with install_source: 'unofficial'; and (3) the manifest for that same unofficial app includes 'read contacts' permission.",
              "Generate a weekly report of all devices with sideloaded applications by querying MDM inventory logs. For each such device, calculate a risk score by summing predefined weights for all sensitive permissions held by its sideloaded apps (e.g., Contacts=10, Microphone=10, SMS=8, Location=7). Rank all devices by this cumulative risk score and create investigation tickets for the top 5% or any device with a score exceeding a threshold of 20.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to the entire mobile device fleet. Use features from MDM logs such as os_patch_level, failed_integrity_checks_last_30d, sideloaded_app_count, and high_risk_permission_count. Configure the algorithm to identify outliers (noise points in DBSCAN). Isolate these outlier devices for investigation, as they represent configurations that significantly deviate from the established secure baselines of the main device clusters."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]