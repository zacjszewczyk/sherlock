[
  {
    "information_requirement": "Is an adversary bypassing mobile application security controls by downloading and executing new code at runtime?",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1407",
        "name": "Download New Code at Runtime",
        "evidence": [
          {
            "description": "A mobile application makes an HTTP/S connection to a low-reputation or newly registered domain and downloads an executable file (e.g., .dex, .so, .jar) or obfuscated script.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments and VPN concentrators for remote mobile devices",
            "action": "Correlate Zeek conn.log, http.log, and ssl.log to identify connections originating from managed mobile devices. For each HTTP/S transaction, calculate the entropy of the requested URI and check the reputation of the server hostname/IP using a threat intelligence feed. Flag connections to domains registered within the last 30 days or those with high entropy URIs. Analyze Zeek files.log for file transfers where the MIME type or file extension corresponds to executable code (e.g., 'application/java-archive', 'application/octet-stream'). Develop a risk score based on the combination of a low-reputation domain, high-entropy URI, and an executable file download."
          },
          {
            "description": "An installed application on an Android device is observed using dynamic code loading APIs such as DexClassLoader or System.load to execute code not included in its original APK.",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Application sandboxing analysis reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android mobile devices",
            "action": "Establish a baseline of applications within the environment that legitimately use dynamic code loading features. Ingest MTD logs that report API calls made by applications. Create a watchlist of sensitive APIs (e.g., DexClassLoader, System.load, JavascriptInterface). Trigger an alert when an application not on the established baseline is observed using a watchlisted API. Prioritize alerts for applications that also exhibit suspicious network behavior (cross-referenced with network log analysis from Zeek) or request excessive permissions."
          },
          {
            "description": "An installed application on an iOS device is observed using a known dynamic code execution framework, such as JSPatch. [1]",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS mobile devices",
            "action": "Using MTD or network inspection tools, scan for signatures or network indicators specific to frameworks like JSPatch. Since JSPatch often pulls scripts from a remote server, monitor DNS and HTTP requests (from Zeek dns.log and http.log) for patterns associated with its use. Create an alert for any device where an application is seen communicating with a known JSPatch distribution point or exhibiting the framework's characteristic network traffic. Maintain a library of known legitimate uses to reduce false positives."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]