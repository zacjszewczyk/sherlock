[
  {
    "information_requirement": "Is an adversary bypassing mobile application security controls by downloading and executing new code at runtime?",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1407",
        "name": "Download New Code at Runtime",
        "evidence": [
          {
            "description": "A network connection is observed from a managed mobile device IP address to a destination IP/domain that meets at least one of the following criteria: a) listed on an active threat intelligence feed, b) has a reputation score below 30/100 from an integrated reputation service, or c) was registered within the last 30 days. This connection must be correlated with a file download where the observed MIME type in network traffic is 'application/java-archive', 'application/x-dex', 'application/x-sharedlib', or 'application/octet-stream', and the download source is not an approved corporate or public application store.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, VPN concentrators, and cloud-based secure web gateways used by mobile devices.",
            "action": "1. Symbolic Detection: Create a SIEM rule that joins network connection logs (Zeek conn.log) with file transfer logs (Zeek files.log) using the session UID. Filter for traffic originating from the mobile device IP address range. Trigger a medium-severity alert if the destination IP or SNI (from Zeek ssl.log) matches an imported threat intelligence feed, OR the domain age is < 30 days, AND the file MIME type in files.log is one of ('application/java-archive', 'application/x-dex', 'application/x-sharedlib', 'application/octet-stream'). 2. Statistical Analysis: For all HTTP/S sessions from the mobile NAI, calculate the population frequency of each JA3 and JA3S hash (from Zeek ssl.log) over a 30-day rolling window. Flag sessions using a hash that falls in the bottom 5th percentile of frequency as anomalous. Separately, for HTTP traffic, calculate the Shannon entropy of the URI string (from Zeek http.log). Correlate rare JA3/JA3S hashes with high URI entropy (score > 4.5) to identify potential DGA or obfuscated C2 channels used for code downloads. 3. Machine Learning Model: Develop and deploy a Random Forest classifier trained on labeled historical network sessions. Engineer features including: destination domain age, threat intelligence score, JA3/JA3S hash prevalence, URI Shannon entropy, file MIME type, file size, presence of a self-signed certificate (from Zeek x509.log), ratio of uppercase to lowercase characters in the domain, and the number of subdomains. The model should score new sessions in near-real-time and generate a high-confidence alert for sessions classified as 'malicious dynamic code download' with a probability score greater than 0.85."
          },
          {
            "description": "A Mobile Threat Defense (MTD) agent on a managed Android device reports an API call to a function used for dynamic code loading, such as 'dalvik.system.DexClassLoader', 'java.lang.System.load', or 'android.webkit.JavascriptInterface'. The call originates from an application that is either not on the corporate allowlist or is a version of an approved application known to be vulnerable or previously trojanized.",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Application sandboxing analysis reports",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android mobile devices enrolled in MDM/MTD solutions.",
            "action": "1. Symbolic Detection: Implement a SIEM rule to generate a high-severity alert upon ingestion of an MTD log that explicitly identifies an API call to 'dalvik.system.DexClassLoader', 'java.lang.System.load', or 'android.webkit.JavascriptInterface'. The rule must enrich the alert by cross-referencing the source application's name, hash, and version (from MDM inventory logs) against a maintained allowlist of approved applications. 2. Statistical Analysis: For each application across the managed Android fleet, use MTD/MDM telemetry to establish a 30-day rolling baseline of API call frequencies for dynamic code loading functions. Generate a medium-severity alert for two conditions: a) a 'first use' event where an application calls one of these APIs for the first time across the entire fleet, or b) a 'frequency spike' where an individual user's application call count in a 24-hour period exceeds 3 standard deviations above its historical mean. 3. Machine Learning Model: Train an Isolation Forest model to detect anomalous application behavior. Use features derived from MTD telemetry, such as the sequence of API calls (using n-grams), the inter-arrival time between calls, and the combination of APIs called within a short time window. Train the model on a dataset of known-good applications to define 'normal' behavior. Apply the model to streaming telemetry and flag any application whose behavior is classified as an anomaly, prioritizing anomalies that involve the use of dynamic code loading APIs for immediate analyst review."
          },
          {
            "description": "A managed iOS device initiates a network connection to a domain or IP address known for hosting malicious JSPatch scripts, as identified by threat intelligence feeds. Alternatively, an MTD agent reports an application is using a known JSPatch library or a similar dynamic code loading framework not approved for use. [1]",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek conn.log",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS mobile devices enrolled in MDM/MTD solutions and their associated network traffic.",
            "action": "1. Symbolic Detection: Continuously ingest and update a threat intelligence feed of domains, IPs, and file hashes associated with malicious JSPatch use. Create a SIEM correlation rule that triggers a high-severity alert when a DNS query (Zeek dns.log) or network connection (Zeek conn.log) from the iOS device IP range matches an indicator on this feed. Create a parallel rule to alert on MTD logs that explicitly identify the use of the JSPatch library within a non-allowlisted application. 2. Statistical Analysis: For all DNS queries from the iOS NAI (Zeek dns.log), calculate the Shannon entropy for all newly observed domains (not seen in the last 30 days). Flag domains with an entropy score > 4.0. Additionally, analyze the Top-Level Domain (TLD) and flag queries to rare or suspicious TLDs (e.g., .zip, .mov, .link) not associated with legitimate business functions. Correlate high-entropy or rare-TLD domains queried by non-browser applications with subsequent file downloads to increase fidelity. 3. Machine Learning Model: Implement a time-series forecasting model (e.g., Prophet) for each critical or widely used application on iOS devices to predict the expected volume of outbound network connections per hour, per day. Train the model using historical data from Zeek conn.log, aggregated by source device and application identifier (if available from MTD/MDM). Generate a medium-severity alert when the actual connection volume for an application exceeds the model's predicted upper confidence interval by more than 50% for a sustained period (e.g., 10 minutes), especially if this anomaly coincides with other symbolic or statistical triggers."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]