[
  {
    "information_requirement": "Is the adversary capturing audio from mobile devices to collect sensitive information? (TA0035 - Collection)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1429",
        "name": "Audio Capture",
        "evidence": [
          {
            "description": "A mobile application on a managed device activates the microphone while in a background state, and within a 60-second window, initiates an outbound network connection to a destination that is either on a threat intelligence list or is anomalous for the user, device, or application.",
            "data_sources": [
              "MDM log indicating microphone activation",
              "MDM log indicating application process state (foreground/background)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Company-managed mobile devices, BYOD devices with corporate profiles, Network egress points (e.g., firewalls, proxies), MDM/MTD management servers",
            "action": "1. (Symbolic) Correlate MDM logs detailing microphone access with network connection logs (Zeek conn.log) on a per-device basis. Generate a high-severity alert if an application activates the microphone while in a background state and initiates an outbound network connection within 60 seconds to an IP or domain on a known C2 threat intelligence list. 2. (Statistical) For each mobile application across the device fleet, calculate a historical baseline of background behavior, including: a) frequency of microphone activations per hour, b) duration of each activation, and c) volume of data transmitted (from Zeek conn.log `orig_bytes` and `resp_bytes`) within 5 minutes following activation. Generate a medium-severity alert when a new background microphone activation event for an application exceeds its 95th percentile for duration. Escalate the alert to high-severity if the subsequent data transmission volume also exceeds its 95th percentile baseline. 3. (Machine Learning) Construct a feature vector for each device event sequence, including event type (e.g., app_state_change, mic_access, network_connection), application name, and associated metadata (e.g., data volume, connection duration). Train a time-series anomaly detection model, such as an LSTM autoencoder, on historical event sequences from all managed devices to learn a baseline of normal activity. Continuously feed live event sequences into the model and generate a high-severity alert when the model's reconstruction error for a sequence surpasses a statistically determined threshold, indicating a rare and potentially malicious pattern of behavior."
          },
          {
            "description": "An Android application package (APK) installed on a managed device contains the 'android.permission.CAPTURE_AUDIO_OUTPUT' permission and is not signed by the device OEM or a trusted system vendor. Alternatively, an application's manifest requests microphone access ('android.permission.RECORD_AUDIO' or 'NSMicrophoneUsageDescription') and is determined to be high-risk based on its stated purpose, developer, and market reputation.",
            "data_sources": [
              "MDM Application Inventory logs containing package names and versions",
              "Static analysis reports from a Mobile App Vetting service containing parsed AndroidManifest.xml or Info.plist data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application stores and repositories, All managed mobile devices, Application vetting and sandboxing environments",
            "action": "1. (Symbolic) Using MDM inventory data or a mobile app vetting platform, create a rule to continuously scan the manifests of all installed Android applications. Generate a critical-severity alert for immediate investigation if an application contains the 'android.permission.CAPTURE_AUDIO_OUTPUT' permission and its signing certificate does not belong to the device OEM or a pre-approved system-level vendor. 2. (Statistical) For every application requesting microphone access, calculate a risk score. Use a weighted formula incorporating features such as: 1) Application Category (e.g., higher weight for 'Flashlight' app vs 'VoIP' app), 2) Developer Reputation (new or unknown developers get higher weight), 3) Permission Entropy (a high number of unrelated, dangerous permissions increases the score), and 4) Market Presence (low download count or absence from major app stores increases score). Flag any application whose risk score falls within the 95th percentile of all scored apps for manual review. 3. (Machine Learning) Train a classification model (e.g., Gradient Boosting, Random Forest) on a large, labeled dataset of malicious (e.g., from public malware repositories) and benign (from official app stores) application packages. Engineer features from static analysis including: requested permissions, sensitive API calls (e.g., 'MediaRecorder.setAudioOutput'), embedded URLs/IPs, and code obfuscation indicators. Deploy the model within the app vetting pipeline to automatically classify every new or updated application. Route applications classified as 'malicious' or 'highly suspicious' for automated blocking and analyst review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]