[
  {
    "information_requirement": "Is an adversary using legitimate external web services for command and control on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1481",
        "name": "Web Service",
        "evidence": [
          {
            "description": "A mobile device establishes periodic, low-volume connections to a known web service (e.g., GitHub, Pastebin, Telegram) where the time between connections has low variance (e.g., a standard deviation of inter-arrival times less than 2 seconds) and response sizes are uniformly small (e.g., 95% of payloads are between 50 and 500 bytes), characteristic of automated C2 beaconing rather than variable human-driven web browsing.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments for mobile devices, VPN Concentrators, Mobile Device Management (MDM) platform logs",
            "action": "1. (Symbolic) Create and maintain a watchlist of web services commonly abused for C2 (e.g., api.telegram.org, pastebin.com, api.github.com). For traffic originating from mobile NAIs, query network logs to count connections to these services per source device. Generate an alert if the connection count in a 1-hour window exceeds a dynamic threshold (e.g., 50) and the average response payload size is less than 1KB. 2. (Statistical) For each source mobile IP and destination service pair, extract connection timestamps $$ t_1, t_2, ..., t_n $$ from Zeek conn.log over a 24-hour period. Calculate the inter-arrival times $$ \\Delta t_i = t_i - t_{i-1} $$ and their standard deviation $$ \\sigma_{\\Delta t} $$. Alert if $$ \\sigma_{\\Delta t} < 2 $$ seconds, indicating periodic, machine-like timing. Concurrently, calculate the Shannon entropy $$ H(X) = -\\sum p(x_i) \\log_2 p(x_i) $$ of the response byte counts ('resp_bytes'); alert if the entropy value is in the bottom 5th percentile for that destination service, indicating a lack of size variability. 3. (Machine Learning) Using Zeek conn.log data, apply a clustering algorithm like DBSCAN to group connections based on features such as the standard deviation of inter-arrival times, mean response bytes, and entropy of response bytes for each source-destination pair. Isolate and investigate tight, dense clusters with low intra-cluster variance, as these represent the repetitive, automated behavior of beaconing, distinct from the sparse, irregular patterns of user traffic."
          },
          {
            "description": "A mobile device sends an HTTP/S request to a legitimate web service where the User-Agent string is indicative of a non-browser client (e.g., 'curl/7.68.0', 'python-requests/2.25.1', 'Go-http-client/1.1') or the URI path suggests raw data transfer (e.g., '/raw/Abc123xyz', '/paste/Def456uvw'), bypassing typical human-driven application interfaces.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points with TLS inspection capabilities (e.g., via proxies or MDM profiles), Web Application Firewall (WAF) logs, and Cloud Access Security Broker (CASB) logs",
            "action": "1. (Symbolic) From Zeek http.log records originating from the mobile NAI, filter and match the 'user_agent' field against a deny-list of regular expressions for scripting tools and libraries (e.g., '^curl/', '^Wget/', '^python-requests', '^Go-http-client'). Generate an alert on any match. 2. (Statistical) For each destination host (e.g., 'gist.githubusercontent.com'), group requests by source IP from the mobile NAI. For each group, calculate the Shannon entropy $$ H(U) $$ of the 'uri' field. A low entropy score signifies repetitive requests to the same or similarly structured paths. Flag source IPs whose URI entropy falls into the bottom 10th percentile compared to all devices accessing that same destination. 3. (Machine Learning) Train a binary classification model (e.g., Random Forest) on a labeled dataset of benign and malicious HTTP/S requests. Engineer features from Zeek http.log and ssl.log including: 'user_agent' string length and entropy, 'uri' length and entropy, presence of keywords like 'raw' or 'paste' in URI, ratio of numeric to alphabetic characters in URI, and TLS JA3 hash rarity. Deploy the model to score new requests from the mobile NAI in real-time and alert on requests classified as malicious with high confidence."
          },
          {
            "description": "A mobile device exhibits a high ratio of DNS queries for a specific web service domain to the number of subsequent TCP/UDP connections made to that domain's resolved IPs, suggesting a 'canary' or 'check-in' C2 mechanism that resolves the domain but only connects when a task is available.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, Protective DNS (PDNS) logs, MDM-enforced DNS services",
            "action": "1. (Symbolic) Continuously monitor Zeek dns.log for queries originating from the mobile NAI. Match the 'query' field against a threat intelligence feed of known C2 domains. Generate an immediate, high-priority alert on any match, forwarding the source IP and queried domain to the incident response team. 2. (Statistical) Over a 1-hour sliding window, join Zeek dns.log and conn.log on the source IP and destination domain/IP. For each source IP, calculate the DNS-to-Connection Ratio: $$ R_{dns} = \\frac{|\\text{Unique DNS Queries to Domain D}|}{|\\text{Unique Connections to IPs for Domain D}|} $$. Establish a baseline ratio for popular services across the enterprise. Alert on any mobile device whose ratio for a specific service exceeds the 99th percentile of the established baseline. 3. (Machine Learning) Develop a regression model (e.g., Gradient Boosting Regressor) to predict the expected number of connections based on features such as the number of DNS queries, time of day, day of week, domain popularity score, and historical query-to-connection ratio for that device. A large positive residual, where the actual query count far exceeds the predicted count needed for the observed connections, signals a high-risk anomaly. Investigate devices with the highest residuals."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]