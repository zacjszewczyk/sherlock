[
  {
    "information_requirement": "Is malware on a corporate mobile device attempting to detect if it is running in a sandbox or emulator? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "An application makes programmatic calls to query for system properties that are commonly associated with Android emulators or sandbox environments, such as checking for hardware names like 'goldfish' or 'qemu'. This is a strong indicator of an attempt to identify and evade an analysis environment.",
            "data_sources": [
              "Android logcat",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile Device Management (MDM) platform, Network gateways proxying mobile traffic.",
            "action": "Continuously monitor `logcat` streams from managed Android devices for processes invoking `getprop` or accessing `android.os.SystemProperties`. Create a watchlist of known emulator-related properties (e.g., `ro.hardware.goldfish`, `ro.kernel.qemu`, `ro.product.model` containing 'SDK'). Generate an alert when a non-system application queries for multiple properties on this watchlist within a short time frame (e.g., < 5 seconds). Correlate the process making these calls with its network activity in `Zeek conn.log` to identify any subsequent C2 communication, which may indicate the malware is reporting the results of its check."
          },
          {
            "description": "An application accesses sensors or queries data stores that indicate genuine user interaction, such as accelerometer data, call logs, or contact lists, immediately upon launch before executing its primary payload. A lack of this data might cause the malware to become dormant, believing it is in a sandbox.",
            "data_sources": [
              "Android logcat",
              "MDM audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Application vetting sandbox, MDM platform.",
            "action": "Within an application vetting environment, monitor applications that request permissions for sensitive user data (e.g., `READ_CONTACTS`, `READ_CALL_LOG`) or sensor access (e.g., `ACCELEROMETER`) immediately upon launch. Establish a baseline for legitimate applications of similar categories. Flag applications that perform these checks but exhibit minimal core functionality or network traffic afterward, as this may indicate the application has determined it is in a sandbox and has entered a dormant state. Use entropy scoring on the application's network payload; a very low entropy score after these initial checks could suggest it is sending a simple 'sandbox detected' beacon rather than executing its main function."
          },
          {
            "description": "An application makes network calls to specific domains or IP addresses known to be associated with time servers or geolocation services as a means to detect network anomalies common in sandboxed environments, such as spoofed locations or manipulated system times.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network gateways and proxies, DNS servers servicing mobile devices.",
            "action": "Monitor `Zeek dns.log` for newly installed applications that immediately query multiple public time servers (e.g., `time.google.com`, `pool.ntp.org`) or geolocation APIs. Establish a baseline of normal time/location check behavior for legitimate applications. Create a statistical model to detect outliers; an application making an unusually high number of these requests, or requests to unusual endpoints, directly after installation and before any user interaction should be flagged for review. Correlate with `Zeek conn.log` to check for small data transmissions following these checks, which could be the malware reporting back its findings."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]