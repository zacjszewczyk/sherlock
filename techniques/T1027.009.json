[
    {
        "information_requirement": "Is the adversary evading defenses using embedded payloads?",
        "tactic_id": "TA0005",
        "tactic_name": "Defense Evasion",
        "indicators": [
            {
                "technique_id": "T1027.009",
                "name": "Embedded Payloads",
                "evidence": [
                    {
                        "description": "Files transferred over the network or executed on hosts matching known hashes of malicious loaders/droppers, or exhibiting PE characteristics strongly indicative of known embedded payload techniques.",
                        "data_sources": [
                            "Zeek files.log",
                            "Zeek pe.log",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Network devices",
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Compare MD5/SHA1 hashes from Zeek files.log (for files transferred over network) and from files identified by Windows Event ID 4688 execution paths (requiring an auxiliary process or EDR capability to hash the file on the endpoint) against a CTI feed of known malicious file hashes associated with embedded payloads. Analyze Zeek pe.log for PE files with highly anomalous section names (e.g., non-standard, random-looking), unusual section sizes, or high entropy values that match signatures of known packers or payload embedding tools. Alert on hash matches or PE characteristic rule hits."
                    },
                    {
                        "description": "Static file characteristics commonly associated with embedded payloads, such as PE files with unusually large overlay data, high entropy sections, or atypical section counts/names not matching legitimate software.",
                        "data_sources": [
                            "Zeek pe.log",
                            "Zeek files.log"
                        ],
                        "data_platforms": [
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Analyze PE file metadata from Zeek pe.log. Identify files with significant data appended as an overlay by comparing the reported size of PE structures with the total file size (from Zeek files.log `total_bytes` or Zeek pe.log `file_size_in_bytes_present` if available, otherwise infer from network transfer size). Monitor for PE files with sections exhibiting unusually high entropy (calculated from section data if available, or heuristically from section flags like 'MEM_EXECUTE' combined with 'MEM_WRITE' on non-standard sections). Use descriptive statistics (mean, stddev, IQR using a baseline of known good files) on PE section counts, sizes, and entropy values to identify outliers. Flag files with section names commonly used by packers or known embedding tools."
                    },
                    {
                        "description": "Detection of script execution (e.g., PowerShell, VBScript) containing patterns of obfuscation, large encoded data blocks, or specific API calls commonly used for decoding and executing embedded payloads.",
                        "data_sources": [
                            "Windows Event ID 4104",
                            "Windows Event ID 4103"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Analyze PowerShell script block logs (Windows Event ID 4104) and module logs (Windows Event ID 4103) for patterns indicative of embedded payload execution: use of `FromBase64String`, `Invoke-Expression (IEX)`, `[System.Reflection.Assembly]::Load`, presence of large Base64/hex-encoded blobs, or significant character frequency deviation from typical scripts. Calculate Shannon entropy on script block content from Event ID 4104; flag scripts with unusually high entropy scores. Develop and apply regular expressions to detect common de-obfuscation function calls or payload loading sequences. Correlate these script events with their parent processes (e.g., Winword.exe, Excel.exe, Outlook.exe for macro-based attacks)."
                    },
                    {
                        "description": "A process performs injection into another process where the injected code originates from a memory region that was not loaded from a legitimate executable module on disk, but rather from an embedded resource or dynamically allocated/written memory.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 8 (Sysmon)",
                            "Windows Event ID 10 (Sysmon)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for process injection events using Sysmon Event ID 8 (CreateRemoteThread) and Event ID 10 (ProcessAccess, specifically for WriteProcessMemory). Scrutinize events where the source process is a common application (e.g., browser, Office app, script interpreter) and the target is also a legitimate system process, but the characteristics of the injected code's source (e.g., memory type `MEM_PRIVATE`, lack of an associated backing file on disk, or source address within a non-module memory region) suggest it was unpacked or dynamically generated from an embedded payload. Correlate these injection events with prior file read/write operations (e.g., Sysmon Event ID 11) or network download activity by the source process (Windows Event ID 4688 parent/child context, Zeek conn.log/files.log) to trace the origin of the payload."
                    },
                    {
                        "description": "A file with a non-executable extension (e.g., .txt, .dat, .jpg) or a mismatch between its apparent type (extension) and true type (MIME type from network, or file magic) is executed, followed by suspicious downstream activities.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Zeek files.log",
                            "Zeek conn.log"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor process creation events (Windows Event ID 4688) where the `ProcessName` or `ImagePath` has an extension typically associated with non-executable data types (e.g., .txt, .jpg, .dat, .zip, .iso). Simultaneously, use Zeek files.log to identify files transferred over the network where the `mime_type` (e.g., `application/x-dosexec`, `application/octet-stream`) is inconsistent with the `filename` extension (e.g., `.jpg`, `.pdf`). Correlate the execution of such files on endpoints with subsequent suspicious child process creation (e.g., `powershell.exe`, `rundll32.exe` with unusual parameters, `wscript.exe`) or outbound network connections to low-reputation IPs/domains or unexpected ports (Zeek conn.log). Use frequency analysis to identify rare execution patterns of specific file extensions or commonly observed extension/MIME-type mismatches that precede suspicious activity."
                    },
                    {
                        "description": "A process writes a new executable file to disk and shortly thereafter, the same process or a child process executes this newly written file, especially if the parent process is not a typical software installer.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 11 (Sysmon)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for sequences involving: 1. A process creating a file (Sysmon Event ID 11 - FileCreate), particularly if the `TargetFilename` has executable characteristics (e.g., .exe, .dll, .ps1, .bat, .vbs) or is written to a temporary or user-writable directory. 2. The same process (identified by `ProcessGuid` or `ProcessId`) or a direct child process subsequently executing this newly created file (Windows Event ID 4688). Correlate these events based on `ProcessGuid`/`ProcessId` and ensure the timestamps are in close proximity (e.g., within seconds to a few minutes). Analyze the parent process that initiated the file write; if it's a common application (e.g., browser, Office document, PDF reader, script interpreter) rather than a known software installer or updater, this sequence is highly suspicious of an embedded payload being dropped and run. Calculate the time delta between file write and execution; short deltas are more indicative of automated malicious behavior."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
