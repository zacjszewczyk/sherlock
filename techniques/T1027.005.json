[
    {
        "information_requirement": "Is the adversary attempting to evade defenses by modifying tools?",
        "tactic_id": "TA0005",
        "tactic_name": "Defense Evasion",
        "indicators": [
            {
                "technique_id": "T1027.005",
                "name": "Indicator Removal from Tools",
                "evidence": [
                    {
                        "description": "Execution of known code modification, packing, or obfuscation utilities (e.g., UPX, hex editors) on hosts where such tools are not typically authorized or used.",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Maintain a watchlist of process names (e.g., upx.exe, hxd.exe) and command-line arguments for common binary modification tools. Monitor Windows Event ID 4688 for their execution. Use descriptive statistics to establish a baseline of normal tool usage on developer systems and flag any execution on non-developer hosts or production servers as highly anomalous and requiring investigation."
                    },
                    {
                        "description": "Detection of a file with a new cryptographic hash (e.g., SHA256) that shares a high degree of similarity with a known malicious file, as determined by fuzzy hashing (e.g., SSDEEP).",
                        "data_sources": [
                            "Zeek file.log"
                        ],
                        "data_platforms": [
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Implement a process to compute fuzzy hashes (e.g., SSDEEP) for all executable files extracted via Zeek file.log. Compare these fuzzy hashes against a threat intelligence database of fuzzy hashes from known malware families. A high similarity score (e.g., >85) for a file with an unknown cryptographic hash is a strong indicator of a repacked or slightly modified malicious tool and should be prioritized for analysis."
                    },
                    {
                        "description": "Reappearance of suspicious network or host activity patterns shortly after a related malicious tool was detected and blocked, where the new activity originates from the same source but uses a file with a different hash.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Zeek conn.log",
                            "Zeek file.log"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Correlate a security alert (e.g., AV/EDR block) with subsequent activity from the same host or user account. Analyze new process creation events (Windows Event ID 4688) and network connections (Zeek conn.log) for patterns that are behaviorally similar to the activity that was blocked (e.g., same C2 destination IP/port, similar command-line structure, same data staging directory). Use correlation analysis on attributes like destination IP, user account, and parent process, while noting the change in the executable's hash (from Zeek file.log or endpoint logs), to link the new evasion attempt to the original detection."
                    },
                    {
                        "description": "Presence of compiler or programming language interpreter executables (e.g., csc.exe, pyinstaller.exe) on a non-developer host, followed by the execution of a newly created binary from a temporary or unusual directory.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 4663"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for the execution of compilers or build tools (e.g., csc.exe, gcc.exe, make.exe, pyinstaller.exe) via Windows Event ID 4688, especially on systems not designated for software development. Correlate this event with subsequent file creation events (Windows Event ID 4663) and process executions (Windows Event ID 4688) of newly created executables from atypical locations (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public). Use time series analysis to detect abnormal spikes in compilation activity on a host or across the network."
                    },
                    {
                        "description": "Anomalous file write operations where a process modifies its own executable file on disk, potentially indicating on-disk patching to remove static indicators.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for anomalous sequences of events. Specifically, correlate process creation (Windows Event ID 4688) with subsequent file modification events (Windows Event ID 4663) where the Process Name performing the modification matches the file name being written to, and the access mask indicates write access. This self-writing behavior is highly unusual for legitimate software and is a strong indicator of an attempt to patch indicators out of the binary on disk to evade signature-based detection."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
