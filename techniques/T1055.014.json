[
    {
        "information_requirement": "Has the adversary elevated privileges using VDSO hijacking?",
        "tactic_id": "TA0004",
        "tactic_name": "Privilege Escalation",
        "indicators": [
            {
                "technique_id": "T1055.014",
                "name": "VDSO Hijacking",
                "evidence": [
                    {
                        "description": "An executable file on disk matches the hash of a known tool or malware sample that performs VDSO hijacking for privilege escalation.",
                        "data_sources": [
                            "File System Monitoring Data (e.g.",
                            "from Osquery",
                            "EDR)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Continuously scan file systems on critical Linux endpoints and servers for file hashes known to be associated with VDSO hijacking tools or malware (e.g., via threat intelligence feeds). Correlate any hash detections with process execution events (e.g., from Auditd) to identify when the tool was run and by which user."
                    },
                    {
                        "description": "A process executes a specific, ordered sequence of system calls (e.g., ptrace, mmap, mprotect) against another, higher-privileged process, consistent with known VDSO hijacking patterns.",
                        "data_sources": [
                            "Linux Auditd Logs"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Define and monitor for stateful sequences of syscalls using Linux Auditd. A common pattern indicating hijacking is: 1. A process attaches to a target process via `ptrace(PTRACE_ATTACH)`. 2. The process reads `/proc/[target_pid]/maps` to locate the `[vdso]` memory region. 3. The process writes to the vDSO region using `ptrace(PTRACE_POKEDATA)` or maps new memory with `mmap` and modifies pointers. Alert when a low-privilege process performs this sequence on a high-privilege process (e.g., one running as root). Use correlation analysis on syscalls grouped by Process ID (PID) and Parent Process ID (PPID) within a short time window (e.g., <1 second)."
                    },
                    {
                        "description": "A legitimate, high-privilege process, after being targeted by suspicious syscalls (e.g., ptrace), executes anomalous commands or accesses sensitive system files inconsistent with its normal function.",
                        "data_sources": [
                            "Linux Auditd Logs"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "First, identify potential vDSO hijack attempts by monitoring for `ptrace` calls targeting privileged processes. For any such targeted process, establish a behavioral baseline (e.g., typical child processes, files accessed, network connections). Then, monitor for post-attempt anomalies: execution of shells (`sh`, `bash`), use of system administration tools (`useradd`, `passwd`), or access to sensitive files like `/etc/shadow` or `/etc/sudoers`. Use descriptive statistics and frequency analysis to establish the baseline and flag statistically significant deviations."
                    },
                    {
                        "description": "A process's system call behavior changes drastically, with syscalls being redirected to unexpected memory locations outside of the kernel or standard libraries, as detected by kernel-level monitoring.",
                        "data_sources": [
                            "Kernel-level tracing data (e.g.",
                            "from eBPF)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Deploy an eBPF-based monitoring tool to trace syscall entry points for critical processes. Establish a baseline of valid syscall handler addresses (which should point to the kernel or vDSO). Monitor for syscalls being redirected to other user-space memory addresses. Use correlation analysis to link a change in a syscall handler address with prior `ptrace` or anomalous `mmap` activity targeting the process. This provides direct evidence of a successful hijack."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    },
    {
        "information_requirement": "Is the adversary evading defenses using VDSO hijacking?",
        "tactic_id": "TA0005",
        "tactic_name": "Defense Evasion",
        "indicators": [
            {
                "technique_id": "T1055.014",
                "name": "VDSO Hijacking",
                "evidence": [
                    {
                        "description": "A memory scan of a critical process (e.g., EDR agent, auditd) detects signatures of known vDSO hooks or shellcode used for defense evasion.",
                        "data_sources": [
                            "Memory Dumps",
                            "Yara Scan Results"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Periodically perform memory scans on critical system processes and security agents using Yara rules specifically designed to find common vDSO hijacking artifacts. These rules should look for modified vDSO function prologues, pointers to unexpected user-space memory, or strings/opcodes associated with known evasion payloads (e.g., code that unhooks `LD_PRELOAD`, filters syscalls, or tampers with audit logs). Alert on any Yara match."
                    },
                    {
                        "description": "A process associated with a security tool (e.g., an EDR agent) is targeted by a `ptrace` attach, followed by file modification events on the security tool's own binaries, configurations, or log directories.",
                        "data_sources": [
                            "Linux Auditd Logs"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Create and maintain a list of critical security processes and their associated file paths. Monitor for a sequence of events: 1. An external process calls `ptrace(PTRACE_ATTACH)` on a listed security process. 2. The same external process (or the now-hijacked security process) attempts to read, write, or delete files in the listed critical paths. Use time-based correlation to link the `ptrace` event with the subsequent file tampering within a narrow timeframe (e.g., 1-2 minutes) to detect targeted evasion attempts."
                    },
                    {
                        "description": "A legitimate system process, after being targeted by `ptrace` or anomalous `mmap` calls, initiates unexpected outbound network connections or exhibits C2-like traffic patterns.",
                        "data_sources": [
                            "Zeek conn.log",
                            "Linux Auditd Logs"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Correlate process execution data from Linux Auditd with network connection data from Zeek. First, identify processes targeted by potential hijacking attempts (`ptrace`). Then, join this process information (PID, user, executable name) with network logs based on timestamps. Analyze the subsequent network traffic from the targeted process for anomalies: connections to rare external IPs (low frequency analysis), regular beaconing patterns (time series analysis of connection intervals), large data uploads, or use of non-standard ports. Use linear regression to detect anomalous increases in data transfer volume over time from a specific process. Cross-reference destination IPs with threat intelligence feeds."
                    },
                    {
                        "description": "The volume or content of system audit logs suddenly decreases or key security events are missing, following suspicious syscall activity (`ptrace`) targeting logging daemons.",
                        "data_sources": [
                            "Linux Auditd Logs",
                            "Log Aggregation Platform Metrics"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Establish a baseline for log volume and key security event types (e.g., `execve`, `connect`, `setuid`) from critical servers. Monitor for significant drops in log volume using time series analysis (e.g., Holt-Winters forecasting). Additionally, run integrity checks for expected event types that go missing from the logs. Correlate any detected logging anomalies with preceding `ptrace` events that targeted `auditd`, `rsyslog`, or other logging-related processes, suggesting the hijack was used to disable or filter security visibility. Use entropy measures on the syscalls generated by logging daemons themselves to detect unusual simplification of behavior."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
