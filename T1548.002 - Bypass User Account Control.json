```json
[
  {
    "Has the adversary escalated privileges using UAC bypass techniques? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1548.002 - Bypass User Account Control": {
          "Modification of specific HKEY_CURRENT_USER (HKCU) registry keys and values known to be leveraged in UAC bypass techniques (e.g., associated with eventvwr.exe, sdclt.exe, fodhelper.exe).": {
            "Data": "Windows Event ID 4657; Sysmon Event ID 13",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor registry modification events (Windows Event ID 4657 or Sysmon Event ID 13 - RegistryValue Set) for changes to well-documented UAC bypass registry paths such as `HKCU\\Software\\Classes\\mscfile\\shell\\open\\command`, `HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command`, or `HKCU\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand`. Alert on modifications where the new value points to an attacker-controlled executable or script. Maintain an updated list of these critical registry keys from public UAC bypass research (e.g., UACME project) and use exact string matching for detection."
          },
          "Execution of legitimate Windows binaries (e.g., `eventvwr.exe`, `sdclt.exe`, `fodhelper.exe`, `computerdefaults.exe`, `rundll32.exe`) with specific command-line parameters, parent process anomalies, or loading of specific COM objects/DLLs known to facilitate UAC bypass.": {
            "Data": "Windows Event ID 4688; Sysmon Event ID 1",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Collect process creation logs (Windows Event ID 4688 or Sysmon Event ID 1). Filter for known auto-elevating binaries (e.g., `eventvwr.exe`, `sdclt.exe`, `fodhelper.exe`) launched by unexpected parent processes (e.g., `winword.exe`, `powershell.exe` instead of `explorer.exe` or `svchost.exe`). Analyze command lines for patterns like `rundll32.exe` calling `shell32.dll,Control_RunDLL` with a malicious CPL file, or specific auto-elevating COM object CLSIDs. Use descriptive statistics and frequency analysis to establish baseline parent-child relationships and command-line structures for these binaries; flag deviations and matches to a curated list of known UAC bypass patterns."
          },
          "A sequence of events where a non-elevated process spawns a trusted auto-elevating Windows process, which subsequently launches an unexpected child process (e.g., `cmd.exe`, `powershell.exe`) now running with high integrity.": {
            "Data": "Windows Event ID 4688; Sysmon Event ID 1",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Windows Event ID 4688 or Sysmon Event ID 1, ensuring process integrity levels are captured). Look for chains: 1. Process A (low/medium integrity) creates Process B (e.g., `eventvwr.exe`, `fodhelper.exe` - known auto-elevators). 2. Process B then creates Process C (e.g., `cmd.exe`, `powershell.exe`, or an unknown binary from a non-standard path) which is now running at High integrity. Correlate events based on ParentProcessID and ProcessID within a short time window (e.g., <10 seconds). Use time-series analysis of process chains or sequence mining algorithms to detect this specific behavioral pattern. Compare the integrity level of Process A and Process C; a jump from Low/Medium to High for Process C via this chain is highly suspicious."
          },
          "Remote network logon (Logon Type 3) for an administrative account immediately followed by the creation of high-integrity processes on the target system without UAC interaction.": {
            "Data": "Windows Event ID 4624; Windows Event ID 4688; Sysmon Event ID 1",
            "Data Platform": "Servers, Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate Windows Event ID 4624 (Logon Type 3 - Network, for an account explicitly in the local Administrators group) with subsequent process creation events (Windows Event ID 4688 or Sysmon Event ID 1, with integrity levels) on the same host within a very short timeframe (e.g., < 5 seconds). Verify that the created processes are running with High integrity. This pattern leverages the default high integrity for remote administrative actions. Profile typical processes launched after remote admin logons (e.g., `wmiprvse.exe`, `psexecsvc.exe`) and use descriptive statistics (process name frequency, path analysis) to alert on deviations or the launch of suspicious/interactive tools (e.g., `cmd.exe`, `powershell.exe`)."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary bypassing UAC for defense evasion? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1548.002 - Bypass User Account Control": {
          "Known defense evasion tools or commands (e.g., for disabling security software, clearing logs, or modifying security configurations) executed by a process that recently achieved high integrity, potentially via UAC bypass.": {
            "Data": "Windows Event ID 4688; Sysmon Event ID 1; Windows Event ID 4657; Sysmon Event ID 13",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Maintain a list of command-line arguments, process names, and registry modifications indicative of defense evasion (e.g., `sc.exe stop <AVService>`, `netsh advfirewall set currentprofile state off`, `wevtutil.exe cl <LogName>`, `Set-MpPreference -DisableRealtimeMonitoring $true`, modifications to `HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender` or other security product keys). Monitor process creation (Windows Event ID 4688/Sysmon Event ID 1) and registry events (Windows Event ID 4657/Sysmon Event ID 13) for these selectors. Prioritize alerts if the initiating process is running at high integrity and was created shortly after other UAC bypass indicators (from TA0004 detections) on the same host. Use correlation analysis between UAC bypass alerts and these defense evasion signatures."
          },
          "Process injection (e.g., `CreateRemoteThread`) into legitimate high-integrity processes or loading of unsigned/unusual DLLs by elevated processes, originating from a process that may have bypassed UAC.": {
            "Data": "Sysmon Event ID 7; Sysmon Event ID 8; Windows Event ID 4688; Sysmon Event ID 1",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Sysmon Event ID 8 (CreateRemoteThread) for threads created in high-integrity system processes (e.g., `explorer.exe`, `lsass.exe`, `svchost.exe`) by non-system, non-service, or recently elevated parent processes (identified via Windows Event ID 4688/Sysmon Event ID 1). Monitor Sysmon Event ID 7 (ImageLoad) for unsigned DLLs, DLLs with low prevalence, or DLLs loaded from unusual paths (e.g., Temp directories, user profiles, network shares) into high-integrity processes. Correlate the source process of injection/DLL load with prior UAC bypass indicators. Use entropy measures on loaded module names/paths and compare against whitelists or known good DLLs to detect obfuscation or suspicious modules."
          },
          "High-integrity processes, potentially spawned after a UAC bypass, performing anomalous file system operations (e.g., modifying critical system files, accessing sensitive user data disproportionately) or creating executable files in unexpected locations.": {
            "Data": "Windows Event ID 4663; Windows Event ID 4688; Sysmon Event ID 1; Sysmon Event ID 11",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor file creation (Sysmon Event ID 11 - FileCreate) and file access (Windows Event ID 4663 - Object Access Attempt, filtered for files) events by high-integrity processes (identified via Windows Event ID 4688/Sysmon Event ID 1, with integrity level). Establish baselines for typical file system interactions of legitimate high-integrity processes using descriptive statistics (e.g., common file paths, types of access, volume of read/writes). Flag operations such as writing executables to user-writable paths (`%APPDATA%`, `%TEMP%`), unexpected modification of critical system files in `System32` or `WinSXS`, or high-volume access to user documents by processes not typically associated with such activity (e.g., a recently elevated `eventvwr.exe` child). Use frequency analysis and inter-quartile range (IQR) for file operation counts to identify behavioral outliers."
          },
          "Anomalous outbound network connections initiated by a high-integrity process, especially if the process path is unusual, it's unsigned, or it was created shortly after a suspected UAC bypass event.": {
            "Data": "Windows Event ID 5156; Sysmon Event ID 3; Windows Event ID 4688; Sysmon Event ID 1; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate outbound network connections (Windows Event ID 5156/Sysmon Event ID 3 from host, Zeek conn.log from network, augmented with process context if possible) with the initiating process (Windows Event ID 4688/Sysmon Event ID 1, including integrity level, path, and signature status). Profile typical network behavior (destination IPs/ports, protocol, data volume) for legitimate high-integrity processes. Flag connections from unexpected high-integrity processes (e.g., `fodhelper.exe` making direct internet connections), processes running from unusual paths, or unsigned processes to non-standard ports or known malicious destinations. Use time series analysis to detect spikes in connections from recently elevated processes. Prioritize alerts if network activity follows other UAC bypass indicators within a short window (e.g., < 5 minutes) using correlation analysis."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```