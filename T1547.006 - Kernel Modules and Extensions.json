[
    {
        "information_requirement": "Is the adversary maintaining persistence via malicious kernel modules/extensions?",
        "tactic_id": "TA0003",
        "tactic_name": "Persistence",
        "indicators": [
            {
                "technique_id": "T1547.006",
                "name": "Kernel Modules and Extensions",
                "evidence": [
                    {
                        "description": "Presence of kernel module files (.sys) or associated registry entries matching the file hashes or names of known malicious rootkits or drivers.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 4657"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Continuously scan file systems for kernel drivers (.sys files) created or modified. Cross-reference their file hashes against a CTI feed of known malicious drivers. Monitor registry modifications (Event ID 4657) to `HKLM\\SYSTEM\\CurrentControlSet\\Services\\*` keys, and compare newly created `ImagePath` values or service names against a list of known malicious rootkit artifacts. Alert on any matches."
                    },
                    {
                        "description": "Execution of a sequence of commands associated with compiling, installing, and starting a new kernel driver, particularly involving build tools or unsigned driver loaders.",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for a correlated sequence of process creations (Event ID 4688) within a short time window on a single host: 1) use of build tools (e.g., `nmake.exe`, `cl.exe`, `msbuild.exe`) creating a `.sys` file, followed by 2) use of `sc.exe create type= kernel` to register the new driver, and then 3) `sc.exe start` to load it. Correlate these events by host and timestamp. This pattern is highly suspicious outside of a development or authorized software installation context."
                    },
                    {
                        "description": "Creation and loading of a new, unsigned kernel driver, especially if it is stored in a non-standard directory or its service is configured with suspicious parameters.",
                        "data_sources": [
                            "Windows Event ID 7045",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for new service creation events (Windows Event ID 7045) where the `ServiceType` is `1` (Kernel Driver). For each event, inspect the associated `ImagePath`. Check if the driver file is digitally unsigned. Use frequency analysis to identify driver files located in unusual directories (e.g., `%TEMP%`, `%APPDATA%`, user profiles instead of `System32\\drivers`). Use linear regression to model normal driver installation rates and flag anomalous spikes. Alert on any unsigned driver installations."
                    },
                    {
                        "description": "Anomalous network communications initiated from a host immediately following the loading of a new or suspicious kernel driver, indicative of a kernel-level backdoor.",
                        "data_sources": [
                            "Zeek conn.log",
                            "Zeek dns.log",
                            "Windows Event ID 7036"
                        ],
                        "data_platforms": [
                            "Network devices",
                            "Servers",
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Correlate the start time of a newly installed kernel driver service (Windows Event ID 7036, Service Started) with network logs. Use Zeek conn.log and dns.log to identify new, periodic outbound connections (beaconing) or connections to low-reputation or newly registered domains from the host where the driver was loaded. Use time series analysis on the host's network traffic to detect a significant change in connection patterns (e.g., entropy of destination ports, connection frequency) immediately following the driver load event."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    },
    {
        "information_requirement": "Has the adversary achieved privilege escalation using malicious kernel modules/extensions?",
        "tactic_id": "TA0004",
        "tactic_name": "Privilege-Escalation",
        "indicators": [
            {
                "technique_id": "T1547.006",
                "name": "Kernel Modules and Extensions",
                "evidence": [
                    {
                        "description": "Execution of a file whose hash matches a known public exploit tool that abuses a vulnerable kernel driver for privilege escalation.",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor all process creation events (Windows Event ID 4688). Compute or retrieve the hash of the executable file for each new process. Compare these hashes against a continuously updated CTI feed of known hacking tools, especially those documented to exploit vulnerable drivers for privilege escalation (e.g., exploits for `capcom.sys`, `iqvw64e.sys`). Alert immediately on any match, capturing the user context and command line arguments."
                    },
                    {
                        "description": "Execution of commands by a non-administrative user to interact with the Service Control Manager (`sc.exe`) to load a known vulnerable but legitimately signed third-party driver (BYOVD attack).",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor process creation events (Event ID 4688) for the execution of `sc.exe` or other driver-loading utilities by non-administrative users. Specifically, look for command line patterns such as `sc create [service_name] type= kernel binPath= [path_to_vulnerable_driver.sys]` followed by `sc start [service_name]`. Maintain and cross-reference a list of known-vulnerable but signed third-party drivers commonly abused for Bring Your Own Vulnerable Driver (BYOVD) attacks. Correlate these command patterns with the user's privilege level."
                    },
                    {
                        "description": "A low-privilege process spawning a new process running with high-integrity (SYSTEM/Administrator) privileges immediately after interacting with a kernel driver.",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Analyze process creation event chains using Windows Event ID 4688. Look for instances where a process running as a standard user (e.g., not SYSTEM, Local Service, or Administrator) spawns a child or grandchild process that is running with a high-integrity token (e.g., `TokenElevationTypeDefault (1)` for a non-elevated user spawning `TokenElevationTypeFull (2)`). Correlate this parent-child privilege jump with recent driver load events (Event ID 7045) or other suspicious driver interactions on the same host. Use descriptive statistics to establish that such privilege inheritance is rare and anomalous."
                    },
                    {
                        "description": "A user session exhibiting a sudden change in behavior, such as successfully accessing previously inaccessible privileged registry keys or files, immediately after a suspicious driver-related command is executed.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 4663",
                            "Windows Event ID 4657"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "First, identify suspicious driver-related commands (e.g., `sc.exe` usage by non-admins) via Event ID 4688. Then, within the same user session (correlating by Logon ID), monitor for subsequent successful access to high-privilege objects (Event ID 4663 for files, 4657 for registry) that would typically be denied. Use correlation analysis to link the command execution with subsequent high-privilege object access events within a short time window (e.g., 1-5 minutes). This sequence is a strong behavioral indicator of a successful privilege escalation."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
