[
    {
        "information_requirement": "Is the adversary establishing persistence using executable installer file permissions weakness?",
        "tactic_id": "TA0003",
        "tactic_name": "Persistence",
        "indicators": [
            {
                "technique_id": "T1574.005",
                "name": "Executable Installer File Permissions Weakness",
                "evidence": [
                    {
                        "description": "A known malicious executable (identified by file hash) is written to a directory containing a service or scheduled task binary.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor file write events (Windows Event ID 4663) to directories known to contain service or scheduled task executables. Upon write, compute the file hash and inner join it with a threat intelligence feed of known malicious file hashes. Correlate with subsequent execution (Windows Event ID 4688) of the same file to confirm persistence establishment. Alert on any hash match."
                    },
                    {
                        "description": "A service or scheduled task executable is modified, immediately followed by the execution of that service/task, spawning an unexpected child process.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688",
                            "Windows Event ID 7036"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Create a detection pattern that correlates three events in a short time window: 1. A file write operation (Windows Event ID 4663) on a known service/task binary. 2. A service start or resume event (Windows Event ID 7036) for the same service. 3. A process creation event (Windows Event ID 4688) where the parent is the hijacked service process. Analyze the spawned child process for anomalous characteristics (name, command line) using frequency analysis against a baseline of normal behavior."
                    },
                    {
                        "description": "A write operation is performed on any executable configured to run as a persistent service or scheduled task, originating from a process not associated with legitimate software updates.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Proactively identify all executables configured to run as services or scheduled tasks. Establish a baseline of legitimate processes that modify these files (e.g., trusted installer, Windows Update agent). Monitor for any file write event (Windows Event ID 4663) on these executables. Alert when the process performing the write (identified in the event details or via correlation with process creation event 4688) is not on the established baseline of legitimate updaters. Use descriptive statistics to find rare source processes modifying these critical files."
                    },
                    {
                        "description": "A legitimate service process spawns an unexpected network connection or child process, indicating it has been hijacked for persistence.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Zeek conn.log"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Baseline the normal behavior of persistent services, including typical child processes and network communication patterns. Monitor for deviations using Windows Event ID 4688 and Zeek conn.log. Use time series analysis to detect unusual volumes of network traffic from a service process. Use correlation analysis to link the start of a service to the creation of anomalous child processes (e.g., cmd.exe, powershell.exe) or connections to rare external IP addresses."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    },
    {
        "information_requirement": "Is the adversary elevating privileges using executable installer file permissions weakness?",
        "tactic_id": "TA0004",
        "tactic_name": "Privilege Escalation",
        "indicators": [
            {
                "technique_id": "T1574.005",
                "name": "Executable Installer File Permissions Weakness",
                "evidence": [
                    {
                        "description": "A known privilege escalation tool, identified by file hash or name, is written to a weakly permissioned directory and subsequently executed by a high-privilege service.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor file write events (Windows Event ID 4663) to any directory. Compute hashes of written executables and check them against a curated list of known privilege escalation tool hashes (e.g., Juicy Potato, Bad Potato, PrintSpoofer). Correlate a hash match with a subsequent process creation event (Windows Event ID 4688) where the process is executed with high-integrity (SYSTEM/Admin) privileges. Alert on confirmed execution of a known privesc tool."
                    },
                    {
                        "description": "A process running with standard user privileges writes to an executable file that is subsequently executed with SYSTEM or Administrator privileges.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Correlate file write events (Windows Event ID 4663) with subsequent process creation events (Windows Event ID 4688) for the same file path within a short time window. Create a detection pattern that alerts if the security context of the process performing the write is a standard user, while the security context of the subsequent execution is a privileged account (e.g., SYSTEM, Administrator). This directly identifies the privilege escalation pattern."
                    },
                    {
                        "description": "A high-privilege process (e.g., running as SYSTEM) executes any binary from a location that is world-writable or user-writable (e.g., %TEMP%, C:\\ProgramData, user profile folders).",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor all process creation events (Windows Event ID 4688). Create a hunting query or alert for any event where the User field indicates a privileged account (e.g., SYSTEM, built-in Administrator) and the Process Name (image path) points to a directory known to be writable by standard users. Use linear regression to model normal execution paths for privileged processes and flag any executions from these insecure locations as significant outliers."
                    },
                    {
                        "description": "A legitimate installer or service process spawns an unexpected child process that is assigned elevated privileges.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 4696"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Baseline normal parent-child process relationships for common installer and service host processes. Monitor process creation (Windows Event ID 4688) and correlate with elevated token assignment (Windows Event ID 4696). Alert when a trusted installer or service process spawns a child that is not on its baseline and is assigned an elevated token, indicating a potential hijack for privilege escalation. Use entropy measures on the command lines of spawned children to detect abnormal complexity or randomness."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    },
    {
        "information_requirement": "Is the adversary evading defenses using executable installer file permissions weakness?",
        "tactic_id": "TA0005",
        "tactic_name": "Defense Evasion",
        "indicators": [
            {
                "technique_id": "T1574.005",
                "name": "Executable Installer File Permissions Weakness",
                "evidence": [
                    {
                        "description": "A legitimate, signed service executable is replaced by a file with a known malicious hash or an invalid/untrusted digital signature.",
                        "data_sources": [
                            "Windows Event ID 4663"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Implement file integrity monitoring on executables for critical services. Upon a file write event (Windows Event ID 4663), automatically trigger a check of the new file's properties. Alert if the new file's hash matches a known malicious hash from a CTI feed, or if its digital signature is missing, invalid, revoked, or issued by a publisher not on a trusted allow list. This provides a high-fidelity alert for binary replacement."
                    },
                    {
                        "description": "A trusted service host process (e.g., services.exe) spawns an anomalous child process (e.g., powershell.exe, rundll32.exe) that is not part of its established process baseline, indicating hijacking.",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Establish a strict baseline of normal child processes for critical service host processes like services.exe, svchost.exe, and lsass.exe. Monitor process creation events (Windows Event ID 4688) and alert on any deviation where one of these trusted parents spawns a child process not on the baseline. Pay special attention to the spawning of LOLBAS (Living Off the Land Binaries and Scripts) like powershell.exe, cmd.exe, or rundll32.exe, as this is a common pattern for defense evasion."
                    },
                    {
                        "description": "File modification of a trusted application or service executable occurs outside of a known patching window or is initiated by a non-standard update process.",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Baseline legitimate patching and software update schedules and the associated processes (e.g., SCCM agent, Windows Update agent). Monitor file write events (Windows Event ID 4663) to executables in protected directories like C:\\Program Files\\ and C:\\Windows\\. Use time series analysis to identify write activity occurring at anomalous times outside of defined update windows. Correlate write events with the source process (from Event ID 4688) and alert if it is not a recognized, legitimate update mechanism."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
