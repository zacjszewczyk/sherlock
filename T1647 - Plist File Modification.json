
[
  {
    "Is the adversary attempting to evade defenses by modifying plist files? (TA0005 - Defense-Evasion)": {
      "Indicators": {
        "T1647 - Plist File Modification": {
          "Creation or modification of a plist file containing known malicious indicators such as filenames, file paths, domains, or IP addresses.": {
            "Data": "macOS File System Events; macOS Process Execution Logs",
            "Data Platform": "Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously scan file system events for the creation or modification of files ending in `.plist` within `~/Library/LaunchAgents`, `/Library/LaunchAgents`, and `/Library/LaunchDaemons`. Compare filenames against a threat intelligence list of known malicious plist names. Upon modification, scan the plist file content for known malicious domains, IP addresses, or file paths within keys like `ProgramArguments` or `Program`. Alert on any matches."
          },
          "A plist file is created or modified to execute a binary from an unusual or non-standard file path, such as a temporary or user-writable shared directory.": {
            "Data": "macOS File System Events; macOS Process Execution Logs",
            "Data Platform": "Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor file system events for modifications to plists in standard persistence locations (`LaunchAgents`, `LaunchDaemons`). Upon modification, parse the plist to extract the executable path from the `Program` or `ProgramArguments` key. Analyze the path for suspicious characteristics, such as pointing to a user-writable temporary directory (`/tmp`, `/var/tmp`), a shared user space (`/Users/Shared/`), or a hidden directory. Use frequency analysis to flag executables launched from rare or suspicious parent directories compared to a baseline of legitimate application paths."
          },
          "A plist file is modified to execute a common script interpreter (e.g., python, osascript, bash, zsh) with command-line arguments, a pattern often used to run obfuscated or fileless persistence scripts.": {
            "Data": "macOS File System Events; macOS Process Execution Logs",
            "Data Platform": "Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Upon modification of a plist file in a persistence location, parse the `ProgramArguments` key. Identify instances where the first argument is a common script interpreter (`/bin/bash`, `/bin/zsh`, `/usr/bin/python`, `/usr/bin/osascript`, `/usr/bin/perl`). Analyze subsequent arguments for signs of obfuscation, inline scripts, or invocation of downloaded files. Use entropy measures to score the randomness of script arguments. Correlate with the process that modified the plist; modification by a browser or document reader is highly suspicious."
          },
          "A process not typically associated with software installation or system administration (e.g., a web browser, email client, or document-based application) modifies a plist file in a system or user persistence location.": {
            "Data": "macOS File System Events; macOS Process Execution Logs",
            "Data Platform": "Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate file modification events for plists in `LaunchAgents` and `LaunchDaemons` directories with the parent process responsible for the modification. Establish a baseline of legitimate processes that modify these files (e.g., `installer`, `systemd`, trusted software updaters). Alert when a process outside this baseline, particularly a user-facing application like `Google Chrome`, `Safari`, `Microsoft Word`, or `Preview`, writes to or modifies these files. Use descriptive statistics on process names modifying these locations to identify rare occurrences."
          },
          "A process launched via a recently created or modified plist file immediately establishes an external network connection, especially to a new or low-reputation domain.": {
            "Data": "macOS Process Execution Logs; macOS File System Events; Zeek conn.log",
            "Data Platform": "Endpoints, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for process creation events where the parent process is `launchd` (PID 1). If the process's executable path corresponds to a program referenced in a plist that was created or modified within a short time window (e.g., last 24 hours), flag the process for analysis. Correlate this process's activity with network connection logs (Zeek conn.log) by timestamp and endpoint IP address. Use correlation analysis to prioritize alerts for processes that make outbound connections to destinations not previously seen in the environment or that have a poor reputation score. Use time series analysis to detect unusual spikes in new processes launched by `launchd`."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
