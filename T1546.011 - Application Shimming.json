```json
[
  {
    "Is the adversary establishing persistence using application shimming? (TA0003 - Persistence)": {
      "Indicators": {
        "T1546.011 - Application Shimming": {
          "Presence of custom shim database (.sdb) files with known malicious hashes or matching specific byte sequences of known shim-based malware.": {
            "Data": "Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously scan the `%WINDIR%\\AppPatch\\Custom\\` directory for `.sdb` files. Compute the hash (e.g., SHA256) of each file and compare it against a threat intelligence feed of known malicious shim database file hashes. Concurrently, use YARA rules to scan file content for specific patterns associated with known malicious shims and persistence techniques. Alert on any matches."
          },
          "Execution of 'sdbinst.exe' with command-line arguments to install a new shim database, especially when the source .sdb file is in an unusual location like a user profile directory.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for process creation events (Windows Event ID 4688) for `sdbinst.exe`. Analyze command-line arguments for the presence of `.sdb` file paths. Flag any installations where the source `.sdb` file originates from non-standard or user-writable locations (e.g., `C:\\Users\\`, `C:\\Temp\\`, `%APPDATA%`, `C:\\ProgramData\\`). Use frequency analysis to establish a baseline of legitimate `.sdb` file names and paths and alert on deviations."
          },
          "A legitimate application targeted by a shim exhibits anomalous behavior, such as creating unexpected child processes or initiating suspicious network connections, shortly after being started.": {
            "Data": "Windows Event ID 4688; Zeek conn.log; Windows Event ID 5156",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate events in a sequence: 1) The start of a commonly shimmed application for persistence (e.g., `services.exe`, `spoolsv.exe`, `explorer.exe`). 2) The subsequent creation of unexpected child processes (e.g., `powershell.exe`, `cmd.exe`, `rundll32.exe`) by the application (Windows Event ID 4688). 3) The application or its child processes making network connections (Zeek conn.log, Windows Event ID 5156) to unusual external destinations. Use correlation analysis with a defined time window (e.g., 2 minutes) to link these events and flag the entire sequence as suspicious."
          },
          "Anomalous file or registry modifications related to application shimming occur, particularly outside of legitimate software installation or patching activities.": {
            "Data": "Windows Event ID 4663; Windows Event ID 4657",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Enable and monitor file and registry auditing. Track write/modify events (Windows Event ID 4663 for files, 4657 for registry) for `%WINDIR%\\AppPatch\\Custom\\*.sdb` and `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\\`. Establish a baseline of normal modification times (e.g., during patching windows). Use time series analysis to detect modifications at unusual times (e.g., late nights, weekends) or by unauthorized processes. Correlate these modifications with the execution of `sdbinst.exe`."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary attempting privilege escalation using application shimming? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1546.011 - Application Shimming": {
          "Presence of custom shim database (.sdb) files in user-writable locations with hashes or YARA rule matches specifically associated with known UAC bypass or privilege escalation exploits.": {
            "Data": "Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously scan user-writable and temporary directories (e.g., `%TEMP%`, `%APPDATA%`, `C:\\Users\\*`) for `.sdb` files. Compute file hashes and compare against a CTI feed of hashes known to be used in privilege escalation and UAC bypass techniques. Use YARA rules designed to detect specific UAC bypass shims (e.g., those targeting `msconfig.exe` or `eventvwr.exe`). Alert on any matches."
          },
          "A known command-line pattern for UAC bypass is observed: 'sdbinst.exe' installs a shim followed immediately by the execution of the targeted auto-elevating Windows executable.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for a specific sequence pattern using Windows Event ID 4688: 1) `sdbinst.exe` is executed to install a shim database. 2) Within a short time window (e.g., < 10 seconds), a Microsoft-signed executable known to auto-elevate (e.g., `eventvwr.exe`, `msconfig.exe`, `fodhelper.exe`) is executed by the same user. Use correlation analysis to link these two events by user context and time proximity to identify this known UAC bypass pattern."
          },
          "A non-elevated process spawns a Microsoft-signed, auto-elevating executable which in turn spawns an unexpected child process (e.g., 'cmd.exe', 'powershell.exe') with high integrity.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Windows Event ID 4688) and their associated integrity levels. Establish a baseline of normal parent-child relationships for auto-elevating executables (like `eventvwr.exe`). Flag instances where one of these executables, running at High integrity, spawns a child process (like `cmd.exe`) when the original parent process that launched it was running at Medium integrity. Use correlation analysis on process chains and integrity levels to detect this behavioral anomaly indicative of a successful UAC bypass."
          },
          "Anomalous network activity or file system modifications originate from a legitimate, auto-elevating Windows process that typically has no reason to perform such actions.": {
            "Data": "Zeek conn.log; Windows Event ID 5156; Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Establish a baseline of normal network and file system activity for legitimate auto-elevating executables (e.g., `msconfig.exe`, `computerdefaults.exe`). Monitor for any deviations, such as the process making external network connections (Zeek conn.log, Windows Event ID 5156) or writing/modifying files in sensitive or user-specific directories (Windows Event ID 4663). Use descriptive statistics and frequency analysis on network destinations and file paths to identify rare and suspicious outliers caused by a malicious shim intended for privilege escalation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```