
[
  {
    "Is the adversary using Electron applications to evade defenses? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1218.015 - Electron Applications": {
          "An Electron application process makes an outbound network connection to an IP address or domain on a high-confidence threat intelligence feed.": {
            "Data": "Zeek conn.log; Windows Event ID 4688",
            "Data Platform": "Network devices, Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate network connection logs (Zeek conn.log) with process creation logs (Windows Event ID 4688) to attribute network traffic to specific Electron application processes (e.g., teams.exe, slack.exe, code.exe). Inner join the destination IP addresses and domains from these connections with a CTI feed of known command and control (C2) servers or malicious domains that is updated daily. Investigate any confirmed matches for further malicious activity."
          },
          "Execution of an Electron application with specific command-line arguments known to be used for debugging, disabling security sandboxes, or proxying execution.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Windows Event ID 4688). Maintain a watch list of known Electron application executables in the environment. Scan the command line arguments for these processes for specific, known-abuse patterns like '--inspect', '--remote-debugging-port', '--gpu-launcher', '--disable-gpu-sandbox', or '--no-sandbox'. Use regular expression matching to find these patterns. While some flags can be used legitimately by developers, alert on flags that disable security features when observed on non-developer workstations or servers."
          },
          "A legitimate Electron application process spawns an unexpected child process, such as a command shell (cmd.exe, powershell.exe) or script interpreter (wscript.exe, cscript.exe).": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Windows Event ID 4688) to model normal parent-child relationships. Create a high-priority alert for any instance where a parent process from a list of known Electron applications (e.g., teams.exe, slack.exe, code.exe, discord.exe) spawns a child process from a list of suspicious interpreters (e.g., cmd.exe, powershell.exe, pwsh.exe, wscript.exe, cscript.exe, bash.exe). Analyze the command line of the spawned child process for further indicators like encoded commands, download cradles, or execution of unsigned scripts. Use frequency analysis to identify rare or first-seen parent-child process pairs in the environment."
          },
          "An Electron application exhibits anomalous network behavior, such as communicating with a new or rare external domain, using non-standard ports, or transferring unusual amounts of data compared to its established baseline.": {
            "Data": "Zeek conn.log; Windows Event ID 4688",
            "Data Platform": "Network devices, Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Establish a baseline of normal network activity for common Electron applications in the environment. Using Zeek conn.log correlated with process information (from Event ID 4688), track destination IPs, ports, and data volumes for each application. Use statistical analysis to detect outliers. For example, use a frequency analysis (percentile ranking) to identify connections to rare domains (e.g., seen for the first time or by <1% of hosts). Use time series analysis on data transfer volumes to detect significant spikes. Use entropy measures on destination ports per application to detect unusually diverse or non-standard communication patterns."
          },
          "An Electron application spawns a child process whose command line indicates interaction with the parent application's core files, such as its application archive (app.asar).": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "This is a two-stage behavioral detection using a single data source. First, monitor Windows Event ID 4688 for an Electron application spawning a child process (e.g., powershell.exe). Second, analyze the 'CommandLine' field of that child process event. Search for command-line arguments that contain file paths pointing back to the parent application's own installation directory, especially targeting core files like 'app.asar' or other JavaScript resources. An example would be 'powershell.exe -command \"(Get-Content '...\\app.asar') -replace 'foo','bar' | Set-Content '...\\app.asar'\"'. Correlate parent process path with file paths in the child's command line to detect this self-modification behavior."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
