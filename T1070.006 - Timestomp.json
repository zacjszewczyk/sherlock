```json
[
  {
    "Is the adversary attempting to evade defenses by modifying file timestamps? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1070.006 - Timestomp": {
          "A known malicious timestomping utility is identified in network traffic based on its file hash.": {
            "Data": "Zeek files.log",
            "Data Platform": "Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously analyze Zeek files.log for all files transferred over monitored network segments. Correlate the MD5 and SHA1 hashes of transferred files against a high-confidence cyber threat intelligence (CTI) feed of known malicious tools, including utilities specifically designed for or frequently used for timestomping. Generate a high-priority alert for any hash match and investigate the source and destination of the transfer."
          },
          "Execution of command-line utilities or PowerShell commands with syntax specifically designed to modify file timestamps.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 (Process Creation) for command lines containing patterns indicative of timestamp modification. Use regular expression matching to detect command structures such as the use of 'touch', PowerShell commands like '(Get-Item ...).CreationTime/LastWriteTime = ...', or known third-party tools (e.g., 'nircmd.exe setfiletime'). Correlate these process execution events with file modification logs for the target file to confirm a timestamp change occurred."
          },
          "A file's metadata timestamp (e.g., CreationTime, LastWriteTime) significantly predates the logged system event time of its creation or modification.": {
            "Data": "Windows Event ID 4663; Zeek files.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "For file creation/modification events (from Windows Event ID 4663 or the 'ts' field in Zeek files.log), compare the system's event timestamp with the file's internal metadata timestamps (MACE: Modification, Access, Creation). Calculate the delta between the event timestamp and the file's modification/creation time. Use descriptive statistics on this delta across the environment to establish a baseline. Flag files where the timestamp predates the event by an anomalous amount (e.g., > 3 standard deviations from the mean delta, or any negative delta greater than a few minutes), as this indicates the file's timestamp was back-dated."
          },
          "A file's timestamps (Modification, Access, Creation) are identical to those of a legitimate, unrelated system file, a pattern known as 'timestamp cloning'.": {
            "Data": "Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Upon file creation/modification events (Windows Event ID 4663), particularly for executables in user-writable locations (e.g., %TEMP%, %APPDATA%), compare the file's full set of MACE timestamps against a cached list of timestamps from common, legitimate system files (e.g., kernel32.dll, ntdll.dll, user32.dll). Use correlation analysis to find exact timestamp matches. Flag any non-system file that has an identical timestamp profile to a file on this list, as this is a strong indicator of a specific timestomping TTP."
          },
          "A file exhibits illogical or inconsistent internal timestamps, such as a creation time that is more recent than its last modification time.": {
            "Data": "Zeek files.log; Windows Event ID 4663",
            "Data Platform": "Network devices, Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze file metadata from Zeek files.log (for files in transit) and from detailed file auditing (e.g., Windows Event ID 4663). For each file, compare its internal timestamps. Flag any file where timestamps are logically inconsistent according to file system rules (e.g., CreationTime > LastWriteTime). While some legitimate edge cases exist, this is highly anomalous and often indicates manipulation. Calculate the frequency of such occurrences and investigate files that exhibit this behavior, especially executables or scripts."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```