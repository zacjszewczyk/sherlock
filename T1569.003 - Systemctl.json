[
    {
        "information_requirement": "Has the adversary executed commands using systemctl?",
        "tactic_id": "TA0002",
        "tactic_name": "Execution",
        "indicators": [
            {
                "technique_id": "T1569.003",
                "name": "Systemctl",
                "evidence": [
                    {
                        "description": "A systemd service unit file is created containing known malicious indicators (e.g., C2 domains, IPs) or with a name matching known malware.",
                        "data_sources": [
                            "auditd logs",
                            "Service unit files"
                        ],
                        "data_platforms": [
                            "Servers",
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Continuously scan newly created or modified systemd service files (monitored via file integrity monitoring or auditd logs for file creation in directories like /etc/systemd/system/, ~/.config/systemd/user/) for known malicious indicators such as domains, IP addresses, or commands referencing malicious binaries. Cross-reference the service name (e.g., `evil.service`) against a cyber threat intelligence feed of known malware service names. Alert on any matches."
                    },
                    {
                        "description": "A systemd service unit is created in a non-standard, suspicious directory (e.g., /tmp, /dev/shm) and subsequently enabled or started using systemctl.",
                        "data_sources": [
                            "auditd logs"
                        ],
                        "data_platforms": [
                            "Servers",
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor auditd logs for file creation events (`creat` or `open` syscalls) for files ending in `.service` within non-standard, world-writable directories such as `/tmp`, `/var/tmp`, or `/dev/shm`. Correlate these file creation events with subsequent process execution events (`execve` syscall) for `systemctl` commands (`enable`, `start`) targeting that specific file path within a short time window. Use descriptive statistics on service file locations to identify rare and suspicious paths as outliers."
                    },
                    {
                        "description": "The systemctl command is executed by an anomalous parent process, such as a web server or document application, indicating a post-exploitation execution chain.",
                        "data_sources": [
                            "auditd logs"
                        ],
                        "data_platforms": [
                            "Servers",
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Analyze process ancestry trees from auditd logs for all `systemctl` executions. Establish a baseline of normal parent processes for `systemctl` (e.g., `sshd`, `bash` from an interactive session, configuration management tools). Flag any `systemctl` execution where the parent or grandparent process is anomalous (e.g., `nginx`, `apache2`, `java`, `node`). Use correlation analysis to link the initial anomalous parent process event with the subsequent `systemctl` execution for root cause analysis."
                    },
                    {
                        "description": "A critical security or logging service (e.g., auditd, EDR agent) is disabled using systemctl, potentially to evade defenses.",
                        "data_sources": [
                            "auditd logs",
                            "Zeek conn.log"
                        ],
                        "data_platforms": [
                            "Servers",
                            "Endpoints",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor auditd logs for `systemctl` command executions (`execve` syscall) with arguments `stop` or `disable` targeting a predefined list of critical services (e.g., auditd.service, rsyslog.service, osqueryd.service, crowdsec.service). Generate a high-priority alert for such events. Correlate the timestamp of the disablement event with Zeek conn.log to identify any new or anomalous outbound network connections from the host shortly thereafter, which could indicate C2 communication or exfiltration after defenses were lowered. Use time series analysis to detect a drop in host logging telemetry followed by a spike in network traffic."
                    },
                    {
                        "description": "Rapid, sequential execution of systemctl reconnaissance commands (e.g., status, list-units, list-timers) from a single process or user, indicating automated discovery.",
                        "data_sources": [
                            "auditd logs"
                        ],
                        "data_platforms": [
                            "Servers",
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor auditd logs for `systemctl` command lines used for reconnaissance (`status`, `list-units`, `list-unit-files`, `list-timers`). Aggregate these events by host and parent process ID over short time windows (e.g., 1-5 minutes). Use time series analysis or a simple burst detection algorithm (e.g., >10 recon commands in 1 minute from the same source) to identify automated reconnaissance activity, which deviates from typical interactive administrative use. Investigate the source script or parent process responsible for the activity."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
