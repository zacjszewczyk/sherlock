
[
  {
    "Is the adversary maintaining persistence by hijacking process execution flow? (TA0003 - Persistence)": {
      "Indicators": {
        "T1574.013 - KernelCallbackTable": {
          "Execution of a process with a file hash known to implement T1574.013 for persistence.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for all process creation events. Compare the file hash of the new process against a continuously updated threat intelligence feed of hashes for malware and tools known to use KernelCallbackTable hijacking for persistence. Alert on any matches."
          },
          "A trusted GUI process (e.g., explorer.exe) unexpectedly creating a scheduled task or modifying a common registry autorun key.": {
            "Data": "Windows Event ID 4698; Windows Event ID 4657; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for patterns where a common GUI process (parent process name in event) creates a new scheduled task (Windows Event ID 4698) or modifies a registry autorun key (Windows Event ID 4657 on paths like Run, RunOnce, etc.). Correlate these events with recent process handle requests (Windows Event ID 4656) targeting the GUI process. This specific sequence is a strong pattern for persistence via process injection."
          },
          "A GUI process performs an action that establishes persistence shortly after being accessed by another, potentially malicious, process.": {
            "Data": "Windows Event ID 4656; Windows Event ID 4688; Windows Event ID 4698; Windows Event ID 4657",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate Windows Event ID 4656 (A handle to an object was requested) targeting a GUI process with subsequent persistence-related events initiated by that same GUI process within a short time window (e.g., 1-5 minutes). Persistence events include new scheduled tasks (4698), registry autorun modifications (4657), or dropping files into startup folders (monitored via file creation events). Use correlation analysis to link the initial handle request to the subsequent persistence action, focusing on unusual source processes for the handle request."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary elevating privileges by hijacking process execution flow? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1574.013 - KernelCallbackTable": {
          "Execution of a known privilege escalation tool by hash or name that is known to utilize KernelCallbackTable hijacking.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for process creation events. Alert on matches for process names or file hashes associated with known public exploits or malware that use T1574.013 for privilege escalation. Maintain and update this list from public reporting and threat intelligence."
          },
          "A process at a lower integrity level successfully requests a handle to a GUI process running at a higher integrity level.": {
            "Data": "Windows Event ID 4656",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Enable and monitor advanced audit logging for Windows Event ID 4656 to include process integrity levels. For every event where a handle is requested for a 'Process' object, compare the 'Source Process ID' integrity level with the 'Target Process ID' integrity level. Flag any instance where a source process at Medium, Low, or AppContainer integrity successfully obtains a handle (with write-access rights like 0x20 - PROCESS_VM_WRITE) to a target GUI process at High or System integrity. This pattern is a key indicator of a privilege escalation attempt."
          },
          "A GUI process spawns a child process with a higher integrity level than its original parent, following a process access event from an untrusted source.": {
            "Data": "Windows Event ID 4656; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Create a behavioral rule that correlates Windows Event ID 4656 (process access) with a subsequent Windows Event ID 4688 (process creation) from the target GUI process. Compare the integrity level of the newly created process with the known, typical integrity level of the GUI process's legitimate parent (e.g., explorer.exe is typically Medium integrity). An explorer.exe process spawning a child with High or System integrity is a strong anomaly indicative of successful privilege escalation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary evading defenses by hijacking process execution flow? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1574.013 - KernelCallbackTable": {
          "A trusted GUI process (e.g., explorer.exe, chrome.exe) makes an outbound network connection to a known malicious C2 IP address or domain.": {
            "Data": "Zeek conn.log",
            "Data Platform": "Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate network connection logs (Zeek conn.log) with endpoint process information (if available via other tools). Inner join destination IP addresses and domains from network logs against a CTI feed of known malicious infrastructure. Prioritize alerts where the originating process on the endpoint is a common GUI application, as this indicates masquerading or process injection."
          },
          "A trusted GUI process spawns a command-line interpreter (cmd.exe, powershell.exe) or other reconnaissance tools.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for process creation events where the parent process is a common GUI application (e.g., explorer.exe, outlook.exe, chrome.exe, etc.) and the child process is a shell (cmd.exe, powershell.exe, wsl.exe) or a common administrative/reconnaissance tool (whoami.exe, net.exe, quser.exe, etc.). This is a strong pattern for defense evasion, as these actions are highly uncharacteristic for GUI applications. Analyze command-line arguments for further suspicion."
          },
          "A trusted GUI process exhibits network, process, or file access behavior that deviates significantly from its established baseline.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "For common GUI processes, establish a robust behavioral baseline of normal activity, including typical child processes, network destination patterns (IPs, ports, domains, data volume), and file access patterns. Continuously monitor for deviations. Use descriptive statistics to define normalcy and statistical methods like Inter-Quartile Range (IQR) and standard deviation to detect outliers. Use entropy measures on sets of child process names or destination IPs over time; a sudden increase in entropy for a stable GUI process is a strong indicator of hijacking for defense evasion."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
