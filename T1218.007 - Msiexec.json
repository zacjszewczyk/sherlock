
[
  {
    "Is the adversary attempting to evade defenses using msiexec.exe? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1218.007 - Msiexec": {
          "Execution of msiexec.exe to install a package (.msi) or handle a DLL from a known malicious URL/IP address or with a known malicious file hash.": {
            "Data": "Windows Event ID 4688; Zeek conn.log; Zeek http.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for msiexec.exe command lines containing URLs. Inner join the extracted URLs with a CTI feed of known malicious domains/URLs. For packages fetched, correlate network logs (Zeek http.log or conn.log) to identify the downloaded file and its hash. Match the file hash against a CTI feed of known malicious file hashes. Alert on any confirmed matches."
          },
          "Execution of msiexec.exe with command-line patterns strongly indicative of malicious use, such as silent installation from a remote HTTP source or registration/unregistration of a DLL.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Create specific detection rules to flag msiexec.exe executions (via Windows Event ID 4688) that match high-fidelity malicious patterns. Prioritize alerts for command lines containing the sequence of `/q` (or `/quiet`, `/qn`) and `/i` in conjunction with `http://` or `https://`. Additionally, flag and investigate any use of the less common `/y` (register) and `/z` (unregister) arguments, as these are rarely used in legitimate software installation but are common for proxying DLL execution."
          },
          "Execution of msiexec.exe initiated by a non-standard parent process, such as a Microsoft Office application, a web browser, or a scripting engine.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 and analyze the parent-child process relationships for all msiexec.exe executions. Maintain a baseline of legitimate parent processes (e.g., `svchost.exe`, `explorer.exe`, known installer wrappers). Generate high-priority alerts for any execution where the parent process is `winword.exe`, `excel.exe`, `outlook.exe`, `powershell.exe`, `cmd.exe`, `wscript.exe`, or a browser process. Use correlation analysis to link these events to other suspicious host activities."
          },
          "An msiexec.exe process generating unexpected outbound network connections after its initial execution, especially to non-corporate or low-reputation IP addresses.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate the process start time and process ID of msiexec.exe (from Windows Event ID 4688) with subsequent network connection logs (Zeek conn.log) originating from the same host. While `msiexec` fetching a remote `.msi` is expected network activity, flag any *additional* and *unexpected* connections made by the `msiexec.exe` process itself or by a child process it spawns. Analyze destination IPs for low reputation, newness, or non-standard ports. Use time series analysis to identify network traffic spikes from a host immediately following an `msiexec` execution."
          },
          "Execution of msiexec.exe with command-line arguments that are statistically rare or anomalous compared to an established baseline of legitimate activity within the environment.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Collect all msiexec.exe command lines (from Windows Event ID 4688) across the environment over a 30-day period to build a historical baseline of normal usage patterns. For each new execution, analyze its arguments. Use frequency analysis and entropy measures on the command-line arguments to identify executions that are statistical outliers. Flag command lines with very low frequency of occurrence or unusually high entropy, which can indicate randomization or obfuscation. Use box-plots on command line length to identify significant outliers for further investigation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
