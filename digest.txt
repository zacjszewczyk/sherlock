Directory structure:
└── watson/
    ├── AskSage.ipynb
    ├── generator.py
    ├── refiner.py
    ├── watson.py
    ├── config/
    │   ├── asom.yml
    │   ├── generator.yml
    │   └── refine.yml
    └── src/
        ├── attack_retriever.py
        ├── colorlog.py
        ├── formatting.py
        └── processing.py

================================================
FILE: AskSage.ipynb
================================================
Error processing notebook: 'text/plain'


================================================
FILE: generator.py
================================================
#!/usr/bin/env python3
import logging

import sys
from pathlib import Path
# Add project root to path to allow src imports
sys.path.insert(0, str(Path(__file__).resolve().parent))

from src.colorlog import make_console_handler

# Define a module-level logger to be accessible by all functions
logger = logging.getLogger(__name__)

logger.info("Importing built-in modules.")
import json
from datetime import datetime, timezone
import base64
import os
import re
import requests
import urllib3
import time  # Added for retry delays

logger.info("Importing installed modules")
from asksageclient import AskSageClient
from google import genai
from google.genai import types
from google.genai import errors  # Added for proper exception handling
import yaml

logger.info("Importing project-specific modules.")
from src.attack_retriever import build_technique_dictionary

BASE_PROMPT = """
I need you to generate an analytic plan. The analytic plan consists of the following components:

1.  Information Requirements (IRs): These identify the information that the commander considers most important. For example, 'Has the adversary gained initial access? (TA0001 - Initial Access)' (PIR) or 'What data is available for threat detection and modeling? (D3-D - Detect)' (FFIR). Note that PIRs are tagged with a MITRE ATT&CK tactic, and FFIRs are tagged with a MITRE D3FEND tactic. We call these "CCIR" generally.

2.  Indicators: These are positive or negative evidence of threat activity pertaining to one or more information requirements. They are observable clues related to a specific information requirement. For the IR above, indicators might include:
    * T1078 - Valid Accounts
    For the FFIR above, indicators might include:
    * D3-NTA - Network Traffic Analysis
    Note that indicators for PIRs are tagged with MITRE ATT&CK techniques, and FFIRs are tagged with MITRE D3FEND techniques.

3.  Evidence: This is the concrete information that supports or refutes an indicator. It provides the 'proof' and can vary in complexity. For the indicator 'T1078 - Valid Accounts', evidence could be 'A valid account login exhibits multiple anomalous characteristics simultaneously, such as originating from a rare geographic location, using an unfamiliar device, and occurring outside of normal working hours.' For the indicator 'D3-NTA', evidence could be 'Logs generated from network activity such as network flow metadata and network traffic content'.

4.  Data: This describes the precise data necessary to identify evidence. Specificity here is key (e.g., Zeek Conn logs, Sysmon event ID 4624, Active Directory security logs). For the evidence, focus your plan on the following data sources: network logs, specifically Zeek logs; host logs, specifically Windows Event IDs. Write only the data name. For example, Windows Event ID 4688, Zeek conn.log

5. Data Source (Platform): Use a dummy value here of "TBD".

6. Named Areas of Interest (NAIs): These are areas where data that will satisfy a specific information requirement can be collected. For the IR above, NAIs could include 'Our organization's internet gateway', 'Authentication servers', 'Servers hosting sensitive data', and 'Endpoint devices of high-value targets'.

7.  Actions: These are high-level instructions that guide the analysts' search for evidence. For the evidence associated with the indicator 'T1078 - Valid Accounts' and the associated PIR 'Has the adversary gained initial access? (TA0001 - Initial Access)', an action could be: 'For each successful login (Windows Event ID 4624), enrich with geolocation data from the source IP (Zeek conn.log). Establish a multi-faceted baseline for each user account including typical login times, source countries/ISPs, and devices used. Use a scoring system where deviations from the baseline (e.g., rare country, login at 3 AM, new device) add to a risk score. A high cumulative risk score, identified using statistical models or descriptive statistics (e.g., multiple metrics exceeding 2 standard deviations from the norm), indicates a likely compromised account.' For the evidence associated with the indicator 'D3-NTA' and the associated FFIR 'What data is available for threat detection and modeling? (D3-D - Detect)', an action could be: 'Inventory available network log sources (e.g., networking appliances, Zeek, PCAP). For each source, perform a time series analysis to visualize data volume over at least the last 30 days to identify collection gaps or anomalies. Use descriptive statistics to summarize key fields like protocol distribution in Zeek conn.log and the frequency of top requested domains in dns.log to establish a cursory understanding of network activity. Compare across data sources to validate collection consistency and identify individual sensor blind spots.' Focus mostly on simple detections, but also look for opportunities to incorporate basic data science techniques here, such as percentiles, entropy scores, statistics, and other, similar methods. Generally speaking, you should have one symbolic logic (such as an IOC match), one statistical method (such as a percentile threshold), and machine learning application (such as classification or time series analysis) action.

Based on these definitions, please refine an existing analytic plan in plain, unstyled text in the JSON format below. Provide specific and relevant examples for each component within this format.

[
  {
    "information_requirement": "Insert CCIR here",
    "tactic_id": "Insert MITRE ATT&CK or MITRE D3FEND tactic T-code here",
    "tactic_name": "Insert the tactic name here",
    "indicators": [
      {
        "technique_id": "Insert MITRE technique T-code here",
        "name": "Insert the technique name here",
        "evidence": [
          {
            "description": "Describe the evidence here",
            "data_sources": [
              "First data source",
              "Second data source"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Insert site-specific NAI here",
            "action": [
              "Describe the symbolic logic action here, such as an IOC match",
              "Describe one statistical acton, such as a percentile threshold",
              "Describe one machine learning action, such as classification, regression, time series analysis, clustering, etc."
            ]
          }
        ]
      }
    ]
   }
]

Based on that format, generate an analytic plan for the following technique. If you are given an offensive technique, a T-code, then only generate PIRs; if you are given a defensive technique, a D-code, then only generate FFIRs. Pay extremely close attention to the type of matrix the technique references (enterprise, ICS, mobile), which will have a significant impact on how you build this plan.
"""

def setup_logging() -> tuple[str, Path]:
    """Initializes console and file logging."""
    run_ts = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
    logs_dir = Path("logs")
    logs_dir.mkdir(parents=True, exist_ok=True)
    log_path = logs_dir / f"generator_{run_ts}.log"

    fmt = "%(asctime)s %(levelname)-8s %(name)s :: %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"

    # Configure the root logger
    root = logging.getLogger()
    root.setLevel(logging.INFO)
    root.handlers.clear()
    root.addHandler(make_console_handler(fmt, datefmt))

    fh = logging.FileHandler(log_path, encoding="utf-8")
    fh.setFormatter(logging.Formatter(fmt=fmt, datefmt=datefmt))
    root.addHandler(fh)

    return run_ts, log_path

def load_config(path: Path) -> dict:
    """Loads the YAML configuration file."""
    if not path.exists():
        logger.critical(f"Configuration file not found at '{path}'. Exiting.")
        raise SystemExit(1)
    
    with open(path, "r", encoding="utf-8") as f:
        try:
            config = yaml.safe_load(f)
            logger.info(f"Successfully loaded configuration from '{path}'.")
            return config
        except yaml.YAMLError as e:
            logger.critical(f"Error parsing YAML configuration: {e}")
            raise SystemExit(1)

def generate_analytic_plan(prompt, model, ask_sage_client, max_retries=3, retry_delay=1):    
    # Validate inputs
    if not prompt or not isinstance(prompt, str):
        raise ValueError("Prompt must be a non-empty string")
    
    if not model or not isinstance(model, str):
        raise ValueError("Model must be a non-empty string")
    
    # Primary attempt with Gemini
    for attempt in range(max_retries):
        try:
            # Initialize Gemini client with API key
            api_key = os.environ.get("GEMINI_API_KEY")
            if not api_key:
                logger.warning("GEMINI_API_KEY not found in environment variables")
                raise ValueError("GEMINI_API_KEY environment variable is not set")
            
            client = genai.Client(api_key=api_key)
            
            # Generate content using Gemini
            response = client.models.generate_content(
                model=model,
                contents=[
                    types.Content(
                        role="user",
                        parts=[
                            types.Part.from_text(text=prompt),
                        ],
                    ),
                ],
                config=types.GenerateContentConfig(
                    temperature=0.7,
                    # max_output_tokens=2048,
                    # top_p=0.95,
                    # top_k=40,
                ),
            )
            
            # Validate response
            if response and hasattr(response, 'text'):
                logger.info(f"Successfully generated response using {model}")
                return response.text
            else:
                logger.warning("Response received but no text content found")
                raise ValueError("Invalid response format from Gemini")
                
        except (errors.ClientError, errors.APIError) as e:
            # Handle Google API errors including rate limiting
            error_message = str(e)
            error_code = getattr(e, 'status_code', None) if hasattr(e, 'status_code') else None
            
            # Check for rate limiting (429 status code or quota-related messages)
            if (error_code == 429 or 
                "429" in error_message or 
                "RESOURCE_EXHAUSTED" in error_message or
                "quota" in error_message.lower() or 
                "rate" in error_message.lower()):
                logger.error(f"Google API error: {error_message}")
                logger.info("Attempting to use AskSage backup model due to API error")
                break
            else:
                logger.warning(f"Rate limit hit (attempt {attempt + 1}/{max_retries}): {error_message}")
                
                # Try to extract retry delay from error message
                retry_after = retry_delay * (2 ** attempt)  # Default exponential backoff
                
                # Look for specific retry delay in error message
                import re
                retry_match = re.search(r'retry in (\d+(?:\.\d+)?)', error_message.lower())
                if retry_match:
                    suggested_delay = float(retry_match.group(1))
                    retry_after = min(suggested_delay + 1, 120)  # Cap at 2 minutes
                    logger.info(f"Using suggested retry delay: {retry_after} seconds")
                
                if attempt < max_retries - 1:
                    logger.info(f"Waiting {retry_after} seconds before retry...")
                    time.sleep(retry_after)
                    continue
                else:
                    logger.info("All Gemini retries exhausted, falling back to AskSage backup model")
                    break
    
    # Fallback to AskSage backup model
    try:
        logger.info("Using AskSage backup model: google-gemini-2.5-pro")
        
        # Validate ask_sage_client
        if not ask_sage_client:
            raise ValueError("ask_sage_client is not initialized")
        
        response = ask_sage_client.query(
            prompt,
            persona="default",
            dataset="none",
            limit_references=0,
            temperature=0.7,  # Match the temperature from primary model
            live=0,
            model="google-gemini-2.5-pro",
            system_prompt=None
        )
        
        # Validate response structure
        if not response or not isinstance(response, dict):
            raise ValueError("Invalid response from AskSage API")
        
        if 'message' not in response:
            logger.error(f"Response missing 'message' field: {response}")
            raise ValueError("Response from AskSage API does not contain 'message' field")
        
        message = response['message']
        
        if not message:
            raise ValueError("Empty message received from AskSage API")
        
        logger.info("Successfully generated response using AskSage backup model")
        return message
        
    except Exception as e:
        logger.error(f"Backup model also failed: {str(e)}")
        raise Exception(f"Both primary and backup models failed. Last error: {str(e)}")

def main():
    """Main script execution."""
    
    run_ts, log_path = setup_logging()
    logger.info(f"Run initialized at: {run_ts} | Logging to: {log_path}")

    # --- 0. Instantiate models ---

    logger.info("Loading Gemini API key")
    try:
        with open(".GEMINI_API_KEY", "r") as fd:
            os.environ["GEMINI_API_KEY"] = fd.read().strip()
    except:
        logger.info("Failed to import Gemini API key")
    
    logger.info("Loading Sage API key")
    try:
        with open("./credentials.json", "r") as file:
            credentials = json.load(file)
            # Validate required keys
            if 'credentials' not in credentials or 'api_key' not in credentials['credentials']:
                logger.error("Missing required keys in the credentials file.")
                raise
    
        # Extract the API key and email from the credentials
        sage_api_key = credentials['credentials']['api_key']
        sage_email = credentials['credentials']['Ask_sage_user_info']['username']
    except FileNotFoundError:
        raise FileNotFoundError(f"Credentials file not found at ./credentials.json")
    except json.JSONDecodeError:
        raise ValueError(f"Invalid JSON format in the credentials file: ./credentials.json")
    
    # --- 1. Load Configuration ---
    logger.info("Loading configuration")
    config = load_config(Path("config/generator.yml"))
    output_dirs_map = config.get("output_directories", {})
    default_output_dir = Path(output_dirs_map.get("default", "techniques"))
    matrices = config.get("matrices", ["enterprise"])
    filter_techniques = config.get("techniques", [])
    model = config.get("model", "gemini-2.5-flash")

    if not output_dirs_map:
        logger.critical("Configuration key 'output_directories' is missing or empty. Cannot determine where to save files.")
        raise SystemExit(1)

    # --- 2. Build Technique Dictionary ---
    logger.info("Building technique dictionary")
    technique_dict = build_technique_dictionary(matrices)
    
    target_techniques = {}
    if filter_techniques:
        logger.info(f"Filtering for {len(filter_techniques)} specific techniques from config.")
        for full_key, tech_data in technique_dict.items():
            if tech_data['technique_id'] in filter_techniques:
                target_techniques[full_key] = tech_data
    else:
        logger.info("Processing all available techniques from selected matrices.")
        target_techniques = technique_dict
    
    logger.info(f"Will generate analytic plans for {len(target_techniques)} techniques.")

    # --- 3. Instantiate Sage client ---
    logger.info("Instantiating Sage client")
    # Disable SSL warnings
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    # Monkey-patch requests to disable SSL verification globally
    old_request = requests.Session.request
    
    def new_request(self, method, url, **kwargs):
        kwargs['verify'] = False
        return old_request(self, method, url, **kwargs)
    
    requests.Session.request = new_request

    # Now create your client
    ask_sage_client = AskSageClient(
        sage_email, 
        sage_api_key, 
        user_base_url="https://api.genai.army.mil/user/", 
        server_base_url="https://api.genai.army.mil/server/"
    )

    # --- 4. Generate and Save Analytic Plans ---
    logger.info("Generating analytic plans")
    for i, (full_key, tech_data) in enumerate(target_techniques.items()):
        
        # --- Determine the correct output directory for this technique ---
        matrix_type = tech_data.get('matrix')
        if matrix_type and matrix_type in output_dirs_map:
            output_dir = Path(output_dirs_map[matrix_type])
        else:
            logger.warning(f"No output directory specified for matrix '{matrix_type}'. Using default: '{default_output_dir}'")
            output_dir = default_output_dir

        # --- Extract Technique ID and check if file already exists ---
        try:
            technique_id = full_key.split(" - ")[0].strip()
        except IndexError:
            logger.error(f"Could not parse technique ID from key '{full_key}'. Skipping.")
            continue

        file_path = output_dir / f"{technique_id}.json"
        if file_path.exists():
            logger.warning(f"Plan for {technique_id} already exists at '{file_path}'. Skipping generation.")
            continue
            
        logger.info(f"[{i+1}/{len(target_techniques)}] Generating plan for {full_key}...")
        
        # Ensure the target directory exists before writing
        output_dir.mkdir(parents=True, exist_ok=True)
        
        prompt = (
            f"{BASE_PROMPT}\n\n"
            f"Technique: {full_key}\n\n"
            f"Matrix: MITRE ATT&CK for {tech_data['matrix'].upper()}\n\n"
            f"Tactic(s): {tech_data['tactic']}\n\n"
            f"Description: {tech_data['description']}\n\n"
            f"Detection: {tech_data['detection']}"
        )
        
        # This is where you would call your actual AI model
        try:
            plan_blob = generate_analytic_plan(prompt, model, ask_sage_client=ask_sage_client)
        except Exception as e:
            logger.error(f"Failed to generate plan for {full_key}: {str(e)}")
            continue

        # --- Extract JSON from the raw text blob ---
        json_str = None
        match = re.search(r"```(?:json)?\s*([\s\S]*?)\s*```", plan_blob)
        if match:
            json_str = match.group(1).strip()
        else:
            start_index = -1
            first_bracket = plan_blob.find('[')
            first_curly = plan_blob.find('{')
            
            if first_bracket != -1 and first_curly != -1:
                start_index = min(first_bracket, first_curly)
            elif first_bracket != -1:
                start_index = first_bracket
            else:
                start_index = first_curly

            if start_index != -1:
                end_index = max(plan_blob.rfind(']'), plan_blob.rfind('}'))
                if end_index > start_index:
                    json_str = plan_blob[start_index : end_index + 1]

        if not json_str:
            logger.error(f"Could not find a valid JSON object in the response for {full_key}. Skipping.")
            continue

        # --- Parse, add metadata, and save the file ---
        try:
            plan_data = json.loads(json_str)
            if isinstance(plan_data, list):
                current_date_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
                for ir_object in plan_data:
                    ir_object["version"] = "1.0"
                    ir_object["date_created"] = current_date_str
                    ir_object["last_updated"] = current_date_str
                    ir_object["contributors"] = ["Zachary Szewczyk"]

                try:
                    with open(file_path, "w", encoding="utf-8") as f:
                        json.dump(plan_data, f, indent=2)
                    logger.info(f"Successfully saved plan for {technique_id} to '{file_path}'.")
                except IOError as e:
                    logger.error(f"Failed to write file for {technique_id}: {e}")
            else:
                logger.warning(f"Expected a list from AI for {full_key}, but got {type(plan_data)}. Skipping file write.")

        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse extracted JSON for {full_key}. Error: {e}. Skipping file write.")
            
    logger.info("Script finished successfully.")

if __name__ == "__main__":
    main()


================================================
FILE: refiner.py
================================================
#!/usr/bin/env python3
import logging
import sys
from pathlib import Path

# Add project root to path to allow src imports
sys.path.insert(0, str(Path(__file__).resolve().parent))

from src.colorlog import make_console_handler

# Module-level logger
logger = logging.getLogger(__name__)

logger.info("Importing built-in modules.")
import json
from datetime import datetime, timezone
import os
import re
import requests
import urllib3
import time
from typing import Any, Dict, List, Tuple, Optional
from concurrent.futures import ProcessPoolExecutor, as_completed
import multiprocessing

logger.info("Importing installed modules")
from asksageclient import AskSageClient
from google import genai
from google.genai import types
from google.genai import errors
import yaml

logger.info("Importing project-specific modules.")
from src.attack_retriever import build_technique_dictionary

BASE_PROMPT = """
I need you to refine an existing analytic plan. The analytic plan consists of the following components:

1.  Information Requirements (IRs): These identify the information that the commander considers most important. For example, 'Has the adversary gained initial access? (TA0001 - Initial Access)' (PIR) or 'What data is available for threat detection and modeling? (D3-D - Detect)' (FFIR). Note that PIRs are tagged with a MITRE ATT&CK tactic, and FFIRs are tagged with a MITRE D3FEND tactic. We call these "CCIR" generally.

2.  Indicators: These are positive or negative evidence of threat activity pertaining to one or more information requirements. They are observable clues related to a specific information requirement. For the IR above, indicators might include:
    * T1078 - Valid Accounts
    For the FFIR above, indicators might include:
    * D3-NTA - Network Traffic Analysis
    Note that indicators for PIRs are tagged with MITRE ATT&CK techniques, and FFIRs are tagged with MITRE D3FEND techniques.

3.  Evidence: This is the concrete information that supports or refutes an indicator. It provides the 'proof' and can vary in complexity. For the indicator 'T1078 - Valid Accounts', evidence could be 'A valid account login exhibits multiple anomalous characteristics simultaneously, such as originating from a rare geographic location, using an unfamiliar device, and occurring outside of normal working hours.' For the indicator 'D3-NTA', evidence could be 'Logs generated from network activity such as network flow metadata and network traffic content'.

4.  Data: This describes the precise data necessary to identify evidence. Specificity here is key (e.g., Zeek Conn logs, Sysmon event ID 4624, Active Directory security logs). For the evidence, focus your plan on the following data sources: network logs, specifically Zeek logs; host logs, specifically Windows Event IDs. Write only the data name. For example, Windows Event ID 4688, Zeek conn.log

5. Data Source (Platform): Use a dummy value here of "TBD".

6. Named Areas of Interest (NAIs): These are areas where data that will satisfy a specific information requirement can be collected. For the IR above, NAIs could include 'Our organization's internet gateway', 'Authentication servers', 'Servers hosting sensitive data', and 'Endpoint devices of high-value targets'.

7.  Actions: These are high-level instructions that guide the analysts' search for evidence. For the evidence associated with the indicator 'T1078 - Valid Accounts' and the associated PIR 'Has the adversary gained initial access? (TA0001 - Initial Access)', an action could be: 'For each successful login (Windows Event ID 4624), enrich with geolocation data from the source IP (Zeek conn.log). Establish a multi-faceted baseline for each user account including typical login times, source countries/ISPs, and devices used. Use a scoring system where deviations from the baseline (e.g., rare country, login at 3 AM, new device) add to a risk score. A high cumulative risk score, identified using statistical models or descriptive statistics (e.g., multiple metrics exceeding 2 standard deviations from the norm), indicates a likely compromised account.' For the evidence associated with the indicator 'D3-NTA' and the associated FFIR 'What data is available for threat detection and modeling? (D3-D - Detect)', an action could be: 'Inventory available network log sources (e.g., networking appliances, Zeek, PCAP). For each source, perform a time series analysis to visualize data volume over at least the last 30 days to identify collection gaps or anomalies. Use descriptive statistics to summarize key fields like protocol distribution in Zeek conn.log and the frequency of top requested domains in dns.log to establish a cursory understanding of network activity. Compare across data sources to validate collection consistency and identify individual sensor blind spots.' Focus mostly on simple detections, but also look for opportunities to incorporate basic data science techniques here, such as percentiles, entropy scores, statistics, and other, similar methods. Generally speaking, you should have one symbolic logic (such as an IOC match), one statistical method (such as a percentile threshold), and machine learning application (such as classification or time series analysis) action.

Based on these definitions, please refine an existing analytic plan in plain, unstyled text in the JSON format below. Provide specific and relevant examples for each component within this format.

[
  {
    "information_requirement": "Insert CCIR here",
    "tactic_id": "Insert MITRE ATT&CK or MITRE D3FEND tactic T-code here",
    "tactic_name": "Insert the tactic name here",
    "indicators": [
      {
        "technique_id": "Insert MITRE technique T-code here",
        "name": "Insert the technique name here",
        "evidence": [
          {
            "description": "Describe the evidence here",
            "data_sources": [
              "First data source",
              "Second data source"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Insert site-specific NAI here",
            "action": [
              "Describe the symbolic logic action here, such as an IOC match",
              "Describe one statistical acton, such as a percentile threshold",
              "Describe one machine learning action, such as classification, regression, time series analysis, clustering, etc."
            ]
          }
        ]
      }
    ]
   }
]

Based on that format, improve an analytic plan for the following technique. If you are given an offensive technique, a T-code, then only generate PIRs; if you are given a defensive technique, a D-code, then only generate FFIRs. Pay extremely close attention to the type of matrix the technique references (enterprise, ICS, mobile), which will have a significant impact on how you build this plan.
"""

# ---------------------------
# Utilities
# ---------------------------

def setup_logging() -> tuple[str, Path]:
    run_ts = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
    logs_dir = Path("logs")
    logs_dir.mkdir(parents=True, exist_ok=True)
    log_path = logs_dir / f"refiner_{run_ts}.log"

    fmt = "%(asctime)s %(levelname)-8s %(name)s :: %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"

    root = logging.getLogger()
    root.setLevel(logging.INFO)
    root.handlers.clear()
    root.addHandler(make_console_handler(fmt, datefmt))

    fh = logging.FileHandler(log_path, encoding="utf-8")
    fh.setFormatter(logging.Formatter(fmt=fmt, datefmt=datefmt))
    root.addHandler(fh)
    return run_ts, log_path

def load_config(path: Path) -> dict:
    if not path.exists():
        logger.critical(f"Configuration file not found at '{path}'. Exiting.")
        raise SystemExit(1)
    with open(path, "r", encoding="utf-8") as f:
        try:
            config = yaml.safe_load(f)
            logger.info(f"Successfully loaded configuration from '{path}'.")
            return config
        except yaml.YAMLError as e:
            logger.critical(f"Error parsing YAML configuration: {e}")
            raise SystemExit(1)

def parse_date(date_str: str) -> Optional[datetime]:
    if not date_str:
        return None
    try:
        return datetime.strptime(date_str, "%Y-%m-%d").replace(tzinfo=timezone.utc)
    except Exception:
        return None

def semver_tuple(v: str) -> Tuple[int, ...]:
    if not isinstance(v, str):
        return (0, )
    parts = v.strip().split(".")
    out = []
    for p in parts[:3]:
        try:
            out.append(int(p))
        except ValueError:
            try:
                fp = float(p)
                out.append(int(round(fp)))
            except Exception:
                out.append(0)
    return tuple(out) if out else (0, )

def compare_versions(a: str, b: str) -> int:
    ta, tb = semver_tuple(a), semver_tuple(b)
    la, lb = len(ta), len(tb)
    if la < lb:
        ta = ta + (0,) * (lb - la)
    elif lb < la:
        tb = tb + (0,) * (la - lb)
    return (ta > tb) - (ta < tb)

def increment_version(v: str) -> str:
    if not isinstance(v, str) or not v:
        return "1.1"
    parts = v.split(".")
    nums = [int(p) if p.isdigit() else 0 for p in parts]
    if len(nums) == 1:
        return f"{nums[0] + 1}"
    if len(nums) == 2:
        return f"{nums[0]}.{nums[1] + 1}"
    nums[2] += 1
    return ".".join(str(x) for x in nums[:3])

def extract_json(blob: str) -> Optional[str]:
    s = blob.strip()
    if s.startswith("[") or s.startswith("{"):
        return s
    m = re.search(r"```(?:json)?\s*([\s\S]*?)\s*```", s)
    if m:
        return m.group(1).strip()
    first_bracket = min((i for i in [s.find("["), s.find("{")] if i != -1), default=-1)
    if first_bracket != -1:
        last_square = s.rfind("]")
        last_curly = s.rfind("}")
        end_index = max(last_square, last_curly)
        if end_index > first_bracket:
            return s[first_bracket:end_index + 1]
    return None

def compute_plan_metadata(plan: List[dict]) -> Tuple[Optional[str], Optional[str]]:
    max_dt = None
    max_ver = None
    for ir in plan:
        lu = parse_date(ir.get("last_updated", ""))
        if lu and (max_dt is None or lu > max_dt):
            max_dt = lu
        ver = ir.get("version", "")
        if ver and (max_ver is None or compare_versions(ver, max_ver) > 0):
            max_ver = ver
    dt_iso = max_dt.strftime("%Y-%m-%d") if max_dt else None
    return dt_iso, max_ver

def _core_tag() -> str:
    """
    Returns a string indicating which CPU core (if detectable) and process is running this code.
    Examples:
      'core=11 pid=12345'
      'pid=12345 proc=ForkProcess-1'
    """
    pid = os.getpid()
    # Try Linux-specific sched_getcpu()
    core = None
    try:
        core = os.sched_getcpu()  # type: ignore[attr-defined]
    except Exception:
        core = None
    if core is not None:
        return f"core={core} pid={pid}"
    # Fallback to process name
    try:
        proc_name = multiprocessing.current_process().name
        return f"pid={pid} proc={proc_name}"
    except Exception:
        return f"pid={pid}"

def refine_with_llm(prompt: str, model: str, ask_sage_client: AskSageClient,
                    max_retries: int = 3, retry_delay: int = 1) -> Dict[str, str]:
    """
    Returns a dict: {"text": <response>, "endpoint": "gemini"|"asksage", "model_used": <model_name>}
    Adds detailed logging: pre-attempt, fallback, and completion indicators, with core/worker tag.
    """
    if not prompt or not isinstance(prompt, str):
        raise ValueError("Prompt must be a non-empty string")
    if not model or not isinstance(model, str):
        raise ValueError("Model must be a non-empty string")

    tag = _core_tag()

    # Primary: Gemini
    for attempt in range(max_retries):
        try:
            api_key = os.environ.get("GEMINI_API_KEY")
            if not api_key:
                logger.warning(f"[LLM] [{tag}] GEMINI_API_KEY not found in environment for Gemini. Moving to fallback.")
                raise ValueError("GEMINI_API_KEY environment variable is not set")

            logger.info(f"[LLM] [{tag}] Attempt {attempt+1}/{max_retries}: endpoint=gemini model={model}")
            client = genai.Client(api_key=api_key)
            response = client.models.generate_content(
                model=model,
                contents=[types.Content(role="user", parts=[types.Part.from_text(text=prompt)])],
                config=types.GenerateContentConfig(temperature=0.7),
            )

            if response and hasattr(response, "text") and response.text:
                logger.info(f"[LLM] [{tag}] Gemini success model={model}")
                return {"text": response.text, "endpoint": "gemini", "model_used": model}

            logger.warning(f"[LLM] [{tag}] Gemini returned empty/invalid text; considering fallback")
            raise ValueError("Invalid response format from Gemini")

        except (errors.ClientError, errors.APIError, ValueError) as e:
            error_message = str(e)
            error_code = getattr(e, 'status_code', None) if hasattr(e, 'status_code') else None
            # If clearly rate/quota limited, break to fallback
            if (error_code == 429 or
                "429" in error_message or
                "RESOURCE_EXHAUSTED" in error_message or
                "quota" in error_message.lower() or
                "rate" in error_message.lower()):
                logger.error(f"[LLM] [{tag}] Gemini rate/quota issue: {error_message}. Falling back to AskSage.")
                break
            # else backoff
            retry_after = retry_delay * (2 ** attempt)
            m = re.search(r'retry in (\d+(?:\.\d+)?)', error_message.lower())
            if m:
                try:
                    retry_after = min(float(m.group(1)) + 1, 120)
                except Exception:
                    pass
            if attempt < max_retries - 1:
                logger.warning(f"[LLM] [{tag}] Gemini error: {error_message}. Retrying in {retry_after:.1f}s ...")
                time.sleep(retry_after)
                continue
            logger.warning(f"[LLM] [{tag}] Gemini attempts exhausted. Falling back to AskSage.")
            break

    # Fallback: AskSage (Gemini-through-AskSage model)
    fallback_model = "google-gemini-2.5-pro"
    logger.info(f"[LLM] [{tag}] Using endpoint=AskSage model={fallback_model}")
    response = ask_sage_client.query(
        prompt,
        persona="default",
        dataset="none",
        limit_references=0,
        temperature=0.7,
        live=0,
        model=fallback_model,
        system_prompt=None,
    )
    if not response or not isinstance(response, dict) or not response.get("message"):
        raise Exception(f"[LLM] [{tag}] Both primary and backup models failed or returned empty content.")
    logger.info(f"[LLM] [{tag}] AskSage success model={fallback_model}")
    return {"text": response["message"], "endpoint": "asksage", "model_used": fallback_model}

# ---------------------------
# Worker (picklable)
# ---------------------------

def _worker_refine_one(job: Dict[str, Any]) -> Dict[str, Any]:
    """
    Worker process function: refine a single technique plan. Returns a summary dict.
    Logs:
      - Skip reasons
      - Pre-processing endpoint/model (with core/worker tag)
      - Post-processing completion with endpoint/model (with core/worker tag)
    """
    # Light, per-process prep
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    # Monkey-patch requests verify (in worker context)
    old_request = requests.Session.request
    def new_request(self, method, url, **kwargs):
        kwargs['verify'] = False
        return old_request(self, method, url, **kwargs)
    requests.Session.request = new_request

    # Ensure GEMINI key is present in worker
    gemini_api_key = job.get("gemini_api_key")
    if gemini_api_key:
        os.environ["GEMINI_API_KEY"] = gemini_api_key

    # Build AskSage client in worker
    ask_sage_client = AskSageClient(
        job["sage_email"],
        job["sage_api_key"],
        user_base_url="https://api.genai.army.mil/user/",
        server_base_url="https://api.genai.army.mil/server/",
    )

    tag = _core_tag()

    try:
        full_key: str = job["full_key"]
        tech_data: Dict[str, Any] = job["tech_data"]

        matrix_type = tech_data.get("matrix")
        output_dirs_map = job["output_dirs_map"]
        default_output_dir = Path(job["default_output_dir"])
        if matrix_type and matrix_type in output_dirs_map:
            output_dir = Path(output_dirs_map[matrix_type])
        else:
            output_dir = default_output_dir

        # Technique ID / file path
        try:
            technique_id = full_key.split(" - ")[0].strip()
        except Exception:
            logger.warning(f"[{full_key}] [{tag}] SKIP: unable to parse technique_id from key.")
            return {"technique": full_key, "status": "fail", "reason": "parse_id"}

        file_path = output_dir / f"{technique_id}.json"
        if not file_path.exists():
            logger.info(f"[{technique_id}] [{tag}] SKIP: plan file missing at '{file_path}'.")
            return {"technique": technique_id, "status": "missing"}

        # Load existing plan
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                existing_plan = json.load(f)
            if not isinstance(existing_plan, list):
                logger.info(f"[{technique_id}] [{tag}] SKIP: plan JSON is not a list.")
                return {"technique": technique_id, "status": "skip", "reason": "not_list"}
        except Exception as e:
            logger.info(f"[{technique_id}] [{tag}] SKIP: read/parse error: {e}")
            return {"technique": technique_id, "status": "skip", "reason": f"read_error: {e}"}

        # Skip rules
        plan_last_updated_max, plan_version_max = compute_plan_metadata(existing_plan)

        if job.get("skip_if_updated_after"):
            cutoff_dt = parse_date(job["skip_if_updated_after"])
            plan_dt = parse_date(plan_last_updated_max) if plan_last_updated_max else None
            if cutoff_dt and plan_dt and plan_dt > cutoff_dt:
                logger.info(f"[{technique_id}] [{tag}] SKIP: last_updated {plan_last_updated_max} > cutoff {job['skip_if_updated_after']}.")
                return {"technique": technique_id, "status": "skip", "reason": "updated_after_cutoff"}

        if job.get("skip_if_version_gt") and plan_version_max:
            if compare_versions(plan_version_max, str(job["skip_if_version_gt"])) > 0:
                logger.info(f"[{technique_id}] [{tag}] SKIP: version {plan_version_max} > {job['skip_if_version_gt']}.")
                return {"technique": technique_id, "status": "skip", "reason": "version_gt"}

        # Build prompt
        refine_guidance = (job.get("refine_guidance") or "").strip()
        matrix_banner = f"Matrix: MITRE ATT&CK for {tech_data.get('matrix','').upper()}"
        refine_block = (
            f"{BASE_PROMPT}\n\n"
            f"You are given an EXISTING analytic plan to refine. Keep the JSON schema identical and retain "
            f"the top-level array-of-objects structure. Improve clarity, specificity, and operational utility, "
            f"but do not remove required fields.\n\n"
            f"Technique: {full_key}\n"
            f"{matrix_banner}\n"
            f"Tactic(s): {tech_data.get('tactic','')}\n\n"
            f"Description: {tech_data.get('description','')}\n\n"
            f"Detection: {tech_data.get('detection','')}\n\n"
            f"Existing plan JSON:\n```json\n{json.dumps(existing_plan, indent=2)}\n```\n\n"
        )
        if refine_guidance:
            refine_block += f"REFINEMENT GUIDANCE (apply carefully):\n{refine_guidance}\n\n"
        refine_block += "Return ONLY the refined JSON array (no commentary, no markdown, no code fences)."

        # Pre-processing log: we intend Gemini; any fallback is logged by the LLM runner and echoed here
        logger.info(f"[{technique_id}] [{tag}] START: about to process with endpoint=gemini model={job['model']}")

        # LLM call
        llm_res = refine_with_llm(
            prompt=refine_block,
            model=job["model"],
            ask_sage_client=ask_sage_client,
            max_retries=job["max_retries"],
            retry_delay=job["retry_delay"],
        )

        # If fallback occurred, make it explicit at technique level too
        if llm_res["endpoint"] != "gemini":
            logger.info(f"[{technique_id}] [{tag}] INFO: fell back to endpoint={llm_res['endpoint']} model={llm_res['model_used']}")

        # Extract & parse
        json_str = extract_json(llm_res["text"])
        if not json_str:
            logger.error(f"[{technique_id}] [{tag}] FAIL: could not extract JSON from model output.")
            return {"technique": technique_id, "status": "fail", "reason": "no_json"}

        try:
            refined_plan = json.loads(json_str)
            if not isinstance(refined_plan, list):
                logger.error(f"[{technique_id}] [{tag}] FAIL: refined JSON is not a list.")
                return {"technique": technique_id, "status": "fail", "reason": "not_list_refined"}
        except json.JSONDecodeError as e:
            logger.error(f"[{technique_id}] [{tag}] FAIL: JSON decode error: {e}")
            return {"technique": technique_id, "status": "fail", "reason": f"json_error: {e}"}

        # Update metadata
        today_iso = job["today_iso"]
        _, base_version_max = compute_plan_metadata(existing_plan)
        new_version = increment_version(base_version_max or "1.0")

        existing_dates = [ir.get("date_created") for ir in existing_plan if ir.get("date_created")]
        min_created = min(existing_dates) if existing_dates else None
        contrib_union = []
        seen = set()
        for ir in existing_plan:
            for c in (ir.get("contributors") or []):
                if c not in seen:
                    seen.add(c)
                    contrib_union.append(c)
        if not contrib_union:
            contrib_union = ["Zachary Szewczyk"]

        for ir in refined_plan:
            ir["last_updated"] = today_iso
            ir["version"] = new_version
            if "date_created" not in ir and min_created:
                ir["date_created"] = min_created
            if "contributors" not in ir or not isinstance(ir["contributors"], list) or not ir["contributors"]:
                ir["contributors"] = contrib_union
            else:
                existing_c = set(ir["contributors"])
                for c in contrib_union:
                    if c not in existing_c:
                        ir["contributors"].append(c)

        # Backup + write
        try:
            output_dir.mkdir(parents=True, exist_ok=True)
            if job["make_backup"]:
                backups_dir = Path(job["backups_dir"])
                backups_dir.mkdir(parents=True, exist_ok=True)
                backup_path = backups_dir / f"{technique_id}_{job['run_ts']}.json"
                with open(backup_path, "w", encoding="utf-8") as bf:
                    json.dump(existing_plan, bf, indent=2)

            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(refined_plan, f, indent=2)
        except Exception as e:
            logger.error(f"[{technique_id}] [{tag}] FAIL: write error: {e}")
            return {"technique": technique_id, "status": "fail", "reason": f"write_error: {e}"}

        logger.info(f"[{technique_id}] [{tag}] DONE: processing complete with endpoint={llm_res['endpoint']} model={llm_res['model_used']}")
        return {"technique": technique_id, "status": "ok", "endpoint": llm_res["endpoint"], "model_used": llm_res["model_used"]}

    except Exception as e:
        logger.error(f"[{job.get('full_key','unknown')}] [{tag}] FAIL: unexpected error: {e}")
        return {"technique": job.get("full_key", "unknown"), "status": "fail", "reason": f"unexpected: {e}"}

# ---------------------------
# Main
# ---------------------------

def main():
    run_ts, log_path = setup_logging()
    logger.info(f"Run initialized at: {run_ts} | Logging to: {log_path}")

    # --- 0. Keys ---
    logger.info("Loading Gemini API key")
    gemini_api_key = None
    try:
        with open(".GEMINI_API_KEY", "r") as fd:
            gemini_api_key = fd.read().strip()
            os.environ["GEMINI_API_KEY"] = gemini_api_key
    except Exception:
        logger.info("Failed to import Gemini API key")

    logger.info("Loading Sage API key")
    try:
        with open("./credentials.json", "r") as file:
            credentials = json.load(file)
            if 'credentials' not in credentials or 'api_key' not in credentials['credentials']:
                logger.error("Missing required keys in the credentials file.")
                raise
        sage_api_key = credentials['credentials']['api_key']
        sage_email = credentials['credentials']['Ask_sage_user_info']['username']
    except FileNotFoundError:
        raise FileNotFoundError("Credentials file not found at ./credentials.json")
    except json.JSONDecodeError:
        raise ValueError("Invalid JSON format in the credentials file: ./credentials.json")

    # --- 1. Config ---
    logger.info("Loading configuration")
    config = load_config(Path("config/refine.yml"))

    output_dirs_map = config.get("output_directories", {})
    default_output_dir = Path(output_dirs_map.get("default", "techniques"))
    matrices = config.get("matrices", ["enterprise"])
    filter_techniques = config.get("techniques", [])
    model = config.get("model", "gemini-2.5-flash")
    refine_guidance = config.get("refine_guidance", "").strip()
    skip_if_updated_after = config.get("skip_if_updated_after")
    skip_if_version_gt = config.get("skip_if_version_gt")
    make_backup = bool(config.get("backup", True))
    max_retries = int(config.get("max_retries", 3))
    retry_delay = int(config.get("retry_delay", 1))
    num_cores = config.get("num_cores", 0)

    if not output_dirs_map:
        logger.critical("Configuration key 'output_directories' is missing or empty. Cannot determine where to save files.")
        raise SystemExit(1)

    # --- 2. Techniques ---
    logger.info("Building technique dictionary")
    technique_dict = build_technique_dictionary(matrices)

    if filter_techniques:
        logger.info(f"Filtering for {len(filter_techniques)} specific techniques from config.")
        wanted = set(filter_techniques)
        target_techniques = {k: v for k, v in technique_dict.items() if v['technique_id'] in wanted}
    else:
        target_techniques = technique_dict

    logger.info(f"Will attempt to refine plans for up to {len(target_techniques)} techniques (existing files only).")

    # --- 3. Prep jobs ---
    today_iso = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    backups_dir = Path("backups") / f"refiner_{run_ts}"

    jobs: List[Dict[str, Any]] = []
    for full_key, tech_data in target_techniques.items():
        jobs.append({
            "full_key": full_key,
            "tech_data": tech_data,
            "output_dirs_map": output_dirs_map,
            "default_output_dir": str(default_output_dir),
            "refine_guidance": refine_guidance,
            "model": model,
            "max_retries": max_retries,
            "retry_delay": retry_delay,
            "skip_if_updated_after": skip_if_updated_after,
            "skip_if_version_gt": skip_if_version_gt,
            "make_backup": make_backup,
            "backups_dir": str(backups_dir),
            "run_ts": run_ts,
            "today_iso": today_iso,
            "sage_email": sage_email,
            "sage_api_key": sage_api_key,
            "gemini_api_key": gemini_api_key,
        })

    # --- 4. Execute (single-core or multi-core) ---
    refined_count = skipped_count = missing_count = failed_count = 0

    # Normalize num_cores
    try:
        if num_cores is None:
            num_workers = 1
        else:
            num_workers = int(num_cores)
    except Exception:
        num_workers = 1

    main_tag = _core_tag()

    if num_workers <= 1:
        logger.info(f"[MAIN {main_tag}] Running in single-core mode.")
        for job in jobs:
            res = _worker_refine_one(job)
            status = res.get("status")
            if status == "ok":
                refined_count += 1
            elif status == "skip":
                skipped_count += 1
            elif status == "missing":
                missing_count += 1
            else:
                failed_count += 1
            # Consolidated per-technique summary line (includes main/core tag for single-core clarity)
            logger.info(f"[MAIN {main_tag}] {res.get('technique')}: {status}" + (f" ({res.get('reason')})" if res.get('reason') else ""))
    else:
        max_cpu = os.cpu_count() or 1
        workers = max(1, min(num_workers, max_cpu))
        logger.info(f"[MAIN {main_tag}] Running in multi-core mode with {workers} workers.")
        with ProcessPoolExecutor(max_workers=workers) as ex:
            future_map = {ex.submit(_worker_refine_one, jb): jb for jb in jobs}
            for fut in as_completed(future_map):
                try:
                    res = fut.result()
                except Exception as e:
                    logger.error(f"[MAIN {main_tag}] Worker crashed: {e}")
                    failed_count += 1
                    continue
                status = res.get("status")
                if status == "ok":
                    refined_count += 1
                elif status == "skip":
                    skipped_count += 1
                elif status == "missing":
                    missing_count += 1
                else:
                    failed_count += 1
                logger.info(f"[MAIN {main_tag}] {res.get('technique')}: {status}" + (f" ({res.get('reason')})" if res.get('reason') else ""))

    logger.info(f"[MAIN {main_tag}] Refinement complete. Refined: {refined_count} | Skipped: {skipped_count} | Missing: {missing_count} | Failed: {failed_count}")
    logger.info("[MAIN] Script finished successfully.")

if __name__ == "__main__":
    main()



================================================
FILE: watson.py
================================================
#!/usr/bin/env python3
import logging
from datetime import datetime, timezone
from pathlib import Path

import pandas as pd
import yaml

# Add project root to path to allow src imports
import sys
sys.path.insert(0, str(Path(__file__).resolve().parent))

# Import local modules
from src.colorlog import make_console_handler
from src.formatting import export_simple_excel, export_with_merged_cells
from src.processing import build_asom, format_asom, renumber_formatted_df

def setup_logging() -> tuple[str, Path]:
    """Initializes console and file logging."""
    run_ts = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
    logs_dir = Path("logs")
    logs_dir.mkdir(parents=True, exist_ok=True)
    log_path = logs_dir / f"{run_ts}.log"

    fmt = "%(asctime)s %(levelname)-8s %(name)s :: %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"

    root = logging.getLogger()
    root.setLevel(logging.INFO)
    root.handlers.clear()

    # Colored console handler
    root.addHandler(make_console_handler(fmt, datefmt))

    # Plain file handler
    fh = logging.FileHandler(log_path, encoding="utf-8")
    fh.setFormatter(logging.Formatter(fmt=fmt, datefmt=datefmt))
    root.addHandler(fh)

    return run_ts, log_path

def load_config(path: Path) -> dict:
    """Loads and validates the YAML configuration file."""
    logger = logging.getLogger("config")
    if not path.exists():
        logger.critical(f"Configuration file not found at '{path}'. Exiting.")
        raise SystemExit(1)
    
    with open(path, "r", encoding="utf-8") as f:
        try:
            config = yaml.safe_load(f)
            logger.info(f"Successfully loaded configuration from '{path}'.")
            return config
        except yaml.YAMLError as e:
            logger.critical(f"Error parsing YAML configuration: {e}")
            raise SystemExit(1)

def main():
    """Main script execution."""
    run_ts, log_path = setup_logging()
    logger = logging.getLogger("main")
    logger.info(f"Run initialized at: {run_ts} | Logging to: {log_path}")

    # --- 1. Load Configuration ---
    config = load_config(Path("config/asom.yml"))
    detect_chain = config.get("detect_chain", {})
    attack_chain = config.get("attack_chain", {})
    plan_dirs_config = config.get("analytic_plan_dirs", {})
    plan_dirs_list = [Path(p) for p in plan_dirs_config.values() if p]
    output_dir = Path(config.get("output_dir", "."))
    output_basename = config.get("output_basename", "asom_report")
    column_widths = config.get("column_widths_pixels", {})
    output_columns = config.get("output_columns", [])
    
    output_dir.mkdir(exist_ok=True, parents=True)

    if not plan_dirs_list:
        logger.critical("Configuration key 'analytic_plan_dirs' is empty or not found. No directories to process.")
        return

    if not detect_chain and not attack_chain:
        logger.warning("Both 'detect_chain' and 'attack_chain' are empty in the config. No data to process.")
        logger.info("Script finished.")
        return

    # --- 2. Build Raw ASOM Data ---
    logger.info(f"Building ASOM from {len(plan_dirs_list)} specified analytic plan directories...")
    raw_asom = build_asom(
        detect_chain=detect_chain,
        attack_chain=attack_chain,
        directories=plan_dirs_list
    )
    if not raw_asom:
        logger.warning("ASOM generation resulted in no data. Check chains and input files.")
        logger.info("Script finished.")
        return
    logger.info(f"Successfully built raw ASOM with {len(raw_asom)} information requirements.")

    # --- 3. Format, Renumber, and Filter DataFrame ---
    logger.info("Formatting ASOM data into a DataFrame...")
    formatted_df = format_asom(raw_asom)
    logger.info("Re-sorting and re-numbering DataFrame indices...")
    final_df = renumber_formatted_df(formatted_df)
    
    # Keep an unfiltered copy for merged presentation
    final_df_for_merge = final_df.copy()
    
    # Optional column filtering for the simple sheet only
    if output_columns:
        valid_columns = [col for col in output_columns if col in final_df.columns]
        missing_columns = set(output_columns) - set(valid_columns)
        if missing_columns:
            logger.warning(
                f"The following columns from 'output_columns' in config were not found and will be ignored: {list(missing_columns)}"
            )
        if valid_columns:
            logger.info(f"Filtering output to {len(valid_columns)} columns as specified in config.")
            final_df = final_df[valid_columns]
        else:
            logger.warning("'output_columns' in config resulted in an empty list of valid columns. All columns will be exported.")

    logger.info(f"Processing complete. Final DataFrame has {len(final_df)} rows and {len(final_df.columns)} columns.")

    # --- 4. Export to Excel ---
    ts_suffix = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Simple Excel export (without merged cells, for easier data parsing)
    simple_excel_path = output_dir / f"{output_basename}_{ts_suffix}.xlsx"
    logger.info(f"Exporting standard Excel file to: {simple_excel_path}")
    export_simple_excel(final_df, simple_excel_path, column_widths_pixels=column_widths)

    # Hierarchical/Merged Excel export (for presentation)
    hier_excel_path = output_dir / f"{output_basename}_merged_{ts_suffix}.xlsx"
    logger.info(f"Exporting Excel file with merged cells to: {hier_excel_path}")
    export_with_merged_cells(final_df_for_merge, hier_excel_path, column_widths_pixels=column_widths)
    
    logger.info("Script finished successfully.")

if __name__ == "__main__":
    main()


================================================
FILE: config/asom.yml
================================================
# config/asom.yml
# Configuration for the Analytic Scheme of Maneuver (ASOM) generator.

# --- Input and Output Paths ---
# Directories containing the analytic plan JSON files, categorized by framework.
# The script will search for .json files in each of these directories.
analytic_plan_dirs:
  enterprise: "techniques/attack/enterprise"
  ics: "techniques/attack/ics"
  mobile: "techniques/attack/mobile"
  d3fend: "techniques/d3fend"

# Directory where the generated Excel reports will be saved.
output_dir: "./"

# --- Filename Settings ---
# Basename for the output files. A timestamp will be appended.
output_basename: "asom_test"

# --- Detect Chain Definition ---
# Defines the "Detect" phase of the operation. These are processed first.
# Tactic format: "TACTIC_ID - Tactic Name"
# Technique format: "TECHNIQUE_ID - Technique Name"
detect_chain:
  "D3-D - Detect":
    - "D3-NTA - Network Traffic Analysis"
    - "D3-PM - Platform Monitoring"
  "D3-AI - Asset Inventory":
    - "D3-HCI - Hardware Component Inventory"
    - "D3-NNI - Network Node Inventory"
    - "D3-SWI - Software Inventory"
    - "D3-AVE - Asset Vulnerability Enumeration"
    - "D3-DI - Data Inventory"

# --- Attack Chain Definition ---
# Defines the MITRE ATT&CK phases of the operation. Processed after the detect chain.
attack_chain:
  "TA0001 - Initial Access":
    - "T1133 - External Remote Services"
  "TA0003 - Persistence":
    - "T1078 - Valid Accounts"
    - "T1053 - Scheduled Task/Job"
  "TA0008 - Lateral Movement":
    - "T1021 - Remote Services"
    - "T1570 - Lateral Tool Transfer"
  "TA0011 - Command and Control":
    - "T1071 - Application Layer Protocol"
  "TA0010 - Exfiltration":
    - "T1041 - Exfiltration Over C2 Channel"
    - "T1048 - Exfiltration Over Alternative Protocol"
    - "T1567 - Exfiltration Over Web Service"

# --- Output Columns ---
# Specify the exact columns to include in the final Excel reports.
# The order of columns in this list will be preserved in the output.
# If this list is empty or commented out, all columns will be included.
output_columns:
  - "CCIR Index"
  - "CCIR"
  # - "Tactic ID"
  # - "Tactic Name"
  - "Indicator Index"
  - "Indicator"
  # - "Technique ID"
  # - "Technique Name"
  - "Evidence Index"
  - "Evidence Description"
  - "Data Sources"
  # - "Data Platforms"
  - "NAI"
  - "Action"

# --- Formatting Settings ---
# Set approximate column widths in pixels for the Excel export.
# This is an approximation, as Excel's units are based on character width, not pixels.
# Columns not listed here will be auto-sized.
column_widths_pixels:
  "CCIR Index": 50
  "CCIR": 200
  "Tactic ID": 50
  "Tactic Name": 100
  "Indicator Index": 60
  "Indicator": 150
  "Technique ID": 75
  "Technique Name": 200
  "Evidence Index": 65
  "Evidence Description": 250
  "Data Sources": 200
  "Data Platforms": 150
  "NAI": 100
  "Action": 700


================================================
FILE: config/generator.yml
================================================
# config/generator.yml

# --- Output Settings ---
# Directories where the generated analytic plan JSON files will be saved.
# The script will use the key that matches the technique's matrix
# (e.g., 'enterprise', 'ics', 'mobile') to determine the save location.
output_directories:
  enterprise: "techniques/attack/enterprise"
  ics: "techniques/attack/ics"
  mobile: "techniques/attack/mobile"
  default: "techniques/misc"


# --- ATT&CK Matrix Selection ---
# List of ATT&CK matrices to download and process.
# Valid options: "enterprise", "mobile", "ics"
matrices:
  # - "enterprise"
  - "mobile"
  # - "ics"

# --- Technique Filtering (Optional) ---
# A list of specific technique IDs (e.g., "T1548", "T1078.001") to generate plans for.
# If the list is empty or commented out, the script will generate plans for ALL techniques
# found in the selected matrices.
techniques:
  # - "T0817"
  # - "T0846"
  # - "T0882"

model: "gemini-2.5-pro"


================================================
FILE: config/refine.yml
================================================
# Output directories for each matrix (align these with your existing generator.yml)
output_directories:
  default: techniques
  enterprise: techniques/attack/enterprise
  ics: techniques/attack/ics
  mobile: techniques/attack/mobile

# Which matrices to consider when resolving technique metadata via attack_retriever
matrices:
  - enterprise
  # - ics
  # - mobile

# Optional: restrict to these technique IDs only (e.g., T1078, T1059, D3-NTA). Leave empty to process all found.
techniques:
  # - T0800
  # - T1078
  # - T1596

# Primary model (Gemini) used for refinement
model: gemini-2.5-pro

# Guidance appended to the prompt that the model MUST apply during refinement.
refine_guidance: |
  * Improve evidence descriptions to be measurable and testable; avoid vague phrasing. This is the concrete information that supports or refutes an indicator.
  * Ensure data sources list precise artifacts (e.g., "Windows Event ID 4624", "Zeek conn.log", "Zeek dns.log"). Focus on Windows and Zeek logging where possible, but you may also account for other normal logging sources.
  * When developing actions, include at least three concrete detection methods that include, at a minimum, one symbolic logic (such as an IOC match), one statistical method (such as a percentile threshold), and machine learning application (such as classification or time series analysis) as distinct list elements in the JSON structure.
  * Ensure every action is executable by a SOC analyst using common tools (SIEM/SQL/Zeek), stated as logical, stepwise imperatives.
  * Add NAIs that reflect where the data actually resides for this technique/tactic across the selected matrix (enterprise/ICS/mobile), with a typical enterprise network in mind.
  * Do not remove required fields; preserve the top-level array-of-objects JSON schema.
  * Generally, do not remove information from the existing plan, just add to and improve it.
  * Do not use any styling such as bold or italics in your plan.

# Skip rules (optional)
skip_if_updated_after: null   # e.g., "2025-09-01" or null to disable
skip_if_version_gt: 2.2      # e.g., "1.2" or null to disable

# File safety
backup: true

# LLM call behavior
max_retries: 3
retry_delay: 1

# Parallelism:
# - Set to 0, 1, or leave null to run single-core.
# - Set to 2 or more to enable multi-core; will cap at machine CPU count.
num_cores: 8


================================================
FILE: src/attack_retriever.py
================================================
import json
import logging
import os
from functools import lru_cache

import requests
from mitreattack.stix20 import MitreAttackData

logger = logging.getLogger(__name__)

MATRIX_URLS = {
    "enterprise": "https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json",
    "mobile": "https://raw.githubusercontent.com/mitre/cti/master/mobile-attack/mobile-attack.json",
    "ics": "https://raw.githubusercontent.com/mitre/cti/master/ics-attack/ics-attack.json",
}

def _download_matrix(matrix_name: str, filename: str) -> bool:
    """Downloads and saves a MITRE ATT&CK matrix if it doesn't exist locally."""
    if os.path.exists(filename):
        logger.info(f"Using cached version of '{matrix_name}' matrix from '{filename}'.")
        return True

    url = MATRIX_URLS.get(matrix_name)
    if not url:
        logger.error(f"Invalid matrix name '{matrix_name}'. No URL found.")
        return False

    logger.info(f"Downloading '{matrix_name}' matrix from {url}...")
    try:
        response = requests.get(url, timeout=60)
        response.raise_for_status()
        with open(filename, "w", encoding='utf-8') as f:
            json.dump(response.json(), f)
        logger.info(f"Successfully saved '{matrix_name}' matrix to '{filename}'.")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"Error downloading ATT&CK data for '{matrix_name}': {e}")
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"Error processing or saving data for '{matrix_name}': {e}")
    
    return False

@lru_cache(maxsize=None)
def _get_mitre_attack_data(matrix_name: str) -> MitreAttackData | None:
    """Initializes and caches a MitreAttackData object for a given matrix."""
    filename = f"{matrix_name}-attack.json"
    if _download_matrix(matrix_name, filename):
        try:
            return MitreAttackData(filename)
        except Exception as e:
            logger.error(f"Error initializing MitreAttackData from '{filename}': {e}")
    return None

def _extract_attack_id_from_stix(stix_obj):
    """Extracts the MITRE ATT&CK ID (e.g., T1548) from a STIX object."""
    for ref in stix_obj.get("external_references", []):
        if ref.get("source_name") == "mitre-attack":
            return ref.get("external_id")
    return None

def build_technique_dictionary(matrices: list[str]) -> dict:
    """
    Builds a comprehensive dictionary of techniques from the specified ATT&CK matrices.
    """
    technique_dict = {}
    
    for matrix_name in matrices:
        logger.info(f"Processing matrix: {matrix_name}")
        mad = _get_mitre_attack_data(matrix_name)
        if not mad:
            logger.warning(f"Skipping matrix '{matrix_name}' due to download/initialization failure.")
            continue

        tactic_name_to_id = {t.name.lower(): _extract_attack_id_from_stix(t) for t in mad.get_tactics()}
        all_techniques = mad.get_techniques(remove_revoked_deprecated=True) + \
                         mad.get_subtechniques(remove_revoked_deprecated=True)

        for tech in all_techniques:
            tid = _extract_attack_id_from_stix(tech)
            if not tid:
                continue

            name = tech.get("name", "").strip().replace("/", "-")
            full_key = f"{tid} - {name}"
            
            # Avoid overwriting if a technique (e.g., from enterprise) is already present
            if full_key in technique_dict:
                continue

            tactic_names = []
            for phase in tech.get("kill_chain_phases", []):
                # Ensure the phase belongs to a mitre-attack kill chain for the correct matrix
                if phase.get("kill_chain_name") in (f"mitre-{matrix_name}-attack", "mitre-attack"):
                    phase_name_lookup = phase.get("phase_name", "").lower().replace("-", " ")
                    tactic_id = tactic_name_to_id.get(phase_name_lookup)
                    if tactic_id:
                        tactic_display_name = phase_name_lookup.title()
                        tactic_names.append(f"{tactic_id} - {tactic_display_name}")
            
            technique_dict[full_key] = {
                "technique_id": tid,
                "name": name,
                "matrix": matrix_name,
                "tactic": ", ".join(sorted(set(tactic_names))),
                "description": tech.get("description", "").strip(),
                "detection": tech.get("x_mitre_detection", "").strip(),
            }

    logger.info(f"Built dictionary with {len(technique_dict)} unique techniques across {len(matrices)} matrices.")
    return technique_dict


================================================
FILE: src/colorlog.py
================================================
# src/colorlog.py
from __future__ import annotations
import logging
import os
import sys
from typing import Dict, Any, Optional

# Optional: enable ANSI colors on Windows if colorama is present.
try:
    import colorama  # type: ignore
    colorama.just_fix_windows_console()
except Exception:
    pass

ANSI_CODES = {
    "reset": "\x1b[0m",
    "bold": "\x1b[1m",
    "dim": "\x1b[2m",
    "underline": "\x1b[4m",
    "black": "\x1b[30m",
    "red": "\x1b[31m",
    "green": "\x1b[32m",
    "yellow": "\x1b[33m",
    "blue": "\x1b[34m",
    "magenta": "\x1b[35m",
    "cyan": "\x1b[36m",
    "white": "\x1b[37m",
    "bg_black": "\x1b[40m",
    "bg_red": "\x1b[41m",
    "bg_green": "\x1b[42m",
    "bg_yellow": "\x1b[43m",
    "bg_blue": "\x1b[44m",
    "bg_magenta": "\x1b[45m",
    "bg_cyan": "\x1b[46m",
    "bg_white": "\x1b[47m",
}

LEVEL_COLORS = {
    logging.DEBUG:  ("blue", None, False),
    logging.INFO:   ("green", None, False),
    logging.WARNING:("yellow", None, True),
    logging.ERROR:  ("red", None, True),
    logging.CRITICAL:("white", "bg_red", True),
}

def supports_color(stream) -> bool:
    try:
        # Only color when writing to a real TTY
        return hasattr(stream, "isatty") and stream.isatty()
    except Exception:
        return False

def c(text: str, *, fg: Optional[str]=None, bg: Optional[str]=None, bold: bool=False, underline: bool=False, dim: bool=False) -> str:
    """
    Manually colorize a substring. Use in your message like:
      logger.info("hello %s", c("world", fg="cyan", bold=True))
    """
    parts = []
    if bold: parts.append(ANSI_CODES["bold"])
    if dim: parts.append(ANSI_CODES["dim"])
    if underline: parts.append(ANSI_CODES["underline"])
    if fg and fg in ANSI_CODES: parts.append(ANSI_CODES[fg])
    if bg and bg in ANSI_CODES: parts.append(ANSI_CODES[bg])
    start = "".join(parts)
    end = ANSI_CODES["reset"] if parts else ""
    return f"{start}{text}{end}"

class ConsoleColoredFormatter(logging.Formatter):
    """
    Colors console output. File logs should use a plain formatter.

    How to color specific lines:
      logger.info("Message", extra={"msg_color":"cyan","msg_bold":True,"msg_underline":False,"msg_bg":"bg_black"})
    If not provided, it colors level name based on LEVEL_COLORS and leaves message plain.
    """
    def __init__(self, fmt: str, datefmt: str | None = None, *, colorize: bool = True, color_levelnames: bool = True):
        super().__init__(fmt=fmt, datefmt=datefmt)
        self.colorize = colorize
        self.color_levelnames = color_levelnames

    def format(self, record: logging.LogRecord) -> str:
        # Save originals
        orig_levelname = record.levelname
        orig_msg = record.getMessage()

        # Apply colors only if enabled and stream supports it (checked when handler is created)
        if self.colorize:
            # 1) Colorize LEVELNAME
            if self.color_levelnames:
                fg, bg, bold = LEVEL_COLORS.get(record.levelno, ("white", None, False))
                record.levelname = c(orig_levelname, fg=fg, bg=bg, bold=bold)

            # 2) Colorize message if requested via extra
            fg = getattr(record, "msg_color", None)
            bg = getattr(record, "msg_bg", None)
            bold = bool(getattr(record, "msg_bold", False))
            underline = bool(getattr(record, "msg_underline", False))
            dim = bool(getattr(record, "msg_dim", False))

            # If user supplied any styling flag, colorize whole message
            if any([fg, bg, bold, underline, dim]):
                colored_msg = c(orig_msg, fg=fg, bg=bg, bold=bold, underline=underline, dim=dim)
            else:
                # Otherwise leave message as-is; user can still embed c("...") manually.
                colored_msg = orig_msg

            # Inject a temporary attribute for the format string
            record.__dict__["_colored_message"] = colored_msg
            # Use %(message)s normally (we'll swap below)
            out = super().format(record)
            # Reset modified fields
            record.levelname = orig_levelname
            return out.replace(orig_msg, colored_msg, 1)
        else:
            # No color
            record.levelname = orig_levelname
            return super().format(record)

def make_console_handler(fmt: str, datefmt: str) -> logging.Handler:
    stream = sys.stdout
    colorize = supports_color(stream)
    handler = logging.StreamHandler(stream)
    handler.setLevel(logging.INFO)
    handler.setFormatter(ConsoleColoredFormatter(fmt=fmt, datefmt=datefmt, colorize=colorize))
    return handler



================================================
FILE: src/formatting.py
================================================
# src/formatting.py
import logging
from typing import Dict, List, Tuple, Iterable, Optional
import pandas as pd
from openpyxl.styles import Alignment

logger = logging.getLogger(__name__)

def export_simple_excel(df: pd.DataFrame, path, column_widths_pixels: Optional[Dict[str, int]] = None) -> None:
    with pd.ExcelWriter(path, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="ASOM")
        ws = writer.sheets["ASOM"]
        if column_widths_pixels:
            _apply_pixel_widths(ws, list(df.columns), column_widths_pixels)

def export_with_merged_cells(df: pd.DataFrame, path, column_widths_pixels: Optional[Dict[str, int]] = None) -> None:
    """
    Merge hierarchy spans. If some expected columns are missing (e.g., due to filtering),
    gracefully skip those merge levels with a warning.
    """
    if df.empty:
        logger.warning("export_with_merged_cells: empty DataFrame.")
        with pd.ExcelWriter(path, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="ASOM")
        return

    with pd.ExcelWriter(path, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="ASOM")
        ws = writer.sheets["ASOM"]
        headers = list(df.columns)

        def merge_by_group(group_cols: List[str], merge_cols: List[str], level_name: str) -> None:
            present_group_cols = [c for c in group_cols if c in df.columns]
            present_merge_cols = [c for c in merge_cols if c in df.columns]

            missing_g = [c for c in group_cols if c not in df.columns]
            missing_m = [c for c in merge_cols if c not in df.columns]
            if missing_g or missing_m:
                logger.warning(
                    f"Merging: {level_name}: skipping missing columns "
                    f"(group keys missing={missing_g}, merge cols missing={missing_m})."
                )

            # If there are no group cols or no merge cols present, nothing to do.
            if not present_group_cols or not present_merge_cols:
                return

            # Iterate contiguous spans
            start = 0
            prev = tuple(df.iloc[0][present_group_cols]) if len(df) > 0 else None

            def flush(s: int, e: int):
                if e <= s:
                    return
                top = 2 + s  # header row = 1
                bot = 2 + e
                for mc in present_merge_cols:
                    c = headers.index(mc) + 1
                    ws.merge_cells(start_row=top, start_column=c, end_row=bot, end_column=c)

            for i in range(len(df)):
                key = tuple(df.iloc[i][present_group_cols])
                if key != prev:
                    flush(start, i - 1)
                    start = i
                    prev = key
            flush(start, len(df) - 1)

        # Merge levels (expected full hierarchy)
        merge_by_group(["CCIR Index"], ["CCIR Index", "CCIR"], "CCIR-level")
        merge_by_group(["CCIR Index", "Tactic ID", "Tactic Name"], ["Tactic ID", "Tactic Name"], "Tactic-level")
        merge_by_group(
            ["CCIR Index", "Tactic ID", "Tactic Name", "Indicator Index"],
            ["Indicator Index", "Indicator", "Technique ID", "Technique Name"],
            "Indicator-level"
        )
        merge_by_group(
            ["CCIR Index", "Tactic ID", "Tactic Name", "Indicator Index", "Evidence Index"],
            ["Evidence Index", "Evidence Description", "Data Sources", "Data Platforms", "NAI"],
            "Evidence-level"
        )

        if column_widths_pixels:
            _apply_pixel_widths(ws, headers, column_widths_pixels)

        # Enable wrap text for all populated cells (merged sheet only)
        max_row = ws.max_row
        max_col = ws.max_column
        wrap_align = Alignment(wrap_text=True, vertical="top")
        for r in range(1, max_row + 1):         # include header row if you want header wrapping
            for c in range(1, max_col + 1):
                cell = ws.cell(row=r, column=c)
                cell.alignment = wrap_align

def _apply_pixel_widths(ws, headers: List[str], column_widths_pixels: Dict[str, int]) -> None:
    PIXELS_PER_CHAR = 7.0
    from openpyxl.utils import get_column_letter
    for col_name, px in column_widths_pixels.items():
        if col_name not in headers:
            continue
        col_letter = get_column_letter(headers.index(col_name) + 1)
        ch = max(6, int(round(px / PIXELS_PER_CHAR)))
        ws.column_dimensions[col_letter].width = ch

def _col_letter(ws, col_index_1based: int) -> str:
    from openpyxl.utils import get_column_letter
    return get_column_letter(col_index_1based)


def _merge_spans(
    ws,
    df: pd.DataFrame,
    group_on: List[str],
    merge_cols: List[str],
    headers: List[str]
) -> None:
    """
    Find contiguous blocks where 'group_on' fields are identical and merge each of the 'merge_cols'
    across the corresponding row span.
    """
    if any(col not in df.columns for col in group_on):
        return

    # We'll iterate contiguous spans by comparing rows with previous row
    start = 0  # df index (0-based)
    prev_key = tuple(df.iloc[0][group_on]) if not df.empty else None

    def flush_span(s: int, e: int):
        # Merge each column in merge_cols across Excel rows 2+s .. 2+e (header = row 1)
        if e <= s:  # single row - no merge needed
            return
        top_row = 2 + s
        bot_row = 2 + e
        for col in merge_cols:
            if col not in headers:
                continue
            c = headers.index(col) + 1
            ws.merge_cells(start_row=top_row, start_column=c, end_row=bot_row, end_column=c)

    for i in range(len(df)):
        cur_key = tuple(df.iloc[i][group_on])
        if cur_key != prev_key:
            # close previous span [start, i-1]
            flush_span(start, i - 1)
            start = i
            prev_key = cur_key
    # flush last span
    flush_span(start, len(df) - 1)



================================================
FILE: src/processing.py
================================================
import copy
import json
import logging
import re
from pathlib import Path
from typing import Any, Dict, List, Set, Tuple

import pandas as pd

logger = logging.getLogger(__name__)

TECHNIQUE_ID_PATTERN = re.compile(r"^(?P<tech_id>T\d{4}(?:\.\d{3})?|D3-[A-Z]+)")

def _normalize_tactic_key(tactic: str) -> Tuple[str, str]:
    if " - " in tactic:
        tid, name = tactic.split(" - ", 1)
        return tid.strip(), name.strip()
    return tactic.strip(), ""

def _normalize_technique_id(tech: str) -> str:
    m = TECHNIQUE_ID_PATTERN.match(tech.strip())
    return m.group("tech_id") if m else ""

def _load_json_safely(path: Path) -> Any:
    text = path.read_text(encoding="utf-8").strip()
    if text.startswith("```"):
        text = re.sub(r"^```(?:json)?\s*", "", text)
        text = re.sub(r"\s*```$", "", text)
    return json.loads(text)

def _is_new_schema_object(obj: dict) -> bool:
    required = {"information_requirement", "tactic_id", "tactic_name", "indicators"}
    return isinstance(obj, dict) and required.issubset(obj.keys())

def _filter_indicators(ir_obj: dict, allowed_ids: Set[str]) -> dict:
    if not allowed_ids:
        return ir_obj

    new_obj = copy.deepcopy(ir_obj)
    new_indicators = [
        ind for ind in new_obj.get("indicators", [])
        if _normalize_technique_id(ind.get("technique_id", "")) in allowed_ids
    ]
    new_obj["indicators"] = new_indicators
    return new_obj

def build_asom(
    detect_chain: Dict[str, List[str]],
    attack_chain: Dict[str, List[str]],
    directories: List[Path],
    filter_indicators: bool = True,
    deduplicate: bool = True
) -> List[dict]:
    """
    Builds an ASOM by processing detect and attack chains against analytic plan files.

    The function processes all JSON files in the given list of directories, filters
    them based on the combined tactics and techniques from both chains, and then sorts
    the results to ensure that items from the 'detect_chain' appear first.
    """
    # Combine chains and create a master map of all tactics and techniques
    full_chain = {**detect_chain, **attack_chain}
    tactic_map: Dict[str, Set[str]] = {}
    for tactic_str, technique_list in full_chain.items():
        tactic_id, _ = _normalize_tactic_key(tactic_str)
        norm_tecs = {_normalize_technique_id(t) for t in technique_list}
        norm_tecs = {t for t in norm_tecs if t}
        tactic_map.setdefault(tactic_id, set()).update(norm_tecs)

    # This list preserves the order of detect tactics for final sorting
    detect_tactic_ids_ordered = [_normalize_tactic_key(t)[0] for t in detect_chain.keys()]

    # Gather all .json files from all specified directories
    all_files: List[Path] = []
    for directory in directories:
        if directory.is_dir():
            all_files.extend(directory.glob("*.json"))
        else:
            logger.warning(f"Directory '{directory}' specified in config does not exist. Skipping.")

    # Process all JSON files and collect all matching IR objects
    all_results: List[dict] = []
    for path in sorted(all_files):
        try:
            data = _load_json_safely(path)
        except Exception as e:
            logger.warning(f"Could not parse {path.name}: {e}")
            continue

        if not isinstance(data, list):
            continue

        for obj in data:
            if not _is_new_schema_object(obj):
                logger.debug(f"Object in {path.name} does not conform to schema. Skipping.")
                continue

            tactic_id = obj.get("tactic_id", "").strip()
            if tactic_id not in tactic_map:
                continue

            if filter_indicators:
                filtered_obj = _filter_indicators(copy.deepcopy(obj), tactic_map[tactic_id])
                if tactic_map[tactic_id] and not filtered_obj.get("indicators"):
                    continue
                all_results.append(filtered_obj)
            else:
                all_results.append(copy.deepcopy(obj))

    # Sort results: detect chain tactics first (in order), then attack chain tactics
    def sort_key(ir_obj):
        tactic_id = ir_obj.get("tactic_id")
        if tactic_id in detect_tactic_ids_ordered:
            # Primary sort key 0 for detect, secondary is its position in the config
            return (0, detect_tactic_ids_ordered.index(tactic_id))
        else:
            # Primary sort key 1 for attack, secondary is alphabetical by ID
            return (1, tactic_id)

    all_results.sort(key=sort_key)
    
    # Deduplicate after sorting to ensure the first-occurring item is kept
    if deduplicate:
        seen = set()
        unique_results: List[dict] = []
        for obj in all_results:
            key = (obj.get("information_requirement"), obj.get("tactic_id"))
            if key in seen:
                continue
            seen.add(key)
            unique_results.append(obj)
        return unique_results
    
    return all_results


ORDINAL_LABELS = ["First action", "Second action", "Third action"]

def _distinct_preserve_order(xs: List[str]) -> List[str]:
    seen = set()
    out = []
    for x in xs:
        if x not in seen:
            seen.add(x)
            out.append(x)
    return out

def _normalize_actions_no_pad(action_field: Any, *, context: str) -> List[str]:
    """
    Return up to three DISTINCT actions, preserving order. Do NOT pad with blanks.
    """
    if isinstance(action_field, list):
        actions = [str(a).strip() for a in action_field if a is not None and str(a).strip() != ""]
        actions = _distinct_preserve_order(actions)
        if len(actions) > 3:
            logger.warning(f"{context}: 'action' had {len(actions)} entries; truncating to 3.")
            actions = actions[:3]
        return actions
    elif isinstance(action_field, str):
        s = action_field.strip()
        return [s] if s else []
    elif action_field is None:
        return []
    else:
        logger.warning(f"{context}: 'action' not a list/string; skipping.")
        return []

def format_asom(raw_asom: List[Dict[str, Any]]) -> pd.DataFrame:
    """
    Flatten nested ASOM (with 'action' as a list) into one row per ACTION (1..3).
    No blank padding; an evidence with 1 or 2 actions produces 1 or 2 rows respectively.

    Columns:
      - CCIR Index
      - CCIR
      - Tactic ID
      - Tactic Name
      - Indicator Index   (TEMP, will be re-numbered later)
      - Indicator
      - Technique ID
      - Technique Name
      - Evidence Index    (TEMP, will be re-numbered later)
      - Evidence Description
      - Data Sources
      - Data Platforms
      - NAI
      - Action Label
      - Action
    """
    rows: List[Dict[str, Any]] = []

    if not isinstance(raw_asom, list):
        logger.error("format_asom: expected a list at the top level; returning empty frame.")
        return pd.DataFrame(columns=[
            "CCIR Index","CCIR","Tactic ID","Tactic Name","Indicator Index","Indicator",
            "Technique ID","Technique Name","Evidence Index","Evidence Description",
            "Data Sources","Data Platforms","NAI","Action Label","Action"
        ])

    for ccir_idx, ccir_obj in enumerate(raw_asom, start=1):
        ccir = str(ccir_obj.get("information_requirement", "")).strip()
        tactic_id = str(ccir_obj.get("tactic_id", "")).strip()
        tactic_name = str(ccir_obj.get("tactic_name", "")).strip()

        indicators = ccir_obj.get("indicators", []) or []
        if not isinstance(indicators, list):
            logger.warning(f"CCIR {ccir_idx}: 'indicators' not a list; skipping.")
            continue

        for ind_temp_idx, ind in enumerate(indicators, start=1):
            # Schema shows: technique_id + name at indicator level
            tech_id = str(ind.get("technique_id", "")).strip()
            indicator_name = str(ind.get("name", "")).strip()
            tech_name = str(ind.get("name", "")).strip()  # If you have a separate technique name, swap here

            evidence_list = ind.get("evidence", []) or []
            if not isinstance(evidence_list, list):
                logger.warning(f"CCIR {ccir_idx} Indicator {ind_temp_idx}: 'evidence' not a list; skipping.")
                continue

            for ev_temp_idx, ev in enumerate(evidence_list, start=1):
                description = str(ev.get("description", "")).strip()

                data_sources = ev.get("data_sources", []) or []
                if not isinstance(data_sources, list):
                    data_sources = [str(data_sources)]
                data_sources_str = "; ".join([str(s) for s in data_sources])

                data_platforms = ev.get("data_platforms", []) or []
                if not isinstance(data_platforms, list):
                    data_platforms = [str(data_platforms)]
                data_platforms_str = "; ".join([str(p) for p in data_platforms])

                nai = str(ev.get("nai", "")).strip()

                actions = _normalize_actions_no_pad(
                    ev.get("action"),
                    context=f"CCIR {ccir_idx}, IND {ind_temp_idx}, EVID {ev_temp_idx}"
                )

                # If no actions, still emit a single row so the evidence is not lost (Action columns blank)
                if not actions:
                    rows.append({
                        "CCIR Index": ccir_idx,
                        "CCIR": ccir,
                        "Tactic ID": tactic_id,
                        "Tactic Name": tactic_name,
                        "Indicator Index": ind_temp_idx,   # temp
                        "Indicator": indicator_name,
                        "Technique ID": tech_id,
                        "Technique Name": tech_name,
                        "Evidence Index": ev_temp_idx,     # temp
                        "Evidence Description": description,
                        "Data Sources": data_sources_str,
                        "Data Platforms": data_platforms_str,
                        "NAI": nai,
                        "Action Index": "1",
                        "Action": "",
                    })
                else:
                    for a_i, a_text in enumerate(actions, start=1):
                        rows.append({
                            "CCIR Index": ccir_idx,
                            "CCIR": ccir,
                            "Tactic ID": tactic_id,
                            "Tactic Name": tactic_name,
                            "Indicator Index": ind_temp_idx,   # temp; renumbered later
                            "Indicator": indicator_name,
                            "Technique ID": tech_id,
                            "Technique Name": tech_name,
                            "Evidence Index": ev_temp_idx,     # temp; renumbered later
                            "Evidence Description": description,
                            "Data Sources": data_sources_str,
                            "Data Platforms": data_platforms_str,
                            "NAI": nai,
                            "Action Index": a_i,               # <— integer index, 1..N
                            "Action": a_text,
                        })

    df = pd.DataFrame(rows, columns=[
        "CCIR Index","CCIR","Tactic ID","Tactic Name",
        "Indicator Index","Indicator","Technique ID","Technique Name",
        "Evidence Index","Evidence Description","Data Sources","Data Platforms","NAI",
        "Action Index","Action"   # <— updated
    ])
    return df

def renumber_formatted_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    Sorts rows and re-numbers:
      - Indicator Index: 1..N within each (CCIR Index, Tactic ID, Tactic Name) for each distinct (Indicator, Technique ID, Technique Name) triplet in order of first appearance.
      - Evidence Index:  1..M within each (CCIR Index, Tactic ID, Tactic Name, Indicator Index) for each distinct (Evidence Description, Data Sources, Data Platforms, NAI).

    Ensures contiguity so merges work across consecutive rows.
    """
    if df.empty:
        return df

    # Re-number Indicator Index
    def renumber_indicator(group: pd.DataFrame) -> pd.Series:
        # Key per indicator within the tactic
        keys = list(zip(group["Indicator"], group["Technique ID"], group["Technique Name"]))
        key_to_num = {}
        next_id = 1
        mapped = []
        for k in keys:
            if k not in key_to_num:
                key_to_num[k] = next_id
                next_id += 1
            mapped.append(key_to_num[k])
        return pd.Series(mapped, index=group.index)

    # Re-number Evidence Index within each Indicator Index block
    def renumber_evidence(group: pd.DataFrame) -> pd.Series:
        keys = list(zip(group["Evidence Description"], group["Data Sources"], group["Data Platforms"], group["NAI"]))
        key_to_num = {}
        next_id = 1
        mapped = []
        for k in keys:
            if k not in key_to_num:
                key_to_num[k] = next_id
                next_id += 1
            mapped.append(key_to_num[k])
        return pd.Series(mapped, index=group.index)
    
    # initial deterministic sort (stable)
    df = df.sort_values(
        by=[
            "CCIR Index", "Tactic ID", "Tactic Name",
            "Indicator", "Technique ID", "Technique Name",
            "Evidence Description", "Data Sources", "Data Platforms", "NAI", "Action Index"
        ],
        kind="mergesort"
    ).reset_index(drop=True)
    
    # Re-number Indicator Index (silence FutureWarning with include_groups=False)
    df["Indicator Index"] = (
        df.groupby(["CCIR Index","Tactic ID","Tactic Name"], sort=False)
          .apply(renumber_indicator, include_groups=False)
          .reset_index(level=[0,1,2], drop=True)
    )
    
    # Re-number Evidence Index inside each Indicator Index
    df["Evidence Index"] = (
        df.groupby(["CCIR Index","Tactic ID","Tactic Name","Indicator Index"], sort=False)
          .apply(renumber_evidence, include_groups=False)
          .reset_index(level=[0,1,2,3], drop=True)
    )
    
    # Final contiguous sort
    df = df.sort_values(
        by=[
            "CCIR Index", "Tactic ID", "Tactic Name",
            "Indicator Index", "Evidence Index", "Action Index"
        ],
        kind="mergesort"
    ).reset_index(drop=True)

    return df

