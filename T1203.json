[
    {
        "information_requirement": "Has the adversary executed code on client systems via exploitation?",
        "tactic_id": "TA0002",
        "tactic_name": "Execution",
        "indicators": [
            {
                "technique_id": "T1203",
                "name": "Exploitation for Client Execution",
                "evidence": [
                    {
                        "description": "Network traffic from client applications connecting to domains or IP addresses known to host exploit kits or malicious documents, or traffic matching signatures of known client-side exploits.",
                        "data_sources": [
                            "Zeek conn.log",
                            "Zeek http.log",
                            "Zeek files.log"
                        ],
                        "data_platforms": [
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Inner join Zeek conn.log destination IPs and Zeek http.log host/URI fields with a high-confidence cyber threat intelligence (CTI) feed of known exploit kit C2s, malware distribution points, and phishing domains (updated at least hourly). Analyze Zeek files.log to calculate hashes of downloaded files (e.g., PDFs, DOCX files, executables) and compare them against a known malware hash database. Alert on any matches."
                    },
                    {
                        "description": "Execution of command-line interpreters (e.g., PowerShell, cmd.exe, wscript.exe) by client applications (browsers, document readers) with suspicious argument patterns, such as encoded commands or download cradles.",
                        "data_sources": [
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor Windows Event ID 4688 for parent processes like 'WINWORD.EXE', 'EXCEL.EXE', 'ACRORD32.EXE', 'chrome.exe', 'msedge.exe' spawning child processes like 'cmd.exe', 'powershell.exe', 'wscript.exe', or 'cscript.exe'. Analyze the command line of the child process for patterns indicative of malicious activity, such as '-enc', '-nop', '-w hidden', 'IEX', 'DownloadString', 'certutil', or embedded URLs/IPs. Use regular expressions to detect these high-confidence patterns and alert on all matches."
                    },
                    {
                        "description": "Anomalous child process creation by a client application (e.g., browser, document reader) that deviates from its established process behavior baseline, such as spawning command interpreters or unexpected utilities.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Zeek conn.log"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor Windows Event ID 4688 for all child processes spawned by common client applications (browsers, Office suite, PDF readers). Establish a baseline of normal child processes for each parent application across the enterprise. Use frequency analysis and descriptive statistics to flag rare or never-before-seen child processes (e.g., 'WINWORD.EXE' spawning 'ftp.exe'). Correlate the process creation timestamp with subsequent outbound network connections (Zeek conn.log) from the new child process to detect suspicious C2 callouts."
                    },
                    {
                        "description": "A client application writing an executable file or a file with a mismatched extension to an unusual disk location (e.g., a browser writing a .exe to %AppData% or a document reader writing a .dll to a user's home directory).",
                        "data_sources": [
                            "Windows Event ID 4663",
                            "Windows Event ID 4688"
                        ],
                        "data_platforms": [
                            "Endpoints"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor file creation events, correlating the process name and PID (from Windows Event ID 4688) with file write events (from Windows Event ID 4663). Filter for files with executable extensions (.exe, .dll, .ps1, .bat, .vbs) being written by client applications. Use frequency analysis on file paths to identify unusual write locations for these processes (e.g., locations outside of 'Downloads' or standard temporary internet file directories). Investigate any mismatches between file extensions and their actual file type."
                    },
                    {
                        "description": "Unusual network communication patterns originating directly from client applications, such as connections to non-standard ports, direct-to-IP addresses, or communication with high-entropy domains.",
                        "data_sources": [
                            "Zeek conn.log",
                            "Zeek dns.log"
                        ],
                        "data_platforms": [
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor network connection logs (Zeek conn.log) for outbound connections initiated by client processes. Establish a baseline of normal destination ports, protocols, and domain patterns for each application. Use statistical methods to flag deviations, such as connections to low-frequency ports or direct-to-IP connections that bypass DNS. Calculate the Shannon entropy of requested domain names in Zeek dns.log that are correlated with these client application processes to identify potential connections to algorithmically generated domains (DGA) used for C2."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
