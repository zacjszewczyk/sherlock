
[
  {
    "Has the adversary escalated privileges using access token manipulation? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1134 - Access Token Manipulation": {
          "Execution of processes with names or command-line arguments identical to known token manipulation tools used for privilege escalation (e.g., RottenPotato, JuicyPotato, PrintSpoofer).": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Enable and monitor Windows Event ID 4688 (Process Creation) with command-line auditing. Maintain and continuously update a list of process names and specific command-line strings/arguments associated with known privilege escalation tools that leverage token manipulation (e.g., `JuicyPotato.exe`, `PrintSpoofer.exe`, `-t * -l <port>`). Create high-fidelity alerts for any exact matches of these selectors."
          },
          "A non-system process, such as a command shell (cmd.exe, powershell.exe), spawning from a system service process that should not have interactive children (e.g., services.exe, spoolsv.exe, lsass.exe).": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze process creation events (Windows Event ID 4688) to build parent-child process relationships. Create a baseline of normal parent-child relationships for critical system processes. Alert on pattern deviations, specifically when processes like `services.exe`, `lsass.exe`, `spoolsv.exe`, or `wininit.exe` spawn interactive command shells or other non-standard child processes. Use frequency analysis on process chains to identify rare and suspicious patterns indicative of privilege escalation exploits."
          },
          "A process created by a low-privileged user is subsequently associated with a logon event (Type 5 - Service Start) indicating SYSTEM-level integrity, or spawns child processes with a higher integrity level without a legitimate UAC event.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4624",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate process creation events (Event ID 4688) with logon events (Event ID 4624). Hunt for sequences where a user process is followed by a service logon (Logon Type 5) for the SYSTEM account associated with that process lineage. Additionally, analyze Event ID 4688 for Token Elevation Type information, flagging child processes that gain an elevated token from a parent with a default token, especially if the parent is not `consent.exe`. Use correlation analysis to link these events, as this behavior may indicate an exploit successfully creating or duplicating a SYSTEM token."
          },
          "A process initiates a network logon to the local machine (localhost loopback) using a privileged account (e.g., SYSTEM) immediately after being created by a lower-privileged user process.": {
            "Data": "Windows Event ID 4624; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for successful logon events (Windows Event ID 4624) with Logon Type 3 (Network) or 9 (NewCredentials) where the Source Network Address is a loopback address (127.0.0.1, ::1) and the Account Name is a privileged account like NT AUTHORITY\\SYSTEM. Correlate the Logon ID with the creating process (from Event ID 4688) to verify if it was initiated by a non-system, user-level process. This behavior is a strong indicator of Potato-family exploits used for privilege escalation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary evading defenses using access token manipulation? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1134 - Access Token Manipulation": {
          "Execution of a process with a command-line argument that is a known atomic indicator for a defense evasion tool which manipulates tokens, such as PsExec used with the -s (SYSTEM account) flag.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Windows Event ID 4688) for command lines containing specific, high-fidelity indicators of token manipulation tools used for defense evasion. Create alerts for selectors such as the execution of `psexec.exe` or `paexec.exe` with a `-s` argument, as this represents specific adversary tool usage to run processes as the SYSTEM account for evasive purposes."
          },
          "Execution of `runas.exe` with the `/netonly` flag, indicating a known pattern of attempting to authenticate to remote systems with different credentials while the local process context remains unchanged.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation command lines (Windows Event ID 4688) for the specific pattern 'runas' and '/netonly'. For any match, track the network activity (Zeek conn.log) from the source host. Correlate the time of the `runas` command with network logon attempts (e.g., to SMB, WinRM, RDP services) to other machines. Flag this pattern as highly suspicious, as it's a known TTP for lateral movement using alternate credentials to evade local detection."
          },
          "A legitimate system process or security tool (e.g., lsass.exe, svchost.exe, AV process) initiates network connections or file modifications inconsistent with its established baseline behavior.": {
            "Data": "Zeek conn.log; Windows Event ID 4688",
            "Data Platform": "Network devices, Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Establish a baseline of normal behavior for critical system and security processes, including typical child processes, network destinations, and protocols used. Monitor for behavioral anomalies, such as `svchost.exe` making a connection to a rare external IP on a non-standard port (Zeek conn.log), or an antivirus process spawning `powershell.exe` (Windows Event ID 4688). Use regression analysis or other statistical methods to identify significant deviations from the baseline, which may indicate that the process's token has been stolen and is being used by an adversary for defense evasion."
          },
          "A single source host exhibits successful network authentications to multiple remote systems using a high-entropy set of user accounts over a short period.": {
            "Data": "Windows Event ID 4624",
            "Data Platform": "Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for successful network logons (Windows Event ID 4624, Logon Type 3). For each source host, aggregate all successful outgoing network logons within a defined time window (e.g., 1 hour). Flag instances where a single host authenticates to multiple targets using a diverse set of user accounts. Use entropy measures on the set of usernames originating from a single host for remote logons. A sustained high-entropy value indicates an attacker with a collection of stolen tokens or credentials (retrieved via token manipulation) is performing widespread lateral movement."
          },
          "A process is created with a parent process that is different from the actual creating process, particularly if the specified parent is a common system process like `explorer.exe` or `svchost.exe`.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze process tree chains using Parent and Child Process IDs from Windows Event ID 4688. Hunt for suspicious parent-child relationships that indicate Parent Process ID (PPID) Spoofing, a defense evasion technique. Flag scenarios such as a command shell (`cmd.exe`) being created as a child of `explorer.exe` but without a corresponding interactive logon, or a process whose parent PID in the log does not exist or terminated long before the child was created. Use correlation analysis to find patterns of these orphaned or illogically parented processes."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
