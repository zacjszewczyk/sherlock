
[
  {
    "Has the adversary attempted to elevate privileges using ListPlanting? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1055.015 - ListPlanting": {
          "Presence of known malicious tools or implants on disk or in memory that are known to implement the ListPlanting technique.": {
            "Data": "Windows Event ID 4688; Advanced host telemetry (memory scans)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Scan file systems for file hashes associated with known malware families or tools that use ListPlanting by analyzing process creation events (Windows Event ID 4688). Use YARA rules to scan running process memory for code patterns or strings specific to known ListPlanting implementations, particularly looking for these signatures in unexpected processes."
          },
          "A low-integrity process performing the specific sequence of API calls characteristic of ListPlanting against a known high-integrity process (e.g., explorer.exe).": {
            "Data": "Windows Event ID 10; Windows Event ID 8; Advanced host telemetry",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for a specific, time-correlated sequence of events: 1. A process (Source) with a low or medium integrity level requests access to a process (Target) with a high or system integrity level (Windows Event ID 10 for ProcessAccess). 2. The Source process allocates memory in the Target process (Windows Event ID 8 for CreateRemoteThread, or advanced telemetry for VirtualAllocEx). 3. The Source process makes `SendMessage` or `PostMessage` calls with `LVM_SETITEMPOSITION` to a `SysListView32` window owned by the Target process (via advanced telemetry). Correlate these events occurring within a very short time window (<1 second) originating from the same Source-Target process pair."
          },
          "A process without a significant graphical user interface (GUI) making an anomalously high number of `SendMessage` or `PostMessage` API calls to other processes.": {
            "Data": "Advanced host telemetry (API calls)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Establish a baseline for `SendMessage`/`PostMessage` call frequency for all running processes using historical telemetry. Identify processes that typically do not have a GUI (e.g., command-line utilities, background services, console applications) but exhibit a sudden spike in these calls, especially when targeting known high-integrity GUI processes like `explorer.exe`. Use statistical methods like Inter-Quartile Range (IQR) or Z-scores on the call counts per process type to detect significant outliers."
          },
          "A high-integrity process (e.g., explorer.exe) spawning a child process or initiating network connections that are inconsistent with its established baseline of normal privileged activity.": {
            "Data": "Windows Event ID 4688; Windows Event ID 3; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Maintain a baseline of normal child processes and network destinations for trusted, high-integrity processes like `explorer.exe`. Monitor Windows Event ID 4688 for anomalous child processes (e.g., `cmd.exe`, `powershell.exe`, or unsigned executables) being spawned by these parents. Monitor Windows Event ID 3 and Zeek conn.log for network connections originating from these trusted parent processes to unusual external IP addresses or on non-standard ports. Use frequency analysis and entropy measures on child process names/paths and destination IPs to detect deviations from the norm, indicating successful privilege escalation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary using ListPlanting to evade defenses? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1055.015 - ListPlanting": {
          "Network traffic from a trusted system process (e.g., explorer.exe, svchost.exe) matching signatures of known malicious C2 protocols or connecting to known malicious domains/IPs.": {
            "Data": "Zeek conn.log; Zeek http.log; Zeek ssl.log",
            "Data Platform": "Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate network traffic originating from internal hosts with CTI feeds of malicious IPs/domains. Specifically filter for traffic where the source process is a trusted system process (if identifiable via endpoint correlation). Inspect Zeek http.log for suspicious User-Agents or URI patterns and Zeek ssl.log for known malicious JA3/SNI hashes originating from these hosts. A match indicates a trusted process has likely been injected and is being used for C2 to evade network and host-based firewall rules."
          },
          "A trusted system process loading unusual DLLs or executing code from a newly allocated, executable memory region not associated with a file on disk.": {
            "Data": "Windows Event ID 7; Windows Event ID 8; Advanced host telemetry",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for a trusted process (e.g., `explorer.exe`) loading unexpected DLLs (Windows Event ID 7), especially those from non-standard directories (e.g., AppData, Temp) or with low prevalence across the enterprise. Correlate this with prior memory allocation events (Windows Event ID 8 or advanced telemetry) where the memory is marked as executable (`PAGE_EXECUTE_READWRITE`). This pattern suggests that injected code is now loading further modules to execute its payload, hiding its presence behind a trusted process to evade EDR/AV detection."
          },
          "A trusted system process exhibiting behavior contrary to its purpose, such as performing file system enumeration, accessing sensitive user documents, or staging data for exfiltration.": {
            "Data": "Windows Event ID 11; Advanced host telemetry (file I/O)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Establish a baseline of normal file access patterns for trusted processes like `explorer.exe` or `svchost.exe`. Monitor for anomalous file activity (Windows Event ID 11, advanced file I/O telemetry) such as high-volume reads from user directories (`Documents`, `Desktop`), writing new executable files, or creating archive files (e.g., .zip, .rar) in temporary locations. Use linear regression or time series analysis to detect anomalous increases in file I/O operations from these processes, which could indicate data discovery and staging under the cover of a trusted process to evade detection."
          },
          "A trusted system process, which typically has limited or predictable network activity, initiating connections with unusual characteristics (e.g., high-entropy domains, beaconing patterns, large data uploads).": {
            "Data": "Zeek conn.log; Zeek dns.log",
            "Data Platform": "Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Profile the typical network behavior of trusted system processes by analyzing Zeek logs from hosts where they run. Monitor for connections to domains with high string entropy (from Zeek dns.log), suggesting Domain Generation Algorithm (DGA) usage. Analyze connection logs (Zeek conn.log) for periodic, fixed-interval 'heartbeat' connections characteristic of C2 beaconing. Use time series analysis to detect unusual spikes in uploaded data volume from these processes. This behavior indicates the process is being used to evade network-based behavioral detections and firewalls."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
