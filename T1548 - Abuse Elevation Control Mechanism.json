```json
[
  {
    "Has the adversary successfully escalated privileges using elevation control mechanisms? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1548 - Abuse Elevation Control Mechanism": {
          "Execution of a process whose file hash matches a known privilege escalation tool or UAC bypass utility.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously monitor process creation events (Windows Event ID 4688). For each new process, compute the executable file's hash (e.g., SHA256). Correlate these hashes against a high-confidence threat intelligence feed of known malicious tools, specifically those tagged for privilege escalation or UAC bypass (e.g., UACMe, Watson, Juicy Potato variants). Alert on any hash match and investigate the process lineage."
          },
          "Anomalous parent-child process relationships or specific command-line arguments characteristic of known UAC bypass or privilege escalation techniques.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze process creation events (Windows Event ID 4688) for known suspicious patterns. Monitor for parent-child chains where a standard user process (e.g., explorer.exe) spawns a trusted system utility (e.g., fodhelper.exe, eventvwr.exe, sdclt.exe) that subsequently spawns a command shell or scripting interpreter. Use regular expression matching on command lines to detect patterns associated with tools like `runas` used with `/savecred` or specific parameters passed to system binaries to trigger auto-elevation."
          },
          "A process is created with NT AUTHORITY\\SYSTEM privileges by a parent process that is not a standard system service or trusted installer.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Filter process creation events (Windows Event ID 4688) where the new process's security ID corresponds to 'NT AUTHORITY\\SYSTEM'. For each such event, examine the parent process. Create and maintain an allowlist of legitimate parent processes that are expected to spawn SYSTEM-level children (e.g., services.exe, svchost.exe, msiexec.exe, trustedinstaller.exe). Alert on any SYSTEM process created by a parent not on this list, such as explorer.exe, powershell.exe, or cmd.exe. Use descriptive statistics to find rare parent-child privilege relationships."
          },
          "Modification of system service binaries, paths, or scheduled tasks by user accounts without explicit administrative roles, followed by service execution or task run.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4698; Windows Event ID 7045",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for modifications to service registry keys (Event ID 4657 on `SYSTEM\\CurrentControlSet\\Services`) or scheduled tasks (Event ID 4698). Profile the user accounts making these changes and alert if they are not designated administrators. Use correlation analysis to link these modification events with subsequent service creation/start events (Event ID 7045) or task execution to identify the full sequence of abuse for privilege escalation, especially when the service or task executes with higher privileges."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary using elevation control mechanisms to evade defenses? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1548 - Abuse Elevation Control Mechanism": {
          "Modification of a UAC-related registry key to a specific, known-bad value used to disable or weaken UAC protections.": {
            "Data": "Windows Event ID 4657",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor registry modification events (Windows Event ID 4657) specifically for the keys `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA` and `ConsentPromptBehaviorAdmin`. Alert immediately if `EnableLUA` is set to `0` or `ConsentPromptBehaviorAdmin` is set to `0` (Elevate without prompting), as these are explicit selector values for disabling UAC. Investigate the source process that made the change."
          },
          "A high-integrity (elevated) process injects code into or creates a remote thread in a process running at a lower integrity level, such as a standard user's browser or shell process.": {
            "Data": "Windows Event ID 8; Windows Event ID 10",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for process injection (Sysmon Event ID 8, CreateRemoteThread) and process access (Sysmon Event ID 10, ProcessAccess) events. Filter for events where the source process is running with high or system integrity (e.g., as SYSTEM or an administrator) and the target process is running with medium or low integrity (e.g., explorer.exe, chrome.exe, outlook.exe belonging to a standard user). This pattern is highly indicative of attempts to evade process-based defenses or execute code in a different user context to bypass security controls."
          },
          "An elevated system process loads an unsigned DLL or a DLL from a non-standard, user-writable file path.": {
            "Data": "Windows Event ID 7",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor image load events (Sysmon Event ID 7). Filter for events where the process loading the DLL is a privileged system process (e.g., running from C:\\Windows\\System32\\ as NT AUTHORITY\\SYSTEM). For these events, check if the loaded DLL is unsigned or if its path is in a user-writable directory (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Temp\\, C:\\Perflogs\\). Establish a baseline of normal DLL loads for critical processes and use frequency analysis to alert on deviations. Use entropy measures on the paths of loaded DLLs to find anomalous locations."
          },
          "A process, after successfully elevating privileges, spawns a command-line interpreter or scripting engine and subsequently makes external network connections.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Create a sequence-based rule. Step 1: Detect a privilege elevation event (e.g., via a UAC bypass pattern). Step 2: Within a short time window (e.g., 60 seconds), look for the newly elevated process or its children spawning `cmd.exe`, `powershell.exe`, `wscript.exe`, or `cscript.exe`. Step 3: Correlate these process events with subsequent network connections (Zeek conn.log) from that host to external IP addresses. Use correlation analysis based on host and timestamp to link the full chain of activity from elevation to network egress."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```