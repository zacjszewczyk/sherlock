
[
  {
    "Is the adversary attempting to evade defenses by overwriting process arguments? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1036.011 - Overwrite Process Arguments": {
          "Execution of a known malicious tool or script identified by its hash, which is known to perform in-memory process argument overwriting.": {
            "Data": "Auditd logs; File-based execution logs",
            "Data Platform": "Servers, Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously monitor process execution events from Linux Auditd logs (type=EXECVE) or equivalent EDR telemetry. Extract the hash of the executed binary. Correlate this hash against a CTI feed of known malicious tools that employ argument overwriting techniques. Alert on any match and prioritize investigation of the process's full activity chain, including parent process and subsequent network connections."
          },
          "A process exhibits a mismatch between its command-line arguments recorded at creation time and the arguments visible in the proc filesystem shortly after execution.": {
            "Data": "Auditd logs; Live process data from /proc/[pid]/cmdline",
            "Data Platform": "Servers, Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Using an agent (e.g., EDR, osquery), monitor for new processes (via Auditd EXECVE events or similar). For each new process, capture the initial command line arguments as logged at creation. After a short delay (e.g., 1-5 seconds), read the current command line from the /proc filesystem (`/proc/[pid]/cmdline`). Compare the initial command line string with the current one. Flag any process where the strings do not match, as this is a high-fidelity pattern for this specific technique. Use string comparison logic and correlate events by PID."
          },
          "A process, logged with seemingly benign command-line arguments (e.g., common system daemons), initiates anomalous network activity inconsistent with its purported function.": {
            "Data": "Auditd logs; Zeek conn.log",
            "Data Platform": "Servers, Endpoints, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Capture process creation events and their initial command lines from Linux Auditd logs. Correlate these events with network connections from Zeek conn.log using the source host IP and timestamp. Build a baseline of expected network behavior (e.g., typical destination ports, protocols, data volume, connection frequency) for common system processes (`sshd`, `cron`, `rsyslogd`). Use correlation analysis and descriptive statistics to flag instances where a process with a benign command line initiates connections to rare external IPs, uses non-standard ports, or exhibits C2-like beaconing. Calculate the entropy of destination IPs/ports for a given process name to find anomalous network behavior."
          },
          "A common system process, such as '[kworker]' or 'sshd', is observed with an unexpected parent process or is spawned from an unusual file path.": {
            "Data": "Auditd logs",
            "Data Platform": "Servers, Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze process creation events from Linux Auditd logs to build process lineage trees. Establish a baseline of normal parent-child relationships and executable paths for critical and commonly spoofed system processes. Flag any process creation where a common process name (e.g., `[kworker]`, `sshd`, `systemd`) has an anomalous parent (e.g., spawned by a user shell instead of init/systemd) or is executed from a non-standard path (e.g., `/tmp/` or `/var/tmp/`). Use frequency analysis on parent-child-path triplets to identify rare and suspicious lineage."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
