
[
  {
    "Is the adversary modifying file or directory permissions to evade defenses? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1222 - File and Directory Permissions Modification": {
          "Execution of file permission modification utilities where the parent process is a known malicious executable identified by file hash or malware detection event.": {
            "Data": "Windows Event ID 4688; Windows Defender Event ID 1116",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate process creation events (Windows Event ID 4688) for permission modification tools (`icacls.exe`, `cacls.exe`, `takeown.exe`, `chmod.exe`) with malware detection events (e.g., Windows Defender Event ID 1116). Alert on any instance where a confirmed malicious process (identified by hash or path in the detection event) spawns a command to alter file or directory permissions. This provides a high-confidence, selector-based link between malware and defense evasion activity."
          },
          "Execution of system commands (`icacls`, `cacls`, `chmod`) with suspicious argument patterns, such as granting broad permissions (e.g., 'Everyone:F', '777') to sensitive system files or adversary tool directories.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for process creations of `icacls`, `cacls`, `takeown`, `chmod`, and `chown`. Use regular expression matching on the command line arguments to detect patterns granting overly permissive access (e.g., '/grant Everyone:F', '/grant .*\\\\Users:F', 'chmod 777', 'chmod a+rwx'). Prioritize alerts for commands targeting system binaries, configuration files, security tool directories, or user profile directories. Use correlation analysis to link these patterns to specific users or hosts."
          },
          "Anomalous modification of permissions on sensitive system files, directories, or network shares, especially when initiated by non-standard user accounts or processes.": {
            "Data": "Windows Event ID 4670; Windows Event ID 4688; Zeek smb_files.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Enable auditing and monitor Windows Event ID 4670 (Permissions on an object were changed). Establish a baseline of normal permission modification activity by user, process, and host. Use statistical analysis to flag anomalies, such as: 1) A spike in the volume of 4670 events (time series analysis). 2) Changes to highly sensitive, rarely modified objects (e.g., system binaries in C:\\Windows\\System32, security tool config files). 3) Changes initiated by unexpected processes (e.g., `svchost.exe`, `msiexec.exe`) or user accounts outside of Administrators/SYSTEM. Correlate the Process ID from Event 4670 with Event 4688 to identify the parent process and user context. For network shares, correlate Windows events with Zeek smb_files.log to understand the context of remote permission changes."
          },
          "A sequence of events where file or directory permissions are modified, followed shortly by access, modification, or execution of that object, particularly targeting persistence locations.": {
            "Data": "Windows Event ID 4670; Windows Event ID 4663; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate a permission change event (Windows Event ID 4670) with a subsequent file access (Event ID 4663 for read/write) or process execution (Event ID 4688) on the exact same file path. Define a short time window (e.g., < 5 minutes) for the correlation. Use a box-plot or percentile analysis on the time delta between the permission change and subsequent access to identify unusually rapid sequences. Prioritize alerts for sequences involving: 1) Files in startup or logon persistence locations. 2) System binaries being made writable then modified. 3) Security log files being made writable or deletable."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
