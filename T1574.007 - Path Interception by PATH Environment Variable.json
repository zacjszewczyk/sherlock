```json
[
  {
    "Is the adversary establishing persistence by manipulating environment variables? (TA0003 - Persistence)": {
      "Indicators": {
        "T1574.007 - Path Interception by PATH Environment Variable": {
          "Detection of known malicious files (by hash or specific name/path combination) associated with PATH hijacking persistence mechanisms in auto-start locations or directories prepended to PATH.": {
            "Data": "Windows Event ID 4663 (File Auditing - Object Access); Windows Event ID 4688 (Process Creation with Command Line)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Scan newly created files (Event ID 4663 with 'WriteData' or 'AddFile' access) in user-writable directories commonly prepended to PATH (e.g., %APPDATA%, %TEMP%) or system-wide auto-start-equivalent locations for known malicious hashes. Monitor process executions (Event ID 4688) of binaries from these locations matching known malicious filenames used in PATH hijacking. Maintain and use a list of IOCs (hashes, filenames) from CTI related to T1574.007 for persistence."
          },
          "Persistent modification of PATH environment variable in registry (System or User hive) to include unusual, user-writable directories, especially those known to be abused by specific malware families for persistence.": {
            "Data": "Windows Event ID 4657 (Registry Value Modified); Windows Event ID 4688 (Process Creation with Command Line)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor registry modifications (Event ID 4657) to 'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\PATH' and 'HKEY_CURRENT_USER\\Environment\\PATH'. Flag changes that prepend directories like 'C:\\Users\\<user>\\AppData\\...', '%TEMP%', or other non-standard, user-writable paths, especially if these path patterns are known from malware analysis reports. Correlate with the process that performed the change (Event ID 4657 'ProcessId', resolve to name using Event ID 4688). Use descriptive statistics to track frequency of PATH modifications and identify outlier processes performing them."
          },
          "Legitimate system processes or auto-started applications unexpectedly executing a binary (by name) from a non-standard, user-writable directory that was recently prepended to the PATH environment variable, particularly after a system reboot or user login.": {
            "Data": "Windows Event ID 4688 (Process Creation with Command Line); Windows Event ID 4657 (Registry Value Modified)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process executions (Event ID 4688). If a common system binary name (e.g., 'net.exe', 'powershell.exe') or a known auto-starting application executes from an unexpected path (e.g., not System32, not its legitimate Program Files directory), investigate. Correlate this execution with recent PATH modifications (Event ID 4657) that might have added the unexpected directory. Baseline legitimate PATHs and common auto-start process paths. Use time series analysis to detect if such executions start occurring post-PATH modification, especially after reboots (identified by system uptime or specific boot events like Event ID 6005/6009)."
          },
          "A scheduled task or auto-run entry executing a script or command that relies on a compromised PATH variable to launch a malicious payload persistently.": {
            "Data": "Windows Event ID 4698 (A scheduled task was created); Windows Event ID 4688 (Process Creation with Command Line); Windows Event ID 4657 (Registry Value Modified); Windows Event ID 4663 (File Auditing - Object Access)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor creation of scheduled tasks (Event ID 4698) or other auto-run mechanisms (e.g., registry Run keys). If the task/auto-run executes a command that calls a binary without a full path (e.g., 'python script.py', 'net group'), investigate the effective PATH environment at the time of execution or user context. Correlate with PATH modifications (Event ID 4657) or placement of correspondingly named malicious binaries (Event ID 4663) in directories that would be prioritized by the compromised PATH. Flag tasks whose execution leads to a process (Event ID 4688) running from an unexpected, hijacked path."
          },
          "A process, executing from a non-standard path due to suspected PATH hijacking and named like a common system binary, initiates outbound network connections to untrusted destinations or exhibits C2-like beaconing.": {
            "Data": "Windows Event ID 4688 (Process Creation with Command Line); Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "First, identify processes executing from anomalous paths matching system binary names (via Event ID 4688 analysis). Correlate these host-based events (PID, timestamp, host IP) with network connection logs (Zeek conn.log). Filter for outbound connections from the identified host/process to external IPs not on organizational allowlists. Analyze connection patterns (e.g., regular intervals using time series analysis for beaconing, unusual ports, high data volume using descriptive statistics) or join destination IPs with CTI feeds. This helps confirm malicious intent of a persistent hijacked process."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary escalating privileges by manipulating environment variables? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1574.007 - Path Interception by PATH Environment Variable": {
          "Detection of known privilege escalation tools or specific malicious binaries (by hash) that exploit PATH hijacking, found in user-writable directories and named after common system utilities, subsequently executed by a higher-privileged process.": {
            "Data": "Windows Event ID 4663 (File Auditing - Object Access); Windows Event ID 4688 (Process Creation with Command Line)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor file creation (Event ID 4663 with 'WriteData' or 'AddFile' access) in user-writable directories for executables matching hashes of known PATH-hijacking privilege escalation tools or malware components. Alert if such a file is created, especially if named after a system utility (e.g., 'net.exe', 'cmd.exe'). Correlate with subsequent execution (Event ID 4688) of this file by a higher-privileged process (e.g., SYSTEM, Administrator) by analyzing parent-child process relationships and user contexts."
          },
          "A sequence where a user-level process modifies the PATH environment variable or places a malicious binary, followed by a higher-privileged process (e.g., a service, scheduled task running as SYSTEM) executing a command that resolves via the manipulated PATH to the user-controlled binary.": {
            "Data": "Windows Event ID 4688 (Process Creation with Command Line); Windows Event ID 4657 (Registry Value Modified); Windows Event ID 4663 (File Auditing - Object Access)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor PATH modifications (Event ID 4657 or process-specific environment changes if logs exist) and file creations (Event ID 4663) by low-privilege processes in user-writable directories. Track process lineage using Event ID 4688. Identify instances where a low-privilege process (A) creates a malicious binary (e.g., 'fake_utility.exe') or modifies PATH, and subsequently, a high-privilege process (B) attempts to execute a command (e.g., 'fake_utility.exe' without full path) which resolves to the user-writable directory due to PATH. Analyze command lines of privileged processes for calls to binaries without full paths."
          },
          "A privileged system process (e.g., running as SYSTEM, Administrator) unexpectedly spawning a child process that executes from a user-writable directory (e.g., %TEMP%, %APPDATA%) where the child process name matches a common system utility, and this execution path is inconsistent with the parent's typical behavior or known safe configurations.": {
            "Data": "Windows Event ID 4688 (Process Creation with Command Line)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Event ID 4688). Filter for child processes spawned by known privileged parent processes (e.g., 'services.exe', 'svchost.exe', 'taskeng.exe' running as SYSTEM). If the child process's image path ('NewProcessName' field) points to a user-writable directory (e.g., 'C:\\Users\\...', 'C:\\ProgramData\\Temp') AND its filename is a common system binary (e.g., 'net.exe', 'cmd.exe', 'powershell.exe'), flag as highly suspicious. Baseline normal child processes and their paths for these privileged parents using frequency analysis. Use IQR or percentile analysis on child process path locations to detect outliers."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary evading defenses by manipulating environment variables? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1574.007 - Path Interception by PATH Environment Variable": {
          "Execution of binaries with names identical to legitimate security tools or critical system utilities (e.g., Sysmon.exe, Procmon.exe, Autoruns.exe, taskkill.exe) but from unexpected, user-controlled paths, whose hashes match known malicious tools or are unsigned/unexpected.": {
            "Data": "Windows Event ID 4688 (Process Creation with Command Line)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process executions (Event ID 4688). Identify processes whose names match common security tools or critical system utilities. If the execution path is non-standard (e.g., not 'C:\\Program Files', not 'C:\\Windows\\System32') and the binary's hash matches a known malicious implant, or is unsigned when the legitimate version is signed, or has other suspicious attributes (e.g., compilation timestamp), flag for defense evasion. Maintain a list of critical tool names and their legitimate paths, hashes, and signing information."
          },
          "Placement of a malicious binary, named after a common system utility or a benign whitelisted application, in a directory that is searched earlier in the PATH than the legitimate application's directory, to masquerade its execution and bypass path-based whitelisting.": {
            "Data": "Windows Event ID 4663 (File Auditing - Object Access); Windows Event ID 4688 (Process Creation with Command Line); Windows Event ID 4657 (Registry Value Modified)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor file creation (Event ID 4663 with 'WriteData' or 'AddFile' access) of executables in directories like '%APPDATA%', '%TEMP%', or custom directories prepended to PATH (identified via Event ID 4657). If the filename matches a common system utility (e.g., 'powershell.exe', 'certutil.exe', 'net.exe') or an application often whitelisted by security products, investigate. Correlate with subsequent executions (Event ID 4688) of this filename without a full path, where the resolved path is the masquerading location. Look for patterns where scripts or applications call these utilities by name, inadvertently picking up the malicious version. Use correlation analysis to link file creation to subsequent execution by a legitimate-looking parent process."
          },
          "A process command line invoking a binary by name only (e.g., 'net user ...', 'findstr /i error'), where the resolved executed binary path (from Event ID 4688 'NewProcessName') is a non-standard, user-writable location instead of the expected system directory, suggesting an attempt to bypass path-based detection or whitelisting.": {
            "Data": "Windows Event ID 4688 (Process Creation with Command Line)",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process creation events (Event ID 4688). Focus on events where the 'CommandLine' field shows a binary being called by name only (e.g., starts with 'net ', 'findstr ', 'python ', but not 'C:\\...\\net.exe'). Compare this with the actual 'NewProcessName' (full image path). If the image path points to a user-writable or recently created directory that is not the standard location for that binary, flag as potential PATH hijacking for defense evasion. Use entropy measures on the directory path string component or regression analysis against historical data to identify highly unusual execution locations for common utilities."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```