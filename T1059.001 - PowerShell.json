```json
[
  {
    "Is the adversary executing malicious code on the network using PowerShell? (TA0002 - Execution)": {
      "Indicators": {
        "T1059.001 - PowerShell": {
          "Execution of PowerShell scripts matching known-malicious file hashes or initiating network connections to known malicious IPs or domains.": {
            "Data": "Windows Event ID 4104; Windows Event ID 4688; Zeek conn.log; Zeek dns.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "For every script block logged in Windows Event ID 4104, calculate its hash and inner join the results against a threat intelligence feed of known-malicious PowerShell script hashes. Additionally, parse script blocks to extract IPs and domains, correlating them against CTI feeds. Separately, correlate PowerShell process creation events (Windows Event ID 4688) with subsequent network connections (Zeek conn.log) and DNS queries (Zeek dns.log) from the same host, alerting on any connection to known C2 infrastructure."
          },
          "PowerShell command execution involving common obfuscation techniques, such as encoded commands, excessive string manipulation, or character replacement to evade signature-based detection.": {
            "Data": "Windows Event ID 4104; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process command lines (Windows Event ID 4688) for arguments indicative of obfuscation, such as '-enc', '-e', '-encodedcommand'. Analyze script block content (Windows Event ID 4104) using regular expressions to detect patterns like Base64 strings, use of '[char]', heavy string concatenation ('+'), the 'Format' operator ('-f'), or the '-join' and '-replace' operators used to construct suspicious commands. Flag scripts exhibiting multiple layers of these techniques."
          },
          "PowerShell command patterns indicative of in-memory payload download and execution, often used to bypass disk-based antivirus and application whitelisting.": {
            "Data": "Windows Event ID 4104; Windows Event ID 4688; Zeek http.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Search PowerShell command lines (Windows Event ID 4688) and script blocks (Windows Event ID 4104) for the specific pattern 'IEX (New-Object Net.WebClient).DownloadString' or similar variants using 'Invoke-Expression', 'Invoke-WebRequest', or '.NET [System.Net.WebClient]'. Correlate these host events with corresponding network events in Zeek http.log to verify payload downloads from external sources. Flag any execution of code downloaded directly into memory."
          },
          "The PowerShell execution engine (System.Management.Automation.dll) being loaded by an unusual parent process, indicating process injection or masquerading.": {
            "Data": "Windows Event ID 4688; Sysmon Event ID 7",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for the loading of 'System.Management.Automation.dll' using Sysmon Event ID 7 (Image Load). For each load event, identify the loading process and its parent process using Windows Event ID 4688 or Sysmon Event ID 1 (Process Creation). Establish a baseline of normal process ancestry for PowerShell (e.g., explorer.exe -> powershell.exe). Use frequency analysis and correlation to identify and alert on rare or anomalous parent-child relationships, such as WINWORD.EXE, EXCEL.EXE, or a web browser spawning a process that loads the PowerShell engine."
          },
          "Anomalous PowerShell execution context, such as bypassing execution policies, running with hidden windows, or execution on systems with no history of legitimate administrative PowerShell usage.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4104; Windows Event ID 4105",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor process command lines (Windows Event ID 4688) for arguments that alter the default secure environment, such as '-ExecutionPolicy Bypass', '-NoProfile', '-NonInteractive', and '-WindowStyle Hidden'. Use time series analysis to baseline PowerShell activity per host or user group and flag execution on systems where it is historically absent (e.g., specific server roles, user workstations). Monitor Windows Event ID 4105 for unauthorized changes to 'ExecutionPolicy' and correlate with script content from Event ID 4104 to understand the intent."
          },
          "PowerShell script blocks exhibiting statistically anomalous characteristics compared to a baseline of legitimate scripts, such as high entropy or unusual character frequency distributions.": {
            "Data": "Windows Event ID 4104",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "For each script block captured in Windows Event ID 4104, calculate its Shannon entropy and character frequency distribution. Establish a baseline of these metrics using known-good administrative and system scripts. Use Inter-Quartile Range (IQR) or Z-scores to identify script blocks with significantly higher entropy, which often indicates packed or encrypted payloads. Similarly, flag scripts with an unusually high frequency of characters common in obfuscation (e.g., '(', ')', '+', ''', '[', ']', ';') compared to the baseline. A linear regression model can correlate script length with complexity to find outliers."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```