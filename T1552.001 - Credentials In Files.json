```json
[
  {
    "Has the adversary accessed credentials stored in files? (TA0006 - Credential Access)": {
      "Indicators": {
        "T1552.001 - Credentials In Files": {
          "Execution of processes with file hashes matching known credential harvesting scripts or tools.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously compare the process hashes logged in Windows Event ID 4688 (Process Creation) against a cyber threat intelligence (CTI) feed of file hashes for known credential harvesting tools and scripts (e.g., LaZagne, Mimikatz variants, PowerSploit modules). Generate a high-priority alert on any match for immediate investigation."
          },
          "Execution of common command-line utilities with argument patterns indicative of searching for credentials, or direct access to specific files known to store credentials.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for command-line arguments of utilities like `findstr.exe`, `grep`, `type`, `cat`, or `Get-Content` that include keywords ('password', 'pwd', 'secret', 'api_key', 'token') or regular expressions matching credential formats. Concurrently, monitor Windows Event ID 4663 (Object Access) for direct read access by unusual processes to specific sensitive files like `web.config`, `id_rsa`, `credentials.xml`, `*.kdbx`, or GPP-related `*.xml` files in SYSVOL."
          },
          "A single process or user script accessing an unusually high number of files with sensitive extensions (e.g., .config, .xml, .yml, .json, .sh, .pem) across multiple directories in a short time frame.": {
            "Data": "Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Aggregate file read events (Windows Event ID 4663, Object Type: File) by the source Process ID and User Account over short time windows (e.g., 5 minutes). Establish a baseline for the number and diversity of files with sensitive extensions accessed by normal processes/users. Use statistical methods like Inter-Quartile Range (IQR) or Z-scores on the count of unique files accessed per time window to detect outliers. A process rapidly reading dozens of `.config` files is a strong indicator of credential hunting."
          },
          "Anomalous process chains where a process spawned from a web server or remote access service subsequently accesses multiple files potentially containing credentials.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4663; Zeek conn.log",
            "Data Platform": "Servers, Network devices, Endpoints",
            "NAI": "Insert site-specific NAI here",
            "Action": "Reconstruct process trees using parent and child process information from Windows Event ID 4688. Identify parent processes corresponding to network services (e.g., `w3wp.exe`, `sshd.exe`, `httpd.exe`), potentially correlating with ingress traffic from Zeek conn.log. Analyze the child processes spawned by these parents for subsequent file access activity (Windows Event ID 4663). Use correlation analysis to flag instances where these child processes access a high volume or unusual type of sensitive files (e.g., `web.config`, `*.pem`, `*.ps1`), as this indicates a compromised service is being used to hunt for credentials."
          },
          "A user account accessing credential-related files or configuration files that are outside the scope of their established access history or peer group baseline.": {
            "Data": "Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Develop user-specific baselines of 'normal' file access patterns by profiling historical Windows Event ID 4663 data, focusing on file paths, object names, and process names. Additionally, create peer group baselines (e.g., for 'Developers', 'Marketing'). Monitor for significant deviations, such as a user accessing sensitive file types or directories for the first time. Use linear regression to detect trend changes or clustering algorithms to identify users whose file access behavior deviates significantly from their peer group, indicating potential account misuse or compromise."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```