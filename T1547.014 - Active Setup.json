
[
  {
    "Is the adversary maintaining persistence via Active Setup? (TA0003 - Persistence)": {
      "Indicators": {
        "T1547.014 - Active Setup": {
          "Active Setup 'StubPath' registry value contains a known malicious command or points to a file whose name is a known indicator of compromise.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4657 for modifications to `StubPath` values under `HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\`. Compare the full `StubPath` string and any executable filenames against a threat intelligence feed of known malicious commands and filenames. Correlate with process creation events (Windows Event ID 4688) to confirm execution. Alert on any match."
          },
          "A new Active Setup entry is created where the 'StubPath' value executes a scripting interpreter or an executable from a non-standard, user-writable directory.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor registry modification events (Windows Event IDs 4657, 4663) in `HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\`. Use regular expressions to flag `StubPath` values that invoke scripting interpreters (e.g., powershell.exe, cmd.exe, mshta.exe, wscript.exe), especially with suspicious arguments like `-enc`, `-nop`, or `-w hidden`. Also, flag `StubPath` values pointing to executables in atypical locations such as `%APPDATA%`, `%TEMP%`, `C:\\Users\\Public\\`, or other world-writable directories. Correlate creation of these registry keys with recent file write events in the same directories."
          },
          "A statistically rare or previously unseen process is executed upon user login, where the execution is consistent with Active Setup, and the action deviates from established system baselines.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Collect process creation logs (Windows Event ID 4688) immediately following user logon events across the environment. Establish a baseline of all normal processes, file paths, and parent-child relationships that occur at login using descriptive statistics and frequency analysis. Use statistical methods (e.g., percentile ranking, Inter-Quartile Range) to identify processes that are new or rare outliers. Investigate these outliers by examining their command line and parent process (e.g., `runonce.exe`, `explorer.exe`) to determine if they originate from an Active Setup StubPath."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary escalating privileges via Active Setup? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1547.014 - Active Setup": {
          "Active Setup 'StubPath' points to a file or contains command-line arguments matching the names or signatures of known privilege escalation or UAC bypass tools.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor `StubPath` value modifications (Windows Event ID 4657) and resulting process command lines (Windows Event ID 4688). Compare the executable names and full command-line arguments against a curated list of known UAC bypass and privilege escalation tool filenames and command-line IOCs (e.g., `cmstp.exe` with a malicious INF, `fodhelper.exe` abuse, `eventvwr.exe` hijacking). Maintain and regularly update this list from threat intelligence sources and alert on any match."
          },
          "The Active Setup 'StubPath' command uses a legitimate system binary to execute code in a pattern characteristic of a UAC bypass technique.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze `StubPath` modifications (Windows Event ID 4657) and subsequent process executions (Windows Event ID 4688) for patterns associated with UAC bypasses. Look for system binaries that auto-elevate (e.g., `sdclt.exe`, `fodhelper.exe`, `computerdefaults.exe`) being called with arguments that point to attacker-controlled registry keys or locations. Use correlation analysis to link the Active Setup registry modification to the launch of the system binary and any subsequent suspicious child processes or command-line arguments."
          },
          "A process launched via Active Setup at user login performs high-privilege actions inconsistent with the user's normal context, such as modifying protected registry locations, creating system services, or altering system files.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4657; Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "First, identify a rare process launch at login using behavioral analysis (as described in the Persistence IR). Then, using the Process ID from the suspicious process creation event (Windows Event ID 4688), hunt for subsequent events performed by that same process. Search for high-privilege actions like modifications to HKLM registry keys (Windows Event IDs 4657, 4663), writing files to `C:\\Windows\\System32` (if file auditing is enabled), or creating/modifying system services. The sequence of a user-context login spawn performing administrative actions is a strong behavioral indicator of successful privilege escalation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
