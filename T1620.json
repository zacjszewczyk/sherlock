[
    {
        "information_requirement": "Is the adversary evading defenses using reflective code loading?",
        "tactic_id": "TA0005",
        "tactic_name": "Defense Evasion",
        "indicators": [
            {
                "technique_id": "T1620",
                "name": "Reflective Code Loading",
                "evidence": [
                    {
                        "description": "Creation of named pipes matching patterns used by known C2 frameworks that employ reflective loading for post-exploitation activities.",
                        "data_sources": [
                            "Windows Event ID 17 (Sysmon)",
                            "Windows Event ID 18 (Sysmon)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor Sysmon Event ID 17 (Pipe Created) and 18 (Pipe Connected) for pipe names matching regular expressions of known malicious C2 patterns (e.g., `^\\\\msse-[0-9]+-server$`, `^\\\\postex_[a-f0-9]+$`). Correlate the creating process (from Event ID 17) with its parent process to identify suspicious origins (e.g., an Office application spawning a child that creates the pipe). Alert on matches and investigate the associated processes' full activity chain."
                    },
                    {
                        "description": "Execution of commands, particularly via scripting interpreters like PowerShell, containing specific syntax and arguments known to be used for in-memory .NET assembly loading.",
                        "data_sources": [
                            "Windows Event ID 4688",
                            "Windows Event ID 1 (Sysmon)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor process creation command lines (Windows Event ID 4688, Sysmon Event ID 1) for patterns indicative of reflective loading. Focus on PowerShell commands containing `[System.Reflection.Assembly]::Load`, `IEX(New-Object Net.WebClient).DownloadString`, or large base64-encoded strings. Calculate the entropy of command-line arguments; commands with high entropy are more likely to contain packed or encoded payloads. Use regression analysis to correlate high-entropy PowerShell commands with subsequent suspicious network or file system activity."
                    },
                    {
                        "description": "A process unexpectedly loads the .NET Common Language Runtime (CLR) or other dynamically-linked libraries not typically associated with its normal function.",
                        "data_sources": [
                            "Windows Event ID 7 (Sysmon)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Establish a baseline of legitimate module loads (DLLs) for common processes across the environment using historical Sysmon Event ID 7 data. Monitor for deviations from this baseline, specifically alerting when core .NET modules (e.g., `clr.dll`, `mscoree.dll`, `System.Management.Automation.dll`) are loaded by non-.NET native processes (e.g., `notepad.exe`, `svchost.exe`, common third-party applications). Use frequency analysis on process/module pairs to identify rare combinations requiring investigation."
                    },
                    {
                        "description": "An outbound network connection is initiated by a process that is not backed by a corresponding executable file on disk, or whose image path is suspicious.",
                        "data_sources": [
                            "Windows Event ID 1 (Sysmon)",
                            "Windows Event ID 3 (Sysmon)",
                            "Zeek conn.log"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers",
                            "Network devices"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Correlate Sysmon Event ID 3 (Network Connection) with the originating process's creation event (Sysmon Event ID 1) using the `ProcessGuid`. Investigate any network connections originating from a process where the `Image` field in the creation event is empty/null or points to a non-standard executable path (e.g., temp directories, user profiles). Further correlate with Zeek conn.log to analyze the destination IP reputation, port, and data volume. Use descriptive statistics to identify processes that rarely make network connections but suddenly initiate one."
                    },
                    {
                        "description": "A sequence of events indicates cross-process memory injection, where a source process writes to a remote process and then creates a thread within it, a common delivery mechanism for reflectively loaded code.",
                        "data_sources": [
                            "Windows Event ID 8 (Sysmon)",
                            "Windows Event ID 10 (Sysmon)"
                        ],
                        "data_platforms": [
                            "Endpoints",
                            "Servers"
                        ],
                        "nai": "Insert site-specific NAI here",
                        "action": "Monitor for a sequence of Sysmon events indicating cross-process injection: 1. A source process opens a handle to a target process with write permissions (Event ID 10). 2. The source process then creates a remote thread in the target process (Event ID 8). Investigate instances where the target process is a legitimate system process (e.g., `svchost.exe`, `explorer.exe`) and the source process is unexpected (e.g., Word, Excel, PowerShell). Use time series analysis or correlation rules to link these injection events with preceding suspicious downloads or subsequent command and control traffic."
                    }
                ]
            }
        ],
        "version": "2.1",
        "date_created": "2025-05-04",
        "last_updated": "2025-07-20",
        "contributors": [
            "Zachary Szewczyk"
        ]
    }
]
