
[
  {
    "Is the adversary maintaining persistence using login/logout hooks? (TA0003 - Persistence)": {
      "Indicators": {
        "T1037.002 - Login Hook": {
          "Known malicious files (identified by hash) or script names are found in common logon/startup locations (e.g., registry Run keys, Startup folders).": {
            "Data": "Windows Event ID 4688; Windows Event ID 4663; Windows Event ID 4657",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Continuously monitor process creation events (Event ID 4688) for files executing from known startup locations. Hash the executables and cross-reference against a CTI feed of known malware hashes. Additionally, monitor file and registry modification events (Event IDs 4663, 4657) in these locations for the creation of files/keys with names matching known malicious persistence tools or scripts. Alert on any matches."
          },
          "Processes launched at logon/startup exhibit command-line patterns commonly associated with malicious scripts or living-off-the-land techniques for persistence.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze command lines of processes created at logon/startup (Event ID 4688). Use regular expressions to search for patterns such as: script interpreters (`powershell.exe`, `cscript.exe`, `wscript.exe`, `mshta.exe`) executing code from unusual/non-standard locations (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public); PowerShell commands with obfuscation or bypass flags (`-enc`, `-nol`, `-nop`, `-w hidden`); or `reg.exe` commands used to add entries to Run keys. Establish a baseline of normal startup command lines and alert on significant deviations or matches."
          },
          "Modification of logon/startup persistence locations (registry keys, startup folders, scheduled tasks) by user accounts or processes not associated with standard software installation or administrative activity.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4663; Windows Event ID 4698",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor for modification events (Windows Event IDs 4657, 4663, 4698) in critical persistence locations. Profile the typical accounts (`SubjectUserName`) and parent processes (`ProcessName`) that make these changes (e.g., `msiexec.exe`, `TrustedInstaller.exe`, administrator accounts). Flag modifications made by standard user accounts, user-spawned processes (e.g., `explorer.exe`, `winword.exe`), or from unusual network logon sessions. Use frequency analysis and correlation to identify accounts or processes that are outliers in modifying these locations."
          },
          "A process launched at logon or system startup initiates a network connection to an external or previously unseen internal destination.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate process creation events at logon/startup (Event ID 4688) with network connection logs (Zeek conn.log). Maintain a baseline of legitimate startup processes and the destinations they typically contact. Alert on any startup process that initiates a connection to an external IP address, a rare domain (using DGA detection or domain age checks), or an internal server it has not previously communicated with. Use linear regression or time series analysis to detect unusual volumes or frequencies of data transfer from these processes."
          },
          "A script or executable launched at logon/startup is unsigned, has low prevalence across the enterprise, or has high file entropy, indicating potential packing or obfuscation.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "For all processes created from logon/startup locations (Event ID 4688), verify the digital signature of the executable. Calculate the prevalence of each executable (by hash) across the environment. Measure the file entropy of the executables. Alert on processes that are unsigned AND have low prevalence (e.g., running on < 1% of endpoints) OR have high entropy (>7.2). Use descriptive statistics and box-plots on file prevalence and entropy metrics to identify significant outliers."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Has the adversary elevated privileges using login/logout hooks? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1037.002 - Login Hook": {
          "A known privilege escalation exploit script or tool (identified by name or hash) is placed in a startup location that is writable by low-privileged users but executed by a high-privileged account.": {
            "Data": "Windows Event ID 4663; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Identify startup locations with insecure permissions (e.g., world-writable directories in the system PATH, insecure service executables set to run at startup). Monitor file creation events (Event ID 4663) in these specific locations. Hash any new files and check against a CTI feed of known privilege escalation tools. Also, check file names against a list of known tool names. Correlate with subsequent high-privilege execution of that file at the next logon/reboot (Event ID 4688)."
          },
          "A script launched at logon/startup contains command-line arguments or content indicative of common UAC bypass techniques or other privilege escalation patterns.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor the command lines of processes created at logon/startup (Event ID 4688). Use regular expressions to detect patterns associated with known privilege escalation techniques, such as the use of `cmstp.exe` with a malicious `.inf` file, `fodhelper.exe` or `eventvwr.exe` to launch a command in a high-integrity context, or other known UAC bypass methods. Correlate detections with the user context of the parent process to identify exploitation attempts."
          },
          "A low-privileged user account modifies a file or registry key in a startup location, which is subsequently executed with elevated privileges (System, Administrator) upon the next logon or system boot.": {
            "Data": "Windows Event ID 4657; Windows Event ID 4663; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Implement a sequence-based alert. Step 1: Detect a file or registry modification (Event ID 4663, 4657) in a known startup location where the modifying account (`SubjectUserName`) is a standard, non-administrative user. Step 2: At the next logon/boot event on that host, detect a process creation (Event ID 4688) originating from the modified file/key path. Step 3: Verify the new process is running with elevated privileges (e.g., `TokenElevationType` is `Type1` or the process owner is `SYSTEM`). Use correlation analysis to link the modification event (user, path, timestamp) with the privileged execution event (path, privileges, timestamp)."
          },
          "A process chain originating from a logon/startup item shows a privilege context switch, where a child process is launched with higher privileges than its parent process.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze process creation chains by linking parent process IDs to child process IDs in Windows Event ID 4688, starting with processes known to launch at startup. For each parent-child pair in the chain, compare the security context (user account, integrity level). Flag any instance where a child process is created with a higher privilege level than its parent (e.g., a process running as a standard user spawns a process running as SYSTEM or Administrator). This is a strong, direct indicator of a successful privilege escalation exploit."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
