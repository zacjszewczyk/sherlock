```json
[
  {
    "Is the adversary using trusted system utilities to evade defenses? (TA0005 - Defense-Evasion)": {
      "Indicators": {
        "T1127.001 - MSBuild": {
          "MSBuild.exe process execution involving project files with known malicious hashes or initiating network connections to known malicious C2 infrastructure.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "From Windows Event ID 4688, extract file paths of project files (.proj, .xml, .csproj, etc.) passed to MSBuild.exe. If file content is accessible, compute hashes and compare against a threat intelligence feed of known malicious file hashes. Concurrently, correlate MSBuild.exe execution times and source hosts with network connection logs (Zeek conn.log). Cross-reference all destination IPs and domains against a high-confidence CTI feed for known C2 servers or malicious infrastructure. Alert on any confirmed selector match."
          },
          "Execution of MSBuild.exe with command-line patterns characteristic of malicious use, such as targeting non-standard project files (e.g., .txt, .xml) located in atypical directories (e.g., %TEMP%, %APPDATA%).": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor and parse command lines for all MSBuild.exe executions from Windows Event ID 4688. Establish a baseline of legitimate project file paths and extensions (e.g., .csproj, .sln in developer directories). Flag executions that target files with unusual extensions (.xml, .txt) or are located in user-writable, non-developer directories like C:\\Users\\Public\\, %APPDATA%, or %TEMP%. Use frequency analysis and string matching to identify command lines that contain inline tasks or suspicious properties passed with '/p:' to find rare and potentially malicious patterns."
          },
          "MSBuild.exe executed by an anomalous parent process (e.g., a Microsoft Office application, wscript.exe, powershell.exe) or subsequently launching suspicious child processes.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "From Windows Event ID 4688, create a model of normal parent-child process relationships for MSBuild.exe. Legitimate parents are typically developer tools (devenv.exe) or system processes. Use descriptive statistics (frequency counts, percentile ranking) to identify executions where the parent process is rare or indicative of a malicious execution chain (e.g., WINWORD.EXE, OUTLOOK.EXE, wscript.exe). Similarly, track child processes launched by MSBuild.exe and alert if they are command shells (cmd.exe, powershell.exe) or other tools not associated with a standard build process. Use correlation analysis to link parent and child activity."
          },
          "MSBuild.exe initiating any outbound network connection, especially with traffic patterns indicative of C2 communication or data exfiltration.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate MSBuild.exe process execution (Windows Event ID 4688) with network connection logs (Zeek conn.log) from the same host within a short time window. Since MSBuild.exe should rarely initiate external network connections during typical operations (outside of package restoration from trusted sources), treat any connection to a non-repository, low-reputation, or rare destination as a high-priority behavioral anomaly. Further analyze the traffic patterns using time series analysis to detect periodic 'beaconing' (C2) or use descriptive statistics on data transfer volumes (orig_bytes, resp_bytes) to identify sessions with unusually large outbound transfers, which may indicate data exfiltration. An IQR or box-plot analysis of bytes_out can identify statistical outliers."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```