name: T1601.001: Patch System Image
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  Identifies if an adversary has modified network device operating system images or memory to evade defenses. This is achieved by looking for various indicators of compromise, such as OS image hashes matching known-bad threat intelligence or failing vendor-provided integrity checks. The playbook also looks for anomalous behavior patterns that suggest tampering, including unusual command sequences for firmware modification (e.g., file copy, boot config change, log clearing), anomalous file transfers (e.g., from untrusted IPs, using insecure protocols, or outside maintenance windows), the execution of privileged memory-modifying commands, and unauthorized alterations to a device's boot configuration.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any network device OS images been identified as malicious through hash matching or YARA rule scanning?
  context: |
    This question aims to proactively identify known-bad firmware or implants. By periodically retrieving OS images, calculating their hashes, and comparing them against threat intelligence feeds, we can detect exact matches to known malicious images. Concurrently, scanning these images with YARA rules designed to find signatures of firmware malware (like SYNful Knock) allows for the detection of malware families even if the hash is unique. A match on either a hash or a YARA rule is a strong indicator of a compromised device.
  answer_sources:
  - Network device OS image files
  - Threat Intelligence Hash Feeds
  - Firmware Malware YARA Rules
  - Zeek files.log
  - Zeek tftp.log
  - Configuration management servers
  - Core network switches and routers
  - Perimeter firewalls
  - TFTP/FTP servers
  - Centralized file analysis sandbox
  range: last 90 days
  queries:
  - pseudocode: |
      FOREACH device in critical_devices:
        image = retrieve_running_image(device)
        hash = sha256(image)
        IF hash in known_bad_hashes:
          ALERT("Known-bad hash detected on device")
        yara_matches = scan_with_yara(image, firmware_rules)
        IF yara_matches:
          ALERT("Firmware malware YARA rule match on device")
- question: Have any anomalous network device OS image file transfers been detected based on file size or source IP address novelty?
  context: |
    Adversaries may introduce slightly modified firmware images, resulting in file sizes that differ from standard, legitimate images. This question seeks to identify such outliers by baselining the normal distribution of image file sizes for each device type. An alert on a file size in the upper percentiles can indicate a bloated, malicious image. Additionally, firmware updates should originate from a small, controlled set of management servers. A transfer from a new, previously unseen IP address is highly suspicious and warrants immediate investigation.
  answer_sources:
  - Network device OS image files
  - Threat Intelligence Hash Feeds
  - Firmware Malware YARA Rules
  - Zeek files.log
  - Zeek tftp.log
  - Configuration management servers
  - Core network switches and routers
  - Perimeter firewalls
  - TFTP/FTP servers
  - Centralized file analysis sandbox
  range: last 90 days
  queries:
  - pseudocode: |
      size_baseline = create_filesize_baseline_per_devicetype("*.bin, *.img")
      source_ip_baseline = create_source_ip_baseline("*.bin, *.img")
      FOREACH file_transfer in zeek_files_log:
        IF file_transfer.size > size_baseline[file_transfer.devicetype].p99:
          ALERT("Anomalous file size for firmware transfer")
        IF file_transfer.source_ip NOT IN source_ip_baseline:
          ALERT("Firmware transfer from new source IP")
- question: Has a time-series anomaly detection model identified a statistically significant deviation from normal firmware transfer patterns?
  context: |
    Firmware updates often occur on a predictable schedule (e.g., during planned maintenance windows). This question uses a time-series model (like SARIMA) to learn these normal seasonal patterns. The model can then identify spikes in transfer activity that occur outside of these expected times. Such an anomaly is a strong indicator of illicit activity, as adversaries may not be aware of or adhere to an organization's maintenance schedules.
  answer_sources:
  - Network device OS image files
  - Threat Intelligence Hash Feeds
  - Firmware Malware YARA Rules
  - Zeek files.log
  - Zeek tftp.log
  - Configuration management servers
  - Core network switches and routers
  - Perimeter firewalls
  - TFTP/FTP servers
  - Centralized file analysis sandbox
  range: last 90 days
  queries:
  - pseudocode: |
      model = train_sarima_model(historical_zeek_files_log.hourly_counts)
      current_hourly_count = get_current_hourly_count(zeek_files_log)
      is_anomaly = model.predict(current_hourly_count)
      IF is_anomaly:
        ALERT("Anomalous spike in firmware transfer activity detected")
- question: Does the hash of any running network device OS image mismatch the approved vendor-provided 'golden hash' for that version?
  context: |
    This is a fundamental integrity check. A 'golden hash' repository contains the official, vendor-supplied cryptographic hashes for all approved firmware versions. By periodically retrieving the running image from a device and comparing its calculated hash to the corresponding golden hash, we can definitively determine if the image has been altered in any way. A mismatch is a high-confidence indicator of unauthorized modification and a potential compromise.
  answer_sources:
  - Network device OS image files
  - Vendor Firmware Hash Repository
  - Cisco Syslog Message ID %PLATFORM-1-IMAGE_INTEGRITY_FAIL
  - TACACS+ command accounting logs
  - Configuration Management Database (CMDB)
  - Golden Image Repository server
  - Critical network infrastructure (core routers, edge firewalls)
  - Automated configuration management platforms
  range: last 90 days
  queries:
  - pseudocode: |
      golden_hashes = load_golden_hash_repository()
      FOREACH device in critical_devices:
        running_image = get_running_image(device)
        running_hash = sha256(running_image)
        approved_version = get_approved_version(device)
        golden_hash = golden_hashes[approved_version]
        IF running_hash != golden_hash:
          ALERT("Golden hash mismatch on device")
- question: Have any built-in image integrity failure alerts been generated, or has there been anomalous 'show version' command usage potentially indicating reconnaissance?
  context: |
    Many network devices have built-in mechanisms to verify image integrity, which generate specific syslog messages upon failure. These alerts are rare and critical, warranting an immediate investigation. Additionally, after planting a backdoor, an adversary might repeatedly use commands like 'show version' to confirm their modification was successful. This question looks for unusual spikes in the usage of such commands by a specific user, which could serve as a weaker, secondary signal of post-compromise reconnaissance.
  answer_sources:
  - Network device OS image files
  - Vendor Firmware Hash Repository
  - Cisco Syslog Message ID %PLATFORM-1-IMAGE_INTEGRITY_FAIL
  - TACACS+ command accounting logs
  - Configuration Management Database (CMDB)
  - Golden Image Repository server
  - Critical network infrastructure (core routers, edge firewalls)
  - Automated configuration management platforms
  range: last 90 days
  queries:
  - pseudocode: |
      MONITOR syslog for "%PLATFORM-1-IMAGE_INTEGRITY_FAIL" -> ALERT
      version_cmd_baseline = create_cmd_baseline_per_user("show version")
      FOREACH user in admin_users:
        IF user.hourly_count("show version") > version_cmd_baseline[user].mean + 3*stddev:
          ALERT("Anomalous 'show version' command frequency for user")
- question: Has a machine learning model classified any configuration change as 'high-risk', prompting an on-demand image hash verification?
  context: |
    Instead of checking all devices constantly, this question describes a risk-based approach to trigger integrity checks. A classification model can be trained on various features of a configuration change event (e.g., user role, time of day, commands used) to predict its risk level. If a change is classified as 'high-risk', it automatically triggers a targeted, immediate hash verification of the device's image. This prioritizes investigative effort on the most suspicious events.
  answer_sources:
  - Network device OS image files
  - Vendor Firmware Hash Repository
  - Cisco Syslog Message ID %PLATFORM-1-IMAGE_INTEGRITY_FAIL
  - TACACS+ command accounting logs
  - Configuration Management Database (CMDB)
  - Golden Image Repository server
  - Critical network infrastructure (core routers, edge firewalls)
  - Automated configuration management platforms
  range: last 90 days
  queries:
  - pseudocode: |
      model = train_risk_classifier(historical_config_changes)
      ON new_config_change_event:
        risk_score = model.predict(event_features)
        IF risk_score == 'high-risk':
          trigger_on_demand_hash_check(event.device)
- question: Has any user executed a sequence of commands indicative of firmware modification, such as file copy, boot variable change, and log clearing, within a short time frame?
  context: |
    This question looks for a classic attack pattern. Adversaries often follow a specific sequence: copy a malicious image to the device, change the boot variables to make the new image persistent, and then clear the logs to hide their tracks. Detecting this specific sequence of command types ('copy', 'boot system', 'clear logging') from a single user in a short window (e.g., 15 minutes) is a high-fidelity indicator of an active compromise attempt.
  answer_sources:
  - Network device syslog
  - TACACS+ command accounting logs
  - RADIUS accounting logs
  - Zeek conn.log
  - Centralized syslog server
  - Authentication, Authorization, and Accounting (AAA) servers
  - Network management jump hosts
  - SIEM platform
  range: last 90 days
  queries:
  - pseudocode: |
      CREATE CORRELATION RULE in SIEM:
      TRIGGER on user_session
      WHEN (event.command matches 'copy *')
      FOLLOWED BY (event.command matches 'boot system *') within 15m
      FOLLOWED BY (event.command matches 'clear logging *') within 15m
      ALERT("Firmware modification command sequence detected")
- question: Have any administrative sessions on network devices shown unusual command entropy, suggesting abnormal activity?
  context: |
    This question applies information theory to detect anomalous user behavior. Shannon entropy can measure the randomness or predictability of commands in a user session. A normal session has a typical entropy. An unusually low entropy might indicate a repetitive, scripted attack, while an unusually high entropy could suggest exploratory, reconnaissance-like behavior. Flagging sessions with entropy scores in the statistical tails (e.g., top or bottom 2%) can help uncover sessions that deviate from a user's normal working patterns.
  answer_sources:
  - Network device syslog
  - TACACS+ command accounting logs
  - RADIUS accounting logs
  - Zeek conn.log
  - Centralized syslog server
  - Authentication, Authorization, and Accounting (AAA) servers
  - Network management jump hosts
  - SIEM platform
  range: last 90 days
  queries:
  - pseudocode: |
      entropy_baseline = create_entropy_baseline_per_user(aaa_logs)
      FOREACH user_session in aaa_logs:
        session_entropy = calculate_shannon_entropy(session.commands)
        IF session_entropy > entropy_baseline[user].p98 OR session_entropy < entropy_baseline[user].p02:
          ALERT("Anomalous command entropy for user session")
- question: Has a sequence-based anomaly detection model (e.g., HMM) identified any low-probability command sequences that deviate from normal administrative behavior?
  context: |
    This question describes a more advanced method than fixed correlation rules. A sequence-based model like a Hidden Markov Model (HMM) can be trained on vast amounts of command-line data to learn the normal probability of transitioning from one command to another. It can then score new, incoming command sequences. A sequence with a very low probability score is one that the model has rarely or never seen before, making it a strong candidate for being a novel or malicious attack pattern.
  answer_sources:
  - Network device syslog
  - TACACS+ command accounting logs
  - RADIUS accounting logs
  - Zeek conn.log
  - Centralized syslog server
  - Authentication, Authorization, and Accounting (AAA) servers
  - Network management jump hosts
  - SIEM platform
  range: last 90 days
  queries:
  - pseudocode: |
      model = train_hmm_model(historical_aaa_command_streams)
      ON new_command_sequence:
        probability = model.score(sequence)
        IF probability < threshold:
          ALERT("Low-probability command sequence detected")
- question: Have any network device OS image transfers occurred using an insecure protocol or originating from an unauthorized IP address?
  context: |
    Firmware management should be a tightly controlled process. This question aims to enforce that policy by defining an allow-list of authorized management servers (IPs) and secure transfer protocols (e.g., SCP, SFTP). Any transfer of a firmware file (e.g., '.bin') that uses an insecure protocol like TFTP or FTP, or that originates from an IP address not on the allow-list, is a significant security violation and a potential sign of an adversary attempting to stage a malicious image.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network device syslog for file transfers
  - Windows Event ID 4688 with command line logging
  - Network Taps/SPAN ports feeding Zeek sensors
  - Management network segments
  - File transfer servers (TFTP, FTP, SCP)
  - Windows management workstations
  range: last 90 days
  queries:
  - pseudocode: |
      allow_list_ips = [...]
      insecure_protocols = ["tftp", "ftp"]
      FOREACH file_transfer in zeek_files_log:
        IF file_transfer.filename matches "*.bin":
          IF file_transfer.protocol in insecure_protocols:
            ALERT("Firmware transfer over insecure protocol")
          IF file_transfer.source_ip NOT IN allow_list_ips:
            ALERT("Firmware transfer from unauthorized IP")
- question: Have there been abnormal spikes in the volume of firmware transfers or transfers between previously unseen source-destination pairs?
  context: |
    This question looks for anomalies in the logistics of firmware transfers. A sudden, large increase in the number of transfers per hour could indicate a widespread, automated attack campaign. Furthermore, legitimate transfers typically occur between a stable set of management servers and network devices. A transfer between a new source-destination pair that has never been seen before could indicate that an adversary has compromised a device and is using it as a staging point to pivot to another.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network device syslog for file transfers
  - Windows Event ID 4688 with command line logging
  - Network Taps/SPAN ports feeding Zeek sensors
  - Management network segments
  - File transfer servers (TFTP, FTP, SCP)
  - Windows management workstations
  range: last 90 days
  queries:
  - pseudocode: |
      volume_baseline = create_hourly_volume_baseline(zeek_logs)
      pair_baseline = create_historical_src_dst_pairs(zeek_logs)
      IF current_hourly_volume > volume_baseline.p99:
        ALERT("Anomalous volume of firmware transfers")
      FOREACH new_transfer in zeek_logs:
        IF (new_transfer.src_ip, new_transfer.dst_ip) NOT IN pair_baseline:
          ALERT("New source-destination pair for firmware transfer")
- question: After accounting for normal maintenance schedules, has an anomaly detection model identified any statistically unusual firmware transfer events?
  context: |
    This question describes a method to reduce false positives from simpler alerting. Time-series decomposition (like STL) can separate a data stream into its trend, seasonal, and residual components. By modeling and removing the predictable seasonal patterns (i.e., regular maintenance windows), we are left with the "residual" noise. Applying an anomaly detection model (like Isolation Forest) to this residual data allows us to find transfers that are statistically unusual even after accounting for normal, scheduled activity, making any alerts much higher confidence.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network device syslog for file transfers
  - Windows Event ID 4688 with command line logging
  - Network Taps/SPAN ports feeding Zeek sensors
  - Management network segments
  - File transfer servers (TFTP, FTP, SCP)
  - Windows management workstations
  range: last 90 days
  queries:
  - pseudocode: |
      time_series = historical_transfer_data(zeek_logs)
      trend, seasonal, residual = stl_decompose(time_series)
      model = train_isolation_forest(historical_residual_data)
      is_anomaly = model.predict(current_residual_data_point)
      IF is_anomaly:
        ALERT("Statistically unusual firmware transfer detected outside of seasonal patterns")
- question: Has a sensitive, memory-modifying command been executed by an unauthorized user or without an associated approved change request?
  context: |
    Commands that can directly 'poke' or manipulate a device's running memory are exceptionally dangerous and should be strictly controlled. This question aims to enforce that control by defining a list of these high-privilege commands and an allow-list of 'super-admins' authorized to use them. Any execution of such a command by a user not on the list, or any execution that cannot be correlated with an approved change ticket in an ITSM system, should be treated as a critical, high-severity alert.
  answer_sources:
  - TACACS+ command authorization logs
  - Network device syslog
  - IT Service Management (ITSM) change records
  - Centralized syslog server
  - AAA servers (TACACS+/RADIUS)
  - ITSM platform (e.g., ServiceNow)
  - Privileged Access Management (PAM) systems
  range: last 90 days
  queries:
  - pseudocode: |
      sensitive_cmds = ["debug memory", "poke", "system-view diag"]
      super_admins = [...]
      ON command_execution_event from TACACS+:
        IF event.command in sensitive_cmds:
          IF event.user NOT IN super_admins:
            ALERT("Unauthorized user executed sensitive command")
          ELSE IF NOT correlate_with_approved_change(event.user, event.device, event.time):
            ALERT("Sensitive command executed without approved change ticket")
- question: Has any authorized administrator shown a statistically significant increase in their personal usage of high-privilege commands?
  context: |
    This question focuses on user behavior analytics for privileged accounts. Even an authorized administrator has a typical pattern of behavior. A sudden and significant increase in their use of dangerous, memory-modifying commands could be an indicator that their account has been compromised and is now being used by an adversary. By creating a personal baseline of command frequency for each admin, we can detect when their activity deviates more than a set number of standard deviations from their own norm.
  answer_sources:
  - TACACS+ command authorization logs
  - Network device syslog
  - IT Service Management (ITSM) change records
  - Centralized syslog server
  - AAA servers (TACACS+/RADIUS)
  - ITSM platform (e.g., ServiceNow)
  - Privileged Access Management (PAM) systems
  range: last 90 days
  queries:
  - pseudocode: |
      baseline = create_per_user_baseline_for_sensitive_cmds(tacacs_logs)
      FOREACH admin in authorized_admins:
        IF admin.daily_cmd_count > baseline[admin].mean + 3*stddev:
          ALERT("Anomalous frequency of sensitive command usage by authorized admin")
- question: Has a machine learning model (One-Class SVM) flagged any high-privilege command execution as anomalous based on its multi-dimensional features?
  context: |
    This question describes an advanced anomaly detection approach that considers multiple event features simultaneously. A One-Class SVM model can be trained on the characteristics of legitimate, authorized executions of high-privilege commands (e.g., user, source IP, time of day, change ticket details). The model learns the multi-dimensional boundary of "normal" activity. Any new command execution that falls outside this learned boundary is flagged as a high-confidence anomaly, even if no single feature on its own would have triggered a simpler rule-based alert.
  answer_sources:
  - TACACS+ command authorization logs
  - Network device syslog
  - IT Service Management (ITSM) change records
  - Centralized syslog server
  - AAA servers (TACACS+/RADIUS)
  - ITSM platform (e.g., ServiceNow)
  - Privileged Access Management (PAM) systems
  range: last 90 days
  queries:
  - pseudocode: |
      model = train_one_class_svm(historical_authorized_sensitive_cmd_events)
      ON new_sensitive_cmd_event:
        is_anomaly = model.predict(event_features)
        IF is_anomaly:
          ALERT("Multi-dimensional anomaly detected for sensitive command execution")
- question: Has a network device's boot configuration been modified without an associated approved change ticket?
  context: |
    Modifying a device's boot system commands is the critical step to make a new, potentially malicious, OS image persistent across reboots. This action should never occur outside of a planned, documented, and approved maintenance activity. This question seeks to detect any configuration change containing boot variable commands and immediately correlate it with ITSM data. If there is no corresponding approved change ticket for that device at that time, the event should be treated as a critical alert.
  answer_sources:
  - Network device configuration files
  - Network device syslog (e.g., Cisco %SYS-5-CONFIG_I)
  - ITSM change records
  - Git commit history for configs
  - Network configuration management servers (e.g., SolarWinds NCM)
  - Centralized syslog server
  - ITSM platform
  - Git repositories for version-controlled configurations
  range: last 90 days
  queries:
  - pseudocode: |
      ON syslog_event contains "%SYS-5-CONFIG_I" and "boot system":
        IF NOT correlate_with_approved_change(event.device, event.time):
          ALERT("Boot configuration changed without approved change ticket")
- question: Has an automated configuration drift analysis detected an unusually significant change in a device's boot configuration compared to its last known-good state?
  context: |
    This question describes a method for quantifying the magnitude of configuration changes over time. By performing a daily 'diff' between a device's current boot configuration and a stored known-good version, we can calculate a 'drift score' based on the number and sensitivity of the changes. While minor drift may be normal, a score that exceeds a high percentile (e.g., 95th) of historical scores indicates a substantial and potentially unauthorized modification to the device's boot process that requires investigation.
  answer_sources:
  - Network device configuration files
  - Network device syslog (e.g., Cisco %SYS-5-CONFIG_I)
  - ITSM change records
  - Git commit history for configs
  - Network configuration management servers (e.g., SolarWinds NCM)
  - Centralized syslog server
  - ITSM platform
  - Git repositories for version-controlled configurations
  range: last 90 days
  queries:
  - pseudocode: |
      drift_baseline = create_drift_score_baseline(historical_config_diffs)
      FOREACH device in critical_devices:
        current_config = get_current_boot_config(device)
        known_good_config = get_known_good_config(device)
        drift_score = calculate_drift(current_config, known_good_config)
        IF drift_score > drift_baseline.p95:
          ALERT("Significant boot configuration drift detected")
- question: Has a boot configuration change been associated with a change ticket that an NLP model classifies as unrelated to firmware upgrades or maintenance?
  context: |
    This question adds a layer of semantic validation to change management. An adversary might perform a malicious boot change but link it to an unrelated or vaguely described change ticket. An NLP model (like BERT) can be trained to classify change tickets by their purpose (e.g., 'Firmware Upgrade', 'ACL Change'). If a boot configuration change is detected and the associated ticket is classified as anything other than 'Firmware Upgrade' or 'Scheduled Maintenance', the mismatch between the action and its justification should be flagged as a high-risk anomaly.
  answer_sources:
  - Network device configuration files
  - Network device syslog (e.g., Cisco %SYS-5-CONFIG_I)
  - ITSM change records
  - Git commit history for configs
  - Network configuration management servers (e.g., SolarWinds NCM)
  - Centralized syslog server
  - ITSM platform
  - Git repositories for version-controlled configurations
  range: last 90 days
  queries:
  - pseudocode: |
      model = train_nlp_ticket_classifier(historical_itsm_tickets)
      ON boot_config_change_event:
        ticket = get_associated_ticket(event)
        ticket_class = model.predict(ticket.description)
        IF ticket_class NOT IN ["Firmware Upgrade", "Scheduled Maintenance"]:
          ALERT("Boot config change associated with unrelated change ticket")