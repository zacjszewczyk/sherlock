name: T1653: Power Settings
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Investigates whether an adversary is maintaining persistence by modifying power settings to prevent a system from sleeping or locking. This can be achieved by executing known malicious processes that modify power settings, using command-line utilities like `powercfg.exe` with specific arguments to disable sleep/hibernate, modifying registry values related to power management, spawning power utilities from unusual parent processes (e.g., Microsoft Word), or correlating power setting changes with the subsequent establishment of suspicious network connections, potentially for command and control.
type: technique
related: TA0003: Persistence
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process known to modify power settings been executed, where its file hash matches a known indicator of compromise?
    context: This question aims to identify the execution of malware that is already known to use power setting modification for persistence. By comparing the file hash of executed processes against threat intelligence feeds, we can quickly detect known threats with high confidence. A match indicates a confirmed malicious file is active on the endpoint.
    answer_sources:
      - Windows Event ID 4688
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) | JOIN file_hash with threat_intel_feed on hash | WHERE threat_intel_match = true | ALERT
  - question: Have `powercfg.exe` or `reg.exe` been executed to modify power settings, where the parent process hash is statistically rare across the enterprise?
    context: This question helps uncover novel or unknown malware by focusing on anomalous behavior. Legitimate administrative actions are often widespread or come from common tools. An execution spawned by a process with a rare hash suggests it might be a custom dropper or script not part of standard operations, warranting investigation.
    answer_sources:
      - Windows Event ID 4688
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) WHERE process_name in ('powercfg.exe', 'reg.exe') | GROUPBY parent_process_hash | COUNT distinct host_id | WHERE count < 5 | ALERT
  - question: Has a machine learning model identified a process modifying power settings as having a high probability of being malicious?
    context: This question leverages a machine learning model to score the likelihood of a process being malicious based on a variety of features. This approach can detect sophisticated threats that might evade simpler symbolic or statistical checks by considering the full context of the execution. A high probability score serves as a strong signal for analyst review.
    answer_sources:
      - Windows Event ID 4688
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | APPLY ml_model to score_malicious_probability | WHERE process_modifies_power_settings AND probability > 0.9 | ALERT
  - question: Has `powercfg.exe` been executed with command-line arguments specifically designed to disable sleep, hibernation, or timeouts?
    context: This question targets the direct and explicit abuse of the `powercfg.exe` utility. Adversaries often use specific command-line flags to turn off power-saving features. Detecting these command patterns provides direct evidence of the T1653 technique, especially when the activity is not part of an authorized configuration change.
    answer_sources:
      - Windows Event ID 4688
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) WHERE process_name = 'powercfg.exe' AND command_line matches regex for '/h off' or '/change standby-timeout 0' | EXCLUDE authorized_changes | ALERT
  - question: Has `powercfg.exe` been executed with a command-line argument combination that is statistically uncommon or was executed by a non-administrative user for the first time?
    context: This question helps find abuse of `powercfg.exe` that doesn't use a known-bad pattern but is still anomalous. By baselining normal administrative usage, any deviation, such as a rare combination of arguments or execution by a standard user, can indicate malicious activity attempting to blend in with legitimate administration.
    answer_sources:
      - Windows Event ID 4688
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) WHERE process_name = 'powercfg.exe' | BASELINE command_line_frequency | WHERE frequency is in top 0.5% rarity OR (is_first_time_for_user AND user_is_not_admin) | ALERT
  - question: Has a time-series anomaly detection model detected a significant deviation in the hourly execution rate of `powercfg.exe` on any given host?
    context: This question aims to detect automated or scripted abuse of `powercfg.exe`. A sudden spike in executions, especially outside of normal business or maintenance hours, can indicate a malicious script running in a loop or as part of an automated attack phase. Time-series analysis can effectively distinguish this from sporadic, legitimate use.
    answer_sources:
      - Windows Event ID 4688
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) WHERE process_name = 'powercfg.exe' | AGGREGATE count by hour per host | APPLY time_series_model | WHERE anomaly_score is high | ALERT
  - question: Have registry keys controlling power settings, screen savers, or hibernation been modified to disable these features?
    context: This question targets persistence achieved through direct registry manipulation. Adversaries may bypass command-line tools and modify the registry to disable power-saving features. Monitoring for specific changes to keys like `HibernateEnabled` or `ScreenSaveActive` provides direct evidence of this technique.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events (EID 4657) WHERE (target_key = 'HKLM\\...\\HibernateEnabled' AND value = 0) OR (target_key = 'HKCU\\...\\ScreenSaveActive' AND value = 0) | ALERT
  - question: Have power-related registry keys been modified by a statistically rare user or process, or via a `reg.exe` command with anomalous command-line entropy?
    context: This question seeks to identify unusual registry modifications that might indicate malicious activity. Legitimate changes are typically performed by specific system accounts or administrative tools. A modification from an unexpected source, or one using a complex and unusual command line, is suspicious and could point to an adversary's attempt to set up persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events for power_keys | BASELINE source_process and user | WHERE source is rare | OR SEARCH process_events for reg.exe | CALCULATE cmd_line_entropy | WHERE entropy is outlier | ALERT
  - question: Has a clustering algorithm identified a registry modification event related to power settings as an outlier or part of a small, distinct cluster?
    context: This question uses unsupervised machine learning to find anomalous registry modifications without pre-defined rules. By grouping all registry modification events based on features like process, user, and time, the algorithm can isolate events that do not fit into large, common clusters of activity. These outliers often represent rare and potentially malicious behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - All Endpoints (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events for power_keys | EXTRACT features (process, user, time, parent) | APPLY DBSCAN clustering | WHERE cluster = 'noise' or cluster_size is small | ALERT
  - question: Has `powercfg.exe` been executed by a parent process that is not on a pre-defined allowlist of standard shells or administrative tools?
    context: This question focuses on an extremely common indicator of compromise, a legitimate system utility being spawned by an unusual parent. An application like Microsoft Word or Adobe Reader should not be launching `powercfg.exe`. Such an event strongly suggests process injection or macro-based execution by malware.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) WHERE process_name = 'powercfg.exe' | WHERE parent_process_name NOT IN ('explorer.exe', 'cmd.exe', 'powershell.exe') | ALERT
  - question: Has `powercfg.exe` been executed by a parent process where the parent-child relationship is historically rare or has never been seen before in the enterprise?
    context: This question provides a data-driven way to define 'unusual' parent-child relationships without a static allowlist. By analyzing all process relationships across the environment, we can flag pairs that are statistically improbable. This can uncover novel attack vectors that a static list might miss.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH all_process_events | BUILD parent_child_matrix | SEARCH process_creation_events (EID 4688) WHERE process_name = 'powercfg.exe' | LOOKUP parent_child_probability | WHERE probability < 0.001 | ALERT
  - question: Has a machine learning model classified a parent-child process pair involving `powercfg.exe` as suspicious?
    context: This question uses a supervised model to formally score the risk of a specific parent-child relationship. The model can learn the nuanced characteristics of both benign and malicious process parentage, providing a more robust detection method than simple allowlists or statistical frequency.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) WHERE process_name = 'powercfg.exe' | EXTRACT features (parent_path, user, cmd_line) | APPLY parent_child_classifier_model | WHERE score is 'suspicious' | ALERT
  - question: Following a power setting modification, did the host initiate a network connection to an IP address on a threat intelligence blocklist?
    context: This question correlates two distinct but related events to increase detection confidence. Modifying power settings is often a preparatory step for establishing long-term command and control. By linking the power setting change to a subsequent connection to a known-bad destination, we can infer malicious intent with high certainty.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Zeek conn.log
      - All Endpoints (Workstations, Servers)
      - Network Egress/Ingress Points
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH power_setting_mod_event | WITHIN 10m, on same host, SEARCH network_connections (Zeek) | JOIN destination_ip with threat_intel_feed on ip | WHERE threat_intel_match = true | ALERT
  - question: After a power setting modification, did the host establish a long-duration, low-volume network connection, consistent with C2 heartbeating?
    context: This question looks for the behavioral footprint of a command and control channel. C2 'heartbeat' traffic is often characterized by connections that stay open for a long time but transmit very little data. Detecting this pattern shortly after a power setting change strongly suggests that the change was made to facilitate this C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Zeek conn.log
      - All Endpoints (Workstations, Servers)
      - Network Egress/Ingress Points
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH power_setting_mod_event | WITHIN 1h, on same host, SEARCH network_connections (Zeek) | WHERE duration > 99th_percentile AND bytes_transferred < 10th_percentile | ALERT
  - question: After a power setting modification on a host, did a time-series anomaly detection algorithm detect the emergence of a new, periodic network beaconing pattern?
    context: This question uses machine learning to specifically identify the regular, rhythmic communication pattern of C2 beaconing. Adversaries often configure implants to check in at fixed intervals. Detecting the start of such a pattern immediately following a power setting modification is a powerful indicator that the adversary has established persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Zeek conn.log
      - All Endpoints (Workstations, Servers)
      - Network Egress/Ingress Points
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRIGGER on power_setting_mod_event | MONITOR network_connections (Zeek) for that host | APPLY beacon_detection_model | WHERE new_beacon_pattern_detected with high_anomaly_score | ALERT