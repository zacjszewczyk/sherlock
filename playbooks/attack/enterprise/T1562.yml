name: "T1562: Impair Defenses"
id: "f4a4b4e4-7b7c-4a3d-8b0a-1b1e2e3d4f5a"
description: |
  This playbook helps determine if an adversary is attempting to impair defenses to evade detection. Adversaries may disable security tools, clear logs, or misconfigure systems to hide their activity. This can manifest as the execution of known defense impairment tools, the use of specific command-line arguments to disable services or firewalls, the explicit clearing of Windows event logs, a sudden and unexplained cessation of logs from an active host, or a correlated sequence of events where a suspicious process is followed by an act of defense impairment.
type: "technique"
related: 
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are there any process creation events that match known defense impairment tools or malware?"
    context: |
      This question aims to detect the use of well-known defense evasion tools by matching their file hashes against a curated threat intelligence feed. A match for tools like PCHunter, GMER, or other known malware provides a high-confidence indicator that an adversary is attempting to disable or bypass security controls on an endpoint. This is a foundational, high-fidelity detection method.
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Critical Application Servers"
      - "User Endpoints"
      - "Security Infrastructure Servers (e.g., EDR/SIEM management consoles)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          JOIN with threat_intel_feed on file_hash
          WHERE threat_intel_feed.category = 'defense_impairment_tool'
          ALERT on any match
  - question: "Have any new, rare executables been observed with a high execution count on a single host?"
    context: |
      This question seeks to identify custom or unknown defense impairment tools not present in threat intelligence feeds. The rationale is that a targeted attack may use a tool that is unique to the victim's environment. By calculating the prevalence of every new executable, we can flag those that are extremely rare across the enterprise but are executed frequently on a single machine, suggesting a specialized tool deployed for a specific purpose.
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Critical Application Servers"
      - "User Endpoints"
      - "Security Infrastructure Servers (e.g., EDR/SIEM management consoles)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each new_file_hash in process_creation_events:
            CALCULATE prevalence = (count(distinct hosts with hash) / count(all hosts)) * 100
            IF prevalence < 0.1% AND count(executions on single host) > threshold:
              ALERT as rare_high_frequency_executable
  - question: "Have any previously unseen executables been classified as malicious by a machine learning model?"
    context: |
      This question leverages machine learning to proactively identify novel threats. Instead of relying on known-bad signatures, a classifier analyzes an executable's static features (like its structure, imported functions, and entropy) to predict its likelihood of being malicious. This is crucial for detecting zero-day malware or custom tools designed to impair defenses, as it focuses on the intrinsic characteristics of the file itself.
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Critical Application Servers"
      - "User Endpoints"
      - "Security Infrastructure Servers (e.g., EDR/SIEM management consoles)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each new_executable_file:
            EXTRACT static_features
            SCORE file with ML_classifier_model
            IF score > malicious_threshold AND executed_by_non_system_account:
              ALERT for investigation
  - question: "Are there any process creation events with command-line arguments matching known defense evasion commands?"
    context: |
      This question aims to detect adversaries using legitimate system utilities for malicious purposes (i.e., Living-off-the-Land). By monitoring command-line arguments in process creation events for specific patterns (e.g., using `sc.exe` to disable a service, `netsh.exe` to alter firewall rules, `auditpol.exe` to clear audit policies), analysts can catch direct attempts to weaken a system's security posture.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4657"
      - "Windows Event ID 7036"
      - "Domain Controllers"
      - "User Endpoints"
      - "Application Servers"
      - "Windows-based Firewalls"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          WHERE command_line MATCHES REGEX ('sc.*config.*start= disabled', 'taskkill.*im.*<av_process>', 'netsh.*advfirewall.*set', 'auditpol.*clear')
          ALERT on any match
  - question: "Has any user or host shown an abnormal frequency or complexity of commands related to system configuration utilities?"
    context: |
      This question seeks to identify anomalous usage of powerful system utilities like `sc.exe`, `netsh.exe`, and `auditpol.exe`. The rationale is that legitimate administrators have a relatively stable pattern of use. A sudden spike in the frequency of these commands for a specific user, or the use of unusually complex and obfuscated command strings (detectable via high entropy), can indicate that an adversary has compromised an account and is using it to disable defenses.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4657"
      - "Windows Event ID 7036"
      - "Domain Controllers"
      - "User Endpoints"
      - "Application Servers"
      - "Windows-based Firewalls"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each user, host:
            BASELINE normal frequency and command_line entropy for utilities like 'sc.exe', 'netsh.exe'
            MONITOR real-time usage
            IF current_frequency > (mean + 3 * stdev) OR current_entropy > baseline_entropy_threshold:
              ALERT for anomalous utility usage
  - question: "Have any command-line arguments been classified as malicious by a sequence-based machine learning model?"
    context: |
      This question uses advanced machine learning to understand the syntax and structure of command-line arguments, allowing it to distinguish between benign and malicious usage. Unlike simple regex, a sequence-based model (like an LSTM) can detect novel or obfuscated commands that are functionally malicious but syntactically different from known patterns. This is valuable for catching sophisticated adversaries who customize their evasion techniques.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4657"
      - "Windows Event ID 7036"
      - "Domain Controllers"
      - "User Endpoints"
      - "Application Servers"
      - "Windows-based Firewalls"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each command_line in process_creation_events:
            CLASSIFY command_line with sequence_model
            IF classification_score > malicious_threshold:
              ALERT for malicious command-line
  - question: "Have there been any high-fidelity events indicating that event logs have been cleared?"
    context: |
      This question focuses on detecting one of the most blatant forms of anti-forensics: clearing event logs. The action is almost always malicious and is a strong indicator of an adversary attempting to cover their tracks. This is achieved by creating non-suppressible, high-priority alerts for specific indicators like Windows Event ID 1102, or the execution of `wevtutil.exe cl` or PowerShell's `Clear-EventLog`.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 1102"
      - "Windows PowerShell Operational Event ID 4104"
      - "All Windows Hosts, especially Domain Controllers and critical servers where logs are paramount."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          SEARCH for (EventID = 1102) OR (process_name = 'wevtutil.exe' AND command_line CONTAINS 'cl') OR (powershell_log CONTAINS 'Clear-EventLog')
          CREATE high-priority alert
  - question: "Has a log clearing action been performed by a user or on a host where such an action is historically rare?"
    context: |
      This question adds crucial context to a log clearing event. While any such event is suspicious, its significance increases dramatically if performed by an entity that does not normally perform this action. By analyzing the historical rarity of log clearing for a specific user or host, we can prioritize investigations, focusing on events that represent a true deviation from normal administrative behavior.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 1102"
      - "Windows PowerShell Operational Event ID 4104"
      - "All Windows Hosts, especially Domain Controllers and critical servers where logs are paramount."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          ON log_clear_event:
            CALCULATE historical frequency of this action for the user and host
            IF frequency is zero or extremely low:
              INCREASE alert severity and priority
  - question: "Did a log clearing event occur as part of a broader chain of suspicious activities on a host?"
    context: |
      This question moves beyond single events to analyze behavioral chains. A log clearing event in isolation is suspicious, but one that follows a file download from the internet, execution from a temporary directory, and establishing persistence is a near-certain indicator of a successful compromise. By using a model to score event sequences, we can assign the highest risk to chains that culminate in an adversary covering their tracks.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 1102"
      - "Windows PowerShell Operational Event ID 4104"
      - "All Windows Hosts, especially Domain Controllers and critical servers where logs are paramount."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          MODEL event sequences on each host
          IF sequence [Suspicious_Download -> Process_Create -> Log_Clear] occurs within short time_window:
            ASSIGN highest risk score and ALERT
  - question: "Has any critical host or log source stopped sending logs for a defined time interval without a scheduled maintenance event?"
    context: |
      This question aims to detect 'silent hosts'—systems that have stopped logging unexpectedly. This is achieved with a simple 'heartbeat' rule in the SIEM that expects logs from every critical asset within a set interval (e.g., 15 minutes). If logs cease and there is no corresponding maintenance ticket, it generates a critical alert, as this could indicate that a logging agent has been terminated or the host is otherwise compromised.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 7036"
      - "Windows Event ID 4688"
      - "Log Aggregation/SIEM Infrastructure"
      - "Network Egress Points"
      - "All log-generating hosts"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each critical_log_source:
            SCHEDULE check every 15 minutes
            IF last_log_timestamp < (now - 15 minutes) AND no_maintenance_ticket_exists:
              ALERT for 'Silent Host'
  - question: "Has the log volume from any source dropped below a statistically significant threshold compared to its historical baseline?"
    context: |
      This question looks for more subtle forms of log tampering. Instead of logs stopping completely, an adversary might misconfigure a service to reduce its logging level. By creating a time series model of expected log volume (accounting for time-of-day cycles), we can detect when the actual volume drops to a statistically significant low (e.g., below the 5th percentile) for a sustained period, indicating a potential issue.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 7036"
      - "Windows Event ID 4688"
      - "Log Aggregation/SIEM Infrastructure"
      - "Network Egress Points"
      - "All log-generating hosts"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each log_source:
            CREATE time_series_baseline of log_volume
            IF current_log_volume < 5th_percentile_of_baseline for >10 minutes:
              ALERT for anomalous log volume drop
  - question: "Has a time series forecasting model predicted a significant, unexplained drop in log volume from a host that is still active on the network?"
    context: |
      This question combines time series forecasting with network data for high-fidelity detection. A model (like ARIMA) predicts the expected log volume for the next interval. If the actual volume is significantly lower, an anomaly is flagged. This is then correlated with network flow data (e.g., from Zeek) to confirm the host is still communicating. A host that is active on the network but not logging as predicted is a high-confidence indicator of defense impairment.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 7036"
      - "Windows Event ID 4688"
      - "Log Aggregation/SIEM Infrastructure"
      - "Network Egress Points"
      - "All log-generating hosts"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each log_source:
            PREDICT expected_log_volume with forecasting_model
            CALCULATE anomaly_score = |actual_volume - predicted_volume|
            IF anomaly_score > threshold:
              CHECK network_logs for recent host_activity
              IF host is active:
                ALERT for silent but active host
  - question: "Has a suspicious process creation been followed by a defense impairment action on the same host within a short time window?"
    context: |
      This question uses stateful correlation to link a suspicious initial action to a subsequent defense impairment. The rule looks for a specific, timed sequence: a process being created from a non-standard location (e.g., %TEMP%), immediately followed by an event like a security service stopping or logs being cleared. This directly connects a likely malicious payload to the act of disabling defenses on the compromised host.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 7036"
      - "Windows Event ID 1102"
      - "Windows Event ID 4657"
      - "User Endpoints"
      - "Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          CREATE correlation_rule
          TRIGGER on process_creation (EventID 4688) from low-reputation_path
          WITHIN 5 minutes on same host, LOOK FOR (service_stop OR log_clear OR security_registry_modify)
          IF sequence found, ALERT
  - question: "Has the conditional probability of a defense impairment event, given a preceding suspicious process, significantly increased?"
    context: |
      This question uses statistical analysis to find new attack patterns. It continuously calculates the conditional probability of a defense impairment event (like a service stop) occurring right after a specific process is created (e.g., `P(ServiceStop | Parent=wscript.exe)`). If this probability for a certain pair of events suddenly spikes far above the organizational baseline, it suggests that a normally benign process is now being weaponized as part of an attack chain.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 7036"
      - "Windows Event ID 1102"
      - "Windows Event ID 4657"
      - "User Endpoints"
      - "Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          CALCULATE global baseline of P(ImpairmentEvent | PrecedingProcess)
          FOR each host, continuously calculate this probability
          IF host_probability >> global_baseline:
            ALERT on statistical anomaly in event chaining
  - question: "Has a sequence-aware machine learning model detected an anomalous chain of system events indicative of defense impairment?"
    context: |
      This question applies machine learning to detect anomalous sequences of behavior. A model like a Hidden Markov Model (HMM) is trained on vast amounts of event data to learn what "normal" sequences of system activity look like. When a live event stream from a host shows a low-probability sequence (e.g., download -> execute from temp -> stop AV service), the model flags it as a high-confidence anomaly because it deviates significantly from learned normal behavior.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 7036"
      - "Windows Event ID 1102"
      - "Windows Event ID 4657"
      - "User Endpoints"
      - "Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          TRAIN HMM model on normal event sequences
          FOR each host's real-time event stream:
            CALCULATE probability of observed sequence
            IF probability < anomaly_threshold:
              ALERT for anomalous behavioral chain