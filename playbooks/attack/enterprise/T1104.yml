name: T1104: Multi-Stage Channels
id: 9c7a8b3e-5d6f-4c1a-9b8e-2a3d4c5b6f7a
description: This playbook helps answer whether an adversary has established a multi-stage command and control channel for persistent or interactive access. It provides investigative questions to detect initial C2 connections to known malicious infrastructure, follow HTTP redirects to obfuscated destinations, identify processes that abruptly change their network behavior, trace malware stagers that download and execute secondary payloads, and spot processes rapidly cycling through lists of potential C2 servers.
type: technique
related:
  - TA0011: Command And Control
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can a SIEM rule be used to detect outbound connections to known first-stage C2 indicators from a threat intelligence feed?
    context: This question aims to identify the initial beacon from a compromised host to a known malicious infrastructure. By joining network connection data (from Zeek or Windows Events) with DNS queries and process execution events, an analyst can pinpoint the exact process on a specific host that is communicating with a C2 server, providing a high-fidelity starting point for an investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Internet gateways and proxies
      - DNS resolvers
      - User endpoints
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          // Join network connections, DNS, and process data, filtering for destinations in a threat feed.
          DEFINE T as 30_days
          
          network_events = search source="Zeek:conn" OR source="WinEvent:5156"
          dns_events = search source="Zeek:dns"
          process_events = search source="WinEvent:4688"
          threat_intel = lookup c2_feed.csv
          
          JOIN network_events, dns_events, process_events ON host, uid, process_id
          WHERE network_events.destination IN threat_intel.indicator
          ALERT on each result
  - question: How can statistical analysis of connection frequency be used to identify rare and potentially malicious destinations?
    context: This question focuses on identifying anomalous connections that deviate from established baselines. Adversaries often use novel or rarely-visited domains and ASNs for C2. By flagging connections to destinations that are statistically uncommon for both a specific host and the organization as a whole, analysts can uncover potential C2 activity without relying on known-bad indicators.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Internet gateways and proxies
      - DNS resolvers
      - User endpoints
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          // Calculate baseline frequencies and flag connections to rare destinations.
          DEFINE T as 30_days
          
          host_baseline = calculate_frequency(destination_domain) by source_host over T
          org_baseline = calculate_frequency(destination_asn) by org over T
          
          FOR EACH new_connection:
            IF frequency(new_connection.domain) in host_baseline < 1st_percentile AND
               frequency(new_connection.asn) in org_baseline < 5th_percentile:
              FLAG for review
  - question: Can a supervised machine learning model be trained to classify connections as likely C2 based on DNS and TLS features?
    context: This question proposes a proactive, machine-learning based approach to C2 detection. By training a model on features like domain entropy, certificate details (JA3 hash), and registration age, the system can learn to distinguish malicious traffic patterns from benign ones. This allows for the detection of previously unknown C2 infrastructure by scoring new connections based on their intrinsic characteristics.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Internet gateways and proxies
      - DNS resolvers
      - User endpoints
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: |
          // Extract features from DNS/TLS, and score connections with a trained model.
          FUNCTION get_features(connection):
            domain_lexical = analyze(connection.domain)
            cert_details = analyze(connection.tls)
            resolution_data = analyze(dns_lookup(connection.domain))
            RETURN [domain_lexical, cert_details, resolution_data]
          
          model = load_model("c2_classifier.gbm")
          
          FOR EACH new_connection:
            features = get_features(new_connection)
            score = model.predict_proba(features)
            IF score > 0.85:
              ALERT as likely_c2
  - question: How can a stateful SIEM rule detect a C2 hand-off that uses an HTTP redirect to a suspicious destination?
    context: This question addresses a common C2 obfuscation technique where an initial connection is redirected to the actual C2 server. A stateful rule can track a session, identify an HTTP 3xx redirect, and then inspect the subsequent connection to the new location. If the final destination is a blocklisted, newly registered, or non-FQDN IP address, it strongly indicates a malicious hand-off.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Zeek conn.log
      - Internet gateways
      - transparent/explicit web proxies
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          // Track sessions to find a 3xx redirect followed by a connection to a suspicious domain.
          DEFINE T as 2_seconds
          
          TRIGGER on event from "Zeek:http" where status_code is in [300-399]
          
          WITHIN T of trigger:
            SEARCH for event from "Zeek:conn" where source_host is trigger.source_host
              AND destination_host is trigger.location_header
              AND (destination_host is in blocklist OR domain_age(destination_host) < 30d OR is_ip(destination_host))
            ALERT on match
  - question: How can an abnormally long chain of HTTP redirects be used to identify potential C2 obfuscation?
    context: Adversaries may use multiple, sequential HTTP redirects to obscure the path to the final C2 server, making it difficult for analysts to trace. This question involves establishing a baseline for normal redirect chain lengths within the enterprise and then flagging any session that significantly exceeds this norm (e.g., 99th percentile), as it is a statistical anomaly indicative of obfuscation.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Zeek conn.log
      - Internet gateways
      - transparent/explicit web proxies
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: Baselining Pseudocode
        query: |
          // Establish a baseline for redirect chain length and alert on outliers.
          DEFINE T as 30_days
          
          redirect_lengths = count(http_events where status_code in [300-399]) by session_uid over T
          threshold = percentile(redirect_lengths, 99)
          
          FOR EACH new_session:
            current_length = count(http_events where status_code in [300-399]) by session_uid
            IF current_length > threshold:
              ALERT on session_uid
  - question: Can a sequence analysis model be used to detect anomalous network session patterns indicative of a C2 redirect?
    context: This question proposes using a more advanced analytical model, like an LSTM Autoencoder, to understand the 'grammar' of a normal network session. The model learns legitimate sequences of events (e.g., DNS -> TCP -> HTTP GET -> HTTP 200). It can then flag sessions that deviate from this learned grammar, such as a sequence involving a redirect (HTTP 302) followed by a new DNS lookup and connection, which represents a potential multi-stage C2 hand-off.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Zeek conn.log
      - Internet gateways
      - transparent/explicit web proxies
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: |
          // Use a sequence model to flag anomalous session event patterns.
          model = load_model("session_autoencoder.lstm")
          
          FOR EACH session:
            sequence = generate_event_sequence(session.uid) // e.g., ['DNS', 'TCP', 'HTTP_GET', 'HTTP_302', 'DNS_NEW', 'TCP_NEW']
            reconstruction_error = model.evaluate(sequence)
            
            IF reconstruction_error > anomaly_threshold:
              ALERT on session for anomalous sequence
  - question: How can a stateful rule detect when a single process changes its network behavior to a new, unprofiled pattern?
    context: This question aims to detect a C2 stager that, after an initial connection, hands off control to a second stage that uses a different communication channel. A stateful rule can track a single process and alert if it establishes an initial connection, then later initiates a second connection with a completely different destination port, protocol, and ASN, especially if the new TLS fingerprint (JA3/JA3S) is unknown or anomalous.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - User endpoints
      - Domain Controllers
      - Critical application servers
      - Internet gateways and proxies
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          // Track a process and alert if it changes its network connection profile.
          FOR EACH process from "WinEvent:4688":
            initial_conn = get_first_connection(process.id)
            
            LATER, for new_connection by process.id:
              IF new_connection.port != initial_conn.port AND
                 new_connection.protocol != initial_conn.protocol AND
                 new_connection.asn != initial_conn.asn AND
                 new_connection.ja3 NOT IN known_good_ja3_list:
                ALERT on process.id for behavior change
  - question: Can a significant shift in a process's network behavior be detected by calculating its Mahalanobis distance from a historical baseline?
    context: This question applies a statistical method to quantify changes in a process's network activity. By representing a process's behavior as a vector of features (e.g., bytes sent, port entropy) and establishing a historical baseline, the Mahalanobis distance can measure how much the current behavior deviates from the norm. A large distance indicates a statistically significant change, potentially a C2 stage transition.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - User endpoints
      - Domain Controllers
      - Critical application servers
      - Internet gateways and proxies
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: |
          // Calculate Mahalanobis distance to detect anomalous shifts in network behavior.
          FOR EACH process:
            baseline_vector = create_historical_baseline(process.id) // mean vector and covariance matrix
            
            IN 5_min_window:
              current_vector = create_feature_vector(process.id)
              distance = mahalanobis_distance(current_vector, baseline_vector)
              
              IF distance > 3_standard_deviations:
                ALERT on process.id for significant behavior shift
  - question: Can an online change point detection algorithm identify an abrupt shift in a process's communication pattern in real-time?
    context: This question proposes using a time-series analysis technique to detect sudden changes in a process's network data stream. An online change point detection algorithm can monitor a multivariate time series (e.g., bytes out, destination port over time) and signal the exact moment a process's behavior shifts. This is highly effective for identifying the transition point in a multi-stage C2 channel.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - User endpoints
      - Domain Controllers
      - Critical application servers
      - Internet gateways and proxies
    range: last 90 days
    queries:
      - technology: Time-Series Analysis Pseudocode
        query: |
          // Apply a change point detection algorithm to a stream of network metadata.
          FOR EACH process:
            stream = stream_network_metadata(process.id) // e.g., (bytes_out, port)
            
            APPLY BayesianOnlineChangePointDetection(stream):
              IF change_point is detected:
                ALERT with data before and after change point
  - question: How can a SIEM rule correlate a file download with a new process creation and subsequent outbound connection to a different destination?
    context: This question targets the classic 'stager' behavior: a file is downloaded, which then executes and calls out to a new C2 server. A correlation rule can link these events in a tight time window: a file download (e.g., an executable), followed by a new process being created by the downloader, which then makes a network connection to an ASN different from the original download source.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - User endpoints
      - Internet gateways
      - Egress web filters
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          // Correlate download, execution, and new connection events within a short window.
          DEFINE T as 60_seconds
          
          TRIGGER on event from "Zeek:files" where mime_type is 'application/x-dosexec'
          
          WITHIN T of trigger:
            SEARCH for "WinEvent:4688" where parent_process is trigger.process AND
            WITHIN T of process_creation:
              SEARCH for "Zeek:conn" from new_process.id
              WHERE conn.destination_asn != trigger.source_asn
              ALERT on correlated sequence
  - question: Can an unusually short time delta between a file download and a new process beaconing out indicate automated execution?
    context: This question focuses on the timing between events to differentiate automated malware execution from user-initiated actions. A legitimate user typically takes several seconds to find and run a downloaded file. If a new process initiates an outbound connection less than a second after the file download completes, it is highly indicative of an automated stager and warrants immediate investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - User endpoints
      - Internet gateways
      - Egress web filters
    range: last 90 days
    queries:
      - technology: Baselining Pseudocode
        query: |
          // Analyze the time delta between file download and subsequent process beacon.
          FOR EACH file_download_event:
            find subsequent process_creation by same host
            find subsequent outbound_connection from new process
            
            time_delta = outbound_connection.timestamp - file_download_event.timestamp
            
            IF time_delta < 1_second:
              ALERT as suspicious automated execution
  - question: Can a graph neural network (GNN) be used to recognize a subgraph pattern representing a multi-stage malware event?
    context: This question proposes a sophisticated graph-based detection method. By modeling system activities as a graph (nodes=IPs/processes/files, edges=actions), a GNN can be trained to identify complex, multi-step attack patterns. A subgraph showing an IP connecting to a process, which writes a file, which creates a new process that connects to a *different* IP, is a strong visual and analytical representation of a multi-stage C2 event.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - User endpoints
      - Internet gateways
      - Egress web filters
    range: last 90 days
    queries:
      - technology: Graph/ML Pseudocode
        query: |
          // Build an activity graph and use a GNN to classify malicious subgraphs.
          activity_graph = build_graph_from_events() // nodes: Process, File, IP; edges: connects, writes, creates
          model = load_model("gnn_c2_detector")
          
          subgraphs = find_patterns_in_graph(activity_graph)
          // Pattern: [IP_A] -> [Proc_A] -> [File_X] -> [Proc_B] -> [IP_B] where IP_A != IP_B
          
          FOR EACH subgraph:
            prediction = model.predict(subgraph)
            IF prediction is "malicious":
              ALERT on subgraph
  - question: How can a SIEM rule detect a process making a high number of rapid, failed connection attempts to many unique external IPs?
    context: This question targets an adversary's technique of cycling through a long list of potential C2 domains or IPs to find one that is active. This behavior is characterized by a single process generating a high volume of connection attempts to unique destinations in a short period, with a high failure rate (TCP resets, timeouts). This is not normal behavior for legitimate applications.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Windows Event ID 5157
      - User endpoints
      - Egress firewalls
      - Internet gateways and proxies
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          // Count unique, failed connection attempts from a single process in a time window.
          DEFINE T as 60_seconds
          
          AGGREGATE over T by process_id:
            unique_ips = unique_count(destination_ip)
            failed_conns = count(where conn_state is 'REJ' or 'RSTR')
            total_conns = count(*)
            
            IF unique_ips > 15 AND (failed_conns / total_conns) > 0.75:
              ALERT on process_id
  - question: Can high entropy in the set of destination IPs for a process indicate C2 list cycling?
    context: This question uses an information theory concept, Shannon entropy, to measure the randomness of destination IPs a process connects to. Legitimate applications usually connect to a predictable set of IPs (low entropy). A process cycling through a C2 list will connect to many different, unrelated IPs, resulting in high entropy. Comparing a process's IP entropy against a baseline for that application name can effectively identify this anomalous behavior.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Windows Event ID 5157
      - User endpoints
      - Egress firewalls
      - Internet gateways and proxies
    range: last 90 days
    queries:
      - technology: Baselining Pseudocode
        query: |
          // Calculate entropy of destination IPs for a process and compare to baseline.
          DEFINE T as 5_minutes
          
          FOR EACH process:
            baseline_entropy = get_baseline_entropy(process.name)
            
            IN sliding window T:
              destination_ips = get_destination_ips(process.id)
              current_entropy = shannon_entropy(destination_ips)
              
              IF current_entropy > (baseline_entropy + 3 * stdev):
                ALERT on process.id for high IP entropy
  - question: Can density-based clustering (DBSCAN) be used to isolate anomalous connection patterns indicative of C2 probing?
    context: This question proposes using an unsupervised clustering algorithm to separate normal, dense clusters of network traffic from sparse, anomalous "noise" points. By clustering connections based on features like process name, destination ASN, and connection state, normal activity will form large groups. The outliers—small clusters or noise points representing a single process connecting to many disparate ASNs with short-lived connections—are strong candidates for C2 probing.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Windows Event ID 5157
      - User endpoints
      - Egress firewalls
      - Internet gateways and proxies
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: |
          // Apply DBSCAN to network logs to find noise points representing C2 probing.
          features = extract_features_from_conn_logs() // [process_name, dest_asn, dest_country, duration]
          
          dbscan = DBSCAN(eps=0.5, min_samples=5)
          clusters = dbscan.fit_predict(features)
          
          noise_points = features where clusters == -1
          
          FOR EACH point in noise_points:
            IF point represents non-browser with high geo/asn dispersion:
              ALERT on point as C2 probing