name: "T1429: Audio Capture"
id: "f8a7b6c5-d4e3-4f21-a0b9-c8d7e6f5a4b3"
description: "This playbook helps investigate whether an adversary is capturing audio from mobile devices to collect sensitive information. It focuses on two main indicators: 1) Real-time behavioral analysis, detecting when an app accesses the microphone in the background and then makes suspicious outbound network connections (to known C2 servers or destinations that are anomalous based on historical data). 2) Static analysis of application packages (APKs), looking for dangerous permissions like CAPTURE_AUDIO_OUTPUT from untrusted developers, or calculating a risk score for apps requesting microphone access based on features like developer reputation, app category, and market presence."
type: "technique"
related: "TA0035: Collection"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Is a mobile application activating the microphone in the background and immediately communicating with a known malicious command-and-control (C2) server?"
    context: "This question aims to detect a high-confidence indicator of compromise. Legitimate applications rarely need to access the microphone while running in the background and then instantly send data to a known C2 server. This specific sequence of events is a strong signal that malware is actively recording audio and exfiltrating it. Answering this helps analysts quickly identify and respond to active infections."
    answer_sources:
      - "MDM/MTD API Event Logs (Microphone Access, App State)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Feeds (C2 domains/IPs)"
      - "NAI: Managed mobile device fleet (both corporate-owned and BYOD), Mobile Device Management (MDM) and Mobile Threat Defense (MTD) servers, Network egress points capturing traffic from mobile device subnets (e.g., VPN concentrators, corporate Wi-Fi access points, proxies)"
    range: "Last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SIEM Query: JOIN MDM logs and Zeek logs on device ID. TRIGGER ALERT IF (MDM.event == 'mic_on' AND MDM.app_state == 'background') AND (Zeek.destination_ip IN C2_feed OR Zeek.destination_domain IN C2_feed) WITHIN 60 seconds."
  - question: "Is a mobile application exhibiting anomalous background microphone usage or data exfiltration behavior compared to its established baseline?"
    context: "This question addresses the challenge of detecting malicious activity that doesn't use known C2 infrastructure. By establishing a normal baseline for each app's background behavior (microphone duration, data volume sent after mic use, countries connected to), analysts can identify statistical outliers. An app suddenly using the microphone for longer, sending more data, or connecting to a new country could indicate a compromise or a newly activated malicious feature."
    answer_sources:
      - "MDM/MTD API Event Logs (Microphone Access, App State)"
      - "Zeek conn.log"
      - "NAI: Managed mobile device fleet (both corporate-owned and BYOD), Mobile Device Management (MDM) and Mobile Threat Defense (MTD) servers, Network egress points capturing traffic from mobile device subnets (e.g., VPN concentrators, corporate Wi-Fi access points, proxies)"
    range: "Last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "Behavioral Analytics Query: FOR each app/device: CALCULATE baseline (95th percentile mic duration, 95th percentile data volume post-mic use, typical countries). TRIGGER ALERT IF current_mic_duration > baseline_duration AND (current_data_volume > baseline_volume OR current_country NOT IN baseline_countries)."
  - question: "Does a mobile device's sequence of events (like microphone activation, backgrounding, and network connections) represent a statistically rare pattern indicative of malware?"
    context: "This question leverages machine learning to detect novel or sophisticated attacks that may not be caught by simple correlation rules or baseline thresholds. An LSTM autoencoder learns the 'grammar' of normal device activity. When a sequence of events occurs that the model cannot accurately reconstruct (high reconstruction error), it signals a significant deviation from normalcy. This approach can detect complex, multi-step malicious behaviors that might otherwise appear benign in isolation."
    answer_sources:
      - "Device event streams (mic_on, app_background, net_connect, app_name, destination_ip)"
      - "NAI: Managed mobile device fleet (both corporate-owned and BYOD), Mobile Device Management (MDM) and Mobile Threat Defense (MTD) servers, Network egress points capturing traffic from mobile device subnets (e.g., VPN concentrators, corporate Wi-Fi access points, proxies)"
    range: "Last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "Machine Learning Model Query: INPUT live event sequence (mic_on, app_background, net_connect, etc.) into trained LSTM autoencoder. CALCULATE reconstruction error. TRIGGER ALERT IF reconstruction_error > dynamic_threshold (e.g., mean_error + 3 * std_dev_error)."
  - question: "Is there an Android application in our environment that has the dangerous 'CAPTURE_AUDIO_OUTPUT' permission and is not signed by a trusted vendor?"
    context: "The android.permission.CAPTURE_AUDIO_OUTPUT permission is highly sensitive as it allows an app to capture audio being played by other applications. This is rarely needed for legitimate apps and is a powerful tool for espionage. This question focuses on finding applications that possess this permission and are not signed by a known, trusted entity like the device manufacturer (OEM), which might use it for legitimate system-level functions. A positive match is a critical finding that requires immediate investigation."
    answer_sources:
      - "Mobile Application Vetting Static Analysis Reports (Parsed Manifests, Permissions, Signer Certificates, API calls)"
      - "MDM Application Inventory Logs (Package Name, Version, Device ID)"
      - "NAI: Mobile Application Management (MAM) repositories, Mobile application vetting and sandboxing platforms, MDM/MTD servers storing application inventory data for all managed devices"
    range: "Last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "App Vetting Platform Query: SCAN all app manifests. TRIGGER ALERT IF 'android.permission.CAPTURE_AUDIO_OUTPUT' IN app.permissions AND app.signer.CN NOT IN trusted_oem_allowlist."
  - question: "Which applications requesting microphone access pose the highest risk to the organization based on a multi-factor risk score?"
    context: "Not all apps that request microphone access are malicious, but some are riskier than others. This question helps prioritize analyst attention by systematically scoring the risk of each app. By considering factors like the app's category (a game vs. a business app), developer reputation, its presence on major app stores, and the breadth of its permission requests, analysts can focus their manual review efforts on the small subset of applications that present the most significant potential threat."
    answer_sources:
      - "Mobile Application Vetting Static Analysis Reports (Parsed Manifests, Permissions, Signer Certificates, API calls)"
      - "MDM Application Inventory Logs (Package Name, Version, Device ID)"
      - "NAI: Mobile Application Management (MAM) repositories, Mobile application vetting and sandboxing platforms, MDM/MTD servers storing application inventory data for all managed devices"
    range: "Last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "Risk Scoring Query: FOR each app with microphone permission: CALCULATE risk_score = weight1*category_risk + weight2*dev_reputation + weight3*permission_entropy + weight4*market_presence. FLAG for review IF risk_score > 95th_percentile_score."
  - question: "Can a new or updated application be automatically classified as malicious based on static features found in its application package?"
    context: "This question seeks to automate the detection of known and variant malware during the application vetting process, before it is widely deployed. By training a machine learning model on a large dataset of benign and malicious apps, the system can learn to identify subtle patterns in an app's static properties (e.g., specific combinations of permissions, suspicious API calls, code obfuscation techniques, embedded strings). This allows for scalable, automated blocking and alerting on malicious software, reducing the manual workload on security analysts."
    answer_sources:
      - "Mobile Application Vetting Static Analysis Reports (Parsed Manifests, Permissions, Signer Certificates, API calls)"
      - "MDM Application Inventory Logs (Package Name, Version, Device ID)"
      - "NAI: Mobile Application Management (MAM) repositories, Mobile application vetting and sandboxing platforms, MDM/MTD servers storing application inventory data for all managed devices"
    range: "Last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "ML Classification Query: EXTRACT features (permissions, API calls, obfuscation indicators) from new app package. INPUT features into trained classifier (e.g., Gradient Boosting). TRIGGER ALERT and BLOCK if predicted_class == 'malicious' AND confidence_score > 0.9."