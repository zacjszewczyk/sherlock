name: T1134.004: Parent PID Spoofing
id: 4e8c1f3a-7a6b-4b9c-8d0f-9e2a1b3c4d5e
description: |
  This playbook addresses adversary use of Parent Process ID (PPID) Spoofing for privilege escalation and defense evasion. An adversary may create a new process and spoof the parent process ID to either inherit the permissions of a higher-privileged parent (e.g., lsass.exe) or to masquerade the new process's origin by making it appear as a child of a common, trusted process like explorer.exe. This tactic helps the adversary execute code with elevated privileges, bypass User Account Control (UAC), or break the chain of evidence to evade detection by security tools that rely on parent-child process relationships. Investigative actions focus on identifying mismatches between creator and parent processes, detecting rare parent-child relationships, flagging known malicious file hashes, and spotting anomalous process elevations or contexts.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any newly created processes whose file hashes match known malicious hashes associated with Parent PID Spoofing tools?
    context: |
      This question aims to identify the use of known malicious tools that perform PPID spoofing. By comparing the file hash of every new process against a threat intelligence feed, we can directly detect the presence of malware designed for this purpose. A match provides a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, administrative workstations, and critical application servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) | HASH 'NewProcessName' file | JOIN with threat_intel_feed on hash WHERE tag='T1134.004' or tag='PPID Spoofing'
  - question: Have any rare or unique executables been observed creating new processes across the enterprise?
    context: |
      This question helps uncover potentially unknown or custom malware by focusing on rarity. Adversaries often use tools that are not widespread. Identifying executables that exist on only a handful of systems can surface suspicious activity that might otherwise be missed by signature-based detection. This is particularly effective for targeted attacks.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, administrative workstations, and critical application servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) | STATS count(hosts) by file_hash | WHERE count(hosts) < 5
  - question: Does a machine learning model classify any process creation events as likely malicious based on features like hash reputation, parent process, and user context?
    context: |
      This question leverages a machine learning model to analyze a combination of features that, when viewed together, indicate malicious behavior. The model can learn complex patterns that are difficult to define with simple rules, allowing it to detect novel or sophisticated PPID spoofing attempts by scoring the overall suspiciousness of an event.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, administrative workstations, and critical application servers.
    range: last 90 days
    queries:
      - pseudocode: PIPE process creation events (EID 4688) to ML_model | FILTER prediction_score > threshold
  - question: Are there any processes being created where the reported parent is a high-privilege system process (like lsass.exe), but the actual creator process is something different?
    context: |
      This question targets a core indicator of PPID spoofing: a discrepancy between the creator process and the reported parent process. Adversaries spoof high-privilege parents like 'lsass.exe' or 'services.exe' to inherit their permissions or tokens. This query directly looks for this mismatch, which is a strong sign of privilege escalation attempts.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers with enhanced process creation logging enabled (including command line and creator process).
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE CreatorProcessName != ParentProcessName AND ParentProcessName IN ['lsass.exe', 'services.exe', 'wininit.exe', 'smss.exe']
  - question: Have there been any statistically rare or anomalous pairings of creator processes and spoofed parent processes?
    context: |
      This question aims to find unusual spoofing activity by baselining what is normal. While some creator/parent mismatches are legitimate (e.g., UAC), malicious activity often involves unique or infrequent combinations. By identifying these statistical outliers, analysts can focus on spoofing events that deviate from established patterns of benign system behavior.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers with enhanced process creation logging enabled (including command line and creator process).
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE CreatorProcessName != ParentProcessName | BASELINE frequency of (CreatorProcessName, ParentProcessName) pairs over 30 days | FIND outliers below 5th percentile
  - question: Can an unsupervised machine learning model identify any process creation events with spoofed parents as anomalous outliers?
    context: |
      This question uses an unsupervised learning approach to automatically group 'normal' PPID spoofing events (like UAC) into clusters. Any event that doesn't fit into these common clusters is flagged as an anomaly. This is effective for detecting new or unknown spoofing techniques without needing pre-labeled data, as it focuses on identifying what is different from the norm.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers with enhanced process creation logging enabled (including command line and creator process).
    range: last 90 days
    queries:
      - pseudocode: PIPE process creation events with creator/parent mismatch to DBSCAN model | IDENTIFY events classified as noise or small clusters
  - question: Has a high-privilege system process spawned a child process that deviates from a known-good allowlist of parent-child relationships?
    context: |
      This question uses an allowlist approach to detect suspicious activity. High-privilege system processes typically have very predictable behavior and spawn a limited set of child processes. By defining what is 'normal' (e.g., services.exe -> svchost.exe), any deviation from this allowlist, especially when the new process has a high integrity level, becomes a high-fidelity indicator of potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Critical infrastructure servers (Domain Controllers, Certificate Authorities) and administrative workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE ParentProcess is high-privilege AND (ParentProcess, ChildProcess) NOT IN allowlist AND ChildIntegrityLevel IN ['High', 'System']
  - question: Are there any statistically rare or new parent-child process relationships involving a high-privilege parent?
    context: |
      This question aims to find anomalous process relationships by baselining all parent-child pairs over time. Instead of a static allowlist, this method dynamically identifies what is rare. An extremely infrequent or novel pairing involving a high-privilege parent process is a strong statistical indicator that something unusual, and potentially malicious, has occurred.
    answer_sources:
      - Windows Event ID 4688
      - Critical infrastructure servers (Domain Controllers, Certificate Authorities) and administrative workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) | BASELINE frequency of (ParentProcess, ChildProcess) pairs over 30 days | CALCULATE z-score for new pairs | ALERT where parent is high-privilege and z-score > 3
  - question: Does a time-series anomaly detection model detect a deviation from normal host behavior when a rare, high-privilege parent-child process creation occurs?
    context: |
      This question treats process creation events on a host as a time-series sequence. A model learns the 'rhythm' and normal patterns of these sequences for each machine. A malicious event, like an unusual high-privilege process spawn, will disrupt this learned pattern, causing a high 'reconstruction error' and triggering an alert. This method is powerful for detecting attacks that break the typical operational flow of a system.
    answer_sources:
      - Windows Event ID 4688
      - Critical infrastructure servers (Domain Controllers, Certificate Authorities) and administrative workstations.
    range: last 90 days
    queries:
      - pseudocode: PIPE host process creation sequences to LSTM Autoencoder model | IDENTIFY events with high reconstruction error, especially rare high-privilege pairs
  - question: Have any processes been elevated to a higher integrity level without going through the standard UAC consent prompt (consent.exe)?
    context: |
      This question targets a specific method of UAC bypass. Legitimate user-approved elevations typically involve `consent.exe` as the parent of the elevated process. By searching for elevation events where the parent is something else, we can specifically hunt for techniques where an adversary spoofs a different parent to bypass the UAC mechanism and gain privileges silently.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, particularly for users with administrative privileges.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE TokenElevationType IN ['Type 1', 'Type 2'] AND ParentProcessName != 'consent.exe'
  - question: Has there been a statistical anomaly, such as the appearance of a rare parent process, in process elevation events for any user?
    context: |
      This question seeks to identify anomalous UAC bypasses by baselining the parent processes involved in elevation events. While `consent.exe` is most common, other legitimate parents might exist. This method looks for statistical deviations, such as a sudden shift to a single, unusual parent (low entropy) or the appearance of a parent never before seen in an elevation context for that user, which could indicate a bypass.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, particularly for users with administrative privileges.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process elevation events (EID 4688) | BASELINE parent process distribution per user | FLAG users with sudden entropy drop or rare parent process appearance
  - question: Does a machine learning classifier identify any process elevation events as likely malicious UAC bypasses?
    context: |
      This question uses a supervised model to learn the complex rules that differentiate legitimate UAC elevations from malicious bypasses. By considering multiple features like the processes involved, session type, and time, the model can make a more nuanced decision than a simple rule, effectively identifying bypass attempts that try to mimic legitimate behavior.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, particularly for users with administrative privileges.
    range: last 90 days
    queries:
      - pseudocode: PIPE process elevation events (EID 4688) to decision tree model | FILTER for predictions of 'malicious bypass'
  - question: Has a known-malicious executable been run under the guise of a common, trusted parent process like explorer.exe?
    context: |
      This question aims to find known malware that is attempting to hide by making itself appear as a child of a legitimate and common process like `explorer.exe`. Correlating a malicious file hash with a spoofed, trusted parent provides a strong, high-confidence indicator of an active defense evasion attempt.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, particularly those with user-interactive sessions (workstations, terminal servers).
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) | HASH 'NewProcessName' file | JOIN with threat_intel_feed on hash WHERE ParentProcessName IN ['explorer.exe', 'svchost.exe']
  - question: Are there any processes with highly randomized or obfuscated command-line arguments that appear to be spawned by a common parent process?
    context: |
      This question helps to detect fileless attacks or obfuscated payloads. Adversaries often use long, randomized command lines to pass encoded scripts or commands. High entropy in a command line is a strong indicator of this. When such a process is parented by a common process like `explorer.exe`, it's a red flag for defense evasion.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, particularly those with user-interactive sessions (workstations, terminal servers).
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) | CALCULATE entropy of command_line | WHERE entropy > 95th_percentile AND ParentProcessName IN ['explorer.exe', 'svchost.exe']
  - question: Does a machine learning model classify any process creation events as 'evasive' based on a combination of features like parent process, command-line entropy, and hash reputation?
    context: |
      This question employs a machine learning model to holistically assess if a process creation event is an attempt at defense evasion. The model can weigh multiple weak indicators (e.g., common parent, long command line, mismatched process name) to make a high-confidence determination, catching sophisticated evasions that might not trigger any single rule.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, particularly those with user-interactive sessions (workstations, terminal servers).
    range: last 90 days
    queries:
      - pseudocode: PIPE process creation events (EID 4688) to ML_classifier | FILTER classification = 'evasive' AND probability > threshold
  - question: Has an Office application or web browser launched a process, but that process's parent is spoofed to appear as a trusted system process like explorer.exe?
    context: |
      This question targets a common attack chain where malware is delivered via a document or a browser exploit (the creator), but the malicious process spoofs its parent to `explorer.exe` to break the parent-child relationship and evade detection. This specific mismatch is a strong indicator of malicious code execution from a user-facing application.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, particularly those processing documents from external sources like email or web downloads.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE CreatorProcessName != ParentProcessName AND CreatorProcessName IN ['WINWORD.EXE', 'EXCEL.EXE', 'CHROME.EXE'] AND ParentProcessName IN ['explorer.exe', 'svchost.exe']
  - question: Have there been any statistically rare processes spawned by applications like Office or browsers where the parent process was also spoofed?
    context: |
      This question looks for novelty in process chains originating from common applications. While a browser might legitimately spawn various helpers, it's highly unusual for it to spawn, for example, `ftp.exe`. By flagging rare child processes that are created during a PPID spoofing event, analysts can uncover unusual attacker activity originating from document or browser-based exploits.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, particularly those processing documents from external sources like email or web downloads.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE CreatorProcessName != ParentProcessName | STATS count by (CreatorProcessName, NewProcessName) | WHERE count < 5
  - question: Does a machine learning model predict a high probability of malicious spoofing based on the specific combination of the creator, parent, and child process?
    context: |
      This question uses a model to learn the 'reputation' of specific process chain triplets (Creator -> Child, with spoofed Parent). The model can learn that `svchost.exe` creating `consent.exe` with a spoofed parent is benign, but `WINWORD.EXE` creating `powershell.exe` with a spoofed parent of `explorer.exe` is highly malicious. This allows for precise detection based on learned malicious patterns.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, particularly those processing documents from external sources like email or web downloads.
    range: last 90 days
    queries:
      - pseudocode: PIPE process creation events (EID 4688) with creator/parent/child features to logistic regression model | FILTER for high probability of malicious spoofing
  - question: Has a Living-Off-the-Land Binary (LOLBAS) been executed with a spoofed parent, and did it subsequently make a suspicious network connection?
    context: |
      This question combines process and network data to find high-impact threats. It first identifies a common evasion pattern: a LOLBAS like `powershell.exe` is launched from an Office app but has its parent spoofed. It then pivots on that process's unique ID to see if it made any network connections to malicious or uncategorized destinations, which would strongly indicate a command-and-control or data exfiltration channel.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows systems, with a focus on internet-facing servers and standard user workstations where LOLBAS abuse is common.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) for LOLBAS execution where CreatorProcess is Office/Browser and ParentProcess is 'explorer.exe' | For each match, JOIN ProcessGUID with network logs (Zeek conn.log) on UID | FILTER destination IP/domain is malicious or uncategorized
  - question: For any given host or user, is the distribution of parent processes for LOLBAS executions statistically different from the enterprise-wide norm?
    context: |
      This question aims to find anomalous LOLBAS usage on a per-host or per-user basis. While a LOLBAS like `powershell.exe` might be used widely, a specific user's machine where it suddenly starts being parented by unusual processes will show a statistical deviation from the enterprise baseline. This can pinpoint a compromised machine or user account where LOLBAS are being abused for evasion.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows systems, with a focus on internet-facing servers and standard user workstations where LOLBAS abuse is common.
    range: last 90 days
    queries:
      - pseudocode: BASELINE distribution of (parent, creator) for each LOLBAS across enterprise | For each host/user, calculate Chi-squared value against baseline | ALERT on high Chi-squared value
  - question: Can an unsupervised anomaly detection model (Isolation Forest) identify any LOLBAS executions as outliers based on their context?
    context: |
      This question uses an Isolation Forest model, which is particularly good at finding outliers in data. By feeding it contextual features of LOLBAS executions (user, host, parents, command line), the model can efficiently "isolate" and flag the rare, anomalous executions that are most likely to be malicious, without needing prior knowledge of what is "bad."
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows systems, with a focus on internet-facing servers and standard user workstations where LOLBAS abuse is common.
    range: last 90 days
    queries:
      - pseudocode: PIPE LOLBAS execution events with contextual features to Isolation Forest model | IDENTIFY events flagged as outliers
  - question: Is 'explorer.exe' spawning processes while running as the SYSTEM user or in a non-interactive session (Session 0)?
    context: |
      This question targets a highly specific and suspicious scenario. The `explorer.exe` process is the user's shell and should always run in that user's security context and interactive session. If it's observed running as SYSTEM or in Session 0 (the session for services), it's a strong indication that an adversary has injected code into it or is using it as a spoofed parent in a non-interactive context for defense evasion or privilege escalation.
    answer_sources:
      - Windows Event ID 4688
      - Remote Desktop Session Hosts, Citrix servers, and other multi-user or remote access servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events (EID 4688) WHERE ParentProcessName is 'explorer.exe' AND (ParentUser is 'NT AUTHORITY\\SYSTEM' OR ParentSessionID is 0)
  - question: Are there any statistical outliers in the user accounts or session IDs associated with 'explorer.exe' when it acts as a parent process?
    context: |
      This question establishes a baseline of normal user accounts and session IDs for `explorer.exe` and then looks for deviations. While the symbolic rule looks for specific bad contexts (SYSTEM, Session 0), this statistical approach can find other anomalies, such as `explorer.exe` running under a service account context, which would be highly unusual and warrant investigation.
    answer_sources:
      - Windows Event ID 4688
      - Remote Desktop Session Hosts, Citrix servers, and other multi-user or remote access servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH processes spawned by 'explorer.exe' | BASELINE distribution of parent user/session ID | FLAG any instance that is a statistical outlier
  - question: Does a time-series model detect an anomaly when a seemingly normal process chain (e.g., explorer.exe -> cmd.exe) occurs with an unusual context, such as an anomalous parent user?
    context: |
      This question applies a time-series model to user sessions to detect when a normal-looking action happens in an abnormal context. For example, `explorer.exe` spawning `cmd.exe` is normal in an interactive user session. However, if a model that has learned this pattern sees the same action but with the parent `explorer.exe` running as SYSTEM, it will flag it as a high-error anomaly, indicating a break in the expected sequence and context.
    answer_sources:
      - Windows Event ID 4688
      - Remote Desktop Session Hosts, Citrix servers, and other multi-user or remote access servers.
    range: last 90 days
    queries:
      - pseudocode: PIPE user session process sequences to time-series model | IDENTIFY events with high reconstruction error, especially those with anomalous parent context