name: "T1134.004: Parent PID Spoofing"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook provides investigative steps to detect Parent PID (PPID) Spoofing (T1134.004), a technique used by adversaries for both privilege escalation and defense evasion. It focuses on identifying indicators such as the use of known malicious tools, mismatches between the creator and parent process, anomalous parent-child relationships involving high-privilege processes, and suspicious LOLBAS executions. The playbook offers symbolic, statistical, and machine learning-based questions to uncover these activities by analyzing process creation events (Windows Event ID 4688) and other relevant data sources across the enterprise."
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Has a process been created whose file hash matches a known malicious hash associated with PPID spoofing tools?"
    context: "This question aims to identify the use of known malicious tools for Parent PID Spoofing. By comparing the file hash of newly created processes against a curated threat intelligence feed, analysts can detect specific, cataloged threats with high confidence. A match is a strong indicator of compromise and points directly to the execution of a recognized malicious binary."
    answer_sources: "Windows Event ID 4688. Domain Controllers, administrative workstations, and critical application servers."
    range: "last 90 days"
    queries: "SEARCH process creation events (EID 4688). FOR each event, HASH the NewProcessName. IF hash in 'PPID Spoofing' threat intel list, ALERT."
  - question: "Has a process been created from an executable file that is unusually rare within the enterprise?"
    context: "This question seeks to uncover unknown or novel threats by focusing on rarity. Malicious executables, unless part of a widespread campaign, often appear on a very small number of machines. By profiling hash prevalence across the organization, we can flag executables that are statistical outliers, warranting investigation as they are not part of legitimate, widespread software deployments."
    answer_sources: "Windows Event ID 4688. Domain Controllers, administrative workstations, and critical application servers."
    range: "last 90 days"
    queries: "SEARCH process creation events (EID 4688). COUNT hosts per file hash. IF count for a hash is < threshold (e.g., 5) AND hash not in known-good software list, ALERT."
  - question: "Does a machine learning model classify a new process creation event as likely malicious based on its characteristics?"
    context: "This question leverages a machine learning model to detect complex patterns indicative of malicious behavior that may be missed by simple rules. By training a classifier on features like file hash reputation, process names, parent process, and user context, the model can predict the likelihood of a process being part of a PPID spoofing attack, even for previously unseen threats."
    answer_sources: "Windows Event ID 4688. Domain Controllers, administrative workstations, and critical application servers."
    range: "last 90 days"
    queries: "INPUT process creation features (hash reputation, process names, command line, user) into trained ML model. IF model prediction score > confidence threshold, ALERT."
  - question: "Has a process creation event occurred where the creator process and parent process do not match, and the reported parent is a high-privilege system process?"
    context: "This question targets a classic PPID spoofing indicator. An adversary may create a process but manipulate its attributes to make it appear as if it were spawned by a trusted, high-privilege process like 'lsass.exe' or 'services.exe'. This explicit mismatch is a strong signal of an attempt to inherit privileges or evade detection."
    answer_sources: "Windows Event ID 4688. All Windows endpoints and servers with enhanced process creation logging enabled (including command line and creator process)."
    range: "last 90 days"
    queries: "SEARCH process creation events (EID 4688). IF CreatorProcessName != ParentProcessName AND ParentProcessName in ('lsass.exe', 'services.exe', 'wininit.exe'), ALERT."
  - question: "Has a statistically rare mismatch between a creator process and a parent process been observed?"
    context: "While some creator/parent mismatches are normal (e.g., UAC elevation), malicious activity often creates novel combinations. This question aims to find these outliers. By baselining the frequency of all creator/parent process pairs where a mismatch occurs, we can use statistical methods to flag pairs that are exceptionally rare, suggesting an anomalous and potentially malicious spoofing attempt."
    answer_sources: "Windows Event ID 4688. All Windows endpoints and servers with enhanced process creation logging enabled (including command line and creator process)."
    range: "last 90 days"
    queries: "SEARCH process creation events with CreatorProcessName != ParentProcessName. COUNT occurrences of each (CreatorProcessName, ParentProcessName) tuple over 30 days. IF new tuple frequency is a statistical outlier (e.g., < 5th percentile), ALERT."
  - question: "Does an unsupervised machine learning model identify a process creation event with a creator/parent mismatch as an anomaly?"
    context: "This question uses unsupervised learning to automatically group normal process spoofing behaviors (like UAC) into clusters. Any process creation event that does not fit into these established clusters is flagged as 'noise' or an anomaly. This is effective for detecting novel PPID spoofing techniques without relying on predefined rules or labels."
    answer_sources: "Windows Event ID 4688. All Windows endpoints and servers with enhanced process creation logging enabled (including command line and creator process)."
    range: "last 90 days"
    queries: "INPUT features (creator process, parent process, child process, user) into clustering model (e.g., DBSCAN). IF event is classified as noise or a small, isolated cluster, ALERT."
  - question: "Has a high-privilege process spawned a child process where this parent-child relationship is not on a predefined allowlist?"
    context: "This question uses an allowlist approach to identify suspicious activity. By defining a list of known-good parent-child relationships for high-privilege system processes, any deviation from this list becomes a high-fidelity alert. This is particularly effective for spotting when a privileged process like 'services.exe' unexpectedly spawns an anomalous child."
    answer_sources: "Windows Event ID 4688. Critical infrastructure servers (Domain Controllers, Certificate Authorities) and administrative workstations."
    range: "last 90 days"
    queries: "SEARCH process creation events (EID 4688). IF parent is high-privilege AND (parent, child) pair NOT in allowlist AND child integrity is 'High'/'System', ALERT."
  - question: "Has a high-privilege process spawned a child process where the relationship is a statistical rarity compared to a historical baseline?"
    context: "This question moves beyond static allowlists to find statistically unusual parent-child relationships. By creating a historical baseline of all parent-child pairs, we can identify new process creations that are extremely rare or have never been seen before. This helps detect novel adversary techniques that wouldn't be caught by a static list."
    answer_sources: "Windows Event ID 4688. Critical infrastructure servers (Domain Controllers, Certificate Authorities) and administrative workstations."
    range: "last 90 days"
    queries: "BASELINE frequency of all (parent, child) pairs over 30 days. FOR each new process creation with a high-privilege parent, CALCULATE z-score of its frequency. IF z-score > threshold (e.g., 3) or pair is new, ALERT."
  - question: "Does a time-series anomaly detection model flag a new high-privilege parent-child process creation as a deviation from normal host behavior?"
    context: "This question treats process creation as a sequence of events on a host. A machine learning model can learn the normal sequence of operations for each machine. A PPID spoofing event, which creates a rare or illogical parent-child relationship, will likely cause a high reconstruction error in the model, indicating a significant deviation from that host's learned normal behavior."
    answer_sources: "Windows Event ID 4688. Critical infrastructure servers (Domain Controllers, Certificate Authorities) and administrative workstations."
    range: "last 90 days"
    queries: "INPUT sequence of process creations for a host into a time-series model (e.g., LSTM Autoencoder). IF a new rare high-privilege parent-child pair causes a high reconstruction error, ALERT."
  - question: "Has a process elevation occurred where the parent process was not the standard User Account Control (UAC) process 'consent.exe'?"
    context: "This question directly targets a common UAC bypass technique. Legitimate process elevations via the UAC GUI prompt are parented by 'consent.exe'. If a process is elevated to a higher integrity level without 'consent.exe' as the parent, it strongly suggests that the UAC mechanism was bypassed, potentially through PPID spoofing."
    answer_sources: "Windows Event ID 4688. User workstations, particularly for users with administrative privileges."
    range: "last 90 days"
    queries: "SEARCH process creation events (EID 4688). IF TokenElevationType is 'Type 1' or 'Type 2' AND ParentProcessName is NOT 'consent.exe', ALERT."
  - question: "Has a process elevation event occurred with a statistically rare parent process?"
    context: "This question looks for anomalies in the context of process elevations. By baselining the typical parent processes involved in elevation events (which should be dominated by 'consent.exe'), we can flag elevations that originate from an unusual parent. A sudden appearance of a rare parent like 'svchost.exe' in this context is a strong indicator of a potential UAC bypass."
    answer_sources: "Windows Event ID 4688. User workstations, particularly for users with administrative privileges."
    range: "last 90 days"
    queries: "BASELINE parent process names for all elevation events. CALCULATE entropy of the parent distribution per user. IF entropy drops suddenly or a rare parent appears, ALERT."
  - question: "Does a machine learning model classify a process elevation event as a malicious UAC bypass?"
    context: "This question uses a supervised model to learn the subtle differences between legitimate UAC elevations and malicious bypasses. By analyzing features like the creator, parent, and child processes, session type, and time of day, a decision tree can build rules to identify deviations from the standard UAC workflow and flag them as potential bypass attempts."
    answer_sources: "Windows Event ID 4688. User workstations, particularly for users with administrative privileges."
    range: "last 90 days"
    queries: "INPUT elevation event features (creator, parent, child, session type) into trained decision tree. IF model classifies as 'bypass', ALERT."
  - question: "Has a process with a known-malicious hash been created under a common, trusted parent process like 'explorer.exe'?"
    context: "This question aims to find adversaries hiding malicious code in plain sight. By spoofing a trusted parent like 'explorer.exe' or 'svchost.exe' for a known-malicious executable, attackers attempt to make the process appear legitimate. This check correlates file reputation with parent process information to uncover this masquerading."
    answer_sources: "Windows Event ID 4688. All Windows endpoints and servers, particularly those with user-interactive sessions (workstations, terminal servers)."
    range: "last 90 days"
    queries: "SEARCH process creation events (EID 4688). HASH NewProcessName. IF hash is known-malicious AND ParentProcessName in ('explorer.exe', 'svchost.exe'), ALERT."
  - question: "Has a process with a common parent like 'explorer.exe' been launched with an unusually complex or high-entropy command line?"
    context: "This question seeks to identify obfuscated payloads. Attackers often use legitimate processes to launch malicious code via complex, encoded, or randomized command-line arguments. High entropy (randomness) in the command line of a process spawned by a trusted parent can indicate an attempt to execute a payload while evading signature-based detections."
    answer_sources: "Windows Event ID 4688. All Windows endpoints and servers, particularly those with user-interactive sessions (workstations, terminal servers)."
    range: "last 90 days"
    queries: "SEARCH process creation events. FOR each event, CALCULATE Shannon entropy of the command line. IF ParentProcessName is common (e.g. 'explorer.exe') AND command-line entropy > 95th percentile, ALERT."
  - question: "Does a machine learning model classify a process creation event as evasive based on its combined features?"
    context: "This question uses a supervised model to identify defense evasion by looking at a combination of factors. Features like hash reputation, parent process name, and command-line characteristics (length, entropy) are used to train a model to distinguish between benign and evasive process creations, allowing for the detection of more nuanced or novel evasion techniques."
    answer_sources: "Windows Event ID 4688. All Windows endpoints and servers, particularly those with user-interactive sessions (workstations, terminal servers)."
    range: "last 90 days"
    queries: "INPUT process features (hash reputation, parent name, command-line entropy) into a trained classifier. IF model predicts 'evasive' with high probability, ALERT."
  - question: "Has an Office application or browser created a process but reported a different, trusted process like 'explorer.exe' as the parent?"
    context: "This question targets a common pattern where an initial exploit in a document or webpage (via an Office app or browser) spawns a new process, but spoofs the parent to hide its true origin. A mismatch where the creator is 'WINWORD.EXE' but the parent is 'explorer.exe' is a classic indicator of this type of defense evasion."
    answer_sources: "Windows Event ID 4688. User workstations, particularly those processing documents from external sources like email or web downloads."
    range: "last 90 days"
    queries: "SEARCH process events (EID 4688). IF CreatorProcessName is an Office app/browser AND CreatorProcessName != ParentProcessName AND ParentProcessName is 'explorer.exe'/'svchost.exe', ALERT."
  - question: "Has an application like an Office product spawned a new, statistically rare process, while also spoofing its parent process?"
    context: "This question looks for unusual downstream activity following a PPID spoof. After a process like Word spawns a child and spoofs its parent, the child process itself might be unusual. By identifying statistically rare (Creator Process, New Process) combinations, we can pinpoint when an application like Word spawns an unexpected tool as part of an attack chain."
    answer_sources: "Windows Event ID 4688. User workstations, particularly those processing documents from external sources like email or web downloads."
    range: "last 90 days"
    queries: "SEARCH process events with CreatorProcessName != ParentProcessName. COUNT occurrences of (CreatorProcessName, NewProcessName) tuples. IF tuple is statistically rare (e.g., < 5 occurrences in 30 days), ALERT."
  - question: "Does a machine learning model predict a high probability of malicious spoofing based on the creator, parent, and child process combination?"
    context: "This question uses a model to learn which process lineage combinations are malicious. By one-hot encoding the creator, parent, and child process names, a simple model like logistic regression can learn to distinguish benign spoofing (like UAC) from malicious patterns (like Word creating PowerShell but parented by explorer.exe) with high accuracy."
    answer_sources: "Windows Event ID 4688. User workstations, particularly those processing documents from external sources like email or web downloads."
    range: "last 90 days"
    queries: "INPUT one-hot encoded (Creator, Parent, Child) process names into a trained logistic regression model. IF model predicts high probability of malicious spoof, ALERT."
  - question: "Has a Living-Off-the-Land Binary (LOLBAS) been executed with a spoofed parent, and did it subsequently make a suspicious network connection?"
    context: "This question links process-level evasion with network-level indicators. It identifies when a LOLBAS (like 'powershell.exe') is launched evasively (e.g., by Office, but parented by 'explorer.exe') and then immediately correlates that activity with network logs to see if the process made a callout to a malicious or uncategorized destination, providing strong, combined evidence of a compromise."
    answer_sources: "Windows Event ID 4688, Zeek conn.log. All Windows systems, with a focus on internet-facing servers and standard user workstations where LOLBAS abuse is common."
    range: "last 90 days"
    queries: "SEARCH for LOLBAS execution where Creator is Office/browser and Parent is 'explorer.exe'. EXTRACT ProcessGUID. QUERY network logs for connections from that ProcessGUID to malicious/uncategorized IPs within 1 minute of creation. ALERT on match."
  - question: "Is the observed set of parent and creator processes for a specific LOLBAS execution statistically different from the enterprise-wide baseline?"
    context: "This question uses a statistical test to find anomalous LOLBAS usage. Every LOLBAS has a typical set of parent and creator processes in a given environment. By comparing the observed parent/creator for a new execution against the established baseline using a Chi-squared test, we can identify executions that significantly deviate from normal patterns, indicating potential misuse."
    answer_sources: "Windows Event ID 4688, Zeek conn.log. All Windows systems, with a focus on internet-facing servers and standard user workstations where LOLBAS abuse is common."
    range: "last 90 days"
    queries: "BASELINE distribution of (parent, creator) for each LOLBAS. FOR new LOLBAS execution, compare its (parent, creator) to baseline using Chi-squared test. IF deviation is statistically significant, ALERT."
  - question: "Does an unsupervised anomaly detection model, like Isolation Forest, flag a LOLBAS execution as an outlier?"
    context: "This question applies an anomaly detection algorithm suited for high-dimensional data to find suspicious LOLBAS executions. An Isolation Forest can quickly identify outliers in a dataset based on features like user, host, parent/creator processes, and command-line parameters, making it effective at spotting the 'needle in the haystack' malicious execution among millions of benign ones."
    answer_sources: "Windows Event ID 4688, Zeek conn.log. All Windows systems, with a focus on internet-facing servers and standard user workstations where LOLBAS abuse is common."
    range: "last 90 days"
    queries: "INPUT LOLBAS execution features (user, host, parent, creator, cmdline) into a trained Isolation Forest model. IF model flags the event as an outlier, ALERT."
  - question: "Has 'explorer.exe' spawned a new process while running as the SYSTEM user or in a non-interactive session (Session 0)?"
    context: "This question targets an illogical and highly suspicious condition. The legitimate 'explorer.exe' process is the user's shell and runs in their interactive session context. If 'explorer.exe' is observed as a parent process while running as NT AUTHORITY\\SYSTEM or in Session 0, it is almost certainly a malicious process masquerading as 'explorer.exe' or an injected instance being used for evasion."
    answer_sources: "Windows Event ID 4688. Remote Desktop Session Hosts, Citrix servers, and other multi-user or remote access servers."
    range: "last 90 days"
    queries: "SEARCH process creation events. IF ParentProcessName is 'explorer.exe' AND parent's SubjectUserName is 'NT AUTHORITY\\SYSTEM' OR parent's SessionID is 0, ALERT."
  - question: "Has a process spawned by 'explorer.exe' originated from an 'explorer.exe' instance with a statistically anomalous user or session ID?"
    context: "This question identifies abuse by profiling the context of the parent 'explorer.exe'. By baselining the typical user accounts and session IDs associated with 'explorer.exe' as a parent, we can flag any child process spawned from an 'explorer.exe' instance running under a service account or an unusual session ID, which is a strong indicator of malicious activity."
    answer_sources: "Windows Event ID 4688. Remote Desktop Session Hosts, Citrix servers, and other multi-user or remote access servers."
    range: "last 90 days"
    queries: "BASELINE user and session ID distribution for parent 'explorer.exe' processes. IF a new process is spawned by an 'explorer.exe' with an outlier user or session ID, ALERT."
  - question: "Does a time-series model detect an anomalous process sequence originating from an 'explorer.exe' process with an unusual context?"
    context: "This question uses a time-series model to detect when a seemingly normal process chain (e.g., explorer.exe -> cmd.exe) occurs in an abnormal context. The model learns the typical sequences and contexts within a user session. An alert is triggered if a known sequence occurs but with anomalous attributes, such as the parent 'explorer.exe' running as SYSTEM, causing a high reconstruction error."
    answer_sources: "Windows Event ID 4688. Remote Desktop Session Hosts, Citrix servers, and other multi-user or remote access servers."
    range: "last 90 days"
    queries: "INPUT process chain sequences into a time-series model. IF a sequence with an anomalous parent context (e.g., 'explorer.exe' as SYSTEM) causes a high reconstruction error, ALERT."