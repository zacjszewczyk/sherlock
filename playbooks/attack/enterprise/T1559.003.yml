name: T1559.003: XPC Services
id: e4a3b2c1-d0f9-4e8a-7b6c-5d4e3f2a1b09
description: This playbook helps answer the question, "Is an adversary executing malicious code using XPC services?". It provides investigative steps to detect suspicious XPC service activity, such as execution of services with known-bad indicators (file hash, path, or signature), anomalous path entropy or execution volume, and 'write-then-execute' patterns in user-writable directories. It also covers monitoring for unusual Inter-Process Communication (IPC) from script interpreters to high-privilege services, identifying services executed from non-standard locations or with invalid signatures, and detecting XPC services launched by unexpected parent processes.
type: technique
related:
  - TA0002: Execution
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has an XPC service process been executed that matches a known-bad indicator from threat intelligence?
    context: This question aims to identify the most straightforward signs of compromise by checking if a newly executed XPC service is already flagged as malicious. Matching against threat intelligence feeds for file hashes (SHA256), file paths, or the thumbprint of the signing certificate provides a high-confidence signal that a known threat is present on the system.
    answer_sources:
      - Endpoint: Process Creation Events
      - Endpoint: Code Signature Information
      - Relevant on macOS endpoints, particularly developer workstations, critical servers, and systems running custom macOS applications.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH Process_Creation_Events where process_type = 'XPC'
          JOIN Code_Signature_Info on process_id
          LOOKUP Threat_Intel_Feeds on process_hash, process_path, signer_thumbprint
          WHERE match_found
  - question: Has an XPC service been executed from a file path with unusually high entropy, suggesting a randomized or obfuscated location?
    context: Malware often uses randomized file paths to evade static, path-based detection rules. By calculating the Shannon entropy of the file path for each executed XPC service and comparing it against a historical baseline, we can detect such evasion techniques. A path entropy value in the top 95th percentile suggests a statistically significant deviation from normal behavior and warrants investigation.
    answer_sources:
      - Endpoint: Process Creation Events
      - Relevant on macOS endpoints, particularly developer workstations, critical servers, and systems running custom macOS applications.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each XPC Process_Creation_Event:
            path_entropy = calculate_shannon_entropy(process_path)
            baseline = get_95th_percentile_entropy('XPC', last_30_days)
            IF path_entropy > baseline:
              ALERT
  - question: Has there been an anomalous spike in the volume of XPC service executions on an endpoint?
    context: A sudden, unexpected increase in the number of XPC service executions can indicate malicious activity, such as a malware component rapidly spawning processes or an attacker performing reconnaissance. This question uses a time-series forecasting model to establish a baseline of normal activity volume and flags any hourly count that significantly exceeds the predicted upper bound (99% confidence interval), pointing to a potential burst of suspicious executions.
    answer_sources:
      - Endpoint: Process Creation Events
      - Relevant on macOS endpoints, particularly developer workstations, critical servers, and systems running custom macOS applications.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each endpoint, each hour:
            observed_count = COUNT(XPC_Process_Creations)
            predicted_upper_bound = forecast_model.predict_upper_ci()
            IF observed_count > predicted_upper_bound:
              ALERT
  - question: Has a process written an XPC service bundle to a user-writable directory and then immediately executed it?
    context: This "write-then-execute" behavior is a classic indicator of malware dropping and running a payload. Legitimate installers might do this, but it's highly suspicious in user-writable locations like /tmp or /Users/Shared. This question looks for a tight temporal correlation (within 60 seconds) between a file with a .xpc or .appex extension being created and then executed by a child of the creating process, which can uncover self-installing threats.
    answer_sources:
      - Endpoint: File Creation Events
      - Endpoint: Process Creation Events
      - Relevant on user-writable directories on macOS endpoints, such as /tmp, /Users/Shared, ~/Library/Caches, and ~/Library/Application Support.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH File_Creation_Events where file_path ends with ('.xpc', '.appex') AND file_path in user_writable_dirs
          JOIN Process_Creation_Events on file_path, where parent_process_id = file_creator_process_id
          WHERE process_creation_time - file_creation_time < 60_seconds
  - question: Is a specific process performing the 'write-then-execute' action for XPC services at a statistically unusual rate?
    context: While some processes might legitimately write and execute XPC services, a sudden increase in this activity for a single process can be suspicious. This question establishes a historical baseline for how often each process (e.g., curl, bash) performs this action per day. An alert is triggered if the daily count for a process exceeds its normal behavior by more than three standard deviations, indicating a potential misuse of that process to drop and run malicious XPC payloads.
    answer_sources:
      - Endpoint: File Creation Events
      - Endpoint: Process Creation Events
      - Relevant on user-writable directories on macOS endpoints, such as /tmp, /Users/Shared, ~/Library/Caches, and ~/Library/Application Support.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each process_name, each day:
            daily_count = COUNT(write_then_execute_events)
            mean, std_dev = calculate_stats(process_name, last_30_days)
            IF daily_count > (mean + 3 * std_dev):
              ALERT
  - question: Can a 'write-then-execute' sequence for an XPC service be classified as malicious by a machine learning model?
    context: This question moves beyond simple heuristics to a more sophisticated, model-based detection. By training a classifier on various features of the 'write-then-execute' event (e.g., who created it, where it was created, how quickly it was run, its signature status), the model can learn the complex patterns that distinguish malicious activity from benign. An alert on a high probability score (>0.9) provides a strong, context-aware signal of a potential threat.
    answer_sources:
      - Endpoint: File Creation Events
      - Endpoint: Process Creation Events
      - Relevant on user-writable directories on macOS endpoints, such as /tmp, /Users/Shared, ~/Library/Caches, and ~/Library/Application Support.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each write_then_execute_event:
            features = extract_features(event)
            malicious_prob = ml_model.predict_proba(features)
            IF malicious_prob > 0.9:
              ALERT
  - question: Is a script interpreter or network utility communicating with a high-privilege system XPC service?
    context: High-privilege XPC services (like com.apple.securityd) control sensitive system functions. It is highly unusual for them to receive commands directly from script interpreters (python, bash) or network tools (curl). Such an Inter-Process Communication (IPC) event is a strong indicator that an attacker is using a script to interact with and potentially abuse core system services for privilege escalation or persistence. This question uses watchlists to flag these high-risk interactions.
    answer_sources:
      - Endpoint: IPC Connection Events
      - Endpoint: Process Creation Events
      - Relevant on system-level XPC services on all macOS endpoints; IPC communication channels and process relationship graphs monitored by endpoint security tools.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH IPC_Connection_Events
          WHERE client_process_name IN (suspicious_clients_watchlist)
          AND server_process_name IN (high_privilege_xpc_watchlist)
  - question: Has a high-privilege XPC service received a connection from a statistically rare client process?
    context: Legitimate system operations result in predictable IPC patterns. By analyzing the historical frequency of which clients connect to which XPC services, we can identify normal behavior. A connection from a client process that has rarely or never before communicated with a particular high-privilege service (e.g., in the bottom 5th percentile of historical connections) is a statistical anomaly. This could indicate an attacker using a novel or hijacked process to issue commands.
    answer_sources:
      - Endpoint: IPC Connection Events
      - Endpoint: Process Creation Events
      - Relevant on system-level XPC services on all macOS endpoints; IPC communication channels and process relationship graphs monitored by endpoint security tools.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each IPC_Connection_Event:
            client_freq = get_historical_frequency(client_process, server_process)
            rarity_percentile = calculate_percentile(client_freq)
            IF rarity_percentile < 5:
              ALERT
  - question: Does an XPC connection represent an outlier in the overall graph of process interactions on the system?
    context: This question models the system's entire IPC behavior as a graph, where processes are nodes and XPC connections are edges. By using advanced graph analytics (like Node2Vec and DBSCAN), we can learn what "normal" clusters of interactions look like. This approach can uncover sophisticated attacks where the individual client and server might seem benign, but their interaction is structurally anomalous compared to the baseline behavior of the entire system. Outlier connections identified by this method represent novel communication pathways that warrant investigation.
    answer_sources:
      - Endpoint: IPC Connection Events
      - Endpoint: Process Creation Events
      - Relevant on system-level XPC services on all macOS endpoints; IPC communication channels and process relationship graphs monitored by endpoint security tools.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BUILD graph from all IPC_Connection_Events
          LEARN node_embeddings using Node2Vec
          CLUSTER embeddings using DBSCAN
          FOR each node (connection) in outlier_cluster:
            ALERT
  - question: Has an XPC service been executed from a non-standard location, with an invalid signature, or with an untrusted signer?
    context: Legitimate XPC services are typically located in protected system directories, are properly signed by Apple or a trusted developer, and have a valid signature. This question combines three strong indicators of maliciousness: execution from an unusual path (like /private/tmp/), a missing or invalid code signature, or a signature from an unknown or untrusted Certificate Authority. An alert on any of these conditions points to a high-likelihood malicious or unauthorized XPC service.
    answer_sources:
      - Endpoint: Process Creation Events
      - Endpoint: Code Signature Information
      - Relevant on file systems of macOS endpoints, particularly non-standard locations like /private/tmp/, /Users/Shared/, and user home directories; Enterprise certificate trust stores.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH Process_Creation_Events where process_type = 'XPC'
          JOIN Code_Signature_Info
          WHERE (process_path NOT IN ('/System/*', '/Library/*', '/Applications/*'))
          OR (signature_status IN ('unsigned', 'invalid'))
          OR (signer_issuer NOT IN (trusted_ca_list))
  - question: Is an XPC service signed by a developer certificate with a subject name that is unusually different from previously seen legitimate ones?
    context: Attackers may use typo-squatted or slightly altered developer names (e.g., "Gooogle Inc." instead of "Google LLC") to sign their malware, hoping to fool a cursory inspection. This question detects such impersonation attempts by calculating the Levenshtein (edit) distance between the new signer's subject name and the set of all known-good subjects. A completely new certificate or one with a subject name that is only slightly different from a known one (but still an outlier) is flagged for review.
    answer_sources:
      - Endpoint: Process Creation Events
      - Endpoint: Code Signature Information
      - Relevant on file systems of macOS endpoints, particularly non-standard locations like /private/tmp/, /Users/Shared/, and user home directories; Enterprise certificate trust stores.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new XPC_Process_Event with a signature:
            new_subject = event.signer_subject
            min_distance = min(levenshtein(new_subject, old_subject) for old_subject in historical_subjects)
            IF new_subject is unseen OR min_distance > 95th_percentile_distance:
              ALERT
  - question: Does a new XPC service execution deviate from the established profile of 'normal' XPC services according to an anomaly detection model?
    context: This question uses a One-Class SVM, an anomaly detection algorithm, to build a comprehensive model of what constitutes a "normal" XPC service execution. The model is trained exclusively on known-good examples, learning a boundary around normal behavior based on features like path entropy, parent process, and signature details. Any new XPC execution that falls outside this boundary is flagged as an outlier, allowing for the detection of novel threats that don't match any specific rule but simply "don't look right".
    answer_sources:
      - Endpoint: Process Creation Events
      - Endpoint: Code Signature Information
      - Relevant on file systems of macOS endpoints, particularly non-standard locations like /private/tmp/, /Users/Shared/, and user home directories; Enterprise certificate trust stores.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new XPC_Process_Event:
            features = extract_features(event)
            is_outlier = one_class_svm_model.predict(features)
            IF is_outlier:
              ALERT
  - question: Has a known system XPC service been launched by an unexpected parent process?
    context: Most system XPC services have a predictable parent process, which is almost always `launchd` (PID 1) or a specific application they belong to. An attacker might exploit a vulnerability in another process to launch a system service for their own purposes. This question checks every XPC service launch against a pre-defined allow-list of valid parent-child relationships. A mismatch, such as com.apple.airportd being launched by Terminal.app, is a strong indicator of misuse or process injection.
    answer_sources:
      - Endpoint: Process Creation Events
      - Relevant on process trees on all macOS endpoints, focusing on children of common user-facing applications like browsers, terminal emulators, and document editors.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH Process_Creation_Events where child_process_type = 'XPC'
          LOOKUP parent_allow_list on child_process_name
          WHERE parent_process_name NOT IN allowed_parents
  - question: Has an XPC service been launched by a statistically rare parent process?
    context: This question provides a dynamic alternative to a static allow-list. Instead of pre-defining parent-child relationships, it learns them from historical data. For any given XPC service, it tracks how often it is launched by each parent process. If a launch occurs where the parent is extremely rare (e.g., responsible for less than 0.1% of all historical launches for that service), it is flagged as an anomaly. This can detect abuse without requiring manual maintenance of an allow-list.
    answer_sources:
      - Endpoint: Process Creation Events
      - Relevant on process trees on all macOS endpoints, focusing on children of common user-facing applications like browsers, terminal emulators, and document editors.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each XPC_Process_Creation_Event:
            parent_freq = get_historical_parent_frequency(child_process, parent_process)
            IF parent_freq < 0.001:
              ALERT
  - question: Can the parent-child relationship for an XPC service launch be classified as illegitimate by a machine learning model?
    context: This question employs a supervised machine learning model (Random Forest) to make a high-confidence judgment on whether a parent-child process relationship is legitimate. By training on a rich set of features including process names, paths, command-line arguments, and user context, the model can learn subtle patterns that differentiate normal system behavior from malicious process spawning. An event flagged as 'illegitimate' with high confidence (>0.8) is a strong signal of compromise.
    answer_sources:
      - Endpoint: Process Creation Events
      - Relevant on process trees on all macOS endpoints, focusing on children of common user-facing applications like browsers, terminal emulators, and document editors.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each XPC_Process_Creation_Event:
            features = extract_parent_child_features(event)
            illegitimate_prob = ml_model.predict_proba(features)
            IF illegitimate_prob > 0.8:
              ALERT