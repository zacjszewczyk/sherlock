name: T1059.010: AutoHotKey & AutoIT
id: 9e3c8a5d-1b7f-4b0e-8f1a-2c3d4e5f6a7b
description: |
  This playbook helps answer the primary investigative requirement: Has the adversary executed commands using AutoHotKey or AutoIT scripts? It provides a structured approach to detecting malicious use of AutoHotKey (AHK) and AutoIt, which are scripting languages that can be used by adversaries for execution. Detections focus on several key areas: identifying the execution of AHK/AutoIt interpreters or compiled scripts that connect to known malicious C2 servers; spotting executions from non-standard or user-writable file paths; analyzing PE file characteristics such as specific section names ('.AU3!.', '.AHK!.') and high entropy to find packed or compiled scripts; monitoring for AHK/AutoIt processes spawning suspicious child processes like LOLBAS (e.g., 'powershell.exe'); and detecting anomalous network activity such as connections to rare destinations or periodic 'heartbeat' beaconing indicative of C2 communication.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has an AutoHotkey or AutoIt process executed and connected to a known malicious IP or domain?
    context: |
      This question aims to find the most direct evidence of compromise. It correlates the execution of AutoHotkey/AutoIt interpreters or compiled scripts with outbound network connections that match known command and control (C2) servers from threat intelligence feeds. A match provides a high-confidence indicator that the script is being used for malicious purposes.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Zeek files.log
      - Enterprise workstations
      - Application Servers
      - Domain Controllers
      - Network Egress/Internet Gateway
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process execution events (Sysmon 1, Win 4688) for 'AutoHotkey.exe' or 'AutoIt3.exe'.
          CORRELATE with network logs (Zeek conn, dns) from the same host within a 1-minute window.
          CHECK file hashes (Zeek files) and destination IPs/domains against threat intelligence.
          ALERT on match.
  - question: Is an AutoHotkey or AutoIt process communicating over a statistically rare port or protocol?
    context: |
      Adversaries may use non-standard ports to evade detection. This question identifies anomalous network behavior by baselining normal port/protocol usage for AutoHotkey/AutoIt processes across the enterprise. Connections using very infrequent pairs (e.g., in the bottom 5th percentile) are flagged as suspicious, potentially indicating a covert C2 channel.
    answer_sources:
      - Zeek conn.log
      - Enterprise workstations
      - Application Servers
      - Domain Controllers
      - Network Egress/Internet Gateway
    range: last 90 days
    queries:
      - pseudocode: |
          FOR network connections from AutoHotkey/AutoIt processes, AGGREGATE destination port/protocol pairs over a 30-day baseline.
          CALCULATE frequency distribution.
          ALERT if a new connection uses a port/protocol pair in the bottom 5th percentile of usage.
  - question: Can machine learning classify an AutoHotkey or AutoIt execution event as malicious based on combined process and network features?
    context: |
      This question uses a supervised machine learning model to make a holistic judgment on whether an AutoHotkey/AutoIt execution is malicious. By training on features from both process activity (parent process, command line entropy) and network logs (IP reputation, port rarity, JA3/JA3S hashes), the model can identify complex patterns that are difficult to spot with simple rules, leading to more accurate and nuanced detection.
    answer_sources:
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek pe.log
      - Enterprise workstations
      - Application Servers
      - Domain Controllers
      - Network Egress/Internet Gateway
    range: last 90 days
    queries:
      - pseudocode: |
          INPUT features (process name, parent, cmdline entropy, PE info, IP reputation, port rarity, JA3/JA3S) from Sysmon 1 and Zeek logs into a pre-trained classification model.
          ALERT if the model classifies the event as 'malicious' with high probability.
  - question: Was an AutoHotkey or AutoIt interpreter executed from a non-standard directory, or was a script run from a high-risk location?
    context: |
      Legitimate software is typically installed in standard locations like 'C:\Program Files'. Adversaries often place tools in user-writable or temporary directories ('%TEMP%', '%APPDATA%') to bypass administrative controls and hide their activity. This question checks for executions from unapproved interpreter paths and script files located in these high-risk directories, which is a strong indicator of malicious use.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Enterprise workstations
      - User profile directories on servers
      - Shared network drives
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process creation logs (Sysmon 1, Win 4688) for 'AutoHotkey.exe' or 'AutoIt3.exe'.
          ALERT if the process path is not in the allow-list (e.g., 'C:\Program Files\...').
          PARSE command line for script path.
          ALERT if script path is in a high-risk directory (e.g., '%TEMP%', '%APPDATA%').
  - question: Has an AutoHotkey or AutoIt interpreter or script been executed from a statistically rare file path?
    context: |
      This question identifies anomalous execution locations without relying on predefined deny-lists. By creating a baseline of all historical execution paths for AutoHotkey/AutoIt interpreters and scripts, we can flag any new execution that occurs from a path that is statistically rare (e.g., below the 1st percentile) or has never been seen before. This helps detect adversaries using novel locations to stage their tools.
    answer_sources:
      - Sysmon Event ID 1
      - Enterprise workstations
      - User profile directories on servers
      - Shared network drives
    range: last 90 days
    queries:
      - pseudocode: |
          AGGREGATE all interpreter and script file paths from AutoHotkey/AutoIt process events (Sysmon 1) over a 30-day baseline.
          CALCULATE path frequency.
          ALERT if a new execution path's frequency is below the 1st percentile or is previously unseen.
  - question: Does an AutoHotkey or AutoIt execution event register as an anomaly by a machine learning model based on its path and context?
    context: |
      This question uses an unsupervised anomaly detection model to find unusual executions that may not be caught by simple path rules. The model considers a combination of features, including the parent process, user account, and characteristics of the interpreter and script paths (e.g., depth, keywords like 'Temp'). It assigns an anomaly score to each event, allowing analysts to focus on the most suspicious executions that deviate from established normal behavior.
    answer_sources:
      - Sysmon Event ID 1
      - Enterprise workstations
      - User profile directories on servers
      - Shared network drives
    range: last 90 days
    queries:
      - pseudocode: |
          INPUT features (parent process, user, path depth, path keywords) from Sysmon 1 into a pre-trained anomaly detection model (e.g., Isolation Forest).
          ALERT if the event's anomaly score exceeds a defined threshold.
  - question: Has an executable file with PE section names characteristic of a compiled AutoIt or AutoHotkey script been executed?
    context: |
      When AutoIt or AutoHotkey scripts are compiled into standalone executables, they often contain specific, identifiable PE section names like '.AU3!.' or '.AHK!.'. This question seeks to identify these suspicious executables at the network layer (as they are transferred) and then confirm if they were actually run on an endpoint. This provides strong evidence of a disguised script being used.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek pe.log
      - Zeek files.log
      - Network Egress/Internet Gateway (for PE file capture)
      - Enterprise workstations
      - Download directories
    range: last 90 days
    queries:
      - pseudocode: |
          SCAN Zeek pe.log for files with PE section names '.AU3!.' or '.AHK!.'.
          EXTRACT file hash.
          QUERY process logs (Sysmon 1, Win 4688) for execution of that hash.
          ALERT on confirmed execution.
  - question: Has an unsigned executable with unusually high file entropy been observed?
    context: |
      High file entropy is a common characteristic of packed or encrypted files, a technique adversaries use to obfuscate their malware. Legitimate, signed executables typically have a predictable entropy range. This question looks for executables that are both unsigned and have a high entropy value (e.g., in the top 2nd percentile), which strongly suggests the file is a packed payload, possibly a compiled AutoIt/AHK script.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Network Egress/Internet Gateway (for PE file capture)
      - Enterprise workstations
      - Download directories
    range: last 90 days
    queries:
      - pseudocode: |
          FOR all new executables (Zeek files.log), CALCULATE Shannon entropy.
          CHECK if the executable is unsigned (Sysmon 1).
          ALERT if the file is unsigned AND its entropy is in the top 2nd percentile of a baseline for known-good executables.
  - question: Can a machine learning model classify a given executable as a compiled script based on its PE features?
    context: |
      This question leverages a multi-class classifier to automatically categorize executable files. By analyzing a rich set of PE features (entropy, signature status, section names, imports, etc.), the model can distinguish between benign files, generally packed files, and files specifically identified as compiled scripts. This automates a complex analysis process and provides a confident classification to prioritize investigation.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Network Egress/Internet Gateway (for PE file capture)
      - Enterprise workstations
      - Download directories
    range: last 90 days
    queries:
      - pseudocode: |
          INPUT PE features (entropy, signature, section names, imports) from Zeek logs into a multi-class classifier.
          ALERT if a file is classified as 'Packed' or 'Compiled-Script', especially if it is observed being executed.
  - question: Has an AutoHotkey or AutoIt process spawned a suspicious child process, such as a LOLBAS, with malicious command-line arguments?
    context: |
      A common adversary pattern is to use a scripting interpreter like AutoIt to launch other built-in Windows tools (Living Off the Land Binaries, or LOLBAS) like PowerShell or 'cmd.exe' to execute commands. This question specifically looks for this parent-child relationship and checks the child process's command line for keywords associated with malicious activity (e.g., '-enc', 'IEX', 'DownloadString'), providing a strong indicator of defense evasion and execution.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Enterprise workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process logs (Sysmon 1) for a parent process of 'AutoHotkey.exe', 'AutoIt3.exe', or a known compiled script hash.
          CHECK if the child process is a known LOLBAS (e.g., 'powershell.exe').
          ALERT if the child's command line contains suspicious keywords (e.g., 'IEX', '-enc').
  - question: Did a child process spawned by AutoHotkey or AutoIt have a command line with statistically high entropy?
    context: |
      Adversaries often encode or obfuscate commands passed on the command line to evade signature-based detection. These obfuscated commands typically have a higher Shannon entropy (a measure of randomness) than plain-text commands. This question calculates the entropy of command lines for processes spawned by AutoHotkey/AutoIt and alerts when it is anomalously high, suggesting the presence of hidden code.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Enterprise workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: |
          FOR child processes of AutoHotkey/AutoIt, CALCULATE Shannon entropy of the command line.
          COMPARE against a baseline of command-line entropy for all processes.
          ALERT if entropy exceeds the 99th percentile.
  - question: Does a process execution chain involving AutoHotkey or AutoIt represent a statistically rare or anomalous sequence of events?
    context: |
      Normal software behavior often follows predictable patterns of process creation. This question uses a sequence analysis model (like an n-gram model) to learn these common patterns. When a new process chain involving AutoHotkey/AutoIt occurs, the model scores its probability. A very low probability score indicates that the sequence is highly unusual and anomalous, potentially representing a novel or evasive adversary technique.
    answer_sources:
      - Sysmon Event ID 1
      - Enterprise workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL common parent-child process sequences and command-line patterns using a sequence analysis model.
          SCORE new process chains involving AutoHotkey/AutoIt based on their probability.
          ALERT if a sequence has a very low probability score, indicating an anomaly.
  - question: Has an AutoHotkey or AutoIt process made a network connection to a destination matching a threat intelligence feed?
    context: |
      This question provides a direct link between a specific process and a known malicious destination. By using data sources like Sysmon Event ID 3, which explicitly ties a process image to a network connection, we can filter for AutoHotkey/AutoIt processes and check their destination IP or hostname against threat intelligence feeds. A match is a high-confidence indicator of C2 communication.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress/Internet Gateway
      - DNS Servers
      - Enterprise workstations
    range: last 90 days
    queries:
      - pseudocode: |
          FILTER Sysmon Event ID 3 for Image 'AutoHotkey.exe' or 'AutoIt3.exe'.
          CHECK DestinationIp and DestinationHostname against threat intelligence feeds.
          ALERT on any match.
  - question: Did an AutoHotkey or AutoIt process make a network connection to a statistically rare destination for that host?
    context: |
      Instead of relying solely on known-bad indicators, this question identifies suspicious connections by baselining what is normal for each host. It calculates a rarity score for new connections from AutoHotkey/AutoIt processes based on a combination of features like the destination IP, ASN, country, and JA3S hash. A connection that is highly rare for that specific host is flagged as anomalous.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network Egress/Internet Gateway
      - DNS Servers
      - Enterprise workstations
    range: last 90 days
    queries:
      - pseudocode: |
          FOR a given host, BASELINE outbound connection features (destination IP/ASN/country, JA3S) from Zeek conn.log.
          For new connections from AutoHotkey/AutoIt, CALCULATE a combined rarity score.
          ALERT if the score exceeds the 99th percentile.
  - question: Is an AutoHotkey or AutoIt process exhibiting network beaconing behavior?
    context: |
      Command and control implants often communicate with their C2 server on a regular, periodic basis, known as beaconing. This question aims to detect this pattern. By analyzing the time intervals between connections and the consistency of data sizes for a specific host-destination pair linked to an AutoHotkey/AutoIt process, we can use statistical methods to identify the non-random, repeating signals characteristic of C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network Egress/Internet Gateway
      - DNS Servers
      - Enterprise workstations
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each host-destination pair involving AutoHotkey/AutoIt, CREATE a time series of connections from Zeek conn.log.
          ANALYZE time deltas and data sizes for periodicity and consistency.
          ALERT if a strong, repeating pattern (beacon) is detected.