name: T1218.001: Compiled HTML File
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries evading defenses by abusing Compiled HTML Files (.chm). It identifies malicious use cases, including the execution of .chm files with known malicious hashes that lead to command-and-control (C2) communication; analysis of hh.exe command lines for suspicious patterns like script execution or remote content fetching; detection of hh.exe spawning unusual child processes like shells or scripting engines; observation of hh.exe dropping and executing new files in temporary locations; and flagging the execution of .chm files from non-standard, high-risk paths such as download or temporary cache folders.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious Compiled HTML (.chm) file been observed, leading to network connections with known command-and-control (C2) infrastructure?
    context: This question aims to identify a high-confidence attack chain. It links the initial delivery or access of a malicious file (identified by its hash) to subsequent outbound C2 communication originating from the process chain started by the HTML Help executable (hh.exe). Correlating a known malicious file with known malicious network infrastructure provides a strong signal that a defense evasion attempt was successful.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Email gateway, Web proxy/gateway, DNS servers, Network Security Monitoring (NSM) sensor, Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each .chm file in file logs (Zeek files.log, WinEvent 4663):
            CALCULATE file_hash
            IF file_hash IN known_malicious_hashes:
              FIND corresponding hh.exe process (WinEvent 4688)
              FOR each child_process of hh.exe:
                FIND network connections (Zeek conn.log, dns.log)
                IF connection_destination IN known_c2_ips_or_domains:
                  ALERT on high-severity correlation
  - question: Are processes spawned by the HTML Help executable (hh.exe) communicating with rare, new, or algorithmically generated domains?
    context: This question seeks to uncover suspicious network activity even when the destination is not on a known threat intelligence list. Adversaries often use newly registered domains (NRDs) or domain generation algorithms (DGAs) for C2. By analyzing the rarity of the destination ASN, the age of the domain, the reputation of the IP, and the randomness (entropy) of the domain name, analysts can identify connections that deviate from normal organizational patterns and are indicative of malicious C2 channels.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Email gateway, Web proxy/gateway, DNS servers, Network Security Monitoring (NSM) sensor, Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each hh.exe process (WinEvent 4688):
            FOR each child_process:
              FOR each network_connection (Zeek conn.log, dns.log):
                CALCULATE rarity of destination_ip, destination_domain, destination_asn vs 30-day baseline
                CALCULATE entropy of destination_domain
                CHECK if domain_age < 30 days
                IF rarity is high OR entropy > 3.5 OR domain is new:
                  ALERT on suspicious network activity
  - question: Can a machine learning model classify process and network activity stemming from hh.exe executions as malicious?
    context: This question proposes a proactive, machine-learning-based approach to detection. By training a model on a rich set of features (e.g., process lineage, child process rarity, network port, domain age, data transfer volume), it's possible to identify complex malicious behaviors that might not trigger simpler, rule-based alerts. This helps detect novel or obfuscated variations of the technique.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Email gateway, Web proxy/gateway, DNS servers, Network Security Monitoring (NSM) sensor, Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features from hh.exe process chains (WinEvent 4688, Zeek conn.log, dns.log):
            - process_lineage_depth
            - child_process_name_rarity
            - destination_port, destination_ip_reputation
            - domain_age, domain_entropy
            - bytes_sent_received, connection_duration
          INPUT features into trained classification model (Random Forest, Gradient Boosting)
          IF model_prediction == 'malicious' with high_confidence:
            ALERT for analyst review
  - question: Is the HTML Help executable (hh.exe) being launched with command-line arguments indicating embedded script execution or remote content fetching?
    context: Legitimate use of hh.exe typically involves simple file paths. Adversaries abuse the command line to pass arguments that instruct hh.exe to execute embedded scripts (e.g., 'javascript:', 'vbscript:') or fetch and render remote content (e.g., 'ms-its:', 'http:'), which can be a vector for code execution. This question focuses on detecting these specific, high-fidelity abuse patterns directly from the command line.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process logs (WinEvent 4688) for ProcessName == 'hh.exe'
          APPLY regex to CommandLine for patterns like 'ms-its:', 'mk:@MSITStore:', 'javascript:', 'vbscript:', 'http:', 'https:'
          IF pattern is matched:
            ALERT on suspicious command line
  - question: Are there any instances of hh.exe being executed with unusually complex or obfuscated command-line arguments?
    context: Adversaries may obfuscate command-line arguments to evade simple keyword-based detections. Measuring the Shannon entropy of the command line provides a quantitative way to identify such obfuscation. A high entropy score suggests a high degree of randomness, which is uncharacteristic of normal commands and often indicates packed or encoded payloads. Comparing this score against a baseline of normal activity helps to pinpoint outliers.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ESTABLISH baseline entropy for hh.exe command lines over 30 days
          FOR each new hh.exe execution (WinEvent 4688):
            CALCULATE entropy of CommandLine
            IF entropy > 95th percentile of baseline:
              ALERT on high-entropy command line
  - question: Can an unsupervised machine learning model identify anomalous hh.exe command-line structures?
    context: This question leverages anomaly detection to find malicious activity without prior knowledge of specific attack patterns. An Isolation Forest model can learn the characteristics of normal hh.exe command lines (e.g., length, argument count, character types) and then "isolate" or flag new commands that are structurally different. This is effective for catching novel or unusual obfuscation techniques that might not be caught by entropy analysis alone.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features from hh.exe command lines:
            - command_line_length
            - argument_count
            - character_frequency
            - keyword_counts ('ms-its', 'http')
          TRAIN Isolation Forest model on benign feature set
          FOR each new hh.exe execution:
            IF model identifies command as an outlier:
              ALERT on anomalous command line
  - question: Has the HTML Help executable (hh.exe) spawned a suspicious child process, such as a command shell or scripting engine?
    context: The primary function of hh.exe is to display help files; it should not normally launch other programs, especially powerful tools like PowerShell, Command Prompt, or other Living-Off-the-Land Binaries (LOLBAS). Spawning such processes is a strong indicator that a malicious CHM file has executed a payload. This question uses a simple, high-fidelity denylist to catch the most common and dangerous child processes.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Critical servers, Log aggregation platform (SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process logs (WinEvent 4688) for ParentProcessName == 'hh.exe'
          DENYLIST = ['cmd.exe', 'powershell.exe', 'pwsh.exe', 'wscript.exe', 'cscript.exe', 'rundll32.exe', 'mshta.exe', 'bitsadmin.exe', 'certutil.exe']
          IF NewProcessName IN DENYLIST:
            ALERT on suspicious child process
  - question: Has hh.exe spawned a child process that is rare within the organization?
    context: Beyond a static denylist, this question seeks to identify unusual child processes by measuring their rarity across the enterprise. An attacker might use a less common or custom tool to avoid denylists. By baselining normal parent-child relationships, any process spawned by hh.exe that has been seen on very few machines becomes inherently suspicious and warrants investigation. This approach helps find the "unknown unknowns."
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Critical servers, Log aggregation platform (SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE parent-child relationships for parent 'hh.exe' over 30 days
          FOR each new 'hh.exe -> child_process' event:
            CALCULATE prevalence of child_process across all endpoints
            IF prevalence < 1% AND child_process NOT IN allowlist:
              ALERT on rare child process
  - question: Does a process execution chain originating from hh.exe represent a structural anomaly when compared to the graph of all enterprise process activity?
    context: This question takes a sophisticated graph-based approach to anomaly detection. Normal software behavior creates dense clusters of predictable process relationships (e.g., 'winword.exe' -> 'splwow64.exe'). Malicious activity, like 'hh.exe' spawning 'powershell.exe' which then runs 'whoami.exe', often forms a chain that is structurally isolated from these large "communities" of normal behavior. Using graph analytics to find these isolated chains can uncover entire attack sequences.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Critical servers, Log aggregation platform (SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD directed graph of all parent-child process relationships in the enterprise
          APPLY community detection algorithm (e.g., Louvain) to identify normal activity clusters
          FOR each process chain starting with 'hh.exe':
            IF chain does not belong to a large, established community:
              ALERT on structural process anomaly
  - question: Has an execution of hh.exe been quickly followed by the creation and execution of a new script or executable file in a temporary or user directory?
    context: This question targets a classic "dropper" behavior. A malicious CHM file is used to write a second-stage payload (like an .exe or .ps1 file) to a predictable location (like %TEMP% or %APPDATA%) and then immediately execute it. Correlating these three events—hh.exe run, file create, new process run—in a tight time window provides extremely strong evidence of a malicious payload delivery and execution.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations, File servers, Application servers hosting user-writable directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WATCH for hh.exe process creation (WinEvent 4688)
          IF observed, WITHIN 120 seconds, WATCH for file creation (WinEvent 4663) where:
            - File extension in ['.exe', '.dll', '.ps1', '.vbs', '.js', '.bat']
            - File path in ['%APPDATA%', '%TEMP%', '...\\Downloads']
          IF file created, WATCH for process creation (WinEvent 4688) for that new file
          IF all three events occur in sequence:
            ALERT on critical dropper activity
  - question: Has the hh.exe process created any executable or script files, which would be a deviation from its normal baseline behavior?
    context: This question simplifies the detection of dropper behavior by focusing on a single, highly anomalous action. The HTML Help executable should never create new executable files. By establishing a baseline of zero file-drop activity for hh.exe, any instance where it does create a script or executable is, by definition, a significant statistical anomaly that requires immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations, File servers, Application servers hosting user-writable directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE for hh.exe file creation activity is 0 executable/script files.
          FOR each hh.exe process execution (WinEvent 4688):
            COUNT executable/script files created by this process ID within 5 mins (WinEvent 4663)
            IF count > 0:
              ALERT on anomalous file drop
  - question: Can a time-series model detect the sequence of hh.exe execution followed by a file drop and execution as an anomalous behavioral pattern on a host?
    context: This question applies advanced machine learning to detect malicious sequences of events. An LSTM autoencoder can be trained on trillions of "normal" event sequences on endpoints. When it encounters a rare and suspicious sequence, like the one associated with a CHM dropper, it will be unable to "reconstruct" it accurately from its learned model of normality. This high reconstruction error serves as a powerful signal for anomalous, and potentially malicious, activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations, File servers, Application servers hosting user-writable directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN LSTM autoencoder on normal host event sequences (process create, file create, etc.)
          FEED new event sequences from each host into the model
          IF a sequence containing 'hh.exe' -> 'file write' -> 'new process' causes a high reconstruction error:
            ALERT on anomalous event sequence
  - question: Has a Compiled HTML (.chm) file been executed from a high-risk location, such as a download, temp, or email attachment cache folder?
    context: Legitimate help files are typically located in program installation or system directories. CHM files delivered by adversaries, however, are almost always executed from user-writable locations where browsers, email clients, and archivers place their files. This question uses a denylist of these high-risk paths to flag executions that are very likely to be user-initiated and potentially malicious.
    answer_sources:
      - Windows Event ID 4688
      - User workstations (specifically profile directories), Email client cache directories, Web browser download directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process logs (WinEvent 4688) for ProcessName == 'hh.exe'
          EXTRACT .chm file_path from CommandLine
          DENYLIST_PATHS = ['\\Downloads', '\\AppData\\Local\\Temp', '\\Temporary Internet Files\\', '\\INetCache\\', '\\AppData\\Local\\Microsoft\\Outlook\\']
          IF file_path contains any pattern in DENYLIST_PATHS:
            ALERT on execution from high-risk path
  - question: Has a .chm file been executed from a file path that is rare across the enterprise and not part of a standard software installation?
    context: This question aims to find outlier execution paths that don't match a denylist. By aggregating all .chm execution paths, an analyst can establish a baseline of "normal" locations. A path that is not in a common program directory (like C:\\Program Files) and is seen on very few endpoints is suspicious, as it could indicate a manually-placed or uniquely-delivered malicious file.
    answer_sources:
      - Windows Event ID 4688
      - User workstations (specifically profile directories), Email client cache directories, Web browser download directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE all .chm execution paths from hh.exe command lines over 30 days
          FOR each unique execution_path:
            CALCULATE prevalence of path across all endpoints
            IF prevalence < 1% AND path NOT IN standard_app_directories:
              ALERT on rare execution path
  - question: Can a machine learning model classify a .chm file's execution path as suspicious based on its textual features?
    context: This question proposes using a simple and fast machine learning model to automatically classify the legitimacy of a .chm file's location. By training a Naive Bayes classifier on features like path depth, keywords ('Temp', 'Download'), and location (user vs. system directory), the model can learn to distinguish between paths associated with legitimate software and those that resemble user-delivered malicious files, providing a probabilistic score of suspicion.
    answer_sources:
      - Windows Event ID 4688
      - User workstations (specifically profile directories), Email client cache directories, Web browser download directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features from benign .chm file paths:
            - path_depth
            - presence of keywords ('Temp', 'Download')
            - is_user_profile_path vs is_program_files_path
          TRAIN Naive Bayes classifier on benign feature set
          FOR each new .chm execution path:
            IF model classifies path as 'suspicious-like':
              ALERT for analyst review