name: T1543.001: Launch Agent
id: 9e8a7f6d-5c4b-4a39-8e7f-6d5c4b3a291e
description: This playbook helps investigate the malicious use of macOS Launch Agents for both persistence (Tactic TA0003) and privilege escalation (Tactic TA0004). It focuses on identifying newly created .plist files in Launch Agent directories, analyzing the processes they execute, and monitoring for suspicious follow-on behavior. Key indicators include processes spawned by `launchd` making outbound connections to malicious IPs, .plist files pointing to executables in non-standard locations, unusual parent processes creating these files (like `curl` or `bash`), behavioral chains involving file creation and network activity, and failed attempts by non-root users to modify protected Launch Agent directories. The playbook provides queries to detect these activities through rule-based, statistical, and machine learning approaches.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process executed by `launchd` making an outbound network connection to a known malicious IP or domain?
  context: Adversaries use Launch Agents to establish persistence. A primary goal for a persistent mechanism is to establish command and control (C2) communications. This question aims to detect this behavior by correlating the execution of a Launch Agent's program with network logs and cross-referencing the destination against a threat intelligence feed. A match is a high-fidelity indicator of compromise.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, Network egress points/gateways, DNS resolvers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_events
      WHERE parent_process_name == "launchd"
      JOIN network_logs ON (hostname, timestamp)
      LOOKUP threat_intel ON (destination_ip OR destination_domain)
      WHERE threat_intel.category IN ["C2", "malware"]
      RETURN hostname, process_name, destination_ip
- question: Does a process executed by a new Launch Agent exhibit DNS query patterns indicative of Domain Generation Algorithms (DGA)?
  context: Malicious software often uses DGAs to generate a large number of domain names for C2 servers, making them difficult to block. High Shannon entropy in a domain name is a common characteristic of DGA. This question seeks to identify such activity by calculating the entropy of DNS queries made by Launch Agent processes and comparing them against a baseline of normal enterprise activity.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, Network egress points/gateways, DNS resolvers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH dns_logs
      WHERE process_name IN (
        SELECT process_name FROM process_events WHERE parent_process_name == "launchd"
      )
      CALCULATE shannon_entropy(query_domain) AS entropy_score
      COMPARE entropy_score to baseline_98th_percentile
      ALERT if entropy_score > baseline_98th_percentile
- question: Can a machine learning model classify a new Launch Agent process and its network traffic as malicious?
  context: Sophisticated adversaries may use techniques that evade simple rule-based detections. This question proposes a machine learning approach to identify malicious activity. By training a model on various features like process path entropy, code signature, parent process, and network behavior, it's possible to detect subtle anomalies that, in aggregate, point to a malicious Launch Agent.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, Network egress points/gateways, DNS resolvers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each new launch_agent_process:
        EXTRACT features (path_entropy, signature_validity, parent_process, dest_port, data_volume, ip_reputation)
        INPUT features into trained_random_forest_model
        IF model_prediction == "malicious" AND confidence_score > 0.9:
          ALERT for analyst_review
- question: Was a new Launch Agent `.plist` file created by a suspicious process or does it point to an executable in an unsafe location?
  context: Adversaries often use scripting interpreters or download utilities to drop persistence mechanisms. Furthermore, they place the malicious executable in world-writable directories to ensure execution is possible. This question looks for these two common TTPs: the creation of a `.plist` file by a suspicious parent (like `bash` or `curl`) or a `.plist` file configured to run a program from a non-standard, insecure location like `/tmp/`.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - File content analysis of .plist files
  - All macOS endpoints, User home directories on macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH file_creation_events
      WHERE file_path IN ["/Library/LaunchAgents/*", "~/Library/LaunchAgents/*"] AND file_extension == ".plist"
      IF creating_process_name IN ["bash", "curl", "python", "osascript"]:
        ALERT
      PARSE file_content
      IF ProgramArguments starts with ["/tmp/", "/Users/Shared/"]:
        ALERT
- question: Is a new `.plist` file in a Launch Agent directory being created by a rare parent process or pointing to a high-entropy path?
  context: Normal software installations that create Launch Agents are typically performed by a predictable set of parent processes (e.g., `installer`). An adversary might use a process that rarely, if ever, creates Launch Agents. This question uses statistical analysis to baseline normal parent process behavior and executable paths, alerting on deviations that could signal malicious activity.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - File content analysis of .plist files
  - All macOS endpoints, User home directories on macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH plist_creation_events in LaunchAgent_dirs
      AGGREGATE creating_process_name frequency over 30 days
      IF current_creating_process is in bottom 1% of frequency:
        ALERT
      PARSE ProgramArguments path from plist_content
      CALCULATE shannon_entropy(path)
      IF entropy > baseline_95th_percentile:
        ALERT
- question: Does the creation of a `.plist` file in a Launch Agent directory represent a statistical outlier compared to normal activity?
  context: Legitimate `.plist` file creations often happen in predictable patterns, such as during software updates or new installations. This question applies unsupervised machine learning (clustering) to model these normal patterns based on features like the creating process, time of day, and target directory. Any new event that doesn't fit into an established cluster is flagged as an anomaly, potentially indicating an adversary's attempt to blend in.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - File content analysis of .plist files
  - All macOS endpoints, User home directories on macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each plist_creation_event:
        VECTORIZE features (parent_process, hour_of_day, target_dir)
        APPLY pre-trained DBSCAN model
        IF event is classified as "noise" or "outlier":
          ALERT for investigation
- question: Has a suspicious behavioral chain occurred, involving a non-installer process creating an executable, setting up a Launch Agent for it, and that executable making a network connection?
  context: Adversaries often perform a sequence of actions to establish persistence. This question defines a high-fidelity attack chain: a process that isn't a known software installer drops a new executable, creates a `.plist` file to make it persistent, and then the executable calls back to the adversary. Detecting this specific sequence within a short time window is a strong indicator of malicious activity.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF file creation events
  - macOS ESF file permission modification events
  - Zeek conn.log
  - All macOS endpoints, Network egress points/gateways, Web content filters
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      DEFINE stateful_rule over 5 minutes by hostname:
      STEP_A: process NOT IN (installer_allowlist) creates executable_file
      STEP_B: same_process creates plist_file in LaunchAgent_dir pointing to executable_file
      STEP_C: executable_file is executed AND makes outbound_network_connection
      IF STEP_A -> STEP_B -> STEP_C:
        ALERT high_severity
- question: Did a process anomalously create an executable file shortly before a Launch Agent persistence chain was observed?
  context: This question serves as a precursor to a potential attack chain. Processes like web browsers or document readers should not typically be creating numerous executable files. By establishing a baseline for this behavior, we can detect an initial compromise stage where a process creates an unusual number of executables, increasing the risk score of any subsequent persistence activity.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF file creation events
  - macOS ESF file permission modification events
  - Zeek conn.log
  - All macOS endpoints, Network egress points/gateways, Web content filters
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each process:
        CALCULATE hourly moving_average and std_dev of executable_files_created
        IF current_hour_count > (moving_average + 3 * std_dev):
          FLAG process as anomalous
          INCREASE risk_score of subsequent actions
- question: Does a sequence of events related to Launch Agent creation represent a novel or anomalous behavioral pattern when modeled as a graph?
  context: Traditional sequence detection can be brittle. This question proposes modeling system events as a graph, where processes and files are nodes and actions are edges. By training a Graph Neural Network (GNN) on legitimate software installation graphs, the model learns what "normal" looks like. Any new sequence whose graph structure is a significant outlier indicates a potentially malicious and previously unseen behavior pattern.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF file creation events
  - macOS ESF file permission modification events
  - Zeek conn.log
  - All macOS endpoints, Network egress points/gateways, Web content filters
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each event_sequence:
        CONVERT sequence to graph (nodes=entities, edges=actions)
        GENERATE embedding from pre-trained GNN model
        IF embedding_distance from known_good_clusters is anomalous:
          ALERT as novel behavior
- question: Is a recently created Launch Agent process spawning suspicious child processes like shells or scripting interpreters?
  context: A legitimate Launch Agent process typically performs a specific function. An adversary's implant, however, might be designed to execute arbitrary commands. This question focuses on detecting this by monitoring the child processes of executables associated with recently created Launch Agents. The spawning of shells (`sh`, `bash`) or scripting tools (`python`, `osascript`) is highly suspicious and warrants investigation.
  answer_sources:
  - macOS ESF process execution events
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, Network egress points/gateways
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CREATE watchlist of executables from plists created in last 7 days
      SEARCH process_events
      WHERE parent_process_path IN (watchlist)
      AND child_process_name IN ["sh", "bash", "zsh", "python", "osascript"]
      ALERT on match
- question: Is a recently created Launch Agent process exhibiting anomalous network behavior, such as a sudden spike in data exfiltration or connection counts?
  context: After establishing persistence, an adversary may use the implant for data exfiltration or to maintain a C2 heartbeat. This question aims to detect such network activity by establishing a baseline of normal network traffic (bytes sent, connection counts) for each new Launch Agent process. A significant deviation from this baseline, such as a sudden burst of outbound data, is a strong indicator of malicious use.
  answer_sources:
  - macOS ESF process execution events
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, Network egress points/gateways
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each process on 7-day_watchlist:
        CALCULATE 24-hour moving_average and std_dev for (bytes_sent, connection_count)
        IF current_interval_value > (moving_average + 3 * std_dev):
          ALERT on network anomaly
- question: Does the outbound data volume from a new Launch Agent process show unpredictable behavior not explained by normal trends?
  context: While simple statistical thresholds can be effective, they may miss more subtle data exfiltration patterns. This question uses time-series decomposition to separate a process's network traffic into trend, seasonal, and residual components. By applying an anomaly detection model like Isolation Forest to the residuals (the unpredictable noise), we can identify behavior that doesn't fit any normal pattern, which could be indicative of malicious activity.
  answer_sources:
  - macOS ESF process execution events
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, Network egress points/gateways
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each process on watchlist:
        CREATE time_series of outbound_data_volume
        DECOMPOSE time_series into trend, seasonal, residual
        APPLY Isolation_Forest model to residual_component
        IF data_point is flagged as anomaly:
          ALERT on unpredictable behavior
- question: Is a non-root user attempting to write to protected, system-level Launch Agent directories?
  context: Adversaries may attempt to place a Launch Agent in a system-wide directory (e.g., `/Library/LaunchAgents/`) to gain persistence for all users or to execute with higher privileges. These directories are protected and require root access. This question aims to detect failed privilege escalation attempts by monitoring for file creation or write events in these directories that fail with 'permission denied' and originate from a non-root process.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events
  - macOS ESF process execution events
  - System-wide directories on all macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH file_events
      WHERE target_directory IN ["/System/Library/LaunchAgents/", "/Library/LaunchAgents/"]
      AND event_outcome == "failure"
      AND process_euid > 0
      ALERT high_severity
- question: Is a user or process generating an abnormally high rate of failed write attempts to protected Launch Agent directories?
  context: A single failed write attempt might be benign, but a burst of failures from the same user or process is highly suspicious. This could indicate a misconfigured script or a brute-force attempt to find a writable location. This question establishes a baseline for failed writes and alerts when a user or process exceeds its normal failure rate, suggesting a deliberate and repeated attempt at privilege escalation.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events
  - macOS ESF process execution events
  - System-wide directories on all macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      AGGREGATE failed_writes to protected_LaunchAgent_dirs by user, process over 1 hour
      COMPARE hourly_count to historical_baseline_95th_percentile for that user/process
      IF hourly_count > baseline:
        ALERT on abnormal failure rate
- question: Can a machine learning model classify a failed write attempt to a protected Launch Agent directory as malicious?
  context: Not all failed writes are malicious; some may be caused by application bugs. To reduce false positives, this question proposes using a supervised machine learning model (e.g., Logistic Regression) to score these events. By training the model on features like the process name, its parent, and code signature status, we can prioritize investigation on failed writes that have a high probability of being part of a malicious attempt.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events
  - macOS ESF process execution events
  - System-wide directories on all macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each failed_write_event:
        EXTRACT features (process_name, parent_process, cmd_line, code_signature_status)
        INPUT features into trained_logistic_regression_model
        IF model_prediction_probability("malicious") > 0.8:
          ALERT for analyst_review
- question: Is `launchctl` being used to load a `.plist` file from a world-writable directory?
  context: The `launchctl load` command is used to load and start a Launch Agent or Daemon. Legitimate `.plist` files are typically located in standard system or user library directories. An adversary might place their malicious `.plist` in a world-writable directory like `/tmp/` or `/Users/Shared/` to bypass restrictions. This question directly detects this abuse of `launchctl` by alerting on attempts to load `.plist` files from these insecure locations.
  answer_sources:
  - macOS ESF process execution events
  - All macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_events
      WHERE process_name == "launchctl"
      AND command_line contains "load"
      AND plist_path_argument starts with ["/tmp/", "/Users/Shared/"]
      ALERT on launchctl abuse
- question: Is a user loading a `.plist` file with `launchctl` from a directory that is rare for them?
  context: Users and legitimate software tend to load `.plist` files from predictable locations. This question establishes a profile of normal behavior for each user by tracking the parent directories from which they typically load `.plist` files. An alert is generated when a user loads a file from a directory they have never used before or use very infrequently, indicating a potential deviation from their normal workflow.
  answer_sources:
  - macOS ESF process execution events
  - All macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each user:
        CREATE frequency_profile of plist_parent_directories used with "launchctl load" over 30 days
      FOR each new "launchctl load" event:
        IF plist_parent_directory is NOT in user_profile OR is in bottom 5% of frequency:
          ALERT on rare directory usage
- question: Does a `launchctl load` event represent a statistical outlier based on its parent process and target directory?
  context: This question uses unsupervised machine learning to detect anomalous `launchctl` usage. By training a One-Class SVM on a baseline of known-good `launchctl` executions, the model learns the boundary of normal behavior. Any new event that falls outside this boundary, such as a browser process loading a `.plist` from `/tmp/`, is classified as an outlier and flagged for investigation.
  answer_sources:
  - macOS ESF process execution events
  - All macOS endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each "launchctl load" event:
        VECTORIZE features (parent_process_name, plist_parent_directory)
        APPLY pre-trained One-Class_SVM_model
        IF event is classified as "outlier":
          ALERT for investigation
- question: Has a non-standard administrative tool elevated its privileges and immediately written a `.plist` file to a system Launch Agent directory?
  context: This question detects a classic privilege escalation and persistence chain. An adversary gains initial access as a user, exploits a vulnerability to elevate to root, and then immediately writes a Launch Agent to a system directory to maintain that root access. This stateful detection rule looks for this specific sequence—a non-standard tool gaining root, followed by a `.plist` write within 60 seconds—which is a strong indicator of compromise.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events
  - macOS ESF process execution events
  - macOS ESF file creation events
  - All macOS endpoints, Authentication logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      DEFINE stateful_rule over 60 seconds by process_id:
      STEP_A: process_name NOT IN (admin_tool_allowlist) gains root privileges (e.g., setuid(0))
      STEP_B: same_process writes to ["/Library/LaunchAgents/", "/System/Library/LaunchAgents/"]
      IF STEP_A -> STEP_B:
        ALERT on privesc-persistence chain
- question: Is the time between a privilege escalation and a subsequent `.plist` write anomalously short?
  context: Automated malware often executes its attack chain much faster than a human administrator would. This question analyzes the time delta between a process gaining root privileges and writing to a protected Launch Agent directory. By baselining the time deltas for legitimate administrative actions, we can flag sequences that occur with unusual speed, suggesting scripted, malicious activity.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events
  - macOS ESF process execution events
  - macOS ESF file creation events
  - All macOS endpoints, Authentication logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each privesc_then_plist_write_sequence:
        CALCULATE time_delta_seconds
      COMPARE time_delta_seconds to historical_distribution of legitimate deltas
      IF time_delta_seconds < 5th_percentile_of_legit_deltas:
        ALERT on automated/scripted behavior
- question: Does a sequence of privilege escalation and file modification events deviate from normal administrative workflows?
  context: Legitimate administrative workflows (e.g., installing a package) follow predictable state transitions. This question models these workflows using a Hidden Markov Model (HMM). The HMM learns the normal probabilities of transitioning between states like 'user execution', 'root execution', and 'system file write'. Any new sequence of events that has a very low probability under this model is flagged as a deviation from established patterns and likely malicious.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events
  - macOS ESF process execution events
  - macOS ESF file creation events
  - All macOS endpoints, Authentication logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      DEFINE states: "user_exec", "root_exec", "system_file_write"
      SCORE new event_sequences against a pre-trained Hidden_Markov_Model of legit admin workflows
      IF sequence_probability is very low:
        ALERT on anomalous state transition
- question: Is a process with an invalid or untrusted code signature writing a `.plist` file to a protected Launch Agent directory?
  context: Legitimate software that modifies system directories is almost always signed by a trusted developer. Adversaries often use unsigned, ad-hoc signed, or self-signed code. This question focuses on the code signing status of any process that writes to `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/`. An invalid signature or a signature from a developer not on an organizational allowlist is a major red flag.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events
  - macOS code signing information logs
  - System-wide directories on all macOS endpoints, Certificate and code signing infrastructure, Software/asset inventory database
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH file_write_events in protected_LaunchAgent_dirs
      ENRICH writing_process with code_signing_info
      IF signature_status IN ["invalid", "unsigned", "ad-hoc"]:
        ALERT
      IF signature_team_id NOT IN (enterprise_allowlist):
        ALERT
- question: Is a process signed by a new or rare developer Team ID writing to a protected Launch Agent directory?
  context: While checking against an allowlist is effective, it requires maintenance. This question provides a dynamic, statistical approach by profiling which developer Team IDs normally write to protected Launch Agent directories. An alert is triggered if a write is performed by a process signed with a Team ID that has never been seen in this context before, or one that is a statistical rarity, indicating a new or unusual piece of software is modifying a sensitive location.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events
  - macOS code signing information logs
  - System-wide directories on all macOS endpoints, Certificate and code signing infrastructure, Software/asset inventory database
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CREATE frequency_list of Team_IDs writing to protected_LaunchAgent_dirs over 30 days
      FOR each new write_event:
        IF process_team_id is NEW or accounts for < 0.1% of historical writes:
          ALERT on rare developer signature
- question: Can a machine learning model predict that a write to a protected Launch Agent directory is malicious based on code signing features?
  context: This question uses a classifier model to automate the decision-making process around suspicious writes. By training a model (like a Decision Tree) on features related to code signing (`is_signed`, `is_valid`, `team_id`, etc.), the system can learn the characteristics of malicious writes. This allows for the automatic prioritization of events, especially those involving unsigned or ad-hoc signed processes, for immediate analyst review.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events
  - macOS code signing information logs
  - System-wide directories on all macOS endpoints, Certificate and code signing infrastructure, Software/asset inventory database
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each write_event to protected_dir:
        EXTRACT features (is_signed, is_valid, team_id, process_name)
        INPUT features into trained_decision_tree_model
        IF model_prediction == "malicious_write":
          ALERT for analyst review