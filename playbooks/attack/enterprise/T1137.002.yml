name: T1137.002: Office Test
id: c1b9b9a0-8c2e-4b1f-9e6a-7f8d9e0f1a2b
description: >
  This playbook helps determine if an adversary has established persistence by abusing the Microsoft Office Test registry key (`HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf` or `HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\Perf`). The investigation focuses on detecting the modification of this non-default registry key, analyzing the properties of the DLL file specified in the key's value (e.g., signature, hash, static properties), and examining the context of the modification, such as the process responsible (e.g., a script interpreter or shell). It also looks for behavioral indicators, such as an Office application spawning unusual child processes that initiate network connections, or a specific sequence of events where the registry key is set, the DLL is loaded, and a network connection to a suspicious destination occurs.
type: technique
related:
  - TA0003: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a DLL file, specified in the 'Office test\Special\Perf' registry key, been created with a hash matching known-malicious indicators?
    context: >
      This question aims to identify if the DLL designated for persistence is a known piece of malware. The analytic joins registry modification events (to find the key being set) with file creation events (to identify the DLL file itself) that occur in a tight time window. The hash of the created file is then checked against internal and external threat intelligence platforms. A match provides a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - All Windows Endpoints and Servers with Microsoft Office installed
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH for Sysmon EID 13 where registry key contains 'Office test\Special\Perf'.
          JOIN with Sysmon EID 11 on hostname and filename within 1 minute.
          EXTRACT SHA256 hash from EID 11 event.
          QUERY Threat Intelligence Platform with the extracted hash.
          ALERT on match.

  - question: Is the DLL file specified by the 'Office test\Special\Perf' registry key unsigned or signed by an unusually rare publisher?
    context: >
      Legitimate software is almost always digitally signed by a known publisher. This question checks the Authenticode signature of the persistence DLL. The absence of a signature is highly suspicious. Additionally, even if a signature is present, one from a very rare or never-before-seen publisher can indicate an adversary using a self-signed or newly created certificate. This requires maintaining a baseline of observed software publishers in the environment and alerting on statistical outliers.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - All Windows Endpoints and Servers with Microsoft Office installed
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each DLL identified via Office Test persistence:
          PARSE its Authenticode signature.
          IF DLL is unsigned, ALERT.
          ELSE, compare the publisher against a 90-day baseline of all publishers.
          IF publisher prevalence is in the bottom 1st percentile, ALERT.

  - question: Does static analysis of the DLL file specified by the 'Office test\Special\Perf' registry key indicate that it is malicious?
    context: >
      This question leverages automated analysis to classify the suspicious DLL. The file is fed into a static analysis pipeline that uses a machine learning model trained on Portable Executable (PE) features like section entropies, import/export tables, and string characteristics. If the model outputs a high probability score indicating malware, it should be flagged for immediate manual review by an analyst.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - All Windows Endpoints and Servers with Microsoft Office installed
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SUBMIT the DLL file to a static analysis engine with a malware classification model.
          EXTRACT PE features (e.g., entropy, IAT/EAT counts, strings).
          CALCULATE malware probability score.
          IF score > 0.85, trigger alert for manual analysis.

  - question: Has the '...Office test\Special\Perf' registry value been created or modified?
    context: >
      The '...Office test\Special\Perf' registry key is not created or used by default in standard Microsoft Office installations. Therefore, any activity involving the creation or modification of this key is inherently suspicious and a strong indicator of an adversary attempting to establish persistence via this specific technique. This question seeks to find direct evidence of this key being manipulated.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers with Microsoft Office installed
      - Active Directory Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH for Sysmon EID 13 or Windows EID 4657 where TargetObject/ObjectName is 'HKU\*\Software\Microsoft\Office test\Special\Perf' or 'HKLM\Software\Microsoft\Office test\Special\Perf'.
          ALERT on any match.

  - question: Was the '...Office test\Special\Perf' registry key modified by a process with a rare or previously unseen parent process?
    context: >
      Adversaries may use non-standard or unexpected processes to write to the registry to evade simple detections. This question focuses on identifying anomalous process ancestry. By building a baseline of normal parent-child process relationships for registry modifications, any modification to the Office Test key performed by a rare or never-before-seen process pair (e.g., 'notepad.exe' -> 'reg.exe') can be flagged as suspicious.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers with Microsoft Office installed
      - Active Directory Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each modification to '...Office test\Special\Perf' (Sysmon EID 13):
          IDENTIFY the modifying process and its parent process (via Sysmon EID 1).
          COMPARE the parent-child pair against a 30-day baseline of process relationships.
          IF the relationship frequency is below 1% or has not been seen before, ALERT.

  - question: Does an anomaly detection model classify the modification of the 'Office test' key as abnormal based on the user and process context?
    context: >
      This question applies unsupervised machine learning to detect suspicious registry modifications. An anomaly detection model (like an Isolation Forest) is trained on features from legitimate registry modification events, including the process name, user context, and parent process. When a modification to the 'Office test' key occurs, these features are fed to the model. If the model flags the event as a high-scoring anomaly, it suggests the activity deviates significantly from established normal behavior.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers with Microsoft Office installed
      - Active Directory Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each modification to '...Office test\Special\Perf':
          EXTRACT features: modifying process name, user context, parent process name.
          INPUT features into a trained anomaly detection model (e.g., Isolation Forest).
          IF anomaly score is high, ALERT.

  - question: Was the '...Office test\Special\Perf' registry key modified by a common script interpreter, shell, or a process running from a user-writable directory?
    context: >
      Adversaries frequently use living-off-the-land binaries (LOLBins) like 'powershell.exe', 'cmd.exe', and 'rundll32.exe' to execute commands and modify the system. This question creates a detection for when one of these known LOLBins, or any process running from a non-standard, user-writable path like '%APPDATA%', modifies the Office Test persistence key.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH for Sysmon EID 13 events targeting '...Office test\Special\Perf'.
          ALERT if the modifying process image is on a watchlist ('powershell.exe', 'cmd.exe', etc.).
          ALERT if the modifying process path is in a user-writable directory ('%APPDATA%', 'C:\Users\Public', etc.).

  - question: Did the command line of the process that modified the 'Office test' key have unusually high entropy?
    context: >
      To evade signature-based detections, attackers often obfuscate or encode their commands. This results in command lines with high character randomness, or entropy. This question aims to detect such obfuscation by calculating the Shannon entropy of the command line used by the process that modified the Office Test key and comparing it against a pre-calculated baseline for that specific process. A significant deviation from the norm suggests malicious activity.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each process that modifies '...Office test\Special\Perf':
          EXTRACT its command line from the corresponding process creation event (Sysmon EID 1).
          CALCULATE Shannon entropy of the command line.
          COMPARE entropy to the 95th percentile baseline for that process type.
          IF entropy exceeds baseline, ALERT.

  - question: Does a machine learning model classify the process that modified the 'Office test' key as suspicious?
    context: >
      This question uses a supervised machine learning model (e.g., Random Forest) that has been trained to distinguish between benign and malicious process execution events. When the Office Test key is modified, the characteristics of the process responsible (e.g., its path, parent, command-line features, user context) are fed into the model. If the model classifies the process as 'suspicious', it generates an alert for further investigation.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each process that modifies '...Office test\Special\Perf':
          EXTRACT features from its process creation event (parent name, path, command-line length, entropy, user, etc.).
          INPUT features into a trained Random Forest classifier.
          IF classification is 'suspicious', ALERT.

  - question: Has a Microsoft Office application spawned a suspicious child process (like a shell) which then initiated an external network connection?
    context: >
      Microsoft Office applications like Word or Excel should not typically spawn command shells or script interpreters. Such an event is suspicious. When that child process then makes a network connection to an external IP address, it is a strong indicator of a malicious payload executing, potentially for command and control (C2) or data exfiltration. This question looks for this specific chain of behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints
      - Network Firewalls/Proxies
      - Core DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH for process creation events (Sysmon EID 1) where ParentProcess is an Office app and ChildProcess is a shell/interpreter.
          IF found, search for network connection events (Sysmon EID 3, Zeek conn.log) from the same host and ChildProcess to a non-private IP.
          ALERT on sequence.

  - question: Has a Microsoft Office application spawned a rare or never-before-seen child process, concurrent with suspicious DNS activity?
    context: >
      This question hunts for anomalies in process execution and network behavior. First, it identifies when an Office application spawns a child process that is statistically rare or has never been observed in the environment before. Second, it correlates this with suspicious DNS queries from the same host around the same time, looking for indicators like high-entropy domains or rare Top-Level Domains (TLDs), which can be associated with C2 infrastructure.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints
      - Network Firewalls/Proxies
      - Core DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          BASELINE all child processes spawned by Office applications over 30 days.
          ALERT if an Office app spawns a child process in the bottom 1% of frequency.
          CONCURRENTLY analyze DNS logs (Zeek dns.log) from the same host for high-risk queries (high entropy, rare TLD).
          COMBINE risk scores and alert.

  - question: Following the launch of an Office application, was there an anomalous spike in network connections from the host?
    context: >
      This question uses time-series analysis to find unusual network beaconing. A forecasting model (like Prophet or LSTM) learns the normal rhythm of network connections for each host. After an Office application is launched, the model monitors the actual connection count. If the count significantly exceeds the forecasted value (i.e., breaks the prediction interval), it is flagged as an anomaly, potentially indicating C2 beaconing or data exfiltration that was initiated by a malicious document.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints
      - Network Firewalls/Proxies
      - Core DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each host, apply a time-series model to forecast network connection counts.
          IDENTIFY Office application launch events (Sysmon EID 1).
          MONITOR actual connection counts post-launch.
          IF actual count significantly deviates from the forecasted range, ALERT.

  - question: Has a sequence of events occurred on a single host: 'Office test' registry modification, followed by an Office app loading the specified DLL, and then initiating a network connection to a known-bad destination?
    context: >
      This question searches for a high-confidence attack chain that links multiple telemetry sources. It looks for the specific sequence of: 1) The 'Office test' registry key being set. 2) An Office process loading the DLL from that key. 3) That same Office process making a network connection to an IP on a threat intelligence blocklist. Finding this entire chain on one host within a short time window is a very strong indicator of compromise.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints and Servers
      - Network Egress Points
      - Threat Intelligence Platform
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          CHAIN query on a single host within 10 minutes:
          1. Sysmon EID 13 for 'Office test\Special\Perf'.
          2. Sysmon EID 7 where Office process loads DLL from step 1.
          3. Sysmon EID 3 where process from step 2 connects to IP on a blocklist.
          ALERT on a full chain match.

  - question: Did an Office process load a DLL from a rare file path and subsequently connect to a low-reputation domain?
    context: >
      This question combines two risk factors to increase detection fidelity. It first identifies when an Office application loads a DLL from an unusual or suspicious directory (e.g., C:\Users\Public). It then checks if that same process makes a network connection to a destination domain that has a low reputation score or was registered very recently. The combination of a rare file path and a risky network destination generates a high-quality alert.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints and Servers
      - Network Egress Points
      - Threat Intelligence Platform
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR all DLLs loaded by Office processes (Sysmon EID 7):
          CALCULATE rarity score of the DLL's file path.
          FOR subsequent network connections from that process:
          ENRICH destination with domain age/reputation.
          COMBINE path rarity score and domain reputation score.
          ALERT if combined score exceeds a threshold.

  - question: Can a graph-based analysis reveal the complete attack chain of Office Test key modification, DLL loading by an Office process, and subsequent C2 connection?
    context: >
      This question proposes a sophisticated analysis technique using a graph database. All relevant security events (process creation, file writes, registry modifications, network connections) are modeled as a graph of nodes and edges. An analyst can then run a query to find the specific subgraph pattern representing this attack: a process writing to the Office Test key, which points to a DLL that is then loaded by an Office process, which in turn connects to an external IP. Discovering this complete graph pattern provides an extremely high-confidence finding.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints and Servers
      - Network Egress Points
      - Threat Intelligence Platform
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          QUERY event graph for the pattern:
          [Process A] -writes_to-> '[Office Test Key]'
          '[Office Test Key]' -contains_path-> '[File B.dll]'
          '[File B.dll]' <-loads- '[Office Process C]'
          '[Office Process C]' -connects_to-> '[External IP D]'
          ALERT on discovery of the complete subgraph.