name: T1137.002: Office Test
id: 1d8a1e2f-9b4c-4e3d-8f2c-5d7a6b4c3e2f
description: Investigates whether an adversary has established persistence by abusing the Microsoft Office Test registry key. This involves detecting modifications to the `HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf` or `HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\Perf` keys, analyzing the characteristics of the DLL file specified in the registry value (such as its signature, hash, and PE features), examining the process that performed the modification for anomalies (e.g., script interpreters, unusual parent processes), and identifying suspicious child processes or network connections originating from Office applications after the persistence mechanism is established.
type: technique
related:
- TA0003: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a DLL file, specified in the 'Office test\Special\Perf' registry key, been identified as malicious by checking its hash against threat intelligence feeds?
  context: This question aims to detect if a file created as part of the Office Test persistence mechanism is a known malicious file. By joining registry modification events with file creation events, we can identify the specific DLL. Extracting its hash and comparing it against threat intelligence databases provides a high-confidence method for identifying known malware.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - All Windows Endpoints and Servers with Microsoft Office installed
  - Threat Intelligence Platform
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH Sysmon EID 13 WHERE TargetObject CONTAINS 'Office test\Special\Perf'
      JOIN on Hostname, FileName (within 1 min) with (SEARCH Sysmon EID 11)
      EXTRACT SHA256 from EID 11 event
      LOOKUP hash in ThreatIntelligenceFeeds
      ALERT if match_found
- question: Is the DLL specified in the 'Office test\Special\Perf' registry key unsigned or signed by a rare or untrusted publisher?
  context: This question checks the authenticity and trustworthiness of the DLL used for persistence. Malicious DLLs are often unsigned or signed by newly created or untrusted certificates. By baselining known good software signing authorities, we can identify outliers that warrant investigation. An unsigned DLL is immediately suspicious.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - All Windows Endpoints and Servers with Microsoft Office installed
  - Threat Intelligence Platform
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH Sysmon EID 13 WHERE TargetObject CONTAINS 'Office test\Special\Perf'
      EXTRACT DLL file path
      GET Authenticode signature for DLL
      ALERT if DLL is unsigned
      COMPARE publisher to 90-day baseline of known publishers
      ALERT if publisher is in bottom 1st percentile of prevalence
- question: Does static analysis of the DLL specified in the 'Office test\Special\Perf' registry key indicate it is likely malicious based on its PE features?
  context: This question provides a way to detect novel malware that may not have a known bad hash or signature. By feeding the suspect DLL into a pre-trained machine learning model, we can analyze its static properties (like entropy, imports/exports, etc.) to determine if it behaves like known malware, even if it's a new variant.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - All Windows Endpoints and Servers with Microsoft Office installed
  - Threat Intelligence Platform
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      IDENTIFY target DLL from 'Office test\Special\Perf' registry key
      EXTRACT PE features (entropy, IAT/EAT, debug symbols, strings, size)
      INPUT features into pre-trained malware classification model
      ALERT if model output probability > 0.85
- question: Has the '...Office test\Special\Perf' registry value been created or modified?
  context: The 'Office test\Special\Perf' registry key is not created by default during a standard Microsoft Office installation. Therefore, any process creating or modifying this key is inherently suspicious and a strong indicator of an adversary attempting to establish persistence using the Office Test technique (T1137.002). This is a high-fidelity, direct detection.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers with Microsoft Office installed
  - Active Directory Domain Controllers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH (Sysmon EID 13 OR Windows EID 4657)
      WHERE (TargetObject OR ObjectName) MATCHES ('HKU\*\Software\Microsoft\Office test\Special\Perf' OR 'HKLM\Software\Microsoft\Office test\Special\Perf')
      GENERATE high-severity alert
- question: Was the '...Office test\Special\Perf' registry key modified by a process with a rare or previously unseen parent process?
  context: Legitimate software installations or modifications typically follow predictable process chains. Adversaries often use unusual parent-child process relationships to execute commands. By baselining normal process relationships that lead to registry modifications, we can spot anomalous activity, such as 'explorer.exe' spawning 'reg.exe' to modify the Office Test key, which might indicate manual adversary activity.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers with Microsoft Office installed
  - Active Directory Domain Controllers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      BASELINE parent-child process relationships from Sysmon EID 1 over 30 days
      FOR EACH Sysmon EID 13 event where TargetObject contains 'Office test\Special\Perf'
      IDENTIFY parent-child process pair
      ALERT if pair has not been seen in 30 days OR its frequency is < 1%
- question: Does an anomaly detection model flag the modification of the 'Office test' key as suspicious based on the process, user, and parent process context?
  context: This question uses machine learning to move beyond simple rules and detect suspicious registry modifications in a broader context. An unsupervised model like an Isolation Forest can learn what 'normal' registry modification behavior looks like across the enterprise and flag any modification to the Office Test key that deviates from this norm, considering the user, process, and parent process.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers with Microsoft Office installed
  - Active Directory Domain Controllers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      TRAIN Isolation Forest model on legitimate registry modification events (features: process image, user, parent process)
      SCORE new Sysmon EID 13 events for 'Office test\Special\Perf' using the model
      ALERT if anomaly score is high
- question: Was the '...Office test\Special\Perf' registry key modified by a suspicious process like a script interpreter or from a user-writable directory?
  context: Adversaries frequently use built-in script interpreters and command-line tools (living-off-the-land binaries) to perform actions like modifying registry keys for persistence. This question aims to detect when tools like PowerShell, cmd, or reg.exe are used to modify the Office Test key, which is highly indicative of malicious activity, especially if executed from a non-standard location like a user's temporary folder.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH Sysmon EID 13 where TargetObject contains 'Office test\Special\Perf'
      AND ProcessImage IN ('powershell.exe', 'cmd.exe', 'wscript.exe', 'cscript.exe', 'rundll32.exe', 'reg.exe')
      OR ProcessPath CONTAINS ('%APPDATA%', 'C:\Users\Public\')
      ALERT on match
- question: Did the command line of the process that modified the Office Test key have an unusually high entropy, suggesting obfuscation?
  context: To evade detection, adversaries often obfuscate or encode their commands, particularly when using tools like PowerShell. This results in command lines with high character randomness, or entropy. This question seeks to identify such commands by establishing a baseline for normal command-line entropy for each process and alerting when a command that modifies the Office Test key exceeds this baseline.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      CORRELATE Sysmon EID 13 (for Office Test key) with parent Sysmon EID 1
      CALCULATE Shannon entropy of the CommandLine field from EID 1
      BASELINE normal entropy per process (e.g., for powershell.exe)
      ALERT if entropy > 95th percentile for that process
- question: Does a machine learning model classify the process that modified the Office Test key as suspicious based on its execution characteristics?
  context: This question uses a supervised machine learning approach to provide a more robust classification of process behavior. By training a model like a Random Forest on known benign and malicious process creation events, it can learn to identify suspicious processes based on a combination of features (path, parent, command line, user context, etc.), providing a more nuanced verdict than a simple rule.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each process modifying the Office Test key (from EID 13 and EID 1)
      EXTRACT features: parent process, path, command-line length/entropy, user, is_signed
      INPUT features into trained Random Forest classifier
      ALERT if classification is 'suspicious'
- question: Did an Office application spawn a suspicious child process (e.g., a shell or script interpreter) that then made an external network connection?
  context: Legitimate Office application behavior rarely involves spawning command shells or script interpreters. This action is a common pattern for macro-based attacks or exploitation. This question looks for the sequence of an Office app creating a suspicious child process, which then establishes a network connection, indicating a potential command-and-control (C2) channel or downloader.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints
  - Network Firewalls/Proxies
  - Core DNS Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH Sysmon EID 1 where ParentProcess is Office app AND ProcessImage is suspicious (cmd.exe, powershell.exe)
      CORRELATE by host and ProcessId with Sysmon EID 3 or Zeek conn.log
      WHERE destination IP is not RFC1918
      ALERT on correlated sequence
- question: Did an Office application spawn a rare or never-before-seen child process, concurrent with high-risk DNS queries from the same host?
  context: This question aims to detect anomalous process and network behavior without relying on a predefined list of "bad" processes. It baselines normal child processes for Office applications and alerts on statistical outliers. This is enriched by checking for concurrent suspicious DNS activity (e.g., long, random-looking domains), which can help confirm that the anomalous process behavior is part of a malicious C2 communication.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints
  - Network Firewalls/Proxies
  - Core DNS Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      BASELINE child process frequency for Office apps over 30 days
      ALERT if Office app spawns a child process with frequency < 1% or is new
      IF alert, ANALYZE concurrent DNS queries from host for high-risk features (length, entropy, TLD rarity)
      INCREASE alert severity if high-risk DNS is found
- question: Was there an anomalous spike in network connections from a host immediately following the launch of an Office application?
  context: Malicious code executed via an Office application may initiate periodic command-and-control (C2) beaconing. This activity can be detected as a deviation from the normal network traffic pattern for a host. This question uses a time-series model to predict expected network connection volume and alerts when the actual volume significantly exceeds the forecast after an Office application launch.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints
  - Network Firewalls/Proxies
  - Core DNS Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FORECAST network connection counts per minute per host using a time-series model (e.g., Prophet)
      MONITOR for Office app launch (Sysmon EID 1)
      COMPARE actual connection count post-launch to the forecasted prediction interval
      ALERT if actual count significantly exceeds forecast
- question: Has a sequence of events occurred where the Office Test key was set, the specified DLL was loaded by an Office app, and that app connected to a known-bad destination?
  context: This question chains together several key indicators to build a high-confidence detection of the full attack lifecycle. By looking for the specific sequence of a registry key write, a DLL load by an Office process, and a subsequent network connection to a malicious destination all within a short time frame on the same host, we can significantly reduce false positives and identify a confirmed compromise.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Threat Intelligence Platform
  - DNS Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH for sequence on same host within 10 minutes:
      1. Sysmon EID 13: TargetObject contains 'Office test\Special\Perf'
      2. Sysmon EID 7: Image is Office app AND ImageLoaded matches DLL from step 1
      3. Sysmon EID 3/Zeek conn.log: Process from step 2 connects to IP on threat intel blocklist
      ALERT on full sequence match
- question: Did an Office process load a DLL from a rare file path and subsequently connect to a low-reputation or newly registered domain?
  context: This question uses a risk-scoring approach to identify suspicious activity. Adversaries often place their malicious DLLs in uncommon directories (like C:\Users\Public). This behavior, combined with the process making network connections to suspicious domains (e.g., very new or with a bad reputation), creates a composite risk score. An alert is triggered when this combined score exceeds a threshold, indicating a high probability of maliciousness.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Threat Intelligence Platform
  - DNS Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each DLL loaded by Office app (Sysmon EID 7):
      CALCULATE risk score for DLL file path based on historical rarity
      FOR each subsequent network connection (Sysmon EID 3):
      ENRICH destination with domain age/reputation data
      COMBINE path rarity score and domain reputation score
      ALERT if combined score > threshold
- question: Can a graph-based analysis reveal the complete attack chain: a process writing to the Office Test key, an Office app loading the resulting DLL, and then connecting to an external IP?
  context: This question leverages graph analytics to visualize and query for complex relationships between security events. By modeling processes, files, registry keys, and network connections as a graph, we can explicitly search for the specific multi-step pattern of the Office Test persistence technique. Discovering this complete subgraph provides a very strong, context-rich indicator of compromise that is difficult to find with simple linear searches.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Threat Intelligence Platform
  - DNS Servers
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      CONSTRUCT event graph with nodes (Process, File, RegKey, IP) and edges (writes_to, loads, connects_to)
      SEARCH for graph pattern:
      (Process A) -[writes_to]-> (RegKey 'Office Test Key')
      (Office Process C) -[loads]-> (File B.dll, path from RegKey)
      (Office Process C) -[connects_to]-> (External IP D)
      ALERT if complete pattern is found