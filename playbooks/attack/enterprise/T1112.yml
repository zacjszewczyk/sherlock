name: T1112: Modify Registry
id: 3e8f7b1c-3b1a-4d9a-8f9c-2c1b9a7d8e6f
description: This playbook focuses on detecting adversaries modifying the Windows Registry to achieve persistence or evade defenses. It covers techniques such as adding malicious entries to autorun keys (e.g., Run, RunOnce), using the reg.exe utility with obfuscated commands, having unusual processes (like winword.exe) modify persistence keys, performing unauthorized remote registry modifications, disabling security controls (like Windows Defender or AMSI) via registry changes, storing malicious binary payloads within registry values, and rapidly modifying multiple security-related keys to dismantle system defenses.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are we detecting registry modifications to known persistence locations where the new value matches a known-bad indicator from threat intelligence?
  context: This question addresses a common persistence technique where attackers add a path to their malware in registry keys that Windows automatically executes at startup or logon. By creating a SIEM rule that cross-references the new value written to these keys against a threat intelligence feed of malicious file paths, commands, or CLSIDs, analysts can quickly identify known threats attempting to establish persistence.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows endpoints
  - Windows servers
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH EventID=4657 WHERE (RegistryKeyPath IN [PersistenceKeysList]) AND (NewValue IN [ThreatIntelFeed]) | CORRELATE with EventID=4688 on ProcessID
- question: Are there any rare or anomalous process-to-registry-key modification pairs occurring on our hosts?
  context: This question aims to uncover novel or unusual persistence attempts by baselining normal registry modification behavior. By tracking which processes typically modify which persistence keys, we can identify outliers. An alert on a modification pair that falls in the bottom 1st percentile of frequency suggests a process is interacting with a persistence key in a way that is highly unusual for that specific host, warranting investigation.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows endpoints
  - Windows servers
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH EventID=4657 WHERE (RegistryKeyPath IN [PersistenceKeysList]) | BASELINE frequency of (ProcessName, RegistryKeyPath) over 30 days per host | ALERT if current pair frequency is in lowest 1st percentile
- question: Can a machine learning model identify malicious registry modifications to persistence keys based on event features?
  context: This question proposes a more advanced, model-driven approach to detection. A Random Forest model can learn complex patterns from various features of a registry modification event, such as the parent process, command line arguments, and the entropy of the new value. This allows for the detection of sophisticated or previously unseen persistence techniques that might not be caught by simple signature-based rules.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows endpoints
  - Windows servers
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM EventID=4657 and 4688 | EXTRACT features (ProcessName, ParentProcess, CommandLine, KeyPath, ValueLength, ValueEntropy) | PREDICT with RandomForestModel | ALERT if prediction is 'malicious' with probability > 0.85
- question: Are we detecting the use of reg.exe to add or import entries into persistence keys, especially with signs of obfuscation?
  context: Adversaries frequently use the built-in 'reg.exe' utility to modify the registry. This question focuses on creating a rule to detect its use for adding or importing data into known persistence locations. The query also looks for common obfuscation techniques, like embedded null characters, which are used to hide the key path from simple logging mechanisms.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - User workstations
  - Windows servers
  - Development environments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH (EventID=4688 OR EventID=1) AND (ProcessName='reg.exe') WHERE (CommandLine CONTAINS 'add' OR 'import') AND (CommandLine targets [PersistenceKeysList]) OR (CommandLine MATCHES regex for null chars)
- question: Are there any instances of reg.exe being executed with unusually long or high-entropy command lines?
  context: This is a behavioral analytic to detect obfuscated commands passed to reg.exe. Malicious actors may use complex, encoded, or heavily obfuscated command lines to hide their actions. By baselining the normal length and Shannon entropy of reg.exe command lines, we can flag executions that exceed the 98th percentile, which are strong indicators of obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - User workstations
  - Windows servers
  - Development environments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH (EventID=4688 OR EventID=1) AND (ProcessName='reg.exe') | CALCULATE entropy and length of CommandLine | BASELINE metrics over 30 days | ALERT if entropy or length > 98th percentile
- question: Can a sequence analysis model detect attack chains involving a download followed by a registry modification with reg.exe?
  context: This question addresses the full attack chain rather than a single event. A common pattern is for an adversary to download a tool or payload and then use the registry for persistence. An LSTM autoencoder can learn normal sequences of host activity. It will flag a sequence like 'bitsadmin download -> reg.exe add' as anomalous because the model has not been trained on this benignly, thus identifying a likely intrusion.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - User workstations
  - Windows servers
  - Development environments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM events per host (Process, Network, Registry) | TRAIN LSTM autoencoder on benign sequences | ALERT on sequences with high reconstruction error, especially [download_process -> reg.exe add] within 5 minutes
- question: Are any unauthorized processes, such as office applications or browsers, modifying persistence-related registry keys?
  context: Persistence keys should only be modified by a small, predictable set of processes like installers and system management tools. This question proposes an allow-list approach. By alerting when a process not on this list (e.g., 'winword.exe', 'chrome.exe') modifies a persistence key, we can detect when legitimate applications are compromised and used to establish persistence.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Critical application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH EventID=4657 AND (RegistryKeyPath IN [PersistenceKeysList]) | JOIN with EventID=4688 on ProcessID | ALERT if ProcessName NOT IN [AuthorizedProcessAllowList]
- question: Are we observing statistically rare processes modifying persistence keys on a per-host basis?
  context: This question uses a statistical approach to find unusual activity without a fixed allow-list. By calculating a rarity score for each process that modifies a persistence key based on its historical frequency on that host, we can flag events that are uncommon for that specific system's behavior. This helps detect attackers using living-off-the-land binaries (LOLBins) that might be common enterprise-wide but rare for a specific host's modification patterns.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Critical application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH EventID=4657 WHERE (RegistryKeyPath IN [PersistenceKeysList]) | CALCULATE rarity score for ProcessName per host | ALERT if rarity score exceeds top 5% threshold
- question: Can an anomaly detection model identify outlier (process, registry key) modification pairs across the enterprise?
  context: This question leverages an Isolation Forest model to identify anomalous process-key modification pairs at an enterprise scale. The model learns what constitutes normal behavior by profiling a large dataset of benign events. It can then score new events and flag outliers that do not conform to these learned patterns, effectively detecting novel or sophisticated attempts to use unusual processes for registry-based persistence.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Critical application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM (ProcessName, TargetRegistryKeyPath) pairs | TRAIN Isolation Forest model on benign pairs | SCORE new pairs with model | ALERT if pair is flagged as an anomaly/outlier
- question: Are we seeing remote registry modifications to persistence keys originating from non-administrative users or workstations?
  context: Remote registry modification is a powerful administrative feature that can be abused for lateral movement and persistence. This question aims to detect such abuse by correlating network events (Zeek, WinEvent 5145) with registry modification events (4657). An alert is triggered if the source of the remote modification is not an approved administrative workstation or is performed by a non-administrative user, indicating potential unauthorized activity.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5145
  - Zeek dce_rpc.log
  - Windows Event ID 4624
  - Domain Controllers
  - File Servers
  - Internal network segments (East-West traffic)
  - VPN gateways
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH (Zeek dce_rpc.log 'winreg' OR EventID=5145 'winreg') | CORRELATE with EventID=4657 on destination host and EventID=4624 for user | ALERT if SourceIP not in [AdminSubnets] OR User not in [AdminGroups]
- question: Are there new or infrequent source IP and user account pairs performing remote registry modifications?
  context: This question establishes a behavioral baseline for remote registry access. By tracking which users and IPs normally perform these actions on a per-server basis, we can detect suspicious new activity. An alert on a never-before-seen (source IP, user) pair is a high-fidelity indicator of potential compromise. Alerting on infrequent-but-seen pairs provides a lower-confidence signal that may still be worth investigating.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5145
  - Zeek dce_rpc.log
  - Windows Event ID 4624
  - Domain Controllers
  - File Servers
  - Internal network segments (East-West traffic)
  - VPN gateways
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH remote registry events | BASELINE (SourceIP, UserAccount) tuples per server over 90 days | ALERT if new tuple is not in baseline, or if existing tuple is in lowest 5th percentile of frequency
- question: Can a network graph analysis reveal anomalous remote registry operations that bridge disconnected user/host communities?
  context: This question applies graph theory to model administrative relationships. Normal remote registry operations occur within well-defined clusters (communities) of administrators and the servers they manage. A new operation that creates an edge between two previously separate communities (e.g., a user from a 'Developers' cluster modifying a registry key on a server in the 'Domain Controllers' cluster) is highly anomalous and could represent lateral movement.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5145
  - Zeek dce_rpc.log
  - Windows Event ID 4624
  - Domain Controllers
  - File Servers
  - Internal network segments (East-West traffic)
  - VPN gateways
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BUILD graph with users/hosts as nodes and remote registry operations as edges | APPLY community detection algorithm | ALERT when a new edge bridges two previously separate communities
- question: Are any critical security registry keys being modified to an insecure state or deleted?
  context: Adversaries often disable security controls to operate undetected. This question involves creating a watchlist of critical registry keys that control security tools like AV, EDR, and AMSI. A high-priority alert should be triggered if any of these keys are modified to a value that weakens the control (e.g., setting 'DisableAntiSpyware' to 1) or are deleted entirely, as this is a strong indicator of active defense evasion.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4660
  - Windows Event ID 4688
  - All Windows endpoints and servers with security software (AV/EDR) installed.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH (EventID=4657 OR EventID=4660) WHERE RegistryKeyPath IN [SecurityKeyWatchlist] | ALERT if NewValue is in [InsecureValuesList] or if event is a deletion (4660)
- question: Is there a statistically significant increase in the number of hosts with insecure security registry settings?
  context: This question looks for widespread, coordinated tampering campaigns rather than single-host events. By baselining the daily compliance state of critical security keys across the environment, we can detect a sudden, statistically significant increase in non-compliant hosts. Such a spike could indicate an automated attack or a worm spreading and disabling defenses across the network.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4660
  - Windows Event ID 4688
  - All Windows endpoints and servers with security software (AV/EDR) installed.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BASELINE daily percentage of non-compliant hosts (insecure key settings) | CALCULATE 30-day mean and standard deviation | ALERT if current percentage > (mean + 3 * std_dev)
- question: Can a machine learning model distinguish between malicious tampering and legitimate administrative changes to security registry keys?
  context: Not all changes to security keys are malicious; legitimate tools and GPOs also modify them. This question proposes a supervised model trained to differentiate. By using features like the parent process and command line, the model can learn the context of the change and alert only on modifications it classifies as malicious with high confidence, reducing false positives from legitimate administrative actions.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4660
  - Windows Event ID 4688
  - All Windows endpoints and servers with security software (AV/EDR) installed.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM registry modification events to security keys | EXTRACT features (Process, Parent, CommandLine, etc.) | PREDICT with GradientBoostingModel | ALERT if prediction is 'malicious' with probability > 0.9
- question: Are large binary blobs being written to the registry in unexpected locations?
  context: The registry can be abused as a storage mechanism for malicious code or data. This question aims to detect this by monitoring for the creation of `REG_BINARY` values that exceed a certain size (e.g., 4KB). Since storing large binary blobs in the registry is uncommon for most applications, an alert is triggered unless the target key is on an explicit allow-list of locations known to store legitimate binary data.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows hosts, especially those with PowerShell or scripting engines enabled.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH EventID=4657 WHERE (ValueType='REG_BINARY') AND (ValueSize > 4096) AND (RegistryKeyPath NOT IN [BinaryBlobAllowList])
- question: Are registry values being written with high Shannon entropy, suggesting encrypted or compressed data?
  context: To evade signature-based scanning of the registry, attackers often encrypt or compress their payloads before storing them. This action increases the data's Shannon entropy. This question proposes calculating the entropy for all new registry values and alerting when it exceeds a high threshold (e.g., > 7.5) or is anomalous for its specific key group. This is a powerful heuristic for finding hidden malicious payloads.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows hosts, especially those with PowerShell or scripting engines enabled.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH EventID=4657 | CALCULATE Shannon entropy of NewValue | BASELINE entropy per registry key group | ALERT if entropy > 99th percentile for its group OR absolute entropy > 7.5
- question: Can a machine learning model classify binary registry values as benign or malicious payloads?
  context: This question describes a sophisticated detection method that analyzes the raw content of binary registry values. By training a model on features like byte frequency, size, and entropy from a labeled dataset of known-good and known-bad binaries, we can create a classifier that predicts whether a newly observed binary value is a malicious payload. This can detect novel malware that other heuristics might miss.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows hosts, especially those with PowerShell or scripting engines enabled.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM EventID=4657 with REG_BINARY values | EXTRACT features (size, entropy, byte-frequency histogram) from raw binary data | PREDICT with classification model | ALERT if prediction is 'malicious payload'
- question: Is a single process rapidly modifying or deleting multiple distinct security or logging-related registry keys?
  context: Malware, particularly "defense evasion" scripts, often attempts to disable multiple security controls in quick succession. This question aims to detect this behavior by looking for a single process that modifies or deletes 3 or more keys from a security watchlist within a short time window (e.g., 60 seconds). This "burst" of activity is highly indicative of a malicious script executing.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4660
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows endpoints and servers, especially those with privileged access or hosting critical applications.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM EventID=4657/4660 | GROUP by Host, ProcessID over 60s window | ALERT if distinct count of keys from [SecurityKeyWatchlist] >= 3
- question: Are we observing a statistically significant burst of modifications to security-related keys on any single host?
  context: This question provides a dynamic, per-host alternative to a fixed-threshold burst detection. It establishes a baseline for the normal rate of security key modifications on each host. An alert is triggered if the current rate (e.g., modifications in a 1-minute window) exceeds the host's own baseline by a large margin (e.g., 4 standard deviations). This can detect anomalous tampering activity relative to that specific host's normal behavior.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4660
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows endpoints and servers, especially those with privileged access or hosting critical applications.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: For each host, CALCULATE a 1-minute rolling count of security key modifications | BASELINE this count using a 7-day moving average | ALERT if current count > (baseline_mean + 4 * baseline_std_dev)
- question: Can a sequence analysis model detect a full attack chain involving defense evasion, DNS lookup, and C2 communication?
  context: This is the most holistic question, aiming to detect an entire attack sequence. An adversary might disable security, resolve a C2 domain, and then connect to it. An LSTM autoencoder trained on benign event sequences (process, registry, network) will have a high reconstruction error when it encounters this malicious pattern. This allows for the detection of the full TTP chain, providing rich context for an investigation.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4660
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows endpoints and servers, especially those with privileged access or hosting critical applications.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: STREAM multi-source events per host | TRAIN LSTM autoencoder on benign sequences | ALERT on high reconstruction error, especially for sequences matching [Process -> Multi-Security-Key-Mod -> DNS Query -> External-Net-Conn]