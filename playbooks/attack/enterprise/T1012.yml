name: T1012: Query Registry
id: e8a9f0b1-5c6d-4e7a-8b9f-1c2d3e4f5a6b
description: This playbook focuses on detecting adversary discovery activity involving Windows Registry queries. Adversaries query the registry to gather system and network information, find sensitive data like credentials, and understand security configurations. This playbook identifies this behavior by looking for command lines matching known malicious tools, access to sensitive registry keys, high-volume query activity indicating automated scanning, registry utilities being spawned by unusual parent processes (e.g., Office applications), and the correlation of registry queries with subsequent suspicious network activity.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events with command lines that exactly match a curated list of known malicious registry query commands?
    context: This question aims to identify high-fidelity indicators of compromise. Adversaries often reuse tools like Mimikatz or BloodHound, which employ specific, recognizable command-line patterns for registry enumeration. Detecting these exact matches provides strong evidence of malicious activity with a low false-positive rate.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers), Executive workstations, Developer workstations
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH process_creation_events (event_id=4688 OR event_id=1)
          WHERE command_line MATCHES list_of_known_malicious_registry_commands
          RETURN host, user, process, command_line

  - question: Do any command lines containing 'reg.exe query' show a high n-gram similarity to a corpus of known malicious commands?
    context: This question helps detect variations or obfuscations of known malicious commands that exact matching might miss. By calculating the similarity (e.g., using 3-grams) between an observed command and a library of malicious ones, analysts can flag suspicious commands that are "close" to known bad patterns, catching adversary attempts to evade simple signature-based detections.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers), Executive workstations, Developer workstations
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each process_creation_event with 'reg.exe query' in command_line
          CALCULATE n_gram_overlap_score(command_line, malicious_command_corpus)
          IF score > 95th_percentile_of_benign_scores
          ALERT on host, user, process, command_line

  - question: Has a machine learning model classified any command-line registry queries as malicious?
    context: This question leverages a more advanced, adaptive detection method. A logistic regression model trained on features like command length, character entropy, and specific keywords ('query', 'HKLM', 'password') can identify novel or heavily obfuscated malicious commands that may not resemble any known signatures, providing a more robust and future-proof detection capability.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers), Executive workstations, Developer workstations
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each new process_creation_event
          APPLY trained_logistic_regression_model(command_line_features)
          IF classification == 'malicious'
          ALERT on host, user, process, command_line

  - question: Have any processes accessed or queried high-value registry paths known to contain sensitive information?
    context: This question focuses on the adversary's objective. Adversaries target specific registry keys to find credentials, configurations, or secrets. Monitoring a watchlist of these high-value paths (e.g., those storing PuTTY session info or Terminal Server client details) is a direct way to detect attempts to harvest sensitive information.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - All Windows endpoints and servers, Authentication servers (e.g., Domain Controllers), Servers hosting sensitive applications
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH process_creation_events OR registry_access_events (event_id=4688, 1, or 13)
          WHERE registry_path IN high_value_path_watchlist
          RETURN host, user, process, registry_path

  - question: Has any process accumulated a high-risk score by accessing multiple sensitive registry keys within a short time frame?
    context: This question moves beyond single-key access to detect a pattern of behavior. By assigning risk scores to different keys and summing them for a process over a short window, this method can distinguish between a single, possibly legitimate access and a broader enumeration activity characteristic of an adversary mapping out sensitive data locations. It helps reduce noise by baselining normal activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - All Windows endpoints and servers, Authentication servers (e.g., Domain Controllers), Servers hosting sensitive applications
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each process over a 5-minute window
          CALCULATE cumulative_risk_score = SUM(risk_score_of_accessed_keys)
          IF cumulative_risk_score > 3_std_dev_above_host_baseline
          ALERT on host, process, cumulative_risk_score

  - question: Has a machine learning model classified any queries to sensitive registry keys as malicious based on contextual features?
    context: This question aims to differentiate between legitimate and malicious access to the same sensitive key. A Random Forest model can use context—such as the parent process, user, time of day, and historical rarity of the query—to make a sophisticated judgment. For example, svchost.exe accessing a key might be normal, while outlook.exe accessing it is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - All Windows endpoints and servers, Authentication servers (e.g., Domain Controllers), Servers hosting sensitive applications
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each query to a sensitive_registry_key
          APPLY trained_random_forest_model(parent_process, user, time_of_day, query_rarity)
          IF classification == 'malicious'
          ALERT on host, user, process, registry_path

  - question: Has any single process executed an unusually high number of distinct 'reg.exe query' commands in a short period?
    context: This question sets up a simple but effective tripwire for automated reconnaissance. Normal system or user activity rarely involves executing a high volume of registry queries in a short burst. A rule that alerts when a single process runs more than 50 queries in 2 minutes can reliably catch scanning activity from adversary scripts and tools.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows endpoints and servers, especially those with standard user configurations where such activity is unexpected
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          COUNT distinct 'reg.exe query' commands by ProcessID over a 2-minute window
          IF count > 50
          ALERT on host, ProcessID, count

  - question: Is any process querying an unusually diverse set of registry key paths, as measured by entropy?
    context: This question uses information theory to detect reconnaissance. Shannon entropy measures the variety or randomness of the registry paths being queried. A process performing targeted access will have low entropy, while a process scanning a wide and varied range of keys for information will have high entropy. This can detect scanning even if the volume is low.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows endpoints and servers, especially those with standard user configurations where such activity is unexpected
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each parent_process over a 5-minute window
          CALCULATE shannon_entropy of unique_registry_key_paths_queried
          IF entropy > 98th_percentile_of_historical_baseline
          ALERT on host, parent_process, entropy_score

  - question: Has a time-series model detected an anomalous burst in the rate of registry query events on any host?
    context: This question seeks to find deviations from the normal rhythm of system activity. By modeling the typical daily and weekly patterns of registry queries on a host, a time-series anomaly detection model (like STL) can automatically flag sudden, sustained bursts of activity that don't fit the established pattern, indicating a potential reconnaissance phase.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows endpoints and servers, especially those with standard user configurations where such activity is unexpected
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          AGGREGATE registry query events into 1-minute bins per host
          APPLY seasonal_trend_decomposition_model(binned_counts)
          IF current_rate is a significant deviation from forecast
          ALERT on host, current_rate, forecasted_rate

  - question: Has a registry utility like 'reg.exe' been launched by a non-standard parent process like an Office application or web browser?
    context: This question focuses on suspicious process lineage. Legitimate registry access is typically initiated by system processes, administrator tools, or installers. A registry utility being spawned by an application like Microsoft Word, Outlook, or Chrome is a strong indicator of malicious code execution, likely from a phishing document or a browser exploit.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, Mail servers, Web proxies
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE child_process IN ('reg.exe', 'regedit.exe')
          AND parent_process IN ('OUTLOOK.EXE', 'WINWORD.EXE', 'CHROME.EXE', 'msedge.exe')
          ALERT on host, parent_process, child_process

  - question: Has an extremely rare parent-child process relationship involving a registry utility been observed?
    context: This question provides a data-driven approach to finding unusual process lineage. By baselining all parent-child relationships across the enterprise over time, analysts can automatically flag new or statistically rare pairings. This method can discover novel attack vectors without relying on a predefined list of suspicious parents.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, Mail servers, Web proxies
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each new parent-child_process event involving a registry utility
          CHECK frequency in historical baseline of all parent-child pairs
          IF frequency < 1st_percentile
          ALERT on host, parent_process, child_process

  - question: Has an unsupervised learning model identified any process creation events involving registry utilities as highly anomalous?
    context: This question uses a model like an Isolation Forest to find "needles in a haystack." The model learns what normal process creation events look like based on features like parent/child name, user, and file paths. It can then assign a high anomaly score to events that don't fit the pattern, such as 'winword.exe' in a temp directory spawning 'reg.exe', effectively flagging suspicious outliers.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, Mail servers, Web proxies
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          APPLY trained_isolation_forest_model to process_creation_event_features
          IF anomaly_score is high
          ALERT on host, user, parent_process, child_process

  - question: Has a process queried network-related registry keys and then initiated an outbound network connection to a known malicious IP or domain?
    context: This question connects two key stages of an attack: internal reconnaissance and external communication. An adversary might query the registry for proxy settings or saved credentials before attempting to exfiltrate data or establish a command-and-control channel. Correlating these registry queries with subsequent network connections to destinations on a threat intel feed creates a high-confidence alert.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          CORRELATE process_events (querying network keys) with network_logs from same host within 5 mins
          IF network_log.destination IN threat_intelligence_feed
          ALERT on host, process, destination_ip

  - question: Following a query to network-related registry keys, has a host made an outbound connection with a high rarity score?
    context: This question looks for unusual network behavior immediately following registry reconnaissance. Instead of relying on threat intelligence, this method scores the rarity of the outbound connection based on its destination port, Autonomous System Number (ASN), and TLS fingerprint (JA3/JA3S). A highly rare connection after a network-related registry query may indicate a newly established C2 channel.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          ON registry_query_to_network_key
          ANALYZE subsequent outbound network_connections from same host
          CALCULATE rarity_score based on destination_port, destination_asn, ja3_hash
          IF score > 99th_percentile
          ALERT on host, process, connection_details

  - question: Has a sequence analysis model detected an anomalous sequence of a network-related registry query followed by a high-risk network connection?
    context: This question uses an advanced machine learning technique to learn normal sequences of system and network events. A Recurrent Neural Network (RNN) can be trained to understand typical event pairings. It can then flag a sequence as anomalous if a network-related registry query is followed by a network connection that is uncharacteristic or has been classified as risky, indicating a potential attack chain.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          APPLY trained_rnn_sequence_model to {registry_event, network_event} pairs
          IF sequence is flagged as anomalous
          ALERT on host, process, and the anomalous event sequence