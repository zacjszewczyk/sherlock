name: T1006: Direct Volume Access
id: 59728956-651c-4f11-8e05-592534571b07
description: This playbook helps investigate whether an adversary is bypassing file access controls or monitoring by directly accessing raw volume data. This technique is often used for data theft, evidence tampering, or bypassing security software that operates at the file system level. Indicators include the use of specific tools (e.g., NinjaCopy), the misuse of legitimate system utilities (e.g., vssadmin.exe, esentutl.exe), direct handle requests to volume objects (e.g., \\.\PhysicalDrive0), correlated sequences of volume access followed by data staging and exfiltration, and the use of obfuscated PowerShell scripts that call low-level disk I/O APIs.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are known direct volume access tools or scripts being executed in the environment?
  context: Adversaries often use publicly available or custom tools specifically designed for direct volume access to bypass file-level security controls. This question aims to detect the execution of these tools by matching process names, command lines, script content, or file hashes against a maintained list of known indicators. A match is a high-fidelity signal of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  - Backup Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_logs (event_id:4688) OR powershell_script_logs (event_id:4104) WHERE (process_name IN known_T1006_tools OR file_hash IN known_T1006_hashes OR script_text CONTAINS known_T1006_tool_names)
- question: Are there any low-prevalence processes being run with command-line arguments that suggest raw disk or volume access?
  context: Attackers may rename common tools to evade simple name-based detections. This question seeks to identify such tools by focusing on processes that are rare in the environment (low prevalence) but are executed with suspicious command-line arguments containing keywords like 'copy', 'raw', 'disk', or '\\.\'. This combination points to potentially malicious or unauthorized software.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  - Backup Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_logs (event_id:4688) | CALCULATE prevalence of process_name | WHERE prevalence < 5 AND command_line CONTAINS ('copy', 'raw', 'disk', 'volume', '\\.\')
- question: Has a machine learning model identified any process executions as being indicative of direct volume access?
  context: Sophisticated adversaries may use novel or heavily obfuscated tools that evade signature and keyword-based detections. This question leverages a supervised machine learning model trained to recognize the characteristics of malicious processes (e.g., high entropy, unusual parent-child relationships). It provides a way to catch previously unseen threats based on behavioral patterns rather than specific indicators.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  - Backup Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE process_logs (event_id:4688) TO T1006_classification_model | WHERE prediction == 'malicious' AND confidence > 0.9
- question: Are legitimate system utilities being used with command-line arguments that create or access volume shadow copies or raw disk data?
  context: Adversaries abuse legitimate 'living-off-the-land' binaries (LOLBAS) like `vssadmin.exe`, `esentutl.exe`, and `wbadmin.exe` to perform direct volume access. This question looks for specific, high-fidelity command-line patterns associated with the malicious use of these tools, such as creating shadow copies for offline access or directly accessing physical drive paths. This is a common method to access locked files or bypass filesystem auditing.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  - Backup Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_logs (event_id:4688) OR powershell_script_logs (event_id:4104) WHERE command_line MATCHES REGEX ('vssadmin create shadow', 'esentutl.exe /y /vss', '\\.\PhysicalDrive[0-9]')
- question: Are legitimate system utilities like `vssadmin.exe` being executed with abnormally complex or obfuscated command-line arguments?
  context: To hide their actions, attackers might use complex or obfuscated command-line arguments that deviate from normal administrative usage. This question establishes a baseline of normal command-line entropy for key utilities on each host. An execution with an unusually high entropy score suggests an attempt to obscure malicious commands from simple keyword-based detection.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  - Backup Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_logs (event_id:4688) WHERE process_name IN ('vssadmin.exe', 'esentutl.exe', 'wbadmin.exe') | CALCULATE entropy of command_line | COMPARE entropy to historical_baseline_for_host | WHERE entropy > 95th_percentile
- question: Have there been any statistically improbable sequences of command executions that suggest a direct volume access attack chain?
  context: Direct volume access is often one step in a larger attack chain, which might include staging data (compression) and exfiltration. This question uses sequence analysis to identify chains of commands that are statistically unlikely to occur during normal operations. For example, creating a shadow copy, followed by compressing a file from it, then using PowerShell to send it over the network, is a highly suspicious sequence.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  - Backup Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE process_logs (event_id:4688) for command sequences per host | WHERE sequence is statistically_improbable (e.g., 'vssadmin' -> '7z' -> 'powershell -enc')
- question: Is an unauthorized process requesting a handle to a logical volume or physical drive?
  context: At a low level, direct volume access requires a process to obtain a 'handle' to the volume object (e.g., C:\, \Device\HarddiskVolume1). This question aims to detect this action by monitoring for handle requests (Event ID 4656) and alerting when a process not on a pre-defined allowlist of legitimate system/backup utilities attempts to access a volume object. This is a direct method of catching the technique in action.
  answer_sources:
  - Windows Event ID 4656
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH filesystem_audit_logs (event_id:4656) WHERE object_name IS_A_VOLUME_OR_PHYSICAL_DRIVE AND process_name NOT IN (volume_access_allowlist)
- question: Are legitimate, allowlisted processes requesting unusually permissive or rare access rights to volume objects?
  context: Even a legitimate process can be compromised or abused. An attacker might use an allowlisted process to request higher privileges on a volume object than it normally needs (e.g., rights to change permissions or ownership). This question baselines the normal access rights requested by each allowlisted process and alerts on deviations, such as the request for high-privilege access masks that are historically rare for that process.
  answer_sources:
  - Windows Event ID 4656
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH filesystem_audit_logs (event_id:4656) WHERE process_name IN (volume_access_allowlist) | COMPARE requested_access_mask to historical_baseline_for_process | WHERE access_mask_is_rare OR includes_high_privilege_rights ('WRITE_DAC', 'GENERIC_ALL')
- question: Are there any anomalous volume handle requests that fall outside of known, legitimate access patterns?
  context: This question uses unsupervised machine learning to automatically identify normal patterns of volume access based on the process, object, and access rights. Any handle request event that does not fit into an established cluster of normal behavior is flagged as an anomaly. This is a powerful method for detecting novel or unexpected attack variations without relying on pre-defined rules or allowlists.
  answer_sources:
  - Windows Event ID 4656
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE filesystem_audit_logs (event_id:4656) TO anomaly_detection_model (DBSCAN, Isolation Forest) | WHERE event IS classified_as_anomaly
- question: Has a sequence of events occurred involving volume access, followed by data compression, and then a large network upload?
  context: This question correlates alerts across different data sources to identify a full attack chain. It looks for a specific, logical sequence of events on a single host- 1) an alert indicating direct volume access, 2) the execution of a compression tool, and 3) a large outbound network connection to a new destination. Detecting this entire sequence provides very high confidence that data has been stolen via direct volume access.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4688
  - Zeek conn.log
  - Critical Servers (Domain Controllers, File Servers)
  - Administrator Workstations
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE alerts ON single_host within 30_minutes- (1. T1006_volume_access_alert) FOLLOWED BY (2. process_log WHERE process_name IN archiving_tools) FOLLOWED BY (3. network_log WHERE outbound_bytes > 100MB AND destination_ip is_new)
- question: Following a direct volume access alert, did the host exhibit a significant spike in outbound network traffic compared to its normal baseline?
  context: The ultimate goal of accessing volume data is often exfiltration. This question acts as an automated enrichment step. Upon an initial T1006 alert, it immediately analyzes the host's recent network traffic, comparing it to a statistical baseline for that specific host and time. A significant deviation (e.g., 3+ standard deviations above the mean) strongly suggests that data exfiltration is occurring and escalates the alert's priority.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4688
  - Zeek conn.log
  - Critical Servers (Domain Controllers, File Servers)
  - Administrator Workstations
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON T1006_alert for a host- QUERY network_logs for that host in next_60_minutes | CALCULATE total_outbound_bytes | COMPARE to historical_baseline for host/hour/day | WHERE outbound_bytes > 99th_percentile OR 3_std_devs_above_mean
- question: Has a machine learning model detected a sequence of events that matches the hidden states of a volume access, staging, and exfiltration attack?
  context: This question uses a more advanced probabilistic model (Hidden Markov Model) to track the state of a host over time. The model is trained to recognize the likelihood of transitioning between states (e.g., from 'Benign' to 'VolumeAccess'). By feeding a real-time stream of events into the model, it can calculate the most probable path of hidden states. Detecting the path `VolumeAccess -> Staging -> Exfiltration` provides a high-confidence alert for the full attack lifecycle.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4688
  - Zeek conn.log
  - Critical Servers (Domain Controllers, File Servers)
  - Administrator Workstations
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE event_stream (filesystem_audits, process_logs, network_logs) TO Hidden_Markov_Model | USE Viterbi algorithm to find most_likely_state_sequence | WHERE sequence == ('Benign', 'VolumeAccess', 'Staging', 'Exfiltration')
- question: Is PowerShell being used to make direct API calls or use .NET methods for raw disk access?
  context: Adversaries can use PowerShell to perform fileless direct volume access, which is harder to detect than running a standalone executable. This question inspects the content of PowerShell script logs for keywords and function names associated with low-level disk I/O (e.g., `CreateFileW`, `DeviceIoControl`, `[System.IO.FileStream]`). Finding these in a script, especially one launched by an unusual parent process like an Office application, is a strong indicator of malicious intent.
  answer_sources:
  - Windows Event ID 4103
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH powershell_script_logs (event_id:4104) WHERE script_text MATCHES REGEX ('CreateFileW', 'DeviceIoControl', 'System.IO.FileStream.*\\.\')
- question: Are there any executed PowerShell script blocks that exhibit high entropy and a high ratio of non-alphanumeric characters?
  context: To evade signature-based detection, attackers heavily obfuscate their PowerShell scripts. This question aims to detect obfuscation by measuring two key metrics- Shannon entropy (a measure of randomness) and the ratio of symbols to letters. A script that scores unusually high on both metrics, compared to a baseline of normal scripts in the environment, is very likely to be obfuscated and malicious.
  answer_sources:
  - Windows Event ID 4103
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Critical Servers (DomainControllers, File Servers, Database Servers)
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH powershell_script_logs (event_id:4104) | CALCULATE entropy AND non_alphanumeric_ratio for script_text | COMPARE to environment_baseline | WHERE entropy > 98th_percentile AND non_alphanumeric_ratio > 98th_percentile
- question: Has a natural language processing model classified any PowerShell scripts as malicious?
  context: This question leverages advanced AI, specifically a transformer-based language model (like BERT) that has been trained to understand the structure and intent of PowerShell code. By analyzing the script content, the model can identify malicious patterns, logic, and obfuscation techniques that are difficult to define with rules or simple metrics. A high-confidence malicious classification from the model warrants immediate investigation.
  answer_sources:
  - Windows Event ID 4103
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Critical Servers (Domain Controllers, File Servers, Database Servers)
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE powershell_script_logs (event_id:4104) TO powershell_language_model | WHERE classification == 'malicious' AND confidence > 0.95