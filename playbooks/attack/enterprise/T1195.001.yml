name: T1195.001: Compromise Software Dependencies and Development Tools
id: 9d8f3a3e-7b6c-4d5a-9e8f-7b6c5d4a3e2f
description: This playbook helps determine if an adversary is leveraging compromised software dependencies or development tools for Initial Access. It focuses on identifying malicious software packages through hash analysis, spotting anomalous network connections from build tools to malicious destinations, detecting malicious or obfuscated scripts executed by package managers, identifying typosquatted package names, flagging anomalous child processes spawned by development tools, identifying suspicious network traffic patterns during dependency fetches, and detecting post-installation behaviors like persistence creation or access to sensitive files.
type: technique
related:
- TA0001: Initial Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any downloaded software packages or executables identified as known malicious dependencies via hash matching?
  context: This question aims to perform a direct match of file hashes (e.g., SHA256) against a threat intelligence feed of known malicious dependencies. A match is a high-confidence indicator that a compromised software component has been introduced into the environment. This is a fundamental, high-fidelity check for known threats.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (EID 4688) and file transfer logs (Zeek files.log)
      EXTRACT file hashes (SHA256)
      COMPARE extracted hashes against threat intelligence feed of malicious dependency hashes
      ALERT on any match
- question: Are any downloaded dependencies abnormally rare within the environment, suggesting they are non-standard or trojanized?
  context: This question seeks to identify unknown or targeted threats by analyzing the prevalence of a given file across the organization. Files that appear on only a very small number of hosts, especially when associated with automated processes like package managers, are suspicious. They may represent unauthorized, non-standard, or malicious software that has not yet been identified by threat intelligence.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      FOR each unique file hash observed
      CALCULATE count of unique hosts where hash was seen
      FLAG hashes with a host count in the lowest percentile (e.g., <= 1st percentile)
      PRIORITIZE flags for files associated with package manager or build tool processes
- question: Can a machine learning model classify any downloaded dependencies as malicious based on their file metadata?
  context: This question leverages a machine learning model to provide a probabilistic assessment of a file's maliciousness. By training a model on features like file size, entropy, code signing status, and the reputation of its download source, it can identify suspicious files that may lack a known malicious signature but exhibit characteristics of malware.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each downloaded dependency
      EXTRACT features (file size, PE section entropy, source IP reputation, domain age, signature status)
      APPLY pre-trained classification model (e.g., XGBoost)
      FLAG files classified as 'malicious' with a confidence score > 0.9
- question: Is any network traffic from package managers or build tools communicating with known malicious domains, IPs, or URLs?
  context: This question checks for direct evidence of compromise by looking for network communications from development tools to destinations listed in threat intelligence feeds. A match indicates that a build or dependency installation process is connecting to a known command-and-control (C2) server or a repository for malicious code.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Developer workstations, build servers, DNS resolvers, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH DNS, connection, and HTTP logs for traffic originating from developer/build subnets
      COMPARE destination domains, IPs, and URLs against threat intelligence feeds
      ALERT on any match
- question: Is there anomalous DNS or connection activity from development systems, such as high-entropy domains or connections to rare ASNs?
  context: This question seeks to identify suspicious network activity that isn't on a known-bad list. High-entropy domain names are often used by malware for C2 communication (DGA), while connections to rarely-used Autonomous System Numbers (ASNs) or countries can indicate communication with atypical or purpose-built infrastructure.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Developer workstations, build servers, DNS resolvers, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR DNS queries from development systems, CALCULATE Shannon entropy of the domain name; FLAG if > 3.5
      FOR outgoing connections, BASELINE destination ASNs/countries; FLAG connections to rare or first-seen destinations
- question: Are there anomalous spikes in outbound network traffic from build servers or developer subnets that correlate with package installation events?
  context: This question uses time-series analysis to detect unusual data exfiltration or C2 communication. A sudden, anomalous spike in outbound traffic shortly after a package installation could indicate that a malicious dependency has been activated and is communicating with its operator or exfiltrating data.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Developer workstations, build servers, DNS resolvers, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL time-series of outbound bytes and connection counts from developer/build subnets
      USE anomaly detection algorithm (e.g., S-H-ESD) to find significant spikes
      CORRELATE spikes with recent package installation events (within 10 minutes)
      FLAG correlated anomalous spikes
- question: Do any scripts executed by package managers contain signatures of malicious activity, like specific commands or obfuscation techniques?
  context: This question looks for "smoking gun" evidence within the scripts that package managers run. Many supply chain attacks use installation scripts (e.g., PowerShell) to execute malicious code. Searching for keywords like 'Invoke-Expression', base64 encoded strings, or reconnaissance commands (`whoami`, `ipconfig`) can directly uncover this activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Developer workstations, build servers, CI/CD pipeline runners.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH PowerShell script block logs (EID 4104) and process command lines (EID 4688)
      APPLY YARA rules or regex to find malicious signatures (Invoke-Expression, base64, recon commands)
      FILTER for events where the parent process is a package manager
      ALERT on match
- question: Are there any scripts executed by package managers with statistically anomalous content, such as unusually high entropy or length?
  context: This question helps find obfuscated or packed malicious scripts that may not match a simple signature. Malicious actors often use obfuscation to hide their code, which typically increases its character-level entropy and length compared to legitimate scripts. Flagging scripts that are statistical outliers can reveal these hidden payloads.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Developer workstations, build servers, CI/CD pipeline runners.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each script block (EID 4104), CALCULATE Shannon entropy and content length
      ESTABLISH a baseline for these metrics for legitimate scripts
      ALERT when a script's entropy or length exceeds a dynamic threshold (e.g., > 3 standard deviations from the mean)
- question: Can a Natural Language Processing (NLP) model identify any malicious scripts executed by package managers based on their command sequences?
  context: This question uses advanced machine learning to understand the intent of a script, going beyond simple keyword matching. An NLP model can analyze the sequence and structure of commands to identify patterns that are syntactically valid but semantically malicious, such as a script that downloads a file, decodes it, and executes it.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Developer workstations, build servers, CI/CD pipeline runners.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      EXTRACT script block text (EID 4104)
      APPLY pre-trained NLP classifier (e.g., fine-tuned BERT) to the script text
      FLAG scripts classified as 'malicious' with a probability score > 0.85
- question: Are there any processes or file modifications involving package names known to be malicious?
  context: This question uses threat intelligence about specific malicious packages (e.g., 'pygrata-requests') to find evidence of compromise. It involves searching process execution and network logs for the names of packages that have been publicly identified as part of a supply chain attack.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Developer workstations, build servers, internal artifact repositories, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN a watchlist of known malicious package names
      SEARCH process command lines (EID 4688) and HTTP URIs (Zeek http.log) for names on the watchlist
      ALERT on match
- question: Are any observed package names a close typographical match to legitimate packages, suggesting a typosquatting attack?
  context: This question aims to detect typosquatting, a common technique where attackers publish malicious packages with names very similar to popular, legitimate ones (e.g., 'python-dateutli' instead of 'python-dateutil'). By calculating the string distance (e.g., Levenshtein) between observed package names and a dictionary of approved ones, we can flag potential typosquatting attempts.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Developer workstations, build servers, internal artifact repositories, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN a dictionary of approved, legitimate package names
      FOR each new package name observed, CALCULATE Levenshtein distance to all names in the dictionary
      FLAG package names with a distance of 1 or 2 as potential typosquatting
- question: Does a dependency graph analysis reveal any anomalous packages that do not fit into existing project communities?
  context: This question takes a holistic view of the software ecosystem. By mapping all the dependencies for all internal projects, we can identify normal "communities" of packages that are often used together. A new package that doesn't fit into any community, or that anomalously links two otherwise unrelated communities, is suspicious and could be a malicious implant.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Developer workstations, build servers, internal artifact repositories, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      PARSE project manifest files (e.g., package.json, requirements.txt) to build a dependency graph
      APPLY a community detection algorithm (e.g., Louvain) to the graph
      FLAG packages that do not fit well into any discovered community
- question: Have any package managers or build tools spawned high-risk or unexpected child processes?
  context: This question focuses on the behavior of build tools by monitoring the processes they create. A package manager like 'npm.exe' spawning a shell like 'powershell.exe' or an interpreter like 'cscript.exe' can be a strong indicator that a malicious script included in a package is being executed. This involves creating rules for known-bad parent-child relationships.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Developer workstations, build servers, CI/CD pipeline runners.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE rules to detect high-risk parent-child process relationships
      (e.g., 'MSBuild.exe' -> 'powershell.exe', 'npm.exe' -> 'cscript.exe')
      APPLY rules to process creation logs (EID 4688)
      ALERT on rule match
- question: Have any development-related parent processes spawned child processes that are rare or have never been seen before?
  context: This question seeks to find anomalous behavior by baselining normal process activity. For any given development tool (e.g., 'python.exe'), we can build a profile of its normal child processes. When a new or very rare child process appears, it deviates from this baseline and warrants investigation as it could be the result of a malicious dependency.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Developer workstations, build servers, CI/CD pipeline runners.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      FOR each development-related parent process, build a historical frequency distribution of its child processes
      ALERT when a child process is spawned that is new or has a very low frequency (e.g., seen < 5 times)
- question: Does the sequence of process creations during a software build deviate from normal, baselined behavior?
  context: This question analyzes the entire chain of events during a build process, not just individual parent-child relationships. By modeling the normal sequence of process creations, a machine learning model can detect when a build session contains an abnormal sequence, which could indicate a malicious payload executing in a way that is out of order or involves unexpected intermediate steps.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Developer workstations, build servers, CI/CD pipeline runners.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL the sequence of parent-child-grandchild process creations during typical builds
      APPLY a sequence-based anomaly detection algorithm (e.g., LSTM autoencoder) to new build sessions
      FLAG build sessions with anomalous process sequences
- question: Are package managers making direct-to-IP connections to fetch dependencies?
  context: This question identifies a highly suspicious network behavior. Legitimate package managers almost always resolve a domain name (e.g., pypi.org) to find and download packages. A connection made directly to an IP address, bypassing DNS, is abnormal and often indicates communication with a hardcoded C2 server.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points, DNS resolvers, developer and build server subnets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH connection logs (Zeek conn.log) for connections from package manager processes
      FLAG connections where the destination is an IP and there is no preceding DNS lookup for that IP
- question: Are dependencies being downloaded from rare domains/ASNs or with uncommon User-Agent strings?
  context: This question hunts for outliers in network metadata. Attackers often host malicious packages on newly registered domains or obscure hosting providers. By baselining what is normal for your environment (common repositories, common User-Agents), you can flag downloads from sources that are statistically rare and therefore more likely to be malicious.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points, DNS resolvers, developer and build server subnets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE the frequency of domains, ASNs, and User-Agents used for package downloads
      FLAG downloads from a domain/ASN in the bottom frequency percentile (e.g., < 1%)
      FLAG connections using a User-Agent string with very low prevalence (e.g., < 0.5%)
- question: Can unsupervised clustering of network connection metadata identify anomalous download activity?
  context: This question uses machine learning to automatically group network connections into "normal" and "abnormal" clusters without needing pre-defined rules. By clustering based on features like destination port, country, ASN, and data volume, connections to legitimate repositories will form large, dense clusters. Outlier connections that don't fit any normal cluster can then be flagged for investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points, DNS resolvers, developer and build server subnets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY clustering algorithm (e.g., DBSCAN) to connection metadata (dest port, bytes, duration, country, ASN)
      IDENTIFY large clusters representing normal repository traffic
      FLAG connections that are classified as noise or fall into small, anomalous clusters
- question: Is a process spawned during a package installation observed creating a known persistence mechanism?
  context: This question looks for post-exploitation behavior immediately following a package installation. A key goal for an attacker after gaining initial access is to establish persistence. This query looks for high-confidence indicators of this, such as the creation of a new scheduled task, a new service, or modification of a registry Run key by a process associated with the installation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Windows Event ID 5156
  - Windows Event ID 4104
  - Windows Event ID 4663
  - Windows Event ID 7045
  - Domain controllers (for GPO changes), developer workstations, build servers, file servers hosting sensitive data.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE processes spawned during package installation (via parent process IDs from EID 4688)
      with events for:
      - New Scheduled Task (EID 4698)
      - New Service (EID 7045)
      - Registry Run Key modification (EID 4657)
      ALERT on any such correlation.
- question: Are development tool processes accessing sensitive user directories or an anomalous number of files?
  context: This question aims to detect credential and data theft. After execution, a malicious dependency may attempt to access sensitive files, such as SSH keys, cloud credentials, or browser data. By auditing access to these directories and baselining what is normal, we can detect when a development tool process accesses them for the first time or accesses an unusually large number of files.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Windows Event ID 5156
  - Windows Event ID 4104
  - Windows Event ID 4663
  - Windows Event ID 7045
  - Domain controllers (for GPO changes), developer workstations, build servers, file servers hosting sensitive data.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ENABLE file access auditing (EID 4663) on sensitive directories (~/.ssh, ~/.aws, etc.)
      BASELINE normal file access paths and counts for developer processes
      ALERT when a process accesses a sensitive directory for the first time or accesses a number of files that is a statistical outlier (> 99th percentile)
- question: Can a graph-based analysis of events reveal a suspicious causal chain originating from a package installation?
  context: This question uses an advanced technique to connect disparate events into a single attack narrative. By modeling different log sources (package install, process creation, network connection, registry modification) as nodes in a graph, a machine learning model can learn the structure of normal activity. It can then flag entire subgraphs that represent a suspicious causal chain, such as an install leading to obfuscated PowerShell which in turn leads to an outbound connection to a new IP.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Windows Event ID 5156
  - Windows Event ID 4104
  - Windows Event ID 4663
  - Windows Event ID 7045
  - Domain controllers (for GPO changes), developer workstations, build servers, file servers hosting sensitive data.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL events (install, process, network, registry) as nodes in a temporal graph
      USE a graph neural network (GNN) to learn patterns of normal build/install behavior
      FLAG subgraphs that represent a suspicious causal chain (e.g., install -> obfuscated script -> new outbound IP)