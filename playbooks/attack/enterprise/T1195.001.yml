name: T1195.001: Compromise Software Dependencies and Development Tools
id: 9e4d5f6e-1b2c-4d5e-8f6a-7b8c9d0e1f2a
description: This playbook helps determine if an adversary is leveraging compromised software dependencies or development tools for Initial Access. It provides investigative questions to detect this technique by identifying malicious downloaded packages via hash matching, monitoring for network connections to known C2 infrastructure, analyzing scripts for obfuscation, detecting typosquatted package names, identifying anomalous child processes spawned by build tools, flagging unusual network traffic characteristics like direct-to-IP connections, and spotting post-install behavior such as persistence creation or sensitive file access.
type: technique
related:
  - TA0001: Initial Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any downloaded software packages or executables been identified as malicious based on hash matching with threat intelligence feeds?
    context: This question aims to detect known malicious dependencies by comparing file hashes of downloaded software against a curated list of Indicators of Compromise (IOCs). A match provides a high-confidence indicator that a compromised dependency has been introduced into the environment via a developer workstation, build server, or artifact repository.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each file in (Zeek files.log, WinEvent 4688):
            GET file_hash (SHA256)
            IF file_hash IN threat_intel_feed:
              ALERT(high, "Known malicious dependency hash found")
  - question: Are there any software dependency files with an unusually low prevalence across the environment, suggesting they are non-standard or potentially trojanized?
    context: This question seeks to identify outliers by analyzing the prevalence of files associated with package managers or build tools. A file seen on only a handful of hosts, falling into a low percentile, is suspicious because legitimate dependencies are typically widely distributed. This could indicate a non-standard or trojanized component.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.
    range: last 30 days
    queries:
      - pseudocode: |-
          FOR each file_hash observed in the last 30 days:
            CALCULATE prevalence (count of unique hosts)
            IF prevalence <= 1st_percentile AND parent_process IS build_tool:
              ALERT(medium, "Anomalously rare dependency file observed")
  - question: Can a machine learning model classify any downloaded software dependencies as malicious based on their file metadata and origin?
    context: This question leverages a supervised machine learning model to proactively identify potentially malicious files that may not yet be on any IOC list. By analyzing a rich set of features like file size, entropy, source IP reputation, and code signing status, the model can flag suspicious files that warrant further analyst review.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each downloaded file:
            EXTRACT features (file size, PE entropy, source IP reputation, domain age, signature status)
            PREDICT benign/malicious with classification_model
            IF prediction is 'malicious' AND confidence > 0.9:
              ALERT(low, "ML model classified dependency as potentially malicious")
  - question: Has any network traffic from package managers or build tools connected to known malicious domains, IPs, or URLs?
    context: This question looks for direct communication with adversary infrastructure during the dependency fetching process. By scanning DNS, connection, and HTTP logs for traffic originating from development systems and matching against threat intelligence, we can detect attempts to download malicious code from known bad sources.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Developer workstations, build servers, DNS resolvers, network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each network_log (dns, conn, http):
            IF destination IN threat_intel_feed AND source_subnet IS developer_or_build_subnet:
              ALERT(high, "Network connection from build tool to known malicious host")
  - question: Is there any anomalous network behavior from development systems, such as DNS queries with high entropy or connections to rare ASNs/countries?
    context: This question uses statistical methods to find suspicious network patterns that deviate from the norm. High entropy in DNS queries can indicate Domain Generation Algorithms (DGA), while connections to new or rare geographical locations or Autonomous Systems (ASNs) can signal C2 communication or data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Developer workstations, build servers, DNS resolvers, network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each DNS query from dev_systems:
            CALCULATE domain_entropy
            IF entropy > 3.5:
              ALERT(medium, "High entropy DNS query detected")
          FOR each connection from dev_systems:
            IF destination_ASN is rare OR data_volume > 95th_percentile:
              ALERT(medium, "Anomalous network connection to rare ASN or with high volume")
  - question: Are there anomalous spikes in outbound network traffic from build servers or developer subnets that correlate with package installation events?
    context: This question uses time-series anomaly detection to spot unusual bursts of network activity. Such a spike, especially shortly after a package installation, could indicate a malicious dependency downloading a second-stage payload or exfiltrating data.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Developer workstations, build servers, DNS resolvers, network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          MODEL time-series of outbound traffic from developer/build subnets
          DETECT anomalies with S-H-ESD algorithm
          IF anomaly_detected AND time IS within 10_mins of a package_install_event:
            ALERT(medium, "Anomalous traffic spike post-package installation")
  - question: Did a package manager execute any scripts containing known malicious signatures, such as specific commands or obfuscation techniques?
    context: This question aims to detect malicious pre- or post-install scripts by scanning PowerShell script block logs and process command lines. It looks for tell-tale signs of malicious activity like the use of `Invoke-Expression`, base64 encoding, or reconnaissance commands (`whoami`, `ipconfig`).
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Developer workstations, build servers, CI/CD pipeline runners.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each script_block_log (EID 4104) OR process_command_line (EID 4688):
            APPLY YARA rules for malicious signatures (e.g., Invoke-Expression, recon commands)
            IF match_found AND parent_process IS package_manager:
              ALERT(high, "Malicious script signature found in package manager script")
  - question: Are there any scripts executed by package managers with unusually high entropy or command-line length, suggesting obfuscation?
    context: This question uses statistical analysis of script content and command-line length to find outliers. Legitimate installation scripts tend to have predictable characteristics, while malicious scripts are often heavily obfuscated (high entropy) or unusually long to hide an embedded payload.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Developer workstations, build servers, CI/CD pipeline runners.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each script_block_log (EID 4104):
            CALCULATE content_entropy and command_length
            IF entropy > 3_std_devs_from_mean OR length > 3_std_devs_from_mean:
              ALERT(medium, "Script with anomalous entropy or length detected")
  - question: Can an NLP-based machine learning model identify malicious patterns in scripts executed during package installation?
    context: This question applies advanced Natural Language Processing (NLP) models to understand the semantic context and sequence of commands within a script. This approach can detect complex malicious logic and suspicious command chains that simple keyword matching or statistical methods might miss.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Developer workstations, build servers, CI/CD pipeline runners.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each script_block_log (EID 4104):
            CLASSIFY script_text with NLP_model
            IF prediction is 'malicious' AND probability > 0.85:
              ALERT(low, "ML model classified script as potentially malicious")
  - question: Have any processes or file modifications been observed involving package names that are explicitly on a watchlist for malicious software?
    context: This is a straightforward IOC check that searches for exact matches of known malicious package names (e.g., from threat reports) in process execution logs and network URIs. A hit is a high-confidence indicator of a known threat being used in your environment.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Developer workstations, build servers, internal artifact repositories, network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each process_creation (EID 4688) or http_request (Zeek http.log):
            IF process_name IN malicious_package_list OR uri CONTAINS malicious_package_name:
              ALERT(high, "Known malicious package name detected")
  - question: Have any installed packages been identified as potential typosquatting attempts, having names very similar to legitimate packages?
    context: This question aims to detect typosquatting, a common supply chain attack vector where adversaries publish malicious packages with names that are slight misspellings of popular, legitimate ones. By calculating the Levenshtein distance to a dictionary of approved packages, we can flag suspicious look-alikes.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Developer workstations, build servers, internal artifact repositories, network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          FOR each new_package_name observed:
            CALCULATE Levenshtein_distance to all names in approved_package_dictionary
            IF min_distance IN [1, 2]:
              ALERT(medium, "Potential typosquatted package detected")
  - question: Does graph analysis of the software dependency graph reveal any anomalous packages that don't fit into existing project communities?
    context: This question models the software ecosystem as a graph to find structural anomalies. A malicious package might not have logical connections to other packages in a project, appearing as an isolated node or an unusual bridge between distinct groups of dependencies. This helps spot packages that don't "belong".
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Developer workstations, build servers, internal artifact repositories, network egress points.
    range: last 90 days
    queries:
      - pseudocode: |-
          PARSE all manifest files (e.g., package.json) to build dependency_graph
          APPLY community_detection_algorithm (e.g., Louvain)
          IF package is an outlier or anomalous_bridge between communities:
            ALERT(low, "Anomalous package detected in dependency graph")
  - question: Has a package manager or build tool spawned a high-risk child process that is not part of a known-good baseline?
    context: This question uses rule-based detection to flag inherently suspicious parent-child process relationships. A build tool like MSBuild.exe unexpectedly spawning powershell.exe, or npm.exe spawning cscript.exe, can be an indicator of malicious code execution during the build process.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Developer workstations, build servers, CI/CD pipeline runners.
    range: last 90 days
    queries:
      - pseudocode: |-
          MONITOR process creation (EID 4688)
          IF parent_process is package_manager AND child_process is in high_risk_list (powershell.exe, cmd.exe) AND NOT in baseline:
            ALERT(high, "High-risk child process spawned by package manager")
  - question: Has a development-related process spawned a rare or never-before-seen child process, or a process with an abnormally high-entropy command line?
    context: This question focuses on finding outliers in process execution behavior. A development tool spawning a process it has never spawned before is highly anomalous. Likewise, an unusually complex or long command line can indicate obfuscation or payload delivery.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Developer workstations, build servers, CI/CD pipeline runners.
    range: last 30 days
    queries:
      - pseudocode: |-
          FOR each parent_process (e.g., node.exe):
            BUILD frequency_distribution of its child_processes
            IF new child_process is rare (< 5 times globally):
              ALERT(medium, "Rare child process spawned by dev tool")
            CALCULATE command_line_entropy for child_process
            IF entropy > 99th_percentile:
              ALERT(medium, "Anomalous command line entropy for child process")
  - question: Using sequence analysis, have any software build sessions exhibited an abnormal sequence of process creations?
    context: This question moves beyond individual parent-child relationships to analyze the entire chain of process creations during a build. A machine learning model learns what a normal sequence looks like and can flag deviations, such as an unexpected process being injected mid-build by a malicious dependency.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Developer workstations, build servers, CI/CD pipeline runners.
    range: last 90 days
    queries:
      - pseudocode: |-
          MODEL process creation sequences during build cycles
          USE LSTM autoencoder to identify anomalous sequences
          IF a build_session_sequence is flagged as anomalous:
            ALERT(low, "Anomalous process sequence detected during build")
  - question: Has a package manager made a direct-to-IP network connection, or used an IP address in the HTTP Host or TLS SNI field?
    context: This question looks for attempts to bypass DNS-based security controls. Legitimate package managers almost always resolve a domain name. A direct-to-IP connection is highly suspicious and is a common tactic used by malware to connect to a C2 server.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points, DNS resolvers, developer and build server subnets.
    range: last 90 days
    queries:
      - pseudocode: |-
          SEARCH conn.log for connections with no preceding DNS query
          SEARCH http.log/ssl.log where Host/SNI is an IP address
          IF source_process is package_manager:
            ALERT(high, "Direct-to-IP connection from package manager")
  - question: Has a dependency been downloaded from a rare domain/ASN or using a rare User-Agent string?
    context: This question uses rarity analysis to identify suspicious download sources. Most legitimate packages come from a small set of well-known repositories (e.g., pypi.org). A download from an obscure domain or ASN, or with a non-standard User-Agent, is a red flag for a potentially malicious source.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points, DNS resolvers, developer and build server subnets.
    range: last 90 days
    queries:
      - pseudocode: |-
          CALCULATE frequency of domains, ASNs, and User-Agents for package downloads
          IF domain/ASN is in bottom 1st percentile OR User-Agent prevalence < 0.5%:
            ALERT(medium, "Dependency downloaded from rare source or with rare User-Agent")
  - question: Does unsupervised clustering of network connection metadata reveal any anomalous clusters or noise points related to package downloads?
    context: This question uses clustering algorithms (e.g., DBSCAN) to automatically group network connections into 'normal' and 'abnormal' categories based on features like port, duration, and bytes transferred. Connections that don't fit into large, well-defined clusters of legitimate repository traffic are flagged as suspicious noise.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points, DNS resolvers, developer and build server subnets.
    range: last 90 days
    queries:
      - pseudocode: |-
          CLUSTER network connections using DBSCAN on features (port, bytes, duration, country, ASN)
          IF connection from dev_system is classified as noise or is in a small, anomalous cluster:
            ALERT(low, "Anomalous network cluster detected for package download")
  - question: Has any process spawned during a package installation been observed creating a known persistence mechanism?
    context: This question looks for high-confidence indicators of malicious behavior after an installation. A compromised dependency attempting to create a scheduled task (T1053.005), new service (T1543.003), or Run key modification (T1547.001) is a clear sign that it is establishing persistence on the host.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Windows Event ID 7045
      - Domain controllers (for GPO changes), developer workstations, build servers.
    range: last 90 days
    queries:
      - pseudocode: |-
          IF process_parent is package_manager AND process creates scheduled_task (EID 4698) OR new_service (EID 7045) OR modifies_run_key (EID 4657):
            ALERT(high, "Persistence mechanism created by package install process")
  - question: Has a development tool process accessed an anomalous number of files or accessed highly sensitive user directories for the first time?
    context: This question establishes a behavioral baseline for file access by development tools. A sudden deviation from this baseline, such as a build process reading from SSH key folders (~/.ssh), cloud credential files (~/.aws), or browser credential stores, is a strong indicator of credential or data theft.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Developer workstations, build servers, file servers hosting sensitive data.
    range: last 90 days
    queries:
      - pseudocode: |-
          BASELINE normal file access paths/counts for development processes
          IF file_access_count > 99th_percentile OR access_path is in sensitive_dir_list AND is first_time_access:
            ALERT(high, "Dev tool process accessed sensitive user files anomalously")
  - question: Can a graph-based event correlation engine identify a suspicious causal chain of events originating from a package installation?
    context: This question uses an advanced ML approach to connect disparate events into a single narrative or attack story. It can link a package installation to an obfuscated script execution to a suspicious outbound connection, revealing the entire attack chain which might be missed when looking at events in isolation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 5156
      - Zeek conn.log
      - Developer workstations, build servers.
    range: last 90 days
    queries:
      - pseudocode: |-
          MODEL events (install, process, network, registry) as a temporal graph
          USE Graph Neural Network (GNN) to learn normal patterns
          IF subgraph represents a suspicious causal chain (e.g., install -> obfuscated_script -> outbound_conn_to_new_ip):
            ALERT(medium, "Suspicious causal chain originating from package install detected")