name: T1609: Container Administration Command
id: f8a1b2c3-d4e5-4f6a-b7c8-d9e0f1a2b3c4
description: 'This playbook helps investigate whether an adversary is executing commands via container administration services. It focuses on detecting suspicious network connections to container APIs (e.g., from threat intelligence IPs), the creation of containers from known malicious images, and the execution of commands within containers (`docker exec`, `kubectl exec`) that suggest reconnaissance or credential access. The playbook also looks for attempts to weaken container isolation by creating privileged containers or mounting sensitive host directories. Additionally, it aims to identify anomalous behavior such as the use of container tools by new or unauthorized users, unusual traffic volumes to container APIs, and rapid sequences of diverse commands that deviate from automated patterns.'
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are network connections to container APIs originating from known malicious IP addresses, or are containers being created from known malicious images?
    context: This question aims to detect initial access or execution attempts using two common high-fidelity indicators. Correlating network traffic against threat intelligence feeds can quickly identify connections from known adversaries. Simultaneously, checking container images against a deny-list prevents the execution of pre-compromised or malicious container workloads, which is a key vector for establishing persistence or executing payloads.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Container orchestration control plane nodes (e.g., Kubernetes masters)
      - Perimeter firewalls
      - Cloud provider flow logs
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs WHERE dest_port IN (2375, 2376, 6443, 10250) | JOIN threat_intel_feed ON src_ip. SEARCH process_creation_logs OR k8s_audit_logs WHERE event contains 'docker run' OR 'kubectl run' | JOIN malicious_image_list ON image_digest.
  - question: Are there inbound connections to container API ports from new or statistically rare autonomous systems (ASNs) or geolocations?
    context: This question helps identify potentially malicious connections from unexpected network locations. Adversaries may use compromised infrastructure in novel geographical regions or ASNs. By baselining normal connection patterns, this statistical approach can flag outliers that may represent scanning activity or targeted attacks from unusual sources, even if the specific IP is not yet on a threat intelligence list.
    answer_sources:
      - Zeek conn.log
      - Container orchestration control plane nodes (e.g., Kubernetes masters)
      - Perimeter firewalls
      - Cloud provider flow logs
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs WHERE dest_port IN (container_api_ports) | ENRICH src_ip with ASN, geo_location | BASELINE over 30 days for source ASN and country | ALERT if new connection's ASN or country is new or its frequency is below 1st percentile.
  - question: Can a machine learning model identify malicious network connections to container APIs based on connection features?
    context: This question leverages machine learning to build a more nuanced detection model than simple rule-based or statistical methods. By training a classifier on a variety of features (e.g., duration, bytes transferred, CTI match, statistical rarity), the model can learn complex patterns that distinguish malicious from benign traffic. This is useful for detecting novel or sophisticated attacks that might not trigger simpler alerts.
    answer_sources:
      - Zeek conn.log
      - Container orchestration control plane nodes (e.g., Kubernetes masters)
      - Perimeter firewalls
      - Cloud provider flow logs
    range: last 90 days
    queries:
      - pseudocode: TRAIN a Random Forest model on enriched network logs for container APIs | PREDICT probability of maliciousness for new connections | ALERT if probability > 0.8.
  - question: Are `docker exec` or `kubectl exec` commands being used to run suspicious commands indicative of reverse shells, credential access, or reconnaissance?
    context: This question targets the direct abuse of container execution commands to interact with a compromised environment. Adversaries often use `exec` to gain a shell, steal secrets, or gather information about the container and host system. Monitoring for specific command patterns associated with these malicious activities provides a high-fidelity way to detect post-exploitation behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts (e.g., Docker daemons, Kubelets)
      - CI/CD runners
      - Jump servers with container tooling installed
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE process_name IN ('docker', 'kubectl') AND command_line CONTAINS 'exec' | APPLY regex for reverse shells, credential access, recon commands to arguments | ALERT on match.
  - question: Is a user's `exec` command activity showing an unusually high level of entropy, suggesting a shift from automated to interactive commands?
    context: This question aims to detect a change in user behavior from predictable, automated tasks to unpredictable, interactive exploration. Automated processes typically issue repetitive commands, resulting in low command string entropy. An adversary performing manual reconnaissance or interaction will use a wider variety of commands, causing a spike in entropy. This statistical anomaly can signal that a user account or automated system has been compromised.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts (e.g., Docker daemons, Kubelets)
      - CI/CD runners
      - Jump servers with container tooling installed
    range: last 90 days
    queries:
      - pseudocode: For each user, BASELINE Shannon entropy of 'exec' command strings per hour over 30 days | For each new 'exec' command, calculate hourly entropy | ALERT if entropy exceeds 95th percentile of user's baseline.
  - question: Can a machine learning model classify `exec` command-line arguments as benign or malicious, or detect anomalous command sequences?
    context: This question applies advanced machine learning techniques to understand the intent behind `exec` commands. An NLP model can learn the linguistic patterns of malicious commands, while a sequence-based autoencoder can learn the normal 'rhythm' of a user's command sequences. Both methods can detect novel malicious commands or anomalous sequences that might be missed by simple pattern matching, providing a powerful defense against sophisticated adversaries.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts (e.g., Docker daemons, Kubelets)
      - CI/CD runners
      - Jump servers with container tooling installed
    range: last 90 days
    queries:
      - pseudocode: TRAIN NLP model on benign and malicious 'exec' commands OR TRAIN autoencoder on benign user command sequences | CLASSIFY new commands OR check reconstruction error for new command sequences | ALERT on 'malicious' classification or high reconstruction error.
  - question: Are containers being created with insecure configurations that disable or weaken container isolation, such as privileged mode or sensitive host path mounts?
    context: This question seeks to identify attempts to break out of container isolation or gain privileged access to the host system. Configurations like `--privileged`, `hostPID: true`, or mounting `/var/run/docker.sock` are powerful but dangerous, effectively giving the container root-level access to the host. Detecting the use of these configurations is critical for preventing container escape and host compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Linux auditd logs
      - CI/CD pipeline servers
      - Kubernetes API Servers
      - Container hosts
      - Git repositories containing Kubernetes manifests
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs OR k8s_audit_logs for container creation events | PARSE command-line arguments or manifest for forbidden configurations (e.g., '--privileged', 'hostPID: true', mounting sensitive host paths) | ALERT on match.
  - question: Is an unauthorized user attempting to create a privileged container, or is an authorized user doing so at an anomalous rate?
    context: This question adds context to the detection of insecure container configurations. By maintaining an allow-list of accounts authorized for such operations, it can immediately flag unauthorized use. For authorized users, it establishes a baseline of normal behavior and flags unusual spikes in activity, which could indicate a compromised account or a misconfigured automated system.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Linux auditd logs
      - CI/CD pipeline servers
      - Kubernetes API Servers
      - Container hosts
      - Git repositories containing Kubernetes manifests
    range: last 90 days
    queries:
      - pseudocode: MAINTAIN allow-list of users for privileged operations. ALERT if user not on list uses privileged flag. For allowed users, BASELINE usage frequency over 90 days. ALERT if 24-hour usage > 3 standard deviations above mean.
  - question: Can an unsupervised machine learning model identify anomalous container creation events based on the combination of user, image, and security configurations?
    context: This question uses clustering to find unusual and potentially malicious container creation events that don't fit normal patterns. An adversary might use a non-standard combination of parameters, such as an interactive user account creating a privileged container from a new or unusual image. An unsupervised model like DBSCAN can automatically group common, benign events together and isolate these rare, outlier combinations for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Linux auditd logs
      - CI/CD pipeline servers
      - Kubernetes API Servers
      - Container hosts
      - Git repositories containing Kubernetes manifests
    range: last 90 days
    queries:
      - pseudocode: VECTORIZE container creation events (user, image, security flags) | APPLY DBSCAN clustering algorithm | FLAG small clusters and outliers for review.
  - question: Has a container administration tool like `docker` or `kubectl` been executed by a user for the first time?
    context: This question is based on the premise that the set of users who legitimately need to use container administration tools is relatively stable. The first-time execution of `docker` or `kubectl` by any user account is a noteworthy event that could indicate a compromised account being used to explore or manipulate the container environment. This simple 'first seen' rule is an effective way to detect lateral movement or privilege escalation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts
      - All user workstations
      - Production servers
      - Domain Controllers (for user account context)
    range: last 90 days
    queries:
      - pseudocode: MAINTAIN a list of users seen executing 'docker' or 'kubectl' in the last 90 days | SEARCH process_creation_logs for 'docker' or 'kubectl' executions | ALERT if executing user is not on the 'ever seen' list.
  - question: Is an authorized user executing container administration commands at a time of day or day of week that is statistically rare for them?
    context: This question aims to detect compromised accounts by identifying deviations from established user behavior patterns. Most users have a regular work schedule. A legitimate user's account being used to run `kubectl` commands at 3 AM on a Sunday is highly anomalous and suspicious. By baselining each user's activity by time, this method can flag activity that, while performed by an authorized account, occurs at a very unusual time.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts
      - All user workstations
      - Production servers
      - Domain Controllers (for user account context)
    range: last 90 days
    queries:
      - pseudocode: For each authorized user, PROFILE command activity by hour and day of week over 30 days | For each new command, calculate rarity of the time slot | ALERT if time slot is in the bottom 1% of activity for that user.
  - question: Can a machine learning model detect anomalous container administration command executions by learning a 'normal' behavioral boundary for each user?
    context: This question uses a more sophisticated anomaly detection approach to model user behavior across multiple dimensions simultaneously (e.g., source host, time of day). A one-class SVM creates a profile of what is 'normal' for a user. Any activity that falls outside this learned boundary, even if no single feature is itself a major outlier, is flagged as anomalous. This can detect complex deviations indicative of an account takeover.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts
      - All user workstations
      - Production servers
      - Domain Controllers (for user account context)
    range: last 90 days
    queries:
      - pseudocode: For each authorized user, TRAIN a one-class SVM model on features of their command executions (source host, time) | For each new execution, check if it falls outside the learned boundary | ALERT if classified as an anomaly.
  - question: Are there network connections to container administration API ports from unauthorized network subnets?
    context: This question enforces network access control policies for sensitive container APIs. These APIs should only be accessible from a limited set of trusted locations, such as CI/CD servers or administrator workstations. Any connection attempt from an unauthorized network segment is a security violation and could indicate reconnaissance or an attempted attack from a compromised machine on a different network segment.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Network segments hosting container infrastructure
      - Cloud provider network gateways
      - Internal network switches and routers
    range: last 90 days
    queries:
      - pseudocode: DEFINE a list of authorized source subnets | SEARCH network_logs WHERE dest_port IN (container_api_ports) | ALERT if source_ip is NOT in the authorized subnets list.
  - question: Is the number of unique source IPs connecting to container APIs per hour significantly higher than the established baseline?
    context: This question is designed to detect distributed scanning or access attempts against container APIs. A sudden, sharp increase in the number of unique source IPs connecting to these ports is a strong indicator of a coordinated effort to find and exploit exposed APIs. By comparing the hourly count against a historical baseline, this method can automatically detect such distributed activity.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Network segments hosting container infrastructure
      - Cloud provider network gateways
      - Internal network switches and routers
    range: last 90 days
    queries:
      - pseudocode: From network_logs, BASELINE the count of distinct source IPs connecting to container APIs per hour over 30 days | ALERT if the count in any hour exceeds 3 standard deviations above the hourly mean.
  - question: Can an unsupervised machine learning model identify anomalous network connections to container APIs based on their combined characteristics?
    context: This question uses an anomaly detection algorithm, Isolation Forest, to find connections that are outliers across multiple dimensions. A connection might not be anomalous in terms of its duration or data volume alone, but its specific combination of duration, data volume, and source IP rarity might be highly unusual. This technique is effective at finding subtle anomalies that could represent sophisticated scanning or data exfiltration attempts through the API.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Network segments hosting container infrastructure
      - Cloud provider network gateways
      - Internal network switches and routers
    range: last 90 days
    queries:
      - pseudocode: APPLY Isolation Forest algorithm to network logs for container APIs using features like duration, bytes, packets, and source IP rarity | ASSIGN an anomaly score to each connection | ALERT on high anomaly scores.
  - question: Is a single user or host executing a high number of unique `docker` or `kubectl` commands within a short time frame?
    context: This question aims to differentiate between normal, single-command operations and interactive, exploratory behavior. A user or script performing reconnaissance will often issue a rapid series of different commands (`ps`, `logs`, `exec`, `cp`, etc.) to understand the environment. A simple threshold rule that counts the number of unique commands within a time window can effectively detect this type of scripted or manual exploration.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Developer workstations with container tools
      - CI/CD runners
      - Shared administration servers
    range: last 90 days
    queries:
      - pseudocode: For each source host or user, COUNT unique 'docker' or 'kubectl' commands within a 10-minute window | ALERT if count > 20.
  - question: Is a user exhibiting a simultaneous spike in both the volume and complexity (entropy) of their container administration commands?
    context: This question provides a more robust statistical method for detecting a shift to interactive behavior. It combines two metrics command volume and command entropy. An adversary's activity is likely to be both more frequent (high volume) and more varied (high entropy) than normal automated tasks. Alerting only when both metrics exceed a high percentile of their respective baselines reduces false positives and provides a stronger signal of potentially malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Developer workstations with container tools
      - CI/CD runners
      - Shared administration servers
    range: last 90 days
    queries:
      - pseudocode: For each user, BASELINE command count and command string entropy in 5-minute windows over 90 days | ALERT if both metrics simultaneously exceed the 98th percentile of their baselines.
  - question: Can a change point detection algorithm automatically detect a shift from normal to malicious command execution frequency for a user?
    context: This question applies a time-series analysis technique to automatically detect a persistent change in a user's command frequency. Unlike a simple threshold, a change point detection algorithm looks for a statistically significant shift in the underlying process generating the data. This is effective for identifying the moment a user's behavior changes, such as when an account is compromised and an attacker begins their activity, without needing to pre-define static thresholds.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Developer workstations with container tools
      - CI/CD runners
      - Shared administration servers
    range: last 90 days
    queries:
      - pseudocode: APPLY a change point detection algorithm (e.g., CUSUM) to the time series of command counts per user per minute | The algorithm will automatically signal an alert when a statistically significant shift is detected.