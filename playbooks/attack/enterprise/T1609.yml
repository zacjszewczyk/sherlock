name: T1609: Container Administration Command
id: f9a6b3d0-1c7e-4b8a-9d2f-0c5e6a4b3c2d
description: This playbook focuses on detecting adversaries executing commands via container administration tools like Docker and Kubernetes. Adversarial activity may involve connecting to container APIs from malicious IPs, running malicious container images, executing commands within containers to perform reconnaissance or access sensitive data, creating containers with weakened security settings to enable escape, or exhibiting anomalous usage patterns such as first-time use of tools by an account or a sudden burst of complex commands. The goal is to identify these behaviors across network, process, and audit logs.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are network connections to container APIs or container creation commands associated with known malicious indicators?
    context: This question seeks to identify direct evidence of compromise by cross-referencing network traffic and container creation events against threat intelligence. A match on a malicious IP connecting to a container API (like Docker's or Kubernetes') or the use of a known malicious container image is a high-fidelity indicator that an adversary is attempting to establish a foothold or execute commands within the container environment.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Container orchestration control plane nodes (e.g., Kubernetes masters)
      - Perimeter firewalls
      - Cloud provider flow logs
    range: last 90 days
    queries:
      - "Pseudocode: JOIN network_logs ON (dest_port IN [2375, 2376, 6443, 10250]) WITH threat_intel_ips ON (source_ip); SEARCH process_creation_logs for (process_name IN ['docker', 'kubectl'] AND command_line CONTAINS 'run') AND JOIN command_line_image WITH malicious_image_list."
  - question: Are there unusual or rare network connections to container APIs from new or infrequent geographical locations or networks?
    context: This question aims to detect anomalous access patterns that deviate from established norms. By baselining the typical source Autonomous Systems (ASNs) and countries connecting to container APIs, we can flag connections from novel or statistically rare sources. Such an event could indicate an external adversary attempting to access the container control plane for the first time.
    answer_sources:
      - Zeek conn.log
      - Container orchestration control plane nodes (e.g., Kubernetes masters)
      - Perimeter firewalls
      - Cloud provider flow logs
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE source_asn, source_country FROM network_logs WHERE dest_port IN [2375, 2376, 6443, 10250] FOR 30_days; ALERT ON new_connection WHERE new_connection.source_asn OR new_connection.source_country IS_NEW OR IS_RARE (frequency < 1st_percentile)."
  - question: Can we predict if a network connection to a container API is malicious based on its combined characteristics?
    context: This question uses a machine learning model to provide a probabilistic assessment of risk for each connection. By training a model on various features like duration, data volume, protocol, and threat intelligence matches, we can identify complex patterns that are indicative of malicious activity but might not be caught by simple symbolic or statistical rules. A high probability score suggests a connection is highly likely to be malicious.
    answer_sources:
      - Zeek conn.log
      - Container orchestration control plane nodes (e.g., Kubernetes masters)
      - Perimeter firewalls
      - Cloud provider flow logs
    range: last 90 days
    queries:
      - "Pseudocode: PREDICT is_malicious USING trained_random_forest_model ON enriched_network_logs (features: duration, bytes, protocol, cti_match, ip_rarity, asn_rarity); ALERT WHERE prediction_probability > 0.8."
  - question: Are `docker exec` or `kubectl exec` commands being used to run suspicious commands indicative of interactive shells, credential theft, or reconnaissance?
    context: This question focuses on detecting the malicious use of 'exec' commands, which allow users to run commands inside running containers. We look for specific command patterns associated with adversary tradecraft, such as spawning a reverse shell, accessing sensitive files like `/etc/shadow`, or running basic discovery commands. A match provides strong evidence of an adversary's post-exploitation activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts (e.g., Docker daemons, Kubelets)
      - CI/CD runners
      - Jump servers with container tooling installed
    range: last 90 days
    queries:
      - "Pseudocode: SEARCH process_creation_logs FOR (command_line CONTAINS 'docker exec' OR 'kubectl exec') AND command_arguments MATCHES regex_list (e.g., '/bin/bash -i', 'cat /etc/shadow', 'whoami')."
  - question: Is a user's `exec` command activity becoming more random or unpredictable, suggesting a shift from automated to interactive use?
    context: This question aims to identify a change in user behavior. Automated or scripted tasks typically use repetitive, predictable commands. In contrast, an interactive session by an attacker involves a series of unique, exploratory commands. By measuring the Shannon entropy (a measure of randomness) of a user's commands, we can detect a statistical shift towards this unpredictable, high-entropy behavior, which may indicate a compromised account.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts (e.g., Docker daemons, Kubelets)
      - CI/CD runners
      - Jump servers with container tooling installed
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE shannon_entropy_per_hour(user, exec_commands) FOR 30_days; ALERT ON new_exec_command WHERE hourly_entropy > 95th_percentile of user_baseline."
  - question: Can we classify `exec` commands as malicious or benign based on their content and sequence?
    context: This question leverages machine learning to understand the intent behind `exec` commands. An NLP model can be trained to distinguish the language of malicious commands from benign ones. Alternatively, a sequence-based model can learn a user's normal command workflow and flag any new sequence of commands that deviates significantly, indicating anomalous and potentially malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts (e.g., Docker daemons, Kubelets)
      - CI/CD runners
      - Jump servers with container tooling installed
    range: last 90 days
    queries:
      - "Pseudocode: PREDICT is_malicious USING trained_nlp_model ON exec_command_text; OR, PREDICT anomaly_score USING trained_autoencoder_model ON user_command_sequence; ALERT on high score."
  - question: Are containers being created with insecure configurations that disable or weaken container isolation?
    context: This question looks for the creation of containers with dangerous settings that could lead to container escape or host compromise. Specific flags like '--privileged', 'hostPID: true', or mounting sensitive host directories (e.g., '/', '/etc') are direct violations of security best practices. Detecting these configurations is critical as they provide a clear path for an adversary to escalate privileges from a container to the underlying host.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Linux auditd logs
      - CI/CD pipeline servers
      - Kubernetes API Servers
      - Container hosts
      - Git repositories containing Kubernetes manifests
    range: last 90 days
    queries:
      - "Pseudocode: SEARCH container_creation_logs FOR command_line OR manifest_content CONTAINS ('--privileged', 'hostPID: true', 'hostNetwork: true', 'volumeMounts: /etc', etc.)."
  - question: Are privileged container configurations being used by unauthorized accounts or at an anomalous rate by authorized accounts?
    context: This question provides a more nuanced approach to detecting insecure container creation. It first checks if the user creating a privileged container is on a pre-approved allow-list. If not, it's an immediate alert. If the user is authorized, it then checks if their current rate of using these flags is statistically unusual compared to their own history. This helps distinguish legitimate, albeit rare, administrative tasks from a potential abuse of privileges.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Linux auditd logs
      - CI/CD pipeline servers
      - Kubernetes API Servers
      - Container hosts
      - Git repositories containing Kubernetes manifests
    range: last 90 days
    queries:
      - "Pseudocode: ALERT IF user NOT IN privileged_user_allow_list AND uses_privileged_flag; ELSE, BASELINE privileged_flag_usage_rate for user; ALERT IF current_rate > (mean + 3 * stdev) of user_baseline."
  - question: Can we identify anomalous container creation events by finding rare combinations of user, image, and security settings?
    context: This question uses unsupervised machine learning to find outliers in container creation activity. The model clusters events based on who created the container, what image was used, and what security settings were applied. Small clusters or points that don't fit into any cluster are flagged as anomalies. This can uncover suspicious activity, such as a developer's interactive account suddenly creating a container from an unfamiliar image with privileged access.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Kubernetes Audit Logs
      - Linux auditd logs
      - CI/CD pipeline servers
      - Kubernetes API Servers
      - Container hosts
      - Git repositories containing Kubernetes manifests
    range: last 90 days
    queries:
      - "Pseudocode: CLUSTER container_creation_events using DBSCAN on features (user, image, security_flags); ALERT on events classified as noise/outliers."
  - question: Is a user running a container administration command like `docker` or `kubectl` for the very first time?
    context: This question is based on the premise that the set of users who manage containers is typically static and well-known. When a user account executes a container administration command for the first time in a significant period (e.g., 90 days), it is a noteworthy event. It could indicate a compromised account being used to explore or manipulate the container environment, warranting an investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts
      - All user workstations
      - Production servers
      - Domain Controllers (for user account context)
    range: last 90 days
    queries:
      - "Pseudocode: MAINTAIN list of users seen running ('docker', 'kubectl') in last 90 days; ALERT on new process_creation_event WHERE process_name IN ('docker', 'kubectl') and user NOT IN seen_user_list."
  - question: Is an authorized user executing container administration commands at an unusual time of day or day of the week?
    context: This question aims to detect anomalous behavior even from authorized users. By building a profile of each user's normal working hours, we can flag command executions that occur at highly unusual times, such as 3 AM on a Sunday. Such an event could signify that the user's account has been compromised and is being used by an attacker operating in a different time zone or during off-hours to avoid detection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts
      - All user workstations
      - Production servers
      - Domain Controllers (for user account context)
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE user_activity_by_hour_and_day FOR 30_days; ALERT on new_command_execution IF execution_timeslot_frequency < 1st_percentile of user_baseline."
  - question: Does a user's container command execution deviate from their established multi-dimensional pattern of normal behavior?
    context: This question uses machine learning to create a more holistic model of 'normal' for each user, considering multiple factors at once (e.g., source machine, time of day). A one-class SVM learns the boundary of this normal behavior. Any new command execution that falls outside this boundary is flagged as an anomaly. This is more powerful than single-variable statistical checks as it can detect suspicious combinations of otherwise normal-looking features.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Container hosts
      - All user workstations
      - Production servers
      - Domain Controllers (for user account context)
    range: last 90 days
    queries:
      - "Pseudocode: PREDICT anomaly_score USING trained_one_class_svm_model for user on features (source_host, time_of_day, etc.); ALERT if new_execution is classified as an outlier."
  - question: Are there network connections to container administration ports from unauthorized network segments?
    context: This question implements a basic network access control check. Container APIs should only be accessible from a limited, well-defined set of source locations, such as administrator workstations or CI/CD servers. Any connection attempt from an unauthorized source IP or subnet is a direct policy violation and a strong indicator of either a misconfiguration or an attempt at unauthorized access.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Network segments hosting container infrastructure
      - Cloud provider network gateways
      - Internal network switches and routers
    range: last 90 days
    queries:
      - "Pseudocode: SEARCH network_logs WHERE dest_port IN [2375, 2376, 6443, 10250, 10255] AND source_subnet NOT IN authorized_subnet_list."
  - question: Is there a sudden spike in the number of unique source IPs connecting to container APIs?
    context: This question seeks to detect distributed scanning or access attempts against container APIs. A sudden, statistically significant increase in the number of distinct source IPs connecting within a short time frame (e.g., an hour) compared to the historical baseline is anomalous. This pattern is not typical for normal administrative access and strongly suggests a coordinated effort to find or exploit exposed container control planes.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Network segments hosting container infrastructure
      - Cloud provider network gateways
      - Internal network switches and routers
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE hourly_distinct_source_ip_count to container_api_ports FOR 30_days; ALERT IF current_hourly_count > (mean + 3 * stdev) of baseline."
  - question: Can we identify anomalous network sessions to container APIs based on their combined connection properties?
    context: This question uses an unsupervised anomaly detection model (Isolation Forest) to find unusual network connections. The model can identify connections that are outliers based on a combination of features like duration, bytes transferred, and source IP rarity. This can detect subtle anomalies that might not trigger volume-based statistical alerts, such as a slow, low-data exfiltration attempt or a scanning technique that uses non-standard connection patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Network segments hosting container infrastructure
      - Cloud provider network gateways
      - Internal network switches and routers
    range: last 90 days
    queries:
      - "Pseudocode: PREDICT anomaly_score USING trained_isolation_forest_model on features (duration, bytes, pkts, ip_rarity); ALERT on high anomaly scores."
  - question: Is a single user or host executing an unusually high number of unique container commands in a short time frame?
    context: This question aims to detect interactive, exploratory behavior by setting a simple threshold. Automated processes typically run a small set of commands repeatedly, while a human or a script exploring the environment will run many different commands (`ps`, `logs`, `exec`, `cp`, etc.) in quick succession. A rule that alerts on a high count of unique commands within a 10-minute window can effectively distinguish this exploratory activity from normal operations.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Developer workstations with container tools
      - CI/CD runners
      - Shared administration servers
    range: last 90 days
    queries:
      - "Pseudocode: ALERT IF count(distinct container_commands) by user/host in 10_minutes > 20."
  - question: Is a user exhibiting a simultaneous spike in both the volume and complexity of their container administration commands?
    context: This question combines two statistical measures to increase detection fidelity. It looks for a simultaneous spike in both the raw number of commands and the Shannon entropy (randomness) of those commands. An alert that requires both metrics to be abnormally high is less likely to be a false positive, as it points specifically to a burst of complex, non-repetitive activity, which is a strong signal of manual, interactive compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Developer workstations with container tools
      - CI/CD runners
      - Shared administration servers
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE command_count and command_entropy per 5_minutes for each user; ALERT IF current_count > 98th_percentile AND current_entropy > 98th_percentile."
  - question: Has there been a statistically significant and persistent change in a user's command execution frequency?
    context: This question uses a change point detection algorithm to automatically identify shifts in behavior. The model learns a user's normal baseline of command frequency. It will then signal an alert when it detects a sustained change from this baseline, indicating a new state of activity. This is effective for detecting the start of a malicious session, where an attacker's activity level will be persistently different from the legitimate user's.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Linux auditd logs
      - Developer workstations with container tools
      - CI/CD runners
      - Shared administration servers
    range: last 90 days
    queries:
      - "Pseudocode: DETECT change_point in time_series of user_command_count_per_minute using CUSUM algorithm; ALERT on detected change point."