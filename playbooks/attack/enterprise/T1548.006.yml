name: T1548.006: TCC Manipulation
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the manipulation of macOS's Transparency, Consent, and Control (TCC) framework, a critical component for managing application permissions. Adversaries exploit TCC to escalate privileges or evade defenses by illegitimately granting sensitive permissions (like Full Disk Access, Screen Capture, or Accessibility) to malicious software. Investigative questions focus on detecting unauthorized writes to the TCC.db database by non-standard processes, direct manipulation using tools like `sqlite3`, the spawning of untrusted child processes from applications with high privileges, and suspicious permission grant sequences that lack user approval. The playbook also covers the abuse of legitimately-granted permissions for malicious activities such as data exfiltration, command-and-control beaconing, or widespread file access following a recent permission grant.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an unapproved process written to the macOS TCC.db database?
  context: The TCC.db database stores application permissions. Writes to this database are typically handled by a very small set of legitimate system processes (e.g., `tccd`) or approved MDM agents. A write operation from any other process is highly suspicious and could indicate an attempt to programmatically grant itself permissions to escalate privileges or bypass security controls. This question helps identify such unauthorized modifications by comparing the writing process against a known-good watchlist.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_write_events WHERE target_file_path ENDS WITH "TCC.db" AND source_process_name NOT IN (approved_process_watchlist) | RETURN source_process_name, host_name, timestamp
- question: Has a historically infrequent or new process written to the TCC.db database?
  context: Legitimate processes that interact with TCC.db do so with some regularity. A process writing to this database for the first time on a system or across the entire environment is a statistical anomaly. This question aims to detect zero-frequency anomalies by baselining all processes that write to TCC.db and alerting on any new process performing this action. This can catch novel malware or tools not on a predefined watchlist.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE process_writes_to_tcc_db over last 30 days | SEARCH file_write_events WHERE target_file_path ENDS WITH "TCC.db" | DETECT process if source_process_name is not in baseline | ALERT on anomaly
- question: Does a TCC.db write event exhibit anomalous characteristics compared to known-good behavior?
  context: Malicious modifications to TCC.db may differ subtly from benign ones in terms of process ancestry, code signing information, or process path. This question uses a machine learning model (like a one-class SVM or isolation forest) trained on legitimate TCC.db write events to identify outliers. The model can detect complex patterns of abnormality that rule-based or simple statistical methods might miss.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: STREAM file_write_events WHERE target_file_path ENDS WITH "TCC.db" | EXTRACT features (process_name, parent_process, path, code_signature) | SCORE event with anomaly_detection_model | ALERT if score > threshold
- question: Has the `sqlite3` command-line utility been used to directly modify the TCC.db database?
  context: The `sqlite3` utility allows for direct, command-line interaction with SQLite databases like TCC.db. Legitimate system operations do not use this utility to manage permissions. Its use to target TCC.db is a very strong indicator of an adversary attempting to manually or programmatically insert, delete, or modify permission entries to escalate privileges.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process command-line argument logs
  - Endpoint process execution logs from all macOS devices in the enterprise.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_execution_events WHERE process_name = "sqlite3" AND command_line CONTAINS "TCC.db" | ALERT on any match
- question: Was `sqlite3` launched by a statistically rare parent process to interact with TCC.db?
  context: While any `sqlite3` use against TCC.db is suspicious, understanding its parent process provides additional context. An adversary might execute it from a script, a reverse shell, or another compromised application. This question aims to identify anomalous parent-child relationships by baselining `sqlite3` executions. An execution spawned by an unusual parent (e.g., a web browser) is a high-confidence indicator of malicious activity.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process command-line argument logs
  - Endpoint process execution logs from all macOS devices in the enterprise.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE parent_process for all "sqlite3" executions | SEARCH process_execution_events WHERE process_name = "sqlite3" AND command_line CONTAINS "TCC.db" | CALCULATE parent_process_rarity | ALERT if parent_process is in lowest 1st percentile
- question: Has there been an anomalous spike in `sqlite3` executions targeting TCC.db across the environment?
  context: A widespread attack campaign might involve deploying a script or tool that modifies TCC.db on many machines simultaneously. This would result in a sudden increase in `sqlite3` executions targeting TCC.db across the fleet. This question uses a time-series anomaly detection model to monitor the aggregate count of these events, flagging any sharp, unusual increase that could signify a coordinated attack.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process command-line argument logs
  - Endpoint process execution logs from all macOS devices in the enterprise.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: AGGREGATE hourly count of "sqlite3" executions targeting "TCC.db" across all hosts | INPUT time_series to anomaly_detection_model | ALERT on detected spikes
- question: Has a trusted process with Full Disk Access spawned an unsigned or untrusted child process that initiated a network connection?
  context: Adversaries can abuse the permissions of a trusted application (like Terminal or Finder) that already has Full Disk Access (FDA). By having the trusted application launch their malicious, unsigned code, they can inherit its permissions. If this newly spawned, untrusted process then makes an outbound network connection, it's a strong indicator of a defense evasion and privilege escalation technique used for C2 communication or data exfiltration.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process code signature logs
  - Zeek conn.log
  - Endpoint process and network event collectors on high-value macOS endpoints (developer, admin, server); network sensors at egress points.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE process_events and network_events | FIND parent_process in (FDA_approved_list) AND child_process_signature is (unsigned OR invalid) AND child_process initiates outbound_connection | ALERT on sequence
- question: Has a process with Full Disk Access spawned a child process that represents a new or statistically rare parent-child relationship?
  context: Legitimate applications with FDA typically spawn a predictable set of child processes. An adversary introducing a new tool or script will create a parent-child relationship that has not been seen before. This question seeks to identify these novel pairings by baselining all child processes spawned by FDA-privileged applications and alerting on any new or extremely rare relationships, especially if the child is unsigned.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process code signature logs
  - Zeek conn.log
  - Endpoint process and network event collectors on high-value macOS endpoints (developer, admin, server); network sensors at egress points.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE parent-child relationships where parent has FDA over 30 days | SEARCH for new process_spawn events where parent has FDA | ALERT if parent-child pair is not in baseline OR if child_process is now unsigned for a known pair
- question: Does process ancestry data reveal a suspicious graph of a trusted parent spawning an unsigned child that connects to a low-reputation IP?
  context: This question models process activity as a graph to detect complex attack chains. A subgraph representing a trusted, FDA-privileged process (node 1) spawning (edge) an unsigned child process (node 2) which then establishes a network connection (edge) to a low-reputation IP address (node 3) is a powerful, high-confidence indicator of abuse. Graph-based anomaly detection can automatically surface these malicious patterns.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process code signature logs
  - Zeek conn.log
  - Endpoint process and network event collectors on high-value macOS endpoints (developer, admin, server); network sensors at egress points.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: CONSTRUCT process_ancestry_graph with node attributes (FDA_status, signature, network_activity) | SCORE subgraphs for anomalous patterns | ALERT on subgraphs matching [Trusted Parent -> Unsigned Child -> Low-Reputation IP]
- question: Was a new application granted TCC permissions programmatically immediately after its first execution, without evidence of user approval?
  context: Legitimate TCC permission grants involve a user interacting with a macOS prompt, which generates specific events in the Unified Log. Adversaries may bypass this by having a script or dropper execute a new payload and then immediately use a separate process to directly INSERT its entry into TCC.db. This question looks for the suspicious sequence of first execution, a rapid TCC.db write, and the absence of a corresponding user approval log event.
  answer_sources:
  - macOS Unified Log
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint log collectors across all macOS devices, correlating file, process, and system log events.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: DETECT sequence: (1) first_execution of process X, (2) write to "TCC.db" with INSERT within 60s, (3) NO corresponding user_approval_event for process X in Unified Log | ALERT on sequence
- question: Was the time between an application's first execution and its TCC permission grant a statistical outlier?
  context: There is typically a variable, human-scale delay between an application's first run and a user granting it permissions via a pop-up. Programmatic, malicious grants often happen almost instantaneously. This question establishes a baseline for the time delta between first execution and permission grant for legitimate applications and alerts when a new grant occurs with a time delta that is a statistical outlier (e.g., in the lowest 1st percentile), suggesting automation rather than user interaction.
  answer_sources:
  - macOS Unified Log
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint log collectors across all macOS devices, correlating file, process, and system log events.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: For each new TCC grant, CALCULATE time_delta between first_execution and TCC.db_write | BASELINE distribution of time_deltas | ALERT if new grant's time_delta is in lowest 1st percentile
- question: Does a sequence of events (first execution, TCC.db write, network connection) match a trained model of a malicious permission grant?
  context: A common malicious pattern is for a new payload to execute, immediately gain permissions, and then connect to a C2 server. This question uses a sequence classification model (like an LSTM) trained to recognize this specific chain of events occurring within a short time frame. This allows for the detection of the entire attack behavior pattern rather than just individual events.
  answer_sources:
  - macOS Unified Log
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint log collectors across all macOS devices, correlating file, process, and system log events.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: STREAM event sequences (process_exec, file_write, network_conn) for each host | INPUT sequences to LSTM model | ALERT if sequence is classified as malicious (e.g., [First Exec -> TCC Write -> Net Conn] in < 5 mins)
- question: Has a process with sensitive TCC permissions connected to a known malicious IP address or domain?
  context: Processes with sensitive permissions (e.g., Screen Capture, Full Disk Access) are high-value targets for abuse. If such a process communicates with a destination on a threat intelligence list, it is a strong indication that its permissions are being leveraged for malicious purposes, such as command and control or data exfiltration. This is a high-fidelity alert that requires immediate investigation.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) process and network events
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek intel.log
  - Network sensors at internet egress points; DNS resolvers; endpoint network event collectors on all macOS devices.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: JOIN process_logs (with TCC permission data) with network_logs (with threat_intel matches) | ALERT where process_has_sensitive_perms AND destination_is_in_threat_intel_feed
- question: Has a process with sensitive TCC permissions exhibited anomalous network behavior, such as connecting to a new country or having low entropy destinations?
  context: Legitimate applications with TCC permissions usually have predictable network patterns. An adversary using this process for C2 will cause it to connect to new, unusual destinations. This question aims to detect such deviations by baselining normal network behavior (destination countries, ASNs) and alerting on connections to new locations. A sudden drop in destination IP entropy can also indicate a shift to a small, fixed set of C2 servers.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) process and network events
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek intel.log
  - Network sensors at internet egress points; DNS resolvers; endpoint network event collectors on all macOS devices.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE network behavior (dest_country, dest_asn, ja4s) for sensitive processes over 30 days | SEARCH for new connections from sensitive processes | ALERT if dest_country or dest_asn not in baseline OR if shannon_entropy of dest_ips drops significantly
- question: Does a network connection from a TCC-privileged process have features predictive of malicious activity?
  context: This question uses a supervised machine learning model to classify network connections from sensitive processes as benign or malicious. By training on features like connection duration, protocol, bytes transferred, and JA4S hash from known malicious and benign traffic, the model can learn to identify suspicious connections in real-time, even if the destination is not on a known threat list.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) process and network events
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek intel.log
  - Network sensors at internet egress points; DNS resolvers; endpoint network event collectors on all macOS devices.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: STREAM network connections from TCC-privileged processes | EXTRACT features (duration, protocol, bytes, ja4s_hash, process_name) | SCORE connection with trained_classifier_model | ALERT if predicted_class is "malicious"
- question: Has an application with screen capture or accessibility permissions spawned a network utility like `curl` or `wget`?
  context: Applications with screen capture or accessibility permissions (like Zoom or VNC) can access sensitive user data. Spawning a command-line network utility (`curl`, `wget`, `ncat`, `scp`) from such an application is a classic and highly suspicious pattern for exfiltrating captured data. This parent-child relationship is almost never legitimate and serves as a high-fidelity indicator of TCC permission abuse.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process command-line argument logs
  - Zeek conn.log
  - Endpoint process and network event collectors on macOS devices with collaboration software (e.g., Zoom, Slack, Teams) installed.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_spawn_events WHERE parent_process_has (screen_capture OR accessibility_perms) AND child_process_name IN ("curl", "wget", "ncat", "scp") | ALERT on any match
- question: Has an application with screen capture or accessibility permissions spawned a statistically rare child process?
  context: Beyond a small list of known network utilities, an attacker might use a custom or less common tool for exfiltration. This question broadens the detection by baselining all child processes spawned by applications with sensitive permissions. It alerts on any new or extremely infrequent parent-child pairing, which could indicate the use of a novel exfiltration tool.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process command-line argument logs
  - Zeek conn.log
  - Endpoint process and network event collectors on macOS devices with collaboration software (e.g., Zoom, Slack, Teams) installed.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE child processes for parents with sensitive perms over 30 days | SEARCH for new process_spawn events from these parents | ALERT if parent-child pair is not in baseline or is in lowest frequency percentile
- question: Does a process graph show an application with sensitive permissions spawning a network utility that connects to an external IP?
  context: This question uses a graph-based model to detect the full attack chain. The model identifies and scores subgraphs representing the pattern of a trusted application with screen capture/accessibility rights spawning a network utility, which in turn connects to an external, potentially untrusted IP address. This contextual view makes the detection highly robust and difficult to evade.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK
  - macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC
  - Process command-line argument logs
  - Zeek conn.log
  - Endpoint process and network event collectors on macOS devices with collaboration software (e.g., Zoom, Slack, Teams) installed.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: CONSTRUCT process_and_network_graph | SCORE subgraphs for anomalous patterns | ALERT on subgraphs matching [App with Sensitive Perms] -> spawns -> [Network Utility] -> connects_to -> [External IP]
- question: Is a process with microphone or camera access making repeated, simple network connections to a known malicious destination?
  context: An adversary who has compromised a process with camera or microphone access might use it to stream audio/video or send back small status updates. This question looks for the simplest form of C2: repeated, often incomplete, connections to a destination on a threat intelligence list. The presence of these simple connection states (like `S1`) without full TCP handshakes can be indicative of "fire-and-forget" C2 beacons.
  answer_sources:
  - Zeek conn.log
  - macOS Endpoint Security Framework (ESF) process and network events
  - Network traffic sensors at internet egress points; endpoint network event collectors on macOS devices.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH network_logs WHERE source_process_has (mic OR camera_perms) AND destination_ip IN (threat_intel_list) AND connection_state IN ("S1", "O/OTH") | ALERT on match
- question: Does a long-lived connection from a process with microphone/camera access show statistically regular timing and packet sizes, indicative of beaconing?
  context: Command-and-control (C2) beaconing is characterized by its regularity. Automated malware will send packets of a similar size at very regular intervals. This question analyzes long-lived network connections from sensitive processes and calculates the standard deviation of inter-packet arrival times and packet sizes. A very low standard deviation for both metrics is a strong statistical signal of automated, non-human communication, i.e., beaconing.
  answer_sources:
  - Zeek conn.log
  - macOS Endpoint Security Framework (ESF) process and network events
  - Network traffic sensors at internet egress points; endpoint network event collectors on macOS devices.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: For long_lived_connections from mic/camera_processes, CALCULATE std_dev(inter_packet_times) and std_dev(packet_sizes) | ALERT if both metrics are below a low threshold (e.g., 5th percentile)
- question: Does a time-series analysis of network traffic from a process with microphone/camera access reveal a strong, non-standard periodic component?
  context: This question applies a more advanced time-series model to detect beaconing. By decomposing the bytes-per-second traffic into trend, seasonal (periodic), and residual components, the model can identify strong periodic patterns. If the detected period does not match known, legitimate application keepalives, it is a strong indicator of a malicious C2 beacon.
  answer_sources:
  - Zeek conn.log
  - macOS Endpoint Security Framework (ESF) process and network events
  - Network traffic sensors at internet egress points; endpoint network event collectors on macOS devices.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: For connections from mic/camera_processes, MODEL bytes_per_second as a time-series | DECOMPOSE into trend, seasonal, and residual components | ALERT if a strong seasonal component with a non-standard frequency is detected
- question: Did a process, immediately after gaining Full Disk Access, rapidly read thousands of files, create a large archive, and then send a large amount of data outbound?
  context: This question looks for the full "smash and grab" exfiltration playbook. An adversary gains Full Disk Access (FDA), immediately uses it to enumerate and read files in sensitive user directories, stages them into a single compressed archive (e.g., a .zip file in `/tmp/`), and then exfiltrates the archive over the network. Detecting this specific sequence of events provides a very high-confidence alert of data theft.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) file and process events
  - Zeek conn.log
  - Zeek files.log
  - Endpoint collectors on high-value macOS workstations; network sensors monitoring file transfers and outbound connections at egress points.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: DETECT sequence for a single process: (1) FDA granted via TCC.db write, (2) >1000 file_reads in sensitive dirs within 5 mins, (3) large compressed file write to temp dir, (4) large outbound data transfer | ALERT on sequence
- question: Did a process exhibit an anomalously high rate of file read activity shortly after gaining Full Disk Access?
  context: The most immediate action after gaining FDA for data theft is mass file access. This question focuses on detecting that initial reconnaissance and collection phase. By monitoring the file read rate of a process in a sliding window immediately after it receives FDA, we can spot a statistical anomaly. A rate exceeding the 99th percentile of normal file system activity for that host or user is a strong indicator of malicious collection.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) file and process events
  - Zeek conn.log
  - Zeek files.log
  - Endpoint collectors on high-value macOS workstations; network sensors monitoring file transfers and outbound connections at egress points.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: TRIGGER monitoring on new FDA grant | CALCULATE 60-second sliding window average of file_read_events/sec for the process | ALERT if rate exceeds 99th percentile of host/user baseline
- question: Does a process's sequence of actions (gaining permissions, file enumeration, data staging, exfiltration) match a probabilistic model of an attack?
  context: This question uses a Hidden Markov Model (HMM) to understand the "state" of a process. The model is trained on normal behavior to understand legitimate state transitions. An attack sequence—transitioning from a normal state to `Gaining_Perms`, then `File_Enumeration`, `Data_Staging`, and finally `Exfiltration`—would have a very low probability under the model of normal behavior. This allows for the detection of the entire logical attack flow, even if the specific commands or timings vary.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) file and process events
  - Zeek conn.log
  - Zeek files.log
  - Endpoint collectors on high-value macOS workstations; network sensors monitoring file transfers and outbound connections at egress points.
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL process behavior as a sequence of states (e.g., Idle, Gaining_Perms, File_Enumeration, Exfiltration) using an HMM | SCORE observed event sequences for a process | ALERT if a sequence has a low probability and matches the attack state path