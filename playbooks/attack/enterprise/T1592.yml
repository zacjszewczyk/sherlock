name: 'T1592: Gather Victim Host Information'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: "This playbook helps to answer the question: Is an external adversary actively gathering information about our enterprise hosts? It provides investigative methods to detect various reconnaissance techniques, including external port and network scanning from known malicious IPs, the use of scanning tool signatures, anomalous User-Agent strings, and connections to known reconnaissance frameworks. It also covers detection of internal hosts potentially exfiltrating collected information and external actors probing for specific information disclosure vulnerabilities."
type: 'technique'
related:
  - 'TA0043: Reconnaissance'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags:
  - none
questions:
  - question: "Is a known malicious IP address attempting to connect to our network?"
    context: |
      This question aims to identify reconnaissance activity by leveraging Cyber Threat Intelligence (CTI). By ingesting lists of known scanners or malicious actors into a watchlist, we can create a high-fidelity rule that alerts when any of these known-bad IPs attempt to establish a connection with our assets. A match provides a strong signal that an adversary is in the early stages of targeting.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 5156'
      - 'External-facing web servers'
      - 'VPN concentrators'
      - 'Firewall and network gateway logs'
      - 'Domain controllers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH network_connection_logs
          WHERE source_ip IN cti_watchlist
          AND direction = 'inbound'
          RETURN count BY source_ip, destination_ip, destination_port
  - question: "Is any single external IP address exhibiting scanning or sweeping behavior by connecting to an anomalous number of hosts or ports?"
    context: |
      This question seeks to detect scanning behavior without relying on pre-existing threat intelligence. Adversaries often perform horizontal sweeps (one port, many hosts) or vertical scans (one host, many ports) to map out our network. By establishing a statistical baseline for normal connection patterns and alerting on significant deviations (e.g., IPs exceeding the 99th percentile for unique hosts/ports contacted), we can uncover previously unknown scanning infrastructure.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 5156'
      - 'External-facing web servers'
      - 'VPN concentrators'
      - 'Firewall and network gateway logs'
      - 'Domain controllers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH network_connection_logs WHERE direction = 'inbound'
          AGGREGATE unique_dest_hosts = unique_count(destination_ip), unique_dest_ports = unique_count(destination_port) OVER 5m_window BY source_ip
          COMPARE unique_dest_hosts, unique_dest_ports AGAINST historical_baseline
          ALERT IF value > 99th_percentile
  - question: "Can machine learning models classify network activity from external IPs as reconnaissance based on connection patterns?"
    context: |
      This question leverages machine learning to create a sophisticated detection model for reconnaissance. By training a classifier (like a Random Forest) on features such as CTI list membership, connection counts to distinct hosts and ports, and connection states (e.g., failed, rejected), the model can learn the subtle, combined patterns of scanning activity. This approach can identify complex reconnaissance that might evade simpler rule-based or statistical methods.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 5156'
      - 'External-facing web servers'
      - 'VPN concentrators'
      - 'Firewall and network gateway logs'
      - 'Domain controllers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          INPUT network_connection_logs
          FOR each source_ip:
            FEATURE_SET = {is_on_cti_list, distinct_ports_5min, distinct_hosts_5min, connection_state_counts}
            PREDICTION = recon_model.predict(FEATURE_SET)
            CONFIDENCE = recon_model.predict_proba(FEATURE_SET)
            ALERT IF PREDICTION == 'reconnaissance' AND CONFIDENCE > 0.9
  - question: "Has an internal host connected to a known reconnaissance framework domain or IP?"
    context: |
      This question focuses on detecting the use of specific, known adversary tools like the ScanBox framework. These frameworks are used to fingerprint victim browsers and hosts. By maintaining a watchlist of domains and IPs associated with these tools and monitoring DNS and HTTP logs, we can generate a high-severity alert upon a successful connection. This indicates a potential compromise or an insider threat actively profiling our internal systems.
    answer_sources:
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek dns.log'
      - 'DNS resolvers'
      - 'Network egress points and web proxies'
      - 'User workstations'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH dns_logs, http_logs
          WHERE (dns_query IN recon_framework_watchlist OR destination_ip IN recon_framework_watchlist)
          AND source_ip is_internal
          RETURN source_ip, destination_domain, destination_ip
  - question: "Is an internal host exfiltrating data via an HTTP POST request with unusually high entropy?"
    context: |
      This question aims to detect the exfiltration of collected host information, which is a common follow-on to in-browser reconnaissance. Adversaries often encode or encrypt the collected data before sending it, which increases its randomness or entropy. By calculating the Shannon entropy of outbound HTTP POST bodies and comparing it to a baseline, we can flag requests with abnormally high entropy (e.g., > 98th percentile) as potential data exfiltration.
    answer_sources:
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek dns.log'
      - 'DNS resolvers'
      - 'Network egress points and web proxies'
      - 'User workstations'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE http_method = 'POST' AND direction = 'outbound'
          FOR each request:
            CALCULATE entropy(request_body)
            COMPARE entropy AGAINST historical_baseline
            ALERT IF entropy > 98th_percentile
  - question: "Can a machine learning model identify outbound HTTP requests that are characteristic of browser profiling?"
    context: |
      This question uses machine learning to proactively identify browser profiling activity. By training a model on features like User-Agent, request body length, MIME types, URI entropy, and domain age, the model can learn to distinguish legitimate web browsing from automated profiling scripts. Deploying this model allows for the scoring of new outbound requests, enabling alerts when a request is classified as 'profiling' with high confidence, even to previously unknown domains.
    answer_sources:
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek dns.log'
      - 'DNS resolvers'
      - 'Network egress points and web proxies'
      - 'User workstations'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          INPUT http_logs WHERE direction = 'outbound'
          FOR each request:
            FEATURE_SET = {user_agent, request_body_len, response_mime_type, uri_entropy, domain_age}
            PREDICTION = profiling_model.predict(FEATURE_SET)
            ALERT IF PREDICTION == 'profiling'
  - question: "Is an external IP using a User-Agent or accessing URIs associated with known scanning tools?"
    context: |
      This question aims to identify overt scanning activity by looking for explicit tool signatures. Many automated scanning tools (like nmap, nikto, sqlmap) use default User-Agent strings or probe for specific, well-known sensitive files (e.g., /.git/config). By applying a set of regular expressions to our web logs to find these signatures, we can generate high-fidelity alerts for this common and often noisy reconnaissance technique.
    answer_sources:
      - 'Zeek http.log'
      - 'Public-facing web applications'
      - 'API gateways'
      - 'Load balancers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE direction = 'inbound'
          AND (user_agent MATCHES scanner_regex_list OR uri MATCHES sensitive_file_regex_list)
          RETURN count BY source_ip, user_agent, uri
  - question: "Is an external IP generating an unusually high ratio of HTTP error responses, suggesting forceful browsing?"
    context: |
      This question seeks to identify automated scanning by analyzing the server's responses. Attackers performing forceful browsing or directory enumeration will try to access many non-existent pages, resulting in a high number of HTTP 4xx (Client Error) and 5xx (Server Error) responses compared to successful 2xx/3xx codes. By tracking this error ratio for each source IP and alerting when it exceeds a statistical baseline (e.g., 95th percentile), we can detect this brute-force discovery behavior.
    answer_sources:
      - 'Zeek http.log'
      - 'Public-facing web applications'
      - 'API gateways'
      - 'Load balancers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE direction = 'inbound'
          AGGREGATE error_codes = count(status_code WHERE status_code >= 400), success_codes = count(status_code WHERE status_code < 400) OVER 10m_window BY source_ip
          CALCULATE error_ratio = error_codes / (success_codes + error_codes)
          COMPARE error_ratio AGAINST historical_baseline
          ALERT IF error_ratio > 95th_percentile
  - question: "Can a machine learning model detect anomalous URI navigation paths indicative of automated scanning?"
    context: |
      This question uses a sophisticated sequence model (LSTM) to understand normal user behavior. Legitimate users typically follow predictable navigation paths on a website, while automated scanners jump between unrelated URIs. By training an LSTM on sequences of benign URI requests, the model learns what a 'normal' session looks like. It can then assign a perplexity (or 'surprise') score to new sessions. Highly improbable sequences (e.g., top 1% perplexity) are flagged as anomalous and likely represent automated scanning.
    answer_sources:
      - 'Zeek http.log'
      - 'Public-facing web applications'
      - 'API gateways'
      - 'Load balancers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          INPUT http_logs WHERE direction = 'inbound'
          FOR each session (by source_ip):
            URI_SEQUENCE = get_ordered_uris(session)
            PERPLEXITY = lstm_model.score(URI_SEQUENCE)
            COMPARE PERPLEXITY against historical_scores
            ALERT IF PERPLEXITY > 99th_percentile
  - question: "Has a single external IP performed a high-volume port scan or network sweep within a one-minute window?"
    context: |
      This question aims to detect classic, high-volume scanning techniques using simple, fixed thresholds. A port scan involves probing many ports on a single host, while a network sweep involves probing a single port across many hosts. By creating a rule that alerts when an external IP exceeds a clear threshold (e.g., >100 ports on one host, or >50 hosts on one port) in a short time frame (60 seconds), we can reliably catch this overt form of network reconnaissance.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 5156'
      - 'Firewall and network gateway logs'
      - 'DMZ subnets'
      - 'Externally-facing servers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH network_connection_logs WHERE direction = 'inbound'
          AGGREGATE unique_dest_ports = unique_count(destination_port), unique_dest_hosts = unique_count(destination_ip) OVER 1m_window BY source_ip, destination_ip
          ALERT IF (unique_dest_ports > 100) OR (unique_dest_hosts > 50)
  - question: "Is an external IP connecting to a set of destination ports with high statistical variance or entropy, suggesting a non-sequential scan?"
    context: |
      This question seeks to identify more subtle or "stealthy" scanning techniques that might not be sequential. Instead of looking at the raw count of ports, this method analyzes the distribution of the ports being contacted. A legitimate service might connect to a few related ports, while a scanner might probe a wide, random-seeming selection. A high standard deviation or high entropy in the set of destination ports for a given source IP is a strong statistical indicator of a broad, non-sequential port scan.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 5156'
      - 'Firewall and network gateway logs'
      - 'DMZ subnets'
      - 'Externally-facing servers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH network_connection_logs WHERE direction = 'inbound'
          FOR each source_ip OVER 5m_window:
            PORT_LIST = get_destination_ports(source_ip)
            STDDEV_PORTS = calculate_stddev(PORT_LIST)
            ENTROPY_PORTS = calculate_entropy(PORT_LIST)
            COMPARE STDDEV_PORTS, ENTROPY_PORTS against baselines
            ALERT IF STDDEV_PORTS > 3_std_dev_from_mean OR ENTROPY_PORTS is high
  - question: "Can an unsupervised machine learning model (DBSCAN) identify clusters of anomalous network activity corresponding to scanning?"
    context: |
      This question uses unsupervised learning to find scanning behavior without prior labels. Density-based clustering algorithms like DBSCAN group data points that are closely packed together. When applied to network connection data (using features like source/destination IPs and ports), legitimate traffic typically forms a large, dense cluster. Scanning activities, however, often appear as smaller, separate, but still dense clusters. By programmatically identifying these anomalous clusters, we can pinpoint the source IPs involved in the scanning.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 5156'
      - 'Firewall and network gateway logs'
      - 'DMZ subnets'
      - 'Externally-facing servers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          INPUT network_connection_logs for last hour
          FEATURE_VECTORS = create_vectors(source_ip, dest_ip, dest_port)
          CLUSTERS = dbscan.fit(FEATURE_VECTORS)
          IDENTIFY anomalous_clusters (small, dense clusters)
          ALERT on source_ips that are core points in anomalous_clusters
  - question: "Is an inbound HTTP request using a User-Agent string known to be associated with malicious tools?"
    context: |
      This question provides a straightforward method for detecting malicious scanners by matching the User-Agent string against a blocklist. Many scanning and attack tools (e.g., 'masscan', 'zgrab') use unique, identifiable User-Agent strings. Maintaining a list of these and creating a SIEM rule to alert on any match in inbound web traffic provides a high-confidence signal of malicious reconnaissance.
    answer_sources:
      - 'Zeek http.log'
      - 'Public-facing web applications'
      - 'Content Delivery Networks (CDNs)'
      - 'Reverse proxies'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE direction = 'inbound'
          AND user_agent IN malicious_ua_blocklist
          RETURN count BY source_ip, user_agent
  - question: "Is an inbound HTTP request using a User-Agent that is statistically anomalous (rare, new, or random-looking)?"
    context: |
      This question aims to detect suspicious User-Agents without relying on a blocklist. Adversaries may use custom or randomized User-Agents to evade detection. This method identifies these by looking for statistical anomalies: User-Agents that have never been seen before, are extremely rare (e.g., in the bottom 0.1% of frequency), or have high character entropy (suggesting randomization). An alert on any of these conditions can reveal novel or customized scanning tools.
    answer_sources:
      - 'Zeek http.log'
      - 'Public-facing web applications'
      - 'Content Delivery Networks (CDNs)'
      - 'Reverse proxies'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE direction = 'inbound'
          FOR each request:
            UA = request.user_agent
            IS_NEW = UA not in historical_ua_list_30d
            IS_RARE = frequency(UA) < 0.1_percentile
            IS_HIGH_ENTROPY = entropy(UA) > 3.5
            ALERT IF IS_NEW OR IS_RARE OR IS_HIGH_ENTROPY
  - question: "Can a machine learning autoencoder model detect fabricated or malicious User-Agent strings?"
    context: |
      This question employs a sophisticated anomaly detection technique using an autoencoder neural network. The model is trained on a large set of legitimate User-Agent strings, learning to compress and then reconstruct them accurately. When a new, anomalous User-Agent (one that doesn't fit the learned patterns) is fed into the model, it will have a high 'reconstruction error'. By alerting on User-Agents with an error above a very high threshold (e.g., 99.9th percentile), we can effectively identify fabricated, randomized, or otherwise malformed strings used by attackers.
    answer_sources:
      - 'Zeek http.log'
      - 'Public-facing web applications'
      - 'Content Delivery Networks (CDNs)'
      - 'Reverse proxies'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          INPUT http_logs WHERE direction = 'inbound'
          FOR each request:
            UA_STRING = request.user_agent
            RECONSTRUCTION_ERROR = ua_autoencoder.evaluate(UA_STRING)
            COMPARE RECONSTRUCTION_ERROR against baseline_errors
            ALERT IF RECONSTRUCTION_ERROR > 99.9th_percentile
  - question: "Is an external IP requesting URIs that are known to be sensitive files or information-leaking endpoints?"
    context: |
      This question targets a common reconnaissance technique where attackers probe for specific files or API endpoints that inadvertently expose sensitive information (e.g., '/.git/config', '/.env', '/actuator/heapdump'). By creating a SIEM rule with a list of regular expressions matching these known dangerous URI patterns, we can generate a high-severity alert on a single match. This provides a direct and immediate indication of targeted probing for vulnerabilities.
    answer_sources:
      - 'Zeek http.log'
      - 'Public web servers'
      - 'API endpoints'
      - 'Cloud service management consoles'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE direction = 'inbound'
          AND uri MATCHES sensitive_uri_regex_list
          ALERT on any match, returning source_ip and uri
  - question: "Is an external IP making multiple, distinct requests for known sensitive URIs in a short time frame?"
    context: |
      This question builds upon the symbolic check by adding a frequency component to reduce noise and identify more determined adversaries. While a single request for a sensitive URI might be a false positive, an actor probing for multiple different known vulnerabilities from the same IP within a few minutes is a much stronger signal of malicious intent. An alert that triggers when this count exceeds a low threshold (like 3 unique probes in 5 minutes) indicates a targeted effort to find an exploitable information leak.
    answer_sources:
      - 'Zeek http.log'
      - 'Public web servers'
      - 'API endpoints'
      - 'Cloud service management consoles'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          SEARCH http_logs WHERE direction = 'inbound' AND uri MATCHES sensitive_uri_regex_list
          AGGREGATE unique_sensitive_uri_count = unique_count(uri) OVER 5m_window BY source_ip
          ALERT IF unique_sensitive_uri_count > 3
  - question: "Can an unsupervised machine learning model (One-Class SVM) identify entire user sessions that are anomalous and likely represent reconnaissance?"
    context: |
      This question takes a holistic, session-level view of user activity. Using a One-Class SVM, we can model what a 'normal' user session looks like based on features like its duration, number of requests, ratio of errors, and URI characteristics. The model learns the boundary of normal behavior. Any session that falls outside this boundary is classified as an anomaly or outlier. This is a powerful way to detect reconnaissance that might not trigger individual rules but looks suspicious when viewed as a whole session.
    answer_sources:
      - 'Zeek http.log'
      - 'Public web servers'
      - 'API endpoints'
      - 'Cloud service management consoles'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          INPUT http_logs WHERE direction = 'inbound'
          FOR each session (by source_ip):
            FEATURE_SET = {duration, request_count, ratio_404, avg_uri_entropy, count_suspicious_patterns}
            PREDICTION = session_svm_model.predict(FEATURE_SET)
            ALERT IF PREDICTION == 'anomaly'