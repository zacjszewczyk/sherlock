name: T1222: File and Directory Permissions Modification
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary has modified file or directory permissions to evade defenses and access protected resources. It focuses on detecting the use of built-in utilities like icacls.exe, cacls.exe, takeown.exe, and chmod by malicious processes, identifying the application of overly permissive ACLs (e.g., 'Everyone:F'), spotting unauthorized DACL modifications on critical files and registry keys, and recognizing sequences where a permission change is immediately followed by file modification or execution.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious process spawned a command-line utility (like icacls.exe or takeown.exe) to modify file or directory permissions?
    context: This question aims to find direct evidence of a malicious actor, identified via threat intelligence (known-bad hash) or a security product alert, attempting to alter permissions. Correlating a security alert with the subsequent execution of a permission-modification tool within a short time frame is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Defender Event ID 1116
      - Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), Endpoint devices of privileged users (e.g., Domain Admins, Developers)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (icacls, cacls, takeown, chmod, fsutil) | JOIN security_alerts ON hostname within 5m | WHERE parent_process_hash IN (threat_intel_feed) OR parent_process_name == alert_process_name
  - question: Has a file permission utility been executed by an uncommon parent process?
    context: Legitimate administrative tasks often involve standard parent processes (like explorer.exe or cmd.exe) spawning permission-modification tools. Adversaries, however, might use non-standard processes (e.g., a reverse shell, a custom implant) to perform these actions. This question identifies such anomalies by flagging parent-child relationships that are statistically rare in the environment.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Defender Event ID 1116
      - Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), Endpoint devices of privileged users (e.g., Domain Admins, Developers)
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (icacls, cacls, takeown, chmod, fsutil) over 30d | STATS count by parent_process | CALCULATE frequency_percentile | FILTER frequency_percentile < 5
  - question: Can machine learning identify malicious file permission modifications based on process characteristics?
    context: This question uses a machine learning model to score permission modification events for maliciousness. By analyzing a combination of features like the parent process, command-line complexity (length, entropy), user context, and time of day, the model can learn to distinguish between benign administrative activity and adversary behavior that might otherwise be missed by simple rules.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Defender Event ID 1116
      - Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), Endpoint devices of privileged users (e.g., Domain Admins, Developers)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT process_creation_events (Sysmon EID 1) | EXTRACT features (parent_process, cmd_length, cmd_entropy, user, hour) | PREDICT is_malicious using classification_model | FILTER prediction_confidence > 0.9
  - question: Has a command been executed to grant broad, insecure permissions (e.g., Full Control for 'Everyone') to a sensitive file or directory?
    context: Adversaries often grant broad permissions to files or directories to ensure their malware can execute or to access data that was previously restricted. This question looks for specific, high-risk command-line arguments that explicitly set weak permissions, especially on critical system directories.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - System configuration directories (e.g., C:\Windows\System32, /etc/), application installation directories, user profile directories, network file shares hosting sensitive data, and common persistence locations (e.g., Startup folders).
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | REGEX command_line contains "(icacls|cacls).*(Everyone|Authenticated Users):(F|M|W)" OR "chmod (777|a+rwx)" | INCREASE_SEVERITY if target_path is in critical_directories_list
  - question: Is there evidence of a permission modification command targeting a file or directory with an unusually complex or randomized path?
    context: To avoid detection based on static file paths, adversaries may place their tools or scripts in directories with randomized names. This question aims to detect such behavior by calculating the entropy (a measure of randomness) of the target path in a permission modification command and flagging paths that are statistically abnormal.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - System configuration directories (e.g., C:\Windows\System32, /etc/), application installation directories, user profile directories, network file shares hosting sensitive data, and common persistence locations (e.g., Startup folders).
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (permission_utils) over 30d | EXTRACT target_path | CALCULATE path_entropy | BUILD baseline_distribution | ALERT on new events where path_entropy > 95th_percentile
  - question: Did a permission modification command occur as part of an unusual sequence of commands, such as immediately after downloading a file?
    context: Benign administrative activity typically follows predictable patterns. An adversary's actions might not. This question analyzes the sequence of commands in a user's session to find anomalous transitions. For example, downloading a file from the internet (curl/wget) and then immediately changing its permissions is a suspicious sequence that this model would flag.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - System configuration directories (e.g., C:\Windows\System32, /etc/), application installation directories, user profile directories, network file shares hosting sensitive data, and common persistence locations (e.g., Startup folders).
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT command_history_logs | MODEL command_sequences using n-gram | SCORE new sequences for probability | ALERT if sequence containing "chmod" or "icacls" has low probability
  - question: Has an unauthorized user or process modified the permissions of a critical system file, registry key, or Group Policy Object?
    context: To maintain persistence or disable security controls, adversaries may target critical assets like sethc.exe (Sticky Keys), security tool binaries, or GPOs. This question focuses on detecting any permission change (Event ID 4670) on a predefined list of critical assets that is not performed by a known, authorized administrator account.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek smb_files.log
      - Windows Registry (HKLM\Software, HKCU\Software), Group Policy Objects (GPOs) on Domain Controllers, directories containing security tool binaries (e.g., C:\Program Files\Windows Defender), and system binary directories (C:\Windows\System32).
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH event_log (EID 4670) | FILTER object_name IN critical_asset_watchlist AND user_name NOT IN authorized_admin_group
  - question: Has a rare or first-seen combination of user, process, and object been observed for a permission change event?
    context: Normal system operations and administrative tasks tend to produce a predictable set of permission change events. This question establishes a baseline of these normal activities by tracking unique combinations of the user, process, and object involved. It then alerts on any new event that represents a combination never seen before, or one that is extremely rare, pointing to a potential anomaly.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek smb_files.log
      - Windows Registry (HKLM\Software, HKCU\Software), Group Policy Objects (GPOs) on Domain Controllers, directories containing security tool binaries (e.g., C:\Program Files\Windows Defender), and system binary directories (C:\Windows\System32).
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH event_log (EID 4670) over 30d | CREATE baseline of unique (user, process, object) tuples | ALERT on new event if (user, process, object) tuple is not in baseline
  - question: Can an unsupervised machine learning model identify anomalous permission change events that do not fit normal patterns of activity?
    context: This question applies unsupervised machine learning to find outliers in permission change data without pre-existing labels. By clustering events based on features like the user, process, and object path, the model can identify 'normal' groups of activity. Any event that doesn't fit into these clusters is flagged as an anomaly, potentially indicating adversary behavior.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek smb_files.log
      - Windows Registry (HKLM\Software, HKCU\Software), Group Policy Objects (GPOs) on Domain Controllers, directories containing security tool binaries (e.g., C:\Program Files\Windows Defender), and system binary directories (C:\Windows\System32).
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT event_log (EID 4670) | VECTORIZE features (user, process, object_parent_dir) | CLUSTER events using DBSCAN/IsolationForest | ALERT on events classified as outliers/noise
  - question: Has a file's permissions been changed immediately before that same file was modified or executed by the same user?
    context: A common adversary tactic is to change the permissions of a file (e.g., a script or binary) to make it executable or writable, and then immediately run or modify it. This question looks for this specific, time-sensitive sequence of events (permission change -> execute/write) on the same object by the same user, which is a strong indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Persistence locations (e.g., Startup folders, Run keys in registry), directories containing security software binaries and logs, user profile directories.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH for sequence on same host: [EID 4670 on ObjectX by UserY] followed within 60s by [EID 11 or 4688 on ObjectX by UserY]
  - question: Has a 'modify-then-use' file sequence occurred at an atypically rapid speed, suggesting scripted execution?
    context: While a 'modify-then-use' sequence can occur during legitimate administration, automated or scripted attacks often perform these actions almost instantaneously. This question establishes a baseline for the normal time delay between a permission change and subsequent file access, and then alerts when this action occurs much faster than usual, pointing to automation.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Persistence locations (e.g., Startup folders, Run keys in registry), directories containing security software binaries and logs, user profile directories.
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH for sequence [EID 4670 -> EID 11/4688] | CALCULATE time_delta | BUILD baseline_distribution of deltas over 30d | ALERT on new sequence if time_delta < 5th_percentile
  - question: Has a host experienced a sudden burst of permission change activity that is abnormal for that specific host?
    context: An adversary attempting to modify permissions on a large number of files or registry keys (a 'mass permission change') will generate a spike in Event ID 4670 logs. This question uses time-series forecasting to learn the normal rhythm of permission changes for each host and alerts when a statistically significant spike occurs, indicating a possible widespread modification event.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Persistence locations (e.g., Startup folders, Run keys in registry), directories containing security software binaries and logs, user profile directories.
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH EID 4670 events | CREATE time_series count per 10m for each host | TRAIN forecasting model on 30d of data | ALERT if real-time count > forecast_upper_bound