name: T1049: System Network Connections Discovery
id: a7b1c2d3-e4f5-4a6b-7c8d-9e0f1a2b3c4d
description: This playbook helps investigate if an adversary is attempting to discover network connections from compromised systems. This can involve running processes with known malicious hashes, executing native command-line utilities (netstat, arp.exe, etc.) with specific arguments, using PowerShell or WMI to enumerate network configurations, generating anomalous network traffic patterns indicative of scanning, spawning discovery tools from unusual parent processes (like Office applications), or a single user account running discovery commands from an unusually high number of hosts.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process executed whose hash matches a known malicious network discovery tool from our threat intelligence feeds?
    context: This question aims to identify the execution of known-bad tools used for network discovery. Matching a process hash against a curated list of malicious tool hashes is a high-confidence method for detecting adversary activity, as it is difficult for attackers to change the hash without altering the tool's functionality.
    answer_sources:
      - Windows Event ID 4688
      - Zeek software.log
      - All Endpoints (Workstations and Laptops)
      - Critical Servers (e.g., Domain Controllers, Application Servers)
      - DMZ Servers
      - Developer Workstations
      - Administrator Jump Boxes
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs WHERE process_hash IN threat_intel_feed_hashes AND event_time > now() - 90d
  - question: Is a dual-use network discovery tool (like nmap or ncat) being executed on a host at an anomalously high frequency or for the first time?
    context: This question helps detect the misuse of legitimate tools that can also be used for malicious reconnaissance. By baselining normal execution frequency on a per-host basis, we can spot deviations that suggest an adversary is using these tools for discovery, rather than for routine administrative tasks. A first-time execution on a host is particularly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Zeek software.log
      - All Endpoints (Workstations and Laptops)
      - Critical Servers (e.g., Domain Controllers, Application Servers)
      - DMZ Servers
      - Developer Workstations
      - Administrator Jump Boxes
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs FOR dual_use_tool | BASELINE execution_count per host over 30d | ALERT if today_count > 95th_percentile OR first_time_execution
  - question: Has a machine learning model identified a process execution event as highly likely to be malicious network discovery activity?
    context: This question leverages machine learning to detect subtle or novel network discovery techniques that might evade simpler rule-based detections. By analyzing multiple features of a process execution event (like parent process, command line, user), the model can identify patterns indicative of malicious behavior, even for previously unseen tools.
    answer_sources:
      - Windows Event ID 4688
      - Zeek software.log
      - All Endpoints (Workstations and Laptops)
      - Critical Servers (e.g., Domain Controllers, Application Servers)
      - DMZ Servers
      - Developer Workstations
      - Administrator Jump Boxes
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT process_creation_events INTO ML_model | ALERT if prediction_score > 0.9
  - question: Has a native discovery utility (e.g., net.exe, netstat.exe) been executed with command-line arguments indicative of network reconnaissance?
    context: This question focuses on detecting the abuse of legitimate, built-in system utilities for discovery. Adversaries often use commands like 'net view /domain' or 'netstat -anop' to map the network. Alerting on specific, reconnaissance-focused argument patterns, while excluding known benign scripts, provides a reliable way to spot this TTP.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Endpoints (Workstations and Laptops)
      - Jump Servers
      - Domain Controllers
      - Internal Application Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN (net.exe, netstat.exe) AND command_line MATCHES ('*view /domain*', '*stat -anop*')
  - question: Is a user exhibiting unusually exploratory or scripted behavior with command-line discovery tools?
    context: This question aims to identify anomalous usage patterns of discovery utilities by a specific user. By calculating the complexity (Shannon entropy) of command-line arguments in a session, we can detect behavior that deviates from a user's normal activity, such as an attacker manually exploring commands or running a repetitive discovery script.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Endpoints (Workstations and Laptops)
      - Jump Servers
      - Domain Controllers
      - Internal Application Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each user_session | CALCULATE shannon_entropy of command_line_args | BASELINE user_entropy over 30d | ALERT if session_entropy > 3_std_dev from baseline
  - question: Did a sequence of command-line events on a host match a known malicious pattern involving network discovery?
    context: This question seeks to identify adversary behavior by analyzing the sequence of commands, not just isolated events. A network discovery command like 'arp -a' is more suspicious if it follows an initial access indicator like 'whoami' and precedes a lateral movement attempt like 'net use'. Sequence analysis models can learn these malicious chains of events.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Endpoints (Workstations and Laptops)
      - Jump Servers
      - Domain Controllers
      - Internal Application Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT command_sequences_per_host INTO LSTM_model | ALERT if sequence_anomaly_score is high AND contains_discovery_command
  - question: Has a PowerShell script been executed that contains cmdlets, WMI classes, or .NET methods for network discovery?
    context: This question targets the use of PowerShell for "fileless" network discovery. Adversaries leverage PowerShell's powerful networking capabilities to enumerate connections and configurations. This detection searches for specific suspicious strings within PowerShell script block logs, including checks for common obfuscation techniques.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5858
      - All Windows Endpoints and Servers
      - Systems with PowerShell Remoting Enabled
      - Exchange Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH powershell_script_logs FOR ('Get-NetTCPConnection', 'Win32_PingStatus', 'System.Net.NetworkInformation.Ping') AND check for obfuscation
  - question: Does a PowerShell script exhibit statistical properties, such as character frequency, that are anomalous compared to benign administrative scripts?
    context: This question aims to detect obfuscated or packed PowerShell scripts without relying on specific string signatures. Malicious scripts often have a different character distribution than normal scripts. By comparing a script's character frequency to a baseline of known-good scripts, we can identify outliers that warrant investigation, especially if they contain network-related keywords.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5858
      - All Windows Endpoints and Servers
      - Systems with PowerShell Remoting Enabled
      - Exchange Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each powershell_script | CALCULATE char_frequency_distribution | COMPARE to benign_baseline using Chi-squared | ALERT if distance_score is high
  - question: Has a Natural Language Processing (NLP) model classified a PowerShell script as suspicious or malicious reconnaissance?
    context: This question uses advanced machine learning to understand the intent of a PowerShell script. By training a Transformer model on the script's structure (Abstract Syntax Tree) and text, it can classify scripts with high accuracy, even when faced with obfuscation, providing a sophisticated layer of detection for malicious PowerShell activity.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5858
      - All Windows Endpoints and Servers
      - Systems with PowerShell Remoting Enabled
      - Exchange Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT powershell_script_text INTO NLP_classifier | ALERT if classification is 'Suspicious Recon' or 'Malicious Execution'
  - question: Has a single host initiated connections to an unusually high number of unique internal hosts in a short time frame?
    context: This question is designed to detect network scanning behavior. A host, such as a user workstation, suddenly connecting to dozens of other internal systems is a strong indicator of compromise and active reconnaissance. The query triggers when a source IP exceeds a defined threshold of unique destination IPs within a short window, excluding known scanners.
    answer_sources:
      - Zeek conn.log
      - Firewall Deny/Accept Logs
      - Internal network segments (East-West traffic)
      - Network Security Monitoring Sensor locations
      - VPC/VNet Flow Log aggregation points
      - Core network switch SPAN/TAP ports
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FROM network_logs | COUNT unique destination_ips per source_ip in 5_min_window | ALERT if count > 25 AND source_ip NOT IN allowlist
  - question: Is a host communicating with a number of unique destination IPs or ports that is anomalous compared to its own historical behavior?
    context: This question identifies scanning behavior by baselining a host's normal network activity. Instead of a static threshold, this method creates a dynamic baseline for each host's typical fan-out. An alert is triggered when a host suddenly communicates with far more unique destinations than it usually does, providing a more tailored and accurate detection.
    answer_sources:
      - Zeek conn.log
      - Firewall Deny/Accept Logs
      - Internal network segments (East-West traffic)
      - Network Security Monitoring Sensor locations
      - VPC/VNet Flow Log aggregation points
      - Core network switch SPAN/TAP ports
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each host | BASELINE unique_destinations_per_hour over 30d | ALERT if current_hour_count > 99th_percentile of baseline
  - question: Have any network connections been identified as anomalous outliers by a density-based clustering algorithm?
    context: This question uses unsupervised machine learning to find suspicious network activity. A clustering algorithm like DBSCAN groups together normal, dense traffic patterns. Connections that do not fit into any cluster are labeled as outliers or noise. These outliers often represent the sparse, widespread patterns of a network scan and should be investigated.
    answer_sources:
      - Zeek conn.log
      - Firewall Deny/Accept Logs
      - Internal network segments (East-West traffic)
      - Network Security Monitoring Sensor locations
      - VPC/VNet Flow Log aggregation points
      - Core network switch SPAN/TAP ports
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT network_connection_logs INTO DBSCAN_model | ALERT on connections labeled as 'noise' or 'outlier'
  - question: Has a network discovery utility been spawned by an unusual parent process, such as an Office application or web server?
    context: This question looks for a high-fidelity indicator of compromise where a non-standard parent process executes a discovery tool. For example, Microsoft Word (winword.exe) should never spawn 'net.exe'. Such an event strongly suggests that an exploit or malicious macro has been used to gain execution and is now performing reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Web Servers
      - User Workstations
      - Application Servers
      - Microsoft Office 365 / Exchange servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs WHERE child_process IN discovery_tools AND parent_process IN (winword.exe, outlook.exe, w3wp.exe)
  - question: Has a statistically rare parent-child process relationship involving a network discovery tool been observed?
    context: This question aims to find novel or uncommon execution chains that might indicate malicious activity. By building a frequency table of all parent-child relationships across the enterprise, we can flag new relationships that are extremely rare (e.g., seen less than 5 times) and involve a discovery tool as the child process.
    answer_sources:
      - Windows Event ID 4688
      - Web Servers
      - User Workstations
      - Application Servers
      - Microsoft Office 365 / Exchange servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: COUNT all parent_child_relationships over 30d | ALERT if new_relationship has child in discovery_tools AND count < 5
  - question: Has a graph-based machine learning model detected an anomalous process execution tree that includes a network discovery utility?
    context: This question uses an advanced ML technique to analyze entire process execution chains as graphs. A neural network is trained to learn the structure of normal process trees. It can then identify newly observed trees that have an anomalous structure, flagging them for review, especially if a discovery tool is part of the anomalous chain.
    answer_sources:
      - Windows Event ID 4688
      - Web Servers
      - User Workstations
      - Application Servers
      - Microsoft Office 365 / Exchange servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL process_chains as graphs | INPUT new_process_tree into graph_NN_model | ALERT if anomaly_score is high AND leaf_node is a discovery_tool
  - question: Has a single user account executed network discovery commands from an abnormally high number of distinct hosts?
    context: This question helps detect an adversary who has compromised a user account and is using it to perform reconnaissance from multiple systems. By correlating logon events with process execution, we can track a user's activity across hosts and alert when they run discovery commands from more machines than would be normal for their role.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Domain Controllers (for login events)
      - All Endpoints and Servers (for process events)
      - Identity and Access Management Systems
      - Centralized SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CORRELATE logon_events and process_events by user | COUNT unique hosts where user ran discovery_command in 1_hour | ALERT if host_count > 3 AND user NOT IN admin_list
  - question: Is a user executing discovery commands from a number of unique hosts that is anomalous compared to their own historical behavior?
    context: This question provides a more tailored version of the previous one by creating a dynamic baseline for each user. It tracks the number of unique hosts a user typically runs discovery commands from. An alert is triggered if a user's activity significantly deviates from their own established baseline, which is a strong indicator of account misuse.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Domain Controllers (for login events)
      - All Endpoints and Servers (for process events)
      - Identity and Access Management Systems
      - Centralized SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each user | BASELINE unique_hosts_per_day running discovery_commands over 30d | ALERT if today_count > 3_std_dev from baseline
  - question: Does a User and Entity Behavior Analytics (UEBA) platform show a high anomaly score for a user who is also executing discovery tools?
    context: This question leverages a UEBA system to provide a holistic view of user behavior. The UEBA platform uses unsupervised learning to score the risk of a user's activity based on many factors (logon times, hosts accessed, processes run). Investigating users with high anomaly scores, especially when correlated with the execution of discovery tools, can effectively pinpoint compromised accounts.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Domain Controllers (for login events)
      - All Endpoints and Servers (for process events)
      - Identity and Access Management Systems
      - Centralized SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH UEBA_alerts for users with high anomaly_score | CORRELATE with process_logs to see if user ran discovery_tools during anomalous period