name: T1606.002: SAML Tokens
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the potential for an adversary to forge Security Assertion Markup Language (SAML) tokens to gain unauthorized access to credentials and systems. It provides investigative steps to detect this activity by analyzing SAML assertions for known-bad certificate indicators, anomalous lifetimes or structures, and discrepancies between Service Provider and Identity Provider logs. It also covers behavioral analytics, such as identifying impossible travel scenarios and unusual post-authentication activities, which could indicate the use of a forged SAML token.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a SAML assertion signed by a certificate with a known-bad thumbprint or issuer name?
    context: Adversaries may use compromised or malicious certificates to sign forged SAML assertions. This question aims to identify such forgeries by inspecting the signing certificate of SAML assertions in network traffic. By comparing the certificate's thumbprint and issuer name against a threat intelligence watchlist of known-bad indicators, analysts can detect and flag potentially malicious authentication attempts. A match indicates a high probability of a credential access attempt using a forged token.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Zeek x509.log
      - Windows Event ID 1202
      - AD FS / Identity Provider servers
      - Cloud Identity Provider consoles (e.g., Entra ID, Okta)
      - network gateways with TLS inspection
      - reverse proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Requires TLS inspection
          FOR each SAML assertion in network traffic (http.log, files.log)
            EXTRACT signing certificate thumbprint and issuer name
            IF thumbprint OR issuer in known_bad_indicator_watchlist
              GENERATE high-severity alert
  - question: Is a SAML signing certificate or issuer being used with an anomalously low frequency, suggesting a newly introduced malicious certificate?
    context: Attackers often introduce new, single-use, or rarely-used certificates to sign forged tokens. This question focuses on detecting these outliers through frequency analysis. By tracking the usage count of every certificate thumbprint and issuer over a rolling time window, analysts can identify those with statistically low usage (e.g., below the 5th percentile) that are associated with multiple or high-privilege accounts. This can surface a newly introduced malicious certificate that would be missed by signature-based checks.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Zeek x509.log
      - Windows Event ID 1202
      - AD FS / Identity Provider servers
      - Cloud Identity Provider consoles (e.g., Entra ID, Okta)
      - network gateways with TLS inspection
      - reverse proxies
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE frequency of each cert_thumbprint and cert_issuer over a 30-day window
          FOR each thumbprint/issuer
            IF frequency is a statistical outlier (e.g., < 5th percentile)
            AND associated with multiple or high-privilege accounts
              FLAG for investigation
  - question: Can machine learning classify a new SAML signing certificate as suspicious based on its attributes?
    context: This question explores a proactive, machine learning-based approach to certificate validation. Instead of relying solely on known-bad indicators, a classification model can be trained to recognize the characteristics of malicious certificates (e.g., short validity, unusual issuer attributes, self-signed status). By feeding features of newly observed certificates into the model, it can classify them as 'suspicious' or 'benign,' allowing for the detection of novel threats that do not yet appear on threat intelligence feeds.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Zeek x509.log
      - Windows Event ID 1202
      - AD FS / Identity Provider servers
      - Cloud Identity Provider consoles (e.g., Entra ID, Okta)
      - network gateways with TLS inspection
      - reverse proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model trained on known-good and known-bad certificate features
          FOR each new SAML signing certificate
            EXTRACT features (validity period, key strength, issuer, etc.)
            INPUT features into classification model
            IF model_output == 'suspicious'
              GENERATE alert
  - question: Does a SAML assertion exhibit an abnormally long lifetime or contain known artifacts from forgery tools?
    context: Adversaries may create forged SAML tokens with extended lifetimes to maintain persistent access. This question aims to detect these by parsing the token's validity period (NotOnOrAfter - NotBefore) and comparing it against a defined organizational policy (e.g., 8 hours). An excessively long lifetime is a strong indicator of forgery. Additionally, checking for specific artifacts left by known forgery tools like ADFSpoof can provide direct evidence of malicious activity.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - AD FS / Identity Provider servers
      - application servers acting as Service Providers
      - network segments with full TLS inspection
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Requires TLS inspection
          FOR each SAML assertion in network traffic
            CALCULATE lifetime = NotOnOrAfter - NotBefore
            IF lifetime > organizational_policy_max_duration
              GENERATE alert
            IF assertion contains artifacts from known forgery tools
              GENERATE alert
  - question: Is the lifetime of a SAML token a statistical outlier compared to the baseline for a specific service provider?
    context: While some long-lived tokens may be legitimate, a token whose lifetime is a statistical anomaly for a specific application or service provider warrants investigation. This question involves establishing a baseline of normal token lifetimes for each service provider and then alerting on any new token whose lifetime exceeds a statistical threshold (e.g., the 99th percentile). This can detect forgeries even when the lifetime doesn't violate a hard-coded policy, and can also be used to detect anomalous claim stuffing by monitoring claim block entropy.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - AD FS / Identity Provider servers
      - application servers acting as Service Providers
      - network segments with full TLS inspection
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          FOR each service_provider
            ESTABLISH baseline of token lifetimes over a 30-day lookback
          FOR each new token
            IF token_lifetime > 99th_percentile_of_baseline for its service_provider
              GENERATE alert
  - question: Does a sequence of a user's SAML token requests show anomalous attributes according to a time-series model?
    context: Sophisticated attackers may attempt to blend in by forging tokens with attributes that are not extreme outliers on their own. This question proposes using a time-series model (e.g., LSTM) to learn a user's normal sequence of token request patterns, including attributes like lifetime and claim counts. The model can then detect sequences of requests that are anomalous as a whole, such as a sudden change in lifetime followed by unusual claims, even if individual attributes are not suspicious.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - AD FS / Identity Provider servers
      - application servers acting as Service Providers
      - network segments with full TLS inspection
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model trained on sequences of token attributes per user
          FOR each user's new sequence of token requests
            INPUT sequence into time-series anomaly detection model
            IF model classifies sequence as anomalous
              FLAG for investigation
  - question: Has a successful SAML login been observed at a Service Provider without a corresponding token issuance event at the Identity Provider?
    context: This is the classic detection for a "Golden SAML" or "Phantom SAML Login" attack, where an adversary uses a completely forged token to access a Service Provider (SP). Since the token was never legitimately created by the Identity Provider (IdP), there will be no record of its issuance. This question is answered by correlating successful login events at the SP with token issuance or authentication logs at the IdP for the same user within a tight time window. A successful SP login without a corresponding IdP event is a high-confidence indicator of a forged token.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 1202
      - Windows Event ID 1200
      - Windows Event ID 4769
      - AD FS / Identity Provider servers
      - Domain Controllers
      - key Service Provider application servers
      - network gateways
    range: last 2 minutes
    queries:
      - technology: pseudocode
        query: |
          ON successful SP SAML login for user 'U' at time 'T'
            SEARCH IdP logs (e.g., Win Event 1200/1202) for user 'U' between 'T-2min' and 'T'
            IF no matching IdP log found
              GENERATE alert for 'Golden SAML' or 'Phantom Login'
  - question: Has the ratio of Service Provider logins to Identity Provider-issued tokens deviated significantly from the historical baseline?
    context: A flood of forged SAML tokens targeting one or more applications would cause the number of successful logins at Service Providers (SPs) to increase without a corresponding increase in tokens issued by the Identity Provider (IdP). This question aims to detect this scenario at a macro level. By calculating the ratio of SP logins to IdP tokens hourly and comparing it to a historical baseline, a significant deviation (e.g., >3 standard deviations) can indicate a large-scale forgery campaign.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 1202
      - Windows Event ID 1200
      - Windows Event ID 4769
      - AD FS / Identity Provider servers
      - Domain Controllers
      - key Service Provider application servers
      - network gateways
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE hourly ratio of (SP-observed logins / IdP-issued tokens) per application
          ESTABLISH baseline for this ratio over 30 days
          IF current hourly ratio > (baseline + 3 * standard_deviation)
            GENERATE alert
  - question: Can clustering analysis identify groups of related phantom logins that lack corresponding Identity Provider logs?
    context: If an adversary is conducting a campaign using forged tokens, the resulting phantom logins may share common characteristics (e.g., same target application, similar source IP range). This question involves using a clustering algorithm like DBSCAN on login events. By including a feature indicating whether a corresponding IdP log was present, the analysis can automatically group suspicious logins. Clusters of events that consistently lack an IdP log are highly suspicious and can help identify the scope of a single adversary's campaign.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 1202
      - Windows Event ID 1200
      - Windows Event ID 4769
      - AD FS / Identity Provider servers
      - Domain Controllers
      - key Service Provider application servers
      - network gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GATHER login events with features: user, source_ip, service_provider, IdP_Log_Present (boolean)
          RUN clustering algorithm (e.g., DBSCAN) on event data
          INVESTIGATE clusters where 'IdP_Log_Present' is consistently false
  - question: Did a user's SAML authentication originate from a geographically impossible location relative to their previous login?
    context: A common and effective method for detecting account compromise is identifying "Impossible Travel." This involves geolocating the source IP address of a successful SAML login and comparing its location and timestamp to the user's previous login. If the time elapsed between the two logins is not sufficient for the user to have physically traveled between the two locations (e.g., requiring travel faster than 1000 km/h), it strongly suggests that one of the logins was not legitimate.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4624
      - Network gateways
      - VPN concentrators
      - cloud infrastructure VPCs
      - application servers logging authentication events
      - IdP servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each successful SAML login
            GET source IP geolocation (current_loc) and timestamp (current_time)
            GET user's previous login geolocation (prev_loc) and timestamp (prev_time)
            CALCULATE required_speed = distance(current_loc, prev_loc) / (current_time - prev_time)
            IF required_speed > impossible_threshold (e.g., 1000 km/h)
              GENERATE 'Impossible Travel' alert
  - question: Is a user's SAML login anomalous based on their historical profile of source locations and login times?
    context: Beyond impossible travel, a login can be suspicious if it simply deviates from a user's established patterns of behavior. This question involves creating a baseline profile for each user, documenting their most frequent source countries, ASNs, and login hours over a 90-day period. Each new SAML login is then scored based on how much it deviates from this profile. A high score, indicating a login from a rare location or at an unusual time for that user, can trigger an alert for a potential compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4624
      - Network gateways
      - VPN concentrators
      - cloud infrastructure VPCs
      - application servers logging authentication events
      - IdP servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each user, maintain a 90-day baseline of source countries, ASNs, and login hours
          FOR each new SAML login
            CALCULATE risk score based on deviation from user's baseline
            IF risk_score > threshold
              GENERATE alert
  - question: Does a machine learning model classify a user's SAML login as an outlier compared to their established normal behavior?
    context: This question proposes a more advanced behavioral analytic using a machine learning model (e.g., one-class SVM) for each user. The model is trained on a set of features from the user's normal logins, such as source IP subnet, user agent string, time of day, and day of week. This creates a multi-dimensional boundary of "normal" behavior. Any new SAML login that falls outside this learned boundary is classified as an outlier and flagged for investigation, indicating it does not match the user's established access patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4624
      - Network gateways
      - VPN concentrators
      - cloud infrastructure VPCs
      - application servers logging authentication events
      - IdP servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Train a one-class SVM model per user on normal login features
          FOR each new SAML login
            EXTRACT features (IP subnet, user agent, time, etc.)
            INPUT features into user's trained model
            IF model classifies login as an outlier
              GENERATE alert
  - question: Was a SAML logon session immediately followed by an anomalous special privilege assignment for a non-administrative user?
    context: A key goal for an attacker using a forged token is to escalate privileges. This question seeks to detect this by correlating a SAML-based logon with subsequent high-privilege activity within the same session (linked by Logon ID). Specifically, it looks for the assignment of special privileges (e.g., SeDebugPrivilege) to a user who is not a pre-defined administrator shortly after they log on. This rapid privilege escalation is highly indicative of malicious intent.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4673
      - Domain Controllers
      - high-value servers
      - endpoint devices of privileged users
    range: last 10 minutes
    queries:
      - technology: pseudocode
        query: |
          ON SAML-based logon (Event 4624), get Logon_ID
          MONITOR for Special Privilege Assignment (Event 4672) with same Logon_ID within 10 minutes
          IF event occurs AND user is not in 'Administrators' group
            GENERATE alert
  - question: Did a process spawned after a SAML logon have an unusually high-entropy command line, suggesting obfuscation?
    context: Attackers often use obfuscation to hide their commands from simple keyword-based detections. High-entropy strings are a mathematical indicator of such obfuscation. This question involves establishing a baseline of normal command-line argument entropy for different user roles. After a user logs in via SAML, the entropy of commands they execute is calculated. A command with an entropy score significantly higher than the baseline for that user's role suggests an obfuscated, and therefore suspicious, command.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4673
      - Domain Controllers
      - high-value servers
      - endpoint devices of privileged users
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ESTABLISH baseline of command-line entropy per user role
          AFTER a SAML logon, for each spawned process (Event 4688)
            CALCULATE entropy of command-line arguments
            IF entropy > (baseline + 3 * standard_deviation) for user's role
              GENERATE alert
  - question: Does the post-authentication activity graph for a SAML session show a rare or anomalous structure?
    context: This question applies graph-based analysis to model post-authentication behavior. A "normal" activity graph for a user might involve their session on their workstation connecting to a file share. An "anomalous" graph might show their session spawning a process that connects to a domain controller over RPC, an action they have never performed before. By training a model on normal graph structures, it can detect new, rare, or anomalous sub-graphs that represent a deviation from normal behavior and indicate a potential compromise.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4673
      - Domain Controllers
      - high-value servers
      - endpoint devices of privileged users
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model trained on normal post-authentication activity graphs
          FOR each new post-SAML-auth session
            CONSTRUCT activity graph (nodes: user, process, destination; edges: actions)
            IF graph model flags the new sub-graph structure as anomalous
              GENERATE high-risk event alert