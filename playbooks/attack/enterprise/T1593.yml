name: T1593: Search Open Websites-Domains
id: f9e1b2a3-c4d5-4e6f-8a9b-0c1d2e3f4a5b
description: This playbook helps investigate whether an adversary is performing reconnaissance by searching open websites and domains. It focuses on identifying malicious scanning activity against public web assets by looking for known malicious signatures, unusual User-Agent strings, and high rates of HTTP errors from a single source. The playbook also addresses DNS-based reconnaissance, such as unauthorized zone transfer requests and high rates of NXDOMAIN responses indicative of subdomain enumeration. Finally, it helps detect credential stuffing attempts by correlating increased failed login attempts with credentials found in public data breach feeds.
type: technique
related:
- TA0043: Reconnaissance
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are external IPs or User-Agents matching known malicious reconnaissance tools connecting to our public web assets?
  context: This question aims to detect initial reconnaissance activity by cross-referencing inbound web traffic with high-confidence threat intelligence. Adversaries often use automated scanners and tools like ZGrab, Nuclei, or specific nmap scripts that have recognizable signatures (IPs or User-Agents). Identifying these connections early can provide a warning of a targeted or opportunistic attack.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Threat Intelligence Feed
  - Public-facing web servers
  - Reverse proxies
  - Cloud-hosted web applications
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN (Zeek http.log, Zeek conn.log) WITH (Threat Intelligence Feed)
      ON (source_ip OR user_agent)
      WHERE threat_feed_category IN ('malicious scanner', 'reconnaissance tool')
      RETURN source_ip, user_agent, destination_ip, timestamp
- question: Have we observed statistically rare User-Agent strings from non-legitimate sources accessing our public web servers?
  context: Adversaries may use custom or uncommon User-Agent strings to evade simple signature-based detection. This question focuses on identifying these outliers through statistical analysis. By baselining normal User-Agent activity, we can flag rare strings that are not associated with known legitimate services (like Googlebot), which could indicate a custom reconnaissance tool or manual browsing from an attacker.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers
  - Reverse proxies
  - Cloud-hosted web applications
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Baseline User-Agent frequency over 30 days
      CALCULATE frequency of each user_agent in http.log over last 30 days
      // Step 2: Identify rare User-Agents
      SELECT user_agent, source_ip FROM http.log
      WHERE frequency < 0.1%
      AND source_ip NOT IN (known_legitimate_services_ips)
      RETURN user_agent, source_ip, count, timestamp
- question: Can machine learning models classify any incoming web requests as malicious reconnaissance based on their features?
  context: This question leverages machine learning to move beyond simple signatures and statistical outliers. By training a model on various features of a web request (like User-Agent complexity, header count, IP reputation), it can learn the subtle characteristics of malicious reconnaissance traffic. This provides a more sophisticated and adaptive method for detecting novel or customized attack tools in real-time.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Threat Intelligence Feed
  - Public-facing web servers
  - Reverse proxies
  - Cloud-hosted web applications
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a machine learning model application, not a direct query
      FOR each new web_request in http.log:
        EXTRACT features (user_agent_length, user_agent_entropy, ip_reputation, header_count, ...)
        PREDICT classification using trained_model(features)
        IF prediction == 'malicious_reconnaissance':
          ALERT with request_details
- question: Has any single external IP address generated an excessive number of '404 Not Found' errors in a short time frame?
  context: A high rate of 404 errors from a single IP is a strong indicator of forced browsing or content discovery, where an adversary is guessing file and directory names. This question uses a simple threshold-based rule to detect this brute-force behavior, which is a common tactic for finding hidden pages, configuration files, or administration portals.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SELECT source_ip, destination_server FROM http.log
      WHERE status_code == 404
      GROUP BY source_ip, destination_server over a 1-minute window
      HAVING COUNT(*) > 100
      RETURN source_ip, destination_server, count
- question: Are any source IPs exhibiting anomalous request rates or error ratios compared to their own historical behavior?
  context: This question improves upon simple static thresholds by creating a dynamic, personalized baseline for each source IP. Legitimate users or services might have high request rates, but their behavior is typically consistent. An adversary's scanning activity will likely deviate significantly from an IP's normal pattern. Alerting on deviations from an IP's own 95th percentile for request rates and error ratios helps to identify behavioral changes indicative of reconnaissance.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each source_ip, calculate historical baseline (95th percentile of request_rate and error_ratio)
      FOR each source_ip in http.log over a 10-minute sliding window:
        current_request_rate = CALCULATE request rate
        current_error_ratio = CALCULATE (4xx_count + 5xx_count) / 2xx_count
        IF current_request_rate > (baseline_request_rate + 3*std_dev)
        OR current_error_ratio > (baseline_error_ratio + 3*std_dev):
          ALERT with source_ip and activity_details
- question: Does the volume of 404 errors from any source IP show a statistically significant deviation from its forecasted normal pattern?
  context: This question applies time-series analysis to detect anomalies in the rate of 404 errors for each source IP. Models like ARIMA can learn the normal rhythm and seasonality of an IP's error generation (e.g., a misconfigured legitimate tool might generate consistent errors). An alert is triggered only when the observed error count breaks this learned pattern, which is more effective at detecting sudden scanning activity while reducing noise from chronically misconfigured but benign sources.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a time-series model application, not a direct query
      FOR each source_ip:
        // Train model on historical 404 error counts for this IP
        model = TRAIN ARIMA on last 30 days of 404_counts(source_ip)
        // Apply model to current data
        forecasted_range = model.predict()
        observed_count = GET current 404_count(source_ip)
        IF observed_count is outside forecasted_range:
          ALERT with source_ip and deviation_details
- question: Are any unauthorized external IP addresses attempting a full DNS zone transfer (AXFR/IXFR)?
  context: A DNS zone transfer (AXFR or IXFR query) is a mechanism for replicating DNS databases. While legitimate for secondary DNS servers, an unsolicited request from an unknown external IP is a classic and highly effective reconnaissance technique. It allows an adversary to obtain a full list of all DNS records for a domain (e.g., all servers, subdomains), providing a comprehensive map of the organization's internet-facing infrastructure. Such an event should be treated as a high-priority incident.
  answer_sources:
  - Zeek dns.log
  - Authoritative external DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SELECT source_ip, qtype FROM dns.log
      WHERE qtype IN ('AXFR', 'IXFR')
      AND source_ip NOT IN (approved_dns_server_list)
      RETURN source_ip, qtype, timestamp
- question: Are any external IPs generating a high rate of DNS queries for non-existent subdomains or showing high randomness in their query names?
  context: Adversaries often try to discover subdomains by brute-forcing or using wordlists (e.g., 'dev', 'test', 'vpn'). This activity results in two key signals, a high percentage of queries for domains that don't exist (NXDOMAIN responses) and high randomness (entropy) in the queried names if they are using generated strings. This question aims to detect this behavior by flagging IPs that exhibit both a high NXDOMAIN ratio and high query entropy, which strongly indicates a subdomain enumeration attack.
  answer_sources:
  - Zeek dns.log
  - Authoritative external DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Calculate baseline entropy for normal traffic
      FOR each source_ip over a 5-minute window:
        subdomain_entropy = CALCULATE Shannon_entropy(qname)
        nxdomain_ratio = COUNT(rcode == 'NXDOMAIN') / COUNT(*)
        IF subdomain_entropy > baseline_entropy
        AND nxdomain_ratio > 0.80:
          ALERT with source_ip, entropy_score, nxdomain_ratio
- question: Can we identify anomalous clusters of DNS query behavior that are characteristic of reconnaissance?
  context: This question uses unsupervised machine learning (clustering) to find groups of IPs behaving similarly without pre-defined rules. Legitimate clients, forwarders, and malicious scanners will naturally form different clusters based on their DNS query patterns (rate, error ratio, entropy, etc.). The DBSCAN algorithm is particularly useful as it can identify outlier clusters that represent anomalous activity, such as a group of IPs all performing subdomain enumeration. This helps find coordinated or distributed reconnaissance.
  answer_sources:
  - Zeek dns.log
  - Authoritative external DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a clustering model application, not a direct query
      // 1. Feature Engineering: For each source IP, create a feature vector
      features = [query_rate, nxdomain_ratio, qname_entropy, qtype_distribution]
      // 2. Clustering: Apply DBSCAN to the feature vectors
      clusters = DBSCAN(all_ip_features)
      // 3. Analysis: Identify anomalous clusters
      FOR each cluster in clusters:
        IF cluster_properties match (high_rate, high_nxdomain, high_entropy):
          ALERT on all IPs in that anomalous_cluster
- question: Are accounts recently exposed in public data breaches being used in failed login attempts against our external services?
  context: Adversaries search public data breach dumps for employee credentials and then test them against corporate external services (like VPN or OWA). This is known as credential stuffing. This question provides an early warning of this activity by directly correlating failed external logins (Event ID 4625, Logon Type 3) with usernames that have recently appeared in a threat intelligence breach feed. An alert here indicates an adversary is actively testing compromised credentials against your systems.
  answer_sources:
  - Windows Event ID 4625
  - Zeek conn.log
  - Threat Intelligence Breach Feed
  - VPN concentrators
  - Externally-facing authentication servers (e.g., ADFS, Exchange)
  - Remote Desktop Gateway servers
  - Cloud Identity Providers (e.g., Azure AD)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN (Windows Event Logs) WITH (Breach Feed)
      ON (username)
      WHERE event_id == 4625
      AND logon_type == 3
      AND breach_date > (now - 90 days)
      RETURN username, source_ip, timestamp
- question: For any user account that has appeared in a data breach, is there a statistical anomaly in its rate of failed external logins?
  context: This question adds a layer of behavioral analysis to the detection of credential stuffing. Instead of just alerting on a single failed login for a breached account, it looks for a significant *change* in behavior. By baselining the normal 'background noise' of failed logins for each user, we can more reliably detect a targeted attack, which will manifest as a sharp increase (e.g., more than 3 standard deviations above the mean) in failures after their credentials have been exposed.
  answer_sources:
  - Windows Event ID 4625
  - Zeek conn.log
  - Threat Intelligence Breach Feed
  - VPN concentrators
  - Externally-facing authentication servers (e.g., ADFS, Exchange)
  - Remote Desktop Gateway servers
  - Cloud Identity Providers (e.g., Azure AD)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each user in breach_feed:
      // 1. Establish baseline of hourly failed logins (Event 4625, Type 3)
      baseline_mean, baseline_std_dev = CALCULATE stats for user
      // 2. Monitor for anomalies
      current_hourly_failures = COUNT failed logins in last hour for user
      IF current_hourly_failures > (baseline_mean + 3 * baseline_std_dev):
        ALERT with username, failure_count, source_ips
- question: Has a change point detection algorithm identified a sudden and sustained shift in the rate of failed external logins for high-value or recently breached accounts?
  context: This question employs a more advanced statistical technique, change point detection, to identify the precise moment a credential stuffing attack begins. Unlike simple thresholding, algorithms like CUSUM are designed to detect a persistent shift in the statistical properties of a time series. When applied to failed login events, it can pinpoint a sustained attack, distinguishing it from random, isolated failed login attempts, and providing a higher-fidelity signal for investigation.
  answer_sources:
  - Windows Event ID 4625
  - Zeek conn.log
  - Threat Intelligence Breach Feed
  - VPN concentrators
  - Externally-facing authentication servers (e.g., ADFS, Exchange)
  - Remote Desktop Gateway servers
  - Cloud Identity Providers (e.g., Azure AD)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a change point detection model application
      FOR each high_value_or_breached_user:
        // Create time series of failed login events (Event 4625, Type 3)
        login_failure_timeseries = GET events for user
        // Apply algorithm
        change_points = CUSUM_algorithm(login_failure_timeseries)
        IF change_points detected:
          ALERT with username, detected_change_point_time