name: T1548.003: Sudo and Sudo Caching
id: c3a0b1d2-e4f6-4a8b-9c1d-5e6f7a0b1c2d
description: This playbook helps investigate potential privilege escalation and defense evasion through the abuse of sudo and sudo caching. It addresses scenarios where adversaries execute sudo with malicious binaries, leverage Living-off-the-Land Binaries (LOLBins), run sudo from anomalous parent processes, or use it with obfuscated arguments. It also covers the abuse of sudo credential caching to run multiple commands without re-authentication. Furthermore, the playbook investigates defense evasion techniques such as modifying /etc/sudoers files to grant passwordless access, disable logging, or relax security controls, and using sudo to stop security services or clear logs.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a sudo process being executed with a binary that has a known malicious file hash?
  context: Adversaries may replace the legitimate `sudo` binary with a malicious version or use a separate malicious tool with `sudo` privileges. Comparing the file hash of the executed binary against a threat intelligence feed of known malicious signatures is a high-fidelity method for detecting this specific type of compromise.
  answer_sources:
  - Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)
  - File Creation Logs
  - Zeek conn.log
  - Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | hash(process_path) | lookup threat_intel_hashes on file_hash | where match_found
- question: Has a sudo command been spawned by a rare or unexpected parent process?
  context: Legitimate `sudo` commands are typically initiated from interactive shells like `bash` or `zsh`, or by `sshd` for remote administration. A `sudo` command spawned by an unusual parent, such as a web server daemon (`nginx`, `apache2`) or another application, is highly suspicious and can indicate that a compromised service is being used to escalate privileges.
  answer_sources:
  - Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)
  - File Creation Logs
  - Zeek conn.log
  - Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | stats count by parent_process | identify rare parent_processes (e.g., bottom 5% frequency) | alert on new sudo executions from rare parents
- question: Does a sudo execution exhibit characteristics that a machine learning model classifies as malicious?
  context: A machine learning classifier can learn the complex patterns of legitimate `sudo` usage by analyzing features like the parent process, user account, terminal presence (TTY), and the command itself. Events that deviate significantly from this learned normal behavior can be flagged as potentially malicious, helping to detect novel or subtle abuse techniques.
  answer_sources:
  - Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)
  - File Creation Logs
  - Zeek conn.log
  - Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream process_creation where process_name == "sudo" | extract_features(parent_process, user, tty, command) | score_event with trained_logistic_regression_model | alert if score > 0.85
- question: Is sudo being used to execute a command with arguments commonly associated with Living-off-the-Land (LOLBin) abuse or shared object hijacking?
  context: Adversaries abuse legitimate system utilities (LOLBins) with `sudo` to perform malicious actions, such as creating reverse shells with `nmap` or executing code with `find`. They may also use environment variables like `LD_PRELOAD` to load malicious shared objects. Scanning command-line arguments for these specific patterns is an effective way to detect this technique.
  answer_sources:
  - Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)
  - All Linux/macOS endpoints and servers with `sudo` installed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | filter command_line with regex for LOLBin patterns (e.g., "find .* -exec", "LD_PRELOAD=") | alert on match
- question: Has a sudo command been executed with unusually complex or high-entropy arguments, suggesting obfuscation?
  context: To evade simple signature-based detection, adversaries often obfuscate their commands using encoding (like Base64) or complex character sequences. This results in a command-line string with high Shannon entropy compared to typical administrative commands. Monitoring for high-entropy `sudo` commands can help uncover these evasive actions.
  answer_sources:
  - Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)
  - All Linux/macOS endpoints and servers with `sudo` installed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | calculate shannon_entropy(command_line) | compare to user/system baseline | alert if entropy > (mean + 3*stdev)
- question: Is a sudo command an outlier that does not fit into established clusters of normal administrative commands?
  context: Most administrative `sudo` commands are repetitive and fall into common patterns. By vectorizing commands and using a clustering algorithm like DBSCAN, we can group these legitimate commands together. Any command that does not fit into a cluster (i.e., is classified as a noise point) is an anomaly and warrants investigation as a potentially unique and malicious command.
  answer_sources:
  - Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)
  - All Linux/macOS endpoints and servers with `sudo` installed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | vectorize(command_line) using TF-IDF | apply DBSCAN clustering model | alert on commands classified as noise/outliers
- question: Was sudo executed by a user who is not explicitly authorized in the /etc/sudoers configuration?
  context: The `/etc/sudoers` file and its included directory define exactly which users and groups are permitted to use `sudo`. Any `sudo` execution by a user not on this allow-list is a direct violation of policy and a strong indicator of misconfiguration or compromise, such as an attacker gaining access to an unauthorized account.
  answer_sources:
  - Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)
  - Authentication Logs (/var/log/secure, /var/log/auth.log)
  - Zeek ssh.log
  - Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | get executing_user | lookup user in parsed_sudoers_allowlist | alert if user not in allowlist
- question: Has an authorized user executed a sudo command that is rare for them or that they have never run before?
  context: Even authorized users have predictable patterns of `sudo` usage related to their job function. When a user executes a command that is statistically rare for their own history (e.g., a web developer suddenly running kernel-level commands), it can indicate that their account has been compromised and is being used for activities outside their normal duties.
  answer_sources:
  - Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)
  - Authentication Logs (/var/log/secure, /var/log/auth.log)
  - Zeek ssh.log
  - Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | build historical command frequency profile per user | for new command, check if it's new or in bottom 5% of user's frequency | alert if true
- question: Is there an anomalous spike in the volume of sudo commands executed by a specific user?
  context: A sudden, sharp increase in the number of `sudo` commands from a single user can be indicative of automated activity, such as a script being run by an attacker, or credential abuse. A time-series anomaly detection model can learn the normal rhythm of a user's `sudo` activity and alert when the volume deviates significantly from the predicted forecast.
  answer_sources:
  - Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)
  - Authentication Logs (/var/log/secure, /var/log/auth.log)
  - Zeek ssh.log
  - Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: aggregate sudo count per user per hour | stream data to time-series anomaly model (ARIMA/Prophet) | alert if observed count exceeds forecasted range
- question: Has a non-interactive sudo command been executed shortly after an interactive one by the same user on the same host?
  context: Sudo caches credentials for a short period (e.g., 15 minutes) after a user authenticates in an interactive session. Adversaries can abuse this by having a malicious script or process, which runs without a terminal (non-interactively), execute `sudo` commands without needing a password. This stateful rule specifically targets this cache abuse scenario.
  answer_sources:
  - Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)
  - File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/
  - All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: trigger on sudo event where tty is null | search for sudo event in last 15 mins from same user/host where tty is not null | alert if found
- question: Has the time between a user's consecutive sudo commands suddenly decreased to an unusually low value?
  context: Human-driven `sudo` usage typically has a natural delay between commands. A sudden flurry of commands with very short time deltas (< 60 seconds) between them, especially if they are non-interactive, suggests automated execution by a script. Monitoring the median time delta can detect this shift from manual to automated behavior.
  answer_sources:
  - Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)
  - File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/
  - All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for each user, calculate time delta between consecutive sudo commands | maintain historical median delta | alert if current median delta drops below 10th percentile of historical median
- question: Has a user's sudo activity followed a sequence of states (e.g., interactive to rapid non-interactive) that a Hidden Markov Model flags as anomalous?
  context: User sessions can be modeled as sequences of states (e.g., 'Interactive Sudo', 'Non-Interactive Sudo'). A Hidden Markov Model (HMM) can learn the normal transition probabilities between these states. An unlikely sequence, such as a single interactive `sudo` followed by a long chain of non-interactive `sudo` commands, would be flagged by the model as a low-probability event indicative of cache abuse.
  answer_sources:
  - Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)
  - File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/
  - All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: model user sudo activity as state sequences (Interactive, Non-Interactive) | feed sequences to trained HMM | alert on low-probability sequences
- question: Has the /etc/sudoers file (or a file in /etc/sudoers.d/) been modified to disable logging or auditing?
  context: Adversaries may modify the `sudoers` configuration to hide their tracks by disabling logging mechanisms. Specifically, they might add directives like `!audit`, `!syslog`, or redirect logs to `/dev/null`. Monitoring `sudoers` files for these specific strings provides a direct way to detect this defense evasion technique.
  answer_sources:
  - File Integrity Monitoring (FIM) Logs
  - File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)
  - Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search FIM_logs where file_path contains "/etc/sudoers" | inspect file_diff for regex patterns like "!audit", "!syslog", "logfile=/dev/null" | alert on match
- question: Is the rate of change for sudoers configuration files on a host anomalously high?
  context: On most production systems, the `sudoers` configuration is static and rarely changes outside of planned maintenance or software updates. An unexpected modification is suspicious. Alerting when the rate of change deviates from the established baseline can help catch unauthorized modifications that might not be caught by specific string matching.
  answer_sources:
  - File Integrity Monitoring (FIM) Logs
  - File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)
  - Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: monitor sudoers file modifications | calculate rate of change per host | compare to 90-day baseline | alert if rate > (mean + 2*stdev) and not correlated with config_management_log
- question: Was a change to the sudoers configuration file initiated by a suspicious process?
  context: Legitimate changes to `sudoers` are typically made by configuration management tools (Puppet, Ansible) or administrators using `visudo`. A modification made by a web shell, a script interpreter like `bash`, or any other unexpected process is a strong indicator of malicious activity. A classifier can distinguish between these legitimate and suspicious change sources.
  answer_sources:
  - File Integrity Monitoring (FIM) Logs
  - File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)
  - Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: on sudoers file modification, get modifying_process_parent, user, time_of_day, content_diff | score with trained_random_forest_model | alert if classified as suspicious
- question: Has a NOPASSWD or !tty_tickets rule been added to the sudoers configuration?
  context: The `NOPASSWD` directive allows a user to run commands via `sudo` without entering their password, creating a powerful persistence and privilege escalation mechanism for an attacker. The `!tty_tickets` directive makes credential caching global, which facilitates abuse from non-interactive sessions. Detecting the addition of these specific directives is critical for security.
  answer_sources:
  - File Integrity Monitoring (FIM) Logs
  - File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)
  - Process Creation Logs (e.g., Sysmon for Linux Event ID 1)
  - Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search FIM_logs where file_path contains "/etc/sudoers" | inspect file_diff for "NOPASSWD:" or "!tty_tickets" | if match, look for subsequent process killall/pkill by same user | alert
- question: Has a change to the sudoers file significantly increased the system's aggregate risk score related to passwordless sudo rules?
  context: Not all `NOPASSWD` rules are equal. A rule for a specific, non-critical command is less risky than one granting a user passwordless access to run `ALL` commands. By assigning scores to users and commands, we can quantify the risk of the `sudoers` policy and alert on any change that pushes the system's total risk score over a defined threshold.
  answer_sources:
  - File Integrity Monitoring (FIM) Logs
  - File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)
  - Process Creation Logs (e.g., Sysmon for Linux Event ID 1)
  - Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: on sudoers change, parse all NOPASSWD rules | calculate risk_score for each rule based on user and command | sum scores to get aggregate_system_risk | alert if aggregate_system_risk > threshold
- question: Does a change to the sudoers file represent a structurally significant and high-impact change in the user-to-command permissions graph?
  context: A `sudoers` file can be represented as a graph connecting users to the commands they can run. A legitimate change might add a single, specific permission (a small edge). A malicious change, like `user ALL=(ALL) NOPASSWD: ALL`, creates a powerful, high-impact edge connecting a node to all others. Graph anomaly detection can identify these structurally significant changes that dramatically alter the permissions landscape.
  answer_sources:
  - File Integrity Monitoring (FIM) Logs
  - File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)
  - Process Creation Logs (e.g., Sysmon for Linux Event ID 1)
  - Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: on sudoers change, model old and new config as permission graphs | use graph anomaly algorithm to compare graphs | alert on detection of structurally significant new edges (e.g., high-centrality nodes)
- question: Has sudo been used to execute a command from a watchlist of known defense evasion techniques?
  context: Adversaries frequently use `sudo` to run specific commands that disable security tools (`systemctl stop auditd`), turn off auditing (`auditctl -e 0`), clear logs, or disable shell history (`history -c`). Maintaining a watchlist of these high-risk commands and alerting on their execution via `sudo` is a straightforward and effective detection strategy.
  answer_sources:
  - Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Zeek command.log
  - Zeek notice.log
  - Security infrastructure servers (e.g., SIEM forwarders, EDR management consoles), All Linux/macOS hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where process_name == "sudo" | check if command_line contains string from defense_evasion_watchlist (e.g., "systemctl stop auditd", "history -c") | alert on match
- question: Was a sudo command executed that is uncommon for the established role of the system (e.g., web server, database)?
  context: Systems in an environment typically have specific roles, and the administrative commands run on them are consistent with those roles. A command that falls outside the common vocabulary for a system's role is anomalous. For example, running compiler tools on a web server could be suspicious. This method flags commands that are not necessarily malicious on their own, but are out of place for the system's function.
  answer_sources:
  - Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Zeek command.log
  - Zeek notice.log
  - Security infrastructure servers (e.g., SIEM forwarders, EDR management consoles), All Linux/macOS hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for each system role, build profile of top 95% most frequent sudo commands | on new sudo event, check if command is in the profile for that system's role | alert if not found
- question: Did a sudo command occur as part of a sequence of commands that is highly improbable or indicative of an attack?
  context: The order of commands can be more revealing than any single command. A sequence-to-sequence model can learn the normal "grammar" of administrative sessions. An attack sequence, like disabling a firewall, downloading a payload, and then executing it, would be recognized by the model as a very low-probability (and therefore suspicious) sequence of actions.
  answer_sources:
  - Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Zeek command.log
  - Zeek notice.log
  - Security infrastructure servers (e.g., SIEM forwarders, EDR management consoles), All Linux/macOS hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: model admin sessions as command sequences | feed sequences to trained seq2seq model | alert on sequences with low probability scores
- question: Has sudo been executed by a non-interactive parent process, such as a web server, that also has an active external network connection?
  context: This is a more specific and higher-fidelity version of detecting `sudo` from an unusual parent. Correlating a `sudo` execution from a process like `nginx` or `apache2` with network logs showing that the parent process is communicating with an external IP address strongly suggests a web shell or remote code execution exploit is being used to escalate privileges.
  answer_sources:
  - Process Creation Logs with parent process info (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Zeek conn.log
  - Internet-facing servers (e.g., web servers, API gateways), Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: on sudo event, get parent_process_pid | if parent is in ('apache2', 'nginx', etc.), search network_logs for connections from parent_process_pid to external_ip | alert on correlation
- question: For a specific, common sudo command, do its arguments have an unusually high character entropy?
  context: While a previous question looked at overall command entropy, this focuses on the arguments of a specific command. For example, the argument for `sudo apt-get install <package>` is normally a simple package name. If this argument suddenly appears with high entropy, it could indicate an attempt to obfuscate a malicious package name or exploit a vulnerability in the package manager itself.
  answer_sources:
  - Process Creation Logs with parent process info (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Zeek conn.log
  - Internet-facing servers (e.g., web servers, API gateways), Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for each sudo event, parse command and arguments | calculate entropy of arguments | compare to historical entropy mean/stdev for that specific command | alert if entropy > (mean + 3*stdev)
- question: Does a sudo execution fall outside the boundary of normal behavior as defined by a One-Class SVM model?
  context: A One-Class SVM is an ideal algorithm for anomaly detection when you have a large amount of normal data but few or no examples of malicious activity. By training it on features of legitimate `sudo` events, the model learns a "bubble" that encapsulates normalcy. Any new event that falls outside this bubble is, by definition, an anomaly and a candidate for investigation.
  answer_sources:
  - Process Creation Logs with parent process info (e.g., Auditd, Sysmon for Linux Event ID 1)
  - Zeek conn.log
  - Internet-facing servers (e.g., web servers, API gateways), Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream sudo events | extract features (parent_process, user, arg_entropy, tty) | feed features to trained One-Class SVM model | alert on events classified as outliers