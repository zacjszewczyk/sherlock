name: "T1548.003: Sudo and Sudo Caching"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: |
  This playbook is designed to detect adversarial abuse of sudo and sudo caching for privilege escalation and defense evasion. It addresses threats where adversaries exploit sudo to run commands with elevated privileges, often using Living-off-the-Land (LOLBin) techniques, obfuscated commands, or by leveraging the sudo credential cache from non-interactive shells. The playbook also focuses on identifying defense evasion, where adversaries modify the `/etc/sudoers` configuration to grant themselves passwordless access (`NOPASSWD`), relax security controls (`!tty_tickets`), or disable logging mechanisms (`!audit`, `logfile=/dev/null`). It leverages a combination of symbolic rules, statistical analysis, and machine learning models to detect these activities by analyzing process execution data, command-line arguments, file integrity monitoring logs, and user activity patterns.
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a `sudo` process execution associated with a known malicious file hash?"
    context: |
      This question aims to detect the most direct form of `sudo` abuse, where the `sudo` binary itself has been replaced or trojanized. By comparing the file hash of the executed binary against a feed of known malicious signatures, analysts can quickly identify compromised `sudo` utilities, which is a critical indicator of a system-level compromise.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)"
      - "File Creation Logs"
      - "Zeek conn.log"
      - "Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process creation logs WHERE process_name == 'sudo'.
          FOR EACH event, GET file_hash(process_path).
          CHECK file_hash against threat_intel_feed.
          ALERT on match.
  - question: "Is `sudo` being executed by an unusual or statistically rare parent process?"
    context: |
      Legitimate `sudo` commands are typically initiated from interactive user shells (like `bash` or `zsh`) or administrative scripts. An adversary might execute `sudo` from an unconventional parent process, such as a web server daemon (`nginx`, `apache2`) following a web shell exploit. This question helps identify such anomalies by baselining normal parent-child relationships and flagging deviations, which can indicate post-exploitation activity.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)"
      - "File Creation Logs"
      - "Zeek conn.log"
      - "Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process creation logs WHERE process_name == 'sudo'.
          GROUP BY parent_process_name.
          CALCULATE frequency distribution over last 30 days.
          ALERT if current parent_process_name is new or in bottom 5% frequency.
  - question: "Does a `sudo` execution event exhibit characteristics that a machine learning model classifies as likely malicious?"
    context: |
      This question leverages a machine learning model to perform a holistic assessment of a `sudo` event. By training on features like the parent process, user account, TTY presence, and the command itself, the model can learn the subtle patterns of both benign and malicious activity. This allows for the detection of complex threats that might not trigger simpler, single-indicator rules.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)"
      - "File Creation Logs"
      - "Zeek conn.log"
      - "Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR EACH new 'sudo' process event, EXTRACT features (parent_process, user, tty_present, command_text).
          INPUT features into trained logistic regression model.
          ALERT if prediction_probability > 0.85.
  - question: "Is a `sudo` command being executed with arguments or environment variables indicative of Living-off-the-Land (LOLBin) abuse?"
    context: |
      Adversaries often use legitimate system utilities (LOLBins) in unexpected ways to execute malicious code, create reverse shells, or escalate privileges. This question focuses on detecting these abuses by searching `sudo` command arguments for patterns associated with known LOLBin techniques (e.g., using `find`, `awk`, or `nmap` for execution) or the manipulation of environment variables like `LD_PRELOAD` to load malicious shared objects.
    answer_sources:
      - "Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)"
      - "Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)"
      - "All Linux/macOS endpoints and servers with `sudo` installed"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process logs WHERE process_name == 'sudo'.
          APPLY regex to command_line_arguments for patterns like 'find -exec', 'LD_PRELOAD', 'awk BEGIN {system()}', etc.
          ALERT on regex match.
  - question: "Does the command line of a `sudo` execution have an unusually high entropy, suggesting obfuscation?"
    context: |
      Adversaries may obfuscate commands to evade simple signature-based detection. Highly complex or randomized strings, such as those resulting from Base64 encoding or other obfuscation techniques, have higher Shannon entropy than typical human-readable commands. By baselining the normal entropy of a user's or system's `sudo` commands, this question helps detect outliers that may represent obfuscated malicious payloads.
    answer_sources:
      - "Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)"
      - "Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)"
      - "All Linux/macOS endpoints and servers with `sudo` installed"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR EACH 'sudo' event, CALCULATE Shannon entropy of command_line_string.
          COMPARE to historical mean and standard deviation for the user/host.
          ALERT if entropy > (mean + 3 * std_dev).
  - question: "Is a `sudo` command execution identified as a statistical outlier or noise by a clustering model?"
    context: |
      This question uses an unsupervised machine learning approach to find anomalous `sudo` commands without pre-existing labels. Legitimate administrative commands are often repetitive and form dense clusters of activity. By using an algorithm like DBSCAN, we can group these normal commands together. Any command that does not fit into a cluster (a 'noise point') is by definition rare and unusual, making it a strong candidate for investigation as potentially malicious.
    answer_sources:
      - "Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)"
      - "Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)"
      - "All Linux/macOS endpoints and servers with `sudo` installed"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          VECTORIZE 'sudo' command arguments using TF-IDF.
          APPLY DBSCAN clustering model to vectors.
          ALERT on any command classified as a 'noise' point.
  - question: "Is a user attempting to execute `sudo` who is not explicitly authorized in the sudoers configuration?"
    context: |
      This question provides a high-fidelity method for detecting unauthorized `sudo` attempts. By parsing the `/etc/sudoers` file and its included directories, an accurate allow-list of authorized users can be created. Any attempt by a user not on this list to run `sudo` is a clear policy violation and a strong indicator of a misconfiguration or malicious activity, such as an adversary attempting to escalate privileges after compromising a non-privileged account.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)"
      - "Authentication Logs (/var/log/secure, /var/log/auth.log)"
      - "Zeek ssh.log"
      - "Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          PARSE /etc/sudoers to create allow_list.
          SEARCH auth/process logs for 'sudo' executions.
          FOR EACH event, CHECK if executing_user is in allow_list.
          ALERT if user is not in allow_list.
  - question: "Is an authorized user executing a `sudo` command that is rare for them or one they have never executed before?"
    context: |
      Even authorized users have patterns of behavior. An administrator might frequently use `sudo` to restart services or manage packages, but would rarely use it to compile code or run esoteric networking tools. This question establishes a baseline of normal `sudo` commands for each user. Executing a command that is statistically rare or entirely new for that specific user can indicate that their account has been compromised or that they are performing an unusual, and potentially unauthorized, action.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)"
      - "Authentication Logs (/var/log/secure, /var/log/auth.log)"
      - "Zeek ssh.log"
      - "Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR EACH user, BUILD profile of sudo command frequency over 90 days.
          ON new sudo event, CHECK if command is new for user or in bottom 5% of their frequency.
          ALERT if true.
  - question: "Is a user executing `sudo` commands at a volume or frequency that is anomalously high compared to their normal behavior?"
    context: |
      A sudden, sharp increase in the number of `sudo` commands executed by a single user can be a sign of automated activity, such as a script run by an adversary, or a brute-force attempt against a service. This question applies time-series analysis to model the expected volume of `sudo` activity for each user. An alert is generated when the observed activity significantly deviates from the predicted forecast, pointing to a potential credential compromise or abuse.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)"
      - "Authentication Logs (/var/log/secure, /var/log/auth.log)"
      - "Zeek ssh.log"
      - "Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL sudo command count per user per hour using a time-series algorithm (e.g., ARIMA).
          FOR EACH hour, COMPARE actual count to forecasted range.
          ALERT if actual count exceeds upper bound of forecast.
  - question: "Is a non-interactive `sudo` command being executed shortly after an interactive one by the same user, suggesting sudo cache abuse?"
    context: |
      Sudo can cache credentials for a short period (e.g., 15 minutes) after a user successfully authenticates in an interactive session (with a TTY). Adversaries can abuse this by running subsequent malicious commands via `sudo` from a non-interactive shell (e.g., a web shell or reverse shell) without needing to re-enter a password. This question specifically targets this abuse pattern by looking for a non-TTY `sudo` execution that leverages a recently created interactive credential cache.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)"
      - "File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/"
      - "All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          DETECT sudo event with tty=null.
          SEARCH for a sudo event from same_user on same_host with tty!=null within the last 15 minutes.
          ALERT if found.
  - question: "Is a user suddenly executing `sudo` commands in rapid succession, at a rate inconsistent with their historical baseline?"
    context: |
      Manual administrative tasks performed with `sudo` typically have a natural delay between them. A script or automated tool, however, will execute commands almost instantaneously. This question analyzes the time difference (delta) between a user's consecutive `sudo` commands. A sudden, sustained decrease in this time delta, especially when correlated with non-interactive sessions, can indicate the execution of a malicious script abusing cached `sudo` credentials.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)"
      - "File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/"
      - "All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR EACH user, CALCULATE median time delta between consecutive sudo commands historically.
          ON new sudo event, CALCULATE recent median time delta.
          ALERT if recent median drops significantly below historical median.
  - question: "Does a user's sequence of interactive and non-interactive `sudo` executions match a pattern that a Hidden Markov Model flags as anomalous?"
    context: |
      This question models user behavior as a sequence of states (e.g., 'Interactive Sudo', 'Non-Interactive Sudo'). A Hidden Markov Model (HMM) can learn the normal transition probabilities between these states for a typical user. An adversary abusing sudo caching might exhibit a sequence with a very low probability under the model, such as a single 'Interactive Sudo' state followed by a long and rapid burst of 'Non-Interactive Sudo' states. The HMM can detect this anomalous sequence, indicating likely abuse.
    answer_sources:
      - "Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)"
      - "File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/"
      - "All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          DEFINE states: InteractiveSudo, NonInteractiveSudo, NoSudo.
          TRAIN HMM on user command sequences.
          FOR EACH new sequence of events, CALCULATE probability.
          ALERT if sequence probability is below a learned threshold.
  - question: "Has the `sudoers` configuration file been modified to disable or redirect logging?"
    context: |
      To cover their tracks, adversaries may modify the `sudoers` file to prevent their actions from being logged. This question uses File Integrity Monitoring (FIM) to detect changes to `/etc/sudoers` or files in `/etc/sudoers.d/`. It specifically looks for the addition of directives like `!audit`, `!syslog`, or `logfile=/dev/null`, which are explicit attempts to blind security monitoring tools. Such a modification is a high-confidence indicator of defense evasion.
    answer_sources:
      - "File Integrity Monitoring (FIM) Logs"
      - "File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)"
      - "Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MONITOR file modification events for '/etc/sudoers' and '/etc/sudoers.d/*'.
          ON event, INSPECT content change.
          ALERT if added content matches regex for '!audit', '!syslog', or 'logfile=/dev/null'.
  - question: "Is the `sudoers` configuration file being modified at an anomalous rate?"
    context: |
      On most production systems, the `sudoers` configuration is static and changes infrequently, usually only during planned maintenance or deployments by configuration management tools. An unexpected modification is suspicious. This question establishes a baseline for how often these files change on each host and flags any deviation, which could indicate an adversary manually editing the file outside of established change control processes.
    answer_sources:
      - "File Integrity Monitoring (FIM) Logs"
      - "File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)"
      - "Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR EACH host, CALCULATE baseline rate of change for sudoers files.
          MONITOR for new modifications.
          ALERT if the rate of change exceeds (baseline_mean + 2 * std_dev).
  - question: "Does a modification to the `sudoers` file have characteristics that a machine learning model classifies as suspicious?"
    context: |
      Not all `sudoers` modifications are malicious. This question uses a machine learning classifier to differentiate between legitimate changes (e.g., made by a Puppet agent) and suspicious ones (e.g., made by a user's bash shell). By analyzing features like the process that made the change, the user context, and the time of day, the model can provide a more nuanced detection and reduce false positives from legitimate administrative activity.
    answer_sources:
      - "File Integrity Monitoring (FIM) Logs"
      - "File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)"
      - "Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          ON sudoers file modification, EXTRACT features (parent_process, user, time_of_day, content_diff).
          INPUT features to trained classification model.
          ALERT if classification is 'suspicious'.
  - question: "Has the `sudoers` configuration been modified to relax security controls, such as by adding `NOPASSWD` or `!tty_tickets` rules?"
    context: |
      Adversaries may modify the `sudoers` file to make it easier to execute commands with elevated privileges. Adding a `NOPASSWD` rule allows a user to run `sudo` without a password, while `!tty_tickets` allows credential caching to work even from non-interactive sessions. This question looks for these specific, high-risk modifications, which directly weaken the system's security posture and facilitate further malicious action.
    answer_sources:
      - "File Integrity Monitoring (FIM) Logs"
      - "File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)"
      - "Process Creation Logs (e.g., Sysmon for Linux Event ID 1)"
      - "Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MONITOR file modification events for sudoers files.
          ON event, INSPECT content change.
          ALERT if added content contains 'NOPASSWD:' or '!tty_tickets'.
  - question: "Has a change to the `sudoers` file significantly increased the system's overall risk score related to passwordless sudo execution?"
    context: |
      This question moves beyond simple detection of `NOPASSWD` to quantify its impact. A `NOPASSWD` rule for a limited user on a specific command is less risky than one granting a web server user passwordless root access for all commands. By assigning scores to users and commands, we can calculate an aggregate risk score for the system. This allows analysts to focus on changes that introduce the most significant risk, rather than treating all `NOPASSWD` additions equally.
    answer_sources:
      - "File Integrity Monitoring (FIM) Logs"
      - "File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)"
      - "Process Creation Logs (e.g., Sysmon for Linux Event ID 1)"
      - "Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          DEFINE risk scores for users and commands.
          ON sudoers file change, PARSE NOPASSWD rules and CALCULATE new aggregate risk score.
          ALERT if new_score exceeds (old_score + threshold).
  - question: "Does a change to the `sudoers` file represent a structurally significant and anomalous change in the system's permissions graph?"
    context: |
      The `sudoers` policy can be visualized as a graph connecting users to the commands they can run. Legitimate changes typically add a few specific connections (edges). A malicious change, like adding a user to the `wheel` group with a `NOPASSWD: ALL` rule, can create a massive structural shift in this graph, effectively connecting that user to all powerful commands. This question uses graph-based anomaly detection to identify such high-impact changes that fundamentally alter the security landscape of the host.
    answer_sources:
      - "File Integrity Monitoring (FIM) Logs"
      - "File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)"
      - "Process Creation Logs (e.g., Sysmon for Linux Event ID 1)"
      - "Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL sudoers policy as a user-command graph.
          ON file change, model the new graph.
          USE graph anomaly detection to compare old and new graphs.
          ALERT on structurally significant changes (e.g., large increase in node connectivity).
  - question: "Is `sudo` being used to execute a command known to disable security services, clear logs, or tamper with shell history?"
    context: |
      A common adversary action after gaining privileged access is to disable security controls to avoid detection. This question uses a simple but effective watchlist approach to detect the use of `sudo` to run commands that stop security daemons (e.g., `systemctl stop auditd`), disable security policies (`setenforce 0`), or clear evidence (`history -c`). An alert for any of these commands executed with `sudo` is a critical finding that requires immediate investigation.
    answer_sources:
      - "Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)"
      - "Zeek command.log"
      - "Zeek notice.log"
      - "Security infrastructure servers (e.g., SIEM forwarders, EDR management consoles), All Linux/macOS hosts"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process logs for sudo executions.
          MATCH command_line_arguments against a watchlist of defense evasion commands (e.g., 'systemctl stop auditd', 'history -c').
          ALERT on match.
  - question: "Is `sudo` being executed by a suspicious, non-interactive parent process, such as a web server daemon with active external network connections?"
    context: |
      This question specifically targets a common attack vector where an adversary compromises a public-facing service (like a web server) and uses that process to escalate privileges. An execution of `sudo` by a process like `apache2` or `nginx` is highly anomalous. Correlating this with network logs showing that the parent process is communicating with an external IP address significantly increases the confidence that this is part of an active intrusion.
    answer_sources:
      - "Process Creation Logs with parent process info (e.g., Auditd, Sysmon for Linux Event ID 1)"
      - "Zeek conn.log"
      - "Internet-facing servers (e.g., web servers, API gateways), Application servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          ALERT when 'sudo' parent process is in ('apache2', 'nginx', 'httpd').
          INCREASE severity if parent process PID has an active external network connection in network logs.
  - question: "Does a `sudo` execution fall outside the boundary of normal behavior as defined by a One-Class SVM model?"
    context: |
      This question uses a machine learning technique ideal for anomaly detection when there are few or no examples of malicious activity to train on. A One-Class Support Vector Machine (SVM) is trained only on legitimate `sudo` events, learning a boundary that encapsulates 'normal.' Any new `sudo` execution that falls outside this boundary is, by definition, an anomaly. This is effective for detecting novel or previously unseen attack techniques that don't match any known patterns.
    answer_sources:
      - "Process Creation Logs with parent process info (e.g., Auditd, Sysmon for Linux Event ID 1)"
      - "Zeek conn.log"
      - "Internet-facing servers (e.g., web servers, API gateways), Application servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          TRAIN One-Class SVM on feature vectors of legitimate sudo events.
          FOR EACH new event, create feature vector and classify with model.
          ALERT if classification is 'anomaly' or 'outlier'.