name: 'T1548.001: Setuid and Setgid'
id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
description: This playbook helps investigate whether an adversary has escalated privileges or evaded defenses using SUID or SGID bits on Linux systems. It addresses the full lifecycle of this technique, from discovering and setting SUID/SGID permissions using utilities like 'find' and 'chmod', to executing malicious or exploited binaries to gain root access. The playbook also covers methods for detecting these threats at rest, such as finding non-allowlisted SUID files or those matching known malicious hashes. Finally, it provides ways to detect post-exploitation behavior, such as a newly-privileged process spawning a root shell or making suspicious outbound network connections for C2 or data exfiltration.
type: technique
related:
  - 'TA0004: Privilege Escalation'
  - 'TA0005: Defense Evasion'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Have any processes been executed with elevated privileges (SUID/SGID) where the binary is known to be malicious?
    context: This question aims to detect the most direct form of malicious privilege escalation using SUID/SGID. An adversary may place a known malicious tool on a system, set the SUID bit, and execute it to gain root privileges. Matching the file hash of the executed binary against a threat intelligence feed provides a high-confidence indicator of compromise.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - Threat intelligence hash feed
      - All Linux endpoints and servers; Centralized log management platform (e.g., SIEM).
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE effective_user_id != real_user_id | HASH executed_binary | JOIN threat_intel_hashes ON hash | ALERT
  - question: Are there any SUID/SGID process executions with unusually complex or obfuscated command-line arguments?
    context: Adversaries often use complex, encoded, or long command-line arguments to pass exploit code or payloads to a vulnerable SUID binary. High Shannon entropy in the command line can indicate this type of obfuscation, which stands out from the typical, simple arguments used in legitimate operations. Baselining normal entropy for each SUID binary is key to spotting these anomalies.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - Threat intelligence hash feed
      - All Linux endpoints and servers; Centralized log management platform (e.g., SIEM).
    range: last 90 days
    queries:
      - pseudocode: SEARCH suid_process_logs | CALCULATE entropy(command_line) | COMPARE against baseline_entropy_for_binary | ALERT if entropy > 95th_percentile
  - question: Can we identify anomalous SUID/SGID process executions by clustering them based on their properties and finding outliers?
    context: This question uses machine learning to find "unknown unknowns." By clustering all SUID/SGID executions based on user, parent process, binary path, and arguments, most activity will form large, dense clusters representing normal behavior. Small, isolated clusters or noise points identified by algorithms like DBSCAN represent rare and suspicious execution patterns that warrant investigation.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - Threat intelligence hash feed
      - All Linux endpoints and servers; Centralized log management platform (e.g., SIEM).
    range: last 90 days
    queries:
      - pseudocode: MODEL suid_process_logs using DBSCAN on features (user, parent_process, path, cmd_args) | IDENTIFY noise_points or small_clusters | INVESTIGATE
  - question: Is an adversary using system utilities like 'find' or 'chmod' to discover or set SUID/SGID permissions on files?
    context: Before exploiting or creating a SUID/SGID binary, an adversary often needs to find existing ones or set the permissions on a file they've placed. Monitoring for the use of 'find' with '-perm' or 'chmod' with '+s' provides direct evidence of this reconnaissance or preparation activity. The risk is higher if the target file is a shell or located in a world-writable directory like '/tmp'.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - osquery process_events table
      - All Linux endpoints and servers, particularly multi-user systems and developer workstations; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE process_name IN ('find', 'chmod') AND command_line contains ('-perm', '+s', '4000') | ALERT
  - question: Has any user or host shown an abnormal frequency in searching for or setting SUID/SGID permissions?
    context: While a single 'find' or 'chmod' command might be legitimate, a sudden spike in this activity for a specific user or on a specific host is highly suspicious. By baselining normal activity and using statistical measures like Z-score, we can detect deviations that suggest an adversary is actively searching the filesystem for escalation opportunities.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - osquery process_events table
      - All Linux endpoints and servers, particularly multi-user systems and developer workstations; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: AGGREGATE count(suid_related_find_chmod) by user, host, day | CALCULATE Z-score against historical_baseline | ALERT if Z-score > 3
  - question: Is there a coordinated, environment-wide increase in SUID/SGID discovery or modification activity?
    context: This question aims to detect slow, low-observable campaigns that might not trigger single-host or single-user alerts. By forecasting the expected number of these commands across the entire environment using a time-series model, a significant deviation from the forecast can indicate a widespread, coordinated attack, even if the activity on each individual host is minimal.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - osquery process_events table
      - All Linux endpoints and servers, particularly multi-user systems and developer workstations; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: MODEL aggregate_suid_command_count using ARIMA/Prophet | FORECAST expected_count | ALERT if observed_count > forecasted_upper_bound
  - question: Has a legitimate SUID binary been exploited to spawn a root shell?
    context: A classic privilege escalation technique involves exploiting a vulnerability in a legitimate SUID program (like 'pkexec' or 'sudo') to make it execute a command it normally wouldn't, such as spawning a shell ('/bin/sh'). Detecting a non-root user running a SUID binary that then spawns a root-level shell is a strong indicator of a successful exploit.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd SYSCALL and EXECVE records
      - EDR process tree data
      - Critical Linux infrastructure, authentication servers, and standard user endpoints; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: JOIN process_creation_logs as parent, process_creation_logs as child ON parent.process_id = child.parent_process_id | WHERE parent.is_suid=true AND parent.user_id!=0 AND child.process_name IN ('sh', 'bash') AND child.effective_user_id=0 | ALERT
  - question: Is a legitimate SUID program spawning an unexpected or rare child process?
    context: Legitimate SUID programs typically have a predictable set of child processes. By creating a profile of these normal parent-child relationships, we can detect anomalies. For example, the 'passwd' utility should not be spawning 'bash'. Such an event is a major deviation from normal behavior and highly indicative of an exploit.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd SYSCALL and EXECVE records
      - EDR process tree data
      - Critical Linux infrastructure, authentication servers, and standard user endpoints; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: PROFILE child_processes for each suid_binary | FOR new_execution(suid_binary -> child_process) | CHECK if child_process is in profile | ALERT if child_process is rare or not_in_profile
  - question: Does the process execution chain originating from a SUID binary deviate from its normal structure?
    context: This extends the parent-child analysis to the entire execution tree. By modeling the complete graph of processes spawned after a SUID binary is run, we can detect more complex attacks. An adversary might hide their actions by having the SUID binary spawn a legitimate-looking process, which in turn spawns a malicious one. Graph-based anomaly detection can spot these abnormal structures.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd SYSCALL and EXECVE records
      - EDR process tree data
      - Critical Linux infrastructure, authentication servers, and standard user endpoints; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: MODEL process_graphs from suid_executions | FOR new_execution_graph | COMPARE graph_structure to baseline | ALERT if anomalous
  - question: Is a process that gained root privileges via SUID/SGID making outbound network connections to a known-malicious IP address?
    context: After successfully escalating privileges, an adversary's next step is often to establish a command and control (C2) channel. This question looks for that behavior by correlating a SUID-spawned root process with outbound network connections. A connection to an IP on a threat intelligence feed is a high-confidence indicator of post-exploitation activity.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Zeek conn.log
      - auditd network-related SYSCALL records
      - Network egress points (e.g., firewalls, proxies), DNS servers, all Linux hosts, and the centralized log management platform where network and host logs are correlated.
    range: last 90 days
    queries:
      - pseudocode: JOIN process_logs(suid_escalation), network_logs ON process_id, host | JOIN threat_intel_ips ON destination_ip | ALERT if match
  - question: Is a process that gained root privileges via SUID/SGID making an unusual or rare external network connection?
    context: Adversary C2 infrastructure is often unique and not widely contacted by legitimate corporate systems. This question aims to find C2 channels that are not yet on a threat intelligence list by looking for statistical rarity. A connection from a newly-privileged process to an IP, port, or Autonomous System Number (ASN) that is rarely seen across the entire enterprise is highly suspicious.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Zeek conn.log
      - auditd network-related SYSCALL records
      - Network egress points (e.g., firewalls, proxies), DNS servers, all Linux hosts, and the centralized log management platform where network and host logs are correlated.
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs from suid_escalated_processes | CALCULATE prevalence(destination_ip, destination_port, destination_asn) | ALERT if prevalence is low
  - question: Is a process that gained root privileges via SUID/SGID exfiltrating an anomalous amount of data?
    context: Beyond C2, a compromised process might be used for data exfiltration. This question focuses on detecting this by monitoring the volume of outbound data. A sudden, large spike in data transfer from a process that recently escalated privileges is a strong signal that an adversary is stealing data.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Zeek conn.log
      - auditd network-related SYSCALL records
      - Network egress points (e.g., firewalls, proxies), DNS servers, all Linux hosts, and the centralized log management platform where network and host logs are correlated.
    range: last 90 days
    queries:
      - pseudocode: MODEL outbound_data_volume for suid_escalated_processes using time-series | ALERT on anomalous spike in data_volume
  - question: Does a known malicious file with SUID/SGID permissions exist anywhere on the filesystem?
    context: This is a proactive hunting question. Instead of waiting for a malicious file to be executed, this approach seeks to find it at rest. Adversaries may place a malicious tool and set the SUID bit, hoping it goes unnoticed. Regularly scanning the entire filesystem for SUID/SGID files and checking their hashes against threat intelligence can uncover these dormant threats.
    answer_sources:
      - Filesystem scan results (e.g., from osquery)
      - File Integrity Monitoring (FIM) alerts
      - EDR file inventory
      - Threat intelligence hash feed
      - Filesystems of all Linux servers and endpoints, particularly standard executable paths ('/bin', '/usr/bin') and world-writable directories ('/tmp', '/var/tmp', '/dev/shm').
    range: last 90 days
    queries:
      - pseudocode: SCAN filesystem for files with suid/sgid permissions | HASH each file | JOIN threat_intel_hashes ON hash | ALERT if match
  - question: For a detected malicious SUID/SGID file, how rare is it globally?
    context: Not all malicious detections are equally urgent. Commodity malware might be widespread. However, a malicious file that is globally rare could indicate a targeted or novel attack. This question helps prioritize investigations by adding context from services like VirusTotal: a file that is both malicious and rare is a higher priority.
    answer_sources:
      - Filesystem scan results (e.g., from osquery)
      - File Integrity Monitoring (FIM) alerts
      - EDR file inventory
      - Threat intelligence hash feed
      - Filesystems of all Linux servers and endpoints, particularly standard executable paths ('/bin', '/usr/bin') and world-writable directories ('/tmp', '/var/tmp', '/dev/shm').
    range: last 90 days
    queries:
      - pseudocode: ON alert for malicious_suid_hash | QUERY VirusTotal API for hash_prevalence | PRIORITIZE alert if prevalence is low
  - question: Can we detect previously unknown malicious SUID/SGID binaries using static analysis?
    context: Hash-based detection can only find known threats. To find zero-day malware, we can use a machine learning model that analyzes the binary's structure (its headers, sections, strings, etc.). Such a model can learn the characteristics of malicious ELF files and flag suspicious SUID/SGID binaries even if their hash has never been seen before.
    answer_sources:
      - Filesystem scan results (e.g., from osquery)
      - File Integrity Monitoring (FIM) alerts
      - EDR file inventory
      - Threat intelligence hash feed
      - Filesystems of all Linux servers and endpoints, particularly standard executable paths ('/bin', '/usr/bin') and world-writable directories ('/tmp', '/var/tmp', '/dev/shm').
    range: last 90 days
    queries:
      - pseudocode: SCAN filesystem for suid/sgid files | APPLY static_analysis_model to each file | ALERT if model_class is 'malicious'
  - question: Is there a SUID/SGID file on the system that is not on the approved allowlist?
    context: This question implements a zero-trust policy for SUID/SGID binaries. In a well-managed environment, the set of legitimate SUID/SGID files is small and known. By creating an allowlist (including file path and hash), any deviation—a new, unapproved SUID file, or a legitimate one that has been modified—can be immediately flagged as a high-priority security incident.
    answer_sources:
      - Filesystem scan results (e.g., from osquery suid_bin table)
      - Configuration Management Database (CMDB) baseline
      - FIM change logs
      - Filesystems of all Linux servers and endpoints; Configuration Management Database (CMDB).
    range: last 90 days
    queries:
      - pseudocode: SCAN filesystem for suid/sgid files | FOR each_file | CHECK if file_path and file_hash are in allowlist | ALERT if not_found or hash_mismatch
  - question: Is a SUID/SGID file located in an unusual directory compared to its location on other systems?
    context: Legitimate SUID/SGID binaries are typically found in standard system directories like '/usr/bin'. An adversary might place a malicious SUID file in a non-standard location like '/tmp' or a user's home directory. This question helps find these outliers by flagging SUID files in paths that are rare across the enterprise.
    answer_sources:
      - Filesystem scan results (e.g., from osquery suid_bin table)
      - Configuration Management Database (CMDB) baseline
      - FIM change logs
      - Filesystems of all Linux servers and endpoints; Configuration Management Database (CMDB).
    range: last 90 days
    queries:
      - pseudocode: SCAN for all suid/sgid files and their paths | CALCULATE path_prevalence across all hosts | ALERT if path_prevalence < threshold (e.g., 1%)
  - question: Can we use machine learning to score and prioritize the review of newly discovered SUID/SGID files based on their metadata?
    context: This question provides a way to triage the investigation of SUID/SGID files found outside an allowlist. A model can be trained to recognize suspicious characteristics, such as being in a world-writable directory ('/tmp'), having a deep file path, or being recently created. This allows analysts to focus on the highest-risk files first.
    answer_sources:
      - Filesystem scan results (e.g., from osquery suid_bin table)
      - Configuration Management Database (CMDB) baseline
      - FIM change logs
      - Filesystems of all Linux servers and endpoints; Configuration Management Database (CMDB).
    range: last 90 days
    queries:
      - pseudocode: FOR new_suid_file | EXTRACT features (path_depth, is_writable_dir, file_age) | APPLY classification_model | ALERT and PRIORITIZE based on 'suspicious' score
  - question: Has a file been created and then immediately had its SUID/SGID permissions set?
    context: This sequence of events—file creation followed immediately by a 'chmod +s'—is highly characteristic of an attacker dropping a tool or backdoor and preparing it for execution. Legitimate software installations usually involve more complex package management steps. Detecting this tight temporal correlation is a strong indicator of manual, malicious activity.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 1
      - auditd SYSCALL records for 'creat' and 'chmod'
      - All Linux endpoints and servers, via real-time monitoring agents; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: CORRELATE file_create_events with process_create_events ON file_path | WHERE process_name='chmod' AND command_line contains '+s' AND time_delta < 60s | ALERT
  - question: Is the time between a file's creation and its SUID/SGID permission change unusually short?
    context: Building on the previous question, this approach uses statistical analysis to find outliers. By baselining the typical time delta for legitimate software installations, we can flag events where this happens exceptionally quickly. A very short delta (e.g., in the fastest 1% of all such events) strongly suggests manual attacker activity rather than an automated package manager.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 1
      - auditd SYSCALL records for 'creat' and 'chmod'
      - All Linux endpoints and servers, via real-time monitoring agents; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: CALCULATE time_delta between file_create and suid_chmod | COMPARE time_delta to historical_baseline | ALERT if time_delta is an outlier (e.g., < 1st percentile)
  - question: Does a sequence of file operations involving a SUID/SGID permission change match a known-good software installation pattern?
    context: This is a sophisticated behavioral approach. Legitimate package managers ('apt', 'yum') have predictable patterns of file operations. An attacker's actions, such as downloading a file with 'curl' and then setting the SUID bit, will form a different, illegitimate sequence. Sequence mining algorithms can learn the "good" patterns and flag any new sequence that deviates.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 1
      - auditd SYSCALL records for 'creat' and 'chmod'
      - All Linux endpoints and servers, via real-time monitoring agents; Centralized log management platform.
    range: last 90 days
    queries:
      - pseudocode: MODEL sequences of file_operations from software_managers | FOR new_sequence involving suid_chmod | CHECK if sequence matches known_good_pattern | ALERT if not
  - question: Is a user or service account executing a SUID/SGID binary that is not authorized for their role?
    context: This question enforces the principle of least privilege. A web server's service account has no reason to execute a SUID-enabled 'nmap'. By defining which roles can use which high-risk SUID binaries, any execution outside of these defined policies can be immediately flagged as a potential account compromise or insider threat.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - Identity and Access Management (IAM) role definitions
      - All Linux hosts, particularly those hosting sensitive applications or data; Identity and Access Management (IAM) system.
    range: last 90 days
    queries:
      - pseudocode: ON suid_binary_execution | GET user_role from IAM | CHECK if role is authorized for binary in policy | ALERT if not_authorized
  - question: Is a user executing a specific SUID/SGID binary more frequently than their own historical baseline?
    context: This question looks for changes in individual user behavior. A system administrator might use 'sudo' frequently, but if they suddenly start using it 100 times an hour when they normally use it 5 times a day, it could indicate their account is compromised and being used by an attacker or a malicious script. This detects anomalies relative to a user's own normal activity.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - Identity and Access Management (IAM) role definitions
      - All Linux hosts, particularly those hosting sensitive applications or data; Identity and Access Management (IAM) system.
    range: last 90 days
    queries:
      - pseudocode: BASELINE execution_count per_user, per_suid_binary | ON new_execution | UPDATE count | ALERT if count > (moving_average + 3 * std_dev)
  - question: Is a user's SUID/SGID binary usage anomalous compared to their peers?
    context: This question detects outliers by comparing an individual to their peer group. For example, if one developer in a team of 20 suddenly starts using a SUID-enabled debugging tool that no one else on the team uses, their behavior is anomalous. This can detect compromised accounts or insider threats even when the user's individual activity level doesn't spike dramatically.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd EXECVE records
      - Identity and Access Management (IAM) role definitions
      - All Linux hosts, particularly those hosting sensitive applications or data; Identity and Access Management (IAM) system.
    range: last 90 days
    queries:
      - pseudocode: CLUSTER users into peer_groups by role | MODEL suid_usage_profile for each group | FOR each_user | COMPARE user_usage to group_profile | ALERT if user is an outlier