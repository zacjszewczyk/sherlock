name: T1548.001: Setuid and Setgid
id: 6a2d1b8c-4e3f-4a9b-8d7c-1f0e9a2b3c4d
description: This playbook helps investigate potential privilege escalation or defense evasion through the misuse or manipulation of Setuid/Setgid permissions on Linux systems. It addresses the core questions of whether an adversary has escalated privileges or is evading defenses using this technique. The playbook provides investigative questions to detect various malicious activities, including the execution of known-malicious SUID/SGID binaries, the suspicious discovery or application of these permissions, the exploitation of legitimate SUID binaries to spawn shells, anomalous network connections from elevated processes, the presence of unauthorized SUID/SGID files on disk, and unusual user behavior related to these binaries.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a process with SUID/SGID permissions been executed whose file hash matches a known-malicious indicator?
  context: This question seeks to identify the most direct evidence of SUID/SGID abuse: the execution of a known-malicious binary that has elevated privileges. Adversaries may place malware with SUID/SGID bits to ensure it runs with higher permissions. Correlating process execution events (where effective user ID is elevated) with threat intelligence provides a high-fidelity signal of compromise.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - Threat intelligence hash feed
  - All Linux endpoints and servers; Centralized log management platform (e.g., SIEM).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE effective_user_id != real_user_id | LOOKUP file_hash against threat_intel_feed | RETURN events where match_found
- question: Are there SUID/SGID process executions with unusually high command-line argument entropy, suggesting obfuscation or exploit code?
  context: Adversaries often pass obfuscated commands or shellcode as arguments to a vulnerable SUID binary to exploit it. High entropy (randomness) in command-line arguments can be an indicator of this activity, as exploit strings are less structured than normal commands. Baselining normal entropy for each SUID binary and flagging outliers can uncover novel exploitation attempts.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - All Linux endpoints and servers; Centralized log management platform (e.g., SIEM).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE is_suid_sgid_process | CALCULATE entropy(command_line) | COMPARE current_entropy to baseline_entropy_for_binary | RETURN events where current_entropy > 95th_percentile
- question: Can we identify anomalous SUID/SGID process executions by clustering them based on features and investigating the outliers?
  context: Most SUID/SGID executions follow predictable patterns (e.g., 'sudo' run by an admin, 'passwd' run by a user). By clustering all SUID/SGID executions based on features like user, parent process, and command patterns, malicious activity will likely appear as small, isolated clusters or noise points that deviate from the large, benign clusters. This approach helps find unknown threats without relying on predefined rules.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - All Linux endpoints and servers; Centralized log management platform (e.g., SIEM).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: EXTRACT features (user, parent_process, binary_path, command_args) from suid_sgid_process_logs | APPLY clustering_algorithm (DBSCAN) | RETURN outlier_clusters_and_noise_points
- question: Is an adversary using system utilities like 'find' or 'chmod' to discover or set SUID/SGID permissions on files?
  context: Before exploiting SUID/SGID, an adversary often needs to find existing SUID binaries or create their own. This question looks for the direct use of 'find' to search for SUID permissions or 'chmod' to apply them. Such activity, especially when targeting shells or files in world-writable directories, is a strong indicator of privilege escalation preparation.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - osquery process_events table
  - All Linux endpoints and servers, particularly multi-user systems and developer workstations; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE process_name IN ('find', 'chmod') AND command_line contains ('-perm', '+s', '4000') | RETURN high_priority_events where target_path is ('/tmp/*', '/bin/sh')
- question: Has any user or host exhibited an abnormally high frequency of commands related to discovering or setting SUID/SGID permissions?
  context: While a single 'find' or 'chmod' command might be benign, a sudden spike in this activity for a specific user or on a specific host is anomalous. This question uses statistical analysis (Z-score) to detect deviations from a user's or host's normal behavior, which could indicate an adversary performing reconnaissance or setting up persistence.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - osquery process_events table
  - All Linux endpoints and servers, particularly multi-user systems and developer workstations; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: COUNT suid_chmod_find_commands by user, host, day | CALCULATE z_score for today's_count against historical_baseline | RETURN events where z_score > 3
- question: Is there a widespread or coordinated campaign across the environment involving the discovery or modification of SUID/SGID files?
  context: This question shifts the focus from individual users or hosts to the entire environment. A time-series model can predict the expected number of SUID/SGID-related commands across all systems. A significant deviation from this forecast could indicate a large-scale, automated attack where an adversary is simultaneously manipulating permissions on many machines.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - osquery process_events table
  - All Linux endpoints and servers, particularly multi-user systems and developer workstations; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: AGGREGATE count of suid_chmod_find_commands across environment by hour | APPLY time_series_forecast_model | RETURN alerts where observed_count > forecasted_upper_bound
- question: Has a legitimate SUID binary been used to spawn a root shell?
  context: A classic privilege escalation technique involves exploiting a vulnerability in a legitimate SUID program (like 'sudo' or 'pkexec') to make it execute a shell. This provides the attacker with a root-level command prompt. This question looks for this specific, high-confidence pattern by analyzing process parent-child relationships.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd SYSCALL and EXECVE records
  - EDR process tree data
  - Critical Linux infrastructure, authentication servers, and standard user endpoints; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs | JOIN events where child.parent_pid = parent.pid | RETURN events where parent is known_suid_binary AND parent.user != 'root' AND child is shell AND child.effective_user_id = 0
- question: Has a legitimate SUID binary spawned an unusual or never-before-seen child process?
  context: Legitimate SUID programs typically spawn a predictable set of child processes. For example, 'passwd' shouldn't normally spawn 'bash'. By baselining the normal child processes for each SUID binary, we can detect anomalous behavior that may indicate exploitation, even if the child process isn't a shell.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd SYSCALL and EXECVE records
  - EDR process tree data
  - Critical Linux infrastructure, authentication servers, and standard user endpoints; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: BUILD frequency_map of child_processes for each suid_binary from historical_logs | FOR each new suid_process_execution, check child_process | RETURN alert if child_process is not in frequency_map or is very rare
- question: Does the process execution graph originating from a SUID binary deviate from its normal structure?
  context: This question uses a more advanced approach by modeling the entire chain of process executions (the graph) that starts from a SUID binary. An attack might involve a multi-step process chain that differs from the simple, linear chains of benign executions. Graph-based anomaly detection can identify these structurally different execution flows as malicious.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd SYSCALL and EXECVE records
  - EDR process tree data
  - Critical Linux infrastructure, authentication servers, and standard user endpoints; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: MODEL normal process_execution_graphs for each suid_binary | FOR each new execution, build its graph | COMPARE new_graph_structure to baseline_models | RETURN alert if graph is anomalous
- question: Has a process that gained root privileges via SUID/SGID made a network connection to a known-malicious external address?
  context: After escalating privileges, an adversary's next step is often to establish a command and control (C2) channel. This question looks for this behavior by correlating a SUID-based privilege escalation event with a subsequent network connection to an IP on a blocklist. This combination of events is a very strong indicator of a successful compromise.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - Zeek conn.log
  - auditd network-related SYSCALL records
  - Network egress points (e.g., firewalls, proxies), DNS servers, all Linux hosts, and the centralized log management platform where network and host logs are correlated.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_logs where effective_user_id = 0 AND parent_user != 'root' | CORRELATE with network_logs on process_id | LOOKUP destination_ip against threat_intel_feed | RETURN events where match_found
- question: Is a process that gained root via SUID/SGID communicating with a rare external destination?
  context: Even if a destination IP isn't on a threat intelligence list, it may still be malicious. Adversary C2 infrastructure is often unique to a campaign and not widely seen. This question identifies suspicious connections by flagging destinations (IPs, ports, ASNs) that are uncommon across the entire organization, suggesting they are not legitimate business services.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - Zeek conn.log
  - auditd network-related SYSCALL records
  - Network egress points (e.g., firewalls, proxies), DNS servers, all Linux hosts, and the centralized log management platform where network and host logs are correlated.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs from suid_root_processes | CALCULATE prevalence of destination_ip, destination_port, destination_asn across enterprise | RETURN connections where destination is rare (e.g., seen < 5 times)
- question: Is a process that gained root via SUID/SGID exfiltrating an unusually large amount of data?
  context: Beyond establishing C2, an attacker with root access may attempt to exfiltrate data. This question aims to detect this by monitoring the volume of outbound network traffic from processes that have escalated privileges. A sudden, anomalous spike in data transfer from such a process is a strong indicator of data theft.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - Zeek conn.log
  - auditd network-related SYSCALL records
  - Network egress points (e.g., firewalls, proxies), DNS servers, all Linux hosts, and the centralized log management platform where network and host logs are correlated.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: AGGREGATE outbound_bytes by suid_root_process over time | APPLY time_series_analysis to model baseline_traffic | RETURN alerts where observed_bytes is a significant spike
- question: Are there any files on the filesystem with SUID/SGID permissions that are known to be malicious?
  context: This question seeks to find malware or hacking tools that an adversary has placed on a system and given SUID/SGID permissions for persistence or future privilege escalation. Unlike runtime detection, this involves proactively scanning the filesystem to find these malicious files at rest and matching their hashes against threat intelligence.
  answer_sources:
  - Filesystem scan results (e.g., from osquery)
  - File Integrity Monitoring (FIM) alerts
  - EDR file inventory
  - Threat intelligence hash feed
  - Filesystems of all Linux servers and endpoints, particularly standard executable paths ('/bin', '/usr/bin') and world-writable directories ('/tmp', '/var/tmp', '/dev/shm').
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SCHEDULED_SCAN for files where permissions are SUID/SGID | FOR each file, CALCULATE hash | LOOKUP hash against threat_intel_feed | RETURN alerts on match
- question: For a SUID/SGID file identified as malicious, how rare is it globally?
  context: Not all malicious files are equally interesting. Commodity malware might be widespread, while a targeted attack tool will be rare. This question helps prioritize investigations by enriching alerts with global prevalence data. A file that is both malicious and rare is a much higher priority than common malware, as it could indicate a more sophisticated adversary.
  answer_sources:
  - Filesystem scan results (e.g., from osquery)
  - File Integrity Monitoring (FIM) alerts
  - EDR file inventory
  - Threat intelligence hash feed
  - Filesystems of all Linux servers and endpoints, particularly standard executable paths ('/bin', '/usr/bin') and world-writable directories ('/tmp', '/var/tmp', '/dev/shm').
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: ON alert from previous query | QUERY external_api (e.g., VirusTotal) with file_hash | GET global_prevalence_score | UPDATE alert_priority based on rarity
- question: Can we detect unknown or zero-day malicious SUID/SGID files using static analysis?
  context: Hash-based detection can only find known threats. This question proposes using a machine learning model to analyze the static properties of SUID/SGID files (like their structure, strings, and headers) to predict if they are malicious. This allows for the detection of novel malware that has not yet been seen and added to threat intelligence feeds.
  answer_sources:
  - Filesystem scan results (e.g., from osquery)
  - File Integrity Monitoring (FIM) alerts
  - EDR file inventory
  - Threat intelligence hash feed
  - Filesystems of all Linux servers and endpoints, particularly standard executable paths ('/bin', '/usr/bin') and world-writable directories ('/tmp', '/var/tmp', '/dev/shm').
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SCAN all suid_sgid_files | EXTRACT static_features from each file | APPLY classification_model | RETURN alerts for files classified as 'malicious'
- question: Are there any SUID/SGID files on the system that are not on an approved allowlist?
  context: A 'deny-by-default' approach is a powerful security control. This question involves creating a baseline of all legitimate SUID/SGID binaries in the environment. Any SUID/SGID file found that is not on this allowlist is immediately suspicious. This can also detect tampering with legitimate binaries if their file hash changes.
  answer_sources:
  - Filesystem scan results (e.g., from osquery `suid_bin` table)
  - Configuration Management Database (CMDB) baseline
  - FIM change logs
  - Filesystems of all Linux servers and endpoints; Configuration Management Database (CMDB).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SCAN all suid_sgid_files | FOR each file, CHECK if path and hash exist in allowlist | RETURN alerts for files not on list or with mismatched hash
- question: Is a SUID/SGID binary located in an unusual or non-standard directory?
  context: Legitimate SUID/SGID binaries are almost always in standard system directories like '/bin' or '/usr/bin'. An adversary might place a malicious SUID file in a less conspicuous location like '/tmp' or a user's home directory. This question identifies these outliers by calculating how common a file path is for SUID binaries across the entire fleet of systems.
  answer_sources:
  - Filesystem scan results (e.g., from osquery `suid_bin` table)
  - Configuration Management Database (CMDB) baseline
  - FIM change logs
  - Filesystems of all Linux servers and endpoints; Configuration Management Database (CMDB).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: GET list of all suid_sgid_files and their paths | CALCULATE path_prevalence across all hosts | RETURN files with path_prevalence < 1%
- question: Can we use machine learning to score the suspiciousness of a SUID/SGID file based on its metadata?
  context: This question proposes a model to automatically prioritize SUID/SGID files for investigation. By using features like the file's location (e.g., in '/tmp'), its age, and its name, a model can learn to distinguish between benign system files and potentially malicious files dropped by an attacker, helping analysts focus on the highest-risk items.
  answer_sources:
  - Filesystem scan results (e.g., from osquery `suid_bin` table)
  - Configuration Management Database (CMDB) baseline
  - FIM change logs
  - Filesystems of all Linux servers and endpoints; Configuration Management Database (CMDB).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each new suid_sgid_file | EXTRACT features (path, age, is_in_tmp) | APPLY classification_model to get suspicion_score | RETURN alerts for high-score files
- question: Has a file been created and then immediately had SUID/SGID permissions applied to it?
  context: This sequence of events—file creation followed quickly by a 'chmod +s'—is highly indicative of an attacker setting up a tool or backdoor. Legitimate software installations usually involve more complex steps. This question looks for this specific, time-sensitive pattern to detect an adversary's hands-on activity.
  answer_sources:
  - Sysmon for Linux Event ID 11
  - Sysmon for Linux Event ID 1
  - auditd SYSCALL records for 'creat' and 'chmod'
  - All Linux endpoints and servers, via real-time monitoring agents; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH for file_create events | CORRELATE with process_create events for 'chmod +s' on the same file_path within 60 seconds | RETURN alerts for correlated sequences
- question: Is the time between a file's creation and its SUID/SGID permission change unusually short?
  context: Building on the previous question, this one uses statistical analysis to find outliers. While some software installers might perform this action, manual attacker activity is often much faster. By baselining the normal time delta for such operations, we can flag events that happen suspiciously quickly, pointing to interactive intrusion.
  answer_sources:
  - Sysmon for Linux Event ID 11
  - Sysmon for Linux Event ID 1
  - auditd SYSCALL records for 'creat' and 'chmod'
  - All Linux endpoints and servers, via real-time monitoring agents; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE time_delta between file_create and suid_chmod for same file | COMPARE time_delta to historical baseline | RETURN alerts for time_deltas in the fastest 1st percentile
- question: Does the sequence of events leading to a SUID/SGID permission change match a known-legitimate software installation pattern?
  context: Package managers like 'apt' or 'yum' have predictable workflows for installing software. This question aims to model these legitimate sequences. Any sequence that results in a SUID/SGID file but doesn't match a known-good pattern (e.g., a file downloaded with 'curl', made executable, and then given SUID) is highly suspicious and likely malicious.
  answer_sources:
  - Sysmon for Linux Event ID 11
  - Sysmon for Linux Event ID 1
  - auditd SYSCALL records for 'creat' and 'chmod'
  - All Linux endpoints and servers, via real-time monitoring agents; Centralized log management platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: MODEL common sequences of file_operations from package_managers | MONITOR for new sequences involving suid_chmod | RETURN alerts for sequences that do not match a known-good model
- question: Has a user or service account executed a SUID/SGID binary that they are not authorized to use based on their role?
  context: This question applies the principle of least privilege to SUID binary execution. A web server service account, for example, should never need to run 'nmap' with SUID privileges. By defining which roles can use which high-risk binaries, any execution outside of these policies can be flagged as a potential policy violation or sign of compromise.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - Identity and Access Management (IAM) role definitions
  - All Linux hosts, particularly those hosting sensitive applications or data; Identity and Access Management (IAM) system.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each suid_process_execution | GET user_role from IAM | CHECK if binary is authorized for user_role based on policy | RETURN alerts for unauthorized executions
- question: Has a user started using a specific SUID/SGID binary far more frequently than their own historical baseline?
  context: An adversary who has compromised an account may repeatedly use a SUID binary to perform actions or test an exploit. This question aims to detect this by creating a personal baseline of activity for each user. A sudden, sustained spike in the usage of a particular SUID binary by a user, compared to their own normal behavior, is a strong anomaly.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - Identity and Access Management (IAM) role definitions
  - All Linux hosts, particularly those hosting sensitive applications or data; Identity and Access Management (IAM) system.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user, COUNT executions of each suid_binary by day | CALCULATE moving_average and std_dev for each user-binary pair | RETURN alerts where today's_count > (average + 3 * std_dev)
- question: Is a user's SUID/SGID binary usage pattern anomalous compared to their peers?
  context: Users in the same role (e.g., database administrators) tend to use a similar set of tools. This question leverages that fact by grouping users into peer groups and comparing their SUID binary usage. A user whose activity profile deviates significantly from their peers could represent a compromised account being used for tasks outside its normal function, or an insider threat.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - auditd EXECVE records
  - Identity and Access Management (IAM) role definitions
  - All Linux hosts, particularly those hosting sensitive applications or data; Identity and Access Management (IAM) system.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER users into peer_groups based on role | FOR each group, calculate the average suid_binary_usage_profile | IDENTIFY users whose profile is a statistical outlier from their group's average | RETURN alerts for outlier users