name: T1546.004: Unix Shell Configuration Modification
id: 9d2b27a0-621d-4e9a-8e0f-1a9c3d4b6e5f
description: This playbook helps investigate if an adversary is using Unix shell configuration modifications for persistence or privilege escalation. This can manifest as unusual modifications to user-specific or system-wide shell files (e.g., ~/.bashrc, /etc/profile) by unauthorized processes, or as suspicious network activity immediately following a login or system boot. Suspicious activity includes outbound connections to known malicious destinations, statistically rare domains or ports, traffic matching C2 signatures, or internal reconnaissance and lateral movement attempts toward Windows resources.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are user-specific Unix shell configuration files being modified by unauthorized processes?
    context: This question seeks to identify adversaries establishing persistence by altering user-specific shell configuration files like `~/.bashrc`. Legitimate modifications are typically performed by users via text editors or by system package managers. This analysis flags modifications made by any other process, which could indicate a malicious implant automatically adding a command to be executed upon the user's next login.
    answer_sources: Linux audit.log, Windows Event ID 4663, collected from User workstations, Developer virtual machines, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH file_write_events
          WHERE file_path IN (user_shell_configs)
          AND process_name NOT IN (allow_list_editors, allow_list_package_managers)
          RETURN host, user, process_name, file_path, timestamp
  - question: Have there been statistically significant changes in the size or modification frequency of user-specific shell configuration files?
    context: This question aims to detect automated or scripted modifications to shell configuration files that might differ from normal user behavior. By establishing a baseline of file size and modification frequency for each user, we can identify outliers. A sudden, large change in file size or an unusually high modification rate can suggest that a malicious script is repeatedly altering the file for persistence.
    answer_sources: Linux audit.log, Windows Event ID 4663, collected from User workstations, Developer virtual machines, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            CALCULATE baseline_size_stdev, baseline_freq_percentile from historical file_write_events for user_shell_configs
          SEARCH new_file_write_events
          IF new_event.size_change > 3 * baseline_size_stdev OR new_event.frequency > baseline_freq_percentile:
            ALERT host, user, file_path
  - question: Can machine learning classify a modification to a user's shell configuration file as suspicious?
    context: This question leverages a machine learning model to provide a more nuanced detection than simple allow-lists or statistical thresholds. By training a classifier on features like the parent process, command line arguments, time of day, and content changes (e.g., addition of IP addresses), the model can distinguish between benign user activity and suspicious modifications indicative of a persistence technique.
    answer_sources: Linux audit.log, Windows Event ID 4663, collected from User workstations, Developer virtual machines, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH file_modification_event:
            EXTRACT features (parent_process, user, cmd_args, time_of_day, content_diff)
            PREDICT classification using trained_model(features)
          IF classification == 'suspicious persistence':
            ALERT host, user, file_path, process_name
  - question: Is there a temporal correlation between a user login and an outbound connection to a known malicious destination?
    context: This question seeks to identify C2 callbacks that are triggered by a user logging in, a common persistence pattern achieved through shell configuration modification. By correlating a user login event with a subsequent network connection from the same host to a destination on a threat intelligence feed, we can detect this behavior with high confidence.
    answer_sources: Zeek conn.log, Zeek dns.log, Zeek http.log, Linux audit.log, Windows Event ID 4624, collected from Internet gateway network sensors, Core DNS resolvers, Authentication servers, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH user_login_events(host_ip) within last 60 seconds
          IF login_event EXISTS:
            SEARCH network_connections from host_ip
            JOIN network_connections.destination_ip with threat_intelligence_feed
            IF JOIN successful:
              ALERT user, host_ip, destination_ip
  - question: Following a user login, is the host connecting to a statistically rare Autonomous System Number (ASN) or country?
    context: Adversaries may use C2 infrastructure in geographic locations or network blocks that are unusual for a given user or organization. This question establishes a baseline of typical post-login destinations for each user and flags connections to destinations that are statistically rare, providing a way to uncover novel C2 infrastructure not yet on threat intelligence feeds.
    answer_sources: Zeek conn.log, Zeek dns.log, Zeek http.log, Linux audit.log, Windows Event ID 4624, collected from Internet gateway network sensors, Core DNS resolvers, Authentication servers, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            CALCULATE historical_destination_frequency(ASN, country)
          SEARCH user_login_events
          FOR EACH subsequent network_connection:
            CALCULATE frequency of connection.destination(ASN, country) in user's history
            IF frequency < 5th_percentile:
              ALERT user, host, destination_ASN, destination_country
  - question: Is there an anomalous spike in outbound network traffic immediately following a user login?
    context: A malicious script triggered at login might initiate a large data transfer or a burst of C2 beacons. This question uses a time-series model to predict the expected volume of outbound network traffic in the minutes following a user login. A significant deviation from this prediction indicates an anomalous burst of activity that warrants investigation.
    answer_sources: Zeek conn.log, Zeek dns.log, Zeek http.log, Linux audit.log, Windows Event ID 4624, collected from Internet gateway network sensors, Core DNS resolvers, Authentication servers, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            TRAIN time_series_model on historical post-login outbound_volume
          SEARCH new_user_login_event
          MEASURE actual_outbound_volume in next 5 minutes
          PREDICT expected_volume_with_interval using time_series_model
          IF actual_outbound_volume > prediction_interval.upper_bound:
            ALERT user, host, actual_volume, expected_volume
  - question: Following a user login, does network traffic exhibit signatures of known C2 frameworks?
    context: Many C2 frameworks use distinct network indicators. This question looks for these signatures, such as specific URI patterns, User-Agent strings in HTTP traffic, or JA3/JA3S TLS fingerprinting hashes, in the minutes following a user login. A match provides strong evidence that a persistence mechanism is communicating with a C2 server.
    answer_sources: Zeek http.log, Zeek ssl.log, Zeek conn.log, Linux audit.log, collected from Internet gateway network sensors, Web proxies, SSL/TLS inspection points, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH user_login_events(host_ip) within last 5 minutes
          IF login_event EXISTS:
            SEARCH network_traffic from host_ip
            IF traffic.uri MATCHES c2_uri_patterns OR traffic.user_agent MATCHES c2_user_agents OR traffic.ja3_hash IN c2_ja3_list:
              ALERT host, user, matched_indicator
  - question: Is a user's post-login HTTP traffic exhibiting unusually high entropy?
    context: Domain Generation Algorithms (DGAs) are often used by malware to create a large number of potential C2 domains. These algorithmically generated domains typically have a higher character entropy than human-readable domains. This question calculates the entropy of URIs requested after a login and flags those with abnormally high scores, suggesting potential DGA activity.
    answer_sources: Zeek http.log, Zeek ssl.log, Zeek conn.log, Linux audit.log, collected from Internet gateway network sensors, Web proxies, SSL/TLS inspection points, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            CALCULATE baseline_uri_entropy_mean, baseline_uri_entropy_stdev
          SEARCH user_login_events
          FOR EACH subsequent http_request:
            CALCULATE request.uri_entropy
            IF request.uri_entropy > (baseline_uri_entropy_mean + 3 * baseline_uri_entropy_stdev):
              ALERT user, host, uri, uri_entropy
  - question: Can a machine learning model classify a post-login network session as C2 activity?
    context: This question uses a pre-trained classifier to analyze multiple features of a network session (e.g., duration, data volume, periodicity, User-Agent, JA3 hash) in concert. This holistic approach can identify complex C2 communication patterns that might be missed by single-indicator checks, providing a more robust method for detecting malicious activity following a login.
    answer_sources: Zeek http.log, Zeek ssl.log, Zeek conn.log, Linux audit.log, collected from Internet gateway network sensors, Web proxies, SSL/TLS inspection points, Critical Unix/Linux servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH user_login_events
          FOR EACH subsequent network_session:
            EXTRACT features (duration, volume, periodicity, user_agent, ja3)
            PREDICT classification using trained_c2_model(features)
            IF classification == 'C2 activity':
              ALERT user, host, session_details
  - question: After a login, is a user connecting to a domain for the very first time?
    context: Adversaries often use newly created or specific domains for C2 that a user has never contacted before. This question maintains a stateful record of every domain a user has ever connected to. A connection to a 'first-seen' domain immediately after a login is flagged as a low-priority event for analysis, as it could represent the first check-in of a newly installed persistence mechanism.
    answer_sources: Zeek conn.log, Zeek dns.log, Linux audit.log, collected from Internet gateway network sensors, Core DNS resolvers, User endpoint subnets, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MAINTAIN state_table of (user, domain) pairs
          SEARCH user_login_events
          FOR EACH subsequent dns_query:
            IF (query.user, query.domain) NOT IN state_table:
              ALERT user, host, 'first-seen domain', query.domain
              ADD (query.user, query.domain) to state_table
  - question: Does a domain queried after a user login have a high DGA score?
    context: This question specifically targets the use of Domain Generation Algorithms (DGAs) for C2 communication. It analyzes the character patterns of a queried domain name to calculate a score indicating its likelihood of being algorithmically generated. A high score suggests the domain is not human-readable and may be part of a DGA-based C2 infrastructure.
    answer_sources: Zeek conn.log, Zeek dns.log, Linux audit.log, collected from Internet gateway network sensors, Core DNS resolvers, User endpoint subnets, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CALCULATE enterprise_dga_score_percentile
          SEARCH user_login_events
          FOR EACH subsequent dns_query:
            CALCULATE dga_score for query.domain
            IF dga_score > 95th_percentile_of_enterprise_scores:
              ALERT user, host, query.domain, dga_score
  - question: Is a post-login network connection identified as an outlier by a clustering algorithm?
    context: This question uses unsupervised machine learning to find anomalous network connections without relying on pre-defined signatures. By clustering a user's typical post-login connections based on features like destination port, protocol, and ASN, any new connection that doesn't fit into an existing cluster (i.e., is identified as noise) is flagged as an anomaly for investigation.
    answer_sources: Zeek conn.log, Zeek dns.log, Linux audit.log, collected from Internet gateway network sensors, Core DNS resolvers, User endpoint subnets, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            MODEL post_login_connections with DBSCAN on features (port, protocol, ASN)
          SEARCH new_user_login_event
          FOR EACH new_connection:
            PREDICT cluster for new_connection
            IF cluster == 'noise':
              ALERT user, host, 'anomalous connection', new_connection_details
  - question: Following a Unix login, is the host attempting to connect to internal Windows services and failing to authenticate?
    context: This question aims to detect lateral movement attempts initiated from a compromised Unix host. A script triggered by a shell configuration file might try to spread to Windows systems using common protocols like SMB or WinRM. By correlating a Unix login with subsequent failed Windows logons from that Unix host's IP, we can identify activities like password spraying.
    answer_sources: Zeek conn.log, Zeek smb_mapping.log, Zeek dce_rpc.log, Windows Event ID 4624, Windows Event ID 4625, Linux audit.log, collected from East-West network traffic sensors, Windows Domain Controllers, Windows member servers, and Critical Unix/Linux servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH unix_login_events(host_ip) within last 5 minutes
          IF unix_login EXISTS:
            SEARCH windows_logon_failures(EventID 4625)
            WHERE source_ip == host_ip
            AND destination_port IN (445, 5985, 5986)
            ALERT 'Potential lateral movement attempt from', host_ip
  - question: After a Unix login, is the host making a statistically rare internal connection?
    context: Within an organization, hosts typically communicate in predictable patterns. This question baselines normal internal connections (source, destination, port) and flags any new connection triplet that is statistically rare. This can uncover unexpected lateral movement paths being used by an adversary after gaining persistence on a Unix host.
    answer_sources: Zeek conn.log, Zeek smb_mapping.log, Zeek dce_rpc.log, Windows Event ID 4624, Windows Event ID 4625, Linux audit.log, collected from East-West network traffic sensors, Windows Domain Controllers, Windows member servers, and Critical Unix/Linux servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CALCULATE historical_frequency of all (source_host, dest_server, dest_port) triplets
          SEARCH unix_login_events
          FOR EACH subsequent internal_connection:
            CALCULATE frequency of connection_triplet in historical data
            IF frequency < 5th_percentile:
              ALERT 'Rare internal connection', connection_triplet
  - question: Does a user's post-login internal network activity represent an anomalous state transition in a Markov chain model?
    context: This question models a user's sequence of internal network connections as a series of state transitions (e.g., login -> connect to web server -> connect to database). If, after a login, the user's activity results in a transition that has a very low probability in their established model (e.g., a web developer's account suddenly connecting to a domain controller's SMB share), the behavior is flagged as anomalous.
    answer_sources: Zeek conn.log, Zeek smb_mapping.log, Zeek dce_rpc.log, Windows Event ID 4624, Windows Event ID 4625, Linux audit.log, collected from East-West network traffic sensors, Windows Domain Controllers, Windows member servers, and Critical Unix/Linux servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            BUILD markov_chain_model of post-login internal service connections
          SEARCH new_unix_login_event
          FOR EACH subsequent state_transition (connection):
            CALCULATE transition_probability from model
            IF probability < low_threshold:
              ALERT 'Anomalous state transition', user, source_state, destination_state
  - question: Is a system-wide shell configuration file being modified by a non-root user or an unauthorized process?
    context: This question targets a privilege escalation technique where an adversary modifies a global configuration file like `/etc/profile`. Any command added to this file will be executed by any user who logs in, including root. This rule generates a high-priority alert if a write to these critical files is performed by anyone other than the root user or an authorized package manager, as it is a highly suspicious event.
    answer_sources: Linux audit.log, collected from Critical Unix/Linux servers, Production web servers, Centralized log aggregator, and File Integrity Monitoring systems.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH file_write_events
          WHERE file_path IN (system_shell_configs)
          AND (user_id != 0 AND process_name NOT IN (allow_list_package_managers))
          ALERT 'High-priority: System-wide shell file modified by non-root/unauthorized process'
  - question: Has a system-wide shell configuration file's hash changed outside of a maintenance window?
    context: This question uses File Integrity Monitoring (FIM) principles to detect unauthorized changes. It compares the current hash of system-wide shell configuration files against a known-good baseline. A change detected outside of a scheduled maintenance window is suspicious. It further analyzes the degree of change; small insertions are flagged as more suspicious than a complete file replacement, which is more typical of a package update.
    answer_sources: Linux audit.log, collected from Critical Unix/Linux servers, Production web servers, Centralized log aggregator, and File Integrity Monitoring systems.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          BASELINE hashes of system_shell_configs
          MONITOR for hash changes
          IF change_detected AND current_time NOT IN maintenance_window:
            CALCULATE levenshtein_distance(old_content, new_content)
            IF distance < 150:
              ALERT 'Suspicious small modification to system shell file'
  - question: Do system calls preceding a write to a system-wide shell configuration file appear anomalous?
    context: Legitimate modifications to system files by package managers follow a predictable sequence of system calls. This question uses a machine learning model to detect anomalies in this sequence. An abnormal pattern, such as a process spawned from an interactive shell using `sudo` to directly append to a file like `/etc/profile`, would be flagged as a potential privilege escalation attempt.
    answer_sources: Linux audit.log, collected from Critical Unix/Linux servers, Production web servers, Centralized log aggregator, and File Integrity Monitoring systems.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MODEL normal_syscall_sequence for system_shell_config writes
          SEARCH for new write_event to system_shell_config
          ANALYZE preceding_syscall_sequence
          IF sequence is anomalous according to model:
            ALERT 'Anomalous syscall sequence before system file write'
  - question: Is a system boot or privileged user login on a critical server followed by an outbound connection to a known malicious destination?
    context: This question aims to detect persistence mechanisms that execute with root privileges at boot or upon a privileged login (e.g., via `sudo`). By correlating these high-privilege events on critical servers with immediate outbound connections to destinations on a CTI feed, we can identify C2 channels established by a root-level implant.
    answer_sources: Zeek conn.log, Zeek dns.log, Zeek http.log, Linux audit.log, collected from Critical server subnet network sensors, Internet gateway, Core DNS resolvers, and Centralized log aggregator for system boot/auth logs.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH boot_events OR privileged_logins(uid=0) on critical_servers
          WITHIN 60 seconds of event:
            SEARCH outbound_connections from server_ip
            JOIN connection.destination with cti_feed
            IF JOIN successful:
              ALERT 'Privileged C2 callback detected', server_ip, destination
  - question: Does the sequence of network connections after a server boot deviate significantly from its baseline?
    context: Critical servers typically have a predictable boot process, including the network connections they make for time synchronization, updates, etc. This question establishes a baseline of this connection sequence. It then uses the Jaccard similarity index to compare the sequence from a new boot against the baseline. A low similarity score indicates a deviation, possibly caused by a malicious process executing at boot.
    answer_sources: Zeek conn.log, Zeek dns.log, Zeek http.log, Linux audit.log, collected from Critical server subnet network sensors, Internet gateway, Core DNS resolvers, and Centralized log aggregator for system boot/auth logs.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH critical_server:
            BASELINE normal_boot_connection_sequence
          SEARCH for new_boot_event
          RECORD new_boot_connection_sequence
          CALCULATE jaccard_similarity(new_sequence, baseline_sequence)
          IF similarity < 0.8:
            ALERT 'Anomalous boot connection sequence detected', server
  - question: Is the network activity during a server boot classified as an outlier by a machine learning model?
    context: This question uses a one-class SVM, a model ideal for anomaly detection, to identify unusual boot-time activity. The model is trained on feature vectors representing normal network behavior during boot (e.g., connection counts, data volume). Any new boot sequence that the model classifies as an outlier is flagged for immediate review, as it may indicate a root-level persistence mechanism.
    answer_sources: Zeek conn.log, Zeek dns.log, Zeek http.log, Linux audit.log, collected from Critical server subnet network sensors, Internet gateway, Core DNS resolvers, and Centralized log aggregator for system boot/auth logs.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          TRAIN one_class_svm_model on normal_boot_network_features
          SEARCH for new_boot_event
          EXTRACT features from new_boot_network_activity
          PREDICT classification using model
          IF classification == 'outlier':
            ALERT 'Anomalous boot-time network activity detected by ML'
  - question: Following a privileged login on a Unix server, is there a spike in Kerberoasting attempts?
    context: Once an adversary gains root on a Unix server, they may use it as a platform for internal reconnaissance. This question looks for signs of Kerberoasting, an attack to harvest service account credentials from Active Directory. A sudden spike in Kerberos TGS-REQ requests for multiple service accounts, especially using weaker RC4 encryption, from the server's IP after a privileged login is a strong indicator of this activity.
    answer_sources: Zeek conn.log, Zeek ldap.log, Zeek smb_mapping.log, Zeek kerberos.log, Windows Event ID 4769, collected from East-West network traffic sensors, Domain Controllers, Critical Unix servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH privileged_login(uid=0) on unix_server(ip)
          WITHIN 5 minutes:
            COUNT distinct SPNs in TGS-REQ from source_ip where encryption_type=RC4
            IF count > 20:
              ALERT 'Potential Kerberoasting from Unix server', ip
  - question: Is a privileged Unix server performing unusually complex LDAP queries?
    context: Adversaries often use LDAP to enumerate objects in Active Directory for situational awareness. This question profiles the complexity of normal LDAP queries originating from servers. If, after a privileged login, a server issues a query that is abnormally long, requests all attributes ('*'), or targets the directory root, it's flagged as potential reconnaissance.
    answer_sources: Zeek conn.log, Zeek ldap.log, Zeek smb_mapping.log, Zeek kerberos.log, Windows Event ID 4769, collected from East-West network traffic sensors, Domain Controllers, Critical Unix servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          BASELINE normal_ldap_query_length_percentile for server
          SEARCH privileged_login on unix_server
          FOR EACH subsequent ldap_query from server:
            IF query.filter_length > 95th_percentile OR query.attributes == '*' OR query.base_dn == root:
              ALERT 'Suspicious LDAP reconnaissance query from server'
  - question: Is a privileged server performing internal network actions inconsistent with its peer group?
    context: This question uses peer group analysis to spot anomalous behavior. Servers are clustered by their functional role (e.g., web servers, database servers). If a server, after a privileged login, starts performing actions (like enumerating SMB shares) that are not typical for other servers in its role-based peer group, it is flagged as a high-risk anomaly, suggesting it has been compromised and is being used for lateral movement.
    answer_sources: Zeek conn.log, Zeek ldap.log, Zeek smb_mapping.log, Zeek kerberos.log, Windows Event ID 4769, collected from East-West network traffic sensors, Domain Controllers, Critical Unix servers, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CLUSTER servers into peer_groups by role
          DEFINE normal_behavior for each peer_group
          SEARCH privileged_login on server
          FOR EACH subsequent action (e.g., smb_enumeration):
            IF action is not in normal_behavior for server.peer_group:
              ALERT 'Anomalous behavior for server role', server, action
  - question: Is a critical server making an outbound connection that violates its defined network egress policy?
    context: Critical servers should have highly restricted outbound network access. This question enforces a strict, machine-readable allow-list of approved destination ASNs, countries, and ports for each server. Any connection attempt following a boot or privileged login that does not match this allow-list is immediately flagged as a policy violation and a potential C2 communication.
    answer_sources: Zeek conn.log, Zeek dns.log, Linux audit.log, collected from Critical server subnet network sensors, Internet gateway, Egress filtering points, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE allow_list (ASN, country, port) for each critical_server
          SEARCH privileged_login OR boot_event on critical_server
          FOR EACH subsequent outbound_connection:
            IF connection.destination NOT IN server.allow_list:
              ALERT 'Egress policy violation from critical server', server, connection.destination
  - question: Is a critical server connecting to a statistically outlier destination port?
    context: In addition to a strict allow-list, statistical methods can find anomalous connections. This question establishes a baseline distribution of normal destination ports for a server's outbound traffic. If, after a privileged login, the server connects to a port that is a statistical outlier (e.g., outside 1.5 times the Inter-Quartile Range), it is flagged for investigation as it may be a non-standard C2 port.
    answer_sources: Zeek conn.log, Zeek dns.log, Linux audit.log, collected from Critical server subnet network sensors, Internet gateway, Egress filtering points, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH critical_server:
            CALCULATE baseline_port_distribution_iqr
          SEARCH privileged_login on server
          FOR EACH subsequent outbound_connection:
            IF connection.port is an outlier based on IQR:
              ALERT 'Outlier destination port from critical server', server, connection.port
  - question: After a privileged login, is a critical server exhibiting an anomalous volume of outbound data transfer?
    context: Data exfiltration is a key adversary objective. This question uses a time-series forecasting model (like Prophet) to predict the expected volume of outbound data from a critical server, accounting for normal fluctuations like time of day. If the actual data transfer volume significantly exceeds the model's forecast after a privileged event, it generates an alert for potential data exfiltration.
    answer_sources: Zeek conn.log, Zeek dns.log, Linux audit.log, collected from Critical server subnet network sensors, Internet gateway, Egress filtering points, and a Centralized log aggregator.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          TRAIN time_series_model on historical outbound_data_volume for server
          SEARCH privileged_login on server
          MEASURE actual_outbound_volume
          PREDICT expected_volume from model
          IF actual_outbound_volume > predicted_volume_upper_bound:
            ALERT 'Anomalous outbound data volume from critical server'
  - question: Is a privileged login on a Unix server immediately followed by a successful, high-privilege authentication to a critical Windows resource?
    context: This question looks for a clear lateral movement chain from a compromised Unix host to a high-value Windows target. It creates a high-priority alert only when a specific sequence occurs: a privileged login on a Unix server, followed by a successful logon from that server's IP to a Windows Domain Controller's administrative share (like ADMIN$ or C$), indicating a successful pivot.
    answer_sources: Zeek smb_mapping.log, Windows Event ID 4624, Zeek dce_rpc.log, Linux audit.log, collected from Domain Controllers, High-value Windows servers, and East-West network traffic sensors monitoring server-to-server communication.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH privileged_login(uid=0) on unix_server(ip)
          WITHIN 5 minutes:
            SEARCH for successful_windows_logon(EventID 4624) from source_ip=ip
            AND smb_connection to share_name IN (ADMIN$, C$, IPC$) from source_ip=ip
            IF ALL conditions met:
              ALERT 'High-confidence lateral movement from Unix to Windows Admin Share'
  - question: Has a privileged login on a Unix server resulted in the creation of a new administrative access path in the network graph?
    context: This question visualizes administrative access paths as a graph, where hosts are nodes and admin access events are edges. If, after a privileged login on a Unix server, an SMB connection is observed that creates a brand-new edge from that Unix host to a Windows administrative share, the connection is flagged. This approach helps identify the establishment of novel lateral movement paths.
    answer_sources: Zeek smb_mapping.log, Windows Event ID 4624, Zeek dce_rpc.log, Linux audit.log, collected from Domain Controllers, High-value Windows servers, and East-West network traffic sensors monitoring server-to-server communication.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MAINTAIN graph of admin_access_edges (source, destination)
          SEARCH privileged_login on unix_server
          FOR EACH subsequent smb_connection to admin_share:
            CREATE new_edge(unix_server, windows_dest)
            IF new_edge did not exist in graph:
              ALERT 'New administrative access path created', new_edge
  - question: Does a sequence of events starting with a privileged Unix login cross a high-risk threshold in a scoring model?
    context: This question uses a cumulative risk scoring model to provide context-aware detection. Individual events are assigned scores (e.g., privileged Unix login = +10). Subsequent related events increase the score (e.g., connecting to a DC's ADMIN$ share = +50). If the source host is not an approved management station, another score is added. When the cumulative score crosses a pre-defined threshold, an alert is triggered, reducing false positives by considering the full context.
    answer_sources: Zeek smb_mapping.log, Windows Event ID 4624, Zeek dce_rpc.log, Linux audit.log, collected from Domain Controllers, High-value Windows servers, and East-West network traffic sensors monitoring server-to-server communication.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          INIT risk_score = 0
          ON privileged_login(uid=0) on unix_server: risk_score += 10
          ON subsequent auth to DC ADMIN$ share: risk_score += 50
          IF unix_server not in approved_mgmt_stations: risk_score += 25
          IF risk_score > threshold:
            ALERT 'High-risk activity sequence detected', contributing_events