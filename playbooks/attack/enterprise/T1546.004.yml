name: T1546.004: Unix Shell Configuration Modification
id: d8e3c7b1-4f8a-4b9c-8e2d-3a4f6b7c8d9e
description: Adversaries may modify Unix shell configuration files (e.g., .bashrc,
  .zprofile, /etc/profile) to establish persistence or escalate privileges. By adding
  malicious commands to these files, an attacker can ensure their code is executed
  whenever a user logs in, a new shell is opened, or the system boots. This playbook
  provides investigative questions to detect unauthorized modifications to these files
  and the subsequent malicious activity, such as outbound C2 connections, internal
  reconnaissance, or lateral movement attempts that often follow a successful persistence
  or privilege escalation event.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are user-specific shell configuration files being modified by processes
    other than known text editors or package managers?
  context: Adversaries modify user-specific shell configuration files like ~/.bashrc
    or ~/.zprofile to execute malicious commands whenever the user starts a new shell,
    establishing persistence. Legitimate modifications are typically performed by
    users via text editors (vi, nano, etc.) or by software installers/updaters. This
    question aims to identify suspicious modifications by filtering for write events
    to these files and excluding known, legitimate processes.
  answer_sources:
  - Linux audit.log
  - Windows Event ID 4663
  - User workstations
  - Developer virtual machines
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_write_events WHERE file_path IN ("~/.bashrc", "~/.zprofile",
      "~/.bash_profile") AND process_name NOT IN (allow_list_of_editors_and_package_managers)
- question: Are there anomalous changes in the size or modification frequency of
    user-specific shell configuration files?
  context: Automated or scripted modifications by an adversary, such as appending
    a C2 callback, can cause statistically significant changes to a shell configuration
    file's size or modification frequency. This question establishes a baseline for
    each user's file and flags deviations, which can help detect subtle persistence
    mechanisms that might otherwise be missed.
  answer_sources:
  - Linux audit.log
  - Windows Event ID 4663
  - User workstations
  - Developer virtual machines
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_user, SEARCH file_modification_events ON shell_config_files |
      ALERT if file_size_change > 3 * stdev(historical_size_changes) OR modification_frequency
      > 95th_percentile(historical_frequency)
- question: Can file modification events on user-specific shell configuration files
    be classified as suspicious persistence activity?
  context: This question uses a machine learning approach to provide a more nuanced
    detection than simple allow-listing or statistical thresholds. By training a model
    on features like the parent process, user context, and content changes (e.g.,
    addition of IP addresses), it can distinguish between benign user activity and
    malicious modifications intended to establish persistence.
  answer_sources:
  - Linux audit.log
  - Windows Event ID 4663
  - User workstations
  - Developer virtual machines
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'INPUT file_modification_events (features: parent_process, user, command_line,
      time_of_day, content_diff) | PREDICT classification using trained_model | ALERT
      if classification == "suspicious persistence"'
- question: Is a user login on a Unix host followed within 60 seconds by an outbound
    network connection to a known malicious indicator?
  context: A common objective for shell configuration persistence is to initiate
    a command-and-control (C2) callback. This question directly links a user login
    event, which triggers the persisted code, with a subsequent network connection
    to a destination on a threat intelligence feed. The tight time window helps reduce
    false positives.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Linux audit.log
  - Windows Event ID 4624
  - Internet gateway network sensors
  - Core DNS resolvers
  - Authentication servers
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH user_login_events AND network_connection_events | JOIN on host_ip
      WHERE network_event.time - login_event.time < 60s AND network_event.destination
      IN threat_intelligence_feed | ALERT
- question: Following a user login, is there outbound network traffic to an Autonomous
    System Number (ASN) or country that is historically rare for that user?
  context: Adversaries often use C2 infrastructure hosted in ASNs or countries that
    are not typically accessed by a given user or organization. By baselining normal
    post-login destinations for each user, this question identifies connections to
    statistically rare locations, which may indicate a C2 channel established by
    a modified shell configuration.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Linux audit.log
  - Windows Event ID 4624
  - Internet gateway network sensors
  - Core DNS resolvers
  - Authentication servers
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_user_login, SEARCH outbound_network_traffic | CALCULATE frequency
      of destination_ASN/country in user's_historical_data | ALERT if frequency <
      5th_percentile
- question: Is there an anomalous burst of outbound network traffic immediately following
    a user login event?
  context: A C2 callback triggered by a login might involve an initial check-in followed
    by the download of additional tools or instructions, resulting in a burst of network
    activity. This question uses a time-series model to predict the expected volume
    of post-login traffic and alerts when the actual volume significantly exceeds
    the prediction, indicating an anomaly.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Linux audit.log
  - Windows Event ID 4624
  - Internet gateway network sensors
  - Core DNS resolvers
  - Authentication servers
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: INPUT post_login_outbound_traffic_volume | PREDICT expected_volume with
      time_series_model | ALERT if actual_volume > 99%_prediction_interval
- question: Following a user login, is there network traffic containing URI patterns,
    User-Agents, or JA3/JA3S hashes associated with known C2 frameworks?
  context: Malicious frameworks and reverse shells often use specific, identifiable
    signatures in their network communications. This question looks for these hardcoded
    indicators (e.g., suspicious URI patterns, known malicious User-Agents, or specific
    TLS fingerprints) in traffic that occurs shortly after a user login, providing
    strong evidence of a C2 channel activated by a persistence mechanism.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek conn.log
  - Linux audit.log
  - Internet gateway network sensors
  - Web proxies
  - SSL/TLS inspection points
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH network_logs (http, ssl) within 5_minutes_of_user_login | ALERT
      if http.uri MATCHES known_c2_patterns OR http.user_agent IN c2_user_agents
      OR ssl.ja3/ja3s IN c2_hashes
- question: Following a user login, does outbound HTTP traffic contain URIs with
    unusually high entropy, suggesting DGA activity?
  context: Domain Generation Algorithms (DGAs) are often used by malware to create
    random-looking domain names for C2 communication. These domains result in URIs
    with high Shannon entropy. This question calculates the entropy of URIs in post-login
    traffic and compares it to a user's baseline, flagging high-entropy URIs as potential
    DGA-based C2.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek conn.log
  - Linux audit.log
  - Internet gateway network sensors
  - Web proxies
  - SSL/TLS inspection points
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_http_request after user_login | CALCULATE shannon_entropy of uri_path
      | ALERT if entropy > 3 * stdev(user's_baseline_entropy)
- question: Can post-login network sessions be classified as C2 activity based on
    their connection characteristics?
  context: Rather than relying on a single indicator, this question uses a machine
    learning model to classify network sessions based on a combination of features
    like connection duration, data volume, periodicity, and TLS parameters. This holistic
    approach can identify sophisticated C2 channels that may not have obvious symbolic
    signatures.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek conn.log
  - Linux audit.log
  - Internet gateway network sensors
  - Web proxies
  - SSL/TLS inspection points
  - Critical Unix/Linux servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'INPUT post_login_network_sessions (features: duration, volume, periodicity,
      user_agent_length, ja3_hash) | PREDICT classification using trained_model |
      ALERT if classification == "C2 activity"'
- question: Following a user login, is a DNS query made for a domain that has never
    been seen for that user before?
  context: A C2 callback initiated from a modified shell file will often involve
    contacting a domain the user has never accessed before. This question maintains
    a stateful baseline of known domains for each user and flags any 'first-seen'
    domain access post-login. While potentially noisy, this can provide early warnings
    of new C2 infrastructure.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Linux audit.log
  - Internet gateway network sensors
  - Core DNS resolvers
  - User endpoint subnets
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_dns_query after user_login | CHECK if (user, query_domain) exists
      in 90_day_state_table | ALERT if pair is not found
- question: Following a user login, is a DNS query made for a domain that has a high
    DGA score?
  context: This statistical question specifically targets the use of Domain Generation
    Algorithms (DGAs) for C2. It analyzes the linguistic properties of a queried domain
    name (e.g., character frequency, n-gram analysis) to calculate a DGA score. Domains
    that score highly are likely algorithmically generated and warrant investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Linux audit.log
  - Internet gateway network sensors
  - Core DNS resolvers
  - User endpoint subnets
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_dns_query after user_login | CALCULATE dga_score based on character_frequency
      and n-gram_analysis | ALERT if dga_score > 95th_percentile_of_enterprise_scores
- question: Following a user login, are there outbound network connections that are
    statistical outliers compared to the user's typical activity clusters?
  context: This question uses unsupervised machine learning to model a user's normal
    network behavior. By clustering connections based on features like destination
    port, protocol, and ASN, it can identify new connections that do not fit into
    any existing cluster. These outliers or 'noise points' are anomalous and could
    represent a newly established C2 channel.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Linux audit.log
  - Internet gateway network sensors
  - Core DNS resolvers
  - User endpoint subnets
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_user, CLUSTER historical_connections using DBSCAN on (dest_port,
      protocol, dest_ASN) | FOR new_connection after login, CHECK if it is a noise_point
      or in a sparse_cluster | ALERT if true
- question: Following a Unix user login, are there connection attempts to internal
    Windows services that result in logon failures?
  context: After establishing persistence on a Unix host, an adversary may attempt
    to move laterally to Windows systems. This question looks for a common pattern
    of this behavior: a Unix host, shortly after a login, attempting to connect to
    Windows services like SMB or WinRM and generating failed logons, which could
    indicate password spraying or other brute-force attempts.
  answer_sources:
  - Zeek conn.log
  - Zeek smb_mapping.log
  - Zeek dce_rpc.log
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Linux audit.log
  - East-West network traffic sensors
  - Windows Domain Controllers
  - Windows member servers
  - Critical Unix/Linux servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH unix_login_events | WITHIN 5_minutes, SEARCH for network_connections
      from unix_host_ip to internal_windows_ip on port (445, 5985, 5986) | CORRELATE
      with logon_failure_events (EID 4625) on destination_windows_ip | ALERT
- question: Following a Unix user login, is a connection made to an internal Windows
    host and port combination that is statistically rare for the environment?
  context: An adversary's lateral movement may involve connections between hosts
    that do not normally communicate. This question establishes a baseline of all
    internal connections and flags any triplet (source Unix host, destination Windows
    server, port) that is statistically rare, highlighting unusual communication
    paths that could be indicative of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek smb_mapping.log
  - Zeek dce_rpc.log
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Linux audit.log
  - East-West network traffic sensors
  - Windows Domain Controllers
  - Windows member servers
  - Critical Unix/Linux servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_connection after unix_login | CREATE triplet (src_unix_host,
      dest_win_server, dest_port) | CALCULATE frequency of triplet in historical_data
      | ALERT if frequency < 5th_percentile
- question: Following a user login, does the user's sequence of internal network
    connections deviate from their established Markov chain model?
  context: Legitimate user activity often follows predictable sequences (e.g., connect
    to fileserver, then database). This question models these sequences as a Markov
    chain. If, after a login, a user makes a connection that represents a very low-probability
    state transition in their model (e.g., a developer's machine connecting to a domain
    controller's SMB share), the behavior is flagged as anomalous.
  answer_sources:
  - Zeek conn.log
  - Zeek smb_mapping.log
  - Zeek dce_rpc.log
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Linux audit.log
  - East-West network traffic sensors
  - Windows Domain Controllers
  - Windows member servers
  - Critical Unix/Linux servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_user, MODEL post-login_connection_sequence as Markov_chain |
      FOR new_connection_sequence, CALCULATE transition_probability | ALERT if probability
      is below established_threshold
- question: Are system-wide shell configuration files being modified by a non-root
    user or a process other than an authorized package manager?
  context: Modification of system-wide files like /etc/profile or /etc/bashrc affects
    all users on a system, making it a powerful technique for privilege escalation
    or widespread persistence. Legitimate modifications should only be performed
    by the root user, typically via a package manager. This question creates a high-priority
    alert for any unauthorized modification to these critical files.
  answer_sources:
  - Linux audit.log
  - Critical Unix/Linux servers
  - Production web servers
  - Centralized log aggregator
  - File Integrity Monitoring systems
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_write_events WHERE file_path IN ("/etc/profile", "/etc/bashrc",
      "/etc/profile.d/*") AND (user_id != 0 OR process_name NOT IN (allow_list_of_package_managers))
      | ALERT
- question: Has the content of a system-wide shell configuration file changed outside
    of a maintenance window, and is the change a small insertion rather than a full
    update?
  context: Adversaries often make small, targeted additions to system-wide files
    to add their malicious commands. In contrast, package updates usually replace
    the entire file or make larger changes. This question first detects changes outside
    of maintenance windows using file integrity monitoring, then analyzes the magnitude
    of the change (using Levenshtein distance) to distinguish suspicious insertions
    from legitimate updates.
  answer_sources:
  - Linux audit.log
  - Critical Unix/Linux servers
  - Production web servers
  - Centralized log aggregator
  - File Integrity Monitoring systems
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: ON file_hash_change_alert for system_shell_config | IF current_time is
      not in maintenance_window | CALCULATE levenshtein_distance(old_file, new_file)
      | ALERT if distance < 150
- question: Does the sequence of system calls preceding a write to a system-wide
    shell configuration file appear anomalous?
  context: The actions leading up to a legitimate file modification (e.g., by a package
    manager) are often predictable. An adversary's actions, such as a user escalating
    to root via `sudo` and then using `echo` to append to a file, will produce a different
    system call sequence. This question uses a model to detect these abnormal sequences,
    identifying potential privilege escalation attempts.
  answer_sources:
  - Linux audit.log
  - Critical Unix/Linux servers
  - Production web servers
  - Centralized log aggregator
  - File Integrity Monitoring systems
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: CAPTURE syscall_sequence before write_to_system_config_file | INPUT sequence
      to anomaly_detection_model | ALERT if sequence is anomalous
- question: Is a system boot or privileged user login on a critical server followed
    within 60 seconds by an outbound connection to a known malicious indicator?
  context: When a system-wide shell file is modified for persistence, the malicious
    code may execute upon system boot or when a privileged user logs in, triggering
    a C2 callback. This question correlates these critical events with subsequent
    outbound connections to known malicious destinations, providing a strong signal
    of compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Linux audit.log
  - Critical server subnet network sensors
  - Internet gateway
  - Core DNS resolvers
  - Centralized log aggregator for system boot/auth logs
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH boot_events OR privileged_login_events (uid=0) on critical_servers
      | JOIN with network_connections from server_ip where event_time_delta < 60s
      | ALERT if destination IN threat_intelligence_feed
- question: Following a system boot on a critical server, does the sequence of outbound
    network connections significantly deviate from the established baseline?
  context: Critical servers typically exhibit predictable network behavior during
    startup, contacting specific NTP, update, or monitoring servers. An adversary's
    implant, activated at boot, will introduce new, unexpected connections. This question
    baselines the normal boot-time connection sequence and uses a similarity index
    to detect deviations that could indicate a compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Linux audit.log
  - Critical server subnet network sensors
  - Internet gateway
  - Core DNS resolvers
  - Centralized log aggregator for system boot/auth logs
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_server_boot, CAPTURE connection_sequence in first 5_minutes |
      CALCULATE jaccard_similarity(current_sequence, baseline_sequence) | ALERT if
      similarity < 0.8
- question: Can the network activity during a critical server's boot sequence be
    classified as an outlier?
  context: This question provides a machine learning alternative for detecting anomalous
    boot-time activity. A one-class SVM is trained on features of normal boot sequences
    (e.g., connection counts, data volume). Any new boot sequence that falls outside
    the learned boundary of 'normal' is classified as an outlier, enabling the detection
    of novel C2 or exfiltration activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Linux audit.log
  - Critical server subnet network sensors
  - Internet gateway
  - Core DNS resolvers
  - Centralized log aggregator for system boot/auth logs
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: EXTRACT feature_vector (num_connections, bytes_out, distinct_ports) from
      boot_sequence | INPUT vector to one_class_SVM_model | ALERT if classified as
      outlier
- question: Following a privileged login on a Unix server, is there a spike in Kerberos
    TGS-REQ requests indicative of a Kerberoasting attempt?
  context: Once an adversary gains privileged access to a Unix server (potentially
    via a modified shell config), a common next step is internal reconnaissance.
    Kerberoasting is a technique to harvest credentials by requesting service tickets
    for many different services. This question detects this behavior by looking for
    a high volume of Kerberos requests using weak encryption from the compromised
    server.
  answer_sources:
  - Zeek conn.log
  - Zeek ldap.log
  - Zeek smb_mapping.log
  - Zeek kerberos.log
  - Windows Event ID 4769
  - East-West network traffic sensors
  - Domain Controllers
  - Critical Unix servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH privileged_login (uid=0) on unix_server | WITHIN 5_minutes, COUNT
      kerberos_tgs_req events (etype=23) from server_ip | ALERT if count > 20 for
      distinct_spns
- question: Following a privileged login on a Unix server, are there LDAP queries
    with unusually high complexity indicative of reconnaissance?
  context: Adversaries use LDAP to map out the Active Directory environment. Reconnaissance
    queries are often broad and complex, requesting many attributes or searching
    from the directory root. This question profiles normal LDAP query complexity
    from servers and flags queries that are statistical outliers, suggesting an attacker
    is enumerating the domain.
  answer_sources:
  - Zeek conn.log
  - Zeek ldap.log
  - Zeek smb_mapping.log
  - Zeek kerberos.log
  - Windows Event ID 4769
  - East-West network traffic sensors
  - Domain Controllers
  - Critical Unix servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH ldap_search_queries from unix_server after privileged_login | ALERT
      if query_filter_length > 95th_percentile OR requests_all_attributes OR uses_root_base_dn
- question: Following a privileged login, does a server exhibit network behavior
    (like SMB share enumeration) that is anomalous for its peer group?
  context: Servers with similar roles (e.g., all web servers) should have similar
    network behavior. If an attacker compromises one and uses it for reconnaissance,
    its behavior will diverge from its peers. This question uses peer group analysis
    to detect this deviation, such as a database server suddenly starting to enumerate
    SMB shares across the network.
  answer_sources:
  - Zeek conn.log
  - Zeek ldap.log
  - Zeek smb_mapping.log
  - Zeek kerberos.log
  - Windows Event ID 4769
  - East-West network traffic sensors
  - Domain Controllers
  - Critical Unix servers
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: CLUSTER servers by role into peer_groups | AFTER privileged_login, MONITOR
      server's network_activity (e.g., smb_enumeration) | ALERT if activity is not
      seen in server's peer_group
- question: Following a system boot or privileged login on a critical server, is
    there an outbound network connection to a destination not on the server's explicit
    allow-list?
  context: For critical servers, network egress should be tightly controlled and
    predictable. This question implements a zero-trust approach by defining a strict,
    machine-readable allow-list of destinations (ASNs, countries, ports) for each
    server. Any connection outside this list, especially after a boot or privileged
    login, is immediately flagged as a high-priority security event.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Linux audit.log
  - Critical server subnet network sensors
  - Internet gateway
  - Egress filtering points
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: AFTER boot or privileged_login on critical_server | FOR each outbound_connection
      | CHECK if (destination_asn, destination_country, destination_port) is in server_allow_list
      | ALERT if not found
- question: Following a privileged login on a critical server, is a connection made
    to a destination port that is a statistical outlier for that server?
  context: Even without a strict allow-list, a server's outbound connections tend
    to use a predictable set of ports. An adversary's C2 or exfiltration tool might
    use an uncommon port. This question establishes a baseline distribution of normal
    destination ports and uses statistical outlier detection (Inter-Quartile Range)
    to identify connections to unusual ports that require investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Linux audit.log
  - Critical server subnet network sensors
  - Internet gateway
  - Egress filtering points
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_server, establish_baseline_port_distribution | AFTER privileged_login,
      FOR each outbound_connection | ALERT if destination_port is outside 1.5 * IQR
      of baseline
- question: Following a privileged login on a critical server, is there a significant,
    unforecasted spike in outbound data volume?
  context: A common attacker objective after gaining privileged access is data exfiltration.
    This activity often results in a large, anomalous transfer of outbound data.
    This question uses a time-series forecasting model to predict the expected data
    volume for a server and alerts when the actual volume significantly exceeds the
    forecast, which could indicate data theft.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Linux audit.log
  - Critical server subnet network sensors
  - Internet gateway
  - Egress filtering points
  - Centralized log aggregator
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each_server, FORECAST expected_outbound_data_volume using time_series_model
      | AFTER privileged_login, MONITOR actual_outbound_volume | ALERT if actual_volume
      significantly exceeds forecast
- question: Is a privileged login on a Unix server followed by a successful, high-privilege
    authentication to a Domain Controller's administrative share?
  context: This question looks for a very specific and high-confidence attack chain:
    an adversary gains root on a Unix box and immediately uses that access to pivot
    to a high-value Windows target, like a Domain Controller. By correlating the
    Unix privileged login with a successful Windows logon to an administrative share
    (ADMIN$, C$, IPC$), this query can detect critical lateral movement attempts.
  answer_sources:
  - Zeek smb_mapping.log
  - Windows Event ID 4624
  - Zeek dce_rpc.log
  - Linux audit.log
  - Domain Controllers
  - High-value Windows servers
  - East-West network traffic sensors monitoring server-to-server communication
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: TRIGGER on privileged_login (uid=0) on unix_server | WITHIN 5_minutes,
      LOOK for successful_logon (EID 4624) on domain_controller from unix_server_ip
      AND connection_to_admin_share (ADMIN$, C$) | ALERT if all conditions met
- question: Following a privileged login on a Unix server, does a subsequent administrative
    connection to a Windows host create a new, previously unseen access path in the
    environment's access graph?
  context: Legitimate administrative access paths in an environment are usually
    static. This question models the environment as a graph where nodes are hosts
    and edges represent administrative access. If a privileged login on a Unix server
    leads to an administrative connection that creates a new edge in this graph (e.g.,
    this Unix server has never accessed this Windows share before), it is flagged
    as a potentially malicious and unauthorized access path.
  answer_sources:
  - Zeek smb_mapping.log
  - Windows Event ID 4624
  - Zeek dce_rpc.log
  - Linux audit.log
  - Domain Controllers
  - High-value Windows servers
  - East-West network traffic sensors monitoring server-to-server communication
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: MAINTAIN graph of (source_host, destination_share) administrative connections
      | AFTER privileged_unix_login, MONITOR for new SMB connections to admin shares
      | ALERT if connection creates a previously unseen edge in the graph
- question: Does the sequence of events following a privileged Unix login result
    in a cumulative risk score that crosses a predefined alert threshold?
  context: Instead of alerting on a single event, this approach uses a risk scoring
    model to assess the entire chain of activity. A privileged login adds some risk;
    if that host then connects to a DC, the risk increases; if the host is not an
    approved management station, the risk increases further. This allows for context-aware
    detection, only triggering a high-priority alert when the cumulative evidence
    strongly indicates a compromise.
  answer_sources:
  - Zeek smb_mapping.log
  - Windows Event ID 4624
  - Zeek dce_rpc.log
  - Linux audit.log
  - Domain Controllers
  - High-value Windows servers
  - East-West network traffic sensors monitoring server-to-server communication
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'INITIATE risk_score = 0 | ON privileged_unix_login: risk_score += 20 |
      ON connection_to_dc_admin_share: risk_score += 50 | ON source_host is not_management_station:
      risk_score += 30 | ALERT if risk_score > 90'