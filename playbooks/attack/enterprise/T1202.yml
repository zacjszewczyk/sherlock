name: T1202: Indirect Command Execution
id: 5a81e3c2-1f99-4475-9276-8e5612f4164b
description: This playbook helps investigate whether an adversary has bypassed security restrictions using indirect command execution (T1202). It focuses on detecting when utilities like forfiles.exe, pcalua.exe, scriptrunner.exe, or ssh.exe are used maliciously. Key investigative areas include the spawning of known malicious child processes, execution with suspicious command-line arguments, initiation of anomalous outbound network connections to new or malicious destinations, and involvement in unusual process chains, such as being spawned by an office application and then launching a command interpreter.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a utility associated with indirect command execution spawned a child process with a known malicious hash?
  context: This question aims to identify high-confidence threats by correlating process creation events with threat intelligence. When a utility like forfiles.exe, pcalua.exe, scriptrunner.exe, or ssh.exe, which can be used for indirect command execution, creates a new process, we must verify the integrity of that child process. Checking the child process's hash (e.g., SHA256) against a database of known malicious file hashes provides a direct and reliable way to detect malware execution. A match is a strong indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Privileged Access Workstations (PAWs)
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., Sysmon Event ID 1)
      WHERE parent_process_name IN ("forfiles.exe", "pcalua.exe", "scriptrunner.exe", "ssh.exe")
      LOOKUP child_process_hash against threat_intelligence_feed
      IF match_found:
        GENERATE high_severity_alert
- question: Have any indirect command execution utilities spawned statistically rare child processes?
  context: This question uses a statistical approach to find anomalies. Adversaries often use custom or renamed tools, which will not be caught by hash-based lookups. By baselining normal parent-child process relationships, we can identify rare combinations. A utility like forfiles.exe spawning an uncommon process, especially one with a randomized name (high entropy), is suspicious and could indicate malicious activity that deviates from established norms.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Privileged Access Workstations (PAWs)
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each parent in ("forfiles.exe", "pcalua.exe", "scriptrunner.exe", "ssh.exe"):
        CALCULATE frequency distribution of child_process_names over last 90 days
        IDENTIFY parent-child pairs in the bottom 5th percentile of frequency
        CALCULATE entropy of the child_process_name
        IF rarity_is_low AND entropy > 3.5:
          GENERATE medium_severity_alert
- question: Can a machine learning model classify any process creation events originating from indirect execution utilities as malicious?
  context: This question leverages a machine learning model to detect complex patterns of malicious behavior that symbolic and statistical methods might miss. By training a classifier on features like process names, command-line arguments, and execution directories, the model can learn the nuanced differences between benign and malicious activity. This is particularly useful for detecting novel or evasive techniques that do not conform to simple rules.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Privileged Access Workstations (PAWs)
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each process_creation_event where parent_process_name IN ("forfiles.exe", "pcalua.exe", "scriptrunner.exe", "ssh.exe"):
        EXTRACT features (parent_name, child_entropy, cmd_length, suspicious_keywords, non-standard_dir)
        INPUT features into trained Random Forest model
        IF model_prediction == 'malicious' with high probability:
          GENERATE alert for analyst review
- question: Has an indirect execution utility been run with command-line arguments matching known malicious patterns?
  context: This question seeks to identify malicious use of legitimate system utilities by inspecting their command-line arguments. Certain argument patterns are strongly associated with malicious activity, such as using 'forfiles.exe' with '/c' to execute a command, 'pcalua.exe' with '-a' to run an arbitrary executable, or 'ssh.exe' with '-o LocalCommand' to execute a command locally. Detecting these specific patterns provides a high-fidelity signal of an attempted defense evasion.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Jump Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., Sysmon Event ID 1)
      WHERE command_line MATCHES REGEX ('forfiles\\.exe /p .* /c', 'pcalua\\.exe -a .*', 'scriptrunner\\.exe -appvscript .*', 'ssh\\.exe .* -o (ProxyCommand|LocalCommand)')
      IF match_found:
        GENERATE alert
- question: Have any indirect execution utilities been executed with an anomalously long command line or a high number of arguments?
  context: This question uses statistical baselining to detect unusual command-line activity. Adversaries often construct complex command lines to perform obfuscated actions, resulting in longer commands or more arguments than typical administrative use. By establishing a baseline for normal command-line length and argument count for each utility, we can flag significant deviations (e.g., those in the 99th percentile) as suspicious anomalies requiring investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Jump Servers
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each utility in ("forfiles.exe", "pcalua.exe", "scriptrunner.exe", "ssh.exe"):
        CALCULATE baseline of command_line_length and argument_count over 30 days (95th and 99th percentiles)
      SEARCH for new executions of the utility
      IF command_line_length > 99th_percentile OR argument_count > 99th_percentile:
        GENERATE high_severity_alert
      ELSE IF command_line_length > 95th_percentile OR argument_count > 95th_percentile:
        GENERATE medium_severity_alert
- question: Can a machine learning model identify novel or anomalous command-line usage for indirect execution utilities?
  context: This question applies unsupervised machine learning to find outliers in command-line usage without relying on predefined rules or signatures. By vectorizing command-line arguments (e.g., using TF-IDF) and applying a clustering algorithm like DBSCAN, we can group together common, legitimate usage patterns. Any command that does not fit into an established cluster is flagged as 'noise' or an anomaly, representing a potentially new or unknown malicious technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Jump Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      VECTORIZE command_line_arguments for T1202 utilities using TF-IDF model
      APPLY DBSCAN clustering to identify common usage groups
      FOR each new command_line_execution:
        IF DBSCAN_model classifies as 'noise' (outlier):
          GENERATE alert for immediate investigation
- question: Has a process associated with indirect command execution initiated a network connection to a known malicious IP address?
  context: This question aims to detect command and control (C2) or data exfiltration activity by monitoring network connections from T1202-related processes. When a utility like forfiles.exe or scriptrunner.exe makes an outbound connection, it is highly suspicious. By enriching the destination IP address with threat intelligence, we can immediately identify if the connection is being made to a known malicious server, providing a high-confidence alert of compromise.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek notice.log
  - Network Egress Points (e.g., Firewalls, Proxies)
  - DNS Servers
  - Host-based firewalls
  - Host-level Network Telemetry on critical servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH network_connection_events (e.g., Sysmon Event ID 3)
      WHERE process_name IN ("forfiles.exe", "pcalua.exe", "scriptrunner.exe", "ssh.exe")
      LOOKUP destination_ip against threat_intelligence_feed
      IF match_found:
        GENERATE high_severity_alert
- question: Has a process associated with indirect command execution connected to a destination country or ASN for the first time from a specific host?
  context: This question seeks to identify anomalous network behavior by profiling the geographic and network-level destinations of T1202-related processes. Benign processes typically communicate with a predictable set of countries or Autonomous Systems (ASNs). A connection from a host to a destination in a country or ASN never before seen for that process on that host is a significant deviation from the baseline. This 'first-seen geo/ASN' event can indicate C2 communication or exfiltration to a new adversary-controlled infrastructure.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek notice.log
  - Network Egress Points (e.g., Firewalls, Proxies)
  - DNS Servers
  - Host-based firewalls
  - Host-level Network Telemetry on critical servers and workstations
  range: last 60 days
  queries:
  - technology: pseudocode
    query: |-
      MAINTAIN baseline of (host, process_name, destination_country, destination_asn) pairs over 60 days
      FOR each new network_connection_event from a T1202-related process:
        IF (host, process_name, destination_country) is a new combination OR (host, process_name, destination_asn) is a new combination:
          GENERATE alert for a first-seen geo/ASN connection
- question: Does the outbound data volume from an indirect execution process show a temporal anomaly indicative of unexpected data transfer?
  context: This question uses a machine learning model to detect anomalies in the pattern of data transfer over time, rather than just the destination. C2 check-ins might be small and regular, while data exfiltration could cause a large, sudden spike in outbound traffic. An LSTM autoencoder can learn the normal 'rhythm' of a process's network activity. When the actual data volume significantly deviates from the model's prediction (high reconstruction error), it signals a temporal anomaly that could correspond to malicious activity like data staging or exfiltration.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek notice.log
  - Network Egress Points (e.g., Firewalls, Proxies)
  - DNS Servers
  - Host-based firewalls
  - Host-level Network Telemetry on critical servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each T1202-related process:
        TRAIN LSTM autoencoder on historical time series of outbound_bytes
      FOR each new time step:
        PREDICT next outbound_bytes value using the model
        CALCULATE reconstruction_error between actual and predicted value
        IF reconstruction_error > dynamic_threshold:
          GENERATE alert for temporal anomaly
- question: Have any forbidden or high-fidelity malicious process chains involving an indirect execution utility been observed?
  context: This question looks for specific, known-bad process execution chains. While a tool like forfiles.exe can be used legitimately, it should almost never be spawned by Microsoft Word (WINWORD.EXE), which then in turn spawns a command prompt (cmd.exe). This type of lineage is a classic indicator of a malicious macro or document-based exploit. By defining and alerting on these high-confidence 'forbidden' chains, we can detect active exploitation with very few false positives.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Virtual Desktop Infrastructure (VDI)
  - Application Servers (e.g., Citrix, SharePoint)
  - Web Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events with parent-child relationships (e.g., Sysmon Event ID 1)
      LOOK for specific chains like:
        - Parent: WINWORD.EXE -> Child: forfiles.exe -> Grandchild: cmd.exe
        - Parent: OUTLOOK.EXE -> Child: pcalua.exe -> Grandchild: powershell.exe
      IF a forbidden chain is detected:
        GENERATE high_severity_alert
- question: Have any statistically rare three-process execution chains involving an indirect execution utility occurred?
  context: This question aims to find unusual process chains without relying on a predefined list of 'bad' ones. By building a graph of all process relationships in the environment, we can calculate the probability of any given chain of events (A -> B -> C). A chain with a very low calculated probability is, by definition, rare and anomalous. This statistical approach can uncover novel attack paths that have not been seen before, such as an unusual server process spawning forfiles.exe, which then spawns a network utility.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Virtual Desktop Infrastructure (VDI)
  - Application Servers (e.g., Citrix, SharePoint)
  - Web Servers
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |-
      BUILD graph of all parent-child process relationships over 30 days
      CALCULATE conditional probabilities P(Child|Parent) for all edges
      FOR each observed 3-process chain (A -> B -> C):
        CALCULATE path_rarity_score = P(B|A) * P(C|B)
        IF path_rarity_score < 0.00001:
          GENERATE alert for rare process chain
- question: Can a Graph Neural Network model identify anomalous process subgraphs involving an indirect execution utility?
  context: This question employs advanced machine learning on process graph data to find structurally anomalous behavior. A Graph Neural Network (GNN) can learn what 'normal' process activity looks like, not just as a linear chain, but as a complex subgraph of interactions including user context and command lines. When a new process chain occurs, the GNN can compare its learned representation (embedding) to known-benign patterns. A significant deviation indicates a structural anomaly that is likely malicious, even if the individual processes and parent-child pairs seem plausible in isolation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Virtual Desktop Infrastructure (VDI)
  - Application Servers (e.g., Citrix, SharePoint)
  - Web Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      REPRESENT process activity as a graph (nodes=processes, edges=parent-child)
      TRAIN GraphSAGE model on the graph to learn 'normal' subgraph embeddings
      FOR each new process chain (subgraph):
        CALCULATE its embedding using the trained model
        COMPARE its embedding to known-benign embeddings using cosine distance
        IF distance is large:
          GENERATE alert for structural anomaly