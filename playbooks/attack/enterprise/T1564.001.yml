name: T1564.001: Hidden Files and Directories
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is attempting to evade defenses by hiding files or directories on a system. It focuses on detecting several common methods for achieving this, including the use of the 'attrib.exe' command with the '+h' flag to set the hidden attribute, the manipulation of file attributes via PowerShell commands, the creation of Unix-style 'dot-files' on Windows systems, and the execution of processes from hidden locations that subsequently initiate outbound network connections. By monitoring for these specific indicators, analysts can identify attempts to conceal malicious tools, data, or persistence mechanisms.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events for 'attrib.exe' with the '+h' command-line argument, indicating a file is being hidden?
    context: This question aims to detect the direct use of the native Windows 'attrib.exe' utility to set the hidden attribute on files or directories. Adversaries use this common technique to conceal their tools, scripts, or stolen data from casual user observation. Detecting this action requires monitoring process execution events. To reduce noise from legitimate administrative activities, it is crucial to filter out executions originating from known software deployment or management tools by whitelisting their parent processes or specific command lines.
    answer_sources:
      - Windows Event ID 4688 from User workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (EventID 4688)
          WHERE process_name == 'attrib.exe' AND command_line CONTAINS '+h'
          AND parent_process_name NOT IN (allowlist_of_admin_tools)
  - question: Has any host exhibited an abnormally high frequency of 'attrib.exe +h' executions compared to its baseline?
    context: This question focuses on identifying outlier behavior by baselining the frequency of file hiding activity on a per-host basis. A sudden spike in 'attrib.exe +h' executions on a single machine, exceeding a statistically derived threshold (e.g., 99th percentile), can indicate automated or scripted malicious activity, such as a ransomware precursor hiding staging files. This moves beyond single-event detection to identify suspicious volumes of activity.
    answer_sources:
      - Windows Event ID 4688 from User workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE baseline = (
            SEARCH process_creation_events (EventID 4688)
            WHERE process_name == 'attrib.exe' AND command_line CONTAINS '+h'
            AGGREGATE count by host, per_24_hours over last 30 days
            CALCULATE percentile(count, 99) as threshold
          )
          SEARCH process_creation_events (EventID 4688)
          WHERE process_name == 'attrib.exe' AND command_line CONTAINS '+h'
          AGGREGATE count by host, per_24_hours
          WHERE count > baseline.threshold
  - question: Can machine learning predict if an 'attrib.exe +h' execution is malicious based on its context?
    context: This question leverages a supervised machine learning model to classify 'attrib.exe +h' events as malicious or benign. The model is trained on labeled historical data, using features like the parent process, user account, time of day, and target file path. This advanced analytic can uncover subtle malicious patterns that are difficult to define with static rules, such as a non-IT user hiding a file in a sensitive system directory outside of business hours.
    answer_sources:
      - Windows Event ID 4688 from User workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features (parent_process, user, time_of_day, target_directory) from process_creation_events (EventID 4688) for 'attrib.exe +h'
          INPUT features into trained_classification_model
          ALERT where model_prediction == 'malicious'
  - question: Have any PowerShell scripts been executed that set a file's 'IsHidden' attribute to true?
    context: Adversaries frequently use PowerShell for its power and ability to blend in with administrative activity ('living off the land'). This question targets the specific PowerShell commands used to hide files, either by setting the 'IsHidden' property or by directly manipulating the file's attributes. By scanning PowerShell script block logs for these specific patterns, analysts can detect this evasion technique even when obfuscated within larger scripts.
    answer_sources:
      - Windows Event ID 4104 from User workstations, Exchange Servers, Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH powershell_script_block_logs (EventID 4104)
          WHERE script_block_text MATCHES REGEX '(\.Attributes.*\\+|Set-ItemProperty.*-Name\\s+IsHidden\\s+-Value\\s+\\$true)'
          AND script_hash NOT IN (allowlist_of_admin_scripts)
  - question: Is any user executing PowerShell hiding commands that are unusually obfuscated or random?
    context: This question seeks to identify malicious PowerShell scripts by analyzing their content for high entropy, which is a common characteristic of obfuscated or packed code. Adversaries use obfuscation to evade signature-based detections. By calculating the Shannon entropy of scripts that hide files and flagging users whose scripts show a significant deviation from the norm, analysts can uncover sophisticated threats that would otherwise go unnoticed.
    answer_sources:
      - Windows Event ID 4104 from User workstations, Exchange Servers, Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each powershell_script_block_log (EventID 4104) that hides a file:
            CALCULATE shannon_entropy(script_block_text)
          AGGREGATE avg(entropy) by user over last 7 days
          CALCULATE overall_mean_entropy and std_dev_entropy for all users
          ALERT where user_avg_entropy > (overall_mean_entropy + 3 * std_dev_entropy)
  - question: Are there distinct clusters of PowerShell file-hiding scripts that are anomalous or do not map to known tools?
    context: This question applies unsupervised machine learning to group similar PowerShell scripts that perform file-hiding operations. By clustering scripts based on their content (using TF-IDF) and metadata, legitimate administrative scripts will form large, dense clusters, while malicious or unique scripts will appear as small, distinct clusters or outliers. This helps analysts discover novel attack tools without prior knowledge of their signatures.
    answer_sources:
      - Windows Event ID 4104 from User workstations, Exchange Servers, Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          VECTORIZE powershell_script_blocks that hide files using TF-IDF and metadata features
          APPLY clustering_algorithm (e.g., DBSCAN) to vectors
          ANALYZE and ALERT on small clusters or outlier points not belonging to known admin tool clusters
  - question: Have any files or directories been created on Windows with a name that starts with a period (dot-file)?
    context: On Unix-like systems, files starting with a period ('.') are hidden by default. While this is a standard convention in that environment (e.g., for configuration files like '.bashrc'), it is highly unusual on Windows. Adversaries may create 'dot-files' on Windows systems to hide their tools, assuming that administrators and security products might overlook them. This question searches for this anomalous naming convention in file creation and process execution logs.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 4663 from User profile directories (e.g., 'C:\Users\<username>\'), temporary directories ('%TEMP%'), web server root directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_creation_events (EventID 4663) OR process_creation_events (EventID 4688)
          WHERE file_path MATCHES REGEX '\\\\.[^\\\s]+'
          AND parent_process_name NOT IN (allowlist_of_dev_tools_like_git)
  - question: Is an uncommon process creating dot-files on a Windows system?
    context: While some developer tools (like 'git') legitimately create dot-files on Windows, most other processes do not. This question establishes a baseline of normal processes that create dot-files and then flags any activity from processes outside this baseline. By focusing on the rarity of the parent process, this analytic can quickly pinpoint a potentially malicious tool attempting to hide its components using this Unix-style convention on a Windows host.
    answer_sources:
      - Windows Event ID 4663, Windows Event ID 4688 from User profile directories (e.g., 'C:\Users\<username>\'), temporary directories ('%TEMP%'), web server root directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE baseline = (
            SEARCH events with dot-file creation
            AGGREGATE count by parent_process_name over last 30 days
            FILTER for top 95% of processes by frequency
          )
          SEARCH events with dot-file creation
          WHERE parent_process_name NOT IN (baseline.processes)
          ALERT on event
  - question: Has there been an anomalous spike in the creation of dot-files across the enterprise?
    context: This question uses time-series analysis to detect a widespread, coordinated attack involving the use of dot-files for hiding artifacts. A sudden, anomalous increase in the rate of dot-file creation across the entire organization, accounting for normal daily and weekly patterns, could indicate a malware outbreak or a campaign by a single threat actor. This macro-level view helps detect large-scale events that might be missed when looking at individual hosts.
    answer_sources:
      - Windows Event ID 4663, Windows Event ID 4688 from User profile directories (e.g., 'C:\Users\<username>\'), temporary directories ('%TEMP%'), web server root directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE count of dot-file creation events per hour across all hosts
          APPLY time_series_anomaly_detection (e.g., Seasonal ESD) to the hourly count
          ALERT when any hour is flagged as an anomaly
  - question: Is a process running from a hidden file path making an outbound network connection?
    context: This is a high-fidelity question that correlates two distinct suspicious behaviors: execution from a hidden location and external network communication. Legitimate software rarely runs from a hidden file and connects to the internet. This combination is a strong indicator of a malicious implant (e.g., a backdoor or C2 agent) attempting to conceal its presence while communicating with its operator. Correlating file, process, and network data is key to answering this.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 5156, Zeek conn.log, Zeek dns.log from Network egress points (Firewall, Proxy), DNS servers, endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN state_table of hidden_files from 'attrib.exe' or PowerShell events
          CORRELATE process_creation_events (EventID 4688) with network_connection_events (Zeek conn.log) by host and time
          ALERT where process_path IN hidden_files AND destination_ip is external (not RFC1918)
  - question: Is a process running from a hidden location connecting to a rare or suspicious domain?
    context: Building on the previous question, this analytic scrutinizes the destination of the network traffic. Even if an adversary's C2 server IP address changes, the domain name might be more stable or share patterns. By analyzing the domains resolved by processes running from hidden files and comparing them against a baseline of domain popularity across the enterprise, connections to very rare or newly observed domains become highly suspect and can unmask a C2 channel.
    answer_sources:
      - Zeek dns.log, Windows Event ID 4688 from Network egress points (Firewall, Proxy), DNS servers, endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          IDENTIFY processes running from hidden locations making network connections
          FOR each connection, get the DNS query (Zeek dns.log)
          CALCULATE frequency of all domains (public suffix + 1) over last 30 days
          ALERT if process connects to a domain in the bottom 5th percentile of frequency
  - question: Can a graph-based model identify malicious subgraphs involving processes running from hidden files?
    context: This question represents a sophisticated, context-rich approach to detection. It models endpoint and network activity as a graph, where nodes are entities like processes, files, and IPs, and edges represent their relationships. By enriching this graph with features (e.g., 'isHidden' for files, threat intelligence for IPs) and applying a Graph Neural Network (GNN), the system can learn to identify complex, multi-hop attack patterns involving hidden files that would be nearly impossible to define with traditional rules or queries.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 5156, Zeek conn.log, Zeek dns.log from Network egress points (Firewall, Proxy), DNS servers, endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CONSTRUCT graph with nodes (process, file, IP, domain) and edges (executed, connected_to, resolved)
          ENRICH nodes with features (e.g., file.isHidden, ip.threat_score)
          APPLY trained GNN model to classify subgraphs (e.g., process -> file, process -> IP)
          ALERT on subgraphs classified as malicious