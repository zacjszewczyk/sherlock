name: "T1027.013: Encrypted-Encoded File"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: |
  This playbook helps determine if an adversary is using encrypted or encoded files to evade defenses and conceal malicious activity. It focuses on detecting evidence such as files matching known malicious hashes (especially packers), processes executing decoding utilities (like certutil or PowerShell's FromBase64String), files with deceptive double extensions (e.g., invoice.pdf.exe), files exhibiting unusually high entropy, anomalous encoded strings in network traffic or command lines, and correlated event sequences that indicate a file is being decoded and executed.
type: "technique"
related: 
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "How can we detect known malicious files, especially those associated with packers or droppers that use encryption, being transferred over the network or created on a host?"
    context: |
      This question aims to identify threats at the entry point by matching file hashes against known malicious indicators. A multi-tiered approach is essential because attackers constantly repackage malware to change its hash. A symbolic check provides immediate hits on known threats. A statistical check detects surges in new malicious files, indicating a potential campaign. A machine learning model can proactively flag suspicious files based on their characteristics, even without a direct hash match, providing a predictive layer of defense.
    answer_sources: 
      - "Zeek files.log"
      - "Windows Event ID 4663"
      - "Internet gateways"
      - "web proxies"
      - "email servers"
      - "user workstations"
      - "file servers"
      - "cloud storage synchronization folders"
    range: "last 90 days"
    queries:
      - symbolic: "SEARCH file_events | HASH file | LOOKUP hash in threat_intel_db | WHERE match_found ALERT"
      - statistical: "SEARCH malicious_hash_alerts | BUCKET by hour | COMPARE current_rate to 7_day_moving_average | WHERE current_rate > 3_std_dev ALERT"
      - machine_learning: "PIPE file_events to reputation_classifier_model | WHERE score > threshold ALERT"

  - question: "Are there processes being created with command-line arguments or script content that indicate the use of decoding utilities or the execution of self-extracting archives from unusual locations?"
    context: |
      This question focuses on detecting the 'living-off-the-land' technique where adversaries use legitimate system tools (like certutil, openssl, PowerShell) to decode and execute malicious payloads. Monitoring command lines and script blocks is critical for catching this stage. A symbolic approach uses regular expressions to find explicit calls to these tools. A statistical approach baselines normal command-line length and complexity (entropy) for specific parent-child process relationships, flagging outliers. A machine learning model can be trained to recognize the nuanced patterns of malicious command-line invocations.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "user workstations"
      - "application servers"
      - "domain controllers"
      - "developer environments"
    range: "last 90 days"
    queries:
      - symbolic: "SEARCH process_creation_events or script_block_logs | REGEX command_line for decoding_patterns | WHERE match_found ALERT"
      - statistical: "SEARCH process_creation_events | CALCULATE command_line_entropy, length | COMPARE to baseline for parent_child_pair | WHERE value > 98th_percentile ALERT"
      - machine_learning: "PIPE command_lines to classification_model | WHERE score is 'malicious' ALERT"

  - question: "Can we identify files that have deceptive filenames with multiple extensions or manipulated Byte Order Marks (BOMs) to disguise their true nature?"
    context: |
      This question addresses a common social engineering tactic where an adversary tries to trick a user into running a malicious file by disguising it as a benign document (e.g., 'document.txt.js'). A symbolic regex search can catch common double-extension patterns. Statistical analysis helps find new or rare deceptive patterns by tracking the frequency of all observed extension combinations. A machine learning time-series model can detect sudden spikes in the creation of such files, which could indicate a widespread phishing or malware distribution campaign.
    answer_sources:
      - "Windows Event ID 4663"
      - "Zeek files.log"
      - "network shares"
      - "user home directories (%USERPROFILE%)"
      - "email attachment directories"
      - "web download folders"
      - "removable media"
    range: "last 90 days"
    queries:
      - symbolic: "SEARCH file_events | REGEX filename for /.*\\.(pdf|docx|txt|jpg)\\.(exe|js|vbs|ps1)$/i | WHERE match_found ALERT"
      - statistical: "SEARCH file_events | CALCULATE frequency of extension_patterns | WHERE rarity_score > threshold ALERT"
      - machine_learning: "MONITOR daily_count of suspicious_filenames with time_series_model | WHERE count deviates_from_forecast ALERT"

  - question: "Are files being created or transferred that exhibit unusually high Shannon entropy for their type or are password-protected, particularly in high-risk directories?"
    context: |
      This question seeks to identify obfuscated payloads by analyzing their content characteristics. High Shannon entropy is a strong indicator of encryption or compression, which adversaries use to hide malicious code. A statistical approach establishes a normal entropy baseline for different file types (e.g., .txt, .ps1) and flags files that are significant outliers. A symbolic check can specifically identify password-protected archives, which are often used to bypass automated scanning. An unsupervised machine learning model like an Isolation Forest can combine multiple file features (entropy, size, location) to score files for anomalousness.
    answer_sources:
      - "Windows Event ID 4663"
      - "Zeek files.log"
      - "user profile temporary directories (e.g., %TEMP%, %LOCALAPPDATA%)"
      - "web browser cache and download folders"
      - "network egress points"
      - "email quarantine systems"
    range: "last 90 days"
    queries:
      - symbolic: "SEARCH archive_file_events | WHERE password_protected_flag is true AND source_reputation is low ALERT"
      - statistical: "SEARCH file_events | CALCULATE entropy | COMPARE to baseline for file_type | WHERE entropy > 3_std_dev_from_mean ALERT"
      - machine_learning: "PIPE file_metadata to isolation_forest_model | WHERE anomaly_score is high ALERT"

  - question: "Are we observing encoded strings (e.g., Base64, Hex) in command lines, script logs, or network traffic that are anomalous in length or character distribution?"
    context: |
      This question targets the use of encoded data for covert communication or payload delivery within otherwise legitimate channels like DNS queries or HTTP POST requests. A symbolic regex can find common encoding patterns. However, since encoding is also used for benign purposes, a statistical approach is needed to baseline the normal length and complexity of encoded strings in different contexts (e.g., a long encoded string in a DNS query is highly suspicious). A time-series model can monitor the volume of encoded data in specific channels, flagging unusual spikes that may indicate a C2 or exfiltration channel is active.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Domain Name System (DNS) infrastructure"
      - "web proxies and gateways"
      - "user workstations"
      - "application servers"
      - "API gateways"
    range: "last 90 days"
    queries:
      - symbolic: "SEARCH logs (process, script, http, dns) | REGEX for base64_or_hex_patterns | WHERE length > 1024 ALERT"
      - statistical: "SEARCH logs by context | CALCULATE encoded_string_length | COMPARE to baseline for context | WHERE length > 99th_percentile ALERT"
      - machine_learning: "MONITOR volume of encoded_data in network_channels with time_series_model | WHERE volume deviates_from_forecast ALERT"

  - question: "Can we detect a correlated sequence of events, such as a process reading a high-entropy file, then decoding it, and finally making a suspicious network connection, all within a short time frame?"
    context: |
      This question focuses on detecting an attack chain by correlating seemingly disparate events. A single event, like a file write or a network connection, may not be malicious on its own, but their sequence can be a strong indicator of compromise. A symbolic correlation rule in a SIEM can detect a specific, predefined attack pattern. A statistical risk-scoring model can dynamically score process activity, escalating alerts as more suspicious actions are chained together. A graph-based machine learning model can analyze relationships between processes, files, and network activity to identify complex attack subgraphs in near-real-time.
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "user workstations"
      - "critical servers (e.g., Domain Controllers, database servers)"
      - "network egress points"
      - "virtual desktop infrastructure (VDI) environments"
    range: "last 90 days"
    queries:
      - symbolic: "CORRELATE [file_write with high_entropy] -> [process_create with decoding_keyword] -> [network_connection to low_rep_ip] within 5 mins ALERT"
      - statistical: "SCORE process_sessions based on event_chains | WHERE total_score > threshold ALERT"
      - machine_learning: "ANALYZE event_graph with GNN | IDENTIFY subgraphs matching known attack_patterns ALERT"