name: T1546.011: Application Shimming
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps investigate whether an adversary has established persistence or escalated privileges by creating and installing a custom application shim. Application shimming is a native Windows compatibility feature that can be abused to intercept API calls and redirect code execution. Adversaries may install malicious shim database (.sdb) files to target specific applications, often for persistence by loading malicious code when a common application starts, or for privilege escalation by targeting auto-elevating executables to bypass User Account Control (UAC). Evidence includes the creation of new .sdb files in system or user-writable directories, the execution of the `sdbinst.exe` utility with suspicious file paths, modifications to shim-related registry keys, and anomalous behavior from shimmed processes, such as spawning suspicious child processes or making unusual network connections.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any new shim database (.sdb) files been created in the custom shim directory that match known malicious hashes or YARA rules?
    context: This question targets the direct creation of malicious shim databases in the default custom shim folder (`%WINDIR%\AppPatch\Custom\`). Adversaries place `.sdb` files here to achieve persistence. This query automates detection by triggering on file creation, checking the file's hash against threat intelligence, and scanning its content with YARA rules, enabling a rapid response to known threats.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH file_creation (Sysmon EID 11)
          WHERE file_path CONTAINS "\\AppPatch\\Custom\\" AND file_name ENDS WITH ".sdb"
          // For each result, automate:
          // 1. HASH file
          // 2. QUERY threat_intel with hash
          // 3. SCAN file with YARA rules for malicious shims
          // ALERT on any match
  - question: Have any newly created custom shim database (.sdb) files exhibited unusually high entropy, suggesting packed or encrypted content?
    context: This question aims to detect unknown or obfuscated malicious shims by analyzing their file entropy. High entropy in a file often indicates that it contains encrypted or compressed data, a common tactic used by adversaries to hide malicious code. By establishing a baseline entropy for legitimate `.sdb` files and alerting on significant deviations, analysts can identify suspicious files that may not match known signatures.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new_file IN file_creation_events
          WHERE file_path CONTAINS "\\AppPatch\\Custom\\" AND file_name ENDS WITH ".sdb"
            current_entropy = CALCULATE_ENTROPY(new_file)
            baseline_entropy_95th = GET_BASELINE_ENTROPY(file_type=".sdb")
            IF current_entropy > baseline_entropy_95th
              ALERT "High entropy SDB file detected"
  - question: Has a machine learning model identified any newly created custom shim database (.sdb) files as malicious?
    context: This question leverages a machine learning classifier to identify malicious `.sdb` files based on their intrinsic features, such as byte-level n-grams. This approach can detect novel threats that evade signature-based and simple heuristic methods. An alert from a high-confidence model provides a strong signal of a potential compromise that requires immediate investigation.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: ML Model
        query: |
          ON file_creation_event
          WHERE file_path CONTAINS "\\AppPatch\\Custom\\" AND file_name ENDS WITH ".sdb"
            prediction, confidence = CLASSIFY_FILE(file_content)
            IF prediction == "malicious" AND confidence > 0.90
              ALERT "ML model detected malicious SDB file"
  - question: Has the shim installer `sdbinst.exe` been executed with a database file from a suspicious, user-writable directory?
    context: This question focuses on the installation process of a shim. While `sdbinst.exe` is a legitimate tool, adversaries abuse it by pointing it to malicious `.sdb` files staged in non-standard, user-writable locations like `C:\Users\` or `C:\Temp\`. Monitoring for this specific command-line pattern is a high-fidelity way to detect attempts to install unauthorized shims for persistence.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Staging Servers
      - Application Servers
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH process_creation (Sysmon EID 1)
          WHERE process_name == "sdbinst.exe"
          AND command_line MATCHES_REGEX "(?i)c:\\users\\|c:\\temp\\|\\appdata\\|c:\\programdata\\"
          AND command_line CONTAINS ".sdb"
          ALERT on match
  - question: Has `sdbinst.exe` been used to install a shim from a directory that is statistically rare in the environment?
    context: This question uses anomaly detection to find malicious shim installations. Legitimate software installers and administrators typically use predictable paths. An adversary, however, might use a unique or temporary directory. By tracking the historical frequency of all parent directories used in `sdbinst.exe` executions, we can flag installations from never-before-seen or rarely used paths as highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Staging Servers
      - Application Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          ON process_creation of "sdbinst.exe"
            sdb_path = PARSE_PATH_FROM_COMMANDLINE(event.command_line)
            sdb_directory = GET_DIRECTORY(sdb_path)
            directory_frequency = GET_HISTORICAL_FREQUENCY(sdb_directory)
            IF directory_frequency < 5
              ALERT "sdbinst.exe run from rare directory"
  - question: Do any `sdbinst.exe` executions belong to small, anomalous clusters of activity?
    context: This question applies unsupervised machine learning to identify outliers in `sdbinst.exe` usage. Most legitimate installations will form large clusters of similar activity (e.g., same parent process, same user context). Malicious activity is likely to be different and will form small, distinct clusters. Analyzing these sparse clusters helps analysts focus on unusual executions that deviate from established patterns.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Staging Servers
      - Application Servers
    range: last 90 days
    queries:
      - technology: ML Clustering (DBSCAN)
        query: |
          FEATURES = [user, parent_process, sdb_file_directory]
          CLUSTERS = DBSCAN(sdbinst_execution_events, features)
          FOR each cluster in CLUSTERS
            IF cluster.size < threshold
              INVESTIGATE cluster_events as anomalous
  - question: Has a commonly shimmed process spawned a malicious child process which then connected to a known-bad IP address?
    context: This question seeks to detect the malicious effects of a shim by correlating multiple events. An adversary might shim a common process like `explorer.exe` to launch a command-and-control tool like `powershell.exe`. This rule looks for that specific sequence: a target process spawning a suspicious child, which then makes an outbound connection to an IP on a threat intelligence blocklist, all within a short time frame.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: SIEM Correlation Rule
        query: |
          SEQUENCE
            1. process_creation (Sysmon EID 1) as P1 WHERE P1.name IN [explorer.exe, svchost.exe]
            2. process_creation (Sysmon EID 1) as P2 WHERE P2.parent_guid == P1.guid AND P2.name IN [powershell.exe, rundll32.exe]
            3. network_connection (Sysmon EID 3) as N1 WHERE N1.process_guid == P2.guid AND N1.destination_ip IN threat_intel_blocklist
          WITHIN 60 seconds
          ALERT on sequence match
  - question: Has a commonly shimmed process spawned a statistically rare child process or connected to a rare network destination?
    context: This question uses behavioral baselining to detect anomalies in the activity of processes that are frequent targets for shimming. By understanding what child processes and network destinations are normal for a process like `svchost.exe`, we can alert when it behaves abnormally, such as spawning an unusual child or connecting to an Autonomous System Number (ASN) that it has never or rarely connected to before. This can indicate that a shim has altered its behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: Anomaly Detection
        query: |
          FOR each process P in watchlist [explorer.exe, svchost.exe]
            BASELINE normal child processes and network ASNs over 30 days
            ON new_activity for P
              IF child_process_frequency < 1st_percentile OR network_asn_frequency < 1st_percentile
                ALERT "Anomalous child process or network connection from shim target"
  - question: Has an anomaly detection model detected a sequence of system events that deviates from the normal behavior following the launch of a high-value process?
    context: This question employs a sophisticated time-series model (like an LSTM Autoencoder) to learn the entire "normal story" of what happens after a critical process starts. The model learns the expected sequences of process creations, network connections, and registry modifications. If a shim hijacks the process, the subsequent event sequence will not match the learned pattern, resulting in a high reconstruction error and triggering an alert for a significant behavioral deviation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: ML Anomaly Detection (LSTM)
        query: |
          MODEL = TRAIN LSTM Autoencoder on normal event sequences post-process-launch
          ON new sequence of events after critical process launch
            reconstruction_error = MODEL.predict(sequence)
            IF reconstruction_error > anomaly_threshold
              ALERT "Anomalous event sequence detected after critical process launch"
  - question: Has a shim-related registry key or file path been modified by an unauthorized process?
    context: This question focuses on unauthorized modifications to the application shimming infrastructure. Only a few trusted processes (like `sdbinst.exe` or approved patch management tools) should ever write to shim registry keys or custom `.sdb` file paths. This query creates an alert for any modification performed by a process not on a pre-defined allowlist, serving as a high-fidelity indicator of tampering.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH (registry_modification (Sysmon EID 13) OR file_creation (Sysmon EID 11))
          WHERE (target_object CONTAINS "AppCompatFlags\\Custom\\" OR target_object CONTAINS "\\AppPatch\\Custom\\")
          AND process_name NOT IN [sdbinst.exe, trusted_installer.exe, patch_manager.exe]
          ALERT on match
  - question: Have modifications to shim-related files or registry keys occurred outside of normal business or maintenance hours?
    context: This question uses time-based analysis to detect suspicious shim modifications. Legitimate software installations and patching typically occur during scheduled maintenance windows or standard business hours. Adversarial activity often occurs at odd hours to evade detection. By baselining the timing of legitimate modifications and alerting on outliers, analysts can spot potentially malicious changes.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Anomaly Detection
        query: |
          BASELINE distribution of modification events by hour-of-day and day-of-week
          ON new_modification_event to shim paths/keys
            event_time = event.timestamp
            mean_time, std_dev = GET_BASELINE_STATS()
            IF event_time is > 3 standard deviations from mean_time
              ALERT "Shim modification at anomalous time"
  - question: Has a machine learning model classified a shim-related file or registry modification as suspicious?
    context: This question uses a supervised machine learning model to score the legitimacy of any change to the shimming infrastructure. The model considers a rich set of features, such as the parent process, user context, and time of day, to make a holistic judgment. A high-confidence "suspicious" classification from the model provides a robust alert that filters out noise and focuses analyst attention on high-risk events.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: ML Model (Random Forest)
        query: |
          ON shim_modification_event
            FEATURES = [parent_process, user, time_of_day, correlated_events]
            prediction, confidence = CLASSIFY_MODIFICATION(FEATURES)
            IF prediction == "suspicious" AND confidence > threshold
              ALERT "ML model classified shim modification as suspicious"
  - question: Have any shim database (.sdb) files matching UAC bypass YARA rules been created in user-writable directories?
    context: This question specifically targets a common privilege escalation vector where an adversary stages a malicious `.sdb` file in a user-writable directory (like `C:\Users\*`) to hijack an auto-elevating process. This query automates the detection by monitoring for `.sdb` file creation in these locations and immediately scanning them with YARA rules designed to find patterns specific to UAC bypass techniques.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: SIEM / EDR
        query: |
          SEARCH file_creation (Sysmon EID 11)
          WHERE file_path CONTAINS "C:\\Users\\" AND file_name ENDS WITH ".sdb"
          // For each result, automate:
          // 1. SCAN file with YARA rules for UAC bypass shims
          // ALERT on match
  - question: Have any new .sdb files in user directories matched the profile (size, entropy) of known UAC bypass shims?
    context: This question aims to identify malicious shims used for UAC bypass by comparing their metadata against a known-bad profile. Instead of relying solely on content signatures, this method checks if a newly created `.sdb` file's size and entropy are statistically similar to those of known malicious UAC bypass shims. A close match provides a strong indicator of a potential privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          KNOWN_PROFILES = GET_PROFILES_OF_UAC_BYPASS_SHIMS() // (mean_size, std_dev_size, mean_entropy, etc.)
          ON new .sdb file creation in user directory
            IF file.size and file.entropy are within 2 std_dev of a known_profile
              ALERT "New SDB file matches profile of known UAC bypass shim"
  - question: Has a machine learning model identified a file created in a user directory as a malicious .sdb file?
    context: This question applies a classification model to distinguish between benign temporary files and malicious `.sdb` files that an adversary might stage in a user directory for a UAC bypass. The model uses features like file path, size, and the creating process to make its determination. A high-confidence alert from the model can preemptively flag a key component of a privilege escalation attack.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: ML Model
        query: |
          ON file_creation_event in user directory
            FEATURES = [file_path, file_size, entropy, creating_process_name]
            prediction, confidence = CLASSIFY_FILE(FEATURES)
            IF prediction == "malicious.sdb" AND confidence > threshold
              ALERT "ML model detected malicious SDB file in user directory"
  - question: Has `sdbinst.exe` been run, followed immediately by an auto-elevating executable, by the same user?
    context: This question detects a critical sequence of events indicative of a UAC bypass attempt. An adversary will first install the malicious shim (`sdbinst.exe`) and then immediately run the target auto-elevating executable (e.g., `eventvwr.exe`) to trigger the exploit. Correlating these two process creations by the same user within a very short time window (e.g., 10 seconds) is a high-fidelity detection for this technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Administrator Jump Boxes
    range: last 90 days
    queries:
      - technology: SIEM Correlation Rule
        query: |
          SEQUENCE
            1. process_creation as P1 WHERE P1.name == "sdbinst.exe"
            2. process_creation as P2 WHERE P2.name IN [eventvwr.exe, msconfig.exe, fodhelper.exe]
          WHERE P1.user == P2.user AND P1.logon_id == P2.logon_id
          WITHIN 10 seconds
          ALERT on sequence match
  - question: Has a statistically improbable sequence of `sdbinst.exe` followed by an auto-elevating executable occurred?
    context: This question uses probabilistic analysis to find anomalous process sequences. While the sequence of `sdbinst.exe` followed by another program might occur legitimately, the specific transition to an auto-elevating executable for a UAC bypass is extremely rare in normal operations. By calculating the transition probability of all two-process sequences and alerting on those in the bottom percentile, we can identify this highly suspicious behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Administrator Jump Boxes
    range: last 90 days
    queries:
      - technology: Anomaly Detection
        query: |
          BASELINE transition probabilities for all process pairs within 10s window
          ON process_creation of `sdbinst.exe` followed by auto-elevating_exe
            prob = GET_TRANSITION_PROBABILITY("sdbinst.exe", "auto-elevating_exe")
            IF prob < 0.1 percentile of all probabilities
              ALERT "Statistically rare UAC bypass process sequence detected"
  - question: Has a process execution model detected the sequence of `sdbinst.exe` followed by an auto-elevating executable as anomalous?
    context: This question uses a sequential model like a Markov chain or RNN to learn the normal "grammar" of process execution for users. The specific sequence used for UAC bypass (`sdbinst.exe` -> `auto-elevating-executable`) is unlikely to be part of this normal grammar. When this sequence is observed, the model will assign it a very low likelihood score, flagging it as a strong deviation from expected behavior and a potential attack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Administrator Jump Boxes
    range: last 90 days
    queries:
      - technology: ML Model (RNN/Markov)
        query: |
          MODEL = TRAIN model on normal process execution sequences
          ON observation of sequence ["sdbinst.exe", "auto-elevating_exe"]
            likelihood = MODEL.score(sequence)
            IF likelihood < anomaly_threshold
              ALERT "Anomalous UAC bypass sequence detected by ML model"
  - question: Has a process chain shown an integrity level escalation from Medium to High, resulting in a suspicious grandchild process?
    context: This question precisely identifies the result of a successful UAC bypass. A normal user process (Medium integrity) spawns an auto-elevating executable (e.g., `eventvwr.exe`), which, due to the malicious shim, is created with High integrity. This High integrity process then spawns a command shell (`cmd.exe`), which inherits the High integrity level. Detecting this specific chain (`Medium -> High -> High`) is a definitive sign of privilege escalation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          JOIN process_creation (Sysmon EID 1) as GP, P, C on P.parent_guid == GP.guid and C.parent_guid == P.guid
          WHERE GP.integrity_level == "Medium"
          AND P.integrity_level == "High"
          AND C.integrity_level == "High"
          AND P.name IN [eventvwr.exe, fodhelper.exe]
          AND C.name IN [cmd.exe, powershell.exe]
          ALERT on match
  - question: Has an auto-elevating process with an escalated integrity level spawned a statistically rare child process?
    context: This question combines behavioral baselining with integrity level analysis to find UAC bypasses. We first identify a potential privilege escalation by observing a process chain that moves from Medium to High integrity. We then add a second condition: did the newly elevated parent process spawn a child that is statistically rare for it (e.g., `eventvwr.exe` spawning `cmd.exe`)? The combination of these two unlikely events creates a very high-confidence alert.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: Anomaly Detection
        query: |
          FIND process chains where integrity escalates Medium -> High (GP -> P)
          FOR each such chain
            child_process_name = P.child.name
            child_frequency = GET_BASELINE_CHILD_FREQUENCY(P.name)
            IF child_frequency < 0.01%
              ALERT "Integrity escalation followed by rare child process spawn"
  - question: Has a graph-based anomaly detection algorithm identified a UAC bypass pattern in the process creation graph?
    context: This question models system activity as a graph of process relationships and uses graph algorithms to find malicious subgraphs. The UAC bypass technique creates a very specific pattern: a Medium integrity node connected to a High integrity node, which is itself connected to another High integrity node (often a shell). By training an algorithm to recognize normal graph structures, we can flag this specific malicious subgraph as a structural anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: ML Graph Analytics
        query: |
          CONSTRUCT process creation graph with nodes as (process, integrity_level)
          SEARCH for subgraph pattern:
          (NodeA.integrity=Medium) -> (NodeB.integrity=High) -> (NodeC.integrity=High)
          FLAG subgraphs matching this pattern as anomalous.
  - question: Has an auto-elevating system utility made an external network connection or written an executable file to disk?
    context: This question looks for post-exploitation behavior from a process that has been hijacked via a UAC bypass shim. Auto-elevating utilities like `computerdefaults.exe` should not normally make outbound network connections or write new executables. Observing this behavior is a strong indication that the process's normal execution has been subverted by a malicious shim, and it is now being used for command-and-control or to stage further malware.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Network Egress Points
      - File Servers
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH (network_connection (Sysmon EID 3) OR file_creation (Sysmon EID 11))
          WHERE process_name IN [computerdefaults.exe, dccw.exe]
          AND (destination_ip is not RFC1918 OR file_name ENDS WITH [.exe, .dll, .ps1, .bat])
          ALERT on match
  - question: Has an auto-elevating process contacted a domain with high entropy or written to a statistically rare file path?
    context: This question uses anomaly detection to identify suspicious behavior from a potentially compromised auto-elevating process. Contacting a domain with high-entropy (suggesting DGA) or writing files to a path that is not typical for that process are strong indicators of malicious activity. This helps detect when a UAC bypass has been successful and the adversary is proceeding with their objectives.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Network Egress Points
      - File Servers
    range: last 90 days
    queries:
      - technology: Anomaly Detection
        query: |
          FOR process P in auto-elevating watchlist
            ON network connection OR file write
              IF domain_entropy > 95th_percentile OR file_path_frequency < 1st_percentile
                ALERT "Anomalous network or file activity from auto-elevating process"
  - question: Has a machine learning model classified the behavior of an auto-elevating process as anomalous?
    context: This question uses a One-Class SVM or similar model to build a tight, multi-dimensional boundary around the normal behavior of a critical, auto-elevating process. The model learns the legitimate network destinations, file paths, and registry keys this process interacts with. Any activity that falls outside this learned boundary is immediately flagged as a high-confidence anomaly, strongly suggesting the process has been hijacked by a shim.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User Workstations
      - Network Egress Points
      - File Servers
    range: last 90 days
    queries:
      - technology: ML Model (One-Class SVM)
        query: |
          MODEL = TRAIN One-Class SVM on features of normal process behavior
          ON new activity from auto-elevating process
            prediction = MODEL.predict(activity_features)
            IF prediction == "anomaly"
              ALERT "ML model detected anomalous behavior from auto-elevating process"