name: T1546.011: Application Shimming
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has used Application Shimming for persistence or privilege escalation. It focuses on detecting the creation of malicious shim database (.sdb) files, the execution of the shim installer (`sdbinst.exe`) with suspicious parameters, and anomalous behavior from shim-targeted processes. This includes creating new `.sdb` files in custom or user-writable directories, unusual process chains involving auto-elevating executables, integrity level escalations, and legitimate processes performing actions outside their normal behavioral profile, such as making network connections or spawning command shells.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are new shim database (.sdb) files being created in the custom application patch directory and do they match known malicious signatures?
  context: This question seeks to identify the direct installation of a malicious shim for persistence. Adversaries create custom shim database (.sdb) files in `%WINDIR%\AppPatch\Custom\` to hijack legitimate applications. By monitoring for the creation of new `.sdb` files in this specific directory and immediately checking their hash against threat intelligence feeds and their content against malicious YARA rules, we can detect this persistence mechanism at the time of installation.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_creation_events WHERE (file_path ENDS_WITH '.sdb' AND file_path
      CONTAINS '\\AppPatch\\Custom\\') | HASH file | LOOKUP hash_in_threat_intel |
      SCAN file_with_yara
- question: Are newly created custom shim database (.sdb) files exhibiting high entropy, suggesting they may be packed or encrypted?
  context: This question uses statistical analysis to find malicious shims that may not have known signatures. Malicious code is often packed or encrypted to evade detection, which results in a higher Shannon entropy score. By baselining the entropy of known-good `.sdb` files, we can flag new files with anomalously high entropy as suspicious, warranting further investigation for malicious persistence.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_creation_events WHERE (file_path ENDS_WITH '.sdb' AND file_path
      CONTAINS '\\AppPatch\\Custom\\') | CALCULATE file_entropy | COMPARE entropy_score
      to baseline_95th_percentile | ALERT if exceeds
- question: Can machine learning models classify newly created custom shim database (.sdb) files as malicious in real-time?
  context: This question leverages machine learning to proactively identify malicious shims based on their intrinsic features. A model trained on byte-level n-grams from known benign and malicious `.sdb` files can learn to distinguish between them. Integrating this classifier into the file creation monitoring workflow provides an automated, high-confidence detection capability for novel threats that might evade signature or entropy-based methods.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON file_creation_event WHERE (file_path ENDS_WITH '.sdb' AND file_path
      CONTAINS '\\AppPatch\\Custom\\') | EXTRACT byte_ngrams | CLASSIFY with_ml_model
      | ALERT if (classification is 'malicious' AND confidence > 0.90)
- question: Is the shim installer `sdbinst.exe` being used to install shims from user-writable directories?
  context: This question aims to detect adversaries staging and installing shims from non-standard locations. Legitimate software installers typically place `.sdb` files in system directories. Observing `sdbinst.exe` installing a shim from a user-writable location like `C:\Users\` or `C:\Temp\` is highly suspicious and often indicates that an attacker has dropped a malicious file and is attempting to establish persistence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Staging Servers
  - Application Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_creation_events WHERE (process_name == 'sdbinst.exe' AND
      command_line MATCHES 'c:\\users\\|c:\\temp\\|\\appdata\\|c:\\programdata\\')
- question: Is `sdbinst.exe` being executed with `.sdb` files from directories that are statistically rare in the environment?
  context: This question uses frequency analysis to identify anomalous `sdbinst.exe` activity. By tracking the parent directories of all `.sdb` files installed over time, we can build a profile of normal installation behavior. An execution involving a directory that has never been seen before, or is seen very infrequently, is a strong indicator of unusual activity that could be tied to a malicious persistence attempt.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Staging Servers
  - Application Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_creation_events WHERE (process_name == 'sdbinst.exe') |
      EXTRACT sdb_parent_directory from command_line | LOOKUP directory_frequency_baseline
      | ALERT if frequency < 5
- question: Are there clusters of `sdbinst.exe` execution that deviate from normal administrative or software installation activity?
  context: This question applies unsupervised machine learning to detect outlier `sdbinst.exe` behavior. By clustering executions based on features like the user context, parent process, and file path, we can group routine activities together. Small, isolated clusters represent deviations from the norm and may correspond to malicious use of the utility, which warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Staging Servers
  - Application Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: GATHER sdbinst_executions | EXTRACT features(user, parent_process, sdb_path)
      | APPLY DBSCAN clustering | INVESTIGATE small or sparse clusters
- question: Are commonly shim-targeted processes spawning suspicious child processes and making external network connections to known-bad destinations?
  context: This question seeks to detect the malicious effects of a successful shim implant. Once a legitimate process like `explorer.exe` is shimmed, an adversary can use it to launch command-and-control tools (`powershell.exe`, `rundll32.exe`). This rule correlates the launch of a high-value process with the immediate spawning of a suspicious child that connects to an IP on a threat intelligence blocklist, indicating a potential compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - User Workstations
  - Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: 'CORRELATE (process_creation of target_process) AND (child_process_creation
      of c2_process within 60s) AND (child_process_network_connection to blocklisted_ip)'
- question: Are commonly shim-targeted processes exhibiting statistically rare behavior, such as spawning unusual child processes or contacting uncommon network destinations?
  context: This question uses baselining to detect deviations in the behavior of critical system processes. By profiling the normal child processes and network destinations (by ASN) for each target process, we can identify anomalies. A process like `svchost.exe` suddenly spawning a rare child or contacting an ASN seen in less than 1% of historical connections is a strong signal that its behavior has been altered, possibly by a malicious shim.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - User Workstations
  - Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_events for target_process | EXTRACT child_process, destination_asn
      | COMPARE to historical_frequency_baseline | ALERT if frequency < 1st percentile
- question: Do time-series models detect anomalous sequences of system events following the launch of high-value processes?
  context: This question uses advanced machine learning to detect subtle signs of compromise. An LSTM Autoencoder can learn the normal sequence of events (process creations, network connections, etc.) that follow the launch of a critical process. If a malicious shim causes the process to behave differently, the resulting sequence of events will not match the learned pattern, producing a high reconstruction error and triggering an alert for a significant behavioral anomaly.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - User Workstations
  - Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON launch of high_value_process | CAPTURE subsequent_event_sequence |
      SCORE sequence with LSTM_autoencoder | ALERT if reconstruction_error > threshold
- question: Are unauthorized processes modifying custom shim databases or registry keys?
  context: This question aims to detect direct manipulation of shim configurations by processes other than trusted installers. Modifications to the custom shim registry key or file directory should only be performed by a limited set of processes like `sdbinst.exe` or patch management tools. An alert on a modification by any other process is a high-fidelity indicator of a potential tampering or persistence attempt.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - User Workstations
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH registry_mod_events OR file_creation_events WHERE (target_path
      MATCHES shim_path_or_key) AND (process_name NOT IN trusted_installer_allowlist)
- question: Are modifications to shim-related files and registry keys occurring at unusual times?
  context: This question uses time-based analysis to spot anomalous shim modifications. Legitimate software installations and patching often occur during specific, predictable windows. By baselining the timing of these events, we can identify modifications that happen at unusual hours (e.g., overnight, on a weekend) as outliers that deviate significantly from the norm, suggesting they may be unauthorized.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - User Workstations
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH shim_modification_events | EXTRACT event_timestamp | COMPARE timestamp
      to historical_time_distribution | ALERT if timestamp is > 3 standard deviations
      from mean
- question: Can a machine learning model distinguish between legitimate and suspicious modifications to shim configurations?
  context: This question leverages a supervised learning model to score the risk of each shim-related modification. By training a model on features like the parent process, user context, and time of day, we can automate the decision-making process. This allows for the high-confidence detection of suspicious modifications that might otherwise be missed by simpler rules, providing a more robust defense against this persistence technique.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - User Workstations
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON shim_modification_event | EXTRACT features(parent_process, user, time_of_day)
      | CLASSIFY with_random_forest_model | ALERT if classification is 'suspicious'
- question: Are shim database (.sdb) files associated with UAC bypass being created in user-writable directories?
  context: This question focuses on detecting a specific privilege escalation technique where an adversary stages a malicious shim in a user-controlled directory to target an auto-elevating executable. By monitoring for `.sdb` file creation in these locations and immediately scanning them with YARA rules designed to find UAC bypass shim structures, we can catch the attack during its setup phase.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_creation_events WHERE (file_path ENDS_WITH '.sdb' AND file_path
      CONTAINS 'C:\\Users\\') | SCAN file_with_uac_bypass_yara_rules | ALERT on match
- question: Do newly created `.sdb` files in user directories have file size and entropy profiles matching known UAC bypass shims?
  context: This question uses file characteristic profiling to identify malicious shims without specific signatures. Known UAC bypass shims have particular file sizes and entropy levels. By comparing these metrics for any new `.sdb` file found in a user directory against a pre-compiled list of malicious profiles, we can flag files that are statistically similar to known threats, indicating a likely UAC bypass attempt.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH file_creation_events WHERE (file_path ENDS_WITH '.sdb' AND file_path
      CONTAINS 'C:\\Users\\') | CALCULATE file_size, file_entropy | COMPARE to known_malicious_shim_profiles
      | ALERT if within 2 standard deviations
- question: Can a machine learning model differentiate between benign temporary files and malicious `.sdb` files staged in user directories?
  context: This question leverages a classifier to reduce false positives and increase detection accuracy for shims in user directories, which are often noisy. By training a model on features like file path patterns, size, entropy, and the creating process, we can build a high-confidence detector that specifically identifies malicious `.sdb` files intended for UAC bypass, even if they are novel.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON file_creation in 'C:\\Users\\' | EXTRACT features(path, size, entropy,
      process_name) | CLASSIFY with_ml_model | ALERT if (classification is 'malicious
      .sdb' AND confidence is high)
- question: Is the shim installer `sdbinst.exe` being run immediately before an auto-elevating executable?
  context: This question aims to detect the execution phase of a UAC bypass. The attack sequence involves installing a shim with `sdbinst.exe` and then immediately running the targeted auto-elevating executable (e.g., `eventvwr.exe`). A correlation rule that looks for this specific sequence of process creations under the same user session within a very short time window (e.g., 10 seconds) is a highly effective way to detect this technique in action.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrator Jump Boxes
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: 'CORRELATE (process_creation of ''sdbinst.exe'') AND (process_creation
      of auto_elevating_exe within 10s) WHERE user and logonId are same'
- question: Is the process execution sequence of `sdbinst.exe` followed by an auto-elevating executable statistically improbable?
  context: This question uses transition probability to identify rare and suspicious process chains. In a normal environment, the sequence of `sdbinst.exe` followed by `eventvwr.exe` is extremely unlikely. By baselining all two-process sequences, we can flag this specific UAC bypass chain as a low-probability event, providing a strong statistical basis for an alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrator Jump Boxes
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_sequences | CALCULATE transition_probability('sdbinst.exe'
      -> 'auto_elevating_exe') | COMPARE to baseline | ALERT if probability < 0.1%
- question: Do machine learning models of user behavior flag the sequence of `sdbinst.exe` followed by an auto-elevating executable as anomalous?
  context: This question uses a sophisticated behavioral model, like a Recurrent Neural Network (RNN), to detect UAC bypass. These models learn the complex patterns of normal user activity. The specific, rigid sequence of a shim install followed by launching an auto-elevating process is a significant deviation from normal, interactive user behavior and will be assigned a very low likelihood score by the model, triggering a high-confidence anomaly alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrator Jump Boxes
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: OBSERVE process_sequence ('sdbinst.exe' -> 'auto_elevating_exe') | CALCULATE
      likelihood_score with RNN_model | ALERT if score < anomaly_threshold
- question: Is there a process chain showing an integrity level escalation from Medium to High, resulting in a privileged child process?
  context: This question looks for the direct evidence of a successful UAC bypass. The goal of the attack is to get a process like `cmd.exe` or `powershell.exe` running at a High integrity level. This is achieved by shimming an auto-elevating executable. Detecting the full chain—a Medium integrity process spawning a High integrity auto-elevating parent, which then spawns a High integrity child—confirms the privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_creation_events | JOIN on parent_child_guids | FIND chain
      WHERE (grandparent_integrity == 'Medium' AND parent_integrity == 'High' AND
      child_integrity == 'High')
- question: Are auto-elevating executables spawning child processes that are statistically rare for them, concurrent with an integrity level escalation?
  context: This question combines behavioral baselining with integrity level monitoring for high-fidelity alerting. It is extremely unusual for a process like `eventvwr.exe` to spawn `cmd.exe`. When this rare event is observed, and it's part of a process chain that shows a Medium-to-High integrity level jump, it provides two strong, independent pieces of evidence that a UAC bypass has occurred.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH process_creation_events WHERE (parent is auto_elevating_exe) |
      LOOKUP child_process_frequency | ALERT if (frequency < 0.01% AND integrity_escalation_detected)
- question: Can graph-based anomaly detection identify the UAC bypass process creation structure as an anomalous subgraph?
  context: This question treats process activity as a graph and uses algorithms to find suspicious structural patterns. The UAC bypass technique creates a very specific subgraph: a Medium-integrity node connected to a High-integrity node, which is then connected to another High-integrity node. Graph analysis algorithms can be trained to recognize normal process ancestry structures and flag this specific pattern as a significant anomaly.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: CONSTRUCT process_creation_graph from events | APPLY graph_anomaly_detection
      | SEARCH for subgraph matching (Medium -> High -> High) pattern
- question: Are auto-elevating system utilities performing actions outside their normal behavior, such as making network connections or writing executable files?
  context: This question seeks to identify a compromised auto-elevating process by its post-escalation actions. System utilities like `computerdefaults.exe` have a very narrow set of expected behaviors and should almost never initiate external network connections or write new executables to disk. Observing such behavior is a strong indicator that the process has been hijacked, likely via a malicious shim, to execute an attacker's payload with elevated privileges.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Network Egress Points
  - File Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH network_connections OR file_writes WHERE (process_name IN auto_elevating_watchlist)
      AND ((destination_ip is not RFC1918) OR (file_extension is executable))
- question: Are auto-elevating processes contacting domains with high entropy or writing to statistically rare file paths?
  context: This question uses statistical methods to detect anomalous behavior from a potentially compromised auto-elevating process. Contacting a domain with high-entropy (suggesting DGA) or writing a file to a location it has never used before are strong deviations from normal activity. These indicators can reveal the command-and-control or payload-staging actions taken by an adversary after a successful UAC bypass.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Network Egress Points
  - File Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH dns_requests OR file_writes WHERE (process_name IN auto_elevating_watchlist)
      | CALCULATE domain_entropy, file_path_frequency | ALERT if (entropy > high_threshold
      OR path_is_rare)
- question: Do machine learning models classify the behavior of auto-elevating processes as anomalous?
  context: This question uses a One-Class SVM or similar anomaly detection model to create a tight boundary around the normal behavior of a critical process. The model is trained on features representing normal activity (network destinations, file paths, etc.). Any new activity by the process that falls outside this learned boundary is flagged as an anomaly, providing a powerful way to detect malicious actions caused by a shim without prior knowledge of the specific attack.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User Workstations
  - Network Egress Points
  - File Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON activity by auto_elevating_process | EXTRACT behavioral_features |
      SCORE with OneClassSVM_model | ALERT if score indicates anomaly