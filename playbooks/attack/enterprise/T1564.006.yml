name: T1564.006: Run Virtual Instance
id: 9a8f7b6c-5d4e-4f3a-8b2c-1d0e9f8a7b6c
description: This playbook helps investigate whether an adversary has deployed or executed a virtual instance to evade host or network-based defenses. It focuses on detecting indicators such as network traffic from unregistered MAC addresses associated with virtualization vendors, the execution of virtualization utilities with headless or silent flags, the creation of virtual disk files in non-standard locations, virtualization processes being spawned by unusual parent processes (like Office applications), and correlated sequences of these events occurring in a short time frame.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any network connections originated from MAC addresses with virtualization vendor OUIs that are not registered in our asset inventory?
    context: Adversaries may use unauthorized virtual machines to operate within the network, bypassing controls placed on standard corporate assets. Identifying network traffic from MAC addresses associated with virtualization vendors (like VMware or VirtualBox) that don't correspond to a known, registered asset can reveal these rogue VMs. This query cross-references live network data with the asset inventory to find these discrepancies.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Internet gateway/firewall
      - Core network switches
      - DHCP servers
      - Asset Inventory Database
    range: last 90 days
    queries:
      - pseudocode: |
          watchlist_ouis = ['00:05:69', '00:0C:29', '08:00:27']
          dhcp_logs = SEARCH dhcp.log
          conn_logs = SEARCH conn.log
          asset_inventory = GET asset_inventory_macs
          JOIN dhcp_logs and conn_logs ON ip_address
          FILTER results WHERE mac_address.oui IN watchlist_ouis
          FILTER results WHERE mac_address NOT IN asset_inventory
          RETURN distinct ip_address, mac_address
  - question: Are any newly observed devices with virtualization MAC OUIs exhibiting anomalous network behavior, such as an unusually high number of connections or destination ports?
    context: A newly introduced virtual machine used for malicious purposes might exhibit different network patterns compared to typical devices. For example, a VM used for scanning or C2 might connect to many different IPs or ports. This question aims to identify new, unregistered VMs and flag them if their initial network activity (within 24 hours) is statistically abnormal compared to other new devices on the same network segment.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Internet gateway/firewall
      - Core network switches
      - DHCP servers
    range: last 90 days
    queries:
      - pseudocode: |
          new_virt_macs = FIND new MACs with virtualization OUIs in DHCP logs from last 24h
          FOR each mac IN new_virt_macs:
            ip = GET ip_for_mac(mac)
            traffic_stats = CALC entropy(dest_ports), count(distinct dest_ips) FROM conn.log WHERE src_ip = ip in last 24h
            baseline = GET 95th_percentile_stats for new devices
            IF traffic_stats > baseline THEN ALERT
  - question: Does the network traffic pattern from a new, un-inventoried device with a virtualization OUI significantly deviate from the learned normal behavior of known assets?
    context: This question uses a machine learning approach to detect subtle anomalies that rule-based methods might miss. By training a model on the normal network behavior of all known assets, we can create a sophisticated baseline. When a new, unknown VM appears, its network traffic is compared against this model. A high anomaly score (reconstruction error) suggests its behavior is unlike anything seen before and is therefore highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Internet gateway/firewall
      - Core network switches
      - DHCP servers
    range: last 90 days
    queries:
      - pseudocode: |
          anomaly_model = LOAD trained time-series model
          new_virt_macs = FIND new MACs with virtualization OUIs in DHCP logs
          FOR each mac IN new_virt_macs:
            ip = GET ip_for_mac(mac)
            metrics = GET hourly_network_metrics(ip) FROM conn.log
            reconstruction_error = anomaly_model.predict(metrics)
            IF reconstruction_error > threshold THEN ALERT
  - question: Have any virtualization utilities (like VBoxManage.exe, vmrun.exe) been executed with command-line arguments indicating headless or silent operation?
    context: Adversaries often run VMs in 'headless' or 'silent' mode to prevent any graphical interface from appearing on the user's screen, thereby evading detection. This question specifically looks for the execution of common virtualization management tools with command-line flags (e.g., '--type headless', '-nogui') that facilitate this type of covert operation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Standard user endpoints
      - Developer workstations
      - Server infrastructure
    range: last 90 days
    queries:
      - pseudocode: |
          virt_procs = ['VBoxManage.exe', 'vmrun.exe', 'qemu-system-*.exe']
          evasive_flags = ['--type headless', '-nogui', '-silent', 'GUI/SuppressMessages']
          SEARCH ProcessCreationEvents (Sysmon EID 1, Win EID 4688)
          FILTER process_name IN virt_procs
          FILTER command_line CONTAINS ANY evasive_flags
          RETURN event_details
  - question: Have any virtualization utilities been executed with statistically rare or uncommon command-line arguments compared to historical enterprise-wide usage?
    context: While certain command-line arguments for virtualization tools are common and benign, malicious usage often involves unique or rarely seen combinations of parameters. By baselining all historical command-line usage, we can identify new executions that are statistical outliers. An execution using a set of arguments never seen before is highly suspicious and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Standard user endpoints
      - Developer workstations
      - Server infrastructure
    range: last 90 days
    queries:
      - pseudocode: |
          arg_frequency = BUILD frequency table of command-line args for virt_procs FROM historical logs
          FOR each new_execution of virt_proc:
            rarity_score = CALCULATE inverse frequency score for new_execution.arguments based on arg_frequency
            threshold = GET 99th percentile of historical rarity scores
            IF rarity_score > threshold THEN ALERT
  - question: Has a machine learning model classified any virtualization utility command-line executions as potentially malicious?
    context: This question leverages a supervised machine learning model trained to distinguish between benign and malicious command-line usage. By extracting features from the command-line arguments (e.g., using TF-IDF), the model can learn complex patterns associated with adversarial behavior. This allows for real-time classification of new events, providing a more robust and adaptive detection method than static rules or simple frequency analysis.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Standard user endpoints
      - Developer workstations
      - Server infrastructure
    range: last 90 days
    queries:
      - pseudocode: |
          classifier_model = LOAD trained command-line classifier
          FOR each new_execution of virt_proc:
            features = EXTRACT TF-IDF features from command_line
            prediction = classifier_model.predict(features)
            IF prediction == 'malicious' with high_confidence THEN ALERT
  - question: Has a virtual disk file (e.g., .vmdk, .vhd) been created in a non-standard or high-risk location, such as a user's temp folder or a web directory?
    context: Adversaries may place virtual disk files in unusual locations to evade detection or to stage them for execution. Legitimate virtual disks are typically stored in designated folders. This question aims to detect the creation of these files in suspicious directories (like temporary folders, user profiles, or web-accessible paths) that are not on an approved list of virtualization storage locations.
    answer_sources:
      - Sysmon Event ID 11
      - File servers
      - Standard user endpoints
      - Web servers
    range: last 90 days
    queries:
      - pseudocode: |
          disk_extensions = ['.vmdk', '.vhd', '.vhdx', '.vdi', '.qcow2']
          risky_paths = ['C:\\Users\\', 'C:\\ProgramData\\', 'C:\\inetpub\\wwwroot\\']
          allowlist_paths = GET approved_vm_storage_paths
          SEARCH FileCreationEvents (Sysmon EID 11)
          FILTER file_name ENDS WITH ANY disk_extensions
          FILTER file_path NOT IN allowlist_paths
          FILTER file_path CONTAINS ANY risky_paths
          RETURN event_details
  - question: Have any virtual disk files been created by processes not typically associated with virtualization, such as web browsers, Office applications, or scripting engines?
    context: Virtual disk files are normally created by virtualization software itself (e.g., vmware.exe). When a process like PowerShell, a web browser, or Microsoft Word creates a virtual disk file, it is highly anomalous and may indicate that an adversary is using a script or document macro to drop a malicious VM onto the system. This question focuses on identifying these unusual creator processes.
    answer_sources:
      - Sysmon Event ID 11
      - File servers
      - Standard user endpoints
      - Web servers
    range: last 90 days
    queries:
      - pseudocode: |
          legit_creators = ['vmware.exe', 'VirtualBox.exe']
          disk_extensions = ['.vmdk', '.vhd', '.vhdx', '.vdi', '.qcow2']
          SEARCH FileCreationEvents (Sysmon EID 11)
          FILTER file_name ENDS WITH ANY disk_extensions
          FILTER creating_process NOT IN legit_creators
          RETURN event_details
  - question: Have any virtual disk file creation events been identified as anomalous outliers by a clustering algorithm?
    context: This question uses unsupervised machine learning to find anomalous file creation events without pre-defined rules. By clustering events based on features like the creating process, file path, and size, we can identify normal patterns of activity. Events that do not fit into any cluster ('noise' points) are, by definition, anomalous and represent deviations from established norms, making them prime candidates for investigation.
    answer_sources:
      - Sysmon Event ID 11
      - File servers
      - Standard user endpoints
      - Web servers
    range: last 90 days
    queries:
      - pseudocode: |
          clustering_model = LOAD trained DBSCAN model
          file_events = GET virtual disk creation events (Sysmon EID 11)
          FOR each event in file_events:
            features = EXTRACT process_name, path_depth, file_size
            cluster_label = clustering_model.predict(features)
            IF cluster_label == 'noise' THEN ALERT
  - question: Has a virtualization management process been launched by a parent process not on the approved allowlist, such as an Office application or web browser?
    context: Virtualization tools are typically launched by an administrator via an interactive shell (like powershell.exe or cmd.exe) or the desktop environment (explorer.exe). An adversary might launch these tools from a compromised process, such as a malicious document macro (winword.exe) or a browser exploit (chrome.exe). This question uses a strict allowlist of parent processes to detect these illegitimate process chains.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Standard user endpoints
      - Application servers
    range: last 90 days
    queries:
      - pseudocode: |
          virt_procs = ['VBoxManage.exe', 'vmrun.exe']
          allowed_parents = ['explorer.exe', 'cmd.exe', 'powershell.exe', 'devenv.exe']
          SEARCH ProcessCreationEvents (Sysmon EID 1)
          FILTER process_name IN virt_procs
          FILTER parent_process_name NOT IN allowed_parents
          RETURN event_details
  - question: Have we observed any statistically rare parent-child process relationships where the child is a virtualization binary?
    context: This question moves beyond a static allowlist to a data-driven approach. It identifies suspicious activity by looking for parent-child process chains that are historically rare across the entire organization. For example, if 'outlook.exe' launching 'vmrun.exe' has never happened before (or happened only once), it would be flagged as a high-risk anomaly, even if 'outlook.exe' wasn't on a specific denylist.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Standard user endpoints
      - Application servers
    range: last 90 days
    queries:
      - pseudocode: |
          relationship_baseline = BUILD frequency table of all parent-child pairs FROM historical logs
          virt_procs = ['VBoxManage.exe', 'vmrun.exe']
          SEARCH ProcessCreationEvents (Sysmon EID 1)
          FILTER process_name IN virt_procs
          pair_frequency = LOOKUP frequency of (parent_process, process_name) in relationship_baseline
          IF pair_frequency < 5 THEN ALERT
  - question: Has a graph-based anomaly detection model identified any unusual or low-probability sequences of process executions leading to the launch of a virtualization tool?
    context: This is an advanced technique that models the entire process execution tree as a graph. It can detect complex, multi-step attack chains that simpler parent-child analysis would miss. For instance, a path like 'winword.exe -> cmd.exe -> powershell.exe -> vmrun.exe' would be identified as a highly improbable sequence within the graph of normal system activity, strongly indicating a malicious payload delivery chain.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Standard user endpoints
      - Application servers
    range: last 90 days
    queries:
      - pseudocode: |
          process_graph = BUILD weighted directed graph of process executions
          anomaly_detector = LOAD graph-based anomaly detection algorithm
          FOR each new process execution chain ending in a virt_proc:
            path_probability = CALCULATE probability of the chain in process_graph
            IF path_probability < threshold THEN ALERT
  - question: Has a host exhibited a correlated sequence of events within 15 minutes - evasive VM process execution, virtual disk file creation, and subsequent network traffic from a new, unregistered virtualization MAC?
    context: Individual suspicious events can sometimes be false positives, but a sequence of related events occurring in a short time frame on the same host is a very strong indicator of malicious activity. This question uses a SIEM correlation rule to detect the full attack chain - an adversary launching a VM in headless mode, the OS creating the virtual disk file, and the new VM beginning to communicate on the network.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek conn.log
      - Internet gateway/firewall
      - Standard user endpoints
      - Server infrastructure
      - Asset Inventory Database
    range: last 90 days
    queries:
      - pseudocode: |
          DEFINE correlation_rule (timespan=15m, key=hostname):
            1. TRIGGER on Sysmon EID 1 where process is virt_proc AND cmdline has evasive_flags
            2. THEN, EXPECT Sysmon EID 11 where file has disk_extension
            3. THEN, EXPECT Zeek conn.log where src_ip is host_ip AND src_mac has virt_oui AND src_mac is not in asset_inventory
            IF all 3 events occur in sequence, ALERT
  - question: Has any single host accumulated a high threat score based on a combination of suspicious VM-related activities within a one-hour window?
    context: Instead of a rigid sequence, this question uses a scoring system to identify hosts with a high concentration of suspicious behavior. Different activities (like using rare arguments, creating files in temp folders, or generating traffic from new MACs) are assigned points. If a host's total score in a rolling one-hour window becomes a statistical outlier, it is flagged for investigation. This method is effective at catching varied or slow-moving attacks.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek conn.log
      - Internet gateway/firewall
      - Standard user endpoints
      - Server infrastructure
      - Asset Inventory Database
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each host:
            score = 0
            FIND related events in last 1 hour
            IF evasive_process_execution THEN score += 10
            IF vdisk_creation_in_temp THEN score += 5
            IF new_virt_mac_traffic THEN score += 15
            baseline_score = GET historical score distribution for host
            IF score > (mean(baseline_score) + 4 * stddev(baseline_score)) THEN ALERT
  - question: Has a Hidden Markov Model detected a high probability that a sequence of events on a host corresponds to a known malicious pattern for deploying a virtual instance?
    context: This question applies a sophisticated probabilistic model (HMM) to event sequences. The model is trained on both benign and known-malicious sequences to understand the likely transitions between different states of an attack (e.g., from 'Process Execution' to 'Artifact Drop' to 'New C2 Channel'). It can then calculate the probability that a new, live sequence of events is following a malicious path, allowing it to detect attack patterns even if they vary slightly from what has been seen before.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek conn.log
      - Internet gateway/firewall
      - Standard user endpoints
      - Server infrastructure
      - Asset Inventory Database
    range: last 90 days
    queries:
      - pseudocode: |
          hmm_model = LOAD trained attack sequence HMM
          FOR each host:
            event_stream = GET sequence of security events for host
            malicious_path_probability = hmm_model.calculate_probability(event_stream)
            IF malicious_path_probability > threshold THEN ALERT