name: T1546.005: Trap
id: a1b2c3d4-e5f6-4789-a0b1-c2d3e4f5a6b7
description: This playbook focuses on detecting adversaries who use the `trap` command within shell scripts to establish persistence or escalate privileges. Adversaries modify user-level startup files (e.g., .bashrc, .profile) or system-wide scripts (e.g., /etc/profile) to insert `trap` commands. These commands execute malicious code when a specific interrupt signal is received, most commonly the EXIT signal when a shell session closes. This provides a mechanism for maintaining access or running code with elevated permissions. The playbook includes questions to identify suspicious modifications to these files, analyze the content of `trap` commands for malicious indicators (e.g., remote execution tools, obfuscation, privilege-altering commands), and detect anomalous process behaviors resulting from the execution of a malicious trap.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known-malicious process modifying shell startup files like .bashrc or .profile?
  context: Adversaries may use malware to modify user shell startup files to insert `trap` commands for persistence. This question aims to detect this activity by correlating file write events on these startup files with the initiating process. If the process hash matches a known malicious signature from a threat intelligence feed, it is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - auditd logs
  - User Home Directories on WSL-enabled Endpoints and Linux Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes where file_path ends with ('.bashrc', '.profile') | JOIN process_creations on process_id | LOOKUP process_hash against threat_intel_feed | RETURN alerts where match_found
- question: Is an uncommon or previously unseen process modifying shell startup files?
  context: Legitimate modifications to shell startup files are typically performed by a predictable set of processes (e.g., text editors, shells). An adversary might use a novel or custom tool to perform this modification. This question establishes a baseline of normal processes that modify these files and alerts on any statistically rare or new process, which could indicate malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - auditd logs
  - User Home Directories on WSL-enabled Endpoints and Linux Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes where file_path ends with ('.bashrc', '.profile') | STATS frequency of modifying_process_name by user, hostname | RETURN alerts where frequency < 5th_percentile
- question: Does a machine learning model classify the modification of a shell startup file as malicious based on process and file characteristics?
  context: This question uses a machine learning approach to identify subtle malicious modifications that might evade simpler rule-based detections. A Random Forest classifier is trained on features from both process creation and file modification events (e.g., process name, parent process, command line, user) to learn the difference between benign and malicious activity. An alert from the model indicates that the combination of factors surrounding the file modification is highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - auditd logs
  - User Home Directories on WSL-enabled Endpoints and Linux Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM process_creation and file_modification_events | EXTRACT features (process_name, parent_process, cmd_line, user, file_path) | PREDICT with Random_Forest_model | RETURN alerts where prediction is 'malicious'
- question: Has a shell startup file been modified to include a `trap` command with suspicious arguments like `curl`, `wget`, or `base64`?
  context: Adversaries use the `trap` command to execute code when a shell receives a signal. This question focuses on inspecting the content of modified startup files for specific, high-risk commands within a `trap` statement. The presence of tools for remote payload execution (`curl`, `wget`), reverse shells (`bash -i`), or obfuscation (`base64`) inside a `trap` command is a strong indicator of a persistence mechanism.
  answer_sources:
  - EDR file modification events with content
  - FIM logs with content diffs
  - User Home Directories on WSL-enabled Endpoints and Linux Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_modification_events with content_diff | WHERE file_path ends with ('.bashrc', '.profile') AND content_added matches regex 'trap.*(curl|wget|nc|base64|bash -i)' | RETURN alerts
- question: Does a newly added `trap` command in a shell startup file contain a high-entropy string, suggesting obfuscation?
  context: To evade signature-based detection, adversaries often encode or obfuscate the payloads executed by `trap` commands. High Shannon entropy is a mathematical indicator of randomness, which is characteristic of encoded data (like Base64) or compressed/encrypted payloads. This question analyzes the command string within a `trap` and alerts if its entropy is abnormally high compared to a baseline, pointing to potential obfuscation.
  answer_sources:
  - EDR file modification events with content
  - FIM logs with content diffs
  - User Home Directories on WSL-enabled Endpoints and Linux Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_modification_events with content_diff | WHERE file_path ends with ('.bashrc', '.profile') | EXTRACT trap_command_string from content_added | CALCULATE shannon_entropy(trap_command_string) | RETURN alerts where entropy > 95th_percentile_baseline
- question: Does an NLP model classify a new `trap` command in a shell startup file as semantically malicious or anomalous?
  context: This question leverages advanced NLP models that understand the structure and intent of shell commands. Instead of relying on simple keyword matching, the model analyzes the entire `trap` command to determine if its structure and components are characteristic of malicious behavior. This can detect novel or complex malicious commands that might not be caught by regular expressions.
  answer_sources:
  - EDR file modification events with content
  - FIM logs with content diffs
  - User Home Directories on WSL-enabled Endpoints and Linux Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM file_modification_events with content_diff | EXTRACT new_trap_command | PREDICT with malicious_shell_command_NLP_model | RETURN alerts where prediction is 'malicious'
- question: Is a process not on the approved allowlist (e.g., `winword.exe`, `chrome.exe`) modifying a shell startup file in a WSL environment?
  context: Modifications to WSL shell startup files from non-standard Windows processes (like web browsers or office applications) are highly irregular and suspicious. This question uses a simple but effective allowlist approach: it defines the set of expected processes (editors, IDEs) and alerts on any modification performed by a process not on that list, which could indicate a process injection or a malicious macro.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - WSL filesystems on Windows Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on WSL filesystem where file_path ends with ('.bashrc', '.profile') | JOIN process_creations on process_id | WHERE modifying_process_name NOT IN (allowlist: 'code.exe', 'vim', 'nano', 'bash.exe') | RETURN alerts
- question: Has a shell startup file been modified by a process spawned from a statistically rare parent process (e.g., `outlook.exe` -> `bash.exe`)?
  context: Legitimate user actions create predictable process chains (e.g., `explorer.exe` -> `cmd.exe` -> `bash.exe`). Adversaries, however, may create anomalous chains, such as a document spawning a shell to modify a startup file. This question analyzes the parent-child process relationship for any modification event and alerts when a rare or never-before-seen pairing occurs, indicating a deviation from normal behavior.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - WSL filesystems on Windows Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on WSL filesystem where file_path ends with ('.bashrc', '.profile') | JOIN process_creations on process_id | LOOKUP historical parent-child frequency | RETURN alerts where frequency < 1st_percentile
- question: Does the sequence of process events leading up to a shell startup file modification deviate from normal user workflow patterns?
  context: This question employs a time-series model to learn the "normal story" of how users interact with processes before modifying a startup file. The model analyzes sequences of events (parent processes, child processes, time between actions) as a whole workflow. An alert is triggered if a new sequence significantly deviates from these learned patterns, suggesting an automated or malicious script is at play rather than a typical user.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - WSL filesystems on Windows Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM process_events leading to shell_file_modification | CREATE event_sequence_vector | PREDICT with LSTM_workflow_model | RETURN alerts where sequence is anomalous
- question: Did a shell process terminate immediately after spawning a child process that made an outbound network connection to a non-allowlisted destination?
  context: A `trap EXIT` command executes just before a shell terminates. A common malicious pattern is to use this trap to launch a separate process that establishes a C2 connection. This question specifically looks for this timing indicator: a shell process creating a child and then terminating almost instantly (<1s), followed by that child process making an external network connection. This is highly indicative of a `trap EXIT` payload.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Zeek conn.log
  - Process and Network Telemetry from Endpoints and Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creations (parent_process is shell) | JOIN process_terminations on parent_process_id where termination_time - creation_time < 1s | JOIN network_connections on child_process_id where destination_ip NOT IN (allowlist) | RETURN alerts
- question: Is a process spawned by a short-lived shell connecting to a statistically rare network destination (IP, port, or ASN)?
  context: Building on the previous question, this analytic focuses on the network destination of the process spawned by a suspected `trap EXIT`. Adversary C2 infrastructure often resides on less common hosting providers or uses non-standard ports. By calculating the rarity of the destination IP, port, and Autonomous System Number (ASN) across the enterprise, this query can flag connections to unusual destinations as highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Zeek conn.log
  - Process and Network Telemetry from Endpoints and Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH for processes spawned by short-lived shells | JOIN network_connections on process_id | LOOKUP historical destination_rarity (ip, port, asn) | RETURN alerts where destination_asn_frequency < 1st_percentile
- question: Does a machine learning model identify the sequence of a shell creating a child, the shell terminating, and the child making a network connection as a statistical outlier?
  context: This question uses a more sophisticated model to analyze the entire event sequence associated with a potential `trap EXIT` execution. A model like a Hidden Markov Model is trained on features like the time deltas between the three events, the child process name, and network details. It learns what normal sequences look like and flags any triplet of events that is a statistical outlier, providing a robust method for detecting this specific behavior pattern.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Zeek conn.log
  - Process and Network Telemetry from Endpoints and Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM process_create, process_terminate, network_connection events | CREATE event_triplet_vectors | PREDICT with HMM_sequence_model | RETURN alerts where sequence is anomalous
- question: Has a privileged shell script (e.g., /etc/profile) been modified with a `trap` command that executes a known privilege escalation tool?
  context: Adversaries may modify system-wide scripts to execute malicious code with elevated privileges for any user who logs in. This question inspects modifications to these critical files. If a `trap` command is added that points to an executable file, the file is hashed and checked against threat intelligence feeds for known hacking or privilege escalation tools. A match is a critical finding.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - EDR file modification events with content
  - System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on ('/etc/profile', '/etc/profile.d/*') with content_diff | EXTRACT file_path from new_trap_command | HASH file at file_path | LOOKUP hash against privesc_tool_intel_feed | RETURN alerts where match_found
- question: Has a `trap` command been added to a privileged shell script that contains a statistically rare or novel command or file path?
  context: Privileged, system-wide shell scripts are modified infrequently and usually in predictable ways. This question establishes a baseline of all commands and file paths ever seen within `trap` statements in these critical files. It then alerts if a newly added `trap` command contains a command or references a file path that is brand new or has a very low historical frequency, indicating a suspicious and unauthorized change.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - EDR file modification events with content
  - System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on ('/etc/profile', '/etc/profile.d/*') with content_diff | EXTRACT command from new_trap_command | LOOKUP historical command_frequency in privileged_traps | RETURN alerts where frequency is new or < 1st_percentile
- question: Does a machine learning model classify a modification to a privileged shell script as malicious?
  context: This question applies machine learning to the problem of detecting malicious changes to critical system files. A classifier is trained on a variety of features, including the process and user making the change, as well as NLP-based features extracted from the text being added (e.g., the `trap` command itself). This provides a holistic assessment of the change, allowing it to catch subtle or complex malicious modifications.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - EDR file modification events with content
  - System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM file_writes on privileged_scripts with content_diff | EXTRACT features (process, user, NLP_features) | PREDICT with script_modification_classifier | RETURN alerts where prediction is 'malicious'
- question: Has a system-wide shell script been modified to include a `trap` command that executes a known privilege-altering command?
  context: Adversaries may directly embed commands that escalate privileges within a `trap` statement in a system-wide script. This question uses regular expressions to scan the content of modified scripts for `trap` commands that are immediately followed by high-risk system commands like `usermod` (to add a user to the sudo group), `chmod u+s` (to set a SUID bit), or `setcap`. A direct match is a high-priority alert for an active privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4732
  - EDR file modification events with content
  - System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on ('/etc/profile', '/etc/bash.bashrc') with content_diff | WHERE content_added matches regex 'trap.*(usermod|groupadd|chmod u\+s|setcap)' | RETURN alerts
- question: Does a new `trap` command added to a privileged script contain a high-entropy string, suggesting an obfuscated payload?
  context: To hide their intentions, adversaries might obfuscate or encode the privilege escalation payload executed by a `trap` command. This question measures the Shannon entropy (a measure of randomness) of any new `trap` command string added to a privileged script. An entropy score that is significantly higher than the historical baseline for that file is a strong indicator of an obfuscated payload designed to evade detection.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4732
  - EDR file modification events with content
  - System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on privileged_scripts with content_diff | EXTRACT new_trap_command | CALCULATE shannon_entropy(new_trap_command) | RETURN alerts where entropy > 99th_percentile_baseline
- question: Does a deep learning model detect a new `trap` command modification in a critical file like /etc/profile as a significant structural or semantic deviation?
  context: This question uses an advanced seq2seq model, common in language translation, to learn the "grammar" and normal structure of critical configuration files. When a modification occurs, the model evaluates the new version. If the addition of a `trap` command represents a significant deviation from the learned benign structure, it flags the change as anomalous. This can detect novel and cleverly disguised malicious modifications.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4732
  - EDR file modification events with content
  - System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM modifications to '/etc/profile' | PREDICT with seq2seq_config_file_model | RETURN alerts where modification is anomalous
- question: Has a critical, root-owned system script been modified by a non-root user?
  context: Critical system-wide configuration files (like those in `/etc`) should only be modified by the `root` user or other specifically authorized administrative accounts. Any modification by a standard, non-privileged user is a major security violation and a strong indicator that a privilege escalation exploit has been successfully used. This question enforces this access control principle through monitoring.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes where file_path IN critical_system_files_list | JOIN process_creations on process_id | WHERE user_id IS NOT 'root' AND user_id NOT IN authorized_admin_list | RETURN alerts
- question: Has a critical system file been modified by a user or process that has rarely or never done so before?
  context: Even among administrators, modifications to critical system files are often performed by specific users or automated processes (e.g., package managers). This question establishes a baseline of which users and processes normally modify each critical file. An alert is generated if a modification is made by a user or process that is a statistical outlier, suggesting an unusual and potentially unauthorized change.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_writes on critical_system_files | JOIN process_creations on process_id | LOOKUP historical modifier_frequency(user, process, file) | RETURN alerts where frequency < 1st_percentile
- question: Does an unsupervised anomaly detection model flag a modification to a critical system file as a statistical outlier?
  context: This question uses an unsupervised model like Isolation Forest to find "needles in a haystack." The model is trained on features of normal modification events (modifying user, process, parent process, time of day). It learns to identify normal clusters of activity and will alert on any event that does not fit these patterns, effectively flagging it as an anomaly that warrants investigation.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM file_writes on critical_system_files | EXTRACT features (user_id, process, parent_process, time_of_day) | PREDICT with Isolation_Forest_model | RETURN alerts where event is outlier
- question: Has a privileged system service (like cron or systemd) spawned a child process that is not on its pre-defined allowlist?
  context: Privileged system services like `cron`, `systemd`, or the Task Scheduler service typically execute a predictable set of child processes. An adversary who has managed to modify a configuration file read by these services (potentially via a `trap`) may cause them to spawn an unexpected process like a shell or a networking tool. This question uses a strict allowlist to detect any deviation from expected behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Zeek conn.log
  - Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creations where parent_process IN ('cron', 'systemd', 'svchost.exe') | WHERE child_process NOT IN parent_specific_allowlist | RETURN alerts
- question: Has a privileged system service spawned a child process that is statistically improbable based on historical data?
  context: This question moves from a rigid allowlist to a probabilistic model. It analyzes historical process data to calculate the probability of a privileged parent process (like `cron`) spawning any given child process. An alert is triggered if a parent-child relationship occurs that has a very low probability (e.g., <0.01%), indicating a rare event that is highly suspicious and could be the result of a compromised configuration.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Zeek conn.log
  - Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creations where parent_process IN privileged_services | LOOKUP historical conditional_probability(child_process | parent_process) | RETURN alerts where probability < 0.0001
- question: Does a graph-based anomaly detection model identify the spawning of a child process by a privileged service as an anomalous event in the process execution graph?
  context: This question treats the entire system's process activity as a large, interconnected graph where processes are nodes and parent-child relationships are edges. A Graph Neural Network (GNN) learns the normal structure of this graph. An alert is triggered if a new, anomalous edge appears (e.g., `cron` spawning `ncat`), which the model identifies as a structural anomaly inconsistent with learned benign behavior. This is a powerful method for detecting unusual execution flows.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Zeek conn.log
  - Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM process_creation_events | UPDATE process_relationship_graph | PREDICT with GNN_anomaly_detection_model | RETURN alerts where new_edge is anomalous