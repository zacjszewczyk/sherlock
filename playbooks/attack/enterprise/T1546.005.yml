name: T1546.005: Trap
id: 2e8f6e4e-8b1c-4b3d-9f4a-7d1c6b0e9a2d
description: This playbook focuses on detecting adversaries using the 'trap' command in shell environments to establish persistence or escalate privileges. Adversaries modify user-level shell startup files (e.g., .bashrc, .profile) or system-wide, privileged scripts (e.g., /etc/profile) to insert 'trap' commands. These commands are triggered by interrupt signals, such as a user logging out (EXIT), allowing the adversary's code to execute. The playbook identifies this activity by monitoring for modifications to these critical files by unusual processes, analyzing the content of the modifications for suspicious commands (e.g., curl, wget, usermod) or obfuscated payloads (identified via entropy), and correlating process activity where a shell's termination immediately precedes the launch of a new process that initiates network connections.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a known-malicious process modifying shell startup files like .bashrc or .profile?
    context: This question seeks to identify a common persistence technique where an adversary's malware, identified by its file hash from threat intelligence, directly modifies a user's shell startup script. Such a modification allows the malware to execute automatically whenever a new shell is opened, ensuring its continued presence on the system.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - auditd logs
      - User Home Directories on WSL-enabled Endpoints and Linux Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH for file writes (4663, auditd) to startup files (.bashrc, .profile). JOIN with process creation (4688) on Process ID. CHECK process hash against threat intel feed. ALERT on match.
  - question: Is a process that rarely or never modifies shell startup files now writing to one?
    context: This question focuses on detecting anomalous behavior. Legitimate modifications to shell startup files are typically performed by a small, consistent set of processes (e.g., text editors, development tools). An alert on a rare or novel process performing this action can uncover malware or unauthorized tools attempting to establish persistence under the radar.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - auditd logs
      - User Home Directories on WSL-enabled Endpoints and Linux Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH for file writes (4663, auditd) to startup files. GROUP by process name. CALCULATE modification frequency baseline. ALERT on processes with frequency < 5th percentile.
  - question: Does a machine learning model classify a shell startup file modification event as malicious?
    context: This question leverages machine learning to identify subtle or complex patterns indicative of malicious activity that may be missed by simple rule-based alerts. By analyzing features from both process creation and file modification events, a classifier can learn to distinguish between benign user activity and an adversary's attempt to establish persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - auditd logs
      - User Home Directories on WSL-enabled Endpoints and Linux Servers
    range: last 90 days
    queries:
      - pseudocode: INPUT process (4688) and file write (4663) features into Random Forest model. ALERT if classification is 'malicious'.
  - question: Has a shell startup file been modified to include a `trap` command with suspicious arguments like `curl`, `wget`, or `base64`?
    context: This question directly targets the `trap` persistence mechanism. By scanning the content of modified startup files for the `trap` keyword followed by commands used for downloading payloads, obfuscation, or reverse shells, analysts can detect high-fidelity indicators of compromise. This is a direct implementation of the T1546.005 technique.
    answer_sources:
      - EDR file modification events with content
      - FIM logs with content diffs
      - User Home Directories on WSL-enabled Endpoints and Linux Servers
    range: last 90 days
    queries:
      - pseudocode: ON file write to startup file, SCAN file content. REGEX search for 'trap' with keywords (curl, wget, nc, base64, etc.). ALERT on match.
  - question: Does a new `trap` command in a shell startup file have an unusually high entropy, suggesting obfuscation?
    context: This question aims to uncover obfuscated payloads. Adversaries often encode or encrypt their commands to evade simple signature-based detection. High Shannon entropy is a mathematical indicator of randomness, which is characteristic of encrypted or compressed data. Alerting on high-entropy `trap` commands can reveal these hidden malicious payloads.
    answer_sources:
      - EDR file modification events with content
      - FIM logs with content diffs
      - User Home Directories on WSL-enabled Endpoints and Linux Servers
    range: last 90 days
    queries:
      - pseudocode: ON file write to startup file, SCAN for 'trap' commands. CALCULATE Shannon entropy of the command argument. ALERT if entropy > 95th percentile baseline.
  - question: Does an NLP model classify a new `trap` command in a shell startup file as semantically malicious?
    context: This question employs advanced NLP to understand the *intent* of a command, rather than just its keywords. An NLP model trained on shell commands can recognize unusual structures, parameter combinations, and sequences that are characteristic of malicious activity, even if they don't use obvious keywords, providing a more sophisticated layer of detection.
    answer_sources:
      - EDR file modification events with content
      - FIM logs with content diffs
      - User Home Directories on WSL-enabled Endpoints and Linux Servers
    range: last 90 days
    queries:
      - pseudocode: ON file write to startup file, EXTRACT new 'trap' command. INPUT command to NLP model. ALERT if classification is 'malicious' or 'anomalous'.
  - question: Is a process not on the approved allowlist (e.g., winword.exe, chrome.exe) modifying a shell startup file?
    context: This question focuses on identifying illegitimate modifiers. Shell startup files are typically modified by editors or shell processes. When an unrelated application like a web browser or office program modifies one, it is highly suspicious and could indicate a code execution vulnerability being exploited to establish persistence.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - WSL filesystems on Windows Endpoints
    range: last 90 days
    queries:
      - pseudocode: ON file write (4663) to startup file, GET modifying process name (from 4688). CHECK process name against allowlist. ALERT if not in allowlist.
  - question: Has a statistically rare parent-child process relationship resulted in the modification of a shell startup file?
    context: This question analyzes the process lineage to spot anomalies. A legitimate modification might look like `explorer.exe -> cmd.exe -> notepad.exe`. An anomalous one might be `outlook.exe -> powershell.exe -> bash.exe`. By baselining normal parent-child relationships that lead to these file modifications, we can detect unusual and potentially malicious execution chains.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - WSL filesystems on Windows Endpoints
    range: last 90 days
    queries:
      - pseudocode: ON file write (4663) to startup file, GET process (4688) and its parent. CALCULATE frequency of parent-child pair for this action. ALERT if frequency < 1st percentile.
  - question: Does a time-series model detect an anomalous sequence of process events leading up to a shell startup file modification?
    context: This question seeks to understand the entire workflow leading to a file modification. By modeling the normal sequence of user and system actions, a time-series model can identify when a workflow deviates from the norm. This can catch sophisticated attacks that try to blend in by using legitimate tools in an illegitimate sequence to establish persistence.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - WSL filesystems on Windows Endpoints
    range: last 90 days
    queries:
      - pseudocode: INPUT sequence of process events (4688) preceding a file write (4663) into LSTM model. ALERT if sequence deviates from baseline.
  - question: Did a shell process spawn a child and terminate almost immediately, with the child process then making an outbound network connection?
    context: This question is designed to detect the execution of a `trap` command on the `EXIT` signal. When a shell exits, the trap is triggered, spawning a new process (e.g., for a reverse shell) just before the original shell terminates. Correlating this rapid process creation/termination with subsequent network activity is a strong indicator of this specific persistence technique.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4689
      - Zeek conn.log
      - Process and Network Telemetry from Endpoints and Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: JOIN process create (4688) with process terminate (4689). FIND where parent is shell and (terminate_time - create_time) < 1s. CHECK if child process makes outbound network connection (Zeek). ALERT if connection is not to allowlisted IP.
  - question: Is a process spawned from a quickly-terminating shell connecting to a statistically rare network destination?
    context: This question adds a layer of threat intelligence and environmental context to the previous detection. Adversaries often use novel or unusual C2 infrastructure. By identifying connections from suspected `trap`-spawned processes to destinations (IPs, ports, ASNs) that are rare within the organization's baseline, we can increase the confidence that the activity is malicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4689
      - Zeek conn.log
      - Process and Network Telemetry from Endpoints and Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: FIND processes spawned from quickly-terminating shells. ANALYZE their network destinations (Zeek). CALCULATE rarity of destination IP/port/ASN. ALERT if destination is rare (< 1st percentile).
  - question: Does a machine learning model identify the sequence of process creation, parent termination, and child network connection as a statistical outlier?
    context: This question automates the detection of the `trap on EXIT` pattern using a model. By training a model on the timing and attributes of the [Create -> Terminate -> Connect] event sequence, it can learn what is normal and automatically flag sequences that are anomalous, such as an unusually short time delta or a connection to a suspicious port.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4689
      - Zeek conn.log
      - Process and Network Telemetry from Endpoints and Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: MODEL event triplets [Create(4688) -> Terminate(4689) -> Network(Zeek)]. ANALYZE features like time deltas and connection properties. ALERT if model flags sequence as an outlier.
  - question: Has a privileged, system-wide script like /etc/profile been modified to include a `trap` command that executes a known malicious binary?
    context: This question looks for a privilege escalation vector where an adversary, having gained some level of access, modifies a script that runs with higher privileges. By adding a `trap` command that executes a file, they can get their malicious code (identified by its hash) to run in a privileged context. This is a critical detection for preventing full system compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - EDR file modification events with content
      - System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)
    range: last 90 days
    queries:
      - pseudocode: ON write (4663) to privileged script, INSPECT content (EDR). IF 'trap' is added, EXTRACT file path argument. HASH the file. CHECK hash against threat intel feed. ALERT on match.
  - question: Is a novel or extremely rare command or file path being added to a `trap` statement within a privileged script?
    context: This question uses anomaly detection to find suspicious modifications. Privileged system scripts are rarely changed, and the commands within them are typically static. The appearance of a brand new command or file path within a `trap` statement is a significant deviation from the baseline and warrants immediate investigation for a privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - EDR file modification events with content
      - System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)
    range: last 90 days
    queries:
      - pseudocode: ON write to privileged script, EXTRACT 'trap' command/path. COMPARE to historical baseline for that script. ALERT if command/path is new or has very low frequency.
  - question: Does a machine learning classifier deem the modification of a privileged script, specifically the addition of a `trap` command, as malicious?
    context: This question applies machine learning to the complex task of validating changes to critical files. By analyzing features of the change—who made it, what process they used, and the linguistic properties of the added code—a model can provide a sophisticated risk score, helping to distinguish a legitimate administrative change from a malicious one.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - EDR file modification events with content
      - System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)
    range: last 90 days
    queries:
      - pseudocode: INPUT features of privileged script modification (process, user, text content) into classifier. ALERT if classification is 'malicious'.
  - question: Has a system-wide script been modified to include a `trap` command that executes privilege escalation commands like `usermod`, `chmod u+s`, or `setcap`?
    context: This question searches for direct, blatant privilege escalation attempts. Adversaries may embed commands that create new admin users, add users to privileged groups, or set the SUID bit on a binary directly within a `trap` command. Scanning for these specific, high-risk command strings provides a high-fidelity way to detect this technique.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 4732
      - EDR file modification events with content
      - System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)
    range: last 90 days
    queries:
      - pseudocode: ON write (4663) to system script, INSPECT content (EDR). REGEX search for 'trap' followed by keywords (usermod, chmod u+s, setcap, etc.). ALERT on match.
  - question: Does a new `trap` command added to a privileged script exhibit extremely high entropy, indicating an obfuscated payload?
    context: This question aims to catch adversaries who are hiding their privilege escalation payloads. To bypass simple keyword searches, an attacker might base64-encode a malicious script and execute it within the `trap` command. A very high entropy score for that command string is a strong signal of this type of obfuscation and should be treated as a critical alert.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 4732
      - EDR file modification events with content
      - System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)
    range: last 90 days
    queries:
      - pseudocode: ON write to privileged script, SCAN for new 'trap' commands. CALCULATE Shannon entropy of command string. ALERT if entropy > 99th percentile for that file.
  - question: Does a deep learning model flag a new `trap` command in a critical configuration file as a significant deviation from its learned benign structure?
    context: This question uses advanced deep learning to perform 'file integrity monitoring' at a semantic level. A seq2seq model can learn the complex structure and syntax of a configuration file like `/etc/profile`. It can then detect when a change, such as the insertion of a `trap` command, is structurally or semantically inconsistent with all previous benign versions of the file, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 4732
      - EDR file modification events with content
      - System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)
    range: last 90 days
    queries:
      - pseudocode: INPUT diff of critical file modification into seq2seq model. ALERT if model flags the change (e.g., new 'trap' command) as a significant deviation.
  - question: Did a non-privileged user or process modify a root-owned, critical system script?
    context: This question seeks to detect a successful privilege escalation exploit. Critical system files should only be modifiable by the `root` user or specific administrative accounts. If a standard user account is observed writing to one of these files, it implies that the user's process has successfully escalated its privileges through some vulnerability, which is a severe security breach.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments
    range: last 90 days
    queries:
      - pseudocode: ON write (4663) to critical system file, GET User ID from initiating process (4688). CHECK if User ID is authorized (e.g., 'root'). ALERT if not authorized.
  - question: Has a critical system file been modified by a user or process that has never done so before?
    context: This question uses historical data to spot anomalous access. Even among administrators, the modification of critical system files is often performed by a very small set of users or automated processes. A write operation from a user account (even an admin account) or process that has no history of touching that specific file is highly unusual and could indicate account takeover or misuse.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments
    range: last 90 days
    queries:
      - pseudocode: ON write (4663) to critical file, GET user/process from (4688). CHECK against historical modification baseline for that specific file. ALERT if user/process is new or has frequency < 1st percentile.
  - question: Does an unsupervised machine learning model flag the modification of a critical system file as a statistical outlier?
    context: This question automates the detection of suspicious modifications using a multi-featured anomaly detection model. By considering not just the user and process, but also the parent process, time of day, and other contextual factors, an Isolation Forest model can identify unusual combinations of attributes that represent a deviation from normal administrative activity, flagging potential exploits.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments
    range: last 90 days
    queries:
      - pseudocode: INPUT features of critical file modification (user, process, parent, time) into Isolation Forest model. ALERT if model flags event as an outlier.
  - question: Did a privileged service like cron, systemd, or Task Scheduler spawn an unexpected child process (e.g., `ncat`, `python`) not on its allowlist?
    context: This question aims to detect the final payload execution of a privilege escalation attack. If an adversary successfully modifies a script or configuration file used by a privileged service (like cron), that service will eventually execute the malicious command. Since services like `cron` or `systemd` typically spawn a very predictable set of child processes, any deviation from an established allowlist is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Zeek conn.log
      - Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)
    range: last 90 days
    queries:
      - pseudocode: MONITOR process creation (4688) from privileged parents (cron, systemd, svchost.exe). CHECK child process name against parent-specific allowlist. ALERT if child is not on list.
  - question: Has a privileged service spawned a child process that it has a very low historical probability of creating?
    context: This question provides a more dynamic, probabilistic alternative to a static allowlist. By analyzing historical process data, we can calculate the likelihood of `cron` spawning `sh`, for example. If `cron` suddenly spawns `ncat`, and the historical probability of this is near zero, the system can generate a high-confidence alert for this statistically improbable and suspicious event.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Zeek conn.log
      - Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)
    range: last 90 days
    queries:
      - pseudocode: MONITOR process creation (4688) from privileged parents. CALCULATE conditional probability P(Child | Parent) based on historical data. ALERT if P is below a threshold (e.g., < 0.01%).
  - question: Does a graph-based anomaly detection model identify a new, anomalous relationship between a privileged service and a child process?
    context: This question uses advanced graph-based machine learning to understand the system's 'process graph'. The model learns what the normal connections between processes look like. An adversary creating a new execution path, such as by getting `systemd` to spawn `ncat`, would create a new 'edge' in this graph. The model can identify this new edge as a structural anomaly, flagging the compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Zeek conn.log
      - Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)
    range: last 90 days
    queries:
      - pseudocode: MODEL process events (4688) as a graph. INPUT new parent-child relationships into Graph Neural Network. ALERT if model flags a new edge (e.g., systemd -> ncat) as anomalous.