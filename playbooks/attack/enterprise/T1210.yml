name: T1210: Exploitation of Remote Services
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is exploiting remote services for lateral movement. This involves looking for signs of exploitation in network traffic, such as signatures of known exploits (e.g., EternalBlue, BlueKeep) for services like SMB, RDP, or vCenter. It also covers post-exploitation activity, such as the creation of processes using remote execution tools (e.g., PsExec, WMIC), anomalous parent-child process relationships where a network service spawns a command shell, unexpected service crashes following connection attempts, and a newly compromised host initiating internal network scanning.
type: technique
related:
- TA0008: Lateral Movement
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are we observing network traffic that matches known exploit signatures for remote services like SMB, RDP, or vCenter?
  context: This question aims to detect known exploits using signature-based methods. By deploying and monitoring Network Intrusion Detection System (NIDS) signatures, analysts can identify traffic payloads matching well-documented vulnerabilities. Correlating these NIDS alerts with full network session data (like Zeek logs) is crucial to verify the alert and understand the full context of the potential attack, reducing false positives.
  answer_sources:
  - Zeek conn.log
  - Zeek dce_rpc.log
  - Zeek rdp.log
  - Zeek files.log
  - Network Intrusion Detection System (NIDS) alerts
  - Network sensors (e.g., Zeek) monitoring East-West traffic between server subnets, at the network perimeter, and within the DMZ.
  range: last 90 days
  queries:
  - symbolic: SEARCH NIDS alerts for signatures related to remote service exploits (SMB, RDP, vCenter). JOIN alert data with network connection logs on the connection 4-tuple and timestamp to investigate the full session context.
- question: Are there any remote service connections exhibiting anomalous metrics, such as unusually long duration or large data transfers, compared to their historical baseline?
  context: This question helps detect potential exploit attempts that do not have a known signature. By establishing a statistical baseline of normal connection characteristics (e.g., duration, bytes transferred) for each host-service pair, we can flag significant deviations. An alert on a connection exceeding the 99th percentile of its baseline could indicate the delivery of a large exploit payload or anomalous data transfer associated with compromise.
  answer_sources:
  - Zeek conn.log
  - Network sensors (e.g., Zeek) monitoring East-West traffic between server subnets, at the network perimeter, and within the DMZ.
  range: last 90 days
  queries:
  - statistical: FOR each remote service connection, CALCULATE connection duration and total bytes transferred. COMPARE these metrics to the historical baseline for the specific host-service pair. ALERT if current metrics exceed the 99th percentile of the baseline.
- question: Can we identify malicious remote service traffic patterns that lack known signatures using machine learning?
  context: This question leverages machine learning to find novel or obfuscated exploit activity. A supervised classification model can be trained on labeled network flow data, using features like packet lengths, inter-arrival times, and payload entropy. This allows the model to learn complex, non-obvious patterns of malicious traffic that signature-based and simple statistical methods would likely miss.
  answer_sources:
  - Zeek conn.log
  - Zeek dce_rpc.log
  - Zeek rdp.log
  - Zeek files.log
  - Network sensors (e.g., Zeek) monitoring East-West traffic between server subnets, at the network perimeter, and within the DMZ.
  range: last 90 days
  queries:
  - machine_learning: EXTRACT features (e.g., packet lengths, inter-arrival times, payload entropy) from network flow data. APPLY a pre-trained supervised classification model to the feature set. FLAG connections classified as malicious for analyst review.
- question: Is there evidence of remote execution tools like PsExec or WMIC being used to create processes on servers?
  context: This question looks for direct evidence of common lateral movement techniques. Adversaries often use tools like PsExec and WMIC to execute commands on remote systems. Searching for characteristic command-line arguments (e.g., 'wmic /node:', 'PSEXESVC.exe') in process creation logs (Windows Event ID 4688) provides a high-confidence indicator of this activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 5145
  - Zeek smb_files.log
  - Endpoint Detection and Response (EDR) logs from Domain Controllers, application servers, and management servers.
  range: last 90 days
  queries:
  - symbolic: SEARCH process creation logs (Event ID 4688) for command lines containing 'wmic /node:', 'process call create', or 'PSEXESVC.exe'. SEARCH service installation logs (Event ID 4697) for service names like 'PSEXESVC'.
- question: Are there any extremely rare command-line arguments being executed on servers, especially by network service accounts?
  context: This question uses statistical rarity to uncover suspicious commands that may not match a known signature. By baselining all command-line arguments across the environment, analysts can identify those that are highly infrequent (e.g., in the bottom 1st percentile). A rare command, especially when executed by a sensitive account or immediately following a remote connection, is highly suspicious and warrants investigation as potential post-exploitation activity.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint Detection and Response (EDR) logs from Domain Controllers, application servers, and management servers.
  range: last 90 days
  queries:
  - statistical: CALCULATE the frequency of all unique command-line arguments observed in the environment. ALERT on any command line whose frequency is in the bottom 1st percentile, especially if executed by a network service account.
- question: Can we detect anomalous sequences of process creations that occur immediately after an inbound remote service connection?
  context: This question aims to identify malicious post-exploitation activity by analyzing its deviation from normal behavior. A machine learning model (e.g., an LSTM Autoencoder) can be trained on benign sequences of process creations that typically follow a remote connection. A sequence that the model cannot accurately reconstruct (i.e., has a high reconstruction error) is anomalous and could represent an adversary's actions on the compromised host.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoint Detection and Response (EDR) logs from Domain Controllers, application servers, and management servers.
  range: last 90 days
  queries:
  - machine_learning: FOR a given host, analyze the sequence of process creations following an inbound remote service connection. APPLY a pre-trained sequence analysis model (e.g., LSTM Autoencoder). FLAG sequences with a high reconstruction error as anomalous.
- question: Are network service processes like services.exe or lsass.exe spawning unexpected child processes like cmd.exe or powershell.exe?
  context: This question looks for a classic sign of process injection or credential theft. Legitimate network service processes have a predictable set of child processes. Spawning an interactive shell (cmd.exe, powershell.exe) or certain reconnaissance tools is highly anomalous. Creating a high-fidelity alert for these specific parent-child relationships, especially when correlated with recent inbound network activity, can effectively detect exploitation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Process creation logs from critical service hosts such as Domain Controllers, Exchange servers, and vCenter servers.
  range: last 90 days
  queries:
  - symbolic: ALERT on process creation events where the parent is 'lsass.exe', or where the parent is 'services.exe' or 'svchost.exe' and the child is 'cmd.exe' or 'powershell.exe'. CORRELATE with recent inbound network connections.
- question: Are we observing statistically rare parent-child process relationships originating from network service processes?
  context: This question helps find novel or unusual post-exploitation techniques by focusing on rarity. For each common parent process (like 'svchost.exe'), we can build a frequency distribution of all its historical child processes. When a new parent-child relationship is observed for the first time or is in the lowest frequency quantile (e.g., bottom 1%), it represents a statistically significant deviation from the norm and is a strong indicator of suspicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Process creation logs from critical service hosts such as Domain Controllers, Exchange servers, and vCenter servers.
  range: last 90 days
  queries:
  - statistical: FOR each parent network service process, maintain a historical frequency distribution of its child processes. ALERT when a parent-child relationship occurs that is new or falls in the lowest 1% frequency quantile for that parent.
- question: Can we use machine learning to classify parent-child process pairs as malicious or benign?
  context: This question proposes a more advanced method for detecting anomalous process relationships. A classification model (e.g., Random Forest) can be trained to predict if a parent-child pair is malicious. By using features from the process event itself (names, command line entropy, user) and contextual information (e.g., recent network activity), the model can identify malicious combinations that evade simpler rule-based and statistical detections.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Process creation logs from critical service hosts such as Domain Controllers, Exchange servers, and vCenter servers.
  range: last 90 days
  queries:
  - machine_learning: EXTRACT features from process creation events (Parent Name, Child Name, Command Line Entropy, User Account) and related network activity. APPLY a pre-trained classification model to predict if the parent-child pair is malicious.
- question: Are critical services crashing or logging multiple errors immediately after a spike in inbound connection attempts?
  context: This question attempts to identify failed exploit attempts or exploits that cause service instability. A failed buffer overflow, for example, will often crash the target service. By creating a rule that correlates a cluster of service error events (e.g., Event IDs 7031, 7034, 1000) with a recent, targeted increase in network connections to that service's port, analysts can detect likely exploit attempts.
  answer_sources:
  - Windows Event ID 7031
  - Windows Event ID 7034
  - Windows Event ID 1000
  - Zeek conn.log
  - Windows Event Logs from externally-facing application servers and internal servers running potentially vulnerable remote services.
  range: last 90 days
  queries:
  - symbolic: ALERT if a critical service error (Event ID 7031, 7034, 1000) is logged, and the host received a connection to the service port from an internal source within the previous 5 minutes.
- question: Is there a statistical correlation between a spike in service error rates and a spike in inbound connection attempts on a host?
  context: This question uses statistical methods to link suspicious network activity to host-based instability. By monitoring the rate of service errors on a host against a moving average, we can detect anomalous spikes. If an error spike is preceded by or coincident with a spike in connection attempts from a single source (also measured against a baseline), it strongly suggests the connections are the cause of the instability, possibly due to a brute-force or exploit attempt.
  answer_sources:
  - Windows Event ID 7031
  - Windows Event ID 7034
  - Windows Event ID 1000
  - Zeek conn.log
  - Windows Event Logs from externally-facing application servers and internal servers running potentially vulnerable remote services.
  range: last 90 days
  queries:
  - statistical: MONITOR the rate of service error events per hour. ALERT if the rate exceeds 3 standard deviations above its 24-hour moving average. CORRELATE this alert with a corresponding spike in connection attempts from a single source IP.
- question: Can time-series analysis reveal a cause-and-effect relationship between inbound network connections and subsequent service errors?
  context: This question applies advanced time-series analysis to detect subtle exploit attempts. An anomaly detection model (e.g., SARIMA) can be used on two parallel data streams for a host: connection counts to a port and service error counts. An anomaly detected across both series in close succession provides strong, algorithmically-derived evidence of a cause-and-effect relationship, indicating that the network traffic is likely causing service errors.
  answer_sources:
  - Windows Event ID 7031
  - Windows Event ID 7034
  - Windows Event ID 1000
  - Zeek conn.log
  - Windows Event Logs from externally-facing application servers and internal servers running potentially vulnerable remote services.
  range: last 90 days
  queries:
  - machine_learning: USE a time-series anomaly detection model on two data streams for a host: 1) inbound connection counts per minute to a service port, and 2) service error event counts per minute. ALERT if anomalies are detected in both series in close succession.
- question: Has a host that recently received an inbound remote service connection started scanning the internal network?
  context: This question looks for a common post-compromise behavior: internal reconnaissance. After an adversary gains a foothold on a machine via a remote service, they often immediately begin scanning the local network to find their next target. This rule explicitly looks for this two-stage behavior by first identifying hosts that received a connection and then checking if they subsequently initiated a large number of connections to other internal hosts.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Core network switches and traffic sensors monitoring East-West traffic.
  range: last 90 days
  queries:
  - symbolic: IDENTIFY hosts that received an inbound remote service connection in the last hour. ALERT if one of those hosts then initiates connections to >20 unique internal IPs within a 1-minute window or generates a Zeek 'Scan::Address_Scan' notice.
- question: Is any host exhibiting a sudden, statistically significant increase in the diversity of internal IPs it is contacting?
  context: This question aims to detect network scanning behavior by analyzing the randomness of destination IPs. Normal host traffic is often targeted and repetitive. A compromised host starting to scan will contact many different, unrelated IPs. Calculating the Shannon entropy of destination IPs over a sliding window can quantify this behavior. A sudden spike in entropy compared to the host's own baseline is a strong indicator of scanning.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Core network switches and traffic sensors monitoring East-West traffic.
  range: last 90 days
  queries:
  - statistical: FOR each source IP, calculate the Shannon entropy of its destination IPs over a 5-minute sliding window. ALERT if a host's entropy value increases by more than 2 standard deviations from its 24-hour baseline.
- question: Can we identify hosts acting as network scanners by finding traffic patterns that deviate from normal communication clusters?
  context: This question uses clustering algorithms to find scanners by identifying them as outliers. Normal network traffic (e.g., a server communicating with its clients) forms dense clusters of connections. A compromised host scanning the network will generate traffic from one source to many disparate destinations, which will not fit into any existing cluster. A density-based algorithm like DBSCAN will label these connections as 'noise' or a sparse cluster, effectively flagging the scanning host.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Core network switches and traffic sensors monitoring East-West traffic.
  range: last 90 days
  queries:
  - machine_learning: APPLY a density-based clustering algorithm (e.g., DBSCAN) to network connection logs. IDENTIFY source IPs that are classified as noise points or belong to sparse, non-typical clusters as potential scanners.