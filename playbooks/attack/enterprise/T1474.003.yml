name: T1474.003: Compromise Software Supply Chain
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps determine if an adversary has compromised the mobile software supply chain to gain initial access. It focuses on detecting anomalies in mobile application updates, such as mismatched digital signatures or the addition of high-risk permissions. It also looks for subsequent suspicious network activity from the device, including connections to known malicious infrastructure, domain generation algorithm (DGA) patterns, anomalous data exfiltration volumes, or communication over non-standard ports, which may indicate a compromised application is active.
type: technique
related:
  - TA0027: Initial Access
contributors:
  - Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Following a mobile application update, is the new package's signature hash found on a deny-list of known-malicious hashes or is it unverified against the vendor's official allow-list?
    context: This question aims to identify if a mobile application update is illegitimate by verifying its digital signature. A mismatch against the vendor's official hash or a match against a known-malicious hash is a strong indicator that the application package has been tampered with or replaced, a key sign of a supply chain compromise.
    answer_sources:
      - Mobile Device Management (MDM) Application Inventory Logs
      - Mobile Threat Defense (MTD) Signature Analysis Reports
      - Vendor-Published Application Hashes
      - Internal Application Hash Baseline
      - Application Manifest Files (from MDM/MTD)
      - MDM/UEM servers, corporate-owned mobile endpoints, and internal/external application repositories used by the organization.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For each app update event, GET new_package_hash. IF new_package_hash IN malicious_hash_list OR new_package_hash NOT IN vendor_hash_list, THEN ALERT.
  - question: Does a mobile application update introduce a significant change in requested permissions or a disproportionate increase in high-risk permissions?
    context: This question assesses the risk of an application update by analyzing changes in its permissions manifest. A sudden, drastic change in permissions (low Jaccard similarity) or the addition of multiple high-risk permissions can indicate that the application's functionality has been maliciously altered to include capabilities like spying or data theft, even if the signature appears valid.
    answer_sources:
      - Mobile Device Management (MDM) Application Inventory Logs
      - Mobile Threat Defense (MTD) Signature Analysis Reports
      - Vendor-Published Application Hashes
      - Internal Application Hash Baseline
      - Application Manifest Files (from MDM/MTD)
      - MDM/UEM servers, corporate-owned mobile endpoints, and internal/external application repositories used by the organization.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For each app update, CALCULATE Jaccard similarity of old vs. new permissions. CALCULATE risk score increase for new permissions. IF Jaccard_similarity < threshold OR risk_score_increase > historical_99th_percentile, THEN ALERT.
  - question: Based on a machine learning model, does the combination of signature status, permission changes, and risk scores indicate a high probability of a supply chain compromise in a mobile app update?
    context: This question uses a machine learning model to provide a holistic assessment of an application update. By combining multiple weak signals (signature status, permission changes) into a single probabilistic score, it can detect complex or subtle compromise patterns that might be missed by individual checks, increasing the accuracy of detection.
    answer_sources:
      - Mobile Device Management (MDM) Application Inventory Logs
      - Mobile Threat Defense (MTD) Signature Analysis Reports
      - Vendor-Published Application Hashes
      - Internal Application Hash Baseline
      - Application Manifest Files (from MDM/MTD)
      - MDM/UEM servers, corporate-owned mobile endpoints, and internal/external application repositories used by the organization.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For each app update, GATHER features (signature_status, jaccard_score, risk_delta). INPUT features into classification_model. IF model_probability > 0.85, THEN ALERT.
  - question: Following a mobile app update, is the device communicating with known malicious infrastructure or using non-standard ports for common protocols?
    context: This question seeks to identify post-compromise network activity. A compromised application will often 'call home' to an adversary's command and control (C2) server. Detecting connections to IPs or domains on threat intelligence lists, or communication on unusual ports, can be a direct indicator that the updated application is malicious.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Mobile Device Management (MDM) Application Update Logs
      - Threat Intelligence Feeds
      - Network egress points (firewalls, proxies), corporate DNS resolvers, VPN concentrators, and WiFi access points servicing managed mobile devices.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE app update events with device network logs. FOR each connection, CHECK destination_ip, destination_domain, tls_ja3 against threat_intel_feeds. CHECK for service on non-standard port. IF match, THEN ALERT.
  - question: After a mobile app update, does the device exhibit anomalous data exfiltration volume, use of algorithmically generated domains (DGA), or communication on new, low-prevalence ports?
    context: This question looks for statistical anomalies in network behavior that suggest a compromise. A sudden spike in data egress can signify data theft. High-entropy domains suggest the use of Domain Generation Algorithms (DGA) to evade blocklists. Communication on new, uncommon ports can indicate covert C2 channels. These statistical deviations from a device's normal baseline are strong indicators of malicious activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Mobile Device Management (MDM) Application Update Logs
      - Threat Intelligence Feeds
      - Network egress points (firewalls, proxies), corporate DNS resolvers, VPN concentrators, and WiFi access points servicing managed mobile devices.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AFTER app update, MONITOR device data egress. IF egress > 99th_percentile_baseline, THEN ALERT. CALCULATE Shannon entropy for new domains. IF entropy > 3.5, THEN ALERT. CHECK for new, low-prevalence ports. IF found, THEN ALERT.
  - question: Does a time-series anomaly detection model identify significant deviations from the device's forecasted network traffic patterns following a mobile application update?
    context: This question applies advanced time-series analysis to detect subtle, patterned network behavior indicative of compromise, such as periodic C2 beaconing. By comparing actual traffic volume and patterns against a model's forecast of normal behavior, it can identify anomalies that might not trigger simple threshold-based alerts, providing a more sophisticated layer of detection.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Mobile Device Management (MDM) Application Update Logs
      - Threat Intelligence Feeds
      - Network egress points (firewalls, proxies), corporate DNS resolvers, VPN concentrators, and WiFi access points servicing managed mobile devices.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AFTER app update, FEED device traffic data (bytes/hr, unique_ips/hr, egress/ingress_ratio) into time-series_model. IF actual_traffic deviates from forecast_confidence_interval, THEN flag as anomaly. AGGREGATE with other alerts for final risk score.