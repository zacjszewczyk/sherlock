name: T1027.006: HTML Smuggling
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: Investigates whether an adversary is using HTML Smuggling to deliver malicious payloads and evade network defenses. This involves checking for HTML file downloads from known malicious sources, analyzing file content for keywords related to blob creation and download initiation, identifying statistically anomalous HTML file characteristics (like large size or high script content), and detecting suspicious post-download process activity, such as a browser spawning a script interpreter.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
investigative_questions:
- question: Has an HTML file been downloaded from a known malicious IP/domain or does its hash match a known malicious file?
  context: This question aims to identify the most straightforward indicators of compromise related to HTML smuggling. By correlating network connection data and file metadata with threat intelligence feeds, we can quickly detect downloads of malicious HTML payloads from known adversary infrastructure or files that have been previously identified as malicious. A match provides a high-confidence signal that an attack is in progress.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Zeek http.log
  - Zeek dns.log
  - Network egress points, including firewalls and web proxies, and DNS resolvers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH Zeek logs (conn, http, files) FOR downloads with MIME type 'text/html'. EXTRACT source IP, requested host, and file hash. COMPARE source IP, host, and hash against threat intelligence lists. ALERT on match.
- question: Did an HTML file download originate from a rare or newly seen IP address with other risky characteristics?
  context: Adversaries often use new or temporary infrastructure for attacks to evade reputation-based blocking. This question focuses on identifying such infrastructure by flagging source IPs that have rarely or never been seen in the environment. By combining this rarity score with other risk factors like a recently registered domain or a poor ASN reputation, we can build a composite risk score to uncover suspicious HTML downloads that don't match known bad indicators.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Zeek http.log
  - Zeek dns.log
  - Network egress points, including firewalls and web proxies, and DNS resolvers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR each HTML download, GET source IP. CALCULATE historical connection frequency for source IP over 90 days. IF frequency is in 99.5th percentile of rarity, GET domain age and ASN reputation. CALCULATE composite risk score. ALERT if score exceeds threshold.
- question: Does a network connection associated with an HTML download have a high predicted probability of being malicious based on a machine learning model?
  context: This question leverages machine learning to detect complex malicious patterns that are difficult to define with simple rules. By training a model on various network features (IP reputation, TLS fingerprints, URI structure, etc.), we can score incoming connections for their likelihood of being malicious. This approach can identify novel threats and sophisticated adversaries by recognizing subtle combinations of suspicious characteristics associated with HTML smuggling.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Zeek http.log
  - Zeek dns.log
  - Network egress points, including firewalls and web proxies, and DNS resolvers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR each network connection resulting in an HTML download, EXTRACT features (IP/ASN reputation, JA3/JA3S, URI, etc.). APPLY pre-trained classification model. IF predicted probability of malice > 0.9, ALERT.
- question: Does a downloaded HTML or JavaScript file contain keywords associated with both blob creation and file download initiation?
  context: HTML smuggling works by using JavaScript to construct a malicious file locally within the browser and then triggering a download. This question searches for the fundamental building blocks of this technique by looking for the co-occurrence of JavaScript functions used to create file-like objects (e.g., 'Blob', 'atob') and functions used to initiate a download (e.g., 'msSaveOrOpenBlob', '.click()'). A match is a strong indicator of smuggling activity.
  answer_sources:
  - Zeek files.log
  - Network Security Monitoring (NSM) sensors with file extraction capabilities, Web Content Filters.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH extracted file content (HTML, JS) using YARA/regex. TRIGGER on co-occurrence of ('Blob', 'atob', 'DataURL') AND ('msSaveOrOpenBlob', 'download=', '.click()') in the same file/script block. ALERT on match.
- question: Is the JavaScript block containing smuggling-related keywords highly obfuscated or packed?
  context: To evade simple keyword detection, adversaries often obfuscate or pack the JavaScript code that performs the HTML smuggling. This question checks for such evasion by measuring the randomness (Shannon entropy) of the script block where potential smuggling keywords were found. A high entropy score, when compared to a baseline of normal scripts, suggests the code is packed or encrypted to hide its true purpose.
  answer_sources:
  - Zeek files.log
  - Network Security Monitoring (NSM) sensors with file extraction capabilities, Web Content Filters.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR files matching symbolic rule, CALCULATE Shannon entropy of the specific JavaScript block. COMPARE to baseline entropy of benign scripts. ALERT if entropy exceeds 98th percentile of baseline.
- question: Does the content of a downloaded script classify as malicious based on a text classification model?
  context: Sophisticated adversaries may use novel smuggling techniques that evade both keyword and entropy detection. This question employs an advanced text classification model (e.g., a CNN) trained specifically to recognize the code structure and patterns of malicious smuggling scripts. This allows for the detection of complex variations of the technique that may not be obvious to other methods.
  answer_sources:
  - Zeek files.log
  - Network Security Monitoring (NSM) sensors with file extraction capabilities, Web Content Filters.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR all downloaded JS/embedded scripts, APPLY pre-trained text classification model. IF script is classified as 'malicious-smuggling' with confidence > 0.85, ALERT.
- question: Has an unusually large HTML file been downloaded?
  context: HTML smuggling often involves embedding a payload (like a ZIP or ISO file) as a base64-encoded string within the HTML document itself. This can dramatically increase the size of the HTML file, far beyond that of a typical webpage. This question acts as a simple but effective tripwire to flag abnormally large HTML files for further inspection.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network Security Monitoring sensor data lake, Web Proxy logs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FILTER all downloaded files with MIME type 'text/html'. IF file size > 2MB, FLAG for investigation.
- question: Does a downloaded HTML file have a statistically anomalous combination of size, script ratio, and encoded data?
  context: Rather than relying on a single attribute, this question identifies smuggling by looking for a combination of suspicious characteristics. Legitimate complex web pages might be large or script-heavy, but a file that is large, has a high ratio of script to HTML, and contains large encoded strings is highly anomalous. Using a statistical measure like Mahalanobis distance can detect these multi-faceted outliers that might evade single-threshold checks.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network Security Monitoring sensor data lake, Web Proxy logs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR all 'text/html' downloads, CALCULATE file size, script-to-HTML ratio, and size of base64 strings. CALCULATE Mahalanobis distance from a 30-day moving average baseline of these features. ALERT if distance > 3 standard deviations.
- question: Does an HTML file belong to a cluster of other outlier files based on its structural characteristics?
  context: This question uses unsupervised machine learning to find "unknown unknowns." By clustering HTML files based on features like size, entropy, and script content, we can automatically group them into 'normal' and 'abnormal' populations. Any file that falls into a small, isolated cluster, or a newly formed one, represents a deviation from the norm and is a strong candidate for a malicious smuggled file, even if it doesn't match a predefined signature.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network Security Monitoring sensor data lake, Web Proxy logs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: APPLY clustering algorithm (e.g., DBSCAN) on features (size, script ratio, entropy) of recent HTML files. IDENTIFY normal vs. outlier clusters. INVESTIGATE files assigned to outlier clusters.
- question: Did a web browser spawn a script interpreter or an executable from a download directory shortly after a user downloaded a suspicious file type?
  context: The ultimate goal of HTML smuggling is to get the user to open the downloaded file, which then executes a payload. This question detects that post-download execution. It correlates a network event (download of a .html, .zip, .iso) with a subsequent endpoint event (a browser process spawning a shell or script interpreter) within a very short time window, which is a classic sign of a user being tricked into running a malicious payload.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Windows Event ID 4663
  - User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Terminal Servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: CORRELATE network and endpoint logs. TRIGGER if (1) Zeek logs download of .html/.iso/.zip/.js to host AND (2) within 90 seconds, on same host, browser process spawns powershell.exe, wscript.exe, etc., or any .exe from Downloads/Temp. ALERT on trigger.
- question: Has a web browser initiated a rare or never-before-seen parent-child process relationship?
  context: Most user browsing activity results in a predictable set of child processes spawned by the browser (e.g., helper processes, GPU renderers). An adversary leveraging HTML smuggling will cause the browser to spawn an unusual process, like a script interpreter or a command shell. This question establishes a baseline of normal browser-spawned processes and alerts when a low-frequency or new relationship occurs, indicating a potentially malicious execution chain.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Windows Event ID 4663
  - User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Terminal Servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR each host, BUILD frequency table of all parent-child process relationships where parent is a browser. CALCULATE probability of each relationship. ALERT when a browser spawns a process that falls in the bottom 1st percentile of observed relationships.
- question: Did a sequence of endpoint events following a file download deviate from normal learned behavior?
  context: This question uses a sophisticated anomaly detection model to understand the normal "rhythm" of user activity on an endpoint. The model learns typical sequences of events (e.g., file download -> open document -> network connection to corporate server). An HTML smuggling attack creates an anomalous sequence (e.g., file download -> browser spawns PowerShell -> network connection to unknown IP). The model flags this abnormal sequence based on its high reconstruction error, indicating a deviation from established patterns.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Windows Event ID 4663
  - User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Terminal Servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: TRAIN a sequence-based model (e.g., LSTM autoencoder) on streams of endpoint events. FOR new event sequences, if reconstruction error is high, ALERT as anomalous behavior.