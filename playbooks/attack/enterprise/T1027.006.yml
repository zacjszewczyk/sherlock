name: "T1027.006: HTML Smuggling"
id: 3a4f5b6c-7d8e-4f1a-2b3c-4d5e6f7a8b9c
description: |
  This playbook helps investigators determine if an adversary is using HTML Smuggling to deliver malicious payloads and evade network defenses. It focuses on identifying smuggled content by analyzing several key areas: 1) Checking network traffic for downloads from known malicious sources or involving known malicious files. 2) Inspecting the content of HTML and JavaScript files for co-occurrences of keywords related to blob creation and file download initiation. 3) Detecting statistically anomalous file characteristics such as excessive size or a high ratio of script to markup. 4) Correlating network download events with subsequent suspicious endpoint process activity, such as a browser spawning a script interpreter from a temporary directory.
type: technique
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: "Are network connections resulting in HTML file downloads originating from or associated with known malicious IPs, domains, or file hashes?"
    context: |
      This question aims to identify low-hanging fruit by checking if the source of an HTML download or the file itself is already known to be malicious. Correlating network connection logs and file analysis logs against threat intelligence feeds provides a quick and effective way to detect threats that have been previously identified by the security community.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Network egress points, including firewalls and web proxies, and DNS resolvers."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each HTML file download, GET source IP, requested domain, and file hash.
          CHECK IF IP, domain, or hash EXISTS in threat intelligence database.
          IF match found, ALERT.
  - question: "Are HTML files being downloaded from newly seen, rare, or low-reputation sources?"
    context: |
      Adversaries often use new or temporary infrastructure for their campaigns. This question helps uncover such activity by focusing on the rarity and reputation of the source IP. By calculating the historical frequency of connections and combining it with domain age and ASN reputation, we can build a risk score to flag suspicious sources that might not be on a threat intelligence list yet.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Network egress points, including firewalls and web proxies, and DNS resolvers."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each source IP of an HTML download, CALCULATE connection frequency over 90 days.
          IF frequency is in top 99.5th percentile of rarity, GET domain age and ASN reputation.
          CALCULATE composite risk score.
          IF score > threshold, ALERT.
  - question: "Can a machine learning model identify network connections associated with HTML smuggling as malicious based on their characteristics?"
    context: |
      This question leverages machine learning to detect complex malicious patterns that symbolic rules might miss. By training a model on various features like IP reputation, TLS fingerprint (JA3/JA3S), and connection history, it can predict the likelihood of a connection being part of an HTML smuggling attack, allowing for the detection of novel or evolving threats.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Network egress points, including firewalls and web proxies, and DNS resolvers."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each HTML download connection, EXTRACT features (IP reputation, JA3/S, URI, MIME type, etc.).
          INPUT features into pre-trained classification model.
          IF predicted malice probability > 0.9, ALERT.
  - question: "Do downloaded HTML or JavaScript files contain suspicious keyword combinations indicative of HTML smuggling techniques?"
    context: |
      HTML smuggling works by using JavaScript to construct a malicious file locally within the browser and then triggering a download. This question focuses on detecting this behavior by searching for the co-occurrence of keywords used for creating file blobs (e.g., 'Blob', 'atob') and keywords used to initiate a file download programmatically (e.g., 'download=', 'a.click()'). A match is a strong indicator of smuggling.
    answer_sources:
      - "Zeek files.log"
      - "Network Security Monitoring (NSM) sensors with file extraction capabilities, Web Content Filters."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each extracted HTML/JS file, SEARCH content for keywords from [Blob, atob, DataURL] AND keywords from [msSaveOrOpenBlob, download=, .click()].
          IF both sets of keywords are found, ALERT.
  - question: "Does the JavaScript code suspected of smuggling exhibit high entropy, suggesting obfuscation or embedded data?"
    context: |
      Adversaries often obfuscate their malicious scripts or embed encoded payloads to evade signature-based detection. High entropy (a measure of randomness) can be an indicator of this. This question aims to measure the entropy of JavaScript blocks identified by keyword matching and compare it against a baseline of normal network activity. A significantly higher entropy value points to likely malicious activity.
    answer_sources:
      - "Zeek files.log"
      - "Network Security Monitoring (NSM) sensors with file extraction capabilities, Web Content Filters."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each file matching keyword rule, CALCULATE Shannon entropy of the suspicious script block.
          COMPARE entropy to established baseline of benign scripts.
          IF entropy > 98th percentile of baseline, ALERT.
  - question: "Can a machine learning model classify the content of downloaded scripts as malicious based on patterns associated with HTML smuggling?"
    context: |
      This question uses advanced machine learning, like a CNN-based text classifier, to analyze the content of scripts directly. Unlike simple keyword searches, this model can learn the complex structural and syntactic patterns of malicious JavaScript used in smuggling, allowing it to detect sophisticated or heavily obfuscated attacks with higher accuracy.
    answer_sources:
      - "Zeek files.log"
      - "Network Security Monitoring (NSM) sensors with file extraction capabilities, Web Content Filters."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each downloaded JS/embedded script, INPUT content into pre-trained text classification model.
          IF classification is 'malicious-smuggling' with confidence > 0.85, ALERT.
  - question: "Are there any downloaded HTML files with an unusually large file size?"
    context: |
      HTML smuggling often involves embedding a large, encoded payload (like an ISO or ZIP file) within the HTML document itself, causing its size to be much larger than a typical webpage. This question sets a simple, static threshold (e.g., 2MB) as a 'tripwire' to quickly identify and flag these potential smuggling attempts for further investigation.
    answer_sources:
      - "Zeek http.log"
      - "Zeek files.log"
      - "Network Security Monitoring sensor data lake, Web Proxy logs."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          FOR each downloaded file with 'text/html' MIME type, CHECK if file size > 2MB.
          IF true, ALERT.
  - question: "Do downloaded HTML files show a combination of anomalous characteristics compared to a statistical baseline?"
    context: |
      This question moves beyond a single indicator like file size and looks for a combination of suspicious traits. By creating a statistical baseline of normal HTML files (based on size, script-to-markup ratio, and amount of encoded data), we can use a metric like Mahalanobis distance to spot files that are outliers in multiple dimensions simultaneously. This provides a more robust method for detecting anomalies that might not be extreme in any single measure but are collectively suspicious.
    answer_sources:
      - "Zeek http.log"
      - "Zeek files.log"
      - "Network Security Monitoring sensor data lake, Web Proxy logs."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          CALCULATE 30-day baseline for HTML files (size, script ratio, encoded string size).
          FOR each new HTML file, CALCULATE Mahalanobis distance from baseline.
          IF distance > 3 standard deviations, ALERT.
  - question: "Can unsupervised machine learning group downloaded HTML files to identify anomalous outliers indicative of smuggling?"
    context: |
      This question uses unsupervised learning (like DBSCAN clustering) to automatically group similar HTML files together based on their features (size, entropy, script ratio, etc.) without prior labeling. The assumption is that most files will form a large 'normal' cluster. Files that don't fit into this cluster (i.e., outliers) are highly suspicious and warrant investigation as potential smuggling attempts.
    answer_sources:
      - "Zeek http.log"
      - "Zeek files.log"
      - "Network Security Monitoring sensor data lake, Web Proxy logs."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          EXTRACT features (size, script ratio, entropy, etc.) for all recent HTML downloads.
          RUN DBSCAN clustering algorithm on feature set.
          INVESTIGATE files identified as noise/outliers or belonging to small, distant clusters.
  - question: "Is a web browser spawning a script interpreter or an executable from a download/temp directory shortly after a user downloads a file commonly used for smuggling?"
    context: |
      This is a critical post-exploitation detection. After the smuggled payload is assembled and downloaded, the user must open it, which often leads to a browser process spawning a script interpreter (like PowerShell) or another executable. This question correlates network download events with endpoint process creation events within a short time window to detect this highly suspicious sequence of actions.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Windows Event ID 4663"
      - "User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Terminal Servers."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          WHEN a download of .html, .iso, .zip, .js is logged, START 90s timer for that host.
          IF within 90s, a browser on that host spawns a script interpreter OR an executable from a temp/download path, ALERT.
  - question: "Is a web browser initiating a rare or never-before-seen parent-child process relationship?"
    context: |
      Normal browser activity involves a predictable set of child processes. Adversarial activity, such as a browser spawning PowerShell, is often anomalous. This question establishes a baseline of normal parent-child process relationships originating from browsers across the enterprise and alerts on any new or statistically rare relationships, which are strong indicators of compromise.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Windows Event ID 4663"
      - "User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Terminal Servers."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          MAINTAIN a frequency table of all browser parent-child process relationships.
          FOR each new relationship, CALCULATE its frequency percentile.
          IF percentile is < 1%, ALERT.
  - question: "Does the sequence of user and system events following a file download deviate from normal, learned behavior patterns?"
    context: |
      This question uses a sophisticated sequence-based ML model (like an LSTM autoencoder) to learn the 'normal rhythm' of activity on an endpoint. The model analyzes sequences of events (file downloads, process creations, network connections, etc.). When a sequence occurs that doesn't match learned patterns—such as a file download followed by unusual process execution—the model flags it as an anomaly with a high reconstruction error, indicating a potential compromise.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Windows Event ID 4663"
      - "User Workstations, Virtual Desktop Infrastructure (VDI) fleet, Terminal Servers."
    range: "last 90 days"
    queries:
      - technology: Pseudocode
        query: |
          INPUT sequences of endpoint events into a trained LSTM autoencoder model.
          IF the model's reconstruction error for a sequence is high, ALERT on the anomalous sequence.