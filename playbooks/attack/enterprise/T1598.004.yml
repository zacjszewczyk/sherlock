name: T1598.004: Spearphishing Voice
id: f9a1b5c1-7e8d-4f6a-9b3c-0d2e4f8a7b6d
description: This playbook helps investigate whether an adversary is conducting reconnaissance using spearphishing via voice (vishing). It provides steps to detect related activities such as connections to known malicious infrastructure, installation of unauthorized remote administration tools, execution from downloaded disk images, anomalous remote authentications following potential credential compromise, and suspicious child process spawning from common applications like browsers or Office products.
type: technique
related: TA0043: Reconnaissance
contributors: Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Are any internal hosts connecting to or resolving domains/IPs known to be associated with vishing campaigns?
  context: This question aims to identify direct connections to malicious infrastructure. Matching network logs against a high-fidelity threat intelligence feed is a primary method for detecting known vishing or callback phishing activity. A match is a high-confidence indicator of compromise that requires immediate investigation.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Zeek http.log
  - Network egress points
  - DNS resolvers
  - Web proxies
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each log in (dns.log, conn.log, http.log)
      JOIN log.destination_ip_or_domain WITH threat_intel.indicator
      IF match found
        ALERT (severity: high, reason: "Connection to known vishing infrastructure")
- question: Are hosts connecting to newly registered domains that have low prevalence in the environment and suspicious characteristics?
  context: Adversaries often use newly registered domains (NRDs) for their campaigns. This question helps uncover suspicious domains that aren't yet on threat lists by combining multiple weak signals: domain age, internal prevalence, and subdomain randomness (entropy). A domain that is very new, rarely visited by anyone else in the organization, and has a computer-generated-looking subdomain is highly suspicious.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Zeek http.log
  - WHOIS data
  - Network egress points
  - DNS resolvers
  - Web proxies
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each unique domain in network logs
      IF domain NOT IN threat_intel_list
        domain_age = GET_WHOIS_REGISTRATION_AGE(domain)
        prevalence = CALCULATE_INTERNAL_PREVALENCE(domain, last_90_days)
        subdomain_entropy = CALCULATE_SHANNON_ENTROPY(domain.subdomain)
        IF domain_age < 30 days AND prevalence < 0.1%
          ALERT (severity: medium, reason: "Connection to NRD with low prevalence")
          IF subdomain_entropy > 3.5
            INCREASE_ALERT_PRIORITY
- question: Can a machine learning model identify DNS and HTTP requests that are likely malicious based on their features?
  context: This question moves beyond simple rules to a more sophisticated, model-based detection. By training a classification model on various features of a web request (like domain age, entropy, and keywords), it's possible to score requests for their likelihood of being malicious. This can help detect novel threats that don't match known patterns or heuristics.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Zeek http.log
  - Network egress points
  - DNS resolvers
  - Web proxies
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each DNS/HTTP request
        EXTRACT features (domain_age, TLD, subdomain_entropy, etc.)
        malicious_score = ML_MODEL.predict(features)
        IF malicious_score > 0.90
          ALERT (severity: medium, reason: "ML model detected potentially malicious request")
- question: Has an unapproved remote administration tool been installed or executed on an endpoint?
  context: Vishing operators often trick victims into installing legitimate remote administration tools to gain access. This question focuses on identifying the use of any such tool that is not explicitly sanctioned by the organization. By maintaining a strict allow-list, any deviation can be immediately flagged as a potential security incident.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11707
  - Windows Event ID 4697
  - Windows Event ID 7045
  - All user workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - servers not designated for IT administration.
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      DEFINE allow_list = [approved_tool_hashes, approved_tool_names]
      SEARCH process_creation OR software_install OR service_install logs
      WHERE (tool_name OR tool_hash) IS a remote_admin_tool
      AND (tool_name OR tool_hash) NOT IN allow_list
      ALERT (severity: high, reason: "Unauthorized remote admin tool detected")
- question: Is an approved remote administration tool being used by an unauthorized user or in an anomalous way?
  context: Even approved tools can be misused. This question helps detect abuse by flagging when a tool is used by someone outside of their normal job function (e.g., a marketing employee using a sysadmin tool) or when a tool is used for the first time on a specific host or by a user. This provides context-aware anomaly detection.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11707
  - Windows Event ID 4697
  - Windows Event ID 7045
  - All user workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - servers not designated for IT administration.
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      DEFINE authorized_users = {tool_A: [group_X], tool_B: [group_Y]}
      SEARCH remote_admin_tool_execution logs
      IF executing_user.group NOT IN authorized_users[tool_name]
        ALERT (severity: medium, reason: "Tool used by unauthorized user role")
      IF IS_FIRST_TIME(user, tool) OR IS_FIRST_TIME(host, tool)
        ALERT (severity: low, reason: "First-time usage of remote admin tool")
- question: Does the usage pattern of a remote administration tool deviate significantly from its established normal behavior for that user or group?
  context: This question applies machine learning to model the 'rhythm' of legitimate remote administration tool usage. A time-series model can learn the normal times of day, session durations, and network patterns associated with an IT admin's work. An execution that falls far outside this learned behavior (e.g., a login at 3 AM from a strange IP) would be flagged as a high-risk anomaly, suggesting a compromised account or insider threat.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11707
  - Windows Event ID 4697
  - Windows Event ID 7045
  - All user workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - servers not designated for IT administration.
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each remote_admin_tool event
        EXTRACT features (user, time_of_day, source_ip, etc.)
        reconstruction_error = LSTM_AUTOENCODER_MODEL.evaluate(event_sequence)
        IF reconstruction_error > threshold
          ALERT (severity: high, reason: "Anomalous remote admin tool usage pattern detected")
- question: Has a user downloaded a disk image or archive and immediately executed a script or suspicious process from it?
  context: A common vishing tactic involves instructing the user to download an ISO or ZIP file, mount it, and run a script inside. This question looks for that specific, time-sensitive chain of events: a download of a container file followed within minutes by the execution of a script interpreter from a temporary or mounted path. This behavior is highly indicative of a malicious lure.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Network egress points
  - User workstations
  - Email gateway
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRIGGER on file_download WHERE mime_type IN (iso, zip)
      WITHIN 5 minutes on same host
        LOOK FOR process_creation WHERE (image_path CONTAINS temp_path OR mounted_drive)
        AND process_name IN (powershell.exe, wscript.exe, mshta.exe)
        IF found
          ALERT (severity: high, reason: "Execution from recently downloaded container file")
- question: Has a user downloaded a file type, such as a disk image, that is rare for them?
  context: This question focuses on user-specific behavioral anomalies. While a system administrator might download ISO files regularly, it would be highly unusual for a user in the finance department to do so. By profiling each user's typical download habits, we can flag rare events for that specific user, which might indicate that they are being manipulated by an attacker.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Network egress points
  - User workstations
  - Email gateway
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each user
        BUILD profile of downloaded_mime_types_frequency
      ON new_download
        rarity = CALCULATE_RARITY(mime_type, user_profile)
        IF rarity < 5th_percentile
          ALERT (severity: low, reason: "User downloaded an unusually rare file type")
- question: Can a machine learning model detect the specific sequence of events corresponding to a malicious container file download and execution?
  context: This question leverages a sequence-aware ML model to formalize the detection logic. By training a model (like an HMM or RNN) on known good and bad sequences ([Download] -> [File Create] -> [Execute]), it can learn to identify the malicious pattern with greater accuracy and resilience to minor variations than a simple stateful rule.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Network egress points
  - User workstations
  - Email gateway
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      BUFFER event stream per host: [download, file_create, process_exec]
      FOR each sequence
        is_malicious = SEQUENCE_MODEL.predict(sequence)
        IF is_malicious
          ALERT (severity: high, reason: "ML model detected malicious download-to-execution sequence")
- question: Did a user successfully log in remotely shortly after visiting a known phishing domain?
  context: This is a classic and powerful correlation. A visit to a phishing site followed closely by a remote login for the same user strongly suggests their credentials were just phished and are now being used by the attacker. This question aims to find this direct link between credential theft and its immediate use.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Authentication Logs
  - Network egress points
  - VPN concentrators
  - Domain Controllers
  - Cloud IAM services
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRIGGER on web_visit WHERE domain IN phishing_feed
      WITHIN 15 minutes
        LOOK FOR successful_remote_login WHERE user = web_visit.user
        IF found
          ALERT (severity: critical, reason: "Remote login immediately after visit to phishing site")
- question: Has a user logged in remotely from a location or network that is anomalous for them?
  context: This question focuses on 'impossible travel' and other geographic/network anomalies. By baselining where and when a user normally logs in from, we can flag logins that deviate significantly (e.g., from a new country, a new internet service provider, or at an unusual time). A high deviation score indicates a high probability of account compromise.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Authentication Logs
  - Network egress points
  - VPN concentrators
  - Domain Controllers
  - Cloud IAM services
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each user
        BUILD baseline of login_attributes (country, ASN, time_of_day)
      ON new_remote_login
        risk_score = 0
        IF login.country IS NEW for user, risk_score += 3
        IF login.ASN IS NEW for user, risk_score += 2
        IF login.time IS ATYPICAL for user, risk_score += 1
        IF risk_score > threshold
          ALERT (severity: high, reason: "Anomalous remote login attributes")
- question: Is a user's remote login behavior significantly different from their own past behavior and that of their peers?
  context: This question enhances anomaly detection by adding a peer group comparison. A user's action might be anomalous for them individually, but normal for their team. A User and Entity Behavior Analytics (UEBA) system flags behavior that is strange for both the individual and their peer group, reducing false positives and identifying more subtle threats.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Authentication Logs
  - Network egress points
  - VPN concentrators
  - Domain Controllers
  - Cloud IAM services
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      INPUT user_login_event to UEBA_system
      deviation_score = UEBA_system.ANALYZE(event, user_history, peer_group_history)
      IF deviation_score > threshold
        ALERT (severity: medium, reason: "UEBA detected anomalous user login behavior")
- question: Has a browser or Office application spawned a script interpreter which then made an external network connection?
  context: This is a very common malware execution pattern. Legitimate user applications like Word or Chrome should not be launching PowerShell or WScript to connect to the internet. This question seeks to detect this suspicious parent-child process relationship, especially when it results in network activity, as it often indicates macro execution or browser exploit follow-on activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - User workstations
  - Terminal servers
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH for process_creation
      WHERE parent_process IN (browsers, office_apps)
      AND child_process IN (script_interpreters)
      ENRICH with network_connection logs for child_process.pid
      IF child_process made outbound connection
        ALERT (severity: high, reason: "Script interpreter spawned from browser/office made network connection")
- question: Are there any script executions with unusually long or complex (high entropy) command lines?
  context: Adversaries often encode or obfuscate their malicious scripts and pass them via the command line to avoid dropping files to disk. This results in command lines that are much longer and more random-looking than legitimate ones. This question aims to detect these fileless attacks by analyzing the statistical properties (length and entropy) of command-line arguments.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - User workstations
  - Terminal servers
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH for script_interpreter_process_creation with command_line_logging
      entropy = CALCULATE_SHANNON_ENTROPY(process.command_line)
      length = LENGTH(process.command_line)
      IF entropy > 4.5 OR length > 99th_percentile_of_lengths
        ALERT (severity: high, reason: "Suspicious command line (high entropy or length)")
- question: Can a machine learning model analyze the content of a script (from the command line) and determine if it is malicious?
  context: This question proposes an advanced detection method that goes beyond statistical properties to analyze the actual code structure of a script. By parsing the script into an Abstract Syntax Tree (AST) or tokenizing it, a model can learn the patterns of malicious code, even if it's heavily obfuscated. This allows for the detection of novel malicious scripts that might evade other methods.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - User workstations
  - Terminal servers
  range: Last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ON script_process_creation
        script_content = EXTRACT command_line_argument or script_block
        is_malicious = SCRIPT_CLASSIFICATION_MODEL.predict(script_content)
        IF is_malicious
          ALERT (severity: critical, reason: "ML model classified script content as malicious")