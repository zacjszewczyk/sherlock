name: T1569.002: Service Execution
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has executed code by manipulating Windows services. It focuses on detecting the installation of new services that match known malicious indicators, the use of command-line tools like sc.exe or PowerShell to create or modify services with payloads in non-standard locations, the rapid creation and deletion of services characteristic of tools like PsExec, services spawning anomalous child processes like command shells, and services configured to run from user-writable directories. The goal is to identify malicious execution masquerading as legitimate service activity on Windows endpoints and servers, particularly on high-value assets.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly installed service associated with known malicious indicators?
    context: This question aims to identify the most straightforward signs of compromise. Adversaries often reuse malware or tools. By comparing the name, file path, and hash of a new service's executable against threat intelligence feeds, analysts can quickly detect known threats. A match provides a high-confidence starting point for an incident response investigation.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - All Windows endpoints and servers, particularly Domain Controllers and high-value asset servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each event WHERE EventID is 7045 or 4697: EXTRACT ServiceName, ServiceFileName; CALCULATE SHA256(ServiceFileName); IF ServiceName, ServiceFileName, or SHA256 in ThreatIntelList THEN ALERT;
  - question: Does a new service name appear to be randomly generated?
    context: Adversaries may use randomly generated names for services to evade simple signature-based detections and blend in. High Shannon entropy in a service name is a strong indicator of randomness. This question helps detect such evasion techniques by statistically comparing the new service name's complexity against a baseline of normal, legitimate service names in the environment.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - All Windows endpoints and servers, particularly Domain Controllers and high-value asset servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new ServiceName from EventID 7045 or 4697: CALCULATE Entropy(ServiceName); IF Entropy > 98th_percentile(BaselineEntropy) THEN ALERT;
  - question: Does a new service installation exhibit characteristics of malicious behavior based on a machine learning model?
    context: This question moves beyond simple indicators to a more holistic, behavioral detection. A machine learning model can learn the complex patterns that differentiate malicious and benign service installations by considering multiple features at once (e.g., name entropy, path location, digital signature). This helps identify novel or sophisticated threats that might evade simpler rules.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - All Windows endpoints and servers, particularly Domain Controllers and high-value asset servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new Service from EventID 7045 or 4697: EXTRACT features (name_entropy, path_location, etc.); SCORE with ML_Model; IF score > 0.9 THEN ALERT;
  - question: Is an adversary using command-line tools to create or configure a service to run from an unusual location?
    context: Legitimate services are typically installed via trusted installers and reside in protected system directories. Adversaries often use built-in command-line tools like sc.exe or PowerShell to create or modify services to execute payloads from non-standard, user-writable, or remote locations. This question helps detect this common tradecraft by inspecting command-line arguments for suspicious paths or obfuscation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers, especially administrative jump boxes and management servers where such commands are more likely to be run.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH ProcessCreationEvents WHERE (ProcessName is 'sc.exe', 'powershell.exe', 'net.exe') AND (CommandLine contains 'create' or 'config' or 'New-Service') AND (BinaryPath points to non-standard dir OR command is obfuscated) THEN ALERT;
  - question: Is a service being configured to run from a statistically rare directory?
    context: While a path might not be on a blocklist, it can still be suspicious if it's an uncommon location for a service executable. This question uses frequency analysis to establish a baseline of normal service executable locations. By flagging services installed in directories that are statistical outliers, analysts can uncover adversaries attempting to hide payloads in obscure but technically valid locations.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers, especially administrative jump boxes and management servers where such commands are more likely to be run.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each service modification command: PARSE BinaryPath; GET ParentDirectory; IF Frequency(ParentDirectory) < 5th_percentile(AllServiceDirectories) THEN ALERT;
  - question: Do the command-line arguments used to manage a service fall outside the patterns of normal administrative activity?
    context: Benign administrative commands for service management tend to be consistent and repetitive, forming distinct clusters of activity. Malicious commands, however, may use unusual combinations of arguments, paths, or syntax, causing them to appear as outliers. This question applies unsupervised machine learning to identify and flag these anomalous command-line executions for further investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers, especially administrative jump boxes and management servers where such commands are more likely to be run.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: VECTORIZE service management commands; APPLY clustering algorithm (DBSCAN); FOR each command: IF labeled as outlier/noise THEN ALERT;
  - question: Has a service been created, started, and then quickly stopped or deleted on a host?
    context: This sequence of events is highly characteristic of lateral movement and remote execution tools like PsExec, which install a temporary service to run a command on a remote host and then clean it up. This question uses event correlation to detect this specific 'create-run-remove' pattern, which is a strong indicator of an adversary moving through the network.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 7036
      - Windows Event ID 4697
      - Centralized log aggregators (SIEM) capable of correlating events from all Windows hosts. All Windows servers, especially those within the same network segment, to detect lateral movement.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE events by Hostname and ServiceName; IF sequence [Create(7045/4697) -> Start(7036) -> Stop(7036)] occurs within 15 minutes THEN ALERT;
  - question: Is the lifespan of a newly created service statistically unusual compared to other services in the environment?
    context: Most legitimate services are designed to be long-running. Services that exist for only a very short time are anomalous. This question helps detect transient services used for 'one-shot' execution by calculating the service's lifespan (time from creation to stop/deletion) and flagging those that are statistical outliers, suggesting they were not intended for persistent operation.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 7036
      - Windows Event ID 4697
      - Centralized log aggregators (SIEM) capable of correlating events from all Windows hosts. All Windows servers, especially those within the same network segment, to detect lateral movement.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each service with create and stop events: CALCULATE Lifespan = StopTime - CreateTime; IF Lifespan < 1st_percentile(AllServiceLifespans) THEN ALERT;
  - question: Is there a sudden spike in the number of short-lived services being installed on a particular host?
    context: A single ephemeral service might be missed, but a burst of them on one host is a strong signal of automated lateral movement or payload deployment. This question uses time-series analysis to monitor the rate of short-lived service installations on each host. An anomalous spike detected by the model can indicate that a host is being targeted by or used as a launch point for widespread malicious activity.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 7036
      - Windows Event ID 4697
      - Centralized log aggregators (SIEM) capable of correlating events from all Windows hosts. All Windows servers, especially those within the same network segment, to detect lateral movement.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each host: CREATE time-series of ephemeral service count per hour; APPLY anomaly detection model (e.g., SARIMA); IF spike detected THEN ALERT;
  - question: Is a core Windows service process (services.exe, svchost.exe) spawning a suspicious child process like a command shell?
    context: Core service host processes like services.exe and svchost.exe have predictable behavior and should not typically spawn interactive shells (cmd.exe, powershell.exe) or reconnaissance tools (whoami.exe). Such an event is a strong indicator that a service has been compromised or hijacked. This question focuses on detecting these high-fidelity anomalous parent-child process relationships.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers. Analysis requires process lineage data, typically collected via EDR or enhanced logging (like Sysmon) and aggregated in a SIEM/data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH ProcessCreationEvents WHERE (ParentProcess is 'services.exe' or 'svchost.exe') AND (ChildProcess is in ['cmd.exe', 'powershell.exe', 'net.exe', ...]) THEN ALERT;
  - question: Has a service executable spawned a child process that is rare or has never been seen before in the environment?
    context: Beyond a static list of suspicious children, this question uses environmental baselining to detect anomalies. By learning the normal process relationships for every service on the network, it can flag any deviation. This allows for the detection of novel attacks where a compromised service is used to launch a tool that isn't on a predefined watchlist but is still abnormal for that specific service.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers. Analysis requires process lineage data, typically collected via EDR or enhanced logging (like Sysmon) and aggregated in a SIEM/data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new parent-child process pair where parent is a service: IF relationship is new OR frequency < 1% for that parent THEN ALERT;
  - question: Does a process creation event involving a service represent a statistically anomalous relationship in the overall process activity graph?
    context: This question applies advanced graph analytics to model the entirety of process activity. Instead of looking at parent-child pairs in isolation, it considers the broader context of process chains and relationships. A graph-based model can identify sophisticated attacks, such as a legitimate but rarely used service spawning another legitimate but out-of-context process, which might be missed by simpler rule-based or frequency analysis methods.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers. Analysis requires process lineage data, typically collected via EDR or enhanced logging (like Sysmon) and aggregated in a SIEM/data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL all process events as a graph; TRAIN anomaly detection model on graph; FOR each new process creation edge: IF model scores as anomalous THEN ALERT;
  - question: Is a new service configured to run from a known user-writable or non-standard system directory?
    context: This question targets a common persistence and defense evasion technique. Legitimate services should reside in protected system locations (e.g., System32). Adversaries place their executables in user-writable directories (e.g., C:\Users, C:\ProgramData) to ensure they can be placed or modified without elevated privileges. This rule explicitly checks for service binaries in these forbidden locations.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - All Windows Endpoints and Servers, particularly multi-user systems like Remote Desktop Session Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each event 7045 or 4697: PARSE ServiceFileName; IF path matches regex for ['C:\Users\', 'C:\ProgramData', ...] THEN ALERT;
  - question: Is a new service being installed in a directory that is statistically uncommon for hosting service executables?
    context: Similar to checking for rare command-line paths, this question applies frequency analysis to the installation locations of services themselves. It establishes a baseline of 'normal' directories where services run. A service installed in a statistically rare or never-before-seen directory is suspicious, even if that directory isn't on an explicit blocklist, and warrants investigation.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - All Windows Endpoints and Servers, particularly multi-user systems like Remote Desktop Session Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new service installation: GET ParentDirectory of executable; IF Frequency(ParentDirectory) < 5% of all service directories OR is new THEN ALERT;
  - question: Does a machine learning model classify a new service's installation path and properties as suspicious?
    context: This question uses a supervised machine learning model to make a more nuanced decision about whether a service installation is risky. By training a decision tree on features like path depth, keywords in the path, writability, and digital signature status, the model can learn to identify suspicious installations that might not trigger simpler, single-indicator rules, providing a more robust layer of detection.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - All Windows Endpoints and Servers, particularly multi-user systems like Remote Desktop Session Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new service installation: EXTRACT features (path depth, keywords, etc.); SCORE with decision tree model; IF classified as suspicious THEN ALERT;