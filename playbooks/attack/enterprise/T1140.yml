name: T1140: Deobfuscate-Decode Files or Information
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses the adversary technique of deobfuscating or decoding files or information to evade defenses. Adversaries often hide malicious code within scripts or files using encoding (like Base64) or obfuscation. This playbook provides investigative questions to detect this activity by identifying the use of known malicious deobfuscation tools, specific utilities like `certutil.exe` with decoding flags, PowerShell's `-EncodedCommand` or deobfuscation functions (`FromBase64String`, `IEX`), the reassembly of split files using `copy /b`, and suspicious process chains such as an Office application spawning a scripting engine. The goal is to uncover hidden malicious payloads and execution methods.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are processes being created from known malicious deobfuscation tools, or are script logs showing signs of known malware deobfuscation routines?
    context: This question focuses on a signature-based approach to find known malicious activity. It involves checking the file hashes of executed processes against a threat intelligence list of known malicious decoder tools. Concurrently, it involves scanning script logs, such as those from PowerShell, for unique strings (like function or variable names) that are characteristic of specific malware deobfuscation stubs.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 4104
      - Zeek files.log
      - Domain Controllers
      - Application Servers
      - User Workstations
      - Network Egress Points
      - DMZ Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events WHERE executable_hash in (malicious_hash_list) OR SEARCH script logs WHERE content contains (malicious_deobfuscation_strings)
  - question: Are there any PowerShell scripts exhibiting unusually high entropy, suggesting obfuscation or packing?
    context: This question uses a statistical method to find potentially malicious scripts, even if they are unknown. Shannon entropy measures the randomness or complexity of data. Obfuscated or encrypted code is typically much more random than plain text script. By establishing a baseline of normal entropy for scripts in your environment, you can flag new scripts with abnormally high entropy as suspicious and worthy of investigation.
    answer_sources:
      - Windows Event ID 4104
      - Domain Controllers
      - Application Servers
      - User Workstations
      - Network Egress Points
      - DMZ Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH PowerShell logs | CALCULATE entropy for each script_block | ALERT if entropy > baseline_99th_percentile
  - question: Can a machine learning model classify PowerShell script blocks as malicious based on features like length, character frequency, entropy, and specific keywords?
    context: This question proposes a more advanced, machine learning-based detection method. By training a classifier (like a Random Forest) on various features of a script, the model can learn the complex patterns that differentiate malicious scripts from benign ones. This goes beyond simple signatures or single statistical measures to provide a more robust and accurate classification of novel threats.
    answer_sources:
      - Windows Event ID 4104
      - Domain Controllers
      - Application Servers
      - User Workstations
      - Network Egress Points
      - DMZ Servers
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features (length, char_freq, entropy, keywords) from PowerShell logs | INPUT features into trained_ML_model | ALERT if classification is malicious
  - question: Is the certutil.exe utility being used with command-line arguments that indicate file decoding?
    context: '`certutil.exe` is a legitimate command-line program installed by default in Microsoft Windows. While it has many certificate-related functions, it can also be used to decode Base64-encoded files. Attackers abuse this functionality to reconstruct malicious payloads on a compromised system. This question aims to create a high-fidelity alert by looking for specific command-line flags (`-decode`, `-decodehex`, or `-urlcache -split -f`) that are strongly associated with this malicious use case.'
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Web Servers
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events WHERE process_name is 'certutil.exe' AND command_line contains ('-decode' OR '-decodehex' OR ('-urlcache' AND '-split' AND '-f'))
  - question: Is certutil.exe being used for decoding by an unusual parent process or user account?
    context: This question adds behavioral context to the detection of `certutil.exe` misuse. By first establishing a baseline of normal usage, you can then identify anomalous executions. An execution of `certutil.exe` with decoding flags is highly suspicious if it is spawned by a process that does not normally do so (e.g., `winword.exe`) or is run by a user who has never used the utility before. This helps distinguish legitimate administrative use from adversary activity.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations
      - Web Servers
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events for 'certutil.exe' with decoding flags | COMPARE parent_process and user against historical baseline | ALERT on rare or new parent/user
  - question: Is there an anomalous spike in the frequency of certutil.exe being used for decoding on any host or by any user?
    context: This question applies time-series analysis to detect abnormal volumes of activity. A sudden, sharp increase in `certutil.exe` decoding operations, especially one that deviates from a forecasted model and occurs at an unusual time (e.g., overnight), can be an indicator of an automated attack or widespread compromise across multiple systems.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations
      - Web Servers
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - pseudocode: AGGREGATE hourly count of 'certutil.exe' decoding events per host/user | APPLY time-series model (e.g., ARIMA) | ALERT on significant deviation from forecast
  - question: Are PowerShell commands or scripts being executed that contain common encoding flags or deobfuscation function calls?
    context: This question targets the direct abuse of PowerShell for deobfuscation. It looks for the use of command-line flags like `-EncodedCommand` (or its aliases `-e`, `-enc`), which allow adversaries to pass a Base64-encoded command that hides the script's content from casual inspection. It also scans script block logs for common deobfuscation functions like `FromBase64String`, `Invoke-Expression` (IEX), and bitwise operations (`-bxor`) that are hallmarks of malicious PowerShell scripts.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 4104
      - All Windows Endpoints
      - All Windows Servers
      - Microsoft Exchange Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process events WHERE process is 'powershell.exe' AND cmd_line contains ('-EncodedCommand' OR '-e' OR '-enc') OR SEARCH PowerShell logs WHERE script_content contains ('FromBase64String' OR 'IEX' OR '-bxor')
  - question: Are there any PowerShell encoded commands or script blocks that are statistically anomalous in terms of length or character distribution?
    context: This question uses statistical baselining to find outlier PowerShell activity. Malicious encoded commands are often significantly longer than legitimate ones used for administrative tasks. Similarly, heavily obfuscated script blocks have a different statistical character distribution than normal code. By baselining these features, an analyst can detect suspicious commands and scripts without relying on known-bad signatures.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4104
      - All Windows Endpoints
      - All Windows Servers
      - Microsoft Exchange Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: SEARCH PowerShell encoded commands | CALCULATE length | ALERT if length > 3 * stdev_from_mean. SEARCH PowerShell script blocks | CALCULATE character frequency | ALERT if distribution deviates from baseline
  - question: Can a machine learning model assign a risk score to PowerShell commands to identify malicious activity, and can this be correlated with other suspicious events?
    context: This question describes a sophisticated detection strategy that combines multiple weak indicators into a single, high-confidence signal. A logistic regression model can be trained to produce a risk score based on features like command length, entropy, and keyword presence. A command with a high risk score can then be correlated with subsequent activity, such as the creation of suspicious child processes or network connections to low-reputation destinations, to confirm malicious intent.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4104
      - All Windows Endpoints
      - All Windows Servers
      - Microsoft Exchange Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features from PowerShell command | INPUT to logistic regression model to get risk_score | IF score > threshold, CORRELATE with subsequent process/network events | ALERT on high-risk correlation
  - question: Is the command prompt or PowerShell being used to combine multiple files into a new executable or script file?
    context: Adversaries may split a malicious payload into several smaller, seemingly benign files to evade antivirus and network security controls. Once on the target system, they use built-in utilities like `copy /b` (binary copy) or `type` to concatenate these pieces back into a single, executable payload. This question aims to detect this specific reassembly technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - File Servers
      - Staging Servers
      - Developer Endpoints
    range: last 90 days
    queries:
      - pseudocode: SEARCH process events WHERE (process is 'cmd.exe' OR 'powershell.exe') AND cmd_line contains ('copy /b' OR 'type') AND output_file_extension in ('.exe', '.dll', '.ps1', '.bat')
  - question: Is file concatenation using `copy /b` or `type` occurring in an unusual location or with an unusually high number of source files?
    context: This question adds behavioral context to file concatenation detections. While developers may use this technique legitimately, they typically do so in specific project folders. Adversaries, however, are more likely to perform reassembly in common user-writable directories like `%TEMP%`, `C:\Users\Public\`, or `%APPDATA%`. Flagging concatenation that occurs in these high-risk locations, or that involves an unusually large number of source files, helps to separate malicious activity from benign.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations
      - File Servers
      - Staging Servers
      - Developer Endpoints
    range: last 90 days
    queries:
      - pseudocode: SEARCH file concatenation events | COMPARE destination_path and file_count against baseline | ALERT if destination is high-risk OR file_count > 95th_percentile
  - question: Can a machine learning model (decision tree) be used to distinguish between legitimate and malicious file reassembly activity?
    context: This question proposes using a machine learning model to automate the detection of suspicious file concatenation. A decision tree can be trained on a variety of features—such as the parent process, the user account, the rarity of the destination path, and the output file type—to learn the rules that distinguish legitimate admin or developer activity from adversary tradecraft.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations
      - File Servers
      - Staging Servers
      - Developer Endpoints
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features (parent, path_rarity, extension, file_count, user) from concatenation events | INPUT to decision tree model | ALERT if classified as malicious
  - question: Is there a sequence of events on a single host involving a file download, followed by a decoding action, and then the creation of a new executable or a new network connection within a short time frame?
    context: 'This question seeks to identify a classic attack chain: download -> decode -> execute. By creating a rule that correlates these individual events happening on the same host within a short window (e.g., 5 minutes), you can create a very high-fidelity alert. A file download from the internet, followed by that same file being passed to `certutil.exe -decode`, which then results in a new `.exe` file being written or a new network connection being made, is a strong indicator of compromise.'
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek conn.log
      - Network Perimeter (Gateway/Proxy)
      - DMZ Servers
      - User Workstations
      - Egress Points
    range: last 90 days
    queries:
      - pseudocode: CORRELATE on host over 5 mins: (file_download) -> (process_creation of decoder using downloaded_file) -> (new_file_creation OR new_network_connection) | ALERT on match
  - question: Can a risk score be aggregated for hosts that exhibit a sequence of risky behaviors, such as downloading a suspicious file and then passing it to a decoding utility?
    context: This question describes a risk-based approach to detecting attack chains. Instead of a rigid correlation rule, this method assigns a risk score to each event. For example, a file download from a low-reputation domain receives a score. If that file is then accessed by a decoding tool, the host's overall risk score increases. This allows for more flexible alerting based on a dynamically adjusted threshold, catching activity that might not fit a precise rule.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Sysmon Event ID 1
      - Network Perimeter (Gateway/Proxy)
      - DMZ Servers
      - User Workstations
      - Egress Points
    range: last 90 days
    queries:
      - pseudocode: SCORE file downloads based on reputation/type. IF high-risk file is used by decoder, AGGREGATE risk score for host. ALERT if host_score > dynamic_threshold
  - question: Can graph-based anomaly detection identify statistically rare attack chains like 'download -> decode -> execute/connect'?
    context: This is an advanced analytic technique that models all system activity (processes, files, network connections) as nodes in a graph, with interactions as edges. The algorithm learns what normal sequences of activity (paths in the graph) look like over time. It can then identify new or statistically improbable paths, such as a browser downloading a file that is then decoded by PowerShell which then connects to a new C2 server, as highly anomalous.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek conn.log
      - Network Perimeter (Gateway/Proxy)
      - DMZ Servers
      - User Workstations
      - Egress Points
    range: last 90 days
    queries:
      - pseudocode: BUILD activity graph per host (nodes=process, file, net_conn; edges=interactions). APPLY graph anomaly detection. ALERT on low-probability paths matching 'download->decode->execute' pattern
  - question: Are Microsoft Office applications (Word, Excel, Outlook) spawning child processes known for script execution or decoding, such as PowerShell, cmd, or certutil?
    context: This is a classic and high-fidelity indicator of an attack. It is extremely rare for a legitimate user's Office application to spawn a command shell, script interpreter, or decoding utility. This behavior almost always indicates that a user has opened a malicious document with a weaponized macro or exploit that is attempting to execute a secondary payload on the system.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Microsoft Exchange Servers
      - Terminal Servers / Citrix Environments
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events WHERE parent_process in ('winword.exe', 'excel.exe', 'powerpnt.exe', 'outlook.exe') AND child_process in ('powershell.exe', 'cmd.exe', 'wscript.exe', 'certutil.exe')
  - question: Are there any rare or never-before-seen parent-child process relationships involving an Office application as the parent?
    context: This question focuses on baselining all parent-child process relationships in the environment to find anomalies. While the previous question looks for a specific list of known-bad child processes, this method is designed to find novel attacks. By identifying any new relationship (e.g., `excel.exe` spawning `unusual_tool.exe`) or any relationship that is extremely rare across the enterprise, security teams can uncover new attacker techniques.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations
      - Microsoft Exchange Servers
      - Terminal Servers / Citrix Environments
    range: last 90 days
    queries:
      - pseudocode: BASELINE all parent-child process relationships. SEARCH for new events. ALERT if (parent is Office app AND child is scripting/decode tool) AND (relationship is new OR frequency is below threshold)
  - question: Can a Bayesian network model be used to calculate the probability of observed parent-child process relationships and flag low-probability events as anomalous?
    context: This question describes using a probabilistic model to formalize the detection of anomalous process chains. A Bayesian network can be trained on historical data to learn the conditional probability of a child process being created, given a specific parent process (P(Child | Parent)). When a new event occurs, the model can calculate its probability. A very low-probability event, such as P(`powershell.exe` | `winword.exe`), would be flagged as highly anomalous.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations
      - Microsoft Exchange Servers
      - Terminal Servers / Citrix Environments
    range: last 90 days
    queries:
      - pseudocode: TRAIN Bayesian network on P(Child|Parent) from process logs. FOR each new event, calculate P(new_child|new_parent). ALERT if probability is below a learned threshold