name: T1053: Scheduled Task-Job
id: a8c9b0d1-1234-4e5f-a6b7-c8d9e0f1a2b3
description: This playbook investigates the use of Scheduled Tasks or Jobs (T1053) for malicious purposes. Adversaries leverage this technique to achieve execution, persistence, and privilege escalation. This playbook helps identify suspicious scheduled tasks by analyzing their creation, execution patterns, and configurations, such as tasks that initiate rare network connections, contain obfuscated commands, run from non-standard locations, are created and deleted rapidly, are configured for persistence with malicious payloads, or are used to bypass UAC or escalate privileges to SYSTEM.
type: technique
related: [TA0002: Execution, TA0003: Persistence, TA0004: Privilege Escalation]
contributors: [Zachary Szewczyk]
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process launched by the Task Scheduler making a network connection to a known malicious IP address or domain?
  context: This question aims to detect when a scheduled task is used to initiate command and control (C2) communication or download a second-stage payload. By correlating process execution from the Task Scheduler service with outbound network traffic and comparing the destination against high-confidence threat intelligence, analysts can quickly identify known malicious activity.
  answer_sources: [Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Critical Windows Servers (e.g., Domain Controllers, Application Servers), User Endpoints, and Network Egress Points.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN (process_events WHERE parent_process in ('taskeng.exe', 'svchost.exe') AND parent_command_line contains 'netsvcs') AS task_procs
      WITH (network_events)
      ON task_procs.host_ip = network_events.host_ip
      WHERE time_diff(task_procs.timestamp, network_events.timestamp) < 5 seconds
      LOOKUP network_events.destination in (threat_intel_feed)
      RETURN alerts for matches
- question: Is a scheduled task initiating a network connection to a destination that is statistically rare for the enterprise?
  context: Adversaries often use novel or unique domains and IP addresses for their infrastructure. Legitimate traffic, by contrast, tends to be repetitive. This question helps uncover previously unknown malicious infrastructure by identifying connections from scheduled tasks to destinations that have rarely or never been seen before across the organization.
  answer_sources: [Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Critical Windows Servers (e.g., Domain Controllers, Application Servers), User Endpoints, and Network Egress Points.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each network_connection from a Task Scheduler process:
        CALCULATE historical frequency of destination (IP, domain, ASN) over last 90 days.
        IF frequency is in bottom 5th percentile:
          ALERT as anomalously rare connection.
- question: Is there an anomalous spike in outbound data transfer from a host immediately following a scheduled task execution?
  context: This question seeks to identify data exfiltration. Adversaries may use a scheduled task to trigger the exfiltration of stolen data, which would appear as an unusual spike in outbound network traffic. A time-series model can detect such anomalies that might be missed by simple volume thresholds.
  answer_sources: [Windows Event ID 4688, Zeek conn.log, Critical Windows Servers (e.g., Domain Controllers, Application Servers), User Endpoints, and Network Egress Points.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN time-series model on hourly outbound data volume per host.
      MONITOR for scheduled task execution events.
      IF anomalous spike in outbound data occurs within minutes of a task execution:
        ALERT for potential data exfiltration.
- question: Has a scheduled task been created or executed with known malicious or obfuscated commands and arguments?
  context: Adversaries frequently use obfuscation (e.g., base64 encoding in PowerShell) and suspicious script fragments (e.g., 'DownloadString', 'IEX') to hide their malicious code within a scheduled task's action. This question uses regular expressions to search for these well-known malicious patterns in task creation and execution events.
  answer_sources: [Windows Event ID 4688, Windows Event ID 4698, All Windows Endpoints and Servers, especially those with PowerShell v5+ logging and command-line process auditing enabled.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task_creation_events (4698) and schtasks_execution_events (4688)
      FOR command_line or arguments containing regex patterns like ('powershell -e', '-enc', 'IEX', 'DownloadString', 'rundll32 javascript:', 'mshta vbscript:', 'certutil -urlcache')
      RETURN alerts for any matches.
- question: Does a newly created scheduled task have an unusually high level of entropy in its command line, suggesting obfuscation?
  context: Obfuscated code, such as encoded PowerShell commands, has a higher character randomness (entropy) than plain text commands. This question helps detect unknown or novel obfuscation techniques by flagging any new task whose command-line entropy is significantly higher than the baseline for legitimate tasks on similar systems.
  answer_sources: [Windows Event ID 4688, Windows Event ID 4698, All Windows Endpoints and Servers, especially those with PowerShell v5+ logging and command-line process auditing enabled.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE entropy for command_line of new scheduled tasks.
      COMPARE entropy to baseline for the asset's role (e.g., DC, workstation).
      IF entropy > 95th percentile of baseline:
        ALERT for likely obfuscation.
- question: Does the command line of a scheduled task classify as malicious based on a natural language processing (NLP) model?
  context: While regex and entropy are effective, they can be brittle. A machine learning model trained on a large corpus of malicious and benign commands can learn the subtle characteristics of malicious syntax. This question uses an NLP model to classify task commands, enabling the detection of novel malicious payloads that might evade simpler methods.
  answer_sources: [Windows Event ID 4688, Windows Event ID 4698, All Windows Endpoints and Servers, especially those with PowerShell v5+ logging and command-line process auditing enabled.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT full command line of a new task into a pre-trained NLP classification model.
      IF model output is 'malicious':
        ALERT for investigation.
- question: Is a scheduled task executing an unsigned binary from a non-standard, user-writable directory?
  context: Legitimate scheduled tasks typically execute signed binaries from protected system directories. This question aims to detect adversaries 'living off the land' by placing their tools in user-writable locations like %APPDATA% or %TEMP% and scheduling their execution. Alerting on task executions from these unusual locations is a high-fidelity indicator of malicious activity.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR task creation (4698) and execution (4688) events.
      IF task_executable_path in ('C:\Users\*\AppData\', 'C:\ProgramData\', 'C:\Windows\Temp\'):
        ALERT for execution from non-standard path.
- question: Is the Task Scheduler being used to launch a process that is statistically rare for it to launch across the enterprise?
  context: Over time, the Task Scheduler on a network develops a predictable pattern of behavior, launching a common set of processes. This question establishes a baseline of normal process executions and flags any process launched by the Task Scheduler that is a statistical outlier, which could represent a newly introduced malicious tool.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BUILD baseline of (process_name, process_path) tuples launched by Task Scheduler.
      FOR each new task execution:
        CALCULATE frequency of its (process_name, process_path) tuple.
        IF frequency < 1%:
          ALERT as rare process execution.
- question: Does a new scheduled task have features that an unsupervised outlier detection model identifies as anomalous?
  context: This question uses an Isolation Forest or similar model to perform multi-dimensional anomaly detection. Instead of looking at just one attribute (like path or process name), it considers many features at once (path depth, signature status, command-line length, etc.) to find tasks that deviate from the norm in subtle, combined ways, which is effective at catching sophisticated threats.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN Isolation Forest model on features of legitimate scheduled tasks.
      SCORE new tasks using the trained model.
      IF anomaly score is high:
        ALERT for anomalous task characteristics.
- question: Has a scheduled task been created and then deleted in a very short amount of time?
  context: Adversaries may create a scheduled task for a single, immediate execution and then delete it to clean up their tracks and evade forensic analysis. This 'one-shot' pattern is highly suspicious. This question detects this behavior by correlating task creation and deletion events that occur for the same task name within a short window.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events by 'Task Name' and 'Logon ID' on the same host.
      IF (Event 4698 - Create) is followed by (Event 4702 - Delete) for the same task name within 5 minutes:
        TRIGGER alert for short-lived task.
- question: Does a scheduled task have a lifetime that is anomalously short compared to the baseline of all tasks?
  context: While a fixed 5-minute window is a good rule of thumb, a statistical approach can be more robust. This question calculates the lifetime of every task (create time to delete time) and flags any task whose lifetime is in the bottom percentile of the distribution. This helps to dynamically identify unusually ephemeral tasks that warrant investigation.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR every task:
        CALCULATE lifetime = (deletion_time [4702] - creation_time [4698]).
      BUILD distribution of task lifetimes.
      IF new task lifetime is in bottom 1st percentile:
        ALERT for unusually short lifetime.
- question: Does a cluster of short-lived scheduled tasks share other suspicious features, like being created by a standard user account?
  context: This question uses clustering to find groups of suspicious tasks that might represent a specific adversary tool or campaign. A dense cluster of tasks that are all short-lived, created by non-administrative accounts, and execute a similar process is a strong indicator of a coordinated malicious action, even if a single instance might not be enough to trigger an alert.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLUSTER tasks based on features (lifetime, user_account_type, process_name).
      ANALYZE clusters for high-risk characteristics.
      IF a small, dense cluster of short-lived tasks created by standard users is found:
        ALERT for suspicious task cluster.
- question: Is a persistent scheduled task configured to execute a command that contains a known malicious file path, domain, or IP?
  context: This is a direct method for finding persistence. The question focuses on tasks set to run automatically (e.g., on logon or a schedule) and checks if their configured action involves an artifact (like a C2 domain or malware path) that is already known to be malicious from threat intelligence feeds.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers, particularly Domain Controllers and other Tier 0 assets.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR task creation events (4698) with persistence triggers ('<LogonTrigger>', '<BootTrigger>', etc.).
      EXTRACT file paths, domains, and IPs from the task's command/arguments.
      COMPARE extracted artifacts against threat intelligence feeds.
      ALERT on any match.
- question: Is a persistent scheduled task configured to use a domain or executable name that is statistically rare across the enterprise?
  context: Adversaries often use unique executable names or C2 domains for their persistent tasks. This question identifies these outliers by calculating the frequency of executable names and domains used in all persistent tasks. An executable or domain seen on only one or a handful of hosts is anomalous and suspicious.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers, particularly Domain Controllers and other Tier 0 assets.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR all persistent tasks:
        CALCULATE frequency of (domain, executable_name) across the enterprise.
        IF a task uses a domain or executable on < 5 hosts:
          ALERT as anomalous persistence.
- question: Does a machine learning model classify a new task as persistent and having low-prevalence features?
  context: This question uses a classification model to first identify tasks that are likely intended for persistence based on their triggers and actions. It then flags these predicted-persistent tasks if they also contain rare features (like an uncommon executable path), combining the likelihood of persistence with the anomaly of its configuration.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers, particularly Domain Controllers and other Tier 0 assets.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN a model to classify tasks as 'persistent' or 'non-persistent'.
      FOR each new task:
        PREDICT if persistent.
        IF predicted as 'persistent' AND has low-prevalence features (e.g., rare path):
          ALERT for risky persistence.
- question: Is a persistent scheduled task using a 'living-off-the-land' binary (LOLBin) to execute a remote payload or script?
  context: Adversaries abuse legitimate, signed Windows binaries (LOLBins) like powershell.exe or mshta.exe to evade detection. This question looks for the specific pattern of a persistent task (e.g., runs at logon) that invokes a known LOLBin with arguments commonly used to download or run malicious code.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FILTER task creation events (4698) for persistence triggers.
      SEARCH task command for known LOLBins (e.g., 'powershell.exe', 'mshta.exe').
      IF LOLBin is followed by arguments indicating remote access (e.g., 'IEX', 'http://'):
        ALERT for LOLBin abuse.
- question: Does a persistent task using a LOLBin have command-line arguments that are statistically rare?
  context: This question establishes a baseline of normal command-line arguments for LOLBins executed by scheduled tasks. It then uses TF-IDF or a similar scoring method to find arguments in new tasks that are rare across the environment. A unique URL or an unusual combination of flags will have a high score and be flagged as anomalous.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE baseline of normal command arguments for LOLBins in scheduled tasks.
      CALCULATE TF-IDF score for arguments in new tasks.
      IF argument score is high (indicating rarity):
        ALERT for anomalous LOLBin arguments.
- question: Does a persistent task using a LOLBin have a sequence of arguments that is flagged as anomalous by a machine learning model?
  context: Malicious commands often have a specific structure or sequence of arguments, even if the individual arguments are not unique. This question uses a model trained on legitimate argument sequences to detect novel or unusual combinations used by adversaries, catching malicious commands that might not match known static patterns.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN anomaly detection model on sequences of arguments for LOLBins.
      INPUT new task's argument sequence into the model.
      IF model flags the sequence as anomalous:
        ALERT for novel malicious command structure.
- question: Is a new persistent task masquerading as a legitimate task by using a misspelled name or a correct name with an incorrect path?
  context: Adversaries attempt to blend in by giving their malicious tasks names that are very similar to legitimate ones (e.g., 'Microsft Update'). This question detects such masquerading by checking for new persistent tasks with names that are close misspellings of known good tasks, or that use a legitimate name but execute from a suspicious, non-standard file path.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers, with baselines established per server role and workstation image.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR new persistent tasks.
      IF task_name is a close misspelling of a known legitimate task name:
        ALERT.
      IF task_name is legitimate but executable_path is non-standard:
        ALERT.
- question: Does a new persistent task have a name or path with characteristics that are statistically indicative of masquerading or randomization?
  context: This question uses string metrics to detect suspicious task names and paths. The Levenshtein distance is used to find names that are 'close' to legitimate ones, indicating typosquatting. High entropy is used to find randomized names (e.g., 'asd8f7a9sd.exe'), which are often used by malware to avoid signature-based detection.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers, with baselines established per server role and workstation image.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR new persistent tasks:
        CALCULATE Levenshtein distance of task_name/path to known good baseline.
        CALCULATE entropy of task_name.
        IF Levenshtein distance is low (close match) OR entropy is high:
          ALERT for potential masquerading.
- question: Is a new persistent task a significant outlier compared to clusters of known legitimate tasks?
  context: This question uses clustering to group all scheduled tasks based on their features (name, path, trigger). Legitimate tasks will form large, dense clusters. A new task that does not fall into any of these clusters is, by definition, an outlier. This unsupervised approach is excellent for finding novel threats that don't match any pre-defined rules.
  answer_sources: [Windows Event ID 4698, All Windows Endpoints and Servers, with baselines established per server role and workstation image.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      VECTORIZE features of all scheduled tasks (name n-grams, path, trigger).
      CLUSTER tasks using K-Means or similar algorithm.
      IF a new task falls into a small, isolated cluster or no cluster:
        ALERT as significant deviation from norm.
- question: Has a scheduled task been modified or created without a Security Descriptor (SD)?
  context: This is a specific and high-confidence indicator of a task hiding technique. By removing the Security Descriptor from a task's XML definition, an adversary can make the task invisible to standard tools like the Task Scheduler GUI and the 'schtasks /query' command, while the task remains operational. This question triggers a high-severity alert on this specific condition.
  answer_sources: [Windows Event ID 4701, Windows Event ID 4698, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR task update (4701) and creation (4698) events.
      IF event XML data shows '<SecurityDescriptor>' field is null or removed:
        TRIGGER high-severity alert for task hiding.
- question: Is a task with a null Security Descriptor also using a name that mimics a legitimate task?
  context: This question combines two suspicious attributes for higher fidelity alerting. It looks for tasks that are both hidden (null SD) and are attempting to masquerade by using a name that is unusually similar to a known legitimate task (e.g., 'GoogleUpdateTaskMachineUA' vs 'GoogleUpdateTaskMachineCore'), which strongly indicates malicious intent.
  answer_sources: [Windows Event ID 4701, Windows Event ID 4698, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FIND tasks with a null Security Descriptor.
      FOR those tasks, analyze their names using n-gram analysis or string similarity.
      IF name is a close match to a legitimate task name:
        ALERT for combined hiding and masquerading.
- question: Has a scheduled task undergone an unusual sequence of events, such as being updated to remove its Security Descriptor?
  context: Legitimate administrative actions follow predictable workflows (e.g., Create -> Enable). This question models the sequence of events for each task and flags anomalous sequences. A sequence like Create -> Update (to remove the SD) -> Enable is not a normal administrative workflow and is highly indicative of tampering and malicious hiding.
  answer_sources: [Windows Event ID 4701, Windows Event ID 4698, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL the state transitions for each task (Create, Disable, Update, Enable).
      TRAIN a sequence model on normal administrative workflows.
      IF a task follows an anomalous sequence (e.g., Create -> Update to remove SD -> Enable):
        ALERT for task tampering.
- question: Is a scheduled task running with SYSTEM privileges executing a file associated with a known exploit tool or malware?
  context: This question seeks to find a clear-cut case of privilege escalation. It identifies tasks configured to run as the highest-privileged account (NT AUTHORITY\SYSTEM), and then checks if the file being executed is a known malicious tool by comparing its hash against a threat intelligence database. A match is a high-confidence indicator of compromise.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4688, All Windows Endpoints and Servers, especially multi-user systems like terminal servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FILTER for tasks created (4698) with SYSTEM privileges ('<UserId>S-1-5-18</UserId>').
      ON execution (4688), get the hash of the executable file.
      COMPARE hash against threat intelligence database of exploit tools.
      ALERT on match.
- question: Is a new scheduled task running as SYSTEM executing a file that is not on the established baseline of legitimate SYSTEM-level tasks?
  context: Not all malware will be in a threat intelligence database. This question builds a baseline of all executables that legitimately run as SYSTEM via scheduled task in your environment. Any new task running as SYSTEM that executes a process not on this allow-list is considered anomalous and requires investigation, especially if it's unsigned or in a user-writable path.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4688, All Windows Endpoints and Servers, especially multi-user systems like terminal servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN baseline of executables that legitimately run as SYSTEM via task scheduler.
      ALERT if a new SYSTEM task executes a file not on the baseline.
      INCREASE severity if executable is unsigned or in a temp/user directory.
- question: Does a machine learning model assign a high risk score to a new scheduled task based on its privilege level and other features?
  context: This question uses a supervised model to automate the risk assessment of a new task. The model is trained on known good and bad task attributes. It learns that features like 'runs_as_system', 'is_unsigned', and 'rare_path' are indicative of risk. This allows for automated scoring and prioritization of alerts for analyst review.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4688, All Windows Endpoints and Servers, especially multi-user systems like terminal servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN a risk model (e.g., XGBoost) on task features (runs_as_system, is_signed, path_rarity, etc.).
      SCORE new tasks with the model.
      IF risk score is high:
        ALERT for high-risk scheduled task.
- question: Has a task been created with 'Run with highest privileges' to execute a command pattern associated with a known UAC bypass technique?
  context: Adversaries use the 'Run with highest privileges' option in scheduled tasks as a way to bypass User Account Control (UAC). This question specifically looks for the creation of such a task, and correlates it with a task action that invokes a process known to be abusable for UAC bypasses, such as 'fodhelper.exe' or 'eventvwr.exe'.
  answer_sources: [Windows Event ID 4688, Windows Event ID 4698, All Windows Endpoints (e.g., Windows 10, Windows 11).]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR for task creation with '/RL HIGHEST' (4688) or '<HighestAvailable>true</HighestAvailable>' (4698).
      IF the task's action targets a known UAC bypass binary (e.g., 'fodhelper.exe'):
        ALERT for potential UAC bypass.
- question: Has there been a statistical increase in the use of the 'Run with highest privileges' option for scheduled tasks?
  context: In most environments, the use of the 'Run with highest privileges' setting is rare and consistent. A sudden spike in its usage, or its usage by a non-standard user or application, is a statistical anomaly. This question helps detect broader campaigns that might be using this UAC bypass technique at scale.
  answer_sources: [Windows Event ID 4688, Windows Event ID 4698, All Windows Endpoints (e.g., Windows 10, Windows 11).]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE the usage of '/RL HIGHEST' and '<HighestAvailable>true</HighestAvailable>'.
      ALERT on a sudden increase in usage or use by a rare user/process.
- question: Has a low-privilege process spawned a shell that then created a high-privilege scheduled task?
  context: This question models the sequence of events to detect privilege escalation chains. A legitimate user does not typically have a Word document spawn a command prompt that then creates a SYSTEM-level task. A sequence model can be trained to recognize these anomalous transitions from a low-integrity process to a high-integrity persistence mechanism.
  answer_sources: [Windows Event ID 4688, Windows Event ID 4698, All Windows Endpoints (e.g., Windows 10, Windows 11).]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL process creation sequences and state transitions (e.g., low to high integrity).
      TRAIN a sequence model (e.g., Hidden Markov Model) on normal sequences.
      IF a sequence like [Office App -> Shell -> Create High-Privilege Task] is detected:
        ALERT for anomalous privilege escalation chain.
- question: Has a standard, non-administrative user created a scheduled task configured to run as SYSTEM or another high-privileged account?
  context: This is a critical detection for privilege escalation. Under normal circumstances, a standard user should not be able to create a task that runs with higher privileges. The existence of such an event is a nearly certain indicator that a vulnerability has been exploited, allowing the user to create a task that runs as SYSTEM.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4701, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for task creation (4698) or update (4701) events WHERE:
        'SubjectUserName' is a non-admin account AND
        Task's '<UserId>' is 'SYSTEM', 'S-1-5-18', 'Administrator', or a privileged group.
      TRIGGER a high-severity alert on any match.
- question: Has any event occurred where a standard user created a SYSTEM-level task?
  context: This question frames the detection as a search for a deterministic condition that should never happen. In a secure environment, a query for standard users creating SYSTEM tasks should always return zero results. Any single result is a high-confidence indicator of compromise and a failure of security controls, making this a critical, non-statistical check.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4701, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      QUERY for any instance of a standard user creating a SYSTEM-level task.
      EXPECT zero results.
      ANY result is a high-confidence IOC.
- question: Can a machine learning model confirm that a standard user creating a SYSTEM-level task is a malicious event?
  context: While a simple rule is best for this detection, a machine learning classifier provides an alternative, automated way to score this risk. A model trained on user privilege levels would learn that the combination of a 'standard' user creating a task for a 'system' user is malicious and can automatically assign a maximum risk score, aiding in automated response.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4701, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN a classification model on (creating_user_privilege, task_runas_privilege) tuples.
      The model will learn that the tuple ('standard', 'system') is malicious.
      USE model to assign a maximum risk score to such events.
- question: Was a short-lived, SYSTEM-level task created immediately after suspicious activity from a standard user process?
  context: This question looks for a 'hit-and-run' privilege escalation chain. It correlates a suspicious user-level activity (e.g., Process A created by a standard user) with the subsequent rapid creation and deletion of a SYSTEM-level task by that same user session. This sequence strongly indicates that Process A exploited a vulnerability to briefly create a privileged task to perform an action.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE the following sequence on a single host:
      1. [4688: Process A created by standard user]
      2. [4698: SYSTEM task created by Process A's logon session]
      3. [4702: Same task deleted within 2 minutes of creation]
      ALERT on this sequence.
- question: Is there an unusually short time delay between a suspicious user-level process and the creation of a new SYSTEM-level task?
  context: This question uses statistical timing to link a cause (suspicious user process) to an effect (privileged task creation). While processes and tasks are always being created, a very short time delta (e.g., under 30 seconds) between a suspicious download and the creation of a SYSTEM task on the same host strongly implies a causal link and a likely exploit chain.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE time delta between a suspicious user-level process (e.g., powershell download) and new SYSTEM task creation on the same host.
      ALERT if the time delta is very short (e.g., < 30 seconds), indicating a causal relationship.
- question: Does a graph-based analysis reveal a high-risk path from a user-level process to a short-lived, SYSTEM-level task?
  context: This question uses graph analytics to visualize and score event chains. By representing users, processes, and tasks as nodes in a graph, an attack path appears as a series of connected edges. A path from a user-level process node to a SYSTEM task node that is quickly deleted represents a high-risk chain that can be automatically detected and scored by graph algorithms.
  answer_sources: [Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688, All Windows Endpoints and Servers.]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL processes, users, and tasks as nodes in a graph.
      DETECT paths from a user-level process node to a SYSTEM-level task node.
      SCORE path risk higher if the task node is created and deleted in a short time.
      ALERT on high-risk paths.