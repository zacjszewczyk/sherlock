name: T1070.006: Timestomp
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversaries attempting to evade defenses by modifying file timestamps (Timestomping, T1070.006). It focuses on detecting known timestomping utilities transferred over the network, suspicious command-line executions of timestamp-modifying tools, discrepancies between file system metadata and event log timestamps, internal inconsistencies within NTFS MFT records, cloning of timestamps from legitimate system files, and illogical timestamps where a file's creation date is after its modification date. The goal is to uncover attempts to hide malware or manipulate forensic timelines.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are known timestomping tools being transferred across the network?
  context: This question aims to detect the introduction of known malicious tools into the environment. By matching file hashes from network traffic against a threat intelligence database of timestomping utilities, analysts can identify the adversary's toolkit at the initial transfer stage, often before the tool is even executed.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Threat Intelligence Feeds
  - Monitored network segments including internet gateways and traffic to/from DMZ.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR file IN (zeek_files_log, zeek_http_log): IF file.hash IN known_timestomp_tool_hashes THEN ALERT'
- question: Is any host exhibiting an anomalous volume of executable file transfers over the network?
  context: Adversaries often transfer multiple tools to a compromised host. A sudden spike in the number of executable files being downloaded by a single host can indicate staging of a malicious toolkit, which may include timestomping utilities. This is a behavioral analytic that doesn't rely on known signatures.
  answer_sources:
  - Zeek files.log
  - Monitored network segments including internet gateways and traffic to/from DMZ.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR host IN all_hosts: daily_exe_count = COUNT(files.log WHERE src_host=host AND is_exe=true) IF daily_exe_count > BASELINE(host, 30_days, 95th_percentile) THEN ALERT'
- question: Can machine learning models identify network file transfers that are likely to be malicious tools, even if they are unknown?
  context: This question leverages machine learning to proactively identify suspicious files based on their network transfer characteristics (MIME type, file entropy, IP reputation, etc.). This predictive approach helps find novel or obfuscated timestomping tools that would be missed by signature-based detections.
  answer_sources:
  - Zeek files.log
  - Monitored network segments including internet gateways and traffic to/from DMZ.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR file IN zeek_files_log: score = ML_MODEL(file.features) IF score > high_probability_threshold THEN ALERT'
- question: Are there any process executions using command-line syntax associated with timestomping?
  context: Adversaries frequently use built-in tools like PowerShell or common third-party utilities to modify timestamps. This question focuses on finding direct evidence of timestomping activity by searching process execution logs for specific commands and arguments known to be used for this purpose.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR process_event IN (WinEvent4688, Sysmon1): IF process_event.command_line MATCHES timestomp_regex_patterns THEN ALERT'
- question: Are there any process command lines with unusually high entropy that might indicate obfuscated timestomping activity?
  context: Obfuscated commands, often used to hide malicious activity, tend to have higher character entropy than normal commands. By baselining command-line entropy on a per-host basis, analysts can detect anomalous commands that may be indicative of obfuscated scripts or tool usage, including those used for timestomping.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR process_event IN (WinEvent4688, Sysmon1): command_entropy = CALCULATE_ENTROPY(process_event.command_line) IF command_entropy > BASELINE(host, 3_std_dev) THEN ALERT'
- question: Can a machine learning model classify process command lines as malicious based on their structure and content?
  context: This question applies machine learning to analyze the full context of a command line, going beyond simple keyword matching. By training a model on features like n-grams and character distributions from known benign and malicious commands, it can assign a risk score to new, unseen commands, helping to uncover novel or complex timestomping techniques.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR process_event IN (WinEvent4688, Sysmon1): score = ML_MODEL(process_event.command_line) IF score > high_risk_threshold THEN ALERT'
- question: Are any files being created or written with a timestamp that is significantly older than the event itself?
  context: This is a direct detection for backdating files. When a file is created, its metadata timestamp should be nearly identical to the timestamp of the system event logging its creation. A significant discrepancy, where the file's timestamp is much older than the event's timestamp, is a strong indicator of intentional manipulation.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Zeek files.log
  - Critical file system directories on endpoints and servers (e.g., C:\Windows\System32, user profile directories), temporary directories, and network file shares.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR file_event IN (Sysmon11, WinEvent4663): IF file_event.file_timestamp < (file_event.system_timestamp - 5_minutes) THEN ALERT'
- question: Are there file creation events where the time difference between the event and the file's own timestamp is a statistical anomaly compared to the rest of the enterprise?
  context: This question uses a statistical approach to find outliers. By analyzing the distribution of time deltas (event time minus file time) across the entire organization, events with an anomalously large negative delta (file appears much older than the event) can be identified, even if the absolute difference isn't large. This helps find subtle manipulations.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Zeek files.log
  - Critical file system directories on endpoints and servers (e.g., C:\Windows\System32, user profile directories), temporary directories, and network file shares.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR file_event IN (Sysmon11, WinEvent4663): delta = file_event.system_timestamp - file_event.file_timestamp IF delta < ENTERPRISE_BASELINE(1st_percentile) THEN ALERT'
- question: Is the pattern of time deltas between file events and file timestamps on a specific host deviating from its normal behavior?
  context: This question applies time-series analysis to a single host's activity. A model learns the normal pattern of timestamp deltas for a given host. A sudden, significant negative deviation from this learned pattern indicates that something has changed on that host, possibly due to an adversary performing timestomping activities.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Zeek files.log
  - Critical file system directories on endpoints and servers (e.g., C:\Windows\System32, user profile directories), temporary directories, and network file shares.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR host in all_hosts: delta_stream = STREAM(file_event.system_timestamp - file_event.file_timestamp) anomaly = TIMESERIES_MODEL(delta_stream) IF anomaly IS significant_negative_deviation THEN ALERT'
- question: Are there any files on NTFS volumes with mismatched timestamps between their $STANDARD_INFORMATION and $FILE_NAME attributes?
  context: The NTFS file system maintains two sets of timestamps for a file. While they can sometimes differ for legitimate reasons, many timestomping tools only modify the more commonly viewed $STANDARD_INFORMATION ($SI) timestamps, leaving the $FILE_NAME ($FN) timestamps untouched. A mismatch is therefore a strong indicator of manipulation.
  answer_sources:
  - EDR file system telemetry
  - MFT Record Data
  - NTFS volumes on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR file_record IN MFT_scan: IF file_record.$SI_timestamp != file_record.$FN_timestamp THEN ALERT'
- question: Is a host showing an anomalous increase in the overall percentage of files with MFT timestamp mismatches?
  context: Instead of alerting on every single mismatch, this question looks for a change in the overall state of a system. A sudden increase in the proportion of files with mismatched timestamps suggests a widespread or programmatic modification event, such as an adversary attempting to hide a large number of malicious files.
  answer_sources:
  - MFT Record Data
  - NTFS volumes on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR host IN critical_hosts: mismatch_percentage = CALCULATE_MFT_MISMATCH_PERCENT(host) IF mismatch_percentage > BASELINE(host, 99th_percentile) THEN ALERT'
- question: Can the presence of MFT timestamp mismatches be used as a feature to improve a host-based anomaly detection model?
  context: This question treats the presence of an MFT timestamp mismatch as one of many potential indicators of compromise. By feeding this binary feature into an unsupervised model (like an Isolation Forest) along with other telemetry, the model can make a more holistic assessment of a host's risk level, increasing confidence in its findings.
  answer_sources:
  - MFT Record Data
  - other host telemetry (e.g., network connections, process execution)
  - NTFS volumes on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR host IN all_hosts: host_features.append(HAS_MFT_MISMATCH(host)) host_risk_score = UNSUPERVISED_MODEL(host_features) IF host_risk_score > threshold THEN ALERT'
- question: Has a new file been created with timestamps that are identical to those of a common, legitimate system file?
  context: A common timestomping technique is to copy the timestamps from a legitimate, trusted file (like kernel32.dll) and apply them to a malicious file. This question aims to detect this "timestamp cloning" by checking if a newly created file, especially in a user directory, shares its timestamps with a large group of known good system files.
  answer_sources:
  - Sysmon Event ID 11
  - User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\ProgramData on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: ON file_creation_event: IF file.path IS user_writable AND COUNT(files WHERE timestamp == file.timestamp) > high_threshold THEN ALERT'
- question: Has a new file been created with a set of MACE timestamps that is statistically very common across the enterprise?
  context: This question operationalizes the "timestamp cloning" detection at scale. By hashing the entire MACE timestamp set for every new file, we can quickly identify which timestamp sets are extremely common (e.g., those belonging to core OS files). A new file appearing with one of these high-frequency timestamp hashes is highly suspicious.
  answer_sources:
  - Sysmon Event ID 11
  - User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\ProgramData on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: ON file_creation_event: timestamp_hash = HASH(file.mace_timestamps) IF FREQUENCY(timestamp_hash) > 99.9th_percentile THEN ALERT'
- question: Can clustering algorithms identify a new file that has timestamps consistent with core OS files but is located in an anomalous directory?
  context: This question uses machine learning to find outliers by grouping files based on the similarity of their timestamps. A large, dense cluster will form around core OS files that share timestamps. A new file that falls into this cluster but has an unusual path (like a temp folder) or name is a strong anomaly, indicating it's trying to masquerade as a system file.
  answer_sources:
  - Sysmon Event ID 11
  - User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\ProgramData on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: ON file_creation_event: file_cluster = DBSCAN(file.mace_timestamps) IF file_cluster IS large_dense_cluster AND file.path IS anomalous THEN ALERT'
- question: Are there any files on the system where the creation time is more recent than the last modification time?
  context: This is a fundamental logical inconsistency. A file cannot be modified before it is created. The presence of such an "inverted" timestamp is almost definitive proof of manual tampering and provides a very high-confidence signal for analysts.
  answer_sources:
  - Sysmon Event ID 11
  - MFT Record Data
  - NTFS volumes on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR file_event IN (Sysmon11, MFT_scan): IF file.CreationTime > file.LastWriteTime THEN ALERT'
- question: Is the number of files with illogical timestamps on a critical host increasing?
  context: While a single instance is a high-confidence alert, tracking the count of such files over time can reveal the scale of an incident. A sudden increase from zero (or a known low baseline) on a host indicates an active or recent attempt to manipulate file system evidence.
  answer_sources:
  - MFT Record Data
  - NTFS volumes on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR host IN critical_hosts: inverted_count = COUNT(files WHERE CreationTime > LastWriteTime) IF inverted_count > host_baseline(e.g., 0) THEN ALERT'
- question: Can the existence of a file with an illogical timestamp be used as a high-weight feature in a host compromise scoring model?
  context: This question recognizes the high-fidelity nature of this indicator. By including a boolean feature (`has_illogical_timestamp`) in a broader host risk model, its presence can significantly elevate the host's overall risk score, drawing immediate analyst attention and corroborating other, weaker signals.
  answer_sources:
  - MFT Record Data
  - other host telemetry
  - NTFS volumes on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - query: 'pseudocode: FOR host IN all_hosts: host_features.append(HAS_ILLOGICAL_TIMESTAMP(host)) risk_score = ML_MODEL(host_features) IF risk_score > threshold THEN ALERT'