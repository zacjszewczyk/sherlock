name: T1070.006: Timestomp
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is attempting to evade defenses by modifying file timestamps. It covers indicators such as the transfer of known timestomping utilities, the use of command-line syntax associated with timestamp modification, discrepancies between file metadata timestamps and system event logs, mismatches within NTFS MFT records, cloning of timestamps from legitimate system files, and illogical internal file timestamps (e.g., creation time after modification time).
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known timestomping utility been transferred over the network?
    context: |
      This question seeks to identify the introduction of malicious tools into the environment. By comparing file hashes from network traffic against a threat intelligence database of known timestomping utilities, we can detect the adversary's toolkit at the initial transfer stage, providing an early warning of potential defense evasion activities.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Monitored network segments including internet gateways and traffic to/from DMZ.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each file_transfer IN (zeek_files_log, zeek_http_log)
          IF file_transfer.hash IN (threat_intel_hashes)
          THEN ALERT "Known timestomping tool detected"
  - question: Is any host exhibiting an anomalous volume of executable file transfers?
    context: |
      This question aims to detect unusual behavior that could indicate staging of malicious tools. Adversaries often transfer multiple executables, including timestomping utilities. By baselining normal activity and alerting on significant deviations, we can spot hosts that are potentially being used to download or distribute malicious software, even if the specific files are not yet known to be malicious.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Monitored network segments including internet gateways and traffic to/from DMZ.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each source_host
          CALCULATE daily_exe_transfer_count_baseline
          IF current_daily_count > baseline_95th_percentile
          THEN ALERT "Anomalous executable file transfer volume detected"
  - question: Can machine learning identify file transfers likely to be malicious tools based on network metadata?
    context: |
      This question leverages machine learning to proactively identify suspicious file transfers that might be uncatalogued timestomping tools. By analyzing a combination of features like MIME type, file entropy, and IP reputation, a classification model can assign a risk score, flagging files that share characteristics with known malicious tools for further investigation.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Monitored network segments including internet gateways and traffic to/from DMZ.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each new_file_transfer
          SCORE file_transfer with ML_model(features)
          IF score > high_probability_threshold
          THEN ALERT "File transfer flagged as probable malicious tool by ML model"
  - question: Are there any process creation events with command-line arguments indicative of timestomping?
    context: |
      This question focuses on detecting the active use of timestomping techniques on a host. By searching for specific command-line patterns associated with tools like PowerShell or `touch`, we can directly observe an adversary's attempt to modify file timestamps to hide their activity or blend in with normal system files.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE command_line MATCHES (regex_for_timestomp_commands)
          RETURN matching_events
  - question: Has a process been executed with an unusually complex or random command line that also contains timestomping keywords?
    context: |
      This question aims to find obfuscated or complex commands that may be used for timestomping. High entropy in a command line can indicate obfuscation or encoding. By baselining normal command-line entropy for each host and alerting on significant deviations, especially when correlated with keywords like 'CreationTime', we can uncover sophisticated attempts to evade simple signature-based detection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each new_process_event
          CALCULATE command_line_entropy
          IF entropy > host_entropy_baseline_threshold AND command_line CONTAINS timestomp_keywords
          THEN ALERT "Anomalous high-entropy command with timestomp keywords detected"
  - question: Can a machine learning model identify high-risk command lines that contain file modification syntax?
    context: |
      This question applies machine learning to classify the maliciousness of command lines in real time. A model trained on features like n-grams and character distribution can learn the subtle patterns of malicious commands, providing a more robust detection method than static rules for identifying timestomping and other malicious activities executed via the command line.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each new_process_event
          SCORE command_line with ML_classifier
          IF score > high_risk_threshold AND command_line CONTAINS file_modification_syntax
          THEN ALERT "High-risk command line detected by ML model"
  - question: Have any files been created or written with a timestamp significantly older than the event itself?
    context: |
      This question seeks to find direct evidence of timestamp backdating. A file's metadata timestamp should be very close to the system event time that recorded its creation or modification. A significant discrepancy, where the file's timestamp is much older than the event's, strongly suggests intentional manipulation to make the file appear as if it has existed on the system for a longer period.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Zeek files.log
      - Critical file system directories on endpoints and servers (e.g., C:\Windows\System32, user profile directories), temporary directories, and network file shares.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH file_creation_or_write_events
          WHERE File.Timestamp < (Event.Timestamp - 5 minutes)
          RETURN matching_events
  - question: Are there any file creation events where the time difference between the event and the file's creation timestamp is an extreme statistical outlier?
    context: |
      This question uses a statistical approach to find anomalous timestamp deltas. By analyzing the distribution of time differences between file creation events and the files' own creation timestamps across the enterprise, we can identify outliers. An event in an extreme lower percentile indicates a file was created with a timestamp that is anomalously older than typical for the environment, pointing to potential timestomping.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Zeek files.log
      - Critical file system directories on endpoints and servers (e.g., C:\Windows\System32, user profile directories), temporary directories, and network file shares.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          CALCULATE distribution of (Event.Timestamp - File.CreationTime) for all file_creation_events
          FOR each new_file_creation_event
          IF (Event.Timestamp - File.CreationTime) is in 1st_percentile
          THEN ALERT "Anomalous file timestamp delta detected"
  - question: Does a time-series analysis of file timestamp deltas on a specific host reveal any anomalous backdating events?
    context: |
      This question applies time-series analysis to detect deviations in timestamping behavior on a per-host basis. By modeling the typical stream of deltas between event and file timestamps, an algorithm like ARIMA can learn a host's normal pattern. A significant negative anomaly in this time series would indicate a file was created with an unusually old timestamp compared to that specific host's baseline, signaling a likely timestomping event.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Zeek files.log
      - Critical file system directories on endpoints and servers (e.g., C:\Windows\System32, user profile directories), temporary directories, and network file shares.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MODEL time_series of (Event.Timestamp - File.CreationTime) per host
          FOR each new_delta
          IF model_detects_significant_negative_anomaly(new_delta)
          THEN ALERT "Time-series anomaly in file timestamp delta detected on host"
  - question: Are there any files on NTFS volumes with a mismatch between their $STANDARD_INFORMATION ($SI) and $FILE_NAME ($FN) timestamps?
    context: |
      This question targets a specific artifact of timestomping on NTFS file systems. The Master File Table (MFT) contains two sets of timestamps for a file: $SI and $FN. While they should be identical, some timestomping tools only modify the $SI timestamps, leaving the $FN timestamps untouched. Detecting a mismatch between these two is a high-fidelity indicator of file timestamp manipulation.
    answer_sources:
      - EDR file system telemetry
      - MFT Record Data
      - NTFS volumes on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SCAN MFT records on target systems
          FOR each file_record
          IF record.$SI.timestamp != record.$FN.timestamp
          THEN ALERT "MFT timestamp mismatch detected for file"
  - question: Is there a host showing a statistically significant increase in the percentage of files with MFT timestamp mismatches?
    context: |
      This question provides a host-level view of MFT timestamp manipulation. A single mismatch could be an anomaly, but a sudden increase in the proportion of files with mismatched timestamps on a single host is a strong indicator of widespread malicious activity, such as an adversary attempting to hide a large number of dropped files or modified tools.
    answer_sources:
      - EDR file system telemetry
      - MFT Record Data
      - NTFS volumes on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, on a daily basis:
          CALCULATE percentage of files with MFT timestamp mismatches
          ESTABLISH baseline for this percentage
          IF current_percentage > baseline_99th_percentile
          THEN ALERT "Anomalous increase in MFT timestamp mismatches on host"
  - question: Can a host-level anomaly detection model, incorporating MFT mismatch data, identify compromised systems?
    context: |
      This question integrates the high-fidelity MFT mismatch indicator into a broader host-based risk assessment model. The presence of a timestamp mismatch is a strong feature. When combined with other suspicious signals like anomalous network connections or unsigned code execution, it can significantly increase a host's risk score in an unsupervised model, helping to pinpoint compromised systems that require immediate attention.
    answer_sources:
      - EDR file system telemetry
      - MFT Record Data
      - NTFS volumes on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host
          GENERATE feature `has_mft_timestamp_mismatch`
          INPUT feature into host-level anomaly detection model (e.g., Isolation Forest)
          IF model flags host as anomalous
          THEN ALERT "Host flagged as high-risk, possibly due to MFT mismatches"
  - question: Has a new file, especially an executable in a user directory, been created with timestamps identical to a common system file like kernel32.dll?
    context: |
      This question aims to detect timestamp cloning, where an adversary copies the timestamps from a legitimate, trusted system file onto their malware to make it look benign. A newly created executable in a temporary or user-writable directory that shares its exact creation and modification times with a ubiquitous OS file is highly suspicious and a strong indicator of this evasion technique.
    answer_sources:
      - Sysmon Event ID 11
      - User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\ProgramData on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          ON file_creation event (especially .exe in user directory)
          SEARCH for other files with same CreationTime and LastWriteTime
          IF file shares timestamps with known system file (e.g., kernel32.dll)
          THEN ALERT "Potential timestamp cloning from system file detected"
  - question: Has a new file been created with a set of MACE timestamps that is statistically very common across the environment?
    context: |
      This question uses a statistical method to identify timestamp cloning at scale. Legitimate OS files installed at the same time will share identical MACE (Modification, Access, Creation, Entry) timestamps. By hashing these timestamp vectors and tracking their frequency, we can identify highly common sets. A new file appearing with one of these extremely frequent timestamp hashes is a statistical anomaly and likely a result of cloning.
    answer_sources:
      - Sysmon Event ID 11
      - User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\ProgramData on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MAINTAIN frequency count of MACE timestamp hashes
          ON new_file_creation event
          CALCULATE MACE_hash for the new file
          IF MACE_hash_frequency is in 99.9th percentile
          THEN ALERT "Statistical indicator of timestamp cloning detected"
  - question: Can a clustering algorithm identify a new file as an outlier based on its path, despite its timestamps matching a large cluster of legitimate OS files?
    context: |
      This question applies unsupervised machine learning to detect timestamp cloning. A density-based clustering algorithm can group files based on their MACE timestamps. Legitimate OS files will form large, dense clusters. A new file that falls into one of these clusters (due to cloned timestamps) but has an anomalous attribute, like being located in `%APPDATA%`, can be identified as a high-confidence outlier, effectively separating the malicious file from the legitimate ones it's trying to imitate.
    answer_sources:
      - Sysmon Event ID 11
      - User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\ProgramData on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          CLUSTER newly created files using MACE timestamps (e.g., DBSCAN)
          FOR each file in a large OS file cluster
          IF file.path is anomalous (e.g., in %APPDATA%)
          THEN ALERT "Outlier file detected in OS timestamp cluster, likely cloning"
  - question: Are there any files on the file system with a creation time that is more recent than their last modification time?
    context: |
      This question looks for a definitive and illogical state in file metadata. It is logically impossible for a file to be modified before it is created. The condition `CreationTime > LastWriteTime` is a direct contradiction of normal file system behavior and serves as a nearly incontrovertible proof of timestamp manipulation.
    answer_sources:
      - Sysmon Event ID 11
      - MFT Record Data
      - NTFS volumes on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH file_system_data
          WHERE file.CreationTime > file.LastWriteTime
          THEN ALERT "Illogical timestamp detected (Creation > Modification)"
  - question: Is any host exhibiting a sudden increase in the number of files with illogical, inverted timestamps?
    context: |
      This question tracks the prevalence of illogical timestamps on a per-host basis over time. While a single instance is a high-fidelity alert, tracking the count can reveal the scope of an incident. A sudden spike in the number of files with `CreationTime > LastWriteTime` on a host suggests a broader or more automated manipulation process is underway.
    answer_sources:
      - Sysmon Event ID 11
      - MFT Record Data
      - NTFS volumes on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, on a daily basis:
          COUNT files where CreationTime > LastWriteTime
          IF count > 0
          THEN ALERT "Host contains files with illogical timestamps"
  - question: Can the presence of illogical timestamps be used as a critical feature to increase a host's risk score in a compromise detection model?
    context: |
      This question highlights the value of the illogical timestamp indicator as a powerful feature for machine learning models. Because it is such a strong signal of manipulation, a simple boolean feature (`has_illogical_timestamp`) would carry significant weight in any supervised or unsupervised model designed to assess host risk, dramatically increasing the likelihood of correctly identifying a compromised system.
    answer_sources:
      - Sysmon Event ID 11
      - MFT Record Data
      - NTFS volumes on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host
          GENERATE feature `has_illogical_timestamp`
          INPUT feature into host-based risk scoring model
          ELEVATE host risk score if feature is true