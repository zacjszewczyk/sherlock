name: T1574.013: KernelCallbackTable
id: 4e99a1b2-8f9a-4c9d-8f9b-6b4d3c2a1b0e
description: This playbook helps analysts investigate whether an adversary is hijacking process execution flow via the KernelCallbackTable. This technique can be used to achieve persistence, escalate privileges, or evade defenses by injecting malicious code into legitimate, high-integrity GUI processes. Investigations should focus on identifying processes created by known malicious tools, anomalous parent-child process relationships involving GUI applications, suspicious handle requests with write access to GUI processes, unexpected privilege escalations from GUI processes, and unusual network or system activity originating from these seemingly benign applications.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any newly created processes associated with malware or tools known to use KernelCallbackTable hijacking?
    context: This question aims to detect the presence of known threats that leverage KernelCallbackTable hijacking. By comparing the file hashes of all new processes against a threat intelligence feed, analysts can quickly identify malware (e.g., FinFisher, Lazarus tooling) that uses this specific technique for persistence. A match is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Threat Intelligence Feed
      - All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event (WinEventID 4688)
            GET file_hash of new_process
            IF file_hash IN known_KernelCallbackTable_malware_hashes
              ALERT "Known malware hash detected"
  - question: Are there any newly executed files that are extremely rare in the environment and appear to be packed or encrypted?
    context: This question helps identify novel or unknown malware that might use KernelCallbackTable hijacking. Adversaries often pack or encrypt their payloads to evade signature-based detection, which results in high file entropy. A combination of very low prevalence (i.e., the file has run on very few machines) and high entropy is a strong indicator of a suspicious executable that warrants further investigation.
    answer_sources:
      - Windows Event ID 4688
      - File entropy analysis tools
      - All Windows Endpoints and Servers
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new file_hash from process_creation_events
            CALCULATE prevalence (count of hosts) over 30 days
            CALCULATE file_entropy
            IF prevalence < threshold (e.g., 0.1%) AND file_entropy > threshold (e.g., 7.5)
              ALERT "Rare, high-entropy executable detected"
  - question: Can a machine learning model identify suspicious process creation events indicative of KernelCallbackTable hijacking based on their characteristics?
    context: This question leverages machine learning to detect variants of malware that may not match known hashes or simple rules. By training a model on features like parent process, command line arguments, and file properties, the system can learn the patterns of both benign and malicious process creations. It can then score new events in real-time, flagging those that are highly probable to be malicious, thus catching novel threats that use this technique.
    answer_sources:
      - Windows Event ID 4688
      - ML model predictions
      - All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event
            EXTRACT features (parent_process, cmd_line, file_properties)
            SCORE event with pre-trained classification_model
            IF score > high_probability_threshold
              ALERT "ML model detected high-probability malicious process creation"
  - question: Is a common GUI application (e.g., explorer.exe, chrome.exe) being used to directly create or modify a persistence mechanism like a scheduled task or an autorun registry key?
    context: This is highly suspicious because GUI applications typically do not perform these administrative actions. Adversaries who have hijacked a GUI process's execution flow via KernelCallbackTable might use the compromised process to establish persistence. This query looks for that specific anomalous behavior.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Windows Event ID 4698 (Scheduled Task Creation)
      - Windows Event ID 4657 (Registry Modification)
      - User Workstations, Domain Controllers, Member Servers, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          WATCHLIST_GUI = [explorer.exe, chrome.exe, outlook.exe, ...]
          WATCHLIST_PERSISTENCE_EXE = [schtasks.exe, reg.exe]
          WATCHLIST_AUTORUN_KEYS = [HKLM\\...\\Run, HKCU\\...\\Run, ...]

          FOR each process_creation_event
            IF child_process IN WATCHLIST_PERSISTENCE_EXE AND parent_process IN WATCHLIST_GUI
              ALERT "GUI process spawned persistence tool"

          FOR each registry_modification_event
            IF modified_key IN WATCHLIST_AUTORUN_KEYS AND subject_process IN WATCHLIST_GUI
              ALERT "GUI process modified autorun key"
  - question: Has a GUI application spawned an unusually rare child process, particularly one associated with persistence?
    context: This question uses statistical analysis to find anomalies. Legitimate GUI applications have a predictable set of child processes they normally spawn. By baselining this behavior, we can detect when a hijacked GUI process spawns an unexpected or never-before-seen child process (like schtasks.exe), which is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Domain Controllers, Member Servers, Terminal Servers
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: |
          WATCHLIST_GUI = [explorer.exe, ...]
          FOR each parent_process in WATCHLIST_GUI
            CALCULATE historical frequency of all child_processes over 30 days
          FOR each new process_creation_event where parent is in WATCHLIST_GUI
            IF frequency of child_process < rarity_threshold (e.g., 1st percentile)
              ALERT "GUI process spawned statistically rare child process"
  - question: Are there any anomalous sequences of process and persistence events that deviate from normal administrative behavior?
    context: This question aims to identify unusual chains of events that represent a malicious workflow. By clustering sequences like <parent, child, command-line>, we can group together common, benign activities. Sequences that are outliers or form very small clusters are anomalous and likely represent a hijacked process being used to establish persistence in a non-standard way.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Domain Controllers, Member Servers, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host
            CREATE sequences of <parent, child, cmd_args> for persistence events
            CLUSTER all sequences using DBSCAN or similar algorithm
            FOR each sequence classified as an outlier/noise
              ALERT "Anomalous process-persistence sequence detected"
  - question: Did a GUI process have its memory written to, and then shortly after, did that same process create a persistence mechanism?
    context: This is a high-fidelity detection for process hijacking. The sequence of events—an external process getting write access to a GUI process's memory, followed by that GUI process creating a scheduled task or autorun key—directly corresponds to the attacker's workflow of injecting code then executing it to establish persistence. The tight time window (5 minutes) makes the correlation very strong.
    answer_sources:
      - Windows Event ID 4656 (Handle Request)
      - Windows Event ID 4698 (Scheduled Task Creation)
      - Windows Event ID 4657 (Registry Modification)
      - User Workstations, Application Servers, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          WRITE_ACCESS = [PROCESS_VM_WRITE, PROCESS_VM_OPERATION, PROCESS_ALL_ACCESS]
          ON handle_request_event (WinEventID 4656) with access IN WRITE_ACCESS to target_gui_process
            WATCH for persistence_event (WinEventID 4698, 4657) from target_gui_process.PID within 5 minutes
            IF found
              ALERT "Process injection followed by persistence creation detected"
  - question: Is a specific process causing GUI applications to create persistence mechanisms at an anomalously high rate?
    context: This question seeks to identify the malicious source process that is injecting into other processes. By tracking the causal link between a handle request from a source process and a subsequent persistence action by the target process, we can build a baseline. If a particular source process (e.g., malware.exe) consistently causes its targets to create persistence, its rate will deviate from the norm, flagging it as the likely culprit.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Application Servers, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each unique (source_process, target_gui_process) pair
            CALCULATE rate of (handle_request -> persistence_action)
          ESTABLISH baseline rate for all pairs
          IF rate for a specific pair > statistical_threshold (e.g., 3*std_dev)
            ALERT "Anomalous rate of persistence creation after handle request"
  - question: Can a sequence-based machine learning model detect anomalous chains of events related to process handle manipulation and persistence?
    context: This question uses a sophisticated ML approach to find unusual attack paths. An LSTM autoencoder is trained on streams of normal security events on a host. When an anomalous sequence occurs, like a non-standard process requesting write access to explorer.exe followed by a run key modification, the model will fail to reconstruct it accurately, resulting in a high reconstruction error and triggering an alert.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Application Servers, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host, create time-ordered sequences of security events
          INPUT sequences into pre-trained LSTM_Autoencoder_model
          CALCULATE reconstruction_error for each sequence
          IF reconstruction_error > anomaly_threshold
            ALERT "ML model detected anomalous event sequence"
  - question: Is a process running at a lower integrity level attempting to gain write access to a process at a higher integrity level?
    context: This is a direct query for a classic privilege escalation attempt. The Windows integrity level mechanism is designed to prevent this. A process at a Medium integrity level should not be able to write to the memory of a High or System integrity process. An attempt to do so is a strong indicator of an exploit or a technique like KernelCallbackTable hijacking being used to bypass this security control.
    answer_sources:
      - Windows Event ID 4656
      - Process integrity level data (from event enrichment)
      - User Workstations, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          WRITE_ACCESS = [PROCESS_VM_WRITE, PROCESS_ALL_ACCESS]
          FOR each handle_request_event (WinEventID 4656)
            IF object_type == 'Process' AND access IN WRITE_ACCESS
              AND source_integrity_level < target_integrity_level
              ALERT "Privilege escalation attempt: Low-to-high integrity process write"
  - question: Are there statistically rare or anomalous instances of lower-integrity processes requesting handles to higher-integrity processes?
    context: While any low-to-high integrity write request is suspicious, some might be more indicative of an attack than others. This question aims to prioritize alerts by scoring them based on rarity. For example, a random process writing to lsass.exe (System integrity) is far more anomalous and dangerous than a more common interaction related to a UAC prompt. By focusing on the rarest combinations, analysts can find the most critical threats first.
    answer_sources:
      - Windows Event ID 4656
      - Process integrity level data
      - User Workstations, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          GATHER all (source_IL, target_IL, target_process) tuples from WinEventID 4656
          CALCULATE frequency of each tuple
          FOR each new event where source_IL < target_IL
            SCORE anomaly based on inverse frequency of the tuple
            ALERT on high-scored anomalies
  - question: Can a graph-based machine learning model identify anomalous process interactions that represent privilege escalation?
    context: This question applies advanced ML to model the complex web of process interactions. A Graph Neural Network (GNN) can learn the normal patterns of how processes request handles from each other, considering attributes like integrity levels. It can then identify new interactions (edges in the graph) that violate these learned patterns, such as a low-integrity process attempting to write to a high-integrity one.
    answer_sources:
      - Windows Event ID 4656
      - Process integrity level data
      - User Workstations, Terminal Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD process interaction graph from WinEventID 4656 events
          INPUT new interactions (edges) into pre-trained GNN model
          IF model flags an edge (e.g., low-to-high integrity write) as anomalous
            ALERT "GNN model detected anomalous process interaction"
  - question: Did a GUI application spawn a child process with a higher integrity level without going through the standard UAC prompt?
    context: This is a direct hunt for non-interactive privilege escalation. Normally, for a process to elevate its privileges, a user must approve a UAC prompt, which is handled by consent.exe. If a GUI process like explorer.exe (Medium integrity) spawns a cmd.exe (High integrity) without consent.exe being the parent, it indicates the UAC mechanism was bypassed, likely through a technique like KernelCallbackTable hijacking.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Process integrity level data
      - User Workstations, Servers with GUI access
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          WATCHLIST_GUI = [explorer.exe, ...]
          FOR each process_creation_event (WinEventID 4688)
            IF parent_process IN WATCHLIST_GUI
              AND parent_integrity_level < child_integrity_level
              AND parent_process != 'consent.exe'
              ALERT "Non-interactive privilege escalation from GUI process detected"
  - question: Is a GUI application spawning child processes with an anomalously high integrity level?
    context: This question uses statistical baselining to find abnormal escalations. For a given parent process like explorer.exe, almost all of its child processes will run at the same integrity level (Medium). By profiling this, we can easily spot when a child process is created with an outlier integrity level (e.g., High or System). This deviation from the norm strongly suggests a privilege escalation event has occurred.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Process integrity level data
      - User Workstations, Servers with GUI access
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each parent_process
            BASELINE the statistical distribution of its child_process_integrity_levels
          FOR each new process_creation_event
            IF child_integrity_level is a statistical outlier for its parent
              ALERT "Anomalous child process integrity level detected"
  - question: Can a machine learning model distinguish between legitimate (UAC-prompted) and illegitimate privilege escalation events?
    context: This question focuses on building a smart detector for privilege escalation. By training a model with labeled examples of both legitimate escalations (involving consent.exe) and illegitimate ones, the model can learn the specific characteristics that differentiate them. It can then be used to automatically flag suspicious escalations that originate from hijacked GUI processes.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Process integrity level data
      - User Workstations, Servers with GUI access
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event with parent_IL < child_IL
            EXTRACT features (parent, child, parent_IL, child_IL, parent_is_consent.exe)
            SCORE event with pre-trained escalation_classifier_model
            IF model predicts 'illegitimate'
              ALERT "ML model detected illegitimate privilege escalation"
  - question: Is a typically non-networked GUI application (e.g., notepad.exe) making outbound connections to known malicious destinations or newly registered domains?
    context: This question aims to unmask C2 communications hiding behind a legitimate process. Adversaries hijack trusted processes to bypass firewall rules and EDR detections. A process like notepad.exe making a network connection is already unusual; if that connection is to a known C2 server or a domain created very recently (a common tactic for attackers), it is a very strong signal of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156 (Network Connection)
      - Threat Intelligence Feed (C2 IPs/domains)
      - WHOIS data (for domain age)
      - Network Egress Points, User Workstations, DNS Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          WATCHLIST_GUI = [notepad.exe, ...]
          FOR each network_connection from process IN WATCHLIST_GUI
            GET destination_ip, destination_domain
            IF destination_ip/domain IN known_C2_feed
              OR domain_registration_age < 30 days
              ALERT "Suspicious network connection from GUI process"
  - question: Is a GUI process exhibiting anomalous network behavior, such as connecting to rare ports, using unusual TLS fingerprints, or requesting domains with high entropy?
    context: This question looks for subtle indicators of malicious network activity that might not be on an IOC list. By building a detailed baseline of what is "normal" for a process's network behavior (common ports, TLS parameters, domain patterns), we can detect when a hijacked process deviates. For example, a browser connecting with a rare JA3 hash would be flagged as anomalous.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, User Workstations, DNS Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each GUI process
            BASELINE normal_ports, normal_JA3_hashes, normal_domain_entropy
          FOR each new network_connection from GUI process
            IF connection_port is rare
              OR connection_JA3_hash is rare
              OR requested_domain_entropy is high
              ALERT "Anomalous network behavior from GUI process"
  - question: Is a GUI process suddenly sending out an anomalously large amount of data?
    context: This question is designed to detect data exfiltration that is being masked by a legitimate process. A time-series forecasting model can predict the expected amount of outbound traffic for a process based on its historical behavior. If the actual amount of data sent suddenly spikes far beyond the predicted range, it could indicate that an attacker has hijacked the process and is using it to exfiltrate stolen data.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points, User Workstations
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each critical GUI process
            TRAIN time-series model (e.g., ARIMA) on historical bytes_out
          FOR each new time interval
            PREDICT expected_bytes_out and confidence_interval
            IF actual_bytes_out > upper_confidence_bound
              ALERT "Anomalous data exfiltration volume from GUI process detected"
  - question: Is a trusted GUI application (e.g., Word, Outlook, Explorer) spawning a command shell or a system reconnaissance tool?
    context: This is a classic indicator of defense evasion and lateral movement preparation. Legitimate GUI applications have no reason to spawn processes like cmd.exe, powershell.exe, or whoami.exe. An adversary who has hijacked a GUI process will often use it to launch these tools to explore the system or execute further commands, all while appearing as the trusted parent process. This behavior should always be investigated.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          WATCHLIST_GUI = [explorer.exe, chrome.exe, winword.exe, ...]
          WATCHLIST_RECON = [cmd.exe, powershell.exe, whoami.exe, net.exe, ...]
          FOR each process_creation_event
            IF parent_process IN WATCHLIST_GUI AND child_process IN WATCHLIST_RECON
              ALERT "GUI process spawned shell or recon tool"
  - question: Has a statistically rare parent-child process relationship been observed, especially one with a high-entropy (obfuscated) command line?
    context: This question uses statistical analysis to find unseen or rare process behaviors. By calculating the probability of every parent-child pair in the environment, we can flag pairs that are extremely uncommon (e.g., winword.exe spawning net.exe). Additionally, high entropy in the command line of even a common process can indicate obfuscation used to hide malicious commands, adding another layer of detection.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE probability P(Child | Parent) for all historical process creations
          FOR each new process_creation_event
            CALCULATE command_line_entropy
            IF P(Child | Parent) < rarity_threshold OR command_line_entropy > high_entropy_threshold
              ALERT "Rare parent-child process pair or obfuscated command line detected"
  - question: Can an anomaly detection model, trained only on normal process creation behavior, identify novel malicious parent-child process relationships?
    context: This question applies unsupervised machine learning to find new attack patterns. By training a model like an Isolation Forest on only "good" data (all the normal parent-child relationships in your environment), it builds a profile of what's normal. Any new process creation that doesn't fit this profile is isolated quickly and flagged as an anomaly, without needing prior examples of the attack.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN One-Class SVM or Isolation Forest model on benign parent-child pairs
          FOR each new process_creation_event
            SCORE the parent-child pair with the model
            IF score indicates an anomaly (outside the learned boundary)
              ALERT "ML model detected anomalous parent-child process creation"
  - question: Has a single GUI process instance been observed exhibiting a chain of suspicious activities, such as being injected, spawning a shell, and then making a network connection?
    context: This question looks for the full attack chain, providing a very high-fidelity alert. A single anomalous event can sometimes be a false positive, but a sequence of related suspicious events (injection -> shell -> C2) tied to the same process is a strong indicator of compromise. Correlating these events provides a more complete picture of the attack.
    answer_sources:
      - Windows Event ID 4656 (Handle Request)
      - Windows Event ID 4688 (Process Creation)
      - Windows Event ID 5156 (Network Connection)
      - Zeek conn.log
      - User Workstations, Network Egress Points
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE across events by process_instance_id
          IF (Event 1: Handle request with write access to GUI process)
            AND (Event 2: GUI process spawns a shell)
            AND (Event 3: Shell makes external network connection)
            ALERT "Full attack chain detected: Injection -> Shell -> Network"
  - question: Has any single process instance accumulated a high-risk score by performing multiple suspicious actions?
    context: This approach assigns points to a process for each suspicious behavior it exhibits (e.g., spawning a shell, connecting to a rare IP). Only when the total risk score for that single process instance crosses a defined threshold is an alert generated. This helps to reduce noise and prioritize the most genuinely malicious processes.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User Workstations, Network Egress Points, File Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_instance
            INIT risk_score = 0
            IF spawns_shell THEN risk_score += 5
            IF connects_to_rare_ip THEN risk_score += 3
            IF creates_rare_child_process THEN risk_score += 2
            IF high_entropy_cmd_line THEN risk_score += 1
            IF risk_score > alert_threshold
              ALERT "Process instance exceeded risk score threshold"
  - question: Can unsupervised clustering identify entire process 'sessions' that are anomalous based on their complete lifecycle of activities?
    context: This question takes a holistic view of a process's life. It summarizes everything a single process instance does—child processes, network connections, files written—into a single "session" profile. By using a clustering algorithm like DBSCAN, normal, repetitive process behaviors will form large, dense clusters. A hijacked process, with its unique combination of malicious activities, will be identified as an outlier.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User Workstations, Network Egress Points, File Servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_instance
            CREATE feature_vector (session_profile) of all its activities
          CLUSTER all session_profiles using DBSCAN
          FOR each session_profile flagged as noise/outlier
            ALERT "Anomalous process session detected by clustering"