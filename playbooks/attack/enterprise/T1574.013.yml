name: T1574.013: KernelCallbackTable
id: 9e3b1c6d-5a8f-4b0e-9c1d-2f7a6b5c4d3e
description: This playbook helps identify adversary activity involving the hijacking of process execution flow via the KernelCallbackTable. It focuses on detecting this technique when used for persistence, privilege escalation, and defense evasion. The playbook provides investigative questions to uncover evidence such as processes matching known malicious hashes, anomalous process creation chains originating from GUI applications, unauthorized integrity level escalations, and trusted processes exhibiting suspicious network or command-line behavior.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly created process associated with known malware that uses KernelCallbackTable hijacking?
    context: Adversaries may use known malware or tools that employ KernelCallbackTable hijacking. This question aims to detect the execution of such files by matching their hash against a threat intelligence feed, providing a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "SEARCH process creation events (Event ID 4688). FOR each event, GET file hash of new process. COMPARE hash against threat intelligence feed for KernelCallbackTable malware. IF match, ALERT."
  - question: Is a newly observed executable file exhibiting characteristics of a novel or packed threat, such as being extremely rare and having high entropy?
    context: Novel or modified malware may not match known hashes. This question seeks to identify suspicious executables by looking for a combination of low enterprise-wide prevalence (rarity) and high file entropy, which often indicates the use of packing or encryption to evade signature-based detection.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "SEARCH process creation events (Event ID 4688). FOR each new hash, CALCULATE prevalence across all hosts over 30 days and CALCULATE file entropy. IF prevalence is very low AND entropy is high, FLAG for investigation."
  - question: Does a machine learning model classify a new process creation event as malicious based on its behavioral features?
    context: To detect previously unseen variants of malware, this question leverages a machine learning model. The model analyzes behavioral features from process creation events (e.g., parent process, command line) to score their likelihood of being malicious, enabling detection beyond simple hash matching.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "INPUT process creation event features (parent process, command line, file properties) into a pre-trained classification model. IF model output probability is high for 'malicious' class, ALERT."
  - question: Is a common GUI application spawning processes or modifying registry keys associated with establishing persistence?
    context: After hijacking a legitimate GUI process, an adversary may use its context to create persistence mechanisms like scheduled tasks or autorun registry keys. This question looks for this specific behavior, where a trusted process like 'explorer.exe' or 'outlook.exe' is the parent of a persistence-related action.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Domain Controllers, Member Servers, Terminal Servers
    range: last 90 days
    queries:
      - "SEARCH for process creation of 'schtasks.exe' OR 'reg.exe' where parent process is a common GUI application. ALSO, SEARCH for registry modifications to autorun keys where the acting process is a GUI application. IF found, ALERT."
  - question: Is a common GUI application spawning a statistically rare or never-before-seen child process associated with persistence?
    context: Legitimate GUI applications typically have a predictable set of child processes. This question aims to detect anomalies by baselining normal parent-child process relationships and alerting when a GUI process spawns a persistence-related child (e.g., 'schtasks.exe') that is statistically rare or has never been observed before for that parent.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Domain Controllers, Member Servers, Terminal Servers
    range: last 90 days
    queries:
      - "MAINTAIN baseline of child process frequencies for each GUI parent process. ON new process creation, IF child is a persistence tool AND its frequency for that parent is below a rarity threshold, ALERT."
  - question: Does a sequence of events involving a GUI application and a persistence mechanism represent an anomalous outlier compared to normal administrative behavior?
    context: This question uses unsupervised machine learning to identify anomalous process chains. By clustering sequences of events (e.g., parent, child, command line), it can distinguish unusual persistence attempts from common, legitimate administrative actions, flagging outliers for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Domain Controllers, Member Servers, Terminal Servers
    range: last 90 days
    queries:
      - "MODEL process-persistence event chains as feature vectors. CLUSTER these vectors using an algorithm like DBSCAN. INVESTIGATE chains identified as outliers or part of very small clusters."
  - question: Did a process receive write access to a GUI process shortly before that same GUI process initiated a persistence action?
    context: This is a high-fidelity detection that directly connects the act of process injection with a subsequent persistence action. This question looks for a stateful sequence where a handle with write access is granted to a GUI process, and that same process PID is then used to create a persistence mechanism.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - "CORRELATE events by process PID. IF Event ID 4656 with write access to a GUI process is followed within 5 minutes by a persistence event (e.g., Event ID 4698) from the same PID, ALERT."
  - question: Is a specific source process causing target GUI processes to perform persistence actions at an anomalously high rate?
    context: Rather than looking at a single event, this question analyzes the causal relationship between processes over time. It baselines the rate at which source processes cause target GUI processes to perform persistence actions and alerts when a specific source process's rate becomes a statistical outlier.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - "FOR each source process, track the rate at which its target GUI processes later perform persistence actions. ESTABLISH a baseline rate. IF a source process's rate exceeds a statistical threshold (e.g., 3 standard deviations above mean), ALERT."
  - question: Does a sequence of security events, including a write-access handle request to a GUI process followed by a persistence action, have a high anomaly score from a sequence-based model?
    context: This question applies advanced anomaly detection, like an LSTM Autoencoder, to streams of security events. The model learns what normal sequences look like and flags event chains with high reconstruction error—such as a non-standard process getting write access to 'explorer.exe' followed by a run key modification—as highly anomalous.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4698
      - Windows Event ID 4657
      - User Workstations, Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - "INPUT streams of security events per host into a trained sequence model (e.g., LSTM Autoencoder). IF the model's reconstruction error for a sequence is high, FLAG as anomalous for investigation."
  - question: Is a process with a lower integrity level attempting to gain write access to a process with a higher integrity level?
    context: A core principle of Windows security is that lower-integrity processes cannot write to higher-integrity processes. An attempt to do so is a strong indicator of a privilege escalation attempt. This question seeks to directly detect this violation of security boundaries.
    answer_sources:
      - Windows Event ID 4656
      - User Workstations, Terminal Servers
    range: last 90 days
    queries:
      - "SEARCH for handle manipulation events (Event ID 4656) with write access. IF source process integrity level is lower than target process integrity level, ALERT."
  - question: Is a handle request from a lower-integrity process to a higher-integrity process statistically rare based on the specific processes and integrity levels involved?
    context: While any low-to-high integrity write is suspicious, some might be more indicative of an attack than others. This question contextualizes the alert by considering the rarity of the specific interaction (e.g., a custom malware process writing to lsass.exe is more anomalous than a known UAC-related interaction).
    answer_sources:
      - Windows Event ID 4656
      - User Workstations, Terminal Servers
    range: last 90 days
    queries:
      - "CALCULATE the frequency of all (Source Integrity, Target Integrity, Target Process) tuples from Event ID 4656. SCORE anomalies based on the statistical rarity of the observed tuple."
  - question: Does a graph-based anomaly detection model flag a handle request from a lower to a higher integrity process as anomalous?
    context: This question models the entire system's process interactions as a graph. A Graph Neural Network (GNN) can learn the normal patterns of these interactions. A handle request from a low to high integrity process would violate the learned security boundaries and be flagged by the model as a significant anomaly.
    answer_sources:
      - Windows Event ID 4656
      - User Workstations, Terminal Servers
    range: last 90 days
    queries:
      - "MODEL process interactions as a graph. INPUT new handle request events into a trained GNN. IF the model flags a low-to-high integrity write request as anomalous, ALERT."
  - question: Did a GUI application spawn a child process with a higher integrity level without a corresponding UAC event?
    context: Legitimate privilege escalation on Windows typically involves a User Account Control (UAC) prompt, logged via 'consent.exe'. This question looks for escalations that bypass this mechanism, which is a strong sign of a successful exploit, by identifying when a GUI process spawns a higher-integrity child without 'consent.exe' being the parent.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - User Workstations, Servers with GUI access
    range: last 90 days
    queries:
      - "SEARCH for process creation events (Event ID 4688) where child integrity is > parent integrity, parent is a GUI app, AND parent is NOT 'consent.exe'. IF found, ALERT."
  - question: Is a GUI application spawning a child process with a statistically anomalous integrity level (e.g., High or System)?
    context: A process like 'explorer.exe' almost always runs at and spawns processes at 'Medium' integrity. This question establishes a baseline of normal child process integrity levels for each parent and alerts when a child is spawned at a level that is a statistical outlier, indicating an abnormal and likely malicious elevation.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - User Workstations, Servers with GUI access
    range: last 90 days
    queries:
      - "FOR each parent process, PROFILE the normal distribution of its child processes' integrity levels. IF a new child process is created with an integrity level that is a statistical outlier for that parent, ALERT."
  - question: Does a machine learning model classify a process creation event as an illegitimate privilege escalation due to a non-UAC elevation from a GUI process?
    context: This question uses a supervised model trained to distinguish between legitimate (UAC-based) and illegitimate escalations. By analyzing features like parent/child processes and their integrity levels, the model can automatically flag suspicious elevations that originate from a hijacked GUI process.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - User Workstations, Servers with GUI access
    range: last 90 days
    queries:
      - "INPUT process creation features (parent, child, parent integrity, child integrity, is_consent_exe) into a trained classification model. IF model predicts 'illegitimate escalation', ALERT."
  - question: Is a GUI process, which typically has limited network activity, making an outbound connection to a known malicious or suspicious destination?
    context: Adversaries may hijack trusted processes like browsers or even 'notepad.exe' to blend in their C2 traffic. This question aims to detect this by correlating process network activity with threat intelligence, alerting when a GUI process communicates with a known C2 server or a newly registered domain.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, User Workstations, DNS Servers
    range: last 90 days
    queries:
      - "CORRELATE process network events with network gateway logs. IF process is a GUI app AND destination matches a C2 feed OR is a newly registered domain, ALERT."
  - question: Is the network behavior of a GUI process (e.g., destination port, domain entropy, TLS fingerprint) a significant statistical outlier compared to its established baseline?
    context: Beyond known-bad destinations, this question seeks to find anomalous network behavior. It establishes a baseline for each GUI process across multiple dimensions (ports, domain patterns, TLS fingerprints) and alerts when a new connection deviates significantly, suggesting it is not part of the process's normal function.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, User Workstations, DNS Servers
    range: last 90 days
    queries:
      - "BASELINE network behavior for each GUI process (ports, domain entropy, JA3 hashes). IF a new connection from a process is a statistical outlier on any of these metrics, ALERT."
  - question: Is a GUI process exfiltrating an anomalously large amount of data compared to its predicted traffic volume?
    context: Hijacked processes can be used for data exfiltration. This question models the normal outbound data volume for critical GUI processes as a time series and uses forecasting to predict expected traffic. An alert is generated if the actual traffic significantly exceeds the predicted amount, indicating potential data theft.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, User Workstations, DNS Servers
    range: last 90 days
    queries:
      - "MODEL outbound data volume for each GUI process as a time series. FORECAST expected volume for the next interval. IF actual volume significantly exceeds the forecast's confidence interval, ALERT."
  - question: Is a trusted GUI application spawning a command-line interpreter or a system reconnaissance tool?
    context: It is highly unusual for applications like Word or Chrome to spawn 'cmd.exe', 'powershell.exe', or tools like 'whoami.exe'. This behavior is a classic sign of post-exploitation activity, where an adversary uses the context of a trusted process to run commands. This question creates a high-priority alert for this specific parent-child relationship.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "SEARCH for process creation events where parent is a trusted GUI app AND child is a shell or recon tool (cmd.exe, powershell.exe, etc.). IF found, ALERT."
  - question: Is a GUI application spawning a child process that represents a statistically rare parent-child relationship, or are the command-line arguments highly obfuscated?
    context: This question looks for two indicators of malicious activity: a parent-child process relationship that is extremely rare or has never been seen in the environment, and command-line arguments with high entropy, which suggests obfuscation. Either of these, when originating from a GUI process, is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "CALCULATE conditional probability P(Child|Parent) from historical data. IF a new GUI-parented event has a very low probability OR has high command-line entropy, ALERT."
  - question: Does an anomaly detection model, trained on benign process relationships, flag a parent-child pair involving a GUI application as a novel outlier?
    context: This question uses a one-class anomaly detection model (e.g., Isolation Forest) trained exclusively on normal process creation events. This allows the model to build a tight boundary around "normal," causing any novel or malicious parent-child pair, especially one originating from a hijacked GUI process, to be flagged as an anomaly.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "TRAIN a One-Class SVM or Isolation Forest on benign parent-child process pairs. SCORE new pairs in real-time. IF a pair falls outside the learned 'normal' boundary, FLAG as an anomaly."
  - question: Is there a correlated sequence of events where a process gains write access to a GUI process, which then spawns a shell that initiates an external network connection?
    context: This question connects multiple stages of an attack into a single, high-confidence detection. It looks for a specific chain of events: injection (write access), local execution (spawning a shell), and C2 communication (network connection), all linked to the same process instance, indicating a full compromise chain.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User Workstations, Network Egress Points, File Servers
    range: last 90 days
    queries:
      - "DEFINE a multi-stage rule: Stage 1: write access to GUI process (Event 4656). Stage 2: GUI process spawns shell (Event 4688). Stage 3: Shell makes external network connection (Event 5156). IF all stages occur in sequence for the same process, ALERT."
  - question: Does a specific GUI process instance accumulate a high risk score based on a combination of low-prevalence behaviors observed in a short time window?
    context: Instead of relying on a single indicator, this question implements a risk scoring system. A process's risk score increases as it performs various anomalous actions (e.g., spawning a shell, rare network connection). An alert is triggered only when the cumulative score passes a threshold, reducing noise and focusing on truly suspicious process instances.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User Workstations, Network Egress Points, File Servers
    range: last 90 days
    queries:
      - "FOR each process instance, increment a risk score for each anomalous behavior observed (e.g., +5 for spawning shell, +3 for rare IP). IF score exceeds a dynamic threshold, ALERT."
  - question: Is a GUI process session identified as an anomalous outlier by a clustering algorithm due to its unique combination of activities (e.g., child processes, network connections)?
    context: This question treats all activity from a single process instance as a 'session'. By summarizing these sessions into feature vectors and using unsupervised clustering, normal GUI process behavior will form dense clusters. Hijacked processes, with their unique mix of activities, will be isolated as noise points or small clusters, making them easy to identify.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User Workstations, Network Egress Points, File Servers
    range: last 90 days
    queries:
      - "SUMMARIZE activities of each process instance into a feature vector. CLUSTER these vectors using DBSCAN. INVESTIGATE vectors that are flagged as noise or belong to very small clusters."