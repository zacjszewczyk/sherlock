name: T1547.014: Active Setup
id: 5a1b3c2d-8e7f-4a6b-9c1d-0f2e3a4b5c6d
description: This playbook investigates whether an adversary is leveraging the Active Setup feature in Windows for persistence or privilege escalation. Adversaries can modify the 'StubPath' registry value under 'HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\' to point to a malicious executable. This executable is then run with user privileges upon their next logon, establishing persistence. This playbook also covers the use of Active Setup to trigger a User Account Control (UAC) bypass for privilege escalation, often by executing auto-elevating system binaries with malicious parameters. The investigation focuses on identifying anomalous registry modifications, unusual process executions post-logon, and specific event sequences indicative of this technique.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Has a known malicious file path, name, or hash been added to the Active Setup 'StubPath' registry value?
    context: This question aims to detect the most straightforward abuse of Active Setup, where an adversary uses a known malicious executable for persistence. By modifying the 'StubPath' registry value, the adversary can ensure their malware is executed every time a user logs in. Comparing the file path and its hash against threat intelligence feeds is a high-fidelity method for identifying known threats.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry hives (specifically HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\) on all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH registry_events WHERE event_id=13 AND target_object ENDS_WITH 'StubPath' | EXTRACT new_path | HASH file(new_path) | LOOKUP threat_intelligence(new_path, file_hash)
  - question: Are there any rare or outlier 'StubPath' values present across the environment that could indicate a targeted persistence attempt?
    context: Adversaries often use custom tools or scripts that will not be present on many machines. This makes their 'StubPath' entries statistically rare compared to legitimate software. Identifying these low-prevalence outliers is an effective way to hunt for unknown or targeted malware that is not yet in threat intelligence feeds. A low prevalence threshold helps filter out common, legitimate software entries.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry hives (specifically HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\) on all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH registry_events | STATS count(host) BY stubpath_value | CALCULATE prevalence = count / total_hosts | WHERE prevalence < 0.001
  - question: Do any 'StubPath' values exhibit characteristics (such as high entropy, unusual length, or suspicious keywords) that a machine learning model would classify as malicious?
    context: This question leverages machine learning to move beyond simple signature or prevalence analysis. Malicious paths often have distinct featuresâ€”they might be obfuscated (high entropy), unusually long, or reside in temporary/data directories. By training a model on these features, analysts can identify novel malicious 'StubPath' entries that might otherwise evade detection.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry hives (specifically HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\) on all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH registry_events WHERE event_id=13 AND target_object ENDS_WITH 'StubPath' | EXTRACT stubpath_value | APPLY machine_learning_model(stubpath_value) | WHERE prediction='malicious'
  - question: Has an Active Setup 'StubPath' been modified to execute a command via a scripting interpreter or from a non-standard, user-writable directory?
    context: Legitimate 'StubPath' values typically point to executables in standard program installation directories (like Program Files). Adversaries often abuse scripting interpreters (PowerShell, cmd) for execution or place their payloads in user-writable locations (like %TEMP% or %APPDATA%) to bypass certain security controls. This question helps detect these common "living-off-the-land" and file placement techniques.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry and process execution logs on all Windows endpoints, with a focus on standard user workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH registry_events WHERE event_id=13 AND target_object ENDS_WITH 'StubPath' | REGEX details_field MATCHES '(powershell|cmd|wscript|cscript|mshta|C:\\Users\\|C:\\ProgramData\\|C:\\Windows\\Temp\\)'
  - question: Is a new 'StubPath' pointing to an executable in a directory not previously seen for that host, and does the path have unusually high entropy?
    context: This question focuses on host-level behavioral anomalies. Each host tends to have a stable set of directories for legitimate Active Setup entries. A new path, especially one with high entropy suggesting obfuscation or randomization, is a strong indicator of suspicious activity. This method can detect novel threats without relying on pre-existing signatures.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry and process execution logs on all Windows endpoints, with a focus on standard user workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH registry_events WHERE event_id=13 AND target_object ENDS_WITH 'StubPath' | BASELINE host, directory | DETECT new_directory for host | CALCULATE entropy(new_path) | WHERE new_directory=true AND entropy > threshold
  - question: Are there any anomalous processes being spawned by 'runonce.exe' (a common parent for Active Setup) shortly after user logon?
    context: Active Setup components are executed by 'runonce.exe'. By clustering all processes spawned by 'runonce.exe' across the enterprise, legitimate and common software updates will form large, dense clusters. Malicious or targeted payloads, being rare, will either not fit into any cluster (noise) or form very small clusters. This unsupervised learning approach is excellent for finding outliers that represent suspicious activity.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry and process execution logs on all Windows endpoints, with a focus on standard user workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events WHERE parent_process='runonce.exe' | EXTRACT features(path, command_line, hash) | APPLY clustering_algorithm(features) | IDENTIFY outliers_and_small_clusters
  - question: Following a user logon, was an unexpected process (not on the organizational allowlist) launched by 'runonce.exe' or 'explorer.exe'?
    context: This question seeks to identify unauthorized startup processes by correlating them with a user logon event. Active Setup items are executed in this post-logon, pre-desktop window. By maintaining an allowlist of known-good startup processes, any deviation, especially processes parented by 'runonce.exe' (for Active Setup) or 'explorer.exe' (a common fallback), can be quickly flagged as suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation and user logon logs from all Windows endpoints, especially those of privileged users.
    range: last 90 days
    queries:
      - pseudocode: SEARCH logon_events (type=2,10) AND process_events(parent='runonce.exe' OR parent='explorer.exe') | CORRELATE by host, within 2 minutes | WHERE process_name NOT IN allowlist
  - question: Did a user's recent logon session include the execution of a startup process that is historically rare for that specific user?
    context: This approach personalizes anomaly detection to the user level. Different users have different startup applications. By baselining what is normal for each individual, this method can detect when a new, infrequent process is introduced into their startup routine. A process that has rarely or never been seen for a particular user is a strong signal of a potential persistence mechanism being activated.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation and user logon logs from all Windows endpoints, especially those of privileged users.
    range: last 90 days
    queries:
      - pseudocode: SEARCH logon_events AND process_events within 2 minutes | PROFILE process executions by user | For new logon, CALCULATE process frequency in profile | WHERE frequency < 5th_percentile
  - question: Did the sequence of processes executed after a recent logon deviate significantly from the user's normal, learned startup behavior?
    context: This is an advanced machine learning approach that looks not just at *what* processes run, but in *what order*. An LSTM autoencoder can learn the normal temporal sequence of startup processes. An adversary inserting a malicious process via Active Setup will disrupt this sequence, leading to a high reconstruction error from the model. This can detect sophisticated attacks where the malicious process itself might be disguised, but its position in the execution chain is abnormal.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation and user logon logs from all Windows endpoints, especially those of privileged users.
    range: last 90 days
    queries:
      - pseudocode: SEARCH logon_events AND subsequent process_events | CREATE sequence of process names | APPLY LSTM_autoencoder(sequence) | WHERE reconstruction_error > threshold
  - question: Has Active Setup been configured to execute a known UAC bypass technique using an auto-elevating binary like 'fodhelper.exe' or 'cmstp.exe'?
    context: This question targets a specific method of privilege escalation where an adversary uses Active Setup to trigger a known User Account Control (UAC) bypass. By placing a command in 'StubPath' that launches a trusted, auto-elevating Windows binary with malicious parameters, the adversary can execute code with high privileges without a UAC prompt. This query looks for the specific signatures of these known techniques.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry hives and process command-line logs on all Windows workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH registry_events (target_object ENDS_WITH 'StubPath') AND process_events | LOOKUP for known UAC bypass patterns (e.g., fodhelper.exe with ms-settings registry changes)
  - question: Is an auto-elevating binary being launched via Active Setup with unusually long or complex command-line arguments?
    context: Legitimate uses of auto-elevating binaries typically involve simple, predictable command-line arguments. Adversaries abusing these for UAC bypass often pass long, obfuscated, or complex commands (e.g., encoded PowerShell). By baselining normal argument length and entropy, this question helps to spot anomalous invocations that are indicative of malicious activity.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry hives and process command-line logs on all Windows workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events WHERE process_name IN (auto_elevating_binaries) AND parent_process='runonce.exe' | BASELINE command_line length and entropy | WHERE length OR entropy > 99th_percentile
  - question: Based on a machine learning model, does the execution of an auto-elevating binary at logon show characteristics of a malicious UAC bypass?
    context: This question applies supervised machine learning to detect complex UAC bypass attempts. By training a model on a rich set of featuresâ€”including the parent process, command-line details, timing, and related registry eventsâ€”it can learn the subtle patterns that differentiate benign system functions from malicious exploitation of auto-elevating binaries initiated by Active Setup.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Registry hives and process command-line logs on all Windows workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events WHERE process_name IN (auto_elevating_binaries) | EXTRACT features (parent, command_line, timing) | APPLY ML_classifier(features) | WHERE prediction='malicious_uac_bypass'
  - question: Has a specific sequence of events been observed - an Active Setup 'StubPath' modification, followed by the launch of an auto-elevating binary, which then accesses the resource from the 'StubPath'?
    context: This question looks for a very specific chain of events that strongly indicates a UAC bypass via Active Setup. An adversary first stages their payload and points to it in the 'StubPath', then uses an auto-elevating binary to execute it with high privileges. Detecting this exact sequenceâ€”registry write, then process creation, then file/registry access by that new processâ€”is a high-fidelity indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Correlated registry modification, process creation, and file/registry access logs from all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEQUENCE [registry_write to StubPath] by [process_create of auto_elevating_binary] by [resource_access from new process to path from registry_write] within 5m
  - question: Is 'runonce.exe' spawning an auto-elevating binary, a statistically improbable parent-child process relationship?
    context: Normal system operations result in predictable parent-child process relationships. For example, 'svchost.exe' might spawn 'services.exe'. An auto-elevating binary like 'fodhelper.exe' is not typically spawned by 'runonce.exe'. By modeling these relationships and calculating probabilities, we can identify statistically unlikely events that point to an adversary manipulating system processes for privilege escalation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Correlated registry modification, process creation, and file/registry access logs from all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events | MODEL parent_child_probabilities | IDENTIFY low_probability_pair WHERE parent='runonce.exe' and child IN (auto_elevating_binaries)
  - question: Does a graph-based analysis of a user's logon session reveal an anomalous subgraph of interactions indicative of a UAC bypass?
    context: This question uses advanced graph-based machine learning to understand the complex relationships between events in a user session. A Graph Neural Network (GNN) can learn the structure of normal activity. An attack, like using Active Setup to launch a UAC bypass, creates an abnormal structure in the event graph (e.g., logon -> registry write -> 'runonce.exe' -> 'fodhelper.exe' -> payload execution). The GNN can detect this anomalous subgraph even if the individual events, in isolation, seem benign.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Correlated registry modification, process creation, and file/registry access logs from all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: BUILD session_graphs from event logs | TRAIN GNN on benign graphs | APPLY model to new graphs | IDENTIFY anomalous subgraphs involving logon, registry_write, and auto-elevating processes
  - question: Did a process initiated by Active Setup perform a high-privilege action, such as creating a new service, modifying a Run key, or writing to a protected system directory?
    context: This question tracks the *downstream activity* of a process launched via Active Setup. Even if the initial execution seems benign, its ultimate goal may be malicious. By correlating the initial process with subsequent privileged actions (like installing a service or writing to a Run key for further persistence), we can identify the full scope of the attack chain and confirm that a privilege escalation was successful.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7045
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - System service logs, process execution logs, and file/registry audit logs from critical system locations (e.g., C:\Windows\System32, HKLM\SYSTEM, HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run) on all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events where parent='runonce.exe' | GET process_guid | CORRELATE process_guid with subsequent events (service_creation, run_key_write, system32_file_write)
  - question: Did a user session involving an Active Setup execution accumulate an anomalously high risk score based on the actions performed?
    context: This question quantifies the risk of a session by assigning scores to various privileged actions. A normal user session has a predictable risk profile. When an adversary uses Active Setup to escalate privileges and perform follow-on actions (creating services, modifying critical registry keys), the session's aggregated risk score will spike. Comparing this score against a baseline for the user's role helps to identify sessions where an attacker has successfully escalated and is acting on objectives.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7045
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - System service logs, process execution logs, and file/registry audit logs from critical system locations (e.g., C:\Windows\System32, HKLM\SYSTEM, HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run) on all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: For each session with Active Setup execution, SCORE subsequent actions (e.g., service_creation=10) | AGGREGATE session_risk_score | COMPARE to user_role_baseline | ALERT if score > 99th_percentile
  - question: Did the sequence of system calls or events generated by a process from Active Setup deviate from the behavior of normal, benign processes?
    context: This question applies time-series anomaly detection to the behavior of a single process. Benign processes have a characteristic sequence of operations. A malicious process, even if disguised, will likely perform an unusual sequence of actions (e.g., read a specific registry key, unpack a file to a temp location, then create a new service). A model like Isolation Forest can identify these anomalous sequences without prior knowledge of the specific attack, making it effective against novel techniques.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7045
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - System service logs, process execution logs, and file/registry audit logs from critical system locations (e.g., C:\Windows\System32, HKLM\SYSTEM, HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run) on all Windows endpoints.
    range: last 90 days
    queries:
      - pseudocode: For process from Active Setup, CREATE time-series of its events (syscalls) | APPLY time-series anomaly detection model (e.g., Isolation Forest) | ALERT if anomalous sequence is detected