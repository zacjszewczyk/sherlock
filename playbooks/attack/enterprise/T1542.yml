name: T1542: Pre-OS Boot
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: Investigates whether an adversary is maintaining persistence or evading defenses using pre-OS boot mechanisms. This involves looking for signs of bootkit or UEFI implant C2 communication, unauthorized modification of boot configurations (MBR, UEFI), raw disk write access outside of maintenance windows, suspicious system boot failures, installation of malicious services or drivers designed to subvert the OS loading process, disabling of security controls via boot configuration changes, and failure of core security services to start after a reboot.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
contributors: Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Have any hosts established network connections with known bootkit or UEFI implant command and control (C2) infrastructure?
  context: This question aims to directly identify communication with malicious infrastructure associated with pre-OS boot threats. A match against a high-confidence threat intelligence feed is a strong indicator of a compromised host where persistence has been established at a very low level of the system.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress/Gateway
  - DNS Resolvers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH network_logs AND dns_logs
      JOIN on connection_id
      WHERE destination_ip OR domain_name IN (threat_intel_feed_bootkit_c2)
      RETURN host_ip, destination_ip, domain_name
- question: Are any hosts exhibiting DNS query patterns indicative of Domain Generation Algorithms (DGAs), which are often used by boot-level malware?
  context: DGAs are used by malware to dynamically generate a large number of domain names for C2 communication, making blocklisting difficult. A sudden and sustained increase in the entropy (randomness) of DNS queries from a specific host can signal this type of activity, which is a common feature of advanced implants like bootkits.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress/Gateway
  - DNS Resolvers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH dns_logs
      CALCULATE entropy(domain_name) per host over time
      COMPARE to historical baseline (95th percentile)
      ALERT if entropy > threshold
      RETURN host_ip, high_entropy_domains
- question: Are there any anomalous outbound network connections that deviate from established baselines and could indicate bootkit C2 activity?
  context: This question uses machine learning to find unusual network behavior that might not be caught by signature-based methods. Bootkit C2 traffic can be subtle. By modeling normal connection features (duration, protocol, bytes transferred), we can flag outliers, especially connections to rare IP addresses or autonomous systems, for further investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress/Gateway
  - DNS Resolvers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      INPUT network_logs into anomaly_detection_model (e.g., Isolation Forest)
      FEATURES = [duration, protocol, bytes_sent, bytes_received, conn_state]
      FLAG outliers
      PRIORITIZE outliers to low-prevalence IPs/ASNs
      RETURN anomalous_connections
- question: Have any unauthorized processes or users attempted to modify the boot configuration using standard system utilities?
  context: Utilities like bcdedit.exe and bootsect.exe are legitimate tools for managing boot settings. However, adversaries abuse them to establish persistence. This question looks for executions of these tools with modification commands, especially when initiated by a process other than a standard user shell or known administrative tool, which strongly suggests malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Critical Servers
  - Endpoint Workstations
  - Domain Controllers
  - IT Administrator Workstations
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH process_creation_events (EID 4688)
      WHERE process_name IN ('bcdedit.exe', 'bootsect.exe', 'reagentc.exe')
      AND command_line CONTAINS ('/set', '/nt60 /mbr', '/enable')
      AND parent_process NOT IN (allowlisted_admin_tools)
      ALERT on match
- question: Is there an abnormally high frequency of boot utility execution on any host or by any user?
  context: While a single execution of a boot utility might be legitimate, a sudden spike in the frequency of these commands by a particular user or on a specific host is highly suspicious. This behavioral approach helps detect adversaries who are repeatedly attempting to modify boot settings or are running scripts that do so.
  answer_sources:
  - Windows Event ID 4688
  - Critical Servers
  - Endpoint Workstations
  - Domain Controllers
  - IT Administrator Workstations
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH process_creation_events (EID 4688)
      WHERE process_name IN ('bcdedit.exe', 'bootsect.exe')
      AGGREGATE count by host, user, day
      COMPARE daily count to 99th percentile baseline
      ALERT if count > threshold
- question: Can we identify executions of boot utilities that are likely malicious based on their context?
  context: This question uses a machine learning model to distinguish between legitimate administrative use and malicious use of boot utilities. By training a model on features like parent-process relationships, user context, and command-line arguments from known-good activity, we can score new events and automatically flag those that have a high probability of being malicious.
  answer_sources:
  - Windows Event ID 4688
  - Critical Servers
  - Endpoint Workstations
  - Domain Controllers
  - IT Administrator Workstations
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      INPUT process_creation_events (EID 4688) for boot utilities
      FEATURES = [parent_process, user_context, command_line_args]
      SCORE with classification_model
      ALERT if malicious_probability > threshold
- question: Has an unapproved process attempted to perform write operations to a physical disk's raw sectors?
  context: Writing directly to a physical drive (e.g., \\.\PhysicalDrive0) is a low-level operation that is characteristic of malware installing a bootkit by modifying the Master Boot Record (MBR) or Volume Boot Record (VBR). Outside of disk imaging or repair operations, this is highly suspicious. This question seeks to detect such access from unauthorized processes.
  answer_sources:
  - Windows Event ID 4663
  - Endpoint and Server System Disks
  - System Reserved Partitions
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH object_access_events (EID 4663)
      WHERE object_name MATCHES ('\\Device\\Harddisk*', '\\.\\PhysicalDrive*')
      AND access_type IN ('WriteData', 'AppendData')
      AND process_name NOT IN (allowlisted_processes)
      ALERT on match
- question: Is there an unusual volume of raw disk write access events on any host?
  context: This question looks for statistical anomalies in the volume of raw disk access events. A sudden spike in these events, especially outside of normal maintenance windows, could indicate an automated script or malware repeatedly attempting to write to the disk's boot sectors. This provides a behavioral detection method that doesn't rely on a static allowlist.
  answer_sources:
  - Windows Event ID 4663
  - Endpoint and Server System Disks
  - System Reserved Partitions
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH object_access_events (EID 4663) for raw disk writes
      AGGREGATE count by host, hour
      CALCULATE moving average and standard deviation
      ALERT if hourly_count > (moving_average + 3 * std_dev)
- question: Are there time-based anomalies in raw disk access rates that correlate with other suspicious host activity?
  context: This question aims to build a higher-fidelity alert by correlating anomalies in one data source (raw disk access) with suspicious events in another (process execution). A time-series model can detect unusual spikes in disk access, and if those spikes coincide with the execution of a suspicious or unknown binary, it significantly increases the likelihood of a malicious boot sector modification attempt.
  answer_sources:
  - Windows Event ID 4663
  - Endpoint and Server System Disks
  - System Reserved Partitions
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      MODEL rate of raw disk access events (EID 4663) per host using time-series_model
      DETECT anomalies in access rate
      CORRELATE anomalies with nearby process execution events (EID 4688)
      CALCULATE composite risk score
      ALERT if score > threshold
- question: Have any systems experienced a pattern of unexpected shutdowns followed by a successful boot?
  context: A bootkit attempting to establish persistence might cause system instability. A pattern of an unexpected shutdown (Event ID 6008) followed shortly by a successful startup (Event ID 6005) can indicate a failed boot attempt. If this pattern repeats, it suggests the bootkit is unstable but retrying, providing a strong signal for investigation.
  answer_sources:
  - Windows Event ID 6008
  - Windows Event ID 6005
  - System Event Logs on Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH for event sequence [EID 6008 -> EID 6005] on same host
      WITHIN a 15-minute window
      ALERT if sequence repeats multiple times in 24 hours
- question: Has the boot reliability of any specific host significantly decreased?
  context: This question operationalizes the concept of boot stability by calculating the Mean Time Between Failure (MTBF) for system boots. A sudden, sharp drop in a host's MTBF compared to its own history or the enterprise baseline indicates it is crashing or failing to boot much more frequently than normal. This is a key indicator of instability caused by a faulty bootkit or rootkit.
  answer_sources:
  - Windows Event ID 6008
  - Windows Event ID 6005
  - System Event Logs on Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      CALCULATE boot MTBF per host from shutdown/startup events
      COMPARE host MTBF to fleet-wide baseline
      ALERT if host MTBF drops below 5th percentile
- question: Are there anomalous sequences of system boot events that match known-bad or unstable patterns?
  context: Normal system startup, shutdown, and even crash events follow predictable sequences in the event logs. This question proposes using a sequence-based machine learning model to learn these normal patterns. The model can then classify new sequences of events, flagging any that are highly unusual or match patterns previously associated with bootkit-induced instability.
  answer_sources:
  - Windows Event ID 6008
  - Windows Event ID 6005
  - System Event Logs on Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      INPUT sequences of system event log IDs into a sequence_classification_model (e.g., RNN)
      CLASSIFY new event sequences
      ALERT if sequence is classified as anomalous or malicious
- question: Has a new service been installed where the associated file is a known malicious bootkit or rootkit?
  context: Adversaries often install their boot-level persistence mechanisms as a system service or driver. This question provides a high-confidence detection method by checking the file hash of any newly installed service (from Event ID 7045) against a threat intelligence database of known malicious bootkit components. A match is a definitive indicator of compromise.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Windows System Registry (Services)
  - System32\drivers directory
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      ON new service install (EID 7045)
      EXTRACT service_file_name
      GET file_hash for service_file_name
      MATCH file_hash against bootkit_component_intel_feed
      ALERT on match
- question: Has a new service been installed with a statistically rare name or file path?
  context: Adversaries may use randomly generated or unusual names and paths for their malicious services to avoid detection based on common names. This question uses a prevalence analysis approach. By identifying service installations where the name or path is very uncommon across the entire enterprise, we can flag potential threats that would be missed by signature-based detections.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Windows System Registry (Services)
  - System32\drivers directory
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      ON new service install (EID 7045)
      CALCULATE prevalence of service_name and file_path across all endpoints
      ALERT if prevalence < 0.1% AND not part of known software deployment
- question: Can we predict if a new service installation is malicious based on its attributes?
  context: This question proposes a proactive approach using machine learning to assess the risk of a new service. A model can be trained on various features of a service installation event (e.g., name randomness, path rarity, start type) to predict its likelihood of being malicious. High-risk services can be automatically flagged for deeper analysis, such as sandboxing.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Windows System Registry (Services)
  - System32\drivers directory
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      INPUT new service install events (EID 7045)
      FEATURES = [service_name_entropy, file_path_rarity, start_type, service_account]
      SCORE with classification_model
      ALERT if malicious_probability > threshold
- question: Has the boot configuration been modified to disable security controls like DEP, driver signing, or to enable Safe Boot?
  context: This is a critical question for detecting active defense evasion. Adversaries use `bcdedit.exe` to weaken a system's security posture before the main operating system loads. Searching for specific command-line arguments that disable Data Execution Prevention (nx), enable test-signed drivers, or force the system into Safe Mode are high-fidelity indicators of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint and Server Boot Configuration Data stores
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH process_creation_events (EID 4688)
      WHERE process_name IS 'bcdedit.exe'
      AND command_line CONTAINS ('/set nx AlwaysOff', '/set testsigning on', '/set safeboot minimal')
      ALERT on match
- question: Has the `bcdedit.exe` utility been used with rare or never-before-seen command-line arguments related to security policies?
  context: This question expands on the previous one by looking for not just known-bad commands, but also for any unusual commands related to security. By baselining all `bcdedit.exe` command-line usage across the environment, we can flag the appearance of a rare or novel argument combination, especially one involving keywords like 'nx', 'testsigning', or 'safeboot', as suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint and Server Boot Configuration Data stores
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      SEARCH process_creation_events (EID 4688) for 'bcdedit.exe'
      CALCULATE frequency of each command-line argument combination
      ALERT if a rare combination involving security keywords is used
- question: Can we automatically classify the intent of `bcdedit.exe` commands to find attempts to degrade security?
  context: Command lines can be complex. This question suggests using Natural Language Processing (NLP) to parse and understand the purpose of a `bcdedit.exe` command. A model can be trained to classify commands into categories like 'information gathering' vs. 'security degradation'. This allows for more intelligent and automated detection of malicious intent, even with novel command variations.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint and Server Boot Configuration Data stores
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      INPUT `bcdedit.exe` command lines from EID 4688 into an NLP model
      CLASSIFY intent of command
      ALERT if intent is 'Suspicious Security-Degradation'
- question: Has a critical security service failed to start or stopped running after a reboot without authorization?
  context: A common goal of a pre-OS boot adversary is to disable security tools like an EDR agent or antivirus before they can load. This question looks for the "effect" of such an action: a critical security service entering a stopped state (Event ID 7036) or failing to start (Event ID 7000/7024) immediately following a reboot, without any corresponding authorized change or update activity.
  answer_sources:
  - Windows Event ID 7036
  - Windows Event ID 7000
  - Windows Event ID 7024
  - Service Control Manager logs on Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      DEFINE list of critical_security_services
      ALERT if 'service stopped/failed' event for critical service
      AND no authorized change log or legitimate update process in preceding 1-hour window
- question: Is there a widespread increase in failures for a specific critical security service?
  context: While a single service failure could be a fluke, a sudden spike in the failure rate for a security service across many endpoints is a major red flag. This could indicate an adversary deploying a bootkit or technique that specifically targets and disables that security product. This question uses statistical analysis to detect such widespread, anomalous failure rates.
  answer_sources:
  - Windows Event ID 7036
  - Windows Event ID 7000
  - Windows Event ID 7024
  - Service Control Manager logs on Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      CALCULATE baseline failure_rate for each critical_security_service
      MONITOR current failure_rate
      ALERT if current_rate > (baseline + 3 * std_dev)
- question: Are security services exhibiting improbable state transitions, such as stopping without being told to?
  context: Services normally follow a predictable lifecycle (e.g., 'Running' -> 'Stopping' -> 'Stopped'). A forceful termination by malware might bypass these steps. This question proposes modeling the normal sequences of Service Control Manager events. An impossible or highly improbable transition, like directly from 'Running' to 'Stopped', can be flagged as an anomaly indicating forceful termination.
  answer_sources:
  - Windows Event ID 7036
  - Windows Event ID 7000
  - Windows Event ID 7024
  - Service Control Manager logs on Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      MODEL state transitions for security service events
      DETECT improbable transitions (e.g., Running -> Stopped without a 'Stopping' event)
      ALERT on anomaly
- question: Are there any 'ghost assets' on the network that are generating traffic but not sending security logs?
  context: This is a powerful cross-domain correlation question. If a bootkit successfully disables an EDR agent or logging service, the host may become invisible to the SIEM. However, it will still be visible on the network. This query identifies hosts that are actively communicating on the network but for which no corresponding endpoint logs have been received, indicating a critical telemetry gap.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - SIEM log ingestion data
  - Network Egress/Gateway
  - SIEM/Log Aggregator Ingestion Point
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      GET list of active_ips from network_logs in last hour
      GET list of reporting_hosts from SIEM in last hour
      ALERT if any active_ip is NOT in reporting_hosts
- question: Is the ratio of network traffic to security log volume for any host anomalous?
  context: This question establishes a behavioral baseline for each host, comparing how much network data it sends to how many security logs it generates. A bootkit that disables logging but allows C2 traffic would cause this ratio to change dramatically. A host that suddenly starts generating a lot of network traffic with a corresponding drop in log volume is highly suspect.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - SIEM log ingestion data
  - Network Egress/Gateway
  - SIEM/Log Aggregator Ingestion Point
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      FOR each host, calculate ratio = network_data_volume / security_log_volume
      ESTABLISH baseline for this ratio per host
      ALERT if ratio deviates > 3 standard deviations from the norm
- question: Is the actual log volume from any host significantly less than the volume predicted by its network activity?
  context: This question advances the previous concept by using a predictive model. A time-series model can learn the relationship between a host's network activity and its expected log output. By continuously predicting the log volume we *should* be seeing and comparing it to what we *are* seeing, we can create a powerful detector for logging failures, flagging any host with a large and sustained negative error.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - SIEM log ingestion data
  - Network Egress/Gateway
  - SIEM/Log Aggregator Ingestion Point
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |-
      MODEL predicted_log_volume based on historical network_traffic_patterns
      COMPARE predicted_log_volume vs actual_ingested_volume
      ALERT if (actual << predicted) for a sustained period