name: T1562.004: Disable or Modify System Firewall
id: d8e3f4a0-5b1c-4d7e-8a9b-0c1f2e3d4a5b
description: >-
  This playbook helps investigate whether an adversary has attempted to evade defenses by disabling or modifying the system firewall. This is often done to allow inbound connections to backdoors, exfiltrate data, or prevent security software from communicating. Indicators of this activity include the temporal correlation of known malicious processes with firewall modifications, the use of specific command-line utilities (`netsh`, PowerShell cmdlets) to alter firewall rules, direct modification of firewall-related registry keys or services, correlation of firewall changes with subsequent anomalous network traffic, and a sudden increase in a host's listening ports or inbound connections.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious process executed shortly before a firewall modification command, registry key change, or service stop on the same host?
    context: >-
      This question aims to identify a common attack pattern where an adversary, after gaining initial execution, immediately attempts to weaken the host's defenses by altering the firewall. Correlating a known malicious executable (identified by its hash) with subsequent firewall tampering activity within a short time frame provides strong, high-fidelity evidence of a defense evasion attempt.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Windows Event ID 7040
      - User Workstations
      - Application Servers
      - Domain Controllers
      - Virtualization Hosts (Hypervisors)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Correlate malicious file hash execution with firewall changes within 5 minutes on the same host
          SEARCH process_creation_events (EventID 4688)
          WHERE process_hash IN threat_intel_list
          JOIN (
            SEARCH command_line_logs WHERE command contains 'netsh'
            OR registry_events (EventID 4657) WHERE registry_key contains 'FirewallPolicy'
            OR service_events (EventID 7036) WHERE service_name is 'mpssvc' AND state is 'stopped'
          )
          WHERE event.host = process_creation_events.host
          AND event.timestamp <= process_creation_events.timestamp + 5_minutes
  - question: Has a rare parent-child process relationship involving a known malicious process been observed in conjunction with firewall modification activity?
    context: >-
      This question seeks to uncover stealthy defense evasion techniques by focusing on anomalous process lineage. Adversaries may inject malicious code into legitimate system processes to perform actions like modifying the firewall. A statistically rare parent-child relationship, like `services.exe` spawning a process that alters the firewall, is highly indicative of a compromise, as this behavior deviates significantly from the established baseline of normal system activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Windows Event ID 7040
      - User Workstations
      - Application Servers
      - Domain Controllers
      - Virtualization Hosts (Hypervisors)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Find rare parent-child process relationships for malicious hashes that modify the firewall
          FOR each process_event with malicious_hash:
            parent_child_pair = (process_event.parent_process, process_event.process_name)
            rarity_score = calculate_historical_rarity(parent_child_pair)
            IF rarity_score IS high AND subsequent_firewall_modification_occurs:
              ALERT on high-priority anomalous process lineage
  - question: Does a machine learning model classify a sequence of events, starting with a process execution and followed by host changes, as a likely firewall evasion attempt?
    context: >-
      This question leverages a predictive model to identify complex firewall evasion attempts that may not be caught by simple rules. By analyzing a collection of features—such as process metadata (hash, parent process) and subsequent system events (registry/service changes)—a classification model can learn the subtle patterns of malicious behavior and assign a probability score to a sequence of events, enabling automated detection and response for high-confidence predictions.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Windows Event ID 7040
      - User Workstations
      - Application Servers
      - Domain Controllers
      - Virtualization Hosts (Hypervisors)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Use a trained model to predict firewall evasion likelihood
          FOR each new process_event:
            features = extract_features(process_metadata, subsequent_host_events)
            prediction_score = classification_model.predict(features)
            IF prediction_score > high_confidence_threshold:
              TRIGGER alert and automated_response (e.g., quarantine host)
  - question: Has a process been created with command-line arguments that match known patterns for disabling or modifying the system firewall?
    context: >-
      This question focuses on detecting the direct use of native command-line tools to manipulate the firewall. Adversaries frequently use utilities like `netsh.exe`, PowerShell, or `esxcli` because they are pre-installed and their usage can blend in with legitimate administrative activity. Searching for specific command strings and regular expressions that disable the firewall or add permissive rules is a direct and effective way to catch these attempts.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - User Workstations
      - Application Servers
      - Domain Controllers
      - Virtualization Hosts (Hypervisors)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Search for specific firewall modification commands in process and script logs
          SEARCH process_creation_events (EventID 4688) OR powershell_script_logs (EventID 4104)
          WHERE command_line MATCHES REGEX 'netsh advfirewall set .* state off'
            OR command_line MATCHES REGEX 'Set-NetFirewallProfile -Enabled False'
            OR command_line MATCHES REGEX 'New-NetFirewallRule -Action Allow'
            OR command_line MATCHES REGEX 'esxcli network firewall set --enabled false'
  - question: Has there been a statistically significant deviation in the frequency or complexity of firewall modification commands on any given host or by any user?
    context: >-
      This question aims to detect anomalous administrative behavior by establishing a baseline of normal command usage. While an administrator may occasionally modify the firewall, a sudden spike in the frequency of these commands or a sudden increase in the complexity of the arguments used can indicate malicious activity, such as an attacker running a script to systematically weaken defenses.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - User Workstations
      - Application Servers
      - Domain Controllers
      - Virtualization Hosts (Hypervisors)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Monitor for deviations from baseline firewall command usage
          FOR each host, user:
            baseline_frequency = calculate_baseline(firewall_command_usage)
            current_frequency = count_recent(firewall_command_usage)
            IF current_frequency > (baseline_frequency + 3 * std_dev):
              ALERT on anomalous frequency
            
            baseline_entropy = calculate_baseline(command_argument_entropy)
            current_entropy = calculate_entropy(recent_command_arguments)
            IF current_entropy > baseline_entropy_threshold:
              ALERT on anomalous complexity
  - question: Does a sequence-based machine learning model identify a recent firewall modification command as anomalous for a specific user or host?
    context: >-
      This question uses a more advanced model that understands the context of command execution. A Long Short-Term Memory (LSTM) network can learn the typical sequences of commands issued by users and on hosts. A firewall modification command appearing out of its normal sequence (e.g., not preceded by a change request ticket-related command) would be flagged by the model as having a low probability, indicating a potential deviation from normal administrative workflow.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - User Workstations
      - Application Servers
      - Domain Controllers
      - Virtualization Hosts (Hypervisors)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Use a sequence model to detect anomalous command-line activity
          FOR each new command_line_event:
            command_sequence = get_historical_commands(user, host) + new_command_line_event
            sequence_probability = lstm_model.predict(command_sequence)
            IF new_command contains firewall_modification AND sequence_probability IS low:
              ALERT on anomalous command sequence
  - question: Have there been any unauthorized modifications to Windows Firewall registry keys or changes to the firewall service state?
    context: >-
      This question targets persistent or disruptive methods of disabling the firewall. Adversaries may modify registry keys directly to change firewall policies or disable the firewall service (`mpssvc`) to ensure it doesn't restart. Alerting on any modification to these critical registry paths or on the service being stopped or disabled, especially when not correlated with a legitimate change request, is a crucial detection for this technique.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers
      - User Workstations
      - Critical Application Servers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Alert on direct modification of firewall registry keys or service state
          SEARCH registry_events (EventID 4657)
          WHERE registry_key CONTAINS 'HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy'
          OR
          SEARCH service_events (EventID 7036, 7040)
          WHERE service_name = 'mpssvc' AND (state = 'Stopped' OR start_type = 'Disabled')
          AND event NOT correlated with approved_change_ticket
  - question: Has a host experienced a statistically anomalous spike in firewall-related registry modifications or service changes within a short time window?
    context: >-
      This question helps to differentiate between a single, possibly legitimate change and a flurry of modifications that is more indicative of a malicious script or tool. By profiling the normal rate of these events per host and using a Z-score to detect statistical outliers, security analysts can be alerted to a sudden burst of activity related to firewall tampering that stands out from the baseline noise.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers
      - User Workstations
      - Critical Application Servers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Detect a spike in firewall-related registry/service modifications
          FOR each host:
            event_count = COUNT events (registry_mod or service_change) in last 5 minutes
            z_score = calculate_z_score(event_count, historical_baseline)
            IF z_score > 3.0:
              ALERT on anomalous spike in firewall modifications
  - question: Does an anomaly detection model, such as an Isolation Forest, identify a recent sequence of host events involving firewall registry or service changes as an outlier?
    context: >-
      This question applies unsupervised machine learning to find unusual patterns of behavior without pre-defined rules. An Isolation Forest model can be trained on vectors of normal host activity (process creations, registry changes, etc.). When a new sequence of events involving firewall modifications is fed to the model, it can quickly identify it as an "outlier" if it doesn't conform to any learned pattern of normal behavior, thus flagging it as suspicious.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers
      - User Workstations
      - Critical Application Servers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Use an anomaly detection model to find outlier event sequences
          FOR each event_sequence (process, registry, service changes):
            feature_vector = create_vector(event_sequence)
            anomaly_score = isolation_forest_model.predict(feature_vector)
            IF anomaly_score indicates outlier AND sequence involves firewall_keys_or_services:
              ALERT on highly suspicious event sequence
  - question: Following a firewall modification event, did the host initiate a network connection on a high-risk or known command-and-control (C2) port?
    context: >-
      This question directly links the act of defense evasion with its likely purpose: establishing malicious communication. An adversary often modifies a firewall specifically to open a port for a C2 channel or data exfiltration. Correlating a firewall change event with a subsequent outbound connection on a port known to be used for malicious purposes (e.g., 4444, 6667) creates a very high-confidence alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Windows Event ID 7040
      - Zeek conn.log
      - Network Egress/Ingress Points
      - Internal Network Segments
      - Host-based firewalls
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Correlate firewall modification with subsequent connection on a high-risk port
          SEARCH firewall_modification_events (cmd, registry, service)
          JOIN (
            SEARCH network_connections (Zeek conn.log)
            WHERE destination_port IN (high_risk_port_watchlist)
          )
          WHERE network_connections.source_host = firewall_modification_events.host
          AND network_connections.timestamp BETWEEN firewall_modification_events.timestamp AND firewall_modification_events.timestamp + 5_minutes
  - question: After a firewall modification, did the host connect to a destination port that is statistically uncommon for that specific host?
    context: >-
      This question aims to detect malicious connections without relying on a predefined list of bad ports. By creating a historical baseline of common destination ports for each host, it's possible to statistically identify a new connection that is an outlier. A connection to a port that is outside the 99th percentile of normal activity for that host, especially right after a firewall change, is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Windows Event ID 7040
      - Zeek conn.log
      - Network Egress/Ingress Points
      - Internal Network Segments
      - Host-based firewalls
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Detect outbound connections to rare ports following a firewall modification
          FOR each firewall_modification_event on a host:
            baseline_ports = get_common_ports_for_host(host)
            MONITOR subsequent outbound connections from host
            FOR each new_connection:
              IF new_connection.destination_port NOT IN baseline_ports (e.g., >99th percentile):
                ALERT on suspicious connection post-firewall change
  - question: Does a time-series model show a statistically significant correlation where firewall modification events consistently precede anomalous network connections?
    context: >-
      This question uses advanced analytics to establish a causal link between two different streams of event data. A cross-correlation model can analyze host-based firewall events and network connection logs over time. If the model finds that firewall modifications are a statistically significant "leading indicator" for anomalous network connections, it can automatically alert on these linked event pairs, revealing a consistent attack pattern across the environment.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Windows Event ID 7040
      - Zeek conn.log
      - Network Egress/Ingress Points
      - Internal Network Segments
      - Host-based firewalls
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Use a time-series model to find leading indicators
          INPUT Stream1 = firewall_modification_events
          INPUT Stream2 = anomalous_network_connections
          MODEL = time_series_cross_correlation(Stream1, Stream2)
          IF MODEL shows Stream1 is a significant leading indicator for Stream2:
            ALERT when an event in Stream1 is followed by a correlated event in Stream2
  - question: Has a host started accepting inbound connections on a destination port that is not on its pre-approved allow-list?
    context: >-
      This question provides a straightforward, policy-based method for detecting firewall misconfigurations or malicious changes. It requires maintaining an inventory of which ports should be open on which assets. Any successful inbound connection to a port not on this allow-list is an immediate policy violation and a strong indicator that the firewall has been opened, either maliciously or accidentally.
    answer_sources:
      - Zeek conn.log
      - Network Egress/Ingress Points
      - DMZ Network Segment
      - Server Farm Network Segment
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Alert on connections to non-allow-listed ports
          SEARCH network_connections (Zeek conn.log)
          WHERE connection_state = 'SF' (successful)
          AND destination_host_and_port NOT IN approved_asset_port_allowlist
          ALERT on policy violation
  - question: Has a host shown a sustained and statistically significant increase in its number of unique listening ports or unique inbound source IPs?
    context: >-
      This question aims to detect the effect of a disabled firewall by monitoring its network behavior. A host with a disabled firewall will often start listening on many more ports or accept connections from a much wider range of sources. By tracking a moving average of these metrics and alerting when they exceed a statistical threshold (e.g., 3 standard deviations) for a sustained period, analysts can detect hosts whose network posture has fundamentally and suspiciously changed.
    answer_sources:
      - Zeek conn.log
      - Network Egress/Ingress Points
      - DMZ Network Segment
      - Server Farm Network Segment
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Monitor for sustained increase in listening ports or inbound sources
          FOR each host:
            metric1 = hourly count of unique listening ports
            metric2 = hourly count of unique inbound source IPs
            moving_avg_1, std_dev_1 = calculate_30day_baseline(metric1)
            moving_avg_2, std_dev_2 = calculate_30day_baseline(metric2)
            IF metric1 > (moving_avg_1 + 3 * std_dev_1) for 1_hour:
              ALERT on anomalous port increase
            IF metric2 > (moving_avg_2 + 3 * std_dev_2) for 1_hour:
              ALERT on anomalous inbound source increase
  - question: Has a host's network traffic profile caused it to be re-classified as an anomaly or moved to a different cluster by a machine learning model?
    context: >-
      This question uses unsupervised clustering to identify hosts that have changed their fundamental behavior. Hosts can be grouped into clusters (e.g., 'web servers', 'workstations', 'database servers') based on their typical network traffic profiles. A host whose firewall is disabled or modified will exhibit a drastic change in its traffic patterns (more ports, different protocols). This change would cause a clustering algorithm like DBSCAN to either re-classify the host into a new, anomalous cluster or flag it as a 'noise' point, indicating it no longer fits any known profile.
    answer_sources:
      - Zeek conn.log
      - Network Egress/Ingress Points
      - DMZ Network Segment
      - Server Farm Network Segment
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Use clustering to detect hosts with changed network behavior
          features = vector(port_entropy, connection_count, protocol_mix) for all hosts
          clusters = DBSCAN.fit(features)
          MONITOR hosts that change clusters over time
          IF a host moves from 'stable_server_cluster' to 'anomalous_cluster'
          OR IF a host becomes a 'noise' point:
            ALERT on anomalous network profile change