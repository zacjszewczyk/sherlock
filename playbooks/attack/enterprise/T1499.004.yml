name: T1499.004: Application or System Exploitation
id: e5b9f1a0-3c7d-4b8f-9a1e-8d0c7b6f2a9e
description: This playbook helps investigate whether an adversary is impacting the availability of systems or applications by exploiting vulnerabilities. This can manifest in various ways, including denial-of-service (DoS) attacks that exhaust network or service resources, the use of "bombs" (zip, fork) to consume local system resources leading to crashes, direct resource exhaustion leading to system instability, or causing widespread crashes across a fleet of similar assets. The goal is to detect these impact-oriented activities by analyzing network traffic patterns, system event logs for crashes and resource warnings, and process creation events.
type: technique
related:
- TA0040: Impact
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any alerts in Zeek notice logs indicating known DoS tools or exploit payloads?
  context: This question aims to identify the most straightforward indicators of a denial-of-service attack by leveraging existing IDS signatures. Detecting alerts for known tools like Slowloris or specific CVEs provides a high-confidence signal that an adversary is attempting to exploit a known vulnerability to impact service availability.
  answer_sources:
  - Zeek notice.log
  - DMZ network segment
  - Public-facing web servers
  - Internet gateways
  - Load balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek notice.log WHERE notice_type MATCHES "DoS_Tool_*" OR notice_type MATCHES "CVE-*" GROUP BY source_ip, destination_ip, destination_port, notice_type
- question: For services flagged with a DoS signature, is there a statistically significant increase in connection duration?
  context: This question looks for the secondary effect of a potential DoS attack. Even if a signature is noisy, a corresponding and significant increase in how long connections to the targeted service are held open can corroborate the alert. This helps differentiate a real, impactful attack from benign scanning or a false positive by measuring the actual impact on service response.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - DMZ network segment
  - Public-facing web servers
  - Internet gateways
  - Load balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH alert in "DoS_signature_alerts": SEARCH Zeek conn.log FOR destination_ip, destination_port | CALCULATE 95th_percentile(duration) over last 1 hour | COMPARE with 30-day_baseline_95th_percentile | ALERT if current > baseline + 3*std_dev
- question: Is there an anomalous spike in the frequency of DoS-related alerts that deviates from the normal pattern?
  context: This question uses time series analysis to detect unusual bursts of DoS activity. Instead of focusing on a single alert, it looks at the overall volume. A sudden, unexpected increase in the rate of these alerts, beyond what a forecasting model predicts, can indicate the start of a coordinated or large-scale attack campaign that is more significant than isolated, routine alerts.
  answer_sources:
  - Zeek notice.log
  - DMZ network segment
  - Public-facing web servers
  - Internet gateways
  - Load balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL time_series_forecast ON (COUNT(Zeek notice.log WHERE notice_type MATCHES "DoS_*") per minute) | ALERT if observed_count > forecasted_upper_bound
- question: Has a file with an extremely high compression ratio, indicative of a zip bomb, been transferred over the network?
  context: This question seeks to proactively identify a specific type of resource exhaustion attack known as a 'zip bomb' or 'decompression bomb'. These files are small when compressed but expand to an enormous size, consuming memory or disk space and causing applications that process them (like antivirus scanners or web servers) to crash. Detecting a file where the uncompressed size is orders of magnitude larger than its transferred size is a strong indicator of malicious intent.
  answer_sources:
  - Zeek files.log
  - Critical application servers
  - User workstations
  - File servers
  - Web servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek files.log WHERE mime_type CONTAINS "zip" AND total_bytes > (seen_bytes * 1000) | ALERT
- question: Is any parent process spawning an anomalously high number of child processes in a short time frame, suggesting a fork bomb?
  context: This question aims to detect a 'fork bomb,' a classic denial-of-service attack that rapidly creates new processes to starve the system of resources (like process IDs or memory), leading to a system freeze or crash. By establishing a historical baseline for how many child processes a legitimate application normally creates, we can spot statistical deviations that indicate a process is recursively and maliciously replicating itself.
  answer_sources:
  - Windows Event ID 4688
  - Critical application servers
  - User workstations
  - File servers
  - Web servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH host: COUNT(Windows Event ID 4688) per parent_process_id in 1_second_window | COMPARE count to 30-day_baseline for parent_process_name | ALERT if count > 99th_percentile
- question: Can we predict if a recently transferred file is likely to cause an application crash?
  context: This question moves from detection to prediction. By training a model on the characteristics of files that were historically transferred just before an application crash, the system can learn to identify potentially harmful files in real-time. This allows for proactive investigation or quarantine of a file based on its features (like compression ratio, size, etc.) before it can be processed and cause an impact.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 1000
  - Critical application servers
  - User workstations
  - File servers
  - Web servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL classification ON (Zeek files.log features) | PREDICT if file is 'crash-inducing' | CORRELATE with subsequent Windows Event ID 1000 for labeling
- question: Has a resource exhaustion event been logged on a critical server?
  context: This is a high-fidelity, direct question to identify immediate signs of resource depletion on the most important assets. Windows Event ID 2004 is a specific indicator that the system is running out of a critical resource (like memory). An alert on this event for a critical server (like a Domain Controller or database server) warrants immediate attention as it is a direct precursor to service degradation or a system crash.
  answer_sources:
  - Windows Event ID 2004
  - Database servers
  - Virtualization hosts
  - Terminal servers
  - Domain Controllers
  - Critical application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event Logs WHERE EventID == 2004 AND hostname IN critical_asset_list | ALERT
- question: Is there a statistically significant increase in the rate of resource exhaustion events on any critical host?
  context: This question helps to identify a sustained resource exhaustion attack or a worsening system problem that might not be caught by a single event alert. By tracking the rate of these events over time and comparing it to a historical baseline, analysts can detect a gradual or sudden increase in resource pressure that deviates from normal operational noise, indicating a potential ongoing attack or a severe performance issue.
  answer_sources:
  - Windows Event ID 2004
  - Database servers
  - Virtualization hosts
  - Terminal servers
  - Domain Controllers
  - Critical application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH critical_host: CALCULATE rate(Windows Event ID 2004) per 5_minutes | COMPARE rate to 30-day_rolling_average | ALERT if rate > mean + 3*std_dev
- question: Do spikes in resource exhaustion events consistently precede system crashes, indicating a causal link?
  context: This question seeks to establish a predictive relationship between resource exhaustion and system failure. By analyzing historical data, we can determine if there's a reliable pattern where a burst of Event ID 2004 is followed by a crash (Event ID 41/6006) a few minutes later. If this correlation is strong and consistent, it can be used to build a predictive alert that warns of an impending crash, giving administrators time to intervene.
  answer_sources:
  - Windows Event ID 2004
  - Windows Event ID 41
  - Windows Event ID 6006
  - Database servers
  - Virtualization hosts
  - Terminal servers
  - Domain Controllers
  - Critical application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL cross-correlation ON time_series(EventID 2004 counts) and time_series(EventID 41/6006 counts) | IDENTIFY significant correlation at a specific time_lag | CREATE predictive_alert based on lag
- question: Is any single source IP address generating an excessive number of HTTP requests to a specific web resource?
  context: This is a classic detection for a simple, brute-force application-layer DoS attack. A legitimate user is unlikely to make hundreds of requests per second to the same URL. This rule sets a hard, common-sense threshold to quickly identify a single misbehaving client or attacker attempting to overwhelm a web application or API endpoint with a flood of requests.
  answer_sources:
  - Zeek http.log
  - Internet gateways
  - Load balancers
  - Public-facing API endpoints
  - DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek http.log | COUNT requests by source_ip, uri per 1_second | ALERT if count > 100
- question: Has the diversity of source IP addresses connecting to a public service dropped significantly?
  context: This question aims to detect DoS or DDoS attacks by analyzing the 'randomness' or entropy of the source IPs. A healthy, popular service will have traffic from many different sources. During a DDoS attack, traffic is often concentrated from a smaller, though still large, set of attacker-controlled machines, or in a simple DoS, from a single source. A sharp drop in entropy indicates that the traffic pattern has become less diverse and more uniform, a key characteristic of many DoS attacks.
  answer_sources:
  - Zeek conn.log
  - Internet gateways
  - Load balancers
  - Public-facing API endpoints
  - DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH public_service: CALCULATE shannon_entropy(source_ip) in 1_minute_window from Zeek conn.log | COMPARE to 7-day_baseline_distribution | ALERT if entropy < 5th_percentile
- question: Does network connection data contain anomalous clusters of activity indicative of a DoS attack?
  context: This question uses unsupervised machine learning to find unusual patterns in network traffic without pre-defined rules. A DoS attack often creates a large volume of connections with very similar characteristics (e.g., short duration, same protocol, similar byte counts, non-standard connection states). A clustering algorithm can automatically group these connections into a distinct, dense cluster that stands out from normal, heterogeneous traffic, flagging it as an anomaly for investigation.
  answer_sources:
  - Zeek conn.log
  - Internet gateways
  - Load balancers
  - Public-facing API endpoints
  - DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL clustering (DBSCAN) ON Zeek conn.log features (duration, src_bytes, dst_bytes, state) | IDENTIFY new, dense clusters or anomalous noise points | ALERT
- question: Have a significant percentage of assets in a specific group (e.g., Domain Controllers, VDI pool) restarted unexpectedly at the same time?
  context: This question looks for widespread, correlated failures. While a single server restarting unexpectedly might be a hardware failure, 10% of all domain controllers restarting within 15 minutes is a strong indicator of a systemic issue, such as a worm, a targeted attack exploiting a common vulnerability, or a botched patch. This rule helps distinguish isolated incidents from coordinated, fleet-wide impact.
  answer_sources:
  - Windows Event ID 41
  - Windows Event ID 6005
  - Windows Event ID 6006
  - All enterprise servers
  - All user workstations
  - Virtual Desktop Infrastructure (VDI) pools
  - Kubernetes nodes
  - Change management database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event Logs for EventID 41 or (EventID 6005 not preceded by 6006) | GROUP by asset_group | CALCULATE percentage_of_group_restarting in 15_minutes | ALERT if percentage > 10%
- question: Is a specific group of assets experiencing an unusually high rate of application crashes compared to its historical norm?
  context: This question aims to detect a 'bad patch' or a newly deployed exploit affecting a specific application or asset type. By establishing a baseline for the normal 'crash rate' for a fleet of servers, we can statistically detect when the current rate is abnormally high. Cross-referencing with change management data helps eliminate planned maintenance as the cause, increasing the likelihood that the anomaly is due to a malicious or unintended impact.
  answer_sources:
  - Windows Event ID 1000
  - All enterprise servers
  - All user workstations
  - Virtual Desktop Infrastructure (VDI) pools
  - Kubernetes nodes
  - Change management database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH asset_group: CALCULATE hourly_crash_count(EventID 1000) | COMPARE to 30-day_rolling_average | IF count > mean + 3*std_dev AND NOT in change_window | ALERT
- question: Has there been an abrupt and sustained increase in the application crash rate for an entire asset fleet?
  context: This question uses change point detection to automatically identify the moment a systemic problem begins. Unlike a simple threshold, this algorithm looks for a persistent shift in the underlying behavior of the time series data (the crash rate). This is powerful for detecting the onset of a new attack campaign or the introduction of a flawed software update that causes widespread instability, distinguishing it from random, temporary spikes in crashes.
  answer_sources:
  - Windows Event ID 1000
  - All enterprise servers
  - All user workstations
  - Virtual Desktop Infrastructure (VDI) pools
  - Kubernetes nodes
  - Change management database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL change_point_detection ON time_series(aggregate EventID 1000 count for asset_fleet) | ALERT on detection of a significant, persistent change in the rate