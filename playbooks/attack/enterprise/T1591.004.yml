name: T1591.004: Identify Roles
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting an adversary's attempts to gather information about organizational roles through external reconnaissance. It covers techniques such as network and port scanning from known malicious IPs, web application enumeration indicated by high error rates or specific tool signatures, credential-based attacks like password spraying against external services, and the exfiltration of sensitive configuration files or API data that may contain user or role information.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I correlate source IP addresses from inbound connection logs against a CTI feed to detect known reconnaissance activity?
    context: This question aims to identify reconnaissance attempts by cross-referencing inbound traffic with a high-confidence list of known malicious IP addresses. Correlating against a Cyber Threat Intelligence (CTI) feed is a highly effective, signature-based method for detecting threats early, as it leverages community-sourced data on actors known for scanning or hosting attack tools. A match provides a strong signal that the activity is not benign and requires immediate investigation.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway
      - DMZ Firewalls
      - Cloud VPC Flow Logs
      - VPN Concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each connection IN inbound_connection_logs:
            IF connection.source_ip IS IN cti_recon_ip_feed:
              ALERT on connection
  - question: How can I statistically analyze connection logs to identify external IP addresses exhibiting network scanning behavior based on connection state ratios?
    context: This question focuses on identifying network scanning by analyzing the ratio of failed to successful connections from a single source IP. Attackers performing reconnaissance often generate a high number of failed connections as they probe for open ports and services. By calculating this ratio and flagging IPs in the top percentile, analysts can uncover scanning activity that might otherwise be lost in the noise of normal traffic, without relying on pre-existing signatures.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway
      - DMZ Firewalls
      - Cloud VPC Flow Logs
      - VPN Concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip IN external_ips over 1_hour_window:
            successful_connections = COUNT where state is 'SF'
            failed_connections = COUNT where state is 'REJ', 'RSTO', 'RSTR'
            failure_ratio = failed_connections / (successful_connections + failed_connections)
            IF failure_ratio > 99th_percentile_of_all_ratios:
              ALERT on source_ip
  - question: Can a machine learning model be used to classify external IP addresses as benign or reconnaissance-related based on their connection patterns?
    context: This question explores using a machine learning classifier to proactively identify reconnaissance activity. By training a model on features derived from connection logs (like connection counts, port diversity, and state distribution), it can learn the subtle patterns that distinguish malicious scanning from normal user traffic. This approach provides a dynamic and adaptive detection method that can identify novel or slowly-executed reconnaissance campaigns that evade simpler statistical thresholds.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway
      - DMZ Firewalls
      - Cloud VPC Flow Logs
      - VPN Concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_connection_from_external_ip:
            features = EXTRACT (connection_count, distinct_ports, state_distribution, etc.)
            prediction = ML_MODEL.predict(features)
            IF prediction is 'reconnaissance-related':
              ALERT on external_ip
  - question: How can I detect web reconnaissance tools by searching for their specific User-Agent strings in HTTP logs?
    context: This question aims to identify automated reconnaissance and scraping tools by matching their known User-Agent strings against web traffic logs. Tools like sqlmap, nikto, and gobuster use default or common User-Agents that act as a clear signature of their activity. Creating a detection rule based on a curated list of these strings is a straightforward and effective way to catch attackers in the early stages of web application reconnaissance.
    answer_sources:
      - Zeek http.log
      - Public-facing Web Servers
      - Application Load Balancers
      - Web Application Firewalls (WAF)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each http_request FROM external_ip:
            IF http_request.user_agent MATCHES recon_tool_list (e.g., 'sqlmap', 'nikto', 'gobuster'):
              ALERT on http_request
  - question: How can I use statistical metrics like URI entropy and 404 error rates to detect automated web resource discovery?
    context: This question focuses on identifying web enumeration by analyzing the statistical properties of HTTP requests from a single source. Automated tools often generate requests for a wide variety of non-existent paths (high URI entropy) and consequently receive many '404 Not Found' responses. By baselining normal traffic and flagging IPs that exhibit an unusually high rate of both metrics, analysts can detect brute-force directory and file discovery attempts that would be missed by signature-based methods.
    answer_sources:
      - Zeek http.log
      - Public-facing Web Servers
      - Application Load Balancers
      - Web Application Firewalls (WAF)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip IN external_ips over 5_minute_window:
            uri_entropy = CALCULATE_SHANNON_ENTROPY(requested_uris)
            rate_of_404s = COUNT where status_code is 404 / TOTAL_REQUESTS
            IF uri_entropy > 98th_percentile AND rate_of_404s > 98th_percentile:
              ALERT on source_ip
  - question: Can a time-series forecasting model be used to detect web enumeration attempts by identifying anomalous request volumes?
    context: This question explores the use of a time-series model to predict normal traffic patterns for web assets and detect significant deviations. By forecasting expected request volumes and 404 rates, the system can automatically flag sudden spikes from an IP or network block that exceed the model's confidence bounds. This anomaly detection approach is effective for identifying scraping or enumeration attempts that manifest as a burst of activity against a specific target.
    answer_sources:
      - Zeek http.log
      - Public-facing Web Servers
      - Application Load Balancers
      - Web Application Firewalls (WAF)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each web_asset:
            predicted_volume, confidence_bound = FORECAST_MODEL.predict(current_time)
            observed_volume = COUNT requests in current_time_window
            IF observed_volume > confidence_bound:
              ALERT on anomalous traffic spike
  - question: How can I implement a stateful rule to detect port scanning activity from a single source IP?
    context: This question seeks to detect port scanning by creating a simple but effective rule that triggers when an external source IP connects to a large number of unique ports in a very short time. This behavior is a classic indicator of both horizontal (across many hosts) and vertical (on a single host) port scans. A stateful rule provides a direct, signature-based method for catching this common reconnaissance technique.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway
      - DMZ Firewalls
      - External-facing hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip in external_ips:
            unique_ports_contacted = COUNT DISTINCT destination_ports over 1_minute_window
            IF unique_ports_contacted > 25:
              ALERT on source_ip for port scanning
  - question: How can I statistically identify port scanning by analyzing the number of distinct ports contacted by an external IP?
    context: This question focuses on using statistical analysis to find anomalous port scanning that may not trigger a simple threshold rule. By establishing a baseline for the normal number of distinct ports contacted by external IPs, analysts can flag any IP that deviates significantly (e.g., more than 3 standard deviations from the mean). This method is effective at catching slower or more methodical scans that are designed to evade basic signature-based detections.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway
      - DMZ Firewalls
      - External-facing hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip IN external_ips over 15_minute_window:
            distinct_port_count = COUNT DISTINCT destination_ports
            mean, std_dev = BASELINE of distinct_port_counts for all external_ips
            IF distinct_port_count > (mean + 3 * std_dev):
              ALERT on source_ip
  - question: Can a machine learning clustering algorithm be used to distinguish port scans from normal network traffic?
    context: This question explores using an unsupervised machine learning algorithm like DBSCAN to identify port scans as anomalous activity. Normal traffic patterns tend to form dense clusters based on features like IP addresses and ports, while scanners that contact a wide, non-standard range of ports will not fit into these clusters and will be identified as noise or outliers. This approach can detect novel and sophisticated scanning techniques without prior labeling or signatures.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway
      - DMZ Firewalls
      - External-facing hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          features = EXTRACT (source_ip, destination_port, protocol) FROM connection_logs
          clusters = DBSCAN_MODEL.fit(features)
          FOR each data_point in features:
            IF data_point is classified as 'noise':
              ALERT on source_ip associated with noise point
  - question: How can I create a rule to detect brute-force or username enumeration attacks based on a high volume of failed logins from a single IP?
    context: This question aims to detect credential-based attacks by monitoring for a high frequency of failed authentication events (Windows Event ID 4625) originating from a single source IP. A simple threshold rule (e.g., >20 failures in 5 minutes) is a highly effective method for catching common password spraying or username guessing attacks against external-facing services like ADFS or VPNs.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Active Directory Federation Services (ADFS)
      - VPN Concentrators
      - Microsoft Exchange Servers
      - Public-facing Application Login Portals
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip over 5_minute_window:
            failed_logins = COUNT of EventID 4625 from source_ip
            IF failed_logins > 20:
              ALERT on source_ip for high failed logins
  - question: How can I use statistical analysis of usernames in failed login events to differentiate between username enumeration and password spraying?
    context: This question focuses on analyzing the variety of usernames associated with failed logins from a single IP. By calculating the Shannon entropy of the usernames, an analyst can distinguish between attack patterns. A high entropy indicates the attacker is guessing many different usernames (enumeration), while a very low entropy with a high attempt count suggests the attacker is trying many passwords against a few known usernames (password spraying). This provides valuable context for the type of attack underway.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Active Directory Federation Services (ADFS)
      - VPN Concentrators
      - Microsoft Exchange Servers
      - Public-facing Application Login Portals
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip over 10_minute_window:
            usernames = GET unique usernames from failed logins
            username_entropy = CALCULATE_SHANNON_ENTROPY(usernames)
            IF username_entropy > 98th_percentile_baseline:
              ALERT on source_ip for username enumeration
            ELSE IF username_entropy is very low AND attempt_count is high:
              ALERT on source_ip for password spraying
  - question: Can a machine learning model be trained to score the risk of failed login bursts to prioritize analyst review?
    context: This question explores using a supervised machine learning model to distinguish between malicious login attempts and benign failures (e.g., a user forgetting their password). By training on a rich feature set including IP reputation, time of day, and username variation, the model can assign a risk score to each burst of activity. This allows security analysts to focus their attention on the highest-risk events, improving efficiency and response time.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Active Directory Federation Services (ADFS)
      - VPN Concentrators
      - Microsoft Exchange Servers
      - Public-facing Application Login Portals
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each burst of failed_logins:
            features = EXTRACT (source_ip_reputation, username_variation, time_between_attempts, etc.)
            risk_score = ML_MODEL.predict(features)
            IF risk_score > high_risk_threshold:
              CREATE high_priority_alert
  - question: How can I monitor for external access to sensitive configuration files or directories on public web servers?
    context: This question aims to detect the successful exfiltration of sensitive configuration files (e.g., .git/config, .env) that are sometimes accidentally exposed on public web servers. Creating a high-priority alert based on regular expressions that match these file names and paths in HTTP logs is a critical, direct way to identify a data breach or a serious misconfiguration that an adversary could exploit to gain deeper access.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Public-facing Web Servers
      - API Gateways
      - Source Code Repositories
      - Cloud Storage Buckets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each http_request FROM external_ip:
            IF http_request.status_code is 200 AND http_request.uri MATCHES sensitive_file_regex (e.g., '/.git/config', '/.env'):
              CREATE high_priority_alert
  - question: How can statistical outlier detection be used to identify anomalous file downloads from public web servers?
    context: This question focuses on identifying unusual downloads that could indicate an adversary has found and is exfiltrating sensitive data. By establishing a baseline of normal file types (MIME types) and sizes, a system can calculate a rarity score for each download. Flagging downloads that are statistical outliers (e.g., a large database dump from a path that normally serves small images) helps analysts spot suspicious activity that doesn't match a specific, known signature.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Public-facing Web Servers
      - API Gateways
      - Source Code Repositories
      - Cloud Storage Buckets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each file_download_event:
            rarity_score = CALCULATE_RARITY(file_type, file_path, file_size)
            IF rarity_score > 99.5th_percentile:
              ALERT on anomalous file download
  - question: Can a machine learning autoencoder model detect enumeration of user data via an insecure API endpoint?
    context: This question explores using an autoencoder, a type of neural network, to detect anomalous API usage. The model is trained on benign API traffic to learn what "normal" requests and responses look like. When an adversary exploits an insecure API to download a large list of users, the resulting response payload will be significantly different from the norm. The autoencoder will fail to reconstruct this anomalous response accurately, resulting in a high reconstruction error and triggering an alert.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Public-facing Web Servers
      - API Gateways
      - Source Code Repositories
      - Cloud Storage Buckets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each api_request_response_pair:
            features = EXTRACT (endpoint, response_size, etc.)
            reconstruction_error = AUTOENCODER_MODEL.get_reconstruction_error(features)
            IF reconstruction_error > anomaly_threshold:
              ALERT on anomalous API activity