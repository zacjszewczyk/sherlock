name: T1036.003: Rename Legitimate Utilities
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps to determine if an adversary is attempting to evade defenses by renaming legitimate utilities. Investigative context includes identifying processes executing with a filename that does not match its known file hash; detecting mismatches between a process's on-disk filename and its embedded PE metadata (OriginalFilename); finding processes with generic names using command-line arguments characteristic of other utilities; locating legitimate system utilities executing from non-standard file paths; and observing a previously identified renamed utility spawning a command shell or initiating suspicious network connections.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is a process running with a filename that does not match the expected name for its known file hash?
  context: This question helps identify classic masquerading where an adversary renames a legitimate tool (e.g., 'powershell.exe' to 'update.exe') but leaves the file content unchanged. By comparing the file hash against a curated list of known-good utility hashes and their correct filenames, we can spot these direct mismatches, which are a strong indicator of defense evasion.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.
  range: last 90 days
  queries:
  - pseudocode: FOR each process_creation_event | JOIN with known_good_utility_hashes ON file_hash | WHERE process_image_name != known_good_utility_name | RETURN process_details
- question: Is a process running with a name that is statistically rare for its file hash based on historical data?
  context: Instead of a static list, this question uses a statistical approach to find anomalies. It identifies when a known utility hash is associated with a process name that has rarely or never been seen before in the environment. This can uncover novel renaming attempts or the use of legitimate but renamed tools in unusual contexts, moving beyond a simple blocklist.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.
  range: last 90 days
  queries:
  - pseudocode: FOR each new_process_event | LOOKUP process_name_frequency for its file_hash in historical_baseline | IF frequency < 1st_percentile | ALERT
- question: Can a machine learning model classify a process event as 'masquerading' based on features like parent process, command-line attributes, and name-hash mismatch?
  context: This question leverages machine learning to build a more sophisticated detection model. By training on a variety of features beyond just the name and hash, the model can learn complex patterns associated with masquerading. This approach can identify more subtle evasion techniques that might be missed by simple rules or statistical frequency analysis.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.
  range: last 90 days
  queries:
  - pseudocode: FOR each new_process_event | EXTRACT features (parent_process, cmd_length, cmd_entropy, name_hash_match_flag) | APPLY trained_ML_model | IF score > threshold | ALERT as 'masquerading'
- question: Is a process running where its on-disk filename differs from the 'OriginalFileName' embedded in its PE metadata?
  context: This question targets a common adversary tactic where they rename a file on disk (e.g., 'psexec.exe' to 'svc.exe'), but the original, revealing name remains in the file's metadata. Comparing the execution filename with the internal 'OriginalFileName' from the PE header is a high-fidelity way to detect renamed tools, especially when the original name is a commonly abused utility.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with Sysmon configured to capture and log PE header information.
  range: last 90 days
  queries:
  - pseudocode: FOR each process_creation_event | WHERE image_filename != pe_original_filename | AND pe_original_filename IN (abused_utility_watchlist) | ALERT
- question: Is a specific utility (identified by its 'OriginalFileName' in PE metadata) being executed with an unusually high variety of on-disk filenames on a host?
  context: This question looks for statistical anomalies in renaming patterns. A legitimate tool typically has very few on-disk filenames. If an adversary is repeatedly renaming a tool like 'PsExec.exe' with many different names ('run1.exe', 'task.exe', 'upd.exe'), the entropy of filenames associated with the 'PsExec.exe' OriginalFileName will spike. This method helps detect widespread or polymorphic renaming activity.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with Sysmon configured to capture and log PE header information.
  range: last 90 days
  queries:
  - pseudocode: FOR each host, for each original_filename | CALCULATE entropy of associated image_filenames | IF entropy > (baseline_avg + 2 * stdev) | ALERT
- question: Does a machine learning model identify a given pair of (on-disk filename, PE OriginalFileName) as an anomalous combination not seen in the baseline?
  context: This question uses an unsupervised machine learning model to learn what 'normal' combinations of on-disk and internal filenames look like. The model can then flag any new process execution where this pairing is an outlier, indicating a potentially malicious and previously unseen renaming attempt. This is effective for detecting zero-day or novel masquerading techniques.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with Sysmon configured to capture and log PE header information.
  range: last 90 days
  queries:
  - pseudocode: FOR each new_process_event | CREATE (image_filename, original_filename) pair | APPLY trained_autoencoder_model | IF reconstruction_error > threshold | ALERT
- question: Is a process executing with command-line arguments characteristic of a different utility?
  context: This question focuses on detecting masquerading by analyzing command-line content. Adversaries may rename a tool like PowerShell but will still use its unique command-line switches (e.g., '-enc'). This query searches for specific, high-confidence command-line patterns and alerts if the process executing them is not the expected one, effectively unmasking the renamed tool.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with command-line process auditing enabled.
  range: last 90 days
  queries:
  - pseudocode: FOR each process_creation_event | IF command_line MATCHES regex_for_utility_A | AND process_name IS NOT 'utility_A.exe' | ALERT
- question: Is a specific command-line pattern being executed by a statistically rare process name compared to its historical baseline?
  context: This question adds a statistical layer to command-line analysis. Instead of a rigid rule, it identifies when a known command-line pattern is executed by a process name that is highly unusual for that pattern. This can detect when an adversary renames a common tool to something novel that hasn't been seen before in the environment executing that specific command.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with command-line process auditing enabled.
  range: last 90 days
  queries:
  - pseudocode: FOR each new_process_event | LOOKUP process_name_frequency for its command_line_pattern in historical_baseline | IF frequency < 1st_percentile | ALERT
- question: Are there clusters of processes with very similar command-line arguments but a wide variety of different process names?
  context: This question uses unsupervised machine learning to find groups of suspicious activity. It clusters processes based on the meaning of their command lines. A cluster containing many different process names (e.g., 'run.exe', 'task.exe', '123.exe') but very similar command-line arguments (e.g., all related to PowerShell execution policy bypass) strongly suggests a single tool is being polymorphically renamed and executed.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers with command-line process auditing enabled.
  range: last 90 days
  queries:
  - pseudocode: CLUSTER all process_events by command_line_vectors | FOR each cluster | CALCULATE entropy of process_names | IF entropy > threshold | ALERT on cluster
- question: Is a known system utility being executed from a non-standard or unauthorized directory?
  context: This question helps detect 'living off the land' binaries that have been copied to an unusual location. System utilities like 'svchost.exe' or 'lsass.exe' have expected, standard paths (e.g., C:\Windows\System32). An adversary might copy one to a world-writable directory like C:\Users\Public to use it for malicious purposes. Alerting on executions from outside these standard paths is a strong indicator of misuse.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\Temp, C:\ProgramData), and world-writable directories.
  range: last 90 days
  queries:
  - pseudocode: FOR each process_creation_event | IF process_name IN critical_system_utilities_list | AND process_path NOT IN allowed_paths_for_that_utility | ALERT
- question: Is a process executing from a path that is statistically rare for that specific process name across the enterprise?
  context: This question uses a statistical baseline to find anomalous execution locations for any process, not just critical system utilities. It learns where programs normally run from. If a common tool like 'powershell.exe' suddenly executes from a user's 'Downloads' folder for the first time ever in the environment, this method would flag it as a low-frequency, suspicious event.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\Temp, C:\ProgramData), and world-writable directories.
  range: last 90 days
  queries:
  - pseudocode: FOR each new_process_event | LOOKUP execution_path_frequency for its process_name in historical_baseline | IF frequency < 1st_percentile | ALERT
- question: Has there been an anomalous spike in the number of critical system utilities being executed from non-standard paths on a specific host?
  context: This question moves from single-event detection to identifying a pattern of behavior over time on a single host. A lone execution from a strange path might be noise, but a sudden burst of many such executions is a strong signal of an active intrusion. Time-series analysis can automatically detect these spikes against the host's normal activity baseline.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\Temp, C:\ProgramData), and world-writable directories.
  range: last 90 days
  queries:
  - pseudocode: FOR each host, AGGREGATE daily count of non-standard_path_executions | APPLY time_series_anomaly_model | IF count is an anomalous spike | ALERT
- question: Has a process previously identified as a renamed utility subsequently spawned a command shell or connected to a known malicious IP address?
  context: This question links a masquerading detection with subsequent malicious action to increase confidence and severity. A renamed utility is suspicious, but a renamed utility that then spawns a command shell ('cmd.e.xe') or communicates with a C2 server on a threat intel list is a high-confidence indicator of compromise. This stateful approach correlates events to tell a more complete story.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.
  range: last 90 days
  queries:
  - pseudocode: IF process is tagged 'suspected_masquerade' | AND process spawns child ('cmd.exe' or 'powershell.exe') | OR process makes network_connection to IP in threat_intel_feed | ALERT with high severity
- question: Has a process identified as a renamed utility initiated network connections to statistically rare domains or ports?
  context: This question uses statistical rarity to evaluate the network traffic of a suspected masquerading process. Legitimate applications tend to communicate with common domains over standard ports. A connection to a newly registered domain, a domain rarely visited by anyone in the organization, or over a non-standard port is highly suspicious and increases the likelihood that the process is malicious.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.
  range: last 90 days
  queries:
  - pseudocode: IF process is tagged 'suspected_masquerade' | AND process connects to domain with prevalence < 1% | OR process uses port with frequency < 5% | INCREASE risk_score
- question: Can a graph-based machine learning model identify anomalous process execution chains that originate with a renamed utility?
  context: This question uses advanced graph-based ML to analyze the entire chain of events (process lineage). A Graph Neural Network (GNN) can learn what normal process relationships look like. It can then flag an entire subgraph as anomalous if it contains a suspicious pattern, such as a renamed utility (node 1) spawning a shell (node 2) which then connects to a rare domain (node 3). This contextualizes the detection within the full attack sequence.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.
  range: last 90 days
  queries:
  - pseudocode: BUILD process_lineage_graph from events | APPLY trained_GNN_model to new subgraphs | IF subgraph containing 'renamed_utility' node is flagged as anomalous | ALERT