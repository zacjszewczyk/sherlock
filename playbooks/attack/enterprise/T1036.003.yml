name: T1036.003: Rename Legitimate Utilities
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: >-
  This playbook helps investigate whether an adversary is attempting to evade defenses by renaming legitimate utilities. It provides questions and queries to detect masquerading techniques such as: a process executing with a filename that does not match its known file hash; a mismatch between the on-disk filename and the OriginalFilename in the binary's PE metadata; a generic process name using command-line arguments characteristic of a different utility; a legitimate utility executing from a non-standard file path; or a suspected renamed utility spawning a command shell or making external network connections.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events where a known legitimate utility's file hash does not match its expected process filename?
    context: >-
      This question seeks to identify classic masquerading where an adversary renames a common tool (e.g., powershell.exe to update.exe) to avoid simple name-based detections. By comparing the file hash against a known-good list, we can confirm the binary's true identity and detect the mismatch with its running process name, a strong indicator of defense evasion.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          SEARCH process_creation_events(Sysmon EID 1)
          | LOOKUP known_good_hashes for event.hash to get expected_filename
          | WHERE expected_filename EXISTS AND event.process_name != expected_filename
          | RETURN event.hostname, event.process_name, event.hash, expected_filename

  - question: Has a legitimate utility been executed with a statistically rare or never-before-seen process name compared to its historical baseline?
    context: >-
      This question uses statistical analysis to find outliers. Instead of relying on a static list of allowed names, it establishes a baseline of normal behavior for each utility. A process name that is statistically rare for a given utility hash suggests a deviation from the norm, which could indicate a renamed tool used by an adversary.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.
    range: last 30 days
    queries:
      - technology: pseudocode
        query: >-
          BASELINE process_name frequencies per utility_hash over 30 days
          | FOR new_process_event
          | CALCULATE frequency of new_event.process_name for its hash
          | IF frequency < 1st_percentile
          | ALERT on statistical outlier

  - question: Can we use a machine learning model to classify process creation events as either benign or potential masquerading based on features like parent process, command-line properties, and name-hash mismatches?
    context: >-
      This question proposes a more advanced, machine learning-based approach. By training a model on various features of process execution, it can learn the subtle patterns that differentiate legitimate activity from masquerading. This allows for the detection of more sophisticated or novel renaming techniques that simpler rules might miss.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          TRAIN classifier on labeled_process_events (features: parent_process, cmd_line_length, cmd_line_entropy, name_hash_match_boolean)
          | APPLY model to new_process_events for real-time scoring
          | ALERT on events classified as 'masquerading'

  - question: Are there processes executing where the on-disk filename does not match the 'OriginalFileName' from the binary's embedded PE metadata?
    context: >-
      This question targets another form of masquerading by checking the binary's internal metadata. Adversaries may rename a file on disk (e.g., psexec.exe to service.exe), but often neglect to alter the PE header's 'OriginalFileName' field. This discrepancy is a high-fidelity indicator of a renamed tool, especially for commonly abused utilities.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with Sysmon configured to capture and log PE header information.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          SEARCH process_creation_events(Sysmon EID 1)
          | WHERE event.pe_original_filename EXISTS AND event.process_name != event.pe_original_filename
          | IF event.pe_original_filename IN (watchlist_of_abused_utilities) THEN INCREASE_SEVERITY
          | ALERT

  - question: For a specific utility (based on 'OriginalFileName'), is there an unusually high variety of on-disk filenames being used across the enterprise or on a single host?
    context: >-
      This question uses entropy to detect when a single tool is being renamed to many different filenames, a common tactic for evading signature-based detections. A sudden spike in the entropy of filenames associated with a known `OriginalFileName` (like 'psexec.exe') suggests a widespread or automated renaming campaign.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with Sysmon configured to capture and log PE header information.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          CALCULATE baseline Shannon entropy of process_names for each original_filename
          | MONITOR entropy for each original_filename on a per-host basis
          | IF current_entropy > (baseline_entropy + 2 * standard_deviation)
          | ALERT on anomalous filename variety

  - question: Can an anomaly detection model identify unusual or never-before-seen pairings of on-disk filenames and 'OriginalFileName' metadata?
    context: >-
      This question leverages machine learning to learn the 'normal' relationships between on-disk names and their internal metadata. An autoencoder or one-class SVM can be trained on benign data to create a model of normalcy. Any new process whose (Image, OriginalFileName) pair has a high reconstruction error or is classified as an outlier is a strong candidate for investigation.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with Sysmon configured to capture and log PE header information.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          TRAIN one-class_SVM/autoencoder on baseline of (process_name, original_filename) pairs
          | APPLY model to new process creation events
          | ALERT on pairs identified as outliers (high error score)

  - question: Is a process executing with command-line arguments characteristic of a specific utility, but the process name itself is not that utility?
    context: >-
      This question focuses on the command-line, which often betrays the true purpose of a renamed binary. For example, the '-enc' switch is highly specific to PowerShell. If a process named 'updater.exe' is seen using this switch, it is almost certainly a masquerading PowerShell instance. This method can catch renamed utilities even if hash or PE data is unavailable.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with command-line process auditing enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          DEFINE patterns for utilities (e.g., powershell_pattern = '-enc', certutil_pattern = '-urlcache')
          | SEARCH process_creation_events
          | IF event.command_line MATCHES powershell_pattern AND event.process_name != 'powershell.exe'
          | ALERT

  - question: For a specific, known command-line pattern, is it being executed by a statistically rare process name?
    context: >-
      This question builds on the previous one by adding a statistical layer. Instead of a rigid 'is/is not' check, it analyzes the historical frequency of process names associated with a given command-line pattern. If a common pattern (like `certutil -urlcache`) is suddenly executed by a process name that has rarely or never been seen with it before, it's a strong statistical indicator of masquerading.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with command-line process auditing enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          BASELINE frequency of process_names for each known command_line_pattern
          | FOR new_process_event with a known pattern
          | IF event.process_name is not in top 99% most frequent for that pattern
          | ALERT on statistical outlier

  - question: Can we use command-line clustering to find groups of semantically similar commands that are being executed by an unusually diverse set of process names?
    context: >-
      This question uses unsupervised machine learning to find groups of related malicious activity without pre-defining the command patterns. By clustering similar command lines together, we can then analyze the process names within each cluster. A cluster representing a specific malicious action that has high entropy in its process names is a strong signal that an adversary is using a renamed tool.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers with command-line process auditing enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          VECTORIZE all command_lines using TF-IDF or word embeddings
          | CLUSTER vectors using DBSCAN
          | FOR each cluster, CALCULATE entropy of process_names
          | INVESTIGATE clusters with high command similarity and high process name entropy

  - question: Has a legitimate system utility been executed from a non-standard file path, such as a user's temporary directory?
    context: >-
      This question checks for a common adversary tactic: placing a copy of a legitimate tool in an unusual location (like C:\Users\Public) to bypass security controls that focus on standard system directories. Execution of a system-critical binary from a non-standard path is highly suspicious and warrants immediate investigation.
    answer_sources:
      - Windows Event ID 11 (Sysmon)
      - Windows Event ID 1 (Sysmon)
      - User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\Temp, C:\ProgramData), and world-writable directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          DEFINE allowed paths for critical system utilities (e.g., svchost.exe -> C:\Windows\System32\)
          | SEARCH process_creation_events(Sysmon EID 1)
          | IF event.process_name is a critical utility AND event.path is not in its allowed set
          | ALERT

  - question: Is a specific process name being executed from a file path that is statistically rare compared to its historical execution paths across the enterprise?
    context: >-
      This question applies statistical baselining to execution locations. By learning all the normal paths from which a given process (e.g., 'powershell.exe') executes, we can flag new executions from anomalous locations. This is more dynamic than a static list of 'bad' paths and can detect when an adversary places a tool in a novel but suspicious location.
    answer_sources:
      - Windows Event ID 11 (Sysmon)
      - Windows Event ID 1 (Sysmon)
      - User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\Temp, C:\ProgramData), and world-writable directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          BASELINE execution path frequencies for each unique process_name
          | FOR new_process_event
          | IF event.path frequency for its process_name < 1st_percentile
          | ALERT on anomalous execution path

  - question: Is there a sudden spike in the number of critical system utilities being executed from non-standard paths on a specific host?
    context: >-
      This question uses time-series analysis to detect a burst of suspicious activity on a single host. A compromised machine may suddenly exhibit a high volume of system tools running from unusual directories. By modeling the normal rate of these events over time, a time-series model can automatically flag a sudden, anomalous increase.
    answer_sources:
      - Windows Event ID 11 (Sysmon)
      - Windows Event ID 1 (Sysmon)
      - User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\Temp, C:\ProgramData), and world-writable directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          CREATE daily time_series per host: count(critical_utilities from non-standard_paths)
          | TRAIN time-series model (e.g., SARIMA) on historical data
          | ALERT on anomalous spikes detected by the model

  - question: Has a process, previously identified as a renamed utility, subsequently spawned a command shell or initiated a network connection to a known malicious destination?
    context: >-
      This question focuses on post-exploitation behavior, correlating a masquerading detection with subsequent malicious actions. If a process is first flagged as a renamed utility and then observed spawning cmd.exe or connecting to an IP on a threat intelligence feed, it dramatically increases the confidence that the activity is malicious.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 3 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          TAG process as 'suspected_masquerade' if it matches other rules
          | SEARCH for events where parent_process is tagged 'suspected_masquerade'
          | IF child_process is 'cmd.exe' OR 'powershell.exe' OR network_destination is on threat_feed
          | ALERT with high severity

  - question: Following a masquerading detection, did the suspicious process connect to a statistically rare domain or network port?
    context: >-
      This question adds a statistical lens to the post-exploitation analysis. Even if a destination IP isn't on a threat feed, its rarity can be a strong indicator of malice. A renamed utility connecting to a domain that is not on the public top 1 million list, or using a non-standard port, is highly anomalous.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 3 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          FOR process tagged 'suspected_masquerade'
          | ANALYZE its subsequent network/DNS logs
          | IF destination_domain is in bottom 1% of prevalence (e.g., not in top 1M list) OR destination_port is in bottom 5% of usage
          | INCREASE risk score and ALERT

  - question: Can a graph-based model detect anomalous process lineage subgraphs that include a renamed utility spawning a shell or making a rare network connection?
    context: >-
      This question proposes using graph-based machine learning to understand the entire chain of activity. By modeling process relationships as a graph, a Graph Neural Network (GNN) can learn what benign process trees look like. It can then identify anomalous subgraphs where a node (process) identified as a renamed utility is linked to other suspicious activities.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 3 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          BUILD process lineage graphs from Sysmon events
          | TRAIN Graph Neural Network (GNN) on benign graph structures
          | APPLY model to new process subgraphs
          | ALERT on anomalous subgraphs containing a 'masquerade' node linked to shell or rare network child nodes