name: T1036.011: Overwrite Process Arguments
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps investigators determine if an adversary is evading defenses by overwriting in-memory process arguments to masquerade as a legitimate process. This technique is often used by malware to hide its true purpose from process listing tools and EDR solutions. The playbook provides questions to guide investigations by looking for evidence such as: processes executed from known malicious binaries, mismatches between initial and current command-line arguments, anomalous network connections originating from seemingly benign processes, unusual process parent-child relationships or file paths, and running processes with suspiciously short or empty command lines.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process being created from a binary whose file hash is a known indicator of compromise for malware capable of argument overwriting?
    context: |
      This question aims to identify the initial execution of known malicious tools, such as BPFDoor or XorDdos, that possess the capability to overwrite their own process arguments to evade detection. By matching the file hash of newly created processes against a threat intelligence feed, we can catch the malware at the point of execution, before it has a chance to masquerade itself.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - EDR Process Creation Telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: SIEM
        query: SEARCH process_creation_events | JOIN process.hash with threat_intel_feed | WHERE match_found
  - question: Has a statistically rare and unsigned binary been executed recently?
    context: |
      This question tries to find unknown or new malware by focusing on anomalies. Most legitimate software is widely distributed and digitally signed. A binary that is very rare (seen on only a few systems) and lacks a digital signature from a trusted publisher is suspicious. Correlating this with other behaviors like network beaconing can increase confidence that it is malicious.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - EDR Process Creation Telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: SIEM/Data Lake
        query: CALCULATE prevalence of process.hash over 30 days | FILTER hash_prevalence < 0.1% AND is_signed = false | CORRELATE with network_events
  - question: Does a machine learning model score a new process execution as highly likely to be malicious based on its creation event features?
    context: |
      This question leverages a predictive model trained to recognize the characteristics of malicious process executions. By analyzing features like hash prevalence, parent process, user, and command-line length, the model can identify complex patterns that are difficult to define with simple rules, providing a probabilistic assessment of risk.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - EDR Process Creation Telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: ML Model
        query: SCORE process_creation_event with trained_classifier | RETURN events where score > threshold
  - question: Is there a mismatch between a process's initial command-line arguments and its current arguments in the proc filesystem?
    context: |
      This is a direct detection method for argument overwriting. Legitimate processes rarely change their command-line arguments after launch. This question checks for this specific behavior by capturing the arguments at process creation and comparing them to the live arguments in `/proc/[pid]/cmdline` a moment later. A mismatch is a strong indicator of this evasion technique.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - osquery process table snapshots
      - EDR agent telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: EDR/osquery
        query: ON process_creation, store initial_cmdline | WAIT 2s | READ current_cmdline from /proc/[pid]/cmdline | ALERT if initial_cmdline != current_cmdline
  - question: Does the timing of process argument modifications fall within a statistically defined pattern associated with malicious behavior?
    context: |
      This question aims to build a behavioral profile for the overwriting technique itself. By analyzing the time delay between process creation and argument modification, we can establish a typical timeframe for this malicious action (e.g., usually within 1-2 seconds). This profile helps differentiate it from any benign in-memory modifications that might occur at different, more variable times, reducing false positives.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - osquery process table snapshots
      - EDR agent telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: SIEM/Data Lake
        query: CALCULATE time_delta between process_creation and argument_modification | ANALYZE distribution of time_delta | FLAG outliers or tight clusters
  - question: Does an anomaly detection model flag a process's initial sequence of system calls as deviating from normal startup behavior?
    context: |
      This question looks for the underlying mechanism of argument overwriting. The modification requires specific system calls (like `prctl`). A sequence-aware model can learn the normal patterns of system calls during process startup. A deviation from this learned norm, especially one involving memory modification syscalls, can be flagged as a high-fidelity anomaly indicative of argument tampering.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - osquery process table snapshots
      - EDR agent telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: ML Model/EDR
        query: CAPTURE syscall sequence post-creation | SCORE sequence with RNN anomaly_detection_model | ALERT on high anomaly_score
  - question: Is a process with a common benign name (e.g., sshd, cron) making network connections to a known malicious IP address?
    context: |
      This question seeks to identify a masquerading process by its external communications. Adversaries often use common process names to hide their C2 implants. However, the implant must still communicate with its controller. By correlating process names with network connections to destinations on a threat intelligence blocklist, we can unmask the masquerading process.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Linux Auditd logs (type=SYSCALL, syscall=connect)
      - Network egress points (e.g., internet gateway), DNS resolvers, and critical Linux servers.
    range: last 90 days
    queries:
      - technology: SIEM
        query: SEARCH network_connections | JOIN on host/timestamp with process_creation_events | WHERE process.name IN (spoof_watchlist) AND destination.ip IN (c2_blocklist)
  - question: Is a common system process exhibiting anomalous network behavior compared to its established baseline?
    context: |
      This question uses statistical baselining to find suspicious activity without relying on known IOCs. For any given system process (like `rsyslogd`), we can profile its normal network behaviorâ€”what ports it uses, what countries it connects to, etc. A process that suddenly connects to a rare port or an unusual geographic location, even if the IP isn't on a blocklist, deviates from this baseline and warrants investigation. The entropy formula is $$ H(X) = -\sum_{i=1}^{n} P(x_i) \log_2 P(x_i) $$.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Linux Auditd logs (type=SYSCALL, syscall=connect)
      - Network egress points (e.g., internet gateway), DNS resolvers, and critical Linux servers.
    range: last 90 days
    queries:
      - technology: SIEM/UBA
        query: FOR each process.name, BUILD baseline of dest_port, dest_geo, connection_entropy | COMPARE live traffic to baseline | ALERT on significant deviation
  - question: Does time-series analysis reveal an anomalous periodic network beaconing pattern from a system process?
    context: |
      This question focuses on detecting the 'heartbeat' of a C2 implant. Malicious implants often communicate with their C2 server on a regular, periodic schedule. A time-series model like ARIMA or LSTM can learn the normal, often bursty or irregular, traffic patterns of legitimate processes and detect the emergence of a new, highly periodic signal in traffic volume or connection frequency, which is a strong indicator of C2 beaconing.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Linux Auditd logs (type=SYSCALL, syscall=connect)
      - Network egress points (e.g., internet gateway), DNS resolvers, and critical Linux servers.
    range: last 90 days
    queries:
      - technology: ML Model/Time-Series DB
        query: MODEL traffic_volume and connection_frequency per process/host | DETECT anomalous periodicities that differ from baseline
  - question: Is a critical system process running with an incorrect parent process or from a non-standard file path?
    context: |
      This question relies on the fact that the process lineage and file location for legitimate system daemons are highly predictable. For example, `kworker` threads should always be children of `kthreadd`, and `sshd` should run from `/usr/sbin/sshd`. A violation of these simple, well-defined rules (e.g., `sshd` running from `/tmp`) is a very strong signal of compromise.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: SIEM/EDR
        query: SEARCH process_creation_events | ALERT WHERE (process.name='sshd' AND process.path!='/usr/sbin/sshd') OR (process.name='[kworker]' AND parent.name!='kthreadd')
  - question: Has a statistically rare parent-child process relationship been observed in the environment?
    context: |
      This question generalizes the previous one to find unknown-bad relationships. Instead of defining all good relationships, we can analyze all observed parent-child process pairs across the environment and flag the ones that are extremely uncommon. For instance, if `bash` launching `sshd` has only happened twice in the last month across thousands of systems, it is a statistical anomaly worth investigating.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: SIEM/Data Lake
        query: CALCULATE frequency of all (parent.name, child.name) pairs over 30 days | FILTER for pairs with count < 5 | REVIEW results
  - question: Does a graph-based anomaly detection model identify a process's lineage as having an anomalous structure?
    context: |
      This question treats process execution history as a large graph and looks for strange shapes or patterns within it. A model can learn what normal process execution graphs look like. An attacker's actions, like a web server spawning a shell which then spawns a reverse shell, create a subgraph with an unusual structure that the model can flag as anomalous, even if the individual processes involved seem legitimate.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs (type=EXECVE)
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: Graph DB/ML Model
        query: MODEL process lineage as a graph | IDENTIFY subgraphs with anomalous structures compared to baseline graphs
  - question: Is a running process, not on an exception list, observed with an empty command line?
    context: |
      This question targets a common outcome of argument overwriting: the complete erasure of the original command line. While some kernel threads legitimately have no command line, most user-space processes do. This query periodically scans the process list and flags any process with an empty `cmdline` that is not on a pre-approved list of exceptions, providing a simple but effective detection method.
    answer_sources:
      - osquery process table snapshots
      - EDR agent telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: osquery/EDR
        query: SELECT * FROM processes WHERE cmdline='' AND name NOT IN (exception_list)
  - question: Is a running process observed with a command-line length that is statistically anomalous (i.e., unusually short) for that specific process name?
    context: |
      This question uses baselining to detect argument truncation or erasure. For every process name, we can establish a baseline of its normal command-line length. If a running instance of a process is found with a command line that is significantly shorter than this baseline (e.g., below the 1st percentile), it suggests that its arguments may have been tampered with or erased.
    answer_sources:
      - osquery process table snapshots
      - EDR agent telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: SIEM/Data Lake
        query: FOR each process.name, CALCULATE baseline of cmdline length (e.g., 1st percentile) | SCAN running processes | ALERT if current_length < baseline_length
  - question: Does a clustering algorithm identify a group of running processes as outliers based on having an abnormally short or empty command line?
    context: |
      This question uses unsupervised machine learning to find suspicious processes without pre-defined rules or baselines. By feeding features of all running processes (like `cmdline` length, process name, user) into a clustering algorithm like DBSCAN, we can automatically group them. Processes that don't fit into the large, dense clusters of "normal" processes are flagged as outliers worthy of investigation.
    answer_sources:
      - osquery process table snapshots
      - EDR agent telemetry
      - Critical Linux servers (e.g., web servers, database servers, authentication servers), container environments, and developer workstations.
    range: last 90 days
    queries:
      - technology: ML Model
        query: CLUSTER running processes on features (cmdline_length, name, user) | IDENTIFY outlier clusters with short/empty cmdlines