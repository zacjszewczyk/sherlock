name: T1124: System Time Discovery
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is gathering information about the system time or time zone. This can be observed through several indicators, including the execution of processes whose hashes match known reconnaissance tools, anomalous execution of built-in time discovery utilities (`net.exe`, `w32tm.exe`), unusual Network Time Protocol (NTP) traffic to unapproved servers, and suspicious execution of time-related commands or API calls on network devices, hypervisors, or endpoints by non-standard users.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any processes being created that match known malicious reconnaissance tools based on their file hash?
  context: This question aims to identify the direct execution of known malicious tools used for reconnaissance. Adversaries often use pre-compiled tools to perform discovery tasks like checking system time. Matching the file hash of a newly created process against a threat intelligence feed of known malicious hashes is a high-fidelity method for detecting the use of these tools.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Executive Workstations
  - Domain Controllers
  - Critical Application Servers
  - Developer Endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
        CALCULATE file_hash
        IF file_hash IN known_malicious_hashes_feed
          ALERT high_severity
- question: Is there an anomalous trend in the detection of known malicious reconnaissance tool hashes across the enterprise?
  context: This question seeks to identify widespread or escalating campaigns that might be missed by single, isolated alerts. By analyzing the frequency of hash detections over time and across different segments of the organization (hosts, users, departments), we can spot coordinated activity. A sudden increase in detections exceeding a statistical baseline (95th percentile) can indicate an active, spreading threat.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Executive Workstations
  - Domain Controllers
  - Critical Application Servers
  - Developer Endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE 90_day_baseline_detection_rate FOR each malicious_hash
      FOR each new_detection
        UPDATE current_detection_rate
        IF current_detection_rate > 95th_percentile(baseline)
          ALERT trending_threat
- question: Can the execution of a malicious reconnaissance tool be attributed to a known threat actor campaign or a new emerging threat?
  context: This question aims to move beyond simple detection to active threat attribution. By clustering similar malicious process events based on features like file hash, user, host, and parent process, we can group related incidents. When a new incident occurs, classifying it into an existing cluster helps attribute it to a known campaign, providing valuable context about the actor's TTPs and potential motives. Unclustered incidents may signify a new, previously unseen threat.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Executive Workstations
  - Domain Controllers
  - Critical Application Servers
  - Developer Endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL = train_clustering_model(historical_malicious_events)
      FOR each new_malicious_event
        CLUSTER = MODEL.predict(new_event)
        IF CLUSTER is new
          ALERT new_threat_activity
        ELSE
          ALERT attributed_activity, add_context(CLUSTER)
- question: Are built-in time discovery utilities being executed by an unusual parent process or from obfuscated scripts?
  context: This question focuses on detecting the misuse of legitimate system utilities for discovery. Adversaries use native tools like `net time`, `w32tm`, and `Get-Date` to avoid dropping new files on disk. Normal execution of these tools is typically initiated by a user (`explorer.exe`) or the system (`services.exe`). An alert on execution from an unexpected parent (like `cmd.exe` spawned by a web server) or from obfuscated PowerShell can indicate malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Sysmon Event ID 1
  - All Windows endpoints and servers, with a focus on hosts not designated as NTP servers within the environment (e.g., standard user workstations, application servers).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE legitimate_parents = [explorer.exe, services.exe, svchost.exe]
      FOR each process_creation_event WHERE process_name IN [net.exe, w32tm.exe, ...]
        IF parent_process NOT IN legitimate_parents
          ALERT anomalous_parent_process
      FOR each powershell_script_block_event
        IF (script contains "Get-Date") AND (script is obfuscated OR non-interactive)
          ALERT suspicious_powershell_time_discovery
- question: Is there an unusual frequency or pattern in the execution of time discovery commands by a specific user or on a specific host?
  context: This question aims to identify anomalous behavior by baselining normal activity. A single time discovery command is usually benign. However, a sudden spike in the frequency of these commands for a particular user or host, exceeding their historical norms (99th percentile), could indicate automated scripting used for reconnaissance. Additionally, analyzing the entropy of commands within a short window can reveal scripted activity where a discovery command is mixed with other suspicious commands.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Sysmon Event ID 1
  - All Windows endpoints and servers, with a focus on hosts not designated as NTP servers within the environment (e.g., standard user workstations, application servers).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user_host_pair
        BASELINE = calculate_hourly_frequency(time_discovery_cmds, last_30_days)
        CURRENT = count_hourly_frequency(time_discovery_cmds, current_hour)
        IF CURRENT > 99th_percentile(BASELINE)
          ALERT frequency_anomaly
- question: Can a machine learning model classify the execution of a time discovery command as malicious based on its context?
  context: This question seeks to use machine learning to provide a more nuanced and context-aware detection than simple rules. By training a model (e.g., Random Forest) on features like parent process, command-line arguments, and user context from labeled historical data, we can create a classifier. This model can then predict in real-time whether a new time discovery event is likely malicious, reducing false positives and identifying subtle attack patterns that rules might miss.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Sysmon Event ID 1
  - All Windows endpoints and servers, with a focus on hosts not designated as NTP servers within the environment (e.g., standard user workstations, application servers).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL = train_classifier(labeled_historical_process_data)
      FOR each new_time_discovery_event
        PREDICTION, SCORE = MODEL.predict(event_features)
        IF PREDICTION == 'malicious' AND SCORE > 0.8
          ALERT ml_detected_malicious_time_discovery
- question: Are any hosts communicating with unapproved external NTP servers?
  context: This question aims to detect adversaries synchronizing time with external, non-sanctioned sources. Organizations typically use a defined set of internal or specific external NTP servers. Any communication on UDP port 123 to an IP address not on this approved allowlist is highly suspicious and could indicate an adversary attempting to bypass internal time sources or using NTP for C2 communications.
  answer_sources:
  - Zeek conn.log
  - Zeek ntp.log
  - Network Egress Points
  - Firewall and Network Gateway logs
  - DNS Servers
  - Domain Controllers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE approved_ntp_servers = [...]
      FOR each network_connection_event
        IF destination_port == 123 AND protocol == 'UDP'
          IF destination_ip NOT IN approved_ntp_servers
            ALERT unapproved_ntp_communication
- question: Is any host exhibiting an anomalous volume of NTP traffic?
  context: This question seeks to identify unusual patterns in NTP communication volume as an indicator of compromise. While some NTP traffic is normal, a sudden, significant increase in the number of NTP queries from a single host can be suspicious. By baselining the normal hourly volume for each host and alerting when traffic exceeds a statistical threshold (e.g., three standard deviations from the mean), we can detect potential misuse of the NTP protocol, such as for data exfiltration or C2 keepalives.
  answer_sources:
  - Zeek conn.log
  - Zeek ntp.log
  - Network Egress Points
  - Firewall and Network Gateway logs
  - DNS Servers
  - Domain Controllers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host
        MEAN, STD_DEV = calculate_baseline_ntp_volume(last_30_days)
        CURRENT_VOLUME = count_ntp_connections(current_hour)
        IF CURRENT_VOLUME > (MEAN + 3 * STD_DEV)
          ALERT ntp_volume_anomaly
- question: Can an unsupervised machine learning model detect anomalous NTP traffic that deviates from learned normal patterns?
  context: This question aims to use an advanced, unsupervised learning approach to find novel or subtle anomalies in NTP traffic. An autoencoder model can be trained on historical network logs to learn the 'normal' structure of NTP communications (source/destination pairs, volume, timing). When live traffic is fed to the model, any event that the model struggles to reconstruct (resulting in a high reconstruction error) is considered anomalous and flagged for review. This can detect sophisticated attacks that might not violate simple rules or thresholds.
  answer_sources:
  - Zeek conn.log
  - Zeek ntp.log
  - Network Egress Points
  - Firewall and Network Gateway logs
  - DNS Servers
  - Domain Controllers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL = train_autoencoder(historical_ntp_logs)
      FOR each new_ntp_event
        RECONSTRUCTION_ERROR = MODEL.evaluate(new_ntp_event)
        IF RECONSTRUCTION_ERROR > threshold
          ALERT ml_detected_ntp_anomaly
- question: Are time discovery commands being executed on network devices or hypervisors by unauthorized users?
  context: This question focuses on privilege misuse on critical infrastructure. Access to network devices and hypervisors is typically restricted. The execution of time discovery commands (like `show clock`) by a user who is not a network or virtualization administrator is a significant red flag. It could indicate a compromised user account being used for reconnaissance on these high-value systems.
  answer_sources:
  - Sysmon Event ID 1
  - Network device AAA logs
  - Hypervisor audit logs
  - Endpoint Detection and Response (EDR) API monitoring logs
  - Network infrastructure (switches, routers)
  - Hypervisor management interfaces
  - Endpoints and Servers with EDR agents
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE admin_groups = [Network Administrators, Virtualization Administrators]
      FOR each device_log_event
        IF (command contains "show clock" OR "esxcli system clock get")
          IF user NOT IN admin_groups
            ALERT unauthorized_time_discovery_on_infra
- question: Is any process making an unusually high number of time-related Windows API calls?
  context: This question drills down to the lowest level of activity by monitoring API calls. Malicious software may repeatedly query the system time (e.g., using `GetTickCount` or `GetSystemTime`) to evade sandboxes or for timing-based triggers. By baselining the normal frequency of these calls for each process across the environment, we can flag a process that makes an anomalously high number of calls (e.g., 99th percentile) compared to its peers, indicating potential malicious behavior.
  answer_sources:
  - Sysmon Event ID 1
  - Network device AAA logs
  - Hypervisor audit logs
  - Endpoint Detection and Response (EDR) API monitoring logs
  - Network infrastructure (switches, routers)
  - Hypervisor management interfaces
  - Endpoints and Servers with EDR agents
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_image
        BASELINE = calculate_api_call_frequency(time_apis, all_instances)
      FOR each running_process
        CURRENT_FREQ = count_api_calls(time_apis)
        IF CURRENT_FREQ > 99th_percentile(BASELINE)
          ALERT anomalous_api_call_frequency
- question: Is a time-related API call part of a suspicious sequence of operations?
  context: This question aims to detect malicious intent by analyzing the context of API calls, not just their frequency. A time-related API call on its own is benign, but when it appears in a sequence with other calls related to memory inspection, process injection, or network communication, it becomes highly suspicious. An RNN model trained on legitimate API call sequences can identify these anomalous chains of events, flagging a time-related call when it's part of a sequence that deviates from normal program behavior.
  answer_sources:
  - Sysmon Event ID 1
  - Network device AAA logs
  - Hypervisor audit logs
  - Endpoint Detection and Response (EDR) API monitoring logs
  - Network infrastructure (switches, routers)
  - Hypervisor management interfaces
  - Endpoints and Servers with EDR agents
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL = train_rnn_on_api_sequences(legitimate_sequences)
      FOR each new_api_call_sequence
        ANOMALY_SCORE = MODEL.predict(sequence)
        IF (time_api in sequence) AND (ANOMALY_SCORE > threshold)
          ALERT suspicious_api_call_sequence