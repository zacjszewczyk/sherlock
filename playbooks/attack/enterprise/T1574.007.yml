name: T1574.007: Path Interception by PATH Environment Variable
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries manipulating the PATH environment variable to achieve persistence, privilege escalation, or defense evasion. An adversary may place a malicious executable in a location that is searched before legitimate system directories (e.g., a user-writable folder) and give it the same name as a common system utility. When the system or a user attempts to run that utility without specifying a full path, the operating system executes the adversary's malicious version. This playbook provides questions to investigate signs of this activity, such as the creation of masquerading files in unusual locations, direct modification of the PATH variable in the registry, execution of system processes from non-standard paths, and anomalous network behavior from these suspicious processes.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a file with a name matching a common system utility been created in a user-writable directory, and does its hash match a known malicious indicator?
  context: Adversaries may place a malicious executable in a directory like C:\Users\* or C:\ProgramData\*, naming it after a system tool (net.exe, findstr.exe). If the PATH variable is later modified to include this directory, the OS will execute the malicious version. This question aims to detect the initial placement of this malicious file by correlating file creation events with threat intelligence.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - Zeek files.log
  - Applicable to: User Workstations, Application Servers, Domain Controllers, Developer Workstations
  range: last 90 days
  queries:
  - pseudocode: JOIN file_creation_events ON file_hash WITH threat_intel_feed WHERE file_path IN (user_writable_dirs) AND file_name IN (system_utility_names) AND threat_intel.match = true
- question: Has a user created an executable file in a directory that is statistically rare for them to use, especially if the filename masquerades as a system utility?
  context: This question identifies anomalous behavior by baselining normal user activity. Users typically create executables in predictable locations (e.g., Downloads, development project folders). A new executable created in an unusual directory for that specific user, such as AppData\Roaming, could indicate a malicious payload being staged for a path interception attack. This is especially suspicious if the filename is a common system utility.
  answer_sources:
  - Windows Event ID 11
  - Applicable to: User Workstations, Application Servers, Domain Controllers, Developer Workstations
  range: last 90 days
  queries:
  - pseudocode: FOREACH user, new_executable_creation; GET historical_creation_dirs(user); CALCULATE frequency(new_dir) in historical_dirs; ALERT IF frequency < 1st_percentile.
- question: Is an isolation forest model flagging a file creation event as an outlier, particularly for a file named like a system utility in a user-writable path?
  context: This question uses machine learning to detect subtle anomalies in file creation events that might be missed by simple rules. By training a model on features like user context, file path, and parent process, it can identify combinations of attributes that are highly uncharacteristic of benign activity, such as a web browser process creating a file named 'svchost.exe' in a temporary folder.
  answer_sources:
  - Windows Event ID 11
  - Applicable to: User Workstations, Application Servers, Domain Controllers, Developer Workstations
  range: last 90 days
  queries:
  - pseudocode: APPLY isolation_forest_model to file_creation_events; ALERT ON high_anomaly_score WHERE file_path IN (user_writable_dirs) AND file_name IN (system_utility_names).
- question: Has the PATH environment variable in the registry been modified to prepend a non-standard, user-writable directory?
  context: A direct and crucial step in this attack is modifying the PATH variable. Adversaries often prepend their malicious directory so it gets searched before legitimate system directories. This question directly hunts for this registry modification, focusing on additions of user-writable paths like C:\Users\* or C:\ProgramData\* to the beginning of the PATH string.
  answer_sources:
  - Windows Event ID 13
  - Windows Event ID 4657
  - Applicable to: Domain Controllers (for GPO-based changes), User Workstations, Terminal Servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH registry_events WHERE target_object ENDS WITH '\Environment\Path' AND new_value STARTS WITH (user_writable_dir_pattern).
- question: Has the PATH registry value been modified to include a directory that is statistically rare across the enterprise?
  context: Instead of relying on a fixed list of "bad" directories, this question establishes a baseline of all PATH directories seen across the organization. When a PATH is modified, the new directory is checked against this enterprise-wide baseline. An addition of a directory that is very uncommon (e.g., seen on less than 1% of systems) is a strong indicator of a non-standard change, potentially for malicious purposes.
  answer_sources:
  - Windows Event ID 13
  - Windows Event ID 4657
  - Applicable to: Domain Controllers (for GPO-based changes), User Workstations, Terminal Servers
  range: last 90 days
  queries:
  - pseudocode: ON path_modification_event; EXTRACT added_directory; CALCULATE prevalence(added_directory) across all_host_baselines; ALERT IF prevalence < 1%.
- question: Is a Random Forest model assigning a high-risk score to a recent PATH environment variable modification?
  context: This question leverages a machine learning model to assess the risk of a PATH modification based on a richer set of contextual features. The model considers who (user) and what (process) made the change, the characteristics of the added directory (e.g., is it newly created?), and the time of day. This provides a more nuanced risk assessment than a simple rule.
  answer_sources:
  - Windows Event ID 13
  - Windows Event ID 4657
  - Applicable to: Domain Controllers (for GPO-based changes), User Workstations, Terminal Servers
  range: last 90 days
  queries:
  - pseudocode: APPLY random_forest_model to path_modification_events; ALERT ON high_risk_score.
- question: Has a legitimate process executed a child process whose full path resolves to a non-standard, user-writable directory?
  context: This question seeks to find the moment the hijack occurs. When a legitimate process (like svchost.exe) tries to run a system utility (like net.exe), it should resolve to C:\Windows\System32\net.exe. If, due to a manipulated PATH, it instead runs C:\Users\someuser\net.exe, this indicates the attack is active. This is a high-fidelity indicator of compromise.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: All Endpoints and Servers, especially those with auto-starting applications
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE child_path IN (user_writable_dirs) AND child_filename IN (system_utility_names) AND parent_path IN (legitimate_system_paths).
- question: Is a newly created process executing from a path that is statistically anomalous for its parent process?
  context: This question establishes a behavioral baseline for parent-child process relationships. For any given parent process (e.g., 'winword.exe'), we can build a profile of its normal child process execution paths. If that parent suddenly spawns a child from a directory it has never used before, it represents a deviation from normal behavior that could be caused by a path interception.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: All Endpoints and Servers, especially those with auto-starting applications
  range: last 90 days
  queries:
  - pseudocode: ON new_process_creation; GET historical_child_paths(parent_process); IF new_child_path NOT IN historical_child_paths; ALERT.
- question: Does a process creation event have a high reconstruction error from an autoencoder model, indicating an anomalous parent-child relationship?
  context: This question uses an autoencoder, a type of neural network, to learn the complex patterns of normal process creation events. Events that the model cannot accurately reconstruct are flagged as anomalous. This is particularly effective at finding unusual combinations, such as a legitimate parent process spawning a child with a common system name from an unexpected user-writable directory.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: All Endpoints and Servers, especially those with auto-starting applications
  range: last 90 days
  queries:
  - pseudocode: APPLY autoencoder_model to process_creation_vectors; ALERT ON high_reconstruction_error WHERE child_path IN (user_writable_dirs).
- question: Has a new scheduled task or autorun entry been created that calls a binary by name only, and did it subsequently execute from a user-writable directory?
  context: Adversaries create persistence by scheduling tasks or adding autorun keys. To make the persistence mechanism more resilient and portable, they may call the malicious binary by name only (e.g., 'updater.exe' instead of 'C:\malware\updater.exe'). This question looks for the creation of such a persistence item and correlates it with the subsequent execution of that binary from an unusual, user-writable path.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 13
  - Windows Event ID 4698
  - Applicable to: User Workstations, Critical Servers, Domain Controllers (for scheduled tasks deployed via GPO)
  range: last 90 days
  queries:
  - pseudocode: DETECT new_persistence_item with relative_path_command; CORRELATE with subsequent process_creation where resolved_path IN (user_writable_dirs).
- question: Has a new persistence entry been created that uses a relative path, which is a statistical outlier for the host or the enterprise?
  context: This question establishes a baseline for how commands are specified in persistence mechanisms. In most enterprise environments, absolute paths are standard. A new scheduled task or autorun key that uses a relative path (calling a binary by name only) may be a statistical anomaly compared to the host's existing configuration or the global enterprise norm, suggesting a potential path hijacking setup.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 13
  - Windows Event ID 4698
  - Applicable to: User Workstations, Critical Servers, Domain Controllers (for scheduled tasks deployed via GPO)
  range: last 90 days
  queries:
  - pseudocode: ON new_persistence_item; IF command_path is relative; CALCULATE ratio_relative_vs_absolute(host_baseline); ALERT IF new_item is outlier.
- question: Has a time-series model detected a sudden spike in the creation of new persistence entries that use relative paths?
  context: This question monitors the rate of creation for a specific type of suspicious persistence. A sudden increase in the number of new scheduled tasks or run keys that use relative paths on a given host could indicate an automated script or adversary deploying a path interception attack at scale. A time-series model can detect such a spike as an anomaly against the normal background rate.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 13
  - Windows Event ID 4698
  - Applicable to: User Workstations, Critical Servers, Domain Controllers (for scheduled tasks deployed via GPO)
  range: last 90 days
  queries:
  - pseudocode: MONITOR daily_count of new_relative_path_persistence_items; APPLY SARIMA model; ALERT on detected anomaly spike.
- question: Is a process executing from a user-writable directory making outbound network connections to a known malicious IP or domain?
  context: This question seeks to identify command-and-control (C2) activity from a successfully hijacked process. Once the malicious binary is executed, it often needs to communicate with the adversary. This query joins process execution data with network logs to find processes running from suspicious locations that are also talking to destinations found in threat intelligence feeds.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Applicable to: Network Egress Points (Firewalls, Proxies), DNS Servers, All Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: JOIN process_events ON process_id WITH network_events; ALERT IF process_path IN (user_writable_dirs) AND destination_ip IN (threat_intel_feed).
- question: Is a process executing from a user-writable path exhibiting periodic, 'heartbeat' network connections or using DGA-like domains?
  context: C2 traffic often has tell-tale patterns. This question looks for those patterns in network traffic originating from a potentially hijacked process. It analyzes time intervals between connections to detect automated beaconing (low standard deviation) and analyzes DNS requests for high character entropy, which is characteristic of Domain Generation Algorithms (DGAs).
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Applicable to: Network Egress Points (Firewalls, Proxies), DNS Servers, All Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: FOR process in user_writable_dirs; ANALYZE network_connections; CALCULATE beaconing_periodicity; CALCULATE domain_entropy; ALERT on C2_patterns.
- question: Has a time-series anomaly detection model flagged the network traffic volume of a potentially hijacked process as anomalous?
  context: Beyond just connection timing, the volume of data sent and received can also reveal malicious activity. This question applies a machine learning model (like an LSTM) to the byte counts of network connections from a suspicious process. This can detect patterns that deviate from the norm, such as the periodic small beacons of C2 or the large, sudden transfer of data during exfiltration.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Applicable to: Network Egress Points (Firewalls, Proxies), DNS Servers, All Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: APPLY LSTM_model to network_traffic_volume_timeseries(suspicious_process); ALERT on high_anomaly_score.
- question: Has a high-privilege system process, like 'services.exe' or 'svchost.exe', spawned a child process from a user-writable directory?
  context: This is a strong indicator of privilege escalation. System-level processes should only execute binaries from trusted system locations. If a process running as SYSTEM is observed executing code from a user's profile folder (e.g., C:\Users\someuser\AppData\Temp\evil.exe), it likely means a PATH interception has successfully hijacked a service's execution flow to run malicious code with elevated privileges.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: Domain Controllers, Member Servers, User Workstations, Application Servers with misconfigured services
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE parent_process_name IN ('services.exe', 'svchost.exe') AND parent_integrity_level = 'System' AND child_process_path STARTS WITH 'C:\\Users\\' OR 'C:\\ProgramData'.
- question: Has a privileged process executed a child from a directory that is statistically not in its baseline of legitimate child directories?
  context: This question focuses on identifying anomalous behavior for privileged processes. By creating a historical profile of legitimate child process paths for each service or system process, we can easily spot deviations. A SYSTEM-level process executing from a directory it has never used before, especially a user-writable one, is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: Domain Controllers, Member Servers, User Workstations, Application Servers with misconfigured services
  range: last 90 days
  queries:
  - pseudocode: ON privileged_process_creation; GET legitimate_child_dirs_baseline(parent_process); ALERT IF child_dir NOT IN baseline.
- question: Is an isolation forest model identifying a process creation event as a rare outlier where a SYSTEM-level process spawns a child from a user directory?
  context: This question uses machine learning to find rare events indicative of privilege escalation. An isolation forest is particularly good at this because it's designed to find outliers. A process creation event involving a SYSTEM-level parent and a child process in a user's download folder is a highly unusual combination of features that the model would flag with a high anomaly score.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: Domain Controllers, Member Servers, User Workstations, Application Servers with misconfigured services
  range: last 90 days
  queries:
  - pseudocode: APPLY isolation_forest_model to process_creation_events; ALERT on high_anomaly_score WHERE parent_integrity_level = 'System' AND child_path IN (user_writable_dirs).
- question: Have we observed a sequence where a low-privilege user creates a file, and shortly after, a high-privilege process executes a file of the same name from that location?
  context: This question looks for the full privilege escalation chain in a short time window. It explicitly connects the staging of the malicious file (Event A: a user creates evil.exe in C:\Temp) with the execution (Event B: a SYSTEM service runs C:\Temp\evil.exe). Detecting this sequence provides strong, actionable evidence of a successful path interception attack for privilege escalation.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Applicable to: Application Servers with misconfigured services, User Workstations, Staging Servers
  range: last 90 days
  queries:
  - pseudocode: DEFINE sequence (EventA: file_creation by low_priv_user in path P), (EventB: process_creation by SYSTEM from path P) within 5 minutes; ALERT on sequence_match.
- question: Has there been a statistically improbable transition of user context between a parent and child process, such as a normal user process spawning a SYSTEM-level child?
  context: This question analyzes the probability of privilege transitions during process creation. A transition from a parent process running as 'UserA' to a child process running as 'SYSTEM' is highly improbable and suspicious. This approach flags such statistically unlikely events, especially when the child process path is in a user-writable directory, as potential privilege escalation.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Applicable to: Application Servers with misconfigured services, User Workstations, Staging Servers
  range: last 90 days
  queries:
  - pseudocode: ON process_creation; CALCULATE probability(parent_user -> child_user) from enterprise_baseline; ALERT on improbable_transition WHERE child_path IN (user_writable_dirs).
- question: Has a graph-based anomaly detection model identified a subgraph representing a privilege escalation chain?
  context: This question models system activity as a graph where nodes are processes and files, and edges are actions like 'creates' or 'executes'. A privilege escalation attack via path interception would create an anomalous subgraph: [Low-Privilege Process] -> 'creates' -> [Malicious File] -> 'executed by' -> [High-Privilege Process]. Detecting this specific pattern in the activity graph is a sophisticated way to uncover the entire attack chain.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Applicable to: Application Servers with misconfigured services, User Workstations, Staging Servers
  range: last 90 days
  queries:
  - pseudocode: BUILD process_event_graph; SEARCH for anomalous subgraph matching pattern [LowPrivProc -> Creates -> File -> ExecutedBy -> HighPrivProc].
- question: Has a process with a name matching a security tool executed from a non-standard path or with an invalid signature?
  context: This is a defense evasion tactic where an adversary tries to masquerade their malware as a trusted security tool to avoid detection. This question looks for processes named like 'Sysmon.exe' or 'procexp.exe' but running from an unexpected location (e.g., C:\Temp instead of Program Files) or having an invalid digital signature, which indicates it's a fake.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: SOC Analyst Workstations, IT Administrator Machines, All Endpoints with EDR agents
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE process_name IN (security_tool_watchlist) AND (process_path NOT IN (allowlist_paths) OR signature_status = 'Invalid').
- question: Has a process with a name matching a security tool been launched with a file hash or signer that is statistically rare for that tool across the enterprise?
  context: This question builds a profile of legitimate versions of security tools. For 'procexp.exe', it baselines all known good hashes and digital signers. If a new instance of 'procexp.exe' appears with a hash or signer that has never been seen before (or is extremely rare), it is flagged as a potential masquerading attempt.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: SOC Analyst Workstations, IT Administrator Machines, All Endpoints with EDR agents
  range: last 90 days
  queries:
  - pseudocode: ON process_creation of security_tool; GET historical_hashes_and_signers(process_name); ALERT IF new_hash OR new_signer is statistically rare.
- question: Is a decision tree classifier identifying a process execution as a likely masquerading attempt?
  context: This question uses a supervised machine learning model to distinguish legitimate executions from fakes. The model is trained on features like path depth, signature status, and path name characteristics. It learns the rules for what constitutes a legitimate execution and can then provide a risk score for new events, catching sophisticated masquerading attempts.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: SOC Analyst Workstations, IT Administrator Machines, All Endpoints with EDR agents
  range: last 90 days
  queries:
  - pseudocode: APPLY decision_tree_classifier to process_creation_events; ALERT on high_risk_score for masquerading.
- question: Has a file been created in a directory listed in the system PATH (e.g., C:\Python27\) with a filename that matches a critical system utility (e.g., 'cmd.exe')?
  context: This question targets a specific method of path interception where an adversary abuses a pre-existing, non-standard entry in the system PATH. For example, if 'C:\Python27\' is in the PATH, an adversary can place a malicious 'net.exe' there. This rule alerts on the creation of any file named after a critical utility in any of these non-standard but PATH-included directories.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Applicable to: Systems with legacy applications, Developer workstations, Servers with custom application installs
  range: last 90 days
  queries:
  - pseudocode: SEARCH file_creation_events WHERE file_path IN (system_path_dirs) AND file_name IN (critical_utility_names) AND file_path NOT IN ('C:\\Windows\\System32').
- question: Has a file creation in a PATH-listed directory been identified as a statistical outlier?
  context: This question establishes a baseline of normal file creation activity within all directories listed in the system PATH. It then uses frequency analysis to spot anomalies. For example, if a file named 'net.exe' is suddenly created in 'C:\Perl64\bin', and this has never happened before on any system in the enterprise, it is a high-confidence statistical anomaly indicative of a hijacking attempt.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Applicable to: Systems with legacy applications, Developer workstations, Servers with custom application installs
  range: last 90 days
  queries:
  - pseudocode: ON file_creation in PATH_dir; CHECK if (filename, directory) tuple is common in historical_baseline; ALERT if rare.
- question: Is a clustering algorithm flagging a file creation event in a PATH-listed directory as an outlier?
  context: This question uses unsupervised machine learning to find anomalous file creations. Normal software installations and updates create dense clusters of related file creation events. A single, isolated file creation, such as a malicious 'cmd.exe' being dropped into a directory, will not belong to any cluster and will be flagged as an outlier, signaling a potential threat.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Applicable to: Systems with legacy applications, Developer workstations, Servers with custom application installs
  range: last 90 days
  queries:
  - pseudocode: APPLY DBSCAN clustering to file_creation_events; ALERT on events flagged as noise/outliers.
- question: Has a process been created via a command line that does not specify a full path, but the resolved executable path is a user-writable directory?
  context: This question focuses on the discrepancy between the command and the result. An analyst or script might run 'net user', expecting C:\Windows\System32\net.exe to execute. If the process creation log shows the command was 'net user' but the actual image path was C:\Temp\net.exe, this rule triggers, indicating a successful path hijack.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE command_line NOT LIKE '%:\\%' AND image_path NOT IN (default_system_paths_for_process_name).
- question: Has a process executed from a path that has a very low probability for its name based on a historical enterprise-wide baseline?
  context: This question builds a probability distribution for every process name seen in the environment. For the process name 'net.exe', the path 'C:\Windows\System32\net.exe' will have a probability near 100%. If an instance of 'net.exe' executes from 'C:\Users\Public\net.exe', its probability will be extremely low, triggering an alert for a statistically anomalous execution.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: ON process_creation; GET probability(image_path | process_name) from historical_baseline; ALERT if probability < 0.1%.
- question: Is an autoencoder model flagging a process creation event with a high reconstruction error due to an inconsistent command line and resolved path?
  context: This question uses an autoencoder to learn the normal relationships between command lines, resolved paths, parent processes, and users. An event where the command line is simple (e.g., 'net') but the resolved path is unusual (e.g., 'C:\Temp\net.exe') is an inconsistency that the model will struggle to reconstruct, resulting in a high error score and an anomaly alert.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Applicable to: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: APPLY autoencoder_model to process_creation_features; ALERT on high_reconstruction_error WHERE command_line is relative and image_path is non-standard.