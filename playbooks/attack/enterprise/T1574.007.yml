name: T1574.007: Path Interception by PATH Environment Variable
id: 5e8a8e1b-2b3c-4d5e-8a9b-0c1d2e3f4a5b
description: This playbook focuses on detecting adversaries who are manipulating the PATH environment variable to achieve persistence, privilege escalation, or defense evasion. Adversaries plant malicious executables masquerading as legitimate system utilities in user-writable directories. They then either modify the system or user PATH variable to include these directories or abuse existing insecure PATH entries. When a user, script, or the system itself attempts to run a legitimate utility by name, the operating system's search order causes it to find and execute the malicious version first. This playbook provides questions and queries to detect the planting of these malicious files, the modification of the PATH variable, and the subsequent execution of hijacked processes.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a file been created in a user-writable directory with a name matching a common system utility and a hash matching a known malicious indicator?
  context: This question aims to detect the "planting" stage of a PATH interception attack. Adversaries place a malicious file masquerading as a legitimate tool (e.g., 'net.exe') in a location like 'C:\Users\*' or 'C:\ProgramData\*'. By joining file creation events with threat intelligence, we can catch known malware being staged for future execution via a hijacked PATH.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - Zeek files.log
  - User Workstations
  - Application Servers
  - Domain Controllers
  - Developer Workstations
  range: last 90 days
  queries:
  - symbolic: SEARCH file_creation_events WHERE (directory IN user_writable_paths AND filename IN common_utilities) JOIN threat_intel_feeds ON file_hash
- question: Has a user created an executable file in a directory that is statistically rare for them to use, especially if the filename masquerades as a system utility?
  context: This question seeks anomalies in user behavior. Most users have predictable patterns for where they create new executables. By baselining these locations, we can flag a new executable being created in an unusual directory (e.g., a developer suddenly creating 'findstr.exe' in 'C:\ProgramData\Temp'). This statistical deviation can uncover novel or unknown malware being planted.
  answer_sources:
  - Windows Event ID 11
  - User Workstations
  - Application Servers
  - Domain Controllers
  - Developer Workstations
  range: last 90 days
  queries:
  - statistical: FOR each user, BASELINE executable_creation_directories over 30 days. SEARCH new_executable_creation_events WHERE directory_frequency < 1st_percentile_for_user AND filename IN common_utilities
- question: Does an isolation forest model identify a file creation event as an anomalous outlier, particularly for a file masquerading as a system utility in a user-writable path?
  context: This question leverages machine learning to detect subtle and complex anomalies that rule-based methods might miss. An isolation forest can learn the characteristics of normal file creation events (user, path, process, etc.). An event flagged as an outlier, like a system utility name appearing in an unusual user-writable path, strongly suggests a malicious plant.
  answer_sources:
  - Windows Event ID 11
  - User Workstations
  - Application Servers
  - Domain Controllers
  - Developer Workstations
  range: last 90 days
  queries:
  - machine_learning: TRAIN isolation_forest_model on benign_file_creation_events. PREDICT anomaly_score on new_file_creation_events. ALERT on high_score WHERE filename IN common_utilities AND path IS user_writable
- question: Has the system or user PATH environment variable in the registry been modified to prepend a non-standard, user-writable directory?
  context: This is a direct detection for the core mechanism of PATH hijacking. Adversaries modify the registry key containing the PATH variable to insert their malicious directory at the beginning. This ensures their trojan executable is found and run before the legitimate one. Monitoring for this specific registry change is a high-fidelity indicator of this technique.
  answer_sources:
  - Windows Event ID 13
  - Windows Event ID 4657
  - Domain Controllers (for GPO-based changes)
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - symbolic: SEARCH registry_events WHERE target_object ENDS WITH '\Environment\Path' AND new_value STARTS WITH user_writable_directory_pattern
- question: Has the PATH registry value been modified to include a directory that is statistically rare across the enterprise?
  context: Not all PATH modifications are malicious, as some software installers legitimately add directories. This question uses statistical analysis to differentiate. By baselining common PATH entries across all systems, we can identify when a newly added directory is an outlier (e.g., seen on <1% of hosts), making it highly suspicious and likely part of an attack.
  answer_sources:
  - Windows Event ID 13
  - Windows Event ID 4657
  - Domain Controllers (for GPO-based changes)
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - statistical: BASELINE all_host_PATH_values. ON registry_modification_event, EXTRACT added_directory. CALCULATE prevalence_of_added_directory. ALERT if prevalence < 1%
- question: Does a Random Forest model classify a PATH modification event as high-risk?
  context: This question applies a machine learning classifier to assess the risk of a PATH change. The model considers multiple features in context, such as which process made the change ('reg.exe' vs. 'setup.exe'), the user context, and the properties of the added directory. A high-risk score from the model provides a more nuanced and confident alert than a simple rule.
  answer_sources:
  - Windows Event ID 13
  - Windows Event ID 4657
  - Domain Controllers (for GPO-based changes)
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - machine_learning: TRAIN random_forest_model on labeled_PATH_modifications. PREDICT risk_score for new_PATH_modifications. ALERT on high_risk_score
- question: Has a legitimate system process spawned a child process that resolves to a user-writable directory instead of its expected system location?
  context: This question looks for the direct result of a successful PATH hijack: a trusted process (like 'svchost.exe') being tricked into running a malicious executable. An alert for a legitimate parent process executing a child like 'net.exe' from 'C:\Users\*' instead of 'C:\Windows\System32' is a very strong indicator of compromise.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - All Endpoints and Servers
  - especially those with auto-starting applications
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation_events WHERE parent_process IN legitimate_system_processes AND child_process_path IN user_writable_paths AND child_process_name IN common_utilities
- question: Has a parent process executed a child process from a directory path that is statistically anomalous compared to its historical behavior?
  context: This question establishes a behavioral baseline for parent-child process relationships. Over time, a process like 'svchost.exe' will spawn children from a predictable set of directories. If it suddenly spawns a child from a completely new and unusual directory, this statistical anomaly points to a potential hijack, even if the malware is unknown.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - All Endpoints and Servers
  - especially those with auto-starting applications
  range: last 90 days
  queries:
  - statistical: FOR each parent_process, BASELINE historical child_process_paths. ON new_process_creation, CHECK if child_path is in baseline. IF NOT, calculate path_similarity. ALERT on low_similarity_score
- question: Has an autoencoder model flagged a process creation event as anomalous due to a high reconstruction error?
  context: This question uses an autoencoder, a type of neural network, to learn the deep patterns of normal process execution events. When a malicious event occurs, such as a hijacked process creation, its characteristics will deviate significantly from the learned norm. The model will be unable to reconstruct this event accurately, resulting in a high error score that flags it as an anomaly.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - All Endpoints and Servers
  - especially those with auto-starting applications
  range: last 90 days
  queries:
  - machine_learning: TRAIN autoencoder_model on benign_process_creation_vectors. PREDICT reconstruction_error on new_process_creation_events. ALERT on high_error WHERE child_path IS user_writable
- question: Has a new scheduled task or autorun entry been created that calls a binary by its name only, and does that call subsequently resolve to a malicious executable in a user-writable directory?
  context: Adversaries create persistence by scheduling tasks or creating autorun entries. If they specify a command like 'net.exe' instead of the full path, a hijacked PATH will cause their malicious version to run on startup or a schedule. This question correlates the creation of such a persistence entry with the subsequent execution of a trojanized binary.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 13
  - Windows Event ID 4698
  - User Workstations
  - Critical Servers
  - Domain Controllers (for scheduled tasks deployed via GPO)
  range: last 90 days
  queries:
  - symbolic: SEARCH for new_scheduled_task or autorun_entry WHERE command uses relative_path. CORRELATE with subsequent process_creation WHERE original_command matches AND resolved_path IS user_writable
- question: Is there a statistical outlier in the creation of new persistence entries that use relative paths instead of absolute paths?
  context: While some legitimate software might use relative paths in persistence entries, it's often less common than using absolute paths. This question baselines the ratio of relative vs. absolute paths on each host and across the enterprise. A sudden spike or a host that is a statistical outlier in its use of relative paths for persistence is suspicious.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 13
  - Windows Event ID 4698
  - User Workstations
  - Critical Servers
  - Domain Controllers (for scheduled tasks deployed via GPO)
  range: last 90 days
  queries:
  - statistical: BASELINE ratio of relative_to_absolute_paths in persistence_entries. ALERT on new_entries that are statistical outliers compared to host or global baseline
- question: Does a time-series model detect an anomalous spike in the daily creation of persistence entries that use relative paths?
  context: This question treats the creation of persistence entries with relative paths as a time-series data stream for each host. A machine learning model like SARIMA can learn the normal "rhythm" of these events. A sudden, sharp increase in such creations, detected as an anomaly by the model, can indicate a large-scale or automated deployment of a persistence mechanism by an adversary.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 13
  - Windows Event ID 4698
  - User Workstations
  - Critical Servers
  - Domain Controllers (for scheduled tasks deployed via GPO)
  range: last 90 days
  queries:
  - machine_learning: MODEL daily_count_of_relative_path_persistence_entries as time_series. DETECT anomalous spikes using SARIMA or similar. ALERT on detected_anomaly
- question: Is a process executing from a user-writable directory making outbound network connections to a known command-and-control (C2) server?
  context: This question connects the on-host execution of a suspected hijacked process with its network activity. By joining process logs with network logs and threat intelligence, we can confirm that a process running from an unusual location (e.g., 'C:\ProgramData\Temp\net.exe') is communicating with a known malicious IP or a domain generated by a Domain Generation Algorithm (DGA). This provides very strong evidence of C2 communication.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls, Proxies)
  - DNS Servers
  - All Endpoints and Servers
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation_events WHERE path IS user_writable. JOIN with network_connection_logs. ALERT if destination_ip IN C2_feed OR destination_domain IS DGA-like
- question: Is a process executing from a user-writable path exhibiting periodic, "heartbeat" C2 beaconing or requesting domains with high entropy?
  context: This question seeks to identify C2 communications from a suspected hijacked process even when the destination IP is not on a threat feed. C2 traffic often has tell-tale statistical properties, such as highly regular connection intervals (beaconing) or requests to random-looking domains (DGA). Identifying these patterns in the network traffic of a process from an anomalous path is a strong indicator of compromise.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls, Proxies)
  - DNS Servers
  - All Endpoints and Servers
  range: last 90 days
  queries:
  - statistical: FOR processes from user_writable_paths, ANALYZE network_connections. CALCULATE time_interval_stddev. ALERT on low_stddev. ANALYZE DNS_requests. CALCULATE domain_entropy. ALERT on high_entropy
- question: Does a time-series anomaly detection model flag the network traffic volume of a suspected hijacked process as anomalous?
  context: This question uses machine learning to baseline the normal network traffic patterns (bytes in/out over time) for a host. A hijacked process might exhibit anomalous network behavior, such as periodic small beacons or a sudden large data transfer for exfiltration. An LSTM or similar time-series model can detect these deviations from the learned baseline, flagging potential C2 activity.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls, Proxies)
  - DNS Servers
  - All Endpoints and Servers
  range: last 90 days
  queries:
  - machine_learning: MODEL time_series of network_traffic_volume for connections from suspect_processes. DETECT anomalies using LSTM. ALERT on detected_anomaly
- question: Has a core system process running with SYSTEM integrity spawned a child process located in a user's profile directory or other user-writable location?
  context: This is a critical indicator of privilege escalation. A process running as SYSTEM (the highest privilege level on Windows) should almost never execute code from a user-controlled directory like 'C:\Users\*'. Such an event strongly implies that the privileged process was tricked, via a hijacked PATH, into running a malicious executable planted by a lower-privileged user.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Application Servers with misconfigured services
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation_events WHERE parent_integrity_level IS 'System' AND child_process_path MATCHES user_directory_pattern
- question: Has a privileged system process executed a child process from a directory that is not part of its established baseline of legitimate child directories?
  context: This question uses behavioral profiling to detect anomalous process executions. By learning the normal child process locations for privileged parents like 'svchost.exe', we can flag any execution from a novel or rare directory. This approach can detect privilege escalation even if the adversary uses a less common user-writable directory.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Application Servers with misconfigured services
  range: last 90 days
  queries:
  - statistical: FOR each privileged_parent_process, BASELINE legitimate_child_directories. SEARCH new_process_creation_events WHERE parent IS privileged AND child_directory NOT IN baseline
- question: Does an isolation forest model identify a process creation event, where a SYSTEM-level parent spawns a child from a user folder, as a high-scoring anomaly?
  context: This leverages machine learning to find rare events that are hallmarks of privilege escalation. An isolation forest is particularly good at this because a SYSTEM process executing from a user's download folder is a fundamentally different and rarer event than normal system operations. The model will isolate this event quickly and assign it a high anomaly score.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Application Servers with misconfigured services
  range: last 90 days
  queries:
  - machine_learning: TRAIN isolation_forest_model on process_creation_features. PREDICT anomaly_score on new_events. ALERT on high_score WHERE parent_is_SYSTEM and child_path_is_user_writable
- question: Has a low-privilege user created a file that was subsequently executed by a high-privilege process like 'NT AUTHORITY\SYSTEM' within a short time window?
  context: This question looks for the specific, time-bound chain of events that defines this privilege escalation technique a user plants a file, and soon after, a privileged process (often a misconfigured service) runs it. By defining a sequence rule (e.g., Event A followed by Event B within 5 minutes), we can connect the planting and execution stages to detect the full attack.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Application Servers with misconfigured services
  - User Workstations
  - Staging Servers
  range: last 90 days
  queries:
  - symbolic: DEFINE sequence (Event A file_creation by low_priv_user in path 'P') FOLLOWED BY (Event B process_creation by 'SYSTEM' from path 'P') WITHIN 5 minutes. ALERT on sequence_match
- question: Has a parent-child process transition occurred that involves a statistically improbable privilege escalation (e.g., from a standard user to SYSTEM)?
  context: This question analyzes the user context transitions between parent and child processes. In normal operations, a user process typically spawns child processes as the same user. A transition from a standard user to SYSTEM is highly unusual. By calculating the probability of such transitions based on historical data, we can flag improbable events as likely privilege escalation.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Application Servers with misconfigured services
  - User Workstations
  - Staging Servers
  range: last 90 days
  queries:
  - statistical: BASELINE probability of user_context_transitions (parent -> child). ON new_process_creation, CALCULATE transition_probability. ALERT if probability is very low AND child_path is user_writable
- question: Does a graph-based anomaly detection model identify a subgraph representing the full privilege escalation chain?
  context: This question models system activity as a graph where nodes are processes and files, and edges are actions like 'creates' or 'executes'. A privilege escalation attack forms a specific, anomalous pattern or subgraph [Low-Priv Process] -> 'creates' -> [Malicious File] -> 'executed by' -> [High-Priv Process]. Graph-based ML models excel at finding these unusual structural patterns in the data.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Application Servers with misconfigured services
  - User Workstations
  - Staging Servers
  range: last 90 days
  queries:
  - machine_learning: BUILD process-event_graph. APPLY graph_anomaly_detection. SEARCH for anomalous subgraphs matching the privilege_escalation_pattern
- question: Has a process with a name matching a known security tool (e.g., 'Sysmon.exe') been executed from an unexpected directory or with an invalid digital signature?
  context: This question aims to detect adversaries masquerading their malware as legitimate security tools to evade detection. By maintaining a watchlist of security tool names and their proper locations ('C:\Program Files\*') and signature statuses, we can create a high-fidelity alert when a process like 'procexp.exe' runs from 'C:\Temp' or has an invalid signature.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - SOC Analyst Workstations
  - IT Administrator Machines
  - All Endpoints with EDR agents
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation_events WHERE process_name IN security_tool_watchlist AND (path NOT IN allowlist OR signature_status IS 'Invalid')
- question: Has a process matching a security tool name been launched with a file hash or signing certificate that is statistically rare for that process name across the enterprise?
  context: This question goes beyond simple path checking by baselining the legitimate hashes and signers for known security tools. An adversary might place a malicious 'Sysmon.exe' in the correct directory. However, its hash will be different. By flagging executions where the hash is seen on less than 0.1% of systems, we can detect this form of masquerading.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - SOC Analyst Workstations
  - IT Administrator Machines
  - All Endpoints with EDR agents
  range: last 90 days
  queries:
  - statistical: FOR each security_tool_name, BASELINE legitimate_hashes and signers. ON process_creation, CHECK hash/signer_prevalence. ALERT if prevalence is rare (<0.1%)
- question: Does a decision tree classifier identify a process execution as a likely masquerading attempt?
  context: This question uses a classifier model to weigh multiple features at once to distinguish legitimate from masquerading processes. The model can learn that a process named 'procexp.exe' running from a deep, high-entropy path with an invalid signature is highly likely to be malicious, providing a more robust detection than a single rule.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - SOC Analyst Workstations
  - IT Administrator Machines
  - All Endpoints with EDR agents
  range: last 90 days
  queries:
  - machine_learning: TRAIN decision_tree_classifier on labeled masquerading_events. PREDICT risk_score for new_process_events. ALERT on high_risk_score
- question: Has a file been created in a directory that is part of the system PATH (e.g., C:\Perl64\bin) with a filename that matches a critical system utility (e.g., 'cmd.exe')?
  context: This question targets a specific method of PATH hijacking where an adversary doesn't modify the PATH variable itself, but instead abuses a pre-existing, less-secure directory within it (like a third-party application's bin folder). Placing a malicious 'cmd.exe' here can lead to it being executed instead of the real one in 'C:\Windows\System32'.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Systems with legacy applications
  - Developer workstations
  - Servers with custom application installs
  range: last 90 days
  queries:
  - symbolic: SEARCH file_creation_events WHERE directory IN system_PATH_variable (excluding system dirs) AND filename IN critical_system_utilities
- question: Has a file creation occurred in a system PATH directory that is a statistical anomaly compared to historical file creation activity in that directory?
  context: Software installation directories in the PATH variable usually have very static contents. This question leverages that fact by profiling normal file creation/modification activity in these directories. The sudden appearance of a new file, like 'net.exe' being created in 'C:\Python27\', would be a significant statistical outlier and highly suspicious.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Systems with legacy applications
  - Developer workstations
  - Servers with custom application installs
  range: last 90 days
  queries:
  - statistical: FOR each directory in system_PATH, BASELINE common_file_creations. ON new_file_creation, CHECK if it is an outlier. ALERT on outlier_events
- question: Does a clustering algorithm like DBSCAN identify a file creation event in a PATH directory as an outlier (noise)?
  context: This question uses clustering to group normal file creation events, such as those from software updates, into dense clusters. A malicious file drop, being a singular, unusual event, will not belong to any cluster and will be classified as "noise" or an outlier by the algorithm. This is an effective way to find one-off malicious actions.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Systems with legacy applications
  - Developer workstations
  - Servers with custom application installs
  range: last 90 days
  queries:
  - machine_learning: APPLY DBSCAN clustering to file_creation_events based on path, name, process. ALERT on events classified as noise/outliers
- question: Has a process been launched via a command line that does not specify a full path (e.g., 'net user...'), but the resolved executable path is in a user-writable directory?
  context: This question directly compares the command issued by a user or script with the actual executable that was run by the operating system. A mismatch, where the command was 'net.exe' but the resolved path was 'C:\Temp\net.exe', is a smoking gun for PATH hijacking. It shows that the OS search path was manipulated to resolve to a malicious binary.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation_events WHERE command_line lacks full path. COMPARE resolved_image_path to expected_system_path. ALERT if resolved_path is user-writable AND not expected_path
- question: Has a process executed from a path that has a very low probability for its given process name based on historical data?
  context: This question builds a probability distribution for where each process name (e.g., 'net.exe') is expected to run from. For 'net.exe', the probability of its path being 'C:\Windows\System32\net.exe' would be nearly 100%. An execution from any other path would have a near-zero probability and would be flagged as a statistical anomaly, indicating a likely hijack.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - statistical: BASELINE probability_distribution of (ProcessName, ImagePath) tuples. ON new_process_creation, CALCULATE probability of its (Name, Path) tuple. ALERT if probability < 0.1%
- question: Does an autoencoder model, trained on legitimate process creation events, flag an event with a high reconstruction error due to an inconsistency between the command line and the resolved image path?
  context: This question uses an autoencoder to learn the complex relationships between command lines, resolved paths, parent processes, and users. A legitimate event where the command is 'net' will almost always have a resolved path in System32. An anomalous event where the resolved path is in 'C:\Temp' will break this learned relationship, causing a high reconstruction error and triggering an alert.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - machine_learning: TRAIN autoencoder_model on legitimate_process_events. PREDICT reconstruction_error on new_events. ALERT on high_error where command_line is inconsistent with resolved_path