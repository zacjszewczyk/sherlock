name: 'T1059.001: PowerShell'
id: 'f8c3b3e0-642d-4b5a-9d1e-8f3a7c6b9e1a'
description: This playbook addresses the malicious execution of code using PowerShell. It provides investigative questions to detect adversary activity based on several indicators. These include identifying PowerShell scripts that match known malicious hashes or C2 indicators from threat intelligence; detecting statistically rare or obfuscated scripts using techniques like Base64 encoding, character array casting, and string replacement; identifying in-memory execution via download cradles (e.g., IEX with DownloadString); detecting unmanaged PowerShell use where the core engine is loaded by non-standard host processes (e.g., Microsoft Office applications); flagging the use of suspicious command-line arguments that weaken security controls (e.g., -ExecutionPolicy Bypass, -WindowStyle Hidden); and spotting scripts that contain large, high-entropy embedded payloads like shellcode or packed executables.
type: technique
related:
- 'TA0002: Execution'
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a PowerShell script block been observed that matches known malicious indicators, such as a known bad hash or a C2 indicator (IP, domain, URL)?
  context: This question aims to identify overtly malicious PowerShell activity by matching script content against curated threat intelligence. A match provides a high-confidence signal that an attacker is using a known malicious script or connecting to known malicious infrastructure.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      FOR each new Event ID 4104:
        script_hash = SHA256(script_block_content)
        IF script_hash IN known_bad_hashes:
          ALERT "Malicious PowerShell script hash detected"
        extracted_iocs = EXTRACT_IOCS(script_block_content)
        FOR ioc IN extracted_iocs:
          IF ioc IN threat_intel_feed:
            ALERT "Malicious C2 indicator found in PowerShell script"
- question: Has a statistically rare PowerShell script been executed, and did its execution coincide with network activity to suspicious domains?
  context: This question helps uncover unknown or unique malicious scripts by focusing on rarity. Adversaries often use custom scripts that will not appear on many systems. Correlating the execution of a rare script with connections to newly registered or low-reputation domains can indicate C2 communication or payload delivery.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Calculate prevalence over a 30-day window
      script_prevalence = COUNT_UNIQUE(hostname) by SHA256(script_block) over 30d
      rare_scripts = FILTER script_prevalence WHERE count < 5
      FOR each rare_script_execution:
        t_start = execution_time - 1m
        t_end = execution_time + 1m
        suspicious_dns = SEARCH Zeek dns.log WHERE hostname = rare_script.hostname AND timestamp between t_start, t_end AND (domain_is_NRD OR domain_reputation < low_threshold)
        IF suspicious_dns:
          ALERT "Rare PowerShell script execution correlated with suspicious DNS query"
- question: Can machine learning models classify observed PowerShell script blocks as malicious based on their textual features?
  context: This question leverages machine learning to automate the detection of malicious scripts that may not be caught by signature or rarity analysis. By training a model on features like script length, entropy, and keyword presence, it can learn the subtle characteristics of malicious code and score new scripts in real-time.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      FOR each new Event ID 4104:
        features = EXTRACT_FEATURES(script_block_content)
        prediction_score = ML_MODEL.predict(features)
        IF prediction_score > 0.85:
          ALERT "PowerShell script classified as malicious by ML model"
- question: Is there evidence of PowerShell command-line or script block obfuscation using common techniques like encoding, expression invocation, or suspicious string manipulation?
  context: This question targets common methods adversaries use to hide their PowerShell commands from simple keyword-based detections. Identifying patterns like Base64 encoding flags, `Invoke-Expression`, or string concatenation is a strong indicator that the script's author is intentionally trying to evade defenses.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH Event ID 4688 OR Event ID 4104 WHERE command_line/script_block MATCHES REGEX '(-e|-enc|-encodedcommand|IEX|Invoke-Expression|New-Object Net.WebClient|FromBase64String)'
        ALERT "Suspicious obfuscation pattern detected in PowerShell"
- question: Are there PowerShell scripts with abnormally high entropy or unusual character ratios, suggesting they are packed or obfuscated?
  context: This question uses statistical properties of the script text to find obfuscation. High entropy often indicates that data is compressed or encrypted, which is a common technique for hiding malicious payloads within a script. Comparing these metrics against a baseline of normal activity can surface these outliers.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Establish baseline entropy and char ratio
      baseline_stats = CALCULATE_STATS(benign_scripts)
      FOR each new Event ID 4104:
        script_entropy = CALCULATE_ENTROPY(script_block)
        script_char_ratio = CALCULATE_CHAR_RATIO(script_block)
        IF script_entropy > baseline_stats.entropy_95th_percentile OR script_char_ratio > baseline_stats.ratio_mean + 3*std_dev:
          ALERT "High entropy or abnormal character ratio detected in PowerShell script"
- question: Can a machine learning classifier identify obfuscated PowerShell scripts based on their structural and statistical features?
  context: This question applies machine learning to the specific problem of detecting obfuscation. By training on features like character/word entropy and the frequency of obfuscation-related tokens, a model can learn to distinguish between normal and intentionally obscured scripts, even if the specific obfuscation method is novel.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      FOR each new Event ID 4104:
        features = EXTRACT_OBFUSCATION_FEATURES(script_block_content)
        prediction = OBFUSCATION_ML_MODEL.predict(features)
        IF prediction == 'obfuscated':
          ALERT "PowerShell script classified as obfuscated by ML model"
- question: Has PowerShell been used to execute a 'download cradle', a command that downloads and runs code directly from the internet?
  context: This question looks for the classic fileless execution pattern where PowerShell is used to fetch a second-stage payload from a remote server and execute it in memory without writing it to disk. Correlating this command with immediate outbound network activity provides strong evidence of this technique.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Web Proxies
  - DNS Resolvers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH Event ID 4688 or 4104 WHERE (command_line/script_block CONTAINS 'IEX' OR 'Invoke-Expression') AND (command_line/script_block CONTAINS 'DownloadString' OR 'DownloadFile' OR 'Invoke-WebRequest')
        FOR each match:
          t_start = event_time
          t_end = event_time + 10s
          network_conn = SEARCH Zeek conn.log/dns.log WHERE source_host = event.host AND timestamp between t_start, t_end AND dest_ip is external
          IF network_conn:
            ALERT "PowerShell download cradle detected with subsequent network connection"
- question: Is the powershell.exe process making an anomalous number of network connections, or is it connecting to unusual destinations with a PowerShell user-agent?
  context: This question uses behavioral analysis to detect suspicious PowerShell network activity. A sudden spike in connections from powershell.exe, or connections to non-allowlisted domains using the default PowerShell user-agent, can indicate that the process is being used for C2 or data exfiltration.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Web Proxies
  - DNS Resolvers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Anomaly Detection
      powershell_conn_baseline = CALCULATE_DAILY_CONN_BASELINE(powershell.exe) by host
      MONITOR for daily_count > baseline.99th_percentile
      # Rule-based detection
      SEARCH Zeek http.log WHERE user_agent CONTAINS 'WindowsPowerShell' AND destination_domain NOT IN allowlist
        ALERT "PowerShell user-agent connected to non-allowlisted domain"
- question: Is the volume of outbound network traffic from powershell.exe processes deviating significantly from its normal, learned pattern?
  context: This question applies time-series analysis to detect data exfiltration via PowerShell. A model learns the expected rhythm of network traffic volume for powershell.exe on each host. A significant, unexplained spike in outbound data can signal that an attacker is using PowerShell to steal data.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Web Proxies
  - DNS Resolvers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      FOR each host:
        # Train model on historical powershell.exe bytes_out
        traffic_model = TRAIN_TIMESERIES_MODEL(host_traffic_data)
        # Monitor in real-time
        current_traffic = GET_CURRENT_TRAFFIC(host)
        is_anomaly = traffic_model.detect_anomaly(current_traffic)
        IF is_anomaly:
          ALERT "Anomalous network traffic volume from powershell.exe detected"
- question: Has the core PowerShell DLL (System.Management.Automation.dll) been loaded by an unauthorized process?
  context: This question aims to detect "unmanaged PowerShell," where an adversary injects PowerShell capabilities into a legitimate process (like Word or rundll32.exe) to bypass defenses focused on powershell.exe. Alerting when this DLL is loaded by any process not on a strict allowlist is a high-fidelity way to find this activity.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  - Microsoft Office applications
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      allowlist = ['powershell.exe', 'powershell_ise.exe', 'pwsh.exe']
      SEARCH Sysmon Event ID 7 WHERE ImageLoaded ENDS WITH 'System.Management.Automation.dll' AND ProcessImage NOT IN allowlist
        ALERT "Unmanaged PowerShell detected: DLL loaded by non-standard host"
- question: Are there rare or unique processes loading the PowerShell DLL across the enterprise?
  context: This question uses rarity analysis to find suspicious host processes for unmanaged PowerShell. While some legitimate third-party applications might use the PowerShell engine, an adversary's chosen host process is likely to be unique or appear on very few machines. This approach helps identify those outliers for investigation.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  - Microsoft Office applications
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Calculate prevalence over 30-day window
      loader_prevalence = COUNT_UNIQUE(hostname) by ProcessImage WHERE ImageLoaded ENDS WITH 'System.Management.Automation.dll' over 30d
      rare_loaders = FILTER loader_prevalence WHERE count < 5 AND ProcessImage NOT IN allowlist
        FOR each rare_loader:
          ALERT "Rare process loading PowerShell DLL detected"
- question: Has an anomalous process-to-DLL load relationship involving the PowerShell DLL been observed?
  context: This question uses a graph model to formalize the detection of unusual process/DLL interactions. By learning the "normal" graph of which processes load which DLLs, the model can immediately flag a new, previously unseen edge (e.g., wscript.exe loading System.Management.Automation.dll) as a high-confidence anomaly.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  - Microsoft Office applications
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Train model on historical Sysmon Event ID 7 data
      graph_model = TRAIN_GRAPH_MODEL(process_dll_load_data)
      # Monitor for new loads
      FOR each new Sysmon Event ID 7:
        IF event.ImageLoaded ENDS WITH 'System.Management.Automation.dll':
          is_anomalous_edge = graph_model.check_edge(event.ProcessImage, event.ImageLoaded)
          IF is_anomalous_edge:
            ALERT "Anomalous process-DLL graph relationship detected for PowerShell"
- question: Has a PowerShell process been launched with arguments designed to bypass execution policies, hide windows, or run non-interactively?
  context: This question focuses on command-line arguments that are highly indicative of malicious intent. Parameters like `-ExecutionPolicy Bypass`, `-WindowStyle Hidden`, and `-NonInteractive` are staples of attacker tradecraft used to ensure their scripts run without user interaction or security restrictions.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Windows Event ID 4105
  - All Windows Endpoints and Servers
  - Domain Controllers
  - Tier 0 assets
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH Event ID 4688 WHERE ProcessName == 'powershell.exe' AND command_line MATCHES REGEX '(-ep bypass|-w hidden|-noni|-e|-enc)'
        ALERT "PowerShell launched with suspicious arguments"
- question: Has a user executed PowerShell with a suspicious argument (e.g., -EncodedCommand, -Bypass) for the first time?
  context: This question uses "first use" analysis to detect behavioral changes. A regular user or administrator typically has a consistent pattern of PowerShell usage. The first time they use a high-risk argument could indicate that their account has been compromised or that they are performing an unusual, potentially malicious action.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Windows Event ID 4105
  - All Windows Endpoints and Servers
  - Domain Controllers
  - Tier 0 assets
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Maintain historical set of arguments per user over 90d
      user_arg_history = GET_USER_ARG_HISTORY()
      suspicious_args = ['-EncodedCommand', '-Bypass', '-w hidden']
      FOR each new Event ID 4688:
        FOR arg in suspicious_args:
          IF arg IN event.command_line AND arg NOT IN user_arg_history[event.user]:
            ALERT "First time use of suspicious PowerShell argument by user"
            UPDATE user_arg_history
- question: Has a user's PowerShell usage pattern anomalously shifted to a profile associated with more complex or suspicious commands?
  context: This question uses unsupervised machine learning to automatically group users by their PowerShell behavior. It can identify when an account, which normally exhibits simple or no PowerShell usage, suddenly shifts to a cluster characterized by complex, obfuscated, or suspicious commands, suggesting a potential account takeover.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Windows Event ID 4105
  - All Windows Endpoints and Servers
  - Domain Controllers
  - Tier 0 assets
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Periodically re-cluster users
      user_features = FEATURIZE_POWERSHELL_USAGE_BY_USER()
      user_clusters = DBSCAN(user_features)
      # Monitor for cluster changes
      MONITOR for user moving from 'benign_cluster' to 'suspicious_cluster'
        ALERT "User has anomalously shifted to a suspicious PowerShell behavior cluster"
- question: Does a PowerShell script block contain a large Base64-encoded segment that decodes to a Windows executable (PE file) or shellcode?
  context: This question targets a specific method of payload delivery where an entire executable or shellcode is embedded directly within the PowerShell script. By looking for large script blocks and then specifically for PE file headers ('MZ') or shellcode patterns within decoded Base64 strings, this provides a very high-confidence detection of an embedded payload.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      FOR each Event ID 4104 WHERE script_block_size > 4096:
        base64_strings = EXTRACT_BASE64(script_block)
        FOR b64_string in base64_strings:
          decoded_data = DECODE_BASE64(b64_string)
          IF decoded_data STARTS WITH 'MZ' OR decoded_data CONTAINS SHELLCODE_PATTERN:
            ALERT "Embedded PE file or shellcode detected in PowerShell script"
- question: Does a PowerShell script exhibit a bimodal entropy distribution, indicating a mix of normal script text and a large, high-entropy block characteristic of an embedded payload?
  context: This question uses a more nuanced statistical approach to find embedded payloads. Unlike benign scripts which have uniformly low entropy, a script carrying an encrypted or compressed payload will have two distinct regions a low-entropy region for the script logic and a high-entropy region for the payload. Identifying this bimodal distribution is a strong sign of an embedded payload.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      FOR each Event ID 4104:
        entropy_distribution = CALCULATE_SLIDING_WINDOW_ENTROPY(script_block)
        is_bimodal = CHECK_FOR_BIMODAL_DISTRIBUTION(entropy_distribution)
        IF is_bimodal:
          ALERT "Bimodal entropy distribution detected in PowerShell script, suggesting embedded payload"
- question: Does a PowerShell script have an abnormal structure (Abstract Syntax Tree) that causes a high reconstruction error in an autoencoder model, suggesting an embedded payload?
  context: This question uses advanced machine learning to detect structural anomalies in PowerShell scripts. An autoencoder trained on the ASTs of normal scripts learns what "normal" script structure looks like. A script with an embedded payload will have a very abnormal AST (e.g., a single, massive string literal node), which the model will fail to reconstruct accurately. A high reconstruction error is therefore a strong indicator of a structurally anomalous, and likely malicious, script.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      # Train model on benign script ASTs
      ast_autoencoder = TRAIN_AUTOENCODER(benign_script_asts)
      # Monitor new scripts
      FOR each new Event ID 4104:
        script_ast = GENERATE_AST(script_block)
        reconstruction_error = ast_autoencoder.get_reconstruction_error(script_ast)
        IF reconstruction_error > error_threshold:
          ALERT "High AST reconstruction error suggests structurally abnormal PowerShell script"