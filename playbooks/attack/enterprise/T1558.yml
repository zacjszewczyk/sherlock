name: T1558: Steal or Forge Kerberos Tickets
id: 5a8e1b9c-7d3f-4e0a-9f6b-8c2d1e0f4a3b
description: This playbook helps investigate if an adversary has stolen or forged Kerberos tickets to gain unauthorized access. This involves looking for evidence of credential dumping tools targeting Kerberos tickets, anomalous patterns of service ticket requests indicative of Kerberoasting, successful ticket-granting ticket (TGT) requests for accounts with pre-authentication disabled (AS-REP Roasting), logon events with inconsistent or elevated privileges suggesting Golden or Silver Tickets, and unauthorized processes accessing the memory of the LSASS process to extract credentials.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I detect the execution of known credential dumping tools or specific Kerberos attack commands using a SIEM rule?
    context: This question focuses on identifying direct evidence of Kerberos ticket theft or forgery attempts by monitoring for specific, high-fidelity indicators. It uses a symbolic logic approach, creating alerts for process creation events that match a predefined list of malicious tool hashes (like Mimikatz, Rubeus) or command-line arguments containing patterns like 'kerberos::golden' or 'rubeus.exe kerberoast'. This is a direct and effective way to catch adversaries using common TTPs.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Member Servers
      - Privileged User Workstations
      - Standard User Workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_events WHERE (process_hash IN (known_credential_dumpers_list)) OR (command_line MATCHES (kerberos_attack_regex))
  - question: Can statistical analysis of command-line arguments and process execution frequency identify obfuscated or novel Kerberos attacks?
    context: This question aims to uncover stealthier attacks that might evade simple signature-based detection. By calculating the entropy and character frequency of command-line strings, we can flag obfuscated or encoded payloads that deviate from normal administrative activity. Additionally, tracking the execution frequency of rare processes with authentication-related parameters helps identify tools that an adversary might introduce into the environment for the first time.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Member Servers
      - Privileged User Workstations
      - Standard User Workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CALCULATE entropy, char_frequency FROM command_line_events; ALERT WHERE entropy > baseline_std_dev(2) OR process_frequency < threshold AND command_line CONTAINS ('auth', 'ticket')
  - question: How can a machine learning model be used to classify process executions as benign or malicious in the context of Kerberos credential dumping?
    context: This question explores a more advanced, proactive detection method. By training a supervised classification model (like Gradient Boosting) on labeled process data, the system can learn the subtle characteristics of malicious activity. Features like parent process, command-line length, entropy, and digital signature status allow the model to identify new or unknown credential dumping tools that don't match known signatures, providing a more robust and adaptable defense.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Member Servers
      - Privileged User Workstations
      - Standard User Workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: PREDICT classification FROM process_creation_events USING trained_credential_dumper_model; ALERT WHERE prediction == 'suspicious'
  - question: How can I use a SIEM rule to detect potential Kerberoasting activity, specifically targeting legacy RC4-HMAC encryption?
    context: This question addresses the detection of Kerberoasting, a technique where an attacker requests service tickets for multiple accounts to crack their passwords offline. The focus is on a high-fidelity symbolic rule that triggers an alert when a service ticket request (Event ID 4769) uses the weak RC4-HMAC encryption type (0x17), especially if the requesting account is not an approved legacy service. Correlating this with network data (like Zeek logs) can help verify if the request originates from an unusual location.
    answer_sources:
      - Windows Event ID 4769
      - Zeek kerberos.log
      - Domain Controllers
      - Network sensors monitoring traffic to/from Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH kerberos_tgs_req_events (EventID 4769) WHERE encryption_type == '0x17' AND user NOT IN (approved_legacy_accounts); CORRELATE with network_logs to check source_ip
  - question: Can statistical analysis of service ticket request volume identify a user account performing a Kerberoasting spray attack?
    context: This question focuses on detecting Kerberoasting through behavioral anomalies rather than specific signatures. By aggregating the count of unique Service Principal Names (SPNs) requested by each user in a short time window (e.g., 5 minutes) and comparing it to their historical baseline, we can identify abnormal spikes in activity. An alert is generated if a user's request count significantly exceeds their own norm or the 99th percentile of all users, indicating a potential enumeration and attack.
    answer_sources:
      - Windows Event ID 4769
      - Zeek kerberos.log
      - Domain Controllers
      - Network sensors monitoring traffic to/from Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: AGGREGATE unique_spn_count by user over 5_min_window; ALERT WHERE unique_spn_count > baseline_std_dev(3) OR unique_spn_count > percentile(all_users, 99)
  - question: How can a time-series anomaly detection model identify Kerberoasting by learning the normal rhythm of ticket requests per user?
    context: This question proposes an advanced machine learning approach to detect Kerberoasting. By using a time-series model (like LSTM), the system can learn the typical patterns of service ticket requests (Event ID 4769) for each user, considering factors like time of day and day of week. The model can then detect significant deviations from these learned patterns, flagging a sudden, high-volume burst of requests as an anomaly indicative of a Kerberoasting spray.
    answer_sources:
      - Windows Event ID 4769
      - Zeek kerberos.log
      - Domain Controllers
      - Network sensors monitoring traffic to/from Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: PREDICT expected_tgs_req_volume FROM user_activity_timeseries_model; ALERT WHERE actual_volume SIGNIFICANTLY_DEVIATES_FROM prediction
  - question: How can I create a high-fidelity alert for successful AS-REP Roasting attacks using a SIEM rule and LDAP enrichment?
    context: This question targets the detection of AS-REP Roasting, where an attacker exploits an account with Kerberos pre-authentication disabled. The method involves a symbolic rule that alerts on any successful TGT request (Event ID 4768) where the pre-authentication type is '0'. To increase fidelity and reduce false positives, the alert should be enriched with a live LDAP query to confirm that the user account in Active Directory is indeed configured with the 'Do not require Kerberos preauthentication' flag.
    answer_sources:
      - Windows Event ID 4768
      - Zeek kerberos.log
      - Active Directory User Object Attributes
      - Domain Controllers
      - Active Directory infrastructure
      - Network sensors monitoring traffic to/from Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH kerberos_tgt_req_events (EventID 4768) WHERE pre_auth_type == '0' AND result_code == '0x0'; ENRICH with AD_user_attributes; ALERT IF user_has_flag('DONT_REQ_PREAUTH')
  - question: Can statistical monitoring of Active Directory configurations and user TGT request rates detect AS-REP Roasting activity?
    context: This question proposes a two-pronged statistical approach. First, it involves periodically querying Active Directory to track the number of accounts with pre-authentication disabled and alerting on any increase, which could indicate misconfiguration or malicious changes. Second, for those accounts already flagged, it establishes a baseline of their normal TGT request frequency and alerts if the rate suddenly spikes, suggesting an attacker is actively exploiting the weakness.
    answer_sources:
      - Windows Event ID 4768
      - Zeek kerberos.log
      - Active Directory User Object Attributes
      - Domain Controllers
      - Active Directory infrastructure
      - Network sensors monitoring traffic to/from Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: QUERY AD daily for users with pre-auth disabled; ALERT on count increase. For flagged users, TRACK TGT request frequency; ALERT if frequency > percentile(historical_activity, 95)
  - question: How can peer-group analysis using a clustering algorithm help identify an account being targeted for AS-REP Roasting?
    context: This question describes a machine learning technique for finding outlier behavior. By clustering users into peer groups based on their roles and access patterns (e.g., using DBSCAN), the system can establish a behavioral norm for each group. The model can then identify a user whose TGT request behavior (specifically, requests with pre-authentication disabled) is a statistical outlier compared to their peers. This deviation can signal that the account is compromised or being actively targeted for an AS-REP Roasting attack.
    answer_sources:
      - Windows Event ID 4768
      - Zeek kerberos.log
      - Active Directory User Object Attributes
      - Domain Controllers
      - Active Directory infrastructure
      - Network sensors monitoring traffic to/from Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CLUSTER users into peer_groups based on role/access; FOR each group, establish baseline for pre-auth_disabled_requests; ALERT on users who are outliers to their peer_group
  - question: How can I use symbolic logic to detect forged Golden and Silver Tickets by correlating logon events with Active Directory and DC logs?
    context: This question provides a method for detecting two powerful persistence techniques. To find Golden Tickets, it involves checking every successful network logon (Event ID 4624) and comparing the privilege SIDs in the logon token against the user's actual group memberships in AD. An alert is raised if a user has privileges they aren't assigned. For Silver Tickets, the rule alerts if a service ticket request (Event ID 4769) appears on a member server without a corresponding TGT request (Event ID 4768) being logged on a Domain Controller within the ticket's lifetime.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4769
      - Windows Event ID 4768
      - Zeek kerberos.log
      - Domain Controllers
      - Critical Member Servers
      - User Workstations
      - Active Directory infrastructure
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: Golden-Ticket-Check; ON logon (4624), COMPARE token_sids with AD_groups; ALERT on mismatch. Silver-Ticket-Check; ON service_ticket_req (4769) on member_server, CHECK for corresponding TGT_req (4768) on DC in last 10h; ALERT if none found.
  - question: Can statistical analysis of logon privilege scores and ticket lifetimes in network traffic reveal forged Kerberos tickets?
    context: This question offers a statistical approach to finding forged tickets. For Golden Tickets, it involves calculating a 'privilege score' for each logon session based on the SIDs present and alerting if a user's score is a statistical outlier compared to their history. For Silver and Golden Tickets, it involves analyzing network traffic (Zeek logs) to find tickets with abnormally long lifetimes (e.g., 10 years for a default forged Golden Ticket) or TGS tickets issued by a client IP that is not a legitimate Domain Controller.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4769
      - Windows Event ID 4768
      - Zeek kerberos.log
      - Domain Controllers
      - Critical Member Servers
      - User Workstations
      - Active Directory infrastructure
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: Golden-Ticket-Check; CALCULATE privilege_score from logon_sids; ALERT if score > user_baseline_std_dev(3). Forged-Ticket-Check; ANALYZE kerberos_logs; ALERT if ticket_lifetime > domain_policy OR tgs_issuer_ip is not a DC.
  - question: How can a graph-based anomaly detection model identify lateral movement using forged Silver Tickets?
    context: This question outlines an advanced graph analytics technique. A graph is constructed where users and services are nodes, and successful ticket requests (Event ID 4769) are edges. By applying a graph-based anomaly detection algorithm, the system can identify highly improbable access patterns, such as a user from the HR department suddenly accessing a critical database server typically only used by developers. Such an anomalous edge in the graph is a strong indicator of a forged Silver Ticket being used for lateral movement.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4769
      - Windows Event ID 4768
      - Zeek kerberos.log
      - Domain Controllers
      - Critical Member Servers
      - User Workstations
      - Active Directory infrastructure
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: BUILD user_service_access_graph from ticket_requests (4769); APPLY graph_anomaly_detection; ALERT on improbable access patterns (e.g., user accessing service outside their community cluster).
  - question: How can I create a high-severity SIEM alert to detect unauthorized processes accessing LSASS memory?
    context: This question addresses the common credential dumping technique of reading memory from the Local Security Authority Subsystem Service (LSASS.exe). The detection method is a straightforward but powerful symbolic rule that triggers a high-severity alert for any Sysmon Event ID 10 where the target process is 'lsass.exe' and the source process is not on an explicit allowlist of legitimate system tools or security software. The rule must also verify that the access requested includes read permissions, which is necessary to dump credentials.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints
      - Domain Controllers
      - Privileged Access Workstations
      - critical servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_access_events (Sysmon 10) WHERE target_process == 'lsass.exe' AND source_process NOT IN (allowlist) AND granted_access INCLUDES ('read_permissions')
  - question: Can a statistical rarity analysis of LSASS process access events identify novel credential dumping techniques?
    context: This question aims to detect unknown or unusual methods of LSASS access. The approach involves building a baseline of all normal access patterns by recording tuples of (Source Process, User, Access Permissions) over a 30-day period. A rarity score is calculated for each unique tuple. An alert is then generated for any new access event that involves a tuple that has never been seen before or is extremely rare, indicating a highly suspicious and potentially malicious access attempt that deviates from established norms.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints
      - Domain Controllers
      - Privileged Access Workstations
      - critical servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: BASELINE all (source_process, user, access_mask) tuples accessing lsass.exe; CALCULATE rarity_score for each tuple; ALERT on new or very rare access tuples.
  - question: How can a one-class SVM machine learning model be used to distinguish legitimate from malicious LSASS memory access?
    context: This question proposes using a machine learning model specifically designed for anomaly detection. A one-class SVM is trained exclusively on data from legitimate Sysmon Event ID 10 events that target lsass.exe. The model learns the multi-dimensional boundary of what constitutes 'normal' access, using features like the source process path, its parent process, user context, and digital signature status. Any new access event that falls outside this learned boundary is immediately flagged as an anomaly and a likely credential theft attempt.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints
      - Domain Controllers
      - Privileged Access Workstations
      - critical servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN one-class_SVM_model on legitimate_lsass_access_events; PREDICT classification for new_access_events; ALERT if classification is 'anomaly'