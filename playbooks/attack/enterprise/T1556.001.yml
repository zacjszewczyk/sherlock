name: T1556.001: Domain Controller Authentication
id: f4d1b1c0-8d5f-4e3a-9f7b-6c9a2d8e4f0a
description: This playbook focuses on detecting adversaries maintaining persistence, evading defenses, and accessing credentials by modifying authentication mechanisms on domain controllers. Key indicators include modifications to the 'Security Packages' registry key to load malicious DLLs, the use of skeleton key attacks indicated by specific command-line arguments or logons with disabled accounts, tampering with critical authentication DLLs, bypassing MFA, and anomalous logon behaviors such as impossible travel or first-time interactive access.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has the 'Security Packages' registry key on a domain controller been modified to include a known malicious or unsigned DLL?
  context: This question aims to detect a common persistence technique where an adversary adds a malicious security package (DLL) to the LSA configuration. When LSA starts, it loads all DLLs listed in the `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages` registry key. A malicious DLL loaded this way can intercept plaintext credentials or bypass authentication. This detection focuses on identifying modifications to this key and checking the newly added DLL against known malicious packages or verifying its digital signature.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers' registry
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events WHERE (event_id=4657 OR event_id=13) AND object_name="HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages" AND host_role="domain_controller" | EXTRACT new_dll_name | LOOKUP new_dll_name against (known_malicious_dlls, microsoft_signed_dlls)
- question: Are there any domain controllers with statistically rare DLLs listed in their 'Security Packages' registry key, or has the key been modified outside of a known maintenance window?
  context: This question uses a statistical approach to find anomalies without relying on known-bad signatures. By establishing a baseline of the DLLs present in the 'Security Packages' key across all domain controllers, any DLL that is an outlier (e.g., present on only one DC) becomes suspicious. Similarly, changes to this key should be infrequent and tied to patching cycles. Any modification outside these expected periods is anomalous and warrants investigation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers' registry
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events on domain_controllers | GROUPBY host | GET current_value("Security Packages") | STACK_COUNT dll_name | IDENTIFY dlls with low prevalence | COMPARE modification_timestamp to known_change_windows
- question: Can machine learning models identify anomalous modifications to the 'Security Packages' registry key or classify newly added DLLs as malicious?
  context: This question leverages machine learning to enhance detection. A time-series model can learn the normal rhythm of patching and updates that affect the 'Security Packages' key, flagging any modification that deviates from this predicted pattern. Additionally, a file classification model can analyze the properties of the newly added DLL (e.g., entropy, imports, signature) to determine its likelihood of being malicious, providing a risk score even for unknown threats.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers' registry
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE registry_modification_events to time_series_model | ALERT on forecast_anomaly | ON new_dll_added, PIPE file_properties to classification_model | ALERT on high_malicious_score
- question: Was a process created on a domain controller with command-line arguments indicative of a skeleton key attack (e.g., 'misc::skeleton')?
  context: This question looks for direct evidence of the Mimikatz skeleton key module being used. The 'misc::skeleton' command patches the LSA process in memory on a domain controller, allowing an adversary to authenticate as any user with a master password. Detecting specific command-line strings like 'misc::skeleton', 'privilege::debug', or 'sekurlsa::' is a high-fidelity way to identify this attack.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers' process execution logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE host_role="domain_controller" AND command_line CONTAINS ("misc::skeleton" OR "privilege::debug" OR "sekurlsa::")
- question: Have any processes on domain controllers been executed with unusually high-entropy command lines or from rare parent processes?
  context: Adversaries often obfuscate commands to evade keyword-based detection. This question uses statistical methods to find such commands. High Shannon entropy in a command line can indicate encoded payloads. Additionally, analyzing parent-child process relationships can uncover anomalies, such as a web server process spawning a command shell, which is highly irregular on a domain controller.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers' process execution logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events on domain_controllers | CALCULATE entropy(command_line) | ALERT if entropy > baseline_95th_percentile | ANALYZE parent_process, child_process | ALERT on rare_combinations
- question: Can a machine learning model distinguish between malicious and benign command-line activity on domain controllers?
  context: This question proposes using a trained classification model to proactively score command-line activity. By extracting features like length, character types, n-grams, and entropy, the model can learn the characteristics of both normal administrative commands and known malicious commands. This allows it to identify and alert on suspicious activity in real-time, even if it does not match a specific known-bad signature.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers' process execution logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE process_creation_events to command_line_classifier_model | ALERT on high_malicious_score
- question: Has a successful logon event been observed for an account that is known to be disabled in Active Directory?
  context: A successful logon from a disabled account is a strong indicator of a compromised authentication mechanism, such as a skeleton key. Since a disabled account should never be able to authenticate, this is a high-fidelity alert. The detection logic involves correlating successful logon events (Event ID 4624) with a list of currently disabled accounts from Active Directory.
  answer_sources:
  - Windows Event ID 4624
  - Active Directory User Account Attributes
  - Domain Controllers
  - Active Directory Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: GET list_of_disabled_accounts from AD | SEARCH logon_events WHERE event_id=4624 AND username IN list_of_disabled_accounts
- question: Has the count of successful logons for disabled accounts risen above zero?
  context: This question frames the detection as a simple but powerful statistical anomaly. The baseline for successful logons from disabled accounts is always zero. Any event that violates this baseline is, by definition, anomalous and critical. Monitoring the rate of these events can help quantify the scope of an attack if multiple accounts are being abused.
  answer_sources:
  - Windows Event ID 4624
  - Active Directory User Account Attributes
  - Domain Controllers
  - Active Directory Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH logon_events WHERE event_id=4624 | JOIN with user_attributes | FILTER user_status="disabled" | COUNT events | ALERT if count > 0
- question: Is there a sudden spike in the number of unique disabled accounts successfully authenticating?
  context: This question uses a time-series model to monitor adversary behavior after a successful skeleton key deployment. The first logon from a disabled account would be the initial anomaly. A subsequent increase in the variety of disabled accounts being used for logons could indicate that the adversary is actively using the backdoor for lateral movement or other post-compromise activities.
  answer_sources:
  - Windows Event ID 4624
  - Active Directory User Account Attributes
  - Domain Controllers
  - Active Directory Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH successful_logons_for_disabled_accounts | AGGREGATE distinct_count(username) over time | PIPE to time_series_model | ALERT on anomalous_spike
- question: Did an account that is not authorized for interactive logon successfully log on to a domain controller?
  context: Interactive logons (e.g., RDP, console) to domain controllers should be restricted to a very small set of privileged administrator accounts. This question seeks to enforce that policy through detection. By maintaining an explicit allowlist of authorized accounts, any successful interactive logon (Logon Type 2, 7, or 10) by an account not on that list can be immediately flagged as a potential security incident.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers' authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH logon_events WHERE event_id=4624 AND logon_type IN (2, 7, 10) AND host_role="domain_controller" AND username NOT IN authorized_dc_admins_list
- question: Has any user account performed an interactive logon to a domain controller for the first time in the last 90 days?
  context: This question uses user behavior analytics to detect anomalous access. For every user, a historical profile of their typical logon types to domain controllers is maintained. An interactive logon from an account that has never performed one before is a "first-time seen" event. This is a significant deviation from its established baseline and could indicate that the account's credentials have been stolen and are being used for privilege escalation.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers' authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH logon_events on domain_controllers | FOR_EACH username, CALCULATE frequency(logon_type) over last 90 days | IF current_logon_type="interactive" AND historical_frequency=0, ALERT
- question: Has a user account's logon behavior caused it to anomalously shift from a non-interactive to an interactive user group?
  context: This question applies clustering algorithms to group users based on their typical logon behaviors (types, times, frequency). For example, service accounts would cluster together in a "non-interactive" group. If a service account suddenly performs an interactive logon, its behavior pattern changes, causing it to move out of its normal cluster. This "state change" anomaly is a strong indicator of credential misuse.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers' authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER users based on logon_behavior_features | MONITOR for users changing clusters | ALERT if user moves from "non-interactive" cluster to "interactive" cluster
- question: Was a process executed on a domain controller whose name or original filename matches a known malicious tool?
  context: This question focuses on detecting the presence of known malicious tools like Mimikatz by their file names. By monitoring process creation events and comparing the process image name and the `OriginalFileName` field from the file's metadata against a list of known indicators from threat intelligence, an organization can detect the staging or execution of common hacking tools.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers' process execution logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events on domain_controllers | WHERE process_name IN known_malicious_tools_list OR original_filename IN known_malicious_tools_list OR process_hash IN known_malicious_hashes
- question: Was an extremely rare or unsigned process executed on a domain controller?
  context: Adversaries may rename their tools to evade signature-based detection. This question uses statistical rarity to find them. The set of processes that run on a domain controller should be stable and well-known. Any process that is statistically rare (e.g., seen only once across the entire fleet) is suspicious by default and should be investigated, especially if it lacks a valid digital signature from a trusted publisher.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers' process execution logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events on domain_controllers | CALCULATE frequency(process_name) across fleet | ALERT if frequency < 1st_percentile AND signature_status != "trusted"
- question: Can a machine learning model detect variations of known malicious tool names that are designed to evade blocklists?
  context: This question addresses the adversary's tactic of slightly modifying tool names (e.g., `m1m1katz.exe`). A simple blocklist would miss this. A machine learning model trained on lexical features of process names (like character sequences or n-grams) can learn to identify patterns associated with malicious tools and flag these variations, providing a more resilient detection method.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers' process execution logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE process_name from creation_events to lexical_classification_model | ALERT on high_malicious_score
- question: Has a non-standard or unauthorized process attempted to read the memory of lsass.exe on a domain controller?
  context: The Local Security Authority Subsystem Service (lsass.exe) stores credentials in memory. Adversaries frequently attempt to dump this memory to harvest credentials. This question aims to detect this activity by monitoring for memory access requests to `lsass.exe`. By maintaining a whitelist of legitimate processes that are allowed to access LSASS (e.g., system processes, EDR agents), any access from an unauthorized process can be treated as a high-fidelity alert.
  answer_sources:
  - Sysmon Event ID 10
  - Domain Controllers' process memory access logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_access_events WHERE event_id=10 AND target_process="lsass.exe" AND source_process NOT IN lsass_access_whitelist
- question: Has a process accessed the memory of lsass.exe for the first time, or requested an unusually high level of privilege to do so?
  context: This question uses behavioral profiling to find anomalous LSASS access. A process that has never accessed LSASS before suddenly doing so is a "first-time" event and is suspicious. Furthermore, even legitimate processes have a typical pattern of access rights they request. A process requesting a higher level of privilege than it normally does (e.g., asking for write access when it usually only reads) is another strong anomaly indicator.
  answer_sources:
  - Sysmon Event ID 10
  - Domain Controllers' process memory access logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_access_events WHERE target_process="lsass.exe" | PROFILE source_process, granted_access_mask over time | ALERT on first_time_access OR anomalous_access_mask
- question: Can machine learning detect anomalous sequences of events that culminate in lsass.exe memory access?
  context: Credential dumping is often the final step in a sequence of actions. This question proposes using a sequence-aware model (like an LSTM) to learn the normal chains of events on a host. The model can then identify a sequence of actions that is abnormal and leads to LSASS access, allowing for earlier detection of the entire attack chain rather than just the final step.
  answer_sources:
  - Sysmon Event ID 10
  - Domain Controllers' process memory access logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL event sequences (process_create, file_create, etc.) leading to lsass_access | PIPE real_time_event_stream to model | ALERT on anomalous_sequence_detection
- question: Has a critical authentication DLL in System32 been modified by an unauthorized process on a domain controller?
  context: Adversaries may patch critical DLLs like msv1_0.dll or samsrv.dll on disk to create a persistent backdoor. This question aims to detect such file tampering. By monitoring file modification events in the C:\Windows\System32 directory for a specific list of critical DLLs and whitelisting legitimate installer processes (e.g., TrustedInstaller.exe), any modification by an unauthorized process can be flagged as malicious.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Domain Controllers' C:\Windows\System32 directory
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_events WHERE (event_id=11 OR event_id=4663) AND target_file IN critical_auth_dll_list AND process_name NOT IN trusted_installer_list
- question: Has the hash of a critical authentication DLL on a domain controller changed unexpectedly?
  context: This question provides a method for integrity checking of critical system files. A known-good baseline hash (e.g., SHA256) is established for each critical authentication DLL after a legitimate patch. By periodically recalculating the hashes of these files and comparing them to the baseline, any mismatch serves as a high-fidelity indicator of file tampering, bypassing the need to catch the modification event in real-time.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Domain Controllers' C:\Windows\System32 directory
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PERIODICALLY CALCULATE hash(critical_auth_dlls) on domain_controllers | COMPARE current_hash with baseline_hash | ALERT on mismatch
- question: Can a machine learning model predict and identify unauthorized modifications to critical authentication DLLs?
  context: This question applies machine learning to detect file tampering. A time-series model can learn the expected schedule of file modifications in the System32 directory based on historical patch cycles, flagging any modification that occurs at an unexpected time. Additionally, a classification model can assess the process that performs a modification, scoring its legitimacy based on its attributes to determine if it is a suspicious actor.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Domain Controllers' C:\Windows\System32 directory
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE file_modification_events to time_series_model | ALERT on forecast_anomaly | SCORE modifying_process with classification_model | ALERT on high_suspicion_score
- question: Was a successful remote logon to a domain resource logged without a corresponding successful MFA event for that user?
  context: This question is designed to detect MFA bypass. For accounts and systems where MFA is enforced, every successful remote logon should be preceded or immediately followed by a successful MFA authentication event. By correlating Windows logon events with logs from the MFA provider, any successful primary authentication that lacks a corresponding MFA success event within a short time window is a critical alert for a potential bypass.
  answer_sources:
  - Windows Event ID 4624
  - MFA Provider Logs
  - Zeek conn.log
  - VPN Logs
  - Domain Controllers
  - VPN Concentrators
  - MFA Authentication Servers
  - Network Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each successful_remote_logon (event_id=4624), SEARCH mfa_logs for successful_mfa_event WHERE username=logon.username AND source_ip=logon.source_ip AND time is within 2_minutes | ALERT if no mfa_event is found
- question: Has the ratio of successful Windows remote logons to successful MFA logons for a user deviated significantly from 1.0?
  context: In an MFA-enforced environment, the number of successful remote logons should be roughly equal to the number of successful MFA authentications. This question uses this statistical relationship for detection. A sudden drop in the ratio (e.g., many Windows logons but few or no MFA logons) indicates that the primary authentication is succeeding without the secondary factor, pointing to a potential bypass.
  answer_sources:
  - Windows Event ID 4624
  - MFA Provider Logs
  - Zeek conn.log
  - VPN Logs
  - Domain Controllers
  - VPN Concentrators
  - MFA Authentication Servers
  - Network Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user, CALCULATE ratio = count(successful_remote_logons) / count(successful_mfa_logons) over 24_hours | ALERT if ratio is significantly > 1.0
- question: Has an anomalous sequence of logon events occurred, such as a missing MFA success event in a user's session?
  context: This question uses machine learning to model the entire user logon workflow as a sequence of events (e.g., VPN connect -> Windows logon -> MFA success). A sequence model can learn the normal order and timing of these events for different users or groups. An observed sequence that deviates from the learned pattern, such as a missing MFA event or an unusual delay, is flagged as an anomaly indicative of a bypass.
  answer_sources:
  - Windows Event ID 4624
  - MFA Provider Logs
  - Zeek conn.log
  - VPN Logs
  - Domain Controllers
  - VPN Concentrators
  - MFA Authentication Servers
  - Network Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TRAIN sequence_model on typical_logon_event_flow | PIPE real_time_user_session_events to model | ALERT on detected_sequence_anomaly
- question: Has a successful logon been recorded for a designated honey-token account?
  context: This question describes a high-fidelity detection method using a honey-token. A honey-token is a user account (e.g., a disabled admin account) that has no legitimate purpose and should never be used. Any successful authentication event associated with this account is, by definition, malicious and should trigger an immediate, high-priority alert, indicating that an adversary has compromised credentials or an authentication mechanism.
  answer_sources:
  - Windows Event ID 4624
  - Active Directory User Account Attributes
  - Domain Controllers
  - Active Directory Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH logon_events WHERE event_id=4624 AND username IN honey_token_account_list
- question: Is the logon frequency for a disabled honey-token account greater than zero?
  context: This question frames the honey-token detection in statistical terms. The baseline logon frequency for a disabled honey-token account is zero. Any successful logon represents an infinite statistical deviation from this baseline. Tracking the number of unique honey-tokens that are successfully used over time can also help measure the extent of an adversary's discovery and exploitation activities.
  answer_sources:
  - Windows Event ID 4624
  - Active Directory User Account Attributes
  - Domain Controllers
  - Active Directory Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH logon_events WHERE username IN honey_token_account_list AND event_id=4624 | COUNT events | ALERT if count > 0
- question: Can machine learning be used to automatically enrich honey-token alerts with source context?
  context: While a honey-token logon is a clear signal of malicious activity, this question focuses on using machine learning to accelerate the response. A classification model can automatically analyze the source of the logon (IP address, hostname) and classify it (e.g., internal vs. external, known-bad infrastructure), providing immediate context to the security analyst and helping to prioritize the incident response.
  answer_sources:
  - Windows Event ID 4624
  - Active Directory User Account Attributes
  - Domain Controllers
  - Active Directory Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON honey_token_logon_alert, PIPE logon_source_attributes to classification_model | ENRICH alert with source_classification (e.g., "internal", "TOR exit node")
- question: Has a failed logon due to a bad password been immediately followed by a successful logon for the same user from the same source?
  context: This question targets a specific behavioral signature of a skeleton key attack. When using a skeleton key, an adversary can use any password. Often, they will attempt a logon with an incorrect password first (generating a failure event 4625), then immediately succeed with their master password (generating a success event 4624). Correlating these two events for the same user and source IP within a very short time window (e.g., 5 seconds) is a strong indicator of this technique.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Domain Controllers' authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH for logon_failure (event_id=4625, status=0xc000006d) | JOIN with logon_success (event_id=4624) WHERE user and source_ip match AND time_delta < 5_seconds
- question: Is there a statistical anomaly in the time between a user's failed and subsequent successful logon?
  context: This question analyzes the time delta between failed and successful logons. Normal users might wait a few seconds before re-typing a password. An automated tool or an adversary using a skeleton key might execute the failed and successful attempts almost instantaneously. A distribution of these time deltas clustering near zero for a specific user or source IP is highly anomalous and suspicious.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Domain Controllers' authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE time_delta between logon_failure (4625) and logon_success (4624) for same user/IP | ANALYZE distribution of time_deltas | ALERT on clusters near zero
- question: Can a machine learning model detect the 'fail-then-succeed' logon pattern characteristic of a skeleton key?
  context: This question proposes using a sequence analysis model to formally identify the malicious 'fail-then-succeed' pattern. The model can be trained to distinguish this specific, rapid sequence from more benign behaviors (like a user quickly correcting a typo) by considering additional context such as the frequency of the pattern, the source of the logon, and the type of account involved.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Domain Controllers' authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE authentication_log_stream to sequence_analysis_model | ALERT when model detects "fail-then-succeed" pattern
- question: Did a user account, after a network logon, access a predefined 'crown jewel' asset it is not authorized to access?
  context: This question focuses on detecting the impact of a compromised account. After an adversary gains access using a technique like a skeleton key, they will attempt to access valuable resources. This detection triggers an alert if a compromised account, following a successful logon, attempts network connections to a predefined list of critical servers or data stores that are outside its normal access scope.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Member Servers
  - User Workstations
  - Network Segments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON successful_logon, MONITOR subsequent network_connections from user | IF connection_destination IN crown_jewel_asset_list AND user NOT IN authorized_users_for_asset, ALERT
- question: Did a user account access an anomalously high number of distinct hosts within one hour following a successful logon?
  context: This question uses user behavior analytics (UBA) to detect lateral movement. For each user, a baseline is established for the number of distinct hosts they typically access within an hour. If, after a logon, the account's activity dramatically exceeds its own historical 99th percentile, it indicates abnormal behavior consistent with an adversary performing network reconnaissance or spreading laterally.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Member Servers
  - User Workstations
  - Network Segments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user, CALCULATE baseline of distinct_hosts_accessed_per_hour | MONITOR current hourly activity | ALERT if current_count > baseline_99th_percentile
- question: Has a user account's access pattern anomalously shifted to a new cluster of hosts?
  context: This question uses graph-based analysis to model user-to-host access patterns. Users and hosts are represented as nodes in a graph, and logons create edges between them. Clustering algorithms can identify communities or groups of hosts that a user normally interacts with. If a user suddenly begins creating edges to a completely different cluster of hosts, it represents a community detection anomaly, suggesting the account is compromised and being used for lateral movement.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Member Servers
  - User Workstations
  - Network Segments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL user_to_host_logons as a graph | APPLY community_detection_algorithm | MONITOR for users creating edges to new communities | ALERT on anomaly
- question: Did a successful remote logon originate from a country on a blocked list?
  context: This is a straightforward detection based on geographic threat intelligence. For every successful remote logon, the source IP address is geolocated. If the source country is one from which the organization does not do business or which is known to be a source of malicious activity, an alert is generated. This provides a simple but effective filter for high-risk authentication events.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Logs
  - Domain Controllers
  - VPN Concentrators
  - Network Gateway
  - Cloud Service Authentication Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH remote_logon_events (event_id=4624, logon_type=10) | GEOLOCATE source_ip | IF country IN blocked_countries_list, ALERT
- question: Have two successful logons for the same user occurred from geographically distant locations, implying impossible travel?
  context: This question seeks to identify account sharing or compromise by analyzing the physical possibility of logon events. For each new logon, the system calculates the distance and time elapsed since the user's previous logon. If the implied velocity required to travel between the two locations exceeds a plausible speed (e.g., 600 mph), it is flagged as an "impossible travel" event, indicating the account is likely being used from two locations at once.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Logs
  - Domain Controllers
  - VPN Concentrators
  - Network Gateway
  - Cloud Service Authentication Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON successful_logon, GET current_location from source_ip | GET previous_location from user's last logon | CALCULATE velocity = distance(current, previous) / time_delta | IF velocity > 600_mph, ALERT
- question: Has a user logged in from a geographic location that is anomalous compared to their established clusters of activity?
  context: This question uses machine learning to build a more nuanced model of a user's geographic behavior than simple impossible travel. A clustering algorithm (e.g., DBSCAN) can identify a user's normal areas of operation (e.g., 'Office', 'Home', 'Usual Travel Cities'). A logon that occurs far outside any of these established clusters is flagged as a spatial anomaly, even if it doesn't meet the threshold for "impossible" velocity.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Logs
  - Domain Controllers
  - VPN Concentrators
  - Network Gateway
  - Cloud Service Authentication Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER user's historical logon_locations | ON new_logon, CHECK if new_location belongs to an existing cluster | IF not, ALERT as spatial_anomaly