name: T1554: Compromise Host Software Binary
id: a2b1c0d9-e8f7-4a6b-5c4d-3e2f1a0b9c8d
description: This playbook helps investigators determine if an adversary is maintaining persistence by compromising host software binaries. It focuses on detecting evidence of this technique through several avenues: identifying when a binary's hash or digital signature does not match a known-good baseline upon execution; monitoring for unauthorized file write events to protected system or application directories by processes that are not trusted installers; detecting anomalous network activity, such as outbound connections from processes that typically do not use the network; and uncovering suspicious process relationships, like a trusted binary spawning an unusual child process or loading an unsigned module. By answering the questions in this playbook, an analyst can uncover hidden persistence mechanisms where legitimate software has been trojanized.
type: technique
related:
- TA0003: Persistence
contributors:
- Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any processes executing from critical file paths whose file hash does not match a known-good allowlist or have an invalid digital signature?
  context: This question aims to detect direct binary replacement or modification. A mismatch in the hash or an invalid signature for a critical binary is a strong indicator of compromise, as attackers may patch or replace legitimate software to embed their malicious code for persistence. This is a high-fidelity check for unauthorized changes.
  answer_sources:
  - Windows Event ID 1
  - Zeek pe.log
  - Internally maintained allowlist of known-good hashes
  - Critical system directories (e.g., C:\Windows\System32, /usr/bin)
  - Application installation directories (e.g., C:\Program Files)
  - Network file shares hosting executables
  - Domain controllers, application servers, and developer workstations
  range: Last 90 days
  queries:
  - pseudocode: SEARCH process_creation_logs | JOIN file_path with known_good_hash_allowlist | WHERE process_hash != allowlist_hash OR signature_status != 'Valid' | RETURN hostname, process_path, process_hash, signature_status
- question: Is there an abnormal number of different file hashes being observed for a single binary file path over time?
  context: Legitimate software updates change file hashes, but this usually happens predictably during patch cycles. A sudden spike in the number of unique hashes for a specific binary path outside of a known update window could indicate an attacker repeatedly modifying or replacing the file. This statistical approach helps find suspicious changes without relying on a static allowlist.
  answer_sources:
  - Windows Event ID 1
  - Zeek pe.log
  - Critical system directories (e.g., C:\Windows\System32, /usr/bin)
  - Application installation directories (e.g., C:\Program Files)
  - Network file shares hosting executables
  - Domain controllers, application servers, and developer workstations
  range: Last 90 days
  queries:
  - pseudocode: SEARCH process_creation_logs | GROUPBY file_path, day | COUNT distinct process_hash | COMPARE daily_count to 30-day_baseline (mean + 3*stdev) | ALERT if daily_count > threshold
- question: Can a machine learning model identify suspicious process executions based on features indicative of binary modification?
  context: This question uses a machine learning approach to combine multiple weak signals into a stronger detection. Features like signature status, hash integrity, parent process relationships, and command-line characteristics are used to train a model to recognize patterns of malicious execution resulting from a compromised binary, even if one single feature is not enough to trigger an alert.
  answer_sources:
  - Windows Event ID 1
  - Zeek pe.log
  - Critical system directories (e.g., C:\Windows\System32, /usr/bin)
  - Application installation directories (e.g., C:\Program Files)
  - Network file shares hosting executables
  - Domain controllers, application servers, and developer workstations
  range: Last 90 days
  queries:
  - pseudocode: INPUT process_creation_events | EXTRACT_FEATURES (signature, hash_in_allowlist, parent_process, cmd_length, cmd_entropy, path_entropy) | PREDICT with trained_model | ALERT if prediction is 'suspicious-binary-modification' with high_confidence
- question: Are executable or library files in protected system directories being created or modified by unauthorized processes?
  context: Protected directories like C:\Windows or C:\Program Files should only be modified by trusted system processes or authorized installers. This question seeks to identify any file write events targeting binaries in these locations that originate from a process not on an established allowlist of installers, which is a strong sign of a trojanized binary or a dropper.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - File systems of production servers and user endpoints
  - Software deployment servers
  - Code repositories and CI/CD pipeline build servers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH file_creation_events | WHERE target_filename ends with (.exe, .dll, .sys) AND target_path is in protected_directory_list | FILTER source_process NOT in trusted_installer_allowlist | ALERT
- question: Is there an unusual diversity of processes writing to protected system directories on any given host?
  context: Normally, only a small, predictable set of processes (installers, updaters) write to protected directories. This question uses entropy to measure the diversity of processes performing these writes. A sudden spike in entropy suggests that many different, and likely unauthorized, processes are modifying system files, which could be a sign of widespread compromise.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - File systems of production servers and user endpoints
  - Software deployment servers
  - Code repositories and CI/CD pipeline build servers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH file_creation_events | WHERE target_path is in protected_directory_list | GROUPBY hostname, day | CALCULATE shannon_entropy of source_process_names | ALERT if daily_entropy > 98th_percentile_of_30_day_history
- question: Can an anomaly detection model identify outlier file modification events that deviate from normal software installation behavior?
  context: This question leverages a machine learning model to learn the normal patterns of file modifications associated with patching and software installs. The model considers the source process, target file, user context, and parent process. It can then flag new file write events that are statistical outliers, indicating a potential unauthorized modification that doesn't fit established patterns.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - File systems of production servers and user endpoints
  - Software deployment servers
  - Code repositories and CI/CD pipeline build servers
  range: Last 90 days
  queries:
  - pseudocode: INPUT file_modification_events | EXTRACT_FEATURES (source_process, target_file, user, parent_process) | PREDICT with trained_anomaly_detection_model | ALERT on outliers
- question: Are processes that should not have network access making outbound connections?
  context: Some system utilities and simple applications (e.g., notepad.exe, calc.exe) have no legitimate reason to initiate network connections. A compromised binary can be used to establish a C2 channel. This question looks for high-fidelity indicators of compromise by alerting when a process from a "no network" blocklist is observed making an outbound connection.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint process and network monitoring
  - Network egress points (firewalls, web proxies)
  - DNS resolution logs
  - Intrusion Detection Systems (IDS)
  range: Last 90 days
  queries:
  - pseudocode: SEARCH network_connection_logs | WHERE source_process in network_blocklist AND destination_ip is external | ALERT
- question: Is a process connecting to a new destination port or transferring an unusually large amount of data?
  context: A compromised binary may use non-standard ports for C2 communication or exfiltrate large volumes of data. This question establishes a baseline of normal network behavior for each process (ports, data volume) and alerts on deviations. This can detect a legitimate but compromised application being used for malicious purposes.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint process and network monitoring
  - Network egress points (firewalls, web proxies)
  - DNS resolution logs
  - Intrusion Detection Systems (IDS)
  range: Last 90 days
  queries:
  - pseudocode: SEARCH network_connection_logs | COMPARE destination_port to historical_baseline_ports_for_process | COMPARE data_volume to historical_baseline_volume_for_process | ALERT if new_port OR data_volume > 99th_percentile
- question: Does time-series analysis of network traffic reveal significant deviations from predicted patterns?
  context: Network traffic often follows predictable daily and weekly cycles. This question involves using a time-series forecasting model to learn these patterns. An alert is triggered when observed traffic volume significantly deviates from the model's forecast, which can detect the steady, low-and-slow C2 traffic or large data exfiltration bursts from a compromised binary.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint process and network monitoring
  - Network egress points (firewalls, web proxies)
  - DNS resolution logs
  - Intrusion Detection Systems (IDS)
  range: Last 90 days
  queries:
  - pseudocode: INPUT time_series_traffic_data (by host, port) | PREDICT expected_traffic_volume with forecasting_model | CALCULATE residual_error (observed - predicted) | ALERT if residual_error is anomalous
- question: Has a trusted software binary executed a suspicious child process or loaded an unsigned module from a user-writable directory?
  context: Adversaries often abuse trusted applications to execute malicious code, bypassing security controls. This question looks for two red flags: known-bad parent-child process relationships (e.g., a document reader spawning a command shell) and the loading of unsigned DLLs from insecure locations like a user's Temp folder, which is a common tactic for DLL hijacking or process injection.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Process execution logs on all endpoints and servers
  - User profile directories (e.g., %APPDATA%, %TEMP%)
  range: Last 90 days
  queries:
  - pseudocode: SEARCH (process_creation_logs WHERE parent_child_pair in known_bad_list) OR (module_load_logs WHERE signature is 'false' AND module_path in user_writable_dirs) | ALERT
- question: Has a statistically rare parent-child process relationship been observed?
  context: While some parent-child process chains are definitively malicious, others are simply uncommon. This question moves beyond static rules by calculating the frequency of all parent-child relationships across the enterprise. It then alerts on newly observed pairs that are statistically rare (e.g., seen less than 0.1% of the time), which can uncover novel or targeted attack techniques.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Process execution logs on all endpoints and servers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH process_creation_logs | LOOKUP prevalence of parent_child_pair in enterprise_baseline | ALERT if prevalence < 0.001
- question: Can graph-based analysis identify anomalous process behaviors based on parent-child relationships?
  context: This question models all process activity as a large graph, where processes are nodes and parent-child relationships are edges. By using machine learning on the graph structure, we can identify processes that behave differently from their peers. This approach can detect a compromised binary that starts interacting with other processes in a novel or unexpected way, even if the individual actions are not inherently malicious.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Process execution logs on all endpoints and servers
  range: Last 90 days
  queries:
  - pseudocode: INPUT process_creation_graph | GENERATE vector_embeddings for each process_node | CLUSTER vectors to find normal_behavior_groups | ALERT if process_vector is an outlier to all clusters