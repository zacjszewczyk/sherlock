name: T1132: Data Encoding
id: c8f1d2e3-a4b5-4c6d-8e9f-0a1b2c3d4e5f
description: This playbook helps investigate if an adversary is attempting to obfuscate command and control (C2) traffic using data encoding. This involves looking for indicators such as network traffic with high Shannon entropy, long or Base64-encoded strings in DNS queries or HTTP headers, anomalous byte frequency distributions on common ports, skewed ratios of sent vs. received data, and network connections initiated by unusual processes.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
investigative_questions:
  - question: Is there any network traffic communicating with known malicious C2 infrastructure?
    context: This question aims to identify direct communication with command and control (C2) servers that have already been identified by threat intelligence. Matching network logs against a list of known malicious IPs or domains is a high-confidence method for detecting an active adversary.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Internet gateway
      - DNS resolvers
      - Proxy servers
      - Threat intelligence platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          C2_INDICATORS = get_threat_intel_feed()
          FOR connection IN network_logs:
            IF connection.destination_ip IN C2_INDICATORS OR connection.destination_domain IN C2_INDICATORS:
              ALERT(high_severity, "Connection to known C2", connection)
  - question: Are there any outbound network connections with unusually high data payload entropy compared to historical norms for their specific port and protocol?
    context: Adversaries often encode or encrypt C2 traffic to evade detection, resulting in data with high randomness (Shannon entropy). By establishing a baseline of normal entropy for each port/protocol combination, we can detect anomalous connections whose entropy is a statistical outlier, suggesting obfuscated C2 activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Internet gateway
      - DNS resolvers
      - Proxy servers
      - Threat intelligence platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each port_protocol_group:
            BASELINE_ENTROPY = calculate_99th_percentile_entropy(last_30_days)
          FOR new_connection IN outbound_connections:
            IF calculate_entropy(new_connection.payload) > BASELINE_ENTROPY[new_connection.port_protocol]:
              ALERT(medium_severity, "Anomalous payload entropy", new_connection)
  - question: Can we identify malicious encoded C2 traffic using a supervised machine learning model?
    context: By training a classification model on known benign and malicious network flows, we can create a system capable of identifying new, previously unseen C2 traffic in real-time. This approach uses multiple features like entropy, byte ratios, and connection duration to build a robust detection mechanism.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Internet gateway
      - DNS resolvers
      - Proxy servers
      - Threat intelligence platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          # Training Phase
          LABELED_DATA = load_benign_and_malicious_flows()
          MODEL = train_classifier(features=['entropy', 'byte_ratio', 'duration', 'port'], data=LABELED_DATA)
          # Deployment Phase
          FOR new_connection IN live_network_traffic:
            IF MODEL.predict(new_connection) == 'malicious':
              ALERT(high_severity, "ML detected potential C2 traffic", new_connection)
  - question: Are there long, Base64-encoded strings present in DNS queries or HTTP headers?
    context: Adversaries may use DNS queries or HTTP headers to exfiltrate data or receive commands, encoding the payload with Base64 to blend in. Searching for unusually long strings that match the Base64 character set can uncover this covert communication channel.
    answer_sources:
      - Zeek dns.log
      - Zeek http.log
      - DNS resolvers
      - Web proxies
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASE64_REGEX = "(^[A-Za-z0-9+/]{50,}[=]{0,2}$)"
          FOR record IN dns_logs OR http_logs:
            IF BASE64_REGEX matches record.query OR record.user_agent OR record.uri OR record.cookie:
              ALERT(medium_severity, "Potential Base64 encoding in DNS/HTTP", record)
  - question: Are there DNS queries or HTTP headers with a character frequency that deviates significantly from the established baseline?
    context: Normal DNS and HTTP traffic have predictable character patterns. Encoded or encrypted data will have a different, often more uniform, character distribution. By comparing the character frequency of new requests to a historical baseline using a statistical test (like Chi-squared), we can spot anomalies indicative of encoding.
    answer_sources:
      - Zeek dns.log
      - Zeek http.log
      - DNS resolvers
      - Web proxies
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          # Baseline Phase
          BASELINE_FREQ = calculate_char_frequency(sample_traffic_last_30_days)
          # Detection Phase
          FOR new_request IN live_traffic:
            request_freq = calculate_char_frequency(new_request.field)
            p_value = chi_squared_test(request_freq, BASELINE_FREQ)
            IF p_value < 0.01:
              ALERT(low_severity, "Statistically significant deviation in char frequency", new_request)
  - question: Can we detect anomalous DNS queries or HTTP header values using an anomaly detection model?
    context: Anomaly detection models like One-Class SVMs or autoencoders can learn the complex patterns of legitimate traffic. Once trained, these models can identify any new traffic that is an outlier to the learned norm, effectively flagging novel or sophisticated attempts at C2 communication without relying on predefined rules.
    answer_sources:
      - Zeek dns.log
      - Zeek http.log
      - DNS resolvers
      - Web proxies
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          # Training Phase
          MODEL = train_autoencoder(large_dataset_of_legit_headers)
          # Detection Phase
          FOR new_request IN live_traffic:
            reconstruction_error = MODEL.evaluate(new_request.header_value)
            IF reconstruction_error > threshold:
              ALERT(medium_severity, "Anomaly detection model flagged outlier", new_request)
  - question: Is there any traffic on cleartext ports that appears to be encoded or encrypted?
    context: Protocols on ports like FTP (21), Telnet (23), and SMTP (25) are expected to be human-readable. The presence of high-entropy data on these ports is a strong indicator that an adversary is tunneling encoded or encrypted C2 traffic over a commonly allowed but uninspected port.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Internet gateway
      - Core network switches
      - Servers hosting critical applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLEARTEXT_PORTS = [21, 23, 25]
          HIGH_ENTROPY_THRESHOLD = 6.5
          FOR connection in network_logs:
            IF connection.port IN CLEARTEXT_PORTS AND calculate_entropy(connection.payload) > HIGH_ENTROPY_THRESHOLD:
              ALERT(high_severity, "High entropy on cleartext port", connection)
  - question: Are there network connections on common ports with payload entropy that is a statistical outlier compared to the historical baseline?
    context: Even on common ports like 53, 80, and 443, C2 traffic can be distinguished by its entropy. By creating a rolling baseline of normal entropy scores and alerting on significant deviations (e.g., above the 99th percentile), we can detect suspicious flows that might otherwise be lost in the noise of regular traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Internet gateway
      - Core network switches
      - Servers hosting critical applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each common_port:
            BASELINE_99_PERCENTILE = calculate_percentile(entropy_scores, 99, last_30_days)
          FOR new_connection in network_logs:
            IF calculate_entropy(new_connection.payload) > BASELINE_99_PERCENTILE[new_connection.port]:
              ALERT(high_severity, "Payload entropy exceeds 99th percentile", new_connection)
  - question: Does a host's average payload entropy show abnormal deviations when modeled over time?
    context: Legitimate services exhibit predictable communication patterns, including daily and weekly seasonality. By modeling the time series of a host's average payload entropy, we can forecast its expected behavior. An observed entropy that falls significantly outside the model's predicted confidence interval indicates an abnormal change in communication that could signal a compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Internet gateway
      - Core network switches
      - Servers hosting critical applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          # Training Phase
          MODEL = train_forecasting_model(host_entropy_timeseries) # e.g., SARIMA
          # Detection Phase
          FOR time_window in live_traffic:
            prediction, confidence_interval = MODEL.forecast()
            observed_entropy = calculate_average_entropy(time_window)
            IF observed_entropy is not in confidence_interval:
              ALERT(medium_severity, "Observed entropy deviates from forecast", time_window)
  - question: Are there DNS queries that violate RFC standards for length?
    context: Adversaries using DNS for C2 may create unusually long query names or response records to carry data. A DNS query name ('qlen') longer than 255 bytes violates RFC standards and is a high-fidelity indicator of non-standard, likely malicious, DNS usage. Similarly, very large TXT record responses can be suspicious.
    answer_sources:
      - Zeek dns.log
      - Zeek http.log
      - Zeek conn.log
      - DNS resolvers
      - Web proxies
      - Endpoints making external connections
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR dns_record in dns_logs:
            IF dns_record.qlen > 255 OR (dns_record.qtype == 'TXT' AND dns_record.response_len > 512):
              ALERT(high_severity, "DNS query violates length standards", dns_record)
  - question: Are there any connections where the client-to-server byte ratio is a statistical outlier?
    context: C2 communication often involves sending small commands and receiving large payloads (or vice-versa for data exfiltration), leading to a skewed byte ratio. By calculating the mean and standard deviation of this ratio for each destination, we can identify new connections that are statistical outliers (e.g., >3 standard deviations from the mean), which may indicate C2 activity.
    answer_sources:
      - Zeek dns.log
      - Zeek http.log
      - Zeek conn.log
      - DNS resolvers
      - Web proxies
      - Endpoints making external connections
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each destination_ip:
            mean, std_dev = calculate_byte_ratio_stats(last_30_days)
          FOR new_connection in network_logs:
            ratio = new_connection.orig_bytes / new_connection.resp_bytes
            IF ratio > (mean[new_connection.dest_ip] + 3 * std_dev[new_connection.dest_ip]):
              ALERT(medium_severity, "Anomalous client-to-server byte ratio", new_connection)
  - question: Can we identify clusters of anomalous network activity characterized by unusual byte ratios or non-standard ports?
    context: Unsupervised machine learning techniques like clustering can group network connections based on shared features. This can automatically surface small, dense clusters of activity that deviate from the norm. Analyzing these clusters for characteristics like high byte ratios and non-standard service ports can reveal hidden C2 channels.
    answer_sources:
      - Zeek dns.log
      - Zeek http.log
      - Zeek conn.log
      - DNS resolvers
      - Web proxies
      - Endpoints making external connections
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FEATURES = ['orig_bytes', 'resp_bytes', 'duration', 'service']
          CLUSTERS = dbscan(network_logs, features=FEATURES)
          FOR cluster in CLUSTERS:
            IF cluster is small and dense and has high_avg_byte_ratio:
              ALERT(low_severity, "Anomalous network cluster detected", cluster)
  - question: Is a process that should not normally access the network initiating an outbound connection?
    context: Standard utilities like 'notepad.exe' or 'calc.exe' have no legitimate reason to make network connections. Observing such a process initiating an outbound connection is a very strong indicator of process injection or other malicious activity, where an adversary is using a trusted process to conduct C2.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User workstations
      - Domain controllers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROCESS_WATCHLIST = ['notepad.exe', 'calc.exe']
          FOR event in WindowsEventID_5156:
            IF event.ApplicationName in PROCESS_WATCHLIST AND event.DestinationAddress is external:
              ALERT(high_severity, "Blacklisted process initiated network connection", event)
  - question: Is a process connecting to a destination port that is rare for that specific process?
    context: Legitimate processes typically connect to a predictable set of ports. By profiling the normal network behavior for each process, we can detect when a process connects to a port it has rarely or never used before. This deviation from baseline can indicate that the process has been compromised and is being used for C2 on a non-standard port.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User workstations
      - Domain controllers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_path:
            PORT_RARITY_BASELINE = calculate_port_usage_percentiles(last_90_days)
          FOR event in WindowsEventID_5156:
            IF PORT_RARITY_BASELINE[event.ApplicationPath][event.DestinationPort] < 1st_percentile:
              ALERT(medium_severity, "Process connected to a rare port", event)
  - question: Is a process from an anomalous parent-child chain initiating an external network connection?
    context: Adversaries often use a chain of commands to launch their tools, for example, Microsoft Word spawning PowerShell. By building a graph of process parent-child relationships and identifying rare or anomalous chains, we can add critical context. When a process from such a suspicious chain then makes an external network connection, the event should be treated as a high-priority incident.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - User workstations
      - Domain controllers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROCESS_GRAPH = build_process_graph(WindowsEventID_4688)
          ANOMALOUS_CHAINS = find_rare_parent_child_pairs(PROCESS_GRAPH)
          FOR event in WindowsEventID_5156:
            IF event.Process is in ANOMALOUS_CHAINS and event.DestinationAddress is external:
              ALERT(high_severity, "Anomalous process chain initiated network connection", event)