name: T1553.006: Code Signing Policy Modification
id: 5b9c1d8e-7e3f-4f7b-8d1a-9c6b3e2f4a5d
description: |
  This playbook describes methods to detect adversaries attempting to evade defenses by modifying code signing policies. This includes identifying the execution of known malicious tools (e.g., KDU, DSEFix), spotting specific command-line arguments (like `bcdedit.exe /set testsigning on`), monitoring for direct modifications to critical registry keys that control code integrity (`HKLM\SYSTEM\CurrentControlSet\Control\CI\Config`), correlating sequences of events such as a policy change followed by a reboot and an unsigned driver load, and detecting 'Bring Your Own Vulnerable Driver' (BYOVD) attacks where a legitimate but vulnerable driver is used to load a malicious one.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are known code signing modification tools being executed in the environment?
    context: |
      This question aims to detect the presence of specific malicious tools (like KDU or DSEFix) that are purpose-built for disabling or modifying code signing policies. A match against a threat intelligence feed provides a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Developer Workstations, System Administrator Workstations, Critical Servers, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_logs OR file_analysis_logs
          LOOKUP file_hash against threat_intel_feed
          WHERE match_found
  - question: Are rare processes modifying code signing policies?
    context: |
      This question helps identify potentially malicious activity by focusing on file rarity. Legitimate administrative tools are typically common across an enterprise, whereas malware or custom attack tools are often rare. Identifying a rare process that also performs sensitive actions like modifying code signing policies is a strong signal for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Developer Workstations, System Administrator Workstations, Critical Servers, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_execution_logs 
          WHERE action_modifies_code_signing_policy
          CALCULATE prevalence(file_hash)
          WHERE prevalence < 1st_percentile
  - question: Can we predictively identify malicious process executions related to system configuration changes?
    context: |
      This question focuses on proactively identifying malicious behavior using machine learning. By training a model on features like parent-child process relationships, file paths, and command-line arguments, it's possible to score and alert on new, previously unseen processes that exhibit characteristics of malicious activity targeting system configurations, even without a known signature.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Developer Workstations, System Administrator Workstations, Critical Servers, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: |
          SCORE process_execution_events using ML_model
          WHERE classification == 'malicious' 
          AND confidence > high_threshold 
          AND event_is_system_config_change
  - question: Are commands being executed to explicitly disable or modify code signing policies?
    context: |
      This question targets the direct use of known commands (`bcdedit.exe`, `csrutil`) with specific arguments (`testsigning on`, `disable`) that weaken security controls. Detecting these command-line strings is a straightforward and effective way to identify blatant attempts to subvert code signing enforcement.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Developer Workstations, Endpoint fleet, macOS systems
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_logs
          REGEX command_line for /(?i)(bcdedit|csrutil).*(testsigning|nointegritychecks|disable)/
  - question: Is a user executing an unusually rare bcdedit.exe command?
    context: |
      This question uses anomaly detection based on user behavior. While an administrator might use `bcdedit.exe` for legitimate purposes, their usage patterns are often predictable. An execution of a `bcdedit.exe` command that is rare for a specific user and rare across the entire organization strongly suggests a deviation from normal activity and could indicate a compromised account or insider threat.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Developer Workstations, Endpoint fleet, macOS systems
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH bcdedit_executions
          CALCULATE rarity_score(command_line) for user and global
          WHERE rarity_score > 95th_percentile
  - question: Are there outlier bcdedit.exe command executions that do not fit known benign patterns?
    context: |
      This question aims to find novel or obfuscated malicious commands by using unsupervised machine learning. By clustering all `bcdedit.exe` command-line arguments, common administrative commands will form large clusters. Outliers, or commands that form clusters of size one, represent highly unusual executions that may be attempts to evade simple signature-based detection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Developer Workstations, Endpoint fleet, macOS systems
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH bcdedit_executions
          VECTORIZE command_line
          CLUSTER vectors using DBSCAN
          WHERE cluster_size == 1
  - question: Are unauthorized changes being made to registry keys that control code signing policies?
    context: |
      This question focuses on directly monitoring the state of critical system configurations. The registry keys for code integrity (`HKLM\SYSTEM\CurrentControlSet\Control\CI\Config`, `HKLM\SYSTEM\CurrentControlSet\Control\CI\Policy`) should not be modified during normal operation. Alerting on any change not associated with a planned and approved system update is a high-fidelity way to detect tampering.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - All Windows Endpoints and Servers, Active Directory Certificate Services Servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH registry_modification_events
          WHERE registry_key IN (critical_ci_keys)
          AND process_not_in_allowlist
  - question: Are processes from suspicious file path locations modifying code signing registry keys?
    context: |
      This question helps identify malware that tries to hide by executing from randomized or temporary file paths. Legitimate administrative tools typically run from predictable locations (e.g., `C:\Windows\System32`). A process modifying a critical registry key from a path with high entropy (a characteristic of random naming) is highly suspicious.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - All Windows Endpoints and Servers, Active Directory Certificate Services Servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH registry_modification_events 
          WHERE registry_key IN (critical_ci_keys)
          CALCULATE entropy(process_path)
          WHERE entropy > (baseline_entropy + 3*std_dev)
  - question: Is there an anomalous spike in the number of code signing registry key modifications?
    context: |
      This question uses time-series analysis to detect unusual bursts of activity. While some minor, legitimate modifications might occur, a sudden increase in the volume of these events deviates from the normal baseline and could indicate a widespread, automated attack across multiple systems.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - All Windows Endpoints and Servers, Active Directory Certificate Services Servers
    range: last 90 days
    queries:
      - pseudocode: |
          COUNT registry_modification_events over time
          FORECAST expected_count using ARIMA
          WHERE actual_count > upper_confidence_bound
  - question: Is there a sequence of events indicating a policy was changed specifically to allow an unsigned driver to load after a reboot?
    context: |
      This question looks for a specific chain of attacker behavior. Modifying code signing policies often requires a reboot to take effect. By correlating a policy change, a reboot, and the subsequent loading of an unsigned driver on the same host within a short time window, we can confidently identify a deliberate attempt to bypass driver signature enforcement.
    answer_sources:
      - Windows Event ID 5038
      - Sysmon Event ID 6
      - Windows Event ID 6006
      - Sysmon Event ID 1
      - Zeek conn.log
      - All Windows Endpoints, especially developer and administrator workstations, Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - pseudocode: |
          CORRELATE on host:
          (event=policy_mod) gefolgt von
          (event=reboot) gefolgt von
          (event=driver_load AND driver_is_unsigned)
          WITHIN 30_minutes
  - question: Are certain hosts loading an anomalously high number of unsigned drivers?
    context: |
      This question aims to find outlier systems that may have had their code signing policies persistently disabled. A host that consistently loads a high volume of unsigned drivers compared to its peers across the enterprise is a strong candidate for compromise or misconfiguration that requires investigation.
    answer_sources:
      - Windows Event ID 5038
      - Sysmon Event ID 6
      - Windows Event ID 6006
      - Sysmon Event ID 1
      - Zeek conn.log
      - All Windows Endpoints, especially developer and administrator workstations, Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - pseudocode: |
          CALCULATE daily_rate(unsigned_driver_loads) per host
          WHERE daily_rate > 99th_percentile_of_all_hosts
  - question: Are observed sequences of system events on a host indicative of malicious activity?
    context: |
      This question uses a sophisticated probabilistic model to detect anomalous chains of events. By learning what normal sequences of process creations, registry modifications, and driver loads look like, a Hidden Markov Model can identify new sequences that have a very low probability of being benign. This is especially powerful for detecting the specific 'policy mod -> reboot -> unsigned driver load' pattern within a sea of other system noise.
    answer_sources:
      - Windows Event ID 5038
      - Sysmon Event ID 6
      - Windows Event ID 6006
      - Sysmon Event ID 1
      - Zeek conn.log
      - All Windows Endpoints, especially developer and administrator workstations, Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL benign_event_sequences with HMM
          CALCULATE probability(new_event_sequence)
          WHERE probability < low_threshold
          AND sequence_contains(policy_mod, reboot, unsigned_driver_load)
  - question: Is a known vulnerable driver being used to load a second, unsigned driver?
    context: |
      This question targets the 'Bring Your Own Vulnerable Driver' (BYOVD) technique. Attackers exploit vulnerabilities in legitimate, signed drivers to gain kernel-level access. This query specifically looks for the pattern of a known vulnerable driver being loaded, followed immediately by the loading of a malicious, unsigned driver on the same host.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 6
      - Sysmon Event ID 7
      - Zeek x509.log
      - High-Value Target Workstations, Domain Controllers, Servers running Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - pseudocode: |
          CORRELATE on host:
          (event=driver_load AND driver_hash IN vulnerable_list) gefolgt von
          (event=driver_load AND driver_is_unsigned)
          WITHIN 5_minutes
  - question: Following the load of a vulnerable driver, is another driver loaded that is signed by a rare or unseen certificate issuer?
    context: |
      This question adds a layer of anomaly detection to the BYOVD scenario. After a vulnerable driver is loaded, the attacker's malicious driver might be self-signed or signed by an unusual authority. By identifying driver loads signed by an entity that is extremely rare within the enterprise's baseline, we can flag suspicious follow-on activity even if the malicious driver itself is not unsigned.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 6
      - Sysmon Event ID 7
      - Zeek x509.log
      - High-Value Target Workstations, Domain Controllers, Servers running Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - pseudocode: |
          FIND vulnerable_driver_load
          IF followed_by_another_driver_load
          THEN CALCULATE rarity(new_driver_signer)
          WHERE signer_rarity < 1st_percentile
  - question: Can we detect the BYOVD attack pattern by analyzing causality graphs of system events?
    context: |
      This question applies graph analysis to detect complex attack chains. By representing system activities as a graph of nodes (processes, files) and edges (actions), we can search for the specific subgraph pattern that defines a BYOVD attack: a process loading a known vulnerable driver, which in turn leads to the loading of a malicious (e.g., unsigned) driver. This approach can uncover the attack sequence even if it's distributed across multiple processes or time.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 6
      - Sysmon Event ID 7
      - Zeek x509.log
      - High-Value Target Workstations, Domain Controllers, Servers running Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH graph_db for pattern:
          (Process)-[:LOADS]->(Driver {hash:vulnerable})-[*]->(Driver {signed:false})