name: T1543.005: Container Service
id: a1b9c8d7-e6f5-4a3b-2c1d-0e9f8a7b6c5d
description: This playbook helps investigate whether an adversary is establishing persistence or escalating privileges by creating or modifying container services. This involves detecting the use of known malicious container images, identifying containers configured to restart automatically (e.g., using `--restart=always` or Kubernetes DaemonSets), monitoring for container escapes that lead to anomalous host processes, and identifying network traffic from containers to command-and-control servers or sensitive internal services.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known malicious container images being run in the environment by correlating execution events with threat intelligence?
    context: Adversaries often use publicly available, pre-compromised container images to deploy malware or establish persistence. This question checks if any running containers match a list of known-malicious images by name, tag, or hash, providing a high-fidelity signal of a potential breach.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Container hosts
      - Kubernetes control plane nodes
      - Container image registries
      - Network sensors monitoring traffic to external registries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs OR network_http_logs | PARSE container_image, image_tag, image_hash | LOOKUP threat_intel_feed ON image_hash, image_tag, container_image | FILTER match_found
  - question: Are there any container images with unusually low prevalence in the environment?
    context: Malicious or bespoke adversary tools often appear as container images that run on very few hosts compared to standard, widely-used images. Identifying these rare images, especially those from untrusted external registries, can help uncover targeted attacks or custom malware.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Container hosts
      - Kubernetes control plane nodes
      - Container image registries
      - Network sensors monitoring traffic to external registries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT unique hosts per container_image | CALCULATE prevalence distribution | FILTER prevalence in bottom 5th percentile
  - question: Can we predict if a newly observed container image is malicious based on its metadata?
    context: This question involves using a machine learning model to proactively identify potentially malicious container images. By analyzing features like image name length, tag entropy, and source registry reputation, the model can flag suspicious new images for review before they are widely deployed.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Container hosts
      - Kubernetes control plane nodes
      - Container image registries
      - Network sensors monitoring traffic to external registries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: EXTRACT features (name_length, tag_entropy, registry_rep) from new container_image events | SCORE with classification_model | ALERT on high_risk_score
  - question: Are containers being configured for automatic restart using command-line flags or system services?
    context: Adversaries use persistence mechanisms to ensure their malicious containers survive reboots or failures. This question looks for explicit persistence settings, such as `--restart=always` in a `docker run` command or a Windows service configured to launch a container, which are common TTPs for maintaining access.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Container hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs (command_line CONTAINS '--restart=always' OR command_line CONTAINS '--restart=on-failure') OR service_installation_logs (service_binary CONTAINS 'docker run' OR service_binary CONTAINS 'podman run')
  - question: Is any user account demonstrating an anomalous increase in the use of container restart flags?
    context: A sudden spike in the use of persistence-related container flags by a specific user could indicate that their account is compromised and being used to establish a foothold. This behavioral analysis compares current activity against a historical baseline to detect such anomalies.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Container hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT usage of restart_flags per user per day | CALCULATE moving average and standard deviation over 30 days | ALERT if daily_count > (average + 3 * std_dev)
  - question: Are there any unusual or rare combinations of container command-line arguments being used?
    context: Adversaries may use unique combinations of command-line arguments that deviate from normal administrative or developer behavior. Using clustering algorithms to identify these outlier commands can help uncover novel or obfuscated malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Container hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: VECTORIZE container command_line arguments | CLUSTER vectors using DBSCAN | INVESTIGATE commands classified as noise/outliers
  - question: Has a Kubernetes DaemonSet been created by an unauthorized user or from a suspicious source?
    context: A DaemonSet ensures a pod runs on all (or some) nodes in a cluster, making it a powerful persistence mechanism for an adversary. This question checks for the creation of DaemonSets by non-administrative users or unapproved tools, which is a strong indicator of malicious intent.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Kubernetes API Server
      - Network traffic monitoring points between user segments and the Kubernetes control plane
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH k8s_api_logs for HTTP POST to '/apis/apps/v1/.../daemonsets' | DECODE request body | ALERT if source_ip OR user_agent NOT in allowlist
  - question: Is any user creating an unusually high number of Kubernetes DaemonSets?
    context: While an administrator might occasionally create a DaemonSet, a sudden burst of such creations by any user is highly anomalous. This question establishes a baseline for each user's object creation rate and flags excessive DaemonSet creation, which could signal a compromised account setting up widespread persistence.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Kubernetes API Server
      - Network traffic monitoring points between user segments and the Kubernetes control plane
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT DaemonSet creations per user per hour | ESTABLISH baseline creation rate | ALERT if hourly_count > 99th percentile of user's history OR if non-admin creates any
  - question: Are there any Kubernetes object submissions with anomalous configurations?
    context: Adversaries may create Kubernetes objects (like Pods or DaemonSets) with unusual or malicious configurations, such as mounting sensitive host paths or using insecure settings. This question uses an anomaly detection model to score the manifests of new objects and flag those that deviate from known-good configurations.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Kubernetes API Server
      - Network traffic monitoring points between user segments and the Kubernetes control plane
    range: last 90 days
    queries:
      - technology: pseudocode
        query: VECTORIZE k8s manifest YAML/JSON content | SCORE new manifests with Isolation Forest model | ALERT on manifests identified as outliers
  - question: Is a container making network connections to known command-and-control (C2) servers?
    context: A container established for persistence will often communicate with an external C2 server. This question cross-references network connection logs from container hosts against threat intelligence feeds of known malicious IP addresses and domains to detect C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container hosts
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connection_logs from container_host_ips | LOOKUP destination_ip OR destination_domain in C2_threat_feed | ALERT on match
  - question: Is a container exhibiting anomalous network behavior, such as using rare TLS fingerprints or destination ports?
    context: Adversary C2 tools often use custom TLS implementations or non-standard ports that differ from legitimate applications. By baselining normal TLS (JA3/JA3S) fingerprints and port usage, this question can identify outlier connections that may indicate malicious C2 communication.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container hosts
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE JA3/JA3S hash prevalence and port entropy per host | ALERT if new connection has low-prevalence JA3/JA3S hash OR if port entropy deviates significantly
  - question: Does a container's outbound traffic volume show patterns indicative of C2 beaconing?
    context: C2 channels often involve periodic, "low-and-slow" beaconing that can be hidden in normal network traffic. This question uses a time-series anomaly detection model (like an LSTM autoencoder) to learn the normal rhythm of a host's outbound traffic and flag periods where the pattern deviates, suggesting beaconing activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container hosts
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL time series of outbound_bytes per host with LSTM autoencoder | CALCULATE reconstruction error for real-time traffic | ALERT on high reconstruction error
  - question: Are there command-line arguments or API payloads that match signatures of known container escape vulnerabilities?
    context: Adversaries exploit known vulnerabilities (CVEs) in container runtimes to escape the container and gain access to the underlying host. This question applies regular expressions and signatures from public exploit code to command-line and API traffic to detect attempts to trigger these known CVEs.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Container hosts
      - Kubernetes API Server
      - Network sensors monitoring control plane traffic
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs OR http_logs | APPLY regex ruleset for known container CVEs to command_line or http_body | ALERT on match
  - question: Are there container commands with unusually long or high-entropy arguments?
    context: Long, complex, or high-entropy command-line arguments are often indicative of injected shellcode or obfuscated payloads used in exploits. This question baselines the normal length and character entropy of container commands and alerts on significant deviations, which may point to an exploit attempt.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Container hosts
      - Kubernetes API Server
      - Network sensors monitoring control plane traffic
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE length and entropy of container command arguments | ALERT if new command's argument length or entropy > 99.9th percentile
  - question: Can we detect potential zero-day or unknown container exploits by identifying anomalous command-line patterns?
    context: This question uses a machine learning model (One-Class SVM) trained on normal container command-line activity. By identifying commands that the model flags as anomalous, security teams can potentially uncover novel or zero-day exploit techniques that do not match known signatures.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Container hosts
      - Kubernetes API Server
      - Network sensors monitoring control plane traffic
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN One-Class SVM on feature vectors of normal container commands | SCORE new commands in real-time | ALERT on commands classified as anomalies
  - question: Is a container being launched with high privileges or with sensitive host directories mounted?
    context: Adversaries frequently attempt to run containers with elevated privileges (e.g., `--privileged`) or by mounting critical host directories (e.g., the root filesystem or Docker socket). This allows them to escape the container or manipulate the host system. This question specifically looks for these dangerous and commonly abused flags.
    answer_sources:
      - Windows Event ID 4688
      - All container hosts (servers and workstations with Docker/Podman installed)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN ('docker.exe', 'podman.exe') AND command_line CONTAINS ('--privileged' OR '--security-opt seccomp=unconfined' OR '-v /:/host' OR '-v /var/run/docker.sock')
  - question: Is a user running privileged containers when they are not authorized to, or more frequently than usual?
    context: Organizations should strictly control who can run privileged containers. This question checks container launch events against an allowlist of authorized users. It also tracks the behavior of authorized users to detect if a compromised account is suddenly abusing its privileges.
    answer_sources:
      - Windows Event ID 4688
      - All container hosts (servers and workstations with Docker/Podman installed)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each privileged container launch | IF user NOT in allowlist THEN ALERT | ELSE (if user in allowlist) BASELINE launch frequency AND ALERT if current rate > 95th percentile
  - question: Can we classify a container launch as a likely privilege escalation attempt based on its configuration?
    context: By combining multiple factors—such as the user's role, the presence of privileged flags, host mounts, and the image source—a decision tree model can be trained to classify container launches. This provides a clear, explainable model for identifying and triaging high-risk container activity.
    answer_sources:
      - Windows Event ID 4688
      - All container hosts (servers and workstations with Docker/Podman installed)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN decision tree with features (user_role, is_privileged, is_host_mounted, image_source) | SCORE new container launches | ALERT on launches classified as escalation_attempt
  - question: Has a container runtime process spawned a suspicious child process on the host?
    context: A key indicator of a successful container escape is when a container daemon (like `dockerd.exe`) or a shim process spawns an unexpected child process on the host, such as an interactive shell (`cmd.exe`, `powershell.exe`) or a reconnaissance tool. This question looks for these anomalous parent-child process relationships.
    answer_sources:
      - Windows Event ID 4688
      - Container hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD process trees from process_creation_logs | ALERT if parent_process IN ('dockerd.exe', 'containerd.exe') and child_process IN ('cmd.exe', 'powershell.exe', 'net.exe')
  - question: Is a container runtime process spawning a child process that is rare or has never been seen before?
    context: Beyond a static list of suspicious child processes, this question identifies a container escape by detecting statistical rarity. It establishes a baseline of normal child processes for container daemons and alerts when a new parent-child relationship appears that is historically infrequent, pointing to a deviation from normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Container hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For each parent_process, create frequency distribution of child_processes over 30 days | ALERT if a new parent-child relationship has a frequency below a rarity threshold
  - question: Can we detect container escapes by identifying anomalous process execution graphs?
    context: This advanced technique models all process parent-child relationships on a host as a graph. A graph-based anomaly detection algorithm can learn the normal structure of this graph and identify new, unusual subgraphs, such as a container process spawning a chain of unexpected host processes, which would indicate an escape and subsequent activity.
    answer_sources:
      - Windows Event ID 4688
      - Container hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL process history as a directed graph | APPLY graph-based anomaly detection (e.g., GCN autoencoder) | FLAG new subgraphs with high anomaly scores
  - question: Is a container initiating network traffic to critical internal services that it should not be accessing?
    context: After escalating privileges or escaping, an adversary may pivot to sensitive internal services like domain controllers or databases. This question checks for network connections from container hosts to high-value internal subnets that violate the principle of least privilege and are not covered by an explicit firewall rule.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Network sensors monitoring east-west traffic
      - Container hosts
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connection_logs from container_host_ips | IF destination_ip is in critical_subnet AND no firewall_rule_allows THEN ALERT
  - question: Is a container communicating with an internal network subnet for the first time?
    context: A compromised container pivoting to move laterally will often connect to internal subnets it has never interacted with before. This behavioral analytic builds a profile of normal "east-west" communication for each container host and alerts when a host initiates a connection to an entirely new subnet, indicating a potential pivot.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Network sensors monitoring east-west traffic
      - Container hosts
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For each container_host, build a set of historical destination_subnets | For each new connection, calculate Jaccard distance to historical set | ALERT if distance is 1 (new subnet)
  - question: Is a container's network activity bridging previously separate network segments or communities?
    context: Normal network traffic often forms distinct clusters (e.g., web servers talk to app servers, app servers talk to databases). A connection from a compromised container that links two previously disconnected clusters can be a strong indicator of lateral movement. This question uses graph analysis to detect such "bridge" connections.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Network sensors monitoring east-west traffic
      - Container hosts
      - DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD network graph from internal traffic | APPLY community detection algorithm (e.g., Louvain) | ALERT on connections from container hosts that bridge two separate communities