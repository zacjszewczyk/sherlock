name: T1543.005: Container Service
id: 9a8b7c6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d
description: |
  This playbook helps investigate whether an adversary is using container services for persistence (TA0003) or privilege escalation (TA0004). For persistence, it focuses on detecting the use of known malicious container images, the configuration of containers to automatically restart (e.g., `--restart=always`), the creation of Kubernetes DaemonSets to ensure pods run on all nodes, and suspicious network traffic from persistent containers indicative of C2 communication. For privilege escalation, it looks for signs of container escapes using known CVEs, the creation of overly-privileged containers (e.g., `--privileged`, mounting sensitive host directories like the Docker socket), anomalous child processes spawned by container runtimes, and network pivoting from a container to sensitive internal services.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any running containers using images known to be malicious based on threat intelligence feeds?
    context: |
      Adversaries may use pre-built malicious images from public registries to deploy malware or backdoors. This question aims to directly detect the use of such images by correlating observed container image names, tags, or hashes against a list of known malicious indicators. A match provides a high-confidence signal of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Container hosts
      - Kubernetes control plane nodes
      - Container image registries
      - Network sensors monitoring traffic to external registries
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH (EventID 4688 OR Zeek http.log)
          | PARSE container_image_details FROM command_line OR url
          | JOIN container_image_details WITH threat_intel_feed
          | WHERE match_found
  - question: Are there any container images running on a very small number of hosts, especially from untrusted registries?
    context: |
      Legitimate container images are often widely deployed across an environment. Malicious or bespoke adversary tools may only appear on one or a few compromised hosts. This question identifies these statistical outliers, which are suspicious and warrant further investigation, particularly if they originate from a non-standard or public registry.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Container hosts
      - Kubernetes control plane nodes
      - Container image registries
      - Network sensors monitoring traffic to external registries
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH container_run_events
          | STATS unique_host_count BY container_image
          | FILTER unique_host_count < threshold (e.g., 5th percentile)
  - question: Can we predict if a newly observed container image is malicious based on its metadata?
    context: |
      This question applies a machine learning approach to proactively identify potentially malicious images that are not yet on threat intelligence feeds. By analyzing features like image name length, tag entropy, and source registry reputation, a model can score new images for risk, flagging those that share characteristics with known malicious images.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Container hosts
      - Kubernetes control plane nodes
      - Container image registries
      - Network sensors monitoring traffic to external registries
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          ON new_container_image_event
          | EXTRACT features (name_length, tag_entropy, registry_rep)
          | PREDICT is_malicious WITH classification_model
          | WHERE prediction_score > threshold
  - question: Are any containers being configured to automatically restart using flags like `--restart=always` or being installed as a system service?
    context: |
      Adversaries use container restart policies to ensure their malicious container persists across reboots or crashes. This question looks for the explicit use of persistence flags in container run commands or the registration of a container as a system service, both of which are common and simple persistence mechanisms.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Container hosts
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH (EventID 4688 OR EventID 4697)
          | FILTER command_line CONTAINS ("--restart=always" OR "--restart=on-failure") OR service_file_name CONTAINS ("docker run" OR "podman run")
  - question: Is any user suddenly using container restart flags more frequently than their historical baseline?
    context: |
      While restart flags can be used for legitimate purposes, a sudden increase in their use by a specific user can indicate a change in behavior, such as an adversary establishing persistence for multiple malicious containers. This question aims to detect this anomalous activity by comparing current usage against a user's normal baseline.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Container hosts
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each_user
          | CALCULATE daily_restart_flag_count
          | COMPARE with historical_avg_and_stddev
          | ALERT if daily_count > (avg + 3*stddev)
  - question: Are there any unusual or rare combinations of container command-line arguments being used?
    context: |
      Adversaries may use a unique combination of flags and arguments when launching a malicious container that differs from standard, legitimate command patterns. This question uses clustering to identify these outlier command invocations, which may represent malicious activity that would be missed by simple string matching.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Container hosts
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH container_run_events
          | VECTORIZE command_line_arguments
          | APPLY clustering_algorithm (e.g., DBSCAN)
          | INVESTIGATE commands classified as noise/outliers
  - question: Has a Kubernetes DaemonSet been created by an unauthorized user or tool?
    context: |
      A DaemonSet ensures a copy of a Pod runs on all (or some) nodes in a cluster, making it a powerful persistence mechanism for an adversary. This question focuses on detecting the creation of DaemonSets, especially when initiated from an IP address or user agent not associated with legitimate administrative or CI/CD activity.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Kubernetes API Server
      - Network traffic monitoring points between user segments and the Kubernetes control plane
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH Zeek http.log
          | FILTER http_method=="POST" AND uri_path MATCHES "/daemonsets"
          | DECODE http_body
          | ALERT if source_ip OR user_agent NOT IN allowlist
  - question: Is any user creating Kubernetes DaemonSets at an anomalously high rate?
    context: |
      The creation of a DaemonSet is typically a deliberate and relatively infrequent administrative action. A sudden spike in DaemonSet creations by a single user could indicate malicious activity, such as an automated script deploying a persistence mechanism across the cluster. This question detects such statistical anomalies.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Kubernetes API Server
      - Network traffic monitoring points between user segments and the Kubernetes control plane
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each_user
          | COUNT DaemonSet_creations per_hour
          | COMPARE with historical_creation_rate_percentile
          | ALERT if count > 99th_percentile
  - question: Are any submitted Kubernetes object manifests (e.g., for Pods or DaemonSets) structurally anomalous compared to known-good configurations?
    context: |
      Adversaries may craft Kubernetes manifests with unusual or dangerous configurations to achieve persistence, such as mounting sensitive host paths or using insecure security contexts. This question uses an anomaly detection model to score the manifest itself, flagging configurations that deviate from established safe patterns, even if they don't trigger specific rules.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Kubernetes API Server
      - Network traffic monitoring points between user segments and the Kubernetes control plane
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          ON new_k8s_object_submission
          | VECTORIZE manifest_content
          | PREDICT anomaly_score WITH IsolationForest_model
          | ALERT if score is high
  - question: Is a persistent container communicating with known malicious command-and-control (C2) servers?
    context: |
      Once persistence is established, a malicious container needs to communicate with the adversary. This question seeks to detect this C2 traffic by correlating outbound network connections and DNS queries from container hosts with threat intelligence feeds of known malicious IPs and domains.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container hosts
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH (Zeek conn.log OR Zeek dns.log)
          | FILTER source_ip IN container_host_list
          | JOIN destination_ip_or_domain WITH threat_intel_feed
          | WHERE match_found
  - question: Are containers making outbound TLS connections using rare or unusual client fingerprints (JA3/JA3S)?
    context: |
      C2 frameworks often use custom TLS libraries, resulting in unique JA3/JA3S fingerprints that differ from standard applications. This question identifies anomalous network behavior by flagging connections that use a globally rare TLS fingerprint or hosts that suddenly start using a wide variety of ports, which can indicate C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container hosts
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH Zeek ssl.log
          | STATS global_prevalence BY ja3_hash, ja3s_hash
          | ALERT if connection_uses_hash_with prevalence < 0.1%
  - question: Does the outbound network traffic volume from a container host exhibit anomalous patterns, such as periodic 'heartbeat' beacons?
    context: |
      C2 communication often follows a regular, automated pattern (e.g., a beacon every 60 seconds) that is different from normal, user-driven traffic. This question uses a time-series model to learn the normal "rhythm" of a host's network traffic and alerts when it detects patterns that deviate significantly, such as the low-and-slow traffic characteristic of C2.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container hosts
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each_host
          | MODEL time_series of outbound_bytes with LSTM_autoencoder
          | ALERT if reconstruction_error is high
  - question: Are there any commands or API calls that match signatures of known container escape vulnerabilities?
    context: |
      Adversaries exploit known vulnerabilities (CVEs) in container runtimes to escape the container and gain access to the underlying host. This question uses regular expressions derived from public exploit code to scan command lines and API calls for patterns indicative of an attempt to exploit a known container-related CVE.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Container hosts
      - Kubernetes API Server
      - Network sensors monitoring control plane traffic
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH (EventID 4688 OR Zeek http.log)
          | FILTER command_line OR http_body MATCHES regex_ruleset_for_CVEs
  - question: Are container commands being executed with unusually long or high-entropy arguments?
    context: |
      Payloads used in exploits, such as shellcode or obfuscated commands, often have higher character entropy and are longer than typical command-line arguments. This question establishes a baseline for normal argument length and entropy and flags significant outliers, which could indicate an exploit attempt.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Container hosts
      - Kubernetes API Server
      - Network sensors monitoring control plane traffic
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH container_run_events
          | CALCULATE length, entropy of command_line_args
          | ALERT if length OR entropy > 99.9th_percentile_baseline
  - question: Can we detect novel or zero-day container exploit attempts by identifying anomalous command-line structures?
    context: |
      To detect unknown exploits, this question uses a machine learning model (One-Class SVM) trained only on normal, legitimate container commands. The model learns the boundary of normal behavior and flags any command that falls outside this boundary as an anomaly, potentially representing a zero-day exploit pattern.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Container hosts
      - Kubernetes API Server
      - Network sensors monitoring control plane traffic
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          ON new_container_command
          | VECTORIZE command_features
          | SCORE with one_class_svm_model
          | ALERT if command is identified as anomaly
  - question: Is a container being launched with high-privilege flags or sensitive host directory mounts?
    context: |
      Adversaries can escalate privileges by running a container with flags like `--privileged` or by mounting sensitive host directories such as the root filesystem (`/`) or the Docker socket. This gives the process inside the container root-level access to the host. This question directly detects these dangerous configurations.
    answer_sources:
      - Windows Event ID 4688
      - All container hosts (servers and workstations with Docker/Podman installed)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH EventID 4688
          | FILTER process_name IN ("docker.exe", "podman.exe") AND command_line CONTAINS ("--privileged" OR "-v /:/host" OR "-v /var/run/docker.sock")
  - question: Is an unauthorized user attempting to run a privileged container, or is an authorized user doing so more frequently than usual?
    context: |
      Running privileged containers should be a rare, well-documented action performed only by specific authorized accounts. This question enforces this policy by alerting on any attempt by a non-allowlisted user, and also detects anomalous behavior from authorized users by flagging unusually high rates of privileged execution.
    answer_sources:
      - Windows Event ID 4688
      - All container hosts (servers and workstations with Docker/Podman installed)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          ON privileged_container_launch
          | IF user NOT IN allowlist THEN ALERT
          | ELSE CALCULATE user_launch_rate
          | IF rate > 95th_percentile_baseline THEN ALERT
  - question: Can we classify the risk of a container launch being a privilege escalation attempt based on its configuration and context?
    context: |
      This question uses a decision tree model to provide a clear, explainable risk assessment for each container launch. By considering factors like user role, privilege flags, mounted volumes, and image source, the model can automatically flag high-risk launches that combine multiple suspicious attributes, aiding in rapid triage.
    answer_sources:
      - Windows Event ID 4688
      - All container hosts (servers and workstations with Docker/Podman installed)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          ON container_launch
          | EXTRACT features (user_role, flags, mounts, image_source)
          | PREDICT is_privesc_attempt WITH decision_tree_model
          | ALERT if prediction is true
  - question: Has a container runtime process (e.g., dockerd, containerd) spawned a suspicious child process like an interactive shell on the host?
    context: |
      A successful container escape often results in the container runtime process being used to spawn a shell (`cmd.exe`, `powershell.exe`) or other tools on the host system. This question detects this post-escape activity by monitoring for unexpected or disallowed parent-child process relationships originating from container daemons.
    answer_sources:
      - Windows Event ID 4688
      - Container hosts
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH EventID 4688
          | BUILD process_trees
          | ALERT if parent_process IN ("dockerd.exe", "containerd.exe") AND child_process IN ("cmd.exe", "powershell.exe", "net.exe")
  - question: Is a container daemon spawning a child process that it has rarely or never spawned before?
    context: |
      Container runtimes typically have a predictable set of child processes they create during normal operation. This question identifies deviations from this norm by flagging any parent-child process relationship that is statistically rare, which could indicate a successful exploit leading to arbitrary code execution on the host.
    answer_sources:
      - Windows Event ID 4688
      - Container hosts
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          BUILD historical_parent_child_process_frequency
          | ON new_process_creation
          | IF frequency_of(parent, child) < rarity_threshold THEN ALERT
  - question: Do process execution chains originating from container runtimes form anomalous graph structures?
    context: |
      This question models all process activity on the host as a graph to detect complex, multi-step attack chains that might follow a container escape. A graph-based anomaly detection model can identify unusual sequences of process creations that deviate from the normal system topology, even if individual parent-child relationships are not inherently suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Container hosts
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          MODEL process_history as graph
          | ON new_process_event
          | UPDATE graph
          | SCORE new_subgraph with GCN_autoencoder
          | ALERT if anomaly_score is high
  - question: Is a container attempting to connect to critical internal services (e.g., domain controllers, databases) in violation of network policy?
    context: |
      After escaping or escalating privileges, an adversary may use the compromised container's network identity to pivot to other high-value targets within the network. This question detects this lateral movement by alerting on any connection from a container host to a protected, critical network segment.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Network sensors monitoring east-west traffic
      - Container hosts
      - DNS resolvers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH Zeek conn.log
          | FILTER source_ip IN container_host_list AND destination_ip IN critical_subnet_list
          | ALERT on connection
  - question: Is a container host communicating with an internal network subnet it has never communicated with before?
    context: |
      Containerized applications usually communicate with a stable and predictable set of internal services. A connection to a completely new subnet is a strong indicator of anomalous behavior, such as network reconnaissance or lateral movement following a compromise. This question profiles normal communication patterns and alerts on deviations.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Network sensors monitoring east-west traffic
      - Container hosts
      - DNS resolvers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each_container_host
          | MAINTAIN set of historical_destination_subnets
          | ON new_connection
          | IF destination_subnet NOT IN historical_set THEN ALERT
  - question: Is network traffic from a container bridging two previously separate network communities?
    context: |
      In a well-segmented network, different application tiers or security zones form distinct "communities" of communicating hosts. This question uses graph analysis to identify these communities. An alert is generated if a connection from a container host acts as a bridge between two such communities, as this strongly suggests a pivot attempt by an adversary.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Network sensors monitoring east-west traffic
      - Container hosts
      - DNS resolvers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          BUILD network_graph from Zeek conn.log
          | IDENTIFY communities with Louvain_algorithm
          | ON new_connection
          | IF connection_bridges_two_communities THEN ALERT