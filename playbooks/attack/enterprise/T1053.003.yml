name: T1053.003: Cron
id: 6a8d7b3c-9e2f-4c1a-b0d8-5e4f3a2b1c09
description: This playbook focuses on detecting malicious use of the Cron utility on Linux/Unix systems, a technique identified as T1053.003. Adversaries leverage Cron to schedule commands or scripts for execution at specific times, which can be used for establishing initial execution, maintaining persistence, and escalating privileges. The playbook provides investigative questions to identify regularly scheduled, suspicious network activity indicative of C2 communication, anomalous process creation originating from Cron jobs, and modifications to crontab files that could lead to compromise.
type: technique
related:
  - TA0002: Execution
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I use threat intelligence to detect cron-initiated connections to known malicious infrastructure?
    context: Adversaries may use a cron job to schedule periodic network connections for command and control. This query aims to identify these connections by correlating outbound network traffic (IPs, domains, SSL/TLS fingerprints) with threat intelligence feeds. A match is a strong indicator of a compromised host communicating with a malicious server via a scheduled task.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points (Firewalls, Routers)
      - DNS resolvers
      - The Linux/Unix server fleet (specifically web, application, and database servers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek logs (conn, dns, ssl)
          WHERE destination_ip IN threat_intel_ips
          OR destination_domain IN threat_intel_domains
          OR ja3_hash IN threat_intel_ja3s
          ALERT on any match
  - question: How can I statistically identify the machine-like periodicity of cron-based C2 beaconing?
    context: Cron jobs execute at precise intervals, creating network traffic with very low jitter. This is unlike human-generated traffic. By calculating the inter-arrival times between connections for each source-destination pair, we can identify this automation. A standard deviation of less than one second ($$ \sigma < 1s $$) strongly suggests a scheduled task. Focusing on connections to rare or low-reputation destinations helps prioritize likely malicious activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points (Firewalls, Routers)
      - DNS resolvers
      - The Linux/Unix server fleet (specifically web, application, and database servers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FROM conn.log over 24h
          GROUP BY source_ip, destination_ip
          CALCULATE standard_deviation(inter_arrival_time) as stdev_iat
          WHERE stdev_iat < 1s
          ENRICH destination_ip with reputation_score
          ALERT on results, prioritizing low reputation
  - question: How can machine learning models identify regularly scheduled network connections indicative of cron jobs?
    context: Time series analysis can effectively uncover hidden periodic patterns in network data that are characteristic of cron jobs. By applying a forecasting model like ARIMA and examining the Autocorrelation Function (ACF) plot, we can find repeating spikes at regular intervals (e.g., every 60 minutes). This confirms a periodic schedule, which is a strong signal for a cron-based C2 beacon.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points (Firewalls, Routers)
      - DNS resolvers
      - The Linux/Unix server fleet (specifically web, application, and database servers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_destination_pair
          CREATE time_series of connection_count per minute
          APPLY ARIMA model and generate ACF plot
          ALERT if ACF shows significant spikes at regular lags (e.g., 60, 120)
  - question: How can I detect if a Linux host is being used to schedule remote commands against Windows systems?
    context: An adversary might use a cron job on a compromised Linux machine to schedule malicious commands (e.g., via PsExec, WMIC, PowerShell) against Windows hosts. This query correlates remote process creation events on Windows with network logon events originating from a Linux IP address. An alert should be triggered if the source IP is not on an approved allowlist of administrative systems.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Zeek conn.log
      - Critical Windows Servers (Domain Controllers, File Servers)
      - Linux/Unix management servers
      - Authentication logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH EventID 4688 for remote execution tools (psexec.exe, wmic.exe)
          JOIN with EventID 4624 on LogonId where LogonType is 3 (Network)
          FILTER where Source_IP is from Linux subnet AND not in admin_allowlist
          ALERT on match
  - question: How can I statistically identify periodic remote logons from a Linux host to a Windows host?
    context: If a cron job is used for automated lateral movement or persistence, the resulting logon events will occur at very regular intervals. By analyzing the timestamps of network logons from a single Linux source to a Windows target, we can calculate the time difference between events. A very low standard deviation ($$ \sigma < 5s $$) indicates a scheduled task. Comparing this frequency to the user's or host's normal activity baseline helps identify abnormal automation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Zeek conn.log
      - Critical Windows Servers (Domain Controllers, File Servers)
      - Linux/Unix management servers
      - Authentication logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FROM EventID 4624 where LogonType is 3 and Source_IP is Linux
          GROUP BY Source_IP, Target_User
          CALCULATE standard_deviation(time_between_logons) as stdev_logon
          WHERE stdev_logon < 5s
          ALERT on results
  - question: Can machine learning help identify clusters of logon activity that point to a scheduled task?
    context: Adversaries using cron for persistence will create logon events at the same time each day or hour. A clustering algorithm like DBSCAN can identify these patterns. By feeding logon timestamps (as day_of_year, time_of_day) into the model, a dense cluster of events occurring at the same minute across multiple days will be flagged as a periodic, scheduled activity, likely originating from a cron job.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Zeek conn.log
      - Critical Windows Servers (Domain Controllers, File Servers)
      - Linux/Unix management servers
      - Authentication logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip/user_pair
          EXTRACT features (day_of_year, time_of_day) from logon timestamps
          APPLY DBSCAN clustering algorithm
          ALERT on dense clusters found at the same time across multiple days
  - question: How can I detect the creation of a malicious crontab file?
    context: A primary way to establish cron-based persistence is to create or modify a crontab file. This query looks for file creation events in common cron directories (`/etc/cron*`, `/var/spool/cron*`). The alert should be prioritized if the process creating the file is a common tool used for downloading or executing scripts, such as `bash`, `wget`, or `curl`, as this may indicate a payload being written to the crontab.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH FileCreate events (EID 11)
          WHERE file_path matches '/etc/cron*' or '/var/spool/cron*'
          AND process_name IN ('bash', 'sh', 'wget', 'curl')
          ALERT on match
  - question: How can I statistically correlate crontab modifications with subsequent suspicious network or process activity?
    context: A malicious crontab modification is often followed closely by the execution of the scheduled payload, which may involve new processes or network connections. This query correlates crontab file modifications with process or network events from the same host within a 5-minute window. By baselining normal modifications (e.g., from package managers), we can flag deviations, especially if they are followed by connections to low-reputation destinations.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH crontab file modification events
          JOIN with process_execution or network_connection events from same host within 5 minutes
          FILTER out modifications from known good processes (e.g., 'apt', 'yum')
          ALERT on remaining correlations, especially with low-reputation destinations
  - question: Can a machine learning model be trained to identify malicious commands within crontab files?
    context: Adversaries often obfuscate commands written to crontab files. A classifier can be trained to recognize the characteristics of malicious commands. Features like the presence of base64 encoding, the use of `curl` or `wget` piped to a shell (`sh`), the inclusion of IP addresses, or reverse shell syntax can be used to train the model. A high score from the model would indicate a likely malicious crontab entry.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON crontab file write
          EXTRACT command_line string
          APPLY classifier model trained on features (base64, curl|sh, IP addresses, etc.)
          ALERT if score is high
  - question: How can I identify long-term, periodic C2 beaconing by correlating network logs with threat intelligence over time?
    context: For persistence, an adversary's C2 beaconing must occur over an extended period. This query looks for recurring matches against threat intelligence feeds (IPs, domains, JA3 hashes) from the same host. If a match occurs on at least two separate days with a regular period, it strongly suggests a persistent, scheduled C2 channel established via a tool like cron.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - DNS resolvers
      - Certificate Transparency logs
      - Linux/Unix server fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH network logs over 30 days for matches against threat intelligence
          GROUP by source_host, destination_indicator
          COUNT distinct days of activity
          ALERT if count > 1 and activity shows regular periodicity
  - question: How can I statistically identify persistent C2 using connection frequency and domain name entropy?
    context: Persistent C2 beaconing often has two statistical signatures: consistent daily connection frequency and, if DGA is used, high-entropy domain names. This query looks for source-destination pairs with low variance in daily connection counts over a 7-day window. Separately, it calculates the Shannon entropy of subdomain labels to detect DGA. Combining these two signals can uncover persistent, scheduled C2.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - DNS resolvers
      - Certificate Transparency logs
      - Linux/Unix server fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE daily connection frequency for each host; ALERT on low variance over 7 days.
          CALCULATE Shannon entropy for subdomains in DNS queries; ALERT on high entropy (> 3.5).
  - question: Can a machine learning model be trained to distinguish persistent, periodic C2 beaconing from normal traffic?
    context: A classifier, such as a Random Forest, can be trained to recognize the subtle characteristics of C2 beaconing. By using features from network logs like connection duration, bytes transferred, and the statistical properties of inter-arrival times, the model can learn to identify beaconing behavior. Flagging patterns that are classified as C2 and persist with a strong periodic signal over 7+ days provides a high-confidence alert for cron-based persistence.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - DNS resolvers
      - Certificate Transparency logs
      - Linux/Unix server fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features (duration, bytes, inter-arrival stats) from conn logs
          APPLY C2 classifier model
          IF classified as C2, analyze timestamps for periodicity over 7+ days
          ALERT if periodic C2 is detected
  - question: How can I detect if a low-privilege service account is being used to periodically modify users or permissions?
    context: An adversary who has compromised a web service account (e.g., `www-data`) might use a cron job to repeatedly execute privilege escalation or persistence commands. This query alerts when a process running as a low-privilege service user executes sensitive commands like `usermod`, `chmod`, `useradd`, or writes to `/etc/passwd`. This is highly anomalous and suspicious behavior.
    answer_sources:
      - Windows Event ID 1
      - Linux/Unix web and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process executions (EID 1)
          WHERE user IN ('www-data', 'apache', 'nginx')
          AND process_name IN ('usermod', 'chmod', 'chown', 'useradd')
          OR command_line contains 'etc/passwd'
          ALERT on match
  - question: How can I statistically confirm that privilege modifications by a service account are scheduled?
    context: After detecting a service account executing a sensitive command, it's crucial to determine if the action is automated. By analyzing the timestamps of these specific alert events over a 30-day period, we can check for periodicity. A low standard deviation ($$ \sigma < 5s $$) in the time between occurrences is a strong indicator of a scheduled cron job used for persistence.
    answer_sources:
      - Windows Event ID 1
      - Linux/Unix web and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FROM alerts for service_account_privilege_modification
          GROUP by alert_name, user
          CALCULATE standard_deviation(time_between_events) as stdev_event
          WHERE stdev_event < 5s
          ALERT on results
  - question: Can an anomaly detection model find suspicious process executions by service accounts?
    context: An Isolation Forest or similar anomaly detection model can learn the normal process activity for a given user or system role. By training a model on features like User, Parent Process, Process Name, Command Line, and Time of Day, it can identify rare and suspicious executions. This is effective for catching a web server process unexpectedly spawning a shell or user management tool, which could be triggered by a malicious cron job.
    answer_sources:
      - Windows Event ID 1
      - Linux/Unix web and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN Isolation Forest on baseline process events (User, ParentImage, Image, CommandLine, TimeOfDay)
          APPLY model to new process events
          ALERT on events flagged as anomalous, especially from service accounts
  - question: How can I detect DNS tunneling that uses cron for scheduling?
    context: Adversaries may use DNS for C2 communication (DNS tunneling), where data is exfiltrated in DNS queries. A cron job can be used to schedule these queries. This behavior is characterized by DNS requests (especially for TXT records) that are not followed by a corresponding network connection to the resolved IP. This query looks for this specific pattern of "DNS query without connection."
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Internal DNS resolvers
      - network egress points
      - Linux/Unix server fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each UID in dns.log
          CHECK if corresponding UID exists in conn.log within 1 minute
          ALERT if no conn.log event is found for repetitive DNS queries from a host
  - question: How can I statistically identify hosts that might be using DNS tunneling?
    context: DNS tunneling drastically changes a host's network profile, leading to a much higher ratio of DNS traffic compared to other protocols. This query identifies hosts whose ratio of DNS query volume to outbound TCP/UDP connection volume exceeds the 99th percentile of the network baseline. Additionally, analyzing the timing of these DNS queries for low entropy (periodicity) can confirm that the activity is scheduled, likely by cron.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Internal DNS resolvers
      - network egress points
      - Linux/Unix server fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host over 24h
          CALCULATE ratio = DNS_query_volume / TCP_UDP_connection_volume
          ALERT if ratio > 99th_percentile_baseline
          ANALYZE query timing for periodicity
  - question: Can machine learning help group and identify hosts exhibiting DNS tunneling behavior?
    context: A host engaged in DNS tunneling will have a network traffic profile dominated by DNS. A clustering algorithm like K-Means can group hosts based on their protocol mix (e.g., % of traffic on UDP/53). Any host that moves into a cluster characterized by abnormally high DNS traffic should be flagged. A subsequent time series analysis of its DNS query count can then confirm the periodic 'heartbeat' of a cron-scheduled C2.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Internal DNS resolvers
      - network egress points
      - Linux/Unix server fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host, create feature vector of protocol percentage (e.g., %TCP/80, %UDP/53)
          APPLY K-Means clustering
          ALERT if host moves to a high-DNS cluster
          CONFIRM with time-series analysis of DNS query count for periodicity
  - question: How can I detect a cron job being used to set the SUID bit or modify sensitive system files for privilege escalation?
    context: A common privilege escalation technique is to have a root-level cron job make a file executable and set the SUID bit, allowing any user to run it with root permissions. This query looks for processes spawned by `cron` or `crond` that either execute `chmod` with `+s` or write to critical files like `/etc/sudoers` or `/etc/passwd`.
    answer_sources:
      - Windows Event ID 1
      - The entire Linux/Unix server fleet, with a focus on multi-user systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process executions
          WHERE parent_process_ancestry contains 'cron' or 'crond'
          AND (process_name is 'chmod' and command_line contains '+s')
          OR (target_file is '/etc/sudoers' or '/etc/passwd')
          ALERT on match
  - question: How can I statistically identify anomalous commands run by root-level cron jobs?
    context: System administrators and packages create legitimate cron jobs that run as root. By establishing a baseline of these known-good commands, we can flag any new or rare command executed by a root cron job. This is an effective way to spot an adversary introducing a new malicious command. Additionally, high command line entropy can indicate obfuscation.
    answer_sources:
      - Windows Event ID 1
      - The entire Linux/Unix server fleet, with a focus on multi-user systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE command lines for processes where parent is 'cron' and user is 'root'
          ALERT on any new command line not seen in the last 30 days
          CALCULATE command line entropy and alert on high values
  - question: Can a machine learning model distinguish between legitimate and malicious root cron job commands?
    context: A one-class SVM is well-suited for this problem. It can be trained on the command lines of known-good root cron jobs (e.g., from system maintenance scripts like logrotate). Any new command spawned by cron that the model classifies as an outlier (i.e., it falls outside the learned boundary of 'normal') is flagged as a potential privilege escalation attempt.
    answer_sources:
      - Windows Event ID 1
      - The entire Linux/Unix server fleet, with a focus on multi-user systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN one-class SVM on command lines from known-good root cron jobs
          APPLY model to new root cron job executions
          ALERT on any command flagged as an outlier
  - question: How can I detect if a cron job is executing a malicious file placed in a world-writable directory?
    context: Adversaries may abuse misconfigurations where a root cron job is configured to run a script from a world-writable directory like `/tmp`. A low-privilege user can then replace or create that script to have their code executed as root. This query alerts when a file is created in a world-writable directory and is subsequently executed by a privileged user like root.
    answer_sources:
      - Windows Event ID 11
      - Windows Event ID 1
      - Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for FileCreate events in world-writable dirs ('/tmp', '/var/tmp')
          CORRELATE with subsequent ProcessExecute events of that same file
          WHERE executing_user is privileged (e.g., 'root')
          ALERT on match
  - question: How can I statistically identify the rare behavior of a privileged process executing a file from `/tmp`?
    context: It is highly unusual for a privileged process (especially one run by cron) to execute files from a temporary, world-writable directory. This query establishes this pattern's rarity. It correlates file writes to `/tmp` with executions and flags the event if the time delta is short (<1 minute). It then checks if a privileged process executing from `/tmp` is a statistically rare event (e.g., in the 99th percentile of rarity) for that host.
    answer_sources:
      - Windows Event ID 11
      - Windows Event ID 1
      - Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE file writes to /tmp with process executions of that file
          CALCULATE rarity of privileged processes executing from /tmp on the host
          ALERT if time_delta < 1 minute AND behavior is in 99th percentile of rarity
  - question: Can a graph model trace the privilege escalation path involving a cron job and a world-writable directory?
    context: Graph-based analysis is ideal for uncovering multi-step attack chains. By creating a graph of users, files, and processes, we can explicitly search for a known privilege escalation pattern: a low-privilege user writes a file to `/tmp`, a system service like cron executes that file, and a new process is created running as root. Visualizing this path provides clear evidence of the compromise.
    answer_sources:
      - Windows Event ID 11
      - Windows Event ID 1
      - Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD graph with nodes (user, file, process) and edges (write, execute)
          SEARCH for path: LowPrivUser -> writes -> TmpFile -> executed_by -> Cron -> creates -> RootProcess
          ALERT on found path
  - question: How can I detect if a host, compromised via cron, is being used for periodic lateral movement?
    context: Once an adversary has established a foothold with a cron job, they may use that automated execution to attempt lateral movement. This query first requires a detection of a suspicious cron execution on a host (Host A). It then monitors Host A for new outbound connection attempts to sensitive ports (SSH, RDP, WinRM) on other systems and correlates them with logon events on the destination hosts.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Internal network segments
      - authentication logs on both Windows and Linux servers
      - network egress/ingress points between security zones.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON suspicious_cron_alert for Host_A
          MONITOR for outbound connections from Host_A to ports 22, 3389, 5985
          CORRELATE with logon events (4624, 4625) on destination hosts
          ALERT on new successful or failed logons
  - question: How can I statistically identify a compromised host beginning to perform automated lateral movement?
    context: A host taken over by an adversary for lateral movement will exhibit a change in its network behavior. This query monitors a host suspected of a cron compromise for a sudden increase in the number of unique destination IPs or user accounts it tries to access. A spike exceeding 3 standard deviations from its 30-day baseline is anomalous. Periodicity in the timing of these attempts would confirm the involvement of a cron job.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Internal network segments
      - authentication logs on both Windows and Linux servers
      - network egress/ingress points between security zones.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR suspected host
          CALCULATE 30-day baseline of unique destinations/users contacted
          MONITOR for daily counts > (baseline + 3 * stdev)
          ANALYZE timing of attempts for periodicity
          ALERT on spike with periodic signal
  - question: Can a machine learning model detect when a host's role changes to include lateral movement, possibly due to a cron job?
    context: Every host has a typical role and interaction pattern within the network (e.g., a web server serves web pages, an admin workstation connects to many servers). A graph neural network can learn these normal roles. If a compromised host (like a web server) suddenly starts behaving like an administrative host (initiating connections to other servers), the model will flag this as a significant, anomalous role change, likely driven by an automated task like a malicious cron job.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Internal network segments
      - authentication logs on both Windows and Linux servers
      - network egress/ingress points between security zones.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN graph neural network on normal host-to-host connection patterns to learn roles
          APPLY model to new connection data
          ALERT if a host's behavior (e.g., a web server) deviates from its learned role and starts initiating numerous new connections