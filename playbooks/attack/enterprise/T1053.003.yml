name: T1053.003: Cron
id: a7e8f1b0-1a2b-4c3d-8e4f-5a6b7c8d9e0f
description: This playbook investigates how adversaries use Cron jobs, a time-based job scheduler in Unix-like computer operating systems, for execution, persistence, and privilege escalation. It provides investigative questions to detect evidence such as highly periodic network traffic indicative of automated command-and-control (C2) communication, suspicious process creation on Windows hosts originating from Linux systems, direct modification of crontab files to schedule malicious tasks, long-term C2 beaconing for persistence, privilege escalation through misconfigured jobs that run with elevated permissions, and subsequent lateral movement following a compromise.
type: technique
related:
- TA0002: Execution
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are there any outbound network connections, DNS queries, or SSL/TLS sessions from our Linux/Unix hosts that match known malicious indicators from threat intelligence feeds?
  context: This question aims to identify direct communication with known malicious infrastructure. A match against a threat intelligence feed is a high-confidence indicator of compromise. Since Cron jobs are often used to automate callbacks or data exfiltration, correlating network activity with threat intelligence can quickly uncover malicious scheduled tasks.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points (Firewalls, Routers)
  - DNS resolvers
  - The Linux/Unix server fleet (specifically web, application, and database servers).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      JOIN (Zeek conn.log.destination_ip) WITH (threat_intel_feed.malicious_ip)
      JOIN (Zeek dns.log.query) WITH (threat_intel_feed.malicious_domain)
      JOIN (Zeek ssl.log.ja3_hash) WITH (threat_intel_feed.malicious_ja3)
      ALERT on match
- question: Has any Linux/Unix host initiated outbound network connections to a specific destination with a highly regular, machine-like periodicity?
  context: Adversaries often use Cron jobs to schedule periodic C2 communication (beaconing). This automated activity results in connections with very little time variation (low jitter). By calculating the standard deviation of time between connections ($$ \sigma $$) for each source-destination pair, we can identify this machine-like behavior. A standard deviation of less than one second ($$ \sigma < 1s $$) is a strong indicator of an automated task, potentially a malicious cron job. Prioritizing these findings for rare or low-reputation destinations helps focus on the most likely threats.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points (Firewalls, Routers)
  - DNS resolvers
  - The Linux/Unix server fleet (specifically web, application, and database servers).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each source_ip, destination_ip in (Zeek conn.log):
        CALCULATE inter_arrival_times over 24h
        CALCULATE stdev(inter_arrival_times)
        IF stdev < 1 second:
          FLAG (source_ip, destination_ip) as periodic
          PRIORITIZE if destination_ip is rare or has low reputation
- question: Can a time series analysis of network connection counts reveal a repeating, periodic pattern indicative of a cron job?
  context: This question uses a machine learning approach to confirm periodicity. An Autocorrelation Function (ACF) plot will show significant spikes at regular intervals (lags) if a repeating pattern exists, such as a cron job running every hour (spikes at lags 60, 120, 180 minutes). This provides strong statistical evidence of automated, scheduled activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points (Firewalls, Routers)
  - DNS resolvers
  - The Linux/Unix server fleet (specifically web, application, and database servers).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MODEL ARIMA on connection_count per minute for each source-dest pair
      PLOT ACF
      ALERT if ACF shows significant repeating spikes at regular intervals
- question: Has a remote process execution tool (like PsExec or WMIC) been launched on a Windows server, with the logon originating from a Linux host not on an approved allowlist?
  context: This question looks for a common cross-platform attack pattern where an adversary, having compromised a Linux host, uses it to pivot to Windows systems. Correlating the process creation (Event ID 4688) with the remote network logon (Event ID 4624, Type 3) and checking the source IP against a list of approved administrative systems helps identify unauthorized lateral movement attempts potentially automated by a cron job.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Zeek conn.log
  - Critical Windows Servers (Domain Controllers, File Servers)
  - Linux/Unix management servers
  - Authentication logs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FIND EventID 4688 for psexec.exe, wmic.exe
      GET LogonId
      FIND corresponding EventID 4624 with LogonType 3
      IF 4624.IpAddress is Linux_Subnet AND NOT in Admin_Allowlist, ALERT
- question: Are remote logons from a specific Linux host to a Windows user account occurring at an abnormally frequent and regular interval?
  context: Building on the previous question, this statistical check identifies automation. By calculating the time difference between consecutive logon events for the same source IP and user, a very low standard deviation ($$ \sigma < 5s $$) points to a scheduled task, like a cron job, being used for repeated access or command execution. Comparing this frequency to the user's or host's normal behavior helps filter out noise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Zeek conn.log
  - Critical Windows Servers (Domain Controllers, File Servers)
  - Linux/Unix management servers
  - Authentication logs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      GROUP correlated logons by source_ip, target_user
      CALCULATE time_diff between consecutive logons
      IF stdev(time_diff) < 5s, FLAG as periodic
      COMPARE logon_frequency to 99th percentile baseline for user/host
- question: Can clustering logon events over time reveal dense groups of activity at the same time on different days, suggesting a scheduled task?
  context: This machine learning approach aims to find scheduled activity without relying on calculating inter-arrival times. By using a clustering algorithm like DBSCAN on logon timestamps (represented as day and time), a dense cluster of events at the same minute of the hour across multiple days strongly suggests a periodic, automated task like a cron job.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Zeek conn.log
  - Critical Windows Servers (Domain Controllers, File Servers)
  - Linux/Unix management servers
  - Authentication logs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each source_ip/user pair:
        CLUSTER logon events using DBSCAN on (day_of_year, time_of_day)
        ALERT on dense clusters found at the same time across multiple days
- question: Has a crontab file been created or modified by a suspicious process like a script interpreter (bash, sh) or a downloader (wget, curl)?
  context: This question directly targets the act of creating a malicious cron job. Monitoring for file creation events (like Sysmon Event ID 11) in cron directories (`/etc/cron*`, `/var/spool/cron*`) and flagging those initiated by processes not associated with system administration (like package managers) can provide an early warning of an adversary establishing execution.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ALERT on FileCreate event where FilePath matches '/etc/cron*' or '/var/spool/cron*' AND ProcessName is in (bash, sh, wget, curl)
- question: Following a crontab file modification, did the host initiate any unusual process executions or network connections within a short time window?
  context: A malicious cron job is created to do something, which often involves running a command or connecting to the internet. This question correlates the crontab modification with subsequent activity. If a modification by a non-standard process is followed within minutes by a new process or a connection to a low-reputation destination, it's highly indicative of a malicious cron job being activated.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ON crontab_modification_event:
        LOOK for ProcessExecution or NetworkConnection from same host within 5 minutes
        IF modification is not from baseline process (e.g., apt, yum) AND subsequent connection is to low-reputation destination, ALERT
- question: Can a machine learning model classify a command line string being written to a crontab file as potentially malicious?
  context: This question focuses on analyzing the content of the cron job itself. A classifier can be trained to recognize malicious patterns, such as the use of base64 encoding to hide payloads, piping downloaded scripts directly to a shell (`curl ... | sh`), the presence of hardcoded IP addresses, or reverse shell syntax. A high-confidence malicious classification provides a strong signal of an attack.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN classifier on command line strings
      FEATURES: has_base64, has_curl_pipe_sh, has_ip_address, has_reverse_shell_syntax
      ON crontab_write: PREDICT if command is malicious
      ALERT on high score
- question: Has a host been making recurring, scheduled connections over several days to a destination that appears on a threat intelligence feed?
  context: This question looks for long-term persistence. A one-off connection to a malicious IP is bad, but repeated, periodic connections over many days (e.g., 30 days) are a strong indicator of a persistent C2 channel, often maintained by a cron job. This rule specifically looks for this long-term, repeating pattern against known-bad destinations.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points
  - DNS resolvers
  - Certificate Transparency logs
  - Linux/Unix server fleet.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      LOOKBACK 30 days
      JOIN network logs (conn, dns, ssl) with threat_intel_feeds
      ALERT if matches occur on >= 2 separate days with regular periodicity
- question: Is there a host exhibiting both a consistent daily connection frequency and communication with high-entropy domains, suggesting automated DGA-based C2?
  context: This question combines two statistical indicators of persistent C2. First, a low variance in the number of connections made per day suggests an automated, scheduled task. Second, communication with domains that have high-entropy subdomains (e.g., `a1b2c3d4.evil.com`) is a classic sign of Domain Generation Algorithms (DGA). The combination is a powerful indicator of a cron-driven C2 agent.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points
  - DNS resolvers
  - Certificate Transparency logs
  - Linux/Unix server fleet.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CALCULATE variance of daily connection count per source-dest pair over 7 days
      FLAG low variance
      SEPARATELY, CALCULATE Shannon entropy of subdomains in DNS queries. FLAG high entropy (> 3.5)
      ALERT on hosts with both flags
- question: Can a machine learning classifier identify network traffic patterns as C2 beaconing that persists periodically over a week or more?
  context: This question uses a classifier trained to recognize the specific characteristics of C2 beaconing traffic (e.g., small, regular data transfers). By analyzing features like connection duration, bytes transferred, and inter-arrival time statistics, the model can flag suspicious patterns. If this classified C2 traffic is observed to have a strong periodic signal over 7 or more days, it confirms a persistent, scheduled threat.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points
  - DNS resolvers
  - Certificate Transparency logs
  - Linux/Unix server fleet.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN Random Forest classifier on Zeek conn.log features (duration, bytes, stdev of inter-arrival times) to identify C2
      FLAG connections classified as C2 that show a strong periodic signal over 7+ days
- question: Has a process running as a low-privilege service account (e.g., 'www-data') been observed executing sensitive user or permission management commands?
  context: Service accounts like 'www-data' or 'nginx' should not be modifying users or system permissions. This question creates a high-confidence alert for when a process under such a user executes commands like `usermod`, `chmod`, or writes to `/etc/passwd`. This often indicates a web shell or other exploit is being used to establish persistence.
  answer_sources:
  - Windows Event ID 1
  - Linux/Unix web and application servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ALERT when ProcessUser is in (www-data, nginx, apache) AND ProcessName is in (usermod, chmod, chown, useradd) OR is writing to (/etc/passwd, /etc/shadow)
- question: Are the suspicious user/permission management activities from service accounts occurring at regular, repeating intervals?
  context: If an adversary uses a cron job to maintain persistence (e.g., to re-add a backdoor user if it gets deleted), the malicious actions identified in the previous question will occur periodically. By analyzing the timestamps of these alerts, a low standard deviation ($$ \sigma < 5s $$) in the time between events confirms that the activity is automated and scheduled.
  answer_sources:
  - Windows Event ID 1
  - Linux/Unix web and application servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR alerts from previous question:
        CALCULATE inter-arrival times over 30 days
        IF stdev < 5s, FLAG as scheduled persistence mechanism
- question: Can an anomaly detection model identify rare and suspicious process executions by service accounts, such as spawning a shell?
  context: This question uses a machine learning model (like Isolation Forest) to learn the normal behavior of processes on a host. The model can then flag executions that are rare and anomalous, such as a web server process (`nginx`) spawning a shell (`/bin/bash`) or a user management tool (`usermod`). This is effective for catching novel or obfuscated persistence techniques that might not be caught by specific symbolic rules.
  answer_sources:
  - Windows Event ID 1
  - Linux/Unix web and application servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN Isolation Forest on process execution events (User, ParentImage, Image, CommandLine, TimeOfDay)
      ALERT on events flagged as anomalous, especially a web server process spawning a shell or user management tool
- question: Is any host making repetitive DNS queries (especially for TXT records) to a domain without ever making a direct network connection to the resolved IP address?
  context: This behavior is a hallmark of DNS tunneling, where data is exfiltrated or C2 commands are received within DNS queries and responses themselves. The lack of a subsequent TCP/UDP connection to the resolved IP is the key indicator. When this pattern is repetitive, it suggests an automated C2 channel, likely driven by a cron job.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Internal DNS resolvers
  - network egress points
  - Linux/Unix server fleet.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each DNS query UID in dns.log:
        CHECK for corresponding UID in conn.log within 1 minute
        ALERT if a host makes repetitive DNS queries (especially TXT/CNAME) with no matching conn.log entry
- question: Does any host have a highly anomalous ratio of DNS traffic compared to its other network traffic, and are the DNS queries themselves sent at a regular interval?
  context: A host performing DNS tunneling will have a network profile skewed heavily towards DNS traffic. This question identifies such hosts by finding those with a DNS-to-TCP/UDP traffic ratio in the top percentile of the network. Furthermore, calculating the entropy of the time between these queries can confirm if they are scheduled (low entropy) versus random.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Internal DNS resolvers
  - network egress points
  - Linux/Unix server fleet.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CALCULATE (DNS query volume / outbound TCP/UDP volume) per host
      FLAG if ratio > 99th percentile
      ADDITIONALLY, calculate entropy of inter-arrival times for DNS queries to the same domain
      ALERT if ratio is high AND entropy is low
- question: Can clustering hosts by their network protocol usage identify outliers that have an abnormally high percentage of DNS traffic, indicating potential DNS tunneling?
  context: This question takes a network-wide view. By clustering all hosts based on their traffic mix (e.g., % HTTP, % SSL, % DNS), we can establish profiles for different types of servers. A host that suddenly moves to a cluster defined by an extremely high percentage of DNS traffic is a strong anomaly, and time series analysis on its DNS queries can then confirm the periodic 'heartbeat' of a cron-driven C2.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Internal DNS resolvers
  - network egress points
  - Linux/Unix server fleet.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CLUSTER hosts using K-Means on features like (% TCP/80, % TCP/443, % UDP/53)
      FLAG hosts that move to a cluster with abnormally high % UDP/53
      CONFIRM with time series analysis of DNS query count for periodicity
- question: Has a process spawned by 'cron' or 'crond' executed commands to set the SUID bit on a file or modify critical authentication files like /etc/sudoers?
  context: This is a direct check for a cron job being used for privilege escalation. A process with 'cron' in its parent history that runs `chmod +s` on a binary is creating a SUID executable that can be used to run commands as root. Similarly, modifying `/etc/sudoers` can grant a user passwordless root access. These are high-confidence indicators of malicious activity.
  answer_sources:
  - Windows Event ID 1
  - The entire Linux/Unix server fleet, with a focus on multi-user systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ALERT on process where ParentImage chain contains 'cron' or 'crond' AND (ProcessName is 'chmod' with '+s' argument OR process writes to '/etc/sudoers' or '/etc/passwd')
- question: Has a root-level cron job executed a command that is new or has not been seen in the last 30 days?
  context: System administrators rely on predictable, recurring cron jobs for maintenance. This question establishes a baseline of these normal commands and flags any deviation. A new or rare command executed by a root cron job is highly suspicious and could represent a hijacked cron job or a newly planted malicious one. High entropy in the command line itself can also indicate obfuscation.
  answer_sources:
  - Windows Event ID 1
  - The entire Linux/Unix server fleet, with a focus on multi-user systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      BASELINE commands run by root cron jobs
      FLAG any new or rare command (not seen in 30 days)
      CALCULATE command line entropy and flag high values
- question: Can a machine learning model, trained only on known-good root cron job commands, detect a new, anomalous command execution?
  context: This question uses a one-class SVM, an anomaly detection algorithm ideal for situations where you have a lot of 'normal' data and want to find anything that deviates. By training the model on the command lines of legitimate system maintenance cron jobs, it can effectively flag any new command that falls outside this learned normal boundary, indicating a potential privilege escalation attempt.
  answer_sources:
  - Windows Event ID 1
  - The entire Linux/Unix server fleet, with a focus on multi-user systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN One-Class SVM on command lines of known-good root cron jobs
      ALERT on any new cron-spawned command that the model flags as an outlier
- question: Was a file created in a world-writable directory (like /tmp) and subsequently executed by a privileged user like root?
  context: This question identifies a classic privilege escalation technique where an attacker places a malicious script in a world-writable directory (`/tmp`, `/var/tmp`), hoping a poorly configured cron job running as root will execute it. Alerting on the sequence of 'file create in /tmp' followed by 'file execute by root' detects this specific attack path.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ALERT on FileCreate in world-writable-dir (e.g., /tmp) followed by ProcessExecute of the same file where User is privileged (e.g., root)
- question: What is the frequency and time delay of privileged processes executing files from world-writable directories like /tmp?
  context: Legitimate processes rarely execute from `/tmp`. This question uses statistics to find this behavior. First, it flags any host where a privileged process executing a file from `/tmp` is a rare event (e.g., in the 99th percentile of rarity). Second, it looks for a short time delay (e.g., <1 minute) between the file being written to `/tmp` and its execution, which is characteristic of an exploit.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CORRELATE file writes in /tmp with process executions
      CALCULATE time delta
      FLAG short deltas (<1 min)
      TRACK rarity of privileged processes executing from /tmp
      ALERT if behavior is rare for the host
- question: Can a graph-based model detect the specific attack chain of a low-privilege user writing a file to /tmp that is then executed by a high-privilege system process like cron?
  context: This question uses a more advanced model to visualize and detect the entire attack sequence. By creating a graph of users, files, and processes, we can explicitly search for the path `Low-Privilege User -> [Writes] -> File in /tmp <- [Executed By] <- Cron/Systemd Process -> [Spawns] -> New Process as Root`. Finding this specific multi-step path is a very high-confidence indicator of privilege escalation.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MODEL system activity as a graph (nodes: users, files, processes)
      SEARCH for the path: LowPrivUser --writes--> TmpFile <--exec_by-- SystemProcess --spawns--> RootProcess
      ALERT on path discovery
- question: After detecting a suspicious cron job execution on a host, is that host now attempting to connect to other systems on sensitive ports (SSH, RDP, WinRM)?
  context: Once an attacker gains control via a cron job, their next step is often lateral movement. This question triggers a focused monitoring state. After a cron-related alert on 'Host A', we immediately start watching for new outbound connections from Host A to other systems on ports like 22 (SSH), 3389 (RDP), or 5985 (WinRM), correlating them with logon successes or failures on the destination hosts.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Internal network segments
  - authentication logs on both Windows and Linux servers
  - network egress/ingress points between security zones.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ON suspicious_cron_alert(HostA):
        MONITOR for outbound connections from HostA to ports (22, 3389, 5985)
        CORRELATE with LogonSuccess/Failure events on destination hosts
- question: Has a host, suspected of a cron-based compromise, shown a statistically significant increase in the number of unique systems or user accounts it is trying to access?
  context: A compromised host being used for automated lateral movement will exhibit a behavioral change. This question establishes a 30-day baseline for a host's normal connection patterns. A sudden spike (e.g., >3 standard deviations from the baseline) in the number of unique IPs or user accounts it tries to connect to is a strong indicator of scanning or brute-forcing, likely driven by the malicious cron job.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Internal network segments
  - authentication logs on both Windows and Linux servers
  - network egress/ingress points between security zones.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR suspected_compromised_host:
        BASELINE daily unique destination IPs and user accounts over 30 days
        ALERT if current daily count > (baseline_mean + 3 * baseline_stdev)
        ANALYZE timing for periodicity
- question: Can a graph neural network, trained on normal inter-system communication patterns, detect that a compromised host is attempting lateral movement inconsistent with its established role?
  context: This advanced approach models the entire network's 'normal' communication graph (e.g., web servers talk to DB servers, not to other web servers). A Graph Neural Network learns these roles and relationships. If a compromised web server suddenly starts trying to SSH into other web servers or admin workstations, the model will flag this as a severe deviation from its learned role, indicating anomalous lateral movement likely driven by an automated (cron) task.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Internal network segments
  - authentication logs on both Windows and Linux servers
  - network egress/ingress points between security zones.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MODEL normal lateral movement with a Graph Neural Network
      INPUT current activity
      ALERT if a host (e.g., web server) attempts connections inconsistent with its learned role (e.g., SSH to other web servers)