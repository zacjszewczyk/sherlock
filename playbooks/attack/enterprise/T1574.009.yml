name: T1574.009: Path Interception by Unquoted Path
id: 1a8c9e0f-5b6d-4f3a-8e7c-2d1b0a9f8d6e
description: >-
  This playbook helps identify adversary activity leveraging unquoted service paths for persistence, privilege escalation, and defense evasion. Adversaries may place a malicious executable in a parent directory of a legitimate service's path (e.g., C:\Program.exe for a service at "C:\Program Files\Some App\service.exe"). When the service is started or restarted, the operating system may execute the malicious file instead of the intended one. This can lead to the adversary maintaining a foothold on the system, escalating privileges to a higher-privileged context like NT AUTHORITY\SYSTEM if the service is configured to run as such, or disabling security controls by targeting the services of security products. Key indicators include a file creation event in a vulnerable path, a subsequent service restart, the execution of the new file, and potentially external network connections or a drop in security telemetry.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can we detect if a file creation in a vulnerable path, followed by a service restart, process creation, and external network connection, has occurred on a host within a short time frame?
    context: This question aims to identify the full attack chain for persistence via an unquoted service path. By correlating a sequence of specific events—file creation, service restart, process creation, and network connection—within a tight time window, we can effectively detect an adversary planting a malicious executable, triggering its execution, and establishing a command and control channel.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Windows Event ID 7036 (Service Start/Stop)
      - Zeek conn.log
      - Windows Registry on all endpoints (to identify vulnerable unquoted service paths)
      - File systems of endpoints and servers (especially C:\ and C:\Program Files)
      - Network traffic logs at egress points
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          CORRELATE on host over 5 minutes:
            1. file_create (Sysmon 11) for executable in vulnerable_path
            2. FOLLOWED BY service_restart (Win 7036) for associated_service
            3. FOLLOWED BY process_create (Sysmon 1) from vulnerable_path
            4. FOLLOWED BY network_connection (Zeek) to external_ip on blocklist
  - question: Can we identify newly created executables in vulnerable paths that have high-entropy filenames or are known interception targets with a new hash?
    context: Adversaries often use randomly generated filenames for their malware, which results in high Shannon entropy. Alternatively, they might use a common, expected name like 'Program.exe' but with a malicious payload. This question helps detect these outliers by flagging unusually random filenames or known-good names with previously unseen file hashes, indicating a potential masquerading attempt.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Process execution logs (for hash prevalence)
      - Windows Registry on all endpoints (to identify vulnerable unquoted service paths)
      - File systems of endpoints and servers (especially C:\ and C:\Program Files)
      - Network traffic logs at egress points
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          FOR EACH file_create (Sysmon 11) in root OR program_files_dirs:
            filename_entropy = calculate_shannon_entropy(filename)
            file_hash_prevalence = count_historical_executions(file_hash)
            IF (filename_entropy > 95th_percentile OR filename is known_target) AND file_hash_prevalence == 0:
              ALERT
  - question: Can we use a sequence analysis model to detect anomalous service behavior indicative of path interception?
    context: This question focuses on establishing a baseline of normal service operations (start, stop, crash) and then identifying deviations. A sequence where a file is created in a vulnerable path just before a service restart and the execution of a new process from that path is a significant anomaly that a trained model, like a Hidden Markov Model, can flag, even if other individual indicators are not present.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Windows Event ID 7036 (Service Start/Stop)
      - Windows Registry on all endpoints (to identify vulnerable unquoted service paths)
      - File systems of endpoints and servers (especially C:\ and C:\Program Files)
      - Network traffic logs at egress points
    range: last 90 days
    queries:
      - technology: Machine Learning Pseudocode
        query: |
          MODEL = HiddenMarkovModel(trained_on_baseline_service_events)
          INPUT_SEQUENCE = [file_create_in_vulnerable_path, service_restart, process_create_from_path]
          IF MODEL.predict(INPUT_SEQUENCE) is ANOMALOUS:
            ALERT
  - question: How can we detect if a non-administrative user creates an executable in a vulnerable path that is later executed as NT AUTHORITY\SYSTEM?
    context: This is a direct method to detect privilege escalation. It specifically looks for a low-privileged user creating a file that is subsequently executed by a high-privileged system account due to an unquoted service path vulnerability. This pinpoints a successful privilege escalation event by tracking the identity from file creation to process execution.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Windows Event ID 7036 (Service Start/Stop)
      - Authentication logs and file systems on multi-user systems
      - Windows Registry (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services)
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          JOIN file_create (Sysmon 11) with process_create (Sysmon 1) on file_path:
            WHERE file_create.user NOT IN (admin_groups)
            AND file_create.path IN (vulnerable_paths)
            AND process_create.user == 'NT AUTHORITY\SYSTEM'
            ALERT
  - question: Can we assign a risk score to process creations from unquoted paths based on the privilege gap between the file creator and the process executor?
    context: This question introduces a risk-based approach to detection. Instead of a simple binary alert, it quantifies the risk by measuring the difference in privilege levels between the user who planted the file and the account that executed it. A large gap, such as a standard user to the SYSTEM account, represents a high-risk event worthy of immediate investigation.
    answer_sources:
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 11 (File Create)
      - Authentication logs and file systems on multi-user systems
      - Windows Registry (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services)
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          FOR EACH process_create (Sysmon 1) from unquoted_service_path:
            process_user = event.user
            file_creator = get_creator_from_file_create_event(event.file_path)
            privilege_gap = calculate_privilege_level(process_user) - calculate_privilege_level(file_creator)
            risk_score = calculate_score(privilege_gap)
            IF risk_score > 50:
              ALERT
  - question: Can a graph-based model identify the malicious pattern of a low-privilege user creating a file that is executed by a high-privilege account?
    context: This question proposes using a more advanced analytical technique, like a graph neural network, to model the complex relationships between users, files, and processes. This approach can identify the specific subgraph pattern of privilege escalation (User A -> creates -> File X; Process X -> executed by -> User B) and classify it as malicious, potentially catching sophisticated variations that rule-based systems might miss.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Authentication logs and file systems on multi-user systems
      - Windows Registry (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services)
    range: last 90 days
    queries:
      - technology: Graph DB / ML Pseudocode
        query: |
          MODEL = GraphNeuralNetwork(trained_on_user_file_process_graphs)
          SUBGRAPH = {
            node(user, low_priv),
            node(file, vulnerable_path),
            node(process, from_file),
            node(user, high_priv),
            edge(user_low -> created -> file),
            edge(process -> executed_as -> user_high)
          }
          IF MODEL.classify(SUBGRAPH) is MALICIOUS:
            ALERT
  - question: How can we detect if a file creation in a security tool's vulnerable path is followed by a crash or stoppage of that security service?
    context: This question targets defense evasion specifically aimed at security products. Adversaries may try to disable an EDR or antivirus agent by exploiting an unquoted service path vulnerability in that agent's own service. Correlating the placement of a suspicious file with the subsequent failure of the security service is a strong indicator of this technique.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Windows Event ID 7034 (Service Crash)
      - Windows Event ID 7036 (Service Stop/Start)
      - SIEM internal logs on data source health
      - File system directories containing security agent installations
      - Service Control Manager event logs
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: |
          CORRELATE on host over 5 minutes:
            1. file_create (Sysmon 11) for executable in path intercepting a watchlisted_security_service
            2. FOLLOWED BY service_crash (Win 7034) OR service_stop (Win 7036) for that service
            ALERT (High Severity)
  - question: Can we detect a significant drop in log volume from a security agent and correlate it with recent file creations in vulnerable paths?
    context: This provides an alternative way to detect disabled security tools. Instead of looking for a crash event, this method monitors the tool's output. A sudden, anomalous drop in telemetry suggests the agent is no longer functioning correctly. Enriching this alert by checking for recent, suspicious file creations provides context and points to a likely cause.
    answer_sources:
      - SIEM internal logs on data source health
      - Sysmon Event ID 11 (File Create)
      - File system directories containing security agent installations
      - Service Control Manager event logs
    range: last 90 days
    queries:
      - technology: SIEM / Baselining Pseudocode
        query: |
          FOR EACH host:
            current_log_volume = get_log_volume(last_hour)
            baseline_volume = get_30day_avg_volume_for_hour()
            IF current_log_volume < (baseline_volume - 3 * std_dev):
              QUERY host for file_create (Sysmon 11) in vulnerable_paths within last 15 mins
              ALERT with enrichment
  - question: Can we use an autoencoder to detect anomalous file creations within protected security tool directories?
    context: This question suggests a machine learning approach to protect the integrity of security tool installations. An autoencoder is trained on the normal file manifest of these directories. When a new, unauthorized file (like a malicious executable planted for path interception) is created, it will cause a high reconstruction error, signaling an anomaly and a potential tampering attempt.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - File system directories containing security agent installations
      - Service Control Manager event logs
      - SIEM internal logs on data source health
    range: last 90 days
    queries:
      - technology: Machine Learning Pseudocode
        query: |
          MODEL = Autoencoder(trained_on_file_manifests_of_security_dirs)
          FOR EACH file_create (Sysmon 11) in protected_security_dirs:
            reconstruction_error = MODEL.get_reconstruction_error(new_file_manifest)
            IF reconstruction_error > threshold:
              ALERT