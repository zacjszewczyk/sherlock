name: T1574.009: Path Interception by Unquoted Path
id: c1a9d8e2-f7b6-4c5a-b3d1-e0f9a8b7c6d5
description: This playbook investigates adversary activity related to MITRE ATT&CK Technique T1574.009, Path Interception by Unquoted Path. It aims to identify if an adversary is maintaining persistence, escalating privileges, or evading defenses by exploiting unquoted service paths. This involves detecting sequences of events such as the creation of an executable in a world-writable directory that is a parent in an unquoted service path (e.g., C:\Program.exe), followed by a service restart and the launch of the new executable. The playbook also looks for privilege escalation where a low-privilege user creates a file that is then executed by a high-privilege service account (e.g., NT AUTHORITY\SYSTEM). Additionally, it checks for attempts to disable security controls by targeting the unquoted service paths of security products, which might be indicated by service crashes or anomalous drops in telemetry following a suspicious file creation.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a suspicious file been created in a vulnerable unquoted service path, followed by a service restart, process execution from that path, and external network communication?
  context: This question looks for a classic persistence pattern using unquoted service paths. An adversary places a malicious executable in a location like `C:\Program.exe` to hijack a legitimate service located at `C:\Program Files\Some App\service.exe`. When the service restarts, the OS executes the adversary's malware instead. The final check for external network communication helps confirm that the new process is likely a C2 implant. Detecting this entire sequence provides high-confidence evidence of persistence.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Windows Event ID 7036 (Service Start/Stop)
  - Zeek conn.log
  - Windows Registry on all endpoints (to identify vulnerable unquoted service paths), file systems of endpoints and servers (especially C:\ and C:\Program Files), and network traffic logs at egress points.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      SEARCH for file creation (Sysmon EID 11) of an .exe in a vulnerable path (e.g., C:\, C:\Program Files\)
      JOIN on hostname and timeframe (5 mins) with service restart (Win EID 7036) for the associated service
      JOIN with process creation (Sysmon EID 1) matching the created .exe path
      JOIN with network connection (Zeek) from the same host to an external IP on a threat list
      ALERT if all four events are found in sequence
- question: Has a new executable with a high-entropy filename or a new hash for a common interception filename (e.g., Program.exe) been created in a vulnerable directory?
  context: Adversaries may use randomly generated filenames to avoid simple signature-based detection. High Shannon entropy in a filename can indicate such randomness. Alternatively, they might use a common name like `Program.exe` to blend in, but the file's hash will be new to the environment. This question aims to detect these two scenarios, which are strong indicators of an adversary staging a malicious payload for path interception.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Windows Registry on all endpoints (to identify vulnerable unquoted service paths), file systems of endpoints and servers (especially C:\ and C:\Program Files), and network traffic logs at egress points.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each file creation (Sysmon EID 11) of an .exe in C:\ or C:\Program Files\:
        CALCULATE Shannon entropy of filename
        LOOKUP historical prevalence of the file hash
        IF (filename entropy > 95th percentile) OR (filename is known target AND hash is new):
          ALERT
- question: Has a service with a known unquoted path vulnerability exhibited an anomalous sequence of events, such as a file creation in a parent directory followed by a restart and unexpected process execution?
  context: This question uses machine learning to baseline normal service behavior. Services typically start, stop, or crash in predictable patterns. An adversary exploiting an unquoted path will introduce a new sequence: file creation in a vulnerable location, followed by a service restart, and then the execution of the new, malicious file. A model trained on normal behavior will flag this sequence as a significant anomaly, allowing for detection without pre-defined correlation rules.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Windows Event ID 7036 (Service Start/Stop)
  - Windows Registry on all endpoints (to identify vulnerable unquoted service paths), file systems of endpoints and servers (especially C:\ and C:\Program Files), and network traffic logs at egress points.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      INPUT event stream for a vulnerable service (Sysmon EID 1, 11; Win EID 7036) into a trained HMM.
      MODEL identifies state transitions.
      ALERT if the model flags a sequence as anomalous, specifically a transition involving:
        1. File create in vulnerable path
        2. Service restart
        3. Process create from new file
- question: Did a non-administrative user create an executable in a vulnerable path that was later executed with SYSTEM privileges?
  context: This is a direct check for privilege escalation via unquoted service paths. The core of the attack is a lower-privileged user planting a malicious executable in a location where a higher-privileged service will mistakenly execute it. By correlating the user who created the file with the user context of the resulting process, this question identifies the privilege jump from a standard user to the highest level (SYSTEM).
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Windows Event ID 7036 (Service Start/Stop)
  - Authentication logs and file systems on multi-user systems like terminal servers and workstations. The Windows Registry (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services) on all hosts is the NAI for identifying vulnerable service configurations.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      SEARCH for file creation (Sysmon EID 11) where user is NOT an admin AND path is vulnerable (e.g., C:\)
      JOIN on filename and hostname with process creation (Sysmon EID 1)
      ALERT if the process is executed as 'NT AUTHORITY\SYSTEM'
- question: Can we risk-score and alert on processes that show a significant privilege gap between the file creator and the process executor due to an unquoted path?
  context: This question moves beyond a simple binary alert to a risk-based approach. Not all privilege gaps are equal or malicious. By assigning a score based on the "distance" between the user who created the file and the user context of the running process (e.g., standard user to SYSTEM is higher risk), analysts can focus on the most severe instances of potential privilege escalation, reducing alert fatigue.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Windows Event ID 7036 (Service Start/Stop)
  - Authentication logs and file systems on multi-user systems like terminal servers and workstations. The Windows Registry (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services) on all hosts is the NAI for identifying vulnerable service configurations.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each process creation (Sysmon EID 1) from a vulnerable path:
        GET process user context (e.g., 'SYSTEM')
        FIND corresponding file creation event (Sysmon EID 11) to get creator user
        CALCULATE risk score based on privilege gap (creator vs. executor)
        IF risk score > threshold:
          ALERT
- question: Can we use a graph-based model to identify the malicious pattern of a low-privilege user creating a file that is later executed by a high-privilege account via a vulnerable path?
  context: This question proposes an advanced, context-rich detection method. By modeling system activity as a graph, relationships between entities (users, files, processes) become explicit. A Graph Neural Network (GNN) can learn the complex, multi-step pattern of this attack, distinguishing it from benign activity more effectively than simple rule-based systems. It's particularly powerful for finding subtle variations of the attack that might evade other methods.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Windows Event ID 7036 (Service Start/Stop)
  - Authentication logs and file systems on multi-user systems like terminal servers and workstations. The Windows Registry (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services) on all hosts is the NAI for identifying vulnerable service configurations.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      INGEST Sysmon events into a graph database (nodes: users, files, processes; edges: created, executed_as).
      FEED subgraphs representing user-file-process interactions into a trained GNN.
      ALERT if the GNN classifies a subgraph as matching the malicious pattern:
        (Low-Priv User) -> [created] -> (File in Vuln Path) <- [executed_by] <- (High-Priv Process)
- question: Has a new executable been created in a path that could intercept a critical security service, followed shortly by that service crashing or stopping?
  context: This question focuses on a high-impact scenario an adversary using an unquoted path vulnerability to disable security software. This is a common prerequisite for further malicious activity. By specifically monitoring the services associated with security tools (AV, EDR) and correlating file creation in interceptable paths with service failures, we can generate a high-priority alert for active defense evasion.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Windows Event ID 7034 (Service Crash)
  - Windows Event ID 7036 (Service Stop/Start)
  - SIEM internal logs on data source health
  - File system directories containing security agent installations (e.g., C:\Program Files\Windows Defender). Service Control Manager event logs on all endpoints. Log ingestion dashboards and health monitoring views within the SIEM platform.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      DEFINE watchlist of security service paths.
      SEARCH for file creation (Sysmon EID 11) in an interceptable path for a watchlisted service.
      JOIN on hostname and timeframe (5 mins) with service crash (Win EID 7034) or stop (Win EID 7036) for that service.
      ALERT if both events occur.
- question: Has a host's security log volume dropped anomalously, and if so, was a new executable recently created in a vulnerable path on that host?
  context: An adversary successfully disabling a security agent will cause its telemetry to stop. This question aims to detect this "going dark" behavior. By baselining normal log volume, we can spot significant, unexpected drops. The automatic enrichment step, which checks for recent suspicious file creations, helps to quickly correlate the telemetry loss with a potential root cause—a defense evasion TTP like unquoted path interception.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Windows Event ID 7034 (Service Crash)
  - Windows Event ID 7036 (Service Stop/Start)
  - SIEM internal logs on data source health
  - File system directories containing security agent installations (e.g., C:\Program Files\Windows Defender). Service Control Manager event logs on all endpoints. Log ingestion dashboards and health monitoring views within the SIEM platform.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each host, baseline security log volume per hour.
      ALERT if log volume drops > 3 standard deviations from 30-day average.
      ON ALERT, automatically query host for recent (last 15 mins) file creations (Sysmon EID 11) in vulnerable paths.
      CORRELATE findings for analyst review.
- question: Has the file state of a protected security tool directory been altered in an anomalous way, such as the addition of an unexpected executable?
  context: This question uses an anomaly detection model to protect the integrity of security tool installations. An autoencoder learns what a "normal" security agent directory looks like. When an adversary drops a malicious file (e.g., `Program.exe`) into `C:\` to hijack a service in `C:\Program Files\Security Tool\`, the model will struggle to "reconstruct" this new, unexpected state, resulting in a high error. This error signals a deviation from the norm and a potential compromise.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Windows Event ID 7034 (Service Crash)
  - Windows Event ID 7036 (Service Stop/Start)
  - SIEM internal logs on data source health
  - File system directories containing security agent installations (e.g., C:\Program Files\Windows Defender). Service Control Manager event logs on all endpoints. Log ingestion dashboards and health monitoring views within the SIEM platform.
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      TRAIN autoencoder on file manifests from protected security directories.
      FEED real-time file creation events (Sysmon EID 11) into the model.
      IF (reconstruction error > threshold) for a file creation event in a protected directory's parent path:
        ALERT