name: T1546.001: Change Default File Association
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook investigates the MITRE ATT&CK technique T1546.001, where an adversary modifies file associations to maintain persistence or escalate privileges. This can be achieved by altering registry keys, such as `shell\open\command`, to execute malicious payloads when a user opens a common file type. Investigations should focus on suspicious registry modifications, particularly those involving known threat intelligence indicators, script interpreters, or LOLBins. Additionally, analysts should look for anomalous process creation events, where common document handlers spawn unexpected child processes (like shells or tools in temp directories), and unusual network connections originating from processes spawned by file-opening actions. The goal is to determine if an adversary has hijacked a file extension to execute malicious code, either for long-term access or to gain higher-level permissions on a system.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Can we detect file association registry modifications that match known threat intelligence indicators?
    context: This question aims to identify straightforward instances of this technique where an adversary uses known malicious tools or command patterns. Matching the modifying process or the new command value against a threat intelligence feed provides a high-fidelity alert for known-bad activity, enabling a rapid response.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives (HKEY_CLASSES_ROOT, HKEY_CURRENT_USER) on all Windows endpoints, with a focus on servers hosting critical applications and privileged access workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE (event_id = 4657 OR event_id = 13) AND key_path ENDS_WITH '\shell\open\command' AND (process_image IN threat_intel_list OR new_value IN threat_intel_list)
  - question: Are unusual or rare processes modifying file association registry keys?
    context: Legitimate file association changes are typically performed by common processes like installers or system utilities. Adversaries may use custom or uncommon processes to perform these modifications to evade detection. By baselining normal activity and flagging statistically rare source processes, we can uncover novel threats.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives (HKEY_CLASSES_ROOT, HKEY_CURRENT_USER) on all Windows endpoints, with a focus on servers hosting critical applications and privileged access workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE key_path ENDS_WITH '\shell\open\command' | BASELINE process_image | DETECT rare process_image
  - question: Can a machine learning model identify malicious file association registry modifications?
    context: This question explores a more advanced detection method using a supervised model to score registry modification events. By training a model on features like process name, parent process, and entropy of the new value, we can identify suspicious modifications that may not be caught by signature or rarity-based rules.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives (HKEY_CLASSES_ROOT, HKEY_CURRENT_USER) on all Windows endpoints, with a focus on servers hosting critical applications and privileged access workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE registry_events TO classification_model | FILTER prediction = 'malicious' AND confidence > 0.9
  - question: Are file associations for non-executable files being changed to execute script interpreters or LOLBins?
    context: Adversaries often target common, non-executable file types like .txt or .jpg, as users are more likely to open them without suspicion. This question checks if the command handler for such files is being replaced with a script interpreter (e.g., powershell.exe) or a LOLBin (e.g., rundll32.exe) to execute code.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on all Windows workstations and servers, particularly those used by general users who handle documents and images.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE key_path CONTAINS non_executable_handler AND new_value CONTAINS (powershell.exe, cscript.exe, rundll32.exe)
  - question: Are there statistically anomalous command handlers or high-entropy commands being set for file associations?
    context: Beyond looking for specific LOLBins, this question seeks to find unusual handlers by comparing them against a baseline of legitimate handlers for each file type. Additionally, checking for high command string entropy can reveal obfuscated commands, a common tactic used by adversaries to hide their payload.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on all Windows workstations and servers, particularly those used by general users who handle documents and images.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events | BASELINE command_handler per file_extension | DETECT rare handler OR high_entropy(new_value)
  - question: Can we identify anomalous clusters of file association modifications that deviate from normal software installation patterns?
    context: This question uses unsupervised learning to group file association changes based on features like the file extension and the new handler's properties. Small, isolated clusters often represent anomalous activity that deviates from widespread, legitimate software updates or installations, pointing to a potential targeted attack.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on all Windows workstations and servers, particularly those used by general users who handle documents and images.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE registry_events TO clustering_model | IDENTIFY small or sparse clusters for investigation
  - question: Are common document handling applications spawning script interpreters, LOLBins, or executables in suspicious locations?
    context: This is a behavioral detection that looks for the direct outcome of a hijacked file association. When a user opens a file, the legitimate parent process (e.g., explorer.exe, winword.exe) should not spawn a shell or an executable from a temporary user directory. Such an event is a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows endpoints, with emphasis on workstations where users frequently open documents and other files.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation WHERE parent_process IN (explorer.exe, notepad.exe) AND child_process IN (powershell.exe, cmd.exe) OR child_path IN ('%APPDATA%', 'C:\Users\Public\')
  - question: Are there any rare or never-before-seen parent-child process relationships originating from document handlers?
    context: This question moves from known-bad child processes to statistically rare ones. By baselining all normal child processes for applications like Adobe Reader or Microsoft Word, we can flag any new or infrequent parent-child pairing as a potential anomaly, which could indicate a zero-day exploit or a novel persistence mechanism.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows endpoints, with emphasis on workstations where users frequently open documents and other files.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation | BASELINE parent_child_pairs | DETECT new or rare pairs where parent is document_handler
  - question: Has there been a statistically significant spike in suspicious parent-child process relationships across the enterprise?
    context: While a single anomalous process creation is worth investigating, a sudden increase in these events across many systems could signal a widespread campaign. This question uses time-series analysis to detect such spikes, helping to differentiate isolated incidents from coordinated attacks.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows endpoints, with emphasis on workstations where users frequently open documents and other files.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AGGREGATE suspicious_parent_child_events over time | APPLY anomaly_detection_model | ALERT on significant spikes
  - question: Is a process spawned from a file opening making network connections to destinations on a threat intelligence list?
    context: This question correlates process activity with network data to find malicious callbacks. If a process created by opening a document (e.g., a PDF reader spawning a child process) immediately connects to a known malicious IP or domain, it's a strong indicator that the file association was hijacked for C2 communication.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Process and network logs from Windows endpoints, and network traffic metadata from network sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_creation on process_id WITH network_connections | WHERE parent_process is document_handler AND destination_ip IN threat_intel_list
  - question: Is a process spawned from a file opening making statistically rare or low-reputation network connections?
    context: Attackers may use domains or IPs not yet on threat lists. This question seeks to identify such activity by checking the rarity or reputation of the destination. A connection from a common application's child process to an unpopular domain or a low-reputation IP is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Process and network logs from Windows endpoints, and network traffic metadata from network sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_creation on process_id WITH network_connections | WHERE parent_process is document_handler | CHECK destination_domain_rarity OR destination_ip_reputation
  - question: Can an anomaly detection model identify abnormal network behavior from processes spawned by file openings?
    context: This question uses an unsupervised model to learn the normal network behavior profile for processes. It can detect subtle anomalies that might be missed by rules, such as a process connecting to a non-standard port or sending an unusual amount of data, which could indicate malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Process and network logs from Windows endpoints, and network traffic metadata from network sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE correlated_process_network_events TO anomaly_detection_model | FILTER anomaly_score > threshold
  - question: Are file association command handlers being modified to include strings related to known privilege escalation tools?
    context: This question focuses on detecting privilege escalation attempts by inspecting the new command set in a file association. Adversaries may embed commands or tool names (e.g., `invoke-mimi`, `JuicyPotato.exe`) directly into the registry key, which can be detected with targeted string or regex matching.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on sensitive systems, including Domain Controllers, Certificate Authority servers, and Privileged Access Workstations (PAWs).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE key_path ENDS_WITH '\shell\open\command' AND new_value MATCHES privesc_tool_regex
  - question: Are file association commands being modified to include statistically rare command-line arguments?
    context: To evade signature-based detection, adversaries might use novel or uncommon command-line arguments. By baselining all arguments seen in file association commands, we can flag any modification containing a rare argument or combination of arguments, which may indicate a new or customized privilege escalation technique.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on sensitive systems, including Domain Controllers, Certificate Authority servers, and Privileged Access Workstations (PAWs).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE key_path ENDS_WITH '\shell\open\command' | PARSE arguments from new_value | DETECT rare arguments
  - question: Can a text classification model identify malicious command lines used for privilege escalation in file associations?
    context: This question leverages a supervised model trained to distinguish between benign and malicious command lines. This approach can identify complex or obfuscated commands associated with privilege escalation that might not be caught by simple keyword matching or rarity analysis.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on sensitive systems, including Domain Controllers, Certificate Authority servers, and Privileged Access Workstations (PAWs).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE registry_events.new_value TO text_classification_model | FILTER prediction = 'privesc' AND confidence > 0.9
  - question: Are file associations for privileged file types (.log, .xml) being changed to an executable in a user-writable directory?
    context: An adversary may target file types that are commonly opened by system services running with high privileges. By changing the handler for a file like a .log to an executable they control in a user-writable path (e.g., `%APPDATA%`), they can trick the service into running their code with elevated permissions.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on servers and workstations, with a specific focus on file associations for extensions like .log, .xml, and .ini.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE file_extension IN (.log, .xml, .ini) AND new_handler_path IN ('C:\\Users\\', '%APPDATA%')
  - question: Are file handlers being changed to executables located in statistically rare or user-writable paths?
    context: This question broadens the search beyond a hardcoded list of user directories. By creating a baseline of all legitimate file handler locations across the enterprise, any modification pointing to a new executable in an uncommon directory can be flagged as suspicious, potentially uncovering a planted privilege escalation tool.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on servers and workstations, with a specific focus on file associations for extensions like .log, .xml, and .ini.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events | BASELINE handler_executable_paths | DETECT rare handler_path
  - question: Can we detect clusters of anomalous file association changes, such as unsigned executables in user paths being linked to system file types?
    context: This question uses unsupervised clustering to find suspicious patterns. A cluster of modifications where unsigned executables in user directories are set as handlers for system-related file extensions (like .cfg or .ini) would be highly anomalous and a strong indicator of a privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on servers and workstations, with a specific focus on file associations for extensions like .log, .xml, and .ini.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE registry_events TO clustering_model using features(path, signature, extension) | INVESTIGATE anomalous clusters
  - question: Is a process running as SYSTEM spawning an interactive shell or script interpreter?
    context: Processes running as NT AUTHORITY\SYSTEM should generally not spawn interactive shells like cmd.exe or powershell.exe. This event could indicate that a privileged service was triggered to open a file with a hijacked association, leading to the execution of an adversary's payload with the highest privileges.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows servers and critical workstations, particularly those running services or scheduled tasks as NT AUTHORITY\SYSTEM.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation WHERE user = 'NT AUTHORITY\SYSTEM' AND parent_process IN (services.exe, svchost.exe) AND child_process IN (cmd.exe, powershell.exe)
  - question: Are system-level processes spawning rare or never-before-seen child processes?
    context: This question aims to detect novel privilege escalation techniques by baselining the normal behavior of SYSTEM processes. Any deviation, such as svchost.exe spawning a new or extremely rare child process, is highly suspicious and warrants immediate investigation as it could be the result of a compromised file handler.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows servers and critical workstations, particularly those running services or scheduled tasks as NT AUTHORITY\SYSTEM.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation WHERE user = 'NT AUTHORITY\SYSTEM' | BASELINE parent_child_pairs | DETECT new or rare pairs
  - question: Can we detect anomalous sequences of behavior from privileged processes that indicate a compromise?
    context: A sophisticated attack may involve more than just a single process creation. This question suggests modeling the entire sequence of actions (process creations, file mods, network connections) for privileged processes. A sequence that deviates significantly from the learned norm, such as a service spawning cmd.exe, indicates an anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows servers and critical workstations, particularly those running services or scheduled tasks as NT AUTHORITY\SYSTEM.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE sequence_of_system_process_events TO autoencoder_model | ALERT on high reconstruction_error
  - question: Is a process with a fully elevated token being created by a common document handler?
    context: This question looks for evidence of UAC bypass. When a user opens a file, the parent document handler should not typically spawn a child process that has a full elevated token (i.e., successfully passed a UAC prompt) unless it is a known, legitimate application. An unexpected elevation is a red flag.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows workstations, especially those used by non-administrator users where UAC is enforced.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation WHERE event_id = 4688 AND token_elevation_type = '%%1936' AND parent_process is document_handler AND child_process NOT IN uac_allowlist
  - question: Has there been a statistical increase in UAC elevation events for a specific user or parent process?
    context: A sudden spike in the number of UAC prompts originating from a specific application (like a web browser or PDF reader) or for a particular user could indicate that an adversary is repeatedly triggering a hijacked file association in an attempt to get the user to approve an elevation request.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows workstations, especially those used by non-administrator users where UAC is enforced.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT uac_elevation_events by user, parent_process over time | DETECT statistical spikes from baseline
  - question: Can a machine learning model predict whether a UAC elevation event is suspicious?
    context: This question proposes using a supervised model to score the legitimacy of UAC events. By analyzing features like the parent and child process names and paths, the model can learn to identify suspicious elevation requests, such as those initiated by document handlers attempting to run untrusted code.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs from all Windows workstations, especially those used by non-administrator users where UAC is enforced.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE uac_elevation_events TO classification_model | FILTER prediction = 'suspicious' AND confidence > 0.9