name: T1614.001: System Language Discovery
id: 5a9b1c2d-3e4f-4a5b-8c6d-7e8f9a0b1c2d
description: This playbook addresses the adversary technique of System Language Discovery (T1614.001), a form of reconnaissance used to determine the language and locale settings of a target system. An adversary may perform this action to tailor their subsequent attacks, such as crafting phishing emails in the local language, or to avoid execution on systems in certain regions, a common evasion tactic for some malware. The playbook provides investigative questions to detect this activity through various evidence sources, including command-line execution of tools like `systeminfo` and `wmic` on Windows or `locale` on Linux/macOS; PowerShell script blocks containing cmdlets like `Get-Culture`; and direct reads from Windows Registry keys that store language information. It also covers correlated behaviors, such as discovery actions originating from suspicious parent processes (e.g., Office applications) or occurring as part of a broader sequence of reconnaissance commands.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events that exactly match a known system language discovery command?
    context: This question aims to identify the most direct and high-confidence indicators of system language discovery. Adversaries often use specific, built-in commands like `systeminfo | findstr ...` or `wmic os get locale` to quickly determine the system's language settings. Detecting these exact command strings is a low-false-positive way to find this reconnaissance activity, which could be a precursor to tailoring malware or social engineering attacks based on the target's locale.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - on Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE command_line IN ('systeminfo | findstr /B /C:\"System Locale\"', 'wmic os get locale', 'rundll32.exe ...')
  - question: Have any common system discovery commands been executed by an unusual or rare parent process?
    context: This question helps uncover 'living-off-the-land' attacks where legitimate tools are abused for malicious purposes. While commands like `systeminfo` can be used for normal administration, their execution by an unexpected parent process (like Microsoft Word or a web server process) is highly suspicious. By baselining normal parent-child relationships and alerting on statistical outliers, we can detect when these tools are co-opted by an attacker, for instance, through a malicious document macro or a web shell.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - on Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FIND processes with command_line ~ 'systeminfo' | CALCULATE frequency of parent_process | ALERT if parent_process_frequency < 1st_percentile
  - question: Can a machine learning model identify process creation events that are highly probable to be malicious system language discovery?
    context: This question leverages machine learning to detect more nuanced or previously unseen variations of system language discovery that might evade simple string or statistical checks. By training a model on features like process name, parent process, command-line arguments, and string characteristics, it can learn the subtle patterns of malicious behavior. This approach is effective at identifying obfuscated commands or novel techniques an adversary might use to discover the system language while attempting to blend in with normal activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - on Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SCORE process_creation_events with classification_model | ALERT if probability(malicious_discovery) > 0.9
  - question: Have any PowerShell script blocks been logged that contain keywords related to system language discovery?
    context: This question focuses on detecting system language discovery performed via PowerShell, a powerful tool often abused by attackers. Monitoring for specific cmdlets and .NET calls like `Get-Culture` or `[System.Globalization.CultureInfo]` within script block logs (Event ID 4104) can reveal this activity. It's particularly important to scrutinize obfuscated or non-interactive scripts containing these keywords, as they are less likely to be legitimate administrative actions.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - on All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH powershell_script_block_logs WHERE script_content CONTAINS ('Get-Culture', 'Get-UICulture', '[System.Globalization.CultureInfo]')
  - question: Are there any PowerShell scripts performing language discovery that also show signs of obfuscation based on high entropy?
    context: This question seeks to identify malicious PowerShell activity by measuring the complexity or randomness (Shannon entropy) of the script content. Adversaries often use heavy obfuscation to hide their code from signature-based defenses. A script that both contains language discovery keywords and has an unusually high entropy score compared to a baseline of normal administrative scripts is a strong candidate for malicious activity.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - on All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each script_block with discovery_keywords | CALCULATE shannon_entropy(script_content) | ALERT if entropy > 95th_percentile_baseline
  - question: Has there been an anomalous spike in the rate of PowerShell-based language discovery events on any host?
    context: This question uses time-series analysis to detect abnormal bursts of activity. A sudden increase in the number of PowerShell language discovery events on a single host or across a subnet can indicate automated reconnaissance, such as a script running across multiple compromised machines. By modeling the normal frequency of these events, we can automatically flag significant deviations that warrant investigation.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - on All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR rate of powershell_discovery_events per host | FORECAST expected_rate using ARIMA model | ALERT if observed_rate significantly exceeds forecast
  - question: Has an unauthorized process accessed Windows Registry keys that store system language or locale information?
    context: This question targets another key method for language discovery: directly querying the Windows Registry. By enabling auditing (SACL) on specific keys like `HKLM\\...\\Nls\\Language`, we can log every read access. Since only a few legitimate system processes typically access these keys, we can create an allowlist of known-good processes and alert on any access from an unlisted process, which could indicate a custom malware implant or an abused system utility.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 13
      - on Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_access_events for key IN ('HKLM\\...\\Nls\\Language', 'HKCU\\...\\International') WHERE process_name NOT IN (allowlist)
  - question: Has a rare or low-prevalence process been observed accessing system language registry keys?
    context: This question uses statistical analysis across the enterprise to find suspicious processes. An adversary might use a custom tool or a less common 'living-off-the-land' binary to perform registry queries. By performing a stack count of all processes that access the monitored language keys, we can identify executables that are rare in the environment. Such low-prevalence processes are highly suspicious and warrant investigation.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 13
      - on Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FIND processes accessing language_registry_keys | CALCULATE enterprise-wide prevalence of process_path | ALERT if prevalence < 5th_percentile
  - question: Can an anomaly detection model identify unusual access patterns to system language registry keys?
    context: This question applies machine learning to model normal behavior associated with accessing language-related registry keys. An Isolation Forest or similar model can be trained on features like the process name, its parent, and the user context. The model learns the profile of legitimate access and can then score new events in real-time, flagging any access that deviates from this learned norm as a potential anomaly indicative of malicious reconnaissance.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 13
      - on Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SCORE registry_access_events with anomaly_detection_model | ALERT if event is flagged as anomaly
  - question: Has a process originating from a suspicious source performed a language discovery action shortly after its creation?
    context: This question aims to detect a common attack chain where a user is tricked into opening a malicious document or file. A process spawned from an untrusted parent like an Office application or a script interpreter, which then immediately performs language discovery, is highly suspicious. This correlation rule connects the initial compromise vector (e.g., macro execution) to the subsequent reconnaissance action within a short time window (e.g., 60 seconds).
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Zeek conn.log
      - on User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE process_creation from untrusted_parent (e.g., winword.exe) with subsequent language_discovery_action by same process within 60s
  - question: Does any process have a high risk score based on a combination of suspicious attributes and a subsequent language discovery action?
    context: This question uses a statistical risk-scoring system to prioritize alerts. Instead of relying on a single indicator, this method aggregates evidence by assigning points for various suspicious attributes, such as an unsigned binary, execution from a temporary directory, or having a browser as a parent. When a process accumulates a high score and also performs a language discovery action, it exceeds a risk threshold, triggering a high-fidelity alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Zeek conn.log
      - on User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE risk_score for processes (+10 for unsigned, +15 for temp_path, +30 for discovery_action) | ALERT if total_score > 40
  - question: Can a graph-based analysis model detect anomalous event sequences involving language discovery?
    context: This question leverages graph analytics to visualize and detect complex attack paths that might otherwise be missed. By modeling system events (processes, file writes, network connections) as a graph, we can use algorithms to find suspicious sequences, such as a process spawned from an email attachment that performs language discovery and then establishes a network connection to a newly registered domain. These multi-stage subgraphs represent high-risk activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Zeek conn.log
      - on User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD event graph of processes, files, network_connections | SEARCH for anomalous paths, e.g., email_attachment -> process -> language_discovery -> new_domain_connection
  - question: Has a sequence of multiple distinct reconnaissance commands, including language discovery, been executed in a short time window?
    context: This question aims to identify broader reconnaissance activity by looking for clusters of commands. A single discovery command might be benign, but when combined with other recon TTPs like `whoami`, `ipconfig`, and `net user` in a short period by the same user or process, it strongly indicates a hands-on adversary or an automated script systematically gathering information about the host.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Sysmon Event ID 13
      - Sysmon Event ID 22
      - on Entire enterprise network, with a focus on lateral movement paths between workstations and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH for 3+ distinct recon_TTPs (e.g., whoami, ipconfig, T1614.001) from same ProcessGUID or LogonID within 10 minutes
  - question: Is any user session exhibiting a disproportionately high ratio of discovery commands to total commands?
    context: This question provides a statistical method to identify user sessions that are heavily focused on reconnaissance. By calculating the ratio of discovery/recon commands to all other commands within a session and comparing it to a baseline for that user's role (e.g., administrator vs. standard user), we can flag sessions that deviate from normal behavior. An unusually high ratio suggests the user's activity is not typical work but rather focused information gathering.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Sysmon Event ID 13
      - Sysmon Event ID 22
      - on Entire enterprise network, with a focus on lateral movement paths between workstations and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: GROUP commands by LogonID per hour | CALCULATE ratio of recon_commands to total_commands | ALERT if ratio > 99th_percentile for user_role
  - question: Can a sequence analysis model identify a stream of events that matches a known malicious reconnaissance pattern involving language discovery?
    context: This question applies machine learning to recognize attack sequences as they unfold. A Hidden Markov Model or similar sequence model can be trained on event streams from known attacks. The model learns the probable transitions between attack stages (e.g., from initial execution to language discovery to network enumeration). By feeding live event data into the model, it can identify emerging sequences that have a high probability of being malicious, enabling earlier detection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Sysmon Event ID 13
      - Sysmon Event ID 22
      - on Entire enterprise network, with a focus on lateral movement paths between workstations and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FEED event streams into a trained HMM | ALERT if event sequence matches a high-probability malicious reconnaissance path
  - question: Has the `locale` command been executed on a Linux/macOS host from a suspicious context?
    context: This question targets the primary method for language discovery on non-Windows systems. While the `locale` command is a standard utility, its execution by a web service account (e.g., `www-data`), in a non-interactive shell, or spawned from an unusual parent process is highly suspect. This indicates that an automated process, likely a web shell or other implant, is gathering information about the server's configuration.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - macOS Endpoint Security Framework events
      - on Linux/macOS servers (web servers, database servers), Developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_events for command ~ 'locale' WHERE user is 'www-data' OR shell is non-interactive AND parent_process is not standard_shell
  - question: On Linux/macOS, has the `locale` command been executed by a statistically rare parent process?
    context: This question uses the same parent-child process frequency analysis as on Windows, but applied to Linux and macOS environments. By establishing a baseline of normal parent processes for `locale` (e.g., `bash`, `sshd`), we can alert when it is spawned by a process that is an enterprise-wide outlier (e.g., a web server binary). This is an effective way to spot 'living-off-the-land' behavior in these operating systems.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - macOS Endpoint Security Framework events
      - on Linux/macOS servers (web servers, database servers), Developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ANALYZE parent-child relationships for `locale` command | ESTABLISH baseline of normal parent processes | ALERT if parent process prevalence < 1%
  - question: Can a clustering model identify anomalous command-line executions on Linux/macOS that relate to language discovery?
    context: This question applies unsupervised machine learning to find outliers in command-line activity on Linux/macOS hosts. By vectorizing commands and their arguments (e.g., using TF-IDF) and applying a clustering algorithm like DBSCAN, the model can group normal, repetitive user and system behavior into dense clusters. Any command containing discovery-related strings like 'locale' that does not fall into a known cluster and is instead flagged as a noise point is highly anomalous and warrants investigation.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - macOS Endpoint Security Framework events
      - on Linux/macOS servers (web servers, database servers), Developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CLUSTER command-line data using DBSCAN | FEATURE-IZE commands using TF-IDF | ALERT if any command containing 'locale' is classified as an outlier/noise