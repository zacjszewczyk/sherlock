name: T1048.003: Exfiltration Over Unencrypted Non-C2 Protocol
id: d4e5f6a1-b2c3-4d7e-8f9a-0b1c2d3e4f5a
description: This playbook helps investigate if an adversary is exfiltrating data from the network over unencrypted non-C2 protocols. It looks for indicators such as outbound connections over HTTP or FTP to known malicious destinations, the use of command-line utilities like certutil, bitsadmin, or curl for data uploads, and significant spikes in outbound data volume from internal hosts. The investigation also covers analysis of transferred files for mismatched types or high entropy, sequences of file archiving followed by network connections, and unusual DNS traffic patterns that may indicate data encoding in DNS queries.
type: technique
related:
- TA0010: Exfiltration
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are internal hosts connecting to known malicious domains or IP addresses over unencrypted protocols like HTTP or FTP, or using user-agents associated with exfiltration tools?
  context: This question aims to identify direct communication with adversary infrastructure. By correlating network traffic with threat intelligence, we can detect connections to known command-and-control (C2) servers or exfiltration points. Checking for anomalous User-Agent strings helps uncover specific tools used for data theft, providing a high-confidence indicator of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek ftp.log
  - Egress points of the network (e.g., firewalls, web proxies), DNS resolvers, and Network Taps providing traffic to Zeek sensors.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek conn.log, http.log WHERE (port=80 OR port=21)
      JOIN destination_ip, http_host WITH threat_intel_feed
      ALSO SEARCH Zeek http.log FOR user_agent IN (exfil_tool_user_agents_list)
      ALERT on match
- question: Are internal hosts communicating with rare, newly registered, or otherwise risky domains that could be used for data exfiltration?
  context: Adversaries often use newly created domains for their operations to evade reputation-based blocking. This question focuses on identifying these suspicious domains by analyzing their prevalence within the network, their age, and the reputation of their top-level domain (TLD). Statistically flagging the riskiest domains helps surface potential exfiltration channels that are not yet on threat intelligence lists.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek ftp.log
  - Egress points of the network (e.g., firewalls, web proxies), DNS resolvers, and Network Taps providing traffic to Zeek sensors.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CALCULATE prevalence for each domain in Zeek dns.log
      ENRICH domains with WHOIS data for age
      SCORE domains based on low_prevalence, new_age, risky_tld
      FLAG domains with risk_score in top 5th percentile
- question: Can we predict if a network destination is malicious based on a combination of its characteristics, such as domain structure, prevalence, and associated user-agent?
  context: This question leverages machine learning to build a predictive model that can identify malicious destinations with greater nuance than simple rules. By training a model on various features like domain entropy, TLD, and user-agent rarity, it can learn the subtle patterns of malicious infrastructure and detect novel threats that might otherwise be missed by signature-based or statistical methods.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek ftp.log
  - Egress points of the network (e.g., firewalls, web proxies), DNS resolvers, and Network Taps providing traffic to Zeek sensors.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      EXTRACT features (domain_length, subdomain_entropy, TLD, etc.) from Zeek dns.log, http.log
      INPUT features into trained classification_model
      PREDICT if destination is malicious
      ALERT on malicious prediction
- question: Are known exfiltration commands using utilities like bitsadmin, certutil, curl, or powershell being executed on endpoints?
  context: This question seeks to find direct evidence of an adversary using built-in or common command-line tools to exfiltrate data. Detecting the specific command-line syntax for uploading data via these utilities provides a strong signal that an exfiltration attempt is in progress or has occurred.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Critical servers (e.g., domain controllers, database servers), user workstations, particularly those of privileged users, and servers in the DMZ.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process creation logs FOR command_line MATCHES REGEX ('bitsadmin /transfer', 'certutil -urlcache -f http://', 'powershell ... .UploadFile', 'curl -T ... ftp://')
      ALERT on match
- question: Are processes like powershell.exe being run with unusually long or high-entropy command lines, suggesting obfuscation or embedded data?
  context: Adversaries may obfuscate their scripts or embed data directly into the command line to avoid simple signature-based detection. This question attempts to find these cases by establishing a baseline for normal command-line length and entropy for common processes and then flagging significant deviations, which could indicate malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Critical servers (e.g., domain controllers, database servers), user workstations, particularly those of privileged users, and servers in the DMZ.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each process_name, CALCULATE baseline for command_line_length and command_line_entropy
      SEARCH process creation logs
      FLAG instances where entropy > (mean + 3 * stdev) OR length is in top 99th percentile
- question: Are there anomalous parent-child process relationships, such as a non-networking process spawning a networking utility to send data?
  context: Legitimate software behavior typically follows predictable process execution chains. This question aims to detect anomalies in these chains, such as an archival tool like 7-Zip spawning a networking tool like curl. Such a sequence is highly irregular and strongly suggests a staging-then-exfiltration workflow used by adversaries.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Critical servers (e.g., domain controllers, database servers), user workstations, particularly those of privileged users, and servers in the DMZ.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      INPUT process relationship sequences (parent_process, child_process, child_command_line) into trained sequence_classification_model
      ALERT on anomalous sequence prediction (e.g., 7z.exe -> curl.exe)
- question: Are there any single large file transfers (e.g., >100MB) over HTTP or FTP from user workstations to non-corporate IP addresses?
  context: While not always malicious, the transfer of an unusually large file from a standard workstation to an external, non-sanctioned destination warrants investigation. This question sets a simple, high-volume threshold to catch blatant data theft, filtering out known cloud services to reduce false positives.
  answer_sources:
  - Zeek conn.log
  - Network egress points, internal network segments containing sensitive data repositories, and Data Loss Prevention (DLP) systems at the network edge.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek conn.log WHERE protocol IN ('http', 'ftp') AND source_ip is workstation AND destination_ip is NOT corporate
      FILTER OUT connections to known_cloud_services
      ALERT where connection_bytes > 100MB
- question: Are any hosts exhibiting a sudden, significant increase in outbound data volume compared to their own history or their peer group?
  context: A sudden spike in outbound traffic from a host can be a key indicator of data exfiltration. This question focuses on detecting such anomalies by comparing a host's daily traffic against its own historical baseline and against the baseline of its peers (e.g., other hosts in the same department). This dual comparison helps identify both individual and group-level deviations from normal behavior.
  answer_sources:
  - Zeek conn.log
  - Network egress points, internal network segments containing sensitive data repositories, and Data Loss Prevention (DLP) systems at the network edge.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host, CALCULATE 30-day rolling baseline of outbound_bytes
      GROUP hosts by role for peer comparison
      ALERT if daily_outbound_bytes > 99th percentile of host_baseline
      OR if byte_ratio is > 3 stdev from peer_group_baseline
- question: Is a host's outbound data volume deviating significantly from its forecasted pattern, as determined by a time-series model?
  context: This question uses a more sophisticated, predictive approach to anomaly detection. By training a time-series model on a host's normal traffic patterns, we can forecast its expected data volume. An alert is generated if the actual traffic significantly exceeds the forecasted amount, indicating a statistically unlikely event that could be an exfiltration attempt.
  answer_sources:
  - Zeek conn.log
  - Network egress points, internal network segments containing sensitive data repositories, and Data Loss Prevention (DLP) systems at the network edge.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host, TRAIN time-series model on historical outbound_bytes
      FORECAST expected volume and confidence_interval for next 24 hours
      ALERT if actual_volume significantly exceeds forecasted_confidence_interval
- question: Are files being transferred with mismatched MIME types and extensions, or do HTTP POST requests contain magic bytes for archive formats?
  context: Adversaries may try to disguise exfiltrated data by giving files misleading extensions (e.g., naming an executable `.txt`). This question aims to uncover this deception by checking for mismatches between a file's extension and its actual type as identified by the network sensor. It also looks for file archive headers within HTTP POST requests, which is a common method for smuggling compressed data.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Network tap points capable of deep packet inspection (DPI), web proxies, and email gateways.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek files.log WHERE mime_type='application/octet-stream' AND file_extension IN ('.txt', '.html', '.csv')
      ALSO SEARCH Zeek http.log POST bodies for magic_bytes of ('ZIP', '7z')
      ALERT on match
- question: Are files with extensions for uncompressed data (like .txt) being transferred with unusually high entropy, suggesting prior compression or encryption?
  context: A text file should have low entropy, while a compressed or encrypted file will have high entropy. This question looks for files that claim to be simple text or documents but exhibit the high entropy characteristic of compressed or encrypted data. This is a strong indicator that data is being staged and disguised before exfiltration.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Network tap points capable of deep packet inspection (DPI), web proxies, and email gateways.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ESTABLISH baseline entropy ranges for common file extensions (.txt, .docx, etc.)
      SEARCH Zeek files.log for transferred files
      ALERT if file_entropy is anomalously high for its extension (e.g., > 7.5 for a .txt file)
- question: Can we classify HTTP POST requests as suspicious based on content features like size, entropy, and character distribution?
  context: This question applies machine learning to analyze the content of HTTP POST requests, which are often used for data exfiltration. By training a model on features like the size of the POST body, its entropy, and the distribution of characters (e.g., looking for Base64-encoded data), we can automatically classify requests as benign or potentially malicious.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Network tap points capable of deep packet inspection (DPI), web proxies, and email gateways.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      EXTRACT features (size, entropy, char_ratio, base64_pattern) from HTTP POST bodies
      INPUT features into trained classification_model
      PREDICT if POST request is exfiltration
      ALERT on positive prediction
- question: Is there a sequence of file archiving followed by a network connection from a non-browser process on the same host within a short time frame?
  context: A common adversary pattern is to collect and compress data into an archive and then immediately upload it. This question uses a correlation rule to detect this specific sequence of events—an archiving tool running, followed shortly by a network connection from an unexpected application—to identify this "stage and exfiltrate" behavior.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Zeek conn.log
  - Endpoint Detection and Response (EDR) agents on hosts, Security Information and Event Management (SIEM) correlation engine, and central log aggregators for host and network data.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CORRELATE events on same host within 10 minutes:
      1. process_create for ('7z.exe', 'rar.exe', 'tar.exe')
      2. network_connect from non-browser process to external_ip on port (21, 80, 53)
      ALERT on sequence match
- question: Are rare three-event process chains (e.g., cmd.exe -> 7z.a.exe -> ftp.exe) occurring on endpoints?
  context: This question focuses on identifying highly unusual and suspicious chains of process execution. By profiling the frequency of all three-step process sequences on endpoints, we can statistically identify rare chains. A sequence involving command shells, archiving tools, and networking utilities is extremely uncommon in benign activity and is a strong indicator of a hands-on-keyboard adversary.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Zeek conn.log
  - Endpoint Detection and Response (EDR) agents on hosts, Security Information and Event Management (SIEM) correlation engine, and central log aggregators for host and network data.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      PROFILE frequency of all 3-event process chains (P1 -> P2 -> P3_network_connection)
      SCORE each sequence based on its inverse frequency
      ALERT on sequences with risk_score > 99.9th percentile
- question: Does a graph-based model of host activity show a new, short path from a sensitive file to an external network destination via an archiving tool?
  context: This question conceptualizes host activity as a graph of interconnected objects (processes, files, network connections). By training a model on what normal activity graphs look like, it can detect new, anomalous subgraphs. A subgraph showing a direct link from a sensitive file to an archive process and then to an external network destination represents a high-fidelity visualization of data exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Zeek conn.log
  - Endpoint Detection and Response (EDR) agents on hosts, Security Information and Event Management (SIEM) correlation engine, and central log aggregators for host and network data.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MODEL host activity as a graph (nodes: process, file, ip; edges: interactions)
      TRAIN anomaly detection model on benign graphs
      FLAG new subgraphs showing path: sensitive_file -> archive_process -> external_ip
- question: Are there DNS queries with unusually long subdomains or patterns matching Base64/Hex encoding, especially for TXT records?
  context: Adversaries can exfiltrate data by encoding it into a series of DNS queries, a technique known as DNS tunneling. This question looks for the tell-tale signs of this technique, such as extremely long subdomains (which contain the encoded data) or data patterns that resemble Base64 or Hexadecimal encoding, particularly in TXT record queries which can hold more data.
  answer_sources:
  - Zeek dns.log
  - Internal and external corporate DNS resolvers, network taps monitoring DNS traffic.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek dns.log WHERE query_length > 100
      OR WHERE subdomain MATCHES REGEX for Base64/Hex patterns
      ALERT on match, especially for TXT record types
- question: Is any host sending an anomalous volume of DNS queries, an unusual ratio of TXT queries, or queries with high-entropy subdomains?
  context: Beyond the content of a single query, the overall pattern of DNS traffic from a host can indicate tunneling. This question looks for statistical anomalies, such as a host suddenly sending hundreds of queries per minute, a shift towards using TXT records instead of A records, or a jump in the average entropy of subdomains, all of which are characteristic of DNS exfiltration tools.
  answer_sources:
  - Zeek dns.log
  - Internal and external corporate DNS resolvers, network taps monitoring DNS traffic.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host, CALCULATE baseline for dns_queries_per_hour and query_type_ratio
      ALERT if host_queries > 99th percentile of baseline
      OR if TXT_to_A_ratio is a statistical outlier
      OR if subdomain_entropy > 4.5
- question: Can a classifier identify DNS tunneling based on features like query length, subdomain entropy, and query type?
  context: This question applies machine learning to create a robust detector for DNS tunneling. By training a classifier on a labeled dataset of both legitimate and malicious DNS traffic, the model can learn to distinguish between them based on a combination of features like query length, entropy, and character patterns. This provides a more accurate and adaptable detection method than static rules or thresholds.
  answer_sources:
  - Zeek dns.log
  - Internal and external corporate DNS resolvers, network taps monitoring DNS traffic.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      EXTRACT features (query_length, subdomain_entropy, query_type, etc.) from Zeek dns.log
      INPUT features into trained classification_model for DNS tunneling
      PREDICT if query is part of a tunnel
      ALERT on positive prediction