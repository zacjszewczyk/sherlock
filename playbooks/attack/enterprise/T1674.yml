name: T1674: Input Injection
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is executing commands or code via input injection on enterprise systems. It provides guidance on detecting known malicious indicators in command lines, DNS queries, and HTTP requests; identifying suspicious parent-child process relationships where user-facing applications spawn command interpreters; analyzing command lines for high entropy, excessive length, or obfuscation; flagging rapid, automated process creation indicative of scripting; and spotting web requests that load unauthorized external JavaScript.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process command lines, DNS queries, or HTTP requests that match known-malicious IOCs associated with input injection?
    context: This question aims to identify direct evidence of malicious activity by comparing live system and network data against a curated list of threat intelligence. A match indicates a high probability that a known attack pattern is being used, providing a strong starting point for an investigation into a potential input injection attack.
    answer_sources:
      - Windows Event ID 4688
      - Zeek dns.log
      - Zeek http.log
      - Endpoint Fleet
      - DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_events, dns_logs, http_logs
          JOIN with threat_intelligence_feed WHERE tag = "Input Injection"
          ON process_events.CommandLine = ioc.value OR
             dns_logs.query = ioc.value OR
             http_logs.host = ioc.value OR
             http_logs.uri CONTAINS ioc.value
          RETURN matching_events
  - question: Has there been an anomalous spike in the number of IOC matches related to input injection, suggesting a widespread attack?
    context: This question moves beyond single IOC matches to look for coordinated, large-scale attacks. By establishing a baseline of 'normal' IOC hit rates, it can detect significant deviations that might be missed when looking at events individually. A sudden surge exceeding three standard deviations is a strong statistical indicator of an active, widespread campaign.
    answer_sources:
      - Windows Event ID 4688
      - Zeek dns.log
      - Zeek http.log
      - Endpoint Fleet
      - DNS Resolvers
      - Network Egress Points
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation (run over 30 days)
          CALCULATE hourly_count_of_ioc_matches
          COMPUTE 95th_percentile(hourly_count) as p95
          COMPUTE stdev(hourly_count) as std

          // Real-time Alerting
          IF current_hourly_count > (p95 + 3 * std)
          THEN ALERT "Anomalous spike in Input Injection IOC matches"
  - question: Can we use machine learning to identify potentially malicious domains or command lines that resemble, but do not exactly match, known input injection IOCs?
    context: This question seeks to proactively identify novel or mutated threats that would be missed by signature-based IOC matching. By training a model on the characteristics of known malicious and benign indicators, it can assign a probability score to new, unseen data. This allows analysts to focus on high-probability items that exhibit malicious traits, even without a direct IOC match.
    answer_sources:
      - Windows Event ID 4688
      - Zeek dns.log
      - Zeek http.log
      - Endpoint Fleet
      - DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training
          VECTORIZE domains with features (TLD, entropy, length, n-grams)
          VECTORIZE command_lines with features (arg_count, special_chars, keywords)
          TRAIN classification_model on labeled_data

          // Scoring
          FOR each new domain, command_line
            PREDICT malicious_probability using classification_model
            IF probability > threshold
            THEN ALERT "High probability malicious indicator detected"
  - question: Are common user-facing applications spawning command-line interpreters or scripting engines?
    context: This question focuses on detecting a common abuse pattern where adversaries exploit vulnerabilities or features in everyday applications (like web browsers or email clients) to launch malicious code via a command shell or script engine. This behavior is highly anomalous, as these applications typically do not need to spawn such processes during normal operation.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Terminal Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE parent_process_name IN ('chrome.exe', 'iexplore.exe', 'outlook.exe', 'winword.exe')
          AND child_process_name IN ('powershell.exe', 'cmd.exe', 'wscript.exe', 'cscript.exe')
          RETURN high_priority_alert
  - question: Have any user-facing applications spawned a new or rare child process that has not been seen historically?
    context: This question aims to detect novel execution patterns by baselining normal process behavior. While some parent-child relationships are always suspicious (like outlook.exe -> cmd.exe), an adversary might use a less common application to launch a legitimate-looking, but out-of-place, child process. Flagging rare or first-seen relationships helps uncover these stealthier techniques.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Terminal Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Creation (run over 90 days)
          FOR each parent_process
            CREATE historical_set_of_child_processes
            COUNT frequency of each parent_child_pair

          // Real-time Detection
          FOR each new parent_child_pair
            IF pair_count < 5 enterprise_wide
            THEN ALERT "Rare parent-child process relationship observed"
  - question: Are there any anomalous process execution chains that deviate from normal user behavior?
    context: This question uses a more advanced, graph-based approach to model entire user sessions as a sequence of process creations. Instead of looking at individual parent-child pairs, this method analyzes the structure of the entire process tree. It can detect complex attack chains that might appear normal in isolation but are anomalous when viewed in the context of the full session graph.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Terminal Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training
          REPRESENT user_sessions as process_lineage_graphs
          TRAIN anomaly_detection_model on normal_session_graphs

          // Real-time Analysis
          FOR each new user_session_graph
            IF model identifies anomalous_subgraph
            THEN ALERT "Anomalous process lineage detected"
  - question: Are there any command-line executions containing high-fidelity strings associated with obfuscation or remote execution?
    context: This question looks for specific, known-bad strings within command lines that are strong indicators of malicious intent. Patterns like '-EncodedCommand' in PowerShell or 'DownloadString' are frequently used by adversaries to hide their code and download additional payloads. This is a high-confidence, signature-based check for common input injection follow-on activity.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE command_line CONTAINS ('-EncodedCommand', '-e', '-enc', 'IEX(New-Object Net.WebClient).DownloadString', '(New-Object System.Net.WebClient).DownloadFile')
          RETURN matching_events
  - question: Are there any command-line executions with unusually high length or character entropy?
    context: This question is designed to find obfuscated or complex commands that deviate from normal system and user activity. Adversaries often use long, randomized, or encoded command lines to bypass simple keyword-based detections. By establishing a baseline for command line length and entropy (randomness) for each process, we can flag outliers that are statistically likely to be malicious.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation (run over 90 days)
          FOR each process_name
            COMPUTE 99th_percentile(command_line_length) as p99_length
            COMPUTE 99th_percentile(command_line_entropy) as p99_entropy

          // Real-time Detection
          FOR each new process_event
            IF command_line_length > p99_length OR command_line_entropy > p99_entropy
            THEN ALERT "Anomalous command line detected" and attempt_base64_decode
  - question: Can we identify novel or unusual command-line structures using unsupervised clustering?
    context: This question seeks to find malicious commands without relying on pre-defined signatures or baselines. By grouping similar commands together, outliers and small, distinct clusters often represent anomalous or malicious activity. This technique is effective at discovering new attack patterns that do not conform to any previously seen benign behavior.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Data Preparation
          VECTORIZE command_lines using TF-IDF and features (length, entropy, etc.)

          // Clustering
          APPLY DBSCAN clustering algorithm to vectorized_data
          INVESTIGATE points classified as noise/outliers
          INVESTIGATE clusters with very few members
  - question: Is there evidence of automated process execution, such as a burst of processes created in a very short time frame?
    context: This question aims to detect activity that is too fast for a human user, which is a strong indicator of an automated script or program running on the system. A rule that triggers when a single parent process spawns multiple child processes in under a second can effectively catch malicious scripts spawned by an initial input injection payload.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Point-of-Sale Terminals
      - Systems with frequent physical access
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          GROUP_BY ParentProcessID within 1_second_window
          WHERE count(child_processes) > 3
          RETURN ParentProcessID and child_process_details
  - question: Are any users creating processes at a rate that is abnormally fast compared to their own historical behavior?
    context: This question personalizes anomaly detection by creating a behavioral baseline for each individual user. An analyst who frequently uses the command line will have a different 'normal' rate of process creation than a typical office user. By comparing a user's current activity to their own past behavior, this method can more accurately identify when a user's account may be compromised and used for automated attacks.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Point-of-Sale Terminals
      - Systems with frequent physical access
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation
          FOR each user
            CALCULATE time_deltas between consecutive process_creations
            COMPUTE 1st_percentile(time_deltas) as p1_delta

          // Real-time Detection
          FOR each new user_session
            CALCULATE average_time_delta for process_creations in session
            IF average_time_delta < p1_delta
            THEN ALERT "Anomalously fast process creation for user"
  - question: Has there been a sudden, sharp spike in the rate of process creations on any host or by any user?
    context: This question uses time-series analysis to detect sudden bursts of activity that deviate from the normal rhythm of a system or user. This is particularly useful for detecting 'script-bomb' style attacks where an input injection vulnerability is used to trigger a massive number of processes at once. An LSTM autoencoder or similar model can learn the normal cadence and flag these sharp deviations.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Point-of-Sale Terminals
      - Systems with frequent physical access
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training
          TRAIN time-series_anomaly_model on historical process_creation_rate per host/user

          // Real-time Detection
          FOR each new time_interval
            IF current_process_creation_rate creates high anomaly_score
            THEN ALERT "Sudden spike in process creation rate detected"
  - question: Are high-value web applications loading JavaScript from unauthorized, external domains?
    context: This question helps detect a form of input injection known as Cross-Site Scripting (XSS), where an attacker injects malicious script from an external source into a trusted website. By maintaining an allowlist of legitimate script sources for high-value applications, we can easily spot and alert when a page attempts to load a .js file from an unknown and potentially malicious domain.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Egress Points
      - Web Proxies
      - DMZ
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH http_requests where resource ENDS_WITH '.js'
          WHERE 'Referer' header domain is a high_value_domain
          AND 'Host' header domain is NOT in script_source_allowlist
          RETURN high_priority_alert
  - question: Is a user's browsing session on a high-value application loading scripts from a set of domains that is unusual for that application?
    context: This question provides a dynamic way to detect anomalous script loading without a manually curated allowlist. It learns which external domains an application normally sources scripts from and then flags user sessions that deviate from this norm. A low Jaccard similarity score indicates that the current session is loading scripts from a very different set of domains than usual, which could be a sign of a compromised session or a new XSS attack.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Egress Points
      - Web Proxies
      - DMZ
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Creation (run over 90 days)
          FOR each high_value_app
            CREATE historical_set_of_script_source_domains

          // Real-time Detection
          FOR each new user_session on high_value_app
            CREATE current_set_of_script_source_domains
            CALCULATE jaccard_similarity(current_set, historical_set)
            IF similarity_score < 0.7
            THEN ALERT "Anomalous script sourcing detected for application"
  - question: Are there anomalous POST requests originating from high-value web applications?
    context: This question aims to detect the potential data exfiltration or manipulation phase following a successful JavaScript injection. After injecting malicious script, an attacker might use it to send data from the user's browser to an attacker-controlled server via an HTTP POST request. A machine learning model can be trained to recognize what normal POST requests look like for a given application and flag those with unusual characteristics, such as abnormal body length or content type.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Egress Points
      - Web Proxies
      - DMZ
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training
          VECTORIZE http_post_requests with features (body_len, content_type, user_agent, etc.)
          TRAIN classification_model on labeled (benign/malicious) POST requests

          // Real-time Scoring
          FOR each new POST from high_value_app
            PREDICT malicious_probability using model
            IF probability > threshold
            THEN ALERT "Anomalous POST request detected, potential data exfiltration"