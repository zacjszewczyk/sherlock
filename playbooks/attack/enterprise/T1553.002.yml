name: T1553.002: Code Signing
id: f8a5b2c1-d4e3-4f1a-b0c9-e7d6f5a4b3e2
description: This playbook helps investigate whether an adversary is leveraging valid or malicious code signing certificates to bypass execution controls and evade defenses. It focuses on identifying suspicious code signing activity by examining several indicators: execution of binaries whose file hash or certificate thumbprint appears on threat intelligence feeds; binaries signed by unapproved or impersonated certificate authorities; the use of self-signed or newly-issued certificates not on an internal allow-list; signed binaries executing from unusual or user-writable locations; signed processes performing suspicious follow-on actions like spawning unsigned children or connecting to malicious domains; and signed binaries exhibiting coordinated, widespread execution across the enterprise.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process executing from a binary whose file hash or certificate thumbprint matches a known malicious indicator from a threat intelligence feed?
  context: This question aims to detect the most direct evidence of malicious activity by cross-referencing executed files and their signing certificates against high-confidence threat intelligence. A match indicates that a known malicious tool or a tool signed with a compromised/revoked certificate is running in the environment, which requires immediate investigation to prevent further compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Centralized log aggregator (SIEM/Data Lake) containing endpoint process execution logs and network file transfer logs from all enterprise assets.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events OR file_creation_events
      WHERE file_hash IN (threat_intel_hashes) OR cert_thumbprint IN (threat_intel_certs)
      RETURN hostname, process_name, file_hash, cert_thumbprint
- question: Has a process been signed with a certificate that has a low prevalence internally but is associated with malicious activity externally?
  context: Legitimate software certificates are typically widespread across an enterprise. Adversaries may use certificates that are rare or unique to their campaign. This question helps identify these outliers by comparing the internal footprint of a certificate (how many systems it's on) with external threat intelligence. A certificate seen on few internal systems but flagged as malicious externally is highly suspect.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Centralized log aggregator (SIEM/Data Lake) containing endpoint process execution logs and network file transfer logs from all enterprise assets.
  range: last 30 days
  queries:
  - tech: pseudocode
    query: |
      prevalence = SEARCH process_creation_events (last 30 days) GROUP BY cert_thumbprint | COUNT(DISTINCT hostname)
      SEARCH process_creation_events
      WHERE cert_thumbprint IN (threat_intel_certs) AND prevalence[cert_thumbprint] < threshold
      RETURN hostname, process_name, cert_thumbprint, prevalence
- question: Does a signed process execution have a high risk score based on a machine learning model that considers threat intelligence, prevalence, and binary metadata?
  context: This question moves beyond simple rule-based detection to a more sophisticated, data-driven approach. By training a classification model on various features (like threat intel matches, internal prevalence, and file entropy), it's possible to score every signed execution for its likelihood of being malicious. This helps uncover threats that might not trigger a single high-fidelity rule but appear suspicious when multiple weaker signals are combined.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Centralized log aggregator (SIEM/Data Lake) containing endpoint process execution logs and network file transfer logs from all enterprise assets.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH signed_execution_events
      PIPE to ML_model(features=[isOnThreatIntel, certPrevalence, hashPrevalence, entropy])
      WHERE risk_score > threshold
      RETURN hostname, process_name, cert_subject, risk_score
- question: Is a process executing that is signed by a Certificate Authority (CA) not on the enterprise-approved allow-list?
  context: Enterprises typically trust a specific set of CAs. Adversaries often obtain certificates from less common or untrusted CAs to sign their malware. This question helps enforce digital trust policies by identifying any software signed by an unfamiliar or explicitly disallowed issuer, which could indicate an unauthorized or malicious application.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 3002
  - Windows Event ID 3004
  - Endpoint devices and servers, particularly assets where software installation is not strictly controlled by centralized management tools like SCCM or Jamf.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events OR code_integrity_logs
      WHERE certificate_issuer NOT IN (approved_ca_list)
      RETURN hostname, process_name, certificate_issuer, certificate_subject
- question: Is a process running from a binary signed with a certificate subject name that closely mimics a legitimate publisher?
  context: To deceive users and analysts, adversaries often register certificate subject names that are slight misspellings or variations of legitimate companies (e.g., "MÃ­crosoft" vs. "Microsoft"). This question uses string similarity algorithms to detect such typosquatting attempts, flagging certificates that look legitimate at a glance but are not exact matches to a known-good list.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 3002
  - Windows Event ID 3004
  - Endpoint devices and servers, particularly assets where software installation is not strictly controlled by centralized management tools like SCCM or Jamf.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events OR code_integrity_logs
      WHERE certificate_subject NOT IN (legitimate_subject_list)
      CALCULATE similarity = jaro_winkler(certificate_subject, legitimate_subject_list)
      WHERE max(similarity) > 0.85
      RETURN hostname, process_name, certificate_subject, highest_matching_subject
- question: Does a certificate's 'Issuer' or 'Subject' string exhibit linguistic characteristics identified as suspicious by an NLP model?
  context: Beyond simple string matching, this question applies Natural Language Processing to analyze the structure and content of certificate issuer and subject strings. The model can learn subtle patterns, such as unusual character sequences, low-quality grammar, or high entropy, that are common in malicious certificates but absent in legitimate ones, allowing for the detection of more sophisticated impersonation attempts.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 3002
  - Windows Event ID 3004
  - Endpoint devices and servers, particularly assets where software installation is not strictly controlled by centralized management tools like SCCM or Jamf.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events OR code_integrity_logs
      PIPE to NLP_model(features=[issuer_string, subject_string])
      WHERE is_suspicious == true
      RETURN hostname, process_name, certificate_issuer, certificate_subject
- question: Is a process executing from a binary that is self-signed and not on the established allow-list for internally developed applications?
  context: While self-signed certificates are common for internal tools, adversaries also use them to sign malware. This question aims to differentiate between legitimate and malicious use by maintaining an allow-list of known-good self-signed applications. Any self-signed binary not on this list is considered suspicious and requires investigation.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All corporate endpoints and servers, internal development environments, and code signing infrastructure where self-signed applications are created and used.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE is_self_signed == true AND cert_thumbprint NOT IN (self_signed_allowlist)
      RETURN hostname, process_name, file_path, cert_thumbprint
- question: Is a process signed with an unusually new certificate (e.g., created within the last 14 days)?
  context: Adversaries often generate new certificates for each campaign to evade blocklists based on previously used ones. Legitimate software certificates, in contrast, typically have a longer history. This question identifies executions involving "freshly-minted" certificates, which are statistically more likely to be associated with malicious activity.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All corporate endpoints and servers, internal development environments, and code signing infrastructure where self-signed applications are created and used.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      CALCULATE cert_age = now() - cert_valid_from_date
      WHERE cert_age < 14 days
      RETURN hostname, process_name, cert_subject, cert_age
- question: Does a signed execution event exhibit an anomalous combination of features, such as being self-signed, having a new certificate, and running from an unusual path, as identified by an unsupervised model?
  context: Some malicious activities don't trigger any single specific rule but are anomalous when viewed in combination. This question uses an unsupervised machine learning model (like an Isolation Forest) to find these "unusual combinations" of certificate and process attributes. This approach can detect novel threats without prior knowledge or labeled data.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All corporate endpoints and servers, internal development environments, and code signing infrastructure where self-signed applications are created and used.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      PIPE to anomaly_detection_model(features=[certAge, isSelfSigned, issuerPrevalence, processPath])
      WHERE anomaly_score > threshold
      RETURN hostname, process_name, anomaly_score, contributing_features
- question: Is a signed process executing from a non-standard or user-writable directory like Downloads, AppData, or PerfLogs?
  context: Legitimate software is typically installed in protected directories like 'Program Files'. Adversaries often drop and execute payloads from user-writable or temporary locations to bypass administrative privilege requirements. This question detects this behavior by alerting when a signed binary runs from a location commonly abused by malware.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - User workstations and multi-user servers, focusing on temporary directories, user profiles, shared folders, and other world-writable locations.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE process_path MATCHES (suspicious_path_list)
      AND process_name NOT IN (installer_updater_exceptions)
      RETURN hostname, username, process_name, process_path, cert_subject
- question: Is a legitimately signed process executing from an unusual file path or being spawned by an abnormal parent process, based on historical baselines?
  context: Even legitimate software can be abused. This question aims to detect when a trusted, signed application is run in an unusual context, which could indicate process injection or that the binary was moved to a different location for malicious purposes. By baselining normal behavior for each certificate subject, any deviation can be flagged as a potential threat.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - User workstations and multi-user servers, focusing on temporary directories, user profiles, shared folders, and other world-writable locations.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE cert_subject IS NOT NULL
      AND (process_path NOT IN baseline_paths[cert_subject] OR parent_process NOT IN baseline_parents[cert_subject])
      RETURN hostname, process_name, parent_process, process_path, cert_subject
- question: Is a signed execution event flagged as suspicious by a machine learning model that analyzes its contextual features like file path and parent process?
  context: This question uses a supervised machine learning model to learn the complex rules that differentiate between normal and suspicious execution contexts for signed binaries. By training on features like the file path, parent process, and whether the directory is user-writable, the model can make more accurate and nuanced decisions than static rules alone.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - User workstations and multi-user servers, focusing on temporary directories, user profiles, shared folders, and other world-writable locations.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      PIPE to context_classifier_model(features=[filePath, parentProcess, isUserWritable, certSubject])
      WHERE prediction == 'suspicious'
      RETURN hostname, process_name, parent_process, filePath, certSubject
- question: Did a signed process perform any suspicious follow-on actions within 60 seconds of execution, such as spawning an unsigned child, modifying a persistence key, or connecting to a known-bad IP?
  context: Adversaries often use a signed "dropper" to gain initial execution and then launch a second, unsigned stage or perform other malicious actions. This question uses a time-based correlation search to detect this common pattern, linking the initial trusted execution to subsequent untrusted or suspicious activities.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 22
  - Zeek conn.log
  - Zeek dns.log
  - All corporate endpoints, DNS servers, and network egress points (firewalls/proxies) where process, registry, and network activity can be correlated.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEQUENCE by process_guid within 60s
        [SEARCH process_creation_events WHERE is_signed == true]
        [SEARCH process_creation_events WHERE is_signed == false]
      OR
        [SEARCH registry_events WHERE registry_key MATCHES (persistence_keys)]
      OR
        [SEARCH network_events WHERE dest_ip IN (threat_intel_ips)]
      RETURN initial_signed_process, subsequent_suspicious_action
- question: Did a signed process make a DNS query for a high-entropy or newly registered domain, or spawn a statistically unusual number of unsigned child processes?
  context: This question looks for secondary indicators of compromise originating from a signed process. High-entropy or newly registered domains are often associated with command-and-control (C2) infrastructure used in Domain Generation Algorithms (DGA). Similarly, a signed process spawning an abnormal number of unsigned children deviates from expected behavior and could indicate a malware unpacker or loader.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 22
  - Zeek conn.log
  - Zeek dns.log
  - All corporate endpoints, DNS servers, and network egress points (firewalls/proxies) where process, registry, and network activity can be correlated.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH dns_query_events
      WHERE source_process_is_signed == true
      CALCULATE entropy = shannon_entropy(query_name), age = domain_age(query_name)
      WHERE entropy > threshold OR age < 30 days
- question: Does a sequence of activities originating from a signed process form a pattern identified as malicious by a Graph Neural Network (GNN)?
  context: This question represents an advanced detection method that views process activity as an interconnected graph. A GNN can learn the complex, multi-step relationships between processes, files, and network connections that constitute an attack chain (e.g., signed dropper -> creates file -> launches unsigned payload -> connects to C2). This allows for the detection of the entire malicious sequence rather than just its individual components.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 22
  - Zeek conn.log
  - Zeek dns.log
  - All corporate endpoints, DNS servers, and network egress points (firewalls/proxies) where process, registry, and network activity can be correlated.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH for subgraphs originating from signed_process_nodes
      PIPE to GNN_model
      WHERE subgraph_risk_score > threshold
      RETURN subgraph_visualization, risk_score, contributing_nodes_and_edges
- question: Is a non-allowlisted signed binary executing on an unusually large number of hosts within a short time frame (e.g., >20 hosts in 5 minutes)?
  context: This question helps detect the rapid, widespread deployment of a potentially malicious tool. While legitimate software updates can cause this pattern, an unknown signed binary suddenly appearing on many systems simultaneously is a strong indicator of a coordinated attack or the initial stage of a ransomware outbreak.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Centralized logging platform (e.g., SIEM, data lake) containing aggregated process execution logs from all enterprise endpoints and servers.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE file_hash NOT IN (enterprise_software_allowlist)
      TIMESPAN=5m | GROUP BY file_hash | COUNT(DISTINCT hostname) as host_count
      WHERE host_count > 20
      RETURN file_hash, host_count
- question: Is a signed binary executing across multiple hosts with near-perfect time synchronization, suggesting automated execution?
  context: Adversaries often use automated tools (like PsExec) to execute payloads across multiple systems at once. This results in execution timestamps that are very close together. This question identifies this behavior by calculating the standard deviation of timestamps for a given executable across hosts. A very low standard deviation points to machine-speed execution rather than human-initiated actions.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Centralized logging platform (e.g., SIEM, data lake) containing aggregated process execution logs from all enterprise endpoints and servers.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      SEARCH process_creation_events
      TIMESPAN=1h | GROUP BY file_hash
      COLLECT timestamps, COUNT(DISTINCT hostname) as host_count
      WHERE host_count >= 3
      CALCULATE stdev = stdev(timestamps)
      WHERE stdev < 5 seconds
      RETURN file_hash, stdev, host_count
- question: Does the execution timeline of a signed binary across the enterprise show distinct clusters of highly synchronized activity, as identified by a clustering algorithm?
  context: This is a more advanced version of the previous question. Instead of just one measure of spread (standard deviation), a clustering algorithm like DBSCAN can identify multiple, separate bursts of coordinated activity. This can help distinguish between different attack waves or differentiate a widespread attack from a slow, rolling deployment of legitimate software.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Centralized logging platform (e.g., SIEM, data lake) containing aggregated process execution logs from all enterprise endpoints and servers.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: |
      timestamps = SEARCH process_creation_events | WHERE file_hash == 'some_hash' | RETURN timestamp
      clusters = DBSCAN(timestamps, epsilon=5s, min_samples=3)
      IF clusters are found
        RETURN file_hash, cluster_details