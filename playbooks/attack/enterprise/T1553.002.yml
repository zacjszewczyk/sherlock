name: T1553.002: Code Signing
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps determine if an adversary is leveraging valid or malicious code signing certificates to bypass execution controls and evade defenses. It provides investigative questions to detect threats based on multiple indicators, including: binaries signed with certificates found on threat intelligence feeds; certificates with low internal prevalence but known malicious associations; binaries signed by unapproved or impersonated certificate authorities; the use of new, self-signed, or suspicious certificates; signed binaries executing from non-standard locations or performing suspicious follow-on actions; and signed binaries exhibiting signs of widespread, coordinated execution across the enterprise.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process executing from a binary whose file hash or certificate thumbprint is present on a known threat intelligence feed?
  context: |
    This question focuses on detecting known threats by matching file hashes or certificate thumbprints against high-confidence lists of malicious indicators. A match provides a strong, direct signal of compromise, as it indicates that a file or certificate has been previously identified and vetted as malicious by security researchers. This is often the fastest and most reliable way to identify commodity malware or tools used by known threat actors.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Centralized log aggregator (SIEM/Data Lake) containing endpoint process execution logs and network file transfer logs from all enterprise assets.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events OR file_creation_events WHERE file_hash IN threat_intel_hashes OR certificate_thumbprint IN threat_intel_certs
- question: Is a binary signed with a certificate that has low internal prevalence but is associated with malicious activity externally?
  context: |
    This question aims to identify targeted or newly introduced threats by contrasting internal rarity with external notoriety. A certificate seen on very few machines within the enterprise is an anomaly; if that same rare certificate is flagged by external threat intelligence, it becomes highly suspicious. This method is effective for detecting malware that has not yet spread widely or custom tools used in a targeted attack.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Centralized log aggregator (SIEM/Data Lake) containing endpoint process execution logs and network file transfer logs from all enterprise assets.
  range: last 30 days
  queries:
  - pseudocode: CALCULATE prevalence of certificate_thumbprints over 30d. JOIN with external_threat_intel. FILTER where internal_prevalence < threshold AND external_reputation == 'malicious'
- question: Does a signed execution event have a high risk score based on a machine learning model trained on features like threat intelligence matches and internal prevalence?
  context: |
    This question proposes using a supervised machine learning model to synthesize multiple weak signals into a single, actionable risk score. The model can weigh various features—such as threat intelligence matches, internal prevalence of the file and certificate, and file metadata like entropy—to produce a more nuanced judgment than a simple rule could. This allows for the detection of threats that may not trigger any single high-confidence rule but are suspicious when all factors are considered together.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Centralized log aggregator (SIEM/Data Lake) containing endpoint process execution logs and network file transfer logs from all enterprise assets.
  range: last 90 days
  queries:
  - pseudocode: SCORE process_execution_events using ML_model(features=[hash_on_threat_feed, cert_on_threat_feed, internal_cert_prevalence, internal_hash_prevalence, file_entropy]). ALERT on high_score
- question: Is a binary being executed that is signed by a Certificate Authority (CA) whose issuer is not on the enterprise-approved allow-list?
  context: |
    This question focuses on enforcing a fundamental trust boundary. By maintaining an explicit allow-list of Certificate Authorities (CAs) that are trusted by the enterprise, any binary signed by a CA not on this list can be flagged for investigation. This helps detect malware signed with certificates from newly created, untrustworthy, or known malicious CAs that an adversary might use to appear legitimate.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 3002
  - Windows Event ID 3004
  - Endpoint devices and servers, particularly assets where software installation is not strictly controlled by centralized management tools like SCCM or Jamf.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events OR code_integrity_events WHERE certificate_issuer NOT IN approved_issuer_list
- question: Is a binary signed with a certificate subject name that closely mimics a legitimate publisher, suggesting typosquatting or impersonation?
  context: |
    This question addresses a common deception technique where adversaries register certificate subjects with names that are slight misspellings or variations of legitimate companies (e.g., 'Microsft Corporation'). By using string similarity algorithms like Jaro-Winkler to compare new certificate subjects against a list of known legitimate publishers, analysts can automatically flag these impersonation attempts, which are designed to fool both automated systems and human reviewers.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 3002
  - Windows Event ID 3004
  - Endpoint devices and servers, particularly assets where software installation is not strictly controlled by centralized management tools like SCCM or Jamf.
  range: last 90 days
  queries:
  - pseudocode: FOR each new certificate_subject, CALCULATE Jaro-Winkler similarity against legitimate_subject_list. ALERT where similarity > 0.85 AND subject NOT IN legitimate_subject_list
- question: Can a machine learning model, using NLP features from certificate issuer and subject strings, identify sophisticated or novel impersonation attempts?
  context: |
    This question proposes a more advanced approach to detecting certificate impersonation. By applying Natural Language Processing (NLP) techniques to the issuer and subject fields, a model can learn the subtle textual characteristics of legitimate versus malicious names. This goes beyond simple string matching to identify patterns in character sequences, word usage (TF-IDF), and string randomness (entropy), enabling the detection of more sophisticated and previously unseen mimicry attempts.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 3002
  - Windows Event ID 3004
  - Endpoint devices and servers, particularly assets where software installation is not strictly controlled by centralized management tools like SCCM or Jamf.
  range: last 90 days
  queries:
  - pseudocode: SCORE certificates using NLP_model(features=[char_ngrams, TF-IDF, entropy] from issuer_and_subject). ALERT on high_suspicion_score
- question: Is an unknown self-signed application executing in the environment?
  context: |
    While self-signed certificates are common for internally developed tools, adversaries also use them to sign malware. This question helps to distinguish between legitimate and malicious use by checking executed self-signed binaries against a pre-approved allow-list of known-good internal applications. Any self-signed binary not on this list is immediately suspect and requires investigation, effectively filtering the noise of legitimate development activity from potential threats.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All corporate endpoints and servers, internal development environments, and code signing infrastructure where self-signed applications are created and used.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE certificate_issuer == certificate_subject AND certificate_thumbprint NOT IN self_signed_allowlist
- question: Is a process executing that is signed by a recently issued certificate?
  context: |
    Adversaries frequently generate new certificates for their malware to evade reputation-based blocklists and appear novel. A very new certificate (e.g., created within the last 14 days) is therefore an indicator of potential risk. This question aims to identify executions involving these 'freshly-minted' certificates, which, especially when combined with other suspicious factors, can be a strong signal of malicious activity.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All corporate endpoints and servers, internal development environments, and code signing infrastructure where self-signed applications are created and used.
  range: last 90 days
  queries:
  - pseudocode: FOR each signed_process, CALCULATE certificate_age = now() - certificate_valid_from_date. ALERT where certificate_age < 14 days
- question: Does a signed execution exhibit an anomalous combination of attributes, such as being self-signed, having a new certificate, and running from an unusual path?
  context: |
    This question leverages unsupervised machine learning to find outliers that do not conform to normal behavior. An anomaly detection model, like an Isolation Forest, can analyze multiple features simultaneously (e.g., certificate age, self-signed status, issuer popularity, process path) to identify rare combinations of attributes. This approach can uncover novel or sophisticated threats that do not trigger individual rules but stand out as a highly unusual event when their properties are viewed in combination.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All corporate endpoints and servers, internal development environments, and code signing infrastructure where self-signed applications are created and used.
  range: last 90 days
  queries:
  - pseudocode: SCORE signed_process_events using IsolationForest(features=[cert_age, is_self_signed, issuer_prevalence, subject_entropy, process_path]). ALERT on anomalous_events
- question: Is a signed binary executing from a non-standard or user-writable directory like a temp folder or downloads folder?
  context: |
    Legitimate software is typically installed in protected system directories like 'Program Files'. Adversaries, in contrast, often drop and execute their payloads from user-writable locations such as 'Downloads', 'AppData', or 'Temp' to bypass administrative privilege requirements and evade detection. This question aims to find binaries that, despite being signed, are running from these suspicious locations, which is a strong indicator of compromise.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - User workstations and multi-user servers, focusing on temporary directories, user profiles, shared folders, and other world-writable locations.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE is_signed == true AND process_path IN suspicious_directory_list
- question: Is a binary signed by a known, legitimate publisher (e.g., Google LLC) executing from an unusual file path or spawned by an unusual parent process?
  context: |
    This question addresses the 'living off the land' technique where adversaries abuse legitimate, signed software for malicious purposes. By establishing a baseline of normal behavior for trusted software (e.g., common execution paths, typical parent processes), we can detect anomalies. An alert would trigger if a trusted binary, like a Google updater, is executed from a strange directory or launched by an unexpected process like 'powershell.exe', indicating it is likely being misused.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - User workstations and multi-user servers, focusing on temporary directories, user profiles, shared folders, and other world-writable locations.
  range: last 90 days
  queries:
  - pseudocode: FOR each signed_process, CHECK if process_path or parent_process is outside the established baseline for its certificate_subject. ALERT on deviation
- question: Can a machine learning classifier identify a signed execution as suspicious based on its context, such as its file path, parent process, and directory properties?
  context: |
    This question involves training a supervised model to automatically learn the complex rules that differentiate legitimate from malicious execution contexts. By feeding the model features like the file path, parent process name, and directory characteristics (e.g., is it user-writable?), the classifier can make a probabilistic determination of whether a signed process is being used maliciously, capturing nuanced patterns that are difficult to define with manual rules.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - User workstations and multi-user servers, focusing on temporary directories, user profiles, shared folders, and other world-writable locations.
  range: last 90 days
  queries:
  - pseudocode: SCORE signed_process_events using DecisionTree(features=[file_path, parent_process, is_user_writable, is_temp_dir, cert_subject]). ALERT on suspicious_prediction
- question: Does a signed process perform suspicious follow-on actions, such as spawning an unsigned child process or modifying a persistence registry key, within a short time window?
  context: |
    Malicious signed binaries often act as 'droppers' or 'loaders', where their first action is to initiate further malicious activity. This question uses event correlation to link an initial signed process execution to subsequent suspicious behaviors, such as launching an unsigned payload, creating a persistence mechanism in the registry, or creating a file in a temp directory. This reveals the entire attack chain, which might otherwise be missed if events are viewed in isolation.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 22
  - Zeek conn.log
  - Zeek dns.log
  - All corporate endpoints, DNS servers, and network egress points (firewalls/proxies) where process, registry, and network activity can be correlated.
  range: last 90 days
  queries:
  - pseudocode: CORRELATE signed_process_event with subsequent (within 60s) events like [unsigned_child_process, persistence_reg_mod, suspicious_file_creation, threat_intel_network_conn]. ALERT on match
- question: Does a signed process make DNS queries for high-entropy or newly-registered domains, or spawn an unusual number of unsigned child processes?
  context: |
    This question looks for secondary indicators of malicious intent from a signed process. Network connections to domains with random-looking names (high entropy) or that were registered very recently are classic signs of command-and-control (C2) communication. Likewise, a signed process that spawns a statistically unusual number of unsigned child processes is deviating from normal behavior. These statistical anomalies can help unmask a compromised or malicious signed process.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 22
  - Zeek conn.log
  - Zeek dns.log
  - All corporate endpoints, DNS servers, and network egress points (firewalls/proxies) where process, registry, and network activity can be correlated.
  range: last 90 days
  queries:
  - pseudocode: For signed_processes, CHECK for high_entropy_DNS_queries OR newly_registered_domains. Separately, BASELINE unsigned_child_process_counts and ALERT on statistical deviations.
- question: Can a Graph Neural Network (GNN) identify complex, multi-step attack patterns originating from a signed process by analyzing the graph of related process, file, and network activities?
  context: |
    This question proposes an advanced, graph-based detection method. System activity is modeled as a graph where processes, files, and network endpoints are nodes and their interactions are edges. A trained Graph Neural Network (GNN) can then analyze subgraphs of activity originating from a signed process to identify complex, multi-stage attack patterns (e.g., signed dropper launches unsigned payload, which connects to a C2 domain). This holistic view allows the GNN to assign a risk score to an entire sequence of events, detecting threats that are invisible to event-level analysis.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 22
  - Zeek conn.log
  - Zeek dns.log
  - All corporate endpoints, DNS servers, and network egress points (firewalls/proxies) where process, registry, and network activity can be correlated.
  range: last 90 days
  queries:
  - pseudocode: BUILD activity_graph from process, file, network events. SCORE subgraphs originating from signed_processes using GNN model. ALERT on high_risk_subgraphs
- question: Is an unknown signed binary executing on an unusually large number of hosts within a very short time frame (a 'flash mob' execution)?
  context: |
    This question is designed to detect the rapid, widespread deployment of a malicious tool across the enterprise. A sudden 'flash mob' of executions of the same unknown signed binary across many hosts is a strong indicator of a coordinated, automated attack. This method helps distinguish a targeted campaign from isolated, one-off software installations or legitimate but un-catalogued software rollouts.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Centralized logging platform (e.g., SIEM, data lake) containing aggregated process execution logs from all enterprise endpoints and servers.
  range: last 90 days
  queries:
  - pseudocode: COUNT distinct hosts per file_hash in 5-minute windows. ALERT where host_count > threshold AND file_hash NOT IN allow_list
- question: Is a signed binary executing across multiple hosts with near-perfect time synchronization, suggesting automated command-and-control?
  context: |
    This question aims to detect the signature of automated attack frameworks. When an adversary uses a tool to execute a command across multiple compromised machines at once, the execution timestamps on those machines will be nearly identical. By calculating the standard deviation of these timestamps for a given binary, a very low value indicates highly synchronized, machine-driven activity, which is a strong signal of command-and-control.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Centralized logging platform (e.g., SIEM, data lake) containing aggregated process execution logs from all enterprise endpoints and servers.
  range: last 90 days
  queries:
  - pseudocode: For hashes on >3 hosts in 1-hour window, CALCULATE stdev(timestamps). ALERT on stdev < threshold
- question: Can clustering algorithms identify distinct groups of coordinated execution activity for a given binary, potentially revealing separate, independent campaigns?
  context: |
    This question provides a more robust method for detecting synchronized execution than a simple standard deviation calculation. By using a time-series clustering algorithm like DBSCAN on the execution timestamps of a binary, analysts can identify distinct clusters of activity. This is powerful because it can differentiate between multiple, independent attack waves or campaigns that might use the same tool at different times, providing a clearer picture of the adversary's operations.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Centralized logging platform (e.g., SIEM, data lake) containing aggregated process execution logs from all enterprise endpoints and servers.
  range: last 90 days
  queries:
  - pseudocode: For a given file_hash, CLUSTER execution_timestamps using DBSCAN. ALERT on identified clusters, representing coordinated activity.