name: T1574.010: Services File Permissions Weakness
id: 6e8d8f9a-7b0c-4e5d-9a1b-2c3d4e5f6a7b
description: This playbook focuses on detecting adversaries exploiting weak file permissions on Windows services to achieve persistence, privilege escalation, or defense evasion. An adversary may modify the binary of a legitimate service to execute malicious code. Detections center on identifying unauthorized file writes to service binary paths, especially by untrusted or statistically rare processes. It also involves looking for suspicious sequences of events, such as a non-privileged user changing permissions on a service file, writing to it, and then restarting the service. Further indicators include the modification of high-privilege (SYSTEM-level) services with known malicious tools, the spawning of anomalous child processes (like shells or LoLBins) from legitimate services, or the tampering with security product service binaries.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious file been written to a Windows service binary path?
    context: This question seeks to identify a direct service binary replacement with a known malicious payload. An adversary may replace a legitimate service executable with their own malware to ensure it runs with the service's privileges and persists across reboots. A positive match, where a file write to a service's ImagePath is followed by the new file's hash matching a known-bad hash from threat intelligence, is a high-confidence indicator of compromise.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Windows Security Event ID 4657, Windows Service Control Manager Registry (HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath) on all endpoints and servers; File systems on all Windows hosts, particularly in System32 and Program Files directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH for Event ID 4663 where Object Name matches a known service binary path. ON trigger, HASH the file. QUERY threat intel feed for the hash. ALERT on match.
  - question: Has a rarely modified service binary been changed outside of a normal maintenance window?
    context: This question aims to detect anomalous modifications to service binaries. Legitimate service files are typically only updated during scheduled patching or software updates. A modification to a file that has been stable for a long time (e.g., 180 days) and occurs outside of a defined maintenance window is highly suspicious and could indicate an unauthorized change by an adversary.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Windows Security Event ID 4657, Windows Service Control Manager Registry (HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath) on all endpoints and servers; File systems on all Windows hosts, particularly in System32 and Program Files directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MAINTAIN baseline of service binary hashes and modification timestamps. ON Event ID 4663, CHECK if new hash differs. CALCULATE time since last change. IF time > 95th percentile AND outside maintenance window, ALERT.
  - question: Is there an anomalous spike in file write activity for service executable directories, indicative of a patching cycle compromise?
    context: This question uses time-series analysis to model the normal rhythm of file modifications in service directories, which often follow a predictable pattern due to patching. An adversary's activity might cause a significant deviation from this learned pattern. An alert is generated when the number of file writes in a given period greatly exceeds the model's forecast, suggesting activity that is not part of a normal maintenance cycle.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Windows Security Event ID 4657, Windows Service Control Manager Registry (HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath) on all endpoints and servers; File systems on all Windows hosts, particularly in System32 and Program Files directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AGGREGATE Event ID 4663 counts for service directories hourly. TRAIN time-series model on historical data. FORECAST expected counts. IF observed count significantly exceeds forecast confidence interval, ALERT.
  - question: Was a service binary modified by an unsigned, untrusted, or atypically located process?
    context: This question investigates the legitimacy of the process that modifies a service executable. Legitimate updates are typically performed by signed, trusted installer processes (like 'msiexec.exe' or 'TrustedInstaller.exe') running from standard system locations. A modification by a process that is unsigned, located in a temporary or user-writable directory, or not on an allowlist of trusted installers is a strong indicator of malicious activity.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE Event ID 4663 on service paths with Event ID 4688. CHECK Creator Process for signature, path (e.g., AppData, Temp), and presence on an allowlist. ALERT on violation.
  - question: Was a service binary modified by a process that rarely or never modifies it?
    context: This question uses statistical baselining to identify unusual processes modifying service binaries. Over time, a specific service executable is typically modified by a very limited and predictable set of parent processes. If a process that has historically never, or very rarely, modified a particular service binary performs a write operation, it represents a statistical anomaly that warrants investigation.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE frequency of Creator Process Names per service binary. ON modification, IF writing process frequency is in the bottom 5th percentile for that binary, ALERT.
  - question: Does a machine learning model classify the process that modified a service binary as suspicious?
    context: This question applies a classification model to determine the likelihood that a file modification is malicious based on the characteristics of the writing process. Features such as the process's signature status, the entropy of its file path, its parent process, and its command-line arguments are used to train a model. This allows for the detection of novel or sophisticated attacks that might evade simpler symbolic or statistical rules.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN a classification model on process features (signature, path, parent, cmdline) to predict 'benign' vs 'suspicious'. APPLY model to processes writing to service paths. ALERT on 'suspicious' classification.
  - question: Did a non-privileged user change permissions on a service binary, write to it, and then restart the service in a short time frame?
    context: This question looks for a specific, high-confidence attack chain. An adversary without initial write access to a service binary might first change its permissions, then overwrite it with malware, and finally restart the service to execute their code. Detecting this sequence of events (permission change, file write, service start) performed by the same non-administrative user within a short window is a strong indicator of a successful service hijack.
    answer_sources: Windows Security Event ID 4670, Windows Security Event ID 4663, Windows System Event ID 7036, Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: DETECT sequence for same file path and user within 15 mins: 1) Event 4670, 2) Event 4663 (Write), 3) Event 7036. IF user is not privileged, ALERT.
  - question: Did a user who rarely changes file permissions modify a service binary's permissions and then write to the file?
    context: This question uses statistical rarity to identify suspicious permission changes. Most permission changes on service files are done by a small set of administrative or system accounts. If an account that rarely performs such actions changes permissions on a service binary and then writes to it, the combined low probability of this event sequence suggests malicious intent and should be investigated.
    answer_sources: Windows Security Event ID 4670, Windows Security Event ID 4663, Windows System Event ID 7036, Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE accounts performing permission changes (Event 4670). SCORE risk based on account rarity. IF a rare account performs 4670 then 4663, and cumulative score exceeds threshold, ALERT.
  - question: Does a sequence analysis model identify an anomalous series of events involving permission changes, file writes, and service starts?
    context: This question uses a sequence analysis model, like a Hidden Markov Model (HMM), to understand the normal flow of events related to service management. The model learns legitimate sequences (e.g., 'Benign Maintenance'). An anomalous sequence, such as a permission change followed by a file write and service start by an unusual user, would cause the model to transition to a 'Suspicious Activity' or 'Confirmed Hijack' state, generating a high-confidence alert.
    answer_sources: Windows Security Event ID 4670, Windows Security Event ID 4663, Windows System Event ID 7036, Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN HMM with states ('Benign', 'Suspicious', 'Hijack') on event sequences (4670, 4663, 7036) and user context. ALERT on transitions to 'Suspicious' or 'Hijack' state.
  - question: Has a service binary running as SYSTEM been replaced with a known privilege escalation tool?
    context: This question aims to detect the replacement of a high-privilege service executable with a known malicious tool. Services running as NT AUTHORITY\SYSTEM provide the highest level of privilege on a local Windows system. An adversary who can overwrite such a service's binary can execute any code with full system rights. This detection specifically looks for this replacement by matching the new file's hash against a curated list of privilege escalation tools.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Multi-user systems like Remote Desktop Session Hosts and Citrix servers; Endpoints used by developers, system administrators, and other privileged roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR file writes (Event 4663) to SYSTEM service paths. HASH the new file. COMPARE hash against CTI feed of priv-esc tools (Mimikatz, etc.). ALERT on match.
  - question: Was a SYSTEM-level service binary modified by an account other than 'SYSTEM' or 'TrustedInstaller'?
    context: This question identifies a highly anomalous and suspicious event. Binaries for services running as SYSTEM should only be modified by the operating system itself (e.g., 'SYSTEM' or 'TrustedInstaller' accounts) during legitimate updates. A file write operation on one of these binaries initiated by any other user account is a major red flag and a strong indicator of a privilege escalation attempt.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Multi-user systems like Remote Desktop Session Hosts and Citrix servers; Endpoints used by developers, system administrators, and other privileged roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE users who write to SYSTEM service binaries. ON file write (Event 4663), IF user is not 'SYSTEM' or 'TrustedInstaller', ALERT immediately.
  - question: Did the process that modified a SYSTEM-level service binary have command-line arguments associated with privilege escalation?
    context: This question uses a machine learning model to analyze the command line of the process responsible for modifying a SYSTEM service binary. Even if the process itself is legitimate (e.g., PowerShell), its command-line arguments can reveal malicious intent. The model is trained to recognize patterns and keywords common in privilege escalation commands, providing a more nuanced detection than simple process name checks.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Multi-user systems like Remote Desktop Session Hosts and Citrix servers; Endpoints used by developers, system administrators, and other privileged roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN classification model on command-lines to detect priv-esc. ON file write (Event 4663) to SYSTEM service, ANALYZE writer's command line (Event 4688). IF model classifies as priv-esc, ALERT.
  - question: Did a high-privilege service spawn a shell or utility with commands for user creation, group modification, or credential access?
    context: This question seeks to identify post-exploitation activity stemming from a compromised service. Once an adversary has hijacked a SYSTEM-level service, a common next step is to spawn an interactive shell (like cmd.exe or powershell.exe) to execute commands. This detection looks for this behavior, specifically focusing on commands used to create new users, add users to administrative groups, or access credentials (e.g., targeting 'lsass').
    answer_sources: Windows Security Event ID 4688, Windows System Event ID 7036, Zeek conn.log, Domain Controllers, Active Directory Federation Services (ADFS) servers, RADIUS servers, and other core authentication infrastructure.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR process creation (Event 4688) where parent is a SYSTEM service and child is a shell. REGEX command line for keywords ('net user /add', 'lsass', etc.). ALERT on match.
  - question: Did a high-privilege service spawn a statistically rare child process or a common child process with an unusually complex command line?
    context: This question uses statistical analysis to find anomalous child processes spawned by high-privilege services. An adversary might use an uncommon tool or heavily obfuscate their commands. This detection flags two conditions: the service spawning a process it has never spawned before, or the service spawning a common process (like powershell.exe) but with a command line that has unusually high entropy, which can indicate obfuscation.
    answer_sources: Windows Security Event ID 4688, Windows System Event ID 7036, Zeek conn.log, Domain Controllers, Active Directory Federation Services (ADFS) servers, RADIUS servers, and other core authentication infrastructure.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PROFILE child processes and command-line entropy for each service. ALERT if a service spawns a rare child process or if a child's command-line entropy exceeds the 98th percentile.
  - question: Does an anomaly detection model flag the parent-child process relationship originating from a high-privilege service as abnormal?
    context: This question uses an unsupervised machine learning model to learn the normal patterns of process creation for high-privilege services. The model can identify novel and unexpected parent-child process relationships without being explicitly programmed with rules. It flags any activity that deviates significantly from the learned baseline of normal system operation, making it effective against new or unknown techniques.
    answer_sources: Windows Security Event ID 4688, Windows System Event ID 7036, Zeek conn.log, Domain Controllers, Active Directory Federation Services (ADFS) servers, RADIUS servers, and other core authentication infrastructure.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN Isolation Forest on process creation events from high-privilege services. USE features like parent/child names, cmdline length, obfuscation flags. ALERT on events flagged as anomalous.
  - question: Did a non-administrative user change permissions on a SYSTEM-level service binary and then immediately write to it?
    context: This question looks for a clear, sequential privilege escalation attempt. A non-admin user should never be able to change permissions on a SYSTEM-level service binary. If a user not in a defined administrative group performs a permission change (Event 4670) and then immediately follows up with a file write (Event 4663) to the same path, it is a critical indicator of a misconfiguration being exploited.
    answer_sources: Windows Security Event ID 4670, Windows Security Event ID 4663, File servers hosting application binaries; Standard end-user workstations where local administrative rights are restricted.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: DETECT sequence: Event 4670 on SYSTEM service path by non-admin user, followed by Event 4663 by same user on same path within 5 mins. CREATE critical incident.
  - question: Was a permission change on a service binary performed by a statistically rare user account, followed by a file write from the same account?
    context: This question uses the statistical rarity of the user account performing the action as an indicator of risk. By baselining which accounts normally perform permission changes, the system can flag actions by accounts that fall outside this norm. If such a rare permission change is immediately followed by a file write from the same user, the combined low probability of this sequence strongly suggests malicious activity.
    answer_sources: Windows Security Event ID 4670, Windows Security Event ID 4663, File servers hosting application binaries; Standard end-user workstations where local administrative rights are restricted.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CREATE frequency distribution of users performing Event 4670 on service paths. FLAG users below a frequency threshold. IF a flagged user performs 4670 then 4663, ALERT.
  - question: Does a sequence analysis model detect a permission change followed by a file write by a standard user as a malicious sequence?
    context: This question applies a sophisticated sequence analysis model (like a GRU) to learn what constitutes a valid sequence of administrative actions. The model is trained on vast amounts of event data. A sequence where a standard, non-administrative user successfully changes permissions and then writes to a protected service binary would be flagged by the model as a significant anomaly, as it deviates from all learned legitimate patterns.
    answer_sources: Windows Security Event ID 4670, Windows Security Event ID 4663, File servers hosting application binaries; Standard end-user workstations where local administrative rights are restricted.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN a GRU sequence model on event tuples (EventID, User, Object). FLAG the sequence [4670, StandardUser, svc.exe] -> [4663, StandardUser, svc.exe] as an anomaly.
  - question: Has a security product's service binary been modified, and is the new file's signature invalid or from an untrusted publisher?
    context: This question aims to detect direct tampering with security software, a common defense evasion technique. Adversaries may try to disable or corrupt EDR, AV, or logging agents by modifying their service binaries. This detection specifically monitors these critical files and validates the digital signature of any new version written. An invalid, missing, or untrusted signature is a critical indicator of a defense evasion attempt.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Autoruns/Sysinternals Data, All endpoints and servers, with a focus on monitoring directories containing security software agents (e.g., Program Files\Windows Defender, Program Files\CrowdStrike).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MAINTAIN list of security service paths and trusted publishers. ON file write (Event 4663) to these paths, VALIDATE signature. ALERT if signature is invalid, missing, or from untrusted publisher.
  - question: Has the digital signature status of a security service binary changed from 'valid' to 'invalid'?
    context: This question uses state change detection as a high-fidelity indicator of tampering. Security service binaries should always have a valid digital signature. By periodically baselining the signature status, any change from 'valid' to 'invalid' or 'missing' after a file write event is a statistical anomaly that points directly to potential compromise of the security tool itself.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Autoruns/Sysinternals Data, All endpoints and servers, with a focus on monitoring directories containing security software agents (e.g., Program Files\Windows Defender, Program Files\CrowdStrike).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE signature status of security binaries. AFTER a file write, RE-VALIDATE signature. IF status changes from 'valid' to 'invalid' or 'missing', ALERT.
  - question: Does a machine learning model classify the process that modified a security service binary as suspicious?
    context: This question applies a classification model to differentiate between legitimate updaters for security tools and malicious processes. Even if an adversary uses a seemingly legitimate process to perform the modification, the model can analyze a wide range of features (parent process, command line, etc.) to determine if the writing process's behavior is consistent with a legitimate update or if it appears suspicious, indicating a likely attempt to bypass security controls.
    answer_sources: Windows Security Event ID 4663, Windows Security Event ID 4688, Autoruns/Sysinternals Data, All endpoints and servers, with a focus on monitoring directories containing security software agents (e.g., Program Files\Windows Defender, Program Files\CrowdStrike).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN a model to classify security software updaters vs. other processes. ON file write to security binary, FEED writer process attributes to the model. ALERT if classified as 'suspicious'.
  - question: Is a legitimate service process making outbound network connections to a known C2 server or exhibiting C2-like network indicators?
    context: This question seeks to find a compromised service that is being used for command and control (C2) communications. After hijacking a service, an adversary will use it to 'call home'. This detection correlates service processes with their network activity and checks for known bad indicators, such as connections to IPs/domains on a C2 threat feed, or the use of JA3/JA3S hashes or User-Agents associated with known malware.
    answer_sources: Windows Security Event ID 4688, Zeek conn.log, Zeek ssl.log, Zeek http.log, Zeek dns.log, Network egress points (Firewalls, Proxies), DNS resolvers, and host-level network logs from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE process events (Event 4688) with network logs (Zeek). FOR service processes, CHECK destination IP/domain against C2 feed. CHECK JA3/User-Agent against malware indicators. ALERT on match.
  - question: Is a service process exhibiting anomalous network behavior, such as connecting to rare ports or domains?
    context: This question uses statistical baselining to detect when a service's network behavior deviates from its norm. Most services have predictable network patterns. An alert is triggered if a service connects to a destination port it rarely uses, connects to a domain with unusually high entropy (often seen in domain generation algorithms), or uses a TLS fingerprint (JA3 hash) that is statistically rare for that process, all of which can indicate C2 activity.
    answer_sources: Windows Security Event ID 4688, Zeek conn.log, Zeek ssl.log, Zeek http.log, Zeek dns.log, Network egress points (Firewalls, Proxies), DNS resolvers, and host-level network logs from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE network behavior (ports, protocols, TLDs, JA3) per service. ALERT if connection uses a rare port, high-entropy domain, or rare JA3 hash for that process.
  - question: Is a time-series model detecting a periodic, 'heartbeat'-like network connection from a service process?
    context: This question focuses on detecting the characteristic 'heartbeat' of C2 communication. Malware often calls back to its controller at regular intervals. A time-series model can learn the normal, often bursty or irregular, network patterns of a legitimate service. It will flag any new, periodic communication with consistent timing and data size as a significant anomaly, strongly indicating a C2 channel.
    answer_sources: Windows Security Event ID 4688, Zeek conn.log, Zeek ssl.log, Zeek http.log, Zeek dns.log, Network egress points (Firewalls, Proxies), DNS resolvers, and host-level network logs from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ANALYZE time and size of outbound connections per service using a time-series model. FLAG uncharacteristic periodic, 'heartbeat' connections as potential C2.
  - question: Did a service process spawn a known Living-off-the-Land Binary (LoLBin) or command interpreter?
    context: This question aims to detect when a compromised service is used to execute other tools on the system for defense evasion or lateral movement. Many services have no legitimate reason to spawn child processes like 'cmd.exe', 'powershell.exe', or other LoLBins (e.g., 'certutil.exe', 'msbuild.exe'). Creating a rule to alert on these specific, high-risk parent-child relationships is an effective way to detect malicious activity.
    answer_sources: Windows Security Event ID 4688, Process creation logs from all Windows workstations and servers, particularly critical application servers and domain controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR process creation (Event 4688). IF parent is a known service AND child is on a LoLBin watchlist, ALERT.
  - question: Did a service process spawn a child process that is statistically rare for that parent?
    context: This question uses statistical analysis of parent-child process relationships to find anomalies. Over a baseline period, a system can learn which child processes are normally spawned by each parent process. An alert is generated when a process creation event occurs that represents a very rare or never-before-seen parent-child pairing, which could indicate a hijacked process being used to launch a malicious tool.
    answer_sources: Windows Security Event ID 4688, Process creation logs from all Windows workstations and servers, particularly critical application servers and domain controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CREATE a parent-child process frequency map over 30 days. FLAG any new process creation event that represents a statistically rare (<0.01%) relationship for that parent.
  - question: Does an autoencoder model flag a process creation event from a service as having a high reconstruction error?
    context: This question uses an autoencoder, a type of neural network, to learn the deep patterns of legitimate process creation events. The model is trained to compress and then reconstruct normal events with low error. When a hijacked service spawns an anomalous child process, the event will not conform to the learned patterns. The model will be unable to reconstruct it accurately, resulting in a high reconstruction error, which serves as a powerful anomaly signal.
    answer_sources: Windows Security Event ID 4688, Process creation logs from all Windows workstations and servers, particularly critical application servers and domain controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN autoencoder on legitimate process creation events. FEED new events to the model. ALERT on events with a high reconstruction error score.