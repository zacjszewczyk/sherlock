name: T1027.001: Binary Padding
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: >-
  This playbook helps analysts investigate whether an adversary is using binary padding to evade static file-based defenses. This technique involves adding extra data to a malicious executable to change its file hash, thereby bypassing signature-based detection. Investigations should focus on identifying files with known padded malware hashes, executables with anomalously large file sizes or PE overlay sizes, and correlating these findings with subsequent suspicious process or network activity.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are executable files being created or transferred that match known hashes for padded malware?
    context: >-
      This question aims to detect known padded malware by continuously monitoring file creation events and network file transfers. It matches file hashes against a threat intelligence feed of known indicators of compromise (IOCs) specifically tagged for padded malware. A match indicates a known threat is present and attempting to evade defenses, warranting a high-severity alert for immediate investigation.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress points
      - Proxy server logs
      - Mail gateway logs
      - Endpoint file systems
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek files.log OR Sysmon Event ID 11 FOR file_hash IN threat_intel_feed(padded_malware)
  - question: Do files matching known padded malware hashes also have unusually random filenames?
    context: >-
      This question adds a layer of statistical analysis to confirmed IOC matches. Adversaries often use high-entropy (random-looking) filenames for their payloads to avoid detection based on common names. By calculating the Shannon entropy of a filename associated with a known padded malware hash and comparing it to the environmental baseline, we can identify files that are statistical outliers (e.g., in the top 95th percentile). This provides stronger evidence that the file is malicious and not a false positive.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress points
      - Proxy server logs
      - Mail gateway logs
      - Endpoint file systems
    range: last 90 days
    queries:
      - pseudocode: CALCULATE Shannon entropy for filename of files where file_hash IN threat_intel_feed(padded_malware). ALERT if entropy > 95th_percentile_baseline.
  - question: Can we use a machine learning model to predict the maliciousness of a file that matches a known padded malware hash?
    context: >-
      This question seeks to automate and prioritize alerts by using a machine learning classification model. When a file hash matches an IOC, the model can provide a probability score of maliciousness based on additional features like source IP reputation, the criticality of the destination asset, filename entropy, and how common the hash is in the environment. A high probability score (e.g., >0.9) automatically elevates the alert, focusing analyst attention on the most critical threats.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress points
      - Proxy server logs
      - Mail gateway logs
      - Endpoint file systems
    range: last 90 days
    queries:
      - pseudocode: INPUT features (IP reputation, asset criticality, filename entropy, hash prevalence) INTO classification_model for files where file_hash IN threat_intel_feed(padded_malware). ALERT if probability > 0.9.
  - question: Are any Windows PE files being transferred with an unusually large overlay size?
    context: >-
      This question focuses on detecting binary padding by examining the structure of Portable Executable (PE) files in network traffic. The overlay is the data appended to the end of a PE file. While some legitimate data (like digital certificates) can be in the overlay, an excessively large overlay (e.g., >512KB) is a strong indicator of padding. This query calculates the overlay size and triggers an alert if it exceeds a predefined threshold, pointing to a likely attempt to alter the file's hash and evade signature-based detection.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Network monitoring sensors (e.g., Zeek) at internet gateways, VPN termination points, and data center ingress/egress points.
    range: last 90 days
    queries:
      - pseudocode: CALCULATE overlay_size = files.log.seen_bytes - pe.log.size_of_image. ALERT if overlay_size > 512KB.
  - question: Are there PE files with an overlay size that is a statistical outlier compared to other files with the same name?
    context: >-
      This question refines the search for padded binaries by comparing them to their peers. It establishes a historical baseline of normal overlay sizes for executables grouped by filename (e.g., all instances of 'chrome.exe'). An alert is generated if a new file's overlay size is a statistical anomaly for its group (e.g., exceeds the 99th percentile) or if a previously unseen file has a very large overlay. This helps distinguish legitimate, large executables from maliciously padded ones.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Network monitoring sensors (e.g., Zeek) at internet gateways, VPN termination points, and data center ingress/egress points.
    range: last 90 days
    queries:
      - pseudocode: GROUP PE files by filename and CALCULATE overlay size baseline. ALERT if new file overlay_size > 99th_percentile for its group OR > 2MB for new filenames.
  - question: Is there an anomalous spike in the average overlay size of new executables, suggesting a widespread campaign?
    context: >-
      This question uses time series anomaly detection to identify broader attack campaigns. By monitoring the average overlay size of newly observed executables on an hourly basis, a machine learning model can detect sudden, anomalous increases. Such a spike could indicate that an adversary is deploying padded binaries at scale across the network. Correlating this anomaly with other security events can help uncover a coordinated attack.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Network monitoring sensors (e.g., Zeek) at internet gateways, VPN termination points, and data center ingress/egress points.
    range: last 90 days
    queries:
      - pseudocode: APPLY time_series_anomaly_detection to hourly_average_overlay_size of new executables. ALERT on anomalous spikes.
  - question: Is a critical system process being created from an executable with a modified file size or hash?
    context: >-
      This question aims to protect critical system files (like `lsass.exe`, `csrss.exe`) from being replaced or modified. It involves maintaining a watchlist of these executables with their known-good file sizes and hashes. An alert is triggered if a process is launched from a file with a matching name but a different size or hash, which is a strong indicator of a compromised and potentially padded system file.
    answersources:
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers)
      - developer workstations
      - standard user endpoints
      - and systems within the DMZ.
    range: last 90 days
    queries:
      - pseudocode: MONITOR Sysmon Event ID 1 for processes in critical_watchlist. ALERT if process `FileSize` or `Hashes` do not match known_good_values.
  - question: Is a process being created from an executable with a file size that is a statistical outlier for its specific file path?
    context: >-
      This question identifies padded executables by baselining the normal file sizes for every unique executable path in the environment. For each process creation event, it compares the executable's file size to the historical mean and standard deviation for that path. A file size that is significantly different (e.g., more than 3 standard deviations from the mean) is flagged as an anomaly, suggesting it may have been padded or otherwise modified.
    answer_sources:
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers)
      - developer workstations
      - standard user endpoints
      - and systems within the DMZ.
    range: last 90 days
    queries:
      - pseudocode: FOR each process creation, CALCULATE mean and stddev of FileSize for the given Image path. ALERT if current FileSize is > 3 stddev from the mean.
  - question: Can we use unsupervised machine learning to find structurally anomalous files that may have been padded?
    context: >-
      This question uses clustering algorithms like Isolation Forest or DBSCAN to find outliers among all files on an endpoint. By analyzing features like file size, entropy, number of PE sections, and file path depth, the model can identify files that are structurally different from the vast majority of benign files. These anomalies or 'noise' points are candidates for investigation as they may have been padded or obfuscated.
    answer_sources:
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers)
      - developer workstations
      - standard user endpoints
      - and systems within the DMZ.
    range: last 90 days
    queries:
      - pseudocode: APPLY clustering algorithm (e.g., Isolation Forest) to endpoint file metadata (size, entropy, sections, path depth). INVESTIGATE files flagged as anomalies.
  - question: Is a process, previously suspected of being padded, now executing suspicious discovery commands?
    context: >-
      This question correlates an initial padding suspicion with subsequent malicious behavior. It creates a rule that looks for a process, already flagged for potential padding (due to anomalous size or overlay), to then act as a parent process for common discovery commands (`whoami.exe`, `net.exe`, etc.) or credential access tools. This chain of events provides strong evidence that the padded binary is part of an active intrusion.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network monitoring agents
      - DNS resolvers
      - Network egress points
      - SIEM correlation engines.
    range: last 90 days
    queries:
      - pseudocode: CORRELATE alerts for padded_binaries with subsequent child processes (Sysmon Event ID 1) that are known discovery_commands.
  - question: Is a process from a suspected padded binary exhibiting periodic network beaconing behavior?
    context: >-
      This question seeks to identify command and control (C2) activity from a suspected padded binary. By analyzing the outbound network connections of the process, we can calculate the time between each connection to a specific destination. Highly regular, periodic connections (i.e., a low standard deviation in the time delta) are a hallmark of C2 beaconing. Detecting this behavior confirms the malicious nature of the process.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network monitoring agents
      - DNS resolvers
      - Network egress points
      - SIEM correlation engines.
    range: last 90 days
    queries:
      - pseudocode: FOR processes from padded_binaries, ANALYZE outbound connection timestamps. ALERT if standard deviation of time deltas to a single destination is < 1.5 seconds.
  - question: Can a risk scoring pipeline confirm the maliciousness of a padded binary by analyzing its subsequent network behavior?
    context: >-
      This question proposes a dynamic risk scoring system. An initial alert for a padded binary assigns a base risk score. This score is then increased based on subsequent suspicious activities detected by machine learning models. For instance, if a model detects that the process is making DNS queries to a domain generated by a Domain Generation Algorithm (DGA), the risk score is significantly increased, triggering a critical alert for immediate analyst intervention. This method layers evidence to build a high-confidence conclusion.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network monitoring agents
      - DNS resolvers
      - Network egress points
      - SIEM correlation engines.
    range: last 90 days
    queries:
      - pseudocode: CREATE risk_score for process on padded_binary_alert. INCREASE score if subsequent DNS queries are classified as DGA by ML model. TRIGGER critical alert if score exceeds threshold.