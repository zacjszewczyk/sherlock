name: T1027.015: Compression
id: a3b1c2d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: Investigates whether an adversary is using compressed archives or compressed data to obfuscate payloads or exfiltrate data. This is done by looking for several indicators, including compressed archives with malicious hashes, suspicious command-line usage of compression utilities, correlated sequences of download-decompress-execute events, high-entropy command lines indicating packed shellcode, and compressed archives with suspicious attributes like low compression ratios or double file extensions.
type: technique
related:
- TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any compressed files been created or transferred that match known malicious file hashes?
  context: This question aims to identify the simplest and most direct indicator of malicious compressed files. By checking the hash of every observed compressed archive against a threat intelligence feed of known indicators of compromise (IOCs), analysts can quickly detect the presence of known malware or malicious tools distributed in a compressed format.
  answer_sources: Zeek files.log, Windows Event ID 4663, Network egress/ingress points (web proxies, email gateways), User endpoints, File servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each file in (Zeek files.log, WinEvent 4663)
      WHERE file_extension IN ['.zip', '.rar', '.7z', '.gz']
      CALCULATE sha256_hash
      QUERY threat_intel_api WITH sha256_hash
      IF match_found
        ALERT high_severity
- question: Are there any unusually rare compressed filenames being transferred over the network, especially from low-reputation sources?
  context: Adversaries often use unique or randomly generated filenames for their payloads to evade simple signature-based detection. This question focuses on identifying statistical anomalies in filenames. A compressed file with a name that is rarely seen in the environment, especially when originating from a source with a poor reputation, is highly suspicious and warrants investigation.
  answer_sources: Zeek files.log, Network egress/ingress points (web proxies, email gateways), User endpoints, File servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      AGGREGATE filenames from Zeek files.log over 30 days
      IDENTIFY compressed filenames with frequency < 5th percentile
      FOR each rare_filename
        GET source_ip/domain
        QUERY reputation_service for source
        IF reputation is low
          ALERT for investigation
- question: Has there been an anomalous spike in the volume of inbound or outbound compressed file transfers?
  context: This question helps detect large-scale malicious activity. A sudden, statistically significant increase in the number of compressed files being downloaded could indicate a widespread campaign distributing malware. Conversely, a spike in outbound transfers could signal a data exfiltration event where an adversary is packaging and stealing large volumes of data.
  answer_sources: Zeek files.log, Network egress/ingress points (web proxies, email gateways), User endpoints, File servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MODEL hourly volume of compressed files (inbound/outbound) from Zeek files.log
      FORECAST expected volume with prediction interval
      IF current_volume > 99th percentile of prediction
        ALERT anomaly_detected
- question: Is a compression utility being executed with suspicious command-line arguments, such as password protection, self-extraction, or targeting unusual directories?
  context: Adversaries use specific command-line flags to make their compressed archives more effective for malicious purposes. Password protection evades AV scanning, self-extracting archives simplify payload execution, deleting source files covers tracks, and writing to public or temporary directories bypasses permissions and hides files. This question looks for these specific, high-fidelity indicators of malicious intent.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, User endpoints, Servers (especially those accessible by users or web applications), Domain Controllers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process creation events (WinEvent 4688, Sysmon 1)
      WHERE process_name IN ['7z.exe', 'rar.exe', 'tar', 'zip.exe']
      AND command_line MATCHES (regex for '-p', '-sfx', '-sdel', or unusual paths)
      ALERT suspicious_execution
- question: Have there been any unusual executions of compression utilities by a user or on a host?
  context: This question establishes a baseline of normal behavior for each user and host. By tracking the typical command-line arguments used with compression tools, the system can flag new, unseen combinations. Such deviations are behavioral outliers and can indicate that an adversary (or a script) is using the tool in a way that is not normal for that user or system, which is a strong signal of potential compromise.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, User endpoints, Servers (especially those accessible by users or web applications), Domain Controllers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each new compression utility execution
        GET user, host, and argument_set
        RETRIEVE historical argument_sets for that user/host
        CALCULATE Jaccard similarity score between new and historical sets
        IF score < 10th percentile
          ALERT behavioral_outlier
- question: Does a compression utility's command-line execution appear to be malicious based on its features?
  context: This question uses a machine learning approach to move beyond simple rules. By training a model to recognize the characteristics of known malicious command lines (e.g., entropy, length, presence of certain flags), it can classify new, unseen commands in real-time. This provides a more robust and adaptable method for detecting novel or obfuscated malicious commands that might evade static rules.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, User endpoints, Servers (especially those accessible by users or web applications), Domain Controllers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each new compression command line
        EXTRACT features (entropy, length, flag_presence, etc.)
        INPUT features into trained classification model
        IF model_output == 'malicious'
          ALERT machine_learning_detection
- question: Has a "download-extract-execute" sequence occurred on a host within a short time window?
  context: This question correlates multiple events to identify a common attack chain. Adversaries often deliver a payload in a compressed archive, which is then extracted and executed. Detecting this specific sequence of events (a download, followed by decompression, followed by process execution from a temp directory) in a short time frame on a single host provides strong, contextual evidence of a successful payload delivery and execution.
  answer_sources: Zeek files.log, Zeek conn.log, Windows Event ID 4688, Windows Event ID 4663, User endpoints, Network ingress points, DMZ servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRIGGER on archive download from Zeek files.log
      WITHIN 5 minutes on same host
        LOOK FOR compression utility process creation (WinEvent 4688)
        FOLLOWED BY new process execution from temp dir, with parent as compression utility
      IF full sequence matches
        ALERT attack_chain_detected
- question: Is there an unusually short time delay between a file download and a process execution on any given host?
  context: This question identifies automated activity by analyzing the time between events. A human user typically takes a non-trivial amount of time to find, decompress, and run a downloaded file. A very short delay (e.g., a few seconds) between a file download and a process execution is characteristic of a script or automated tool, which is a common TTP for malware droppers.
  answer_sources: Zeek files.log, Windows Event ID 4688, User endpoints, Network ingress points, DMZ servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host
        CALCULATE baseline distribution of time deltas between 'download' and 'execute' events
      FOR each new 'download-then-execute' sequence
        IF time_delta is in a low-probability bin (e.g., < 60 seconds)
          ALERT for potential automated activity
- question: Can a "download-extract-execute" pattern be identified within the security event graph?
  context: This question uses advanced graph analytics to visualize and detect attack patterns. By modeling security events as a graph of interconnected nodes (files, processes, hosts), complex relationships can be analyzed. This allows for the detection of the 'download-extract-execute' attack pattern even if it's slow, distributed, or uses obfuscation, providing a more resilient detection method than simple time-based correlation rules.
  answer_sources: Zeek files.log, Zeek conn.log, Windows Event ID 4688, Windows Event ID 4663, User endpoints, Network ingress points, DMZ servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CONSTRUCT event graph with nodes (host, file, process) and edges (downloads, creates, executes)
      APPLY graph anomaly detection algorithm
      IDENTIFY and score subgraphs matching 'download-extract-execute' pattern
      ALERT on high-scoring patterns
- question: Are there any command lines containing long encoded strings or keywords related to in-memory decompression?
  context: Adversaries often use Base64 encoding and PowerShell's in-memory decompression features to run packed or compressed shellcode directly in memory, bypassing file-based antivirus scanning. This question specifically looks for the tell-tale signs of this technique, such as very long Base64 strings or the use of .NET classes like `DeflateStream` within a command line, which are strong indicators of fileless malware execution.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, User endpoints, Domain Controllers, Application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process creation events (WinEvent 4688, Sysmon 1)
      WHERE command_line CONTAINS (long Base64 string OR '[System.IO.Compression.DeflateStream]' OR 'FromBase64String')
      ALERT for potential in-memory execution
- question: Are there any command lines with an unusually high entropy score for their given process?
  context: This question provides a statistical method for detecting obfuscated code within command lines. Normal commands have relatively low entropy (a measure of randomness). Compressed or encrypted shellcode, however, is highly random and results in a high entropy score. By establishing a baseline entropy level for normal commands (e.g., for `powershell.exe`), any command that is a statistical outlier with a much higher score is highly likely to contain obfuscated code.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, User endpoints, Domain Controllers, Application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each process_name
        MAINTAIN rolling 30-day baseline of command-line entropy scores
      FOR each new command
        CALCULATE its Shannon entropy
        IF score > 99th percentile for that process's baseline
          ALERT high_entropy_command
- question: Has an anomalous command line been detected by an unsupervised machine learning model?
  context: This question leverages an unsupervised learning model to find "unknown unknowns" in command-line data. The model learns what a vast array of normal command lines looks like based on features like entropy, length, and character ratios. It can then flag any new command that does not fit this learned profile. This is powerful for detecting novel obfuscation techniques or adversary tools that haven't been seen before.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, User endpoints, Domain Controllers, Application servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      EXTRACT features (entropy, length, char_ratio, etc.) from command lines
      TRAIN Isolation Forest or One-Class SVM model on feature set
      FOR each new command
        IF model classifies as outlier
          ALERT anomalous_command_detected
- question: Have there been any network file transfers of compressed archives with multiple suspicious attributes?
  context: This question combines several weak indicators into a stronger signal. A single suspicious attribute (like password protection or a non-standard port) might be benign. However, when multiple attributes occur together—such as a file named 'report.docx.zip' that is password-protected and transferred over a non-standard port—the likelihood of malicious intent increases significantly. This correlation helps reduce false positives.
  answer_sources: Zeek files.log, Zeek conn.log, Network egress/ingress points, DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH file transfers (Zeek files.log, conn.log)
      WHERE (filename has double extension)
      OR (is_password_protected is true)
      OR (destination_port is not 80/443)
      IF two or more conditions are met
        ALERT suspicious_archive_transfer
- question: Are there any transferred archives with an abnormally high compression ratio, especially over non-standard ports?
  context: This question identifies archives that are likely carrying already-encrypted or random data. Highly compressible data (like text) results in a low compression ratio. A high ratio (close to 1.0) means the file could not be compressed effectively, which is characteristic of encrypted data or random-looking malware payloads. Correlating this with transfers over non-standard ports helps prioritize these events as potential C2 communication or data exfiltration.
  answer_sources: Zeek files.log, Zeek conn.log, Network egress/ingress points, DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each transferred archive in Zeek files.log
        CALCULATE compression_ratio (seen_bytes / total_bytes)
      FLAG archives with ratio in top 5th percentile (> 0.95)
      IF associated conn.log shows non-standard port
        ESCALATE for investigation
- question: Have any anomalous clusters of file transfer activity been identified?
  context: This question uses multi-dimensional analysis to find file transfers that are anomalous across several features simultaneously. A clustering algorithm can group all 'normal' transfers together based on attributes like compression ratio, password protection, file extension, and port. Any transfer that does not fit into a large, well-defined cluster is, by definition, an outlier and represents an unusual combination of behaviors that warrants investigation.
  answer_sources: Zeek files.log, Zeek conn.log, Network egress/ingress points, DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      EXTRACT features from Zeek logs (compression_ratio, password_flag, etc.)
      APPLY DBSCAN clustering algorithm to feature set
      IDENTIFY and investigate small clusters or points classified as noise/outliers