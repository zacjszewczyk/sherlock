name: T1027.015: Compression
id: c3a0b1d2-5e7f-4b6a-8c1d-9e0f1a2b3c4d
description: 'This playbook addresses the adversarial use of compressed archives or
  data to obfuscate payloads or exfiltrate data. It provides investigative steps
  to detect this technique by identifying: compressed files with known malicious hashes;
  rare or novel compressed files on the network; anomalous volumes of compressed
  file transfers; suspicious command-line usage of compression tools (e.g., with
  password protection or targeting sensitive directories); behavioral outliers in
  command-line arguments; specific "download-decompress-execute" sequences on hosts;
  high-entropy command lines indicative of packed shellcode; and network transfers
  of archives with suspicious attributes like low compression ratios, double extensions,
  or use of non-standard ports.'
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a compressed file with a known malicious hash been created or transferred
    on the network?
  context: This question aims to detect the presence of known malicious compressed
    archives by checking their hashes against threat intelligence feeds. A match
    provides a high-confidence indicator of compromise, directly linking an artifact
    in the environment to a known threat.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4663
  - Network egress/ingress points (web proxies, email gateways)
  - User endpoints
  - File servers
  - Threat intelligence feed
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      FOR each compressed file event (from Zeek files.log or Win Evt 4663):
        CALCULATE the SHA256 hash of the file.
        QUERY threat intelligence feed with the hash.
        IF a match is found, GENERATE a high-severity alert.
- question: Have any rare compressed files been observed on the network, especially
    from low-reputation sources?
  context: This question focuses on identifying unusual or novel compressed files
    that deviate from normal activity. Adversaries often use custom or infrequently
    seen archive names for their payloads. Rare files, particularly when associated
    with untrustworthy sources, can indicate targeted attacks or first-stage malware
    droppers.
  answer_sources:
  - Zeek files.log
  - Network egress/ingress points (web proxies, email gateways)
  - User endpoints
  - File servers
  - Reputation data for IPs/domains
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      AGGREGATE compressed filenames from Zeek files.log over a 30-day window.
      CALCULATE the frequency of each filename.
      IDENTIFY filenames with a frequency below the 5th percentile (rare files).
      CORRELATE these rare files with source IP/domain reputation scores.
      ALERT on rare files originating from low-reputation sources.
- question: Has there been an anomalous spike in the volume of inbound or outbound
    compressed file transfers?
  context: This question seeks to detect unusual volumes of compressed file activity,
    which could signify a mass malware campaign (inbound) or a data exfiltration
    attempt (outbound). It uses time-series analysis to find statistically significant
    deviations from the established baseline of normal network traffic.
  answer_sources:
  - Zeek files.log
  - Network egress/ingress points (web proxies, email gateways)
  - User endpoints
  - File servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      MODEL the hourly volume of compressed file transfers (segmented by inbound/outbound) using data from Zeek files.log.
      ALERT if the current observed volume exceeds the 99% prediction interval of the established model.
- question: Has a compression utility been executed with suspicious arguments, such
    as for password protection, self-extraction, or targeting sensitive directories?
  context: This question looks for direct evidence of malicious intent by analyzing
    how compression tools are used. Certain command-line flags (e.g., for password
    protection, self-extraction, deleting source files) or targeting unusual system
    directories are strong indicators that an adversary is trying to package, hide,
    or exfiltrate data.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User endpoints
  - Servers (especially those accessible by users or web applications)
  - Domain Controllers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      SEARCH process creation logs (Win Evt 4688, Sysmon 1) for compression tools (e.g., 7z.exe, rar.exe, tar).
      FILTER for command lines containing suspicious flags like -p, -sfx, -sdel.
      FILTER for command lines with output paths in unusual directories like C:\Users\Public\ or C:\Windows\Temp\.
      ALERT on any match.
- question: Has a user or host executed a compression utility with a novel or unusual
    set of command-line arguments compared to their historical behavior?
  context: This question aims to detect behavioral anomalies. An adversary's use
    of a compression tool is likely to differ from a legitimate user's typical usage
    patterns. By baselining normal behavior for each user/host, novel command-line
    combinations can be flagged as potential malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User endpoints
  - Servers (especially those accessible by users or web applications)
  - Domain Controllers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      FOR each host/user, build a baseline of unique command-line argument sets used with compression tools.
      FOR each new execution, calculate the Jaccard similarity score between its argument set and the historical baseline.
      ALERT if the similarity score is below the 10th percentile.
- question: Does a machine learning model classify a specific compression command-line
    execution as malicious?
  context: This question leverages a predictive model trained on known benign and
    malicious command-line examples. The model can automatically identify complex
    patterns of maliciousness that are difficult to capture with simple rules, considering
    features like argument combinations, command length, and entropy.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User endpoints
  - Servers (especially those accessible by users or web applications)
  - Domain Controllers
  - Labeled command-line training data
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      EXTRACT features (e.g., presence of password flags, command length, entropy, target path category) from a new compression command line.
      INPUT the feature vector into a trained classification model (e.g., Random Forest).
      ALERT if the model classifies the command as malicious.
- question: Has a 'download, decompress, execute' sequence occurred on a host within
    a short time frame?
  context: This question identifies a common attack chain where a malicious payload
    is delivered within a compressed archive. Correlating network download events
    with subsequent local decompression and process execution on the same host provides
    strong evidence of a malware dropper in action.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Windows Event ID 4663
  - User endpoints
  - Network ingress points
  - DMZ servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      CORRELATE events on the same host IP:
      1. Zeek files.log shows a downloaded archive.
      2. Within 5 minutes, a Windows Event ID 4688 shows a compression utility process starting.
      3. A second Windows Event ID 4688 shows a new process spawned by the compression utility from a temp directory.
      ALERT on the full correlated sequence.
- question: Has a file been downloaded and then executed in an unusually short amount
    of time, suggesting automated activity?
  context: Legitimate user activity typically involves a noticeable delay between
    downloading a file and executing it. This question seeks to find automated or
    scripted attacks by identifying 'download-then-execute' sequences that happen
    too quickly to be manual, which is a strong indicator of compromise.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - User endpoints
  - Network ingress points
  - DMZ servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      BASELINE the probability distribution of time deltas between file downloads (Zeek) and process executions (Win Evt 4688) per host.
      FLAG any new 'download-then-execute' sequence where the time delta is in a low-probability bin (e.g., less than 60 seconds).
- question: Does graph analysis reveal a high-risk 'download-extract-execute' event
    chain?
  context: This question applies graph analytics to connect disparate security events
    (downloads, file creations, process executions) into a cohesive narrative. By
    modeling these relationships as a graph, it becomes possible to identify and
    score entire attack patterns, even if they are complex or distributed.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Windows Event ID 4663
  - User endpoints
  - Network ingress points
  - DMZ servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      BUILD a graph with nodes (hosts, files, processes) and edges (downloads, creates, executes).
      APPLY a graph-based anomaly detection algorithm to find and score 'download-extract-execute' subgraphs based on features like file hash rarity and process lineage.
- question: Has a command line been observed containing long encoded strings or keywords
    related to in-memory decompression?
  context: This question searches for specific indicators of obfuscated or compressed
    code within command lines, particularly for interpreters like PowerShell. The
    presence of long Base64 strings or specific .NET decompression class names is
    a common technique for fileless malware to load its payload into memory.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User endpoints
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      SEARCH process command lines (Win Evt 4688, Sysmon 1) using a regular expression.
      LOOK FOR long Base64 strings ([A-Za-z0-9+/=]{100,}) or keywords like '[System.IO.Compression.DeflateStream]' or 'FromBase64String'.
      ALERT on any match.
- question: Has a command line been observed with an abnormally high Shannon entropy
    score compared to its historical baseline for that process type?
  context: This question uses information theory to detect obfuscation. Compressed
    or encrypted data has high entropy (randomness). By establishing a normal entropy
    baseline for commands of a given process (e.g., powershell.exe), any command
    with a statistically significant higher entropy is likely carrying an obfuscated
    payload.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User endpoints
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      ESTABLISH a rolling 30-day baseline of command-line entropy scores for each unique process name.
      FOR each new command, calculate its Shannon entropy.
      ALERT if the score exceeds the 99th percentile for that process's specific baseline.
- question: Does an unsupervised machine learning model identify a command line as
    a significant outlier based on features like entropy, length, and character ratios?
  context: This question employs a more advanced anomaly detection approach. Instead
    of just looking at entropy, an unsupervised model (like Isolation Forest) can
    learn the complex characteristics of 'normal' command lines across multiple dimensions.
    This allows it to flag sophisticated obfuscation techniques that might not be
    caught by single-metric checks.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User endpoints
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      EXTRACT a feature set (entropy, length, non-alphanumeric ratio, etc.) from process command lines.
      APPLY an unsupervised anomaly detection model (e.g., Isolation Forest) to the feature set.
      ALERT on any command line flagged as a significant outlier.
- question: Has a compressed archive been transferred over the network with a combination
    of suspicious attributes like a double extension, password protection, or on
    a non-standard port?
  context: This question looks for a combination of red flags in network file transfers.
    While any single attribute might be benign, their co-occurrence significantly
    increases the likelihood of malicious activity, such as an adversary trying to
    disguise a payload and transfer it over an unusual channel.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network egress/ingress points
  - DMZ
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      ANALYZE Zeek file and connection logs.
      ALERT if a compressed file transfer meets two or more of the following conditions:
      1. Filename has a double extension (e.g., .pdf.zip).
      2. File is password protected.
      3. Transfer occurs on a non-standard port (not 80 or 443).
- question: Has a transferred archive been observed with an unusually high compression
    ratio, suggesting it contains already-encrypted or random data?
  context: This question leverages the fact that random or already-compressed/encrypted
    data cannot be compressed further. A high compression ratio (close to 1.0) indicates
    the file's contents are not compressible, which is a common characteristic of
    data being exfiltrated after being encrypted. This is especially suspicious on
    non-standard ports.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network egress/ingress points
  - DMZ
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      FOR each transferred archive in Zeek files.log, calculate the compression ratio (seen_bytes / total_bytes).
      ESTABLISH a baseline distribution of this ratio.
      ALERT if an archive's ratio is in the top 5th percentile (e.g., > 0.95), and escalate if on a non-standard port.
- question: Does cluster analysis identify anomalous file transfers based on a combination
    of features like compression ratio, password protection, and port usage?
  context: This question uses unsupervised machine learning to find outliers in multi-dimensional
    data. By clustering 'normal' file transfers based on multiple attributes, any
    transfer that doesn't fit into a large, established cluster (i.e., is classified
    as noise or a small, unique cluster) represents a multi-faceted anomaly that
    warrants investigation.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network egress/ingress points
  - DMZ
  range: last 90 days
  queries:
  - search: pseudocode
    query: |-
      APPLY a clustering algorithm (e.g., DBSCAN) to file transfer events.
      USE features like compression ratio, password protection flag, double extension flag, MIME type, and port.
      INVESTIGATE transfers that are classified as noise or belong to very small, isolated clusters.