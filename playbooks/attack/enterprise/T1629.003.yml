name: T1629.003: Disable or Modify Tools
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is attempting to evade mobile security controls by disabling or modifying security tools. It focuses on identifying changes in device administrator privileges, monitoring for Mobile Threat Defense (MTD) agents being disabled or tampered with, detecting the absence of MTD agent heartbeats, and checking for non-compliant security settings like a disabled or permissive SELinux state on Android devices.
type: technique
related:
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have device administrator privileges been illicitly modified by either revoking them from required security tools or granting them to unapproved applications?
    context: This question seeks to identify direct attempts to undermine security posture by manipulating device administrator roles. Revoking privileges from a security tool can render it ineffective, while granting them to a malicious or unauthorized app provides it with elevated permissions to control the device, access sensitive data, or disable other security features.
    answer_sources:
      - MDM/UEM audit logs
      - Application Inventory List
      - Centralized log aggregator (SIEM)
      - MDM/UEM administrative servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH MDM/UEM logs WHERE (event_code is 'device_admin_revoked' AND target_app is a required security tool) OR (event_code is 'device_admin_granted' AND target_app is not an approved admin app)
  - question: Is a specific device exhibiting an unusual frequency of granting device administrator privileges to unapproved applications compared to its historical behavior?
    context: This question aims to detect subtle or low-and-slow attacks where an adversary repeatedly tries to escalate privileges using different unapproved applications. A sudden spike in these events for a single device, even if the individual apps are not immediately flagged as malicious, is a strong indicator of compromise or a user attempting to bypass policy.
    answer_sources:
      - MDM/UEM audit logs
      - Application Inventory List
      - Centralized log aggregator (SIEM)
      - MDM/UEM administrative servers
    range: last 90 days
    queries:
      - pseudocode: 1. For each device, COUNT 'device_admin_granted' events for unapproved apps daily for 30 days to create a baseline. 2. SEARCH for daily counts exceeding the 99th percentile of the baseline.
  - question: Can we use machine learning to predict if a change in device administrator privileges is malicious based on contextual features?
    context: This question explores a proactive, advanced detection method. By training a model on features like the application's requested permissions, its installation source, and device state (e.g., rooted), we can automatically classify privilege changes as malicious with a high degree of confidence, enabling automated responses like device quarantine to stop an attack in progress.
    answer_sources:
      - MDM/UEM audit logs
      - Application Inventory List
      - Centralized log aggregator (SIEM)
      - MDM/UEM administrative servers
      - fleet of managed mobile endpoints
    range: last 90 days
    queries:
      - pseudocode: 1. GATHER features for device admin change events (app_name, permissions, source, time, device_rooted_status). 2. APPLY trained classification model. 3. ALERT on events classified as 'malicious' with confidence > 0.9.
  - question: Has the Mobile Threat Defense (MTD) agent on any device reported a status of disabled, tampered, or stopped?
    context: This question looks for explicit evidence that the MTD security agent has been interfered with. An MTD agent is a critical security control, and any status indicating it is not running correctly is a high-priority event that could mean an adversary is clearing the way for further malicious activity.
    answer_sources:
      - MTD agent status logs
      - MTD alert logs
      - MTD management console
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: SEARCH MTD logs WHERE agent_status is 'disabled' OR 'tampered' OR 'stopped'.
  - question: Is there a statistically significant increase in MTD agent tampering or disabling events for a specific group of devices (by model or OS version)?
    context: This question aims to identify broader campaigns or vulnerabilities affecting a specific subset of the mobile fleet. A sudden spike in agent-down events for all devices of a certain model or OS could indicate a new exploit or a coordinated attack targeting that platform, rather than an isolated incident.
    answer_sources:
      - MTD agent status logs
      - MTD alert logs
      - MTD management console
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: 1. For each device group (model/OS), calculate a 14-day moving average and standard deviation of 'tampered'/'disabled' events. 2. ALERT if the daily count for a group exceeds the average + (3 * stddev).
  - question: Can we use machine learning to differentiate between benign MTD agent stops (e.g., reboots) and malicious tampering?
    context: This question seeks to reduce alert fatigue by intelligently filtering out legitimate reasons for an MTD agent to stop. By correlating the agent status event with other data points like recent device reboots, jailbreak alerts, or new app installations, a model can learn to distinguish malicious intent from normal operational behavior, allowing analysts to focus on true threats.
    answer_sources:
      - MTD agent status logs
      - MTD alert logs
      - MTD management console
      - Centralized log aggregator (SIEM)
      - managed mobile endpoints
    range: last 90 days
    queries:
      - pseudocode: 1. GATHER features for agent stop events (time_since_last_checkin, concurrent_jailbreak_alert, recent_app_install). 2. APPLY trained classification model. 3. ALERT on events classified as 'malicious tampering'.
  - question: Have any devices failed to send a security agent heartbeat within a predefined static time window (e.g., 60 minutes)?
    context: This question provides a basic but effective method for detecting devices that have gone offline unexpectedly. A missing heartbeat indicates the security agent is no longer communicating, which could be due to tampering, the device being powered off, or a network issue. This serves as a first-level check for agent health.
    answer_sources:
      - MTD agent heartbeat logs
      - MTD management console
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: For each device, TRACK last_seen_heartbeat. ALERT if (current_time - last_seen_heartbeat) > 60 minutes.
  - question: Has any device missed a heartbeat for a duration that is statistically anomalous compared to its own historical check-in pattern?
    context: This question refines the missing heartbeat detection by creating a dynamic, per-device baseline. Instead of a single static threshold for all devices, this method accounts for individual device behavior, reducing false positives. A deviation from its own established norm is a much stronger signal of a potential problem. Corroborating with network logs to rule out connectivity issues further increases fidelity.
    answer_sources:
      - MTD agent heartbeat logs
      - Zeek conn.log
      - MTD management console
      - Network sensors at internet gateways
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: 1. For each device, calculate mean and stddev of heartbeat intervals over 30 days. 2. ALERT if time_since_last_heartbeat > (mean + 4 * stddev). 3. CHECK network logs to confirm no recent connection from device IP to MTD server.
  - question: Can a time-series forecasting model predict when a device's security agent heartbeat is significantly delayed or has stopped, indicating a deviation from its normal, complex check-in pattern?
    context: This question proposes the most advanced method for detecting missing heartbeats. A time-series model can learn complex patterns, including regular variations (e.g., less frequent check-ins overnight). An alert is triggered only when a device deviates from its own predicted behavior, providing a very high-fidelity signal that the agent has been tampered with or is otherwise non-functional.
    answer_sources:
      - MTD agent heartbeat logs
      - MTD management console
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: 1. For each device, train a time-series model on historical heartbeat data. 2. PREDICT the next expected check-in time window. 3. ALERT if no heartbeat is received within the predicted interval.
  - question: Are there any Android devices reporting a non-compliant SELinux status of 'permissive' or 'disabled'?
    context: This question checks for a direct violation of a critical Android security policy. SELinux in 'enforcing' mode is a fundamental security layer. An adversary disabling it or setting it to 'permissive' mode is a clear and immediate threat, as it significantly weakens the device's defenses against privilege escalation and malware. This condition warrants an immediate, automated response.
    answer_sources:
      - MDM/UEM compliance reports
      - MTD security posture scan logs
      - MDM/UEM and MTD administrative consoles
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: SEARCH compliance logs WHERE device_os is 'Android' AND (selinux_status is 'permissive' OR selinux_status is 'disabled').
  - question: Is any Android device exhibiting an unusually high rate of change across multiple key security settings simultaneously?
    context: This question aims to detect suspicious activity by looking at the volume of configuration changes rather than a single specific change. A legitimate user or process is unlikely to change multiple security settings (like SELinux status, root status, developer mode) at once. A high entropy score, indicating significant change, suggests a potential adversary or malware is systematically disabling defenses.
    answer_sources:
      - MDM/UEM compliance reports
      - MTD security posture scan logs
      - MDM/UEM and MTD administrative consoles
      - Centralized log aggregator (SIEM)
      - fleet of managed Android devices
    range: last 90 days
    queries:
      - pseudocode: 1. For each Android device, create a daily string of security settings (e.g., 'enforcing|not_rooted|disabled'). 2. Calculate Shannon entropy of this string daily and establish a 30-day baseline. 3. ALERT if daily entropy exceeds the 98th percentile of the baseline.
  - question: Can an unsupervised machine learning model identify Android devices that are outliers from the secure fleet baseline based on their overall security posture?
    context: This question seeks to find devices that are 'unusually configured' compared to the entire fleet, even if they haven't tripped a specific rule. An Isolation Forest model can learn what a 'normal' device looks like based on numerous security settings. Devices that are flagged as anomalies may not have a single critical violation but a combination of suspicious settings (e.g., SELinux permissive, developer mode on, high sideloaded app count) that, when combined, make it a high-risk outlier requiring investigation.
    answer_sources:
      - MDM/UEM compliance reports
      - MTD security posture scan logs
      - MDM/UEM and MTD administrative consoles
      - Centralized log aggregator (SIEM)
      - fleet of managed Android devices
    range: last 90 days
    queries:
      - pseudocode: 1. GATHER features for all Android devices (selinux_status, root_status, days_since_patch, etc.). 2. APPLY trained Isolation Forest model to get anomaly scores. 3. ALERT on devices with the highest anomaly scores (e.g., top 2%).