name: T1036.008: Masquerade File Type
id: c4a8b7f0-1d2e-4c3b-a5f6-7e8d9c0b1a2d
description: This playbook helps investigate attempts by adversaries to evade defenses by masquerading file types. This involves multiple detection strategies, such as identifying files with known malicious hashes but benign extensions, detecting mismatches between a file's extension and its actual MIME type (magic bytes), finding interpreters (like rundll32.exe) executing files with non-executable extensions, observing unusual child processes spawned by document handlers (like notepad.exe spawning cmd.exe), and correlating sequences of file writes in sensitive locations followed by execution via an interpreter.
type: technique
related:
- TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are files being written to disk or transferred over the network that have a known malicious hash but a non-executable file extension?
  context: This question aims to detect a common evasion technique where an adversary renames a malicious executable to a benign-looking file type (e.g., .jpg, .txt) to bypass simple, extension-based security controls. By checking the file's hash against a threat intelligence feed, we can identify its true nature regardless of its name. An alert indicates a high probability of a malicious file attempting to hide on the network or a host.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Network egress points (e.g., proxies, firewalls)
  - User workstations
  - Critical file servers
  - Email gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH file_events (network_transfer OR disk_write)
      WHERE file_hash IN (malicious_hash_list)
      AND file_extension IN (non_executable_extension_list)
      RETURN file_name, file_path, host, user, file_hash, file_extension
- question: Are known malicious tools or files appearing with statistically rare file extensions compared to their historical usage?
  context: This question adds a layer of statistical analysis to the previous detection. Adversaries might reuse the same tool with different fake extensions. By baselining the extensions associated with a known malicious hash, we can spot unusual deviations. For example, if Mimikatz is almost always seen as .exe or .dll, seeing it with a .log extension is highly anomalous and worth investigating.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Network egress points (e.g., proxies, firewalls)
  - User workstations
  - Critical file servers
  - Email gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each malicious_hash in detections:
        historical_extensions = GET_HISTORICAL_EXTENSIONS(malicious_hash)
        CALCULATE frequency_distribution(historical_extensions)
        IF current_extension_rarity < 5th_percentile:
          ALERT
- question: Can a machine learning model identify and prioritize files that are most likely to be maliciously masqueraded based on multiple features?
  context: This question proposes a more advanced, programmatic approach to detection. By training a classification model on features like file hash reputation, extension, the process that wrote the file, and network source reputation, we can create a more nuanced risk score. This allows analysts to focus their attention on the highest probability events, improving efficiency.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Sysmon Event ID 11
  - Network egress points (e.g., proxies, firewalls)
  - User workstations
  - Critical file servers
  - Email gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      features = {hash_rep, extension, source_process, source_ip_rep}
      model_score = CLASSIFICATION_MODEL(features)
      IF model_score > high_threshold:
        ALERT
- question: Are files being transferred over the network that are identified as executables by their content (magic bytes) but have a non-executable file extension?
  context: This question focuses on detecting mismatches between a file's claimed type (extension) and its actual type (MIME type derived from magic bytes). This is a fundamental way to uncover masquerading. For example, a file named 'report.jpg' that Zeek identifies as 'application/x-dosexec' (a Windows executable) is a strong indicator of an attempt to smuggle a malicious payload past network defenses.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network egress points (e.g., proxies, firewalls)
  - Internal network segments
  - Web servers
  - Mail servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH network_file_transfers
      WHERE mime_type IN ('application/x-dosexec', 'application/octet-stream')
      AND file_extension IN (non_executable_list)
      RETURN file_name, source_ip, dest_ip, mime_type, file_extension
- question: Are we observing statistically rare combinations of file extensions and MIME types in network traffic?
  context: This question moves beyond a static list of bad combinations to a dynamic, data-driven approach. By baselining all extension-MIME type pairs in the environment, the system can learn what is normal. An alert is triggered for a pair that is either brand new or has a very low probability of occurring, indicating a potential anomaly that could be a masqueraded file.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network egress points (e.g., proxies, firewalls)
  - Internal network segments
  - Web servers
  - Mail servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      BASELINE all (extension, mime_type) pairs over 30 days
      FOR each new_file_transfer:
        probability = CALCULATE_PROBABILITY(mime_type | extension)
        IF probability < 1st_percentile OR is_new:
          ALERT
- question: Can unsupervised machine learning identify anomalous clusters of file transfers that may represent masqueraded executables?
  context: This question suggests using clustering algorithms to find 'unknown unknowns'. By grouping file transfers based on multiple features (size, name entropy, IP reputation, extension, MIME type), normal activity will form dense clusters. Outliers or small, isolated clusters represent anomalous transfers that do not fit the typical patterns and are candidates for investigation.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network egress points (e.g., proxies, firewalls)
  - Internal network segments
  - Web servers
  - Mail servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      features = {size, entropy, ip_rep, ext, mime}
      clusters = CLUSTER_ALGORITHM(file_transfers, features)
      INVESTIGATE outlier_clusters
- question: Are legitimate system interpreters (like rundll32.exe, mshta.exe) being used to execute files with non-standard or non-executable extensions?
  context: This question targets the 'living off the land' technique where adversaries abuse legitimate Windows utilities to execute malicious code. Seeing an interpreter invoked with a command line pointing to a .txt or .jpg file is highly suspicious and a common pattern for bypassing application whitelisting, as the trusted interpreter is allowed to run, but it is being fed malicious, masqueraded content.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Application servers
  - Domain controllers
  - Terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events
      WHERE process_name IN (interpreter_list)
      AND command_line CONTAINS file_with_non_executable_extension
      RETURN process_name, command_line, user, host
- question: Are interpreters being invoked with file extensions that are statistically rare for that specific interpreter in our environment?
  context: This question refines the previous rule by adding environmental baselining. By building a profile of normal behavior for each interpreter (e.g., 'rundll32.exe' most often uses '.dll'), we can flag executions that use a statistically improbable extension for that specific interpreter. This helps reduce false positives from a static rule and focuses on true anomalies.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Application servers
  - Domain controllers
  - Terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each interpreter in (interpreter_list):
        BASELINE extension_frequency from command_lines over 30 days
        IF new_process_extension_frequency < 5th_percentile:
          ALERT
- question: Are there anomalous spikes in the frequency of a specific interpreter/extension pair on a given host?
  context: This question seeks to detect targeted attacks on a per-host basis. While a low-frequency interpreter/extension pair might occur occasionally, a sudden burst of these events on a single machine is highly abnormal. A time-series model can learn the normal 'heartbeat' of such activity for each host and alert when a significant deviation occurs.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Application servers
  - Domain controllers
  - Terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each host:
        MODEL frequency of (interpreter, extension) pairs over time
        IF observed_frequency > 3 * standard_deviation_from_forecast:
          ALERT
- question: Are common document or image viewers (like Notepad, Adobe Reader, MS Paint) spawning command shells or script interpreters?
  context: This question looks for a classic sign of exploitation of a malicious document. A user opens what they believe is a harmless file, but a vulnerability in the viewer application is exploited to launch a malicious payload, often a command shell (cmd.exe) or PowerShell. A process like 'AcroRd32.exe' should never spawn 'powershell.exe', so such an event is a very high-fidelity indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Terminal servers
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events
      WHERE parent_process_name IN (document_handler_list)
      AND child_process_name IN (shell_interpreter_list)
      RETURN parent_process_name, child_process_name, command_line, user, host
- question: Are we observing statistically rare or never-before-seen parent-child process relationships across the enterprise?
  context: This question operationalizes the concept of 'normal' process behavior by building a graph of all parent-child relationships seen in the environment. An adversary introducing a new tool or technique will likely create a process chain that has never been seen before, which would be flagged by this analysis as a low-frequency, high-interest event.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Terminal servers
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      BUILD graph of all (parent_process, child_process) pairs over 90 days
      CALCULATE frequency of each pair
      IF observed_pair_frequency < 1st_percentile OR is_new:
        ALERT
- question: Can a machine learning model be used to assign a risk score to new parent-child process chains to prioritize investigation?
  context: This question proposes a more sophisticated method for analyzing parent-child process relationships. Instead of just looking at the names, a model can incorporate features like command-line arguments, user context, and process integrity levels to learn subtle malicious patterns and assign a risk score, helping analysts prioritize the most dangerous-looking process chains.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Terminal servers
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      features = {parent_name, child_name, command_line, user}
      risk_score = CLASSIFICATION_MODEL(features)
      PRIORITIZE alerts based on risk_score
- question: Is a non-executable file being written to a sensitive directory (like a startup folder) by a browser or email client and then quickly executed by an interpreter?
  context: This question seeks to identify the full 'dropper-to-execution' chain of an attack. Correlating the file write event with the subsequent process execution event for the same file path within a short time window provides strong, contextual evidence of a malicious payload being delivered and run.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - User workstations
  - Servers with web browsers
  - Shared network drives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH for file_creation (event=Sysmon11, extension=non_exec, path=sensitive_dir)
      AND process_creation (event=Sysmon1, file_path_in_commandline)
      WHERE time_diff < 5_minutes
      AND file_creation.path == process_creation.file_path
- question: Is there a statistically significant and anomalous change in the types of files being written to sensitive system directories?
  context: This question focuses on monitoring the 'weather' in sensitive directories like C:\Windows\Temp. These locations have predictable patterns of file activity. A statistical test, like chi-squared, can compare the current distribution of file extensions being written to a directory against a historical baseline. A sudden, unexplained increase in a particular file type would cause a deviation and trigger an alert.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - User workstations
  - Servers with web browsers
  - Shared network drives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each sensitive_directory:
        BASELINE file_extension_distribution per process over 30 days
        USE chi_squared_test to compare current_distribution with baseline
        IF deviation is significant:
          ALERT
- question: Can we use sequence analysis to detect anomalous chains of events related to file creation and execution that do not match normal behavior?
  context: This question proposes an advanced analytical method to understand the 'grammar' of system events. By modeling normal sequences (e.g., Word writes a .tmp file, then renames it to .docx), the system can identify sequences that are syntactically incorrect or have a very low probability of occurring naturally, which would be indicative of a masquerading attack.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - User workstations
  - Servers with web browsers
  - Shared network drives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      TRAIN sequence_model (HMM/LSTM) on normal event chains
      FOR each new_event_sequence:
        probability = CALCULATE_PROBABILITY(sequence)
        IF probability < low_threshold:
          ALERT