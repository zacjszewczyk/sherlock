name: T1562.011: Spoof Security Alerting
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is attempting to evade defenses by spoofing security alerts. This involves generating fake security notifications to deceive users or injecting false "healthy" status logs to mislead security monitoring systems. The investigation focuses on identifying IOCs related to defense evasion malware, analyzing process command-lines for spoofing keywords, detecting anomalous parent-child process relationships involving security tools, finding logical contradictions in system and application event logs, identifying security tools impersonated via name or path, and monitoring for abnormal frequencies of security status messages.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are there any process creation or network events that match known indicators of compromise for defense evasion or security tool spoofing malware?
    context: This question aims to identify malicious activity by cross-referencing file hashes, destination IPs, and domains from process and network logs with a high-confidence threat intelligence feed. A match is a strong indicator of a known threat attempting to operate covertly.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Enterprise Endpoints (Workstations and Servers)
      - Network Egress/Ingress Points (e.g., Firewalls, Proxies)
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events, network_connection_logs | JOIN on process_guid | LOOKUP threat_intel_feed on file_hash, destination_ip, domain | WHERE match_found
  - question: Are there any newly executed processes with low prevalence across the enterprise that are making external network connections?
    context: This question seeks to find rare or novel executables that might be part of a targeted attack. Legitimate software is typically widespread, whereas malware is often found on a small number of machines. Focusing on rare processes that also communicate externally helps prioritize potentially malicious activity for investigation, especially if they are not on an approved software list.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Enterprise Endpoints (Workstations and Servers)
      - Network Egress/Ingress Points (e.g., Firewalls, Proxies)
      - Threat Intelligence Platform
    range: last 30 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events where process NOT in allowlist | CALCULATE prevalence(file_hash) over 30d | FILTER prevalence < 1st_percentile | JOIN network_connection_logs | WHERE external_connection_exists
  - question: Can a machine learning model classify process execution events to identify those with evasive or malicious characteristics?
    context: This question explores using a supervised machine learning model to proactively identify suspicious process executions. By training on features like file reputation, parent process, command-line entropy, and network behavior, the model can learn to spot subtle signs of evasion that might be missed by signature-based rules, providing a more dynamic and predictive defense.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Enterprise Endpoints (Workstations and Servers)
      - Network Egress/Ingress Points (e.g., Firewalls, Proxies)
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - language: pseudocode
        query: TRAIN classification_model on labeled_process_events with features (hash_rep, parent_proc, cmd_entropy, net_asn) | PREDICT on new_process_events | ALERT on 'suspicious' or 'malicious' classification
  - question: Are any processes being created with command-line arguments that suggest the spoofing of security alerts?
    context: This question looks for direct evidence of alert spoofing by searching for command-line patterns used to create fake notifications. This includes using built-in tools like 'msg.exe', PowerShell GUI manipulation, or scripts containing alert-like text. A match is a strong indicator of an adversary trying to deceive the user.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints
      - Centralized Log Aggregator (SIEM)
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (4688) | REGEX command_line for 'msg.exe *', '.ShowDialog()', 'alert-like-strings' | ALERT on match
  - question: Are there any process executions with unusually long or complex command-line arguments compared to their historical baseline?
    context: This question uses statistical anomaly detection to find suspicious command-line activity. Adversaries often use long, obfuscated, or encoded commands to hide their actions. By baselining the normal length and entropy for each process, we can flag significant deviations that may indicate malicious or evasive behavior.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints
      - Centralized Log Aggregator (SIEM)
    range: last 30 days
    queries:
      - language: pseudocode
        query: FOR each process_name | BASELINE command_line_length, command_line_entropy over 30d | SEARCH new_process_events | ALERT where length > 99th_percentile OR entropy > 99th_percentile
  - question: Are there new or rare clusters of command-line argument patterns appearing in the environment?
    context: This question applies unsupervised machine learning to discover novel attack patterns. By clustering tokenized command-line arguments, we can identify groups of activity that deviate from the established norm. New or small clusters represent unusual behavior that warrants manual investigation for potential threats.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints
      - Centralized Log Aggregator (SIEM)
    range: last 90 days
    queries:
      - language: pseudocode
        query: TOKENIZE all command_line_arguments | CLUSTER tokens (DBSCAN/K-Means) | REVIEW new_or_low_density_clusters
  - question: Is a trusted security tool spawning an unexpected or unauthorized child process?
    context: This question aims to detect process injection or other techniques where an adversary hijacks a trusted security process to execute malicious code. By maintaining a strict allowlist of known-good child processes for security tools, any deviation from this list is a high-fidelity indicator of potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Endpoints with standard EDR/Antivirus solutions installed
      - Domain Controllers
      - Critical Application Servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (4688) | FILTER parent_process is in security_tool_list | CHECK if child_process is in allowlist for parent | ALERT on mismatch
  - question: Is a security tool spawning a child process that it has rarely or never spawned before?
    context: This question uses a probabilistic approach to detect anomalous parent-child process relationships. Legitimate operations are typically repetitive and predictable. An extremely rare relationship, such as an antivirus service spawning a PowerShell session, is highly suspicious and could indicate misuse of a trusted process.
    answer_sources:
      - Windows Event ID 4688
      - Endpoints with standard EDR/Antivirus solutions installed
      - Domain Controllers
      - Critical Application Servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: CALCULATE historical_probability(parent, child) for all processes | SEARCH new_process_events | FILTER parent_process is security_tool | ALERT where probability < 0.1%
  - question: Does the observed chain of process executions involving a security tool deviate from the normal, learned process execution graph?
    context: This question applies graph-based anomaly detection to model entire process execution chains. This method can identify complex, multi-step attacks that might appear benign in isolation. An anomalous graph structure, like a security tool connecting to an unusual scripting engine, suggests a sophisticated attempt to evade defenses.
    answer_sources:
      - Windows Event ID 4688
      - Endpoints with standard EDR/Antivirus solutions installed
      - Domain Controllers
      - Critical Application Servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: TRAIN graph_model on baseline_process_chains | SCORE new_process_chains | ALERT on anomalous_chains involving security_tools
  - question: Is there a logical contradiction where a security tool service is reported as stopped, but its own logs claim it is healthy?
    context: This question seeks to find direct evidence of log and service tampering. An adversary might stop a security service to operate freely, while simultaneously injecting fake 'healthy' log entries to avoid detection. Correlating service control manager events with the application's own logs can reveal this contradiction.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 7034
      - Windows Application Event Log
      - Microsoft-Windows-Windows Defender/Operational
      - Zeek conn.log
      - Centralized SIEM Platform (for event correlation)
      - All Windows Endpoints (forwarding Service Control Manager and Application logs)
      - Network Security Monitoring sensors at key chokepoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: CORRELATE on host | TRIGGER if (event_id 7036/7034 for security_service) AND (within 5 min, 'healthy_status' log from same_service) | ALERT
  - question: Is there an unusual statistical correlation between service stop events and 'healthy' status messages for a security tool?
    context: This question analyzes the relationship between service status and health reporting over time. Normally, these events are correlated. A negative correlation or a sudden decorrelation from the baseline suggests that one stream of events is being manipulated, which could indicate spoofing.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 7034
      - Windows Application Event Log
      - Microsoft-Windows-Windows Defender/Operational
      - Zeek conn.log
      - Centralized SIEM Platform (for event correlation)
      - All Windows Endpoints (forwarding Service Control Manager and Application logs)
      - Network Security Monitoring sensors at key chokepoints
    range: last 24 hours
    queries:
      - language: pseudocode
        query: CALCULATE correlation_coefficient(count('service_stopped'), count('healthy_status')) over 24h_window | ALERT on significant_negative_correlation or decorrelation_from_baseline
  - question: Does the sequence of events reported by a security tool follow its expected operational model?
    context: This question uses a state transition model (like a Hidden Markov Model) to validate the logical flow of a security tool's operations. A legitimate tool follows a predictable sequence (e.g., start -> scan -> complete). An event sequence with a low probability, such as a 'healthy' status appearing without a preceding 'scan complete', indicates a broken or manipulated sequence.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 7034
      - Windows Application Event Log
      - Microsoft-Windows-Windows Defender/Operational
      - Zeek conn.log
      - Centralized SIEM Platform (for event correlation)
      - All Windows Endpoints (forwarding Service Control Manager and Application logs)
      - Network Security Monitoring sensors at key chokepoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: TRAIN HMM_model on legitimate_event_sequences | SCORE new_event_sequences | ALERT on low_probability_sequence
  - question: Is a process running that impersonates a legitimate security tool through name misspelling or execution from an unauthorized path?
    context: This question aims to detect a common evasion technique known as masquerading. By comparing running processes against a dictionary of legitimate security tools—including their correct names, paths, and file hashes—we can identify imposters. This includes 'typosquatting' (e.g., 'MsMpEnge.exe') or running a correctly named process from a non-standard location like %APPDATA%.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows Endpoints (File System and Process Monitoring)
      - Network Firewalls and Proxies
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (4688) | LOOKUP process against security_tool_dictionary | ALERT if name_matches AND (path_mismatch OR hash_mismatch) OR (levenshtein_distance(name, dict_name) <= 2)
  - question: Is a process impersonating a security tool name running from a file path with unusually high entropy?
    context: This question uses file path entropy as an indicator of masquerading. Legitimate software is typically installed in predictable, low-entropy paths. Malware, however, is often placed in deep, randomized, or user-specific directories, resulting in high-entropy paths. A high entropy score for a process posing as a security tool is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows Endpoints (File System and Process Monitoring)
      - Network Firewalls and Proxies
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events | FILTER process_name matches security_tool_name | CALCULATE entropy(file_path) | ALERT if entropy > 98th_percentile
  - question: Can a one-class machine learning model identify processes that are outliers compared to known-good security processes?
    context: This question uses one-class classification to build a profile of 'normal' for security processes. By training a model on features of legitimate security tools (e.g., path depth, parent process, digital signature), it can then identify any new process that deviates significantly from this profile, flagging it as a potential imposter.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows Endpoints (File System and Process Monitoring)
      - Network Firewalls and Proxies
    range: last 90 days
    queries:
      - language: pseudocode
        query: TRAIN one_class_svm on features_of_legit_security_procs | PREDICT on new_process_events | ALERT on outliers
  - question: Are 'healthy' status messages for a security tool being logged even though the tool has been reported as disabled and not re-enabled?
    context: This question looks for a specific logical contradiction over time. If a security tool is disabled and does not generate a corresponding 'enabled' event within a reasonable timeframe, any subsequent 'healthy' messages from that tool are highly likely to be spoofed. This is a strong indicator of an adversary attempting to maintain the illusion of security.
    answer_sources:
      - Windows Application Event Log
      - Microsoft-Windows-Windows Defender/Operational
      - Centralized Log Management Platform (SIEM)
      - All Windows Endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: STATEFUL RULE: ON 'security_control_disabled' event | START 15min_timer | IF 'healthy_status' event for same_tool occurs AND NO 'security_control_enabled' event, ALERT
  - question: Has the frequency of 'healthy' status reports from a specific security tool on a host significantly deviated from its historical baseline?
    context: This question uses statistical analysis to detect anomalies in the volume of security health logs. An adversary might either flood the logs with fake 'healthy' messages to obscure other activity, or they might disable the tool, causing a complete cessation of logs. Both scenarios—a count far above the mean (Z-score > 3) or a drop to zero for an unusual duration—are suspicious.
    answer_sources:
      - Windows Application Event Log
      - Microsoft-Windows-Windows Defender/Operational
      - Centralized Log Management Platform (SIEM)
      - All Windows Endpoints
    range: last 30 days
    queries:
      - language: pseudocode
        query: MODEL hourly_count of 'healthy_status' reports over 30d | ALERT if current_count > (mean + 3*stdev) OR if count == 0 for > max_reporting_interval
  - question: Does the observed volume of security status reports fall outside the predicted range of a time-series forecasting model?
    context: This question employs a more sophisticated forecasting model (like ARIMA or Prophet) to predict the expected number of health reports. This method can account for seasonality and trends in logging. An actual count that falls significantly outside the model's confidence interval indicates a deviation from the established pattern, suggesting either spoofing (too many reports) or tool tampering (too few).
    answer_sources:
      - Windows Application Event Log
      - Microsoft-Windows-Windows Defender/Operational
      - Centralized Log Management Platform (SIEM)
      - All Windows Endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: TRAIN time_series_model on security_report_volume | PREDICT expected_volume for next_interval | ALERT if actual_volume is outside prediction_interval