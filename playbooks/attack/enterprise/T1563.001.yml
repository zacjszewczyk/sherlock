name: T1563.001: SSH Hijacking
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate potential SSH Hijacking (T1563.001), a lateral movement technique. It focuses on identifying adversaries who have moved laterally by taking control of existing, authenticated SSH sessions. Key indicators include: SSH connections involving hosts on threat intelligence lists or with high-risk scores; the use of SSH multiplexing features (ControlMaster, ControlPath); unusual fan-out SSH behavior or connections to statistically rare hosts; execution of reconnaissance or credential access tools from an sshd-spawned process; and SSH connections that violate established access control policies or behavioral norms.
type: technique
related:
- TA0008: Lateral Movement
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any SSH connections where the source or destination IP address is on a threat intelligence watchlist?
  context: This question aims to identify SSH traffic to or from known malicious infrastructure or internally identified compromised systems. An adversary may use a compromised host to pivot to other systems, or an external C2 server might connect into the network via SSH. A match provides a high-confidence indicator of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Network security monitoring sensors
  - Threat Intelligence platforms
  - SIEM alert correlation engine
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each SSH_connection_event:
        IF source_IP IN threat_intel_feed OR destination_IP IN threat_intel_feed:
          ALERT "SSH Connection to/from known bad IP"
- question: Have any SSH sessions occurred between hosts with an anomalously high combined risk score?
  context: This question seeks to identify SSH connections involving hosts that are already exhibiting suspicious behavior. By assigning risk scores based on recent security alerts, we can flag sessions that link two potentially compromised or at-risk systems. This is useful for detecting adversaries pivoting between hosts they have already gained some level of access to.
  answer_sources:
  - Zeek conn.log
  - Network security monitoring sensors
  - Threat Intelligence platforms
  - SIEM alert correlation engine
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each new_SSH_session:
        source_risk_score = GET_RISK_SCORE(source_host, last_7_days)
        dest_risk_score = GET_RISK_SCORE(destination_host, last_7_days)
        session_risk = source_risk_score + dest_risk_score
        IF session_risk > 99th_percentile_of_session_scores(last_30_days):
          ALERT "High risk SSH session detected"
- question: Has a machine learning model predicted a high probability of compromise for a host involved in a recent SSH session?
  context: This question leverages a predictive model to proactively identify SSH sessions involving hosts that are likely compromised, even if they haven't triggered specific high-severity alerts yet. The model analyzes historical alert patterns to make its prediction, allowing for the detection of more subtle or novel compromise indicators.
  answer_sources:
  - Zeek conn.log
  - Network security monitoring sensors
  - Threat Intelligence platforms
  - SIEM alert correlation engine
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each new_SSH_session:
        source_compromise_prob = PREDICT_COMPROMISE(source_host)
        dest_compromise_prob = PREDICT_COMPROMISE(destination_host)
        IF source_compromise_prob > 0.85 OR dest_compromise_prob > 0.85:
          ALERT "SSH session involves host with high predicted compromise probability"
- question: Has an SSH client process been executed with command-line arguments for connection multiplexing?
  context: This question looks for the use of SSH multiplexing, which allows an attacker to reuse an existing SSH connection to move laterally without re-authenticating. While legitimate users (like developers) may use this feature, it is also a known TTP for adversaries. Its presence warrants investigation to determine the context and legitimacy of the activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint detection and response (EDR) logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each process_creation_event:
        IF process_name IN ('ssh', 'ssh.exe') AND command_line CONTAINS ('-S', '-M', 'ControlMaster', 'ControlPath'):
          ALERT "SSH multiplexing argument detected"
- question: Has a user who does not normally use SSH multiplexing started using it?
  context: This question adds a layer of behavioral analysis to the detection of SSH multiplexing. By baselining normal user behavior, it can distinguish between a developer who uses multiplexing daily and an attacker using it for the first time on a compromised account. An alert from this query is a high-fidelity indicator of anomalous, and potentially malicious, activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint detection and response (EDR) logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each SSH_multiplexing_execution by user:
        historical_prob = GET_USER_MULTIPLEX_PROBABILITY(user, last_90_days)
        IF historical_prob < 0.01:
          ALERT "Anomalous SSH multiplexing usage by user"
- question: Has an SSH command been executed that is structurally unusual or anomalous compared to historical commands?
  context: This question uses a natural language processing model to detect oddly formed or rare SSH commands. Attackers often use complex, obfuscated, or unusual command-line combinations that deviate from normal administrative patterns. A high perplexity score suggests the command is 'surprising' to the model and could be attacker-crafted, especially if it also contains multiplexing arguments.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint detection and response (EDR) logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each new_SSH_command_line:
        perplexity = CALCULATE_PERPLEXITY(command_line)
        IF perplexity > anomaly_threshold:
          ALERT "Anomalous SSH command structure detected"
- question: Has any single host initiated an unusually high number of distinct SSH connections in a short period of time?
  context: This question aims to detect 'fan-out' activity, where a compromised host is used as a pivot point to scan or connect to many other hosts on the network. This is a common pattern for automated lateral movement scripts. Correlating the source IP with user logon events helps attribute the activity to a specific account.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - East-west traffic monitoring points
  - Authentication servers
  - Network flow collectors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      AGGREGATE SSH_connections by source_IP over 15_minutes
      FOR each source_IP:
        IF count(distinct destination_IPs) > 10:
          user = FIND_USER_LOGGED_IN_AT(source_IP)
          ALERT "SSH fan-out detected from host, attributed to user"
- question: Has a user connected via SSH to a destination host that is statistically rare for them?
  context: This question identifies deviations from a user's established SSH connection patterns. An administrator typically connects to a specific set of servers. A connection to a new or rarely accessed host (e.g., a colleague's workstation) could indicate that their account has been compromised and is being used for lateral movement.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - East-west traffic monitoring points
  - Authentication servers
  - Network flow collectors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each new_SSH_connection by user to destination_host:
        connection_frequency = GET_USER_DESTINATION_FREQUENCY(user, destination_host)
        IF connection_frequency < 5th_percentile_for_user:
          ALERT "User connected to a statistically rare SSH destination"
- question: Have any SSH connections occurred that do not fit into established clusters of normal activity?
  context: This question uses machine learning to define 'normal' SSH behavior by grouping similar connections into clusters. Any connection that falls outside of these clusters is considered an outlier or 'noise.' Such anomalies are often indicative of new, unauthorized, or malicious activity that doesn't conform to the established operational patterns of the network.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - East-west traffic monitoring points
  - Authentication servers
  - Network flow collectors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each new_SSH_connection:
        cluster_assignment = CLUSTER_CONNECTION(source, destination, user, time)
        IF cluster_assignment == 'NOISE':
          ALERT "Anomalous SSH connection detected (outlier)"
- question: Has a process spawned by the SSH daemon executed a command associated with reconnaissance, credential access, or lateral movement?
  context: This question directly looks for post-exploitation activity following a successful SSH connection. After gaining access, an attacker will typically run commands to understand the system (`whoami`, `ipconfig`), dump credentials (`mimikatz.exe`), or move to other systems (`psexec.exe`). Alerting on these specific commands executed by a child of the SSH daemon is a strong indicator of an active attacker.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process execution logs on SSH targets
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each process_creation_event:
        IF parent_process_name IN ('sshd', 'sshd.exe'):
          IF child_process_name IN suspicious_watchlist OR command_line IN suspicious_watchlist:
            ALERT "Suspicious command executed via SSH session"
- question: Did an interactive SSH session exhibit an unusually high degree of command-line randomness or complexity?
  context: This question attempts to quantify the nature of an SSH session. Legitimate administrative sessions often involve repetitive, simple commands. In contrast, an attacker's exploratory session or one involving obfuscated commands may have higher command-line entropy. A significant deviation from the baseline entropy for a user or host can signal malicious, non-standard interaction.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process execution logs on SSH targets
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each completed_SSH_session:
        session_entropy = CALCULATE_COMMAND_ENTROPY(session_commands)
        baseline_entropy = GET_BASELINE_ENTROPY(user, host)
        IF session_entropy > (baseline_entropy + 3 * STDEV):
          ALERT "High entropy commands detected in SSH session"
- question: Did the sequence of commands within an SSH session follow a pattern indicative of an attack (e.g., discovery followed by execution)?
  context: This question moves beyond individual commands to analyze the entire 'story' of an SSH session. It models the attacker lifecycle within a session, identifying the logical progression from benign system interaction to reconnaissance and finally to malicious execution. This sequence-based approach can detect a compromise even if individual commands, viewed in isolation, appear benign.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process execution logs on SSH targets
  range: last 90 days
  queries:
a  - technology: Pseudocode
    query: |
      FOR each SSH_session:
        command_intents = CLASSIFY_INTENT_FOR_EACH_COMMAND(session_commands)
        IF command_intents matches pattern ['benign', ..., 'discovery', ..., 'execution']:
          ALERT "Attack pattern sequence detected in SSH session"
- question: Has an SSH connection occurred that violates the defined network segmentation or access control policy?
  context: This question enforces a zero-trust approach to SSH traffic. By explicitly defining which types of assets are allowed to communicate via SSH (e.g., admin workstations to servers), any connection that falls outside this policy is immediately flagged. This is highly effective for detecting lateral movement between segments that should be isolated, such as a web server connecting to a database server.
  answer_sources:
  - Zeek conn.log
  - East-west traffic monitoring points
  - Network TAPs/SPAN ports
  - VPC flow logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each SSH_connection:
        source_group = GET_ASSET_GROUP(source_IP)
        dest_group = GET_ASSET_GROUP(destination_IP)
        IF IS_CONNECTION_ALLOWED(source_group, dest_group) == FALSE:
          ALERT "SSH connection violates access control policy"
- question: Has a host's typical SSH role (e.g., client-only, server-only) changed unexpectedly?
  context: This question baselines the behavioral role of each host regarding SSH. A web server, for example, should only ever be an SSH 'Server' (receiving connections), not a 'Client' (initiating them). If that server suddenly initiates an outbound SSH connection, it's a strong anomaly, suggesting it has been compromised and is now being used as a pivot point.
  answer_sources:
  - Zeek conn.log
  - East-west traffic monitoring points
  - Network TAPs/SPAN ports
  - VPC flow logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each host:
        current_role = CLASSIFY_SSH_ROLE(host, last_24_hours)
        historical_role = GET_HISTORICAL_SSH_ROLE(host, last_30_days)
        IF current_role != historical_role AND historical_role == 'Server' AND current_role != 'Server':
          ALERT "Host role changed: Server initiated outbound SSH"
- question: Has an SSH connection been made between two network communities or zones that do not normally interact?
  context: This question uses graph analysis to identify macro-level lateral movement. Networks naturally form communities of hosts that interact frequently (e.g., developer workstations, production web servers). An SSH connection that crosses the boundary between two otherwise separate communities is a significant anomaly, strongly suggesting an attacker is attempting to bridge security zones.
  answer_sources:
  - Zeek conn.log
  - East-west traffic monitoring points
  - Network TAPs/SPAN ports
  - VPC flow logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      UPDATE network_graph_communities with recent SSH data
      FOR each new_SSH_connection:
        source_community = GET_COMMUNITY(source_IP)
        dest_community = GET_COMMUNITY(destination_IP)
        IF source_community != dest_community AND IS_BRIDGE_UNUSUAL(source_community, dest_community):
          ALERT "Anomalous cross-community SSH connection detected"