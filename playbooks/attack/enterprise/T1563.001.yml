name: T1563.001: SSH Hijacking
id: a7b0c1d2-e3f4-4a5b-8c6d-7e8f9a0b1c2d
description: This playbook helps investigate potential lateral movement using SSH Hijacking. The investigation focuses on identifying SSH connections involving hosts on threat intelligence lists, the use of SSH connection multiplexing indicative of hijacking, unusual fan-out or rare connection patterns, post-exploitation commands executed over SSH, and connections that violate established access control policies or behavioral roles.
type: technique
related:
  - TA0008: Lateral Movement
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is there an SSH connection involving a host that is on a threat intelligence or internal high-risk watchlist?
    context: This question seeks to identify SSH connections to or from known-bad or high-risk hosts. Malicious actors often use previously compromised systems as part of their infrastructure, and an SSH connection involving such a system is a strong indicator of lateral movement or command-and-control activity.
    answer_sources:
      - Zeek conn.log
      - Network security monitoring sensors (e.g., Zeek sensors at network egress/ingress points)
      - Threat Intelligence platforms
      - SIEM alert correlation engine
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each new Zeek conn.log event WHERE destination_port == 22:
            IF source_ip OR destination_ip IN (threat_intel_feed, internal_watchlist):
              GENERATE high_priority_alert
  - question: Has a new SSH session been established between hosts whose combined risk score exceeds a statistically significant threshold?
    context: This question uses a risk-scoring model to find suspicious SSH connections. By assigning risk scores to hosts based on recent security alerts, we can identify when two high-risk systems communicate. This elevates low-fidelity signals into a higher-confidence alert, suggesting that two potentially compromised systems are interacting.
    answer_sources:
      - Zeek conn.log
      - Network security monitoring sensors (e.g., Zeek sensors at network egress/ingress points)
      - Threat Intelligence platforms
      - SIEM alert correlation engine
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DEFINE host_risk_score = f(alert_count, alert_severity) over 7 days
          FOR each new SSH connection:
            session_risk = host_risk_score(source_host) + host_risk_score(destination_host)
            IF session_risk > 99th_percentile_of_past_30_days:
              GENERATE alert
  - question: Has a machine learning model predicted a high probability of compromise for either the source or destination host of a new SSH session?
    context: This question leverages a predictive model to identify high-risk SSH sessions. A supervised machine learning model, trained on historical alert data, can learn complex patterns of compromise. If the model assigns a high probability of compromise to either host in an SSH session, it serves as a data-driven indicator of potentially malicious activity.
    answer_sources:
      - Zeek conn.log
      - Network security monitoring sensors (e.g., Zeek sensors at network egress/ingress points)
      - Threat Intelligence platforms
      - SIEM alert correlation engine
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DEFINE model = trained_classifier_on_host_features()
          FOR each new SSH connection:
            source_prob = model.predict(source_host)
            dest_prob = model.predict(destination_host)
            IF source_prob > 0.85 OR dest_prob > 0.85:
              FLAG session for review
  - question: Has a process been created for an SSH client using command-line arguments for connection multiplexing?
    context: This question looks for direct evidence of SSH hijacking preparation. Adversaries use SSH multiplexing (via arguments like -S, -M, ControlMaster) to reuse an existing, authenticated SSH connection socket, allowing them to move to another machine without re-authenticating. Detecting the creation of such a process is a key indicator for this specific technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint detection and response (EDR) logs from critical servers, developer workstations, and administrative jump boxes/bastion hosts.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each process_creation_event:
            IF process_name IN ('ssh', 'ssh.exe') AND command_line CONTAINS ('-S', '-M', 'ControlMaster', 'ControlPath'):
              GENERATE alert
  - question: Has a user, who does not normally use SSH multiplexing, executed an SSH command with multiplexing arguments?
    context: This question applies user behavior analytics to detect anomalies. Most users have consistent command usage patterns. If a user who has never used SSH multiplexing before suddenly does, it is a strong deviation from their baseline behavior. This anomaly suggests their account or session may be compromised and used by an adversary.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint detection and response (EDR) logs from critical servers, developer workstations, and administrative jump boxes/bastion hosts.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each user, build baseline of multiplexing_arg_usage_probability over 90 days
          FOR each new SSH process with multiplexing_args:
            IF user_usage_probability < 0.01:
              GENERATE alert
  - question: Has an NLP model identified an SSH command line as having an anomalously high perplexity score, indicating it is unusual or attacker-crafted?
    context: This question uses a natural language processing (NLP) model to find unusual command-line structures. A model trained on legitimate SSH commands can calculate a 'perplexity' score for new commands. A high score means the command is statistically unlikely and does not conform to normal patterns, suggesting it may be obfuscated or crafted by an attacker.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint detection and response (EDR) logs from critical servers, developer workstations, and administrative jump boxes/bastion hosts.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DEFINE model = trained_NLP_model_on_ssh_commands()
          FOR each new SSH command:
            perplexity = model.calculate_perplexity(command_line)
            IF perplexity is anomalously high AND command_line CONTAINS multiplexing_args:
              FLAG as suspicious
  - question: Has a single host initiated an unusually high number of distinct outbound SSH connections in a short period?
    context: This question aims to detect "fan-out" activity, a common pattern of automated lateral movement. When an adversary compromises a machine, they may use it to scan or connect to many other hosts on the network. A surge in distinct outbound SSH connections from a single source is a strong indicator of this behavior.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - East-west traffic monitoring points (e.g., core switches, virtual switch flow logs)
      - Authentication servers
      - Network flow collectors
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each 15-minute window:
            COUNT distinct destination_ips for SSH from each source_ip
            IF count > 10:
              GENERATE alert and correlate source_ip with user authentication logs
  - question: Has a user established an SSH connection to a destination host that is statistically rare for that user?
    context: This question focuses on identifying deviations in user-to-host access patterns. Users typically connect to a predictable set of servers related to their job function. An SSH connection to a host a user rarely or never connects to is a significant anomaly and could indicate that their credentials have been stolen and are being used for lateral movement.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - East-west traffic monitoring points (e.g., core switches, virtual switch flow logs)
      - Authentication servers
      - Network flow collectors
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each user, build baseline of destination_host_frequency
          FOR each new SSH connection by user to destination_host:
            IF connection_frequency is in bottom 5th percentile for that user:
              GENERATE alert
  - question: Has an unsupervised clustering algorithm identified a new SSH connection as a 'noise' point, indicating it falls outside of normal, established patterns of activity?
    context: This question uses machine learning to find connections that do not fit any normal pattern. Unsupervised clustering algorithms (like DBSCAN) group similar, legitimate connections into dense clusters. Any connection that does not belong to a cluster is considered an outlier or 'noise', representing a significant deviation from established behavior and warranting investigation.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - East-west traffic monitoring points (e.g., core switches, virtual switch flow logs)
      - Authentication servers
      - Network flow collectors
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          APPLY DBSCAN clustering to SSH connection features (source, destination, user, time)
          FOR each new SSH connection:
            IF DBSCAN classifies connection as 'noise':
              FLAG as anomalous
  - question: Following an SSH connection, has the SSH daemon process spawned a child process associated with reconnaissance, credential access, or further lateral movement?
    context: This question investigates post-exploitation activity. The initial SSH connection may appear legitimate, but the adversary's true intent is revealed by the commands they execute. Monitoring for child processes of the SSH daemon (sshd) that match a watchlist of suspicious tools (e.g., whoami, mimikatz, psexec) can directly uncover this malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs on critical servers and workstations
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each process_creation_event:
            IF parent_process_name IS 'sshd' AND child_process_name IN (suspicious_tool_list):
              GENERATE alert
  - question: Does the sequence of commands executed within an interactive SSH session have an unusually high Shannon entropy score compared to the baseline?
    context: This question attempts to quantify the 'randomness' or 'unpredictability' of commands within an SSH session. Normal administrative sessions often involve repetitive, predictable commands. Malicious activity, especially reconnaissance, may involve a series of varied and unique commands, leading to a higher Shannon entropy. A score significantly above the baseline for a user or host is suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs on critical servers and workstations
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each SSH session, calculate Shannon entropy of executed command sequence
          ESTABLISH baseline entropy for each user/host
          IF session_entropy > (baseline + 3 * standard_deviation):
            FLAG session as anomalous
  - question: Has an NLP model detected a sequence of command intents within an SSH session that follows a typical attack pattern (e.g., benign -> discovery -> execution)?
    context: This question uses advanced analysis to identify the attacker's workflow. Instead of matching specific commands, an NLP model classifies the *intent* of each command. A time-series analysis of these intents can reveal a logical attack progression, such as moving from benign commands to discovery and then to execution, which is a strong indicator of a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs on critical servers and workstations
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DEFINE nlp_model = classifies command intent (benign, discovery, etc.)
          FOR each SSH session:
            sequence_of_intents = nlp_model.predict(command_sequence)
            IF sequence_of_intents MATCHES known attack patterns (e.g., discovery -> execution):
              GENERATE high_confidence_alert
  - question: Has an SSH connection been observed that violates a pre-defined access control policy based on asset groups?
    context: This question provides a high-fidelity detection method based on a strict 'allow-list' policy. By defining asset groups (e.g., 'Workstations', 'Web Servers') and creating a matrix of allowed SSH paths, any connection that violates this matrix is an explicit policy breach and a strong signal of unauthorized or malicious activity.
    answer_sources:
      - Zeek conn.log
      - East-west traffic monitoring points (core switches)
      - Network TAPs/SPAN ports
      - Data center/cloud environment egress points
      - VPC flow logs
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DEFINE rule_matrix for allowed SSH paths between asset groups
          FOR each new SSH connection:
            IF connection violates rule_matrix:
              GENERATE alert
  - question: Has a host changed its typical SSH connection behavior, for example, a host that normally only receives connections initiating an outbound connection?
    context: This question focuses on detecting role-reversal anomalies. Network hosts typically have stable roles (e.g., a web server is a 'server', receiving connections). If a host that has historically only been a server suddenly initiates an outbound SSH connection, it is a major deviation from its baseline role and suggests it has been compromised and is being used as a pivot point.
    answer_sources:
      - Zeek conn.log
      - East-west traffic monitoring points (core switches)
      - Network TAPs/SPAN ports
      - Data center/cloud environment egress points
      - VPC flow logs
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, profile ratio of inbound/outbound SSH over 30 days to classify as 'Client', 'Server', or 'Peer'
          IF a host's classification changes (e.g., 'Server' initiates outbound SSH):
            GENERATE alert
  - question: Has a graph-based community detection algorithm identified an SSH connection that bridges two historically separate network communities?
    context: This question uses graph theory to find highly anomalous lateral movement. By modeling the network as a graph, community detection algorithms can identify clusters of hosts that frequently interact. An SSH connection that bridges two normally isolated communities (e.g., a host in the finance cluster connecting to a host in the R&D cluster) is a powerful indicator of an adversary moving between segregated network zones.
    answer_sources:
      - Zeek conn.log
      - East-west traffic monitoring points (core switches)
      - Network TAPs/SPAN ports
      - Data center/cloud environment egress points
      - VPC flow logs
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MODEL network as a graph with hosts as nodes, SSH connections as edges
          USE community detection algorithm to identify clusters
          IF a new SSH connection is an edge between two different communities:
            FLAG as high-confidence anomaly