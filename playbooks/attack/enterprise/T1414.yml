name: T1414: Clipboard Data
id: f2c8a1b9-e0d3-4b7f-9b4e-9c1a2d8f0b3e
description: This playbook focuses on detecting adversarial attempts to collect sensitive information from mobile device clipboards. This technique involves an application illegitimately monitoring the clipboard for data like passwords, personal information, or financial details. Detection strategies include static analysis of application packages (APKs) to find non-input-method-editor (non-IME) apps that listen for clipboard changes, dynamic analysis of iOS apps for high-frequency or suspiciously timed clipboard access, and correlating clipboard access events with other activities, such as an approved password manager being backgrounded or subsequent network connections to suspicious domains. The goal is to identify and mitigate the theft of sensitive data copied by users.
type: technique
related:
  - TA0035: Collection
  - TA0031: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an Android application illegitimately listening for clipboard changes without being a registered Input Method Editor (IME)?
    context: This question helps identify malicious Android apps that are designed to steal data from the clipboard. Normally, only keyboard apps (IMEs) need to monitor clipboard changes. A non-IME app doing this is highly suspicious, as it could be capturing sensitive information like passwords, credit card numbers, or personal messages pasted by the user. Detecting this behavior during the application vetting process can prevent such spyware from being deployed on managed devices.
    answer_sources:
      - APK static analysis reports
      - AndroidManifest.xml
      - Disassembled DEX files
      - Managed Android devices
      - Corporate application vetting pipeline
      - Mobile Device Management (MDM) server
      - Source code repositories
      - Mobile Application Management (MAM) sandbox
    range: During each application scan
    queries:
      - technology: pseudocode
        query: |
          FOR each new APK:
            PARSE AndroidManifest.xml.
            IF service with action 'android.view.inputmethod.InputMethod' NOT FOUND:
              SCAN disassembled code for 'addPrimaryClipChangedListener'.
              IF FOUND, ALERT.
  - question: Does an Android application call the clipboard listener API at an anomalously high frequency compared to other UI-related APIs, suggesting an over-focus on clipboard monitoring?
    context: This question aims to uncover malware that tries to hide its clipboard monitoring activity among legitimate-looking code. By establishing a baseline of normal API call ratios from a large set of known-good applications, we can statistically identify outliers. An app that calls `addPrimaryClipChangedListener` disproportionately often compared to other UI functions may be a malicious tool focused on data theft rather than providing a legitimate user interface.
    answer_sources:
      - APK static analysis reports
      - AndroidManifest.xml
      - Disassembled DEX files
      - Managed Android devices
      - Corporate application vetting pipeline
      - Mobile Device Management (MDM) server
      - Source code repositories
      - Mobile Application Management (MAM) sandbox
    range: During each application scan
    queries:
      - technology: pseudocode
        query: |
          BASELINE = Calculate ratio of 'addPrimaryClipChangedListener' to other UI APIs for all benign APKs.
          FOR each new APK:
            CALCULATE API call ratio.
            IF ratio > 99th_percentile(BASELINE), FLAG for review.
  - question: Based on a combination of static features, can a machine learning model classify a new Android application as potentially malicious due to its clipboard monitoring behavior and other risky characteristics?
    context: This question leverages machine learning to automate and enhance the detection of malicious apps. A single indicator might be inconclusive, but a model can consider multiple features at onceâ€”such as the presence of a clipboard listener, the number of sensitive permissions requested, and the use of obfuscation techniques. This provides a more robust, risk-based assessment during application vetting, allowing for faster and more accurate identification of threats.
    answer_sources:
      - APK static analysis reports
      - AndroidManifest.xml
      - Disassembled DEX files
      - Managed Android devices
      - Corporate application vetting pipeline
      - Mobile Device Management (MDM) server
      - Source code repositories
      - Mobile Application Management (MAM) sandbox
    range: During each application scan
    queries:
      - technology: pseudocode
        query: |
          MODEL = Train classifier on labeled (benign/malicious) APK features.
          FOR each new APK:
            EXTRACT features (e.g., has_clipboard_listener, permission_count, string_entropy).
            PREDICT risk_score with MODEL.
            IF risk_score > threshold, ALERT.
  - question: Is an iOS application accessing the clipboard at a high frequency, suggesting automated, non-user-driven data collection?
    context: This question targets a common malware technique on iOS where an app repeatedly and rapidly polls the clipboard to steal any data that is copied. Legitimate user-driven pastes do not typically occur multiple times per second. By hooking the `UIPasteboard` API in a dynamic analysis sandbox, we can monitor the frequency of access and flag apps exhibiting this suspicious, high-frequency polling behavior.
    answer_sources:
      - Instrumented API call logs (e.g., Frida trace)
      - MTD/MDM behavioral event logs (e.g., api_call, app_state_change)
      - Managed iOS devices
      - Corporate application vetting pipeline
      - Dynamic Application Security Testing (DAST) environment
      - Sandboxed analysis environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          HOOK UIPasteboard.general.string access.
          FOR each application:
            COUNT access events per second.
            IF count > 2 in any 1-second window, ALERT.
  - question: Does an iOS application exhibit statistical anomalies in its clipboard access patterns, such as immediately accessing the clipboard upon opening or accessing it at suspiciously regular intervals?
    context: This question seeks to identify subtle indicators of malicious clipboard monitoring through statistical analysis of behavioral logs. Malware often accesses the clipboard as soon as it is brought to the foreground to capture whatever is there. Furthermore, automated polling will occur at very regular intervals, resulting in low entropy (low randomness). By analyzing the timing and regularity of clipboard access events, we can identify apps that deviate from normal, user-driven behavior.
    answer_sources:
      - Instrumented API call logs (e.g., Frida trace)
      - MTD/MDM behavioral event logs (e.g., api_call, app_state_change)
      - Managed iOS devices
      - Corporate application vetting pipeline
      - Dynamic Application Security Testing (DAST) environment
      - Sandboxed analysis environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each app:
            a) CALCULATE median time from 'app_foreground' to 'clipboard_access'.
            IF median in lowest 5th percentile, FLAG.
            b) CALCULATE entropy of time intervals between 'clipboard_access' events.
            IF entropy is low, FLAG.
  - question: Does the sequence of an iOS application's API calls, including clipboard access, deviate significantly from the normal behavior learned by an LSTM autoencoder model?
    context: This question uses an advanced machine learning technique to detect novel or complex malicious behaviors. An LSTM autoencoder is trained on vast amounts of API call sequences from known-good applications to learn what "normal" behavior looks like. When a new app's behavior is analyzed, the model attempts to reconstruct its API call sequence. A high reconstruction error indicates the sequence is unusual and doesn't fit the learned patterns of normal behavior, flagging it as a potential threat.
    answer_sources:
      - Instrumented API call logs (e.g., Frida trace)
      - MTD/MDM behavioral event logs (e.g., api_call, app_state_change)
      - Managed iOS devices
      - Corporate application vetting pipeline
      - Dynamic Application Security Testing (DAST) environment
      - Sandboxed analysis environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = Train LSTM autoencoder on benign API call sequences.
          FOR each new app:
            GENERATE API call sequence.
            CALCULATE reconstruction_error with MODEL.
            IF error > threshold, ALERT.
  - question: Is an unauthorized application accessing the clipboard immediately after a user has copied a credential from a password manager?
    context: This question addresses a specific, high-impact threat: the theft of credentials. The typical user workflow is to copy a password from a manager, switch to another app, and paste it. This rule looks for an unauthorized application (not a browser or the intended app) "snatching" the credential from the clipboard in that brief window. Correlating the password manager backgrounding event with a subsequent clipboard access event by a non-allowlisted app on the same device is a strong indicator of credential theft.
    answer_sources:
      - MTD/MDM behavioral event logs (e.g., app_backgrounded, clipboard_accessed, device_id, app_name)
      - Managed mobile devices with corporate-approved password managers installed
      - MDM/MTD log aggregation platform (e.g., SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'app_backgrounded' event from password_manager occurs:
            LOOK for 'clipboard_accessed' event on same device_id within 5 seconds.
            IF accessing_app is NOT on allowlist, ALERT.
  - question: Which applications consistently access the clipboard very shortly after a password manager is used, indicating a pattern of targeting credentials?
    context: Instead of a single alert, this question focuses on identifying persistent threats through trend analysis. An application that repeatedly accesses the clipboard just moments after a password manager is backgrounded across multiple devices or users is highly suspect. By calculating and aggregating the time delta between these events, we can statistically surface applications that exhibit this credential-stealing pattern.
    answer_sources:
      - MTD/MDM behavioral event logs (e.g., app_backgrounded, clipboard_accessed, device_id, app_name)
      - Managed mobile devices with corporate-approved password managers installed
      - MDM/MTD log aggregation platform (e.g., SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each 'clipboard_accessed' event:
            FIND time_delta from previous 'password_manager_backgrounded' on same device.
          AGGREGATE deltas by app name.
          REPORT apps with median_delta in lowest 10th percentile.
  - question: Can a sequence classification model identify and alert on event patterns indicative of credential theft from a password manager in real-time?
    context: This question leverages a supervised machine learning model to recognize the specific sequence of events that constitutes credential theft. By training a model on labeled examples of both malicious (e.g., password manager -> background -> malicious app -> clipboard access) and benign sequences, the system can learn to differentiate between them with high accuracy. This allows for automated, real-time detection of this specific attack pattern.
    answer_sources:
      - MTD/MDM behavioral event logs (e.g., app_backgrounded, clipboard_accessed, device_id, app_name)
      - Managed mobile devices with corporate-approved password managers installed
      - MDM/MTD log aggregation platform (e.g., SIEM)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = Train RNN on labeled event sequences.
          FOR each new event sequence:
            CLASSIFY sequence with MODEL.
            IF classified as 'malicious', ALERT.
  - question: Is an application exfiltrating data to a known malicious command-and-control (C2) server shortly after accessing the clipboard?
    context: This question connects clipboard access directly to data exfiltration. The playbook here is to look for an application that accesses the clipboard and then almost immediately makes a network connection. If that connection's destination is a known-bad IP address or domain from a threat intelligence feed, it is a very strong signal that the data copied to the clipboard was just stolen and sent to an attacker.
    answer_sources:
      - MTD/MDM behavioral event logs
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Managed mobile device endpoints
      - Corporate VPN concentrators
      - DNS resolvers
      - Network egress points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'clipboard_accessed' event occurs:
            LOOK for network connection from same app within 2 minutes.
            IF destination is in threat_intel_feed, ALERT.
  - question: Following a clipboard access, is an application communicating with a suspicious domain that isn't on a threat list (e.g., a newly registered domain, a domain with a self-signed certificate, or a randomly generated name)?
    context: Attackers often use new or algorithmically generated domains to evade threat intelligence blacklists. This question helps detect exfiltration to these unknown, but suspicious, destinations. By checking for characteristics like recent registration (NRD), nonsensical names (high entropy), or improper security (self-signed certificates) in network connections that happen right after a clipboard access, we can uncover likely C2 channels that have not been previously identified.
    answer_sources:
      - MTD/MDM behavioral event logs
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Managed mobile device endpoints
      - Corporate VPN concentrators
      - DNS resolvers
      - Network egress points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'clipboard_accessed' event occurs:
            LOOK for network connection from same app within 2 minutes.
            FOR that connection:
              CHECK if domain is NRD, has high entropy (>3.5), or uses self-signed cert.
              IF TRUE, ALERT.
  - question: Are there anomalous clusters of network activity occurring shortly after clipboard access that differ from normal traffic patterns, potentially indicating data exfiltration?
    context: This question aims to find unknown exfiltration methods using unsupervised machine learning. By extracting features (like port, protocol, data size, JA3 hash) from network flows that follow clipboard access, we can use a clustering algorithm like DBSCAN to group them. Most traffic will form large clusters of "normal" behavior. Small, dense clusters that are separate from the norm represent anomalous activity. These outliers are prime candidates for investigation as they may represent a novel or stealthy exfiltration technique.
    answer_sources:
      - MTD/MDM behavioral event logs
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Managed mobile device endpoints
      - Corporate VPN concentrators
      - DNS resolvers
      - Network egress points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR network flows within 5 mins of a clipboard access event:
            EXTRACT feature vector (port, protocol, bytes, JA3, domain entropy, etc.).
          APPLY DBSCAN clustering algorithm to feature vectors.
          INVESTIGATE outlier clusters.