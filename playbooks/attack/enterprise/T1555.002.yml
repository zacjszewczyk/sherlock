name: T1555.002: Securityd Memory
id: a3a8b417-6d2c-4b07-9b2f-917c6e0d3f4a
description: This playbook helps determine if an adversary has attempted to access credentials from the securityd process memory on a macOS endpoint. This involves detecting the execution of known credential dumping tools, identifying the misuse of legitimate system utilities (e.g., gdb, lldb, grep) to target the securityd process, monitoring for unauthorized processes attempting to read securityd's memory via specific API calls (e.g., task_for_pid), and correlating a sequence of events that includes PID discovery, memory access, and subsequent network exfiltration.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known macOS credential dumping tool been executed on an endpoint?
    context: This question aims to detect the direct execution of tools specifically designed to dump credentials from macOS, such as 'chainjett' or 'lazagne'. Matching process names or file hashes against a threat intelligence feed provides a high-fidelity signal of malicious activity. This is a primary, signature-based detection method.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - Zeek files.log
      - macOS developer workstations, macOS build servers, executive macOS endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: search process_execution_logs where (process_name in (credential_dumper_list) or file_hash in (credential_dumper_hashes))
      - technology: pseudocode
        query: search network_file_transfer_logs where file_hash in (credential_dumper_hashes)
  - question: Has an unusually rare process been executed on a macOS endpoint, especially by a shell or scripting engine?
    context: This question seeks to identify credential dumping tools that are not yet known to threat intelligence. By baselining normal process execution frequency, we can flag outliers. A process that has rarely or never been seen before, particularly when spawned by a common user shell, is highly suspicious and could indicate a novel or custom tool being used.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - macOS developer workstations, macOS build servers, executive macOS endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: search process_execution_logs | group by process_name, hostname | calculate execution_frequency_percentile | where percentile < 5 and parent_process in ('zsh', 'bash')
  - question: Does a new process execution exhibit characteristics of malicious credential dumping activity based on a machine learning model?
    context: This question leverages a machine learning model to detect subtle, complex patterns that may not be captured by simple rules or frequency analysis. The model considers multiple features like parent-child relationships, command-line complexity, and user context to assign a risk score, enabling the detection of sophisticated or obfuscated credential dumping tools.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - macOS developer workstations, macOS build servers, executive macOS endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: stream process_execution_logs | apply classification_model(features: parent_process, user, cmd_length, cmd_entropy, file_path_rarity) | where model_score > high_confidence_threshold
  - question: Has a system utility like 'gdb', 'lldb', 'strings', or 'grep' been used to explicitly target the 'securityd' process?
    context: Adversaries often use legitimate system utilities ("living off the land") to perform malicious actions. This question looks for the misuse of common debugging or text-processing tools to interact with the 'securityd' process, which is a strong indicator of an attempt to inspect or dump its memory for credentials.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - All macOS endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: search process_execution_logs where process_name in ('gdb', 'lldb', 'strings', 'grep') and command_line contains_regex 'securityd|pgrep securityd'
  - question: Has a common system utility been executed with anomalous command-line arguments, suggesting misuse for memory inspection?
    context: This question aims to detect misuse of system utilities without relying on specific keywords like 'securityd'. By baselining the normal structure of command-line arguments (e.g., count, length, character randomness), we can spot deviations that might indicate an adversary is passing obfuscated commands or memory addresses to the utility to avoid simple string-based detections.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - All macOS endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: search process_execution_logs | for each common_utility, calculate baseline_argument_stats(count, length, entropy) | where current_command_deviation > 2 * standard_deviation
  - question: Does the command-line usage of a system utility deviate significantly from learned normal behavior, as identified by an unsupervised ML model?
    context: This question uses an unsupervised model (like an autoencoder) to learn the vast range of "normal" command-line patterns. Commands that the model struggles to reconstruct (high reconstruction error) are by definition anomalous and do not fit learned patterns. This is a powerful way to detect novel or highly unusual misuse of system tools.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - All macOS endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: stream command_line_logs | apply autoencoder_model | where reconstruction_error > anomaly_threshold
  - question: Has an unauthorized or non-allowlisted process attempted to read memory from the 'securityd' process?
    context: Only a small, predictable set of system processes should ever need to interact with the memory of 'securityd'. This question establishes a strict allowlist of these legitimate processes. Any process not on this list attempting to access 'securityd' memory via APIs like 'task_for_pid' is an extremely high-fidelity indicator of a credential access attempt.
    answer_sources:
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - All macOS endpoints with EDR agents capable of monitoring memory access APIs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: search api_monitoring_logs where api_call in ('task_for_pid', 'mach_vm_read') and target_process == 'securityd' and source_process not in (securityd_access_allowlist)
  - question: Has an extremely rare process-to-process interaction involving 'securityd' memory access occurred?
    context: This question provides a dynamic alternative to a static allowlist. By analyzing all interactions across the environment, we can identify those that are exceptionally rare. A source process accessing 'securityd's memory that has almost never been seen doing so before is highly anomalous and warrants investigation, even if it's a legitimate system process being misused.
    answer_sources:
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - All macOS endpoints with EDR agents capable of monitoring memory access APIs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: search api_monitoring_logs where api_call in ('task_for_pid', 'mach_vm_read') and target_process == 'securityd' | calculate interaction_frequency(source_process, target_process) | where frequency_percentile < 1
  - question: Has a process outside the normal community of interacting processes attempted to access 'securityd' memory?
    context: This question models the entire system's behavior as a graph of process interactions. Normal operations form dense clusters or "communities." A process attempting to access 'securityd's memory that falls outside the typical cluster of processes that interact with 'securityd' represents a deviation from the system's learned normal behavior graph and is a strong anomaly signal.
    answer_sources:
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - All macOS endpoints with EDR agents capable of monitoring memory access APIs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: build process_interaction_graph from api_monitoring_logs | identify communities with clustering_algorithm | for each new interaction(source, 'securityd'), check if source in normal_securityd_community | alert if not
  - question: Has a single process been observed discovering the 'securityd' PID, attempting to read its memory, and then making an external network connection in a short time frame?
    context: This question looks for a specific, logical chain of events that strongly indicates credential theft and exfiltration. By correlating PID discovery (e.g., `pgrep securityd`), a memory read attempt, and a network connection all from the same process within a few minutes, we can create a very high-fidelity alert that captures the full lifecycle of this specific attack pattern.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - ESF NOTIFY_CREATE (for network sockets)
      - Zeek conn.log
      - Zeek dns.log
      - All macOS endpoints, Network egress points, DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: correlate by process_id over 2_minutes: event_1(process_name == 'pgrep', command_line contains 'securityd'), then event_2(api_call in ('task_for_pid', 'mach_vm_read'), target_process == 'securityd'), then event_3(network_connection_type == 'external')
  - question: Following a suspected credential theft sequence, was the subsequent network connection made to a rare or new destination?
    context: This question serves to enrich and prioritize alerts generated by the previous rule. An adversary is unlikely to exfiltrate stolen credentials to a common, well-known domain. A connection to a newly registered domain or an IP address rarely seen across the enterprise greatly increases the likelihood that the observed activity was malicious exfiltration.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - ESF NOTIFY_CREATE (for network sockets)
      - Zeek conn.log
      - Zeek dns.log
      - All macOS endpoints, Network egress points, DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: on alert from previous_rule, lookup destination_ip/domain in network_logs | calculate historical_rarity(destination) | if rarity_percentile > 99, increase alert_severity
  - question: Has a sequence of user and process activities occurred that has a very low probability of being benign, according to a sequence-based machine learning model?
    context: This question uses advanced ML to understand the "grammar" of normal behavior by learning typical sequences of actions (process execution, file access, network connections). An attack sequence, like discovering a PID, reading memory, and exfiltrating data, would be a highly improbable sentence in this grammar, allowing the model to flag it as anomalous even if individual events seem harmless.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - ESF NOTIFY_CREATE (for network sockets)
      - Zeek conn.log
      - Zeek dns.log
      - All macOS endpoints, Network egress points, DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: stream user_activity_sequences | apply rnn_behavior_model | where sequence_probability < low_probability_threshold | alert