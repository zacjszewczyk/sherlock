name: T1555.002: Securityd Memory
id: 4a2d8b1e-3c9f-4b0a-8d1e-9f3c7a2b1d0e
description: This playbook focuses on detecting attempts by an adversary to access credentials from the 'securityd' process memory on macOS endpoints. It provides investigative questions to identify the use of known credential dumping tools, the abuse of system utilities to target 'securityd', unauthorized processes reading 'securityd' memory via sensitive API calls, and timed sequences of events that indicate PID discovery, memory reading, and subsequent network exfiltration.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any known macOS credential dumping tools been executed on an endpoint?
    context: This question seeks to identify the use of known malicious tools like 'chainjett' or 'lazagne' that are specifically designed to dump credentials from macOS. By monitoring process executions and network file transfers for signatures matching threat intelligence feeds, we can detect the initial stages of a credential access attempt.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - Zeek files.log
      - macOS developer workstations, macOS build servers, executive macOS endpoints
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: SEARCH process_execution_events OR network_file_transfers WHERE process_name IN (credential_dumper_list) OR file_hash IN (credential_dumper_hashes)
  - question: Has a statistically rare process been executed on a macOS host, especially from a shell?
    context: Adversaries often use custom or infrequently used tools that may not be in signature databases. This question aims to find such anomalies by calculating the historical execution frequency of processes across the enterprise. A process that is rarely seen, particularly when launched by a common shell, could indicate malicious activity trying to evade signature-based detections.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - macOS developer workstations, macOS build servers, executive macOS endpoints
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: SEARCH process_execution_events | CALCULATE frequency of process_name over 30 days | FILTER frequency < 5th_percentile AND parent_process IN ('zsh', 'bash')
  - question: Has a machine learning model identified a process execution as likely malicious based on its characteristics?
    context: This question leverages a supervised machine learning model to score process executions for their likelihood of being malicious. The model considers a wide range of features like parent process, user context, and command-line characteristics to identify complex patterns that may not be apparent through simple rules or statistical analysis, providing a more sophisticated layer of detection.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - macOS developer workstations, macOS build servers, executive macOS endpoints
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: DEPLOY ML_model on process_execution_events | FILTER model_score > high_probability_threshold
  - question: Has a system utility like 'gdb', 'grep', or 'strings' been used to target the 'securityd' process?
    context: Adversaries can abuse legitimate system utilities to inspect the memory of the 'securityd' process for credentials. This question looks for explicit command-line arguments that reference 'securityd' by name or by its dynamically discovered process ID (PID), which is a strong indicator of a targeted credential access attempt.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - All macOS endpoints
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: SEARCH process_execution_events WHERE process_name IN ('gdb', 'lldb', 'strings', 'grep') AND command_line REGEX 'securityd' OR 'pgrep securityd'
  - question: Has a system utility been executed with anomalous command-line arguments?
    context: This question aims to detect the abuse of system utilities by identifying command-line usage that deviates from normal patterns. By baselining typical argument count, length, and entropy, we can flag commands that are statistically unusual, which may indicate an attempt to perform a malicious action like memory scraping.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - All macOS endpoints
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: SEARCH process_execution_events | BASELINE command_line_patterns for system_utilities | FILTER command_line_arguments DEVIATES > 2_std_dev from baseline
  - question: Has an unsupervised machine learning model flagged a command-line execution as anomalous?
    context: This question uses an unsupervised model, like an autoencoder, to identify novel or unusual command-line executions without prior labeling. Commands that the model cannot reconstruct accurately are flagged as high-reconstruction-error anomalies. This is effective for finding new or obfuscated techniques for abusing system utilities that don't match any known pattern.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - All macOS endpoints
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: DEPLOY autoencoder_model on command_line_logs | FILTER reconstruction_error > high_error_threshold
  - question: Has an unauthorized process attempted to read memory from the 'securityd' process?
    context: Access to the 'securityd' process memory should be highly restricted. This question uses a strict allowlist of known, legitimate processes to identify any unauthorized process attempting to read 'securityd' memory via sensitive API calls like `task_for_pid`. A violation of this policy is a high-confidence indicator of malicious activity.
    answer_sources:
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - All macOS endpoints with EDR agents capable of monitoring memory access APIs
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: SEARCH memory_access_api_calls WHERE target_process == 'securityd' AND source_process NOT IN (allowlist)
  - question: Has a statistically rare process-to-process interaction with 'securityd' occurred?
    context: This question identifies anomalous interactions by focusing on the rarity of the source process that is attempting to access 'securityd' memory. Even if a process isn't explicitly malicious, if its interaction with 'securityd' is extremely infrequent across the entire environment, it warrants investigation as a potential threat.
    answer_sources:
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - All macOS endpoints with EDR agents capable of monitoring memory access APIs
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: SEARCH memory_access_api_calls WHERE target_process == 'securityd' | CALCULATE frequency of source_process_interaction | FILTER frequency < 1st_percentile
  - question: Has a graph-based anomaly detection model identified an abnormal interaction with the 'securityd' process?
    context: This question models process interactions as a graph to understand normal behavior. By clustering processes that typically interact, the model can identify an outlierâ€”a process that attempts to access 'securityd' but does not belong to the established cluster of normal interactions. This approach is powerful for detecting sophisticated attackers trying to blend in.
    answer_sources:
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - All macOS endpoints with EDR agents capable of monitoring memory access APIs
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: DEPLOY graph_model on process_interactions | IDENTIFY normal_interaction_clusters | FILTER source_process NOT IN 'securityd'_cluster AND target_process == 'securityd'
  - question: Has a process been observed discovering the 'securityd' PID, reading its memory, and then making a network connection within a short time frame?
    context: This question looks for a specific chain of actions that strongly indicates credential theft and exfiltration. By correlating PID discovery (e.g., 'pgrep securityd'), a memory read attempt, and a subsequent network connection from the same process within a two-minute window, we can create a high-fidelity alert for a complete attack sequence.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - ESF NOTIFY_CREATE (for network sockets)
      - Zeek conn.log
      - Zeek dns.log
      - All macOS endpoints, Network egress points, DNS servers
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: CORRELATE events by parent_pid within 2_minutes | FIND sequence: (EXEC 'pgrep securityd') -> (API_CALL 'task_for_pid' on securityd_pid) -> (NETWORK_CONNECTION to external_ip)
  - question: Following a potential credential theft sequence, did the associated network connection go to a rare or newly registered domain?
    context: This question adds context to the sequence-based alert by analyzing the destination of the exfiltration traffic. A connection to a domain or IP address that is rarely seen in the organization or was registered very recently significantly increases the likelihood that the observed activity is malicious, helping analysts prioritize the alert.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - All macOS endpoints, Network egress points, DNS servers
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: ON sequence_alert | GET destination_ip, destination_domain | CALCULATE rarity of destination | IF rarity > 99th_percentile OR is_newly_registered_domain THEN INCREASE alert_confidence
  - question: Has a sequence-based machine learning model detected a low-probability chain of user events indicative of credential theft?
    context: This question uses a sophisticated sequence model (like an HMM or RNN) trained on normal user behavior to detect malicious activity. A sequence of events like executing 'pgrep', then 'gdb', then reading memory, and finally making a network connection would be assigned a very low probability by the model, thus triggering a high-confidence alert for behavior that deviates from the learned benign patterns.
    answer_sources:
      - ESF NOTIFY_EXEC events
      - EDR logs monitoring `task_for_pid` or `mach_vm_read` API calls
      - ESF NOTIFY_CREATE (for network sockets)
      - Zeek conn.log
      - Zeek dns.log
      - All macOS endpoints, Network egress points, DNS servers
    range: last 90 days
    queries:
      - search technology: pseudocode
        query: DEPLOY sequence_model on user_behavior_logs | CALCULATE probability of event_sequence | FILTER probability < low_probability_threshold