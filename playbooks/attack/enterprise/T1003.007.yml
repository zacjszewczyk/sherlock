name: T1003.007: Proc Filesystem
id: f4a0c1e2-b3d4-4e5f-8a9b-c0d1e2f3a4b5
description: This playbook helps investigate attempts by adversaries to harvest credentials by accessing the /proc filesystem on Linux systems. It focuses on detecting the execution of known credential dumping tools like 'mimipenguin', the use of common system utilities (e.g., grep, cat, strings) to read sensitive memory paths like '/proc/[pid]/mem', anomalous process memory access between unrelated processes (such as a web server reading an SSH daemon's memory), and subsequent lateral movement indicated by remote authentication events immediately following suspicious /proc access.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known /proc-scraping credential dumping tool (e.g., mimipenguin, procdump) been executed?
    context: This question aims to identify the most direct evidence of credential dumping via /proc filesystem abuse. Known tools are designed specifically for this purpose, and their execution is a high-confidence indicator of malicious activity. By maintaining a watchlist of process names and file hashes for these tools and alerting on any execution, analysts can quickly detect and respond to blatant credential harvesting attempts.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - Linux servers (web, database, application)
      - Linux developer workstations
      - container environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_execution_logs WHERE process_name IN (watchlist_procdump_tools) OR file_hash IN (watchlist_procdump_hashes)
  - question: Is a statistically rare process accessing the /proc filesystem, especially from an unusual parent process or user context?
    context: This question helps uncover unknown or custom tools that are not on a watchlist. Attackers may use bespoke tools to evade signature-based detection. By calculating the prevalence of a process across the environment, analysts can flag those that are statistically uncommon. A process running on a small percentage of hosts, especially when spawned by an atypical parent (like a web server process), is highly suspicious and warrants investigation for potential credential dumping activity.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - Linux servers (web, database, application)
      - Linux developer workstations
      - container environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE prevalence of process_name FROM process_execution_logs. IDENTIFY process_name WHERE prevalence < 1% AND process accesses /proc. CORRELATE with parent_process_prevalence and user_context_prevalence.
  - question: Has a machine learning model classified a process that interacts with the /proc filesystem as suspicious?
    context: This question leverages machine learning to automate the detection of suspicious process behavior that might be missed by symbolic or simple statistical methods. A supervised model, trained on features like parent process, user context, and command-line structure from both known-good and known-bad examples, can identify subtle, complex patterns indicative of malicious /proc interaction, providing a more robust and scalable detection capability.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - Linux servers (web, database, application)
      - Linux developer workstations
      - container environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: QUERY ML_model_results FOR process_events WHERE classification = 'suspicious' AND target_resource CONTAINS '/proc'
  - question: Has a common system utility (e.g., grep, cat, strings) been used with command-line arguments that explicitly target sensitive memory locations in the /proc filesystem?
    context: Adversaries often 'live off the land' by using legitimate system utilities to perform malicious actions, thereby avoiding the introduction of new tools. This question looks for the abuse of utilities like 'grep', 'cat', or 'dd' to directly read from process memory files like '/proc/[pid]/mem' or '/proc/[pid]/maps'. Detecting these specific command-line patterns is a strong indicator of an attempt to dump credentials or other sensitive data from memory.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - Shell history logs
      - Linux hosts, especially multi-user systems like jump boxes, web servers, and database servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH command_line_logs WHERE process_name IN ('grep', 'cat', 'strings', 'dd', 'gdb') AND command_line MATCHES REGEX '/proc/[0-9]*/(mem|maps)'
  - question: Is a command line that references the /proc filesystem statistically anomalous in its complexity or structure for a given user or host?
    context: This question aims to detect obfuscated or unusually complex commands that adversaries might use to hide their activity. By baselining normal command-line patterns and entropy for each user and host, analysts can flag outliers. A command with unusually high entropy (randomness) or a structure that deviates significantly from historical norms can indicate obfuscation techniques or the use of complex, non-interactive scripting to access /proc memory, which is highly suspicious.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - Shell history logs
      - Linux hosts, especially multi-user systems like jump boxes, web servers, and database servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each user/host, CALCULATE baseline_entropy and n-gram_model for commands. SEARCH command_line_logs WHERE command_line CONTAINS '/proc' AND (entropy > 99th_percentile OR n-gram_deviation is high).
  - question: Has an unsupervised machine learning model identified a command line referencing the /proc filesystem as a significant anomaly compared to normal administrative activity?
    context: This question uses unsupervised ML to find 'unknown unknowns' in command-line activity. Unlike supervised models, an autoencoder or Isolation Forest can be trained on only legitimate activity to learn what's normal. When a new command involving /proc is fed to the model and produces a high anomaly score, it signifies a major deviation from established behavior, making it a strong candidate for a malicious, previously unseen attack technique.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Linux Auditd logs
      - Shell history logs
      - Linux hosts, especially multi-user systems like jump boxes, web servers, and database servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: QUERY anomaly_detection_model_results FOR command_line_events WHERE target_resource CONTAINS '/proc' AND anomaly_score > threshold.
  - question: Has a process from a low-privilege or non-administrative context attempted to read the memory of a high-risk process that handles credentials?
    context: This question focuses on detecting logically inconsistent or high-risk process interactions. It is highly irregular for a process like a web server ('nginx') to read the memory of an authentication process like an SSH daemon ('sshd'). Defining and alerting on these forbidden pairings provides a high-fidelity signal for credential access attempts, as these interactions violate fundamental security boundaries.
    answer_sources:
      - Sysmon for Linux Event ID 10
      - Linux Auditd logs
      - Critical Linux servers, including authentication servers (LDAP, Kerberos KDC), SSH jump hosts, and servers running credential managers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_access_logs WHERE source_process IN ('nginx', 'apache2', 'bash', 'python') AND target_process IN ('sshd', 'sudo', 'lsassd', 'gnome-keyring-d')
  - question: Has a statistically rare process memory access event occurred, especially where the target process is known to handle credentials?
    context: This question helps to uncover anomalous process interactions that aren't pre-defined in a high-risk list. By building a frequency table of all source-to-target process memory reads, analysts can identify pairings that have never or rarely been seen before. An access event that falls into the bottom percentile of frequency is inherently suspicious. This suspicion is amplified if the target process (e.g., 'lsassd', 'sshd') is a known credential handler.
    answer_sources:
      - Sysmon for Linux Event ID 10
      - Linux Auditd logs
      - Critical Linux servers, including authentication servers (LDAP, Kerberos KDC), SSH jump hosts, and servers running credential managers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE frequency of all (source_process, target_process) memory access pairs. ALERT on pairs with frequency < 1st percentile, especially if target_process handles credentials.
  - question: Has a graph-based machine learning model detected a process memory access event that bridges two otherwise disconnected functional process communities?
    context: This question applies graph theory to model the complex web of process interactions within a system. Normal operations typically result in processes interacting within distinct 'communities' or clusters (e.g., a 'web services' cluster). An adversary accessing memory will likely create an edge on this graph that connects two unrelated clusters, such as a process in the web cluster reading memory from a process in the authentication cluster. Community detection algorithms can flag these 'bridge' events as significant anomalies indicative of an intrusion.
    answer_sources:
      - Sysmon for Linux Event ID 10
      - Linux Auditd logs
      - Critical Linux servers, including authentication servers (LDAP, Kerberos KDC), SSH jump hosts, and servers running credential managers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL process access events as a graph. APPLY community detection algorithm. IDENTIFY and ALERT on access events (edges) that connect two distinct process communities.
  - question: Did a successful outbound authentication event occur from a host shortly after a /proc filesystem access alert was generated on that same host?
    context: This question seeks to connect the act of credential theft with its immediate use for lateral movement. A /proc access alert indicates potential credential harvesting. A subsequent successful remote login from that same machine strongly suggests the stolen credentials were just used. Correlating these two events in a short time window (e.g., 60 minutes) provides powerful, contextualized evidence of a successful attack chain.
    answer_sources:
      - Linux Auditd logs
      - Zeek ssh.log
      - Zeek kerberos.log
      - Windows Event ID 4624
      - Network egress points
      - authentication servers (Domain Controllers, RADIUS)
      - network segments containing high-value assets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE /proc_access_alerts with successful_authentication_logs WHERE auth_log.source_ip = alert.host_ip AND auth_log.timestamp is within 60 minutes after alert.timestamp.
  - question: Following a /proc access alert on a host, was there an outbound authentication to a destination that is statistically rare for that host, or by a user who has never authenticated from that host before?
    context: This question adds a layer of statistical validation to the correlation of /proc access and lateral movement. Instead of just noting that an authentication occurred, it scrutinizes the authentication's context. An adversary using stolen credentials is likely to behave differently than a legitimate user. Authenticating to a server that the source host rarely connects to, or as a user who has never used that source host, are strong statistical indicators that the activity is part of a malicious lateral movement attempt.
    answer_sources:
      - Linux Auditd logs
      - Zeek ssh.log
      - Zeek kerberos.log
      - Windows Event ID 4624
      - Network egress points
      - authentication servers (Domain Controllers, RADIUS)
      - network segments containing high-value assets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON /proc_access_alert, ANALYZE subsequent auth logs from alert.host_ip. FLAG authentications WHERE (user, source_host) pair is new OR destination is rare (< 5th percentile) for that source_host.
  - question: Following a /proc access alert, did a time-series machine learning model detect an anomalous spike in the volume of successful outbound authentications from that host?
    context: This question uses time-series analysis to detect another indicator of credential abuse, a change in the rate of activity. A single lateral movement event might be missed, but an adversary attempting to use stolen credentials to access multiple systems will likely cause a sudden, anomalous spike in the volume of outbound authentications. A time-series model can learn the normal 'rhythm' of a host's authentication patterns and flag any sharp deviation that occurs after a /proc access alert, indicating potential widespread credential abuse.
    answer_sources:
      - Linux Auditd logs
      - Zeek ssh.log
      - Zeek kerberos.log
      - Windows Event ID 4624
      - Network egress points
      - authentication servers (Domain Controllers, RADIUS)
      - network segments containing high-value assets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON /proc_access_alert, FEED subsequent auth volume from alert.host_ip to time-series_anomaly_model. ALERT if model flags a significant anomalous spike.