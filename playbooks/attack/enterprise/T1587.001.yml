name: T1587.001: Malware
id: 0f8a5e8a-7e6b-4e4a-9e1b-2c3d4f5a6b7c
description: This playbook focuses on detecting the execution of newly developed or uniquely modified malware on a network. It addresses the core information requirement of identifying if such malware has been executed. Indicators include observing executables with no threat intelligence reputation, those newly seen by platforms like VirusTotal, or those that are unsigned or signed by an unapproved publisher. The playbook also covers behavioral indicators such as a suspicious process quickly establishing persistence, performing local discovery after an external network connection, or exhibiting command and control (C2) network patterns like periodic beaconing.
type: technique
related:
- TA0002: Execution (Detecting the use of malware developed via T1587.001)
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Can we detect a new process if its hash is unknown to threat intelligence or if the executable is unsigned and not on an allowlist?
  context: This question aims to identify potentially malicious executables by implementing a fundamental, rule-based detection. The rationale is that newly developed malware will not have a known-bad signature in threat intelligence feeds. By querying the hash of every new process and checking its signature status against a corporate allowlist of approved software, analysts can flag suspicious executables that are either completely unknown or unauthorized. This is a first-line defense against novel threats.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows endpoints and servers, particularly user workstations and public-facing servers.
  range: last 90 days
  queries:
  - symbolic: 'FOR each new process event (EID 4688, Sysmon EID 1), QUERY file hash against all threat intelligence feeds. IF hash has zero detections OR (executable is unsigned AND publisher is not in corporate allowlist), THEN GENERATE alert.'
- question: Can we statistically identify anomalous process executions by analyzing the rarity of their publisher or the entropy of their process name?
  context: This question moves beyond simple signatures to find anomalies statistically. The context is that malware authors may use newly created or obscure code signing certificates, making the publisher statistically rare in an environment. Similarly, they often use randomized or obfuscated process names to evade detection, which results in high Shannon entropy. By baselining publisher frequency and process name entropy, analysts can identify outliers that deviate from normal activity, which may indicate sophisticated or custom malware.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows endpoints and servers, particularly user workstations and public-facing servers.
  range: last 90 days
  queries:
  - statistical: 'AGGREGATE all executable publisher names over a 30-day window and calculate frequency. FOR each new process, IF publisher is in the bottom 5th percentile of frequency, THEN ALERT. SEPARATELY, calculate Shannon entropy of all process names. IF new process name entropy exceeds the 95th percentile, THEN ALERT.'
- question: Can a machine learning model be trained to classify new process executions as suspicious or malicious based on a combination of features?
  context: This question proposes a more advanced, holistic approach to detection. A single indicator, like an unsigned file, can be noisy. A machine learning model can consider multiple features simultaneously—such as file entropy, signature status, publisher rarity, parent process, and command-line arguments—to make a more accurate classification. The rationale is to build a robust model trained on historical data to score each new process execution, allowing analysts to focus on high-probability threats and reduce false positives.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows endpoints and servers, particularly user workstations and public-facing servers.
  range: last 90 days
  queries:
  - machine_learning: 'TRAIN a classification model (e.g., Random Forest) using labeled process execution events. USE features like file entropy, signature status, publisher rarity score, parent process, etc. DEPLOY the model to score each new process in real-time. IF process is classified as ''suspicious'' or ''malicious'', THEN ALERT.'
- question: Can we detect when an unsigned executable is executed and quickly followed by a persistence mechanism on the same host?
  context: This question focuses on detecting a common attack chain. Malware, once executed, often attempts to establish persistence to survive a reboot. This question's purpose is to create a high-fidelity correlation search that links the execution of a suspicious (unsigned) program to a subsequent persistence event, such as a new service, scheduled task, or autorun registry key modification. Detecting this specific sequence within a short time window (e.g., 5 minutes) provides strong evidence of a successful compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact.
  range: last 90 days
  queries:
  - symbolic: 'CREATE a correlation search that triggers ON process execution (EID 4688) from an unsigned executable. IF within 5 minutes on the same host, a service creation (4697), scheduled task creation (4698), or Run key modification (Sysmon 13) is observed, THEN ALERT.'
- question: Can we statistically identify users who are creating an anomalous number of persistence mechanisms, especially after executing a process from a rare publisher?
  context: This question aims to detect malicious activity by baselining user behavior. While a single persistence event may be benign, a sudden spike in such activities for a specific user is anomalous. The rationale is to establish a historical baseline for each user's rate of creating services, tasks, or autorun entries. An alert is triggered when a user's activity significantly deviates from their norm (e.g., exceeds 3 standard deviations), especially if it is correlated with other suspicious indicators like the prior execution of a program from a rare publisher.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact.
  range: last 90 days
  queries:
  - statistical: 'FOR each user, establish a 30-day baseline of their daily rate of persistence events (service/task creation, autorun mods). IF a user''s daily count exceeds 3 standard deviations above their average, THEN GENERATE an alert for investigation.'
- question: Can a sequence analysis model identify malicious chains of events, such as process execution followed by persistence?
  context: This question proposes using machine learning to understand the grammar of system events. The purpose is to train a model (like an LSTM or Hidden Markov Model) to differentiate between benign sequences of events (e.g., admin installs software) and malicious ones (e.g., malware executes, then creates a scheduled task). The model scores event sequences in real-time, providing a sophisticated way to detect attack patterns that might be missed by simple correlation rules.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact.
  range: last 90 days
  queries:
  - machine_learning: 'TRAIN a sequence analysis model (e.g., LSTM) on labeled event log sequences. DEPLOY the model to score new sequences of events (e.g., [Process Execution -> Registry Mod]). IF a sequence has a high probability of being malicious, THEN ALERT.'
- question: Can we create a rule to detect when a process with a known-bad hash executes and is immediately followed by local discovery commands?
  context: This question targets a specific, high-confidence post-exploitation pattern. After gaining execution, adversaries often run discovery commands ('whoami', 'net user', 'ipconfig') to orient themselves. The purpose of this question is to create a rule that triggers when a process, confirmed as malicious via its hash, is followed within a short time by the execution of common discovery tools. This provides a high-fidelity alert that an active intrusion is in progress.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives).
  range: last 90 days
  queries:
  - symbolic: 'CREATE a correlation rule that triggers ON process execution (EID 4688) where the file hash is on a threat intel feed. IF within 2 minutes, a child process of ''whoami.exe'', ''net.exe'', or ''ipconfig.exe'' is created on the same host, THEN ALERT.'
- question: Can we statistically link processes with high-entropy command lines to network connections to new or rare IP addresses?
  context: This question seeks to find malware that uses obfuscated commands and communicates with new infrastructure. The rationale is that attackers often use complex, encoded, or randomized command-line arguments to hide their actions, resulting in high entropy. When such a process also makes an external network connection to an IP address never seen before in the environment, the combination of these two statistical anomalies is highly indicative of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives).
  range: last 90 days
  queries:
  - statistical: 'CALCULATE the entropy of command-line arguments for all processes. IF a process has command-line entropy in the 99th percentile AND initiates an external network connection (Sysmon EID 3) to an IP not seen in the last 30 days of Zeek conn.log data, THEN ALERT.'
- question: Can a graph-based model detect anomalous process lineage, such as a rare parent process spawning discovery tools after connecting to a newly registered domain?
  context: This question proposes using graph-based machine learning to analyze the relationships between processes. The purpose is to model process parent-child relationships as a graph and train a model to find anomalous structures. For example, a legitimate process like `winword.exe` should not normally spawn `powershell.exe`, which then connects to a newly registered domain and executes discovery commands. A graph-based model can identify such an entire subgraph as anomalous, providing rich context for an investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives).
  range: last 90 days
  queries:
  - machine_learning: 'MODEL process parent-child relationships as a graph. TRAIN a graph-based anomaly detection model on features like process name, network connections, and domain age. IF the model identifies a subgraph with a high anomaly score, THEN ALERT.'
- question: Can we create a rule to detect DNS queries for TXT records associated with known C2 domains or newly registered domains?
  context: This question targets a specific method of command and control (C2) communication known as DNS tunneling. Adversaries may use DNS TXT record queries to exfiltrate data or receive commands, as DNS traffic is often less scrutinized. The purpose is to create a rule that specifically monitors for DNS queries for TXT records and checks the requested domain against a threat intelligence list of known C2 domains or a list of domains registered within the last 72 hours.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - DNS resolvers, network egress points, and proxy server logs.
  range: last 90 days
  queries:
  - symbolic: 'MONITOR all DNS queries (Zeek dns.log). IF a query is for a TXT record AND the domain is on a known C2 threat list OR was registered in the last 72 hours, THEN ALERT.'
- question: Can we statistically identify C2 beaconing behavior by analyzing the regularity of network connections from a host?
  context: This question aims to detect the 'heartbeat' of malware. Command and control often involves periodic, automated connections from a compromised host to an attacker's server. The rationale is to statistically analyze network connection logs (Zeek conn.log) for this regularity. By calculating a 'beaconing' score based on the consistency of time intervals between connections to a single destination, analysts can identify hosts exhibiting this non-human behavior and flag them for investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - DNS resolvers, network egress points, and proxy server logs.
  range: last 90 days
  queries:
  - statistical: 'FOR each source host, analyze Zeek conn.log data. CALCULATE a beaconing score based on the standard deviation of connection intervals and the number of unique destinations. A low standard deviation to a single destination yields a high score. IF score exceeds the 98th percentile for all hosts, THEN ALERT.'
- question: Can a time-series forecasting model detect anomalous outbound network traffic patterns indicative of C2 communications?
  context: This question proposes using machine learning to baseline and predict normal network behavior for each host. The purpose is to train a time-series model (like ARIMA) on historical data (e.g., outbound data volume, connection frequency) to learn what is normal for a host. The model then forecasts the expected traffic pattern. If the actual, observed traffic significantly deviates from the forecasted range, it generates an alert. This can detect C2 channels that do not follow a simple, regular heartbeat but still deviate from the user's normal behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - DNS resolvers, network egress points, and proxy server logs.
  range: last 90 days
  queries:
  - machine_learning: 'FOR each host, TRAIN a time-series forecasting model (e.g., ARIMA) on historical outbound traffic volume and connection counts. IF observed traffic deviates significantly from the model''s forecasted confidence interval, THEN ALERT.'