name: 'T1587.001: Malware'
id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
description: "This playbook helps identify the execution of newly developed or uniquely modified malware on the network. It focuses on detecting executables with low or no reputation, identifying subsequent persistence attempts, tracking post-exploitation discovery activities, and spotting command and control (C2) network patterns. Evidence is gathered by analyzing file hashes, digital signatures, process entropy, sequences of system events, process lineage, and network traffic characteristics like beaconing and DNS tunneling."
type: 'technique'
related:
  - 'TA0002: Execution (Detecting the use of malware developed via T1587.001)'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: "Is a newly executed process known-malicious, or is it unsigned and not on an approved software list?"
    context: "This question aims to identify the execution of malware using a symbolic, rule-based approach. By checking every new process's file hash against threat intelligence feeds, we can quickly spot executables that are already identified as malicious. Additionally, checking the digital signature of an executable is a critical validation step. Unsigned executables, especially those not part of a corporate-approved software allowlist, represent a significant risk as they bypass a fundamental trust mechanism and are a common characteristic of custom or newly developed malware."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, particularly user workstations and public-facing servers."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "FOR each new process event (WinEvent 4688, Sysmon 1) | LOOKUP file hash against threat intelligence feeds | IF match found OR (is_signed == false AND publisher NOT IN allowlist) | GENERATE alert"
  - question: "Is a newly executed process signed by an unusually rare publisher or does it have an abnormally high-entropy name?"
    context: "This question uses statistical analysis to find outliers that may indicate malicious software. Adversaries often use self-signed certificates or certificates from obscure, newly created entities. By baselining publisher frequency, we can flag executables signed by statistically rare publishers, which might be attacker-controlled. Similarly, malware authors sometimes use randomized or high-entropy process names to evade simple signature-based detections. Flagging processes with unusually high name entropy can help uncover these evasion techniques."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, particularly user workstations and public-facing servers."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "AGGREGATE publisher names over 30 days | CALCULATE frequency percentile for each publisher | FOR each new process event | CALCULATE process name entropy | IF publisher_frequency < 5th_percentile OR name_entropy > 95th_percentile | GENERATE alert"
  - question: "Does a newly executed process exhibit a combination of features that a machine learning model classifies as suspicious or malicious?"
    context: "This question leverages a machine learning classifier to perform a holistic assessment of new process executions. Unlike single-indicator rules, an ML model can analyze a combination of weak signals—such as file entropy, signature status, publisher rarity, parent process, and command-line arguments—to identify complex malicious patterns that would otherwise be missed. By training on a labeled dataset of benign and malicious process events, the model learns to score and classify new, unseen processes, providing a more sophisticated and adaptable layer of detection."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, particularly user workstations and public-facing servers."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "FOR each new process event | EXTRACT features (entropy, signature, publisher, parent, etc.) | INPUT features into classification model (e.g., Random Forest) | IF model_output == 'suspicious' OR 'malicious' | GENERATE alert"
  - question: "Has an unsigned executable recently established a persistence mechanism on a high-value asset?"
    context: "This question aims to detect a common adversary tactic: executing malware and immediately establishing persistence. A newly executed, unsigned program that quickly creates a new service, scheduled task, or autorun registry key is highly suspicious. This behavior chain strongly indicates that the program is malicious and is attempting to ensure it survives a system reboot. Focusing this detection on critical assets like Domain Controllers and administrator workstations prioritizes alerts for the most impactful potential compromises."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4697"
      - "Windows Event ID 4698"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 13"
      - "Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "CORRELATE process events (WinEvent 4688) where executable is unsigned WITH persistence events (WinEvent 4697, 4698, Sysmon 13) | WHERE events occur on same host within 5 minutes | GENERATE alert"
  - question: "Is a specific user creating persistence mechanisms at a statistically anomalous rate, especially after running a process from a rare publisher?"
    context: "This question seeks to identify unusual user behavior by establishing a baseline of normal activity. Legitimate administrative tasks might involve creating services or scheduled tasks, but this activity usually follows a predictable pattern. A sudden spike in persistence-related events for a single user, exceeding their historical average by a significant margin (e.g., 3 standard deviations), is anomalous. Correlating this spike with the recent execution of a program from a rare publisher further increases the likelihood that the activity is malicious."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4697"
      - "Windows Event ID 4698"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 13"
      - "Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "BASELINE persistence events per user over 30 days | CALCULATE daily average and standard deviation | FOR each user's daily persistence count | IF count > (average + 3 * std_dev) | GENERATE alert, especially if preceded by rare-publisher process execution"
  - question: "Does a sequence of system events (e.g., process execution followed by registry modification) match a pattern that a machine learning model has identified as likely malicious?"
    context: "This question uses sequence analysis to detect the 'grammar' of an attack. Adversary actions are not random; they follow a logical progression (e.g., execution -> persistence -> discovery). A sequence analysis model, like an HMM or LSTM, can be trained to recognize the difference between benign sequences of system events and those associated with known malware. By scoring new event sequences, the model can flag a series of actions that, while individually benign, are highly indicative of malicious activity when observed together in a specific order."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4697"
      - "Windows Event ID 4698"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 13"
      - "Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "TRAIN sequence model (HMM, LSTM) on benign and malicious event sequences | FOR each new sequence of events (e.g., Process Exec -> Reg Mod) | SCORE sequence probability against malicious model | IF probability exceeds threshold | GENERATE alert"
  - question: "Has a known-malicious process been executed and immediately followed by local system discovery commands?"
    context: "This question targets a classic post-exploitation behavior pattern. Once malware gains execution, its immediate goal is often to understand the compromised system's environment. It achieves this by running built-in discovery commands like 'whoami' (to find the current user), 'net user' (to find other users), and 'ipconfig' (to find network configuration). A rule that correlates the execution of a process with a known-bad file hash with the subsequent, rapid execution of these discovery tools provides a high-fidelity alert for an active intrusion."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives)."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "CORRELATE process events (WinEvent 4688) with known-bad hash WITH child process events ('whoami.exe', 'net.exe', 'ipconfig.exe') | WHERE events occur on same host within 2 minutes | GENERATE alert"
  - question: "Is a process with unusually complex command-line arguments making a network connection to a new or rare external IP address?"
    context: "This question uses statistical methods to find obfuscated or unusual command-line activity linked to network connections. Adversaries often use long, randomized, or encoded command-line arguments to pass instructions or configurations to their malware, resulting in high entropy. When a process exhibiting such high-entropy arguments also makes a network connection, especially to a destination IP address that is new to the organization, it is a strong indicator of malicious activity, such as C2 communication or data exfiltration."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives)."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "CALCULATE command-line entropy for all processes | IF cmdline_entropy > 99th_percentile AND process initiates external network connection (Sysmon 3) to destination IP not seen in 30 days (Zeek conn.log) | GENERATE alert"
  - question: "Does the relationship between parent processes, child processes, and network connections form a pattern that a graph-based ML model identifies as anomalous?"
    context: "This question models process activity as a graph to uncover anomalous relationships that are difficult to spot with linear rules. A graph-based model can learn what normal process lineage looks like (e.g., 'winword.exe' spawning 'eqnedt32.exe'). It can then flag anomalous subgraphs, such as a rarely seen process making a network connection to a newly registered domain and then spawning discovery tools like 'whoami' or 'net.exe'. This approach is powerful for detecting novel attack chains by focusing on the abnormality of the relationships between entities."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives)."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "BUILD process lineage graphs (parent-child-network) | TRAIN graph anomaly detection model on normal graphs | SCORE new subgraphs for anomalous features (e.g., rare parent, NRD connection, discovery tool children) | IF anomaly_score > threshold | GENERATE alert"
  - question: "Is any host querying for DNS TXT records associated with known C2 domains or newly registered domains?"
    context: "This question targets a specific method of command and control (C2) communication known as DNS tunneling. Adversaries may encode C2 instructions or exfiltrated data within DNS queries, often using TXT records which can hold more data. A symbolic rule that alerts on DNS queries for TXT records to domains that are either on a threat intelligence list of known C2 infrastructure or were registered very recently (a common tactic for short-lived campaigns) is an effective way to detect this C2 channel."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "DNS resolvers, network egress points, and proxy server logs."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "FOR each DNS query (Zeek dns.log) | IF query_type == 'TXT' AND (domain IN C2_threat_list OR domain_age < 72 hours) | GENERATE alert"
  - question: "Is any host exhibiting statistically regular, 'heartbeat'-like network traffic to a single external destination?"
    context: "This question aims to detect C2 beaconing through statistical analysis of network connection patterns. Malware often 'calls home' to its C2 server at regular intervals to receive commands or exfiltrate data. This results in highly periodic connections (a low standard deviation of time between connections) to a small number of destinations. By calculating a 'beaconing' score for each host based on this regularity and alerting on the highest-scoring outliers, we can identify potential C2 communications that might otherwise blend in with normal traffic."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "DNS resolvers, network egress points, and proxy server logs."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "FOR each source host, analyze connection logs (Zeek conn.log) | CALCULATE standard deviation of time between connections to each destination | CALCULATE beaconing_score based on low std_dev and low unique destination count | IF beaconing_score > 98th_percentile | GENERATE alert"
  - question: "Does a host's outbound network traffic pattern significantly deviate from its own historically predicted behavior?"
    context: "This question uses time-series forecasting to create a dynamic, per-host baseline of normal network behavior. A model like ARIMA or Prophet can learn a host's typical patterns of outbound connections and data volume over time, accounting for daily or weekly cycles. When the host's actual, observed traffic significantly deviates from the model's forecast (i.e., falls outside the predicted confidence interval), it indicates an anomaly. This can detect C2 activity that doesn't follow a simple, regular heartbeat but still represents a break from the user's normal behavior."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "DNS resolvers, network egress points, and proxy server logs."
    range: 'Last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: "FOR each host, train time-series model (ARIMA, Prophet) on historical connection/volume data (Zeek conn.log) | FORECAST expected traffic for current time period | IF observed_traffic is outside the forecast's confidence interval | GENERATE alert"