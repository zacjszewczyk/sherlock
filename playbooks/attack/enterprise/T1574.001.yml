name: T1574.001: DLL Hijacking
id: a8d5e2f0-1c7b-4a3d-8e9f-6b2c1a0d3e5f
description: This playbook focuses on detecting DLL Hijacking (T1574.001), a technique where adversaries place a malicious DLL in a location that an application will load instead of the legitimate one. The goal is to identify instances where this technique is used to establish persistence (e.g., by hijacking a DLL loaded by a service or startup item), escalate privileges (e.g., by tricking a high-privilege process into loading a malicious DLL), or evade defenses (e.g., by loading malicious code into a trusted process). Detection strategies involve monitoring for known-bad DLLs being loaded by persistent processes, identifying DLLs placed in non-standard or user-writable locations, analyzing remote DLL loads over SMB, and detecting when trusted processes load unsigned or anomalously-signed DLLs.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a DLL with a known-malicious hash been created and subsequently loaded by a process tied to a new persistence mechanism?
    context: This question aims to detect a classic persistence technique where an adversary places a malicious DLL, identified via its hash from threat intelligence, and has it loaded by a process that is configured to auto-start. Correlating the file creation, the threat intel match, the DLL load, and the creation of a new service or scheduled task provides a high-confidence indicator of compromise.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Windows Event ID 4697
      - Windows Event ID 4698
      - Sysmon Event ID 13
      - User workstations
      - Domain Controllers
      - Application Servers
      - Persistence locations in the Windows Registry (e.g., HKLM\Software\Microsoft\Windows\CurrentVersion\Run)
      - System service binaries
      - Scheduled Task repository
    range: last 90 days
    queries:
      - query_name: Symbolic - Known-Bad DLL Loaded for Persistence
        query: |
          SEARCH file creation events (Sysmon 11) for DLLs.
          HASH the file and check against threat intel feed.
          IF match, JOIN by file path with DLL load events (Sysmon 7) within 10 minutes.
          IF joined, CHECK if loading process is associated with a recent persistence event (Windows 4697/4698, Sysmon 13).
          ALERT on match.
  - question: Is a known persistence-related process, like svchost.exe, loading a DLL from a statistically rare or unusual file path?
    context: Legitimate processes associated with persistence typically load DLLs from predictable, common system locations. Adversaries may place a malicious DLL in an uncommon directory to achieve hijacking. This question focuses on baselining normal DLL load paths for these processes and identifying outliers. A DLL loaded from a path seen very infrequently across the environment is highly suspicious.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - query_name: Statistical - Persistence Process Loading from Rare Path
        query: |
          FOR each DLL load event (Sysmon 7), calculate the prevalence of the DLL's file path across the environment.
          FILTER for events where the loading process is a known persistence mechanism (e.g., svchost.exe, taskhostw.exe).
          ALERT if the loaded DLL's path is in the bottom 5th percentile of frequency.
  - question: Has a machine learning model identified a suspicious DLL load event associated with a process configured for autorun?
    context: This question leverages a machine learning model to detect nuanced signs of DLL hijacking that symbolic or statistical methods might miss. By training on features like path entropy, signature status, and publisher rarity, the model can identify combinations of factors that indicate a DLL load is malicious, especially when the loading process is known to be a persistence mechanism.
    answer_sources:
      - Sysmon Event ID 7
      - Sysmon Event ID 13
      - Windows Event ID 4697
      - Windows Event ID 4698
      - User workstations
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - query_name: ML - Suspicious DLL Load by Persistent Process
        query: |
          INPUT all DLL load events (Sysmon 7) into a pre-trained classification model.
          FEATURES include process name, DLL path entropy, DLL signature, publisher rarity, parent process.
          IF model prediction is 'suspicious' AND the process is configured for autorun or its parent is a persistence service (e.g., services.exe).
          ALERT for review.
  - question: Has a DLL with a name matching a legitimate system DLL been created in a non-system directory and subsequently loaded?
    context: Adversaries often abuse the DLL search order by placing a malicious DLL with the same name as a legitimate one (e.g., version.dll) in a directory that is searched before the actual system directory. This question seeks to detect this specific "masquerading" behavior by alerting when a commonly hijacked DLL name appears outside of its expected System32 or SysWOW64 home and is then loaded.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Windows Event ID 4697
      - Windows Event ID 4698
      - Sysmon Event ID 13
      - Application installation directories (e.g., C:\Program Files\)
      - User profile directories
      - Startup folders
      - Windows Registry persistence locations
    range: last 90 days
    queries:
      - query_name: Symbolic - System DLL Name in Non-System Path
        query: |
          MAINTAIN watchlist of commonly hijacked DLL names.
          ALERT on file creation (Sysmon 11) for a watchlist DLL name in a path NOT 'C:\Windows\System32\' or 'C:\Windows\SysWOW64\'.
          CORRELATE with a subsequent load of that same file path (Sysmon 7).
  - question: Has a process loaded a set of DLLs that significantly deviates from its historical baseline?
    context: Processes tend to load a consistent set of DLLs during their normal operation. A sudden change, such as the introduction of a new, unexpected DLL, can indicate hijacking. This question uses the Jaccard similarity score to quantify this deviation. A low score, especially when the new DLL has a common name but an unusual path, suggests an anomaly worth investigating.
    answer_sources:
      - Sysmon Event ID 7
      - Application installation directories
      - User profile directories
    range: last 90 days
    queries:
      - query_name: Statistical - Low Jaccard Similarity of Loaded DLLs
        query: |
          FOR each process, create a historical baseline set of loaded DLLs.
          ON new executions, get the set of currently loaded DLLs (Sysmon 7).
          CALCULATE Jaccard similarity between current set and baseline set.
          ALERT if score is low (e.g., < 0.8), especially if new DLL has a common name but unusual path.
  - question: Has a time-series anomaly detection model flagged an unusual sequence of DLLs being loaded by a critical, persistent service?
    context: For critical services, the sequence and timing of DLL loads should be highly predictable. This question uses a sophisticated model, like an LSTM Autoencoder, to learn this normal sequence. If a malicious DLL is injected into the process, it will disrupt this sequence, causing a high reconstruction error in the model and triggering an alert for a deviation from normal behavior.
    answer_sources:
      - Sysmon Event ID 7
      - System service binaries
    range: last 90 days
    queries:
      - query_name: ML - Anomalous DLL Load Sequence in Critical Service
        query: |
          INPUT sequences of DLL loads (Sysmon 7) for critical services into a trained LSTM Autoencoder model.
          MONITOR the model's reconstruction error for new sequences.
          ALERT if the reconstruction error is abnormally high, indicating a deviation from the learned normal sequence.
  - question: Has a DLL been created in a temporary or user-writable directory and loaded very shortly thereafter?
    context: Adversaries frequently write their malicious payloads to transient locations like %TEMP% or %APPDATA% because these locations are typically user-writable. A key indicator of this activity is the short time delta between the DLL being written to disk and a process loading it. This question looks for this quick "write-then-load" behavior in non-standard directories.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - User profile directories (%APPDATA%, %LOCALAPPDATA%)
      - Temporary file directories (%TEMP%, C:\Windows\Temp)
      - Publicly writable folders (C:\Users\Public\)
    range: last 90 days
    queries:
      - query_name: Symbolic - DLL Loaded from Temp/User Directory
        query: |
          CORRELATE file creation events (Sysmon 11) for '.dll' files in user-writable paths ('C:\Users\*', '\AppData\', '\Temp\') with image load events (Sysmon 7) for the same file path.
          ALERT if the time between creation and load is less than 5 minutes.
  - question: Has a process shown a sudden increase in the string entropy of the paths of the DLLs it is loading?
    context: Legitimate DLLs are usually loaded from predictable paths. Adversaries may use randomized or deeply nested temporary directories, which results in file paths with higher string entropy. This question establishes a baseline for the path entropy of DLLs loaded by each process and looks for a sharp increase, which can indicate that the process is loading a DLL from an unusual, potentially malicious location.
    answer_sources:
      - Sysmon Event ID 7
      - User profile directories
      - Temporary file directories
    range: last 90 days
    queries:
      - query_name: Statistical - High Entropy in DLL Load Path
        query: |
          FOR each running process, calculate the string entropy of its loaded DLL paths (Sysmon 7).
          MAINTAIN a moving average baseline of this entropy score per process name.
          ALERT if the entropy score for a process spikes more than 3 standard deviations above its moving average.
  - question: Has an unsupervised machine learning model identified a DLL load event as an outlier?
    context: This question uses clustering algorithms like DBSCAN to group all DLL load events based on their properties. Normal, legitimate loads will form large, dense clusters. Malicious DLL loads, which often have an unusual combination of process name, path, and signature status, will not fit into these clusters and will be flagged as outliers, providing a way to find novel threats without prior signatures.
    answer_sources:
      - Sysmon Event ID 7
      - User profile directories
      - Temporary file directories
    range: last 90 days
    queries:
      - query_name: ML - Outlier Detection on DLL Load Events
        query: |
          CLUSTER DLL load events (Sysmon 7) using a model like DBSCAN.
          FEATURES include ProcessName, DllPath, DllIsSigned, DllPublisher.
          ALERT on any event that the model flags as an outlier or cannot assign to an established cluster of normal behavior.
  - question: Has a process associated with persistence loaded a DLL from a remote network share?
    context: Adversaries may host their malicious DLLs on a remote server and use a compromised machine's persistence mechanism (like a service) to load the DLL directly from an SMB or WebDAV share. This avoids writing the DLL to the local disk. This question aims to detect this by monitoring for network file access logs showing a persistence-related process reading a .dll file from a remote location.
    answer_sources:
      - Zeek smb_files.log
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network egress points
      - Internal file servers
      - WebDAV servers
      - Endpoints initiating remote connections
    range: last 90 days
    queries:
      - query_name: Symbolic - Persistence Process Loading Remote DLL
        query: |
          MONITOR Zeek 'smb_files.log' for 'read' actions on filenames ending in '.dll'.
          CORRELATE the client IP with endpoint network connection logs (Sysmon 3) to find the process.
          ALERT if the process is a known persistence mechanism (e.g., 'svchost.exe').
  - question: Has a host shown a sudden spike in the percentage of '.dll' files it reads over SMB?
    context: While some remote DLL reads may be normal, a sudden increase in this activity on a specific host is anomalous. This question establishes a baseline for the proportion of DLL file reads over SMB for each host and flags any host that becomes a statistical outlier, which could indicate it is being used to pull down multiple malicious DLLs or is part of a larger attack.
    answer_sources:
      - Zeek smb_files.log
      - Network egress points
      - Internal file servers
    range: last 90 days
    queries:
      - query_name: Statistical - Spike in Remote DLL Reads per Host
        query: |
          PROFILE the file extensions accessed over SMB per host.
          CALCULATE the frequency of '.dll' file reads as a percentage of all SMB file reads per host.
          ALERT if a host's ratio suddenly spikes or exceeds the 99th percentile across all hosts.
  - question: Has a time-series forecasting model detected an anomalously high volume of DLLs being transferred over SMB across the network?
    context: This question provides a network-wide view to detect large-scale attacks. By forecasting the expected number of unique DLLs transferred via SMB per hour, a significant deviation from this forecast can indicate a widespread campaign where an adversary is remotely loading DLLs on many machines simultaneously.
    answer_sources:
      - Zeek smb_files.log
      - Network egress points
      - Internal file servers
    range: last 90 days
    queries:
      - query_name: ML - Anomalous Volume of SMB DLL Transfers
        query: |
          TRAIN a time-series forecasting model (e.g., ARIMA) on the hourly count of unique DLLs transferred via SMB.
          MONITOR the network for the observed count.
          ALERT if the observed count significantly exceeds the forecasted volume (e.g., > 3 standard deviations).
  - question: Has a DLL known to be a privilege escalation tool been written to a user-writable directory and then loaded?
    context: Adversaries use specific tools (e.g., PrintSpoofer, Juicy Potato) that exploit vulnerabilities via DLL hijacking to escalate privileges. This question uses a high-confidence list of hashes for these specific tools. A match provides a strong signal that an active privilege escalation attempt is underway.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - User-writable directories on multi-user systems
      - System-wide temporary folders (C:\Windows\Temp)
      - User profile temp directories
    range: last 90 days
    queries:
      - query_name: Symbolic - Known Privesc Tool DLL Loaded
        query: |
          ON file creation of a DLL (Sysmon 11), hash the file.
          MATCH hash against a curated list of privilege escalation tool IOCs.
          IF match is found AND the DLL is subsequently loaded (Sysmon 7), trigger a CRITICAL alert.
  - question: Has a globally rare, unsigned DLL been loaded from a user-writable directory?
    context: Legitimate software is typically signed and seen across many machines in an enterprise. A DLL that is unsigned and has only been seen on one or a few hosts is highly suspicious, especially when it's loaded from a user-writable directory. This question assigns a risk score based on this combination of rarity, lack of signature, and risky path to find suspicious DLLs without prior knowledge of them.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - User-writable directories
    range: last 90 days
    queries:
      - query_name: Statistical - Rare, Unsigned DLL Loaded from User Directory
        query: |
          BASELINE all file hashes seen in user-writable directories.
          FOR a new DLL load, identify if the hash is globally rare (e.g., seen on < 5 hosts).
          CALCULATE a risk score based on hash rarity, signature status (unsigned), and path.
          ALERT on high-risk scores.
  - question: Has a machine learning model predicted that a file creation event is part of a privilege escalation attempt?
    context: This question uses a supervised model trained to recognize the characteristics of files used in privilege escalation. By analyzing features like the file's path, the user context it was written under, its entropy, and signature status, the model can make a predictive judgment, allowing for the detection of novel or unknown privilege escalation tools.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - User-writable directories
    range: last 90 days
    queries:
      - query_name: ML - Predictive Model for Privesc File Creation
        query: |
          FEED file creation events (Sysmon 11) into a supervised classifier (e.g., XGBoost).
          FEATURES include file path, user context, parent process, file entropy, and signature status.
          ALERT if the model predicts 'privilege escalation' with high confidence.
  - question: Has a DLL been created in a specific path known to be vulnerable to hijacking by a high-privilege service?
    context: Certain high-privilege Windows services (like IKEEXT) are known to be vulnerable to DLL hijacking if an attacker can place a malicious DLL in a specific path (e.g., C:\Windows\System32\wlbsctrl.dll) before the service starts. This is a very specific and high-fidelity indicator of a privilege escalation attempt. This question creates a rule to watch these exact file-path combinations.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - System directories on servers running specific vulnerable services (e.g., IKEEXT, UsoSvc)
      - Application directories for third-party software running as SYSTEM
    range: last 90 days
    queries:
      - query_name: Symbolic - DLL Created in Known-Vulnerable Privesc Path
        query: |
          MONITOR for file creation events (Sysmon 11) for specific filenames in specific known-vulnerable paths (e.g., 'wlbsctrl.dll' in 'C:\Windows\System32\').
          CORRELATE with a subsequent load of that DLL (Sysmon 7) by the vulnerable service.
          ALERT on match.
  - question: Has a legitimate, hijackable DLL been modified outside of a normal patch window?
    context: Instead of creating a new file, an attacker might overwrite an existing but unprotected DLL that a privileged service uses. Legitimate modifications to these files should only happen during scheduled patching. This question detects this by baselining the file's modification time and alerting on any writes that occur outside of an established patch window, especially if the new file is unsigned.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - System directories on servers running specific vulnerable services
    range: last 90 days
    queries:
      - query_name: Statistical - Hijackable DLL Modified Outside Patch Window
        query: |
          BASELINE the modification timestamp of known hijackable DLLs.
          MONITOR for file write events (Sysmon 11) to these files.
          ALERT if a write occurs outside a defined patch window, especially if the resulting file is unsigned.
          CORRELATE with subsequent load (Sysmon 7).
  - question: Has a model detected that a vulnerable service has transitioned to a 'hijacked' state?
    context: This question models the lifecycle of a vulnerable service using a Hidden Markov Model. The normal states are 'Stopped' and 'Running_Benign'. The creation of a malicious DLL in a hijackable path is an observable event that would cause a transition to a very low-probability 'Running_Hijacked' state, allowing the model to flag the system state as anomalous.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - System directories on servers running specific vulnerable services
    range: last 90 days
    queries:
      - query_name: ML - HMM for Hijacked Service State
        query: |
          MODEL the state of vulnerable services with a Hidden Markov Model (States: 'Stopped', 'Running_Benign', 'Running_Hijacked').
          USE file creation in a hijackable path (Sysmon 11) as an observed event.
          ALERT if the model transitions to the 'Running_Hijacked' state.
  - question: Is a process running with SYSTEM or High integrity loading a DLL from a user-writable directory?
    context: This is a direct and powerful indicator of privilege escalation. A process running with elevated privileges (High or SYSTEM integrity) should never load code from a location where a standard, non-administrative user can write files (like C:\Users\Public or C:\Perflogs). Such an event strongly implies that an attacker has placed a malicious DLL to be executed with higher privileges.
    answer_sources:
      - Sysmon Event ID 7
      - Endpoints and servers, particularly those where users have local admin rights or where UAC is misconfigured
      - Shared workstations and terminal servers
    range: last 90 days
    queries:
      - query_name: Symbolic - High-Integrity Process Loads from User-Writable Path
        query: |
          FILTER image load events (Sysmon 7) where 'IntegrityLevel' is 'High' or 'System'.
          AND 'ImageLoaded' path starts with a user-writable location (e.g., 'C:\Users\', 'C:\ProgramData\', 'C:\Perflogs').
          EXCLUDE known good software installers.
          ALERT on any match.
  - question: Is a high-integrity process loading a DLL from a file path that is statistically very rare for that specific process?
    context: Even privileged processes have predictable behavior. For a critical process like 'lsass.exe', the set of DLLs it loads and their paths is very stable. This question builds a profile for each privileged process and calculates a rarity score for any new DLL load path. A path that is an extreme outlier for that specific process is a strong indicator of a hijack.
    answer_sources:
      - Sysmon Event ID 7
      - Endpoints and servers
    range: last 90 days
    queries:
      - query_name: Statistical - High-Integrity Process Loads from Rare Path
        query: |
          FOR each high-integrity process name, build a profile of its normal DLL load paths.
          CALCULATE a rarity score for each new DLL load path observed (Sysmon 7).
          ALERT if a path's rarity score is in the 99.9th percentile for that privileged process.
  - question: Has a machine learning model identified a DLL load by a high-integrity process as an anomaly?
    context: This question uses a one-class SVM, an anomaly detection model, to learn the boundary of all normal DLL load behavior for high-integrity processes. It is trained only on legitimate events. Any new DLL load that falls outside this learned boundary, due to an unusual combination of path, signature, or publisher, is classified as an anomaly, allowing for the detection of previously unseen hijacking techniques.
    answer_sources:
      - Sysmon Event ID 7
      - Endpoints and servers
    range: last 90 days
    queries:
      - query_name: ML - One-Class SVM for Anomalous High-Integrity Load
        query: |
          TRAIN a one-class SVM model on legitimate DLL load events (Sysmon 7) for high-integrity processes.
          FEATURES include DLL path, signature status, and publisher.
          CLASSIFY new DLL load events with the model.
          ALERT if an event is classified as an anomaly (falls outside the learned boundary).
  - question: After loading a DLL from a user-writable directory, did a high-integrity process spawn a shell or make a network connection?
    context: This question chains together a sequence of events that is highly indicative of successful exploitation. The initial suspicious act is the high-integrity process loading a DLL from a user-writable path. The confirmation is the subsequent behavior: the process spawning a command shell (cmd.exe, powershell.exe) or making an outbound network call, which are common post-exploitation actions for an attacker's payload.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Sysmon Event ID 7
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - Privileged Access Workstations (PAWs)
      - Critical servers
      - Network egress points
    range: last 90 days
    queries:
      - query_name: Symbolic - Post-Exploitation Behavior After Suspicious Load
        query: |
          DETECT when a high-integrity process loads a DLL from a user-writable path (Sysmon 7).
          THEN, within 30 seconds, check if the same process spawns 'cmd.exe' or 'powershell.exe' (Sysmon 1) OR initiates an external network connection (Sysmon 3).
          ALERT on this sequence.
  - question: Following a suspicious DLL load, did a high-integrity process spawn a child process that is statistically rare for it?
    context: Privileged parent processes typically spawn a predictable set of child processes. For example, 'svchost.exe' spawning 'whoami.exe' is extremely unusual and likely malicious. This question identifies the suspicious DLL load and then checks the statistical probability of the subsequent child process. A near-zero probability child process is a strong indicator of compromise.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Domain Controllers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - query_name: Statistical - Rare Child Process After Suspicious Load
        query: |
          BUILD a frequency distribution of child processes for each high-integrity parent process.
          DETECT when a high-integrity parent loads a DLL from a user-writable path (Sysmon 7).
          IF it then spawns a child process (Sysmon 1), check the frequency distribution.
          ALERT if the child process is statistically rare (e.g., near-zero probability) for that parent.
  - question: Has a graph-based machine learning model detected an anomalous process-file-network activity subgraph?
    context: This question uses a sophisticated Graph Neural Network (GNN) to model the complex relationships between processes, the files they access, and the network connections they make. A malicious subgraph, such as a privileged process loading a user-writable DLL and then spawning a shell, will have different structural properties and node embeddings than the learned baseline of normal activity, allowing for its detection.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Sysmon Event ID 7
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - Critical servers
    range: last 90 days
    queries:
      - query_name: ML - GNN for Anomalous Activity Graph
        query: |
          MODEL normal process-file-network activity using a Graph Neural Network (GNN).
          DETECT subgraphs representing a privileged process loading a user-writable DLL and then spawning a shell or making a network call.
          ALERT if the subgraph has anomalous structural properties or embeddings compared to the learned baseline.
  - question: Is a trusted 'living-off-the-land' binary (LOLBin) loading a DLL whose hash is a known indicator of compromise?
    context: Adversaries abuse trusted Windows binaries (LOLBins) like 'rundll32.exe' to execute malicious code, as this can evade simple detection based on process names. This question specifically looks for the case where a known LOLBin loads a DLL whose hash is present in a threat intelligence feed, a high-fidelity indicator that the LOLBin is being used for malicious purposes.
    answer_sources:
      - Sysmon Event ID 7
      - Sysmon Event ID 11
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: Symbolic - LOLBin Loading Known-Malicious DLL
        query: |
          MONITOR DLL load events (Sysmon 7).
          HASH the loaded DLL and check against a threat intelligence feed.
          IF hash is malicious AND the loading process is a known LOLBin (e.g., 'rundll32.exe', 'regsvr32.exe').
          TRIGGER a critical alert.
  - question: Is a LOLBin process being executed with a command line and DLL pairing that is statistically rare?
    context: While a LOLBin might be used for many legitimate tasks, specific combinations of command-line arguments and the DLLs they load are often very consistent. Adversaries create anomalous pairings. This question baselines all (command line, loaded DLL) pairs for each LOLBin and alerts on pairs that have a very low co-occurrence frequency across the enterprise.
    answer_sources:
      - Sysmon Event ID 7
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: Statistical - Rare LOLBin Argument-DLL Pairing
        query: |
          FOR each LOLBin process, establish a baseline of common (command line argument, loaded DLL path) pairings (Sysmon 7).
          CALCULATE the co-occurrence frequency of these pairs across the enterprise.
          ALERT on pairs with a very low frequency (e.g., bottom 1st percentile).
  - question: Has a machine learning model classified a LOLBin execution as malicious based on its arguments and the DLL it loaded?
    context: This question uses a classifier to distinguish benign from malicious LOLBin usage. By training on a rich feature set including command-line arguments and properties of the loaded DLL (path, signature, entropy), the model can learn the subtle patterns of abuse and flag executions that are likely part of a defense evasion technique.
    answer_sources:
      - Sysmon Event ID 7
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: ML - Malicious LOLBin Execution Classifier
        query: |
          TRAIN a classification model (e.g., LightGBM) to distinguish benign/malicious LOLBin executions.
          FEATURES include command-line arguments, loaded DLL name/path, DLL signature status, and DLL entropy (from Sysmon 7).
          ALERT if the model classifies an execution as 'malicious'.
  - question: Has a process signed by a trusted publisher, like Microsoft, loaded an unsigned or untrusted DLL?
    context: A powerful defense evasion technique is to inject malicious code into a trusted, signed process. An indicator of this is when a process signed by a reputable vendor (e.g., 'Microsoft Corporation') loads a DLL that is either unsigned or signed by an unknown or untrusted publisher. This question creates a rule to detect this suspicious mismatch between process and DLL publishers.
    answer_sources:
      - Sysmon Event ID 7
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: Symbolic - Trusted Process Loading Untrusted DLL
        query: |
          DETECT when a process with a valid signature from a trusted publisher (e.g., 'Microsoft Corporation') loads a DLL (Sysmon 7).
          CHECK if the DLL's 'SignatureStatus' is not 'Valid' or its 'Signature' is not on a trusted publisher list.
          EXCLUDE known-good exceptions and ALERT on matches.
  - question: Has a statistically anomalous pairing of Process Publisher and DLL Publisher been observed?
    context: In a healthy environment, there are predictable relationships between the publishers of processes and the publishers of the DLLs they load (e.g., Microsoft processes load Microsoft DLLs). This question identifies anomalous pairs by calculating the frequency of all (Process Publisher, DLL Publisher) combinations. A very rare pair is a statistical outlier that warrants investigation for sideloading.
    answer_sources:
      - Sysmon Event ID 7
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: Statistical - Anomalous Publisher Pairing
        query: |
          MAINTAIN a baseline of all (Process Publisher, DLL Publisher) pairs from DLL load events (Sysmon 7).
          IDENTIFY statistically anomalous pairs by calculating their frequency.
          ALERT on pairs that are extreme outliers (e.g., a Microsoft process loading a DLL from a publisher seen for the first time).
  - question: Has an anomaly detection model, such as an Isolation Forest, flagged a DLL load event as suspicious?
    context: This question uses an Isolation Forest model, which is effective at identifying anomalies in high-dimensional data. By feeding it features like the signature status and publishers of both the process and the DLL, the model can efficiently "isolate" unusual combinations that represent potential defense evasion, such as a signed process loading an untrusted DLL from a non-standard path.
    answer_sources:
      - Sysmon Event ID 7
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: ML - Isolation Forest for Anomalous DLL Loads
        query: |
          USE an Isolation Forest model on DLL load events (Sysmon 7).
          FEATURES include categorical representations of ProcessIsSigned, ProcessPublisher, DllIsSigned, DllPublisher, and DllPath.
          ALERT on any event that the model isolates as an anomaly.
  - question: After loading a DLL from a non-system path, did a trusted system process make a DNS query for a known malicious domain?
    context: This question chains events to detect defense evasion followed by command-and-control activity. The initial indicator is a trusted process (like explorer.exe) loading a DLL from an unusual location (sideloading). The confirmation is that this action is immediately followed by a DNS query from the same process for a domain categorized as malicious by threat intelligence, indicating the sideloaded DLL has initiated C2 communication.
    answer_sources:
      - Sysmon Event ID 3
      - Sysmon Event ID 7
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points
      - DNS servers
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: Symbolic - Sideload Followed by Malicious DNS Query
        query: |
          DETECT when a trusted system process (e.g., 'explorer.exe') loads a DLL from a non-system path (Sysmon 7).
          WITHIN 60 seconds, check if the same process makes a DNS query (Zeek dns.log) for a domain on a C2/malicious threat intel list.
          ALERT on this sequence.
  - question: After a suspicious DLL load, did a process exhibit DNS behavior indicative of a Domain Generation Algorithm (DGA)?
    context: DGAs are used by malware to generate a large number of domain names for C2, making them hard to block. A sudden spike in the entropy of Top-Level Domains (TLDs) queried by a process can indicate DGA activity. This question looks for this spike immediately after a trusted process loads a DLL from a non-standard path, suggesting the sideloaded DLL contains a DGA.
    answer_sources:
      - Sysmon Event ID 7
      - Zeek dns.log
      - DNS servers
    range: last 90 days
    queries:
      - query_name: Statistical - DGA-like DNS Entropy Spike After Sideload
        query: |
          AFTER a trusted process loads a DLL from a non-system path (Sysmon 7), track its subsequent DNS queries (Zeek dns.log).
          CALCULATE the entropy of the queried TLDs in a 5-minute window.
          ALERT if entropy spikes > 3 standard deviations from the process's historical average.
  - question: Has a sequence-to-sequence autoencoder model detected an anomalous process lifecycle after a DLL load?
    context: This question models the entire lifecycle of a process (e.g., its sequence of system calls or events) to understand its normal behavior. When a process is hijacked by a sideloaded DLL, its subsequent actions (like initiating C2 or dropping files) will create an anomalous sequence that the autoencoder, trained only on normal data, will fail to reconstruct accurately, resulting in a high reconstruction error and an alert.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Sysmon Event ID 7
      - All endpoints and servers
    range: last 90 days
    queries:
      - query_name: ML - Anomalous Process Lifecycle via Autoencoder
        query: |
          MODEL the lifecycle of a process (e.g., 'explorer.exe') using a sequence-to-sequence autoencoder on its event logs.
          A high reconstruction error on a new process lifecycle indicates it is anomalous.
          CORRELATE high-error lifecycles with preceding sideload events (Sysmon 7).
  - question: Has a process loaded a DLL with a critical system name (e.g., 'ntdll.dll', 'amsi.dll') from an incorrect file path?
    context: This is a specific and highly malicious form of DLL hijacking aimed at subverting core OS or security functions (like AMSI). Critical system DLLs have one and only one correct path (e.g., C:\Windows\System32). This question maintains a strict dictionary of these critical files and their correct paths and alerts on any deviation, as there are virtually no legitimate reasons for this to occur.
    answer_sources:
      - Sysmon Event ID 7
      - System folders (C:\Windows\System32)
      - Security product installation directories
      - Application directories
    range: last 90 days
    queries:
      - query_name: Symbolic - Critical System DLL Loaded from Wrong Path
        query: |
          MAINTAIN a dictionary of critical DLLs and their single correct path (e.g., {'ntdll.dll': 'C:\Windows\System32\ntdll.dll'}).
          ALERT on any image load event (Sysmon 7) where the DLL filename is a key, but its 'ImageLoaded' path does not match the dictionary value.
  - question: Is a critical system DLL being loaded from a path that is a severe statistical outlier?
    context: This question uses statistics to find the same behavior as the symbolic rule above, but without a hardcoded dictionary. By creating a frequency distribution of load paths for each DLL name, a critical DLL like 'ntdll.dll' should show its legitimate path ('C:\Windows\System32\...') accounting for >99.9% of all loads. Any load from a path in the long tail of that distribution is a severe anomaly.
    answer_sources:
      - Sysmon Event ID 7
      - System folders
      - Application directories
    range: last 90 days
    queries:
      - query_name: Statistical - Outlier Path for System DLL
        query: |
          FOR each unique DLL name, create a frequency distribution of its load paths across the enterprise.
          FOR a system DLL like 'ntdll.dll', the path 'C:\Windows\System32\ntdll.dll' should be >99.9% of loads.
          ALERT on any load from a path in the long tail of the distribution (e.g., from 'C:\Users\Public\').
  - question: Has a clustering algorithm identified a load of a system DLL from an anomalous path?
    context: This question uses unsupervised machine learning to find critical DLLs loaded from the wrong path. By clustering on the (DLL Filename, DLL Path) feature set, all legitimate loads of 'ntdll.dll' will form a single, massive cluster. A malicious load, like ('ntdll.dll', 'C:\Users\Public\Music'), will be in a tiny, separate cluster or identified as a noise point, making it easy to spot as an anomaly.
    answer_sources:
      - Sysmon Event ID 7
      - System folders
      - Application directories
    range: last 90 days
    queries:
      - query_name: ML - Clustering to Find Anomalous System DLL Path
        query: |
          USE a K-Means clustering algorithm on the feature set of (DLL Filename, DLL Path) from Sysmon 7.
          LEGITIMATE loads will form dense clusters.
          INVESTIGATE events that fall into very small, singleton clusters or are identified as cluster outliers.