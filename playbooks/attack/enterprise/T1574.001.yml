name: T1574.001: DLL
id: f4b5f8a0-1b9d-4e3a-8f0c-6a5b1d4e2c7b
description: This playbook addresses the malicious use of DLLs for persistence, privilege escalation, and defense evasion. It covers various detection scenarios, such as DLL search order hijacking where a malicious DLL is placed in a location that a legitimate application loads from; sideloading where a malicious DLL is disguised as a legitimate one or placed in a non-standard directory; and loading malicious DLLs from temporary folders or remote shares. The playbook specifically looks for indicators like known-bad DLL hashes, DLLs being loaded by persistence mechanisms (services, run keys, scheduled tasks), high-integrity processes loading DLLs from user-writable locations, and trusted processes loading unsigned or untrusted DLLs. These actions are often precursors to further malicious activity like spawning command shells or initiating C2 communications.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a known-malicious DLL been written to disk and subsequently loaded by a process associated with a new persistence mechanism?
  context: This question seeks to identify a classic persistence technique where an adversary drops a malicious DLL and then configures a legitimate process, such as a new service or scheduled task, to load it. By correlating a file creation event for a known-bad DLL (identified via threat intelligence hash matching) with a subsequent load event by a process linked to a recent persistence setup, we can detect this activity with high confidence. The short time window between file write and load is a strong indicator of a coordinated malicious action.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 13
  - User workstations, Domain Controllers, Application Servers, Persistence locations in the Windows Registry (e.g., HKLM\Software\Microsoft\Windows\CurrentVersion\Run), System service binaries, Scheduled Task repository.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file creation events (Sysmon 11) for DLLs.
      FOR EACH file:
        CALCULATE hash and query against threat intelligence.
        IF match found:
          SEARCH for DLL load events (Sysmon 7) for the same file path within 10 minutes.
          IF load event found:
            SEARCH for recent persistence creation events (Windows 4697, 4698) associated with the loading process.
            IF persistence event found:
              ALERT "Known-bad DLL loaded by new persistence mechanism."
- question: Is a known persistence mechanism loading a DLL from a statistically rare file path?
  context: This question aims to find DLL sideloading that uses uncommon file paths for evasion. Adversaries may place a malicious DLL in an unusual directory to avoid detection. By baselining the file paths of all DLLs loaded by known persistence processes (e.g., svchost.exe, taskhostw.exe) across the environment, we can identify statistically rare paths. A load from a path in the bottom 5th percentile of frequency is a strong anomaly that warrants investigation.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 13
  - User workstations, Domain Controllers, Application Servers, Persistence locations in the Windows Registry (e.g., HKLM\Software\Microsoft\Windows\CurrentVersion\Run), System service binaries, Scheduled Task repository.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH DLL load event (Sysmon 7):
        CALCULATE prevalence of the DLL file path across the environment.
      FILTER for loads by known persistence processes (e.g., svchost.exe).
      FLAG events where the file path is statistically rare (e.g., bottom 5th percentile).
- question: Has a machine learning model identified a suspicious DLL load by a process associated with an autorun or persistence mechanism?
  context: This question uses a machine learning model to identify suspicious DLL loads that may evade simpler checks. The model is trained on features like process name, DLL path entropy, and publisher rarity. An alert is triggered when the model flags a DLL load as 'suspicious' and the process loading it is either configured for autorun or was spawned by a persistence manager like services.exe. This approach helps uncover novel or obfuscated sideloading attempts.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 13
  - User workstations, Domain Controllers, Application Servers, Persistence locations in the Windows Registry (e.g., HKLM\Software\Microsoft\Windows\CurrentVersion\Run), System service binaries, Scheduled Task repository.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FEED all DLL load events into a pre-trained classification model.
      FOR each event classified as 'suspicious':
        CHECK if the loading process's parent is a persistence mechanism (e.g., services.exe) OR if the process is configured for autorun.
        IF true:
          ALERT "ML model detected suspicious DLL load by persistence mechanism."
- question: Has a commonly hijacked system DLL been created in a non-standard directory and subsequently loaded?
  context: This question looks for DLL search order hijacking where an adversary places a malicious DLL with the same name as a legitimate system DLL (e.g., 'version.dll') in a location that is searched before the legitimate system directory. By maintaining a watchlist of these DLL names and alerting when one is created outside of 'System32' or 'SysWOW64' and then loaded, we can detect this specific hijacking technique.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 13
  - Application installation directories (e.g., C:\Program Files\), User profile directories, Startup folders, Windows Registry persistence locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      WATCHLIST = ['version.dll', 'wlbsctrl.dll', 'cryptbase.dll']
      SEARCH for file creation events (Sysmon 11) for filenames in WATCHLIST.
      IF file created outside 'C:\Windows\System32\' or 'C:\Windows\SysWOW64\':
        CORRELATE with a subsequent load event (Sysmon 7) for the same file path.
        IF correlated:
          ALERT "Commonly hijacked system DLL loaded from non-standard path."
- question: Has a process loaded a set of DLLs that significantly deviates from its established baseline?
  context: This question identifies potential DLL hijacking by baselining the normal DLLs loaded by each process. A low Jaccard similarity score between the set of currently loaded DLLs and the historical baseline indicates a significant deviation. This is particularly suspicious if the newly loaded DLLs have common system names but originate from unusual paths, suggesting an adversary has introduced a malicious DLL into the process's execution flow.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 13
  - Application installation directories (e.g., C:\Program Files\), User profile directories, Startup folders, Windows Registry persistence locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN a historical baseline of DLL sets loaded by each process name.
      FOR each new process execution:
        CALCULATE Jaccard similarity between current DLL set and historical baseline.
        IF score is low (e.g., < 0.8) AND new DLLs have common names but unusual paths:
          FLAG for investigation.
- question: Has a time-series model detected an anomalous sequence of DLLs being loaded by a critical, persistent service?
  context: This question uses a time-series anomaly detection model, like an LSTM Autoencoder, to monitor the integrity of critical services. The model is trained on the normal sequence of DLLs loaded by a service. If a malicious DLL is hijacked, the loading sequence will change, causing a high reconstruction error in the model. This deviation from the learned normal behavior indicates a potential compromise of the service.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Sysmon Event ID 13
  - Application installation directories (e.g., C:\Program Files\), User profile directories, Startup folders, Windows Registry persistence locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FEED sequences of DLL loads for critical services into a trained LSTM autoencoder.
      IF the model's reconstruction error for a sequence is abnormally high:
        ALERT "Anomalous DLL load sequence detected for critical service."
- question: Has a DLL been created in a temporary or user-writable directory and then loaded almost immediately?
  context: Adversaries often write their malicious payloads to transient locations like '%TEMP%' or '%APPDATA%' to avoid leaving persistent artifacts in more monitored directories. This question detects this behavior by correlating a file creation event for a DLL in a user-writable location with a subsequent load event for that same file. A very short time delta (e.g., less than 5 minutes) between creation and loading is highly indicative of an active attack.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - User profile directories (%APPDATA%, %LOCALAPPDATA%), Temporary file directories (%TEMP%, C:\Windows\Temp), Publicly writable folders (C:\Users\Public\).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR file creation events (Sysmon 11) for files ending in '.dll' in user-writable paths.
      CORRELATE with image load events (Sysmon 7) for the exact same file path.
      IF time difference is less than 5 minutes:
        ALERT "DLL created and loaded from a temporary location."
- question: Has the string entropy of DLL paths for a running process suddenly increased?
  context: This question aims to detect when a process starts loading DLLs from unusual or obfuscated paths, a common tactic for malware. By establishing a moving average baseline of the path string entropy for each process, a sudden, sharp increase (e.g., > 3 standard deviations) can indicate that the process is loading libraries from deeply nested, randomly named, or temporary locations, which is abnormal and suspicious.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - User profile directories (%APPDATA%, %LOCALAPPDATA%), Temporary file directories (%TEMP%, C:\Windows\Temp), Publicly writable folders (C:\Users\Public\).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process, maintain a moving average baseline of its loaded DLL path entropy.
      MONITOR for new DLL load events.
      IF the path entropy for a process spikes > 3 standard deviations above its moving average:
        ALERT "Sudden increase in DLL path entropy for process."
- question: Has an unsupervised learning model identified a DLL load event as an outlier?
  context: This question uses an unsupervised clustering model (e.g., DBSCAN) to find anomalous DLL load events without prior knowledge of what is malicious. The model clusters events based on features like process name, DLL path, and signature status. Outlier points that do not fit into any established cluster of normal behavior, such as a trusted process loading an unsigned DLL from a temp folder, represent anomalies that warrant investigation.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - User profile directories (%APPDATA%, %LOCALAPPDATA%), Temporary file directories (%TEMP%, C:\Windows\Temp), Publicly writable folders (C:\Users\Public\).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLUSTER DLL load events using an unsupervised model (e.g., DBSCAN) based on features like ProcessName, DllPath, and DllIsSigned.
      IDENTIFY and alert on outlier points that are not assigned to any cluster of normal behavior.
- question: Has a known persistence process read a DLL from a remote network share?
  context: This question tracks a specific method of persistence where an adversary forces a process to load a DLL from a remote location, such as an SMB or WebDAV share. This avoids dropping the malicious file to the local disk. By monitoring network file transfer logs (e.g., Zeek's smb_files.log) for DLL reads and correlating the source IP with endpoint process logs (Sysmon Event ID 3), we can identify if the process is a known persistence mechanism (e.g., 'svchost.exe') and flag the activity.
  answer_sources:
  - Zeek smb_files.log
  - Zeek conn.log
  - Sysmon Event ID 3
  - Network egress points, Internal file servers, WebDAV servers, Endpoints initiating remote connections.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR Zeek 'smb_files.log' for 'read' actions on files ending in '.dll'.
      FOR each event, correlate the client IP with Sysmon Event ID 3 to find the source process.
      IF the source process is a known persistence mechanism (e.g., 'svchost.exe', 'lsass.exe'):
        ALERT "Persistence process loaded a remote DLL over SMB."
- question: Has a host suddenly started reading an unusually high number of DLLs over SMB?
  context: This question provides a statistical method to detect remote DLL loading. By profiling the normal ratio of '.dll' file reads to all SMB file reads for each host, we can detect anomalies. A sudden spike in this ratio, or a host becoming a statistical outlier compared to its peers (e.g., exceeding the 99th percentile), suggests it may be compromised and is being used to load remote payloads.
  answer_sources:
  - Zeek smb_files.log
  - Zeek conn.log
  - Sysmon Event ID 3
  - Network egress points, Internal file servers, WebDAV servers, Endpoints initiating remote connections.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      PROFILE the percentage of '.dll' file reads out of all SMB file reads per host.
      ALERT if a host's ratio suddenly spikes or becomes a statistical outlier (e.g., > 99th percentile) compared to other hosts.
- question: Has a time-series model forecasted a spike in the number of unique DLLs being transferred over SMB?
  context: This question aims to detect a widespread remote DLL loading attack. By training a time-series forecasting model (e.g., ARIMA) on the count of unique DLLs transferred via SMB per hour, we can establish a baseline of normal activity. An observed count that significantly exceeds the forecasted volume (e.g., > 3 standard deviations) suggests an abnormal, potentially coordinated event is occurring across the network.
  answer_sources:
  - Zeek smb_files.log
  - Zeek conn.log
  - Sysmon Event ID 3
  - Network egress points, Internal file servers, WebDAV servers, Endpoints initiating remote connections.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FORECAST the count of unique DLLs transferred via SMB per hour using a time-series model.
      ALERT if the observed count significantly exceeds the forecasted volume (e.g., > 3 standard deviations).
- question: Has a DLL matching the hash of a known privilege escalation tool been created and loaded?
  context: This question seeks to detect the use of known privilege escalation exploits that leverage DLLs (e.g., PrintSpoofer, Juicy Potato). By maintaining a high-confidence list of malicious file hashes for these tools, we can monitor for file creation events (Sysmon 11). A match, followed by a load event (Sysmon 7) for that same DLL, is a critical indicator of an active privilege escalation attempt.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - User-writable directories on multi-user systems (e.g., Citrix servers, developer workstations), System-wide temporary folders (C:\Windows\Temp), User profile temp directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR DLL file creation events (Sysmon 11).
      HASH the file and check against a list of IOCs for privilege escalation tools.
      IF a match is found AND the DLL is subsequently loaded (Sysmon 7):
        TRIGGER a critical alert for a privilege escalation attempt.
- question: Has a globally rare, unsigned DLL been loaded from a user-writable directory?
  context: This question identifies suspicious DLLs that may be unknown to threat intelligence. A DLL that is globally rare (seen on only one or very few hosts), is unsigned, and is loaded from a user-writable directory is highly suspect. This combination of factors suggests the file is not a legitimate, widely distributed piece of software and may be a custom payload used in a targeted attack. A risk score can be assigned based on this combination of factors.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - User-writable directories on multi-user systems (e.g., Citrix servers, developer workstations), System-wide temporary folders (C:\Windows\Temp), User profile temp directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each DLL loaded from a user-writable directory:
        CALCULATE hash rarity across the environment.
        CHECK if the DLL is unsigned.
        ASSIGN a risk score based on rarity and signature status.
        ALERT on high-risk scores.
- question: Has a machine learning model classified a file creation event as a likely privilege escalation attempt?
  context: This question leverages a supervised machine learning model to proactively identify privilege escalation attempts at the moment a file is written to disk. The model is trained on metadata features like file path, user context, parent process, and file entropy. A high-confidence prediction of 'privilege escalation' from the model allows for immediate investigation before the malicious DLL is even loaded.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - User-writable directories on multi-user systems (e.g., Citrix servers, developer workstations), System-wide temporary folders (C:\Windows\Temp), User profile temp directories.
  range: last 9_0 days
  queries:
  - technology: pseudocode
    query: |
      FEED file creation event metadata into a supervised classifier (e.g., XGBoost).
      IF the model predicts 'privilege escalation' with high confidence:
        ESCALATE for immediate investigation.
- question: Has a DLL been written to a known-vulnerable path just before being loaded by a high-privilege service?
  context: This question targets a specific, high-fidelity privilege escalation technique where an adversary exploits a service that is vulnerable to DLL hijacking (e.g., the IKEEXT service and wlbsctrl.dll). The detection rule looks for the creation of a specific DLL in a specific vulnerable path, followed by the vulnerable service loading that DLL. This sequence of events is a strong indicator of successful exploitation.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - System directories on servers running specific vulnerable services (e.g., IKEEXT, UsoSvc), Application directories for third-party software running as SYSTEM.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR for file creation events (Sysmon 11) for specific DLLs in known-vulnerable paths (e.g., 'wlbsctrl.dll' in 'C:\Windows\System32\').
      CORRELATE with a subsequent load of that DLL (Sysmon 7) by the associated vulnerable service.
      IF both occur:
        ALERT "Known DLL hijacking vulnerability likely exploited."
- question: Has a known hijackable DLL been modified outside of a normal patch window?
  context: This question provides a way to detect the hijacking of legitimate system DLLs. By baselining the modification timestamp of legitimate, but hijackable, DLLs, we can detect unauthorized changes. A file write event that occurs outside of a pre-defined patch window, especially if the resulting file is unsigned, is a statistical anomaly. Correlating this with the next load of that DLL confirms the hijack.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - System directories on servers running specific vulnerable services (e.g., IKEEXT, UsoSvc), Application directories for third-party software running as SYSTEM.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE modification timestamps for known hijackable DLLs.
      MONITOR for file write events (Sysmon 11) that change these files.
      IF write occurs outside a patch window AND the new file is unsigned:
        CORRELATE with the next load event (Sysmon 7) to confirm hijack.
        ALERT "Hijackable DLL modified outside patch window."
- question: Has a model of service state transitions detected a likely DLL hijack?
  context: This question uses a Hidden Markov Model (HMM) to model the normal state of a service vulnerable to DLL hijacking. The states could be 'Stopped', 'Running_Benign', and 'Running_Hijacked'. The creation of a malicious DLL in a hijackable path is an observable event that would cause a transition to the low-probability 'Running_Hijacked' state, allowing the model to detect the compromise.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 7
  - System directories on servers running specific vulnerable services (e.g., IKEEXT, UsoSvc), Application directories for third-party software running as SYSTEM.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL the state of vulnerable services using a Hidden Markov Model.
      USE file creation events (Sysmon 11) in hijackable paths as observations.
      IF the model transitions to a 'Running_Hijacked' state:
        ALERT "Service state model indicates likely DLL hijack."
- question: Has a process running with SYSTEM or High integrity loaded a DLL from a user-writable directory?
  context: This is a direct and effective way to detect a common privilege escalation vector. A high-integrity process should never load code from a location where a low-privilege user can write files. This question filters for image load events (Sysmon 7) where the process integrity is 'High' or 'System' and the DLL path is in a user-writable location like 'C:\Users\*'. With proper exclusions for legitimate installers, this is a high-fidelity alert.
  answer_sources:
  - Sysmon Event ID 7
  - Endpoints and servers, particularly those where users have local admin rights or where UAC is misconfigured. Shared workstations and terminal servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FILTER image load events (Sysmon 7).
      ALERT where event.IntegrityLevel is 'High' or 'System' AND event.ImageLoaded path starts with a user-writable directory (e.g., 'C:\Users\', 'C:\Perflogs').
      EXCLUDE known good installers.
- question: Has a high-integrity process loaded a DLL from a statistically rare path for that specific process?
  context: This question refines the detection of privileged processes loading suspicious DLLs. Instead of using a static list of user-writable directories, it builds a dynamic profile of normal DLL load paths for each high-integrity process (e.g., 'lsass.exe'). A DLL load from a path that has a very high rarity score for that specific process indicates a significant deviation from its normal behavior and a potential hijack.
  answer_sources:
  - Sysmon Event ID 7
  - Endpoints and servers, particularly those where users have local admin rights or where UAC is misconfigured. Shared workstations and terminal servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each high-integrity process name, build a profile of its normal DLL load paths.
      CALCULATE a rarity score for each new DLL load path observed.
      ALERT on paths with a very high rarity score (e.g., 99.9th percentile) for that process.
- question: Has a one-class SVM model detected an anomalous DLL load by a high-integrity process?
  context: This question uses a machine learning model (One-Class SVM) to learn the boundary of normal behavior for DLL loads by high-integrity processes. The model is trained on legitimate events, considering features like DLL path, signature status, and publisher. Any new DLL load event that falls outside this learned boundary is classified as an anomaly, providing a flexible way to detect novel hijacking techniques.
  answer_sources:
  - Sysmon Event ID 7
  - Endpoints and servers, particularly those where users have local admin rights or where UAC is misconfigured. Shared workstations and terminal servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN a one-class SVM model on legitimate DLL load events for high-integrity processes.
      FEED new DLL load events into the model.
      ALERT on any event classified as an anomaly (outside the learned boundary).
- question: After loading a DLL from a user-writable path, did a high-integrity process spawn a shell or connect to a new network destination?
  context: This question looks for post-exploitation behavior immediately following a potential hijack. The trigger is a chained rule: first, a high-integrity process loads a DLL from a user-writable path. Second, within a short timeframe (e.g., 30 seconds), that same process spawns a shell ('cmd.exe', 'powershell.exe') or initiates an external network connection. This sequence is highly indicative of a successful exploitation and command-and-control setup.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 7
  - Zeek conn.log
  - Zeek dns.log
  - Domain Controllers, Privileged Access Workstations (PAWs), Critical servers, Network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRIGGER on a high-integrity process loading a DLL from a user-writable path (Sysmon 7).
      WITHIN 30 seconds, check if the same process spawns 'cmd.exe'/'powershell.exe' (Sysmon 1) OR initiates an external network connection (Sysmon 3).
      IF true, generate a high-priority alert.
- question: Did a high-integrity process spawn a statistically rare child process after loading a DLL from a user-writable path?
  context: This question identifies post-exploitation activity by focusing on anomalous parent-child process relationships. After a high-integrity process loads a DLL from a risky location, we monitor the child processes it spawns. By baselining normal child processes, we can detect a statistically rare spawn (e.g., 'svchost.exe' spawning 'whoami.exe'), which has a near-zero probability in normal operations and is a strong indicator of compromise.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 7
  - Zeek conn.log
  - Zeek dns.log
  - Domain Controllers, Privileged Access Workstations (PAWs), Critical servers, Network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each high-integrity parent process, build a frequency distribution of child processes that spawn after a DLL load from a user-writable path.
      ALERT on child processes that are statistically rare for that parent in that context.
- question: Has a graph-based ML model detected an anomalous process-file-network activity subgraph?
  context: This question uses an advanced Graph Neural Network (GNN) to model the complex relationships between processes, files, and network connections. A subgraph representing a privileged process loading a user-writable DLL and then spawning a shell or making a network call would have anomalous structural properties compared to the learned baseline of normal activity graphs. This allows for the detection of the entire attack chain as a single anomalous event.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 7
  - Zeek conn.log
  - Zeek dns.log
  - Domain Controllers, Privileged Access Workstations (PAWs), Critical servers, Network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL normal process-file-network activity using a Graph Neural Network.
      DETECT subgraphs with anomalous structural properties, such as a privileged process loading a user-writable DLL and then spawning a shell.
      ALERT on detected anomalous subgraphs.
- question: Has a 'living-off-the-land' binary (LOLBin) loaded a DLL associated with a known malicious toolkit?
  context: This question targets a common defense evasion technique where adversaries use trusted Windows binaries (LOLBins) like 'rundll32.exe' to execute malicious code. By monitoring DLL load events, we can check if the loaded DLL's hash matches a known indicator for a malicious toolkit (e.g., Cobalt Strike, Mimikatz). If the loading process is a known LOLBin, it's a critical sign of abuse.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - All endpoints and servers, particularly those running common 'living-off-the-land' binaries (LOLBins).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR DLL load events (Sysmon 7).
      HASH the loaded DLL and check against a threat intelligence feed of malicious toolkits.
      IF a match is found AND the loading process is a known LOLBin (e.g., 'rundll32.exe'):
        GENERATE a critical alert.
- question: Is a LOLBin being executed with a statistically rare combination of command line arguments and loaded DLL path?
  context: This question aims to detect the abuse of LOLBins by finding unusual usage patterns. By establishing a baseline of common pairings of (command line argument, loaded DLL path) for each LOLBin, we can calculate the co-occurrence frequency of these pairs across the enterprise. A pair with a very low frequency is anomalous and suggests the LOLBin is being used in a non-standard, potentially malicious way.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - All endpoints and servers, particularly those running common 'living-off-the-land' binaries (LOLBins).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each LOLBin, baseline the co-occurrence frequency of (command line, loaded DLL path) pairs.
      FLAG executions where the pair has a very low frequency (e.g., bottom 1st percentile).
- question: Has a machine learning model classified a LOLBin execution as malicious?
  context: This question uses a classification model to distinguish between benign and malicious use of LOLBins, which can be difficult with simple rules. By training a model on features like command-line arguments, DLL name/path, and DLL signature status, we can identify suspicious executions. A 'malicious' classification from the model is a strong indicator of abuse for defense evasion.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - All endpoints and servers, particularly those running common 'living-off-the-land' binaries (LOLBins).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FEED LOLBin execution features (command line, loaded DLL metadata) into a trained classification model.
      ALERT on executions that the model classifies as 'malicious'.
- question: Has a trusted, signed Microsoft process loaded an unsigned or untrusted DLL?
  context: This question detects DLL sideloading into trusted processes. A process signed by a trusted publisher like 'Microsoft Corporation' loading a DLL that is either unsigned or signed by a publisher not on an approved allowlist is highly suspicious. This behavior violates trust boundaries and is a common technique for adversaries to hide their code within a legitimate process. The anomaly is amplified if the DLL is in a non-standard directory.
  answer_sources:
  - Sysmon Event ID 7
  - All endpoints and servers, focusing on processes that are part of the core operating system or trusted third-party applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DETECT when a process with a valid 'Microsoft Corporation' signature loads a DLL where 'SignatureStatus' is not 'Valid' or the 'Signature' is not on a trusted publisher list.
      EXCLUDE known-good exceptions.
      ALERT on matches.
- question: Has a statistically anomalous pairing of Process Publisher and DLL Publisher been observed?
  context: This question identifies unusual trust relationships by baselining all (Process Publisher, DLL Publisher) pairs in the environment. For example, if 99.9% of DLLs loaded by 'explorer.exe' (published by Microsoft) are also from Microsoft, a load event involving a DLL from an unknown or rare publisher is a statistical outlier. This can uncover sideloading attacks that might otherwise be missed.
  answer_sources:
  - Sysmon Event ID 7
  - All endpoints and servers, focusing on processes that are part of the core operating system or trusted third-party applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN a baseline of all (Process Publisher, DLL Publisher) pairs and their frequency.
      IDENTIFY and alert on statistically anomalous or rare pairs.
- question: Has an Isolation Forest model identified a DLL load event as an anomaly based on publisher and path information?
  context: This question uses an anomaly detection model, Isolation Forest, to find unusual DLL load events. The model is trained on features like whether the process and DLL are signed, their respective publishers, and the DLL path. The model learns to isolate anomalies, such as the unusual combination of a signed Microsoft process loading an untrusted DLL from a temporary folder, without needing pre-labeled malicious data.
  answer_sources:
  - Sysmon Event ID 7
  - All endpoints and servers, focusing on processes that are part of the core operating system or trusted third-party applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      USE an Isolation Forest model on DLL load events with features for process/DLL signature, publisher, and path.
      ALERT on events that the model identifies as anomalies.
- question: After loading a DLL from a non-system path, did a trusted system process query a known malicious domain?
  context: This question connects a potential sideloading event with subsequent C2 activity. The detection is a chained alert: first, a trusted system process (like 'explorer.exe') loads a DLL from a non-standard path. Second, within a short window, the same process makes a DNS query for a domain categorized as malicious by threat intelligence. This sequence strongly suggests a sideloaded DLL has initiated C2 communication.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 7
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, All endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRIGGER on a trusted system process loading a DLL from a non-system path (Sysmon 7).
      WITHIN 60 seconds, check if the same process makes a DNS query (Zeek dns.log) for a domain on a malicious threat feed.
      IF true, ALERT.
- question: After loading a DLL from a non-system path, did a trusted process exhibit potential DGA behavior?
  context: This question looks for signs of algorithmically generated domains (DGA), a common C2 technique, following a suspicious DLL load. After a trusted process loads a DLL from a non-system path, we track its subsequent DNS queries. A sudden spike in the entropy of the top-level domains (TLDs) being queried suggests the process is attempting to contact a wide and random-looking set of domains, which is characteristic of DGA.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 7
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, All endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      AFTER a trusted process loads a DLL from a non-system path:
        TRACK subsequent DNS queries from that process.
        CALCULATE the entropy of queried TLDs in a 5-minute window.
        ALERT if entropy spikes significantly (> 3 std dev) above the process's historical average.
- question: Has a sequence-based model detected an anomalous process lifecycle after a suspicious DLL load?
  context: This question models the entire lifecycle of a process (e.g., 'explorer.exe') using its sequence of system calls or events. A sequence-to-sequence autoencoder is trained on normal lifecycles. A high reconstruction error on a new lifecycle indicates it's anomalous. This can detect when a sideloaded DLL causes the process to perform abnormal actions like C2 communication or dropping files, as these behaviors would not be present in the normal training data.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 7
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, All endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL process lifecycles using a sequence-to-sequence autoencoder.
      ALERT when a new process lifecycle has a high reconstruction error, indicating anomalous behavior post-DLL load.
- question: Has a process loaded a critical system or security DLL from an incorrect path?
  context: This question targets a specific and high-confidence form of DLL hijacking. Adversaries may place a malicious version of a critical DLL (e.g., 'ntdll.dll', 'amsi.dll') in a location that gets loaded instead of the real one. By maintaining a dictionary of critical DLLs and their one correct, protected path (e.g., 'C:\Windows\System32\'), we can alert on any load event where the filename matches but the on-disk path does not.
  answer_sources:
  - Sysmon Event ID 7
  - System folders (C:\Windows\System32), Security product installation directories (e.g., C:\Program Files\CrowdStrike), Application directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DICTIONARY = {'ntdll.dll': 'C:\Windows\System32\ntdll.dll', ...}
      MONITOR image load events (Sysmon 7).
      IF event.ImageLoaded.filename in DICTIONARY and event.ImageLoaded.path != DICTIONARY[event.ImageLoaded.filename]:
        ALERT "Critical DLL loaded from incorrect path."
- question: Has a system DLL been loaded from a statistically rare file path?
  context: This provides a dynamic way to detect the hijacking of system DLLs. For any given DLL name (e.g., 'ntdll.dll'), we can create a frequency distribution of the paths it is loaded from across the enterprise. The legitimate path ('C:\Windows\System32\') should account for >99.9% of loads. Any load from a path in the long tail of that distribution (e.g., 'C:\Users\Public\ntdll.dll') is a severe anomaly and likely a hijack.
  answer_sources:
  - Sysmon Event ID 7
  - System folders (C:\Windows\System32), Security product installation directories (e.g., C:\Program Files\CrowdStrike), Application directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each unique DLL name, create a frequency distribution of its load paths.
      FOR system DLLs, ALERT on any load from a path that is a statistical outlier (e.g., not the >99.9% most common path).
- question: Has a clustering algorithm identified a DLL load event as an outlier based on filename and path?
  context: This question uses unsupervised machine learning to find hijacked DLLs. By running a clustering algorithm (like K-Means) on the feature set of (DLL Filename, DLL Path), legitimate loads will form dense, large clusters (e.g., a huge cluster for ('ntdll.dll', 'C:\Windows\System32')). A hijacked DLL will create a small or singleton cluster (e.g., ('ntdll.dll', 'C:\Users\Public\')), making it easy to spot as an outlier.
  answer_sources:
  - Sysmon Event ID 7
  - System folders (C:\Windows\System32), Security product installation directories (e.g., C:\Program Files\CrowdStrike), Application directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLUSTER DLL load events using K-Means on (DLL Filename, DLL Path) features.
      INVESTIGATE events that fall into very small clusters or are identified as cluster outliers.