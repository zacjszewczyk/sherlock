name: "T1027.007: Dynamic API Resolution"
id: "7f0c1b7a-8d1e-4f2a-9b8c-6d5e4f3a2b1c"
description: "This playbook helps analysts detect adversaries using Dynamic API Resolution (T1027.007) to evade defenses. This technique involves obscuring Windows API calls to hinder static analysis. The playbook provides questions to investigate this activity through several lenses: identifying processes with known malicious hashes or packed characteristics; detecting suspicious invocations of rundll32.exe using ordinal numbers; finding write-then-execute behavior in temporary directories; correlating runtime process behavior with its static imports to find mismatches; and identifying anomalous behavior, such as unusual child processes or network connections, originating from trusted system processes that may have been injected with malicious code."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are processes being created from executables whose SHA256 hash matches a known threat intelligence indicator for API obfuscation or packing?"
    context: "This question aims to detect known malware that uses dynamic API resolution. By matching the SHA256 hash of newly created executables against a threat intelligence feed, analysts can identify threats based on previously observed malicious samples. A match indicates a high-confidence finding of a known adversary tool."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1 from all Windows endpoints and servers, particularly domain controllers, application servers, and developer workstations."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process creation logs WHERE executable_hash IN threat_intel_hash_list"
  - question: "Are executables with low environmental prevalence being spawned by common initial access vectors like office applications or browsers?"
    context: "This question identifies potentially malicious executables by their rarity. Adversary tools are often unique to a compromised environment. When a rare executable (seen on very few hosts) is launched by a process frequently targeted for initial access (like Outlook or Chrome), it is highly suspicious and could indicate a successful phishing or drive-by download attack followed by payload execution."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1 from all Windows endpoints and servers, particularly domain controllers, application servers, and developer workstations."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FIND low_prevalence_executables in process creation logs AND CHECK if parent_process in (outlook.exe, winword.exe, chrome.exe)"
  - question: "Are new executables being classified as 'packed' or 'obfuscated' by a machine learning model based on their PE file features?"
    context: "This question leverages machine learning to proactively identify executables that are likely using obfuscation, a common characteristic of malware using dynamic API resolution. The model analyzes PE file features like Import Address Table (IAT) size and section entropy to make a prediction, allowing for the detection of novel or unknown malware without relying on signatures."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1 from all Windows endpoints and servers, particularly domain controllers, application servers, and developer workstations."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SCORE new executables using PE feature classification model AND ALERT if score > threshold"
  - question: "Is rundll32.exe being used to invoke DLL functions by ordinal number instead of by name?"
    context: "This question targets a specific evasion technique where adversaries call DLL functions by their ordinal number (e.g., '#123') to obscure which function is being executed. Legitimate software typically calls functions by their human-readable names. This behavior is a strong indicator of malicious activity attempting to hide its purpose from analysts and security tools."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1 from all Windows endpoints and servers, focusing on command line logging from user workstations."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process creation logs for process_name='rundll32.exe' AND command_line MATCHES '.*\\.dll,\\s*#\\d+'"
  - question: "Are there statistically rare instances of rundll32.exe command lines that use ordinal function calls?"
    context: "This question identifies anomalous rundll32.exe usage. While some legitimate software might use ordinal calls, it is uncommon. By baselining all rundll32.exe command lines across the enterprise, analysts can flag any command that is both rare and uses the suspicious ordinal syntax, pointing to a potential targeted attack or a novel malware variant."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1 from all Windows endpoints and servers, focusing on command line logging from user workstations."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FIND rare rundll32 command lines AND CHECK for ordinal_syntax ('#<number>')"
  - question: "Is an unsupervised machine learning model identifying anomalous rundll32.exe command lines based on features like length, character types, and syntax?"
    context: "This question employs anomaly detection to find malicious rundll32.exe executions without pre-defined rules. The model learns what normal command lines look like and then flags significant deviations. This can detect novel or sophisticated evasion techniques that might not be caught by simple pattern matching, including unusual combinations of arguments or obfuscation methods."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1 from all Windows endpoints and servers, focusing on command line logging from user workstations."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SCORE new rundll32 command lines with anomaly detection model AND ALERT on outliers"
  - question: "Is a PE file being written to a temporary or user-writable directory and then immediately executed or loaded as a module?"
    context: "This question looks for a common malware behavior pattern: dropping a payload to disk and then executing it. Legitimate installers might do this, but when it happens in a temporary directory and within a very short time window (e.g., under a minute), it is highly suspicious. This could indicate a dropper delivering its second stage or an exploit payload being executed."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 11, Sysmon Event ID 7 from user profile directories (%APPDATA%, %LOCALAPPDATA%, Downloads), temporary directories (%TEMP%, C:\\Windows\\Temp), and public-writable shares."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "CORRELATE FileCreate events with ImageLoad/ProcessCreate events on file_path and process_guid WHERE time_delta < 60s AND path is temporary/user-writable"
  - question: "Are there write-then-execute events happening with an unusually short time delay, or are they being performed by parent processes that do not typically exhibit this behavior?"
    context: "This question adds a statistical lens to the write-then-execute pattern. By analyzing the distribution of time delays, analysts can pinpoint events that happen exceptionally fast, which is more indicative of automated malicious activity. Additionally, by baselining which parent processes normally perform this action, it's possible to flag anomalies, such as a web browser or document reader suddenly dropping and running an executable."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 11, Sysmon Event ID 7 from user profile directories (%APPDATA%, %LOCALAPPDATA%, Downloads), temporary directories (%TEMP%, C:\\Windows\\Temp), and public-writable shares."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FIND write-then-execute events with time_delta in bottom 1st percentile OR where parent_process behavior is > 2 standard deviations from baseline"
  - question: "Does a sequence of events (e.g., network download, file write to temp, execution) match a known malicious chain according to a sequence analysis model?"
    context: "This question uses a more advanced model to understand the entire attack chain on a per-process basis. Instead of looking at isolated events, it analyzes the sequence of actions taken by a process. A sequence like an inbound network connection, followed by writing a PE file to a temporary location, and then executing that file, is a classic high-confidence indicator of compromise that a sequence model (like an HMM or LSTM) can be trained to detect."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 11, Sysmon Event ID 7 from user profile directories (%APPDATA%, %LOCALAPPDATA%, Downloads), temporary directories (%TEMP%, C:\\Windows\\Temp), and public-writable shares."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "ANALYZE event sequences per process_guid AND ALERT if sequence probability for 'malicious' state > threshold"
  - question: "Is a process exhibiting runtime behaviors, like making network connections, that are not supported by the API functions listed in its static Import Address Table (IAT)?"
    context: "This question seeks to find processes that dynamically load functions at runtime to hide their capabilities. If a process makes a network connection, its executable on disk should normally import functions from networking libraries (e.g., ws2_32.dll). If these imports are missing from the static IAT, it strongly implies the process resolved the necessary functions dynamically, a hallmark of evasive malware."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Sysmon Event ID 22, Zeek conn.log from all Windows endpoints and servers, network egress points, and malware analysis sandboxes/threat intelligence feeds."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR new process, extract static IAT. IF runtime_behavior (e.g., network connection) occurs AND required_api_library not in IAT, THEN alert."
  - question: "Are there processes with a high 'Behavior-IAT Mismatch Score', indicating a significant discrepancy between their observed actions and their declared static imports?"
    context: "This question quantifies the mismatch between what a process does and what its on-disk file claims it can do. By assigning points for each behavior (e.g., creating a child process, making a DNS query) that lacks a corresponding static import, a risk score can be calculated. Processes with the highest scores are the most likely to be using dynamic API resolution and warrant investigation."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Sysmon Event ID 22, Zeek conn.log from all Windows endpoints and servers, network egress points, and malware analysis sandboxes/threat intelligence feeds."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "CALCULATE mismatch_score for each process based on runtime_behaviors vs static_IAT. INVESTIGATE processes with scores in the 99th percentile."
  - question: "Is a machine learning model flagging processes as malicious based on a combination of their static PE features and their aggregated runtime behaviors?"
    context: "This question uses a holistic machine learning approach, combining two distinct views of a process: its static nature (the PE file) and its dynamic behavior (runtime actions). A model trained on both feature sets can learn complex patterns. For example, it can learn that a process with a very small IAT that also creates many network connections is highly likely to be malicious, thus detecting dynamic API resolution in action."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Sysmon Event ID 22, Zeek conn.log from all Windows endpoints and servers, network egress points, and malware analysis sandboxes/threat intelligence feeds."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SCORE processes using a model trained on static (PE) and runtime (behavioral) features. ALERT if malicious probability is high, especially for processes with small IATs."
  - question: "Is a core system process like lsass.exe or services.exe spawning a command-line interpreter (cmd.exe, powershell.exe)?"
    context: "This question targets a high-confidence indicator of process injection or credential theft. Core Windows system processes (e.g., lsass.exe, wininit.exe) have highly predictable behavior and should never legitimately spawn a command shell. Such an event is almost always a sign that an adversary has injected code into that trusted process to execute commands with elevated privileges."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log from critical system processes on all Windows hosts, network traffic logs from perimeter firewalls and DNS servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process creation logs WHERE parent_process in (lsass.exe, services.exe, wininit.exe) AND child_process in (cmd.exe, powershell.exe, wscript.exe)."
  - question: "Is a trusted system process (e.g., svchost.exe, explorer.exe) exhibiting rare behavior, such as spawning an unusual child process or connecting to a never-before-seen network destination?"
    context: "This question uses baselining to detect abuse of ubiquitous but predictable system processes. Adversaries inject into processes like svchost.exe to blend in. By establishing a baseline of normal activity (e.g., what child processes it usually creates, what domains it connects to), any deviation, such as a connection to a rare external IP, becomes a strong anomaly signal pointing to malicious code execution."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log from critical system processes on all Windows hosts, network traffic logs from perimeter firewalls and DNS servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "BASELINE child processes and network destinations for critical system processes. ALERT on new behaviors with rarity > 99th percentile."
  - question: "Is a time-series model detecting significant deviations from the predicted behavior of a critical system process, such as a sudden spike in network traffic or child process creation?"
    context: "This question applies time-series analysis to monitor the ongoing behavior of critical processes. These models learn the normal rhythm and seasonality of a process's activity (e.g., more network traffic during business hours). An alert is triggered when the observed activity significantly deviates from the model's forecast, which can indicate that the process has been hijacked to perform malicious tasks like data exfiltration or lateral movement."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log from critical system processes on all Windows hosts, network traffic logs from perimeter firewalls and DNS servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "APPLY time-series anomaly detection model to behavioral metrics of critical processes. ALERT when observed metrics significantly deviate from predicted values."