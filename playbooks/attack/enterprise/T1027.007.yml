name: "T1027.007: Dynamic API Resolution"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps investigate whether an adversary is using dynamic API resolution to evade defenses. This technique involves a program locating and calling functions at runtime rather than linking them at compile time, which hides the program's true capabilities from static analysis tools. Indicators include processes created from executables with known malicious hashes or empty Import Address Tables (IATs), the use of rundll32.exe to call DLL functions by ordinal number, files being written to disk and immediately executed, processes exhibiting behaviors not supported by their static imports, and trusted system processes showing anomalous activity like spawning command shells or making unusual network connections."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a process being created from an executable whose hash matches a known indicator for API obfuscation or packing?"
    context: "This question uses a high-fidelity symbolic check to identify known malware. By comparing the SHA256 hash of newly created process executables against a threat intelligence feed of hashes known for using packing or dynamic API resolution, analysts can quickly detect documented threats."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, particularly domain controllers, application servers, and developer workstations."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "SEARCH process_creation_logs | JOIN threat_intel_hashes ON file_hash | WHERE match_found | ALERT"
  - question: "Is a low-prevalence executable being spawned by a process commonly associated with initial access?"
    context: "This question aims to find unknown or novel malware by focusing on rarity. An executable seen on very few hosts is suspicious. When such a rare executable is launched by a common initial access vector like an email client (outlook.exe) or web browser (chrome.exe), it strongly suggests a user was compromised and a malicious payload was executed."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, particularly domain controllers, application servers, and developer workstations."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "SEARCH process_creation_logs | STATS count(unique hosts) as prevalence by file_hash | WHERE prevalence < threshold AND parent_process in (outlook.exe, winword.exe, chrome.exe) | ALERT"
  - question: "Does static analysis of a newly observed executable's PE file features classify it as packed or obfuscated?"
    context: "This question applies machine learning to detect evasion techniques directly from the file's structure. A model trained on PE file features (like a small IAT size or high section entropy) can identify executables that have been packed or obfuscated to hide their imports, even if the file's hash is not yet known to threat intelligence."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, particularly domain controllers, application servers, and developer workstations."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each new_executable_hash | EXTRACT PE_features (IAT_size, entropy) | SCORE with classification_model | WHERE probability(packed) > 0.85 | ALERT"
  - question: "Is rundll32.exe being used to invoke a DLL function by its ordinal number instead of its name?"
    context: "Adversaries call DLL functions by ordinal number (e.g., '#123') to hide the function's purpose, as the number is not descriptive. This symbolic check specifically looks for this pattern in command-line arguments for rundll32.exe, which is a strong indicator of an attempt to obscure malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, focusing on command line logging from user workstations."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "SEARCH process_creation_logs | WHERE process_name == 'rundll32.exe' AND command_line REGEX '.*\\.dll,\\s*#\\d+' | ALERT"
  - question: "Is a statistically rare rundll32.exe command line that uses an ordinal call being observed in the environment?"
    context: "This question identifies anomalous rundll32.exe usage by focusing on rarity. While some legitimate software may use ordinal calls, it is uncommon. By baselining all rundll32.exe command lines and flagging those containing an ordinal call that have been seen on very few hosts, analysts can uncover potentially malicious executions that deviate from the norm."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, focusing on command line logging from user workstations."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "SEARCH process_creation_logs WHERE process_name == 'rundll32.exe' AND command_line contains '#' | STATS count(unique hosts) as prevalence by command_line | WHERE prevalence < 5 | ALERT"
  - question: "Is an anomaly detection model flagging a rundll32.exe command line as a significant outlier based on its structure?"
    context: "This question uses unsupervised machine learning to find suspicious rundll32.exe commands without predefined rules. By training a model on features like command length and character types from a baseline of normal activity, it can detect new commands that are structurally anomalous, which could indicate obfuscated or malicious intent."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows endpoints and servers, focusing on command line logging from user workstations."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each new_rundll32_command | EXTRACT structural_features | SCORE with anomaly_detection_model | WHERE score is outlier | ALERT"
  - question: "Is a PE file being written to a temporary or user-writable directory and then quickly executed or loaded by the same process?"
    context: "This 'write-then-execute' behavior is a classic malware dropper pattern. An adversary's initial payload writes the next stage to a less-monitored location (like %TEMP% or %APPDATA%) and then immediately executes or loads it. Correlating a file creation event with a subsequent process creation or module load event from the same process within a short time window (e.g., < 60 seconds) is a strong indicator of compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 7"
      - "User profile directories (%APPDATA%, %LOCALAPPDATA%, Downloads), temporary directories (%TEMP%, C:\\Windows\\Temp), and public-writable shares."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "JOIN file_create_events, (image_load_events OR process_create_events) ON ProcessGUID, file_path | WHERE event_time_delta < 60s AND file_path in (temp_dirs) | ALERT"
  - question: "Is a process exhibiting an unusually fast 'write-then-execute' behavior, or is a specific parent process performing this action more frequently than its baseline?"
    context: "This question refines 'write-then-execute' detection with statistical analysis. It seeks outliers by identifying processes that execute files exceptionally quickly after writing them (bottom percentile of time deltas) or by flagging parent processes (like winword.exe) that suddenly start performing this behavior far more often than their historical baseline, suggesting they have been compromised."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 7"
      - "User profile directories (%APPDATA%, %LOCALAPPDATA%, Downloads), temporary directories (%TEMP%, C:\\Windows\\Temp), and public-writable shares."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "ANALYZE write-then-execute events | ALERT on time_delta in bottom 1st percentile OR parent_process_frequency > 2 * stddev from baseline"
  - question: "Does a sequence of events (e.g., network download -> file write -> execution) match a machine learning model trained to identify malicious process behavior chains?"
    context: "This question uses machine learning to analyze the entire chain of actions for a process. A sequence analysis model can be trained to recognize the typical playbook of a malware infection, such as an inbound network connection followed by a file being created in a temp directory and then immediately loaded or executed. The model can then score new event sequences to determine if they match this malicious pattern."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 7"
      - "User profile directories (%APPDATA%, %LOCALAPPDATA%, Downloads), temporary directories (%TEMP%, C:\\Windows\\Temp), and public-writable shares."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each event_chain by ProcessGuid | SCORE with sequence_analysis_model | WHERE probability(malicious_chain) > threshold | ALERT"
  - question: "Is a process performing actions, like making a network connection, for which the necessary functions are not listed in its on-disk executable's Import Address Table (IAT)?"
    context: "This is a direct method for detecting dynamic API resolution. If a process is observed performing an action (like initiating a network connection via Sysmon Event ID 3) but its executable file on disk does not import the required libraries (like ws2_32.dll), it strongly implies the process resolved those API functions at runtime to evade static analysis."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 22"
      - "Zeek conn.log"
      - "All Windows endpoints and servers, network egress points (for Zeek logs), and malware analysis sandboxes/threat intelligence feeds (for IAT data)."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each process | EXTRACT IAT from on-disk_file | IF process has network_connection AND IAT lacks networking_imports | ALERT"
  - question: "Does a process have a high 'Behavior-IAT Mismatch Score,' indicating it performs many actions not declared in its static IAT?"
    context: "This question quantifies the discrepancy between a process's runtime behavior and its static imports. By creating a 'mismatch score' (e.g., +1 for creating a child process without relevant APIs in IAT, +1 for network activity without network APIs), we can statistically identify processes with the largest gaps. Processes in the 99th percentile are prime candidates for investigation as they are likely using dynamic resolution extensively."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 22"
      - "Zeek conn.log"
      - "All Windows endpoints and servers, network egress points (for Zeek logs), and malware analysis sandboxes/threat intelligence feeds (for IAT data)."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each process | CALCULATE mismatch_score based on (runtime_behaviors vs static_IAT) | FIND processes with scores in 99th percentile | ALERT"
  - question: "Does a machine learning model, using both static PE features and runtime behaviors, classify a process as malicious, especially if it has a minimal IAT?"
    context: "This question uses a powerful hybrid ML approach. A classification model is trained with both static features from the executable (like IAT entries) and aggregated runtime features (like number of network connections). This allows the model to learn that a combination of a very small IAT and high-activity runtime behavior is a strong indicator of evasive malware."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 22"
      - "Zeek conn.log"
      - "All Windows endpoints and servers, network egress points (for Zeek logs), and malware analysis sandboxes/threat intelligence feeds (for IAT data)."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each process | GATHER static_features (IAT) AND runtime_features (net_conn_count) | SCORE with ML_model | WHERE probability(malicious) > threshold | ALERT"
  - question: "Is a core system process like lsass.exe or services.exe spawning a command-line interpreter (cmd.exe, powershell.exe)?"
    context: "This is a high-confidence indicator of malicious activity, often related to process injection. Core Windows processes (lsass.exe, wininit.exe, etc.) have no legitimate reason to spawn interactive command shells. An alert on this behavior is a high-priority signal that a privileged process has been compromised and is being used to execute commands."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Critical system processes on all Windows hosts, network traffic logs from perimeter firewalls and DNS servers."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "SEARCH process_creation_logs | WHERE parent_process in (lsass.exe, services.exe, wininit.exe) AND child_process in (cmd.exe, powershell.exe) | ALERT"
  - question: "Is a trusted system process, such as svchost.exe, creating a rare child process or connecting to a rare network destination?"
    context: "This question detects process injection by baselining the behavior of normally noisy but trusted processes like svchost.exe and explorer.exe. By establishing what is 'normal' (common child processes, typical network destinations) for these processes across the enterprise, we can flag any statistically rare deviation, such as svchost.exe connecting to a never-before-seen domain, as a potential sign of compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Critical system processes on all Windows hosts, network traffic logs from perimeter firewalls and DNS servers."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each system_process (svchost.exe, explorer.exe) | BASELINE normal_child_processes, normal_network_destinations | ALERT on new behavior that is rare across enterprise"
  - question: "Does a time-series model detect a significant deviation from the normal behavioral patterns (e.g., network volume, process creation rate) of a critical system process?"
    context: "This question applies time-series anomaly detection to the behavior of a single critical process over time. A model learns the normal daily and weekly rhythms of a process's activity (e.g., explorer.exe's network traffic). It can then flag a sudden, unexpected spike in activity that deviates from the predicted pattern, which could indicate that malicious code has been injected and is now active."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Critical system processes on all Windows hosts, network traffic logs from perimeter firewalls and DNS servers."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each critical_process | MODEL metrics (net_volume, child_process_count) over time | ALERT on significant deviations from predicted values"