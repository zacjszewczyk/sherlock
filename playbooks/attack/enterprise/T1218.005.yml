name: 'T1218.005: Mshta'
id: '9d8c3b7a-6f5e-4d3c-2b1a-0e9f8d7c6b5a'
description: 'This playbook helps to determine if an adversary is using the trusted Microsoft utility mshta.exe for defense evasion. It focuses on detecting anomalous behavior associated with mshta.exe, such as process executions with suspicious command-line arguments (e.g., inline scripts, encoded payloads), network connections to known malicious domains or rare destinations, unusual parent processes (e.g., Microsoft Office applications), and execution of HTA files from non-standard directories (e.g., Temp, Downloads). The goal is to identify mshta.exe being used to proxy execution of malicious code, bypass application control, and evade defenses.'
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
  - 'Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: 'Is an mshta.exe process communicating with known malicious IPs or domains, or executing a known malicious HTA file?'
    context: 'This question aims to detect direct evidence of malicious activity by correlating mshta.exe process creation events with network traffic and threat intelligence. A match against a known malicious IP, domain, or file hash is a high-confidence indicator of compromise.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Zeek files.log'
      - 'All enterprise endpoints and servers; Network gateways and proxies; Threat Intelligence Platforms'
    range: 'last 90 days'
    queries:
      - search: 'SIEM Query: JOIN (ProcessEvents WHERE process_name="mshta.exe") with (NetworkEvents) ON source_ip within 5s. CHECK NetworkEvents.destination_ip against ThreatIntelFeed.ip_ioc. CHECK ProcessEvents.command_line_hta_hash against ThreatIntelFeed.file_hash_ioc.'
  - question: 'Is mshta.exe communicating with unusually rare or newly observed domains?'
    context: 'Adversaries often use newly registered or obscure domains for command and control. By baselining normal domain traffic associated with mshta.exe and alerting on statistical outliers (rare or first-seen domains), this question helps uncover potentially malicious C2 channels that are not yet on threat intelligence feeds.'
    answer_sources:
      - 'Zeek dns.log'
      - 'All enterprise endpoints and servers; Network gateways and proxies; Threat Intelligence Platforms'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: FROM NetworkEvents WHERE process_name="mshta.exe" over 30d, GROUP BY domain. CALCULATE frequency. ALERT if new_event.domain_frequency < 1st_percentile OR is_first_seen.'
  - question: 'Can we predict if a domain contacted by mshta.exe is malicious based on its intrinsic properties?'
    context: 'This question applies machine learning to proactively identify malicious domains. Instead of relying on known bad indicators, a model analyzes features like domain name length, character randomness (entropy), and age to calculate a maliciousness score. This helps detect algorithmically generated domains (DGAs) and other suspicious domains.'
    answer_sources:
      - 'Zeek dns.log'
      - 'All enterprise endpoints and servers; Network gateways and proxies; Threat Intelligence Platforms'
    range: 'last 90 days'
    queries:
      - search: 'ML Model Query: FOR each domain in NetworkEvents where process_name="mshta.exe", EXTRACT features (length, entropy, TLD, age). INPUT to DomainScoringModel. ALERT if score > 0.85.'
  - question: 'Is mshta.exe being launched with command-line arguments that indicate inline script execution or remote file fetching?'
    context: 'Legitimate use of mshta.exe typically involves opening a local .hta file. Adversaries abuse it by passing scripts directly on the command line using protocol handlers (`javascript:`, `vbscript:`) or encoded payloads (`data:text/html;base64,`). Detecting these patterns is a high-fidelity indicator of malicious execution.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers with command-line logging enabled'
    range: 'last 90 days'
    queries:
      - search: 'Log Search Query: FROM ProcessEvents WHERE process_name="mshta.exe". REGEX command_line for "javascript:", "vbscript:", "GetObject", "http://", "https://", or "data:text/html;base64,". ALERT on match.'
  - question: 'Does an mshta.exe command line exhibit unusually high complexity or length compared to normal activity?'
    context: 'Long and complex command lines often indicate obfuscation or embedded scripts. By establishing a baseline of normal command line length and entropy, we can use statistical anomaly detection (e.g., 3-sigma rule) to flag suspicious executions that deviate significantly from the norm.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers with command-line logging enabled'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: CALCULATE mean and std_dev of command_line_length and command_line_entropy for "mshta.exe" over 30d. ALERT if new_event.length > mean + 3*std_dev OR new_event.entropy > mean + 3*std_dev.'
  - question: 'Can a machine learning model be trained to distinguish between benign and malicious mshta.exe command lines?'
    context: 'This question proposes a supervised machine learning approach. By training a classifier on a labeled dataset of known good and bad command lines, the model can learn the subtle patterns and feature combinations (like keyword counts and n-grams) that differentiate them, enabling automated classification of new, unseen command lines.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers with command-line logging enabled'
    range: 'last 90 days'
    queries:
      - search: 'ML Model Query: FOR each new "mshta.exe" event, EXTRACT features (length, entropy, keywords). INPUT to LogisticRegressionClassifier. ALERT if classification is "malicious".'
  - question: 'Was mshta.exe spawned by an unusual parent process, such as a Microsoft Office application, email client, or web browser?'
    context: 'Mshta.exe is not typically launched directly by Office applications or browsers. This execution chain is a common pattern in phishing attacks. Monitoring for this specific parent-child relationship is a highly effective detection strategy.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers, particularly user workstations'
    range: 'last 90 days'
    queries:
      - search: 'SIEM Rule: FROM ProcessEvents WHERE process_name="mshta.exe" AND parent_process_name IN ("winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe", "wscript.exe", "cscript.exe", "chrome.exe", "firefox.exe", "msedge.exe"). ALERT on match.'
  - question: 'Is mshta.exe being launched by a statistically rare parent process in our environment?'
    context: 'Beyond a static list of suspicious parents, this question seeks to identify anomalous parent-child relationships based on their historical frequency. By baselining all processes that spawn mshta.exe, we can automatically flag any rare or first-seen parent, which could indicate a novel attack vector.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers, particularly user workstations'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: BUILD frequency table of parent_process_name for child "mshta.exe" over 30d. ALERT if new_event.parent_process_name_frequency < 1% OR is_first_seen.'
  - question: 'Does a new mshta.exe execution event fall outside established clusters of normal activity?'
    context: 'This question uses unsupervised machine learning to define "normal" mshta.exe execution behavior based on multiple features like parent process, user, and host. Any new execution that does not fit into these established clusters is treated as an outlier, indicating a potential anomaly that warrants investigation.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers, particularly user workstations'
    range: 'last 90 days'
    queries:
      - search: 'ML Model Query: CLUSTER "mshta.exe" events using DBSCAN on features (parent_process, user, host). ALERT if new_event is classified as noise/outlier.'
  - question: 'Does the mshta.exe command line contain long encoded strings, such as Base64 or hexadecimal?'
    context: 'Adversaries often encode payloads directly in the command line to bypass simple signature-based detections. Searching for long strings that match encoding patterns (Base64, hex) is a specific and effective way to find these embedded payloads, which are highly indicative of malicious intent.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers with command-line logging'
    range: 'last 90 days'
    queries:
      - search: 'Log Search Query: FROM ProcessEvents WHERE process_name="mshta.exe". REGEX command_line for "[A-Za-z0-9+/=]{50,}" OR "[0-9a-fA-F]{50,}". ALERT on match.'
  - question: 'Is the character entropy of an mshta.exe command line in the top percentile of historical values?'
    context: 'High entropy in a command line suggests randomness, which is characteristic of encrypted or compressed data, and thus a strong indicator of an obfuscated payload. Comparing a command line''s entropy to a dynamic percentile of recent activity provides a robust anomaly detection method.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers with command-line logging'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: CALCULATE 95th percentile of command_line_entropy for "mshta.exe" over 30d rolling window. ALERT if new_event.entropy > 95th_percentile.'
  - question: 'Can an autoencoder neural network, trained on benign command lines, identify a new mshta.exe command line as anomalous?'
    context: 'An autoencoder learns to reconstruct "normal" data. When presented with anomalous data (like a malicious command line), it struggles to reconstruct it accurately, resulting in a high "reconstruction error." This advanced technique can detect novel and sophisticated variations of malicious command lines.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers with command-line logging'
    range: 'last 90 days'
    queries:
      - search: 'ML Model Query: TRAIN autoencoder on benign "mshta.exe" command lines. FOR new_event, CALCULATE reconstruction_error. ALERT if error > threshold.'
  - question: 'Is network traffic originating from an mshta.exe process using an incorrect, missing, or non-standard User-Agent string?'
    context: 'Legitimate mshta.exe processes identify themselves with a specific User-Agent string. Malicious scripts often fail to set this correctly, resulting in a blank, null, or different User-Agent. Detecting this discrepancy is a strong indicator of malicious network activity.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Network egress points, web proxies, and all enterprise endpoints'
    range: 'last 90 days'
    queries:
      - search: 'SIEM Query: JOIN (ProcessEvents WHERE process_name="mshta.exe") with (HTTPEvents) on host. ALERT if HTTPEvents.user_agent is not "Microsoft HTML Application host".'
  - question: 'Is mshta.exe communicating over uncommon network ports or using rare TLS fingerprints (JA3/JA3S)?'
    context: 'Adversaries may use non-standard ports for C2 communication. Similarly, malicious tools often have unique or rare TLS fingerprints (JA3/JA3S). Alerting on rare ports or fingerprints associated with mshta.exe can uncover hidden C2 channels.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Network egress points, web proxies, and all enterprise endpoints'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: BASELINE destination_ports and ja3_hashes for "mshta.exe" traffic. ALERT if new_event.port is rare OR new_event.ja3_hash is rare/new.'
  - question: 'Does network traffic from an mshta.exe process show signs of periodic, "heartbeat" beaconing to a single destination?'
    context: 'Malware often communicates with its C2 server at regular intervals (a "heartbeat"). By analyzing the timing between connections from a host to a specific destination, we can use time-series analysis to detect this machine-like periodicity, which is a hallmark of automated C2 activity.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Network egress points, web proxies, and all enterprise endpoints'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: FOR a given src_ip/dst_ip pair from "mshta.exe", analyze time deltas between connections. APPLY FFT to detect periodicity. ALERT on strong periodic signal.'
  - question: 'Is mshta.exe executing an HTA file from a suspicious location like a temp folder, download directory, or public user folder?'
    context: 'Adversaries often drop payloads into user-writable and often-unmonitored locations such as temp directories or download folders. Alerting on HTA execution from these specific, high-risk paths is a simple and effective detection tactic.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers; File servers hosting user profiles or public shares'
    range: 'last 90 days'
    queries:
      - search: 'SIEM Rule: FROM ProcessEvents WHERE process_name="mshta.exe". REGEX command_line for hta_path in ("\\Temp\\", "\\Downloads\\", "\\AppData\\", "\\Users\\Public\\"). ALERT on match.'
  - question: 'Is mshta.exe executing an HTA file from a directory path that is statistically rare or has never been seen before in the environment?'
    context: 'This question moves beyond a static list of "bad" directories to a data-driven approach. By baselining all directory paths from which HTA files are normally executed, we can automatically identify and alert on executions from new or infrequent locations.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers; File servers hosting user profiles or public shares'
    range: 'last 90 days'
    queries:
      - search: 'Analytics Query: BUILD frequency table of hta_execution_paths for "mshta.exe" over 30d. ALERT if new_event.path_frequency < 0.5% OR is_first_seen.'
  - question: 'Can a one-class SVM model, trained on normal HTA file paths, identify an execution path as anomalous?'
    context: 'A One-Class SVM is an unsupervised learning algorithm ideal for anomaly detection. By training it on features of legitimate HTA execution paths, it learns a boundary of "normal." Any new execution path that falls outside this boundary is flagged as an anomaly, providing a sophisticated way to detect unusual file locations.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All enterprise endpoints and servers; File servers hosting user profiles or public shares'
    range: 'last 90 days'
    queries:
      - search: 'ML Model Query: TRAIN One-Class SVM on features from benign hta_paths. FOR new_event, PREDICT if path is an outlier. ALERT if outlier.'