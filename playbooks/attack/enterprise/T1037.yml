name: T1037: Boot or Logon Initialization Scripts
id: 5a8a1b2c-3d4e-4f5a-6b7c-8d9e0f1a2b3c
description: This playbook focuses on detecting adversaries using boot or logon initialization scripts to achieve persistence and privilege escalation. It provides investigative questions to identify malicious activity by analyzing script-spawned processes for suspicious network connections to C2 servers, command-line obfuscation, unauthorized modifications to script files, anomalous child processes, use of credential dumping tools, service hijacking, and token elevation.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process spawned by a logon/startup script connecting to a known command-and-control (C2) IP address?
    context: A script process (e.g., powershell.exe) launched by a logon process (e.g., userinit.exe) should not normally make outbound connections to suspicious locations. This question checks for this behavior by correlating process events with network logs and comparing destination IPs against C2 threat intelligence feeds. A match strongly indicates a persistence mechanism communicating with an adversary.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - C2 Threat Intelligence Feed
      - Domain Controllers, Enterprise Workstations, Internet Gateway/Egress Points, DNS Resolvers
    range: last 90 days
    queries:
      - "Pseudocode: JOIN process_events ON parent_process IN ('userinit.exe', 'services.exe') WITH network_connections | JOIN ON destination_ip WITH c2_threat_intel_feed | RETURN matches"
  - question: Is a process spawned by a logon script connecting to a rare or anomalous destination (ASN/Country)?
    context: Adversaries often use infrastructure in unusual geographic locations or autonomous systems (ASNs). This question aims to identify these connections by baselining normal network behavior for script-spawned processes. Connections to ASN/country pairs that are statistically rare (e.g., in the bottom 1% of frequency over 30 days) are flagged as potential C2 channels.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - GeoIP/ASN Enrichment Data
      - Domain Controllers, Enterprise Workstations, Internet Gateway/Egress Points, DNS Resolvers
    range: last 90 days
    queries:
      - "Pseudocode: FROM network_connections WHERE source_process IN (logon_script_processes) | ENRICH destination_ip with ASN, Country | CALCULATE frequency of (ASN, Country) pair over 30 days | ALERT if frequency < 1st percentile"
  - question: Does network traffic from a logon script-spawned process exhibit a 'heartbeat' pattern characteristic of C2 beaconing?
    context: C2 implants often communicate with their server on a regular, periodic schedule (beaconing). This question uses time-series analysis to examine the byte counts and connection frequency of network traffic from logon script processes. It seeks to identify statistically significant periodic patterns, like low-volume connections every few minutes or hours, which are strong indicators of a C2 beacon.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Domain Controllers, Enterprise Workstations, Internet Gateway/Egress Points, DNS Resolvers
    range: last 90 days
    queries:
      - "Pseudocode: APPLY ARIMA model to time-series data (byte_count, connection_frequency) for each destination_ip from logon_script_processes | IDENTIFY periodic components | ALERT on statistically significant periodicity"
  - question: Does the command line of a script spawned by a logon/startup process contain keywords or flags related to persistence or encoding?
    context: Adversaries frequently use specific commands to establish persistence (e.g., schtasks, reg add) and employ encoding (e.g., PowerShell's -EncodedCommand) to hide their malicious code. This question uses regular expressions to scan script command lines for these suspicious indicators, providing a direct way to detect common persistence techniques.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - "Pseudocode: FROM process_events WHERE parent_process IN (logon_script_hosts) | REGEX_SEARCH CommandLine for ('schtasks', 'reg add', 'HKCU\\...\\Run', '-EncodedCommand', '[Convert]::FromBase64String') | ALERT on match"
  - question: Is the command line of a script spawned by a logon/startup process unusually complex or random, suggesting obfuscation?
    context: Encoded or packed payloads often appear as random strings of characters, resulting in high Shannon entropy (a measure of randomness). This question establishes a baseline for normal command line entropy and flags any script execution whose command line is a statistical outlier, suggesting it may be obfuscated to hide malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - "Pseudocode: FOR each process_event from logon_script_host | CALCULATE Shannon_entropy(CommandLine) | COMPARE to baseline | ALERT if entropy > (mean + 3*stdev) or > 4.5"
  - question: Does a machine learning model classify the command line of a script from a logon/startup process as likely malicious?
    context: This question applies a data-driven approach by training a machine learning classifier on a large dataset of known benign and malicious command lines. The model learns the subtle patterns that distinguish them and can score new, unseen command lines, alerting analysts to those that have a high probability of being malicious.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - "Pseudocode: VECTORIZE CommandLine using TF-IDF | INPUT vector into trained logistic_regression_model | GET probability_score | ALERT if score > 0.85"
  - question: Has a known logon/startup script file been modified by an unauthorized user or process?
    context: Logon scripts, especially those in protected locations like SYSVOL, should only be modified by specific administrators or via approved change management processes. This question checks for file modification events on these critical scripts and alerts if the user or process performing the change is not on an approved whitelist.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers (SYSVOL share), File Servers hosting roaming profiles, Enterprise Workstations
    range: last 90 days
    queries:
      - "Pseudocode: FROM file_audit_events WHERE object_path IN (logon_script_paths) AND access_type = 'WriteData' | CHECK if user OR process_name NOT IN whitelists | ALERT on mismatch"
  - question: Was a logon script modified at an unusual time or by an unusual user account?
    context: Legitimate changes to logon scripts typically follow predictable patterns. This question aims to detect anomalous modifications by baselining the 'who' and 'when' of normal changes. It flags modifications that are temporal outliers (e.g., late at night) or user outliers (e.g., an account that has never modified the script before).
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers (SYSVOL share), File Servers hosting roaming profiles, Enterprise Workstations
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE modification_events (user, time_of_day, day_of_week) for logon_scripts | FOR new_modification_event | CALCULATE z-score for time and user | ALERT if z-score > 3"
  - question: Does a machine learning model classify the modification of a logon script as an outlier compared to normal change activity?
    context: This question employs anomaly detection models (like one-class SVM) to learn the multi-dimensional profile of legitimate logon script modifications. Any new modification event that falls outside this learned boundary of 'normal' is flagged as an anomaly, catching sophisticated attackers who might deviate in subtle ways.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers (SYSVOL share), File Servers hosting roaming profiles, Enterprise Workstations
    range: last 90 days
    queries:
      - "Pseudocode: TRAIN one-class_SVM/isolation_forest on features of legitimate script_modification_events | APPLY model to new events | ALERT if event is classified as outlier"
  - question: Did a logon script spawn an unsigned process from a non-standard or user-writable directory?
    context: Legitimate processes launched at logon are typically signed and reside in protected system directories. Adversaries often drop payloads in user-writable locations like %APPDATA%. This question looks for processes spawned by logon scripts that are both unsigned and located in suspicious directories, a combination that strongly indicates a malicious payload.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - "Pseudocode: FROM process_events WHERE parent is logon_script_host | CHECK if NewProcessName path in suspicious_dirs AND signature is 'unsigned' | ALERT on match"
  - question: Did a logon script initiate a rare or never-before-seen parent-child process relationship?
    context: The relationships between parent processes and the child processes they spawn become predictable over time. This question leverages this by baselining all normal parent-child relationships. It then alerts on any relationship that is either entirely new or statistically very rare, as this often indicates an adversary has introduced a new process into the logon sequence.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE frequency of all (parent_process, child_process) relationships | FOR new process_event | IF (parent, child) relationship is new OR frequency < 1st percentile | ALERT"
  - question: Does a machine learning model (autoencoder) flag a child process of a logon script as anomalous?
    context: This question uses an autoencoder to learn a compressed representation of 'normal' for processes spawned by logon scripts. When a new process event occurs, the model attempts to reconstruct it. If the reconstruction error is high, it means the process is different from what the model has learned as normal and is therefore flagged as a potential threat.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - "Pseudocode: TRAIN autoencoder on feature_vectors of normal child_processes | FOR new process_event | CALCULATE reconstruction_error | ALERT if error is high"
  - question: Does the command line of a logon script-spawned process contain keywords for known privilege escalation or credential dumping tools?
    context: A common privilege escalation vector is to use a logon script to execute well-known hacking tools. This question uses regular expressions to scan the command lines of processes spawned by logon scripts for the names of these tools (e.g., PsExec.exe, mimikatz) or associated commands, providing a direct method for detecting known-bad activities.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Servers with local administrator accounts
    range: last 90 days
    queries:
      - "Pseudocode: FROM process_events WHERE parent is logon_script_host | REGEX_SEARCH CommandLine for ('PsExec.exe -s', 'mimikatz', 'net localgroup.../add') | ALERT on match"
  - question: Does the command line of a logon script-spawned process contain a high concentration of terms that are statistically linked to privilege escalation?
    context: Certain command-line terms (e.g., 'lsass', '-s') are strongly associated with privilege escalation. This question uses a TF-IDF model to identify terms that are rare in your environment but common in known malicious commands. It alerts when a command line contains a high score of these risky terms.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Servers with local administrator accounts
    range: last 90 days
    queries:
      - "Pseudocode: BUILD TF-IDF model on command_lines | IDENTIFY high-risk terms (rare in-house, common in threat intel) | SCORE new command_lines | ALERT on high score"
  - question: Does a machine learning classifier identify a command line from a logon script as a likely privilege escalation attempt?
    context: This question leverages a powerful supervised machine learning model (like XGBoost) trained on labeled examples of benign and malicious commands. The model can provide a probability score for whether a new, unseen command is an attempt at privilege escalation, catching novel or obfuscated variations.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Enterprise Workstations, Servers with local administrator accounts
    range: last 90 days
    queries:
      - "Pseudocode: VECTORIZE CommandLine using n-grams, etc. | INPUT vector into trained XGBoost_model | GET probability_score | ALERT on high score"
  - question: Has a script recently modified a service's binary path in the registry, followed immediately by that service starting?
    context: A classic privilege escalation technique is to hijack a service by changing its ImagePath registry key to point to a malicious executable. This question uses stateful correlation to detect this specific, high-confidence sequence of events: a script modifying a service's path, followed by that service starting within a short time window.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers, Application Servers, Enterprise Workstations
    range: last 90 days
    queries:
      - "Pseudocode: CORRELATE events on a single host within 2 mins: 1. Script process creation (4688) -> 2. Registry modify 'ImagePath' (4657) -> 3. Service start for same service (7036) | ALERT on sequence match"
  - question: Was a service's configuration in the registry modified by an unexpected or highly improbable process, such as a script?
    context: Legitimate service configuration changes are rare and typically performed by a small set of trusted system processes. This question establishes a baseline of which processes normally modify each service's registry keys. It then alerts when a process with a very low historical probability of doing so (like a script interpreter) makes a change.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Domain Controllers, Application Servers, Enterprise Workstations
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE probability of (process_name, modified_service_key) | FOR new registry_modification_event | IF probability < 0.01% | ALERT"
  - question: Did a sequence of system events involving a script and a service modification deviate from normal, learned behavior patterns?
    context: This question models the flow of system events as a series of state transitions. A Hidden Markov Model (HMM) is trained on logs of normal system operation to learn the probabilities of these transitions. An event sequence that the model deems to have a very low likelihood of occurring is flagged as anomalous.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7036
      - Domain Controllers, Application Servers, Enterprise Workstations
    range: last 90 days
    queries:
      - "Pseudocode: TRAIN HMM on normal system event sequences | FEED new event sequences into model | CALCULATE likelihood | ALERT if likelihood is low"
  - question: Has a process been created with an elevated token under a non-privileged user's logon session?
    context: An elevated token (Type1 or Type2) in a standard user's session indicates that a privilege escalation, such as a UAC bypass, has occurred. This question correlates logon events with process creation events to find instances where a process in a standard user's session is running with elevated privileges.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Enterprise Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - "Pseudocode: JOIN logon_events (4624) with process_events (4688) on LogonId | WHERE user NOT IN privileged_users AND TokenElevationType IN ('Type1', 'Type2') | ALERT on match"
  - question: Has a user launched a process with an integrity level that is statistically unusual for their account?
    context: User accounts typically operate at a consistent process integrity level (e.g., 'Medium' for standard users). A sudden deviation, such as a standard user launching a 'High' or 'System' integrity process, is a statistical anomaly and a red flag for privilege escalation. This question profiles the normal integrity level for each user and alerts on any outlier process launches.
    answer_sources:
      - Windows Event ID 4688
      - Enterprise Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - "Pseudocode: PROFILE typical IntegrityLevel per user | FOR new process_event | IF IntegrityLevel is statistical outlier for that user (e.g., 'Medium' user launches 'High') | ALERT"
  - question: Does a machine learning clustering model identify a process creation event as an outlier based on its user, logon type, and integrity level?
    context: This question uses an unsupervised clustering algorithm to group together 'normal' process creation events. Events that do not fit into any dense cluster are classified as outliers. An outlier could represent a rare and suspicious combination, such as a standard user from an interactive logon spawning a high-integrity process.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Enterprise Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - "Pseudocode: CLUSTER process_events using DBSCAN on features (User, LogonType, IntegrityLevel) | ALERT on events classified as noise/outliers"
  - question: Did a script interpreter request read access to the LSASS process memory?
    context: The LSASS process stores credentials in memory. Gaining read access to lsass.exe is a primary goal for adversaries seeking to dump credentials. This question creates a high-priority alert for the specific event of a script interpreter requesting PROCESS_VM_READ access to lsass.exe, which is almost always malicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Domain Controllers, Credential Stores (LSASS process memory), Security Databases (SAM file)
    range: last 90 days
    queries:
      - "Pseudocode: FROM handle_request_events (4656) WHERE ObjectName = 'lsass.exe' AND AccessMask contains 'PROCESS_VM_READ' AND ProcessName is script_interpreter | ALERT"
  - question: Has the LSASS process been accessed by an unauthorized or statistically rare process?
    context: Access to LSASS process memory is highly restricted and should only be performed by a small, known set of legitimate system and security processes. This question establishes a baseline of these authorized processes and then alerts on any access to LSASS from a process not on this baseline.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers, Credential Stores (LSASS process memory), Security Databases (SAM file)
    range: last 90 days
    queries:
      - "Pseudocode: BASELINE processes that access lsass.exe | FOR new lsass_access_event | IF ProcessName NOT IN baseline | ALERT"
  - question: Does a graph-based machine learning model identify the interaction between a script and the LSASS process as anomalous?
    context: This question represents system activities as a graph, where processes are nodes and interactions are edges. A Graph Neural Network (GNN) is trained to understand the structure of 'normal' interactions. It can then identify anomalous subgraphs, such as a script process requesting a handle to the LSASS node.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Domain Controllers, Credential Stores (LSASS process memory), Security Databases (SAM file)
    range: last 90 days
    queries:
      - "Pseudocode: MODEL system activity as a graph | TRAIN GNN on normal graph structures | FOR new activity (e.g., script accessing lsass) | IDENTIFY anomalous subgraphs based on learned embeddings | ALERT"