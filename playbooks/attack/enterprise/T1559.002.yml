name: T1559.002: Dynamic Data Exchange
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is executing commands or payloads using Dynamic Data Exchange (DDE). It provides questions to detect DDE syntax within files transferred over the network, identify instances where Microsoft Office applications spawn suspicious child processes like command-line interpreters, correlate event sequences indicating a full attack chain (file creation, process execution, network beacon), and spot anomalous network connections originating directly from Office processes.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are files being transferred over the network that contain DDE syntax?
    context: This question aims to detect potentially malicious files containing Dynamic Data Exchange (DDE) syntax at the network boundary or on file shares. Adversaries embed DDE fields in documents (e.g., DOCX, XLSX) to execute code when the file is opened. This query uses file inspection tools or YARA rules to scan file content for specific DDE keywords like 'DDEAUTO' or command execution formulas, generating an alert with contextual information for triage.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek smb_files.log
      - Zeek smtp.log
      - Network egress/ingress points (e.g., internet gateway, email gateway), internal file servers, and cloud storage repositories (e.g., SharePoint, OneDrive) accessible by end-users.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each file in network_traffic_logs
            IF file_content matches regex ('DDEAUTO' or ' DDE ' or '=cmd|' or '=powershell|' or '=mshta|')
            THEN ALERT (file_hash, src_ip, dst_ip, protocol, user)
  - question: Are there CSV files with unusually high entropy in their cells, possibly indicating obfuscated DDE payloads?
    context: This question focuses on identifying obfuscated DDE payloads within CSV files. Adversaries may use complex or encoded strings to evade simple keyword-based detection. By calculating the Shannon entropy of each cell's content and comparing it against a pre-established baseline of normal entropy, this approach can flag cells containing statistically unusual, high-entropy data, which often corresponds to obfuscated code or commands.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek smb_files.log
      - Zeek smtp.log
      - Network egress/ingress points (e.g., internet gateway, email gateway), internal file servers, and cloud storage repositories (e.g., SharePoint, OneDrive) accessible by end-users.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = calculate_entropy_baseline(legitimate_csvs, last 30 days)
          FOR each new_csv_file
            FOR each cell in new_csv_file
              IF shannon_entropy(cell) > 99.5th_percentile(BASELINE)
              THEN ALERT (file_name, cell_content)
  - question: Can a machine learning model identify malicious Office documents likely leveraging DDE based on their features?
    context: This question involves applying a supervised machine learning model to proactively identify malicious documents that might use DDE. The model is trained on a labeled dataset and learns to distinguish between benign and malicious files by analyzing features like keyword frequency, metadata, structural properties (e.g., external links), and n-gram patterns. New documents are scored, and those classified as malicious with high confidence are flagged for investigation.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek smb_files.log
      - Zeek smtp.log
      - Network egress/ingress points (e.g., internet gateway, email gateway), internal file servers, and cloud storage repositories (e.g., SharePoint, OneDrive) accessible by end-users.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_classifier(labeled_document_dataset)
          FOR each new_office_document
            FEATURES = extract_features(document)
            SCORE = MODEL.predict(FEATURES)
            IF SCORE > 0.9
            THEN ALERT (document_name, score)
  - question: Are Microsoft Office applications spawning command-line interpreters or scripting hosts?
    context: This is a fundamental detection for DDE and other macro-based execution techniques. The question seeks to identify process creation events where a standard Office application (Word, Excel, etc.) is the parent of a process commonly used for command execution (cmd.exe, powershell.exe, etc.). Such behavior is highly suspicious and often indicative of a user opening a malicious document that triggers a payload. The full command line is critical for understanding the attacker's intent.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, terminal servers (e.g., Citrix), Microsoft Office 365 servers, and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE parent_process IN ('WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE', 'OUTLOOK.EXE')
          AND child_process IN ('cmd.exe', 'powershell.exe', 'mshta.exe', 'rundll32.exe', 'wscript.exe', 'cscript.exe')
          THEN ALERT (parent_process, child_process, command_line)
  - question: Are there statistically rare parent-child process relationships originating from Office applications?
    context: This question uses a statistical approach to find unusual process creation events that might be missed by static rules. By baselining all parent-child process pairs across the enterprise, it becomes possible to identify combinations that are exceptionally rare. An Office application spawning an uncommon utility or process, even one not on a standard blocklist, could be a sign of a novel DDE execution technique.
    answer_sources:
      - Sysmon Event ID 1
      - User workstations, terminal servers (e.g., Citrix), Microsoft Office 365 servers, and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROB_TABLE = build_process_pair_probability_table(all_process_events, last 30 days)
          SEARCH new_process_creation_events
          WHERE parent_process is Office_app
          AND probability(parent_process, child_process) < 5th_percentile(PROB_TABLE)
          THEN ALERT (parent_process, child_process, probability)
  - question: Can an anomaly detection model identify suspicious process creation events from Office applications based on multiple features?
    context: This question leverages an unsupervised machine learning model to detect anomalous process creations from Office applications. Unlike a simple rule, this model considers a combination of features, including the parent and child process names, user context, and characteristics of the command line (length, entropy). This allows it to flag sophisticated attacks that might use legitimate-looking process names but have abnormal command-line arguments, providing a more robust detection capability.
    answer_sources:
      - Sysmon Event ID 1
      - User workstations, terminal servers (e.g., Citrix), Microsoft Office 365 servers, and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_isolation_forest(legitimate_office_process_events)
          FOR each new_office_process_event
            SCORE = MODEL.predict(event_features)
            IF SCORE indicates anomaly
            THEN ALERT (event_details, score)
  - question: Is there a sequence of events on a host involving a new Office document, a suspicious child process, and an external network connection?
    context: This question aims to identify a full attack chain associated with DDE execution. By correlating three distinct events in a short time window—a document being written to disk, an Office app spawning a shell, and that shell connecting to the internet—we can build a high-fidelity alert. This sequence strongly indicates a user receiving a malicious document which then executes a payload to establish a command and control channel.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations, DMZ web servers, email servers, and the network perimeter.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE events on same host within 60s
          1. file_create with office_extension
          2. process_create where parent is office_app and child is shell
          3. network_connect from child_process to external_ip
          IF sequence_matches
          THEN ALERT (full_event_chain)
  - question: Can the risk of a correlated DDE alert be automatically scored based on network connection enrichment?
    context: This question focuses on prioritizing alerts generated by the sequence detection rule. Not all external connections are malicious. By enriching the destination IP with threat intelligence, geolocation, and contextual data (e.g., business hours, departmental norms), we can calculate a risk score. This allows analysts to immediately focus on the highest-risk events, such as a connection to a known malicious ASN from a user in finance outside of business hours.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations, DMZ web servers, email servers, and the network perimeter.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON alert from correlation_rule
          ENRICH destination_ip with threat_intel, geo_ip
          CALCULATE risk_score based on (country, ASN, time_of_day)
          IF risk_score > 20
          THEN ESCALATE_ALERT (alert_details, risk_score)
  - question: Can a sequence analysis model detect anomalous chains of user and system activity that indicate DDE execution?
    context: This question proposes a sophisticated, probabilistic approach to detecting malicious activity sequences. By training a model like an HMM on normal user behavior (sequences of file, process, and network events), the system learns the expected transition probabilities between different states. An attack sequence, such as file-open -> shell-spawn -> C2-connection, will have a very low probability under this model and will be flagged as a significant deviation from normal activity.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations, DMZ web servers, email servers, and the network perimeter.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_HMM(benign_event_sequences)
          FOR each new_event_sequence on a host
            PROBABILITY = MODEL.score(sequence)
            IF PROBABILITY < 0.01_percentile_threshold
            THEN ALERT (sequence, probability)
  - question: Are Office applications making network connections on non-standard web ports?
    context: This question aims to detect suspicious network activity directly from Office applications. Legitimate Office processes typically connect over standard web ports (80/HTTP, 443/HTTPS) for updates or cloud services. A connection to an unusual port (e.g., 4444, 8080) is highly anomalous and could indicate a DDE payload establishing a C2 channel directly from the compromised Office process without spawning a separate child process.
    answer_sources:
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Zeek conn.log
      - All endpoints and servers running Microsoft Office, and the network gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH network_connection_logs
          WHERE process_name IN ('WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE', 'OUTLOOK.EXE')
          AND destination_port NOT IN (80, 443, 53)
          AND destination_ip is not in corporate_allowlist
          THEN ALERT (process_name, destination_ip, destination_port)
  - question: Are Office applications exhibiting network behavior that deviates from their established baseline?
    context: This question uses a behavioral baselining approach to detect network anomalies. For each Office application, a profile of normal network activity is created, including typical destination ports, data volumes, and subnets. This allows the system to detect subtle deviations, such as an Excel process suddenly sending an unusually large amount of data or connecting to a port it has never used before. Such deviations are strong indicators of compromise.
    answer_sources:
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Zeek conn.log
      - All endpoints and servers running Microsoft Office, and the network gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = build_network_profile_for_office_apps(last 30 days)
          FOR each new_network_connection from office_app
            IF connection_port NOT IN BASELINE.ports
            OR connection_data_volume > 4 * BASELINE.std_dev
            THEN ALERT (connection_details, deviation_reason)
  - question: Can clustering algorithms identify outlier network connections from Office applications that represent new or unknown threats?
    context: This question applies unsupervised machine learning to discover novel network attack patterns. A clustering algorithm like DBSCAN groups similar network connections into clusters representing "normal" behavior based on features like process, user, destination, and port. Any connection that doesn't fit into a cluster is labeled as "noise" or an outlier. These outliers are prime candidates for investigation, as they represent connection patterns that have never been seen before and do not conform to any established norm.
    answer_sources:
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Zeek conn.log
      - All endpoints and servers running Microsoft Office, and the network gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTERS = DBSCAN(office_network_connections_features)
          FOR each new_network_connection from office_app
            IF connection is classified as NOISE by DBSCAN
            THEN ALERT (connection_details, "Outlier connection detected")