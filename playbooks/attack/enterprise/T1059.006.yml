name: T1059.006: Python
id: f5b5f5e0-6644-4b5a-9a0a-1a2b3c4d5e6f
description: This playbook helps analysts investigate whether an adversary is leveraging Python for unauthorized code execution, as described in MITRE ATT&CK technique T1059.006. It provides a series of investigative questions to detect malicious Python usage through various means, including correlation with threat intelligence, analysis of command-line arguments for obfuscation and known malicious patterns, identification of anomalous execution context (e.g., unusual parent processes, file paths, or user behavior), detection of suspicious child processes (LOLBins), and analysis of network traffic for signs of C2 beaconing or data exfiltration. The playbook combines signature-based, statistical, and machine-learning-based approaches to provide comprehensive detection capabilities.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a python.exe process either connected to a known malicious destination or executed a script with a known malicious hash?
    context: This question aims to find the most direct evidence of malicious Python activity by correlating its execution with established threat intelligence. A match on a C2 watchlist indicates communication with an adversary's infrastructure, while a malware hash match confirms the execution of a known malicious file.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Internet gateway/proxy servers
      - DNS resolvers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: Search process creation logs for 'python.exe'. For each event, within 1 minute, search network logs from the same host. Check the destination IP/domain against a C2 threat intel list. Separately, extract the script path from the command line, hash the file, and check the hash against a malware database.
  - question: Has a python.exe process initiated a network connection to a statistically rare destination Autonomous System Number (ASN) or Top-Level Domain (TLD) for this environment?
    context: Adversaries often use novel or obscure infrastructure for C2 communications. By baselining normal network traffic destinations for Python processes, we can identify connections to highly infrequent ASNs or TLDs. Such statistical outliers are suspicious and may indicate connections to adversary-controlled servers.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Internet gateway/proxy servers
      - DNS resolvers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: Collect all python.exe network connections over the last 30 days. Group by destination ASN and TLD and count frequencies. Identify the bottom 1% threshold. Search for current python.exe network connections where the destination ASN or TLD falls below this rarity threshold.
  - question: Based on a machine learning model, does a specific python.exe execution exhibit a combination of features (command line, parent process, network behavior, file path) that classify it as likely malicious?
    context: This question uses a predictive model to score the maliciousness of a Python execution. The model learns from historical data to recognize complex patterns across multiple data points that, when combined, strongly indicate malicious intent, even if individual features are not suspicious on their own.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Internet gateway/proxy servers
      - DNS resolvers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: For a given python.exe execution event, extract features like command-line length/entropy, parent process, destination port/ASN, data volume, and script path location. Input features into the pre-trained classification model. Review events with a high maliciousness score.
  - question: Does the command line of a python.exe process contain patterns indicative of reverse shells, base64-encoded data, or known offensive tools?
    context: Adversaries frequently use Python to execute short, obfuscated commands directly on the command line. This question looks for specific, high-confidence malicious patterns like those used to create reverse shells, decode payloads, or run popular offensive security scripts (e.g., from Impacket), which are strong indicators of an active compromise.
    answer_sources:
      - Windows Event ID 4688
      - Critical servers (e.g., Domain Controllers, database servers)
      - User workstations
      - Development environments
    range: last 90 days
    queries:
      - type: pseudocode
        query: Search process creation logs for 'python.exe'. Apply a list of regular expressions to the command-line argument field to detect keywords like 'socket', 'pty.spawn', '-m base64 -d', or names of known offensive tools.
  - question: Is the command line of a python.exe process unusually complex or random, as measured by Shannon entropy, compared to a historical baseline?
    context: Obfuscated or encrypted payloads passed via the command line often have high entropy (a measure of randomness). By establishing a baseline for normal command-line entropy in the environment, we can flag executions with abnormally high scores, which are likely attempts to hide malicious code.
    answer_sources:
      - Windows Event ID 4688
      - Critical servers (e.g., Domain Controllers, database servers)
      - User workstations
      - Development environments
    range: last 90 days
    queries:
      - type: pseudocode
        query: Calculate entropy for all python.exe command lines over the past 90 days to build a baseline distribution. For new python.exe events, calculate command-line entropy and compare it to the 98th percentile of the baseline. Flag outliers.
  - question: Does a python.exe command line represent a structurally novel or unique pattern when compared to all other command lines seen in the environment?
    context: This question uses unsupervised machine learning to find new and unusual command-line structures without relying on predefined rules. By clustering command lines based on their content and structure, we can automatically identify outliers that do not fit any known benign pattern, pointing to potentially new or custom malicious tools.
    answer_sources:
      - Windows Event ID 4688
      - Critical servers (e.g., Domain Controllers, database servers)
      - User workstations
      - Development environments
    range: last 90 days
    queries:
      - type: pseudocode
        query: Convert all historical python.exe command lines into vector embeddings. Apply a clustering algorithm (e.g., HDBSCAN). For new command-line events, generate an embedding and check if it is classified as an outlier by the clustering model.
  - question: Was python.exe executed by an unapproved parent process or from a non-standard directory?
    context: In many environments, Python is expected to be run by specific applications (like IDEs or terminals) and from specific project or installation directories. An execution that violates these expectations, such as being spawned by Microsoft Word or running from a temporary user folder, is highly anomalous and suspicious.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - User profile directories
      - Temporary file directories
    range: last 90 days
    queries:
      - type: pseudocode
        query: Search process creation logs for 'python.exe'. For each event, check if the parent process name is on the parent allowlist AND if the script execution path is in an allowed directory. Alert if either check fails.
  - question: Has python.exe been executed by a user who has never run it before, or has it been run from a statistically rare directory across the enterprise?
    context: This question identifies two types of anomalies, behavioral and environmental. A user running Python for the first time might indicate a compromised account being used for a new purpose. Similarly, an execution from a directory that is rarely used for Python scripts across the entire organization suggests an attempt to hide files in an obscure location.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - User profile directories
      - Temporary file directories
    range: last 90 days
    queries:
      - type: pseudocode
        query: Maintain a 90-day history of users who have run python.exe. Alert on execution by any user not in this history. Separately, calculate the frequency of all python.exe execution directories. Alert if a script is run from a directory in the bottom 0.5% of frequency.
  - question: Has a specific user executed python.exe an anomalously high number of times compared to their own historical usage pattern?
    context: This question seeks to identify unusual bursts of activity for a specific user. While a user may legitimately use Python, a sudden, significant spike in executions can indicate automated malicious activity, such as a script running reconnaissance or exfiltration loops.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - User profile directories
      - Temporary file directories
    range: last 90 days
    queries:
      - type: pseudocode
        query: For a given user, aggregate daily counts of python.exe executions. Apply a time-series anomaly detection model. Flag days where the actual count is a significant outlier compared to the model's forecast.
  - question: Has a python.exe process spawned a known Living-off-the-Land Binary (LOLBin) like wmic.exe or schtasks.exe?
    context: Adversaries often use a trusted process like Python to launch other native system utilities (LOLBins) to perform malicious actions like reconnaissance, privilege escalation, or scheduling tasks. This parent-child relationship is a strong indicator of defense evasion and is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - EDR agents capable of capturing parent-child process relationships
    range: last 90 days
    queries:
      - type: pseudocode
        query: Search process creation logs for events where the parent process is 'python.exe'. Check if the child process name is on a watchlist of LOLBins (e.g., wmic.exe, certutil.exe, schtasks.exe). Alert on any match.
  - question: Has python.exe spawned a child process that is statistically rare for this environment?
    context: By analyzing historical data, we can determine which child processes are commonly and legitimately spawned by Python. When Python spawns a process that it has rarely or never spawned before, it represents a deviation from the established baseline and warrants investigation as potentially malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - EDR agents capable of capturing parent-child process relationships
    range: last 90 days
    queries:
      - type: pseudocode
        query: Analyze historical logs to calculate the probability of each child process being spawned by python.exe. For new process creation events with python.exe as the parent, alert if the conditional probability of the child process is below a rarity threshold (e.g., <1%).
  - question: Does the process tree originating from a python.exe execution have a structure that is anomalous when compared to models of benign process activity?
    context: This question uses advanced graph-based machine learning to analyze the entire structure of a process execution tree, not just individual parent-child relationships. A GNN can learn complex, normal patterns of process interaction and flag entire subgraphs originating from Python that are structurally different, indicating sophisticated or novel attack techniques.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - EDR agents capable of capturing parent-child process relationships
    range: last 90 days
    queries:
      - type: pseudocode
        query: For a new process tree starting with python.exe, represent it as a graph. Input the graph into a pre-trained GNN anomaly detection model. Review process trees that the model flags as structurally anomalous.
  - question: Has a python.exe process initiated a network connection to a recently registered domain?
    context: Adversaries frequently use newly registered domains (NRDs) for their C2 infrastructure to evade reputation-based blocking. A connection from any process to an NRD is suspicious, but one from a script interpreter like Python is particularly so, as it may indicate a C2 channel established by a malicious script.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Sysmon Event ID 3
      - Network egress points
      - DNS resolvers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: Search network connection logs for traffic from 'python.exe'. Enrich destination domains with WHOIS data. Alert on any connection to a domain registered within the last 60 days.
  - question: Is a network connection from python.exe exhibiting signs of C2 beaconing (highly regular intervals) or data exfiltration (unusually large data transfer)?
    context: This question looks for two common C2 traffic patterns. Beaconing involves regular, automated "heartbeat" connections to a C2 server, which results in a very low standard deviation in time between connections. Data exfiltration often involves sending an unusually large amount of data compared to normal application traffic. Detecting either pattern is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Sysmon Event ID 3
      - Network egress points
      - DNS resolvers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: For a specific source-destination pair involving python.exe, analyze time between connections. Alert if the standard deviation is near zero. Separately, baseline outbound data volume for python.exe connections and alert if a new connection exceeds the 99th percentile.
  - question: Does the overall network traffic pattern for python.exe on a given host show a sudden, unexplainable change when analyzed as a time series?
    context: This question uses time-series analysis to find anomalies in the volume or frequency of Python's network activity on a host. By decomposing the traffic into trend, seasonality, and residual components, we can isolate changes that are not part of a normal pattern. A sudden spike in the residual (unexplained) component can signal the start of a malicious C2 or exfiltration activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Sysmon Event ID 3
      - Network egress points
      - DNS resolvers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: Aggregate python.exe network traffic volume on a host into time buckets (e.g., 10 minutes). Apply a time-series decomposition model. Alert if the residual component of the model shows a significant spike.