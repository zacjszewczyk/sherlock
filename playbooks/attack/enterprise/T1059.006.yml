name: T1059.006: Python
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is leveraging Python for unauthorized code execution. It focuses on identifying malicious Python usage by correlating process and network events, analyzing command-line arguments for obfuscation or known malicious patterns, checking for anomalous process context like unusual parent processes or execution paths, monitoring for Python processes spawning suspicious child processes (LOLBins), and detecting network traffic patterns indicative of Command and Control (C2) communication, such as beaconing, data exfiltration, or connections to newly registered domains.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is a python.exe process communicating with a known malicious destination or executing a known malicious script file?
  context: This question seeks to find direct evidence of malicious activity by checking if a Python process is either communicating with a destination on a threat intelligence watchlist (a known C2 server) or if the executed script's hash matches a known malicious file. This involves correlating process creation events with network logs and cross-referencing indicators against threat intelligence databases.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Internet gateway/proxy servers
  - DNS resolvers
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - pseudocode: |-
      SEARCH process_creation_logs WHERE process_name = 'python.exe'
      JOIN network_connection_logs ON host, time_window=1min
      LOOKUP destination_ip IN c2_watchlist
      ALERT IF found
  - pseudocode: |-
      SEARCH process_creation_logs WHERE process_name = 'python.exe'
      EXTRACT script_file from command_line
      HASH script_file
      LOOKUP file_hash IN malware_hash_db
      ALERT IF found
- question: Is a python.exe process making network connections to statistically rare destinations (ASN or TLD)?
  context: This question tries to find anomalous network behavior. Adversaries often use infrastructure in less common Autonomous Systems (ASNs) or Top-Level Domains (TLDs). By establishing a baseline of normal network destinations for Python processes in your environment, you can flag connections to destinations that are statistically rare, uncovering potentially suspicious communications that are not on any specific watchlist.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Internet gateway/proxy servers
  - DNS resolvers
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - pseudocode: |-
      SEARCH network_connections WHERE process_name = 'python.exe' over last 30 days
      CALCULATE frequency of each destination_asn, destination_tld
      DEFINE baseline_threshold as bottom 1%
      SEARCH new network_connections WHERE process_name = 'python.exe'
      ALERT IF destination_asn OR destination_tld is below baseline_threshold
- question: Can a machine learning model classify a python.exe execution as malicious based on its combined features?
  context: This question proposes a holistic detection strategy using machine learning. Instead of relying on a single indicator, it involves training a classification model on multiple features simultaneously (e.g., command-line properties, parent process, network behavior, file path). By learning from labeled historical data, the model can score new Python executions in real-time to predict their likelihood of being malicious, identifying complex attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Internet gateway/proxy servers
  - DNS resolvers
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - pseudocode: |-
      GATHER historical python.exe events with labels (benign/malicious)
      EXTRACT features (cmd_length, cmd_entropy, parent_process, dest_port, dest_asn, data_volume, script_path)
      TRAIN classification_model on features
      APPLY model to new python.exe events
      ALERT IF prediction is 'malicious' with high confidence
- question: Does a python.exe command line contain patterns indicative of reverse shells, encoded commands, or known offensive tools?
  context: This question focuses on detecting common attacker techniques directly within the command line. Adversaries frequently use Python to execute one-liner reverse shells, pass base64-encoded commands to evade detection, or run well-known offensive security tools like Impacket. This query uses regular expressions to specifically search for these tell-tale signatures in process execution logs.
  answer_sources:
  - Windows Event ID 4688
  - Critical servers (e.g., Domain Controllers, database servers)
  - User workstations
  - Development environments
  range: last 90 days
  queries:
  - pseudocode: |-
      SEARCH process_creation_logs WHERE process_name = 'python.exe'
      APPLY regex_patterns (reverse_shell, base64_decode, offensive_tools) to command_line
      ALERT on match
- question: Is the command line of a python.exe process unusually complex or random, suggesting obfuscation?
  context: This question aims to detect obfuscated payloads. Attackers often encode or encrypt their commands to evade signature-based detection, which results in a command-line string with high Shannon entropy (a measure of randomness). By establishing a baseline for the normal entropy of Python command lines in the environment, analysts can flag executions with abnormally high entropy as suspicious and worthy of investigation.
  answer_sources:
  - Windows Event ID 4688
  - Critical servers (e.g., Domain Controllers, database servers)
  - User workstations
  - Development environments
  range: last 90 days
  queries:
  - pseudocode: |-
      SEARCH process_creation_logs WHERE process_name = 'python.exe' over last 30 days
      CALCULATE shannon_entropy for each command_line
      DEFINE baseline_threshold as 98th percentile of entropy scores
      SEARCH new process_creation_logs WHERE process_name = 'python.exe'
      CALCULATE shannon_entropy of command_line
      ALERT IF entropy > baseline_threshold
- question: Is a python.exe command line structurally different from all previously observed command lines?
  context: This question uses unsupervised machine learning to find novel attack patterns. By converting command lines into numerical representations (embeddings) and clustering them, the system can identify "normal" groups of commands. Any new command that doesn't fit into an existing cluster is flagged as an outlier or noise. This is a powerful method for detecting zero-day or previously unseen attack techniques that don't match any known signatures.
  answer_sources:
  - Windows Event ID 4688
  - Critical servers (e.g., Domain Controllers, database servers)
  - User workstations
  - Development environments
  range: last 90 days
  queries:
  - pseudocode: |-
      GATHER historical python.exe command lines
      GENERATE embeddings (e.g., TF-IDF) for each command line
      APPLY clustering_algorithm (e.g., HDBSCAN) to group embeddings
      FOR new python.exe command lines:
        GENERATE embedding
        CLASSIFY using clustering model
        ALERT IF classified as outlier/noise
- question: Is python.exe being launched by an unexpected parent process or from a non-standard directory?
  context: This question focuses on contextual anomalies. Legitimate Python usage typically originates from specific parent processes (like shells or IDEs) and standard installation directories. An adversary might drop a script in a temporary directory (e.g., C:\Perflogs) or have it launched by a compromised application (e.g., WINWORD.EXE). Alerting on violations of pre-defined allowlists for parent processes and execution paths is an effective way to detect this.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers
  - User profile directories
  - Temporary file directories
  range: last 90 days
  queries:
  - pseudocode: |-
      DEFINE allowlist_parents = ['cmd.exe', 'powershell.exe', 'explorer.exe', ...]
      DEFINE allowlist_paths = ['C:\Python*', 'C:\Program Files\*', ...]
      SEARCH process_creation_logs WHERE process_name = 'python.exe'
      ALERT IF parent_process NOT IN allowlist_parents OR execution_path NOT IN allowlist_paths
- question: Is a user running python.exe for the first time, or is it being run from a statistically rare directory?
  context: This question looks for behavioral and environmental anomalies. A user who has never run Python before suddenly executing it is suspicious (first-use anomaly). Similarly, a Python script running from a directory that is rarely used for this purpose across the entire organization is also a red flag. This involves baselining user behavior and path prevalence to spot deviations from the norm.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers
  - User profile directories
  - Temporary file directories
  range: last 90 days
  queries:
  - pseudocode: |-
      SEARCH historical process_logs for python.exe executions by user over last 90 days
      ALERT IF a user with no prior history executes python.exe
  - pseudocode: |-
      CALCULATE frequency of python.exe execution directories across enterprise
      DEFINE threshold = 0.5%
      ALERT IF python.exe is executed from a directory with frequency < threshold
- question: Is a user suddenly executing python.exe far more frequently than their historical pattern suggests?
  context: This question aims to detect an abnormal burst of activity for a specific user. While a user might be a legitimate Python developer, a sudden, dramatic increase in executions could signal that their account is compromised and being used for malicious scripting. By modeling each user's normal execution frequency over time (e.g., daily counts), we can statistically detect days where their activity significantly exceeds the predicted norm.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers
  - User profile directories
  - Temporary file directories
  range: last 90 days
  queries:
  - pseudocode: |-
      FOR each user:
        GATHER daily counts of python.exe executions as a time series
        TRAIN forecasting_model (e.g., Prophet) on the time series
        FORECAST expected execution count for today with confidence_interval
        ALERT IF actual_count > upper_bound of confidence_interval
- question: Is a python.exe process spawning a known Living-off-the-Land Binary (LOLBin)?
  context: This question detects a common pattern where an initial Python payload is used to launch other native OS tools for subsequent actions like discovery, persistence, or execution. A Python process spawning LOLBins like 'schtasks.exe' (for persistence), 'wmic.exe' (for reconnaissance), or 'certutil.exe' (for downloading files) is a strong indicator of malicious intent. This query explicitly looks for this suspicious parent-child relationship.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers
  - especially those with EDR agents capable of capturing parent-child process relationships
  range: last 90 days
  queries:
  - pseudocode: |-
      DEFINE lolbin_list = ['schtasks.exe', 'wmic.exe', 'certutil.exe', 'powershell.exe', 'net.exe']
      SEARCH process_creation_logs
      FILTER FOR events where parent_process = 'python.exe' AND process_name IN lolbin_list
      ALERT on match
- question: Is python.exe spawning a child process that is statistically rare for your environment?
  context: This question provides a dynamic approach to detecting suspicious child processes. Instead of relying on a static list of LOLBins, it learns what child processes are "normal" for python.exe in a specific environment by calculating conditional probabilities. It then flags any parent-child relationship that is highly unusual (has a very low probability of occurring), which can help detect the use of novel or unexpected tools spawned by a Python script.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers
  - especially those with EDR agents capable of capturing parent-child process relationships
  range: last 90 days
  queries:
  - pseudocode: |-
      GATHER historical process_creation_logs where parent_process = 'python.exe'
      CALCULATE probability P(Child | Parent='python.exe') for each child_process
      DEFINE threshold = 0.01
      FOR new process_creation events where parent_process = 'python.exe':
        ALERT IF P(new_child | 'python.exe') < threshold
- question: Does the entire process tree originating from python.exe have a structure that is anomalous compared to normal activity?
  context: This advanced technique looks beyond simple parent-child pairs and considers the entire chain of execution (the process tree) that starts with python.exe. By using a Graph Neural Network (GNN) trained on benign examples, the system can learn what "normal" process tree structures look like. It can then flag entire execution chains that have an unusual structure, even if each individual parent-child link is not suspicious on its own.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers
  - especially those with EDR agents capable of capturing parent-child process relationships
  range: last 90 days
  queries:
  - pseudocode: |-
      GATHER benign process trees as graph data
      TRAIN GNN model to learn normal graph structures
      FOR new process trees originating from python.exe:
        APPLY GNN model to score the tree structure
        ALERT if score indicates an anomaly
- question: Is a python.exe process communicating with a newly registered domain?
  context: This question targets a common C2 tactic where adversaries use newly registered domains (NRDs) for their infrastructure to evade reputation-based blocklists. By correlating network connections from Python processes with DNS query data enriched with domain registration dates (from WHOIS), analysts can flag communication to these suspicious, ephemeral domains (e.g., registered within the last 60 days).
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Network egress points
  - DNS resolvers
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - pseudocode: |-
      SEARCH network_connections WHERE process_name = 'python.exe'
      ENRICH destination_domain with WHOIS registration_date
      DEFINE threshold_date = today - 60 days
      ALERT IF registration_date > threshold_date
- question: Does a python.exe network connection show signs of C2 beaconing or data exfiltration?
  context: This question looks for two key C2 communication patterns. The first is beaconing, where malware "calls home" at fixed intervals, resulting in a very low standard deviation in the time between connections. The second is data exfiltration, indicated by a large, anomalous outbound data transfer. This query analyzes network logs for either of these behaviors originating from a Python process.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Network egress points
  - DNS resolvers
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - pseudocode: |-
      FOR each src_ip, dst_ip pair where process_name = 'python.exe':
        CALCULATE stddev of time between connections
        ALERT IF stddev is near zero
  - pseudocode: |-
      FOR each src_ip, dst_ip pair where process_name = 'python.exe':
        BASELINE outbound data volume for the pair
        ALERT IF new connection volume > 99th percentile of baseline
- question: Is there an unexplainable change in the pattern of a host's aggregate python.exe network traffic?
  context: This is a sophisticated method for detecting C2 traffic by analyzing its underlying pattern over time. Network traffic has normal trends and seasonality. Time-series decomposition separates these patterns from the "residual" or random component. A sudden spike in the residual for traffic generated by python.exe indicates a change in behavior not explained by normal patterns, which could signify the start of C2 activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Network egress points
  - DNS resolvers
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - pseudocode: |-
      FOR each host:
        AGGREGATE python.exe network traffic into 10-minute buckets
        APPLY time-series decomposition (e.g., STL) to the series
        MONITOR the residual component
        ALERT on significant spikes in the residual