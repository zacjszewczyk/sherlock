name: T1518.001: Security Software Discovery
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary has attempted to identify security software and its configuration on a host. Adversaries perform this reconnaissance to understand the defensive landscape, which allows them to tailor their subsequent actions, such as choosing specific exploits, disabling defenses, or evading detection. The playbook covers multiple detection methods, including identifying known malicious discovery tools by hash, detecting the use of native system utilities (e.g., wmic, tasklist) with suspicious arguments, flagging unusual parent-child process relationships (e.g., Microsoft Word spawning PowerShell), monitoring for high-volume file and registry enumeration in security-related locations, and correlating on-host discovery activity with subsequent suspicious network connections.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process running that is a known malicious tool used for security software discovery?
  context: This question aims to identify the execution of binaries that are known through threat intelligence to be specifically designed for security software discovery. A match on a file hash provides a high-confidence indicator that an adversary is using a pre-compiled tool for reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Domain Controllers
  - Application Servers
  - Cloud Compute Instances
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | lookup threat_intelligence_feed hash as process_hash
      | where technique="T1518.001"
      | alert
- question: Has a rare or uncommon process been executed with command-line arguments suggesting security software discovery?
  context: This question helps uncover novel or custom discovery tools not present in threat intelligence feeds. By focusing on processes that are rare in the environment (low hash prevalence) and that also contain suspicious keywords in their command line, analysts can identify potentially malicious activity that would otherwise be missed.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Domain Controllers
  - Application Servers
  - Cloud Compute Instances
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | stats count by process_hash
      | where count < threshold_for_rarity
      | join process_hash with original_events
      | where command_line contains ("antivirus", "firewall", "defender")
      | alert
- question: Does a machine learning model classify any newly created processes as malicious discovery tools based on their execution characteristics?
  context: This question leverages a machine learning model to detect suspicious process executions based on a combination of features like parent process, command-line arguments, user context, and hash prevalence. This approach can identify more subtle or complex patterns of malicious behavior that are difficult to define with simple rules.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Domain Controllers
  - Application Servers
  - Cloud Compute Instances
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | extract_features (parent_process, user, command_line)
      | apply ML_model:RandomForestClassifier
      | where prediction="malicious_discovery"
      | alert
- question: Are native system utilities like wmic, tasklist, or reg being used with specific commands to query for security software?
  context: Adversaries often use legitimate system tools, a technique known as "living off the land," to blend in and avoid detection. This question focuses on identifying the specific command-line arguments and patterns that indicate these native tools are being used for security reconnaissance, which is a strong signal of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Privileged Access Workstations
  - Enterprise Servers
  - Cloud Compute Instances
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | where process_name in ("wmic.exe", "reg.exe", "tasklist.exe")
      | regex command_line matches_list("wmic .* antivirusproduct", "reg query .* symantec", "tasklist .* cb.exe")
      | alert
- question: Are there instances of cmd.exe or powershell.exe being executed with unusually complex or obfuscated command lines that also contain discovery-related keywords?
  context: High Shannon entropy in a command line often indicates obfuscation or complexity, which adversaries use to hide their actions. By combining an entropy check with a search for keywords related to security products ('av', 'edr'), this question helps find suspicious and potentially obfuscated discovery commands.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Privileged Access Workstations
  - Enterprise Servers
  - Cloud Compute Instances
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688 and process_name in ("cmd.exe", "powershell.exe")
      | calculate entropy(command_line) as cmd_entropy
      | where cmd_entropy > baseline_entropy_threshold
      | where command_line contains ("av", "edr", "defender")
      | alert
- question: Can a Natural Language Processing (NLP) model classify the intent of any command-line execution as 'Security Software Discovery'?
  context: This question applies an advanced NLP model to understand the semantic meaning or intent of a command, even if it uses non-standard syntax or obfuscation that would evade regex-based rules. This provides a more resilient method for detecting discovery behavior.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Privileged Access Workstations
  - Enterprise Servers
  - Cloud Compute Instances
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | apply NLP_model:CommandIntentClassifier to command_line
      | where intent="Security Software Discovery" and confidence > 0.9
      | alert
- question: Has a single process rapidly accessed an unusually high number of files or registry keys in locations associated with security software?
  context: This question acts as a tripwire to detect brute-force enumeration. A legitimate process rarely needs to read hundreds of files or registry keys in security software directories in under a minute. Such behavior is highly indicative of an automated script or tool systematically mapping out defenses.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File Servers
  - Application Servers
  - Standard User Workstations
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4663
      | where object_name contains ("C:\\Program Files\\", "C:\\ProgramData\\", "HKLM\\SOFTWARE\\")
      | bucket time by 1m
      | stats count by ProcessID
      | where count > 500
      | alert
- question: Is any process accessing files or registry keys at a rate that is statistically anomalous compared to its own historical baseline, especially when accessing objects related to security tools?
  context: This question provides a more nuanced approach than a simple tripwire by establishing a baseline of normal activity for each process. It alerts only on significant deviations from this norm, which helps reduce false positives while still catching abnormal enumeration activity, particularly when it targets security-related files or registry keys.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File Servers
  - Application Servers
  - Standard User Workstations
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4663
      | timechart count by ProcessName, host
      | compare to historical_baseline
      | where current_rate > (3 * stdev from average)
      | where object_name contains ("Agent", "Security", "EDR")
      | alert
- question: Does a time-series model detect an anomalous spike in the overall volume of file and registry read events on a host, indicating a departure from its normal operational rhythm?
  context: This question analyzes the host's activity as a whole, rather than focusing on a single process. It's designed to detect broader enumeration campaigns that might use multiple processes or spread activity over time, which could be missed by per-process analytics. It identifies when the system's overall "heartbeat" of file/registry access becomes abnormal.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File Servers
  - Application Servers
  - Standard User Workstations
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4663
      | timechart count by host
      | apply ML_model:TimeSeriesAnomalyDetection
      | where is_anomaly=true
      | alert
- question: Have any common productivity applications (e.g., Office, browsers, PDF readers) spawned system utilities used for discovery (e.g., cmd.exe, powershell.exe, tasklist.exe)?
  context: This is a high-fidelity indicator of compromise. Legitimate users do not typically launch command prompts or system reconnaissance tools directly from documents, emails, or web pages. This parent-child relationship strongly suggests the execution of a malicious macro, script, or exploit payload.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | where parent_process_name in ("WINWORD.EXE", "EXCEL.EXE", "chrome.exe", "AcroRd32.exe")
      | where new_process_name in ("tasklist.exe", "wmic.exe", "reg.exe", "powershell.exe", "cmd.exe")
      | alert
- question: Has a discovery utility been launched by a parent process that is statistically rare across the entire enterprise?
  context: This question moves beyond a static list of suspicious parents to find any unusual process lineage. By profiling all parent-child relationships and flagging those that are extremely uncommon, this analytic can uncover novel or unexpected execution chains used by adversaries to launch discovery tools.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | stats count by parent_process_name, new_process_name
      | where new_process_name in ("tasklist.exe", "wmic.exe")
      | where prevalence < 0.001
      | alert
- question: Does a graph-based analysis of process execution chains reveal a structurally rare or anomalous sequence of events, such as Outlook spawning PowerShell which then runs tasklist?
  context: This question models process activity as a graph to understand complex, multi-step execution chains. It can detect not just a single unusual parent-child link, but an entire sequence that deviates from normal behavior. This is powerful for detecting sophisticated attacks where the initial execution might seem benign.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688
      | build_process_graph
      | apply ML_model:GraphAnomalyDetection
      | where subgraph_is_rare=true and subgraph contains ("OUTLOOK.EXE", "powershell.exe", "tasklist.exe")
      | alert
- question: Did a host that recently triggered a security discovery alert also initiate a network connection to a known malicious IP address?
  context: This question correlates on-host reconnaissance with network-based threat intelligence. An adversary discovering security tools and then immediately connecting to a command-and-control (C2) server on a blocklist is a high-confidence indicator of an active, ongoing compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek dns.log
  - Zeek conn.log
  - Network Egress Points
  - DNS Servers
  - Host Network Interfaces
  - Cloud VPC Flow Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search discovery_alert_source
      | join host, time with (
          search source="zeek_conn"
          | lookup threat_intelligence_feed dest_ip
          | where is_malicious=true
        ) on host within 5m
      | alert
- question: Following a burst of discovery commands on a host, was a DNS query made for a newly registered or algorithmically generated domain (DGA)?
  context: Adversaries frequently use newly registered or DGA domains for C2 infrastructure to evade reputation-based blocklists. This question looks for the specific sequence of on-host reconnaissance followed by a connection to this type of suspicious domain, which strongly indicates a C2 channel is being established.
  answer_sources:
  - Windows Event ID 4688
  - Zeek dns.log
  - Zeek conn.log
  - Network Egress Points
  - DNS Servers
  - Host Network Interfaces
  - Cloud VPC Flow Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search source="WinEventLog:Security" and EventID=4688 and is_discovery_command=true
      | cluster by host within 2m where event_count > 3
      | join host, time with (
          search source="zeek_dns"
          | where domain_age < 30d or is_dga=true
        ) on host within 5m
      | alert
- question: Does a sequence analysis model identify a pattern of on-host discovery activity followed by network behavior as anomalous compared to learned legitimate sequences?
  context: This question uses machine learning to understand the normal "story" or sequence of events on a host. It can flag a sequence as suspicious even if no single event is inherently malicious. For example, it can learn that discovery commands followed by a direct-to-IP connection on a non-standard port is an abnormal sequence for a particular host or user group.
  answer_sources:
  - Windows Event ID 4688
  - Zeek dns.log
  - Zeek conn.log
  - Network Egress Points
  - DNS Servers
  - Host Network Interfaces
  - Cloud VPC Flow Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="wineventlog" or source="zeek")
      | sort by host, time
      | apply ML_model:SequenceAnalysis
      | where sequence_is_anomalous=true and sequence contains (discovery_event, network_event)
      | alert