name: T1564.012: File-Path Exclusions
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: >-
  This playbook focuses on detecting adversaries who are attempting to evade defenses by placing malicious artifacts (files, tools) in file paths that are explicitly excluded from inspection by security software. Detection strategies involve monitoring for file writes and process executions within these known exclusion paths, identifying files that are known-bad or match suspicious patterns, flagging anomalous volumes of activity, and correlating network downloads with subsequent file creation in excluded directories.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Are known malicious files or tools being written to or executed from security software exclusion paths?
    context: >-
      Adversaries frequently leverage pre-configured exclusion paths in security tools to place their malware or tools, knowing they will not be scanned. This question aims to directly detect this behavior by monitoring file and process creation in these paths and comparing artifacts against high-fidelity threat intelligence (known bad hashes) and signatures for common hacking tools. A match is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems on Windows endpoints and servers, focusing on common default exclusion paths (e.g., %windir%\Temp, %appdata%\Temp) and configured exclusion directories for security tools (e.g., Microsoft Defender, CrowdStrike) and enterprise applications (e.g., SQL Server data directories, developer build folders).
    range: last 90 days
    queries:
      - pseudocode: >-
          SEARCH file_creation (EventID 4663) OR process_creation (EventID 4688)
          WHERE file_path IN (list_of_exclusion_paths)
          | HASH file
          | MATCH file_hash against known_bad_hashes_feed
          | MATCH file_name against malicious_tool_regex
          | ALERT on any match
  - question: Is there an anomalously high volume of file creation activity within a specific exclusion path on any given host?
    context: >-
      A sudden spike in file write activity within an otherwise quiet exclusion path can be an indicator of a malicious script or tool dropping a large number of files, or staging data for exfiltration. This question seeks to identify such anomalies by baselining normal file creation frequency per host and path, and alerting when activity exceeds a statistical threshold (e.g., the 99th percentile). This provides a behavioral detection method that does not rely on specific signatures.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems on Windows endpoints and servers, focusing on common default exclusion paths (e.g., %windir%\Temp, %appdata%\Temp) and configured exclusion directories for security tools (e.g., Microsoft Defender, CrowdStrike) and enterprise applications (e.g., SQL Server data directories, developer build folders).
    range: last 90 days
    queries:
      - pseudocode: >-
          CALCULATE 30-day baseline of file_write_counts per host, per exclusion_path
          SET threshold = 99th_percentile of baseline
          SEARCH file_creation (EventID 4663) in last 24 hours
          | COUNT events by host, exclusion_path
          | IF count > threshold, ALERT
  - question: Can a machine learning model classify file write events within exclusion paths as benign or suspicious?
    context: >-
      This question explores a more advanced detection method using machine learning to distinguish between legitimate and malicious activity. By training a classifier on features like file entropy, extension, signer status, and parent process, the model can learn the nuanced characteristics of malicious file writes in exclusion paths, potentially identifying novel threats that signature-based or simple statistical methods might miss.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems on Windows endpoints and servers, focusing on common default exclusion paths (e.g., %windir%\Temp, %appdata%\Temp) and configured exclusion directories for security tools (e.g., Microsoft Defender, CrowdStrike) and enterprise applications (e.g., SQL Server data directories, developer build folders).
    range: last 90 days
    queries:
      - pseudocode: >-
          FOR EACH new file_write (EventID 4663) in exclusion_path
          | EXTRACT_FEATURES (entropy, extension, signer, parent_process, etc.)
          | INPUT features into trained_classifier_model
          | IF model_prediction == 'suspicious', ALERT
  - question: Is a process attempting to discover security software exclusion settings or move files into those paths using command-line utilities?
    context: >-
      Before using an exclusion path, a sophisticated adversary may first try to discover where those paths are. This question looks for the reconnaissance step by monitoring for specific commands used to query the registry for exclusion settings (e.g., for Windows Defender) or commands that explicitly copy, move, or download files into a known or discovered exclusion path. Detecting this activity can provide an early warning of an impending defense evasion attempt.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (command-line and PowerShell) on all Windows endpoints and servers. Network traffic logs at egress points (proxies, firewalls) to correlate download commands observed in command-line arguments.
    range: last 90 days
    queries:
      - pseudocode: >-
          SEARCH process_creation (EventID 4688)
          | MATCH command_line against regex_for_exclusion_discovery (e.g., 'reg query', 'Get-MpPreference')
          | MATCH command_line against regex_for_file_movement_to_exclusions (e.g., 'copy *.exe C:\\AV_Exclusion\\')
          | ALERT on any match
  - question: Are there processes being executed with unusually long or complex command-line arguments?
    context: >-
      Adversaries often use obfuscation techniques to hide their commands from simple keyword-based detections. This results in command-line arguments with higher-than-normal complexity (entropy) or length. This question aims to detect such obfuscated commands by establishing a baseline for command-line entropy and length for common utilities (like powershell.exe) and alerting on significant deviations, which could indicate malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (command-line and PowerShell) on all Windows endpoints and servers. Network traffic logs at egress points (proxies, firewalls) to correlate download commands observed in command-line arguments.
    range: last 90 days
    queries:
      - pseudocode: >-
          FOR EACH process_creation (EventID 4688) of common_utility (powershell.exe, cmd.exe)
          | CALCULATE command_line_entropy and command_line_length
          | COMPARE to historical baseline for that utility on that host
          | IF entropy > (mean + 3*std_dev) OR length > (mean + 3*std_dev), ALERT
  - question: Can clustering algorithms identify novel adversary techniques based on command-line arguments used to write to exclusion paths?
    context: >-
      This question proposes using unsupervised machine learning to find new or unknown malicious command patterns. By converting command-line arguments into numerical vectors (e.g., using TF-IDF) and applying a clustering algorithm like DBSCAN, we can group similar commands together. New clusters that emerge and do not map to known benign administrative tasks can be flagged for investigation, representing potentially novel adversary tradecraft.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (command-line and PowerShell) on all Windows endpoints and servers. Network traffic logs at egress points (proxies, firewalls) to correlate download commands observed in command-line arguments.
    range: last 90 days
    queries:
      - pseudocode: >-
          COLLECT command_lines from processes writing to exclusion paths
          | VECTORIZE command_lines using TF-IDF
          | APPLY DBSCAN clustering algorithm to vectors
          | MANUALLY_REVIEW new clusters not matching known benign activity
          | ALERT on suspicious clusters
  - question: Is an unsigned executable file being created or executed within a security software exclusion path?
    context: >-
      Legitimate software, especially software that might be placed in an exclusion path for performance reasons, is typically digitally signed by a trusted publisher. An unsigned executable appearing in one of these paths is highly suspicious. This question focuses on creating a high-severity alert for this specific condition, as it strongly indicates that an unverified and potentially malicious program is attempting to hide from security controls.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems on Windows endpoints and servers, particularly application directories commonly added to exclusion lists (e.g., database folders, development toolchains, source code repositories) and user profile directories.
    range: last 90 days
    queries:
      - pseudocode: >-
          SEARCH file_creation (EventID 4663) OR process_creation (EventID 4688)
          WHERE file_path IN (list_of_exclusion_paths) AND file_extension IN ('.exe', '.dll', '.ps1', '.bat')
          | GET file_signer_status
          | IF signer IS 'unsigned' OR signer NOT IN (approved_publisher_list), ALERT
  - question: Are files with anomalous properties (e.g., high entropy, unusual extension) appearing in specific exclusion directories?
    context: >-
      Different exclusion directories have different "normal" characteristics. For example, a database folder should contain database files, not batch scripts. This question aims to detect outliers by profiling the normal characteristics (file extensions, entropy scores, parent processes) for each distinct exclusion directory. An alert is generated when a new file deviates significantly from this established baseline, such as a file with high entropy (suggesting encryption or packing) or an unexpected file type.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems on Windows endpoints and servers, particularly application directories commonly added to exclusion lists (e.g., database folders, development toolchains, source code repositories) and user profile directories.
    range: last 90 days
    queries:
      - pseudocode: >-
          FOR EACH exclusion_directory, CALCULATE 30-day baseline of (file_extensions, entropy_distribution, parent_processes)
          SEARCH file_creation (EventID 4663) in exclusion_directories
          | IF file_extension is anomalous for its directory, ALERT
          | IF file_entropy is outlier for its directory (e.g., > 7.5), ALERT
  - question: Can a machine learning model identify anomalous files in high-value exclusion paths based on their features?
    context: >-
      This question proposes using a one-class SVM, a model ideal for anomaly detection where "bad" examples are rare. The model is trained exclusively on the features of legitimate files found in a specific high-value exclusion path. When a new file is created, the model determines if its features fit the learned "legitimate" profile. If the file is deemed an outlier, it is flagged as anomalous and requires analyst review, effectively detecting novel deviations from the norm.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems on Windows endpoints and servers, particularly application directories commonly added to exclusion lists (e.g., database folders, development toolchains, source code repositories) and user profile directories.
    range: last 90 days
    queries:
      - pseudocode: >-
          FOR a specific high-value exclusion_path
          | TRAIN one-class SVM model on features of known legitimate files in that path
          | FOR EACH new file_creation in that path
          |   EXTRACT_FEATURES (entropy, size, extension, etc.)
          |   IF one-class_SVM_model predicts 'anomaly', ALERT
  - question: Is a process downloading a file from an external source and then immediately writing it to a security exclusion path?
    context: >-
      This question seeks to identify the common adversary pattern of "download and execute." By correlating network logs with endpoint logs, we can detect a process making an external network connection to download a file, followed shortly by the same process writing a file to an exclusion path. This direct chain of events is highly indicative of an adversary dropping a payload into a location where it can evade defenses.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Network egress points (e.g., firewalls, web proxies), DNS servers, and endpoint file systems. Correlation requires access to both network logs (Zeek) and endpoint logs (Windows Event IDs).
    range: last 90 days
    queries:
      - pseudocode: >-
          SEARCH for process_creation (EventID 4688) with associated network_connection (Zeek conn.log) to external_IP
          | WITHIN 5 minutes of connection, SEARCH for file_write (EventID 4663) by same process_id to an exclusion_path
          | IF correlated event found, ALERT
          | INCREASE severity if downloaded_file_type (Zeek files.log) is executable OR source_IP has low reputation
  - question: Are files being written to exclusion paths after being downloaded from rare or suspicious network locations?
    context: >-
      Not all downloads are created equal. A download from a common, trusted source (like Microsoft) is less risky than one from a rarely seen Autonomous System (AS) or a country with no business nexus. This question adds risk context to the "download-then-write" event by analyzing the origin of the download. Events originating from infrequent or geographically suspicious ASNs are scored as higher risk, helping to prioritize alerts for analysts.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Network egress points (e.g., firewalls, web proxies), DNS servers, and endpoint file systems. Correlation requires access to both network logs (Zeek) and endpoint logs (Windows Event IDs).
    range: last 90 days
    queries:
      - pseudocode: >-
          IDENTIFY 'download-then-write-to-exclusion' events
          | FOR each event, lookup source_IP's ASN and country (Zeek conn.log)
          | CALCULATE historical frequency of downloads from that ASN
          | IF ASN frequency is in bottom 5th percentile OR country is non-standard, assign high risk score and ALERT
  - question: Is there a sudden spike in the overall volume of 'download-then-write-to-exclusion' events across the enterprise?
    context: >-
      While a single 'download-then-write' event is suspicious, a sudden increase in the volume of these events across many systems could indicate a widespread campaign or the mass deployment of a malicious tool. This question uses time-series analysis to model the normal hourly rate of these correlated events. An alert is triggered when the observed volume significantly exceeds the forecasted volume, signaling a potential large-scale attack.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Network egress points (e.g., firewalls, web proxies), DNS servers, and endpoint file systems. Correlation requires access to both network logs (Zeek) and endpoint logs (Windows Event IDs).
    range: last 90 days
    queries:
      - pseudocode: >-
          TRAIN time-series model (e.g., ARIMA) on 30+ days of hourly counts of 'download-then-write-to-exclusion' events
          | FORECAST expected event count for the current hour
          | OBSERVE actual event count for the current hour
          | IF observed_count significantly deviates from forecasted_count, ALERT
  - question: Has a user or process performed exclusion path discovery and then written a file to one of those paths within a short time frame?
    context: >-
      This question looks for a very specific and suspicious sequence of actions: discover, then use. By creating a stateful rule, we can "watch" a host for a short period after it performs a known exclusion discovery command. If that same user or process then writes a file to any exclusion path while being watched, it creates a high-confidence alert. This links the adversary's reconnaissance directly to their follow-on action.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Registry on endpoints and servers (specifically `HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions` and other vendor-specific keys), process command-line arguments, and file systems in excluded directories.
    range: last 90 days
    queries:
      - pseudocode: >-
          ON process_creation (EventID 4688) with exclusion_discovery_command
          |   SET host_state = 'Discovery Activity' for 60 minutes
          | WHILE host_state is 'Discovery Activity'
          |   IF file_write (EventID 4663) to any exclusion_path by same user/process_tree
          |     TRIGGER high-severity alert
  - question: Is there a statistically significant increase in the probability of a file write to an exclusion path immediately following an exclusion discovery event on a host?
    context: >-
      This question provides a statistical method to detect the 'discover-then-use' pattern. On a normal system, discovering exclusion paths is rare and likely unrelated to subsequent file writes. On a compromised system, these two events are causally linked. By calculating the conditional probability, we can mathematically identify hosts where this link is becoming stronger than the baseline, indicating a suspicious correlation between the two behaviors.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Registry on endpoints and servers (specifically `HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions` and other vendor-specific keys), process command-line arguments, and file systems in excluded directories.
    range: last 90 days
    queries:
      - pseudocode: >-
          CALCULATE baseline P(WriteToExclusion)
          ON a per-host basis, CALCULATE P(WriteToExclusion | DiscoveryEvent in last hour)
          | USE chi-squared test to check if the increase in probability is statistically significant
          | IF significant, ALERT for that host
  - question: Can a graph-based model detect the subgraph pattern representing exclusion discovery followed by file creation in that path?
    context: >-
      This question applies advanced graph analytics to model endpoint behavior. Processes, files, and registry keys are represented as nodes in a graph, and their interactions are edges. A malicious T1564.012 event forms a specific subgraph: a process node reads a registry key node (the exclusion path), which then connects to a new file node created in that path. By training a Graph Neural Network or using anomaly detection to find this specific pattern, we can detect this technique with high fidelity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Registry on endpoints and servers (specifically `HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions` and other vendor-specific keys), process command-line arguments, and file systems in excluded directories.
    range: last 90 days
    queries:
      - pseudocode: >-
          MODEL endpoint events as a graph (nodes=process, file, registry; edges=interactions)
          | USE a GNN or other graph algorithm to search for the specific subgraph:
          |   (Process) -> [reads] -> (Registry Key: Exclusion)
          |   (Process) -> [creates] -> (File: In Exclusion Path)
          | IF subgraph pattern is detected, ALERT