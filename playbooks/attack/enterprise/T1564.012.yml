name: T1564.012: File-Path Exclusions
id: a19e9180-2a81-4348-a006-2583269893d5
description: This playbook helps investigate if an adversary is attempting to evade defenses by placing artifacts in excluded file paths. This involves looking for files written to or executed from known exclusion paths that have malicious characteristics (known bad hash, suspicious name). It also covers detecting processes that discover exclusion settings or use command-line utilities to move files into these paths. Further indicators include files in exclusion paths that are unsigned, have high entropy, or have unusual extensions. The playbook also addresses scenarios where a file is downloaded from the network and quickly placed into an exclusion path, and sequences where exclusion discovery is immediately followed by file activity in those same paths.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are files being written to or executed from known exclusion paths that match known malicious hashes or naming patterns?
  context: This question seeks to identify overtly malicious files placed in security software exclusion paths. Adversaries use these locations to hide malware from antivirus and EDR tools. By monitoring file and process creation events in these specific paths and comparing file hashes and names against threat intelligence and known tool patterns, we can detect this evasion technique directly.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File systems on Windows endpoints and servers, focusing on common default exclusion paths (e.g., %windir%\Temp, %appdata%\Temp) and configured exclusion directories for security tools (e.g., Microsoft Defender, CrowdStrike) and enterprise applications (e.g., SQL Server data directories, developer build folders).
  range: last 90 days
  queries:
  - pseudocode: SEARCH file_creation and process_creation events WHERE file_path in (list_of_exclusion_paths) | CHECK file_hash against (threat_intel_feed) OR file_name matches (regex_list_of_tool_names) | ALERT on match
- question: Is there an anomalous volume of file creation activity within a specific exclusion path on any given host?
  context: This question aims to detect unusual behavior that might indicate malicious activity, even without a known-bad signature. A sudden spike in the number of files being written to an exclusion path on a single host can be a sign that an adversary is staging tools, exfiltrating data, or executing a payload. By baselining normal activity and alerting on deviations, we can uncover suspicious behavior that might otherwise be missed.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File systems on Windows endpoints and servers, focusing on common default exclusion paths (e.g., %windir%\Temp, %appdata%\Temp) and configured exclusion directories for security tools (e.g., Microsoft Defender, CrowdStrike) and enterprise applications (e.g., SQL Server data directories, developer build folders).
  range: last 90 days
  queries:
  - pseudocode: FOR each host, exclusion_path | COUNT file_write_events over 24h | COMPARE count to 99th_percentile_baseline (calculated over 30 days) | ALERT if count > baseline
- question: Can we classify new file write events within exclusion paths as 'benign' or 'suspicious' using machine learning?
  context: This question leverages machine learning to identify suspicious files based on their intrinsic properties, rather than just their hash or name. By training a model on features like file extension, entropy, and signer status, the system can learn the characteristics of both legitimate and malicious files typically found in these paths. This allows for the detection of novel or obfuscated threats that symbolic and statistical methods might miss.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File systems on Windows endpoints and servers, focusing on common default exclusion paths (e.g., %windir%\Temp, %appdata%\Temp) and configured exclusion directories for security tools (e.g., Microsoft Defender, CrowdStrike) and enterprise applications (e.g., SQL Server data directories, developer build folders).
  range: last 90 days
  queries:
  - pseudocode: FOR each file_write_event in exclusion_path | EXTRACT features (extension, entropy, signer, etc.) | INPUT features into trained_classifier_model | ALERT if classification is 'suspicious'
- question: Are processes being executed with command-line arguments that indicate discovery of exclusion settings or movement of files into excluded paths?
  context: This question focuses on detecting the adversary's preparatory actions. Before using an exclusion, an adversary may first try to discover where these exclusions are. They might use built-in commands like `reg query` or `Get-MpPreference`. Subsequently, they will use commands like `copy` or `Invoke-WebRequest` to place their tools. Monitoring for these specific command-line patterns provides an early warning of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Process execution logs (command-line and PowerShell) on all Windows endpoints and servers. Network traffic logs at egress points (proxies, firewalls) to correlate download commands observed in command-line arguments.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events | PARSE command_line_arguments | APPLY regex for (exclusion_discovery_commands) OR (file_movement_to_exclusions) | ALERT on match
- question: Are common utilities like powershell.exe or cmd.exe being executed with unusually long or complex (high entropy) command-line arguments?
  context: This question helps find obfuscated or complex commands that might be malicious. Adversaries often use encoding (like Base64) or complex scripts passed as arguments to hide their actions, which results in command lines that are longer and have higher entropy than normal administrative commands. By baselining the typical complexity for common utilities on a per-host basis, we can flag these statistical outliers for investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Process execution logs (command-line and PowerShell) on all Windows endpoints and servers. Network traffic logs at egress points (proxies, firewalls) to correlate download commands observed in command-line arguments.
  range: last 90 days
  queries:
  - pseudocode: FOR each execution of (powershell.exe, cmd.exe, etc.) | CALCULATE command_line_length and command_line_entropy | COMPARE to per-host baseline for that process | ALERT if value is > 3 standard deviations from mean
- question: Can we use clustering to identify novel or unusual command-line patterns related to writing files into exclusion paths?
  context: This question uses unsupervised machine learning to discover new attack patterns without prior knowledge. By converting command-line arguments into numerical vectors and grouping similar ones into clusters, we can identify what 'normal' command patterns look like. Any new commands that form a new, distinct cluster are inherently anomalous and warrant investigation as they could represent a new or previously unseen adversary technique.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Process execution logs (command-line and PowerShell) on all Windows endpoints and servers. Network traffic logs at egress points (proxies, firewalls) to correlate download commands observed in command-line arguments.
  range: last 90 days
  queries:
  - pseudocode: FROM process_events writing to exclusion paths | VECTORIZE command_lines using TF-IDF | APPLY DBSCAN clustering algorithm | ANALYZE and investigate newly formed clusters
- question: Are executable files being created in exclusion paths that are not digitally signed by an approved publisher?
  context: This question focuses on a high-confidence indicator of malicious activity. Legitimate software is almost always digitally signed by the vendor. Adversary-provided tools and malware are often unsigned. By creating an allow-list of trusted signers and alerting on any unsigned executable created in an exclusion path, we can effectively detect suspicious binaries that are attempting to hide from security tools.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File systems on Windows endpoints and servers, particularly application directories commonly added to exclusion lists (e.g., database folders, development toolchains, source code repositories) and user profile directories.
  range: last 90 days
  queries:
  - pseudocode: SEARCH file_creation or process_creation events in exclusion_paths WHERE file_type is executable | CHECK digital_signer_status | ALERT if file is unsigned OR signer not in (approved_list)
- question: Are files appearing in exclusion directories with properties that are statistical outliers compared to the historical baseline for that directory?
  context: This question aims to detect anomalous files by comparing their properties to what is considered 'normal' for a specific location. For example, a directory that normally contains only low-entropy data files should not suddenly have a high-entropy executable file appear. By profiling the normal file extensions, entropy scores, and parent processes for each exclusion path, we can spot outliers that suggest an adversary has placed a file where it does not belong.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File systems on Windows endpoints and servers, particularly application directories commonly added to exclusion lists (e.g., database folders, development toolchains, source code repositories) and user profile directories.
  range: last 90 days
  queries:
  - pseudocode: FOR each file_event in exclusion_path | EXTRACT file_extension, entropy, parent_process | COMPARE properties to historical baseline for that specific directory | ALERT if any property is a statistical outlier
- question: Can a one-class SVM model identify files in high-value exclusion paths that do not conform to the profile of legitimate files?
  context: This question applies anomaly detection to find malicious files in sensitive locations. A One-Class Support Vector Machine (SVM) is trained only on data from legitimate files, learning a boundary that encompasses 'normal' activity. Any new file that falls outside this boundary is flagged as an anomaly. This is useful for high-value exclusion paths with very predictable, legitimate activity, as any deviation is highly suspicious.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - File systems on Windows endpoints and servers, particularly application directories commonly added to exclusion lists (e.g., database folders, development toolchains, source code repositories) and user profile directories.
  range: last 90 days
  queries:
  - pseudocode: FOR each new_file in high_value_exclusion_path | EXTRACT features (entropy, size, etc.) | INPUT features into one_class_svm_model | ALERT if model classifies file as an anomaly
- question: Is a process downloading a file from the network and then immediately writing it to a known security exclusion path?
  context: This question seeks to chain together network and endpoint events to detect a common adversary workflow: download and execute. By correlating a network download event with a subsequent file write to an exclusion path by the same process within a short time window, we can identify with high confidence that an external tool has been introduced into a location designed to evade security scans.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Network egress points (e.g., firewalls, web proxies), DNS servers, and endpoint file systems. Correlation requires access to both network logs (Zeek) and endpoint logs (Windows Event IDs).
  range: last 90 days
  queries:
  - pseudocode: CORRELATE network_connection_logs and file_write_logs by process_id | TRIGGER when process with external_network_connection writes a file to an exclusion_path within 5 minutes | ALERT
- question: Are 'download-and-write-to-exclusion' events originating from rare or suspicious network locations?
  context: This question adds context to the 'download-and-write' behavior by analyzing the source of the download. An organization typically downloads software from a predictable set of sources. If a file is downloaded and placed in an exclusion path, and the download originates from an Autonomous System (AS) or country that the organization rarely interacts with, the activity is much more likely to be malicious.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Network egress points (e.g., firewalls, web proxies), DNS servers, and endpoint file systems. Correlation requires access to both network logs (Zeek) and endpoint logs (Windows Event IDs).
  range: last 90 days
  queries:
  - pseudocode: FOR each 'download-write-to-exclusion' event | EXTRACT source_IP and lookup ASN/country | COMPARE ASN to historical frequency baseline | ASSIGN high risk score if ASN is in bottom 5th percentile of frequency
- question: Is there a statistically significant spike in the overall volume of 'download-and-write-to-exclusion' events across the environment?
  context: This question uses time-series analysis to look for macro-level changes in adversary activity. A sudden, anomalous increase in the total number of correlated download-and-write events could signal the start of a widespread campaign or the mass deployment of a malicious tool across multiple systems. This provides a broader view beyond individual host-based alerts.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Network egress points (e.g., firewalls, web proxies), DNS servers, and endpoint file systems. Correlation requires access to both network logs (Zeek) and endpoint logs (Windows Event IDs).
  range: last 90 days
  queries:
  - pseudocode: COUNT correlated 'download-write-to-exclusion' events per hour | INPUT count into trained time-series model (ARIMA/LSTM) | ALERT if observed count significantly deviates from forecasted count
- question: Has a user or process performed exclusion discovery actions shortly before writing a file to one of those exclusion paths?
  context: This question looks for a logical chain of events that strongly implies malicious intent. An adversary who is unfamiliar with the environment's defenses will first need to discover them. Seeing a process query the registry for Defender exclusions and then, minutes later, write a file into one of those paths is a very strong indicator of defense evasion in action.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Registry on endpoints and servers (specifically HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions and other vendor-specific keys), process command-line arguments, and file systems in excluded directories.
  range: last 90 days
  queries:
  - pseudocode: CREATE stateful rule | IF process executes exclusion_discovery_command, set host_state='Discovery' for 60 mins | IF host_state is 'Discovery' AND file_write to exclusion_path occurs, trigger HIGH_SEVERITY_ALERT
- question: On a given host, has the probability of a file being written to an exclusion path increased significantly following an exclusion discovery event?
  context: This question provides a statistical method to identify the suspicious link between discovery and action. On any given host, there is a baseline probability of a file being written to an exclusion path. If, after a discovery event occurs, that probability dramatically increases for that host, it suggests the discovery and the file write are not independent events but are part of a deliberate, causal chain of activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Registry on endpoints and servers (specifically HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions and other vendor-specific keys), process command-line arguments, and file systems in excluded directories.
  range: last 90 days
  queries:
  - pseudocode: CALCULATE P(WriteToExclusion | DiscoveryEvent) per host | COMPARE to baseline P(WriteToExclusion) using chi-squared test | ALERT if increase is statistically significant
- question: Can we detect a graph-based pattern of a process reading an exclusion-related registry key and then creating a file in that corresponding path?
  context: This question uses advanced graph analytics to model and detect complex behaviors. Endpoint activity can be represented as a graph where processes, files, and registry keys are nodes. A malicious subgraph pattern can be defined as a process node that is connected by an edge to a 'read' action on an exclusion registry key node, and also connected by an edge to a 'create' action on a file node within that exclusion path. Detecting this specific pattern provides a highly contextual and reliable alert.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Registry on endpoints and servers (specifically HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions and other vendor-specific keys), process command-line arguments, and file systems in excluded directories.
  range: last 90 days
  queries:
  - pseudocode: MODEL endpoint activity as a process-file-registry graph | USE graph anomaly detection to search for subgraph: (Process) -> [reads] -> (Exclusion Registry Key) AND (Process) -> [creates] -> (File in Exclusion Path) | ALERT on pattern match