name: T1542.001: System Firmware
id: 5a7b8c9d-1e2f-4a3b-8d4e-6f7g8h9i0j1k
description: This playbook is designed to detect adversarial activity related to system firmware modification (T1542.001), a technique used for both persistence and defense evasion. It addresses key investigative questions such as whether an adversary is maintaining persistence or evading detection by altering firmware. The playbook focuses on identifying evidence like the execution of known malicious firmware utilities (e.g., LoJax, TrickBoot), the use of legitimate tools (e.g., AFUWIN.exe, bcdedit.exe) with suspicious parameters, unauthorized access to physical memory, anomalous process or network activity immediately following a system boot, the presence of bootkits, and attempts to disable security controls at the firmware or boot level before security agents can initialize.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is a known malicious firmware utility being executed or written to disk?
  context: This question aims to detect the presence of well-known malicious firmware utilities by matching their file hashes against a threat intelligence feed. A positive match on a tool like LoJax or TrickBoot is a high-confidence indicator of a sophisticated persistence attempt at the firmware level.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Critical system endpoints (e.g., domain controllers, database servers) and administrator
    workstations.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create OR File:Create WHERE hash IN (known_malicious_firmware_hashes)
- question: Is a low-prevalence process, potentially an unknown firmware utility, being
    executed?
  context: This question helps identify potentially unknown or custom firmware modification
    tools that are not present in threat intelligence feeds. By calculating the prevalence
    of every executed file hash across the enterprise, tools that run on only one
    or a very small number of endpoints can be flagged as anomalous and worthy of
    investigation.
  answer_sources:
  - Windows Event ID 4688
  - Critical system endpoints (e.g., domain controllers, database servers) and administrator
    workstations.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create | CALCULATE prevalence(process_hash) | FILTER prevalence
      < 1%
- question: Does a newly observed process exhibit characteristics of a malicious firmware
    utility based on its execution metadata?
  context: This question uses a behavioral, machine-learning approach to identify
    suspicious activity. By training a model on the typical metadata of known malicious
    and benign administrative activities (e.g., parent process, user context, command
    line), it can score new, unknown processes to proactively identify potential
    firmware modification behavior that evades simpler detection methods.
  answer_sources:
  - Windows Event ID 4688
  - Critical system endpoints (e.g., domain controllers, database servers) and administrator
    workstations.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create | APPLY classification_model(parent_process, user,
      command_line) | FILTER score > threshold
- question: Is a known firmware management utility being executed with suspicious
    arguments indicative of modification?
  context: This question addresses the misuse of legitimate tools. Adversaries often
    leverage existing firmware update utilities (e.g., AFUWIN.exe) for malicious
    purposes. This query specifically looks for the execution of these tools with
    command-line arguments that indicate writing, dumping, or overwriting firmware,
    especially when initiated by unauthorized users or outside of maintenance windows.
  answer_sources:
  - Windows Event ID 4688
  - All managed endpoints and servers, particularly those with remote management
    capabilities.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process_name IN (firmware_utils) AND command_line
      CONTAINS (suspicious_args)
- question: Is a firmware utility being run with unusually complex or infrequent command-line
    arguments?
  context: This question seeks to detect anomalous usage of legitimate firmware utilities
    by analyzing their command lines. A significant deviation from the normal complexity
    (entropy) or historical usage patterns for a given user or host can indicate
    obfuscation or an adversary's attempt to use the tool in a novel, malicious way.
  answer_sources:
  - Windows Event ID 4688
  - All managed endpoints and servers, particularly those with remote management
    capabilities.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process_name IN (firmware_utils) | CALCULATE
      entropy(command_line) | FILTER entropy > baseline_std_dev(3)
- question: Is there an anomalous spike in the execution of firmware utilities across
    the enterprise?
  context: This question aims to detect large-scale, coordinated firmware modification
    campaigns. By modeling the normal, aggregate frequency of firmware utility executions
    (accounting for patching cycles), a time-series anomaly detection model can identify
    sudden, widespread spikes in activity that fall outside of expected behavior,
    suggesting a potential attack.
  answer_sources:
  - Windows Event ID 4688
  - All managed endpoints and servers, particularly those with remote management
    capabilities.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process_name IN (firmware_utils) | AGGREGATE
      count by time | APPLY time_series_model | FILTER count > predicted_confidence_interval
- question: Is an unknown process launching or an anomalous network connection occurring
    immediately after system boot?
  context: Firmware-based implants often execute very early in the boot sequence to
    establish persistence. This question aims to detect this activity by correlating
    boot events with subsequent process and network activity, flagging any process
    launching from a non-standard location or any network connection to an unusual
    destination within the first minute of startup.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows System Event Log (Event ID 6005/6009)
  - Endpoint devices, network gateway (for correlating boot-time traffic), and log
    aggregation platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE BootEvents with Process:Create, Network:Connect WHERE time_delta
      < 60s AND process_path NOT IN (startup_locations) OR dest_port NOT IN (80,443)
- question: Is a host making an outbound network connection unusually quickly after
    booting?
  context: This question refines the detection of early boot network activity by baselining
    the normal time delay between boot completion and the first network connection
    on a per-host basis. A connection that occurs significantly faster than the historical
    norm (e.g., below the 5th percentile) is a strong indicator of pre-OS or early-boot
    C2 communication from a firmware implant.
  answer_sources:
  - Zeek conn.log
  - Windows System Event Log (Event ID 6009)
  - Endpoint devices, network gateway (for correlating boot-time traffic), and log
    aggregation platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE BootEvent with first Network:Connect | CALCULATE time_delta |
      FILTER time_delta < 5th_percentile_baseline
- question: Is a process launching at boot time classified as anomalous based on its
    characteristics?
  context: This question uses machine learning to build a profile of legitimate boot-time
    processes based on features like file path, signature status, and parent process.
    It then classifies new boot-time processes as normal or anomalous. An anomalous
    process, especially one that is unsigned and has no parent, is a strong candidate
    for being a firmware-based persistence mechanism.
  answer_sources:
  - Windows Event ID 4688
  - Windows System Event Log (Event ID 6009)
  - Endpoint devices, network gateway (for correlating boot-time traffic), and log
    aggregation platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create near BootEvent | APPLY one_class_svm_model(process_features)
      | FILTER classification == 'anomalous'
- question: Is an unauthorized process attempting to write to physical memory?
  context: Direct write access to physical memory is a primary method for modifying
    system firmware. This question relies on enabling specific system auditing (SACLs)
    on the \\Device\\PhysicalMemory object to generate an alert whenever any process
    that is not on an explicit whitelist attempts to perform a write operation, providing
    a high-fidelity signal of tampering.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Windows Event ID 4688
  - High-value servers and administrator workstations with SACLs configured for physical
    memory and firmware-related objects.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Object:Access WHERE object_name == '\Device\PhysicalMemory' AND access_type
      == 'write' AND process_name NOT IN (whitelist)
- question: Is a legitimate, whitelisted tool accessing physical memory at an anomalously
    high rate?
  context: Even approved tools can be abused. This question establishes a baseline
    for how frequently whitelisted processes access physical memory. An alert is generated
    if a tool's access rate dramatically exceeds its historical norm, which could
    indicate it has been hijacked or is being used maliciously for repeated firmware
    modification or data dumping.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4663
  - High-value servers and administrator workstations with SACLs configured for physical
    memory and firmware-related objects.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Object:Access WHERE object_name == '\Device\PhysicalMemory' AND process_name
      IN (whitelist) | AGGREGATE count by hour | FILTER count > 99th_percentile_baseline
- question: Does a recent physical memory access event fall into a new, previously
    unseen cluster of activity?
  context: This question uses unsupervised machine learning to find novel attack
    patterns. By clustering normal physical memory access events based on their features
    (process, user, time of day), the system can identify new, small clusters of activity
    that represent a deviation from established behaviors, potentially revealing
    a new or low-and-slow firmware access technique.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4663
  - High-value servers and administrator workstations with SACLs configured for physical
    memory and firmware-related objects.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Object:Access WHERE object_name == '\Device\PhysicalMemory' | APPLY
      clustering_model(process, user, time) | INVESTIGATE new_or_small_clusters
- question: Is a known bootkit or firmware-level defense evasion tool being executed
    or written to disk?
  context: This question focuses on detecting tools specifically designed to subvert
    security controls at the firmware level. By comparing file hashes from process
    creation and file write events against a threat intelligence list of known bootkits
    (e.g., FinFisher components), analysts can identify critical attempts to establish
    a stealthy, persistent foothold.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - All endpoints and servers, particularly those running critical security software
    (EDR, AV).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create OR File:Create WHERE hash IN (known_bootkit_hashes)
- question: Has a new, unsigned, or low-prevalence driver been loaded on a system?
  context: Malicious bootkits often rely on loading a malicious driver to gain kernel-level
    control. This question aims to detect this by baselining all normally loaded
    drivers on a system and alerting on any newly observed driver that is either
    unsigned or has a very low prevalence across the enterprise, as these are strong
    indicators of suspicious activity.
  answer_sources:
  - Windows Event ID 7 (Sysmon ImageLoad)
  - All endpoints and servers, particularly those running critical security software
    (EDR, AV).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Image:Load WHERE image_type == 'driver' AND (is_signed == false
      OR prevalence(hash) < 1%)
- question: Does a driver load event exhibit high-risk characteristics based on the
    loading process and driver metadata?
  context: This question provides a more nuanced, risk-based approach to detecting
    malicious driver loads. A machine learning model scores each driver load event
    based on a combination of features, such as the signature status of the loading
    process and the driver itself, the user context, and the driver's prevalence.
    A high-risk score indicates a likely attempt at defense evasion.
  answer_sources:
  - Windows Event ID 7 (Sysmon ImageLoad)
  - All endpoints and servers, particularly those running critical security software
    (EDR, AV).
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Image:Load WHERE image_type == 'driver' | APPLY classification_model(process_features,
      driver_features) | FILTER score > threshold
- question: Is the `bcdedit.exe` utility being used to disable boot-time security
    controls?
  context: Adversaries may abuse the legitimate `bcdedit.exe` utility to weaken a
    system's security posture. This question creates a high-priority alert when `bcdedit.exe`
    is executed with specific command-line arguments known to disable critical security
    features like boot status policy, test signing, or integrity services.
  answer_sources:
  - Windows Event ID 4688
  - All UEFI-based endpoints and servers, especially those with Secure Boot enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process_name == 'bcdedit.exe' AND command_line
      CONTAINS ('testsigning on', 'integrityservices disable')
- question: Is `bcdedit.exe` being used by an unauthorized user or at an anomalous
    frequency?
  context: This question focuses on the behavioral context of `bcdedit.exe` execution.
    Since this tool is rarely used during normal operations, any execution by a non-administrative
    user or a statistical spike in usage by an administrator is highly anomalous and
    warrants immediate investigation for potential boot configuration tampering.
  answer_sources:
  - Windows Event ID 4688
  - All UEFI-based endpoints and servers, especially those with Secure Boot enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process_name == 'bcdedit.exe' | FILTER user
      NOT IN (admins) OR frequency > 99th_percentile_baseline
- question: Is the execution of `bcdedit.exe` part of a suspicious sequence of commands?
  context: Malicious actions rarely occur in isolation. This question seeks to place
    the execution of `bcdedit.exe` in a broader context. By using a sequence analysis
    model, it can identify if the boot modification command occurred shortly after
    other suspicious activities, such as connecting to a low-reputation domain or
    downloading an unsigned file, creating a high-confidence alert for a malicious
    attack chain.
  answer_sources:
  - Windows Event ID 4688
  - Zeek dns.log
  - All UEFI-based endpoints and servers, especially those with Secure Boot enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventSequences | APPLY hmm_model | FILTER sequence_includes(low_rep_domain,
      unsigned_download, bcdedit_execution)
- question: Is a network connection occurring after boot but before the primary security
    agent has started?
  context: A key goal of a firmware implant is to operate before security monitoring
    begins. This question identifies this "blind spot" by correlating the OS boot
    time with the security service start time. Any outbound network connection that
    occurs within this window is a critical, high-confidence indicator of a pre-monitoring
    C2 channel.
  answer_sources:
  - Zeek conn.log
  - Windows System Event Log (Event ID 6009)
  - Windows System Event Log (Event ID 7036)
  - Endpoint devices, network firewalls and sensors, and log aggregation platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FIND BootEvent, SecurityServiceStartEvent, Network:Connect | FILTER Network:Connect.time
      BETWEEN BootEvent.time AND SecurityServiceStartEvent.time
- question: Is the startup time for the primary security service anomalously long?
  context: A sophisticated bootkit may actively interfere with security software by
    delaying its startup, giving the malware more time to execute unmonitored. This
    question detects such behavior by baselining the normal time delta between OS
    boot and security service start, alerting on any host where this delay becomes
    statistically significant.
  answer_sources:
  - Windows System Event Log (Event ID 6009)
  - Windows System Event Log (Event ID 7036)
  - Endpoint devices, network firewalls and sensors, and log aggregation platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE BootEvent with SecurityServiceStartEvent | CALCULATE time_delta
      | FILTER time_delta > mean + 3*std_dev
- question: Is there an unusually high volume of outbound network traffic shortly
    after boot?
  context: A firmware implant may perform significant C2 communication or data exfiltration
    immediately after the system boots. This question aims to detect this by using
    a forecasting model to predict the expected volume of outbound network data in
    the first five minutes post-boot. An observed volume that significantly exceeds
    the prediction indicates anomalous activity.
  answer_sources:
  - Zeek conn.log
  - Windows System Event Log (Event ID 6009)
  - Endpoint devices, network firewalls and sensors, and log aggregation platform.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Network:Connect within 5min of BootEvent | AGGREGATE sum(bytes)
      | APPLY forecasting_model | FILTER actual_bytes > predicted_confidence_interval
- question: Is there a direct attempt to kill, stop, or unload a security sensor process,
    service, or driver?
  context: This question looks for blatant defense evasion activity. It creates a critical
    alert when common system utilities like `taskkill.exe`, `sc.exe`, or `fltmc.exe`
    are used with command-line arguments that explicitly target the processes, services,
    or filter drivers of known security products, indicating a direct attempt to
    disable them.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4719
  - Windows System Event Log (Event ID 7034)
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 16 (Sysmon Service Configuration Change)
  - All endpoints and servers with host-based security sensors installed.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process_name IN ('taskkill.exe', 'sc.exe')
      AND command_line CONTAINS (security_service_name)
- question: Are security services failing or stopping more frequently than the established
    enterprise baseline?
  context: This question provides a statistical approach to detecting security sensor
    tampering. Instead of a single event, it monitors the overall health of security
    services by calculating their Mean Time Between Failures (MTBF). A significant
    drop in MTBF on a host or group of hosts compared to the enterprise baseline can
    indicate a persistent, successful campaign to disable security controls.
  answer_sources:
  - Windows System Event Log (Event ID 7034)
  - Windows System Event Log (Event ID 7036)
  - All endpoints and servers with host-based security sensors installed.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Service:Stop OR Service:Fail WHERE service_name IN (security_services)
      | CALCULATE MTBF | FILTER MTBF < enterprise_baseline
- question: Has a host with other indicators of persistence also experienced a security
    service failure?
  context: This question focuses on correlating events to build a higher-confidence
    picture of an attack. A single security service error is often low-priority. However,
    if that error occurs on a host that has already accumulated a high risk score
    from other suspicious activities (e.g., anomalous firmware utility execution),
    the event's severity is dynamically increased, creating a composite alert for
    successful defense evasion.
  answer_sources:
  - Windows System Event Log (Event ID 7034)
  - All other playbook data sources
  - All endpoints and servers with host-based security sensors installed.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Service:Fail | IF host.risk_score > threshold THEN RAISE_SEVERITY(alert)