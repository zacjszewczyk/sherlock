name: T1542.001: System Firmware
id: 5e6a9f1a-8c4d-4f3b-8e7a-1b9c0d2e3f4a
description: This playbook helps investigate if an adversary is maintaining persistence or evading defenses through system firmware modification. It provides questions to detect malicious firmware activity by looking for known malicious file hashes, suspicious execution of firmware management utilities, anomalous boot-time processes and network connections, unauthorized access to physical memory, execution of tools that modify Boot Configuration Data (BCD), pre-EDR network activity, and attempts to terminate or reconfigure security sensors.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Are there any process or file creation events where the file hash matches a known malicious firmware utility?
  context: This question aims to identify the direct use of known malicious tools designed for firmware modification. By comparing file hashes from process and file creation events against a threat intelligence feed, analysts can detect specific threats like LoJax or TrickBoot, providing a high-confidence indicator of a persistence attempt via system firmware.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Critical system endpoints (e.g., domain controllers, database servers) and administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events OR file_creation_events
      WHERE file_hash IN known_malicious_firmware_utility_hashes
      RETURN hostname, process_name, file_hash, timestamp
- question: Have any new or low-prevalence process hashes, potentially indicating unknown firmware utilities, been observed across the enterprise?
  context: This question helps uncover previously unseen or custom malware. Adversaries may use custom tools to avoid signature-based detection. By identifying process hashes that exist on only a few machines, analysts can pinpoint anomalous executables that warrant deeper inspection for firmware modification capabilities.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Critical system endpoints (e.g., domain controllers, database servers) and administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      GROUP BY file_hash
      CALCULATE host_count = unique_count(hostname)
      CALCULATE total_hosts = total_unique_hosts_in_enterprise
      CALCULATE prevalence = (host_count / total_hosts) * 100
      FILTER prevalence < 1
      RETURN file_hash, prevalence, host_count
- question: Can machine learning models identify new, unknown processes exhibiting behaviors consistent with firmware modification?
  context: This question leverages machine learning to move beyond simple signatures and prevalence analysis. By training a model on the characteristics of known malicious and benign activities, it becomes possible to score new, unclassified process executions. A high score suggests that an unknown process is behaving like a firmware modification utility, enabling proactive threat hunting.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Critical system endpoints (e.g., domain controllers, database servers) and administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT new_process_events with metadata (parent_process, user, cmd_line, hash_prevalence)
      APPLY classification_model
      FILTER risk_score > threshold
      RETURN process_details, risk_score
- question: Have known firmware utilities been executed with suspicious command-line arguments or outside of authorized maintenance windows?
  context: This question focuses on the misuse of legitimate tools. Adversaries can use standard firmware update utilities for malicious purposes. By creating a specific watchlist of tools (e.g., AFUWIN.exe) and suspicious arguments (e.g., '/writerom'), and cross-referencing with user authorization and maintenance schedules, analysts can detect legitimate tools being used illegitimately.
  answer_sources:
  - Windows Event ID 4688
  - All managed endpoints and servers, particularly those with remote management capabilities.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE process_name IN (firmware_utility_watchlist)
      AND command_line CONTAINS (suspicious_arguments)
      AND (user NOT IN (approved_admins) OR time NOT IN (maintenance_window))
      RETURN hostname, user, process_name, command_line
- question: Are there any executions of firmware utilities with unusually complex or frequent command-line arguments?
  context: This question aims to detect obfuscation or anomalous usage patterns of legitimate tools. By baselining the normal command-line entropy and execution frequency for firmware utilities, analysts can spot deviations. A significant spike in entropy could indicate obfuscated commands, while a surge in frequency might signal automated or scripted malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - All managed endpoints and servers, particularly those with remote management capabilities.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH user, host:
        CALCULATE baseline_entropy and baseline_frequency for firmware_utility command_lines
      SEARCH new process_creation_events for firmware_utility
      IF current_entropy > (baseline_entropy + 3*std_dev) OR current_frequency > 95th_percentile
        ALERT on anomalous execution
- question: Has there been an anomalous, enterprise-wide spike in the execution of firmware utilities?
  context: This question seeks to identify large-scale, coordinated campaigns. While individual utility executions might be missed, a time-series model monitoring the aggregate frequency across the enterprise can detect a sudden, widespread increase in activity. An alert generated by this model could be the first sign of an automated, network-wide attack on system firmware.
  answer_sources:
  - Windows Event ID 4688
  - All managed endpoints and servers, particularly those with remote management capabilities.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT aggregate_firmware_utility_execution_counts over time
      APPLY time-series anomaly detection model (e.g., ARIMA)
      FILTER observed_count > predicted_confidence_interval
      RETURN timestamp, observed_count, predicted_count
- question: Are there any non-standard processes launching or anomalous network connections occurring immediately after a system boot?
  context: This question targets persistence mechanisms that execute at boot time. By correlating boot events with subsequent process and network activity, analysts can identify suspicious behavior. A process launching from a temporary directory or a network connection to a non-standard port shortly after boot is a strong indicator of a firmware-based implant establishing a C2 channel.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows System Event Log (Event ID 6005/6009)
  - Endpoint devices, network gateway (for correlating boot-time traffic), and log aggregation platform.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host:
        FIND boot_event (EventID 6005/6009)
        SEARCH process_creation or network_connection within 60s of boot_event
        IF (process_path IN non-standard_locations) OR (dest_port NOT IN (80, 443))
          ALERT
- question: Is the time between system boot and the first network connection anomalously short on any hosts?
  context: This question helps detect pre-OS or very early boot network activity, which is highly suspicious. By establishing a normal baseline for how long it takes a machine to make its first network call after booting, any significant outlier (e.g., an unusually fast connection) can point to a malicious implant that activates before the full OS and its security tools are running.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows System Event Log (Event ID 6005/6009)
  - Endpoint devices, network gateway (for correlating boot-time traffic), and log aggregation platform.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host:
        CALCULATE historical distribution of (first_network_conn_time - boot_time)
      FOR EACH new boot_event:
        CALCULATE current_delta = (first_network_conn_time - boot_time)
        IF current_delta < 5th_percentile_of_historical_distribution
          ALERT on early network activity
- question: Can machine learning models identify anomalous processes that are running at boot time?
  context: This question uses machine learning to distinguish legitimate startup processes from malicious ones. A model trained on the features of normal boot-time processes (e.g., signed, known parent) can classify new processes as normal or anomalous. This is particularly effective for catching unsigned, parentless processes, which are classic signs of firmware-based persistence.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows System Event Log (Event ID 6005/6009)
  - Endpoint devices, network gateway (for correlating boot-time traffic), and log aggregation platform.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT boot-time process events with features (path, signature, parent, user)
      APPLY one-class SVM model
      FILTER classification = 'anomalous'
      RETURN process_details
- question: Are any non-whitelisted processes attempting to write to physical memory?
  context: This question seeks to detect direct manipulation of firmware in memory. Access to the \Device\PhysicalMemory object is required to flash firmware from the OS, and this action is typically only performed by a small set of legitimate utilities. By deploying a SACL to audit write access and alerting on any process not on a pre-approved whitelist, analysts can catch unauthorized firmware modification attempts.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Windows Event ID 4688
  - High-value servers and administrator workstations with SACLs configured for physical memory and firmware-related objects.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH memory_access_events (EventID 4656/4663)
      WHERE object_name = '\\Device\\PhysicalMemory' AND access_type = 'write'
      AND process_name NOT IN (whitelisted_firmware_utils)
      RETURN hostname, process_name, user
- question: Are whitelisted firmware utilities accessing physical memory with an unusually high frequency?
  context: This question is designed to detect the misuse of a legitimate, whitelisted tool. Even an approved utility can be used for malicious purposes. By baselining the normal access frequency for these tools, a percentile-based alert can trigger when a tool accesses memory far more often than it normally would, suggesting it is being controlled by a malicious script or actor.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Windows Event ID 4688
  - High-value servers and administrator workstations with SACLs configured for physical memory and firmware-related objects.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH whitelisted_process, host:
        CALCULATE baseline of historical daily access count to PhysicalMemory
      SEARCH new memory_access_events
      IF hourly_access_count > 99th_percentile of baseline
        ALERT on anomalous access frequency
- question: Are there new or unusual clusters of physical memory access activity?
  context: This question uses unsupervised machine learning to find novel attack patterns. Instead of relying on predefined rules, a clustering algorithm like DBSCAN can group similar physical memory access events based on their properties (process, user, time). Any new, small clusters that appear outside of the established normal activity groups can represent a new or low-and-slow attack technique.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Windows Event ID 4688
  - High-value servers and administrator workstations with SACLs configured for physical memory and firmware-related objects.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT memory_access_events with features (process, user, access_mask, time_of_day)
      APPLY clustering algorithm (e.g., DBSCAN)
      IDENTIFY normal clusters
      ALERT on any event not belonging to a normal cluster
- question: Are there any file hashes observed that match known bootkits or firmware-level defense evasion tools?
  context: This question aims to detect specific tools used to compromise the boot process for defense evasion. By monitoring process creation, file writes, and image loads for hashes matching a threat intelligence list of bootkits (e.g., FinFisher, GrayFish), analysts can get a high-confidence alert that an adversary is attempting to disable security controls at a very low level.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Windows Event ID 7 (Sysmon ImageLoad)
  - All endpoints and servers, particularly those running critical security software (EDR, AV).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation OR file_write OR image_load events
      WHERE file_hash IN (known_bootkit_hashes)
      RETURN hostname, event_type, process_name, file_hash
- question: Have any new, unsigned, or low-prevalence drivers been loaded on any systems?
  context: This question helps find malicious drivers loaded by a bootkit to disable or bypass security software. By baselining the drivers normally loaded on a system and across the enterprise, analysts can spot anomalies. A new driver that is unsigned and has a very low prevalence (i.e., is only on one or two machines) is extremely suspicious and warrants immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Windows Event ID 7 (Sysmon ImageLoad)
  - All endpoints and servers, particularly those running critical security software (EDR, AV).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH image_load_events (Sysmon EventID 7)
      CALCULATE prevalence of driver_hash across all hosts
      IF driver is not in baseline AND driver_is_unsigned AND prevalence < 1%
        ALERT on suspicious driver load
- question: Can a machine learning model identify high-risk driver load events?
  context: This question uses a risk-based approach to detect malicious driver loading. A classification model can score the risk of a driver load event by considering multiple factors at once, such as the signature status of the process loading the driver, its parent process, and the prevalence of the driver itself. This provides a more nuanced detection than looking at any single attribute in isolation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 11 (Sysmon FileCreate)
  - Windows Event ID 7 (Sysmon ImageLoad)
  - All endpoints and servers, particularly those running critical security software (EDR, AV).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT image_load events with features (process_signature, parent_process, user, driver_signature, driver_prevalence)
      APPLY risk classification model
      FILTER risk_score > threshold
      RETURN event_details, risk_score
- question: Has the Boot Configuration Data (BCD) been modified to disable security features like integrity services or test signing?
  context: This question targets a specific defense evasion technique where an adversary uses the built-in `bcdedit.exe` tool to weaken a system's boot-time security. By monitoring for specific command-line arguments that disable security policies (e.g., `ignoreallfailures`, `testsigning on`), analysts can catch blatant attempts to make the system vulnerable to unsigned code or boot-time exploits.
  answer_sources:
  - Windows Event ID 4688
  - All UEFI-based endpoints and servers, especially those with Secure Boot enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE process_name = 'bcdedit.exe'
      AND command_line CONTAINS ('/set integrityservices disable', '/set testsigning on', etc.)
      RETURN hostname, user, command_line
- question: Is `bcdedit.exe` being used by non-administrative users or with an anomalously high frequency by administrators?
  context: This question looks for anomalous usage of the `bcdedit.exe` utility. Any execution by a standard user is highly suspicious and should be investigated. For administrators, a statistical baseline of their normal activity can help detect unusual spikes in usage, which might indicate that their account is compromised and being used to programmatically alter boot configurations across many systems.
  answer_sources:
  - Windows Event ID 4688
  - All UEFI-based endpoints and servers, especially those with Secure Boot enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events for 'bcdedit.exe'
      IF user NOT IN admin_group
        ALERT
      ELSE
        CALCULATE user's historical execution frequency
        IF current_frequency > 99th_percentile of baseline
          ALERT
- question: Is `bcdedit.exe` being executed as part of a suspicious sequence of commands?
  context: This question aims to place the execution of `bcdedit.exe` in a broader attack context. An execution by itself might be benign, but if it occurs shortly after a connection to a known malicious domain or the download of an unsigned file, it is much more likely to be part of an attack chain. A sequence analysis model can connect these disparate events to identify the full narrative of the attack.
  answer_sources:
  - Windows Event ID 4688
  - All UEFI-based endpoints and servers, especially those with Secure Boot enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT event sequences (network_conn, file_creation, process_creation)
      APPLY sequence analysis model (e.g., HMM)
      FILTER for anomalous sequences containing 'bcdedit.exe' execution after a low-reputation network connection
      RETURN full event sequence
- question: Is there any outbound network traffic occurring after an OS boot but before the EDR/AV service has started?
  context: This question is designed to catch one of the most powerful features of a bootkit: the ability to communicate before security monitoring begins. By precisely timing the OS boot event and the security service start event, analysts can define a "blind spot" window. Any network connection made during this window is a critical, high-confidence indicator of a pre-monitoring C2 channel.
  answer_sources:
  - Zeek conn.log
  - Windows System Event Log (Event ID 6009)
  - Windows System Event Log (Event ID 7036)
  - Endpoint devices, network firewalls and sensors, and log aggregation platform.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host:
        GET boot_time from EventID 6009
        GET edr_start_time from EventID 7036 for EDR service
        SEARCH network_logs for connections from host
        WHERE connection_time > boot_time AND connection_time < edr_start_time
        ALERT on pre-monitoring C2
- question: Is the time it takes for the security service to start after a boot anomalously long?
  context: This question looks for evidence of a bootkit actively delaying security software. A malicious implant might stall the EDR/AV service from starting so it has more time to perform unmonitored actions. By baselining the normal boot-to-service-start time delta for each host, analysts can detect a significant, anomalous delay and investigate it as a potential act of defense evasion.
  answer_sources:
  - Zeek conn.log
  - Windows System Event Log (Event ID 6009)
  - Windows System Event Log (Event ID 7036)
  - Endpoint devices, network firewalls and sensors, and log aggregation platform.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host:
        CALCULATE baseline_delta = mean(edr_start_time - boot_time)
      FOR EACH new boot:
        CALCULATE current_delta = edr_start_time - boot_time
        IF current_delta > (baseline_delta + 3*std_dev)
          ALERT on security service delay
- question: Is there an unusually high volume of outbound data in the first few minutes after a system boot?
  context: This question uses network volume as an indicator of malicious activity during the vulnerable boot phase. A firmware implant might use the early moments of a system boot to exfiltrate data. By using a time-series model to predict the expected data volume for a host right after it boots, any significant excess can be flagged as a potential data exfiltration or heavy C2 communication event.
  answer_sources:
  - Zeek conn.log
  - Windows System Event Log (Event ID 6009)
  - Windows System Event Log (Event ID 7036)
  - Endpoint devices, network firewalls and sensors, and log aggregation platform.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host:
        MODEL expected outbound data volume in first 5 mins post-boot
      FOR EACH new boot:
        MEASURE actual outbound volume in first 5 mins
        IF actual_volume > model_prediction_confidence_interval
          ALERT on anomalous data volume
- question: Have there been any attempts to terminate, stop, or reconfigure security sensors or their components?
  context: This question looks for direct, overt attempts to disable security tools. Adversaries will often try to kill EDR/AV processes, stop their services, or unload their drivers. By creating specific alerts for commands like `taskkill` or `sc stop` targeting security components, or for unexpected service failures, analysts can detect active and often desperate attempts at defense evasion.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4719
  - Windows System Event Log (Event ID 7034)
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 16 (Sysmon Service Configuration Change)
  - All endpoints and servers with host-based security sensors installed.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation WHERE process_name IN ('taskkill.exe', 'sc.exe') AND command_line targets (av_process, edr_service)
      OR SEARCH service_stop_events (EventID 7034, 7036) for security services not part of a change request
      ALERT
- question: Is the Mean Time Between Failures (MTBF) for security services dropping significantly on any hosts?
  context: This question provides a statistical approach to detecting a campaign of security tool tampering. While a single service crash might be a fluke, a significant drop in the average time a service stays running (MTBF) is a strong indicator of a persistent problem. If the MTBF on a host or group of hosts suddenly plummets below the enterprise baseline, it suggests a targeted effort to disable those controls.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4719
  - Windows System Event Log (Event ID 7034)
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 16 (Sysmon Service Configuration Change)
  - All endpoints and servers with host-based security sensors installed.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE enterprise_baseline_MTBF for security services using EventID 7034/7036
      FOR EACH host:
        CALCULATE current_MTBF
      IF current_MTBF is significantly lower than enterprise_baseline_MTBF
        ALERT on potential security tool tampering campaign
- question: Can a host-level risk score correlate persistence indicators with security tool tampering events to create a composite alert?
  context: This question focuses on connecting the dots between different suspicious activities. A host that has already triggered alerts for potential persistence (e.g., low-prevalence processes) is at a much higher risk. If that same host then experiences a security service error, the event's severity should be dynamically increased. This creates a high-confidence composite alert by understanding that the service error is likely a successful act of defense evasion, not a random glitch.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4719
  - Windows System Event Log (Event ID 7034)
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 16 (Sysmon Service Configuration Change)
  - All endpoints and servers with host-based security sensors installed.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE host_risk_score = 0
      ON persistence_alert for host:
        INCREASE host_risk_score
      ON security_service_error for host:
        IF host_risk_score > threshold
          GENERATE high_severity_composite_alert
        ELSE
          GENERATE low_severity_alert