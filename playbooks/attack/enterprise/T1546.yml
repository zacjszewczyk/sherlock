name: T1546: Event Triggered Execution
id: f8a5c3d4-e6f7-4b8a-91c2-d3e4f5a6b7c8
description: This playbook helps investigate whether an adversary is establishing persistence or elevating privileges by manipulating event-triggered execution mechanisms. This involves creating or modifying triggers like Registry Run Keys, Startup Folder items, WMI event subscriptions, or sensitive registry keys such as Image File Execution Options and Winlogon Notify keys. Malicious activity is often indicated by the trigger pointing to an executable in a non-standard location (e.g., %APPDATA%, %TEMP%), the executable matching a known malicious hash, or the associated command-line containing suspicious patterns. The playbook also addresses scenarios where processes launched shortly after user logon initiate unusual network connections, or where vulnerabilities like unquoted service paths are exploited to execute malicious code with elevated privileges.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any autorun registry keys or startup folder items been modified to execute a process with a known malicious hash or suspicious command line?
  context: Adversaries frequently use autorun registry keys (like `CurrentVersion\Run`) and system startup folders as a simple and effective persistence mechanism. This question aims to detect this by monitoring for changes to these locations and then checking the associated executable against threat intelligence feeds for known malicious file hashes and analyzing its command line for keywords indicative of malicious tools or techniques.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Workstations, Windows Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event 13 WHERE RegistryKey IN [Autorun Keys]) OR (Sysmon Event 11 WHERE FilePath IN [Startup Folders]) | JOIN (Sysmon Event 1) | CHECK ProcessHash against ThreatIntel | CHECK CommandLine for MaliciousStrings
- question: Is there an anomalous process executing from a common persistence location, identified by its rarity, parent-child relationship, or obfuscated command line?
  context: This question focuses on detecting unknown or novel malware that wouldn't be caught by signature-based methods. By establishing a baseline of normal processes that execute from persistence locations, analysts can use frequency analysis to spot outliers. A rare process name or an unusual parent process can be a strong indicator of compromise. Additionally, high command-line entropy can reveal attempts to obfuscate malicious commands.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Workstations, Windows Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Processes from PersistenceLocations | BASELINE ProcessName, ParentProcess per Host | DETECT LowFrequency outliers | CALCULATE CommandLineEntropy | ALERT on HighEntropy
- question: Does a newly created persistence entry exhibit a combination of features that a machine learning model classifies as malicious?
  context: This question leverages machine learning to provide a higher-fidelity signal by combining multiple weak indicators into a single risk score. Features like a rare process path, high command-line entropy, the presence of suspicious keywords (like 'powershell' or '-enc'), an unsigned executable, and an unusual parent process are collectively analyzed. A high probability score from the model suggests a sophisticated or previously unseen persistence attempt that warrants immediate investigation.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Workstations, Windows Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH New PersistenceEntries | EXTRACT Features (PathRarity, Entropy, Keywords, IsSigned, Parent) | APPLY ML_Model | ALERT on HighMaliciousScore
- question: Has a critical registry key used for event-triggered execution (e.g., Image File Execution Options) been modified to point to an executable in a suspicious, user-writable directory?
  context: Adversaries abuse specific registry keys like IFEO or Winlogon keys to hijack legitimate system processes or execute code during system events. This question aims to detect such modifications by monitoring a watchlist of these critical keys. An alert is triggered if the modification is performed by an unexpected process (not a trusted installer) and the new value points to a binary in a non-standard location like `%APPDATA%` or `C:\PerfLogs`, which are common staging areas for malware.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 13 WHERE RegistryKey IN [CriticalKeyWatchlist] | FILTER where ModifyingProcess NOT IN [TrustedInstallers] AND NewValuePath IN [SuspiciousDirs] | ALERT
- question: Has a critical registry key for event execution been modified with a value containing a statistically unusual file path?
  context: This is another behavioral detection approach that focuses on the characteristics of the file path itself, rather than the file. By baselining the normal structure of paths stored in these sensitive registry keys, analysts can spot outliers. A path with an unusual directory depth, a rare parent folder, or one that doesn't end in a known system binary can indicate that an adversary has placed a malicious executable in an unexpected location to evade detection.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 13 WHERE RegistryKey IN [CriticalKeyWatchlist] | BASELINE PathStructure per Key | DETECT Outlier in NewValuePath (e.g., depth, parent dir) | ALERT
- question: Has a modification to a sensitive event-trigger registry key been flagged as a significant anomaly by a machine learning model trained on legitimate activity?
  context: This question uses an unsupervised anomaly detection model to identify suspicious modifications without prior knowledge of malicious patterns. The model learns what constitutes 'normal' administrative activity for these keys, based on features like the modifying process, its parent, user context, and time of day. Any modification that deviates significantly from this learned norm is flagged, making this approach effective at catching novel or highly evasive techniques.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Modifications to SensitiveKeys | EXTRACT Features (ModifyingProcess, Parent, User, TimeOfDay) | APPLY AnomalyDetection_Model | ALERT on AnomalyScore
- question: Has a process, executed shortly after a user logon, established a network connection to a known malicious IP or domain?
  context: Adversaries often configure their malware to run at logon to establish persistence and immediately initiate command and control (C2) communications. This question specifically looks for this behavior by correlating process creation events that occur within a few minutes of a user logon with outbound network traffic. A connection to an IP or domain on a threat intelligence feed is a high-confidence indicator of a C2 channel being established.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Workstations, Windows Servers, Core Network Switches, DNS Servers, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Windows Event 4624) | JOIN (Sysmon Event 1) within 2 minutes | JOIN (Zeek conn.log) | CHECK DestinationIP against ThreatIntel | ALERT
- question: Is a rare or un-baselined startup process making unusual network connections, characterized by anomalous destination ports or data volumes?
  context: This question aims to detect malicious C2 activity from startup processes by focusing on behavioral anomalies. First, it identifies processes that are not typically seen at startup on a given host. Then, it scrutinizes the network behavior of these unusual processes. A connection to a rare port or an unusually large data transfer can indicate C2 activity, data exfiltration, or the download of a second-stage payload.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Workstations, Windows Servers, Core Network Switches, DNS Servers, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH StartupProcesses | DETECT LowFrequency ProcessName | ANALYZE NetworkConnections (Zeek conn.log) | ALERT on Rare DestinationPort OR Anomalous DataVolume
- question: Is there a statistically significant anomaly in the volume or pattern of process creation and network activity immediately following user logons?
  context: This question uses time series analysis to model the normal "burst" of activity that occurs after a user logs on. By learning the expected patterns and volumes of process creations and network connections over time, the model can detect deviations. A sudden, unexpected spike in activity that doesn't fit the learned pattern could signify a malicious process executing and establishing C2.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Workstations, Windows Servers, Core Network Switches, DNS Servers, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL TimeSeries of PostLogon (ProcessCount, NetworkConnectionCount) per Host | DETECT significant deviation from predicted pattern | ALERT on Anomaly
- question: Has a WMI Event Filter and Consumer been created in a short time frame where the consumer payload contains suspicious keywords like 'powershell' or '-enc'?
  context: WMI event subscriptions are a powerful and stealthy persistence mechanism. This involves creating a Filter (the trigger) and a Consumer (the action). This question seeks to detect the creation of a malicious subscription by looking for the near-simultaneous creation of these two components. The presence of script interpreters ('powershell', 'vbscript') or obfuscation indicators ('-enc', 'IEX') in the consumer's payload is a strong sign of malicious intent.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 19
  - Sysmon Event ID 20
  - Sysmon Event ID 21
  - Windows Workstations, Windows Servers, especially those with management roles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event 19) | JOIN (Sysmon Event 21) on Subscription within 5 minutes | FILTER where ConsumerPayload CONTAINS [SuspiciousKeywords] | ALERT
- question: Has a new WMI Event Consumer been created with a command-line or script payload that has unusually high entropy?
  context: To evade detection, adversaries often obfuscate the scripts and commands used in their WMI persistence mechanisms, resulting in high Shannon entropy. This question aims to detect such obfuscation by calculating the entropy of WMI consumer payloads and alerting when a new consumer has a score significantly higher than the established baseline for legitimate WMI scripts in the environment.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 19
  - Sysmon Event ID 20
  - Sysmon Event ID 21
  - Windows Workstations, Windows Servers, especially those with management roles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 21 WHERE ConsumerType IN [CommandLine, ActiveScript] | CALCULATE Entropy of Payload | BASELINE EntropyScores | ALERT on score > 95thPercentile
- question: Has a machine learning model classified a newly created WMI subscription as malicious based on its collective features?
  context: This question uses a supervised machine learning model to provide a holistic assessment of a WMI subscription's risk. By analyzing a combination of features—such as the time gap between filter and consumer creation, the creating process, payload entropy, and payload content—the model can learn to distinguish between legitimate administrative scripts and malicious persistence attempts with greater accuracy.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 19
  - Sysmon Event ID 20
  - Sysmon Event ID 21
  - Windows Workstations, Windows Servers, especially those with management roles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH New WMI Subscriptions | EXTRACT Features (TimeDelta, CreatingProcess, Entropy, Payload) | APPLY ML_Model | ALERT on HighMaliciousScore
- question: Has a process running as NT AUTHORITY\SYSTEM been observed whose file hash matches a known malicious tool or exploit?
  context: Gaining execution as NT AUTHORITY\SYSTEM is a primary goal for adversaries seeking to elevate privileges. This question provides a high-confidence method for detection by checking the file hashes of all newly created SYSTEM-level processes against a curated threat intelligence feed of known malware and specific privilege escalation tools. A match is a definitive indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Workstations, Windows Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 1 WHERE User is "NT AUTHORITY\\SYSTEM" | CHECK ProcessHash against ThreatIntel | ALERT on match
- question: Is a process running as NT AUTHORITY\SYSTEM from a statistically rare file path or initiated by an unusual parent process?
  context: Legitimate SYSTEM processes typically execute from predictable locations like `C:\Windows\System32`. Adversaries often drop their tools into user-writable directories like `%APPDATA%`. This question aims to detect this anomaly by baselining normal execution paths and parent processes for SYSTEM-level activity and alerting on any deviation, such as a SYSTEM process running from a temporary folder.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Workstations, Windows Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 1 WHERE User is "NT AUTHORITY\\SYSTEM" | BASELINE ImagePath, ParentProcess | ALERT on rare ImagePath OR rare ParentProcess
- question: Does a newly executed SYSTEM-level process exhibit a combination of features that a machine learning model classifies as likely malicious?
  context: This question applies machine learning to provide a risk score for high-privilege process executions. The model considers multiple features simultaneously, such as the process path, its parent, command-line arguments, and whether the binary is signed. This allows for the detection of suspicious activity that is highly suspect when all factors are considered together.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Workstations, Windows Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 1 WHERE User is "NT AUTHORITY\\SYSTEM" | EXTRACT Features (ImagePath, Parent, CommandLine, IsSigned) | APPLY ML_Model | ALERT on HighRiskScore
- question: Has a service with a known unquoted service path vulnerability launched a process from an unexpected, intercepted path?
  context: Unquoted service paths are a classic privilege escalation vulnerability. If a service path like `C:\Program Files\App\service.exe` is not quoted, Windows may try to execute `C:\Program.exe` first. Adversaries exploit this by placing malware at that intermediate path. This question aims to detect this specific exploit by monitoring process creations from `services.exe` for services known to be vulnerable.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 1 WHERE ParentProcess is "services.exe" AND ServiceName IN [UnquotedPathServices] | FILTER where ImagePath != IntendedPath | ALERT
- question: Has a process associated with a vulnerable service (due to unquoted path or weak permissions) been executed from a path that deviates from its established baseline?
  context: This question creates dynamic baselines for any identified service with a path-interception vulnerability. It uses frequency analysis to detect any execution path that is an outlier. This is effective against more subtle path manipulations where an adversary might replace the legitimate binary in place rather than using a path-interception trick.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCAN for VulnerableServices | ForEach VulnerableService BASELINE legitimate ImagePath | MONITOR Sysmon Event 1 for executions of Service | ALERT on deviation from baseline path
- question: Has a graph-based anomaly detection model identified a new, anomalous relationship between a service host process and the process it launched?
  context: This question models service-based process executions as a graph, where legitimate service activity forms a very stable and predictable graph structure. This analytic looks for the creation of new, rare edges, such as `services.exe` launching a process from a previously unseen directory, which would indicate a potential exploit of a path-interception vulnerability.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL ProcessGraph (Parent -> Child, Child -> ImagePath) for ServiceExecutions | DETECT new or anomalous edges (e.g., services.exe -> rare path) | ALERT
- question: Has a persistence mechanism been modified by a standard user, followed shortly by the execution of a process as NT AUTHORITY\SYSTEM?
  context: This question looks for a classic privilege escalation chain where an adversary with standard user access modifies a file or registry key that is subsequently executed by a high-privilege process. This analytic correlates the low-privilege modification event with the subsequent high-privilege execution event. The short time window between the two events strongly implies a cause-and-effect relationship.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event 11 or 13 on PersistenceLocation WHERE User is Standard) | JOIN (Sysmon Event 1 WHERE User is SYSTEM) within 5 minutes | ALERT
- question: Has an event trigger been modified by a user who does not typically interact with it, followed by a privileged execution?
  context: This is a behavioral approach that establishes a baseline of which users or accounts normally modify specific persistence locations. A modification by a user who has never touched that key or file before is suspicious. When this statistically rare modification is followed closely by a privileged process execution, it strengthens the signal that this is likely a malicious privilege escalation event.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE User-Object modification pairs | DETECT outlier modification event | IF followed by PrivilegedExecution within 5 minutes, ALERT
- question: Has a sequence of events (e.g., user modification followed by privileged execution) been classified as a malicious privilege escalation chain by a sequence-aware machine learning model?
  context: This question uses advanced machine learning (RNN/LSTM) to understand the temporal patterns of an attack. The model is trained to recognize the entire sequence of events that constitutes a privilege escalation, allowing it to distinguish complex malicious chains from benign administrative workflows that might look similar at first glance.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CREATE EventSequences [ModUserPriv, ModEvent, Target, TimeDelta, ExecEvent, ExecPriv] | APPLY RNN_Model | ALERT on MaliciousSequenceClassification
- question: Has a privileged process launched by an event trigger (like Task Scheduler) spawned a suspicious child process (e.g., cmd.exe) or connected to a known malicious IP?
  context: Once an adversary achieves privileged execution via an event trigger, they often use that access to launch an interactive shell (`cmd.exe`, `powershell.exe`) or establish a C2 channel. A SYSTEM-level process spawned by `taskeng.exe` should not typically launch a command prompt or connect to a malicious IP; observing this behavior is a strong indicator of compromise.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Servers, Domain Controllers, Core Network Switches, DNS Servers, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Sysmon Event 1 WHERE User is SYSTEM AND Parent in [TriggerProcesses] | ALERT if ChildProcess in [cmd, powershell] | JOIN NetworkLogs | ALERT if DestinationIP on Blocklist
- question: Is a privileged, event-triggered process exhibiting anomalous behavior, such as spawning an unusual child process or connecting to a rare domain?
  context: This question uses baselining to detect suspicious post-exploitation activity. It learns the normal behavior of legitimate high-privilege tasks. An alert is triggered when a process launched by a trigger like Task Scheduler deviates from this norm, for example, by spawning a child process it has never spawned before or connecting to a low-prevalence domain. This can uncover novel C2 techniques.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Servers, Domain Controllers, Core Network Switches, DNS Servers, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH SYSTEM process where Parent in [TriggerProcesses] | BASELINE ChildProcesses and NetworkDestinations | ALERT on outlier ChildProcess OR low-prevalence Domain
- question: Has a graph-based model detected an anomalous process execution chain originating from a privileged, event-triggered process?
  context: This question applies graph analysis to detect complex post-exploitation behavior. By modeling the entire process tree, the analytic can learn what normal sequences of child processes look like for legitimate SYSTEM-level tasks. It can then flag anomalous structures, such as a service host spawning PowerShell, which in turn launches `rundll32.exe`. This structural anomaly detection is powerful for identifying multi-stage attacks.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Servers, Domain Controllers, Core Network Switches, DNS Servers, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL ProcessExecutionGraph for Triggered SYSTEM processes | TRAIN on legitimate subgraphs | DETECT anomalous subgraphs (e.g., svchost -> powershell -> rundll32) | ALERT