name: T1082: System Information Discovery
id: d8f5b3a0-1e9c-4b7f-8c6d-9e0a1b2c3d4e
description: This playbook addresses the information requirement, "Has an adversary performed system information discovery on managed assets?". It focuses on detecting techniques adversaries use to gather details about a system's configuration, operating system, and hardware. Detections include identifying the execution of known malicious discovery tools by hash, recognizing suspicious command-line patterns and arguments, flagging discovery commands run from unusual parent processes or by service accounts, identifying statistical spikes in discovery command frequency, detecting network sweeps for remote administration, and monitoring for anomalous cloud API calls related to infrastructure discovery.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any known malicious or dual-use system discovery tools been executed on our systems?
    context: Adversaries often use pre-compiled, publicly available tools like WinPEAS or Seatbelt to automate system reconnaissance. Detecting the execution of these tools by their file hash is a high-fidelity method for identifying malicious activity, as it directly ties an observed process to a known threat. This question focuses on leveraging threat intelligence to find these known-bad tools.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events WHERE process_hash IN known_malicious_discovery_tool_hashes
  - question: Are there any low-prevalence, unsigned executables running that could be custom or unknown discovery tools?
    context: Sophisticated adversaries may use custom or modified discovery tools that are not present in public threat intelligence feeds. This question aims to find these unknown tools by focusing on statistical rarity. An executable that is seen on very few endpoints and is not signed by a trusted software publisher is suspicious and warrants investigation as it may be a custom tool used for reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events | CALCULATE prevalence(process_hash) across enterprise | FILTER prevalence < 1% AND is_signed = false
  - question: Can we use a machine learning model to identify process creation events that are likely to be system discovery activities?
    context: This question explores using machine learning to move beyond simple rules and statistics. By training a model on various features of a process event (e.g., parent process, command-line entropy, user context), we can create a risk score that holistically assesses the likelihood of malicious discovery. This helps identify novel or obfuscated techniques that might evade simpler detection methods.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SCORE process_creation_events WITH classification_model | FILTER risk_score > high_threshold
  - question: Have any command-lines or PowerShell scripts been executed containing strings indicative of system information discovery?
    context: Adversaries frequently use built-in operating system utilities for reconnaissance to blend in with normal administrative activity (a "living-off-the-land" approach). This question focuses on creating specific rules to detect the use of commands like `systeminfo`, `wmic os get`, or `Get-ComputerInfo`, as well as command chaining or output redirection, which are often used to script and exfiltrate discovery results.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH (command_line_events OR powershell_script_block_logs) WHERE command_text MATCHES regex_for_discovery_commands_and_chaining
  - question: Are there any command-line executions with unusually high entropy that could indicate obfuscated discovery commands?
    context: To evade simple keyword-based detection, adversaries may obfuscate their commands using techniques like Base64 encoding or character substitution. This often results in command-line arguments with high character randomness, or entropy. This question aims to identify such obfuscation by flagging commands whose entropy significantly deviates from the established baseline for that process or host.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH command_line_events | CALCULATE entropy(command_arguments) | FILTER entropy > baseline_99th_percentile for process_type
  - question: Has the volume of discovery-related command executions for any user or host exceeded predicted levels?
    context: While a single discovery command might be benign, a sudden burst of many such commands from a single user or host is highly suspicious and often indicates automated reconnaissance scripting. This question focuses on using time-series forecasting to model the *expected* volume of these commands and alert when the observed activity significantly surpasses the prediction, indicating an anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: FORECAST discovery_command_volume per (user, host) | COMPARE actual_volume with forecast | ALERT on significant_deviation
  - question: Have any system discovery commands been executed by unusual parent processes or non-interactive service accounts?
    context: The context of a process's execution is critical for determining intent. A discovery command like `whoami` run from an administrator's `cmd.exe` is normal. The same command spawned by Microsoft Word (`winword.exe`) or a web server's service account is highly anomalous. This question seeks to identify these suspicious process lineages and user contexts.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH discovery_command_events WHERE parent_process NOT IN approved_parent_list OR user_account_type = 'service'
  - question: Are there any rare combinations of parent process, child process, and user account type involving discovery commands?
    context: This question uses statistical frequency analysis (stack counting) to find "needle in a haystack" events. By profiling all process execution relationships across the enterprise, we can identify combinations that are extremely rare. A rare triple that involves a discovery command (e.g., `outlook.exe` spawning `powershell.exe` as a standard user to run `Get-ComputerInfo`) is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events | GROUP BY (parent_process, child_process, user_account_type) | COUNT occurrences | FILTER child_process IN discovery_commands AND count < 5
  - question: Can we use graph analysis to detect unusual process execution chains related to system discovery?
    context: Process execution activity can be modeled as a large graph, where normal administrative and user activity forms a predictable structure. This question proposes using graph-based anomaly detection to find deviations from this norm. An unusual path, such as a browser spawning a shell which then runs a discovery tool, would stand out as an anomalous structure in the graph, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: BUILD process_execution_graph from events | APPLY graph_anomaly_detection (e.g., PageRank) | IDENTIFY anomalous_lineages involving discovery_tools
  - question: Has any user or host executed an excessive number of distinct discovery commands in a short time window?
    context: This question focuses on detecting a high volume of reconnaissance activity using a simple but effective threshold. An adversary or their script running a wide variety of discovery commands (`hostname`, `ipconfig`, `netstat`, `whoami`, etc.) in a few minutes is a strong signal of active, manual or scripted reconnaissance. This rule aims to catch this burst of activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH discovery_command_events | COUNT distinct commands per (user, host) in 5_min_window | ALERT if count > 15
  - question: Has the rate of discovery command execution for any user or host spiked significantly above its statistical baseline?
    context: This question aims to detect anomalous spikes in activity by comparing current behavior to a user or host's own historical baseline. Using a standard deviation-based threshold ($$ > \\mu + 3\\sigma $$) provides a more tailored and robust detection than a fixed global threshold, as it automatically adjusts for entities that are normally more or less active, reducing false positives.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: CALCULATE count of discovery_commands per 10_min_interval for each (user, host) | COMPARE count to historical_baseline (mean, std_dev) | ALERT if count > mean + 3*std_dev
  - question: Can time-series analysis identify anomalous spikes in discovery command activity that are not explained by normal patterns?
    context: Normal enterprise environments have operational rhythms (e.g., daily backups, weekly patch scripts) that can trigger discovery commands. This question proposes using a time-series decomposition model to separate these predictable trend and seasonal patterns from the true, unexplained residual activity. Applying anomaly detection to this residual data allows for more precise identification of malicious spikes that are not part of normal operations.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: APPLY time_series_decomposition to discovery_command_event_stream | APPLY anomaly_detection_algorithm to residual_component | ALERT on identified_anomalies
  - question: Has a single host connected to an excessive number of other hosts on remote administration ports, suggesting a network sweep?
    context: After gaining a foothold, adversaries often perform network sweeps to discover other live hosts and services. This question aims to detect this behavior by setting a threshold for the number of unique destinations a single source connects to on common remote administration ports (RPC, SMB, WinRM) within a short time frame. This is a classic indicator of horizontal reconnaissance.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Network taps/SPAN ports feeding Zeek sensors at network choke points. Windows Firewall logs and Security Event Logs from all servers.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_connections on ports (135, 445, 5985, 5986) | COUNT unique destination_hosts per source_host in 10_min_window | ALERT if count > 20
  - question: Are there any statistical outliers in the number of unique remote connections made by a host on discovery-related ports?
    context: Instead of a fixed threshold, this question uses a statistical method (the IQR method) to find hosts exhibiting anomalously high fan-out behavior. This approach is more adaptable than a static number, as it defines "too many" relative to the normal behavior observed in the network, making it effective at identifying outliers without requiring manual tuning.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Network taps/SPAN ports feeding Zeek sensors at network choke points. Windows Firewall logs and Security Event Logs from all servers.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: COUNT unique destination_hosts per source_host per hour on discovery_ports | CALCULATE IQR for all source_host counts | ALERT if host_count > Q3 + 1.5 * IQR
  - question: Can graph-based community detection identify hosts that are anomalously connecting to systems outside their normal activity clusters?
    context: Network traffic forms natural communities (e.g., web servers talk to specific databases, developer workstations talk to source control). This question proposes modeling this behavior as a graph and using community detection algorithms to learn these normal clusters. An alert is generated when a host suddenly starts communicating with many systems outside of its established community, which can indicate lateral movement and discovery attempts.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Network taps/SPAN ports feeding Zeek sensors at network choke points. Windows Firewall logs and Security Event Logs from all servers.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: BUILD network_graph (source, destination) from Zeek logs | APPLY community_detection | IDENTIFY hosts connecting to nodes outside their normal_community
  - question: Have any non-administrative cloud principals executed discovery-related API calls?
    context: In cloud environments, adversaries can perform reconnaissance by querying cloud APIs (e.g., AWS `DescribeInstances`). This question focuses on a high-fidelity detection method: alerting when any principal *not* on an approved list of administrators (e.g., a service role for an application, a developer user) makes these types of discovery calls. This is often a strong indicator of a compromised credential or misconfigured permission.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider logging services aggregating logs from all production and development subscriptions/accounts.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH cloud_audit_logs for discovery_api_calls (e.g., ec2:Describe*, compute.instances.get) | FILTER principal NOT IN approved_admin_list
  - question: Has any cloud principal shown a statistically significant increase in discovery API calls or used a sensitive API for the first time?
    context: This question seeks to baseline the normal API activity for each cloud principal (user or role) and detect deviations. An alert is triggered if a principal's rate of discovery API calls suddenly spikes above their own history (e.g., >98th percentile) or if they use a sensitive, information-gathering API call that they have never used before. This "first time seen" logic is very effective for detecting privilege escalation or credential abuse.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider logging services aggregating logs from all production and development subscriptions/accounts.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: For each principal, SEARCH cloud_audit_logs for discovery_api_calls | ALERT if call_count > 98th_percentile_of_history OR if a sensitive_api_call is new for that principal
  - question: Has any cloud principal's behavior shifted anomalously towards a pattern indicative of reconnaissance, based on their API call history?
    context: This question proposes a sophisticated machine learning approach to profile cloud principals. By clustering principals based on their patterns of API calls, we can define what "normal" behavior looks like for different types of roles (e.g., 'developer', 'application', 'database admin'). An alert is triggered if a principal's behavior pattern causes it to suddenly shift from its normal cluster to a cluster associated with reconnaissance or administrative activity, indicating a significant and suspicious change in function.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider logging services aggregating logs from all production and development subscriptions/accounts.
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: CLUSTER cloud_principals by API_call_behavior_vectors | IDENTIFY principals that shift from their baseline_cluster to a recon_cluster