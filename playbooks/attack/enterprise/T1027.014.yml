name: T1027.014: Polymorphic Code
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is using polymorphic code to evade defenses. It focuses on identifying suspicious network connections from rare processes to known malicious C2 infrastructure, detecting obfuscated command lines indicative of packers or loaders, finding parent processes that rapidly spawn multiple unique child processes, and spotting variations in network beaconing signatures (like JA3/JA4 or User-Agents) that suggest a polymorphic C2 channel.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process initiated a network connection to a destination known to be associated with polymorphic malware C2 infrastructure?
    context: This question aims to detect direct communication with known command-and-control (C2) servers used by polymorphic malware families like Qakbot or Emotet. By correlating process creation events with network logs and threat intelligence, analysts can identify compromised systems beaconing out to malicious infrastructure, which is a strong indicator of infection.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network Egress/Ingress Points (Firewall, Proxy)
      - DNS Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events JOIN network_connection_logs | LOOKUP destination_ip_or_domain in polymorphic_c2_threat_intel_list | WHERE match_found
  - question: Is a rare process communicating with a rare external destination, suggesting a new or unique malware variant?
    context: This question identifies suspicious activity by focusing on anomalies. Polymorphic malware often creates unique process executables on each infected host. When such a rare process communicates with an equally rare destination IP address (not seen elsewhere in the enterprise), it's a strong statistical indicator of a targeted or newly deployed malware sample trying to establish a C2 channel while avoiding detection based on known indicators.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network Egress/Ingress Points (Firewall, Proxy)
      - DNS Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_connections | CALCULATE prevalence(process_hash) and prevalence(destination_ip) | WHERE prevalence(process_hash) < 5th_percentile AND prevalence(destination_ip) < 5th_percentile
  - question: Does a new process-initiated network connection exhibit characteristics that a machine learning model identifies as malicious or polymorphic?
    context: This question leverages machine learning to detect novel threats that may not have known indicators. By training a model on features from both the host (process name entropy, command line length) and the network (IP reputation, JA3 hash), the system can learn the subtle patterns of malicious behavior. It can then score new connections in real-time, flagging those that deviate from benign activity, even if the specific malware or C2 has never been seen before.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network Egress/Ingress Points (Firewall, Proxy)
      - DNS Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SCORE new_process_network_connections using trained_ML_model | FEATURES include process_name_entropy, command_line_length, destination_ip_reputation, JA3_hash, etc. | ALERT on score > confidence_threshold
  - question: Has a process been executed with a command line that matches known patterns for obfuscation, loaders, or packers?
    context: This question seeks to find explicit evidence of code obfuscation and suspicious execution techniques in command-line arguments. Adversaries frequently use tools like PowerShell's base64 encoding, rundll32.exe to execute code from non-standard DLLs, or mshta.exe to run remote scripts, all in an effort to hide their malicious payload. Detecting these patterns is a high-fidelity way to identify the initial stages of malware execution.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events | FILTER command_line MATCHES REGEX for (powershell -e, rundll32 with temp path, mshta with remote script) | ALERT on match
  - question: Is a process being launched with an unusually complex or random-looking command line, suggesting obfuscation?
    context: This question uses information theory to detect obfuscation. Malicious command lines, especially those containing encrypted or encoded scripts, tend to have higher entropy (more randomness) than benign administrative commands. By establishing a baseline for normal command-line entropy for common parent processes (like powershell.exe), we can flag outliers that are statistically likely to be obfuscated, indicating an attempt to hide malicious code.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events | GROUPBY parent_process | CALCULATE shannon_entropy(command_line) | ALERT where entropy > 99th_percentile_of_baseline
  - question: Does the structure and sequence of a process command line appear anomalous or malicious according to a Natural Language Processing (NLP) model?
    context: This question applies advanced NLP techniques to treat command lines as a form of language. A trained model can learn the "grammar" of normal system commands and identify when a new command's structure, arguments, and sequencing are anomalous. This is particularly effective against polymorphic malware that generates complex but structured loader commands, allowing for detection beyond simple keyword or entropy analysis.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: ANALYZE process_command_lines with NLP_classifier_model | MODEL trained to distinguish benign vs malicious command structures | ALERT on 'malicious' classification
  - question: Has a typically non-spawning process (e.g., WINWORD.EXE) created a new, unseen executable in a temporary or user-writable location?
    context: This question focuses on high-risk behavior from common applications. Processes like Microsoft Word or Adobe Acrobat should not be creating and running new executable files. When they do, especially in user directories like %APPDATA% or %TEMP%, it is a strong indicator of a malicious document or exploit dropping and executing a payload, a common technique for polymorphic droppers.
    answer_sources:
      - Windows Event ID 4688 (with process hash field populated)
      - Endpoint devices
      - Sandboxing/Analysis Environments
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events | FILTER parent_process IN (winword.exe, outlook.exe) AND child_process_path IN (%APPDATA%, %TEMP%) AND child_process_hash is new | ALERT on match
  - question: Is a single parent process rapidly spawning multiple child processes that are all unique (have different file hashes)?
    context: This question directly targets the core behavior of a polymorphic engine. To evade signature-based detection, such an engine will generate slightly different versions of its payload for each execution. Observing a single parent process creating many child processes in a short time, where almost every child has a unique hash, is a tell-tale sign of this activity. A high uniqueness ratio strongly suggests polymorphism.
    answer_sources:
      - Windows Event ID 4688 (with process hash field populated)
      - Endpoint devices
      - Sandboxing/Analysis Environments
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events over 10_min_window | GROUPBY parent_pid | CALCULATE unique_ratio = unique_count(child_hash) / total_count(child_process) | ALERT where unique_ratio > 0.9
  - question: Can an unsupervised machine learning model identify anomalous process execution chains that deviate from normal system behavior?
    context: This question uses unsupervised learning to find unknown-unknowns. By clustering all process creation events based on features like parent name and child path entropy, the algorithm can learn what "normal" process behavior looks like. Any events that don't fit into these large, dense clusters (i.e., outliers) are by definition anomalous and warrant investigation. This can uncover polymorphic droppers creating files in unusual locations, which would be flagged as outliers.
    answer_sources:
      - Windows Event ID 4688 (with process hash field populated)
      - Endpoint devices
      - Sandboxing/Analysis Environments
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CLUSTER process_creation_events with DBSCAN | FEATURES include parent_process_name, entropy(child_path), is_child_hash_unique | IDENTIFY and ALERT on outliers or small clusters
  - question: Is there network traffic containing User-Agents or JA3/JA4 hashes known to be used by polymorphic C2 frameworks like Cobalt Strike or Metasploit?
    context: This question aims to detect known malleable C2 frameworks, which are often used to deploy polymorphic payloads. These frameworks have default or commonly used network signatures (User-Agents, TLS fingerprints) that can be matched against threat intelligence. A match provides a strong lead that an advanced C2 framework is active on the network, even if the payload itself is polymorphic.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network Egress/Ingress Points (Firewall, Proxy)
      - DNS Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_logs (http, ssl) | LOOKUP user_agent_or_ja3_hash in malleable_c2_threat_intel_list | ALERT on match
  - question: Is a host exhibiting beaconing behavior to a single destination while frequently changing its network signature (JA3 hash or User-Agent)?
    context: This question targets the evasive tactics of polymorphic C2 channels. To avoid detection by network signatures, the malware will alter its TLS client hello (changing the JA3 hash) or its HTTP User-Agent for each beacon. A legitimate client will consistently use the same signature. Therefore, observing a high count of unique signatures from one host to one destination over time is a strong indicator of a polymorphic C2 channel.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network Egress/Ingress Points (Firewall, Proxy)
      - DNS Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH beaconing_traffic over 24_hour_window | GROUPBY source_ip, destination_ip | CALCULATE cardinality(ja3_hash), cardinality(user_agent) | ALERT if cardinality > 98th_percentile_baseline
  - question: Has a host's network traffic pattern, including the diversity of its network signatures, deviated significantly from its own historical baseline?
    context: This question uses time-series analysis to learn the normal "rhythm" of a host's network behavior. A model learns what is normal for that specific host in terms of data volume, connection frequency, and the variety of network signatures used. An alert is triggered when the current behavior significantly deviates from this learned pattern. This can detect a polymorphic C2 becoming active, as it would introduce anomalies in connection counts and signature entropy.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network Egress/Ingress Points (Firewall, Proxy)
      - DNS Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: MODEL host_network_traffic with time_series_anomaly_detection (LSTM, ARIMA) | FEATURES include bytes_per_hour, connections_per_hour, entropy(ja3_hashes_per_hour) | ALERT on significant deviation from predicted behavior