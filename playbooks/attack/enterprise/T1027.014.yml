name: T1027.014: Polymorphic Code
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is using polymorphic code to evade defenses. It focuses on identifying processes that connect to known polymorphic malware C2 infrastructure, processes created with obfuscated command lines or packing techniques, parent processes spawning multiple unique child processes in a short time, and network beacons that exhibit significant variations in their transport or application layer characteristics over time.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are processes making network connections to destination IPs or domains associated with known polymorphic malware C2 servers?
  context: This question aims to identify direct communication with known malicious infrastructure. By correlating process execution with network connections and comparing destinations against a threat intelligence feed, analysts can quickly spot high-confidence indicators of compromise related to polymorphic malware like Qakbot, Emotet, or TrickBot.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network Egress/Ingress Points (Firewall, Proxy)
  - DNS Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: JOIN process_events ON (hostname, timestamp) WITH network_logs ON (hostname, timestamp) WHERE network_logs.destination IN threat_intel_feed
- question: Are rare processes communicating with rare external destinations, suggesting a potential polymorphic malware infection?
  context: Polymorphic malware often uses unique executables for each infection, resulting in low prevalence across an enterprise. Similarly, their C2 infrastructure may use unique or rapidly changing domains/IPs. This question identifies these 'rare-on-rare' connections, which are statistically anomalous and highly suspicious, by flagging processes and destinations that fall below a low prevalence threshold (e.g., 5th percentile).
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network Egress/Ingress Points (Firewall, Proxy)
  - DNS Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: CALCULATE prevalence(process_hash), prevalence(destination_ip) FOR all_connections; FILTER WHERE prevalence(process_hash) < 5th_percentile AND prevalence(destination_ip) < 5th_percentile
- question: Can a machine learning model identify malicious network connections indicative of polymorphic malware based on host and network features?
  context: This question explores using a supervised machine learning model (like XGBoost) to proactively detect malicious connections. By training on features from both the host (process command line length, entropy) and the network (IP reputation, JA3 hash), the model can learn complex patterns that distinguish polymorphic malware from benign traffic, providing a score to prioritize alerts for analysts.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network Egress/Ingress Points (Firewall, Proxy)
  - DNS Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: SCORE new_connections USING trained_ML_model(features: process_entropy, cmd_length, ip_rep, ja3); ALERT IF score > threshold
- question: Are there any running processes with command-line arguments that match known patterns of obfuscation, loaders, or packers?
  context: Adversaries frequently use specific command-line patterns to execute polymorphic or obfuscated code. This question uses regular expressions to search for these signatures, such as PowerShell's encoded command flag ('-e' or '-encoded'), rundll32.exe loading from unusual paths, or mshta.exe executing remote scripts. A match provides a strong signal of malicious execution.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint devices
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - PSEUDOCODE: SEARCH process_creation_logs FOR command_line MATCHING REGEX('powershell.*-e.*', 'rundll32.exe.*temp.*', 'mshta.exe http.*')
- question: Are there any processes being spawned with unusually high-entropy command-line arguments, suggesting obfuscation?
  context: Obfuscated scripts and commands often have higher character randomness (entropy) than normal commands. This question establishes a baseline entropy for the command-line arguments of common parent processes (like powershell.exe) and flags any new process whose command-line entropy significantly exceeds this baseline (e.g., 99th percentile), indicating potential obfuscation used by polymorphic malware.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint devices
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - PSEUDOCODE: FOR each parent_process_type, CALCULATE baseline_entropy(command_line); ALERT IF new_process.entropy > 99th_percentile(baseline_entropy)
- question: Can an NLP model distinguish malicious loader commands from benign administrative scripts by analyzing their structure and sequence?
  context: Beyond simple entropy, the structure and sequence of command-line arguments can reveal malicious intent. This question proposes using an NLP model (e.g., a transformer) trained to understand the 'grammar' of legitimate commands. The model can then identify and flag command lines that are syntactically unusual or deviate from normal patterns, which is a common characteristic of obfuscated loaders.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint devices
  - Application Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - PSEUDOCODE: SCORE command_lines USING trained_NLP_model; ALERT IF score indicates 'malicious' or 'anomalous' structure
- question: Are typically non-spawning processes (like WINWORD.EXE) creating new, previously unseen executables in user-writable directories?
  context: Productivity applications like Microsoft Word or Adobe Acrobat should not typically spawn new executable files. This question creates a watchlist of such parent processes and alerts when they create a child process from a user-writable location (like %APPDATA% or %TEMP%) with a file hash never seen before. This is a high-fidelity indicator of a dropper or loader associated with polymorphic malware.
  answer_sources:
  - Windows Event ID 4688 (with process hash field populated)
  - Endpoint devices
  - Sandboxing/Analysis Environments
  - File Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: ALERT IF parent_process IN (winword.exe, outlook.exe) AND child_path IN (%APPDATA%, %TEMP%) AND is_new(child_hash)
- question: Is a single parent process spawning a high number of child processes with unique file hashes within a short time frame?
  context: A key behavior of a polymorphic engine is generating and executing multiple, distinct variants of itself in a short period. This question identifies this activity by grouping child processes by their parent process ID over a short window (e.g., 10 minutes) and calculating the 'uniqueness ratio' of their file hashes. A high ratio (e.g., >90% unique) strongly suggests a polymorphic engine is at work.
  answer_sources:
  - Windows Event ID 4688 (with process hash field populated)
  - Endpoint devices
  - Sandboxing/Analysis Environments
  - File Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: GROUP child_processes by parent_pid OVER 10min_window; CALCULATE uniqueness_ratio = unique(child_hashes) / count(child_hashes); ALERT IF uniqueness_ratio > 0.9
- question: Can an unsupervised clustering algorithm identify anomalous process execution chains that may represent polymorphic droppers?
  context: This question uses an unsupervised machine learning approach (like DBSCAN) to find outliers in process creation behavior without prior labeling. By clustering events based on features like parent process name and child path entropy, the algorithm can group normal, repetitive system activity. Any data points that do not fit into these clusters (outliers) represent anomalous execution chains that warrant investigation for polymorphic activity.
  answer_sources:
  - Windows Event ID 4688 (with process hash field populated)
  - Endpoint devices
  - Sandboxing/Analysis Environments
  - File Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: CLUSTER process_creation_events using DBSCAN(features: parent_name, child_path_entropy, is_child_hash_unique); INVESTIGATE outlier_points
- question: Is there any network traffic with HTTP User-Agents or TLS fingerprints (JA3/JA4) that match known polymorphic C2 frameworks?
  context: Even if polymorphic malware changes its IP or domain, its underlying C2 framework (e.g., Cobalt Strike, Metasploit) may have a recognizable network signature, such as a specific User-Agent string or TLS client hello fingerprint (JA3/JA4). This question involves matching these network artifacts against a threat intelligence feed to detect the presence of these known malicious frameworks.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Network Egress/Ingress Points (Firewall, Proxy)
  - DNS Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: SEARCH network_logs FOR user_agent OR ja3_hash IN c2_framework_intel_feed
- question: Are any C2 beaconing channels showing a high degree of variation in their JA3 hashes or User-Agent strings over time?
  context: Advanced polymorphic malware may attempt to evade signature-based detection by frequently changing its network indicators within a single C2 channel. This question identifies this behavior by tracking the number of unique JA3 hashes or User-Agents for a given source-destination pair. A high count of unique values (cardinality) for a beaconing channel is anomalous and suggests a polymorphic C2 communication.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Network Egress/Ingress Points (Firewall, Proxy)
  - DNS Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: FOR each beaconing_channel, CALCULATE cardinality(ja3_hashes), cardinality(user_agents) over 24h; ALERT IF cardinality > 98th_percentile
- question: Can a time series anomaly detection model detect deviations in a host's normal network 'rhythm' that could indicate a polymorphic C2 channel?
  context: This question leverages a time series model (like ARIMA or an LSTM autoencoder) to learn the normal pattern of a host's egress network traffic, including metrics like data volume, connection frequency, and the entropy of JA3 hashes. The model can then automatically flag significant deviations from this learned 'rhythm,' which could be caused by a polymorphic C2 agent altering its communication patterns to evade detection.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Network Egress/Ingress Points (Firewall, Proxy)
  - DNS Servers
  range: last 90 days
  queries:
  - PSEUDOCODE: MODEL host_network_traffic_time_series(features: bytes_sent, conn_count, ja3_entropy); ALERT on significant deviation from model's prediction