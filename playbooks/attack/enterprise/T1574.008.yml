name: T1574.008: Path Interception by Search Order Hijacking
id: c1a2e3f4-b5d6-4c7e-8f9a-0b1c2d3e4f5a
description: This playbook helps identify adversary activity related to MITRE ATT&CK Technique T1574.008: Path Interception by Search Order Hijacking. Adversaries may use this technique for persistence, privilege escalation, and defense evasion by placing malicious executables in locations that are searched by applications before legitimate system directories. The playbook provides investigative questions to detect key indicators, such as: the creation of malicious executables in system PATH directories; the use of high-precedence file extensions (.com, .bat) to intercept calls to system utilities; legitimate processes spawning utilities from non-standard, user-writable paths; masquerading processes establishing external network connections; low-privilege users writing executables to world-writable directories used by high-privilege services; and the strategic placement of malicious files to be loaded by vulnerable, privileged processes like auto-updaters or security tools.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious executable been written to a directory within the system's PATH?
    context: This question looks for adversaries placing malware directly into a folder that is automatically searched by the operating system when a command is run. By matching the file's hash against a list of known malware signatures from a threat intelligence feed, we can quickly identify the use of common malicious tools attempting to hijack the search order for persistence.
    answer_sources:
      - Windows Security Event ID 4688
      - Windows Security Event ID 4663
      - Zeek files.log
      - File systems of endpoints and servers, specifically directories listed in system and user PATH variables, and temporary download locations (e.g., browser caches, Downloads folder).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file creation events (WinEvent 4663, Zeek files.log)
          WHERE file extension is executable AND file path is in system PATH
          CALCULATE hash of new file
          MATCH hash against malware threat intelligence feed
          ALERT on match
  - question: Is an executable with a randomly generated-looking filename being created in a PATH directory?
    context: Malware often uses randomly generated filenames to avoid static signature-based detection. A high Shannon entropy score for a filename suggests a high degree of randomness. By comparing the entropy of new executable filenames against a historical baseline for a specific directory, this question helps detect statistical outliers that could be malware attempting to masquerade within a standard system path.
    answer_sources:
      - Windows Security Event ID 4688
      - Windows Security Event ID 4663
      - Zeek files.log
      - File systems of endpoints and servers, specifically directories listed in system and user PATH variables, and temporary download locations (e.g., browser caches, Downloads folder).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each directory in system PATH
            CALCULATE baseline filename entropy for existing executables
          SEARCH new executable file creations in PATH directories
          CALCULATE Shannon entropy of new filename
          ALERT if entropy > 95th percentile of baseline for that directory
  - question: Does a newly created executable in a PATH directory have characteristics of malware, based on a machine learning model?
    context: This question uses a machine learning approach to move beyond simple indicators. A Random Forest classifier can learn complex patterns from multiple file attributes (path, name, size, structure, signature) to distinguish between benign and malicious files. This provides a more robust, holistic detection method for new executables appearing in PATH directories, catching novel threats that might evade simpler checks.
    answer_sources:
      - Windows Security Event ID 4688
      - Windows Security Event ID 4663
      - Zeek files.log
      - File systems of endpoints and servers, specifically directories listed in system and user PATH variables, and temporary download locations (e.g., browser caches, Downloads folder).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new executable file creation in PATH directory
          EXTRACT features (path depth, filename entropy, size, PE sections, signature status)
          INPUT features into trained Random Forest model
          ALERT if model classification is 'malicious' with high confidence score
  - question: Has a file been created with a name matching a critical system utility but with a higher-precedence extension?
    context: The Windows PATHEXT variable defines the order in which file extensions are checked when a command is run without an extension. An adversary can create a file like 'net.com' to intercept calls meant for 'net.exe'. This question seeks to identify this specific hijacking technique by monitoring for file creations that could shadow legitimate system commands.
    answer_sources:
      - Windows Security Event ID 4663
      - Windows Security Event ID 4688
      - Application installation directories (e.g., 'C:\Program Files'), system directories ('C:\Windows\System32'), and user profile folders where legitimate utilities might be called without a full path.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN list of critical system executables (e.g., 'net', 'ipconfig')
          SEARCH file creation events (WinEvent 4663)
          WHERE file base name is on critical list
          AND file extension has higher precedence in PATHEXT than the legitimate file
          ALERT on match
  - question: Is a common system process being executed from an abnormally infrequent path?
    context: System utilities are typically executed from standard, predictable locations (e.g., C:\Windows\System32). An adversary hijacking the search order will cause these utilities to be executed from a non-standard location. By establishing a baseline of normal execution paths for each utility, this question identifies low-frequency, anomalous execution paths that are strong indicators of compromise.
    answer_sources:
      - Windows Security Event ID 4663
      - Windows Security Event ID 4688
      - Application installation directories (e.g., 'C:\Program Files'), system directories ('C:\Windows\System32'), and user profile folders where legitimate utilities might be called without a full path.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each common system process name
            BASELINE all historical execution paths and their frequencies
          ON new process execution (WinEvent 4688)
          IF process path frequency < 0.1% of all executions for that process name
            ALERT for anomalous execution location
  - question: Is there a statistically significant increase in executions of a system utility from non-standard paths?
    context: While a single execution from a non-standard path is suspicious, a sudden increase in such events across the environment could signal a widespread campaign. This question uses a time-series anomaly detection model to monitor the daily count of these events. A significant deviation from the forecasted norm suggests a coordinated attack and warrants immediate investigation.
    answer_sources:
      - Windows Security Event ID 4663
      - Windows Security Event ID 4688
      - Application installation directories (e.g., 'C:\Program Files'), system directories ('C:\Windows\System32'), and user profile folders where legitimate utilities might be called without a full path.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL daily count of executions from non-standard paths for each key utility using Seasonal-ARIMA
          FORECAST expected count and confidence interval for current day
          OBSERVE actual count for current day
          ALERT if observed count significantly exceeds forecasted upper confidence interval
  - question: Is a common user application spawning a system utility from a non-standard directory?
    context: A strong indicator of path interception is when a legitimate parent process, like a web browser or office application, spawns a child process that masquerades as a system utility but runs from an unexpected location. This question uses a clear rule to detect this suspicious parent-child relationship, which often occurs after a user opens a malicious document or visits a compromised website.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging enabled)
      - Aggregated process execution logs from all Windows endpoints and servers, stored in a central SIEM or data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (WinEvent 4688)
          WHERE parent is common user app (e.g., 'winword.exe', 'chrome.exe')
          AND child is common system utility (e.g., 'net.exe')
          AND child path is NOT in trusted system directory (e.g., 'C:\Windows\System32')
          ALERT on match
  - question: Has a process been created via a parent-child path relationship that is extremely rare or has never been seen before?
    context: Legitimate software behavior creates predictable process execution chains (e.g., 'explorer.exe' launching 'cmd.exe' from System32). Malicious activity often creates novel or very infrequent parent-child execution paths. This question seeks to identify these statistical outliers by baselining all parent-child path relationships and flagging any new execution that represents a "least-frequent" or previously unknown path.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging enabled)
      - Aggregated process execution logs from all Windows endpoints and servers, stored in a central SIEM or data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE all (parent_process_path, child_process_path) tuples and their frequencies
          ON new process creation
          CHECK if new (parent, child) tuple is in baseline
          IF not present, or if frequency is in bottom 1st percentile
            ALERT as anomalous execution path
  - question: Is a process execution event an outlier when compared to clusters of normal activity?
    context: This question employs a density-based clustering algorithm (DBSCAN) to define "normal" process execution behavior based on multiple features. Legitimate activity will form dense clusters, while malicious or hijacked process executions, being anomalous, will not belong to any cluster and will be classified as noise. This method is effective at finding novel attack patterns that don't match predefined rules.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging enabled)
      - Aggregated process execution logs from all Windows endpoints and servers, stored in a central SIEM or data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          APPLY DBSCAN clustering on process execution events
          FEATURES: vectorized parent path, vectorized child path, parent-child name combo
          ALERT on any event classified as 'noise' (outlier) by the algorithm
  - question: Is a masquerading system utility in a user-writable directory making a network connection to a known malicious IP?
    context: A common goal of search order hijacking is to execute malicious code for command and control (C2). This question correlates process and network data to find a key indicator: a process that looks like a system utility but runs from a non-standard, user-writable path, and then establishes a connection to an IP address on a threat intelligence blocklist.
    answer_sources:
      - Windows Security Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Windows Filtering Platform Event ID 5156
      - Endpoint process and network event logs, correlated with network telemetry from host-based firewalls (WFP) and network sensors (Zeek) at key network egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE process events (WinEvent 4688) with network events (Zeek conn.log, WFP 5156)
          ALERT if process name is common utility AND path is user-writable
          AND outbound connection IP is on a threat intelligence blocklist
  - question: Is a masquerading process exhibiting DGA-like DNS query behavior?
    context: Malware often uses Domain Generation Algorithms (DGAs) to create a large number of potential C2 domains, making them hard to block. This results in DNS queries for many different, often random-looking domains. This question analyzes the DNS queries made by a potentially hijacked process, looking for high entropy or a high ratio of distinct domains to total queries, which are statistical indicators of DGA activity.
    answer_sources:
      - Windows Security Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Windows Filtering Platform Event ID 5156
      - Endpoint process and network event logs, correlated with network telemetry from host-based firewalls (WFP) and network sensors (Zeek) at key network egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR network connections from a masquerading process
          ANALYZE associated DNS queries (Zeek dns.log) over a 5-minute window
          CALCULATE Shannon entropy of queried domain names
          ALERT if entropy is high or ratio of unique domains to total queries is high
  - question: Does a TLS connection from a masquerading process appear malicious based on a machine learning model?
    context: Even when encrypted, TLS traffic has features (e.g., duration, bytes transferred, TLS handshake details like JA3/JA3S) that can distinguish malicious from benign connections. This question applies a trained classifier to score TLS connections originating from a process already flagged as suspicious. A 'malicious' classification provides strong corroborating evidence that the process is compromised.
    answer_sources:
      - Windows Security Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Windows Filtering Platform Event ID 5156
      - Endpoint process and network event logs, correlated with network telemetry from host-based firewalls (WFP) and network sensors (Zeek) at key network egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT TLS features (duration, bytes, JA3/JA3S, cert validity) from Zeek logs
          SCORE TLS connection from masquerading process using trained Gradient Boosting model
          ELEVATE alert severity if model classifies connection as 'malicious'
  - question: Has a known privilege escalation tool been written to a world-writable directory by a low-privilege user?
    context: Adversaries often stage privilege escalation tools in world-writable directories like 'C:\Windows\Temp' because they are accessible by low-privilege accounts. This question specifically looks for this pre-staging activity by monitoring file creations in these directories and checking if the file hash matches a known exploit tool, providing an early warning of an impending privilege escalation attempt.
    answer_sources:
      - Windows Security Event ID 4663 (Object Access Auditing)
      - File system audit logs for world-writable directories such as 'C:\Windows\Temp', 'C:\ProgramData', and directories with misconfigured ACLs on servers and workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file creation events (WinEvent 4663) in world-writable directories
          WHERE new file is executable AND created by a non-privileged account
          AND file hash matches a known privilege escalation tool
          ALERT on match
  - question: Has a file been created in a high-privilege directory by a disproportionately low-privilege user?
    context: High-privilege directories are typically only written to by high-privilege processes like SYSTEM. A file written to such a directory by a standard user process is a significant statistical anomaly. This question calculates a risk score based on the disparity between the user's privilege level and the directory's normal activity, flagging suspicious writes that could be part of a privilege escalation attempt.
    answer_sources:
      - Windows Security Event ID 4663 (Object Access Auditing)
      - File system audit logs for world-writable directories such as 'C:\Windows\Temp', 'C:\ProgramData', and directories with misconfigured ACLs on servers and workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file creation in application directories
          CALCULATE risk score based on (creating user privilege vs. directory owner privilege)
          FLAG events where a 'Medium Integrity' process writes to a 'SYSTEM' owned directory
          ALERT if risk score exceeds threshold
  - question: Does a file write event exhibit characteristics of privilege escalation pre-staging, according to a machine learning model?
    context: This question uses a classification model to proactively identify suspicious file writes that precede privilege escalation. By training on features like the process integrity level, target directory permissions, and file extension, the model can learn the subtle patterns of exploit staging and flag high-risk file write events that might be missed by rule-based detections.
    answer_sources:
      - Windows Security Event ID 4663 (Object Access Auditing)
      - File system audit logs for world-writable directories such as 'C:\Windows\Temp', 'C:\ProgramData', and directories with misconfigured ACLs on servers and workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file write event
          EXTRACT features (process integrity, directory ACLs, file extension, is dir in system PATH)
          INPUT features to trained Logistic Regression model
          ALERT if model predicts 'suspicious'
  - question: Has a malicious file been placed to hijack a vulnerable, privileged application's update or execution process?
    context: Some privileged applications, like auto-updaters, insecurely load DLLs or EXEs from their directory. An adversary can place a malicious file with the expected name in this directory, which will then be executed with high privileges. This question looks for this specific timing attack: a file creation immediately followed by the execution of a known vulnerable, privileged process.
    answer_sources:
      - Windows Security Event ID 4663
      - Windows Security Event ID 4688
      - File system and process audit logs for directories containing third-party software with update services that run as SYSTEM, especially on servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN watchlist of vulnerable apps and insecurely loaded binary names
          SEARCH for file creation (4663) of a watched filename in a vulnerable path
          IF followed within 60 seconds by execution (4688) of the vulnerable app
            ALERT on match
  - question: Is there an anomalous spike in file creation/modification rates in a directory for a privileged application?
    context: Directories containing privileged applications are often static, with files only changing during official patch cycles. A sudden burst of file activity outside of a known maintenance window is a statistical anomaly. This question uses time-series analysis to detect such spikes, which could indicate an adversary staging files for a search order hijack attack.
    answer_sources:
      - Windows Security Event ID 4663
      - Windows Security Event ID 4688
      - File system and process audit logs for directories containing third-party software with update services that run as SYSTEM, especially on servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE file creation/modification rates per hour for privileged app directories
          USE time-series analysis to detect anomalous spikes
          ALERT if a burst of activity occurs outside a known patch window
  - question: Is the sequence of events for a software update deviating from its normal pattern?
    context: A legitimate software update follows a predictable sequence of process and file activities. This question uses a sophisticated LSTM autoencoder model to learn this normal sequence. If an observed sequence of events deviates significantly—for example, a file write occurs from an unexpected process just before the updater runs—the model will flag it as an anomaly, indicating a potential hijacking attempt.
    answer_sources:
      - Windows Security Event ID 4663
      - Windows Security Event ID 4688
      - File system and process audit logs for directories containing third-party software with update services that run as SYSTEM, especially on servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN LSTM autoencoder on normal software update event sequences
          FEED new event sequences into the model
          ALERT if reconstruction error is high, indicating a deviation from the normal sequence
  - question: Has a high-privilege process spawned a system utility from a non-standard path?
    context: Processes running as 'High' or 'System' integrity should only execute system utilities from trusted system directories. When a privileged process spawns a utility like 'powershell.exe' or 'cmd.exe' from a user directory or temp folder, it is a very strong indicator that the privileged process has been compromised or tricked into loading a malicious binary via search order hijacking.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging)
      - Windows Event ID 4673 (Privileged Service Called)
      - Process execution logs on Domain Controllers, application servers, and other high-value assets where services and scheduled tasks run with elevated privileges.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (WinEvent 4688)
          WHERE parent process integrity is 'High' or 'System'
          AND child process is a common utility
          AND child path is not in 'C:\Windows\System32' or 'C:\Windows\SysWOW64'
          ALERT on match
  - question: Is a SYSTEM-level process spawning child processes from more varied and unusual locations than normal?
    context: Core system processes like 'services.exe' or 'lsass.exe' have a very predictable set of child processes and paths. This question profiles this normal behavior and then calculates the Shannon entropy of child process paths on a daily basis. A sudden increase in entropy indicates that the privileged process is spawning children from new and diverse locations, a statistical sign of potential hijacking.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging)
      - Windows Event ID 4673 (Privileged Service Called)
      - Process execution logs on Domain Controllers, application servers, and other high-value assets where services and scheduled tasks run with elevated privileges.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROFILE the normal set of (child process, path) for each SYSTEM process
          CALCULATE daily Shannon entropy of the child process paths
          ALERT on a sudden increase in entropy, indicating execution from unusual locations
  - question: Is a privileged process execution anomalous when compared to a baseline of legitimate behavior?
    context: This question uses a One-Class SVM, a machine learning algorithm ideal for anomaly detection, to build a precise model of what constitutes a "normal" privileged process execution. By training on features like parent/child paths and command-line arguments, the model creates a boundary of normal behavior. Any new execution that falls outside this boundary is flagged as a potential threat.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging)
      - Windows Event ID 4673 (Privileged Service Called)
      - Process execution logs on Domain Controllers, application servers, and other high-value assets where services and scheduled tasks run with elevated privileges.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN One-Class SVM on features of legitimate privileged process executions
          FEATURES: parent image path, child image path, command-line arguments
          SCORE new privileged executions against the model
          ALERT if execution is classified as an anomaly (outside the learned boundary)
  - question: Is an unsigned or improperly signed process running that masquerades as a known security tool?
    context: Adversaries may try to evade defenses by replacing legitimate security tools (like an antivirus or EDR agent) with a malicious version. A key way to detect this is to check the digital signature. This question looks for processes that have the filename of a security tool but are running from an incorrect path or, critically, have an invalid or missing signature.
    answer_sources:
      - Windows Security Event ID 4663
      - Sysmon Event ID 1
      - File systems on all endpoints, specifically monitoring the installation directories of security products (e.g., 'C:\Program Files\Windows Defender') and system directories for unauthorized file modifications or additions.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (Sysmon Event ID 1)
          WHERE process Image filename matches a known security tool
          AND (SignatureStatus is 'Invalid' or 'Unsigned' OR Image path is not the legitimate path)
          ALERT on match
  - question: Is there a sudden increase in the proportion of unsigned executables in trusted application directories?
    context: Directories for security products and other trusted applications should contain almost exclusively signed files. An adversary attempting to hijack these applications may drop unsigned malicious files into these locations. This question periodically scans these critical directories and tracks the percentage of unsigned files. A sudden jump in this metric is a statistical anomaly pointing to potential compromise.
    answer_sources:
      - Windows Security Event ID 4663
      - Sysmon Event ID 1
      - File systems on all endpoints, specifically monitoring the installation directories of security products (e.g., 'C:\Program Files\Windows Defender') and system directories for unauthorized file modifications or additions.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PERIODICALLY scan trusted/security application directories
          VERIFY digital signature of each executable/DLL
          CALCULATE the percentage of unsigned files enterprise-wide
          ALERT if a sudden day-over-day increase is observed
  - question: Does a file masquerading as a security tool component appear structurally different from legitimate versions?
    context: Even if an adversary creates a malicious file with the same name as a security tool, its internal structure (PE header, sections, etc.) will be different. This question uses a variational autoencoder, a type of neural network, to learn the deep structural features of legitimate files. A masquerading file will fail to be reconstructed properly by the model, resulting in a high error score that flags it as a likely implant.
    answer_sources:
      - Windows Security Event ID 4663
      - Sysmon Event ID 1
      - File systems on all endpoints, specifically monitoring the installation directories of security products (e.g., 'C:\Program Files\Windows Defender') and system directories for unauthorized file modifications or additions.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a variational autoencoder on PE header/section features of legitimate security tool binaries
          ON creation of a new file masquerading as a security tool
          FEED its feature vector into the autoencoder
          ALERT if the reconstruction error is high
  - question: Is a masquerading system utility being run with suspicious command-line arguments?
    context: An adversary might successfully hijack a utility like 'net.exe' but will then use it for malicious purposes, such as reconnaissance or user creation. This question inspects the command-line arguments used with a process that is already suspected of masquerading (i.e., running from a non-standard path). It looks for argument patterns that are syntactically valid but contextually suspicious and indicative of malicious intent.
    answer_sources:
      - Windows Security Event ID 4688 (with Command Line logging enabled)
      - Aggregated command-line logs from all endpoints, stored and searchable within a SIEM or data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (WinEvent 4688)
          WHERE process name is a system utility AND path is non-standard
          SEARCH command line for suspicious patterns (e.g., 'net group "Domain Admins"', 'net user /add')
          ALERT on match
  - question: Is the command line of a masquerading utility statistically unusual compared to its normal usage?
    context: Every system utility has a typical pattern of command-line usage (number of arguments, length, etc.). A command line crafted by an adversary for a malicious purpose will often be a statistical outlier. This question calculates the Mahalanobis distance of a new command line's features from the baseline of normal usage. A large distance flags the command as highly unusual and worthy of investigation.
    answer_sources:
      - Windows Security Event ID 4688 (with Command Line logging enabled)
      - Aggregated command-line logs from all endpoints, stored and searchable within a SIEM or data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each system utility, build a baseline of command-line features (arg count, length, etc.)
          CALCULATE Mahalanobis distance of a new command line's feature vector from the baseline
          ALERT if distance is large, indicating a statistical outlier
  - question: Is the command line of a masquerading utility so novel that it looks out of place to a language model?
    context: This question treats command lines as a language and trains a model on a large corpus of legitimate commands. The model learns what "normal" commands look like. A malicious command, being novel and different, will have a high "perplexity" score when evaluated by the model, meaning the model finds it surprising and unlikely. This is a powerful technique for detecting new and unseen malicious command patterns.
    answer_sources:
      - Windows Security Event ID 4688 (with Command Line logging enabled)
      - Aggregated command-line logs from all endpoints, stored and searchable within a SIEM or data lake.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a character-level n-gram language model on legitimate command-line invocations
          CALCULATE the perplexity score of new command lines from masquerading processes
          ALERT if perplexity is very high
  - question: Has a trusted application spawned a non-installer process from a user-writable directory?
    context: Trusted, signed applications like browsers or office products should not be spawning arbitrary processes from temporary or download directories. While they might launch an installer ('setup.exe'), the creation of any other process type is highly suspicious and could indicate that the parent application was exploited to drop and execute malware via a path interception vulnerability.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging)
      - Sysmon Event ID 1
      - Process execution logs from user workstations, focusing on parent-child relationships where the parent is a common productivity or browser application.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for process creation where parent is signed by a trusted publisher
          AND child is spawned from a user-writable directory (e.g., 'AppData\Local\Temp')
          AND child process name is NOT a known installer (e.g., 'setup.exe', 'update.exe')
          ALERT on match
  - question: Has a trusted application spawned a child process from a statistically rare or previously unseen path?
    context: Even legitimate parent processes spawn a predictable set of child processes from predictable locations. This "least frequent path" analysis maintains a frequency distribution of all child process paths for a given trusted parent. When a child is spawned from a path that is a statistical outlier (e.g., seen for the first time or in the bottom 1% of frequency), it is a strong signal of a novel evasion or execution technique.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging)
      - Sysmon Event ID 1
      - Process execution logs from user workstations, focusing on parent-child relationships where the parent is a common productivity or browser application.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each trusted parent process, maintain frequency distribution of its child process paths
          FLAG any child process execution where the path is a statistical outlier (e.g., bottom 1% frequency)
  - question: Does a process creation event represent a structural anomaly in the normal process graph?
    context: This question models all normal parent-child process relationships as a graph, where common relationships form heavily weighted edges. A path interception attack creates a new, anomalous edge in this graph, for example, linking a trusted parent like 'chrome.exe' to a system utility in an unusual path like 'C:\Users\Public\svchost.exe'. Graph-based anomaly detection can flag this new, low-weight edge as a structural deviation from normal behavior.
    answer_sources:
      - Windows Security Event ID 4688 (with command line logging)
      - Sysmon Event ID 1
      - Process execution logs from user workstations, focusing on parent-child relationships where the parent is a common productivity or browser application.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL normal process trees as a graph (nodes=processes, edges=parent-child links)
          WEIGHT edges by frequency
          USE graph-based anomaly detection to flag newly observed, low-weight edges
          (e.g., 'chrome.exe' -> 'C:\Users\Public\svchost.exe')