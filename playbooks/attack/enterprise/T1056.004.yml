name: T1056.004: Credential API Hooking
id: 1e8f9b0a-7c6d-4e5f-8a1b-9c0d1e2f3a4b
description: >
  This playbook helps identify adversary attempts to gain access to credentials and collect sensitive data using API hooking (T1056.004).
  It focuses on detecting evidence such as process creation events with malicious file hashes, suspicious command-line arguments indicative of injection,
  anomalous behavior from legitimate credential-handling processes (e.g., lsass.exe), and unusual DLL module loads from non-standard paths.
  Additionally, it covers the collection phase by looking for network traffic to known malicious C2 destinations, anomalous data archiving,
  suspicious child processes spawned by hooked parents, and significant increases in outbound data volume that could signify exfiltration.
type: technique
related:
  - TA0006: Credential Access
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are any running processes associated with a known malicious file hash?
    context: >
      This question aims to identify the execution of known malicious software that performs API hooking. By comparing the file hash of every new process against a threat intelligence database, we can quickly detect malware that has been previously identified and analyzed. A match is a high-confidence indicator of a compromise and warrants immediate alerting and investigation.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Domain Controllers
      - Critical application servers (e.g., HR, Finance)
      - Jump boxes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH process_creation_events (EventID 4688 or 1) | JOIN executable_hash with threat_intel_database ON hash | WHERE match_found | GENERATE high_priority_alert
  - question: Have any process hashes with very low prevalence been observed in the environment?
    context: >
      This question seeks to uncover potentially malicious or unauthorized software by identifying executables that are running on a very small number of systems. Adversary tools are often not widely distributed. By calculating the prevalence of each process hash and flagging those with a low host count (e.g., fewer than 5 hosts or 0.1% of endpoints), we can surface suspicious binaries that are not part of standard software deployments, warranting further scrutiny.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Domain Controllers
      - Critical application servers (e.g., HR, Finance)
      - Jump boxes
    range: last 30 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH process_creation_events over last 30 days | COUNT distinct hosts by executable_hash | WHERE host_count < 5 | FLAG as low_prevalence_hash
  - question: Does a machine learning model classify any low-prevalence processes as malicious?
    context: >
      This question leverages a supervised classification model to automatically assess the risk of newly observed processes. By training a model on features like parent process, command-line arguments, and user context, it can assign a maliciousness score. A high probability score, especially for a process that also has a low prevalence in the environment, provides a strong, data-driven signal of malicious activity that requires immediate investigation.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Domain Controllers
      - Critical application servers (e.g., HR, Finance)
      - Jump boxes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each new process_creation_event | EXTRACT features (parent_process, cmd_line, user, hash_prevalence) | APPLY pre-trained_classification_model | IF probability_score > threshold AND hash_prevalence is low | TRIGGER investigation
  - question: Are there any processes being executed with command-line arguments or parent-child relationships indicative of API hooking?
    context: >
      This question looks for specific patterns in command-line arguments and process lineage that are commonly associated with API hooking and in-memory injection. By using regular expressions to find keywords like 'SetWindowsHookEx' or 'LdrLoadDll' and by maintaining a list of forbidden parent-child relationships (e.g., lsass.exe spawning cmd.exe), we can detect suspicious execution chains that are hallmarks of an adversary's attempt to compromise a process.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Servers with administrative tools
      - Development environments
      - Authentication servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH process_creation_events | FILTER command_line MATCHES regex_patterns OR parent_child_pair IN forbidden_list | ALERT
  - question: Are any processes being executed with unusually complex or obfuscated command-line arguments?
    context: >
      This question aims to identify obfuscated commands, which adversaries use to hide their actions. By calculating the Shannon entropy of command-line arguments, we can quantify their complexity. A command-line with an entropy score significantly higher than the established baseline for that specific process (e.g., powershell.exe) suggests that the command may be obfuscated or packed, a common tactic for malicious scripts and injection techniques.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Servers with administrative tools
      - Development environments
      - Authentication servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each process_creation_event | CALCULATE entropy of command_line | GET baseline_entropy for process_name | IF current_entropy > (baseline_mean + 3 * baseline_std_dev) | ALERT
  - question: Can we identify new or unknown hooking techniques by finding anomalous clusters of command-line structures?
    context: >
      This question uses unsupervised machine learning to discover novel attack patterns without relying on known signatures. By converting command-line arguments into feature vectors and applying a clustering algorithm like DBSCAN, we can group similar commands together. Any command that does not fit into an established cluster of benign activity is flagged as an outlier. This can reveal new or previously unseen tools and techniques used for API hooking.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Servers with administrative tools
      - Development environments
      - Authentication servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR all process_creation_events | CREATE feature_vector from command_line | APPLY DBSCAN clustering algorithm | IDENTIFY and ALERT on outlier clusters or points
  - question: Has a sensitive credential-handling process spawned a child process that violates a pre-defined allow-list?
    context: >
      This question focuses on highly suspicious behavior from critical processes like lsass.exe and winlogon.exe. These processes should have a very predictable and limited set of child processes. By defining a strict allow-list of legitimate children, any deviation from this list is a high-fidelity indicator of compromise, suggesting the parent process has been hooked or injected into, and is being used to launch further malicious activity.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers (for lsass.exe)
      - User workstations (for browsers, RDP clients)
      - Jump boxes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH process_creation_events | WHERE parent_process IN sensitive_list | IF child_process NOT IN parent_allow_list | TRIGGER critical_alert
  - question: Is a sensitive credential-handling process making network connections to a statistically rare destination?
    context: >
      This question seeks to identify compromised credential-handling processes by analyzing their network behavior. These processes typically communicate with a predictable set of destinations. By building a statistical profile of normal network activity, we can detect when a process connects to a new or rare IP, domain, or port. Such an anomaly could indicate that a hooked process is communicating with an adversary's command and control server.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers (for lsass.exe)
      - User workstations (for browsers, RDP clients)
      - Jump boxes
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each network_connection from sensitive_process | LOOKUP destination_prevalence | IF prevalence < 1% OR destination is new | ALERT
  - question: Does the network activity of a credential-handling process show anomalous time-series behavior?
    context: >
      This question uses a time-series model to learn the normal rhythm of network activity (e.g., connections per minute, data volume) for credential-handling processes. An adversary using a hooked process for command and control or data exfiltration will likely disrupt this rhythm. The model can detect these significant deviations, flagging them as anomalies that could represent malicious C2 communications.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers (for lsass.exe)
      - User workstations (for browsers, RDP clients)
      - Jump boxes
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each sensitive_process | FEED time_series of network_events to LSTM_autoencoder | IF reconstruction_error > threshold | FLAG as anomalous_network_rhythm
  - question: Has a process loaded a DLL from a suspicious path or an unsigned DLL?
    context: >
      This question aims to detect API hooking attempts where a malicious DLL is loaded into a legitimate process. By monitoring for image load events (Sysmon Event ID 7), we can specifically look for DLLs being loaded from non-standard, writable locations like C:\Users\Public\ or C:\Temp\. Additionally, critical processes loading unsigned DLLs is highly suspicious. These rules can catch common dropper and injector behaviors.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Application servers
      - Virtual Desktop Infrastructure (VDI) environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH image_load_events (EventID 7) | WHERE (dll_path IN suspicious_paths OR dll_is_unsigned) AND parent_process IN critical_list | ALERT
  - question: Has a common process loaded a DLL that is statistically rare for that process?
    context: >
      This question establishes a baseline of normal behavior by profiling the DLLs typically loaded by each common process (e.g., chrome.exe). An adversary hooking an API will often cause the process to load a new, malicious DLL. By alerting when a process loads a DLL that has never been associated with it before, or one that is very rare across the environment, we can detect these hooking attempts without prior knowledge of the malicious DLL itself.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Application servers
      - Virtual Desktop Infrastructure (VDI) environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each image_load_event | GET baseline_dll_profile for parent_process | IF loaded_dll NOT IN baseline OR loaded_dll_prevalence is low | ALERT
  - question: Does a machine learning model classify any DLL load events as malicious?
    context: >
      This question uses a classification model to proactively identify malicious hooking attempts based on the characteristics of an image load event. By training a model on features like the DLL's signature status, the entropy of its file path, its prevalence, and parent process details, we can assign a risk score to each event. A high-risk score serves as a strong indicator that the DLL load is part of a malicious action and should be investigated.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Application servers
      - Virtual Desktop Infrastructure (VDI) environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each image_load_event | EXTRACT features (signature, path_entropy, prevalence, parent_process) | APPLY classification_model | IF risk_score > threshold | TRIGGER investigation
  - question: Is a host with suspected API hooking activity communicating with a known malicious C2 destination?
    context: >
      This question provides high-confidence detection of an active compromise by correlating internal indicators of hooking with external threat intelligence. If a host shows other signs of API hooking, and its network traffic is directed to an IP or domain on a known malicious C2 feed, it strongly indicates that the adversary is actively controlling the machine and likely collecting data.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - Internet Gateway
      - DNS servers
      - Proxy servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH network_logs (conn, dns) from host_with_hooking_indicators | JOIN destination_ip_or_domain with threat_intel_c2_feed | IF match_found | GENERATE high_confidence_alert
  - question: Are there any rare or anomalous TLS fingerprints (JA3/JA3S) originating from the network?
    context: >
      This question aims to identify adversary tooling by its network fingerprint. Malicious tools often use non-standard cryptographic libraries, resulting in unique JA3/JA3S fingerprints for their TLS communications. By baselining the fingerprints of legitimate software in the environment, we can alert on new or rare fingerprints, which are often indicative of malware C2 activity.
    answer_sources:
      - Zeek ssl.log
      - Network egress points
      - Internet Gateway
      - DNS servers
      - Proxy servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each outbound_tls_connection | EXTRACT ja3_fingerprint | LOOKUP fingerprint_prevalence | IF fingerprint is new or rare | ALERT
  - question: Does a machine learning model assign a high risk score to any outbound network connections?
    context: >
      This question uses a supervised classifier to proactively identify potentially malicious network connections that could be used for data collection. By scoring every outbound connection based on features like destination ASN, port, JA3 fingerprint, data volume, and domain reputation, the model can flag high-risk traffic. A high score for a connection from a process suspected of hooking is a strong indicator of data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - Internet Gateway
      - DNS servers
      - Proxy servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each outbound_connection | EXTRACT features (ASN, port, JA3, volume, domain_rep) | APPLY risk_classifier_model | IF risk_score > threshold | FLAG for investigation
  - question: Has an anomalous process created an archive file from a sensitive location?
    context: >
      This question looks for the staging of data for exfiltration. Adversaries often collect stolen data (like credentials from a hooked process) into a single archive file. This analytic monitors for the use of archiving tools (7z.exe, tar.exe) where the parent process is unusual (e.g., not explorer.exe) and the source data is from a sensitive location like a user's browser profile folder. This combination is a strong indicator of data collection.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - File servers
      - Staging servers
      - Temporary directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH process_creation_events for archiving_tools | IF source_path IN sensitive_locations AND parent_process IS anomalous | ALERT
  - question: Is there any archiving activity that is a statistical outlier for a specific user or host?
    context: >
      This question aims to find anomalous data staging by baselining normal user behavior. It establishes what is normal for each user in terms of archiving activity (e.g., frequency, time of day, parent processes). An alert is triggered when an activity deviates significantly from this baseline, such as an administrative account running an archiver at 3 AM with an unusual parent process. This can catch staging activity that might otherwise look benign in isolation.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - File servers
      - Staging servers
      - Temporary directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each archiving_event | GET user_baseline_for_archiving | IF current_event is statistical_outlier (e.g., time, parent) | ALERT
  - question: Can an anomaly detection model identify any unusual archival activities?
    context: >
      This question uses an unsupervised model like an Isolation Forest to find novel or stealthy data staging techniques. By analyzing features of process events related to archiving (process name, parent, command-line complexity, user), the model can learn the patterns of normal enterprise-wide behavior. It can then identify and flag any archival activity that does not conform to these learned patterns, potentially uncovering new adversary TTPs.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - File servers
      - Staging servers
      - Temporary directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR each archiving_event | CREATE feature_vector (process, parent, cmd_entropy, user) | APPLY Isolation_Forest model | IF anomaly_score > threshold | FLAG for investigation
  - question: Has the lsass.exe process spawned any child processes?
    context: >
      This question is a high-fidelity check for active credential theft. The Local Security Authority Subsystem Service (lsass.exe) should never spawn a child process. Any instance of this behavior, captured by process creation logs, is almost exclusively malicious. It is a critical indicator that an adversary has compromised LSASS and is likely in the process of dumping credentials or executing other commands.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Authentication servers
      - User workstations with privileged access
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH process_creation_events | WHERE parent_process is "lsass.exe" | TRIGGER critical_alert
  - question: Has a child process of a sensitive parent connected to a statistically rare network destination?
    context: >
      This question tracks the follow-on actions after a sensitive process (like winlogon.exe) is potentially compromised. After spawning a child process, an adversary will often use it to establish a C2 channel. This analytic checks the network destinations of these child processes. A connection to an IP or port that is highly uncommon for the enterprise network is a strong signal that the child process is malicious and is being used for collection or C2.
    answer_sources:
      - Zeek conn.log
      - Domain Controllers
      - Authentication servers
      - User workstations with privileged access
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH network_connections from child_of_sensitive_parent | LOOKUP destination_prevalence in enterprise | IF prevalence < 0.01% | ALERT
  - question: Can a graph-based model detect anomalous process-to-network relationships?
    context: >
      This question models enterprise activity as a graph of interconnected processes and network endpoints. By learning the normal structure of this graph, an anomaly detection model can identify unusual subgraphs. For example, a critical process spawning a new type of child process that then connects to a new external destination would form an anomalous pattern, strongly indicating a potential compromise and data collection attempt.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Domain Controllers
      - Authentication servers
      - User workstations with privileged access
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          BUILD activity_graph of nodes (processes, network_endpoints) | IDENTIFY anomalous_subgraphs (e.g., new_child_process -> new_external_IP) | ALERT
  - question: Has any host exceeded a hard threshold for outbound data to a non-allow-listed destination?
    context: >
      This question provides a simple, direct method for detecting bulk data exfiltration. It sets a hard limit (e.g., 100MB in one hour) on the amount of data a single host can send to any single destination. If this threshold is crossed and the destination is not on a pre-approved allow-list for legitimate services like cloud backups, an alert is triggered. This is effective at catching large-scale "smash and grab" data theft.
    answer_sources:
      - Zeek conn.log
      - Network egress points
      - Core network switches
      - Host-based firewalls
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          SEARCH network_flows by host, destination | SUM outbound_bytes per hour | IF total_bytes > 100MB AND destination NOT IN allow_list | ALERT
  - question: Has any host exhibited a statistically significant spike in outbound data volume?
    context: >
      This question uses time-series analysis to detect anomalous data exfiltration that may not cross a hard threshold. By modeling the normal daily outbound data volume for each host, it can identify when a host's traffic significantly deviates from its own baseline (e.g., exceeds the 99th percentile of its 30-day history). This dynamic approach is effective at catching exfiltration that is abnormal for a specific host, even if the volume isn't large in absolute terms.
    answer_sources:
      - Zeek conn.log
      - Network egress points
      - Core network switches
      - Host-based firewalls
      - Internet Gateway
    range: last 30 days
    queries:
      - technology: pseudocode
        query: >
          FOR each host | MODEL daily_outbound_volume with Holt-Winters | IF current_volume > 99th_percentile_of_history | ALERT as volume_spike
  - question: Do any network flows fall into a high-volume, long-duration outlier cluster?
    context: >
      This question uses unsupervised clustering to categorize all network flows based on their characteristics (e.g., data volume, duration, packets per second). This allows the system to learn what different types of "normal" traffic look like. Flows that do not fit into these normal clusters, particularly those that form a new cluster characterized by high volume and long duration to a rare destination, are flagged as highly suspicious and potential data exfiltration channels.
    answer_sources:
      - Zeek conn.log
      - Network egress points
      - Core network switches
      - Host-based firewalls
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >
          FOR all network_flows | CREATE feature_vector (bytes, duration, pps, dest_ASN) | APPLY K-Means clustering | FLAG flows in outlier_cluster (high-volume, long-duration)