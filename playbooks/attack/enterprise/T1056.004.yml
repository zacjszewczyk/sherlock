name: T1056.004: Credential API Hooking
id: a8c1d3e5-4f6b-4a2e-9d8c-0f1a2b3c4d5e
description: This playbook helps identify adversaries attempting to gain access to credentials by hooking APIs. This technique involves intercepting function calls to capture sensitive data, such as passwords, in memory. Indicators of this activity include the execution of processes with hashes matching known malware, processes with low prevalence or suspicious command-line arguments, legitimate credential-handling processes (like lsass.exe) spawning anomalous children or making unusual network connections, and processes loading DLLs from non-standard paths or modules that are statistical outliers for that parent process.
type: technique
related:
  - TA0006: Credential Access
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process being created with a file hash matching a known malicious indicator for API hooking malware?
    context: This question aims to detect the initial execution of known malicious tools that employ API hooking for credential theft. By comparing process hashes against a threat intelligence database, analysts can quickly identify high-confidence threats based on previously identified malware campaigns.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Domain Controllers
      - Critical application servers (e.g., HR, Finance)
      - Jump boxes
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | JOIN file_hash WITH threat_intel_database | WHERE match_found | ALERT high_priority
  - question: Is a process with a rare or low-prevalence hash executing on endpoints?
    context: This question helps identify potentially malicious or unauthorized software that is not part of a standard deployment. Adversaries often use custom or rare tools that will have a very small footprint in the environment, making prevalence analysis an effective method for hunting for unknown threats.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Domain Controllers
      - Critical application servers (e.g., HR, Finance)
      - Jump boxes
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | CALCULATE prevalence of file_hash across all hosts | FILTER prevalence < 5 AND is_not_known_good | ALERT
  - question: Does a machine learning model classify a new process creation event as malicious based on its characteristics?
    context: This question leverages machine learning to automate the detection of suspicious process behavior. By training a model on features like parent-child relationships, command-line arguments, and hash prevalence, analysts can identify complex patterns indicative of malicious activity that might be missed by simple rule-based alerts.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Domain Controllers
      - Critical application servers (e.g., HR, Finance)
      - Jump boxes
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT process_creation_event_features | APPLY classification_model | WHERE malicious_score > threshold | ALERT
  - question: Is a process being executed with command-line arguments or parent-child relationships indicative of code injection or module hooking?
    context: This question focuses on identifying the specific methods used to initiate API hooking. Adversaries may use legitimate tools like 'rundll32.exe' in unusual ways or create suspicious parent-child process chains (e.g., lsass.exe spawning cmd.exe). Detecting these specific patterns provides strong evidence of an ongoing attack.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Servers with administrative tools
      - Development environments
      - Authentication servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | APPLY regex to command_line for hooking_patterns | OR | CHECK against forbidden_parent_child_list | ALERT
  - question: Are there processes executing with unusually complex or high-entropy command-line arguments?
    context: This question helps detect obfuscated commands. Adversaries often encode or obfuscate their payloads within command-line arguments to evade signature-based detection. A high Shannon entropy score suggests a level of randomness or complexity that is uncharacteristic of normal commands and can indicate malicious obfuscation techniques.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Servers with administrative tools
      - Development environments
      - Authentication servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | CALCULATE entropy of command_line | COMPARE to baseline_entropy for process_name | WHERE entropy > (baseline + 3*std_dev) | ALERT
  - question: Are there new or anomalous clusters of command-line structures appearing in the environment?
    context: This question uses unsupervised machine learning to hunt for novel attack patterns. By grouping command-line arguments based on their structure, the algorithm can identify new clusters that deviate from established benign activity. This is useful for discovering previously unknown tools or variations of existing techniques.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Servers with administrative tools
      - Development environments
      - Authentication servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT command_line_feature_vectors | APPLY clustering_algorithm (e.g., DBSCAN) | IDENTIFY and ALERT on new or outlier clusters
  - question: Has a sensitive credential-handling process (e.g., lsass.exe) spawned a child process that violates a defined allow-list?
    context: This question establishes a high-fidelity detection for a critical attack behavior. Processes like lsass.exe and winlogon.exe have very predictable and limited child processes in a normal operating state. Any deviation from this, such as spawning a command shell, is a strong indicator of compromise and credential theft.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers (for lsass.exe)
      - User workstations (for browsers, RDP clients)
      - Jump boxes
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE parent_process in ('lsass.exe', 'winlogon.exe') | CHECK if child_process is NOT in allow_list | ALERT critical
  - question: Is a credential-handling process initiating a network connection to a statistically rare or new destination?
    context: This question aims to detect data exfiltration or C2 communication originating from a compromised process. After hooking a process like chrome.exe or mstsc.exe, an adversary might use its network permissions to send stolen credentials out. A connection to a destination that is rare for that process or the organization is highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers (for lsass.exe)
      - User workstations (for browsers, RDP clients)
      - Jump boxes
      - Internet Gateway
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_logs for connections from sensitive_processes | COMPARE destination to historical profile | ALERT if destination is rare or first_seen
  - question: Is a credential-handling process exhibiting an anomalous pattern of network activity over time?
    context: This question uses time-series analysis to detect subtle changes in a process's network behavior. Instead of looking at a single connection, it models the 'rhythm' of activity (e.g., connections per minute, data volume). A significant deviation from this learned normal rhythm could indicate that a hooked process is being used for C2 or exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers (for lsass.exe)
      - User workstations (for browsers, RDP clients)
      - Jump boxes
      - Internet Gateway
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT time_series of network_events from sensitive_process | APPLY anomaly_detection_model (e.g., LSTM Autoencoder) | ALERT on significant deviations
  - question: Is a process loading a DLL from a suspicious path or is a critical process loading an unsigned or non-allow-listed DLL?
    context: This question directly targets the mechanism of loading a malicious hooking module. Adversaries often drop their malicious DLLs in world-writable locations like C:\Temp or try to load them into critical processes. Monitoring for unsigned DLLs or those not on an allow-list for sensitive processes is a key detection strategy.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Application servers
      - Virtual Desktop Infrastructure (VDI) environments
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH image_load_events | FILTER (dll_path is suspicious OR (process is critical AND (dll_is_unsigned OR dll_not_in_allow_list))) | ALERT
  - question: Has a common process loaded a DLL that is statistically rare or has never been associated with that parent process before?
    context: This question focuses on identifying anomalous module loads through baselining. Every process has a typical set of DLLs it loads to function. When a process loads a DLL that is an outlier—either new to that process or rare across the entire environment—it strongly suggests a hooking or injection attempt.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Application servers
      - Virtual Desktop Infrastructure (VDI) environments
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH image_load_events | For each parent_process, COMPARE loaded_dll to historical baseline | ALERT if dll is new or has low prevalence for that parent
  - question: Does a machine learning model classify a specific DLL load event as high-risk for being part of a malicious hooking attempt?
    context: This question uses a predictive model to score the risk of individual image load events. By considering multiple features simultaneously (DLL path, signature, prevalence, parent process), the model can identify complex, high-risk events that might not trigger simpler rules, providing a more nuanced detection capability.
    answer_sources:
      - Sysmon Event ID 7
      - User workstations
      - Application servers
      - Virtual Desktop Infrastructure (VDI) environments
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT image_load_event_features | APPLY classification_model (e.g., Gradient Boosting) | WHERE risk_score > threshold | ALERT
  - question: Is network traffic from a host with suspected hooking activity going to a known malicious C2 or data exfiltration destination?
    context: This question provides high-confidence alerts by correlating host-based indicators of hooking with network-based indicators of compromise. A match against a threat intelligence feed of malicious IPs or domains confirms that the suspected activity is communicating with known bad infrastructure.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - Internet Gateway
      - DNS servers
      - Proxy servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_logs | JOIN destination_ip, destination_domain WITH threat_intel_feed | WHERE match_found AND host has other hooking_indicators | ALERT
  - question: Are there rare or suspicious JA3/JA3S TLS fingerprints in outbound network connections?
    context: This question helps identify adversary tooling by its network signature. Custom malware or non-standard tools often use different TLS libraries than legitimate applications, resulting in unique or rare JA3/JA3S fingerprints. Detecting these outliers can uncover C2 channels that might otherwise be hidden within encrypted traffic.
    answer_sources:
      - Zeek ssl.log
      - Network egress points
      - Internet Gateway
      - DNS servers
      - Proxy servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH outbound_ssl_logs | CALCULATE prevalence of ja3/ja3s_fingerprints | ALERT on rare or previously unseen fingerprints
  - question: Does a machine learning model assign a high risk score to an outbound network connection based on its features?
    context: This question uses a supervised model to proactively identify risky network connections that may be related to data collection. By analyzing features like destination ASN, port, JA3 fingerprint, and domain reputation, the model can flag connections that fit a learned profile of malicious exfiltration or C2 activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points
      - Internet Gateway
      - DNS servers
      - Proxy servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT network_connection_features | APPLY risk_classifier_model | WHERE risk_score > threshold AND host has hooking_indicators | ALERT
  - question: Is an anomalous process creating an archive file from a sensitive location?
    context: This question targets the staging phase of data collection. Adversaries often collect stolen credentials or other data into a single archive file before exfiltration. Monitoring for unusual processes creating .zip, .rar, or .7z files from sensitive user directories can detect this staging behavior.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - File servers
      - Staging servers
      - Temporary directories
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events for archiving_tools | FILTER source_path is sensitive AND parent_process is anomalous | ALERT
  - question: Is a user's account performing archiving activity that is a statistical outlier compared to their baseline behavior?
    context: This question focuses on user behavior analytics to find anomalous data staging. By establishing a baseline of normal archiving activity for each user, the system can flag executions that are unusual in context (e.g., wrong time of day, anomalous parent process), even if the command itself seems benign.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - File servers
      - Staging servers
      - Temporary directories
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: For each user, SEARCH archiving_events | COMPARE to user_baseline (frequency, parent_process, time_of_day) | ALERT on statistical outliers
  - question: Does an unsupervised anomaly detection model identify an archival activity as anomalous?
    context: This question uses machine learning to find novel or unknown staging techniques. An unsupervised model, like an Isolation Forest, can learn the patterns of all benign archival activity across the enterprise and flag any execution that does not conform, without needing pre-defined rules.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - File servers
      - Staging servers
      - Temporary directories
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT archival_process_event_features | APPLY unsupervised_anomaly_model | ALERT on identified anomalies
  - question: Has the lsass.exe process spawned any child process?
    context: This question provides a very high-confidence alert for credential theft. The lsass.exe process should never legitimately spawn a child process. Any instance of this behavior, captured by process creation logs, is almost certainly malicious and indicates an active attempt to dump or collect credentials.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Authentication servers
      - User workstations with privileged access
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE parent_process is 'lsass.exe' | ALERT critical
  - question: Is a child process of a sensitive parent (e.g., winlogon.exe) connecting to a rare network destination?
    context: This question hunts for exfiltration or C2 activity from a process spawned by a compromised, sensitive parent. While the child process itself might seem legitimate, its network behavior can reveal its malicious purpose. A connection to a destination with very low prevalence in the organization is a strong indicator of collection.
    answer_sources:
      - Zeek conn.log
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Authentication servers
      - User workstations with privileged access
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections from child_of_sensitive_parent | CALCULATE prevalence of destination_ip | WHERE prevalence < 0.01% | ALERT
  - question: Does a graph-based anomaly detection model identify an anomalous process-network interaction?
    context: This question uses advanced analytics to find complex attack paths. By modeling the enterprise as a graph of processes and network endpoints, the model can learn normal relationships. It can then flag anomalous subgraphs, such as a critical process spawning a new child that connects to a new external IP, which represents a significant deviation.
    answer_sources:
      - Windows Security Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Domain Controllers
      - Authentication servers
      - User workstations with privileged access
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT process_and_network_events_to_graph_model | IDENTIFY anomalous subgraphs (e.g., new_child_process -> new_external_ip) | ALERT
  - question: Has a host sent an unusually large amount of data to a non-approved destination?
    context: This question aims to catch bulk data exfiltration using a simple volume threshold. While not sophisticated, it is effective at detecting large, unauthorized data transfers that are not part of known services like cloud backups.
    answer_sources:
      - Zeek conn.log
      - Windows Security Event ID 4688
      - Network egress points
      - Core network switches
      - Host-based firewalls
      - Internet Gateway
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH outbound_network_flows | WHERE total_bytes > 100MB in 1 hour AND destination NOT in allow_list | ALERT
  - question: Has a host exhibited a statistically significant spike in outbound data volume compared to its own baseline?
    context: This question uses time-series analysis to detect data exfiltration that is anomalous for a specific host. By modeling each host's normal outbound traffic patterns, the system can flag a spike that exceeds a dynamic threshold (e.g., the 99th percentile), providing a more tailored alert than a global, static threshold.
    answer_sources:
      - Zeek conn.log
      - Windows Security Event ID 4688
      - Network egress points
      - Core network switches
      - Host-based firewalls
      - Internet Gateway
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: For each host, MODEL daily_outbound_volume | ALERT if current_volume > 99th_percentile of 30-day history
  - question: Does a clustering algorithm group a network flow into a high-volume, long-duration outlier cluster?
    context: This question uses unsupervised machine learning to categorize and find suspicious network flows. By clustering flows based on features like byte count, duration, and destination, the model can identify outlier clusters that represent potential exfiltration channels, such as a long-running, high-volume transfer to a rare destination.
    answer_sources:
      - Zeek conn.log
      - Windows Security Event ID 4688
      - Network egress points
      - Core network switches
      - Host-based firewalls
      - Internet Gateway
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: INPUT network_flow_features | APPLY K-Means clustering | ALERT on flows in high-volume, outlier clusters to rare destinations