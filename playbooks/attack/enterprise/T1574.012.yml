name: T1574.012: COR_PROFILER
id: a7b1c2d3-e4f5-4a6b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the MITRE ATT&CK technique T1574.012, where adversaries abuse the .NET COR_PROFILER environment variable to achieve persistence, privilege escalation, and defense evasion. The playbook provides investigative questions to detect this activity by analyzing registry modifications, process creation events, network traffic, and security tool behavior. It covers methods to identify when COR_PROFILER is set to a malicious DLL, when a profiled process is used for UAC bypass or privilege escalation, and when it is leveraged to hijack and disable security products like EDR and antivirus solutions. Investigations focus on correlating registry, process, and network events to uncover the full scope of the attack, from initial setup to post-exploitation actions.
type: technique
related:
- TA0003 - Persistence
- TA0004 - Privilege Escalation
- TA0005 - Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there symbolic rule-based indicators of registry modifications setting COR_PROFILER to a malicious DLL or CLSID?
  context: This question aims to detect adversaries establishing persistence by directly modifying registry keys (`HKLM\\...\\COR_PROFILER` or `HKCU\\...\\COR_PROFILER`) to point to a malicious profiler. By creating a specific rule to monitor these keys, we can extract the referenced DLL or CLSID and check it against threat intelligence and known-bad lists for a high-confidence alert.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13. Focus on: Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_modification_events (WinEvent 4657, Sysmon 13)
      WHERE target_key contains 'COR_PROFILER' or 'COR_PROFILER_PATH'
      EXTRACT dll_path or clsid
      LOOKUP hash(dll_path) against threat_intel_feeds
      LOOKUP clsid against known_malicious_clsid_list
      RETURN events where a match is found
- question: Can statistical analysis identify anomalous COR_PROFILER registry modifications that deviate from established environmental baselines?
  context: This question focuses on detecting malicious COR_PROFILER usage by identifying statistical outliers. Instead of relying on known-bad signatures, this approach baselines normal profiler activity. It flags new profiler registrations that are statistically rare, appear in unusual file paths, or have high-entropy names, which are common characteristics of attacker-placed tools.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13. Focus on: Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new COR_PROFILER registry modification:
        EXTRACT dll_path and clsid
        CALCULATE prevalence of dll_path/clsid across all endpoints
        CALCULATE path_entropy of dll_path
        IDENTIFY if dll_path is in a non-standard directory
        RETURN events where prevalence is < 0.5% OR path is unusual OR entropy is high
- question: Can a machine learning model classify COR_PROFILER registry modifications as malicious?
  context: This question leverages a machine learning model to score the risk of a COR_PROFILER registry modification. The model is trained on features from registry events, such as the parent process that made the change (e.g., reg.exe, powershell.exe), user context, and DLL path characteristics. This provides a more nuanced detection capability than fixed rules or simple statistical thresholds.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13. Focus on: Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON registry_modification event:
        EXTRACT features (parent_process, user, target_key, dll_path_characteristics)
        INPUT features into pre-trained Random Forest classifier
        IF model_score > high_threshold:
          ALERT as likely malicious COR_PROFILER modification
- question: Are there .NET processes being created with COR_PROFILER enabled that use a profiler DLL not on the established allowlist?
  context: This question seeks to identify processes launched with a potentially malicious profiler. It relies on a symbolic rule that triggers when a process is created with both `COR_ENABLE_PROFILING=1` and `COR_PROFILER` set in its environment, and the specified DLL is not part of a pre-approved list of legitimate profilers used in the environment.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Focus on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (Sysmon 1)
      WHERE environment_block CONTAINS 'COR_ENABLE_PROFILING=1' AND 'COR_PROFILER'
      EXTRACT profiler_dll_path
      IF profiler_dll_path is NOT in allowlist_of_profilers:
        RETURN event
- question: Can statistical anomalies in process creation events, such as high command-line entropy or rare parent-child relationships, indicate malicious profiler use?
  context: This question uses statistical methods to find suspicious profiler activity. It looks for outliers in process creation events where profiling is enabled. Anomalies include high-entropy command lines (suggesting obfuscation) or unusual parent-child relationships (e.g., Microsoft Word spawning a .NET process with a profiler), which deviate from normal, baselined behavior.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Focus on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (Sysmon 1) with profiling enabled
      CALCULATE command_line_entropy and profiler_dll_path_entropy
      CHECK if parent-child_relationship is rare (e.g., <1% frequency)
      RETURN events with high entropy OR rare parent-child relationship
- question: Can an unsupervised machine learning model detect anomalous process creation events involving COR_PROFILER?
  context: This question employs an unsupervised learning model, like an autoencoder, to detect deviations from normal process behavior. The model is trained on legitimate process creation events. An event involving COR_PROFILER that the model cannot accurately reconstruct (i.e., has a high reconstruction error) is flagged as a significant anomaly, suggesting unauthorized or malicious activity.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Focus on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON process_creation_event (Sysmon 1) involving COR_PROFILER:
        EXTRACT features (process_image, parent_image, command_line, environment_vars)
        INPUT features into pre-trained autoencoder model
        CALCULATE reconstruction_error
        IF reconstruction_error > anomaly_threshold:
          ALERT as anomalous profiler usage
- question: Are profiled .NET processes making network connections to known malicious destinations?
  context: This question aims to detect command-and-control (C2) activity from a compromised process. It correlates a process launched with a profiler to its subsequent network activity. By checking the destination IP or domain against threat intelligence feeds, we can identify connections to known C2 servers, which is a strong indicator of a successful compromise.
  answer_sources: Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log, Zeek ssl.log. Focus on: Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE process_events (Sysmon 1) and network_events (Sysmon 3, Zeek)
      WHERE process has profiling enabled
      EXTRACT destination_ip, destination_domain from network_events
      LOOKUP destination against threat_intel_feeds
      RETURN events with a match to known C2 infrastructure
- question: Does network traffic from profiled .NET processes exhibit statistical properties of C2 beaconing or use of non-standard TLS fingerprints?
  context: This question uses statistical analysis of network traffic to uncover covert C2 channels. It looks for periodic, fixed-size connections (heartbeats) characteristic of beaconing. For encrypted traffic, it analyzes the TLS handshake (JA3/JA3S hash) to identify fingerprints that are rare or associated with known malware, suggesting a malicious client.
  answer_sources: Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log, Zeek ssl.log. Focus on: Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR network flows from profiled processes:
        GROUP by source/destination pair
        CALCULATE std_dev of inter-arrival_times and bytes_transferred
        EXTRACT ja3/ja3s hash from TLS traffic
        FLAG flows with low std_dev (beaconing) OR rare/malicious JA3/JA3S hashes
- question: Can a time-series or clustering model identify C2-like network behavior from profiled processes?
  context: This question applies machine learning to network data to spot C2 activity. A time-series model can learn the normal rhythm of a process's network traffic and flag deviations that could signal the start of C2 communications. Alternatively, a clustering algorithm can group network connections by their features, isolating clusters of C2-like behavior (e.g., short duration, periodic) from benign traffic.
  answer_sources: Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log, Zeek ssl.log. Focus on: Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY time-series anomaly detection (e.g., LSTM) to byte counts and connection frequency of profiled processes.
      OR
      APPLY clustering (e.g., DBSCAN) on connection features (duration, bytes_sent, protocol).
      ALERT on significant anomalies or isolated C2-like clusters.
- question: Is there a sequence of events where a COR_PROFILER registry key is set to a DLL in an unprotected path, followed shortly by a high-integrity .NET process launch?
  context: This question seeks to identify a common UAC bypass and privilege escalation pattern. Adversaries write a malicious profiler DLL to a user-writable location (like %APPDATA%) and set the COR_PROFILER registry key to point to it. They then trigger a legitimate, auto-elevating .NET application, which inherits the environment and loads the malicious profiler in a high-integrity context. Detecting this specific sequence is a high-confidence indicator of an active privilege escalation attempt.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13. Focus on: User Workstations, Terminal Servers, Citrix/VDI Environments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE registry_events AND process_events within 5 minutes on same host/user:
        1. REGISTRY_EVENT: (Sysmon 13 or WinEvent 4657) where target_key CONTAINS 'COR_PROFILER' AND value CONTAINS non-protected path (e.g., 'C:\Users\', 'C:\Temp\')
        2. PROCESS_EVENT: (Sysmon 1 or WinEvent 4688) where process is .NET AND integrity_level is 'High' or 'System'
      RETURN correlated events
- question: Are processes with lower-than-expected integrity levels modifying COR_PROFILER registry keys?
  context: This question uses statistical analysis to spot suspicious registry modifications. The approach involves baselining the integrity level of processes that normally modify COR_PROFILER keys (e.g., legitimate installers running as 'System'). A modification made by a process with a lower integrity level (e.g., 'Medium') is a statistical anomaly and could indicate the setup phase of a privilege escalation attack.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13. Focus on: User Workstations, Terminal Servers, Citrix/VDI Environments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process that modifies a COR_PROFILER key:
        EXTRACT process_integrity_level
        COMPARE to baselined expected integrity level for that process/action
        RETURN events where observed integrity level is lower than expected
- question: Can a sequence-based machine learning model detect anomalous event patterns indicative of a COR_PROFILER UAC bypass?
  context: This question uses a sequence-aware model (like an RNN) to learn normal chains of user and system activity. The model can identify a privilege escalation attack by recognizing it as an anomalous sequence, such as a low-privilege process modifying a user-scope profiler registry key, immediately followed by the launch of a high-privilege .NET application by the same user.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13. Focus on: User Workstations, Terminal Servers, Citrix/VDI Environments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT sequence of events (registry_modify, process_create) into trained RNN model.
      MODEL should identify the anomalous pattern:
      (Low-privilege process -> Modifies HKCU\COR_PROFILER -> High-privilege .NET process launch)
      ALERT when this anomalous sequence is detected.
- question: Has a Medium integrity process modified the HKCU COR_PROFILER key, immediately followed by the launch of a High integrity .NET process?
  context: This question targets a very specific and high-confidence privilege escalation event chain. It looks for a Medium integrity process setting the per-user profiler key, which is then inherited by an auto-elevating .NET process that launches moments later with High integrity. A tight correlation window (e.g., <60 seconds) for the same user is key to detecting this automated exploit.
  answer_sources: Sysmon Event ID 1, Sysmon Event ID 13. Focus on: User Workstations with UAC enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events for the same LogonId within a 60-second window:
        1. Sysmon 13: TargetObject is 'HKCU\Environment\COR_PROFILER' AND ProcessIntegrityLevel is 'Medium'
        2. Sysmon 1: .NET process launch where IntegrityLevel is 'High'
      RETURN correlated event pairs
- question: Are there statistical outliers in the time delta between HKCU registry modifications and high-integrity process launches?
  context: This question aims to find automated exploits by analyzing the timing of events. While legitimate actions might have a variable delay, an automated exploit will execute the registry write and process launch sequence almost instantaneously. By profiling the time delta between these two events, we can flag activity with an extremely short delay (e.g., <1 second) as a statistical anomaly indicative of an attack.
  answer_sources: Sysmon Event ID 1, Sysmon Event ID 13. Focus on: User Workstations with UAC enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user:
        CALCULATE time_delta between (HKCU registry mod) and (high-integrity process launch)
        COMPARE time_delta to historical distribution for that user
        FLAG events where time_delta is in a low percentile (e.g., < 5th percentile), suggesting automation
- question: Can graph-based analysis identify the subgraph pattern of a COR_PROFILER privilege escalation attack?
  context: This question models system activity as a graph, where processes, users, and registry keys are nodes and their interactions are edges. A privilege escalation attack via COR_PROFILER creates a specific, identifiable subgraph pattern. Using graph analytics, we can actively search for this malicious pattern in near-real-time, providing a powerful way to visualize and detect the attack path.
  answer_sources: Sysmon Event ID 1, Sysmon Event ID 13. Focus on: User Workstations with UAC enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH in activity graph for the subgraph pattern:
      (User Node) -[Launches]-> (Medium-Integrity Process) -[Modifies]-> (HKCU Registry Key) -[Inherited by]-> (High-Integrity Process)
      RETURN instances of this pattern.
- question: Has a profiled, elevated .NET process spawned a suspicious child process or performed a privileged action?
  context: This question looks for post-escalation activity. Once an attacker has gained high-integrity execution via a profiled process, they will typically spawn a shell (cmd.exe, powershell.exe) or perform privileged actions like creating a new user. This rule detects such actions originating from a profiled process, indicating that the escalation was successful and the adversary is proceeding with their objectives.
  answer_sources: Windows Event ID 4688, Windows Event ID 4720, Windows Event ID 4732, Windows Event ID 4704, Sysmon Event ID 1, Sysmon Event ID 10. Focus on: Active Directory Domain Controllers, Member Servers, Privileged Access Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR any process launched with COR_PROFILER enabled:
        MONITOR for child processes (cmd.exe, powershell.exe)
        MONITOR for security events (WinEvent 4720, 4732, 4704) generated by this process
      ALERT on any such activity.
- question: Has a profiled .NET application spawned a child process that is statistically rare for that parent?
  context: This question establishes a behavioral baseline for legitimate .NET applications to detect anomalous child process activity. By profiling normal parent-child relationships, we can use frequency analysis to identify when a profiled instance of an application spawns a rare or never-before-seen child process. This is a strong statistical indicator of post-escalation behavior.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Focus on: Active Directory Domain Controllers, Member Servers, Privileged Access Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each parent .NET application:
        MAINTAIN a baseline of its normal child processes and arguments.
      WHEN a profiled instance of the parent spawns a child:
        CHECK if child process or arguments are rare (e.g., <1% of historical instances).
        ALERT if rare.
- question: Can a machine learning classifier identify a suspicious parent-child process relationship originating from a profiled, high-privilege process?
  context: This question uses a supervised machine learning model to distinguish between benign and malicious process lineage. The classifier is trained on features like parent and child process names, command lines, and integrity levels. When a profiled, high-privilege process spawns a child, the model can score the relationship, providing a robust signal of post-escalation activity if it's classified as 'suspicious'.
  answer_sources: Windows Event ID 4688, Windows Event ID 4720, Windows Event ID 4732, Windows Event ID 4704, Sysmon Event ID 1, Sysmon Event ID 10. Focus on: Active Directory Domain Controllers, Member Servers, Privileged Access Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON child process creation from a profiled, high-privilege parent:
        EXTRACT features (parent_image, child_image, command_line, etc.)
        INPUT features into trained classifier model
        IF model classifies relationship as 'suspicious':
          ALERT on post-escalation activity.
- question: Is a security tool process being profiled with a DLL that is not digitally signed by the vendor or Microsoft?
  context: This question aims to detect a direct attempt to hijack a security tool. Adversaries may use COR_PROFILER to inject a malicious DLL into a trusted security process (e.g., an EDR agent) to blind or disable it. This symbolic rule checks if a profiler DLL loaded by a security tool has a valid digital signature from the vendor. A missing or invalid signature is a high-fidelity indicator of tampering.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 7. Focus on: All endpoints with EDR/AV installed, Security Management Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON DLL load event (Sysmon 7):
        IF loading_process is a known security tool AND loaded_image is a profiler DLL:
          VALIDATE signature of loaded_image
          IF signature is invalid OR not from security vendor/Microsoft:
            ALERT on defense evasion attempt.
- question: Is a security tool loading a profiler DLL that is statistically rare or located in a non-standard path?
  context: This question uses statistics to find suspicious DLL loads by security tools. It establishes a baseline of all DLLs normally loaded by each security product. If a profiler DLL is loaded that is rare across the enterprise (e.g., on only one machine) or is loaded from an unusual directory (e.g., %APPDATA%), it is a significant anomaly that suggests a likely defense evasion attempt.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 7. Focus on: All endpoints with EDR/AV installed, Security Management Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN baseline of all DLLs loaded by security tools.
      ON profiler DLL load by a security tool:
        CALCULATE load frequency of the DLL across the enterprise.
        CHECK if DLL path is non-standard.
        ALERT if DLL is statistically rare OR path is non-standard.
- question: Can a file-based machine learning model classify a profiler DLL loaded by a security tool as malicious?
  context: This question uses a machine learning classifier to analyze the profiler DLL file itself. When a security process loads a profiler DLL, the DLL's features (entropy, PE header, strings, etc.) are extracted and fed to a model trained to distinguish between benign and malicious files. A high maliciousness score is a strong indicator of an attempt to hijack the security tool.
  answer_sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 7. Focus on: All endpoints with EDR/AV installed, Security Management Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON profiler DLL load by security tool:
        EXTRACT file features from the DLL.
        INPUT features to a trained file classifier model.
        IF model returns a high maliciousness score:
          ALERT on likely defense evasion.
- question: Following a COR_PROFILER registry modification, does a synthetic test event fail to generate an alert?
  context: This question provides a way to actively confirm if a security control has been disabled. After a suspicious COR_PROFILER modification is detected on an endpoint, a synthetic test (like a benign EICAR file download) is triggered. If the security tool on that endpoint fails to generate the expected alert in the SIEM, it serves as high-confidence proof that defenses have been successfully impaired.
  answer_sources: Sysmon Event ID 13, Windows Event Logs, Zeek logs. Focus on: SIEM/Log Aggregator, All Endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON detection of COR_PROFILER registry modification on a host:
        TRIGGER a synthetic test event (e.g., EICAR download) on that host.
        MONITOR SIEM for the expected alert from the host.
        IF no alert is received within a defined time window:
          ALERT on confirmed defense impairment.
- question: Is there a statistically significant drop in security telemetry from an endpoint after a COR_PROFILER registry modification?
  context: This question uses the volume of security logs as a health metric for the security agent. It monitors the event rate (events per minute) for each host. If a host experiences a suspicious COR_PROFILER modification, this method checks if there is a subsequent, statistically significant drop in log volume (e.g., more than 3 standard deviations below the baseline). Such a drop suggests the agent has been tampered with or disabled.
  answer_sources: Sysmon Event ID 13, Windows Event Logs, Zeek logs. Focus on: SIEM/Log Aggregator, All Endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR any host with a recent COR_PROFILER modification:
        CALCULATE log volume (events/min) in the hours following the event.
        COMPARE to a 30-day baseline for that host using a Z-score.
        IF Z-score < -3.0:
          ALERT on potential security tool tampering.
- question: Does the log volume from a host deviate from a machine learning forecast after a COR_PROFILER event?
  context: This question uses a time-series model (e.g., Prophet) to predict the expected log volume from each host, accounting for normal daily and weekly cycles. If a suspicious COR_PROFILER event occurs on a host, the system checks if the actual subsequent log volume deviates significantly from the model's forecast. A large negative deviation indicates an anomalous drop in telemetry, suggesting defense evasion.
  answer_sources: Sysmon Event ID 13, Windows Event Logs, Zeek logs. Focus on: SIEM/Log Aggregator, All Endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL log ingestion rate for each host using a time-series forecast model.
      ON a COR_PROFILER event on a host:
        COMPARE actual log volume to the model's forecast.
        IF actual volume is significantly below forecast:
          ALERT on anomalous telemetry drop.
- question: Has a profiled security tool process terminated unexpectedly or has its associated service stopped?
  context: This question looks for direct evidence of a security tool being crashed or stopped after being hijacked. A correlation rule is created to monitor for a security tool process that was launched with a profiler and subsequently terminates with an error, or its associated Windows service enters a 'stopped' state. This is a clear indicator of a successful defense evasion action.
  answer_sources: Windows Event ID 4689, Windows System Event Log Event ID 7034, Sysmon Event ID 1, Sysmon Event ID 5, Sysmon Event ID 10. Focus on: All endpoints with EDR/AV installed.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events for a security tool process:
        1. Process created with profiling enabled (Sysmon 1).
        2. THEN process terminates with non-zero exit code (Sysmon 5) OR its service stops (Event 7034) OR it is terminated by another process (Sysmon 10).
      ALERT on correlated sequence.
- question: Has a profiled security tool process terminated in a statistically outlying short timeframe?
  context: This question identifies security tool crashes by analyzing their uptime. It calculates the mean time to failure (MTTF) or average uptime for security processes across the environment. If an instance of a security tool that was launched with a profiler terminates in a timeframe that is a statistical outlier (e.g., in the bottom 5th percentile of historical uptimes), it is flagged as a potential crash induced by a malicious profiler.
  answer_sources: Windows Event ID 4689, Sysmon Event ID 1, Sysmon Event ID 5. Focus on: All endpoints with EDR/AV installed.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE historical uptime distribution for each security tool process.
      WHEN a profiled security process terminates:
        GET its uptime.
        COMPARE uptime to the historical distribution.
        IF uptime is in the bottom 5th percentile:
          ALERT on potential induced crash.
- question: Has a profiled security tool process undergone an anomalous state transition, such as 'running' to 'crashed'?
  context: This question models the lifecycle of a security process using a Markov Chain to learn the probabilities of normal state transitions (e.g., 'running' to 'scanning'). A malicious profiler might cause an anomalous transition, such as directly from 'running' to 'crashed', which would have a very low probability in a healthy system. Detecting such a low-probability state change immediately after a profiling event strongly indicates tampering.
  answer_sources: Windows Event ID 4689, Windows System Event Log Event ID 7034, Sysmon Event ID 1, Sysmon Event ID 5. Focus on: All endpoints with EDR/AV installed.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL security process states (running, stopped, crashed) with a Markov Chain.
      TRAIN on normal state transition probabilities.
      WHEN a profiled security process changes state:
        CHECK the transition probability in the model.
        IF probability is anomalously low (e.g., running -> crashed):
          ALERT on high-risk state change.