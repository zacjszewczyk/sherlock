name: T1204.004: Malicious Copy and Paste
id: 574b62d8-5f09-4c33-8f24-2c4990928a6f
description: This playbook focuses on detecting adversary execution achieved when a user is convinced to copy and paste malicious content into a command-line interpreter. This technique is identified by observing process creation events, particularly for interpreters like powershell.exe or cmd.exe, where the command line exhibits suspicious characteristics. These include the presence of known malicious indicators (domains, IPs), patterns associated with 'Living Off the Land' techniques (e.g., PowerShell download cradles), anomalously long or complex command strings (high entropy), or being spawned by unusual parent processes like browsers or email clients. Detection also involves correlating these process events with subsequent outbound network connections to rare or new destinations, as pasted commands often initiate contact with attacker infrastructure. The core investigative goal is to differentiate between normal, manually-typed commands and potentially malicious, pasted commands.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process been created with a command line containing known malicious indicators from threat intelligence feeds?
    context: This question aims to find direct evidence of malicious execution by checking if command-line interpreters (like powershell.exe or cmd.exe) are launched with commands that include known bad domains, IPs, or file hashes. A match is a strong signal of compromise, often resulting from a user pasting and running a malicious command.
    answer_sources:
      - Windows Event ID 4688
      - Zeek dns.log
      - User workstations, Developer endpoints, Administrative jump boxes, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs (EventID: 4688) WHERE command_line CONTAINS (threat_intel_domains OR threat_intel_ips OR threat_intel_hashes)
  - question: Has a command-line interpreter been executed with a command that leads to a DNS request for an unusually rare domain?
    context: This question tries to identify suspicious execution by linking it to network behavior. Adversaries often use new or obscure domains for C2. By correlating a process creation with a subsequent DNS lookup for a statistically rare domain (bottom 5th percentile), we can uncover potentially malicious activity that might not be on any threat intel list yet.
    answer_sources:
      - Windows Event ID 4688
      - Zeek dns.log
      - User workstations, Developer endpoints, Administrative jump boxes, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | EXTRACT domain from command_line | JOIN with dns_logs (Zeek dns.log) on source_host within 60s | CALCULATE domain_frequency_over_30_days | FILTER domain_frequency < 5th_percentile
  - question: Can a machine learning model classify any executed command-line strings as malicious based on their linguistic features?
    context: This question uses a Natural Language Processing (NLP) model to proactively identify malicious commands that may not match simple IOCs or statistical outliers. The model analyzes features like string length, entropy, and the presence of specific keywords (e.g., 'IEX', 'DownloadString') to score the likelihood of a command being malicious, catching novel or obfuscated threats.
    answer_sources:
      - Windows Event ID 4688
      - Zeek dns.log
      - User workstations, Developer endpoints, Administrative jump boxes, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY nlp_classification_model to command_line from process_creation_logs | ALERT where malicious_confidence_score > 0.9
  - question: Are there any process command lines or PowerShell script blocks containing patterns associated with 'Living Off the Land' (LOLBAS) techniques?
    context: This question looks for the abuse of legitimate system tools for malicious purposes. By scanning process command lines and PowerShell script logs for specific, known-bad patterns (like PowerShell download cradles or certutil abuse), we can detect adversaries trying to hide their activity by using built-in utilities.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Windows endpoints and servers, particularly those with PowerShell v5+ script block logging enabled
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (process_creation_logs OR powershell_script_block_logs) | FILTER command_line MATCHES regex('IEX.*New-Object.*Net\\.WebClient', 'certutil\\.exe.*-urlcache.*-f', etc.)
  - question: Has a common command-line interpreter executed a command with an abnormally high entropy score compared to its baseline?
    context: High entropy in a command line often indicates obfuscation or encoding, which are common techniques used by adversaries to hide their malicious code. This question establishes a normal baseline for command-line entropy for each interpreter (like powershell.exe) and flags significant deviations, which could point to a pasted, obfuscated payload.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Windows endpoints and servers, particularly those with PowerShell v5+ script block logging enabled
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH interpreter_process | CALCULATE baseline_entropy_mean_and_stddev over 30 days | SEARCH new_commands | ALERT where command_entropy > (mean + 3 * stddev)
  - question: Has a time-series anomaly detection model detected a sudden spike in the enterprise-wide usage of high-risk LOLBAS patterns?
    context: This question aims to detect coordinated campaigns by monitoring the overall frequency of specific malicious patterns. A sudden, unexpected increase in the use of a technique like 'certutil -urlcache' across multiple systems, as identified by an anomaly detection model, is a strong indicator of a widespread attack.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Windows endpoints and servers, particularly those with PowerShell v5+ script block logging enabled
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY time_series_model to hourly_frequency of LOLBAS_patterns | ALERT when observed_frequency > 99%_confidence_interval
  - question: Has a browser, email client, or document reader spawned a command-line interpreter with an unusually long command?
    context: Legitimate user activity rarely involves a browser or document reader spawning a command prompt with a very long command. This behavior is highly indicative of a user being tricked into copying and pasting a malicious script from a webpage, email, or document. This question sets a hard length threshold (e.g., 1024 characters) to detect these obvious cases.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Virtual Desktop Infrastructure (VDI) instances, Remote Desktop Session Hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE parent_process IN ('chrome.exe', 'outlook.exe', etc.) AND child_process IN ('cmd.exe', 'powershell.exe') AND command_line_length > 1024
  - question: For a specific user and host, has a browser or document reader spawned an interpreter with a command line significantly longer than that user's established baseline?
    context: To reduce false positives from power users who might legitimately run longer commands, this question builds a more targeted baseline. It analyzes the normal command-line lengths for each user in the specific context of a browser/document reader parent process and flags executions that exceed the 98th percentile, indicating an anomaly for that particular user's behavior.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Virtual Desktop Infrastructure (VDI) instances, Remote Desktop Session Hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH user_host_pair | CALCULATE baseline_command_length_percentile (98th) for browser_to_interpreter_spawns | ALERT when new_command_length > baseline_percentile
  - question: Can an anomaly detection model identify suspicious parent-child process relationships involving interpreters, based on features like command length and entropy?
    context: This question uses a more sophisticated, multi-featured approach to find anomalies. An Isolation Forest model analyzes several characteristics of a parent-child process event at once (e.g., parent/child names, command length/entropy, time delta). This allows it to identify unusual combinations that might not be caught by single-metric thresholds, providing a more robust method for detecting pasted malicious commands.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Virtual Desktop Infrastructure (VDI) instances, Remote Desktop Session Hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY isolation_forest_model to parent_child_process_events (features: parent_name, child_name, cmd_length, cmd_entropy) | ALERT on high_anomaly_score
  - question: Did a command-line interpreter process make an outbound network connection to a known malicious C2 server shortly after execution?
    context: This is a high-confidence indicator of compromise. This question directly links the execution of a potential payload (via an interpreter) to communication with a known command-and-control (C2) infrastructure. Correlating process creation with network logs within a tight time window (5 seconds) provides strong evidence of a successful malicious execution.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE process_creation_logs (interpreters) with network_connection_logs within 5s | ALERT if destination_ip OR destination_domain IN threat_intel_c2_feed
  - question: Did an interpreter process connect to a destination domain that is both new for the host and rare across the entire enterprise?
    context: This question helps uncover novel C2 infrastructure. An attacker may use a domain that has never been seen before. By flagging connections from interpreters to domains that are not only new to the specific host but also have been contacted by a very small percentage of other hosts in the organization, we can identify suspicious beaconing or data exfiltration channels.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH interpreter_process_network_connection | CHECK if destination_domain is new for host | IF new, CALCULATE global_prevalence | ALERT if global_prevalence < 1% of hosts
  - question: Does a network connection from an interpreter process exhibit anomalous characteristics (port, protocol, encryption) that mark it as an outlier from established clusters of normal activity?
    context: This question uses unsupervised machine learning to find unusual network behavior without relying on pre-existing IOCs. By clustering normal network connections from interpreters based on features like port, protocol, and encryption artifacts (JA3/JA3S), the model can identify any new connection that doesn't fit into a known benign cluster. These 'noise' points are highly suspect and warrant investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY DBSCAN_clustering_model to network_connections from interpreters (features: dest_port, protocol, ja3_hash) | ALERT on connections classified as 'noise'
  - question: Did the explorer.exe process spawn a child process with a command line containing suspicious, non-manually-typed strings like encoded commands or URLs?
    context: Users typically type simple commands into the Windows Run or Explorer dialogs (which run under explorer.exe). The presence of complex strings like 'powershell -e' (for encoded commands), 'http://', or Base64 patterns in a command initiated by explorer.exe is a strong sign that the command was pasted, not typed, and is likely malicious.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Terminal servers, Remote Desktop servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE parent_process IS 'explorer.exe' | FILTER command_line MATCHES regex('powershell -e', 'http://', 'IEX\\(', 'base64_pattern')
  - question: Has explorer.exe spawned a child process with a command line that is a statistical outlier in terms of length?
    context: This question identifies pasted commands by focusing on their length. Since manually typed commands from the Run dialog are usually short, an unusually long command is suspect. Using a statistical method like the Interquartile Range (IQR) provides a dynamic way to define "unusually long" based on the observed data, making it more robust than a fixed threshold.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Terminal servers, Remote Desktop servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR all child_processes of 'explorer.exe' | CALCULATE command_length_q1, q3, iqr | ALERT where command_length > (q3 + 1.5 * iqr)
  - question: Can a One-Class SVM model, trained on benign explorer.exe-spawned commands, identify a new command as an outlier suspicious of being pasted?
    context: This question employs a machine learning model designed specifically for anomaly detection when you only have examples of "normal" behavior. The One-Class SVM learns the boundaries of benign commands spawned by explorer.exe based on features like length, entropy, and special characters. Any new command that falls outside these learned boundaries is flagged as a potential pasted threat.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Terminal servers, Remote Desktop servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY one_class_svm_model (trained on benign explorer.exe commands) to new commands | ALERT on commands classified as 'outlier'