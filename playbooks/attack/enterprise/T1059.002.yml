name: T1059.002: AppleScript
id: f5a8c2b1-9d6e-4f3c-8a7b-5d9e1f2a3b4c
description: This playbook helps investigate whether an adversary is using AppleScript for malicious execution on macOS endpoints. It focuses on detecting suspicious 'osascript' process executions by analyzing process parentage, command-line arguments, file modifications in persistence locations, and associated network activity. Detections are based on correlations with threat intelligence, statistical anomalies, and machine learning models.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has the 'osascript' process executed a script with a known malicious hash or established a network connection to a suspicious destination?
    context: This question aims to identify straightforward malicious activity by correlating 'osascript' executions with threat intelligence. An 'osascript' process running a script with a hash matching a known-bad indicator, or connecting to a low-reputation IP/FQDN, is a strong signal of compromise. This is a high-fidelity check for known threats.
    answer_sources:
      - macOS Process Execution Log
      - macOS File Access Log
      - Zeek conn.log
      - Zeek dns.log
      - Threat intelligence platform API
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Search for 'osascript' process executions.
          For each event, get the script file path and calculate its SHA256 hash.
          Query the hash against threat intelligence feeds.
          Correlate process ID with network connection logs (within a 60s window).
          Query destination IP/FQDN against threat intelligence feeds.
          Alert on any match.
  - question: Has 'osascript' been spawned by an unusually rare parent process?
    context: This question seeks to uncover anomalous execution chains. Adversaries often use legitimate applications (like Microsoft Word) to launch scripts, a behavior that is statistically rare in most environments. By identifying parent processes that infrequently spawn 'osascript', we can detect suspicious activity that might otherwise be missed. This is based on frequency analysis of parent-child process relationships.
    answer_sources:
      - macOS Process Execution Log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each 'osascript' execution, identify the parent process.
          Calculate the frequency of each parent-child ('parent' -> 'osascript') relationship over the last 30 days.
          Alert if an 'osascript' execution is spawned by a parent process in the bottom 5th percentile of frequency.
  - question: Does an 'osascript' execution event exhibit features that a machine learning model classifies as malicious?
    context: This question uses a machine learning model to perform a holistic assessment of an 'osascript' execution. The model considers multiple features simultaneously—such as the parent process, command-line arguments, and network behavior—to calculate a probability of maliciousness. This approach can detect novel or complex attacks that don't match simple symbolic rules or statistical outliers.
    answer_sources:
      - macOS Process Execution Log
      - macOS File Access Log
      - Zeek conn.log
      - Zeek dns.log
      - Threat intelligence platform API
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each 'osascript' execution, extract features (parent process, cmdline args, script path entropy, network connections, destination reputation).
          Input features into a pre-trained classification model (e.g., XGBoost).
          Alert if the malicious probability score exceeds a defined threshold (e.g., > 0.85).
  - question: Is 'osascript' being executed with an inline script containing high-risk keywords?
    context: This question targets a common adversary technique of passing malicious code directly on the command line using the '-e' flag. Searching for keywords like 'do shell script', 'curl', or 'python' within these inline scripts can quickly identify attempts to use AppleScript as a dropper or loader for other malicious payloads.
    answer_sources:
      - macOS Process Execution Log with command-line auditing
      - Centralized log management system
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Search for 'osascript' process executions with the '-e' command-line flag.
          Use regex to scan the command line for keywords like 'do shell script', 'python', 'curl', 'base64', 'nc'.
          Alert on any match.
  - question: Does an inline AppleScript executed via 'osascript -e' have an unusually high Shannon entropy score?
    context: This question aims to detect obfuscated or packed code within inline scripts. Malicious scripts are often obfuscated to evade simple keyword-based detection, which typically results in a higher Shannon entropy (a measure of randomness) than legitimate, human-readable scripts. By baselining normal entropy levels, we can flag scripts that are statistically more random and therefore suspicious.
    answer_sources:
      - macOS Process Execution Log with command-line auditing
      - Centralized log management system
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each 'osascript -e' execution, extract the inline script string.
          Calculate the Shannon entropy of the string.
          Compare the score to a pre-calculated baseline (e.g., 95th percentile of entropy over 30 days).
          Alert if the score exceeds the baseline threshold.
  - question: Does a natural language processing (NLP) model classify an inline AppleScript as malicious?
    context: This question leverages advanced machine learning to understand the content and intent of an inline script. An NLP model, trained on a large dataset of both benign and malicious scripts, can identify subtle patterns, syntax, and combinations of commands indicative of malicious behavior, providing a more robust detection method than keyword matching or entropy analysis alone.
    answer_sources:
      - macOS Process Execution Log with command-line auditing
      - Centralized log management system
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Extract the inline script content from 'osascript -e' executions.
          Input the script content into a pre-trained NLP classification model (e.g., fine-tuned DistilBERT).
          Alert if the model classifies the script as malicious with high confidence (e.g., > 0.90).
  - question: Has 'osascript', when spawned by a productivity application, made a network connection to a known-bad destination or used a malicious JA3/JA3S hash?
    context: This question focuses on a specific, high-risk attack chain a document-based compromise. When a common application like Microsoft Word or Adobe Reader spawns 'osascript', which then communicates over the network, it's highly suspicious. This query validates the suspicion by checking the network destination (IP, FQDN) and TLS fingerprint (JA3/JA3S) against threat intelligence feeds.
    answer_sources:
      - macOS Process Execution Log
      - macOS Network Connection Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Find 'osascript' processes whose parent is a productivity app (e.g., 'Microsoft Word', 'Adobe Reader').
          Correlate these processes with outbound network connections.
          Query destination IP/FQDN against threat intelligence.
          Query the connection's JA3/JA3S hash against threat intelligence.
          Alert on any match.
  - question: Has 'osascript' or its child processes initiated a network connection using a statistically rare FQDN or JA3/JA3S hash?
    context: This question aims to detect command-and-control (C2) or data exfiltration channels by identifying network connections that are anomalous for the enterprise. Adversaries often use unique domains or specific client-side TLS implementations (resulting in a rare JA3/JA3S hash) that stand out when compared to a baseline of normal network traffic. Flagging rare FQDNs or TLS fingerprints helps uncover these novel C2 channels.
    answer_sources:
      - macOS Process Execution Log
      - macOS Network Connection Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For network connections from 'osascript' or its children, extract destination FQDN and JA3/JA3S hash.
          Compare the prevalence of the FQDN and hash against a 30-day enterprise-wide baseline.
          Assign a risk score if the FQDN is rare (e.g., < 5 sightings) or the hash is rare (e.g., bottom 1%).
          Alert if the cumulative risk score exceeds a threshold.
  - question: Does an anomaly detection model flag network connections from 'osascript' as suspicious?
    context: This question uses an unsupervised machine learning model to identify network connections that deviate from established normal patterns. The model learns what "normal" 'osascript' network behavior looks like based on features like parent process, destination port, and data volume. Any connection that the model flags as an anomaly is a strong candidate for investigation, as it could represent an unknown or novel C2 technique.
    answer_sources:
      - macOS Process Execution Log
      - macOS Network Connection Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Extract features from 'osascript' network connections (parent process, port, bytes transferred, FQDN/JA3 rarity).
          Input the feature set into a trained anomaly detection model (e.g., Isolation Forest).
          Alert on any connection flagged as an anomaly.
  - question: Has the 'osascript' process or its children created or modified a .plist file or an executable file in a known macOS persistence location?
    context: This question directly targets the use of AppleScript for establishing persistence. Adversaries use 'osascript' to write or alter files in directories like LaunchAgents or LaunchDaemons, which causes their malicious code to be executed automatically on startup or login. Monitoring for these specific write/modify actions by 'osascript' in these sensitive locations is a critical defense.
    answer_sources:
      - macOS File Creation Log
      - macOS File Modification Log
      - macOS Process Execution Log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Monitor for file write/modify events in persistence directories (e.g., /Library/LaunchAgents, ~/Library/LaunchAgents).
          Check if the process performing the action is 'osascript' or a child of 'osascript'.
          Specifically look for files with '.plist' extension or the setting of execute permissions.
          Generate a high-severity alert on a match.
  - question: Has the rate of file creation or modification by 'osascript' in persistence locations exceeded a statistically normal threshold for a given user or host?
    context: This question aims to detect an unusual burst of activity related to persistence. While a single file modification might be legitimate, a sudden, high volume of such actions by 'osascript' in a short period is highly anomalous. By establishing a baseline of normal activity and alerting on significant deviations, this method can catch adversaries attempting to establish multiple persistence mechanisms at once.
    answer_sources:
      - macOS File Creation Log
      - macOS File Modification Log
      - macOS Process Execution Log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each user/host, track the rate of file creations/modifications by 'osascript' in persistence directories.
          Establish a baseline rate using time-series analysis (e.g., 99th percentile of files/hour).
          Alert if the observed rate on an endpoint exceeds this statistical threshold.
  - question: Has a file system event involving 'osascript' in a persistence location been classified as an outlier by a clustering model?
    context: This question uses machine learning to identify novel persistence techniques. A clustering algorithm groups together 'normal' file system activities based on features like the process name, target directory, and file type. Any activity by 'osascript' that doesn't fit into a known cluster of benign behavior is flagged as a 'noise' point or an outlier, indicating it could be a previously unseen method of establishing persistence.
    answer_sources:
      - macOS File Creation Log
      - macOS File Modification Log
      - macOS Process Execution Log
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          Extract features from file system events (process name, target dir, file extension, permissions).
          Input the features into a clustering algorithm (e.g., DBSCAN).
          Alert if a file modification by 'osascript' in a persistence location is classified as a noise point (outlier).