name: T1428: Exploitation of Remote Services
id: 5a9b8c7d-6e3f-4a1b-9c8d-0f7e6a5b4c3d
description: Is an adversary using a compromised mobile device to move laterally within our internal network by exploiting remote services? This playbook addresses this by looking for indicators such as a successful remote logon from a mobile IP shortly after a network scan, a critical network-facing service crashing after a connection from a mobile IP, or a network service spawning a suspicious child process following a connection from a mobile IP.
type: technique
related:
- TA0033: Lateral Movement
contributors: Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
investigative_questions:
- question: How can we detect if a network scan from a mobile device is immediately followed by a successful remote logon to a scanned host?
  context: This question aims to identify a common attack pattern where an adversary first scans for open services from a compromised mobile device and then uses that information to log into a vulnerable host. Correlating a scan alert with a subsequent successful logon from the same source IP within a short time window provides a high-fidelity indicator of lateral movement.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Windows Event ID 4624
  - VPN Access Logs
  - DHCP Server Logs
  - VPN Concentrators, Internal Wi-Fi Access Points and their associated RADIUS servers, Core network switches, Domain Controllers, and high-value internal servers (e.g., file servers, database servers).
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Create a watch list of mobile device IP ranges from VPN/DHCP logs.
      // ALERT when (Zeek notice.log shows 'Scan::Port_Scan' or 'Scan::Address_Scan' FROM source_ip in mobile_watchlist)
      // AND (Windows Event 4624 'Logon Type 3 or 10' TO scanned_destination_ip FROM same source_ip) occurs within 60 minutes.
- question: Can we identify network scanning behavior from mobile devices by detecting statistically significant increases in the number of unique hosts or ports they connect to?
  context: This question focuses on detecting scanning activity without relying on explicit scan signatures. By establishing a baseline of normal network behavior for each mobile device, we can spot anomalies like connecting to an unusually high number of unique hosts or ports. This method can uncover stealthier scans that might evade signature-based detection. High Shannon entropy in destination ports further strengthens this indicator.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Windows Event ID 4624
  - VPN Access Logs
  - DHCP Server Logs
  - VPN Concentrators, Internal Wi-Fi Access Points and their associated RADIUS servers, Core network switches, Domain Controllers, and high-value internal servers (e.g., file servers, database servers).
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // For each mobile source_ip, create a 5-minute rolling baseline of unique destination_ips and destination_ports.
      // ALERT when count(unique destination_ips) or count(unique destination_ports) > 98th_percentile_of_baseline.
      // ENRICH alert with Shannon entropy of destination_ports.
- question: Can we use machine learning to detect anomalous network activity from mobile devices that may indicate scanning or pre-exploitation behavior?
  context: This question explores an advanced, unsupervised machine learning approach to identify subtle deviations from a device's normal activity profile. An isolation forest model can analyze multiple features simultaneously (e.g., connection counts, states, data volume, entropy) to flag complex anomalous patterns that simpler threshold-based rules might miss, providing a more holistic view of potential scanning.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Windows Event ID 4624
  - VPN Access Logs
  - DHCP Server Logs
  - VPN Concentrators, Internal Wi-Fi Access Points and their associated RADIUS servers, Core network switches, Domain Controllers, and high-value internal servers (e.g., file servers, database servers).
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // For each mobile device, train an isolation forest model on features from Zeek conn.log (unique IPs/ports, entropy, conn_state ratios, bytes, etc.).
      // In real-time, calculate features for a 5-minute window.
      // ALERT when anomaly_score > threshold.
      // CORRELATE alert with subsequent logon activity.
- question: How can we determine if a critical service crash was potentially caused by an exploitation attempt from a mobile device?
  context: This question aims to link a server-side event (a service crash) with a preceding network event (a connection from a mobile device). A service crash immediately following a connection from an untrusted or mobile source is a strong indicator of a failed or successful exploit attempt against that service. This correlation helps prioritize investigation into the crash.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 7034
  - Windows Event ID 7031
  - Zeek conn.log
  - Zeek http.log
  - VPN Access Logs
  - DHCP Server Logs
  - Application servers, database servers, DMZ-hosted services, and workstations hosting remote services (e.g., RDP, SMB, HTTP) accessible from the internal network.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Create a watch list of critical service process names.
      // ALERT on Windows Event 1000, 7034, or 7031 where process_name is in watch list.
      // In response, query Zeek conn.log for connections to the affected host and service port within the 60 seconds prior.
      // ESCALATE if a source_ip from the mobile_watchlist is found.
- question: Can we statistically identify an abnormal spike in service crashes that might correlate with exploit attempts from mobile devices?
  context: This question uses statistical modeling to detect anomalies in service stability. Most services are stable, so crashes are rare events. By modeling the baseline crash rate with a Poisson distribution, we can identify periods where the number of crashes is statistically improbable, suggesting a targeted attack (like a brute-force or fuzzing campaign) rather than random failures. Correlating this with mobile IP activity provides investigative context.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 7034
  - Windows Event ID 7031
  - Zeek conn.log
  - Zeek http.log
  - VPN Access Logs
  - DHCP Server Logs
  - Application servers, database servers, DMZ-hosted services, and workstations hosting remote services (e.g., RDP, SMB, HTTP) accessible from the internal network.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // For each critical service, establish a baseline crash frequency (e.g., hourly over 30 days) using a Poisson distribution model.
      // ALERT if the observed number of crashes in an hour is a statistical outlier (e.g., p-value < 0.01).
      // CORRELATE alert with a spike in connections from the mobile_watchlist to the affected service port.
- question: Can a machine learning model be trained to classify service crashes as either benign or exploit-induced based on the network traffic that preceded them?
  context: This question proposes a sophisticated, supervised ML approach to add intelligence to crash analysis. By training a model on features extracted from network logs just before known benign and malicious crashes, the system can learn to distinguish between them. This allows for automated, real-time classification of new crashes, instantly flagging those likely caused by an exploit attempt from a mobile device for high-priority response.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 7034
  - Windows Event ID 7031
  - Zeek conn.log
  - Zeek http.log
  - VPN Access Logs
  - DHCP Server Logs
  - Application servers, database servers, DMZ-hosted services, and workstations hosting remote services (e.g., RDP, SMB, HTTP) accessible from the internal network.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Train a classifier (e.g., Random Forest) on labeled historical crash data.
      // Features from preceding Zeek logs: IP reputation, payload entropy, URI length/entropy, User-Agent, etc.
      // On a new crash event from a mobile IP source, extract features from the preceding connection.
      // ALERT if model classifies the event as 'exploit-induced' with high confidence.
- question: How can we detect when a remote service, after being contacted by a mobile device, spawns a suspicious child process like a command shell?
  context: This question targets a classic post-exploitation behavior where a compromised web or application server is used to spawn a shell (e.g., cmd.exe, powershell.exe) to execute further commands. Correlating the suspicious process creation event with an immediately preceding network connection from a mobile device provides strong evidence that the device was the source of the exploit.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - VPN Access Logs
  - DHCP Server Logs
  - Web servers, application servers, domain controllers, and other systems running remotely accessible services.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Create watchlists for network service parent processes and suspicious child processes.
      // ALERT on Windows Event 4688 where ParentProcessName is in watchlist_A AND NewProcessName is in watchlist_B.
      // CONFIRM the alert by finding a connection in Zeek conn.log from a mobile_watchlist IP to the host within the previous 5 seconds.
- question: Can we detect anomalous process creation by identifying rare or never-before-seen parent-child process relationships initiated by network services?
  context: This question focuses on detecting "living-off-the-land" techniques by baselining normal system behavior. Legitimate network services typically have a predictable set of child processes. An alert on a rare or new parent-child relationship (e.g., w3wp.exe spawning net.exe) is a powerful anomaly indicator. Further scoring the alert based on command-line characteristics (entropy, length) helps filter out benign but rare events.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - VPN Access Logs
  - DHCP Server Logs
  - Web servers, application servers, domain controllers, and other systems running remotely accessible services.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Baseline all parent-child process relationships from Event 4688 logs over 30 days.
      // ALERT when a network service parent process spawns a child where the pair's frequency is < 0.01%.
      // ESCALATE if the CommandLine's entropy, length, or non-alphanumeric ratio exceeds 3 standard deviations from its baseline.
- question: Can an NLP model be used to automatically classify command lines as malicious when a network service spawns a process after a connection from a mobile device?
  context: This question leverages advanced AI to understand the intent behind a command line, rather than just its structure. Obfuscated PowerShell, base64-encoded commands, and other sophisticated techniques can be detected by a trained NLP model. By applying this analysis to processes spawned by network services immediately after a mobile device connection, we can achieve high-fidelity detection of code execution resulting from an exploit.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - VPN Access Logs
  - DHCP Server Logs
  - Web servers, application servers, domain controllers, and other systems running remotely accessible services.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Fine-tune an NLP model (e.g., DistilBERT) on a labeled dataset of malicious and benign command lines.
      // WHEN a network service spawns a process following a mobile IP connection:
      //   - Pass the full CommandLine from Event 4688 to the model.
      // ALERT if classification is 'malicious' with confidence > 0.90.