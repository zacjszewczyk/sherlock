name: T1546.015: Component Object Model Hijacking
id: f3a1b0c2-d4e5-4f6a-8b9c-0d1e2f3a4b5c
description: This playbook focuses on detecting Component Object Model (COM) hijacking, a technique used by adversaries for both persistence and privilege escalation. Adversaries modify COM-related registry keys under HKCU for user-level persistence or HKLM for system-level privilege escalation. These modifications cause legitimate, high-privilege, or auto-started processes to load and execute malicious code when they instantiate a COM object. This playbook provides questions to investigate suspicious registry modifications, the use of script interpreters in COM values, binaries in non-standard locations, and subsequent anomalous process or network behavior initiated by processes that load the hijacked COM object.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a COM server registry key under the HKCU hive being modified to point to a file with a known-bad hash?
  context: Adversaries establish persistence by modifying COM server registry keys in the current user's hive (HKCU) to point to their malicious executables. This question aims to detect this by checking the hash of the new file against a threat intelligence blacklist. A match is a high-confidence indicator of a known malicious payload being used for COM hijacking.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Remote Desktop Servers
  - VDI Environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      events = search(source="WinEventLog:Security", EventID=4657)
      com_mods = filter(events, ObjectName CONTAINS "HKCU\Software\Classes\CLSID\" AND (ObjectName CONTAINS "\InProcServer32" OR ObjectName CONTAINS "\LocalServer32"))
      FOR each mod in com_mods:
        file_path = extract(mod.NewValue)
        file_hash = calculate_hash(file_path)
        is_malicious = query_threat_intel(file_hash)
        IF is_malicious:
          ALERT
- question: Is a specific process performing an unusually high number of HKCU COM registry modifications?
  context: While some HKCU COM modifications are normal, a single process making an excessive number of changes can indicate an automated script or tool deploying persistence across multiple COM objects. This question uses a statistical baseline to detect anomalous modification frequencies by a parent process (e.g., powershell.exe), which could signal malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Remote Desktop Servers
  - VDI Environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(source="WinEventLog:Security", EventID=4657, ObjectName CONTAINS "HKCU\Software\Classes\CLSID\")
      baseline = calculate_daily_baseline(com_mods, group_by=[host, process_name])
      FOR each host, process in today's activity:
        IF count(com_mods) > percentile(baseline, 95):
          ALERT
- question: Can we identify malicious HKCU COM modifications using a machine learning model?
  context: This question proposes a more advanced detection method using a classification model to score the maliciousness of an HKCU COM modification. By analyzing features like file path entropy, suspicious keywords, parent process, and code signing status, the model can identify subtle or novel hijacking attempts that might evade simpler rule-based detections.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Remote Desktop Servers
  - VDI Environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(source="WinEventLog:Security", EventID=4657, ObjectName CONTAINS "HKCU\Software\Classes\CLSID\")
      FOR each mod in com_mods:
        features = extract_features(mod)
        score = random_forest_model.predict(features)
        IF score > high_threshold:
          ALERT
- question: Has a COM server registry key's value been modified to directly execute a script interpreter?
  context: Legitimate COM server values typically point to a DLL or EXE file. Adversaries may instead insert a command line that executes a script interpreter (e.g., powershell.exe, mshta.exe) with malicious arguments. This question uses regular expressions to find such highly suspicious and irregular modifications, which are a strong indicator of COM hijacking for persistence.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Application Servers
  - Remote Desktop Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      events = search(source="WinEventLog:Security", EventID=4657, ObjectName CONTAINS "CLSID")
      script_pattern = regex("(powershell|wscript|cscript|mshta|rundll32)\.exe .*")
      suspicious_mods = filter(events, NewValue MATCHES script_pattern)
      IF suspicious_mods:
        ALERT
- question: Is the value of a modified COM server key unusually complex or high in entropy?
  context: File paths are typically simple and have low character entropy. Adversaries, however, may embed obfuscated scripts directly into the registry value, significantly increasing its complexity and entropy. This question aims to identify these cases by flagging COM modifications where the new value has an anomalously high entropy score compared to a baseline of normal file paths.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Application Servers
  - Remote Desktop Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(source="WinEventLog:Security", EventID=4657, ObjectName CONTAINS "HKCU\Software\Classes\CLSID\")
      baseline_entropy = calculate_baseline_entropy(com_mods.NewValue)
      FOR each mod in com_mods:
        current_entropy = calculate_entropy(mod.NewValue)
        IF current_entropy > percentile(baseline_entropy, 99):
          ALERT
- question: Is there an anomalous spike in the rate of COM modifications involving script interpreters on a host?
  context: A sudden increase in the number of COM server keys being modified to include script interpreters can indicate a large-scale or automated deployment of a persistence mechanism. This question uses time-series anomaly detection to monitor this specific activity rate, allowing for the detection of a broader campaign even if individual scripts are not immediately identified as malicious.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Application Servers
  - Remote Desktop Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      script_mods = search(EventID=4657, NewValue CONTAINS ".exe")
      time_series = count_per_hour(script_mods, group_by=host)
      anomalies = arima_model.detect_anomalies(time_series)
      IF anomalies:
        ALERT
- question: Has a COM server key been modified to point to a file in a non-standard or user-writable directory?
  context: Legitimate COM objects are typically located in protected system directories. Adversaries often place their malicious payloads in user-writable locations like %APPDATA% or %TEMP% to bypass permissions issues. This question uses a watchlist of suspicious directory paths to quickly identify COM objects pointing to these high-risk locations.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Multi-user servers (e.g., Citrix, RDS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(source="WinEventLog:Security", EventID=4657, ObjectName CONTAINS "HKCU\Software\Classes\CLSID\")
      suspicious_paths = ["\AppData\", "\Temp\", "\Downloads\", "\Public\", "C:\ProgramData\"]
      FOR each mod in com_mods:
        IF mod.NewValue CONTAINS any(suspicious_paths):
          ALERT
- question: Is a COM server key being modified to point to a file in a statistically rare directory?
  context: Beyond a simple watchlist, this question aims to find COM hijacking that uses less common but still suspicious locations. By baselining all legitimate COM server directory paths across the enterprise, we can calculate the rarity of each path. An alert is triggered when a modification points to a new or very infrequent directory, indicating a potential outlier and malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Multi-user servers (e.g., Citrix, RDS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(EventID=4657, ObjectName CONTAINS "CLSID")
      path_prevalence = calculate_prevalence(extract_directory(com_mods.NewValue))
      FOR each mod in com_mods:
        directory = extract_directory(mod.NewValue)
        IF path_prevalence[directory] < 0.001:
          ALERT
- question: Can we detect anomalous COM modifications by identifying outliers from normal software installation patterns?
  context: Legitimate COM modifications usually occur during software installations, creating clusters of related activity (e.g., same parent process, similar file paths). Adversary persistence attempts are often one-off events that do not fit these patterns. This question uses a clustering algorithm to group normal activity and identify sparse, outlier events that are likely malicious.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations
  - Multi-user servers (e.g., Citrix, RDS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(EventID=4657, ObjectName CONTAINS "CLSID")
      features = extract_features(com_mods, [directory, parent_process, file_extension])
      clusters = dbscan_cluster(features)
      outliers = identify_outliers(clusters)
      IF outliers:
        ALERT
- question: Following a COM registry modification, did a legitimate COM-loading process spawn a command-line interpreter?
  context: After hijacking a COM object, an adversary's code will be executed by a legitimate process (like explorer.exe) that loads it. A key indicator of compromise is seeing this legitimate process then spawn a suspicious child, such as cmd.exe or powershell.exe. This question correlates the registry modification with subsequent process creation events to detect this post-hijack activity.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mods = search(EventID=4657, ObjectName CONTAINS "CLSID")
      FOR each mod in com_mods:
        child_procs = search(EventID=4688, ParentProcessName IN ["explorer.exe", "svchost.exe"], host=mod.host, time_window=[mod.time, +5min])
        IF any(child_procs.ProcessName IN ["cmd.exe", "powershell.exe"]):
          ALERT
- question: Following a COM modification, did a common system process make a rare network connection?
  context: Adversaries may use a hijacked COM object to establish command and control. This would manifest as a legitimate system process (e.g., explorer.exe) making an unusual outbound network connection. This question baselines normal network behavior for these processes and alerts when a connection is made to a statistically rare destination after a COM modification event.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      com_mod_alerts = search_for_com_hijack_alerts()
      FOR each alert in com_mod_alerts:
        process = alert.process
        host = alert.host
        connections = search(source="zeek", process=process, host=host)
        baseline = get_baseline_destinations(process)
        FOR each conn in connections:
          IF prevalence(conn.destination, baseline) < 0.05:
            ALERT
- question: Can we detect COM hijacking by identifying anomalous sequences of activity using a graph-based model?
  context: COM hijacking involves a chain of events: a registry write, a process loading the object, and subsequent actions like process creation or network connections. This question proposes modeling these interactions as a graph. A trained neural network can learn what legitimate sequences look like and flag anomalous graphs, such as a rare registry write followed by explorer.exe spawning powershell.exe to connect to a new IP.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      events = collect_events(reg, proc, net)
      subgraphs = build_activity_graphs(events)
      FOR each graph in subgraphs:
        is_anomalous = graph_nn_model.predict(graph)
        IF is_anomalous:
          ALERT
- question: Is a COM server registry key under the HKLM hive being modified to point to a known-malicious file?
  context: Modifying COM keys in the HKLM hive is a powerful privilege escalation technique, as these COM objects are often loaded by SYSTEM-level processes. This question seeks to detect this by checking the hash of the new file specified in an HKLM COM key modification against a threat intelligence feed. A match is a high-confidence indicator of a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4657
  - Domain Controllers
  - Tier 0 Servers
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      events = search(source="WinEventLog:Security", EventID=4657)
      com_mods = filter(events, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      FOR each mod in com_mods:
        file_path = extract(mod.NewValue)
        file_hash = calculate_hash(file_path)
        is_malicious = query_threat_intel(file_hash)
        IF is_malicious:
          ALERT
- question: Is there an unusual number of HKLM COM modifications occurring on a host?
  context: Modifications to HKLM COM keys are typically rare and associated with legitimate software installations or updates. A sudden increase in this activity, especially outside of scheduled patching windows, is highly suspicious. This question aims to detect potential privilege escalation attempts by alerting on hosts with an anomalous count of HKLM COM modifications.
  answer_sources:
  - Windows Event ID 4657
  - Domain Controllers
  - Tier 0 Servers
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      daily_counts = count_per_day(hklm_mods, group_by=host)
      baseline = calculate_historical_baseline(daily_counts)
      FOR each host in daily_counts:
        IF count > 2 OR count > stdev(baseline) * 3:
          ALERT
- question: Does an HKLM COM modification deviate from the pattern of legitimate software installations?
  context: Legitimate HKLM COM modifications have predictable characteristics (e.g., performed by msiexec.exe, new binary is properly signed). This question uses a one-class SVM model trained on these 'normal' features. Any modification that falls outside this learned boundary is flagged as an anomaly, effectively detecting hijacking attempts that don't use known-bad files but still look different from legitimate activity.
  answer_sources:
  - Windows Event ID 4657
  - Domain Controllers
  - Tier 0 Servers
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      FOR each mod in hklm_mods:
        features = extract_features(mod, [parent_process, is_signed, vendor])
        is_normal = one_class_svm_model.predict(features)
        IF NOT is_normal:
          ALERT
- question: Is a high-risk CLSID known to be used in public exploits being modified?
  context: Security researchers and adversaries often discover and abuse specific COM objects for privilege escalation. This question involves maintaining a watchlist of these high-risk CLSIDs. Any modification to the server keys of a CLSID on this list should be treated as a high-severity alert, as it may correspond to a known exploit being used in your environment.
  answer_sources:
  - Windows Event ID 4657
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      high_risk_clsids = ["{clsid-1}", "{clsid-2}", ...]
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      FOR each mod in hklm_mods:
        clsid = extract_clsid(mod.ObjectName)
        IF clsid IN high_risk_clsids:
          ALERT
- question: Is an HKLM COM key being modified by a process not typically associated with software installation?
  context: HKLM COM keys should only be modified by trusted installers like 'msiexec.exe' or 'setup.exe'. A modification by any other process, especially a command-line interpreter like 'powershell.exe' or a process running from a user's profile, is a strong indicator of a privilege escalation attempt. This question baselines legitimate parent processes and alerts on deviations.
  answer_sources:
  - Windows Event ID 4657
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      legit_installers = ["msiexec.exe", "setup.exe", "TrustedInstaller.exe"]
      FOR each mod in hklm_mods:
        IF mod.ProcessName NOT IN legit_installers:
          ALERT
- question: Can we detect an anomalous HKLM COM modification that doesn't fit within a 'good' software installation community?
  context: This question conceptualizes software installations as a graph of related process and registry activities. Legitimate installations form dense communities in this graph. A malicious, isolated write to a high-risk HKLM COM key by a non-installer process would appear as an outlier that does not belong to any known 'good' community, allowing for its detection.
  answer_sources:
  - Windows Event ID 4657
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      events = collect_process_and_registry_events()
      graph = build_interaction_graph(events)
      communities = detect_communities(graph)
      outliers = find_nodes_not_in_communities(graph, communities)
      IF any(outliers are hklm_com_writes):
        ALERT
- question: Did a process with 'Medium' or 'Low' integrity level successfully modify an HKLM COM registry key?
  context: HKLM registry keys are protected and should only be modifiable by high-integrity (Administrator) or SYSTEM-level processes. A successful modification by a medium or low integrity process is a direct indicator that a privilege escalation vulnerability has been successfully exploited to bypass security controls. This is a high-confidence alert for a security breach.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      FOR each mod in hklm_mods:
        proc_creation = search(EventID=4688, NewProcessId=mod.ProcessId)
        integrity = extract(proc_creation.TokenInformation.MandatoryLabel)
        IF integrity IN ["Medium", "Low"]:
          ALERT
- question: Are we observing the statistically impossible event of a non-elevated process writing to an HKLM COM key?
  context: In a properly configured system, the frequency of a low or medium integrity process successfully writing to the HKLM hive should be zero. This question treats any such occurrence as an extreme statistical anomaly. Detecting even a single instance of this event provides a very high-confidence signal of a successful privilege escalation exploit.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_writes = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      # Correlate with process creation to get integrity level
      # Any successful correlation with a Medium/Low integrity level is an alert.
      # The logic is identical to the previous question, framed as a statistical anomaly.
      ALERT on any HKLM write from a process with integrity < High.
- question: After a successful low-integrity HKLM write, what is the adversary's likely intent based on subsequent actions?
  context: Detecting a low-integrity write to HKLM confirms privilege escalation. The next step is to understand the adversary's goal. This question proposes using a classification model to analyze the post-escalation activity (e.g., command line arguments, network connections) to automatically categorize the intent, such as establishing C2 or performing local discovery, which helps prioritize the incident response.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      privesc_alerts = search_for_low_integrity_hklm_writes()
      FOR each alert in privesc_alerts:
        post_activity = collect_subsequent_activity(alert.process, alert.host)
        intent = classification_model.predict(post_activity)
        ENRICH alert with intent (e.g., "C2", "Discovery")
- question: Following an HKLM COM modification, is a high-privilege process making a new external network connection?
  context: After escalating privileges via COM hijacking, an adversary may use a now-compromised SYSTEM-level process to establish command and control. This question correlates an HKLM COM modification with subsequent network connections from high-privilege processes on the same host, alerting if the connection goes to an external IP not on an allowlist.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - Tier 0 Servers
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      high_priv_procs = ["services.exe", "lsass.exe", "svchost.exe"]
      FOR each mod in hklm_mods:
        net_conn = search(source="zeek", host=mod.host, process IN high_priv_procs, time_window=[mod.time, +10min])
        FOR each conn in net_conn:
          IF is_external(conn.dest_ip) AND conn.dest_ip NOT IN allowlist:
            ALERT
- question: After an HKLM COM modification, did a high-privilege process connect to a statistically rare destination?
  context: High-privilege system processes on critical servers typically have very predictable network behavior. This question establishes a baseline of normal destinations for these processes. If, after an HKLM COM modification, one of these processes connects to a destination that is extremely rare for it, this is a strong anomaly signal that could indicate a C2 channel established via the hijacked COM object.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - Tier 0 Servers
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mods = search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\")
      FOR each mod in hklm_mods:
        connections = find_subsequent_connections(mod.host, high_privilege_processes)
        baseline = get_destination_prevalence(high_privilege_processes)
        FOR each conn in connections:
          IF prevalence(conn.destination, baseline) < 0.01:
            ALERT
- question: Is a high-privilege process exhibiting anomalous network patterns indicative of C2 beaconing after an HKLM COM modification?
  context: Adversary C2 traffic often manifests as new, periodic, low-volume network connections (beacons). While a single connection might not be suspicious, the pattern is. This question uses a time-series model to monitor the network behavior of high-privilege processes. A successful COM hijack could cause a new beaconing pattern to emerge, which the model would flag as a deviation from normal activity.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - Tier 0 Servers
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hklm_mod_hosts = unique(search(EventID=4657, ObjectName CONTAINS "HKLM\SOFTWARE\Classes\CLSID\").host)
      FOR each host in hklm_mod_hosts:
        time_series_data = get_network_patterns(host, high_privilege_processes)
        anomalies = lstm_model.detect_anomalies(time_series_data)
        IF anomalies:
          ALERT