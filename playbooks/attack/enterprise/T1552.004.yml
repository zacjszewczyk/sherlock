name: T1552.004: Private Keys
id: a7e8c1f9-5d2b-4a0e-8c3d-1f6a9b4c0e2d
description: This playbook helps investigate whether an adversary has performed discovery, collection, or misuse of private cryptographic keys or certificates. It focuses on detecting the use of known credential theft tools, suspicious command-line activity for finding and exporting keys, unauthorized access to key storage locations, bulk access patterns indicative of collection, anomalous certificate-based authentication suggesting key misuse, and correlated event sequences that show a full collect-stage-exfiltrate pattern.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known credential theft tool targeting private keys been executed?
  context: This question aims to detect the presence of well-known malicious tools (e.g., Mimikatz, LaZagne) by their file hash. A match against a threat intelligence feed of known bad hashes is a high-fidelity indicator that an adversary is actively attempting to steal private keys or other credentials from a system.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - All enterprise endpoints (workstations, servers), Domain Controllers, Public Key Infrastructure (PKI) servers, and Entra ID-joined/hybrid devices.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Search process creation events (Sysmon EID 1, Win EID 4688). For each event, compare the process file hash to a list of known malicious tool hashes. Alert on match.
- question: Has a statistically rare parent-child process relationship been observed that could indicate credential theft activity?
  context: Adversaries often use legitimate processes to launch malicious tools to evade detection. This question seeks to identify such activity by baselining normal parent-child process relationships across the enterprise and flagging executions that are statistically rare (e.g., Microsoft Word spawning PowerShell). This can uncover process injection or malicious script execution associated with key theft.
  answer_sources:
  - Windows Sysmon Event ID 1
  - All enterprise endpoints (workstations, servers), Domain Controllers, Public Key Infrastructure (PKI) servers, and Entra ID-joined/hybrid devices.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      From Sysmon EID 1 logs, baseline the frequency of all parent-child process pairs. Search for new executions where the parent-child pair frequency is below a defined threshold (e.g., 1st percentile). Alert on outliers.
- question: Does a newly executed process exhibit characteristics of a malicious tool, even if its hash is unknown?
  context: To combat polymorphic or unknown malware, this question uses a machine learning model to score process executions based on behavioral characteristics like process name randomness, command-line length, parent process legitimacy, and whether the executable is signed. This allows for the detection of suspicious processes that behave like key theft tools, even without a prior signature.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - All enterprise endpoints (workstations, servers), Domain Controllers, Public Key Infrastructure (PKI) servers, and Entra ID-joined/hybrid devices.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Stream process execution events into a trained classification model. Extract features (process name entropy, command-line args, parent process, etc.). Search for events that receive a high malicious score from the model. Alert on high scores.
- question: Have any command lines been executed that contain patterns used to search for, copy, or export private key files?
  context: This question focuses on detecting adversary "hands-on-keyboard" activity or scripting that uses common system utilities (like find, grep, certutil, openssl) to discover and handle private key files. By searching command-line logs for specific utility names and key-related file extensions (.pem, .pfx, .key), analysts can directly identify attempts to collect credentials.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - All enterprise workstations and servers, particularly developer workstations, build servers, and web servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Search process creation command lines (Sysmon EID 1, Win EID 4688) using regex for patterns like 'find .* .pem', 'certutil .* -exportPFX', 'openssl pkcs12 -export'. Alert on any match.
- question: Has a command line with unusually high entropy been observed, potentially indicating obfuscation?
  context: Adversaries often obfuscate commands (e.g., using Base64 encoding) to hide their intent from simple keyword-based detection. This question aims to uncover such techniques by calculating the statistical randomness (Shannon entropy) of command lines. A command with an unusually high entropy score for a given process or user suggests it may be obfuscated and warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - All enterprise workstations and servers, particularly developer workstations, build servers, and web servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      For shell/scripting processes, calculate the Shannon entropy of the command line. Compare it to a historical baseline for that user/process. Search for command lines with entropy scores exceeding a threshold (e.g., 98th percentile). Alert on outliers.
- question: Does a command line have a high probability of being malicious based on a natural language processing model?
  context: This question leverages a more advanced technique to analyze the content and structure of command lines. An NLP model, trained on vast datasets of benign and malicious commands, can understand complex patterns, syntax, and combinations of tools and arguments to provide a probabilistic score of maliciousness, enabling the detection of novel or sophisticated variations of key theft commands.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - All enterprise workstations and servers, particularly developer workstations, build servers, and web servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Stream command-line data into a trained NLP model. Search for commands that receive a high probability score for malicious intent. Alert on high scores.
- question: Has an unauthorized user or process accessed sensitive private key files or directories?
  context: This question seeks to identify unauthorized access by employing an allowlisting strategy. By enabling detailed file access auditing (SACLs) on critical directories holding private keys and maintaining a strict list of authorized users and processes, any access event from an entity not on the list is immediately flagged as a high-confidence security violation.
  answer_sources:
  - Windows Event ID 4663
  - Windows Sysmon Event ID 11
  - File servers hosting user home directories (e.g., '*\.ssh\*'), Public Key Infrastructure (PKI) servers (e.g., 'C:\ProgramData\Microsoft\Crypto\*'), web servers with SSL/TLS certificates, and developer workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Search file access events (Win EID 4663, Sysmon EID 11) for reads on monitored key files/directories. Compare the accessing user/process against a predefined allowlist. Alert on any access not on the list.
- question: Has a statistically improbable access to a private key file occurred, based on historical user, process, and time-of-day patterns?
  context: This question aims to find unusual access that might be technically "allowed" but is behaviorally anomalous. It establishes a baseline of normal access patterns for each key file, considering who, what, and when it's typically accessed. An alert is triggered if an access occurs from a user-process combination that is rarely seen or at a time of day that is abnormal for that user, pointing to potential credential misuse.
  answer_sources:
  - Windows Event ID 4663
  - Windows Sysmon Event ID 11
  - File servers hosting user home directories (e.g., '*\.ssh\*'), Public Key Infrastructure (PKI) servers (e.g., 'C:\ProgramData\Microsoft\Crypto\*'), web servers with SSL/TLS certificates, and developer workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Baseline file access events by user, process, and time. Search for new access events where the user-process-time combination is statistically rare (e.g., lowest 1% frequency or >3 standard deviations from mean time). Alert on outliers.
- question: Has an unsupervised machine learning model detected an anomalous file access event related to private keys?
  context: This question uses an anomaly detection model (e.g., Isolation Forest) to identify novel unauthorized access without pre-defined rules. The model learns the pattern of 'normal' multi-dimensional access behavior (user, process, file path, time) and flags any event that it scores as a significant outlier, providing a powerful way to detect previously unseen attack patterns.
  answer_sources:
  - Windows Event ID 4663
  - Windows Sysmon Event ID 11
  - File servers hosting user home directories (e.g., '*\.ssh\*'), Public Key Infrastructure (PKI) servers (e.g., 'C:\ProgramData\Microsoft\Crypto\*'), web servers with SSL/TLS certificates, and developer workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Stream file access event features (user, process, path, time) into an unsupervised anomaly detection model. Search for events that the model scores as significant outliers. Alert on high anomaly scores.
- question: Has a single user or process accessed an unusually high number of distinct private key files in a short time frame?
  context: This question is designed to detect bulk collection activity. An adversary searching for valuable keys will often access many different key files in rapid succession. This rule acts as a tripwire, triggering an alert when a user exceeds a simple, defined threshold of unique key file accesses within a short window, which is highly indicative of a collection attempt.
  answer_sources:
  - Windows Event ID 4663
  - Zeek files.log
  - Enterprise-wide file systems, centralized certificate stores, distributed developer workstations, and network file shares (SMB/NFS).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Count unique key file accesses (e.g., *.key, *.pem) per user over a 5-minute window. Search for users who exceed a set threshold (e.g., >10 files). Alert when the threshold is breached.
- question: Has a user's access to private key files exceeded their own dynamically calculated behavioral baseline?
  context: To improve upon static thresholds, this question establishes a personalized baseline of key access for each user. It acknowledges that a PKI administrator's normal behavior is different from a developer's. An alert is triggered only when a user's activity in a given hour exceeds their own historical 99th percentile, resulting in more accurate and context-aware detection of collection activity.
  answer_sources:
  - Windows Event ID 4663
  - Zeek files.log
  - Enterprise-wide file systems, centralized certificate stores, distributed developer workstations, and network file shares (SMB/NFS).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      For each user, maintain a rolling baseline (e.g., 99th percentile) of unique key files accessed per hour. Search for any hour where a user's access count exceeds their personal baseline. Alert on threshold breach.
- question: Has a user's key access behavior caused them to be clustered as an outlier compared to their peers or their own past activity?
  context: This question uses clustering algorithms to group users based on their key access behaviors (e.g., count of keys, hosts accessed from, time patterns). It can identify when a compromised account suddenly changes its behavior to match a high-risk group or becomes so unique it stands out as an anomaly, indicating a potential takeover and collection attempt.
  answer_sources:
  - Windows Event ID 4663
  - Zeek files.log
  - Enterprise-wide file systems, centralized certificate stores, distributed developer workstations, and network file shares (SMB/NFS).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Periodically run a clustering algorithm on user key access features. Search for users who move between established clusters (e.g., 'low' to 'high' access) or are identified as new outliers. Alert on these cluster changes.
- question: Has a successful certificate-based authentication occurred from a known malicious or suspicious source IP?
  context: This question aims to detect the misuse of a stolen private key. By enriching every successful certificate-based login with threat intelligence, any authentication attempt originating from a known malicious IP, an anonymizing service like TOR, or a non-business-related country can be immediately flagged as a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4624
  - Zeek ssh.log
  - Zeek ssl.log
  - VPN/Remote Access Logs
  - Authentication servers (Active Directory), VPN concentrators, SSH jump boxes/bastion hosts, network perimeter gateways, and any service allowing client certificate authentication.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      For each successful certificate-based authentication event, enrich the source IP address with threat intelligence. Search for logins from IPs on deny-lists (malicious, proxy, TOR, non-business geo). Alert on any match.
- question: Has a successful certificate-based authentication occurred with a combination of statistically anomalous properties for that user?
  context: This question seeks to identify credential misuse by building a historical profile of each user's normal login behavior (e.g., source countries, networks, client applications). A new login is assigned a risk score based on how much it deviates from this profile. A login from a new country and a new device, for example, would generate a high risk score and trigger an alert.
  answer_sources:
  - Windows Event ID 4624
  - Zeek ssh.log
  - Zeek ssl.log
  - VPN/Remote Access Logs
  - Authentication servers (Active Directory), VPN concentrators, SSH jump boxes/bastion hosts, network perimeter gateways, and any service allowing client certificate authentication.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      For each user, baseline normal authentication attributes (country, ASN, client app). For new logins, search for deviations from the baseline. Assign risk points for each deviation and alert if the total score exceeds a threshold.
- question: Has an unsupervised machine learning model flagged a certificate-based authentication event as a behavioral novelty for a user?
  context: This question uses a novelty detection model to create a sophisticated, multi-dimensional boundary of 'normal' login behavior for each individual user. It can learn complex relationships between factors like geolocation, time of day, and client software. Any new login that falls outside this learned boundary is flagged as a high-confidence anomaly, indicating a likely compromise of the user's private key.
  answer_sources:
  - Windows Event ID 4624
  - Zeek ssh.log
  - Zeek ssl.log
  - VPN/Remote Access Logs
  - Authentication servers (Active Directory), VPN concentrators, SSH jump boxes/bastion hosts, network perimeter gateways, and any service allowing client certificate authentication.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      For each user, stream login event features (geolocation, time, client) into a trained one-class SVM or other novelty detection model. Search for any login event flagged by the model as an anomaly. Alert on flagged events.
- question: Has a sequence of events corresponding to 'collect, stage, and exfiltrate' of private keys been observed from a single host?
  context: This question uses a stateful correlation rule to detect the full attack chain of key theft. It looks for a specific sequence of events from the same host in a short time window: 1) mass reading of key files, 2) creation of an archive file (e.g., zip, tar), and 3) an outbound network connection to a suspicious destination. Detecting this full sequence provides strong evidence of data theft.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - All endpoints and servers (for process/file activity), and network egress points (for exfiltration traffic analysis).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Create a stateful rule. Search for hosts that exhibit this sequence within 15 mins: 1) >5 key file reads, followed by 2) an archive process creation, followed by 3) an outbound connection to a low-reputation IP/domain. Alert on sequence completion.
- question: Has a statistically significant spike in key file access been followed by the creation of an archive and an outbound data transfer of a similar size?
  context: This question refines the detection of the attack chain by adding statistical and data-driven checks. It first identifies a host with an abnormal rate of key file access, then looks for the creation of an archive. Critically, it then correlates the size of the newly created archive file with the size of a subsequent outbound network transfer. A close match in size is a powerful indicator that the collected keys were staged and exfiltrated.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - All endpoints and servers (for process/file activity), and network egress points (for exfiltration traffic analysis).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Search for hosts where key file read rate exceeds the 98th percentile. If detected, look for a subsequent archive process creation. If that occurs, compare the size of the new archive to subsequent outbound network flows. Alert if sizes are similar (+/- 20%).
- question: Has a machine learning model detected a high probability of a host transitioning through the 'collect, compress, exfiltrate' states?
  context: This question applies a Hidden Markov Model (HMM), which is ideal for recognizing sequences of behavior. The model is trained to understand the probability of a host moving between different states (e.g., from 'Benign' to 'Key Access' to 'Staging' to 'Exfiltration'). By analyzing streams of host events, it can flag systems that follow this malicious state progression with high probability, detecting the entire attack chain in a robust manner.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - All endpoints and servers (for process/file activity), and network egress points (for exfiltration traffic analysis).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      Stream host events (file reads, process creations, network connections) into a trained Hidden Markov Model. Search for event sequences that result in a high probability of the host being in the 'Exfiltration' state. Alert on this state transition.