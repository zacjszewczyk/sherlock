name: T1562.002: Disable Windows Event Logging
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has attempted to evade defenses by disabling or manipulating Windows Event Logging. This involves detecting the execution of known log-tampering tools, the use of native Windows utilities to clear logs or stop the EventLog service, an anomalous cessation or reduction in log volume from a host, a suspicious temporal sequence of events like payload execution followed by log clearing and C2 communication, or discovering unexplained gaps in sequential EventRecordIDs within log files.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is there evidence of known log-tampering tools being executed, based on process names, file hashes, or command-line arguments?
  context: This involves continuously monitoring process creation events (like Sysmon Event ID 1 or Windows Event ID 4688) for indicators of known log-tampering tools. This is a high-fidelity method to detect adversaries using off-the-shelf malware or offensive security frameworks (e.g., Mimikatz, Invoke-Phant0m) to cover their tracks. The detection rule should match process names or file hashes against threat intelligence and use regular expressions to find specific malicious modules or arguments, generating a high-severity alert upon detection.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events WHERE (process_name IN known_tampering_tools OR file_hash IN known_tampering_hashes OR command_line MATCHES known_tampering_regex)
- question: Have any rare processes been executed that could indicate the use of uncommon or custom log-tampering tools?
  context: This question addresses the challenge of detecting unknown or obfuscated tools. By performing prevalence analysis, we can identify processes that are statistical outliers across the enterprise. This action involves calculating the rarity of process names and command-line arguments over a baseline period. A process is flagged for review if its prevalence is exceptionally low (e.g., seen on <0.1% of hosts) and it was launched by a common parent process used for remote execution, such as powershell.exe or wmic.exe.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.
  range: last 90 days
  queries:
  - pseudocode: CALCULATE prevalence of all process_names and command_lines over 30_days. ALERT on processes WHERE prevalence < 0.1% AND parent_process IN ('powershell.exe', 'wmic.exe', etc.)
- question: Can machine learning models identify suspicious process executions indicative of log-tampering behavior, even if the tool is unknown?
  context: This question explores a more advanced, behavioral approach. Instead of relying on specific indicators, a supervised machine learning model (like Random Forest) is trained on labeled data to recognize the characteristics of log-tampering processes. Features for the model could include process name entropy, command-line length and complexity, the parent process, and the user context. Once deployed, the model scores new process events in real-time, alerting on those it classifies as 'log-tampering' with high confidence.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.
  range: last 90 days
  queries:
  - pseudocode: DEPLOY ML_model on process_creation_events. ALERT WHERE model_prediction == 'log-tampering' AND confidence_score > 0.95
- question: Have native Windows utilities been used with specific commands to clear logs, disable the EventLog service, or modify audit policies?
  context: Adversaries often 'live off the land' by using legitimate system tools for malicious purposes. This question focuses on detecting the abuse of utilities like wevtutil.exe, auditpol.exe, and sc.exe. The action involves creating specific correlation rules that look for high-risk command-line arguments (e.g., 'wevtutil.exe cl', 'sc.exe stop eventlog'). To increase confidence, these process events should be correlated with corresponding system events that confirm the action, such as a log being cleared (Event ID 1102) or an audit policy change (Event ID 4719).
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4657
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 4719
  - Windows Event ID 1102
  - Windows Event ID 104
  - Windows Event ID 7035
  - All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.
  range: last 90 days
  queries:
  - pseudocode: CORRELATE process_creation_events (e.g., 'wevtutil.exe cl') WITH confirmation_events (e.g., EventID 1102) ON same_host within short_timeframe
- question: Is there anomalous execution frequency or complexity of commands for system utilities like 'auditpol.exe' or 'wevtutil.exe'?
  context: This question aims to detect abuse of legitimate tools through behavioral analysis. This action involves baselining the normal execution frequency of these utilities per user and host. An alert is triggered if the execution count exceeds a statistical threshold (e.g., 99th percentile) outside of a maintenance window. Additionally, analyzing the complexity (Shannon entropy) of command-line arguments can detect unusual or obfuscated commands, flagging significant deviations from the norm.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4657
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 4719
  - Windows Event ID 1102
  - Windows Event ID 104
  - Windows Event ID 7035
  - All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.
  range: last 90 days
  queries:
  - pseudocode: BASELINE execution_count of ('auditpol.exe', 'wevtutil.exe') per_user_per_host. ALERT if count > 99th_percentile. BASELINE command_line_entropy. ALERT if entropy_deviation > 3_std_dev.
- question: Can we detect a suspicious sequence of events, such as remote login, reconnaissance, and then log clearing?
  context: This question focuses on identifying a common attack pattern where an adversary gains remote access, performs initial reconnaissance, and then clears their tracks. A sequence analysis model can be trained to recognize this specific chain of events: a remote login (Event ID 4624 Type 3 or 10), followed quickly by basic commands (whoami, net user), and then an attempt to clear logs (wevtutil cl), all originating from the same login session within a short time window.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4657
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 4719
  - Windows Event ID 1102
  - Windows Event ID 104
  - Windows Event ID 7035
  - All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.
  range: last 90 days
  queries:
  - pseudocode: DEPLOY sequence_model to find_pattern [Remote_Login -> Recon_Command -> Log_Clear_Command] from same_logon_id within 5_minutes.
- question: Has a critical asset unexpectedly stopped sending logs to the central SIEM?
  context: This question addresses the complete cessation of logs from a host, which can occur if an adversary stops the log forwarding service. The action is to implement a 'heartbeat' rule within the SIEM that triggers an alert if no logs are received from a critical asset for a specified period (e.g., 20 minutes). The rule should be suppressed if the host has logged a graceful shutdown event (Event ID 1074) or is in a pre-defined maintenance schedule.
  answer_sources:
  - SIEM ingestion health logs
  - Windows Event Forwarding operational logs
  - Windows Event ID 1074
  - Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.
  range: last 90 days
  queries:
  - pseudocode: MONITOR log_ingestion_timestamps per_host. ALERT if time_since_last_log > 20_minutes AND host_not_in_maintenance AND no_shutdown_event_found.
- question: Has there been a statistically significant and sustained drop in the volume of logs from a specific host?
  context: An adversary might selectively disable certain logs, causing a noticeable drop in volume. This action involves modeling the log volume (events per minute) for each endpoint as a time series. By calculating a moving average and standard deviation, the system can detect when the current log volume drops significantly (e.g., more than 3 standard deviations) below the recent average for a sustained period, indicating potential tampering.
  answer_sources:
  - SIEM ingestion health logs
  - Windows Event Forwarding operational logs
  - Windows Event ID 1074
  - Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.
  range: last 90 days
  queries:
  - pseudocode: CALCULATE 1-hour_moving_average and std_dev of log_volume per_host. ALERT if current_volume < (moving_average - 3 * std_dev) for > 10_minutes.
- question: Is the current log volume from a host significantly lower than what a forecasting model predicted?
  context: This question proposes a more sophisticated approach to detecting volume anomalies by accounting for predictable patterns like daily and weekly seasonality. A time series forecasting model (like Prophet or LSTM) can learn these patterns and predict the expected log volume. An alert is generated if the actual number of logs received falls outside the model's prediction interval (e.g., below the 99% confidence lower bound), providing a more accurate detection method.
  answer_sources:
  - SIEM ingestion health logs
  - Windows Event Forwarding operational logs
  - Windows Event ID 1074
  - Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.
  range: last 90 days
  queries:
  - pseudocode: FORECAST expected_log_volume per_host using time_series_model. ALERT if actual_log_volume < prediction_interval_lower_bound.
- question: Has a suspicious process execution been followed by a log tampering event and then an outbound network connection to a malicious destination?
  context: This question seeks to identify a common attack chain: execute payload, cover tracks, and then establish command and control (C2). A stateful correlation rule can detect this sequence by triggering if, on the same host within a short window, it observes [1] a suspicious process execution (e.g., from C:\Users\Public\), followed by [2] a log tampering event (e.g., Event ID 1102), followed by [3] an external network connection to a known malicious IP.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 1102
  - Windows Event ID 7035
  - Windows Event ID 4719
  - Zeek conn.log
  - All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.
  range: last 90 days
  queries:
  - pseudocode: CORRELATE [suspicious_process -> log_tamper_event -> outbound_connection_to_bad_IP] on same_host within 10_minutes.
- question: Has a host accumulated a high risk score from a combination of suspicious activities, including log tampering?
  context: This question focuses on the cumulative risk of various behaviors. A risk scoring model assigns points to different events (e.g., running 'wevtutil cl' = 50 points). A time decay function reduces the score of older events. An alert is triggered when a host's cumulative score surpasses a dynamic threshold (e.g., the 99th percentile of all host scores), allowing for flexible detection of varied attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 1102
  - Windows Event ID 7035
  - Windows Event ID 4719
  - Zeek conn.log
  - All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.
  range: last 90 days
  queries:
  - pseudocode: ASSIGN risk_points to events. SUM score per_host with time_decay. ALERT if host_score > dynamic_threshold (e.g., 99th_percentile_of_all_hosts).
- question: Can graph-based anomaly detection identify malicious subgraphs representing log tampering followed by C2 activity?
  context: This proposes visualizing and analyzing host activity as a graph, where nodes are entities (processes, files, IPs) and edges are interactions. Graph-based anomaly detection techniques, like a Graph Neural Network (GNN), can learn normal activity graphs and then identify rare and suspicious subgraphs (e.g., powershell.exe -> sc.exe stop eventlog -> 1.2.3.4:4444) that represent novel attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 1102
  - Windows Event ID 7035
  - Windows Event ID 4719
  - Zeek conn.log
  - All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.
  range: last 90 days
  queries:
  - pseudocode: BUILD activity_graphs from event_data. USE GNN or other graph_anomaly_detection to find rare subgraphs matching attack_patterns.
- question: Is there a significant gap in the sequential EventRecordIDs for a specific log on a host that cannot be explained by a system reboot?
  context: A large, unexplained jump in the sequential 'EventRecordID' for a log file is a strong indicator that events have been deleted. This action involves running a periodic query that sorts events by 'EventRecordID'. If the difference between two consecutive record numbers is above a threshold, it's a potential gap. To rule out false positives, the query must verify that a system startup event (Event ID 6005) did not occur during the time of the gap.
  answer_sources:
  - Raw Windows Security Event Log (evtx)
  - Raw Windows System Event Log (evtx)
  - Windows Event ID 6005
  - Central log parsing and storage platform, or endpoint agents with direct access to raw log files.
  range: last 90 days
  queries:
  - pseudocode: FOR each host, log_type SORT by EventRecordID. IF (RecordID(n) - RecordID(n-1) > 100) AND (no_reboot_event_between_timestamps), THEN ALERT.
- question: Is a detected gap in EventRecordIDs statistically anomalous compared to the normal gaps seen during that host's reboot cycles?
  context: This question adds statistical rigor to gap detection. This action involves creating a profile of the typical 'EventRecordID' gap size that occurs during a legitimate reboot. When a new gap is detected that is not associated with a reboot, its size can be compared to the host's normal event generation rate. Calculating a Z-score quantifies how anomalous the gap is; a high score (e.g., > 3) strongly suggests deliberate log deletion.
  answer_sources:
  - Raw Windows Security Event Log (evtx)
  - Raw Windows System Event Log (evtx)
  - Windows Event ID 6005
  - Central log parsing and storage platform, or endpoint agents with direct access to raw log files.
  range: last 90 days
  queries:
  - pseudocode: PROFILE normal_reboot_gap_sizes per_host. FOR new_gap CALCULATE Z-score based on host's event_rate. ALERT if Z-score > 3.
- question: Is the next EventRecordID received from a host significantly higher than what a predictive model expected?
  context: This question reframes gap detection as a prediction problem. Based on the rate of recent event generation, a simple model like linear regression can predict what the next 'EventRecordID' should be. If the next event that arrives has a record ID that is significantly higher than the model's prediction plus a confidence interval, it implies that a number of events were never received and were likely deleted.
  answer_sources:
  - Raw Windows Security Event Log (evtx)
  - Raw Windows System Event Log (evtx)
  - Windows Event ID 6005
  - Central log parsing and storage platform, or endpoint agents with direct access to raw log files.
  range: last 90 days
  queries:
  - pseudocode: MODEL next_EventRecordID based on previous_100_records and timestamps. ALERT if actual_next_ID > (predicted_ID + confidence_interval).