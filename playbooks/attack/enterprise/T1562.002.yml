name: T1562.002: Disable Windows Event Logging
id: d1b1f8e0-0b7a-4b6e-8f9a-1c2d3e4f5a6b
description: This playbook addresses the defense evasion technique of disabling or manipulating Windows Event Logging. Adversaries perform this action to cover their tracks, prevent detection, and hinder incident response investigations. The playbook focuses on identifying this behavior by searching for the execution of known log-tampering tools, the misuse of native Windows utilities to clear logs or modify audit policies, anomalous reductions or cessations in log volume from a host, suspicious temporal sequences of events (e.g., payload execution followed by log clearing and C2 communication), and unexplained gaps in sequential EventRecordIDs within a log stream.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags:
- none
questions:
- question: Are there any process creation events that match known log-tampering tools or their associated command-line arguments?
  context: This question aims to identify the direct execution of malicious tools designed to disable or tamper with Windows Event Logging. Adversaries use tools like Mimikatz or Invoke-Phant0m to cover their tracks. Detecting the execution of these tools by name, hash, or specific command-line parameters is a high-fidelity indicator of a defense evasion attempt. Answering this helps an analyst to quickly pinpoint compromised systems where an attacker is actively trying to hide their presence.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE (process_name IN known_log_tampering_tools OR process_hash IN known_log_tampering_hashes OR command_line MATCHES regex_for_tampering_args)
- question: Have any rare processes, potentially indicative of log-tampering, been executed, especially if spawned by common scripting or remote administration tools?
  context: Adversaries often use custom or rarely seen tools to evade signature-based detections. This question focuses on identifying statistical anomalies by looking for processes that have executed on very few machines in the environment. A process that is rare across the enterprise, especially when initiated by a powerful tool like PowerShell or WMIC, is highly suspicious and could represent a novel or obfuscated defense evasion tool. This helps detect threats that don't have known signatures.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE prevalence of all process_names and command_lines across all hosts. FILTER for processes where prevalence < 0.001 AND parent_process IN (powershell.exe, wmic.exe).
- question: Has a machine learning model identified any process execution events as being highly likely to be 'log-tampering' based on their characteristics?
  context: This question leverages machine learning to move beyond simple signatures and statistical rarity. By training a model on various features of a process event (like the randomness of its name, the complexity of its arguments, and its parent process), it can learn to identify the subtle characteristics of malicious log-tampering activity. This is crucial for detecting sophisticated attackers who use obfuscation techniques that evade traditional rules and statistical analysis.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: APPLY ML_model to process_creation_events. ALERT where model_prediction == 'log-tampering' AND confidence_score > threshold.
- question: Have native Windows utilities been used with specific commands to clear logs, disable the EventLog service, or modify audit policies?
  context: Adversaries abuse legitimate tools ("living off the land") to evade detection. This question looks for specific, high-risk command-line invocations of utilities like 'wevtutil.exe', 'auditpol.exe', and 'sc.exe' that are used to disable logging. Correlating these command executions with corresponding log clearing or service stop events provides strong evidence of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4657
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 4719
  - Windows Event ID 1102
  - Windows Event ID 104
  - Windows Event ID 7035
  - All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_events for ('wevtutil.exe cl', 'auditpol.exe /clear', 'sc.exe config eventlog start= disabled') AND CORRELATE with log_cleared_events (1102, 104) or service_stop_events (7035) on the same host.
- question: Has there been an anomalous frequency of execution for 'auditpol.exe', 'wevtutil.exe', or 'sc.exe', or unusual command-line arguments for them?
  context: While these utilities can be used for legitimate administrative tasks, their frequent or unusual use can indicate malicious activity. This question establishes a baseline of normal execution frequency and command-line complexity for each user and host. Deviations from this baseline, such as a non-administrative user suddenly running 'auditpol.exe' repeatedly, can surface defense evasion attempts that might otherwise be missed.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4657
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 4719
  - Windows Event ID 1102
  - Windows Event ID 104
  - Windows Event ID 7035
  - All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE baseline for execution_count and command_line_entropy for (auditpol.exe, wevtutil.exe, sc.exe) per host/user. ALERT on deviation > 3 standard deviations.
- question: Has a sequence of events matching a known attack pattern (e.g., remote login -> recon -> log clearing) been detected?
  context: Attackers follow a logical progression of steps. This question uses a sequence analysis model to detect a chain of actions that, when viewed together, strongly indicate a defense evasion attempt. For example, a remote login followed by basic reconnaissance and then immediate log clearing within a short time window is a classic attacker pattern. Identifying the entire sequence is more powerful than looking at each event in isolation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4657
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 4719
  - Windows Event ID 1102
  - Windows Event ID 104
  - Windows Event ID 7035
  - All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH for event_sequence: [Remote Login (4624 Type 3/10) -> Recon Command ('whoami') -> Log Clear Command ('wevtutil cl')] from same LogonID within 5 minutes.
- question: Has any critical asset unexpectedly stopped sending logs to the central aggregator?
  context: One of the most direct ways to disable logging is to simply stop the forwarding service or block its connection. This question implements a "heartbeat" or "dead man's switch" to detect when a host that is expected to be reporting logs suddenly goes silent. This is a critical check to ensure visibility, as an attacker's first step is often to blind the security team. Alerts are suppressed for planned maintenance or shutdowns to reduce false positives.
  answer_sources:
  - SIEM ingestion health logs
  - Windows Event Forwarding operational logs
  - Windows Event ID 1074
  - Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each critical_asset, ALERT if last_log_timestamp > 20 minutes ago AND no corresponding shutdown_event (1074) or maintenance_window.
- question: Has the log volume from any endpoint dropped significantly below its short-term moving average?
  context: Rather than a complete cessation of logs, an attacker might selectively disable certain noisy log sources. This question uses statistical analysis to detect a significant, sustained drop in the rate of log ingestion from a host. By comparing the current volume to a recent moving average, it can identify anomalous decreases that could indicate log tampering or service manipulation, even if some logs are still being sent.
  answer_sources:
  - SIEM ingestion health logs
  - Windows Event Forwarding operational logs
  - Windows Event ID 1074
  - Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE 1-hour moving_average and std_dev of log_volume per host. ALERT if current_volume < (moving_average - 3 * std_dev) for >10 minutes.
- question: Does the current log volume from a host fall significantly below the volume predicted by a forecasting model?
  context: This question employs a more sophisticated time series model to predict the expected log volume, accounting for normal daily and weekly patterns (e.g., lower volume overnight or on weekends). An alert is generated if the actual log count falls significantly outside the model's prediction interval. This advanced method provides a more accurate and sensitive way to detect anomalous drops in log volume compared to simple averages, reducing false positives from normal fluctuations.
  answer_sources:
  - SIEM ingestion health logs
  - Windows Event Forwarding operational logs
  - Windows Event ID 1074
  - Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FORECAST expected_log_volume per host using time_series_model. ALERT if actual_log_volume < prediction_interval_lower_bound.
- question: Has a suspicious sequence of process execution, log tampering, and outbound network connection occurred on a host?
  context: This question reconstructs a common attack chain by correlating disparate event types. It looks for a sequence where an attacker runs a payload (e.g., an unsigned binary from a temp directory), attempts to clear their tracks (log tampering), and then establishes a command-and-control channel (outbound network connection). Detecting this specific sequence of events on a single host within a short time frame is a very strong indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 1102
  - Windows Event ID 7035
  - Windows Event ID 4719
  - Zeek conn.log
  - All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE on same host within 10 mins: [Unsigned/World-Writable Process -> Log Tamper Event (1102, 'wevtutil cl') -> External Network Connection to Rare IP].
- question: Has the cumulative risk score of events on a single host exceeded a dynamic threshold, indicating a high probability of malicious activity?
  context: Not all suspicious events are equally indicative of an attack. This question uses a risk-scoring model where different actions (like running 'wevtutil cl' or connecting to a rare IP) are assigned points. The scores for a host accumulate over time, and if the total score surpasses a threshold, it signals that multiple suspicious activities have occurred, warranting an investigation. This method helps prioritize alerts by focusing on hosts with a high density of suspicious behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 1102
  - Windows Event ID 7035
  - Windows Event ID 4719
  - Zeek conn.log
  - All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ASSIGN risk_points to events (e.g., 'wevtutil cl'=50). SUM points per host with time_decay. ALERT if total_score > dynamic_threshold.
- question: Have graph-based analysis methods identified anomalous patterns of interaction between processes, files, and network connections that are indicative of log tampering?
  context: This question uses advanced graph analytics to model host activity. Entities like processes and IP addresses are nodes, and their interactions are edges. By learning what normal activity graphs look like, this method can identify rare and suspicious subgraphs, such as a PowerShell process stopping the event log service and then connecting to an external IP. This approach is powerful for discovering novel attack patterns that are not defined in explicit rules.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 1102
  - Windows Event ID 7035
  - Windows Event ID 4719
  - Zeek conn.log
  - All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BUILD activity_graphs (nodes=processes, IPs; edges=interactions). USE GNN/graph_anomaly_detection to find rare subgraphs like [powershell.exe -> sc.exe stop eventlog -> C2_IP].
- question: Is there a gap in the sequential EventRecordIDs in a log stream that is not explained by a system reboot?
  context: Windows assigns a sequential record ID to each event in a specific log (e.g., Security, System). If an attacker deletes a chunk of events, it will create a non-sequential jump in these IDs. This question specifically looks for these gaps, while filtering out legitimate gaps caused by system reboots (which can reset the counter), to provide direct evidence that events have been removed from a log file.
  answer_sources:
  - Raw Windows Security Event Log (evtx)
  - Raw Windows System Event Log (evtx)
  - Windows Event ID 6005
  - Central log parsing and storage platform, or endpoint agents with direct access to raw log files.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PARSE logs by host/log_type, sort by EventRecordID. ALERT if EventRecordID(n) - EventRecordID(n-1) > 100 AND no reboot_event (6005) occurred between them.
- question: Has an unusually large gap in EventRecordIDs, relative to the host's normal event generation rate, been detected?
  context: This question adds a layer of statistical analysis to gap detection. It profiles the normal size of gaps that occur during legitimate reboots and the typical rate of event generation for a host. When a new gap is found, its size is compared to this profile. An anomalously large gap (a high Z-score) is a strong statistical indicator of log deletion, helping to distinguish malicious activity from benign system behavior.
  answer_sources:
  - Raw Windows Security Event Log (evtx)
  - Raw Windows System Event Log (evtx)
  - Windows Event ID 6005
  - Central log parsing and storage platform, or endpoint agents with direct access to raw log files.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PROFILE normal EventRecordID gap sizes on reboot. For non-reboot gaps, CALCULATE Z-score based on host's event generation rate. ALERT if Z-score > 3.
- question: Does the next received EventRecordID significantly differ from the ID predicted by a linear regression model?
  context: This is an advanced form of gap detection. It uses a predictive model to learn the normal rate of event generation for a host and forecast what the next EventRecordID should be. If the actual ID received is much higher than the prediction, it implies that a number of events were generated but never received, likely because they were deleted on the endpoint before being forwarded. This can detect tampering even if the log service itself wasn't stopped.
  answer_sources:
  - Raw Windows Security Event Log (evtx)
  - Raw Windows System Event Log (evtx)
  - Windows Event ID 6005
  - Central log parsing and storage platform, or endpoint agents with direct access to raw log files.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL next_EventRecordID based on previous records and timestamps. ALERT if actual_EventRecordID > predicted_EventRecordID + 99% confidence_interval.