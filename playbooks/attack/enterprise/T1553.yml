name: T1553: Subvert Trust Controls
id: 593b4a2e-503c-4e89-948b-3d077b949987
description: This playbook focuses on detecting adversarial attempts to bypass security
  controls by subverting trust mechanisms. This includes using malicious or fraudulent
  code-signing certificates to make malware appear legitimate, installing rogue root
  certificates to enable man-in-the-middle attacks or sign malicious code, using
  executables signed with unusual or low-prevalence certificates, and removing the
  "Mark-of-the-Web" from downloaded files to suppress security warnings and bypass
  execution policies.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are any processes executing with a binary signed by a certificate with
    a known malicious thumbprint or issuer?
  context: This question aims to detect the use of compromised or explicitly malicious
    code-signing certificates. Adversaries use these to make their malware appear
    legitimate, bypassing basic security checks. By cross-referencing executed binary
    signatures against threat intelligence, we can identify known-bad actors operating
    on the network.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek x509.log
  - All Endpoints and Servers
  - Network Egress/Ingress Points
  - Domain Controllers
  range: last 90 days
  queries:
  - splunk: SEARCH process_creation_events OR network_certificate_logs | JOIN threat_intel_feed
      on certificate_thumbprint OR certificate_issuer | RETURN matches
- question: Are there any newly observed certificates with unusually high entropy
    in their issuer or subject common name fields?
  context: High entropy (randomness) in certificate fields can indicate the use of
    Domain Generation Algorithms (DGAs) or other automated methods to create fraudulent
    certificates at scale. This is a common tactic for adversaries who need disposable
    certificates for their campaigns. Detecting this anomaly helps identify potentially
    malicious certificates that aren't yet on any blocklist.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek x509.log
  - All Endpoints and Servers
  - Network Egress/Ingress Points
  - Domain Controllers
  range: last 90 days
  queries:
  - splunk: SEARCH network_certificate_logs | CALCULATE entropy for issuer_cn, subject_cn
      | COMPARE to baseline | RETURN alerts where entropy > 99th_percentile
- question: Can a machine learning model classify any newly observed certificates
    as malicious based on their features?
  context: This question uses a machine learning approach to proactively identify
    malicious certificates. By training a model on various certificate attributes
    (e.g., validity period, key length, self-signed status), it can learn the characteristics
    of both benign and malicious certificates. This allows for the detection of novel
    threats that may not match simple rules or known-bad indicators.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek x509.log
  - All Endpoints and Servers
  - Network Egress/Ingress Points
  - Domain Controllers
  range: last 90 days
  queries:
  - splunk: INPUT network_certificate_logs AND process_signature_data | EXTRACT features
      (validity, key_length, self_signed, entropy) | PREDICT using Random_Forest_model
      | RETURN alerts where prediction is 'malicious' AND confidence > 0.85
- question: Is there any command-line or PowerShell activity indicative of a certificate
    being added to a root trust store or certificate-related registry keys being
    modified?
  context: This question directly targets the adversary's action of installing a
    malicious root certificate. By monitoring for specific command-line utilities
    (`certutil.exe`), PowerShell cmdlets (`Import-Certificate`), or direct registry
    modifications, we can detect attempts to subvert the system's trust foundation.
    A successful attack here allows an adversary to sign malicious code or intercept
    TLS traffic.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - All Endpoints and Servers
  - Domain Controllers
  - Certificate Authority Servers
  range: last 90 days
  queries:
  - splunk: SEARCH command_line_logs OR powershell_script_block_logs | FILTER command
      matches regex for 'certutil .* -addstore .* root' OR 'Import-Certificate .*
      Root' OR 'reg add HKLM\\SOFTWARE\\Microsoft\\SystemCertificates' | RETURN suspicious_commands
- question: Are there any rare or never-before-seen command-line argument combinations
    being used with `certutil.exe` or `reg.exe` to manipulate certificate stores?
  context: Adversaries often use legitimate tools in illegitimate ways. This question
    focuses on identifying anomalous usage of tools like `certutil.exe`. By baselining
    normal command-line patterns, we can flag rare combinations of arguments that
    are statistically unlikely to be part of normal administrative activity, pointing
    to a potential misuse of the tool for malicious purposes.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - All Endpoints and Servers
  - Domain Controllers
  - Certificate Authority Servers
  range: last 90 days
  queries:
  - splunk: SEARCH command_line_logs for certutil.exe OR reg.exe | GROUP by host,
      command_arguments | CALCULATE historical_prevalence | RETURN alerts where prevalence
      < 0.01%
- question: Is there an anomalous sequence of command-line executions within a user
    session, such as a file download immediately followed by a certificate installation
    command?
  context: This question looks for suspicious chains of events rather than a single
    command. Adversarial actions often follow a logical, albeit malicious, sequence.
    By modeling normal command sequences, an autoencoder can detect when a user's
    activity deviates significantly, such as downloading a file and then immediately
    using `certutil` to install it as a trusted certificate, which is highly abnormal
    behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - All Endpoints and Servers
  - Domain Controllers
  - Certificate Authority Servers
  range: last 90 days
  queries:
  - splunk: GROUP command_line_logs by user_session | INPUT session_sequence to LSTM_autoencoder_model
      | CALCULATE reconstruction_error | RETURN alerts where error > dynamic_threshold
- question: Has a certificate file been downloaded from an external source and then
    installed into a system trust store on the same host within a short time frame
    (e.g., 5 minutes)?
  context: This question seeks to identify the 'drive-by' installation of a malicious
    certificate. The sequence of downloading a certificate file and immediately installing
    it is a strong indicator of an attempt to subvert trust controls. Correlating
    network file transfer logs with endpoint command execution logs bridges the gap
    between network and host activity to detect this specific attack chain.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Zeek conn.log
  - Network Egress/Ingress Points
  - User Workstations
  - Public-Facing Servers
  range: last 90 days
  queries:
  - splunk: SEARCH network_file_logs for certificate_files | JOIN with process_creation_logs
      on host_ip where time_difference < 5_minutes AND process_command contains 'certutil
      -addstore' OR 'Import-Certificate' | RETURN correlated_events
- question: Is there a statistical spike in the number of certificate installations
    on a given host, especially if preceded by downloads from low-reputation sources?
  context: This question aims to detect an unusual volume of certificate management
    activity. A sudden increase in installations on a single host, far exceeding
    its historical baseline, could indicate an automated script or adversary action.
    Enriching this with network reputation data adds critical context, prioritizing
    alerts where the activity is linked to suspicious domains or IPs.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Zeek conn.log
  - Network Egress/Ingress Points
  - User Workstations
  - Public-Facing Servers
  range: last 90 days
  queries:
  - splunk: COUNT certificate_installations by host, day | COMPARE to 30-day_moving_average
      and std_dev | JOIN with network_connection_logs enriched with threat_intel
      | RETURN alerts where count > (avg + 3*std_dev) AND source_reputation is 'low'
- question: Is there a statistically significant, enterprise-wide spike in certificate
    installation events that deviates from normal daily and weekly patterns?
  context: This question moves from a host-centric to an enterprise-wide view to
    detect large-scale or coordinated campaigns. A time-series anomaly detection
    model can identify sudden bursts of activity that are abnormal for a specific
    time of day or day of the week, which might be missed by simple volume thresholds.
    This can help detect a widespread attack in its early stages.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Zeek conn.log
  - Network Egress/Ingress Points
  - User Workstations
  - Public-Facing Servers
  range: last 90 days
  queries:
  - splunk: AGGREGATE count of certificate_installations by hour | APPLY Seasonal-Hybrid_ESD_algorithm
      | RETURN alerts for statistically_significant_spikes
- question: Is an executable running that is signed by a certificate not on the established
    allowlist of known-good software?
  context: This question implements a trust-on-first-use or explicit allowlist model
    for code signing. By defining what is 'good' and alerting on everything else,
    security teams can quickly identify unauthorized or potentially malicious software
    running in their environment. It's a powerful way to reduce the noise of unknown
    software.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek pe.log
  - All Endpoints and Servers
  - Software Distribution Points
  - Developer Workstations
  range: last 90 days
  queries:
  - splunk: SEARCH process_creation_events with signature_data | LOOKUP against known_good_certificate_allowlist
      on thumbprint | RETURN alerts where thumbprint is NOT in allowlist
- question: Are any executed binaries signed by a certificate with very low prevalence
    across the organization or an unusually short validity period?
  context: This question hunts for suspicious certificate characteristics. Certificates
    used by legitimate software are typically widespread and have long validity periods
    (e.g., 1-3 years). Adversaries often use self-signed or quickly-generated certificates
    that are seen on very few machines and may only be valid for a few months. Identifying
    these outliers is an effective method for finding suspicious binaries.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek pe.log
  - All Endpoints and Servers
  - Software Distribution Points
  - Developer Workstations
  range: last 90 days
  queries:
  - splunk: SEARCH process_creation_events | EXTRACT certificate_issuer, thumbprint,
      validity_period | CALCULATE prevalence of issuer and thumbprint | RETURN alerts
      where prevalence < 0.1% OR validity_period < 90_days
- question: Can clustering analysis of certificate features identify outlier certificates
    that do not group with the organization's established software trust patterns?
  context: This question uses unsupervised machine learning to find 'the odd one
    out'. Legitimate software certificates often share common features (e.g., same
    issuers, similar validity periods). A clustering algorithm like DBSCAN can group
    these similar certificates together. Any certificate that doesn't fit into a
    cluster is flagged as a 'noise point' or outlier, making it a high-priority candidate
    for investigation as it doesn't conform to any known software profile in the
    environment.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek pe.log
  - All Endpoints and Servers
  - Software Distribution Points
  - Developer Workstations
  range: last 90 days
  queries:
  - splunk: SEARCH process_creation_events | EXTRACT certificate_features (issuer,
      validity, key_algo) | APPLY DBSCAN_clustering_algorithm | RETURN alerts for
      certificates classified as noise_points
- question: Is there any evidence of command-line tools or PowerShell cmdlets being
    used to remove the Zone.Identifier Alternate Data Stream (ADS) from a file, especially
    after a recent download?
  context: This question targets the removal of the 'Mark-of-the-Web', a security
    feature that warns users before executing files downloaded from the internet.
    Adversaries remove this ADS to prevent security warnings and bypass certain execution
    policies. Detecting the use of tools like `streams.exe` or `Unblock-File` is
    a direct indicator of this defense evasion technique.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 15
  - Windows Event ID 4663
  - User Workstations
  - Email Gateway
  - Web Proxies
  - File Servers
  range: last 90 days
  queries:
  - splunk: SEARCH command_line_logs for 'streams.exe -d' OR 'Unblock-File' OR 'Remove-Item
      -Stream Zone.Identifier' | CORRELATE with recent file_download_logs | RETURN
      suspicious_activity
- question: Is a downloaded file being executed by an unusual parent process (e.g.,
    `wscript.exe` instead of `explorer.exe`)?
  context: This question focuses on the execution context of a downloaded file. Typically,
    a user double-clicks a file, making `explorer.exe` the parent process. Execution
    by a scripting engine or office application can be a sign of a malicious macro
    or script-based downloader. Baselining normal parent-child relationships for
    downloaded files helps identify these anomalous execution chains.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 15
  - Windows Event ID 4663
  - User Workstations
  - Email Gateway
  - Web Proxies
  - File Servers
  range: last 90 days
  queries:
  - splunk: SEARCH process_creation_events where file_has_ZoneID | GROUP by parent_process,
      child_process | CALCULATE frequency | RETURN alerts where parent_process is
      low_frequency for downloaded_file_execution
- question: Using a machine learning model, can the execution of a downloaded file
    be classified as suspicious based on features like source reputation, parent
    process, and prior ADS manipulation?
  context: This question combines multiple weak signals into a strong, high-fidelity
    alert using a machine learning classifier. The model considers various contextual
    features surrounding a file execution—where it came from, how it was executed,
    and what happened before execution—to make a holistic judgment. This is more
    effective than relying on any single indicator and can adapt to new adversary
    TTPs.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 15
  - Windows Event ID 4663
  - User Workstations
  - Email Gateway
  - Web Proxies
  - File Servers
  range: last 90 days
  queries:
  - splunk: GATHER features for downloaded_file_execution (source_rep, parent_process,
      ADS_manipulation_flag, time_to_exec) | PREDICT using gradient_boosting_model
      | RETURN alerts where prediction is 'suspicious' with high_confidence