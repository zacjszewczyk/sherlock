name: T1592.004: Client Configurations
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: >-
  This playbook helps determine if an adversary is actively gathering client configuration details for targeting purposes. It focuses on identifying various reconnaissance techniques, such as outbound network connections to known malicious infrastructure, HTTP requests containing fingerprinting signatures, external scanning behavior, anomalous traffic patterns like unusual HTTP headers or DNS query spikes, and the execution of local reconnaissance commands followed by suspicious network activity.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
investigative_questions:
  - question: Have any internal hosts connected to external IPs or domains known to be associated with reconnaissance campaigns?
    context: This question seeks to identify direct connections to malicious infrastructure using high-confidence threat intelligence. A match indicates a strong possibility that a host is being targeted or has been compromised by an actor known to perform reconnaissance, phishing, or client fingerprinting.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Corporate web proxy
      - DNS resolvers
      - network egress points
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          IOC_LIST = GET_IOC_FEED('reconnaissance')
          SEARCH Zeek:conn.log, Zeek:dns.log
          WHERE destination_ip IN IOC_LIST OR query_domain IN IOC_LIST
          RETURN host, destination_ip, query_domain, timestamp
  - question: Are any internal hosts communicating with multiple rare and recently registered domains?
    context: Adversaries often use newly registered domains (NRDs) for short-lived campaigns. By identifying hosts that query domains that are both rarely visited across the enterprise and newly created, we can uncover potential command-and-control or reconnaissance activity that evades signature-based detection.
    answer_sources:
      - Zeek dns.log
      - WHOIS data
      - Corporate web proxy
      - DNS resolvers
      - network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each unique_domain in Zeek:dns.log:
            rarity = CALCULATE_DOMAIN_RARITY(unique_domain)
            age = GET_DOMAIN_AGE(unique_domain)
            IF rarity < 0.001 AND age < 30_days:
              risk_score = CALCULATE_RISK(rarity, age)
              AGGREGATE risk_score by host over 5_minutes
              IF aggregated_score > THRESHOLD:
                ALERT host, aggregated_score
  - question: Are any internal hosts attempting to resolve domains that are algorithmically generated (DGA)?
    context: Domain Generation Algorithms (DGAs) are used by malware to create a large number of domain names for C2 communication, making them difficult to block. Detecting hosts querying DGA-like domains is a strong indicator of a malware infection attempting to phone home or receive instructions.
    answer_sources:
      - Zeek dns.log
      - Corporate web proxy
      - DNS resolvers
      - network egress points
      - DGA Detection Model
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each domain in Zeek:dns.log:
            IF domain NOT IN ALLOWLIST:
              dga_confidence = DGA_MODEL_PREDICT(domain)
              IF dga_confidence > 0.9:
                ALERT host, domain, dga_confidence
  - question: Are any outbound HTTP requests exhibiting signs of known client fingerprinting toolkits?
    context: This question looks for specific, known indicators of client-side fingerprinting scripts (like ScanBox) within HTTP traffic. Finding known malicious script names, functions, or URI patterns is a high-fidelity signal that an adversary is attempting to gather detailed configuration information from a client's browser.
    answer_sources:
      - Zeek http.log
      - Corporate web proxy
      - network egress points
      - any device capable of making outbound HTTP requests
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FINGERPRINT_REGEX = ['fingerprint.js', 'client.js', 'fp.js', ...]
          SEARCH Zeek:http.log
          WHERE uri MATCHES FINGERPRINT_REGEX OR request_body MATCHES FINGERPRINT_REGEX
          AGGREGATE by client, destination
          IF count(distinct_signatures) > 1:
            ALERT client, destination
  - question: Have any clients sent HTTP requests with unusually complex URI query strings?
    context: Client fingerprinting scripts often encode collected data into long, complex URI query strings, resulting in high entropy. By baselining normal URI complexity for each user and destination, we can detect anomalous requests that may be exfiltrating fingerprinting data, even if the specific script is unknown.
    answer_sources:
      - Zeek http.log
      - Corporate web proxy
      - network egress points
      - any device capable of making outbound HTTP requests
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each request in Zeek:http.log:
            baseline_entropy = GET_BASELINE_ENTROPY(user, destination)
            current_entropy = CALCULATE_ENTROPY(request.uri_query)
            IF current_entropy > PERCENTILE(baseline_entropy, 99):
              ALERT user, destination, current_entropy
  - question: Can we identify suspicious HTTP requests likely related to fingerprinting using a machine learning model?
    context: This question leverages a machine learning model to identify subtle combinations of features (like URI length, parameter count, user-agent, etc.) that characterize fingerprinting traffic. This approach can detect novel or obfuscated fingerprinting techniques that evade signature-based and simple statistical methods.
    answer_sources:
      - Zeek http.log
      - Corporate web proxy
      - network egress points
      - any device capable of making outbound HTTP requests
      - ML Classification Model
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each request in Zeek:http.log:
            features = EXTRACT_FEATURES(request)
            score = CLASSIFIER_MODEL_PREDICT(features)
            IF score > SUSPICIOUS_THRESHOLD:
              ALERT request.source, request.destination, score
  - question: Are known malicious scanners or TOR exit nodes attempting to connect to our internal network?
    context: This question aims to identify inbound connection attempts from sources that are already known to be malicious or associated with anonymization services often used for scanning. A match provides an early warning of a potential reconnaissance scan, even if the scan itself is not widespread.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - External-facing firewalls
      - DMZ network segments
      - VPN concentrators
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SCANNER_IOC_LIST = GET_IOC_FEED('scanners', 'tor')
          SEARCH Zeek:conn.log
          WHERE direction = 'inbound' AND source_ip IN SCANNER_IOC_LIST
          RETURN source_ip, destination_ip, timestamp
  - question: Is any single external IP address connecting to an anomalously high number of unique internal hosts or ports?
    context: Active scanning, a common reconnaissance technique, manifests as a single source IP connecting to many different hosts (horizontal scan) or many different ports on one or more hosts (vertical scan). By statistically detecting this one-to-many connection pattern, we can identify scanning activity without relying on prior knowledge of the scanner's IP address.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - External-facing firewalls
      - DMZ network segments
      - VPN concentrators
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          AGGREGATE inbound Zeek:conn.log over 1_minute_window by source_ip:
            unique_hosts = COUNT(DISTINCT destination_ip)
            unique_ports = COUNT(DISTINCT destination_port)
          global_mean = GET_MEAN(unique_hosts_per_source)
          global_stddev = GET_STDDEV(unique_hosts_per_source)
          IF unique_hosts > (global_mean + 3 * global_stddev):
            ALERT source_ip, unique_hosts
  - question: Can we use clustering algorithms to automatically group and identify network scanning activity?
    context: This question uses an unsupervised machine learning approach (DBSCAN) to automatically identify dense clusters of network activity characteristic of scanning. This method can discover various scanning patterns by grouping connection events based on their proximity in feature space (source, destination, port), effectively separating scan traffic from normal, sparse background traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - External-facing firewalls
      - DMZ network segments
      - VPN concentrators
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DATA = SELECT source_ip, dest_port, protocol FROM Zeek:conn.log
          CLUSTERS = DBSCAN(DATA)
          FOR each cluster in CLUSTERS:
            IF DENSITY(cluster) > SCAN_DENSITY_THRESHOLD:
              LABEL cluster as 'scanning'
              ALERT source_ips_in_cluster
  - question: Are any internal clients sending an excessive number of Client-Hint headers to non-standard domains?
    context: Client-Hint headers allow a server to request specific information about the client's device and browser. While legitimate services use them for content optimization, adversaries can abuse this mechanism for fingerprinting. Detecting a large number of these headers being sent to a non-allowlisted domain is a strong indicator of this abuse.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Corporate DNS resolvers
      - web proxies
      - endpoint devices
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH Zeek:http.log
          WHERE destination_domain NOT IN ALLOWLIST
          AND COUNT(headers matching 'Sec-CH-UA-*') >= 3
          RETURN source_ip, destination_domain
  - question: Has any client exhibited a sudden, anomalous spike in the rate of unique DNS queries?
    context: A user's browsing behavior typically follows a stable pattern. Automated reconnaissance or fingerprinting scripts often involve rapidly connecting to or looking up many different domains. By baselining a client's normal rate of unique DNS lookups, we can detect a sudden spike that deviates from their own history, indicating potentially automated and malicious activity.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Corporate DNS resolvers
      - web proxies
      - endpoint devices
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each client_ip:
            baseline = CALCULATE_BASELINE(client_ip, unique_dns_queries_per_minute, last_30_days)
            current_rate = CALCULATE_RATE(client_ip, unique_dns_queries_per_minute, last_5_minutes)
            IF current_rate > PERCENTILE(baseline, 98):
              ALERT client_ip, current_rate
  - question: Can we detect anomalous DNS query patterns for a client using a time-series anomaly detection model?
    context: This question uses a sophisticated deep learning model (LSTM autoencoder) to learn the normal, temporal pattern of a client's DNS query activity. The model can detect subtle deviations from this learned pattern that simple statistical thresholds might miss. A high reconstruction error signifies that the current activity does not match the historical norm, which could be caused by automated fingerprinting.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Corporate DNS resolvers
      - web proxies
      - endpoint devices
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each client_ip:
            model = GET_TRAINED_LSTM_MODEL(client_ip)
            current_timeseries = GET_DNS_QUERY_RATE(client_ip, last_window)
            reconstruction = model.predict(current_timeseries)
            error = CALCULATE_ERROR(current_timeseries, reconstruction)
            IF error > ANOMALY_THRESHOLD:
              ALERT client_ip, error
  - question: Have any hosts executed local system reconnaissance commands shortly before connecting to a new external IP address?
    context: This question correlates host-based activity with network activity. Adversaries often run local commands (`systeminfo`, `wmic`, etc.) to gather information about a compromised host, and then exfiltrate that data. Correlating these command executions with a subsequent connection to a never-before-seen IP is a powerful indicator of post-compromise reconnaissance and data staging.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Standard user endpoints
      - developer workstations
      - servers with interactive user sessions
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          RECON_COMMANDS = ['systeminfo', 'wmic', 'get-computerinfo', 'reg query']
          JOIN ProcessEvents (EID 4688) with NetworkEvents (Zeek:conn.log) on host
          WHERE ProcessEvents.command contains RECON_COMMANDS
          AND NetworkEvents.timestamp - ProcessEvents.timestamp BETWEEN 0 and 60_seconds
          AND NetworkEvents.destination_ip is 'new' (not seen in 30 days)
          ALERT host, command, destination_ip
  - question: Are any hosts executing commands with statistically rare arguments related to system enumeration?
    context: While commands like `powershell` or `wmic` are common, the specific arguments used with them during reconnaissance can be highly unusual. Using a technique like TF-IDF (Term Frequency-Inverse Document Frequency), we can identify command-line arguments that are rare across the entire enterprise, helping to surface novel or obfuscated reconnaissance commands that might otherwise be missed.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Standard user endpoints
      - developer workstations
      - servers with interactive user sessions
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CORPUS = all command lines from EventID 4688 and 4104
          TFIDF_SCORES = CALCULATE_TFIDF(CORPUS)
          FOR each new command_line:
            FOR each argument in command_line:
              IF TFIDF_SCORES[argument] > RARE_THRESHOLD:
                ALERT host, command_line, argument
  - question: Can we detect anomalous sequences of host and network events that indicate reconnaissance behavior?
    context: This question models the 'grammar' of system activity, learning what normal sequences of events look like. A Hidden Markov Model (HMM) can learn these legitimate state transitions. An anomalous sequence, such as `powershell.exe` launching `systeminfo.exe` which is then followed by a connection to a new IP, would have a very low probability under the trained model, thus flagging it as suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Standard user endpoints
      - developer workstations
      - servers with interactive user sessions
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MODEL = GET_TRAINED_HMM_MODEL()
          FOR each new event_sequence on a host:
            probability = MODEL.score(event_sequence)
            IF probability < ANOMALY_THRESHOLD:
              ALERT host, event_sequence, probability