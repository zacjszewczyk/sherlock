name: T1480.002: Mutual Exclusion
id: 541c8888-0f04-4c4f-8f81-54070a300d66
description: "This playbook helps investigate whether an adversary is attempting to evade defenses by checking for a pre-existing infection via mutual exclusion mechanisms. Adversaries use mutual exclusion (mutex) objects, named pipes, or file locks to ensure only one instance of their malware runs on a system at a time. Indicators of this activity include the creation of pipes or use of command-line arguments matching known malicious mutex names, processes that execute and terminate in an abnormally short duration (check-and-exit behavior), non-security processes creating pipes with names of legitimate security tools, processes creating a file lock in a staging directory before C2 communication, or the creation of pipes with algorithmically generated names (e.g., high entropy or GUIDs)."
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process creating a named pipe or using a command-line argument that matches a known malicious mutex or pipe name from threat intelligence?
  context: This question aims to detect a common malware technique where a program checks for a specific named object (a mutex or pipe) to see if another instance of itself is already running. By searching for names of these objects that are known to be used by malicious actors, we can identify potential infections. This is a direct, signature-based detection method.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - Symbolic: "SEARCH logs (Sysmon 17, 18; Win 4688) WHERE PipeName OR CommandLine IN malicious_mutex_list"
- question: Are we observing a widespread campaign indicated by a statistically significant increase in the number of hosts showing the same malicious pipe or mutex name?
  context: While a single detection is important, a sudden spike across many hosts can indicate a large-scale, coordinated attack. This question moves beyond single-host detection to identify campaign-level activity by counting the number of distinct hosts where a known malicious indicator appears within a given timeframe and flagging unusual spikes.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - Statistical: "SEARCH logs (Sysmon 17, 18; Win 4688) | GROUPBY malicious_indicator | COUNT distinct hosts per hour | ALERT if count > historical_95th_percentile"
- question: Can a machine learning model identify malicious events related to mutex or pipe creation, even without a direct match to known indicators?
  context: This question leverages machine learning to find more subtle or novel threats. By training a model on various features of process events (like parent process, image path, and command line arguments), the model learns the characteristics of malicious behavior. It can then predict the likelihood of an event being malicious, potentially catching variants or previously unseen threats that signature-based methods might miss.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - Machine Learning: "PREDICT event_is_malicious USING classification_model ON process_events (Sysmon 1, 17, 18; Win 4688) | ALERT if probability > threshold"
- question: Is a process executing and terminating in an abnormally short time (e.g., < 2 seconds) from a high-risk directory, suggesting a 'check-and-exit' mutex behavior?
  context: This question looks for a behavioral indicator of mutex checking. Malware might launch, quickly check for the existence of its mutex, and exit if another instance is found. This results in a very short process lifetime. By correlating process start and end times and focusing on processes running from common staging directories (like %TEMP%), we can detect this suspicious 'check-and-exit' pattern.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Sysmon Event ID 1
  - Sysmon Event ID 5
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - Symbolic: "CORRELATE process_start (Sysmon 1) and process_end (Sysmon 5) | CALCULATE duration | ALERT if duration < 2s AND ImagePath in high_risk_directories"
- question: Is a process exhibiting an execution duration that is statistically anomalous (e.g., below the 5th percentile) compared to its own historical behavior?
  context: Instead of using a fixed threshold like '2 seconds', this question establishes a dynamic baseline for each unique executable. This statistical approach identifies when a specific process runs for a duration that is unusually short for that particular program, making it a more reliable indicator of anomalous 'check-and-exit' behavior and reducing false positives.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Sysmon Event ID 1
  - Sysmon Event ID 5
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - Statistical: "FOR each ImagePath, CALCULATE historical_duration_distribution | COMPARE new_process_duration to baseline | ALERT if duration < 5th_percentile_for_that_image"
- question: Can an anomaly detection model identify suspicious combinations of short execution duration, process path, parent process, and user context?
  context: This question uses machine learning to find 'rare' combinations of events that, individually, might not be suspicious. An anomaly detection model can identify outliers where an uncommon parent process launches an executable from a temporary directory with a very short lifespan, helping find novel threats that defy pre-defined rules or statistical baselines.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Sysmon Event ID 1
  - Sysmon Event ID 5
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - Machine Learning: "PREDICT anomaly_score USING isolation_forest_model ON process_events (features: duration, ImagePath, ParentPath, User) | ALERT on high scores"
- question: Is a process that is not an approved security tool creating a named pipe that is typically used by a legitimate security product?
  context: This question aims to detect masquerading, where malware mimics a legitimate security tool to evade defenses. By maintaining an allowlist of known security tool process paths and a watchlist of their named pipes, we can create a high-fidelity alert when an unauthorized process creates one of these protected pipes.
  answer_sources:
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - Windows Event ID 4688
  - All endpoints and servers with deployed security solutions (EDR, AV)
  range: last 90 days
  queries:
  - Symbolic: "SEARCH pipe_creation (Sysmon 17) WHERE PipeName IN security_pipe_watchlist AND ImagePath NOT IN security_tool_allowlist"
- question: Is a named pipe associated with a security tool being created by a process that has never historically created it before?
  context: This question provides a dynamic way to detect masquerading without maintaining a static allowlist. By baselining which processes normally create specific security-related pipes, we can automatically flag any new or unseen process that attempts to do so. This is a statistical approach to detecting masquerading.
  answer_sources:
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - Windows Event ID 4688
  - All endpoints and servers with deployed security solutions (EDR, AV)
  range: last 90 days
  queries:
  - Statistical: "FOR each pipe in security_pipe_watchlist, BASELINE legitimate ImagePaths | ALERT if a new ImagePath creates the pipe"
- question: Can a machine learning classifier distinguish between legitimate and suspicious access to security tool pipes based on contextual features?
  context: This question uses a supervised model to score the risk of each access event to a protected pipe. By training on features like the process path, its parent, and command-line arguments, the model can learn the nuanced patterns of legitimate versus malicious access, allowing analysts to focus on the highest-risk events.
  answer_sources:
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - Windows Event ID 4688
  - All endpoints and servers with deployed security solutions (EDR, AV)
  range: last 90 days
  queries:
  - Machine Learning: "PREDICT is_suspicious_access USING classification_model ON pipe_events | ALERT on high probability scores"
- question: Did a process create a file in a staging directory and then immediately initiate an outbound network connection to an untrusted destination?
  context: This question detects a pattern where malware uses a file lock as a simple mutex. It creates a file to 'lock' its presence, then proceeds with C2 communication. By correlating file creation in temporary locations with subsequent network connections from the same process within a short time window, we can uncover this behavior.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - Common staging directories (%TEMP%, %APPDATA%, C:\Users\Public, /tmp, /var/tmp), Network Egress Points
  range: last 90 days
  queries:
  - Symbolic: "CORRELATE file_creation (Sysmon 11) in staging_dirs with network_connection (Sysmon 3, Zeek) from same process within 5s | ALERT if DestinationIP is untrusted"
- question: Is a process that created a high-entropy (random-looking) file in a staging directory also making outbound network connections to low-reputation IPs?
  context: This question enhances the previous one by adding a statistical measure. Malware often uses randomly named files for locks. High Shannon entropy is a good indicator of randomness. By flagging files with statistically high entropy and correlating them with network connections to low-reputation destinations, we can increase the confidence that this activity is malicious.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - Common staging directories (%TEMP%, %APPDATA%, C:\Users\Public, /tmp, /var/tmp), Network Egress Points
  range: last 90 days
  queries:
  - Statistical: "CALCULATE entropy for filenames (Sysmon 11) in staging_dirs | IF entropy > 95th_percentile, CORRELATE with network_connection (Sysmon 3) | ELEVATE_RISK if DestinationIP has low reputation"
- question: Can unsupervised clustering identify groups of suspicious activity involving file creation in staging directories and subsequent network connections?
  context: This question uses an unsupervised approach (e.g., DBSCAN) to find pockets of anomalous behavior. By clustering events based on features like file path, file entropy, destination IP, and port, the algorithm can group together similar, potentially malicious activities that might represent a new campaign not caught by signature-based rules.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - Common staging directories (%TEMP%, %APPDATA%, C:\Users\Public, /tmp, /var/tmp), Network Egress Points
  range: last 90 days
  queries:
  - Machine Learning: "CLUSTER file and network events using DBSCAN on features (FilePath, Entropy, DestIP, DestPort) | INVESTIGATE anomalous clusters"
- question: Is a process creating a named pipe or using a command-line argument with a name that appears algorithmically generated (e.g., matches a GUID pattern or is a long random string)?
  context: This question aims to detect malware that generates unique mutex names to avoid signature-based detection. These names often follow predictable patterns, like a GUID or long random strings. Using regular expressions, we can search for these structural patterns in pipe names and command-line arguments to identify likely algorithmically generated mutexes.
  answer_sources:
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - Symbolic: "SEARCH logs (Sysmon 17, 18; Win 4688) for PipeName or CommandLine MATCHING REGEX for GUIDs or long_random_strings"
- question: Is a specific process creating a named pipe whose name has a statistically anomalous Shannon entropy compared to the pipe names it normally creates?
  context: This question provides a targeted statistical approach. Instead of flagging all high-entropy names, this method baselines the normal entropy level for pipe names created by each specific program. An alert is triggered only if a process creates a pipe with an entropy level that is a significant outlier from its own established norm, reducing false positives.
  answer_sources:
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - Statistical: "FOR each ImagePath, BASELINE typical PipeName entropy | ALERT if new PipeName entropy is > 3 standard deviations from the mean for that ImagePath"
- question: Can a deep learning model (LSTM autoencoder) detect algorithmically generated pipe names by identifying names that are structurally different from legitimate ones?
  context: This question employs a sophisticated anomaly detection technique. An LSTM autoencoder is trained on legitimate pipe names to learn their common character-level patterns. When a new, algorithmically generated name is seen, it won't fit the learned patterns, resulting in a high 'reconstruction error', which flags it as anomalous.
  answer_sources:
  - Sysmon Event ID 17
  - Sysmon Event ID 18
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - Machine Learning: "CALCULATE reconstruction_error for new PipeNames using LSTM_autoencoder | ALERT if error is high"