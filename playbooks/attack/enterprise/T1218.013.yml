name: "T1218.013: Mavinject"
id: "b9c8d5e0-65f5-4e3a-8f8d-7e4a5b6c7d8e"
description: "This playbook helps investigate whether an adversary is attempting to evade defenses by proxying execution through the signed Microsoft binary, mavinject.exe. The investigation focuses on identifying anomalous usage of mavinject.exe, such as its use to inject malicious DLLs, injection from unusual file paths, suspicious parent-child process relationships (e.g., a user application like winword.exe launching mavinject.exe to target a system process like lsass.exe), and statistical anomalies like first-time execution on a host or a sudden spike in execution frequency across the enterprise. The goal is to differentiate legitimate use from malicious activity by analyzing process execution logs, file attributes, network connections, and historical baselines."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a malicious DLL being injected via mavinject.exe, identified by its hash?"
    context: "Adversaries may use mavinject.exe to load and execute a malicious DLL. This question aims to identify such activity by extracting the hash of the injected DLL and cross-referencing it with a threat intelligence platform. A match provides a high-confidence indicator that the mavinject.exe execution was malicious."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek files.log"
      - "All Windows endpoints and servers"
      - "Network egress points (e.g., perimeter firewalls, web proxies)"
      - "Threat Intelligence Platform (TIP)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each process creation event WHERE process_name == 'mavinject.exe'
            EXTRACT injected_dll_path from command_line
            GET file_hash for injected_dll_path from file creation logs or endpoint tool
            QUERY threat_intel_platform for file_hash
            IF match found THEN ALERT
  - question: "Is a process injected by mavinject.exe making low-reputation network connections?"
    context: "After injecting code into a target process, adversaries often use that process to establish command and control (C2) communications. This question seeks to detect this behavior by identifying the process targeted by mavinject.exe, monitoring its subsequent network activity, and evaluating the reputation of the destination IPs. Connections to low-reputation endpoints are a strong indicator of compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek files.log"
      - "All Windows endpoints and servers"
      - "Network egress points (e.g., perimeter firewalls, web proxies)"
      - "Threat Intelligence Platform (TIP)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each process creation event WHERE process_name == 'mavinject.exe'
            EXTRACT target_pid from command_line
            SEARCH for network connections from target_pid within 5 minutes of execution
            FOR each destination_ip
              GET reputation_score from threat_intel_platform
            CALCULATE average_reputation_score
            IF average_reputation_score < 20 THEN ALERT
  - question: "Can machine learning classify network connections from processes injected by mavinject.exe as malicious?"
    context: "This question proposes a more advanced, proactive approach using a machine learning model to classify network behavior from injected processes. By training a classifier on features like destination reputation, port entropy, connection duration, and data volume ratios, this method can detect subtle or novel malicious C2 patterns that might be missed by simple reputation lookups alone."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek files.log"
      - "All Windows endpoints and servers"
      - "Network egress points (e.g., perimeter firewalls, web proxies)"
      - "Threat Intelligence Platform (TIP)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          APPLY trained logistic regression model to network connections from processes injected by mavinject.exe
          MODEL_FEATURES: destination_reputation, port_entropy, connection_duration, sent_vs_received_ratio
          IF model_prediction == 'malicious' THEN ALERT
  - question: "Is mavinject.exe being used to inject a DLL from a suspicious or non-standard directory?"
    context: "Adversaries often place malicious payloads in directories that are world-writable or less scrutinized, such as temporary folders or public user directories. This question focuses on detecting mavinject.exe executions that use the '/INJECTRUNNING' or '/HMODULE' flags to load a DLL from a watchlist of known suspicious locations (e.g., C:\\Windows\\Temp, %APPDATA%)."
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows endpoints and servers"
      - "User profile directories (C:\\Users\\*)"
      - "System temporary folders (C:\\Windows\\Temp)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          DEFINE suspicious_dirs = ['C:\\Windows\\Temp', '%APPDATA%', 'C:\\Users\\Public']
          FOR each process creation event WHERE process_name == 'mavinject.exe' AND (command_line CONTAINS '/INJECTRUNNING' OR command_line CONTAINS '/HMODULE')
            EXTRACT injected_dll_path from command_line
            IF directory of injected_dll_path IN suspicious_dirs THEN ALERT
  - question: "Is mavinject.exe injecting a DLL from a directory that is statistically rare across the enterprise?"
    context: "This question provides a dynamic alternative to static watchlists by baselining directory usage. It involves calculating the prevalence of all directories from which DLLs are injected over a 90-day period. An injection originating from a directory that is very uncommon (e.g., in the bottom 5th percentile of prevalence) is flagged as suspicious, as it deviates from established software behavior across the enterprise."
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows endpoints and servers"
      - "User profile directories (C:\\Users\\*)"
      - "System temporary folders (C:\\Windows\\Temp)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          MAINTAIN 90-day baseline of injection source directory prevalence
          FOR each mavinject.exe injection event
            EXTRACT source_directory from command_line
            CALCULATE prevalence_percentile for source_directory from baseline
            IF prevalence_percentile < 5 THEN ALERT
  - question: "Can an anomaly detection model identify suspicious DLL file paths used in mavinject.exe injections?"
    context: "This question describes using an unsupervised machine learning model, such as an Isolation Forest, to detect anomalous DLL file paths. Rather than relying on directory names or prevalence, this model analyzes intrinsic features of the path itself—such as depth, string entropy, and the presence of keywords—to identify paths that do not conform to learned patterns of normalcy."
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows endpoints and servers"
      - "User profile directories (C:\\Users\\*)"
      - "System temporary folders (C:\\Windows\\Temp)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          APPLY trained Isolation Forest model to new mavinject.exe injection file paths
          MODEL_FEATURES: path_depth, directory_name_entropy, keyword_presence ('temp', 'public')
          IF anomaly_score is high THEN ALERT
  - question: "Is mavinject.exe being launched from a common user application to inject into a critical system process?"
    context: "A process chain where a standard user application (like Microsoft Word or PowerShell) spawns mavinject.exe to inject code into a critical system process (like lsass.exe) is a classic and high-fidelity indicator of malicious activity, often related to credential theft or defense evasion. This question aims to create a specific detection rule for this suspicious ancestry."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Critical application servers"
      - "Process creation logs from all Windows endpoints"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          DEFINE suspicious_parents = ['winword.exe', 'excel.exe', 'powershell.exe']
          DEFINE sensitive_targets = ['lsass.exe', 'csrss.exe', 'services.exe']
          FOR each event WHERE process_name == 'mavinject.exe'
            RESOLVE target_process_name from target_pid in command_line
            IF parent_process_name IN suspicious_parents AND target_process_name IN sensitive_targets THEN ALERT
  - question: "Are there statistically rare process execution chains involving mavinject.exe?"
    context: "Building on the previous question, this uses a statistical approach to find anomalous process chains. It involves baselining the frequency of all (Parent Process, mavinject.exe, Target Process) triplets over 90 days. A triplet that has rarely or never been observed (e.g., in the bottom 1st percentile of frequency) is flagged as suspicious, allowing for the detection of novel attack paths not covered by static rules."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Critical application servers"
      - "Process creation logs from all Windows endpoints"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          MAINTAIN 90-day baseline of (Parent, Child, Target) process triplet frequency
          FOR each mavinject.exe execution
            CONSTRUCT triplet = (ParentProcess, 'mavinject.exe', TargetProcess)
            GET frequency_percentile of triplet from baseline
            IF frequency_percentile < 1 THEN ALERT
  - question: "Can a graph-based anomaly detection model identify suspicious process ancestry involving mavinject.exe?"
    context: "This question describes an advanced technique for modeling process relationships as a graph. By representing processes as nodes and parent-child relationships as edges, graph-based anomaly detection algorithms can identify and score unusual paths. An event chain like 'winword.exe -> mavinject.exe -> lsass.exe' would appear as a high-scoring anomalous path, providing a strong, context-rich signal of malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Critical application servers"
      - "Process creation logs from all Windows endpoints"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          INGEST process creation logs into a graph database
          NODES = processes, EDGES = parent-child relationships
          RUN graph anomaly detection algorithm to score paths
          ALERT on high-scoring paths involving 'mavinject.exe'
  - question: "Has mavinject.exe executed for the first time on a host?"
    context: "The initial appearance of a tool like mavinject.exe on a host where it has never been seen before is a significant event that warrants investigation. This question involves maintaining a stateful list of hosts that have previously run mavinject.exe and triggering an alert when an execution occurs on any host not on that list, which could indicate the initial stages of a compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Enterprise-wide process execution logs stored in a SIEM"
      - "Host-based asset inventory"
      - "Baselining data for normal process counts"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          MAINTAIN lookup of hosts with mavinject.exe executions in last 90 days
          FOR each new mavinject.exe execution event
            IF hostname NOT IN lookup THEN
              ALERT on 'First time seen execution'
              ADD hostname to lookup
  - question: "Is there a statistically significant spike in the enterprise-wide execution of mavinject.exe?"
    context: "A sudden, widespread increase in mavinject.exe executions can signal a large-scale, automated attack. This question aims to detect such events by calculating a 30-day moving average and standard deviation for hourly mavinject.exe execution counts. An alert is generated if the current hourly count exceeds the baseline by a significant threshold (e.g., 3 standard deviations)."
    answer_sources:
      - "Windows Event ID 4688"
      - "Enterprise-wide process execution logs stored in a SIEM"
      - "Host-based asset inventory"
      - "Baselining data for normal process counts"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          CALCULATE 30-day moving average (MA) and standard deviation (SD) of hourly mavinject.exe executions
          GET current_hourly_count
          IF current_hourly_count > (MA + 3*SD) THEN ALERT
  - question: "Can a time-series model detect anomalous bursts in mavinject.exe execution activity?"
    context: "This question outlines a more sophisticated method for detecting unusual spikes in activity. By applying a time-series decomposition model (e.g., STL), the execution data is broken down into trend, seasonality, and residual components. This allows for the detection of significant spikes in the residual component, which represents unexplained variance, thereby filtering out normal periodic fluctuations to identify true anomalies."
    answer_sources:
      - "Windows Event ID 4688"
      - "Enterprise-wide process execution logs stored in a SIEM"
      - "Host-based asset inventory"
      - "Baselining data for normal process counts"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          APPLY time-series decomposition model to hourly mavinject.exe execution counts
          EXTRACT residual component from model
          IF residual value exceeds a learned threshold THEN ALERT on anomalous burst