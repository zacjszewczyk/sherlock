name: T1547.015: Login Items
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries maintaining persistence or escalating privileges on macOS hosts using Login Items. It covers techniques such as creating login items via `osascript` or the `SMLoginItemSetEnabled` API, monitoring for file modifications to `backgrounditems.btm`, and analyzing network connections from processes launched at login. It also addresses privilege escalation attempts where a login item process tries to gain administrator rights by prompting for credentials or writing to system-wide persistence locations.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is `osascript` being used to create a new login item, and does the target path correlate with known malicious indicators?
  context: `osascript` is a native macOS utility for running AppleScript. Adversaries can use it to programmatically create login items, which is a common persistence technique. This question aims to detect this specific behavior by looking for the tell-tale command-line arguments 'System Events' and 'make login item'. Correlating the file path of the item being added with threat intelligence helps to quickly identify if a known malicious tool is being persisted.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) process execution events
  - Zeek conn.log
  - User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_events WHERE process_name == 'osascript' AND command_line CONTAINS 'System Events' AND command_line CONTAINS 'make login item' | EXTRACT target_path from command_line | LOOKUP threat_intel_feed on target_path
- question: Has the `backgrounditems.btm` file been modified with anomalous frequency, or has a rare executable been added as a login item?
  context: The `backgrounditems.btm` file is a key database on modern macOS versions that stores login and background items. While legitimate software modifies this file, adversaries also target it for persistence. This question focuses on detecting anomalous behavior by baselining normal modification frequency per user and alerting on statistical outliers. It also hunts for rare executables being added, as malware often has a low prevalence across an enterprise compared to legitimate software.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) file modification events
  - User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.
  range: last 90 days
  queries:
  - pseudocode: SEARCH file_events WHERE file_path ENDS_WITH 'backgrounditems.btm' | BUCKET by user, 24h | COMPARE count to historical_95th_percentile | ALERT if count > threshold
  - pseudocode: SEARCH file_events WHERE file_path ENDS_WITH 'backgrounditems.btm' | EXTRACT added_executable_path | CALCULATE prevalence of added_executable_path across all hosts | ALERT if prevalence < 5
- question: Can a machine learning model classify a new login item addition as malicious based on its characteristics?
  context: This question proposes a more advanced, machine-learning-based approach to detection. By training a model on features like the parent process that initiated the change, the target executable's properties (path entropy, signing status), and its environmental prevalence, we can create a system that scores the likelihood of a new login item being malicious. This helps to automate the detection of novel or sophisticated threats that might evade simpler rule-based alerts.
  answer_sources:
  - macOS Endpoint Security Framework (ESF) file modification events
  - macOS ESF process execution events
  - User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.
  range: last 90 days
  queries:
  - pseudocode: ON new_login_item_event | EXTRACT features (parent_process, path_entropy, code_signing_status, prevalence) | INPUT features into Random_Forest_Model | ALERT if prediction == 'malicious'
- question: Is the `SMLoginItemSetEnabled` API being called by an untrusted or known-bad process to enable a login item?
  context: The `SMLoginItemSetEnabled` API is the modern, sandboxed way for macOS applications to register login items. While used by legitimate apps, it can also be abused by malware. This question focuses on the identity of the process calling the API. An alert is triggered if the calling process is unsigned, signed by an untrusted developer, or matches a hash on an IOC list, as these are strong indicators of malicious activity.
  answer_sources:
  - macOS ESF API monitoring events
  - macOS ESF process execution events
  - Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.
  range: last 90 days
  queries:
  - pseudocode: SEARCH api_events WHERE function_call == 'SMLoginItemSetEnabled' AND enabled_flag == true | GET calling_process_details (signature, hash) | IF signature is not trusted OR hash in IOC_list THEN ALERT
- question: Is an unusual parent process calling the `SMLoginItemSetEnabled` API, or is the associated helper tool path suspicious?
  context: This question aims to detect abuse of the `SMLoginItemSetEnabled` API by analyzing the context of the call. Legitimate calls are typically made by specific installer or application processes. A call from an unexpected parent, like a script interpreter (`bash`, `python`) or a document application, is highly suspicious. Additionally, analyzing the path of the helper tool for high entropy (randomness) can uncover attempts to evade detection by using non-standard or obfuscated file names.
  answer_sources:
  - macOS ESF API monitoring events
  - macOS ESF file creation events
  - macOS ESF process execution events
  - Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.
  range: last 90 days
  queries:
  - pseudocode: SEARCH api_events WHERE function_call == 'SMLoginItemSetEnabled' | GET parent_process_name, helper_tool_path | IF parent_process_name NOT IN legitimate_list THEN ALERT | IF shannon_entropy(helper_tool_path) > threshold THEN ALERT
- question: Can unsupervised machine learning identify outlier processes that register login items?
  context: This question proposes using an unsupervised learning approach, like DBSCAN clustering, to find anomalies without pre-existing labels. By grouping all processes that register login items based on features like their code signature, parent, and path, we can identify large clusters of normal, legitimate behavior. Processes that do not fit into these clusters (outliers) are highly suspicious and warrant investigation, as they may represent novel malware or attacker tools.
  answer_sources:
  - macOS ESF API monitoring events
  - macOS ESF file creation events
  - macOS ESF process execution events
  - Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.
  range: last 90 days
  queries:
  - pseudocode: GATHER features (code_signing, parent_process, process_path, cmd_args) for all processes that register login items | APPLY DBSCAN clustering algorithm | INVESTIGATE processes classified as noise/outliers
- question: Is a process launched at login making network connections to known command-and-control (C2) infrastructure?
  context: Processes that run automatically at login are prime candidates for persistence mechanisms. A key indicator of compromise is when one of these processes immediately initiates a network connection to a malicious server. This question focuses on correlating process launch events that occur shortly after login with network logs to check if the destination IP or domain is on a threat intelligence list of known C2 servers.
  answer_sources:
  - macOS ESF process execution events
  - macOS login events (Unified Log)
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints for process and login data, and network egress points (e.g., firewalls, network taps) for Zeek log collection.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_events within 5 minutes of login_event | GET destination_ip from network_logs for that process | LOOKUP destination_ip in C2_threat_feed | ALERT on match
- question: Is a process launched at login exhibiting anomalous network behavior or communicating with a newly registered domain?
  context: Even if a login item process doesn't connect to a known-bad destination, its behavior can still be suspicious. This question involves baselining the normal network activity (data volume, ports, connection frequency) for each process launched at login. An alert is triggered on significant statistical deviations, which could indicate that a legitimate process has been hijacked or is being used for malicious purposes like data exfiltration. Additionally, communication with newly registered domains is a common tactic for attackers and is flagged as suspicious.
  answer_sources:
  - macOS ESF process execution events
  - macOS login events (Unified Log)
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints for process and login data, and network egress points (e.g., firewalls, network taps) for Zeek log collection.
  range: last 90 days
  queries:
  - pseudocode: FOR each login_item_process | CALCULATE 30-day moving average and stddev for network_metrics (bytes_sent, bytes_received, connection_count) | IF current_metric > (average + 3*stddev) THEN ALERT
  - pseudocode: SEARCH dns_logs from login_item_process | GET domain_registration_date | IF registration_date < 30 days ago THEN ALERT
- question: Does the outbound network traffic volume for a process launched at login show a statistically significant, unexplainable spike?
  context: This question proposes a sophisticated time-series analysis to detect anomalies in network traffic. Many legitimate applications have predictable daily or weekly patterns of communication. A time-series model like Seasonal-Hybrid ESD can learn these patterns and identify sudden, large spikes in outbound data that don't fit the established seasonality. Such spikes are a strong indicator of potential data exfiltration or other malicious C2 activity.
  answer_sources:
  - macOS ESF process execution events
  - macOS login events (Unified Log)
  - Zeek conn.log
  - All macOS endpoints for process and login data, and network egress points (e.g., firewalls, network taps) for Zeek log collection.
  range: last 90 days
  queries:
  - pseudocode: FOR each login_item_process | FEED time_series of bytes_out to Seasonal_Hybrid_ESD_model | ALERT on anomalies identified by the model
- question: Is a process that originated from a login item attempting to escalate privileges using an `osascript` command?
  context: This is a high-fidelity detection for a specific privilege escalation technique. After establishing persistence as a standard user via a login item, an adversary may attempt to gain administrator rights. Using `osascript` with the 'with administrator privileges' argument is a direct way to trigger a credential prompt to the user. When the process initiating this action is a descendant of a login item, it's a strong signal of a malicious two-stage attack (persistence followed by escalation).
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF API monitoring events
  - macOS Unified Log for authorization events
  - All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_events WHERE process_name == 'osascript' AND command_line CONTAINS 'with administrator privileges' | TRACE process_ancestry | IF ancestor is a login_item_process THEN ALERT
- question: Is an application that is prompting for credentials potentially masquerading as a legitimate system utility via typosquatting?
  context: Adversaries often try to trick users into providing their passwords by spoofing the names of legitimate system applications (e.g., 'Sytem Preferences' instead of 'System Preferences'). This question aims to detect such attempts by comparing the name of any application that requests credentials against a known-good list. By using a string similarity metric like Levenshtein distance, we can flag potential typosquatting attempts. Additionally, flagging any application that prompts for credentials for the very first time provides a valuable signal for new or unknown tools.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF API monitoring events
  - macOS Unified Log for authorization events
  - All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.
  range: last 90 days
  queries:
  - pseudocode: ON credential_prompt_event | GET prompting_app_name | CALCULATE Levenshtein_distance(prompting_app_name, known_good_apps) | IF min_distance <= 2 THEN ALERT | IF prompting_app_name is new_to_environment THEN ALERT
- question: Can a machine learning model differentiate between legitimate and malicious credential prompts based on contextual features?
  context: This question proposes a sophisticated, machine-learning-based approach to detecting malicious credential prompts. By training a classifier like XGBoost on a rich set of features—such as the parent process, the executable's properties (path, signature), and its network activity—the model can learn the subtle differences between benign system requests and malicious attempts to steal passwords. This allows for more accurate and automated detection of social engineering attempts related to privilege escalation.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF API monitoring events
  - macOS Unified Log for authorization events
  - All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.
  range: last 90 days
  queries:
  - pseudocode: ON credential_prompt_event | EXTRACT features (parent_process, path, code_signing, prompt_text, network_connections) | INPUT features into XGBoost_Model | ALERT if score > high_suspicion_threshold
- question: Is a non-root, non-installer process writing to a system-wide persistence location like `/Library/LaunchDaemons`?
  context: The directories `/Library/LaunchDaemons` and `/Library/StartupItems` are system-wide persistence locations that require root privileges to modify. A file being created in these locations by a process running as a standard user (EUID != 0) is a major red flag. It implies a privilege escalation vulnerability has been exploited. This question creates a high-severity alert for this specific, highly anomalous event, filtering out known legitimate installer processes.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events with user context
  - System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.
  range: last 90 days
  queries:
  - pseudocode: SEARCH file_create_events WHERE directory IN ('/Library/LaunchDaemons', '/Library/StartupItems') | GET process_euid, process_name | IF process_euid != 0 AND process_name NOT IN installer_whitelist THEN ALERT (Severity HIGH)
- question: Has a process or user account written to a system-level persistence location for the first time ever in the environment?
  context: This question focuses on detecting 'first-time' events as a proxy for suspicious activity. Legitimate software installation and system administration tasks that modify system-wide persistence locations are often repetitive or performed by a limited set of processes and admin accounts. By creating a historical baseline of which executables and users perform these actions, we can flag any write operation by a process or user that has never done so before. This is a powerful technique for spotting novel attack tools or compromised accounts being used for privilege escalation.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events with user context
  - System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.
  range: last 90 days
  queries:
  - pseudocode: SEARCH file_write_events in system_persistence_dirs | GET process_name, user_account | LOOKUP historical_baseline for (process_name, user_account) | IF not found in baseline THEN ALERT and ADD to baseline
- question: Can a one-class machine learning model identify anomalous write events to system persistence locations?
  context: This question proposes using a one-class SVM, an unsupervised learning algorithm ideal for anomaly detection, to model what 'normal' write activity to system persistence locations looks like. The model is trained exclusively on data from known-good events (e.g., legitimate software installations). When a new write event occurs, the model determines if it fits within the learned 'normal' boundary. Any event that falls outside this boundary is classified as an outlier and flagged as a potential privilege escalation attempt, allowing for the detection of previously unseen malicious behavior.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events with user context
  - System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.
  range: last 90 days
  queries:
  - pseudocode: ON file_write_event in system_persistence_dirs | EXTRACT features (process_name, parent_process, user, path) | INPUT features into One_Class_SVM_Model | IF model_classifies as outlier THEN ALERT