name: T1547.015: Login Items
id: c8f9a0b1-3d4e-4f5a-8b6c-7d8e9f0a1b2c
description: This playbook focuses on detecting adversaries using macOS Login Items for persistence (TA0003) and privilege escalation (TA0004). Adversaries abuse this feature to ensure their malicious code executes automatically whenever a user logs in. The playbook addresses several methods of creating login items, including direct modification of the `backgrounditems.btm` file, programmatic creation using `osascript` or the `SMLoginItemSetEnabled` API, and writing to system-wide persistence directories like `/Library/LaunchDaemons`. It also covers post-persistence activities, such as login items initiating suspicious network connections or attempting to escalate privileges by prompting for user credentials. Investigations should focus on identifying anomalously created login items, unusual parent processes, unsigned or rare executables being added, and abnormal network or system behavior from processes launched at login.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is `osascript` being used to create a new login item pointing to a known malicious file?
  context: Adversaries may use the `osascript` command-line tool to execute AppleScript, which can programmatically create Login Items. This allows them to add persistence without interacting with the GUI. This question looks for the specific command used for this purpose and checks if the file being added is a known malicious indicator.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF file modification events
  - Zeek conn.log
  - User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_events WHERE process_name == "osascript" AND command_line CONTAINS "System Events" AND command_line CONTAINS "make login item" | LOOKUP target_path against threat_intel_feed
- question: Has the `backgrounditems.btm` file been modified with anomalous frequency or to add a rare executable?
  context: The `backgrounditems.btm` file stores information about user-approved background items. While legitimate software modifies this file, adversaries can also manipulate it to add their own persistence. This question aims to detect this abuse by identifying an unusual rate of modification for a specific user or the addition of an executable that is not widely installed across the enterprise.
  answer_sources:
  - macOS ESF file modification events
  - macOS ESF process execution events
  - Zeek conn.log
  - User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_events WHERE file_path ENDS_WITH "backgrounditems.btm" | AGGREGATE count BY user, time_window=24h | COMPARE count to historical_baseline(user, 95_percentile) | OR | SEARCH file_events WHERE file_path ENDS_WITH "backgrounditems.btm" | EXTRACT added_executable_path | AGGREGATE host_count BY added_executable_path | FILTER host_count < 5
- question: Does a newly created login item exhibit features indicative of malicious activity, such as an unusual parent process, high path entropy, or a lack of code signing?
  context: Malicious login items often have different characteristics than legitimate ones. They might be created by an unexpected parent process (e.g., Terminal instead of a known installer), be located in a path with a randomized, high-entropy name to evade detection, or lack a valid digital signature. This question uses a machine learning approach to score and identify suspicious login item creation events based on these features.
  answer_sources:
  - macOS ESF file modification events
  - macOS ESF process execution events
  - Zeek conn.log
  - User Library directories (`~/Library`) on all macOS endpoints, specifically the `Application Support` subdirectory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH login_item_creation_events | EXTRACT parent_process, target_path, signing_status | COMPUTE path_entropy(target_path) | PREDICT is_malicious WITH random_forest_model(parent_process, path_entropy, signing_status)
- question: Is the `SMLoginItemSetEnabled` API being called by an unsigned or known-malicious process?
  context: The `SMLoginItemSetEnabled` function is the modern, recommended way for applications to create login items. Adversaries can abuse this legitimate API. This question focuses on high-fidelity indicators of abuse by checking if the process calling this API is either not signed by a trusted developer or matches a known-bad hash from threat intelligence.
  answer_sources:
  - macOS ESF API monitoring events
  - macOS ESF file creation events
  - macOS ESF process execution events
  - Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH api_calls WHERE function_name == "SMLoginItemSetEnabled" AND enabled == true | CHECK process_signature for trusted_developer | CHECK process_hash against IOC_list
- question: Is the `SMLoginItemSetEnabled` API being called by an anomalous parent process or to register a helper tool with a high-entropy path name?
  context: Legitimate calls to `SMLoginItemSetEnabled` typically come from predictable parent processes like installers. A call from a shell, script interpreter, or productivity application is highly suspicious. Additionally, malware may place its helper tool in a randomly named path to avoid static signatures. This question seeks to identify these behavioral anomalies.
  answer_sources:
  - macOS ESF API monitoring events
  - macOS ESF file creation events
  - macOS ESF process execution events
  - Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH api_calls WHERE function_name == "SMLoginItemSetEnabled" | FILTER parent_process NOT IN (installer, AppStore, ...) | OR | COMPUTE shannon_entropy(helper_tool_path) | FILTER entropy > threshold
- question: Are there outlier processes registering login items that do not cluster with known legitimate installers based on their attributes?
  context: This question uses an unsupervised machine learning approach to find the "unknown unknowns." By clustering all processes that register login items based on features like code signing, parent process, and path, we can identify small groups of outliers that behave differently from the large clusters of legitimate software installers. These outliers are prime candidates for investigation.
  answer_sources:
  - macOS ESF API monitoring events
  - macOS ESF file creation events
  - macOS ESF process execution events
  - Application bundle directories (`/Applications/*.app/`) and system-wide/user-specific LaunchAgent directories (`/Library/LaunchAgents`, `~/Library/LaunchAgents`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH api_calls WHERE function_name == "SMLoginItemSetEnabled" | EXTRACT features (signing_info, parent_process, process_path) | CLUSTER with DBSCAN on features | INVESTIGATE outlier_clusters
- question: Is a process launched at login communicating with a known command and control (C2) server?
  context: Once persistence is achieved, the adversary's payload will often initiate a network connection to a C2 server to receive commands or exfiltrate data. This question aims to detect this activity by correlating processes launched shortly after a user logs in with network logs, checking for connections to destinations on threat intelligence feeds.
  answer_sources:
  - macOS ESF process execution events
  - macOS login events (Unified Log)
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints for process and login data, and network egress points for Zeek log collection.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH login_events | FOR_EACH event, SEARCH process_events WHERE start_time WITHIN 5_minutes_of login_time | JOIN with network_logs | LOOKUP destination_ip, destination_domain against C2_feed
- question: Is a known login item process exhibiting anomalous network behavior or querying for a recently registered domain?
  context: Adversaries may use legitimate, compromised applications as login items or their C2 infrastructure may not yet be on a threat feed. This question establishes a baseline of normal network activity for each login item and alerts on significant deviations. It also flags a common TTP: the use of newly registered domains for C2, as these are less likely to be categorized.
  answer_sources:
  - macOS ESF process execution events
  - macOS login events (Unified Log)
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints for process and login data, and network egress points for Zeek log collection.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_events from login_items | JOIN with network_logs | AGGREGATE metrics (bytes_sent, port, conn_count) BY process | COMPARE metrics to 30_day_moving_average | ALERT on deviation > 3_stddev | OR | JOIN with dns_logs | FILTER domain_registration_age < 30_days
- question: Is a process launched at login generating unexplainable spikes in outbound network traffic volume?
  context: Data exfiltration is a common objective for adversaries. A process launched via a login item that suddenly sends a large amount of data is highly suspicious. This question uses a time-series model to learn the normal "rhythm" of a process's network traffic and automatically flag significant, non-seasonal spikes that could represent malicious activity.
  answer_sources:
  - macOS ESF process execution events
  - macOS login events (Unified Log)
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints for process and login data, and network egress points for Zeek log collection.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs from login_item_processes | FOR_EACH process, APPLY time_series_anomaly_detection on bytes_out | ALERT on significant_anomalies
- question: Is a process launched from a login item using `osascript` to request administrator privileges?
  context: Adversaries who have gained initial persistence as a standard user may attempt to escalate privileges. A common method on macOS is to use `osascript` to display a convincing system dialog box that asks the user for their password. This question targets a high-fidelity indicator of this by looking for a process spawned from a login item that then uses `osascript` to request admin rights.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF API monitoring events
  - macOS Unified Log for authorization events
  - All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_events WHERE process_name == "osascript" AND command_line CONTAINS "with administrator privileges" | TRACE process_ancestry | ALERT if ancestor is a known_login_item
- question: Is a login item process prompting for credentials using a typosquatted name or for the first time in the environment?
  context: To trick users into giving up their credentials, adversaries may create applications with names that are slight misspellings of legitimate system utilities (e.g., "Sytem Preferences"). This question aims to detect this by comparing the name of the prompting application to a list of legitimate ones. It also flags any application that has never been seen prompting for credentials before, as this is an anomalous first-time event.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF API monitoring events
  - macOS Unified Log for authorization events
  - All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH credential_prompt_events | CALCULATE levenshtein_distance(prompting_app_name, legitimate_app_list) | ALERT if distance <= 2 | OR | CHECK prompting_app_name against historical_baseline | ALERT if first_time_seen
- question: Does a credential prompt originating from a login item process have features consistent with malicious activity?
  context: This question uses a supervised machine learning model to provide a holistic assessment of whether a credential prompt is malicious. By considering a combination of factors—such as the parent process, whether the application is signed, and its network activity—the model can identify suspicious prompts that might be missed by simpler rules.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF API monitoring events
  - macOS Unified Log for authorization events
  - All macOS endpoints, focusing on user-space processes and API interactions with the macOS security framework.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH credential_prompt_events from login_item_processes | EXTRACT features (parent_process, signing_status, has_network_connections) | PREDICT is_malicious WITH xgboost_model(features)
- question: Is a non-root process, other than a whitelisted installer, writing to system-wide persistence locations like `/Library/LaunchDaemons`?
  context: System-wide persistence locations like `/Library/LaunchDaemons` and `/Library/StartupItems` should only be modified by processes running as root (UID 0), typically legitimate software installers. A file write to these locations by a standard user process is a strong indicator of a privilege escalation attempt, where a vulnerability has been exploited to gain unauthorized write access.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events with user context
  - System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_create_events WHERE directory IN ("/Library/LaunchDaemons", "/Library/StartupItems") | FILTER process_euid != 0 AND process_name NOT IN (system_installd, installer, ...)
- question: Has a process or user account written to a system-level persistence location for the first time?
  context: Organizations typically have a standard set of software installed, meaning the processes and admin accounts that modify system-level persistence locations are relatively stable. This question establishes a baseline of all legitimate actors that have ever written to these locations and alerts on any new, never-before-seen process or user performing this sensitive action.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events with user context
  - System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_create_events WHERE directory IN ("/Library/LaunchDaemons", "/Library/LaunchAgents", ...) | CHECK (process_name, user_name) against historical_baseline_of_writers | ALERT if not_in_baseline
- question: Does a write event to a system-level persistence location deviate from the model of legitimate installation behavior?
  context: This question employs an anomaly detection model to distinguish legitimate software installations from malicious modifications. By training a model on the features of known-good installation events (e.g., the process name, its parent, user context), it can identify any new write to a persistence location that does not fit this learned profile, flagging it as a potential outlier indicative of privilege escalation.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events with user context
  - System-wide persistence directories (`/Library/LaunchAgents`, `/Library/LaunchDaemons`, `/Library/StartupItems`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_create_events WHERE directory IN ("/Library/LaunchDaemons", ...) | EXTRACT features (process_name, parent_process, user_context) | CLASSIFY event with one_class_svm_model | ALERT if outlier