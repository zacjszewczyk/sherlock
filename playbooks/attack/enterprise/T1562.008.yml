name: T1562.008: Disable or Modify Cloud Logs
id: 5a8d9b1c-3e2f-4a6d-9c8b-7e0f1a2b3c4d
description: >
  This playbook helps identify if an adversary has disabled or modified cloud logging capabilities to evade detection. It focuses on detecting suspicious network connections to cloud management APIs from known malicious IPs, API calls related to disabling logs, sustained drops in log volume from cloud sources, endpoint command-line execution of log modification commands, and high-risk activity immediately following a confirmed log modification alert.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any network connections to cloud management API endpoints originated from IP addresses on our threat intelligence feeds?
    context: >
      This question aims to detect initial access or defense evasion attempts where an adversary, using known malicious infrastructure, connects to cloud provider API endpoints. A match indicates a high-confidence signal that an external threat is attempting to interact with the cloud control plane, potentially to disable logging or perform other malicious actions.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Cloud Provider IP Ranges
      - Internet gateway and network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN conn_logs ON source_ip = threat_feed.ip
          WHERE destination_ip IN cloud_api_ranges
          ALERT on match
  - question: Are there connections to our cloud API endpoints originating from anomalously rare geographic locations or networks?
    context: >
      Adversaries may use compromised hosts or VPNs in unusual locations to mask their activities. This question helps identify such behavior by baselining normal connection origins (by country and ASN) and flagging connections from sources that are statistically rare. This can surface threat actors who are not yet on a threat intelligence feed.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Cloud Provider IP Ranges
      - Internet gateway and network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE source_country, source_asn for connections to cloud_api_ranges over 30 days
          ALERT if new connection's source_country or source_asn is in bottom 5th percentile of frequency
  - question: Can we use a machine learning model to predict whether a connection to a cloud API endpoint is malicious based on its characteristics?
    context: >
      This question involves a more advanced, proactive detection method. By training a classification model on various connection features, we can identify suspicious connections that may not trigger simpler rule-based alerts. This helps detect novel or sophisticated attempts to interact with the cloud control plane for malicious purposes like disabling logs.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Cloud Provider IP Ranges
      - Internet gateway and network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_classifier(features=[asn, geo, time, duration, ti_rep]) on historical conn_logs
          FOR each new connection to cloud_api_endpoint:
            prediction = MODEL.predict(connection)
            IF prediction.probability > threshold:
              ALERT
  - question: Have any API calls been made to cloud management endpoints that explicitly attempt to disable or modify logging services?
    context: >
      This is a direct approach to detecting the technique. By searching for specific, high-risk API call names within network traffic (HTTP URI or TLS SNI), we can identify unambiguous attempts to tamper with logging infrastructure. A match on strings like 'DeleteTrail' or 'StopLogging' is a strong indicator of malicious activity and should be investigated immediately.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Network egress points, forward proxies, and cloud access security brokers (CASB)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH http_logs.uri OR ssl_logs.server_name FOR regex(/(DeleteTrail|StopLogging|...)/i)
          ALERT on match
  - question: Have any user sessions involving rare log modification API calls exhibited behavior consistent with automated scripting?
    context: >
      Adversaries often use scripts to execute a series of commands quickly. Such automated sequences typically have lower complexity (entropy) than interactive human sessions. This question aims to detect this by identifying sessions that both contain a rare, dangerous API call and have an unusually predictable, low-entropy sequence of calls, which is a strong sign of a scripted attack.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Network egress points, forward proxies, and cloud access security brokers (CASB)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each user_session:
            calculate api_call_sequence_entropy
            IF session contains rare_log_modification_api_call AND entropy < threshold:
              ALERT
  - question: Are there user sessions where the sequence of API calls deviates significantly from the user's normal, learned behavior?
    context: >
      Users and automated processes typically follow predictable patterns of API calls. This question uses a sequence-based anomaly detection model (like an LSTM) to learn these normal patterns. If an adversary injects a malicious call, such as 'DeleteTrail', into a user's session, it will disrupt the normal sequence, leading to a high reconstruction error from the model and triggering an alert. This can detect subtle or embedded malicious activity.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Network egress points, forward proxies, and cloud access security brokers (CASB)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_lstm_autoencoder(normal_api_sequences_per_role)
          FOR each new api_sequence:
            reconstruction_error = MODEL.evaluate(api_sequence)
            IF reconstruction_error > threshold:
              ALERT
  - question: Have any of our critical cloud log sources stopped sending data unexpectedly?
    context: >
      This question addresses the outcome of disabled logging: a complete stoppage of log flow. By implementing a 'heartbeat' or 'dead man's switch' rule, we can quickly detect if a log source has gone silent. This is a simple but highly effective way to identify potential log tampering or misconfigurations, assuming it's not a scheduled maintenance event.
    answer_sources:
      - AWS CloudWatch Metrics
      - Azure Monitor Metrics
      - GCP Cloud Monitoring
      - SIEM internal performance logs
      - SIEM/Log aggregation platform and Cloud provider monitoring dashboards (e.g., AWS CloudWatch)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each critical_log_source:
            IF no_log_received in last 15 minutes AND not in maintenance_window:
              ALERT
  - question: Has the volume of any cloud log source dropped significantly below its normal historical baseline for a sustained period?
    context: >
      Instead of a complete stoppage, an adversary might only partially disable logging, or activity may naturally be low. This question uses statistical analysis to detect significant, sustained drops in log volume compared to a historical baseline (e.g., 3 standard deviations below the mean). This method can detect more subtle log tampering or partial outages that a simple heartbeat rule might miss.
    answer_sources:
      - AWS CloudWatch Metrics
      - Azure Monitor Metrics
      - GCP Cloud Monitoring
      - SIEM internal performance logs
      - SIEM/Log aggregation platform and Cloud provider monitoring dashboards (e.g., AWS CloudWatch)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = 30-day rolling_avg, std_dev of log_volume per hour for each source
          IF current_volume < (average - 3*std_dev) for 3 consecutive intervals:
            ALERT
  - question: Is the current log volume for any cloud source significantly lower than what a time series forecasting model predicted?
    context: >
      This is an advanced statistical method for detecting log stoppage. Time series models like ARIMA or Prophet can capture complex patterns like seasonality and trends in log data. By forecasting the expected log volume and an acceptable range (confidence interval), we can generate high-fidelity alerts when the actual volume drops below this predicted range, indicating a highly anomalous and potentially malicious event.
    answer_sources:
      - AWS CloudWatch Metrics
      - Azure Monitor Metrics
      - GCP Cloud Monitoring
      - SIEM internal performance logs
      - SIEM/Log aggregation platform and Cloud provider monitoring dashboards (e.g., AWS CloudWatch)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_timeseries_forecaster(historical_log_volume)
          prediction, confidence_interval = MODEL.predict(next_hour)
          IF actual_volume < confidence_interval.lower_bound:
            ALERT
  - question: Have any cloud CLI commands to disable or modify logging been executed on endpoints, especially by non-administrative users?
    context: >
      Adversaries may gain access to an endpoint and use installed cloud CLI tools to tamper with logs. This question seeks to detect this by monitoring for process creation events (like Windows Event ID 4688) that execute commands with log-disabling keywords. Alerting is prioritized when the user executing the command is not a member of an authorized group (e.g., 'Cloud Administrators'), as this is a strong indicator of compromised credentials or insider threat.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Active Directory Logs
      - Administrator workstations, developer endpoints, and CI/CD servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON process_creation_event (ID 4688):
            IF process_name in [aws.exe, az.cmd, ...] AND command_line contains ['delete-trail', 'stop-logging', ...]:
              user_group = GET_AD_GROUP(event.user)
              IF user_group IS NOT 'Cloud Administrators':
                ALERT
  - question: Are users executing cloud CLI commands that are statistically rare for their specific role?
    context: >
      Different roles within an organization have distinct patterns of tool usage. A marketing user, for example, would not typically run commands to delete diagnostic settings. This question aims to detect misuse of credentials or insider threats by baselining normal command-line activity for each user role and flagging executions of commands that are highly unusual (e.g., in the bottom 5th percentile of frequency) for that role.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Active Directory Logs
      - Administrator workstations, developer endpoints, and CI/CD servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE command_frequency per user_role
          ON new_command_execution:
            IF command_frequency for user_role is in bottom 5th percentile:
              ALERT
  - question: Is a user's command-line activity more similar to a different peer group than their own, particularly when executing log modification commands?
    context: >
      This question uses peer group analysis (or clustering) to automatically define user roles based on their actual command-line behavior. It can detect when a user's actions start to resemble those of a different group. For example, if a sales engineer (whose account may be compromised) suddenly starts executing commands typical of a cloud SRE, such as deleting logs, the model will flag this user as an outlier relative to their own peer group, indicating a potential threat.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Active Directory Logs
      - Administrator workstations, developer endpoints, and CI/CD servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTERS = create_user_clusters_from_cli_activity
          ON new_command_execution by user in cluster_A:
            IF command is highly anomalous for cluster_A but common for cluster_B:
              ALERT
  - question: If a cloud log tampering event is detected, how can we automatically increase scrutiny on the involved user or host to detect follow-on activity?
    context: >
      Disabling logs is rarely an adversary's final goal; it's a precursor to other malicious actions. This question focuses on chaining alerts together. Once a log tampering alert is confirmed, this rule automatically raises the risk score of any subsequent activity from the same user or host. This helps analysts prioritize related, potentially malicious events and can automatically escalate a series of low-severity alerts into a high-priority incident.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - SIEM Alerts
      - SIEM alert database and high-value asset endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON 'Cloud Log Tampering' alert for entity:
            FOR next 24 hours:
              INCREASE_RISK_SCORE of all new alerts from entity
            IF entity.cumulative_risk_score > threshold:
              CREATE_INCIDENT
  - question: Following a log modification event, does the associated user or host exhibit anomalous spikes in network traffic or process creation?
    context: >
      After disabling defenses, an adversary will likely proceed with their objectives, such as data exfiltration (high network traffic) or executing further tools (high process creation). This question triggers a focused, on-demand analysis immediately after a log modification event. It compares the entity's activity in the next hour to their normal baseline. A significant spike strongly suggests that the log tampering was a precursor to further malicious action.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - SIEM Alerts
      - SIEM alert database and high-value asset endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON log_modification_event for entity:
            activity_post_event = measure(network_volume, process_count) for 1 hour
            IF activity_post_event > 99th_percentile_of_baseline:
              ALERT
  - question: Can we use a graph model to predict an adversary's next move after they perform a log tampering action?
    context: >
      This question proposes using a graph database to model the relationships between entities (users, hosts) and their actions. When a high-risk action like 'log tampering' occurs, it's added as an edge to the graph. The model can then analyze this new information in context, re-evaluate the risk of connected assets, and even predict the most probable next steps in an attack chain based on learned attack paths. This provides analysts with proactive threat hunting leads.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - SIEM Alerts
      - SIEM alert database and high-value asset endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new_graph_edge(type='log tampering'):
            RECALCULATE_RISK for connected_nodes
            PREDICT_NEXT_ACTION based on learned attack paths
            CREATE_HUNTING_LEAD