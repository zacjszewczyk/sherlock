name: T1580: Cloud Infrastructure Discovery
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps determine if an adversary is attempting to discover cloud infrastructure to map available resources and identify high-value targets. Adversaries may try to enumerate a wide range of cloud services and resources to understand the environment's architecture, find misconfigurations, and locate sensitive data or systems. This can manifest as network connections from unusual sources to cloud API endpoints, the execution of known discovery tools on endpoints, unauthorized users running enumeration commands, a high volume of discovery API calls from a single identity, or queries spanning an anomalously high number of services or regions. The goal is to detect these preliminary reconnaissance activities before they lead to a more significant compromise.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any connections to cloud API endpoints originating from IP addresses known to be malicious?
    context: |
      This question aims to identify overt reconnaissance activity from known bad actors. By correlating network traffic to cloud provider APIs with threat intelligence feeds, we can detect when an adversary is attempting to discover our cloud environment using infrastructure that has already been identified as malicious (e.g., C2 servers, TOR exit nodes, known malicious proxies). A match is a high-confidence indicator of targeted reconnaissance.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Internet Egress Points
      - DNS Resolvers
      - Network Security Monitoring (NSM) sensor locations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          JOIN conn.log, ssl.log ON uid
          WHERE ssl.server_name MATCHES ('*.amazonaws.com', '*.googleapis.com', 'management.azure.com')
          AND conn.id.orig_h IN (ThreatIntel.IPs)
          RETURN conn.id.orig_h, conn.id.resp_h, ssl.server_name, timestamp

  - question: Have there been any connections to our cloud API endpoints from geographically or network-wise anomalous locations?
    context: |
      This question seeks to identify discovery attempts from unusual sources that may not be on a threat intelligence list. Adversaries may use newly compromised hosts or obscure hosting providers to evade detection. By baselining the typical geographic and network origins (ASNs) of connections to our cloud APIs, we can flag new connections from rare or unprecedented locations as suspicious. An alert is generated if a connection's source country or ASN is statistically rare compared to historical data.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Geo-IP Database
      - Internet Egress Points
      - DNS Resolvers
      - Network Security Monitoring (NSM) sensor locations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE historical_asn_freq = FREQUENCY(connections.asn) OVER last_30_days
          DEFINE historical_country_freq = FREQUENCY(connections.country) OVER last_30_days
          FOR EACH new_connection to cloud_api_endpoint
          GET source_ip_geolocation, source_ip_asn
          IF FREQUENCY(new_connection.asn) < 5th_percentile(historical_asn_freq)
          OR FREQUENCY(new_connection.country) < 5th_percentile(historical_country_freq)
          ALERT

  - question: Can we use machine learning to identify suspicious connections to cloud APIs based on their network characteristics?
    context: |
      This question explores a more advanced, behavioral approach to detection. By training a machine learning model (e.g., Random Forest) on various network traffic features (like ASN, country, connection duration, packet/byte counts), we can build a classifier that learns the subtle differences between normal administrative traffic and potential reconnaissance activity. This allows for the detection of novel or evasive techniques that may not match simple rules.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Internet Egress Points
      - DNS Resolvers
      - Network Security Monitoring (NSM) sensor locations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH new_connection to cloud_api_endpoint
          EXTRACT features (ASN, country, duration, packets, bytes, server_name_present)
          APPLY pre-trained classification_model
          IF model.predict(features) == 'suspicious'
          ALERT

  - question: Is there evidence of known cloud discovery tools being executed on our hosts?
    context: |
      This question looks for the direct execution of specific open-source or commercial cloud scanning tools (e.g., Pacu, CloudMapper, ScoutSuite). Detecting the execution of these tools by name or by their unique command-line arguments is a high-fidelity indicator that an adversary or unauthorized user is actively performing reconnaissance on the cloud environment from a compromised host.
    answer_sources:
      - Windows Event ID 4688
      - Administrator and developer workstations
      - CI/CD pipeline runners
      - Bastion hosts
      - Virtual Desktop Infrastructure (VDI) instances
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH process_creation_events
          WHERE CommandLine CONTAINS ('pacu.py', 'cloudmapper', 'scout', 'cloudsploit', '--module ec2__enum_unauthenticated')
          ALERT

  - question: Are there any cloud CLI tool executions with unusually complex or high-entropy command-line arguments, suggesting automated scanning?
    context: |
      This question tries to differentiate automated scanning from normal, interactive administrative commands. Automated tools often generate long, complex command-line strings with many arguments, resulting in higher Shannon entropy. By establishing a baseline for command-line entropy for each user, we can flag commands that are statistical outliers, which may indicate the use of a script or tool for broad enumeration.
    answer_sources:
      - Windows Event ID 4688
      - Administrator and developer workstations
      - CI/CD pipeline runners
      - Bastion hosts
      - Virtual Desktop Infrastructure (VDI) instances
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH process_creation_event WHERE process_name IN ('aws.exe', 'az.exe', 'gcloud.cmd')
          CALCULATE shannon_entropy(CommandLine)
          GET user_baseline_entropy_98th_percentile
          IF shannon_entropy > user_baseline_entropy_98th_percentile
          ALERT

  - question: Can we use machine learning to detect anomalous cloud CLI command-line usage that deviates from established administrative patterns?
    context: |
      This question uses a one-class SVM model to formalize the concept of "normal" behavior. By vectorizing command-line arguments (using TF-IDF) from a baseline of known-good activity, the model learns the boundary of legitimate administrative commands. Any new command that falls significantly outside this boundary is flagged as an outlier, indicating potentially malicious or unauthorized tool usage that might not be caught by signature-based methods.
    answer_sources:
      - Windows Event ID 4688
      - Administrator and developer workstations
      - CI/CD pipeline runners
      - Bastion hosts
      - Virtual Desktop Infrastructure (VDI) instances
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH new_command_line for cloud_cli_tool
          VECTORIZE command_line_arguments using TF-IDF model
          APPLY pre-trained one-class_SVM_model
          IF model.predict(vector) == 'outlier'
          ALERT

  - question: Are cloud discovery commands being executed by users who are not part of an authorized group?
    context: |
      This is a policy-enforcement question. It assumes that an organization has defined specific user groups (e.g., 'Cloud Administrators') that are authorized to perform discovery actions. By checking the group membership of the user executing a cloud CLI command against an allow-list, we can quickly identify policy violations and potentially unauthorized activity. This is a simple but effective way to detect privilege abuse or the use of compromised non-privileged accounts.
    answer_sources:
      - Windows Event ID 4688
      - Active Directory Security Logs
      - All corporate endpoints
      - Active Directory domain controllers (for group membership lookups)
      - Privileged Access Management (PAM) systems
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE authorized_groups = ('G_CloudAdmins', 'G_DevOps_Team')
          FOR EACH process_creation_event WHERE process_name IN ('aws.exe', 'az.exe', 'gcloud.cmd')
          GET executing_user_groups from Active Directory
          IF user_groups NOT IN authorized_groups
          ALERT

  - question: Are users executing cloud discovery commands that are unusual for their own historical behavior, or at an abnormally high frequency?
    context: |
      This question focuses on intra-user behavioral anomalies. It has two parts: detecting when a user runs a specific command they've never run before, and detecting when a user runs discovery commands at a rate that is much higher than their personal average. This can help spot a compromised account being used for reconnaissance, as the adversary's actions will likely deviate from the legitimate user's established patterns.
    answer_sources:
      - Windows Event ID 4688
      - Active Directory Security Logs
      - All corporate endpoints
      - Active Directory domain controllers (for group membership lookups)
      - Privileged Access Management (PAM) systems
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user
          MAINTAIN baseline of historical_commands and daily_command_count_average + stdev over 90 days
          FOR EACH new_discovery_command by user
          IF command NOT IN user.historical_commands OR daily_count > (user.average + 3 * user.stdev)
          ALERT

  - question: Are there any users whose overall cloud CLI usage patterns have suddenly shifted or become outliers, suggesting a change in role or potential compromise?
    context: |
      This question uses unsupervised machine learning (DBSCAN clustering) to group users into roles based on their command-line activity. Instead of pre-defining roles, this method discovers them organically from the data. An alert is triggered when a user's behavior changes so significantly that they are re-classified into a new cluster or flagged as a noise point (outlier), indicating a major deviation from their established peer group and personal history.
    answer_sources:
      - Windows Event ID 4688
      - Active Directory Security Logs
      - All corporate endpoints
      - Active Directory domain controllers (for group membership lookups)
      - Privileged Access Management (PAM) systems
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          PERIODICALLY:
          FOR EACH user, create feature_vector (command_frequency, command_variety, etc.)
          RUN DBSCAN clustering algorithm on all user_feature_vectors
          FOR EACH user
          IF user.cluster_assignment changes OR user is classified as 'outlier'
          ALERT

  - question: Has any single user or IP address generated a high volume of cloud discovery API calls in a short period?
    context: |
      This question seeks to detect brute-force enumeration by setting a simple threshold for discovery-related API activity. While less sophisticated than baselining, a static threshold (e.g., 100 'list' or 'describe' calls in 10 minutes) can be an effective and low-cost way to catch egregious scanning activity from a single source IP or user identity.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Cloud provider management plane (API logging)
      - Administrator workstations
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          COUNT discovery_api_calls ('describe*', 'list*', 'get*') by source_ip, user_identity
          GROUP BY 10-minute window
          IF count > 100
          ALERT

  - question: Is any user's rate of discovery API calls significantly exceeding their own historical baseline, or are they enumerating an unusually broad set of services?
    context: |
      This question refines the volume-based approach by personalizing it. It alerts when a user's rate of discovery calls exceeds their own historical 99th percentile, making it sensitive to what is abnormal for that specific user. It also increases alert severity if the user is enumerating a wide variety of services (high entropy of event names), as this is more indicative of broad reconnaissance than routine work.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Cloud provider management plane (API logging)
      - Administrator workstations
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user, within a 10-minute window
          CALCULATE current_rate of discovery_api_calls
          GET user_historical_rate_99th_percentile
          IF current_rate > user_historical_rate_99th_percentile
          CALCULATE shannon_entropy of api_event_names in window
          ALERT with severity based on entropy

  - question: Can time-series analysis detect anomalous bursts in discovery API call volume that are inconsistent with a user's normal activity rhythm?
    context: |
      This question applies formal time-series forecasting (e.g., ARIMA) to a user's API call history. The model learns the user's typical patterns, including seasonality (e.g., higher activity during work hours). It then forecasts an expected range of activity for the near future. An alert is triggered if the actual activity significantly breaks the upper bound of this forecast, indicating a burst of calls that is anomalous even when accounting for the user's normal rhythm.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Cloud provider management plane (API logging)
      - Administrator workstations
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user's stream of discovery_api_calls
          APPLY time-series model (e.g., ARIMA) to forecast expected_volume with 99% confidence_interval
          IF actual_volume > upper_bound(confidence_interval)
          ALERT

  - question: Are there any API calls attempting to query all geographic regions or using broad wildcards, indicating wide-scale reconnaissance?
    context: |
      This question looks for specific, high-fidelity indicators of reconnaissance within the API call parameters themselves. An adversary trying to get a complete picture of the environment might script their tool to loop through all available regions or use a wildcard to query all resources of a certain type. Since this is not typical administrative behavior, detecting such parameters provides a strong signal of malicious intent.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Cloud provider management plane (API logging)
      - Administrator and developer workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH cloud_audit_logs
          WHERE api_request_parameters indicates 'all regions' query
          OR api_request_parameters contains non-standard wildcard for resource query
          ALERT

  - question: Are users attempting to discover resources in cloud services or geographic regions they have never interacted with before?
    context: |
      This question establishes a behavioral baseline for each user based on the specific services (e.g., EC2, S3) and regions (e.g., us-east-1) they normally work with. An alert is triggered if a user makes a discovery call to a service or region for the first time. This is a powerful way to detect lateral movement or scope creep in reconnaissance, as an adversary explores parts of the cloud environment unfamiliar to the compromised user.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Cloud provider management plane (API logging)
      - Administrator and developer workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user
          MAINTAIN historical_set of interacted_services and interacted_regions over 90 days
          FOR EACH new_discovery_api_call by user
          IF call.service NOT IN user.historical_services OR call.region NOT IN user.historical_regions
          ALERT

  - question: Can a graph-based model predict and alert on user interactions with cloud services that are highly improbable based on their established role and the behavior of their peers?
    context: |
      This question models the relationships between users and the cloud services they use as a graph. By analyzing the structure of this graph, a link prediction algorithm can calculate the probability of a user interacting with a new service. For example, if a developer suddenly queries a financial service typically only used by the finance team, the model would flag this as a low-probability, and therefore suspicious, event. This detects unusual behavior in the context of an organization's de facto roles.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Cloud provider management plane (API logging)
      - Administrator and developer workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MODEL user-service interactions as a bipartite graph
          FOR EACH new discovery interaction (user, service)
          CALCULATE probability_score using link prediction algorithm (e.g., Adamic-Adar)
          IF probability_score is below a defined threshold (highly unlikely)
          ALERT