name: "T1564.003: Hidden Window"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook addresses the adversary technique of hiding application windows to evade defenses (T1564.003), a sub-technique of Defense Evasion. The primary goal is to determine if an adversary is attempting to hide malicious processes from the user's view. This is achieved by looking for several key indicators: process creation events for executables with known malicious hashes; processes launched with command-line arguments that explicitly hide windows (e.g., PowerShell's -WindowStyle Hidden); anomalous parent-child process relationships, such as a system service spawning a user-facing application; the creation of a second, non-interactive explorer.exe process within a user's session; and network connections, especially periodic C2-like beaconing, originating from processes like explorer.exe that should not normally have network activity."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there process creation events where the executable's hash matches a known malicious hash associated with hidden window techniques?"
    context: "This question aims to identify known threats at the point of execution. By cross-referencing file hashes from process creation events against a curated threat intelligence feed of malware known to use T1564.003, analysts can detect specific, identified malware families attempting to operate stealthily."
    answer_sources:
      - "Windows Event ID 4688"
      - "All managed Windows endpoints, including user workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_events | JOIN file_hash with threat_intel_hashes | WHERE technique = 'T1564.003' | RETURN hostname, process_name, file_hash"
  - question: "Have any executables with a low enterprise-wide prevalence been executed recently?"
    context: "This question helps uncover novel or targeted malware that is not yet in threat intelligence feeds. Since legitimate software is typically widespread, an executable appearing on only a handful of systems is anomalous and suspicious. This is a powerful hunting technique to find previously unknown threats, especially when combined with checks for valid digital signatures."
    answer_sources:
      - "Windows Event ID 4688"
      - "All managed Windows endpoints, including user workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers."
    range: "last 30 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_events in last 30d | STATS distinct_count(hostname) as prevalence by file_hash | WHERE prevalence < 5 | RETURN file_hash, prevalence"
  - question: "Has a machine learning model identified any newly executed files as having a high probability of being malicious based on their static features?"
    context: "This question leverages machine learning to detect malicious files based on their intrinsic properties, rather than relying on signatures or prevalence. By analyzing features like file structure, entropy, and imported functions, this approach can identify packed, obfuscated, or entirely new malware designed to evade traditional detection methods."
    answer_sources:
      - "Windows Event ID 4688"
      - "All managed Windows endpoints, including user workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH file_classification_alerts | WHERE model_score > 0.9 AND technique_prediction = 'T1564.003' | RETURN hostname, file_path, model_score"
  - question: "Have any processes been launched with command-line arguments that explicitly hide the application window?"
    context: "This question directly targets the technique's implementation. Adversaries often use built-in scripting capabilities (like PowerShell's `-WindowStyle Hidden` or CScript's `//B` batch mode) to run malicious code without a visible window. Searching for these specific command-line patterns is a high-fidelity way to detect this activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows PowerShell Event ID 4104"
      - "All Windows endpoints and servers with enabled scripting engines (e.g., PowerShell, WScript, CScript), particularly administrative workstations and jump boxes."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_events OR powershell_script_block_logs | REGEX command_line contains '(-WindowStyle Hidden|//B)' | RETURN hostname, process_name, command_line"
  - question: "Have any scripting processes been executed with command lines that are anomalously long or complex?"
    context: "This question seeks to identify obfuscated or complex commands indicative of malicious activity. Adversaries often embed entire scripts or encoded payloads into the command line, resulting in unusually high length and entropy compared to benign administrative commands. Baselining normal activity and alerting on statistical outliers can uncover these hidden payloads."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows PowerShell Event ID 4104"
      - "All Windows endpoints and servers with enabled scripting engines (e.g., PowerShell, WScript, CScript), particularly administrative workstations and jump boxes."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_events WHERE process_name IN ('powershell.exe', 'cmd.exe', 'cscript.exe') | COMPARE command_line_length, command_line_entropy against historical_baseline | WHERE deviation > 99th_percentile | RETURN hostname, process_name, command_line"
  - question: "Has a machine learning model classified any command lines as malicious with high confidence?"
    context: "This question applies machine learning to command-line analysis to detect malicious intent. By training a model on features that distinguish benign commands from malicious ones (like those used in fileless malware), it can identify suspicious command lines in real-time, even if they use novel obfuscation techniques not caught by simple regex."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows PowerShell Event ID 4104"
      - "All Windows endpoints and servers with enabled scripting engines (e.g., PowerShell, WScript, CScript), particularly administrative workstations and jump boxes."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH command_line_analysis_alerts | WHERE model_score > 0.95 AND is_malicious = true | RETURN hostname, process_name, command_line, model_score"
  - question: "Has a typically non-interactive system process (like svchost.exe) spawned a process that is normally launched by a user (like chrome.exe)?"
    context: "This question looks for anomalous parent-child process relationships. Legitimate user applications are almost always spawned by `explorer.exe`. When a system service or other non-interactive process spawns a user application, it is a strong indicator of privilege escalation or a stealth technique where malware injects into a system process to launch its components."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "User workstations, application servers, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_events | WHERE parent_process IN (non_interactive_list) AND child_process IN (interactive_list) | RETURN hostname, parent_process, child_process"
  - question: "Have any rare or new parent-child process relationships been observed across the enterprise, especially if the child process makes external network connections?"
    context: "This question uses statistical rarity to find suspicious process execution chains. Most process relationships in an enterprise are common and repetitive. A new or extremely rare parent-child pair is inherently suspicious. Enriching this finding with network connection data helps prioritize investigation on anomalous process chains that are also communicating externally, a common pattern for malware."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "User workstations, application servers, and network egress points instrumented with Zeek sensors."
    range: "last 30 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH parent_child_pairs in last 30d | STATS count by parent_process, child_process | WHERE count < 5 | JOIN child_process_pid with network_logs on pid within 60s | RETURN hostname, parent_process, child_process, destination_ip"
  - question: "Has graph-based anomaly detection identified any process execution chains that are structurally different from the established baseline of normal activity?"
    context: "This question employs advanced graph analytics to model and detect abnormal process behavior. Instead of looking at individual parent-child pairs, this method analyzes entire execution chains. It can detect complex adversary behaviors like multi-stage process injection or living-off-the-land techniques that create structurally unusual process trees, which would be missed by simpler rule-based logic."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "User workstations, application servers, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH graph_anomaly_alerts | WHERE anomaly_score > threshold AND has_network_connection = true | RETURN hostname, anomalous_process_chain, anomaly_score"
  - question: "Has a second `explorer.exe` process been launched in a user session without a corresponding new interactive logon event?"
    context: "This question targets a specific technique for creating a hidden desktop. Each interactive user session should have only one `explorer.exe` process. The appearance of a second one, not associated with a new RDP or console logon, strongly suggests an adversary has created a separate, hidden desktop environment within the existing session to conceal their activities and GUI tools from the legitimate user."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "User Workstations, Remote Desktop Session Hosts, Virtual Desktop Infrastructure (VDI) servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "TRACK explorer_process_count by user_session_id | ALERT when count becomes 2 | EXCLUDE if recent (1m) logon_event (type 2 or 10) for same user_session_id | RETURN hostname, user, session_id"
  - question: "Has the number of running `explorer.exe` processes on a single host deviated significantly from its historical average?"
    context: "This question provides a statistical approach to detecting an anomalous number of `explorer.exe` processes. While most workstations will have a stable count (usually 0 or 1), a sudden spike can indicate malicious activity like hidden desktop creation. This method is useful for identifying outliers without needing to track individual session IDs, though it should exclude multi-user systems like terminal servers where multiple `explorer.exe` instances are normal."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "User Workstations, Remote Desktop Session Hosts, Virtual Desktop Infrastructure (VDI) servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_counts for 'explorer.exe' per host | COMPARE current_count to moving_average and std_dev | WHERE current_count > (mean + 3*std_dev) AND host NOT IN (terminal_server_list) | RETURN hostname, current_count"
  - question: "Have any running `explorer.exe` processes been identified as anomalous outliers by a clustering algorithm?"
    context: "This question uses unsupervised machine learning to find `explorer.exe` processes that don't fit the normal pattern. Legitimate instances share common features (parent is `userinit.exe`, empty command line, etc.) and will form a dense cluster. A malicious instance, perhaps with a different parent or command-line arguments, will be flagged as a 'noise point' by the algorithm, effectively isolating it for investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "User Workstations, Remote Desktop Session Hosts, Virtual Desktop Infrastructure (VDI) servers."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "RUN DBSCAN on running_explorer_processes with features (parent, session_id, command_line) | IDENTIFY noise_points | RETURN hostname, process_id, parent_process of noise_points"
  - question: "Has the `explorer.exe` process been observed making network connections to a known command-and-control (C2) server?"
    context: "This question seeks high-confidence indicators of compromise. The `explorer.exe` process should never make direct external network connections. A connection from `explorer.exe` to an IP or domain on a C2 threat intelligence list is a strong signal that the process has been compromised or hijacked for malicious communication."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "All Windows endpoints with Sysmon installed, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH network_connections WHERE process_name = 'explorer.exe' | JOIN destination_ip with threat_intel_c2_list | RETURN hostname, destination_ip, destination_port"
  - question: "Has the `explorer.exe` process exhibited periodic network beaconing behavior to an external destination?"
    context: "This question aims to detect C2 communication by its behavior rather than by signature. Malware often 'beacons' out to its C2 server at regular intervals. By analyzing the timing between connections from `explorer.exe` to a single destination, we can identify this machine-like periodicity. A very low standard deviation in the time between connections is a classic indicator of automated C2 beaconing."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "All Windows endpoints with Sysmon installed, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH network_connections WHERE process_name = 'explorer.exe' | GROUP by hostname, destination_ip | CALCULATE std_dev of time_between_connections | WHERE connection_count > 10 AND std_dev < 5s | RETURN hostname, destination_ip, std_dev"
  - question: "Has a machine learning model detected any anomalous network connections originating from `explorer.exe`?"
    context: "This question uses anomaly detection to identify any network activity from `explorer.exe`, which is itself an anomaly. Since `explorer.exe` should have little to no legitimate network traffic, a one-class model can be trained on this 'normal' state of no activity. Any new network connection will be flagged as a significant deviation from the baseline, providing a powerful method for detecting process injection or hijacking."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "All Windows endpoints with Sysmon installed, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH network_connection_anomaly_alerts WHERE process_name = 'explorer.exe' | RETURN hostname, destination_ip, destination_port, anomaly_score"