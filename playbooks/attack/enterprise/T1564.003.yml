name: T1564.003: Hidden Window
id: 5a8e0b6f-747d-4b9e-8a1f-3d6c4b0c1d2e
description: |
  This playbook helps analysts investigate whether an adversary is attempting to evade defenses by hiding malicious processes from the user's view. This involves detecting known malicious executables using stealth techniques, identifying command-line arguments that explicitly hide windows, spotting processes launched by anomalous parents (e.g., a browser spawned by services.exe), detecting the creation of a second, non-interactive explorer.exe process, and observing unusual network activity (like C2 beaconing) from processes that should not be making external connections.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there process creation events for executables known to use hidden window techniques?
    context: This question aims to identify process creation events where the executable's hash matches a known malicious hash from threat intelligence feeds. Adversaries often reuse malware, and matching file hashes is a high-fidelity method for detecting known threats that employ stealth techniques like T1564.003.
    answer_sources:
      - Windows Event ID 4688
      - All managed Windows endpoints, including user workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH process_creation_events (e.g., WinEventID:4688)
          WHERE file_hash IN (list_of_known_malicious_hashes_for_T1564_003)
          RETURN hostname, process_name, file_hash, command_line
  - question: Are there rare or low-prevalence executables running in the environment?
    context: This question seeks to identify file hashes that are uncommon across the enterprise. Malware executables are often unique to a specific campaign or environment and will therefore have a very low prevalence compared to legitimate software. Identifying and investigating these rare files can uncover novel or targeted threats, especially if they are also unsigned.
    answer_sources:
      - Windows Event ID 4688
      - All managed Windows endpoints, including user workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers.
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |-
          CALCULATE prevalence of all file_hashes from process_creation_events over 30 days
          FILTER hashes with prevalence < 1% of endpoints
          ALERT on rare hashes, enriching with code signing status
          RETURN hostname, process_name, file_hash, prevalence_count
  - question: Have any newly executed files been classified as malicious by a machine learning model?
    context: This question leverages a file-based classification model to proactively identify potentially malicious executables, even if their hashes are not yet in threat intelligence feeds. By analyzing intrinsic file characteristics like entropy, PE headers, and imported functions, the model can flag suspicious files that may be using stealth techniques.
    answer_sources:
      - Windows Event ID 4688
      - All managed Windows endpoints, including user workstations, Virtual Desktop Infrastructure (VDI) instances, and application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each new executable file observed:
            SCORE file using classification_model (features: entropy, PE_header, strings, etc.)
            IF score > 0.9 THEN
              TRIGGER alert
              RETURN hostname, file_path, file_hash, model_score
  - question: Are scripting engines being invoked with command-line arguments that hide their window?
    context: This question looks for explicit commands used to make a script's execution invisible to the user. Adversaries frequently use built-in tools like PowerShell or CScript with arguments such as `-WindowStyle Hidden` or `//B` to run malicious code without raising user suspicion. Detecting these specific argument patterns is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows endpoints and servers with enabled scripting engines (e.g., PowerShell, WScript, CScript), particularly administrative workstations and jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH process_creation_events (e.g., WinEventID:4688, PowerShell:4104)
          WHERE command_line MATCHES REGEX '(\\s-w(in|indowstyle)\\s+h(id|idden)|//B|\\s-ExecutionPolicy\\s+Bypass\\s-NoP(rofile)?\\s-w\\s+h)'
          RETURN hostname, process_name, command_line
  - question: Are there any script executions with unusually long or complex command lines?
    context: This question aims to identify anomalous script command lines by baselining their length and entropy. Adversaries often embed obfuscated or encoded payloads directly into the command line, resulting in commands that are significantly longer or have higher entropy (more randomness) than benign administrative scripts.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows endpoints and servers with enabled scripting engines (e.g., PowerShell, WScript, CScript), particularly administrative workstations and jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each scripting process (powershell.exe, cmd.exe, etc.):
            CALCULATE baseline of command_line_length and command_line_entropy
            SEARCH for new executions where length or entropy > 99th_percentile_of_baseline
            ALERT on outliers
            RETURN hostname, process_name, command_line, length, entropy
  - question: Have any script command lines been classified as malicious by a machine learning model?
    context: This question uses a supervised machine learning model trained to distinguish between benign and malicious command lines. By analyzing features like character ratios, n-grams, and special characters, this approach can detect obfuscated or suspicious commands that might not be caught by simple pattern matching.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows endpoints and servers with enabled scripting engines (e.g., PowerShell, WScript, CScript), particularly administrative workstations and jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each new script command_line:
            SCORE command_line using classification_model
            IF predicted_class == 'malicious' with high_confidence THEN
              TRIGGER alert
              RETURN hostname, process_name, command_line, model_score
  - question: Are there any interactive applications being spawned by non-interactive system processes?
    context: This question is designed to detect process lineage anomalies. Interactive applications like web browsers or document viewers should normally be launched by `explorer.exe`. If they are parented by a system process like `services.exe` or `svchost.exe`, it is highly suspicious and may indicate a hidden process injection or a scheduled task running malware in the background.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations, application servers, and network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          DEFINE child_list = ['chrome.exe', 'msedge.exe', 'powershell.exe']
          DEFINE parent_list = ['services.exe', 'svchost.exe', 'taskhostw.exe']
          SEARCH process_creation_events
          WHERE child_process IN child_list AND parent_process IN parent_list
          ALERT on match
          RETURN hostname, child_process, parent_process
  - question: Have any rare or never-before-seen parent-child process relationships been observed?
    context: This question seeks to identify anomalous process execution chains by looking for parent-child process pairs that are statistically rare in the environment. Adversaries often create unusual process trees that deviate from normal system behavior. Correlating a rare process launch with subsequent network connections can provide strong evidence of a malicious payload execution.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations, application servers, and network egress points instrumented with Zeek sensors.
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |-
          AGGREGATE parent-child pairs from process_creation_events over 30 days
          CALCULATE frequency of each pair
          ALERT on new pairs or pairs with frequency < 5
          ENRICH by correlating child_pid with network_connection_logs within 60s
          RETURN hostname, parent_process, child_process, network_destination
  - question: Does graph-based analysis reveal any anomalous process execution chains?
    context: This question uses a more advanced approach to model all process activity as a graph. By learning the normal structure of process trees, anomaly detection algorithms can identify entire execution chains that are structurally unusual, rather than just single parent-child pairs. This can uncover more complex or novel attack techniques.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations, application servers, and network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          MODEL process lineage as a graph
          APPLY graph anomaly detection algorithm against baseline
          PRIORITIZE anomalous subgraphs where a node process initiates network traffic
          ALERT on prioritized anomalies
          RETURN anomalous_process_chain, suspicious_network_connections
  - question: Has a second `explorer.exe` process been created in a user session without a new interactive logon?
    context: This question targets a specific technique where an adversary creates a new, hidden desktop by launching a second `explorer.exe` process. A user session should normally only have one `explorer.exe`. The appearance of a second one, not associated with a legitimate RDP or console logon, is a strong indicator of this defense evasion technique.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - User Workstations, Remote Desktop Session Hosts, Virtual Desktop Infrastructure (VDI) servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          TRACK count of 'explorer.exe' per session_id
          ALERT when count for a session_id becomes 2
          AND no recent (within 1 min) interactive logon event (Type 2 or 10) for that session_id
          RETURN hostname, user, session_id, new_explorer_pid
  - question: Is there an anomalous number of `explorer.exe` processes running on any single host?
    context: This question provides a simpler, statistical alternative to tracking `explorer.exe` per session. By monitoring the total count of `explorer.exe` processes on a host, a significant deviation from the normal baseline can indicate an anomaly. This is less precise but can be effective for identifying outliers on systems that are not multi-user terminal servers.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - User Workstations, Remote Desktop Session Hosts, Virtual Desktop Infrastructure (VDI) servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each host:
            CALCULATE moving_average and std_dev of 'explorer.exe' count
            ALERT if current_count > (moving_average + 3 * std_dev)
            EXCLUDE known multi-session hosts
            RETURN hostname, current_explorer_count, average_count
  - question: Are there any outlier `explorer.exe` processes based on their creation properties?
    context: This question uses clustering to find `explorer.exe` processes that do not fit the typical profile. A legitimate `explorer.exe` has expected properties, such as being parented by `userinit.exe` and having a standard command line. A process that is an outlier in this feature space is likely a malicious implant masquerading as `explorer.exe` or part of a hidden desktop.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - User Workstations, Remote Desktop Session Hosts, Virtual Desktop Infrastructure (VDI) servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          CLUSTER active 'explorer.exe' processes using features (parent_process, session_id, command_line)
          FLAG any process identified as a noise point by the algorithm (e.g., DBSCAN)
          ALERT on flagged processes
          RETURN hostname, process_pid, parent_process, command_line
  - question: Is the `explorer.exe` process making network connections to known malicious C2 servers?
    context: This question checks for a clear sign of compromise: the desktop shell process, `explorer.exe`, communicating with a known command-and-control server. Legitimate `explorer.exe` instances very rarely make direct external network connections. Matching its network traffic against a C2 threat intelligence feed is a high-fidelity detection method.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - All Windows endpoints with Sysmon installed, and network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH network_connection_events (e.g., SysmonID:3)
          WHERE process_name == 'explorer.exe'
          AND destination_ip IN (list_of_c2_ips)
          ALERT on match
          RETURN hostname, destination_ip, destination_port
  - question: Is the `explorer.exe` process exhibiting periodic network beaconing behavior?
    context: This question aims to detect C2 communications by looking for a characteristic pattern: periodic, "heartbeat" connections to a single destination. By analyzing the time intervals between connections from `explorer.exe`, a very low variation (standard deviation) in these times strongly suggests automated, non-human beaconing activity.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - All Windows endpoints with Sysmon installed, and network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          GROUP network connections by hostname and process_name ('explorer.exe')
          FOR each group:
            CALCULATE std_dev of time_delta between consecutive connections
            IF std_dev < 5 seconds for > 10 connections THEN
              ALERT for likely beaconing
              RETURN hostname, destination_ip, avg_time_delta, std_dev_time_delta
  - question: Is `explorer.exe` making network connections that are anomalous compared to its baseline?
    context: This question uses an unsupervised machine learning model to detect any unusual network activity from `explorer.exe`. Since `explorer.exe` should have little to no network traffic, a model like an Isolation Forest can be trained on this "normal" state (i.e., no connections). Any new connection is therefore likely to be flagged as an anomaly, providing a powerful way to detect unexpected behavior.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - All Windows endpoints with Sysmon installed, and network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          TRAIN One-Class SVM or Isolation Forest model on benign 'explorer.exe' network features
          SCORE new 'explorer.exe' network connections in real-time
          ALERT on any connection classified as an anomaly
          RETURN hostname, destination_ip, destination_port, bytes_sent, duration, anomaly_score