name: T1652: Device Driver Discovery
id: a3b8d4e6-1c7f-4b9e-8d6a-9c0f1b2c3d4e
description: This playbook is designed to help analysts investigate whether an adversary is attempting to discover system information, specifically device drivers, as part of post-compromise reconnaissance. It covers several indicators of this activity, including the execution of known malicious discovery tools, the use of built-in system utilities for driver enumeration (like `driverquery.exe` or `lsmod`), high-volume read operations on the Windows Registry key for services (`HKLM\SYSTEM\CurrentControlSet\Services`), and the temporal correlation of driver discovery commands with preceding events like remote logons or privilege escalation.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process being created that is a known malicious tool for device driver discovery?
    context: This question aims to identify the most direct evidence of malicious activity by checking if a newly created process is a known malicious binary. Adversaries often use pre-built tools for reconnaissance. Matching the process's hash against a threat intelligence feed that specifically tags tools for 'discovery' or 'driver enumeration' provides a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - All Windows Endpoints and Servers, particularly Tier 0/1 assets like Domain Controllers and critical application servers; Network sensors capturing file transfers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process creation logs (EventID 4688) | LOOKUP process hash against threat intelligence feed | ALERT where feed flags hash as malicious for 'discovery'.
  - question: Is a known malicious discovery tool also rare within the environment?
    context: This question adds a layer of statistical analysis to reduce false positives and prioritize alerts. A malicious tool that is also rare (has a low prevalence) across the network is more likely to be part of a targeted attack rather than a widespread, less sophisticated campaign. Identifying low-prevalence malicious hashes helps focus investigative efforts on the most critical threats.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - All Windows Endpoints and Servers, particularly Tier 0/1 assets like Domain Controllers and critical application servers; Network sensors capturing file transfers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: GET all process hashes from process creation logs | CALCULATE frequency for each hash | JOIN with threat intelligence feed | ALERT where hash is malicious AND frequency is below a defined threshold (e.g., < 0.1% of endpoints).
  - question: Does a process creation event exhibit characteristics of malicious discovery activity according to a machine learning model?
    context: This question leverages machine learning to detect more nuanced or previously unseen threats that might not be caught by simple hash lookups. By training a model on various features like process name randomness, parent-process relationships, and command-line characteristics, it can identify suspicious patterns indicative of malicious discovery behavior, even for zero-day tools.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - All Windows Endpoints and Servers, particularly Tier 0/1 assets like Domain Controllers and critical application servers; Network sensors capturing file transfers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process creation event | EXTRACT features (process name entropy, parent process, command-line entropy, etc.) | SCORE with 'malicious discovery' classification model | ALERT if score exceeds confidence threshold (e.g., > 0.9).
  - question: Is a system utility for driver enumeration being executed from an unusual parent process or by a non-administrative user?
    context: This question focuses on detecting the misuse of legitimate 'living-off-the-land' binaries (LOLBins) and scripts for reconnaissance. While administrators may use tools like `driverquery` or `lsmod`, their execution by a standard user or being spawned by an unconventional parent process (like a Microsoft Office application) is highly suspicious and often indicates a compromised session.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Command-line and script execution logs on all Windows, Linux, and macOS endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process creation (4688) and script block (4104) logs for keywords ('driverquery', 'lsmod', etc.) | ALERT if parent process is not a standard shell (e.g., 'winword.exe') OR if executing user is not an administrator.
  - question: Is a user executing driver discovery commands with an abnormally high frequency or with unusual parameters?
    context: This question applies statistical baselining to identify anomalous behavior. A sudden spike in a user's execution of discovery commands, exceeding their normal activity profile, can indicate automated reconnaissance scripting. Analyzing the entropy of command-line arguments helps detect obfuscation techniques used by adversaries to evade simple keyword-based detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Command-line and script execution logs on all Windows, Linux, and macOS endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each user, BASELINE execution frequency of discovery commands | MONITOR for executions per hour exceeding the 95th percentile of the user's baseline | ALERT on threshold breach.
  - question: Is there a network-wide anomaly in the volume or characteristics of driver discovery commands?
    context: This question uses machine learning to look for broader, enterprise-wide patterns of malicious activity. A time-series model can detect a sudden, coordinated increase in driver discovery commands across multiple systems, which might indicate a widespread campaign. Clustering command-line features can also help group and identify novel or unusual command variations that deviate from benign administrative use.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Command-line and script execution logs on all Windows, Linux, and macOS endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: AGGREGATE count of driver discovery commands enterprise-wide per hour | APPLY time-series anomaly detection (e.g., ARIMA) | ALERT on statistically significant anomalies.
  - question: Is an unauthorized process accessing the Windows Registry key for system services?
    context: This question aims to detect adversaries enumerating installed drivers and services by directly querying the registry. The `HKLM\SYSTEM\CurrentControlSet\Services` key contains a wealth of information. By enabling auditing and maintaining an allowlist of legitimate system and administrative processes, any access from an unexpected process becomes a high-fidelity indicator of reconnaissance.
    answer_sources:
      - Windows Event ID 4663
      - Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH registry access logs (EventID 4663) for read access to 'HKLM\SYSTEM\CurrentControlSet\Services' | ALERT if ProcessName is NOT in the established allowlist of legitimate processes.
  - question: Is a process accessing the registry key for services at an anomalous rate?
    context: This question uses statistical analysis to find outliers in registry access behavior. An adversary's enumeration script will likely access many subkeys under the `Services` hive in a short period. This rapid enumeration will appear as a statistical anomaly when compared to the normal, more sporadic access patterns of legitimate processes, allowing for detection based on rate rather than just the process name.
    answer_sources:
      - Windows Event ID 4663
      - Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process, BASELINE the access rate to '...\Services' registry hive | CALCULATE Z-score for current access rate against baseline | ALERT if Z-score > 3.
  - question: Does a registry access event show a combination of features that a machine learning model deems anomalous?
    context: This question employs an unsupervised machine learning model to identify rare combinations of attributes that signify malicious registry enumeration. An Isolation Forest is effective at finding 'needles in a haystack' by isolating observations that have unusual feature values. This can catch sophisticated attackers who might use a legitimate-looking process name but exhibit other subtle anomalies in their access patterns.
    answer_sources:
      - Windows Event ID 4663
      - Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SCORE registry access events using an unsupervised anomaly detection model (e.g., Isolation Forest) with features like process name, parent process, and access rate | ALERT on events identified as outliers.
  - question: Has a driver discovery command been executed shortly after a remote logon or privilege escalation event?
    context: This question focuses on correlating driver discovery with preceding high-risk events to establish a likely attack chain. An adversary often performs reconnaissance immediately after gaining initial access (remote logon) or escalating privileges. Linking these events in a short time window provides strong contextual evidence that the discovery activity is malicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4672
      - Zeek conn.log
      - Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway logs providing GeoIP and ASN context.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: CORRELATE logs on Logon ID | TRIGGER when a driver discovery command (EventID 4688) occurs within 15 minutes AFTER a remote logon (EventID 4624, Type 3/10) or special privilege assignment (EventID 4672).
  - question: Does the execution of a driver discovery command contribute to a user's risk score exceeding a critical threshold?
    context: This question uses a risk-scoring model to quantify the threat level of an observed activity. Rather than relying on a single indicator, this approach aggregates risk from multiple suspicious-but-not-conclusive events (e.g., logon from a rare location, execution after hours). When a driver discovery command is part of a sequence of risky behaviors that pushes a user's score over a set threshold, it warrants immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4672
      - Zeek conn.log
      - Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway logs providing GeoIP and ASN context.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MAINTAIN a risk score per user | ADD points for precursor events (e.g., +10 for rare GeoIP, +15 for unusual parent) in a 30-min window | ALERT if a driver discovery event causes the total score to exceed a threshold (e.g., 20).
  - question: Is the sequence of events leading up to and including a driver discovery command characteristic of a known malicious attack pattern?
    context: This question uses sophisticated sequence analysis to distinguish between benign administrative workflows and malicious attack chains. By training a model (like an HMM or RNN) on labeled data, the system learns the probabilistic transitions between events for both good and bad behavior. It can then alert when a new sequence of events (e.g., remote logon -> privesc -> driver query) closely matches a learned malicious pattern.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4672
      - Zeek conn.log
      - Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway logs providing GeoIP and ASN context.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FEED sequence of events (e.g., Remote Logon, Privilege Assignment, Driver Discovery) into a trained sequence analysis model (HMM/RNN) | ALERT if the model classifies the sequence as malicious with high probability.