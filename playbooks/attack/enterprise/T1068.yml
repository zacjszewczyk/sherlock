name: T1068: Exploitation for Privilege Escalation
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps determine if an adversary has exploited a software vulnerability to achieve privilege escalation. Investigations should focus on identifying indicators such as the creation of files matching known exploits, processes launched with suspicious command-line arguments, anomalous parent-child process relationships (especially from high-privilege parents), processes being created with elevated integrity levels, and logical sequences of post-escalation activity like user creation and group modification occurring in a short time frame.
type: technique
related:
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are newly created driver, executable, or library files associated with known vulnerable drivers or exploit payloads?
    context: |
      This question aims to detect the introduction of malicious files onto a system, which is a common step in privilege escalation exploits. The rationale is to proactively monitor for the creation of .sys, .exe, or .dll files and compare their hashes against a threat intelligence feed of known vulnerable drivers (e.g., Bring Your Own Vulnerable Driver) and known exploit payloads. A match provides a high-confidence indicator that an adversary is attempting to leverage a known vulnerability.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 15
      - Data should be collected from critical servers (e.g., Domain Controllers, database servers), user workstations, and temporary file directories (e.g., C:\Windows\Temp, %TEMP%).
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each FileCreate event (Sysmon 11, 15)
          WHERE file extension is .sys, .exe, or .dll
          COMPUTE file hash (SHA256, MD5)
          CHECK hash against threat intelligence feed of known vulnerable/malicious files
          IF match THEN ALERT
  - question: Have any driver, executable, or library files been created with unusually rare names or in uncommon locations?
    context: |
      Adversaries often use non-standard file names or place their tools in atypical directories to evade signature-based detections. This question addresses this by establishing a baseline of normal file creation behavior across the enterprise. By identifying file names and creation paths that are statistically rare (i.e., fall into a low percentile), analysts can uncover potentially malicious files that might otherwise be overlooked.
    answer_sources:
      - Sysmon Event ID 11
      - Data should be collected from critical servers (e.g., Domain Controllers, database servers), user workstations, and temporary file directories (e.g., C:\Windows\Temp, %TEMP%).
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each FileCreate event (Sysmon 11) for .sys, .exe, .dll files
          CALCULATE the historical frequency of the file name and path combination
          IF frequency is below a low percentile threshold (e.g., 1st percentile) THEN ALERT
  - question: Can newly created PE files (drivers, DLLs, executables) be classified as malicious based on their intrinsic characteristics?
    context: |
      This question addresses the challenge of detecting novel or zero-day exploits for which no hash signature exists. By applying a machine learning model to analyze the structural properties of a portable executable (PE) file—such as file entropy, imported functions, and digital certificate status—it's possible to classify a file as 'potentially malicious' even if it has never been seen before. This provides a powerful capability to detect emerging threats.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 15
      - Data should be collected from critical servers (e.g., Domain Controllers, database servers), user workstations, and temporary file directories (e.g., C:\Windows\Temp, %TEMP%).
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new PE file created
          EXTRACT features (e.g., entropy, imports/exports, section characteristics, certificate validity)
          INPUT features into a trained classification model (e.g., Random Forest)
          IF model classifies as 'malicious' with high confidence THEN ALERT
  - question: Have any processes been executed with command-line arguments matching known privilege escalation tools or techniques?
    context: |
      This question focuses on detecting the use of well-known exploit tools and techniques by their command-line signatures. Many public tools (e.g., 'juicypotato', 'printnightmare') and post-exploitation commands leave distinct traces in command-line logs. By searching for these specific strings and patterns with regular expressions, analysts can quickly identify ongoing or past exploitation activity. Correlating these findings with network logs (e.g., Zeek RPC logs) can further increase detection confidence.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Zeek dce_rpc.log
      - Data should be collected from all endpoints and servers, Domain Controllers, and network traffic to/from print servers and domain controllers.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process command-line arguments (Sysmon 1, Win 4688) for regex patterns of known tools ('juicypotato', 'godpotato')
          CORRELATE host alerts with network logs (Zeek) for related RPC calls ('RpcAddPrinterDriverEx')
          IF match THEN ALERT
  - question: Have any processes been launched with unusually complex or high-entropy command-line arguments?
    context: |
      Adversaries frequently use obfuscation to hide their commands from simple keyword-based searches. This obfuscation often results in command-line arguments that have a higher degree of randomness, or entropy, than normal commands. This question aims to detect this behavior by establishing a baseline for the normal entropy of a given process's command line and alerting when a new instance significantly deviates from that baseline.
    answer_sources:
      - Sysmon Event ID 1
      - Data should be collected from all endpoints and servers, Domain Controllers, and network traffic to/from print servers and domain controllers.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each ProcessCreate event (Sysmon 1)
          CALCULATE Shannon entropy of the command-line arguments
          COMPARE entropy to the established baseline for that process name
          IF entropy > (baseline_mean + 3 * baseline_std_dev) THEN ALERT
  - question: Have any users or system processes executed an unusual or improbable sequence of commands?
    context: |
      After gaining privileges, an adversary's actions often form a sequence of commands that is different from normal user or system behavior. This question aims to detect these anomalous sequences. By training a model (like an HMM or LSTM) on historical command chains, it can learn what constitutes 'normal' behavior and flag new sequences that have a low probability of occurring, indicating a potential intrusion.
    answer_sources:
      - Sysmon Event ID 1
      - Data should be collected from all endpoints and servers, Domain Controllers, and network traffic to/from print servers and domain controllers.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each sequence of commands linked by ProcessGuid
          INPUT the sequence into a trained sequence analysis model (e.g., LSTM)
          IF the model flags the sequence as having a low probability THEN ALERT
  - question: Has a critical system process (e.g., lsass.exe, services.exe) spawned an unapproved or unexpected child process?
    context: |
      High-privilege system processes like 'lsass.exe' and 'services.exe' have highly predictable behavior and a very limited set of legitimate child processes. If one of these critical processes spawns an unexpected child, such as 'cmd.exe' or 'powershell.exe', it is a very strong indicator of compromise, often resulting from process injection or a similar exploit technique. This question uses a strict allow-list to detect such high-fidelity events.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Data should be collected from Domain Controllers, critical application servers, and administrative workstations.
    range: last 90 days
    queries:
      - pseudocode: |
          DEFINE allow-list of child processes for each critical parent (lsass.exe, services.exe, etc.)
          FOR each ProcessCreate event
          IF ParentProcess is in the critical list AND ChildProcess is NOT on its allow-list THEN ALERT
  - question: Has a statistically rare parent-child process relationship been observed?
    context: |
      This question provides a more dynamic and comprehensive approach than a static allow-list. By analyzing historical process creation data, a frequency table of all parent-child relationships in the environment can be built. A relationship that is observed very infrequently (e.g., falls below the 0.1st percentile) is flagged as suspicious. This can help detect novel or unusual techniques that would be missed by a predefined list.
    answer_sources:
      - Sysmon Event ID 1
      - Data should be collected from Domain Controllers, critical application servers, and administrative workstations.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each observed parent-child process relationship
          CALCULATE its historical frequency across the environment
          IF the frequency is below a low percentile threshold THEN ALERT
  - question: Does a new parent-child process relationship deviate from the learned model of normal behavior?
    context: |
      This question leverages an anomaly detection model to learn a complex boundary of normal parent-child process behavior, considering not just the process names but also other features like user context and command-line properties. This allows for the detection of subtle anomalies that might not be rare in terms of frequency but are unusual in their specific context, providing a more robust detection capability.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Data should be collected from Domain Controllers, critical application servers, and administrative workstations.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each ProcessCreate event
          EXTRACT features (parent name, child name, user, command line)
          INPUT features into a trained anomaly detection model (e.g., one-class SVM)
          IF the model flags the event as an anomaly THEN ALERT
  - question: Has a process been created with a higher integrity level than its parent?
    context: |
      In the Windows security model, a child process should not normally have a higher integrity level than the process that created it. An event where a child process's integrity level (e.g., 'High') is greater than its parent's (e.g., 'Medium') is a direct and high-fidelity indicator of a User Account Control (UAC) bypass technique being used for privilege escalation.
    answer_sources:
      - Sysmon Event ID 1
      - Data should be collected from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each ProcessCreate event (Sysmon 1)
          IF ChildProcess.IntegrityLevel > ParentProcess.IntegrityLevel THEN ALERT
  - question: Has a process accessed another process in a statistically rare manner or requested unusually high privileges?
    context: |
      This question seeks to identify malicious process interactions, such as those used for credential dumping (e.g., any process accessing 'lsass.exe'). The analysis involves baselining normal process access behavior by tracking which processes typically access others ('SourceImage' -> 'TargetImage') and what level of access ('GrantedAccess') they request. Deviations from this baseline, such as a rare interaction or a request for excessive privileges (e.g., PROCESS_ALL_ACCESS), are flagged as suspicious.
    answer_sources:
      - Sysmon Event ID 10
      - Data should be collected from all Windows endpoints and servers, particularly those with EDR agents capable of capturing process access events.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each ProcessAccess event (Sysmon 10)
          CHECK if the SourceImage->TargetImage pair is statistically rare
          CHECK if the GrantedAccess code is anomalous for that pair
          IF either is true THEN ALERT
  - question: Can a process access event be classified as malicious based on its attributes?
    context: |
      This question uses a supervised machine learning model to proactively classify process access events as benign or malicious. By training a model on labeled data of known-malicious access patterns (e.g., from threat reports) and known-benign interactions, the system can score new events in real-time. This provides a more nuanced detection capability than simple baselining, as it can weigh multiple features (source, target, user, access rights) simultaneously.
    answer_sources:
      - Sysmon Event ID 10
      - Data should be collected from all Windows endpoints and servers, particularly those with EDR agents capable of capturing process access events.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each ProcessAccess event (Sysmon 10)
          EXTRACT features (SourceImage, TargetImage, User, GrantedAccess)
          INPUT features into a trained classification model
          IF model output is 'malicious' with high probability THEN ALERT
  - question: Has a sequence of events indicative of post-privilege escalation occurred under a single user or process context in a short time frame?
    context: |
      An adversary who successfully escalates privileges is likely to take immediate follow-on actions. This question aims to detect the entire attack chain by correlating discrete events that, in isolation, might be benign, but in sequence, are highly suspicious. A classic example is a process creation followed by a new user being created and then immediately added to a privileged group, all within a few minutes and under the same user logon session.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Windows Event ID 4720
      - Windows Event ID 4728
      - Windows Event ID 4732
      - Data should be collected from Domain Controllers, Member Servers, and Administrator Workstations.
    range: last 90 days
    queries:
      - pseudocode: |
          CREATE stateful rule correlating events by LogonId or ProcessGuid within a 5-minute window
          IF sequence (ProcessCreate -> UserCreate -> AddToPrivilegedGroup) is detected THEN ALERT
  - question: Has a user or process accumulated a high risk score by performing a series of suspicious actions in a short period?
    context: |
      This question provides a more flexible way to detect attack chains than a rigid sequence rule. It works by assigning a risk score to various suspicious activities (e.g., creating a user, adding to a privileged group, writing to System32). These scores are aggregated for each entity (user or process) over a sliding time window. If an entity's cumulative score crosses a dynamically determined threshold, it is flagged, allowing for the detection of varied and less predictable attack patterns.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Windows Event ID 4720
      - Windows Event ID 4728
      - Windows Event ID 4732
      - Data should be collected from Domain Controllers, Member Servers, and Administrator Workstations.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each user/process, maintain a time-decaying risk score
          INCREMENT score for suspicious events (+10 for UserCreate, +25 for AddToAdmin, etc.)
          IF entity's total score exceeds a defined threshold within a 10-minute window THEN ALERT
  - question: Have sequences of system events on a host deviated significantly from the normal, learned temporal patterns?
    context: |
      This question uses an unsupervised time-series model to learn the normal "rhythm" and pattern of events on a host. An LSTM autoencoder is trained on sequences of event logs from a normal operational baseline. During detection, live event streams are fed into the model. If a sequence produces a high reconstruction error, it means the model finds the sequence unfamiliar and anomalous, which could represent an adversary's activity deviating from normal system behavior.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Windows Event ID 4720
      - Windows Event ID 4728
      - Windows Event ID 4732
      - Data should be collected from Domain Controllers, Member Servers, and Administrator Workstations.
    range: last 90 days
    queries:
      - pseudocode: |
          GROUP events by host and create time-ordered sequences
          FEED event sequences into a trained LSTM autoencoder model
          IF the model's reconstruction error for a sequence is above a threshold THEN ALERT