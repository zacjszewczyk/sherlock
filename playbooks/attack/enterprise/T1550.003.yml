name: T1550.003: Pass the Ticket
id: f8e9a2d1-4b5c-4e8f-8c7b-9a1d2e3f4a5b
description: This playbook helps identify adversaries forging or misusing Kerberos tickets to evade standard authentication controls and move laterally within a network. It focuses on detecting anomalies in Kerberos ticket attributes, such as the use of weak/deprecated encryption (RC4), unusually long ticket lifetimes characteristic of Golden Tickets, and requests from atypical source locations. The playbook also addresses behavioral indicators, including high-volume service ticket requests (Kerberoasting), SPN enumeration, and suspicious follow-on activity after a successful Kerberos logon, to uncover the entire lifecycle of a Pass the Ticket attack.
type: technique
related:
- TA0005: Defense Evasion
- TA0008: Lateral Movement
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any high-privilege or service accounts requested Kerberos tickets using the deprecated RC4 encryption type (0x17)?
  context: Adversary tools like Mimikatz often create Kerberos tickets using the older, weaker RC4-HMAC encryption type for broader compatibility. Modern, properly configured Windows environments should use stronger AES encryption. A high-privilege account (like a Domain Admin) or a sensitive service account requesting a ticket with RC4 is a significant anomaly and a strong indicator of a potential Pass the Ticket or Golden Ticket attack.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  - Network sensors monitoring traffic to/from Domain Controllers on port 88
  range: last 90 days
  queries:
  - technology: SIEM
    query: |
      search (event_id:4768 OR event_id:4769) AND ticket_encryption_type:"0x17" AND user_account IN (high_privilege_group OR service_account_group)
- question: Has any user requested a ticket with an encryption type that deviates from their historical baseline?
  context: Most users and systems will consistently use the strongest Kerberos encryption type they support (typically AES256). By establishing a baseline of which encryption types each user normally uses, it's possible to detect deviations. A user who has exclusively used AES for months suddenly requesting an RC4 ticket is a behavioral anomaly that could indicate their credentials have been compromised and are being used with adversary tooling.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  - Network sensors monitoring traffic to/from Domain Controllers on port 88
  range: last 90 days
  queries:
  - technology: UBA
    query: |
      for_each user, calculate historical_distribution(ticket_encryption_type) over 30 days.
      alert if new_ticket_request.encryption_type has zero or near-zero frequency in user.historical_distribution.
- question: Are there Kerberos ticket requests that a machine learning model classifies as malicious?
  context: A binary classification model can be trained to distinguish between legitimate Kerberos requests and those generated by attack tools. By using features like the account name, service name, source IP, time of day, and especially the encryption type, the model can learn the subtle patterns of malicious requests. This approach can help detect novel or evasive attacks that might not trigger simple rule-based alerts.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  - Network sensors monitoring traffic to/from Domain Controllers on port 88
  range: last 90 days
  queries:
  - technology: ML Model
    query: |
      score new_kerberos_request with pre-trained_classifier.
      alert if prediction is "malicious" and confidence > 0.9.
- question: Have any Kerberos tickets been observed with a lifetime exceeding the domain's maximum ticket lifetime policy?
  context: Golden Tickets are forged Kerberos Ticket-Granting Tickets (TGTs) that give adversaries persistent, god-like access to a domain. A key feature of these tickets is that adversaries can set an arbitrarily long lifetime, often up to 10 years, to maintain access. Legitimate tickets are constrained by the domain's group policy (typically 10 hours). Detecting a ticket with a lifetime that exceeds this policy is a high-fidelity indicator of a Golden Ticket.
  answer_sources:
  - Zeek kerberos.log
  - Windows Event ID 4769
  - Network sensors monitoring east-west traffic and DC traffic on port 88
  - Active Directory Domain Controllers (for policy reference)
  range: last 90 days
  queries:
  - technology: SIEM / Network Security Monitoring
    query: |
      fetch domain_max_ticket_lifetime_policy.
      search source:zeek_kerberos_log where (ticket_end_time - ticket_start_time) > domain_max_ticket_lifetime_policy.
- question: Are there any Kerberos tickets with lifetimes that are statistical outliers compared to historical data?
  context: While checking against a hard-coded domain policy is effective, attackers may forge tickets with lifetimes that are long but still plausible. By calculating a dynamic threshold based on the 99.9th percentile of all observed ticket lifetimes, this query can identify tickets that are extreme statistical outliers. This helps catch forged tickets that might not be set to the default "10 years" but are still abnormally long compared to all other legitimate tickets in the environment.
  answer_sources:
  - Zeek kerberos.log
  - Windows Event ID 4769
  - Network sensors monitoring east-west traffic and DC traffic on port 88
  - Active Directory Domain Controllers (for policy reference)
  range: last 90 days
  queries:
  - technology: SIEM / Data Analytics
    query: |
      calculate 99.9th_percentile(ticket_duration) from zeek_kerberos_log over last 30 days.
      alert on new_ticket where ticket_duration > 99.9th_percentile.
- question: Have any Kerberos tickets been flagged by an anomaly detection model as having an unusually long duration?
  context: This question employs an unsupervised machine learning model, like an Isolation Forest, to detect anomalous ticket lifetimes without relying on pre-defined policies or statistical thresholds. The model considers multiple features (duration, client IP, service name) to identify tickets that are abnormal in their overall context. A ticket with an extreme duration will be a primary contributor to a high anomaly score, providing a robust detection method for forged tickets.
  answer_sources:
  - Zeek kerberos.log
  - Windows Event ID 4769
  - Network sensors monitoring east-west traffic and DC traffic on port 88
  - Active Directory Domain Controllers (for policy reference)
  range: last 90 days
  queries:
  - technology: ML Model
    query: |
      score new_kerberos_ticket with pre-trained_isolation_forest_model.
      alert if anomaly_score is high and contributing_feature is "duration".
- question: Have any critical service or administrator accounts requested tickets from IP addresses not on their pre-defined allowlist?
  context: Privileged accounts often operate from predictable locations, such as specific administrative workstations or servers. By creating an explicit allowlist of authorized source IPs for these accounts, any ticket request from an unlisted source becomes a high-severity alert. This is a powerful way to detect credential theft, as an adversary is unlikely to be operating from an authorized administrative system.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  - VPN Concentrators
  - Workstation and Server subnets
  - DNS servers (for IP-hostname correlation)
  range: last 90 days
  queries:
  - technology: SIEM
    query: |
      search (event_id:4768 OR event_id:4769) where user_account IN critical_accounts_list AND source_ip NOT IN user_account.ip_allowlist.
- question: Has any user requested a Kerberos ticket from a source IP address for the first time?
  context: While not all users have predictable sources like administrators, their access patterns still form a baseline over time. A user requesting a Kerberos ticket from a source IP address they have never used before (a "first-time seen" source) can indicate lateral movement or a compromised account being used from an unusual location. This behavioral analytic helps surface anomalous activity without requiring pre-defined allowlists for every user.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  - VPN Concentrators
  - Workstation and Server subnets
  - DNS servers (for IP-hostname correlation)
  range: last 90 days
  queries:
  - technology: UBA / Stateful SIEM
    query: |
      for_each new_ticket_request, check if source_ip exists in user.historical_source_ips over last 90 days.
      alert if source_ip is not found in historical baseline.
- question: Have there been any Kerberos ticket requests that represent an anomalous connection between a user and a source IP community in a graph model?
  context: This approach models the entire network's authentication behavior as a graph of users and source IPs. Community detection algorithms can identify logical clusters, such as 'developers accessing dev servers' or 'finance users on finance workstations'. An alert is triggered when a new ticket request creates a connection that bridges two disparate communities (e.g., a finance user requesting a ticket from an IP within the developer cluster), indicating highly anomalous behavior that violates established access patterns.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  - VPN Concentrators
  - Workstation and Server subnets
  - DNS servers (for IP-hostname correlation)
  range: last 90 days
  queries:
  - technology: Graph Analytics
    query: |
      model user_to_source_ip relationships as a graph.
      run community_detection algorithm.
      alert on new_ticket_request if user.community != source_ip.community.
- question: Has any single client IP address requested an unusually high number of unique service tickets in a short time frame?
  context: This behavior is a classic indicator of Kerberoasting. An adversary who has compromised a user's TGT can use it to request service tickets (TGS) for numerous services across the domain. The encrypted part of these tickets can be cracked offline to reveal the service account's password. A burst of requests for many unique services from a single source is not normal user behavior and strongly suggests this type of reconnaissance.
  answer_sources:
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: SIEM
    query: |
      search event_id:4769 | bucket time by 5m | count distinct(service_name) by source_ip | where distinct_count > 20
- question: Has the rate of unique service ticket requests from any source IP exceeded its statistical baseline by a significant margin?
  context: Rather than using a fixed threshold, this query establishes a dynamic baseline for each source IP's normal activity. It calculates the mean and standard deviation of unique service requests per 5-minute window for each host. An alert is triggered only when a host's activity significantly deviates from its own normal behavior (e.g., exceeds 3 standard deviations). This reduces false positives from legitimately "chatty" servers and is more effective at catching outliers.
  answer_sources:
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: UBA / Data Analytics
    query: |
      for_each source_ip, calculate historical_mean_and_stddev(distinct_service_count_per_5m).
      alert if current_5m_window_count > (historical_mean + 3 * historical_stddev).
- question: Have any Kerberos request sessions been identified by a clustering model as indicative of reconnaissance activity?
  context: This advanced method uses clustering algorithms like DBSCAN to automatically identify groups of suspicious sessions without pre-defined rules. By creating sessions based on source IP and time, and using features like the number and entropy of requested service names, the model can discover a cluster of activity that corresponds to Kerberoasting. New sessions that fall into this malicious cluster can then be flagged.
  answer_sources:
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: ML Model
    query: |
      sessionize ticket_requests by source_ip and time.
      extract_features(session).
      alert if new_session is assigned to the "reconnaissance" cluster by DBSCAN model.
- question: Have there been bursts of Kerberos service ticket requests failing with status '0x7' (Principal Unknown) from a single client?
  context: Before attempting to Kerberoast, an adversary may not know the exact Service Principal Names (SPNs) available in the domain. They might use a list of common SPNs to query the Key Distribution Center (KDC). Many of these requests will fail with error '0x7' because the SPN doesn't exist. A high volume of these specific failures from one source is a strong indicator of an adversary performing active SPN enumeration.
  answer_sources:
  - Windows Event ID 4769
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: SIEM
    query: |
      search event_id:4769 AND status_code:"0x7" | bucket time by 10m | count by source_ip | where count > 5
- question: Has any host's rate of '0x7' Kerberos errors significantly spiked above its normal baseline?
  context: Some legitimate misconfigurations can cause occasional '0x7' errors. To reduce false positives, this query establishes a normal baseline rate of these errors for each source host. A sudden, sharp increase in the error rate for a specific host, rising more than three standard deviations above its norm, is a much stronger signal of targeted enumeration activity rather than random misconfiguration noise.
  answer_sources:
  - Windows Event ID 4769
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: UBA / Data Analytics
    query: |
      for_each source_ip, calculate historical_mean_and_stddev(count_of_0x7_errors_per_hour).
      alert if current_hour_count > (historical_mean + 3 * historical_stddev).
- question: Are there any failed Kerberos requests for SPNs that appear to be algorithmically generated or malformed?
  context: This question focuses on the content of the failed SPN requests. Adversaries may use tools that generate random or nonsensical strings when probing for SPNs. A machine learning classifier can be trained to distinguish between legitimate SPN formats (e.g., 'HOST/server.domain.com') and garbage strings. Requests for SPNs that are classified as likely generated provide strong evidence of malicious reconnaissance tools in use.
  answer_sources:
  - Windows Event ID 4769
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: ML Model
    query: |
      on event_id:4769 and status_code:"0x7", score requested_spn_string with pre-trained_classifier.
      alert if prediction is "generated" or "malformed".
- question: Have any successful privileged Kerberos network logons occurred using a ticket with weak RC4 encryption?
  context: This query connects the dots between a suspicious ticket request and its actual use. While detecting an RC4 ticket request is a good indicator, confirming that this weak ticket was then used to successfully log on as a privileged user (Logon Type 3) provides concrete evidence of a successful Pass the Ticket attack. This correlation between network data (Zeek) and endpoint logs (Windows Events) is crucial for confirming impact.
  answer_sources:
  - Windows Event ID 4624
  - Zeek kerberos.log
  - All Windows workstations and servers
  - Network sensors monitoring authentication traffic
  range: last 90 days
  queries:
  - technology: SIEM / XDR
    query: |
      join (search event_id:4624 AND logon_type:3 AND user_account IN privileged_group) with (search source:zeek_kerberos_log AND encryption_type:"RC4") on source_ip and time.
      alert on successful join.
- question: Have any successful Kerberos logons occurred that are statistically rare for that specific user-server combination?
  context: This behavioral analytic builds a profile of which users normally access which servers. A successful logon by a user who rarely or has never accessed a particular server before is anomalous. For example, if a user from the marketing department suddenly logs into a domain controller, this is a significant deviation from normal behavior and could indicate lateral movement using a stolen ticket.
  answer_sources:
  - Windows Event ID 4624
  - Zeek kerberos.log
  - All Windows workstations and servers
  - Network sensors monitoring authentication traffic
  range: last 90 days
  queries:
  - technology: UBA
    query: |
      for_each server, maintain profile of authenticating_user_frequency.
      on new_logon(user, server), alert if user.frequency is in bottom 5th percentile for that server.
- question: Has a successful Kerberos logon occurred that was flagged as a highly improbable event by a link prediction model?
  context: This advanced approach models user-to-host logons as a graph and uses a machine learning model to predict future connections (links). The model learns the complex, large-scale access patterns of the organization. When a new logon occurs, it is scored by the model. A successful logon that the model predicted was extremely unlikely is a powerful anomaly signal, suggesting that the access violates deeply ingrained patterns and is likely malicious.
  answer_sources:
  - Windows Event ID 4624
  - Zeek kerberos.log
  - All Windows workstations and servers
  - Network sensors monitoring authentication traffic
  range: last 90 days
  queries:
  - technology: Graph Analytics / ML Model
    query: |
      on new_logon(user, host), score the (user, host) edge with link_prediction_model.
      alert if logon is successful and predicted_probability was very low (<0.01).
- question: Has a non-administrative user account performed a Kerberos network logon from one workstation to another?
  context: In most corporate environments, standard users log on to their own workstations and then access servers. Direct workstation-to-workstation communication, especially initiated by non-administrative accounts, is highly unusual and a common pattern for lateral movement. An adversary who has compromised one workstation will use techniques like Pass the Ticket to pivot to other workstations in the same subnet.
  answer_sources:
  - Windows Event ID 4624
  - All Windows Workstation subnets
  range: last 90 days
  queries:
  - technology: SIEM
    query: |
      search event_id:4624 AND logon_type:3 AND auth_package:"Kerberos" AND user_account NOT IN privileged_group AND source_device_type:"workstation" AND dest_device_type:"workstation"
- question: Has any user logged into a workstation via Kerberos for the very first time?
  context: This query creates a stateful baseline of every user-to-workstation logon pair observed over the last 90 days. The first time a user ever logs into a different user's workstation is a high-fidelity alert for lateral movement. This "first time access" analytic is extremely effective at detecting adversaries as they begin to pivot from their initial point of compromise.
  answer_sources:
  - Windows Event ID 4624
  - All Windows Workstation subnets
  range: last 90 days
  queries:
  - technology: UBA / Stateful SIEM
    query: |
      maintain stateful_table of (user, destination_workstation) pairs seen in last 90 days.
      on new_logon(user, dest_ws), alert if (user, dest_ws) pair is not in stateful_table.
- question: Has any user's logon activity shown a sudden shift from their typical access pattern cluster?
  context: This question uses clustering to group users based on their typical logon behavior (e.g., which servers or workstations they access). A user's activity should consistently place them within a specific cluster. If a new logon event causes a user to jump from their established cluster (e.g., from 'Marketing' to 'IT Admin Servers'), it signals a drastic and suspicious change in their access patterns, likely due to account compromise.
  answer_sources:
  - Windows Event ID 4624
  - All Windows Workstation subnets
  range: last 90 days
  queries:
  - technology: ML Model
    query: |
      cluster users based on their logon_destination_vectors.
      on new_logon, re-calculate user's cluster_assignment.
      alert if user's new_cluster != user's previous_cluster.
- question: Following a remote Kerberos logon, was a process associated with a known malicious tool or reconnaissance command executed under the same logon session?
  context: The ultimate goal of a Pass the Ticket attack is to execute commands on a remote system. This query directly links the authentication event (Event ID 4624) with subsequent process execution (Event ID 4688) using the 'Logon ID'. If a process matching a watchlist of malicious tools (mimikatz.exe, procdump.exe) or recon commands ('net group "Domain Admins"') is created within that new session, it provides a complete picture of a successful attack.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows workstations and servers
  range: last 90 days
  queries:
  - technology: SIEM / XDR
    query: |
      on event_id:4624 with logon_type:3, trigger search for event_id:4688 with same logon_id within 5 minutes, where process_name or command_line matches malicious_watchlist.
- question: Have any remote logon sessions spawned child processes with unusually high command-line entropy, suggesting obfuscation?
  context: Adversaries frequently use PowerShell or other scripting languages with heavy obfuscation to hide their post-exploitation commands. Obfuscated commands often have high Shannon entropy due to the randomized characters. By calculating the entropy of command lines for processes spawned shortly after a remote logon, it's possible to detect this obfuscation and flag sessions that are likely malicious, even if the specific tool is not on a watchlist.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows workstations and servers
  range: last 90 days
  queries:
  - technology: SIEM / EDR
    query: |
      for_each new_remote_logon_session, calculate shannon_entropy of child_process_command_lines within 5 mins.
      alert if entropy > 95th_percentile of historical_entropy for that user/host.
- question: Has a sequence of post-logon activities been flagged by an autoencoder as being highly anomalous compared to learned legitimate behavior?
  context: This advanced technique uses a deep learning model (an autoencoder) to learn the normal sequences of events (process creations, network connections) that follow a legitimate remote logon. The model is trained to reconstruct these normal sequences with low error. When an adversary's post-logon activity is fed into the model, the sequence will be unfamiliar, resulting in a high reconstruction error. This flags the entire session as abnormal and likely malicious.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows workstations and servers
  range: last 90 days
  queries:
  - technology: ML Model
    query: |
      on new_remote_logon_session, collect sequence of post-logon events.
      feed sequence into pre-trained_autoencoder_model.
      alert if reconstruction_error is high.