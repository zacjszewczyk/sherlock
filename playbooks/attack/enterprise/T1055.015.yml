name: T1055.015: ListPlanting
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook is designed to detect the ListPlanting technique (T1055.015), a method of process injection used for privilege escalation and defense evasion. It provides investigative questions to identify this activity by searching for evidence such as the execution of known ListPlanting tools, anomalous cross-process interactions (specifically involving LVM_SORTITEMS messages between different integrity levels), non-GUI processes making GUI-related API calls, and suspicious child processes or network activity originating from high-integrity GUI processes like explorer.exe. The playbook covers symbolic, statistical, and machine learning-based detection strategies across various data sources to uncover this stealthy technique.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a process been created from an executable matching a known ListPlanting tool hash, or have ListPlanting memory signatures been detected?
  context: This question aims to directly identify the use of known ListPlanting tools. Adversaries often reuse tools whose file hashes are cataloged in threat intelligence. A match is a high-confidence indicator. Similarly, even if the on-disk file is unknown, the code patterns used by ListPlanting can be detected in a process's memory using signature-based scans, revealing the malicious behavior post-execution.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Antivirus/EDR Detection Logs
  - EDR Memory Scan Logs
  - User workstations
  - Administrative workstations
  - Terminal servers
  - Enterprise SIEM
  range: Last 90 days
  queries:
  - technology: SIEM/EDR
    query: |
      SEARCH process_creation_logs
      JOIN threat_intelligence_hashes ON file_hash
      WHERE feed_name CONTAINS "ListPlanting"
      RETURN hostname, process_name, file_hash
  - technology: EDR
    query: |
      SEARCH memory_scan_logs
      WHERE yara_rule_match CONTAINS "ListPlanting_Signature"
      RETURN hostname, process_name, matched_rule
- question: Has an unusually rare executable been run, especially by a common parent process like explorer.exe?
  context: Malware is often unique to a specific campaign or host, making it statistically rare compared to legitimate, widely distributed software. Identifying the execution of a file seen on only one or two hosts, especially when launched by a commonly injected process like explorer.exe, can uncover novel ListPlanting droppers.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Antivirus/EDR Detection Logs
  - EDR Memory Scan Logs
  - User workstations
  - Administrative workstations
  - Terminal servers
  - Enterprise SIEM
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE prevalence of file_hash in process_creation_logs over last 30 days
      SEARCH process_creation_logs
      WHERE prevalence < 0.0001 AND parent_process_name = "explorer.exe"
      RETURN hostname, process_name, file_hash, prevalence
- question: Has a machine learning model flagged a process originating from a common GUI application as a likely process injection attempt?
  context: Machine learning models can learn the subtle, complex patterns of malicious behavior (like unusual parent-child relationships, command-line arguments, or PE header information) that are difficult to capture with simple rules. A high malicious probability score from a model for a process spawned by a typical GUI application is a strong signal for investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Antivirus/EDR Detection Logs
  - EDR Memory Scan Logs
  - User workstations
  - Administrative workstations
  - Terminal servers
  - Enterprise SIEM
  range: Last 90 days
  queries:
  - technology: Machine Learning Model Endpoint
    query: |
      SEARCH process_events
      WHERE parent_process_name IN ["explorer.exe", "winlogon.exe"]
      AND ml_model_score("process_injection_classifier", features) > 0.9
      RETURN hostname, process_name, model_score
- question: Has a process with a lower integrity level accessed, allocated memory in, and sent LVM_SORTITEMS messages to a higher integrity process?
  context: This is the core behavior of the ListPlanting technique. A lower-privilege process should not normally be interacting with a higher-privilege process in this specific sequence. Detecting this chain of events—process access, followed by remote memory allocation, and then a specific window message—within a short time frame is a high-fidelity indicator of a privilege escalation attempt.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 8
  - API Monitoring Logs
  - User workstations
  - Domain Controllers (if admin tools are used)
  - Management servers with GUI tools
  range: Last 90 days
  queries:
  - technology: SIEM/EDR
    query: |
      SEQUENCE by source_process_id, target_process_id with maxspan=5s
      [SEARCH process_access (Sysmon EID 10) WHERE source_integrity < target_integrity]
      [SEARCH remote_memory_alloc (Sysmon EID 8 or VirtualAllocEx API)]
      [SEARCH api_calls WHERE message = "LVM_SORTITEMS"]
- question: Has any process shown an anomalous rate of accessing higher-integrity processes?
  context: While some legitimate cross-integrity access occurs, it is typically predictable. A sudden, sharp increase in the rate at which a process accesses higher-integrity processes, compared to its own historical baseline, can indicate that it has been compromised and is being used to stage a ListPlanting or other injection attack.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 8
  - API Monitoring Logs
  - User workstations
  - Domain Controllers (if admin tools are used)
  - Management servers with GUI tools
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE baseline rate of cross-integrity process access (Sysmon EID 10) per process_name
      SEARCH process_access_events
      WHERE current_rate > 99th_percentile(baseline_rate)
      RETURN hostname, process_name, current_rate, baseline_rate
- question: Has a time-series anomaly detection model flagged a spike in LVM_SORTITEMS or LVM_SETITEMPOSITION messages between processes?
  context: These specific Windows messages are central to the ListPlanting technique. Legitimate use is rare and typically stable. A time-series model can learn the normal, low-level background noise of these messages and flag any sudden, sharp spike as a significant anomaly, which is a strong statistical indicator of a potential shatter attack like ListPlanting.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 8
  - API Monitoring Logs
  - User workstations
  - Domain Controllers (if admin tools are used)
  - Management servers with GUI tools
  range: Last 90 days
  queries:
  - technology: Machine Learning Anomaly Detection
    query: |
      MONITOR time_series of LVM_SORTITEMS and LVM_SETITEMPOSITION API calls
      ALERT on anomalies detected by Seasonal-Hybrid ESD model
      RETURN timestamp, process_pair, message_count, anomaly_score
- question: Has a console application or process without a GUI flag generated a high volume of GUI-related API calls?
  context: Processes are compiled with a subsystem flag indicating if they are GUI or console-based applications. A console application has no legitimate reason to send a high volume of windowing messages like `SendMessage` or `PostMessage`. This behavior strongly suggests that the console process is compromised and is attempting to inject code into a GUI process.
  answer_sources:
  - API Monitoring Logs
  - EDR Telemetry
  - User workstations
  - Application servers
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: EDR/API Monitor
    query: |
      SEARCH api_calls
      WHERE process_subsystem != "IMAGE_SUBSYSTEM_WINDOWS_GUI"
      AND api_call IN ["SendMessage", "PostMessage"]
      AND api_argument CONTAINS "LVM_*"
      STATS count by hostname, process_name within 1m
      WHERE count > 50
- question: Is any process exhibiting an anomalously high rate of SendMessage/PostMessage API calls compared to its peers?
  context: By profiling the normal rate of GUI message calls for each process type across the enterprise, we can establish a behavioral baseline. An instance of a process that dramatically exceeds this baseline (e.g., is more than 3 standard deviations above the mean) is a statistical outlier. This is especially suspicious for console applications whose mean call count should be near zero.
  answer_sources:
  - API Monitoring Logs
  - EDR Telemetry
  - User workstations
  - Application servers
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE mean and stddev of SendMessage/PostMessage calls per minute for each process_name
      SEARCH api_call_logs
      WHERE call_count > (mean + 3 * stddev)
      RETURN hostname, process_name, call_count
- question: Has a clustering algorithm identified a process as an outlier due to a high frequency of LVM_* messages combined with non-GUI characteristics?
  context: Unsupervised machine learning can discover suspicious processes without prior labeling. By clustering processes based on features like API call frequency and PE header data, algorithms like DBSCAN can isolate outliers. A process that clusters as an anomaly because it makes many LVM_* calls but lacks typical GUI features is a prime candidate for a ListPlanting investigation.
  answer_sources:
  - API Monitoring Logs
  - EDR Telemetry
  - User workstations
  - Application servers
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: Machine Learning Clustering
    query: |
      CLUSTER processes using DBSCAN on features (api_frequency, pe_flags)
      RETURN processes labeled as "outlier"
      WHERE outlier_reason CONTAINS "high LVM call frequency"
- question: Has a high-integrity GUI process like explorer.exe spawned a command-line interpreter?
  context: After a successful ListPlanting injection, the adversary's code runs within the context of the high-integrity target process (e.g., explorer.exe). A common next step is to spawn a shell (cmd.exe, powershell.exe) to execute commands with elevated privileges. The direct parent-child relationship of explorer.exe -> cmd.exe is highly suspicious and a strong indicator of post-exploitation activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - User workstations
  - Network egress points
  - DNS servers
  - Core network switches
  range: Last 90 days
  queries:
  - technology: SIEM/EDR
    query: |
      SEARCH process_creation_events
      WHERE parent_process_path = "C:\\Windows\\explorer.exe"
      AND parent_integrity_level = "High"
      AND process_name IN ["cmd.exe", "powershell.exe", "cscript.exe", "wscript.exe"]
      RETURN hostname, command_line
- question: Has a common GUI process spawned an unusually rare child process or made a network connection to a rare destination?
  context: Legitimate processes like explorer.exe have a predictable set of child processes and network destinations. When injected code runs within explorer.exe, it may spawn unusual tools or connect to malicious C2 servers. Statistically, these child processes and network destinations will be extremely rare compared to the established baseline, allowing for the detection of anomalous behavior.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - User workstations
  - Network egress points
  - DNS servers
  - Core network switches
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE frequency of child_process_name for parent_process_name = "explorer.exe"
      SEARCH process_creation_events
      WHERE parent_process_name = "explorer.exe" AND child_process_frequency < 0.001
      RETURN hostname, parent_process_name, child_process_name
- question: Has peer group analysis flagged an explorer.exe instance for anomalous behavior compared to other explorer.exe instances?
  context: Peer group analysis compares the behavior of a single process instance to all other instances of the same process across the enterprise. An explorer.exe instance that has been compromised via ListPlanting will behave differently from its peers—it might spawn different child processes, connect to unique IPs, or access unusual files. This deviation from the group norm is a strong anomaly signal.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - User workstations
  - Network egress points
  - DNS servers
  - Core network switches
  range: Last 90 days
  queries:
  - technology: Machine Learning/UEBA
    query: |
      ANALYZE process_behavior for process_name = "explorer.exe" using peer_group_analysis
      ALERT on instances with high deviation_score
      RETURN hostname, deviation_score, anomalous_features
- question: Has a trusted GUI process made a network connection to a known malicious destination or with a malicious fingerprint?
  context: A key goal of ListPlanting is to use a trusted process for network communication to bypass firewalls and other network defenses. This question checks if a trusted process like explorer.exe is communicating with an IP/domain on a threat intelligence list or if the TLS/SSH fingerprint (JA3/HASSH) of the connection matches a known malicious client.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek ssh.log
  - Sysmon Event ID 3
  - Network egress points
  - Proxy servers
  - DNS resolvers
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: SIEM
    query: |
      SEARCH network_connections (Sysmon EID 3)
      WHERE process_name = "explorer.exe"
      JOIN threat_intel on destination_ip OR ja3_hash
      RETURN hostname, destination_ip, ja3_hash
- question: Is explorer.exe connecting to a domain with high entropy, suggesting DGA activity?
  context: Domain Generation Algorithms (DGAs) are often used by malware to create a large number of potential C2 domains, making them hard to block. These algorithmically generated domains appear random and have high character entropy. A trusted process like explorer.exe should never connect to such domains, making high-entropy connections a strong indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek ssh.log
  - Sysmon Event ID 3
  - Network egress points
  - Proxy servers
  - DNS resolvers
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      SEARCH dns_logs OR ssl_logs
      WHERE process_name = "explorer.exe"
      AND shannon_entropy(query_domain) > 4.5
      RETURN hostname, query_domain, entropy_score
- question: Has a time-series model detected anomalous outbound traffic volume or connection duration from explorer.exe?
  context: Data exfiltration or persistent C2 communication initiated by code injected into explorer.exe can alter its normal network traffic patterns. A time-series forecasting model can learn the expected pattern of connection volume and duration for explorer.exe on a host and flag significant, unexpected increases as anomalies that could represent malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek ssh.log
  - Sysmon Event ID 3
  - Network egress points
  - Proxy servers
  - DNS resolvers
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: Machine Learning Anomaly Detection
    query: |
      FORECAST outbound_bytes and connection_duration for process_name = "explorer.exe" using ARIMA model
      ALERT on observations that are significant positive deviations from forecast
      RETURN hostname, timestamp, actual_bytes, forecasted_bytes
- question: Has a trusted GUI process loaded a DLL from a non-standard, user-writable directory?
  context: After injecting code via ListPlanting, an adversary might cause the compromised process to load a malicious DLL to extend functionality. Legitimate system processes like explorer.exe should only load DLLs from protected system directories. Loading a DLL from a user-writable location like Downloads or Temp is highly anomalous and suggests malicious code execution.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - EDR Memory Scan Logs
  - User workstations
  - Critical servers with GUI management tools
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: SIEM/EDR
    query: |
      SEARCH image_load_events (Sysmon EID 7)
      WHERE process_name IN ["explorer.exe", "mmc.exe"]
      AND loaded_image_path CONTAINS ["C:\\Users\\", "C:\\Temp\\", "C:\\ProgramData\\"]
      RETURN hostname, process_name, loaded_image_path
- question: Has explorer.exe loaded a DLL that is statistically rare across the enterprise?
  context: The set of DLLs loaded by a standard process like explorer.exe is very consistent across an organization. A DLL that has a very low prevalence (i.e., is loaded on only a few hosts) is likely not a standard system component. This statistical rarity is a strong indicator that the DLL may be part of a malicious toolset.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - EDR Memory Scan Logs
  - User workstations
  - Critical servers with GUI management tools
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE prevalence of loaded_image_hash for process_name = "explorer.exe"
      SEARCH image_load_events
      WHERE process_name = "explorer.exe" AND prevalence < 0.001
      RETURN hostname, loaded_image_path, prevalence
- question: Has a sequence analysis model detected a low-probability sequence of events for explorer.exe, such as remote memory allocation followed by an unusual image load?
  context: The lifecycle of a legitimate process follows predictable event sequences. A machine learning model can be trained on these benign sequences. An attack like ListPlanting will introduce a new, anomalous sequence (e.g., remote memory allocation -> DLL load from temp -> new network connection) that will have a very low probability under the model, allowing for its detection.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - EDR Memory Scan Logs
  - User workstations
  - Critical servers with GUI management tools
  - Endpoint Detection and Response (EDR) platform
  range: Last 90 days
  queries:
  - technology: Machine Learning Sequence Analysis
    query: |
      ANALYZE event sequences for process_name = "explorer.exe" with trained HMM/LSTM model
      ALERT on sequences with probability < 0.01
      RETURN hostname, anomalous_sequence, probability_score
- question: Has the explorer.exe process spawned a known archiving utility?
  context: Before exfiltrating data, adversaries often compress and archive it. Code injected into explorer.exe might spawn an archiving tool (like 7-Zip, WinRAR, or even the built-in compact.exe) to stage data. Since explorer.exe does not normally perform this action, this parent-child relationship is a strong indicator of data staging for exfiltration.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - File servers
  - User workstations
  - Document management systems
  - Endpoint logs
  range: Last 90 days
  queries:
  - technology: SIEM/EDR
    query: |
      SEARCH process_creation_events (Sysmon EID 1)
      WHERE parent_process_name = "explorer.exe"
      AND process_name IN ["7z.exe", "rar.exe", "tar.exe", "zip.exe", "compact.exe"]
      RETURN hostname, process_name, command_line
- question: Has the explorer.exe process created an anomalously high number of files in a short time?
  context: The act of staging data for exfiltration often involves creating many new files (the archive files). By establishing a historical baseline for file creation activity by explorer.exe on a per-host basis, we can detect a sudden, anomalous spike that exceeds a dynamic threshold (e.g., the 99.5th percentile), indicating potential data staging.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - File servers
  - User workstations
  - Document management systems
  - Endpoint logs
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE hourly baseline of file creations (Sysmon EID 11) from process_name = "explorer.exe" per host
      SEARCH file_creation_events
      WHERE process_name = "explorer.exe"
      AND current_count > 99.5th_percentile(baseline)
      RETURN hostname, file_count
- question: Has peer group analysis identified an explorer.exe instance with anomalous file I/O patterns?
  context: A compromised explorer.exe instance being used to stage data will exhibit different file I/O behavior (e.g., higher write ratio, accessing different directories, creating new file extensions) compared to its legitimate peers. A peer group analysis model can quantify this deviation and flag the instance as an outlier warranting investigation.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - File servers
  - User workstations
  - Document management systems
  - Endpoint logs
  range: Last 90 days
  queries:
  - technology: Machine Learning/UEBA
    query: |
      ANALYZE file_io_patterns for process_name = "explorer.exe" using peer_group_analysis
      ALERT on instances with high deviation_score from peer group centroid
      RETURN hostname, deviation_score, anomalous_features
- question: Has network traffic from explorer.exe shown a very high ratio of outbound to inbound data?
  context: Data exfiltration is characterized by sending large amounts of data out with very little data coming back in. A network connection from explorer.exe with an extremely high ratio of outbound to inbound bytes (e.g., 100:1), especially for large transfers, is a strong sign that the process has been compromised and is being used to steal data.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Network egress points
  - DNS servers
  - Core switches providing flow data
  range: Last 90 days
  queries:
  - technology: SIEM/Network Monitor
    query: |
      SEARCH network_logs
      WHERE source_process_name = "explorer.exe"
      AND (outbound_bytes / inbound_bytes) > 100
      AND outbound_bytes > 10MB
      RETURN hostname, source_ip, destination_ip, outbound_bytes, inbound_bytes
- question: Has network traffic from explorer.exe exhibited highly periodic, fixed-interval connections indicative of C2 beaconing?
  context: Command-and-control (C2) implants often "beacon" back to the adversary's server at regular, fixed intervals to check for new commands. This results in connections with a near-zero standard deviation in the time between them. Legitimate user-driven traffic from explorer.exe is random, so detecting this highly periodic behavior is a strong signal of automated malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Network egress points
  - DNS servers
  - Core switches providing flow data
  range: Last 90 days
  queries:
  - technology: Data Analytics Platform
    query: |
      CALCULATE stddev of time_delta between connections for each source_ip, dest_ip pair where source_process = "explorer.exe"
      SEARCH network_logs
      WHERE connection_count > 10 AND time_delta_stddev < 1s
      RETURN source_ip, dest_ip, time_delta_stddev
- question: Has a one-class SVM model classified a network connection from explorer.exe as an outlier?
  context: A One-Class Support Vector Machine (SVM) can be trained exclusively on data from benign network connections made by explorer.exe. It learns a boundary that encompasses normal behavior. Any new connection that falls outside this boundary is classified as an outlier or anomaly. This is an effective way to detect novel malicious network activity without needing prior examples of it.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Network egress points
  - DNS servers
  - Core switches providing flow data
  range: Last 90 days
  queries:
  - technology: Machine Learning Anomaly Detection
    query: |
      SCORE new network connections from "explorer.exe" using a trained One-Class SVM model
      ALERT on connections classified as "outlier"
      RETURN hostname, destination_ip, destination_port, outlier_score