name: T1053.007: Container Orchestration Job
id: f4b5c6d7-e8f9-4a1b-2c3d-4e5f6a7b8c9d
description: This playbook provides investigative steps to determine if an adversary is leveraging container orchestration jobs for malicious purposes. It covers detecting initial execution by matching job artifacts (images, commands, network connections) against threat intelligence, identifying anomalous communication patterns, and classifying processes using machine learning. It also addresses persistence techniques, such as identifying high-frequency or unattributed scheduled jobs (CronJobs) and beaconing activity. Finally, it helps uncover privilege escalation attempts, including the use of high-privilege security contexts, container escape techniques, unauthorized access to host services, and the creation of new privileged accounts or roles following a job execution.
type: technique
related:
- TA0002: Execution
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are outbound network connections or process hashes from a container job matching known-bad indicators from threat intelligence feeds?
  context: This question aims to detect known malicious activity with high confidence. By correlating network logs (Zeek) and process execution logs (Windows Event ID 4688) from container workloads against a curated threat intelligence feed, analysts can quickly identify if a container job is running a known malicious binary or communicating with a known command-and-control (C2) server. A match is a strong signal of compromise.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Kubernetes API Server
  - Container Registries
  - Kubernetes Worker Nodes
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Network IOC check
      SEARCH zeek_conn_logs AND zeek_dns_logs
      WHERE source_ip IN container_ip_ranges
      AND (destination_ip IN threat_intel_ips OR destination_domain IN threat_intel_domains)
      CORRELATE with container job creation time.

      // Process Hash IOC check
      SEARCH windows_event_logs (EventID 4688)
      WHERE parent_process_name IN container_runtime_processes
      AND process_hash IN threat_intel_hashes
- question: Is a new container job exhibiting anomalous network communication patterns compared to its historical baseline?
  context: This question helps identify suspicious network behavior that may not match a known IOC. By calculating the Jaccard similarity index between the set of domains contacted by a new job and the historical baseline for that application, analysts can detect significant deviations. A low similarity score suggests the container is contacting new, unexpected domains, which could indicate C2 communication or data exfiltration.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Kubernetes API Server
  - Container Registries
  - Kubernetes Worker Nodes
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new container_job
        current_domains = GET destination_domains from zeek_dns_logs for job_pod_ip
        baseline_domains = GET historical_domains for job_application_profile
        jaccard_index = CALCULATE_JACCARD(current_domains, baseline_domains)
        IF jaccard_index < historical_threshold
          ALERT anomaly
- question: Can a machine learning model classify a new process spawned by a container job as malicious based on its characteristics?
  context: This question leverages a machine learning approach to detect potentially malicious processes that may evade signature-based or simple statistical methods. A Random Forest classifier is trained on features like command-line length, entropy, and parent process information to distinguish between benign and malicious activity. This allows for the detection of novel or obfuscated malicious commands executed within a container job.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Kubernetes API Server
  - Container Registries
  - Kubernetes Worker Nodes
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new process from container_job (EventID 4688)
        features = EXTRACT (cmd_length, cmd_entropy, parent_process, etc.)
        prediction = ML_MODEL_PREDICT(features)
        IF prediction > probability_threshold
          ALERT malicious_process
- question: Are processes executed by container jobs matching regular expression patterns for known malicious tools or techniques?
  context: This question focuses on identifying malicious intent by searching for specific patterns in command-line arguments. Regular expressions can effectively detect the use of common reconnaissance tools (e.g., ipconfig, net user), C2 stagers (e.g., powershell -enc), and cryptominer process names (e.g., xmrig). This method provides a flexible way to hunt for known adversary tradecraft within container workloads.
  answer_sources:
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH windows_event_logs (EventID 4688)
      WHERE parent_process_name IN container_runtime_processes
      AND command_line MATCHES REGEX (recon_tools_regex OR c2_stagers_regex OR cryptominer_regex)
- question: Are command lines executed by container jobs showing unusually high entropy, suggesting obfuscation?
  context: This question helps detect obfuscated or packed commands that adversaries use to hide their actions. By calculating the Shannon entropy of a command line and comparing it to a baseline for that application's profile, analysts can identify commands that are statistically abnormal. A command with entropy exceeding the 99th percentile is a strong indicator of obfuscation and warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new process from container_job (EventID 4688)
        entropy = CALCULATE_SHANNON_ENTROPY(process.command_line)
        baseline_entropy_99p = GET_BASELINE_ENTROPY(process.application_profile)
        IF entropy > baseline_entropy_99p
          ALERT high_entropy_command
- question: Can an NLP model classify the intent of a command executed by a container job as malicious?
  context: This question applies advanced machine learning to understand the semantic meaning of commands, rather than just their statistical properties. By fine-tuning a model like BERT on labeled shell commands, the system can classify the intent of a new command (e.g., 'C2-Communication', 'Reconnaissance'). This can detect novel malicious commands that share semantic similarities with known techniques.
  answer_sources:
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new process from container_job (EventID 4688)
        intent_classification = NLP_MODEL_CLASSIFY(process.command_line)
        IF intent_classification IN ('C2-Communication', 'Reconnaissance', 'Payload-Execution') WITH high_confidence
          ALERT malicious_command_intent
- question: Did a new container job's pod connect to a suspicious network destination within five minutes of creation?
  context: This question helps to identify immediate, post-execution malicious activity. By correlating the creation of a container job with a subsequent network connection to a known suspicious destination (e.g., a TOR exit node or an IP on a blocklist) within a short time frame, analysts can detect initial C2 check-ins or payload downloads with high confidence.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Node Performance Metrics
  - Kubernetes Worker Nodes
  - Network Egress Points
  - Monitoring and Metrics Platform
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH k8s_audit_logs for new container_job
      GET job_creation_time and pod_ip
      SEARCH zeek_conn_logs
      WHERE source_ip = pod_ip
      AND destination_ip IN (suspicious_asn_list OR tor_exit_node_list)
      AND connection_time < job_creation_time + 5_minutes
- question: Did a worker node's resource usage or a pod's network behavior deviate significantly from its baseline after a new container job started?
  context: This question aims to detect anomalies in system and network behavior that coincide with a new container job. A sudden spike in CPU/memory usage on a node (exceeding 3 standard deviations from the mean) or connections from the new pod to geographically rare destinations can indicate unexpected and potentially malicious activity, such as cryptomining or data staging.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Node Performance Metrics
  - Kubernetes Worker Nodes
  - Network Egress Points
  - Monitoring and Metrics Platform
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Resource usage check
      MONITOR node_cpu_memory_usage
      ALERT if usage > (mean + 3 * std_dev) immediately after new job start

      // Network destination check
      SEARCH zeek_conn_logs for new pod_ip
      ALERT if destination_country OR destination_asn not in 30-day baseline for application_profile
- question: Did a time-series anomaly detection model flag a spike in a pod's outbound data transfer that coincides with a new container job?
  context: This question uses a machine learning approach to detect unusual data exfiltration patterns. Time-series models like ARIMA or LSTM can learn the normal rhythm of a pod's network traffic. An anomalous spike in outbound data volume flagged by the model, especially one that occurs shortly after a new job starts, is a strong indicator of unauthorized data transfer.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Node Performance Metrics
  - Kubernetes Worker Nodes
  - Network Egress Points
  - Monitoring and Metrics Platform
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each pod_ip
        data_series = GET outbound_bytes_per_minute from zeek_conn_logs
        anomaly_scores = ARIMA_OR_LSTM_MODEL(data_series)
        IF high anomaly_score coincides with new container_job execution window
          ALERT anomalous_data_transfer
- question: Did a process from a container job attempt to access sensitive host files without authorization?
  context: This question is designed to detect attempts at container breakout or credential theft. By creating a rule that monitors for processes spawned by containers (identified via parent process in Event ID 4688) that try to access critical files like 'kubelet.conf' or cloud credentials (logged in Event ID 4663), analysts can catch privilege escalation attempts where the process is not on a pre-defined allowlist.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows Event ID 4663
  - Kubernetes Worker Nodes
  - Internal Network Segments
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH windows_event_logs (EventID 4663) for file_access
      WHERE accessed_file IN sensitive_file_list
      AND source_process_id IN (
        SELECT process_id from windows_event_logs (EventID 4688)
        WHERE parent_process_name IN container_runtime_processes
      )
      AND source_process_name NOT IN file_access_allowlist
- question: Did a new container job's pod establish an anomalously high number of new internal network connections?
  context: This question helps detect lateral movement or internal reconnaissance. By first building a baseline communication graph of normal pod-to-pod and pod-to-service traffic, analysts can then monitor new jobs. If a pod from a new job creates a number of new, previously unseen internal connections (new edges on the graph) that exceeds the 95th percentile of the baseline, it indicates anomalous behavior warranting investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows Event ID 4663
  - Kubernetes Worker Nodes
  - Internal Network Segments
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      baseline_graph = BUILD_GRAPH from historical zeek_conn_logs (internal traffic)
      FOR each new container_job_pod
        new_connections = GET internal_connections from zeek_conn_logs
        new_edges = COUNT connections not in baseline_graph for application_profile
        IF new_edges > 95th_percentile_of_baseline
          ALERT anomalous_internal_connections
- question: Does a clustering algorithm classify a container job's pod as a behavioral outlier based on its internal network traffic?
  context: This question uses unsupervised machine learning to find pods that "don't fit in." By applying a clustering algorithm like DBSCAN to features of internal network flows (port, protocol, data volume), pods can be grouped into normal behavioral profiles. A pod from a new job that is classified as noise/an outlier or forms its own tiny cluster is behaving unlike any other pod and is highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows Event ID 4663
  - Kubernetes Worker Nodes
  - Internal Network Segments
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      flow_features = EXTRACT (dest_port, protocol, data_volume) from zeek_conn_logs for internal traffic
      clusters = DBSCAN_MODEL(flow_features)
      FOR each new container_job_pod
        IF pod is classified as OUTLIER or in a new, small cluster
          ALERT anomalous_network_behavior_profile
- question: Is a periodically executing container job making recurring connections using a JA3/JA4 hash associated with malware?
  context: This question helps detect malicious beaconing for persistence, even when the destination IP changes. By searching for recurring connections from container IP ranges where the TLS fingerprint (JA3/JA4 hash) matches a known malicious one, analysts can identify a C2 channel. Correlating this with process logs helps pinpoint the specific job responsible for the persistent threat.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Windows Event ID 4688
  - Network Egress Points
  - Kubernetes Worker Nodes
  - Internal DNS Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH zeek_ssl_logs
      WHERE source_ip IN container_ip_ranges
      AND (ja3_hash IN malicious_ja3_list OR ja4_hash IN malicious_ja4_list)
      AND connections are recurring
      CORRELATE source_ip to pod and responsible job via process logs.
- question: Is a container job's pod exhibiting network beaconing behavior characterized by a very low variance in connection intervals?
  context: This question identifies automated, non-human C2 communication by analyzing its timing. Malicious beacons often connect at precise intervals (e.g., every 60 seconds). By calculating the standard deviation of the time between connections from a single pod to a single destination, a very low value (e.g., under 5 seconds) strongly suggests scripted behavior and is a reliable indicator of a C2 channel.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Windows Event ID 4688
  - Network Egress Points
  - Kubernetes Worker Nodes
  - Internal DNS Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip, destination_ip pair in zeek_conn_logs
        connection_intervals = CALCULATE time differences between sequential connections
        stdev_interval = CALCULATE standard_deviation(connection_intervals)
        IF stdev_interval < 5_seconds AND source_ip IN container_ip_ranges
          ALERT potential_beaconing_activity
- question: Does a time-series decomposition model detect a strong periodic signal in a pod's network traffic that is not attributable to a legitimate job?
  context: This question uses machine learning to find hidden periodic behavior indicative of a persistence mechanism. By decomposing a pod's network connection time series into its trend, seasonal (periodic), and residual components, analysts can isolate strong periodic signals. If such a signal is found and cannot be matched to a known, legitimate scheduled job, it suggests a hidden or obfuscated malicious scheduler.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Windows Event ID 4688
  - Network Egress Points
  - Kubernetes Worker Nodes
  - Internal DNS Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each pod_ip to destination_ip time_series
        trend, seasonal, residual = STL_DECOMPOSE(time_series)
        IF seasonal_component is strong AND period does not match any known cronjob schedule
          ALERT unattributed_periodic_activity
- question: Is a new or modified Kubernetes CronJob configured with a suspicious schedule or command?
  context: This question focuses on detecting the creation of malicious persistence mechanisms directly within Kubernetes. By monitoring for the creation or modification of CronJob objects, analysts can flag jobs with unusually high-frequency schedules (e.g., every minute) or those whose container commands contain strings associated with reverse shells or C2 agents (e.g., 'nc', 'wget', 'bash -c').
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH k8s_audit_logs for CronJob create/update events
      ALERT IF cronjob.spec.schedule MATCHES high_frequency_patterns
      OR cronjob.spec.jobTemplate.spec.template.spec.containers.command MATCHES suspicious_strings_regex
- question: Is a newly created CronJob scheduled with an unusually high frequency or does its name suggest typosquatting?
  context: This question uses statistical analysis to find anomalous CronJob configurations. By analyzing the frequency distribution of all CronJob schedules, any new job in the top percentile of frequency can be flagged for review. Additionally, calculating the string distance (e.g., Levenshtein distance) between new and existing job names helps detect typosquatting, where an adversary mimics a legitimate job name to evade detection.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Frequency check
      all_frequencies = GET frequencies from all cronjob schedules
      FOR each new cronjob
        IF new_cronjob.frequency in 99th_percentile(all_frequencies)
          ALERT high_frequency_cronjob

      // Typosquatting check
      FOR each new cronjob_name
        min_distance = CALCULATE_MIN_LEVENSHTEIN_DISTANCE(new_cronjob_name, existing_legit_names)
        IF min_distance is 1 or 2
          ALERT potential_typosquatting
- question: Can a machine learning model classify a new or modified CronJob as a malicious persistence mechanism?
  context: This question uses a supervised learning model to automatically score the risk of CronJob configurations. By training a classifier on features like schedule frequency, image source (public vs. private), command entropy, and security context, the model can learn what a malicious CronJob looks like. This provides a proactive way to flag suspicious persistence attempts as they are created.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified cronjob
        features = EXTRACT (frequency, image_registry, cmd_entropy, privileged_flags)
        risk_score = ML_MODEL_PREDICT(features)
        IF risk_score > threshold
          ALERT high_risk_cronjob
- question: Is there periodic network or process activity from a container that cannot be attributed to a configured CronJob?
  context: This question aims to find persistence mechanisms that are hidden from the Kubernetes API, such as a process running 'cron' inside a container. By first identifying a recurring network connection or process execution and then failing to find a corresponding CronJob in the API server logs that could explain it, analysts can uncover these "off-the-books" schedulers.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Network Egress Points
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      IDENTIFY recurring_connection in zeek_conn_logs for a pod_ip
      QUERY k8s_api_logs for a CronJob that could create that pod_ip on that schedule
      IF no matching CronJob found
        ALERT unattributed_periodic_activity
- question: Is there a periodic process on a worker node that does not align with any known CronJob schedules?
  context: This question uses statistical time-series analysis to find hidden schedulers on the host itself. By applying autocorrelation to the time series of process creation events on a node, periodic behavior can be detected (e.g., a peak at a 300-second lag). If this detected period does not match any known CronJob schedule, it is a strong indicator of a malicious, hidden persistence mechanism.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Network Egress Points
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_name on worker_node
        time_series = GET timestamps from process creation events (EventID 4688)
        autocorrelation_results = AUTOCORRELATE(time_series)
        IF strong peak at lag L
          period = L
          IF period does not match any known CronJob schedule
            ALERT unattributed_periodic_process
- question: Can a clustering algorithm identify unattributed clusters of periodic network activity?
  context: This question applies unsupervised learning to discover hidden, periodic C2 channels. By clustering network flow data, tight clusters representing regular, repeated connections can be identified. For each cluster, an analyst or automated system can attempt to attribute it to a known application or CronJob. Clusters that remain unattributed are highly suspicious and may represent malicious persistence.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Network Egress Points
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      flow_tuples = EXTRACT 5-tuples from zeek_conn_logs for container traffic
      clusters = KMEANS_CLUSTERING(flow_tuples)
      FOR each tight_cluster representing periodic activity
        ATTEMPT to attribute to known application or cronjob
        IF unattributed
          ALERT suspicious_unattributed_cluster
- question: Is a job configured with a high failure tolerance (backoffLimit) and are its pods connecting to known IOCs?
  context: This question identifies potentially malicious jobs that are designed to be resilient against termination. A high 'backoffLimit' allows a job to retry many times if it fails. When this configuration is correlated with the job's pods making connections to malicious IPs shortly after starting, it suggests an adversary is trying to establish a foothold that may be getting intermittently blocked by a security control.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Zeek conn.log
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH k8s_audit_logs for Jobs where spec.backoffLimit > 10
      GET associated pod_ips
      SEARCH zeek_conn_logs for connections from pod_ips to malicious_ips
      IF match found
        ALERT resilient_malicious_job
- question: Is a pod associated with a Job object exhibiting an anomalously high restart rate?
  context: This question uses pod restart behavior as an indicator of compromise. A pod that is restarting at a rate in the 99th percentile for the environment suggests something is repeatedly going wrong. When this high restart rate is correlated with other suspicious indicators from the pod, such as high-entropy command lines, it strongly suggests a malicious process is being repeatedly killed and then restarted by Kubernetes.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Zeek conn.log
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE pod restart rates over 1-hour window
      IDENTIFY pods in 99th_percentile of restarts
      IF pod is associated with a Job object
        CORRELATE with suspicious process events (e.g., high cmdline entropy) from that pod
        IF correlation exists
          ALERT high_restart_suspicious_job_pod
- question: Is a pod that a model predicts should be stable exhibiting a high restart rate?
  context: This question uses a machine learning model to find contradictions between expected and observed behavior. A decision tree can be trained to predict pod stability based on its configuration. If the model predicts a pod should be stable, but it is observed to have a high restart rate, this anomaly suggests an external, unmodeled factor—such as a security agent killing a malicious process—is causing the restarts.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Zeek conn.log
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each pod
        stability_prediction = ML_MODEL_PREDICT(pod_configuration)
        observed_restarts = GET_RESTART_COUNT(pod)
        IF stability_prediction == 'STABLE' AND observed_restarts is high
          ALERT anomalous_high_restart_rate
- question: Was a job created with a high-privilege security context and did its pod execute a known exploit tool?
  context: This question aims to detect the direct use of a privileged job to escalate privileges. An alert should trigger when a job is created with dangerous settings like `privileged: true` or `hostPID: true`, and the resulting pod is then observed executing a process whose hash or command-line matches a known privilege escalation exploit. This provides a high-confidence alert for an active escalation attempt.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Zeek conn.log
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH k8s_audit_logs for Job creation with spec.securityContext.privileged = true
      GET associated pod_id
      SEARCH windows_event_logs (EventID 4688) for processes from pod_id
      IF process_hash IN known_exploit_hashes OR command_line MATCHES known_exploit_patterns
        ALERT privileged_job_running_exploit
- question: Is a job running with a privileged security context using a rare or never-before-seen image?
  context: This question uses the rarity of an image as a risk factor. Most legitimate privileged operations use a small, well-known set of administrative images. Therefore, if a job is created with privileged settings but uses an image that has never or rarely been seen in the environment, it is highly suspicious and could be an adversary's custom toolkit.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Zeek conn.log
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN baseline of images approved for privileged execution
      SEARCH k8s_audit_logs for Job creation with privileged context
      IF job.image NOT IN privileged_allowlist
        CALCULATE rarity of job.image across environment
        IF rarity is high (e.g., first time seen)
          ALERT rare_image_in_privileged_job
- question: Does a graph-based anomaly detection model flag a job as high-risk due to its configuration?
  context: This question uses a graph-based model to understand the relationships between Kubernetes objects and identify risky configurations. A job object connected to both a 'Privileged' security context object and a 'Rare Image' object would be assigned a high anomaly score by the model, flagging a combination of risk factors that might be missed by individual checks.
  answer_sources:
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4688
  - Zeek conn.log
  - Kubernetes API Server
  - Kubernetes Worker Nodes
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BUILD graph of Kubernetes objects (Jobs, Pods, Images, SecurityContexts)
      APPLY graph anomaly detection algorithm
      ALERT on Job nodes with high anomaly scores, especially those connected to 'Privileged' and 'Rare Image' nodes.
- question: Are processes from a container job using command-line arguments indicative of container escape techniques?
  context: This question hunts for known container escape techniques by monitoring command lines on the worker nodes. By using regular expressions to search for strings like `/var/run/docker.sock`, `nsenter -t 1`, or attempts to mount sensitive host directories, analysts can detect when a process inside a container is actively trying to break out to the underlying host.
  answer_sources:
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4663
  - Kubernetes Worker Nodes
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH windows_event_logs (EventID 4688)
      WHERE parent_process_name IN container_runtime_processes
      AND command_line MATCHES REGEX ('/var/run/docker.sock' OR 'nsenter -t 1' OR 'mount /proc/1/root')
- question: Is a container job accessing an anomalous number of host paths?
  context: This question identifies suspicious file system interaction by profiling normal behavior. Legitimate jobs that use `hostPath` mounts typically access a predictable set of files. By baselining this activity, a new job that accesses a number of host paths far exceeding the norm (e.g., 99th percentile) for its application profile can be flagged as anomalous, potentially indicating host reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4663
  - Kubernetes Worker Nodes
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE file access patterns for legit jobs (from EventID 4663) per application profile
      FOR each new container_job
        host_path_access_count = COUNT unique host paths accessed
        IF host_path_access_count > 99th_percentile_for_profile
          ALERT anomalous_host_path_access
- question: Does an autoencoder model flag a command-line sequence from a container job as anomalous?
  context: This question uses an unsupervised machine learning model to detect novel or obfuscated container escape techniques. An autoencoder is trained on sequences of benign command lines to learn what "normal" looks like. A new command sequence that the model cannot reconstruct accurately (i.e., has a high reconstruction error) is flagged as anomalous, as it doesn't conform to any learned normal pattern.
  answer_sources:
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Windows Event ID 4663
  - Kubernetes Worker Nodes
  - Kubernetes API Server
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN autoencoder model on benign command-line sequences
      FOR each new command_line_sequence from a container job
        reconstruction_error = AUTOENCODER_MODEL_EVALUATE(sequence)
        IF reconstruction_error > threshold
          ALERT anomalous_command_sequence
- question: Is a pod from a container job connecting to a privileged service on its host node in violation of network policy?
  context: This question detects attempts by a compromised pod to move laterally to the node's control plane services. A SIEM rule can be created to trigger if a pod IP is seen connecting to its own host's IP on a sensitive port like 10250 (Kubelet) or 2379 (etcd), especially when no Kubernetes NetworkPolicy explicitly allows such traffic.
  answer_sources:
  - Zeek conn.log
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Kubernetes Control Plane Network
  - Internal Administrative Networks
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH zeek_conn_logs
      WHERE source_ip is pod_ip
      AND destination_ip is pod_host_node_ip
      AND destination_port IN (10250, 2379, other_sensitive_ports)
      AND no NetworkPolicy allows this flow
- question: Is a pod connecting to an anomalously high number of unique ports on its host node?
  context: This question helps detect internal port scanning from a compromised pod. By baselining the normal number of unique node ports an application's pods connect to, analysts can flag any pod that exceeds this baseline by a significant margin (e.g., 3 standard deviations). This behavior could indicate an adversary is scanning the host node for open, exploitable services.
  answer_sources:
  - Zeek conn.log
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Kubernetes Control Plane Network
  - Internal Administrative Networks
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE normal pod-to-node port communication patterns per application profile
      FOR each pod
        unique_node_ports_connected = COUNT unique ports on host node
        IF unique_node_ports_connected > (mean + 3 * std_dev) for profile
          ALERT anomalous_pod_to_node_port_scanning
- question: Does a One-Class SVM model classify a pod's communication flow to the host as an outlier?
  context: This question uses unsupervised machine learning to detect unauthorized access attempts. A One-Class SVM can be trained on legitimate pod-to-host and pod-to-service communication patterns. Any new network flow from a job's pod that the model classifies as an outlier is flagged as suspicious, as it does not conform to the learned patterns of normal, authorized communication.
  answer_sources:
  - Zeek conn.log
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes
  - Kubernetes Control Plane Network
  - Internal Administrative Networks
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN One-Class SVM on legitimate network flow features (dest_ip, dest_port, protocol)
      FOR each new network_flow from a container job pod
        is_outlier = ONE_CLASS_SVM_PREDICT(flow)
        IF is_outlier
          ALERT anomalous_communication_flow
- question: Is a container job execution immediately followed by the creation of a new local user account on the worker node?
  context: This question aims to detect a common post-privilege-escalation action: creating a local account for persistence. By correlating a process spawned by a container job (Event ID 4688) with a subsequent user account creation (Event ID 4720) on the same node within a tight time window, analysts can identify when a compromised container has successfully broken out and established a foothold on the underlying host.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes (Authentication Logs)
  - Kubernetes API Server
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH windows_event_logs (EventID 4688) as job_proc
      JOIN windows_event_logs (EventID 4720) as new_user
      ON job_proc.hostname = new_user.hostname
      WHERE job_proc.parent_process_name IN container_runtime_processes
      AND new_user.timestamp < job_proc.timestamp + 1_minute
      AND new_user.source_process NOT IN admin_tool_allowlist
- question: Was there a sudden spike in the creation rate of high-privilege Kubernetes objects following a container job execution?
  context: This question looks for evidence of privilege escalation within the cluster itself. After gaining some level of access, an adversary may try to create powerful objects like ClusterRoleBindings. By monitoring the creation rate of such objects and flagging any sudden spike that deviates significantly from a moving average, analysts can detect this activity and correlate it back to recently executed jobs.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes (Authentication Logs)
  - Kubernetes API Server
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR creation rate of ClusterRoleBindings, privileged Pods, etc.
      CALCULATE moving average and standard deviation of rate
      IF creation_rate > (moving_average + 3 * std_dev)
        ALERT spike in privileged object creation
        CORRELATE timing with recently executed container jobs
- question: Did a sequence analysis model detect an anomalous event sequence, such as a new ClusterRoleBinding being created after a job starts?
  context: This question uses a state-based model to detect illogical or malicious sequences of events. A Hidden Markov Model can be trained on legitimate sequences (e.g., job create -> pod running -> pod success). An anomalous sequence, such as 'job create -> pod running -> new ClusterRoleBinding created', violates the expected state transitions and would be flagged, indicating that the job led to a privilege escalation event.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4688
  - Kubernetes API Server Audit Logs
  - Kubernetes Worker Nodes (Authentication Logs)
  - Kubernetes API Server
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN Hidden Markov Model on legitimate event sequences from k8s_audit_logs
      FOR each new sequence of events
        is_anomalous = HMM_MODEL_EVALUATE(sequence)
        IF is_anomalous AND sequence contains ('job create', 'new ClusterRoleBinding')
          ALERT anomalous_post-escalation_sequence