name: T1547.001: Registry Run Keys - Startup Folder
id: 59a1d48c-1e23-4f91-a579-2458e697c11f
description: This playbook addresses the adversary technique of using Registry Run Keys and Startup Folders for persistence and privilege escalation. It helps answer whether an adversary is maintaining persistence by adding new items to startup locations that are either known IOCs, statistically rare, use obfuscated commands, or initiate suspicious network connections. The playbook also investigates if adversaries are attempting to elevate privileges by having a standard user write to a system-wide startup location, creating a file that is later run by a privileged user, or by modifying critical boot execution registry values like BootExecute. The goal is to detect modifications to designated startup locations such as HKLM/HKCU Run keys and user/system Startup folders, and to analyze the executed payloads for signs of malicious activity like remote script execution, use of LOLBAS, or anomalous process behavior.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a new startup item (file or registry key) a known indicator of compromise (IOC)?
    context: |
      This question aims to identify persistence attempts where an adversary adds a malicious program to a startup location. By extracting the hash of new files in startup folders or the value data of new registry run keys and comparing them against a threat intelligence platform, we can quickly detect known malware or tools. A match with a high confidence score is a strong signal of a compromise.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4663, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: All workstations and servers; Registry hives including HKLM\Software\Microsoft\Windows\CurrentVersion\Run, HKCU\Software\Microsoft\Windows\CurrentVersion\Run; Filesystem paths including C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup, C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each event WHERE (event_id is 4657 or 13) AND (target_key contains 'CurrentVersion\Run') OR (event_id is 4663 or 11) AND (target_path contains 'Programs\Startup')
            EXTRACT file_hash or registry_value
            QUERY threat_intel_api with extracted_value
            IF threat_intel_match_confidence > 80 THEN
              ALERT on host, user, path/key, IOC_details
  - question: Is a new startup item statistically rare or does it have a high-entropy filename?
    context: |
      This question helps uncover novel or custom malware that isn't in threat intelligence feeds. Adversaries often use randomly generated filenames (high entropy) and deploy their tools to a small number of targets (low prevalence). By baselining normal startup items across the enterprise, we can flag new items that are statistical outliers, indicating they are unusual and warrant investigation.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4663, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: All workstations and servers; Registry hives including HKLM\Software\Microsoft\Windows\CurrentVersion\Run, HKCU\Software\Microsoft\Windows\CurrentVersion\Run; Filesystem paths including C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup, C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new startup_item (file or registry key)
            CALCULATE prevalence = (hosts_with_item / total_hosts)
            CALCULATE filename_entropy = shannon_entropy(item_name)
            IF prevalence < 5th_percentile_baseline AND filename_entropy > 95th_percentile_baseline THEN
              FLAG for investigation
  - question: Does a machine learning model classify a new startup item as malicious based on its features?
    context: |
      This question applies machine learning to automate the detection of malicious startup entries. By training a model on various features of known good and bad files (like file size, entropy, digital signature status, etc.), we can predict the likelihood that a new, unseen startup item is malicious. This approach can identify sophisticated threats that might evade simpler rule-based detections.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4663, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: All workstations and servers; Registry hives including HKLM\Software\Microsoft\Windows\CurrentVersion\Run, HKCU\Software\Microsoft\Windows\CurrentVersion\Run; Filesystem paths including C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup, C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new startup_item
            EXTRACT features (file_size, entropy, imphash, is_signed, signer_rep, parent_process, path_depth)
            PREDICT malicious_probability = ml_model.predict(features)
            IF malicious_probability > 0.85 THEN
              CREATE investigation_ticket
  - question: Does a startup item's command line contain obfuscation patterns or signs of Living-off-the-Land (LOLBAS) tool usage?
    context: |
      This question seeks to identify malicious commands hidden within startup entries. Adversaries often use encoding (e.g., Base64 with powershell -enc), hidden window flags, or legitimate system tools (LOLBAS) like certutil.exe or bitsadmin.exe to download or execute malicious payloads. Using regular expressions to find these patterns in command lines or registry values is an effective way to unmask these techniques.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13, Zeek conn.log, Zeek dns.log
      - Assets/Locations: All corporate workstations and servers; User profile directories (e.g., C:\Users\Public, C:\Users\*\AppData\Local\Temp); System-wide temporary directories (e.g., C:\Windows\Temp); Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation or registry_modification event related to startup
            PARSE command_line or registry_value
            IF command_line matches regex for ('powershell -enc', 'IEX', 'certutil.exe -urlcache', 'mshta.exe http:') THEN
              ALERT on obfuscation/LOLBAS usage
  - question: Is the command line of a startup process a statistical outlier in terms of length or entropy?
    context: |
      This question focuses on identifying anomalous command lines. Legitimate startup programs typically have consistent and predictable command-line arguments. Malicious scripts, especially those that are obfuscated or contain embedded code, are often significantly longer or have higher character entropy than normal commands. Flagging commands that are statistical outliers compared to a baseline can reveal hidden malicious activity.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13, Zeek conn.log, Zeek dns.log
      - Assets/Locations: All corporate workstations and servers; User profile directories (e.g., C:\Users\Public, C:\Users\*\AppData\Local\Temp); System-wide temporary directories (e.g., C:\Windows\Temp); Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each startup process command_line
            CALCULATE length and entropy
            IF length > 95th_percentile_baseline OR entropy > 95th_percentile_baseline THEN
              FLAG as outlier and investigate
  - question: Is a startup command-line argument novel or does it not belong to any known cluster of legitimate commands?
    context: |
      This question uses unsupervised machine learning to find unique, and therefore suspicious, command lines. By grouping all historical startup commands into clusters of similar, legitimate activity, any new command that does not fit into an existing cluster (a 'noise point') is by definition anomalous. This is a powerful method for detecting novel attack patterns without prior knowledge of the threat.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 13, Zeek conn.log, Zeek dns.log
      - Assets/Locations: All corporate workstations and servers; User profile directories (e.g., C:\Users\Public, C:\Users\*\AppData\Local\Temp); System-wide temporary directories (e.g., C:\Windows\Temp); Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          VECTORIZE all startup command_lines using TF-IDF
          RUN DBSCAN clustering algorithm on vectors
          FOR each new command_line
            IF model classifies as noise_point THEN
              FLAG for manual review
  - question: Did a process from a startup location make a network connection to a known malicious or non-standard destination shortly after execution?
    context: |
      This question correlates process execution with network activity to detect command-and-control (C2) behavior. A common adversary pattern is for a persisted payload to run on startup and immediately 'call home'. By creating a rule that links a startup process to a subsequent network connection within a short time window (e.g., 60 seconds) and checking the destination against threat intelligence, we can catch active C2 channels.
    answer_sources:
      - Data Sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log
      - Assets/Locations: All corporate workstations and servers; Network egress points (e.g., firewalls, proxies); DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation from startup_location within 60 seconds of a network_connection from same process
            QUERY threat_intel with destination_ip/domain
            IF destination is malicious OR port is non-standard THEN
              ALERT on suspicious C2 connection
  - question: Is a rare startup process making a network connection to a geographically or logically rare destination?
    context: |
      This question combines two forms of rarity analysis for high-fidelity alerting. A process that is rare in the environment (low prevalence) is already suspicious. If that same rare process then connects to a destination network (identified by its ASN or country) that is also rare for that host or user, the likelihood of malicious activity is significantly higher. This dual-rarity check is effective at finding targeted implants.
    answer_sources:
      - Data Sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log
      - Assets/Locations: All corporate workstations and servers; Network egress points (e.g., firewalls, proxies); DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each startup process
            IF process_prevalence < 5 hosts AND destination_ASN is not in top 90% of host's historical ASNs THEN
              INCREASE risk_score and flag for investigation
  - question: Does the network traffic from a startup process deviate from its predicted behavior based on time-series analysis?
    context: |
      This question uses time-series forecasting to detect changes in C2 communication patterns. Legitimate startup processes that connect to the network often do so in a predictable way (e.g., checking for updates at regular intervals). A model trained on this behavior can detect deviations, such as a sudden spike in data exfiltration or a change in beaconing frequency, which may indicate the adversary has begun actively using the implant.
    answer_sources:
      - Data Sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log
      - Assets/Locations: All corporate workstations and servers; Network egress points (e.g., firewalls, proxies); DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL network traffic (bytes_out, frequency) for each startup process using ARIMA
          FOR each new data_point
            IF actual_traffic significantly deviates from predicted_traffic THEN
              ALERT on anomalous network behavior
  - question: Has a known-good startup item or its location's permissions been modified without authorization?
    context: |
      This question aims to detect the hijacking of legitimate startup entries. Adversaries may modify an existing, trusted startup item to point to their payload, or alter permissions on a startup folder/registry key to allow a standard user to place a malicious file. By maintaining a 'golden baseline' of known-good configurations and monitoring for unauthorized changes or permission modifications (like granting 'FullControl' to 'Authenticated Users'), we can detect this technique.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4670, Sysmon Event ID 13
      - Assets/Locations: All corporate workstations and servers; Key registry hives (HKLM\Software, HKCU\Software); System-wide and user-specific startup folders (C:\ProgramData\...\Startup, C:\Users\...\Startup)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR for modifications to golden_baseline startup items
          ALERT on any deviation not tied to a change_request
          MONITOR for permission changes on startup locations granting Write access to non-admin groups
          ALERT on suspicious permission change
  - question: Is a specific startup entry changing more frequently than its historical baseline?
    context: |
      This question helps detect persistence mechanisms that are periodically updated by the adversary. While some legitimate updaters modify startup entries, an entry that changes far more often than its established norm could indicate an adversary repeatedly hijacking it or updating a 'living-off-the-land' script. Tracking the rate of change for each entry and flagging statistical deviations can uncover this behavior.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4670, Sysmon Event ID 13
      - Assets/Locations: All corporate workstations and servers; Key registry hives (HKLM\Software, HKCU\Software); System-wide and user-specific startup folders (C:\ProgramData\...\Startup, C:\Users\...\Startup)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each startup_entry
            TRACK change_frequency over time
            CALCULATE mean and std_dev of change frequency
            IF current_frequency > (mean + 3 * std_dev) THEN
              FLAG for investigation
  - question: Has the system call sequence of a legitimate startup process deviated from its normal behavior?
    context: |
      This question seeks to detect process hijacking at the behavioral level. By training an anomaly detection model (like an autoencoder) on the normal sequence of system calls for a legitimate startup process, we can create a fine-grained behavioral profile. If the process is later hijacked or replaced, its new sequence of system calls will not match the learned profile, resulting in a high 'reconstruction error' and triggering an alert.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4670, Sysmon Event ID 13
      - Assets/Locations: All corporate workstations and servers; Key registry hives (HKLM\Software, HKCU\Software); System-wide and user-specific startup folders (C:\ProgramData\...\Startup, C:\Users\...\Startup)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL system call sequences for legitimate startup processes using an autoencoder
          IN real-time, for a monitored process
            FEED its system call sequence to the model
            IF reconstruction_error > threshold THEN
              ALERT on behavioral deviation, potential hijacking
  - question: Has a non-privileged user written a file or registry key to a system-wide startup location?
    context: |
      This question is a high-fidelity check for privilege escalation. System-wide startup locations (like HKLM Run keys or the 'All Users' startup folder) should only be modified by administrators or system installers. A write event to one of these locations originating from a standard, non-administrative user account is a strong indicator that the user's process has exploited a vulnerability to gain system-level permissions.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4663, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: Multi-user servers (e.g., Citrix, RDS); Administrator workstations; Key registry hives (HKLM\Software\Microsoft\Windows\CurrentVersion\*); System-wide startup folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each write_event to HKLM_Run_Keys or All_Users_Startup_Folder
            IF user is NOT in an administrative group THEN
              GENERATE critical alert for privilege escalation
  - question: Has a standard user written to a system-wide startup location using an uncommon process?
    context: |
      This question adds context to the previous detection. While any write by a standard user to a system-wide startup location is suspicious, the risk is even higher if the process performing the write (the parent process) is unusual for that user. For example, a standard user's `winword.exe` process writing to an HKLM key is more anomalous than an installer process doing so, and helps prioritize the most suspicious events.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4663, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: Multi-user servers (e.g., Citrix, RDS); Administrator workstations; Key registry hives (HKLM\Software\Microsoft\Windows\CurrentVersion\*); System-wide startup folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each write_event to system-wide startup location by a standard_user
            IF parent_process is statistically uncommon for that user's baseline THEN
              ELEVATE risk score and flag immediately
  - question: Is a user writing to a system-wide startup location, an action that is anomalous for their assigned peer group?
    context: |
      This question uses peer group analysis to detect privilege escalation. Users with similar roles and permissions (e.g., 'Sales team') should exhibit similar behavior. None of these users should ever write to a system-wide startup location. If one user in the 'Sales' peer group performs this action, it is a significant deviation from both their own history and the group norm, strongly indicating a compromised account or insider threat.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Windows Event ID 4663, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: Multi-user servers (e.g., Citrix, RDS); Administrator workstations; Key registry hives (HKLM\Software\Microsoft\Windows\CurrentVersion\*); System-wide startup folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP users by role/permissions into peer_groups
          FOR each user
            IF user writes to system-wide startup location AND this behavior is anomalous for their peer_group THEN
              CLASSIFY as high-risk anomaly
  - question: Was a startup item created by one user and later executed by a different, higher-privileged user on the same machine?
    context: |
      This question targets a classic privilege escalation technique on multi-user systems. An adversary with standard user access (User A) places a malicious payload in a startup location. When a privileged user (User B, e.g., an administrator) logs into the same machine, the payload executes with User B's higher privileges. Correlating the user who wrote the file with the user who executes it upon login can directly uncover this attack path.
    answer_sources:
      - Data Sources: Windows Event ID 4663, Windows Event ID 4657, Windows Event ID 4688, Windows Event ID 4624, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: Multi-user servers (e.g., Citrix, RDS); Shared administrator workstations; Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file/registry write to startup_location by UserA
            LOG writer=UserA, path=path
          ON process_creation from path by UserB
            IF UserA != UserB AND UserB.privileges > UserA.privileges THEN
              ALERT on privilege escalation
  - question: Is there a new or rare pairing of a 'creator user' and an 'executor user' for a startup item?
    context: |
      This question provides a statistical approach to finding privilege escalation. By tracking all 'creator-executor' pairs for startup items across the enterprise, we can establish a baseline of normal activity. A new pair, especially one where the creator is a different and less-privileged user than the executor, is statistically rare and highly suspicious. The risk is amplified if the time between the item's creation and its execution is short.
    answer_sources:
      - Data Sources: Windows Event ID 4663, Windows Event ID 4657, Windows Event ID 4688, Windows Event ID 4624, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: Multi-user servers (e.g., Citrix, RDS); Shared administrator workstations; Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN baseline of creator-executor pairs for startup items
          FOR each new startup execution
            EXTRACT creator and executor users
            IF (creator, executor) pair is new or rare (<1% prevalence) AND creator != executor THEN
              FLAG for investigation
  - question: Does a graph analysis reveal a pattern of a low-privilege user writing a file that is executed by a high-privilege user?
    context: |
      This question models the privilege escalation attack as a specific pattern within a graph database. By representing users, files, and processes as nodes and their interactions (writes, executes) as edges, we can explicitly search for the malicious sequence: (User A)-[writes]->(File X), which is then followed by (Process Z)-[executed_from]->(File X) and (Process Z)-[runs_as]->(User B), where User B has more privileges than User A. This provides a robust and visual way to confirm the attack chain.
    answer_sources:
      - Data Sources: Windows Event ID 4663, Windows Event ID 4657, Windows Event ID 4688, Windows Event ID 4624, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13
      - Assets/Locations: Multi-user servers (e.g., Citrix, RDS); Shared administrator workstations; Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          IN graph_db, search for pattern:
          (UserA)-[:WRITES]->(FileX)<-[:EXECUTED_FROM]-(ProcessZ)-[:RUNS_AS]->(UserB)
          WHERE UserA.privilege < UserB.privilege
          IF pattern found, ALERT.
  - question: Has the BootExecute registry value been modified to anything other than the system default?
    context: |
      This question is a high-fidelity check for a powerful persistence and escalation technique. The 'BootExecute' registry value specifies programs that run very early in the boot process, before most security tools are active. The default and only legitimate value is 'autocheck autochk *'. Any modification to this value to include another executable is a critical indicator of a sophisticated adversary attempting to gain boot-level persistence.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Sysmon Event ID 13
      - Assets/Locations: All corporate workstations and servers, especially Domain Controllers and critical servers; Key system registry hives (HKLM\System\CurrentControlSet\Control\Session Manager)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR for write events to 'HKLM\System\CurrentControlSet\Control\Session Manager\BootExecute'
          IF new_value is not 'autocheck autochk *' THEN
            GENERATE critical alert
  - question: Does the BootExecute registry value on any system deviate from the fleet-wide standard?
    context: |
      This question provides a secondary, sweeping check to complement real-time monitoring of the 'BootExecute' key. By periodically polling the value of this key on all systems and comparing a hash of the value, any host that deviates from the universal norm ('autocheck autochk *') can be identified. This is useful for finding systems that were compromised while logging was unavailable or for performing periodic compliance and hygiene checks.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Sysmon Event ID 13
      - Assets/Locations: All corporate workstations and servers, especially Domain Controllers and critical servers; Key system registry hives (HKLM\System\CurrentControlSet\Control\Session Manager)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PERIODICALLY poll 'BootExecute' value from all hosts
          HASH the value
          IF hash does not match hash_of('autocheck autochk *') THEN
            FLAG host as anomalous
  - question: Was the BootExecute registry key modified by an anomalous process?
    context: |
      This question adds behavioral context to the modification of the 'BootExecute' key. The HKLM\System hive is a sensitive area typically modified only by a few trusted system processes (e.g., 'svchost.exe', 'TiWorker.exe'). By modeling the legitimate processes that interact with this hive, an anomaly detection model can flag a modification made by an unusual process, such as 'reg.exe' or 'powershell.exe' spawned from an office document, as a highly suspicious event.
    answer_sources:
      - Data Sources: Windows Event ID 4657, Sysmon Event ID 13
      - Assets/Locations: All corporate workstations and servers, especially Domain Controllers and critical servers; Key system registry hives (HKLM\System\CurrentControlSet\Control\Session Manager)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL legitimate processes that modify HKLM\System hive using an anomaly detection model
          FOR each modification to 'BootExecute'
            IF modifying_process is flagged as anomalous by the model THEN
              FLAG for immediate review