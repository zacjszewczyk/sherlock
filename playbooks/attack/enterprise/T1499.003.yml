name: T1499.003: Application Exhaustion Flood
id: 4e2c2f7b-9d5a-4e8c-a6f9-3d1b4c7a0e2d
description: This playbook helps investigate whether an adversary is causing a denial of service by exhausting application resources. Detections focus on identifying abnormally high connection rates from known malicious IPs, HTTP requests matching signatures of DoS tools, rapid and sustained increases in traffic volume beyond established baselines, application crashes correlated with network alerts, high-frequency requests to resource-intensive API endpoints, and automated, repetitive request patterns indicative of scripted attacks.
type: technique
related:
- TA0040: Impact
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are connections to critical applications originating from source IPs known for DoS or botnet activity?
  context: This question aims to identify initial indicators of a DoS attack by leveraging external threat intelligence. By cross-referencing incoming connection source IPs with lists of known malicious actors (like DoS botnets or open proxies), we can proactively flag potentially harmful traffic targeting critical services (e.g., on ports 80, 443) before it causes significant impact.
  answer_sources:
  - Zeek conn.log
  - Threat Intelligence Feeds
  - Internet Gateways
  - Cloud WAFs
  - Public-facing Web Servers
  - Application Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN Zeek_conn_logs with Threat_Intelligence_IP_list ON source_ip WHERE destination_port IN (80, 443) AND time > now() - 90d
- question: Is a source IP, already identified on a threat intelligence list, connecting to our critical applications at an abnormally high rate?
  context: This question builds upon the initial threat intelligence match by adding a volumetric check. By comparing the connection rate of a suspicious IP against a historical baseline (e.g., the 99th percentile of normal traffic), we can identify behavior that is statistically significant and indicative of a flood attack, allowing for prioritized incident response.
  answer_sources:
  - Zeek conn.log
  - Threat Intelligence Feeds
  - Internet Gateways
  - Cloud WAFs
  - Public-facing Web Servers
  - Application Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM flagged_connections_from_previous_query, CALCULATE connections_per_minute per source_ip. ALERT if connections_per_minute > 99th_percentile_baseline(all_external_ips_last_30d).
- question: Can we assign a confidence score to the likelihood that a connection from a flagged IP is part of a malicious DoS attack based on its network characteristics?
  context: This question seeks to refine alerting by using a machine learning model to score the maliciousness of connections from IPs already flagged by threat intelligence. The model analyzes multiple features from the connection data (like bytes transferred, duration, state) to provide a probabilistic assessment, helping analysts focus on the highest-confidence alerts and reduce false positives.
  answer_sources:
  - Zeek conn.log
  - Threat Intelligence Feeds
  - Internet Gateways
  - Cloud WAFs
  - Public-facing Web Servers
  - Application Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each connection from flagged_ip, INPUT connection_features (orig_bytes, resp_bytes, duration, state) INTO logistic_regression_model. OUTPUT probability_score. ALERT if score > threshold.
- question: Are any incoming HTTP requests using User-Agent strings or other headers that match signatures of known application-layer DoS tools?
  context: This question focuses on identifying attackers by the specific tools they use. Many application-layer DoS tools (like GoldenEye, Slowloris) leave unique fingerprints in the HTTP headers, particularly the User-Agent string. Detecting these signatures provides a high-confidence indicator that an attack is underway or being attempted.
  answer_sources:
  - Zeek http.log
  - Reverse Proxies
  - API Gateways
  - Public-facing Web Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek_http_logs WHERE user_agent MATCHES regex_list_of_DoS_tools AND time > now() - 90d
- question: Are any source IPs making highly repetitive, non-random requests to the same or similar URIs?
  context: This question aims to detect automated, scripted attacks by analyzing the randomness (or lack thereof) of requested URIs. A legitimate user typically browses various pages, resulting in higher entropy. An attacker flooding a specific resource will make identical requests, leading to a very low entropy score, which is a strong statistical indicator of an application exhaustion attempt.
  answer_sources:
  - Zeek http.log
  - Reverse Proxies
  - API Gateways
  - Public-facing Web Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each source_ip, GROUP requests by 1_minute_window. CALCULATE shannon_entropy of URI_field. ALERT if entropy < 10th_percentile_baseline.
- question: Can we classify entire user sessions as malicious based on a combination of HTTP request features?
  context: This question moves beyond single requests to evaluate the behavior of an entire session. A machine learning model, such as a Random Forest, can analyze multiple features simultaneously (HTTP method, URI length, body size, headers) to classify a session's intent. This provides a more holistic and robust detection method than looking at single indicators in isolation.
  answer_sources:
  - Zeek http.log
  - Reverse Proxies
  - API Gateways
  - Public-facing Web Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user_session, INPUT session_features (method, uri_length, request_body_len, etc.) INTO random_forest_model. OUTPUT classification. ALERT if classification == 'malicious'.
- question: Has the connection volume to a critical web server breached a pre-defined 'emergency' threshold?
  context: This question serves as a simple, high-volume tripwire. While less sophisticated than dynamic baselining, a static threshold can effectively catch large, unsophisticated flood attacks that cause a sudden and massive spike in traffic. It's a last line of defense for detecting overwhelming volumetric attacks.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Application Load Balancers
  - Public-facing Web Servers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: COUNT connections per minute to web_server_ip_and_port. ALERT if count > 10000.
- question: Is the current request rate to a specific application statistically anomalous compared to its normal historical baseline for this time of day and day of week?
  context: This question provides a more intelligent way to detect volumetric attacks by comparing current traffic levels to a dynamic baseline that accounts for normal business cycles (e.g., high traffic during business hours, low traffic overnight). An alert based on a high z-score (e.g., >3 standard deviations from the mean) is a strong indicator of an abnormal event that is not just a part of regular peak traffic.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Application Load Balancers
  - Public-facing Web Servers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE baseline_mean and baseline_stddev for requests_per_minute by hour/day. CALCULATE z_score for current_rate. ALERT if z_score > 3 for 3 consecutive minutes.
- question: Has the observed request volume for an application significantly deviated from what a time-series forecasting model predicted?
  context: This question represents an advanced form of anomaly detection. Time-series models like ARIMA or Prophet can learn complex patterns, including seasonality and trends, to predict the expected range of traffic volume. When the actual traffic volume breaks through the upper boundary of this predicted range, it provides a high-fidelity signal that an unexpected event, such as a DoS attack, is occurring.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Application Load Balancers
  - Public-facing Web Servers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT historical_request_rate into time_series_model. PREDICT expected_rate and confidence_interval for next_minute. ALERT if actual_rate > upper_bound_of_confidence_interval.
- question: Did a critical application error or resource exhaustion event occur on a server shortly after a network-level DoS alert was triggered for that same server?
  context: This question seeks to directly link a network-level anomaly to its actual impact on an application. Correlating a network DoS alert with a subsequent critical server event (like an application crash) within a short time window provides strong evidence that the attack is successful and is causing tangible harm, justifying immediate escalation.
  answer_sources:
  - Windows Event Log
  - Zeek conn.log
  - SIEM Alerts
  - Public-facing Web Servers
  - Backend Application Servers
  - Database Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TRIGGER on network_dos_alert for destination_host. SEARCH for Windows_Event_ID (1000, 2004) on destination_host within 5 minutes of alert_time. CREATE correlated_incident.
- question: Has there been a statistically improbable increase in the number of application error or resource exhaustion events on a server?
  context: This question attempts to detect the impact of a DoS attack even without a corresponding network alert. By modeling the normal rate of critical errors using a Poisson distribution, we can identify when a spike in these errors is statistically significant and not just random chance, pointing to a potential underlying issue like an exhaustion attack.
  answer_sources:
  - Windows Event Log
  - Zeek conn.log
  - SIEM Alerts
  - Public-facing Web Servers
  - Backend Application Servers
  - Database Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE baseline_rate of critical_events per server/hour. MODEL with Poisson distribution. ALERT if observed_event_count in an hour has p_value < 0.01.
- question: Do critical server error events form a dense temporal cluster that coincides with a separately detected network anomaly?
  context: This question uses unsupervised machine learning to find non-obvious relationships between events. A clustering algorithm like DBSCAN can identify when a burst of server errors occurs in a short period. If this cluster of "impact" events temporally overlaps with an anomaly detected by a network-focused model, it creates a powerful, high-confidence signal that links the network behavior to its server-side consequences.
  answer_sources:
  - Windows Event Log
  - Zeek conn.log
  - SIEM Alerts
  - Public-facing Web Servers
  - Backend Application Servers
  - Database Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: APPLY DBSCAN to server_events (hostname, event_id, timestamp). IF dense_error_cluster is found, CHECK for overlap with network_anomaly_timeframe on the same host. ESCALATE if overlap exists.
- question: Is any single source IP making an excessive number of requests to a known resource-intensive API endpoint within a short time frame?
  context: This question focuses on a common attack vector where adversaries target computationally expensive application functions (like search queries or report generation) to exhaust server resources with minimal network traffic. A simple threshold rule can catch blatant abuse of these specific, pre-identified endpoints.
  answer_sources:
  - Zeek http.log
  - API Gateways
  - Application Logic Servers
  - Microservices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: COUNT requests per source_ip per minute to URIs in resource_intensive_list. ALERT if count > 50.
- question: Is a source IP's request rate to a resource-intensive endpoint statistically extreme compared to all other users of that same endpoint?
  context: This question improves upon the static threshold by creating a dynamic, peer-based baseline. Instead of a fixed number, it identifies a source IP as an outlier if its request rate is far greater than that of other users (e.g., in the top 0.5%). This approach adapts to changing usage patterns and is more effective at finding abusive behavior relative to the norm.
  answer_sources:
  - Zeek http.log
  - API Gateways
  - Application Logic Servers
  - Microservices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each resource_intensive_uri, CALCULATE 99.5th_percentile of requests_per_source_ip over 5_min_window. ALERT if any source_ip's count > threshold.
- question: Does a user session exhibit behavior that is a significant outlier even when compared to legitimate 'heavy users' of the application?
  context: This question refines outlier detection by first using clustering to understand different types of normal user behavior, including legitimate "power users." The model can then identify sessions that are not just heavy, but abnormally heavy or focused in a way that deviates significantly from even the most active legitimate users, indicating a likely attack.
  answer_sources:
  - Zeek http.log
  - API Gateways
  - Application Logic Servers
  - Microservices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER user_sessions with K-Means based on session_features. IDENTIFY 'heavy_user' cluster centroid. FLAG new sessions that are statistical outliers from this centroid.
- question: Are there any HTTP requests with abnormally large body or URI lengths targeting our application?
  context: This question targets specific exploit techniques where an attacker sends a request with an unusually large payload or a very long URI to overwhelm the application's parsers or memory buffers. Detecting these oversized requests can be a simple and effective signature for certain types of application exhaustion attacks.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing Web Servers
  - API Gateways
  - Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek_http_logs WHERE request_body_len > 10MB OR uri_length > 2048. ALERT on match.
- question: Is any source IP sending highly repetitive requests at a machine-like speed?
  context: This question combines two statistical indicators to identify automated behavior. A very short time between requests (low inter-arrival time) suggests automation, while very low URI entropy indicates the requests are repetitive. The combination of these two factors is a strong signal of a scripted attack, as it's behavior a human user cannot replicate.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing Web Servers
  - API Gateways
  - Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each source_ip, CALCULATE avg_inter_request_time and uri_entropy over 1_min_window. ALERT if avg_inter_request_time < 100ms AND uri_entropy < 1.0.
- question: Can we detect anomalous and potentially malicious requests by identifying outliers across multiple request features simultaneously?
  context: This question uses an unsupervised anomaly detection algorithm, Isolation Forest, which is particularly good at finding "needles in a haystack." By analyzing multiple dimensions of a request at once (body length, request timing, URI entropy, byte ratios), it can identify novel or unusual combinations of features that may represent a new attack technique, without needing to be trained on that specific attack beforehand.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing Web Servers
  - API Gateways
  - Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT multi-feature_request_data (body_len, time_delta, entropy, byte_ratio) into Isolation_Forest_model. ALERT on requests flagged as anomalies.