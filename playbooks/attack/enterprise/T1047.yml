name: T1047: Windows Management Instrumentation
id: 17075258-295b-4c4c-a496-d6676831d45c
description: This playbook helps determine if an adversary is executing commands or payloads using Windows Management Instrumentation (WMI). It focuses on detecting malicious WMI usage through several avenues: analyzing command-line arguments and script blocks for known malicious strings, obfuscation, or high entropy; identifying the invocation of sensitive WMI classes and methods used for execution or persistence; monitoring for anomalous network traffic on WMI-related ports that could indicate lateral movement; correlating remote logon events with subsequent WMI executions; and identifying WMI processes spawned by unusual parent processes like office applications or web browsers.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there WMI-related command lines or script blocks that contain known malicious strings or patterns?
    context: This question aims to find direct evidence of malicious WMI usage by scanning process command-line arguments (from Windows Event ID 4688) and PowerShell script block logs (from Windows Event ID 4104). The scan looks for specific, known-bad regular expressions or strings, such as 'wmic.exe shadowcopy delete', 'process call create', or PowerShell obfuscation flags like '-e', '-enc', or '-EncodedCommand'. A match provides a high-confidence indicator that an adversary is using WMI for execution.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Windows PowerShell Event ID 4103
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs (event_id=4688) OR powershell_script_block_logs (event_id=4104)
          WHERE (process_name='wmic.exe' OR command_line CONTAINS 'Get-WmiObject' OR command_line CONTAINS 'Invoke-WmiMethod')
          AND command_line MATCHES REGEX ('shadowcopy delete', 'process call create', '-e', '-enc', '-EncodedCommand')
  - question: Are there any WMI-related command lines or script blocks exhibiting unusually high character entropy, suggesting obfuscation?
    context: This question seeks to identify obfuscated WMI commands that attackers use to hide their actions. By calculating the Shannon entropy for command-line arguments of 'wmic.exe' and the content of PowerShell WMI script blocks, we can spot commands that are unusually random or complex. An entropy score that is significantly higher than the established baseline for a specific host (e.g., above the 95th percentile) strongly suggests that the command is intentionally obfuscated to evade detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Windows PowerShell Event ID 4103
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH host:
            BASELINE = calculate_historical_entropy_for_wmi_commands(host)
          SEARCH process_creation_logs (event_id=4688) OR powershell_script_block_logs (event_id=4104)
          LET current_entropy = calculate_shannon_entropy(command_line)
          WHERE current_entropy > BASELINE.mean + (3 * BASELINE.std_dev)
          ALERT on high_entropy_command
  - question: Can a machine learning model identify WMI command lines as malicious based on their features?
    context: This question leverages a machine learning approach to proactively score and identify malicious WMI commands in near real-time. A pre-trained logistic regression classifier analyzes new WMI-related command lines, using features like command length, character distribution, Shannon entropy, and the presence of keywords (e.g., 'Create', 'Invoke', '-enc', 'Win32_Process'). This allows for the detection of novel or evolving malicious commands that may not match known string or entropy signatures.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Windows PowerShell Event ID 4103
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH new_wmi_command:
            FEATURES = extract_features(command_line)
            SCORE = ml_model.predict_proba(FEATURES)
            IF SCORE > high_confidence_threshold:
              ALERT on potentially_malicious_command
  - question: Has a sensitive WMI class known for malicious use, such as for persistence or defense evasion, been invoked?
    context: This question focuses on detecting the use of specific WMI classes and methods that are strongly associated with malicious activity. By monitoring WMI activity logs (Event ID 5861) and command lines, we can create high-severity alerts for the creation of a '__FilterToConsumerBinding' instance (a classic persistence technique) or explicit calls to 'Win32_Process.Create' (for execution) and 'Win32_ShadowCopy.Delete' (for defense evasion).
    answer_sources:
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5861
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Domain Controllers
      - Critical Application Servers
      - Management Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH wmi_activity_logs (event_id=5861) OR process_creation_logs (event_id=4688)
          WHERE wmi_operation CONTAINS '__FilterToConsumerBinding'
          OR command_line CONTAINS 'Win32_Process.Create'
          OR command_line CONTAINS 'Win32_ShadowCopy.Delete'
  - question: Are there invocations of WMI class/method pairs that are statistically rare for a specific host, user, or the entire enterprise?
    context: This question aims to find unusual WMI activity that deviates from established norms. By baselining the frequency of all WMI (class, method) pairs used by each host and user, we can detect when a combination is observed that is statistically rare for that entity or for the organization as a whole (e.g., used less than 1% of the time). This can uncover novel or targeted attacks that don't use commonly known malicious classes.
    answer_sources:
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5861
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Domain Controllers
      - Critical Application Servers
      - Management Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = calculate_historical_frequency_of_wmi_class_method_pairs()
          SEARCH wmi_activity_logs
          LET current_pair = (class, method)
          IF frequency(current_pair) IN BASELINE is less than 1%:
            ALERT on rare_wmi_activity
  - question: Can an unsupervised machine learning model detect anomalous sequences of WMI calls?
    context: This question applies machine learning to detect anomalous patterns in WMI activity over time. An unsupervised autoencoder model is trained on sequences of WMI class and method calls from normal system activity. When a new sequence of WMI calls is observed, the model attempts to reconstruct it. A high reconstruction error indicates that the sequence is a significant deviation from learned normal behavior and could represent a novel malicious attack pattern.
    answer_sources:
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5861
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Domain Controllers
      - Critical Application Servers
      - Management Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH new_wmi_call_sequence:
            RECONSTRUCTION_ERROR = autoencoder_model.evaluate(sequence)
            IF RECONSTRUCTION_ERROR > anomaly_threshold:
              ALERT on anomalous_wmi_sequence
  - question: Is there WMI-related network traffic between hosts that are not on an approved communication allow-list?
    context: This question seeks to identify unauthorized lateral movement using WMI. By maintaining a strict allow-list of approved management servers (like SCCM) and their typical targets, any network connection on WMI ports (TCP/135, 5985, 5986) where the source-destination pair is not on the list should be flagged. This is especially critical for workstation-to-workstation traffic, which is highly indicative of an intruder moving through the network.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Network Egress/Ingress Points
      - Core Network Switches
      - Server VLANs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALLOW_LIST = load_approved_wmi_source_destination_pairs()
          SEARCH network_connection_logs
          WHERE destination_port IN (135, 5985, 5986)
          AND (source_ip, destination_ip) NOT IN ALLOW_LIST
          ALERT on unauthorized_wmi_traffic
  - question: Is there an anomalous volume or count of WMI-related network connections compared to historical baselines?
    context: This question helps detect large-scale WMI activity, such as a lateral movement sweep or data transfer. By using a time series forecasting model (like SARIMA) on network connection data, we can predict the expected byte volume and connection count for WMI ports. An alert is triggered when observed traffic in a short interval (e.g., 5 minutes) significantly exceeds the 99th percentile of the forecasted value, indicating a potential mass-scale event.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Network Egress/Ingress Points
      - Core Network Switches
      - Server VLANs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FORECAST_MODEL = train_timeseries_model_on_wmi_traffic_volume()
          SEARCH network_connection_logs in 5_minute_window
          LET current_volume = sum(bytes) WHERE destination_port IN (135, 5985, 5986)
          LET forecast_upper_bound = FORECAST_MODEL.predict_99th_percentile()
          IF current_volume > forecast_upper_bound:
            ALERT on wmi_traffic_volume_spike
  - question: Can a graph-based model detect anomalous WMI network communication patterns, such as new connections between host groups or the emergence of pivot hosts?
    context: This question uses graph analytics to find sophisticated lateral movement. The network is modeled as a graph where hosts are nodes and WMI connections are edges. Anomaly detection algorithms can then identify the formation of new edges between previously disconnected communities of hosts (e.g., a dev workstation connecting to a finance server via WMI) or a sudden increase in a node's centrality, which suggests it is being used as a pivot point for an attack.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Network Egress/Ingress Points
      - Core Network Switches
      - Server VLANs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GRAPH = build_host_communication_graph_from_wmi_logs()
          DETECT new_edges_between_disparate_communities(GRAPH)
          DETECT nodes_with_sudden_increase_in_centrality(GRAPH)
          ALERT on structural_anomalies
  - question: Is a remote network logon immediately followed by WMI-based process execution from the same source IP?
    context: This question aims to directly link a remote authentication event with a subsequent remote execution action, which is a classic lateral movement pattern. A correlation rule is created to detect when a successful remote logon (Logon Type 3, Event ID 4624) is followed within a short window (e.g., 5 minutes) by a WMI-driven process creation on the same target host, where the source IP address in both events match. This provides strong evidence of interactive remote compromise.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek conn.log
      - Authentication Servers (Domain Controllers)
      - High-Value Servers
      - Endpoint Subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for successful_logon (event_id=4624, logon_type=3)
          WITHIN 5 minutes, SEARCH for wmi_process_creation on same_host
          WHERE logon.source_ip == wmi_process.remote_source_ip
          ALERT on correlated_remote_execution
  - question: Has a remote WMI session occurred from a source host, to a destination host, or at a time that is anomalous for that user account?
    context: This question seeks to identify credential abuse by detecting when a user's account is used for WMI activity that is abnormal for them. By profiling each user's typical remote WMI usage (common source/destination pairs and times), we can use statistical methods like the interquartile range (IQR) to define normal behavior. An alert is triggered if a session involves a source or destination host that is an outlier, or occurs at an unusual time, suggesting the user's credentials may be compromised.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek conn.log
      - Authentication Servers (Domain Controllers)
      - High-Value Servers
      - Endpoint Subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH user:
            PROFILE = build_wmi_session_profile(user)
          FOR EACH new_wmi_session for user:
            IF session.source_ip IS OUTLIER in PROFILE.sources
            OR session.destination_host IS OUTLIER in PROFILE.destinations
            OR session.time IS OUTLIER in PROFILE.times:
              ALERT on anomalous_user_wmi_session
  - question: Can a clustering model identify a remote WMI session as anomalous or as 'noise' compared to established patterns of normal activity?
    context: This question uses unsupervised machine learning to find novel remote WMI attacks. A clustering algorithm like DBSCAN groups historical remote WMI sessions into clusters of "normal" behavior based on features like source IP, destination host, user role, and time. Any new session that does not belong to an established cluster is classified as "noise" and flagged as a high-confidence anomaly, allowing for the detection of attacks that do not fit any known pattern.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek conn.log
      - Authentication Servers (Domain Controllers)
      - High-Value Servers
      - Endpoint Subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTERS = dbscan_model.fit(historical_wmi_sessions)
          FOR EACH new_wmi_session:
            PREDICTION = CLUSTERS.predict(new_wmi_session)
            IF PREDICTION == 'noise':
              ALERT on unclassified_wmi_session
  - question: Has a WMI process (wmic.exe, powershell.exe) been launched by an unusual parent process, such as an Office application or web browser?
    context: This question looks for a common sign of compromise where malware embedded in a document or web page spawns a command-line tool. A detection rule should check the parent process of 'wmic.exe' or PowerShell (when running WMI cmdlets). If the parent is not on a strict allow-list of expected processes (e.g., 'cmd.exe', 'explorer.exe', 'services.exe'), it is suspicious. A parent like 'WINWORD.EXE', 'OUTLOOK.EXE', or a browser process should be treated as a critical-severity alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALLOW_LIST = ['cmd.exe', 'explorer.exe', 'services.exe', 'taskeng.exe']
          SEARCH process_creation_logs
          WHERE child_process IN ('wmic.exe', 'powershell.exe')
          AND parent_process NOT IN ALLOW_LIST
          ALERT on suspicious_parent_process
  - question: Has a WMI-related process been created by a parent process that represents a statistically rare parent-child relationship in the environment?
    context: This question provides a statistical method for finding unusual process execution chains involving WMI. By analyzing historical process creation logs, we can calculate the probability of a given parent process spawning a WMI-related child process. If a parent-child pair is observed that has a very low historical probability (e.g., <0.01%), it indicates a rare and potentially malicious execution chain, even if the parent process itself is not inherently suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROBABILITIES = calculate_historical_parent_child_probabilities()
          SEARCH process_creation_logs
          WHERE child_process involves WMI
          LET probability = PROBABILITIES.get(parent_process, child_process)
          IF probability < 0.01%:
            ALERT on rare_process_lineage
  - question: Can a machine learning model classify a parent-child process relationship involving WMI as malicious?
    context: This question uses a supervised machine learning model to predict whether a process creation event involving WMI is malicious. A pre-trained random forest classifier analyzes features from both the parent and child process, such as their names, paths, integrity levels, and the child's command line content. This allows for real-time classification of process events, enabling the detection of sophisticated attacks where an adversary might use an otherwise legitimate parent process to launch their WMI-based payload.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH new_process_creation_event involving WMI:
            FEATURES = extract_features(parent_process, child_process)
            SCORE = random_forest_model.predict(FEATURES)
            IF SCORE == 'malicious':
              ALERT on ml_detected_malicious_process_creation