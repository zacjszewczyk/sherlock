name: T1037.004: RC Scripts
id: 9c5b8e1a-3d7f-4b6e-8a9c-1f2a3b4c5d6e
description: This playbook investigates the malicious use of RC scripts (e.g., /etc/rc.local, /etc/init.d/) on Unix/Linux systems for establishing persistence and escalating privileges. Adversaries modify these startup scripts to ensure their code executes automatically with elevated permissions upon system reboot. Key investigative methods include monitoring for suspicious file modifications and transfers via SSH/SCP, analyzing process command lines on both Windows and Unix systems for attempts to edit RC files, and detecting anomalous post-reboot behavior such as unusual process execution or network beaconing to command-and-control servers.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious IP address connected to a Unix/Linux host via SSH and transferred a file with a known malware hash?
    context: This question aims to detect the direct delivery of malware to a system via a secure channel (SSH/SCP). By correlating network connections from threat-listed IPs with file transfers containing malicious hashes, we can identify a high-confidence instance of an adversary placing a malicious payload, potentially intended for persistence via an RC script.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Internet gateways
      - Demilitarized zones (DMZ)
      - Critical Unix/Linux server segments (e.g., ESXi management networks, web server farms)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek conn.log WHERE dest_port = 22 AND source_ip IN malicious_ip_list
          JOIN uid ON Zeek files.log
          WHERE file_hash IN malicious_hash_list
          RETURN source_ip, dest_ip, file_hash, filename
  - question: Is there an SSH connection originating from a statistically rare country or Autonomous System Number (ASN) compared to our 30-day baseline?
    context: This question looks for anomalies in the geographic or network origin of SSH connections. Adversaries often operate from infrastructure that is not typically used for legitimate administration. A connection from a country or network (ASN) that rarely or never connects to the environment is a strong indicator of suspicious activity.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Internet gateways
      - Demilitarized zones (DMZ)
      - Critical Unix/Linux server segments (e.g., ESXi management networks, web server farms)
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Generation (run periodically)
          BASELINE ssh_connections OVER 30d
          AGGREGATE COUNT by source_country, source_asn
          STORE frequency_distribution
          // Real-time Alerting
          SEARCH Zeek conn.log WHERE dest_port = 22
          IF connection.source_country OR connection.source_asn IN bottom 1% of frequency_distribution
          THEN ALERT
  - question: Is SSH traffic to critical Unix hosts deviating significantly from established patterns, especially outside of normal business hours?
    context: This question uses time-series anomaly detection to identify SSH traffic that does not conform to historical norms. A sudden spike in connection volume or data transfer size, particularly at odd hours, can indicate an adversary's interactive session or large file transfer, which could be related to modifying RC scripts for persistence.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Internet gateways
      - Demilitarized zones (DMZ)
      - Critical Unix/Linux server segments (e.g., ESXi management networks, web server farms)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training (offline)
          TRAIN time_series_model ON historical_ssh_traffic_volume(count, bytes) TO critical_hosts
          // Real-time Anomaly Detection
          MONITOR live_ssh_traffic_volume
          IF observed_traffic DEVIATES SIGNIFICANTLY from model_forecast
          THEN ALERT with deviation_score, time_of_day
  - question: Is a remote administration tool on a Windows host being used to modify a common RC script path on a Unix/Linux system?
    context: This is a high-fidelity question that looks for a specific, suspicious behavior: a Windows user employing a tool like SCP or SSH to directly reference and likely modify a Unix RC script. This action is a strong indicator of an attempt to establish persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows administrative workstations
      - Windows jump servers/bastion hosts
      - Endpoint devices of system administrators and developers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Windows Event ID 4688
          WHERE process_name IN ('scp.exe', 'sftp.exe', 'plink.exe', 'ssh.exe')
          AND command_line MATCHES REGEX '(\/etc\/rc\.(local|common|d))|(\/etc\/init\.d\/)'
          RETURN hostname, user, process_name, command_line
  - question: Has a remote administration tool been executed with a statistically rare command line that includes keywords related to file modification on Unix systems?
    context: This question aims to find novel or unusual command-line executions of remote admin tools. Adversaries may use unique combinations of arguments or target uncommon paths. By baselining normal command-line patterns, we can spot outliers that may represent malicious activity, especially those containing file redirection or system path keywords.
    answer_sources:
      - Windows Event ID 4688
      - Windows administrative workstations
      - Windows jump servers/bastion hosts
      - Endpoint devices of system administrators and developers
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Generation
          BASELINE command_lines FOR remote_admin_tools OVER 30d
          CALCULATE frequency of unique patterns
          // Real-time Alerting
          SEARCH Windows Event ID 4688 for remote_admin_tools
          IF command_line_pattern IS RARE or NEW
          AND command_line CONTAINS ('echo', '>', '>>', '/etc/')
          THEN ALERT
  - question: Does a command line involving a remote administration tool have a high probability of being malicious based on a trained classification model?
    context: This question applies a machine learning model to proactively score the risk of every remote administration command. By training a model on features like command length, special characters, and keyword frequency, we can identify potentially malicious commands that may not be caught by simple signature-based rules.
    answer_sources:
      - Windows Event ID 4688
      - Windows administrative workstations
      - Windows jump servers/bastion hosts
      - Endpoint devices of system administrators and developers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Real-time Scoring
          FOR EACH new Windows Event ID 4688 with remote_admin_tool
          EXTRACT features (length, special_chars, entropy, keywords) from command_line
          SCORE with trained_classification_model
          IF score > malicious_threshold
          THEN ALERT
  - question: Has a connection been made to a critical Unix server from a workstation not authorized for administrative access?
    context: This question enforces access control policy at the network level. A connection from an unauthorized source to a critical server on an administrative port like 22 is a significant security violation and could be the precursor to an adversary modifying system files like RC scripts.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - ESXi management networks
      - Virtualization infrastructure
      - Core network switches and routers monitoring traffic to critical servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE asset_group admin_workstations
          DEFINE asset_group critical_unix_servers
          SEARCH Zeek conn.log WHERE dest_port = 22
          AND source_ip NOT IN admin_workstations
          AND dest_ip IN critical_unix_servers
          THEN ALERT
  - question: Has an SSH/SCP session to a critical Unix host involved an anomalously large data transfer compared to its specific baseline?
    context: This question focuses on the volume of data transferred during a connection. While a legitimate admin might transfer a small configuration file, an adversary might exfiltrate large amounts of data or transfer a large malicious tool. A significant deviation from the normal data transfer size for a specific source-destination pair is highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - ESXi management networks
      - Virtualization infrastructure
      - Core network switches and routers monitoring traffic to critical servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Generation
          FOR EACH unique ssh_pair (source_ip, dest_ip)
          BASELINE data_transfer_volume (orig_bytes + resp_bytes) OVER 90d
          // Real-time Alerting
          SEARCH Zeek conn.log WHERE dest_port = 22 AND dest_ip IS critical
          IF session_bytes > 95th_percentile of baseline for (source_ip, dest_ip)
          THEN ALERT
  - question: Is there a network session to a critical server that is anomalous across multiple dimensions like time, source, and data volume?
    context: This question uses an unsupervised machine learning model to find connections that are outliers in a multi-dimensional space. A connection might not be anomalous on any single feature, but the combination of its attributes (e.g., non-admin source, late-night connection, medium-sized transfer) makes it highly suspicious. This is effective at finding novel attack patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - ESXi management networks
      - Virtualization infrastructure
      - Core network switches and routers monitoring traffic to critical servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Real-time Anomaly Detection
          FOR EACH new connection TO critical_server
          EXTRACT features (source_ip, time_of_day, day_of_week, duration, bytes, is_admin_host)
          SCORE with isolation_forest_model
          IF score IS an outlier
          THEN ALERT
  - question: Following a reboot, is a critical Unix host communicating with a known command-and-control (C2) server or a newly registered domain?
    context: This question checks for post-reboot beaconing, a classic sign of persistence. If an adversary has successfully modified an RC script, the malicious code will execute on startup and attempt to connect to its C2 infrastructure. Correlating a reboot event with outbound connections to known-bad destinations is a high-confidence indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Syslog
      - Internet gateways
      - Egress points of the network
      - DNS resolvers
      - Centralized log aggregators (SIEM)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON reboot_event FROM syslog FOR critical_host
          MONITOR Zeek conn.log AND dns.log FROM critical_host.ip
          IF outbound_dest_ip IN c2_threat_feed
          OR outbound_dns_query IN (malicious_domain_feed, newly_registered_domain_feed)
          THEN ALERT
  - question: After a reboot, is a critical Unix host establishing a new, persistent connection with low jitter, indicative of automated beaconing?
    context: This question hunts for the rhythmic, machine-like pattern of C2 beaconing. Unlike human-generated traffic, automated malware check-ins often occur at regular intervals. By identifying new, persistent connections and measuring the timing between packets (jitter), we can detect this automated behavior that signifies a successful persistence mechanism.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Syslog
      - Internet gateways
      - Egress points of the network
      - DNS resolvers
      - Centralized log aggregators (SIEM)
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline known destinations for each host over 30d
          ON reboot_event FROM syslog FOR critical_host
          MONITOR for new, persistent outbound connections
          FOR each new connection
          CALCULATE standard_deviation of time_intervals between packets
          IF std_dev is very low
          THEN ALERT 'Potential C2 Beaconing Detected'
  - question: Following a system reboot, does the network traffic pattern of a critical host show a new, strong periodic signal not explained by historical trends?
    context: This question applies advanced time-series analysis to detect hidden beaconing activity. A decomposition model can separate normal network traffic into trend and seasonal components. A strong, regular pattern in the remaining "residual" data after a reboot suggests a new, automated process (like malware from an RC script) has begun operating on the host.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Syslog
      - Internet gateways
      - Egress points of the network
      - DNS resolvers
      - Centralized log aggregators (SIEM)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline model from historical traffic
          DECOMPOSE outbound_traffic_metrics into trend, seasonality, residual
          // Post-reboot analysis
          ON reboot_event
          ANALYZE residual component of new traffic
          IF residual shows strong periodic signal
          THEN ALERT 'Anomalous Periodic Signal Detected Post-Reboot'
  - question: Was a file transferred to a Unix/Linux host that matches the hash or filename of a known privilege escalation exploit?
    context: This question searches for the direct transfer of tools used for privilege escalation. Catching the delivery of a file named 'dirtycow.c' or one whose hash matches a known exploit provides early warning that an attacker is attempting to escalate their privileges on the target system.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network taps monitoring traffic between workstations and server segments
      - File transfer proxies
      - DMZ
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek files.log
          WHERE (filename MATCHES REGEX '.*dirty.*\\.c|linux.*\\.sh|exploit\\.py')
          OR (file_hash IN known_exploit_hash_feed)
          RETURN source_ip, dest_ip, filename, file_hash
  - question: Was a file with a rare type or size transferred to a Unix system, suggesting it might be an exploit tool?
    context: This question performs anomaly detection on file transfers. An adversary might transfer a C compiler source file to an ESXi host, which is highly unusual. By baselining the typical file types (MIME types) and sizes for different assets, we can flag transfers that deviate from the norm and may represent exploit delivery.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network taps monitoring traffic between workstations and server segments
      - File transfer proxies
      - DMZ
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline file transfer profiles (mime_type, size) per host
          SEARCH Zeek files.log for transfers to Unix hosts
          IF file.mime_type IS RARE for dest_host
          OR file.size > 99th_percentile for dest_host
          THEN ALERT
  - question: Does a file transfer to a Unix system have a high probability of being malicious based on a trained classification model?
    context: This question uses a machine learning model to assess the risk of a file transfer based on its metadata. By considering features like the source, destination, MIME type, and asset criticality, the model can learn to distinguish between benign administrative transfers and suspicious transfers that could be part of an attack, such as delivering an exploit to be executed via an RC script.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network taps monitoring traffic between workstations and server segments
      - File transfer proxies
      - DMZ
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH new file transfer in Zeek files.log
          EXTRACT features (source, dest, mime_type, size, asset_context)
          SCORE with trained_file_transfer_model
          IF score > malicious_threshold
          THEN ALERT
  - question: Was a remote shell command from a Windows host observed attempting to write to a system RC script using a redirection operator?
    context: This question looks for a very specific and high-confidence indicator of an adversary modifying a startup script. The combination of a remote shell tool (like ssh.exe), a redirection operator ('>' or '>>'), and a path to a critical RC script in the command line is a clear sign of an attempt to establish persistence or escalate privileges.
    answer_sources:
      - Windows Event ID 4688
      - Windows administrative workstations
      - Windows jump servers/bastion hosts
      - Domain Controllers (for auditing originating user context)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Windows Event ID 4688
          WHERE process_name IN ('ssh.exe', 'plink.exe')
          AND command_line CONTAINS '>>' OR '>'
          AND command_line CONTAINS '/etc/rc.'
          TRIGGER HIGH PRIORITY ALERT
  - question: Did a remote shell command modify a sensitive and infrequently accessed system file path?
    context: This question identifies suspicious file modifications by focusing on rarity. Legitimate administrators typically interact with a predictable set of files. An adversary, however, might modify a sensitive system file that is rarely touched. By baselining file path access frequency, we can alert when a command targets an unusual and sensitive path like an RC script.
    answer_sources:
      - Windows Event ID 4688
      - Windows administrative workstations
      - Windows jump servers/bastion hosts
      - Domain Controllers (for auditing originating user context)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline file path access frequency from command lines
          SEARCH Windows Event ID 4688 for remote shell commands
          PARSE file paths from command_line
          IF modified_path IN bottom 5% of access frequency
          AND is_sensitive_path (e.g., '/etc/rc.local')
          THEN ALERT
  - question: Does an NLP model classify a remote shell command line as a 'malicious modification' attempt?
    context: This question leverages Natural Language Processing (NLP) to understand the intent behind a command line. By converting commands into numerical vectors (TF-IDF) and training a classifier, the system can learn the nuanced patterns of malicious commands, such as the combination of tools (`echo`, `curl`), redirection, and sensitive paths, providing a sophisticated layer of detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows administrative workstations
      - Windows jump servers/bastion hosts
      - Domain Controllers (for auditing originating user context)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH new remote shell command_line
          VECTORIZE command_line using TF-IDF model
          CLASSIFY vector with trained_svm_model
          IF classification IS 'malicious modification'
          THEN ALERT
  - question: Did a non-root user session escalate to root and then modify a system RC script?
    context: This question correlates user-level activity with system-level impact. It traces a session from a non-root user, detects a privilege escalation event (e.g., via `sudo`), and links it to a subsequent modification of a critical RC script. This sequence of events provides a clear narrative of a privilege escalation attack leading to persistence.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Unix/Linux Audit Logs
      - Centralized log aggregation platform (SIEM)
      - Critical Unix/Linux servers
      - Windows administrative workstations
      - Domain Controllers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Unix auditd logs for write syscall to '/etc/rc.*'
          CORRELATE with process logs to find user context
          IF initial_user_id != 0 AND effective_user_id = 0
          CORRELATE network session via Zeek conn.log
          IF source_ip IS NOT an admin host
          THEN ALERT 'Privilege Escalation to Modify RC Script'
  - question: Has a high-risk file modification event occurred on a Unix host, based on a cumulative risk score?
    context: This question moves beyond single indicators to a holistic risk assessment. By scoring file modification events based on multiple factors—user privileges, path sensitivity, user behavior history, and source IP reputation—we can create a more robust detection mechanism that alerts only when the combined evidence points to a high-risk activity, reducing false positives.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Unix/Linux Audit Logs
      - Centralized log aggregation platform (SIEM)
      - Critical Unix/Linux servers
      - Windows administrative workstations
      - Domain Controllers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH file modification event on Unix host
          CALCULATE risk_score =
            score(user_privilege) +
            score(path_sensitivity) +
            score(is_unusual_for_user) +
            score(source_ip_reputation)
          IF risk_score > threshold
          THEN ALERT
  - question: Does a graph-based analysis show an unusual relationship, such as a standard user modifying a sensitive RC script?
    context: This question models user-file interactions as a graph to uncover anomalous connections. In a typical environment, users and the files they access form distinct communities (e.g., web admins and web server files). An edge in the graph connecting a node from a 'standard user' community to a node in a 'sensitive system file' community is a strong anomaly, representing a likely security breach.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Unix/Linux Audit Logs
      - Centralized log aggregation platform (SIEM)
      - Critical Unix/Linux servers
      - Windows administrative workstations
      - Domain Controllers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD graph of (users)-[modifies]->(files)
          APPLY community detection algorithm
          IF an edge connects a 'standard_user_community' node
          TO a 'sensitive_rc_script_community' node
          THEN ALERT 'Anomalous Cross-Community File Modification'
  - question: After a reboot, did a new, non-baselined process execute as root and subsequently make an outbound network connection to a malicious IP?
    context: This question provides a powerful, multi-stage check for persistence. It first identifies a new, unauthorized process running as root shortly after a reboot (a sign that a startup script was modified). It then confirms malicious intent by correlating this process with an outbound network connection to a known C2 server.
    answer_sources:
      - Zeek conn.log
      - Unix/Linux Audit Logs
      - Syslog
      - Critical Unix/Linux servers (for process and reboot logs)
      - Egress points of the network
      - Centralized log aggregation platform (SIEM)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON reboot_event
          MONITOR auditd for new processes running as root (uid=0) not in baseline
          IF new_root_process detected
          MONITOR Zeek conn.log for outbound connections from host
          IF connection_destination IN threat_intel_list
          THEN ALERT 'New Root Process Beaconing to C2 Post-Reboot'
  - question: Following a reboot, was a rare or anomalous parent-child process relationship observed, especially one that resulted in a network connection?
    context: This question hunts for anomalies in the process execution chain. Legitimate system startup follows a predictable process tree (e.g., `init` spawns `systemd`). An adversary's script might be launched by an unusual parent or might spawn an unexpected child process. Detecting these rare relationships, particularly when they lead to network activity, can uncover hidden persistence mechanisms.
    answer_sources:
      - Zeek conn.log
      - Unix/Linux Audit Logs
      - Syslog
      - Critical Unix/Linux servers (for process and reboot logs)
      - Egress points of the network
      - Centralized log aggregation platform (SIEM)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline normal parent-child relationships post-reboot
          ON reboot_event
          MONITOR auditd for process creation
          IF parent-child_relationship IS RARE or not in baseline
          AND child_process creates network_connection
          THEN ALERT 'Anomalous Process Tree Detected Post-Reboot'
  - question: After a system reboot, did the host's resource utilization (CPU, memory, network) significantly exceed the forecasted levels for a normal startup?
    context: This question uses resource consumption as an indicator of compromise. A malicious process added to a startup script will consume system resources (CPU, memory, network I/O) that were not present during previous, clean reboots. By modeling the expected resource utilization curve for a normal startup, we can alert when actual consumption significantly deviates, suggesting an unauthorized process is running.
    answer_sources:
      - Zeek conn.log
      - Unix/Linux Audit Logs
      - Syslog
      - Critical Unix/Linux servers (for process and reboot logs)
      - Egress points of the network
      - Centralized log aggregation platform (SIEM)
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Train model on historical resource usage during first hour post-reboot
          ON reboot_event
          MONITOR CPU, memory, network I/O, process count
          IF actual_usage consistently exceeds model's prediction_interval
          THEN ALERT 'Anomalous Resource Utilization Post-Reboot'