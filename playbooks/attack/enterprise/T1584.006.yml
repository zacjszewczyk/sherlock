name: T1584.006: Web Services
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is leveraging compromised or malicious third-party web services for resource development. This involves detecting network connections to known malicious infrastructure, identifying suspicious file downloads from these services, monitoring for anomalous data transfer volumes indicative of staging or exfiltration, and flagging unusual access to raw content on code repositories.
type: technique
related:
  - TA0042: Resource Development
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any network connections from our environment to known malicious domains, IPs, or URLs associated with abused web services?
    context: This question uses a symbolic detection approach by ingesting threat intelligence feeds of known malicious indicators. It aims to identify direct connections to adversary infrastructure by joining various network logs (connection, DNS, HTTP, SSL/TLS) and comparing destination details against the feed. A match generates a high-priority alert, indicating a confirmed link to a known threat.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Zeek dns.log
      - Egress points of the network (e.g., firewalls, proxies), DNS resolvers, and web gateways.
    range: last 90 days
    queries:
      - pseudocode: |
          JOIN (conn.log, http.log, ssl.log, dns.log) ON connection_uid
          SEARCH WHERE destination_ip OR dns_query OR http_host OR tls_sni IN threat_intel_feed
          ALERT on match
  - question: Is any host exhibiting an unusually high frequency of connections to common web services like GitHub, Pastebin, or Dropbox?
    context: This question uses a statistical approach to find anomalous behavior. It establishes a baseline of normal connection frequency from each host to common web services over 30 days. By calculating the 95th percentile, it can flag any host that suddenly starts communicating with these services far more often than usual, which could indicate automated C2 or staging activity.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Zeek dns.log
      - Egress points of the network (e.g., firewalls, proxies), DNS resolvers, and web gateways.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each source_host:
            BASELINE = calculate_95th_percentile(connection_count to web_services over last 30 days)
            CURRENT = count_connections in last 24 hours
            IF CURRENT > BASELINE THEN ALERT
  - question: Can we identify potentially malicious network connections to web services that are not yet on threat intelligence lists?
    context: This question applies a machine learning model to proactively identify suspicious activity. A supervised classification model is trained on labeled historical data using features like connection duration, data volume, and time of day. The deployed model scores new connections in real-time, assigning a probability of maliciousness, allowing analysts to investigate high-probability events that might be novel C2 channels or staging activities.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Zeek dns.log
      - Egress points of the network (e.g., firewalls, proxies), DNS resolvers, and web gateways.
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_classifier(features=[duration, bytes, protocol], labels=['benign', 'malicious'])
          FOR each new_connection:
            SCORE = MODEL.predict_proba(new_connection_features)
            IF SCORE > high_probability_threshold THEN INVESTIGATE
  - question: Have any files downloaded from a web service been identified as malicious based on their hash or suspicious PE characteristics?
    context: This question applies a symbolic detection strategy to identify known malicious files. It involves comparing the hash (MD5/SHA256) of every downloaded file against a threat intelligence feed. For executable files (PE), it also inspects metadata for suspicious signs like a missing compile time or unusual section names, which are common in malware. An alert is triggered on any match.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Windows Event ID 4688
      - Zeek pe.log
      - Endpoints receiving file downloads, network egress points where file transfers can be monitored, and sandboxing environments.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each file in files.log:
            IF file_hash IN malicious_hash_feed THEN ALERT
            IF file_is_pe AND (pe.compile_time is null OR pe.section_names are suspicious) THEN ALERT
  - question: Are we observing downloaded files with unusually high entropy, potentially indicating they are packed or encrypted?
    context: This question uses a statistical method to find potentially malicious files that may not have a known hash. By calculating the Shannon entropy of a file's content, we can measure its randomness. Packed or encrypted payloads have high entropy. We establish a baseline entropy for normal file types (e.g., PDF, JPEG) and flag any file that deviates significantly (e.g., >3 standard deviations), as it may be an obfuscated malicious payload.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Windows Event ID 4688
      - Zeek pe.log
      - Endpoints receiving file downloads, network egress points where file transfers can be monitored, and sandboxing environments.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each file_type:
            BASELINE_ENTROPY = calculate_mean_and_stddev(entropy of historical files)
          FOR each new_file:
            IF file_entropy > (BASELINE_ENTROPY.mean + 3 * BASELINE_ENTROPY.stddev) THEN ALERT
  - question: Is any host exhibiting an anomalous rate of file downloads from web services, suggesting automated fetching of tools or data?
    context: This question uses a machine learning approach to detect behavioral anomalies. A time-series anomaly detection model (like an LSTM autoencoder) is trained on historical data to learn the normal rhythm and volume of file downloads for each host. The model then monitors activity in real-time and alerts when it detects a significant deviation from the learned pattern, which could indicate an adversary's script automatically downloading tools or staging data.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Windows Event ID 4688
      - Zeek pe.log
      - Endpoints receiving file downloads, network egress points where file transfers can be monitored, and sandboxing environments.
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_lstm_autoencoder(historical_download_rates_per_host)
          FOR each host's current_download_rate:
            RECONSTRUCTION_ERROR = MODEL.evaluate(current_download_rate)
            IF RECONSTRUCTION_ERROR > anomaly_threshold THEN ALERT
  - question: Are there any connections to high-risk or less common file sharing services from unauthorized systems or user groups?
    context: This is a symbolic detection question focused on policy enforcement and high-risk behavior. It creates a specific rule to watch for any network connection to a curated list of less common or high-risk file sharing sites (e.g., mega.nz, sendspace.com). An alert is triggered if the connection originates from a sensitive area, like a server subnet, or from a user group with no legitimate business need for such services.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Security Event ID 4624
      - Network egress points, user endpoint devices, and Cloud Access Security Broker (CASB) logs.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each ssl_connection:
            IF server_name IN high_risk_fileshare_list AND source_ip IN restricted_subnet THEN ALERT
  - question: Has any host uploaded an unusually large volume of data to cloud storage services compared to its normal behavior?
    context: This question uses a statistical approach to detect potential data exfiltration. It establishes a 30-day rolling baseline of the normal daily data upload volume for each host to known cloud services. By calculating a high-percentile threshold (e.g., 99th), it can automatically flag any day where a host's upload volume is exceptionally large, indicating a possible bulk data transfer.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Security Event ID 4624
      - Network egress points, user endpoint devices, and Cloud Access Security Broker (CASB) logs.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each source_host:
            BASELINE = calculate_99th_percentile(daily_upload_bytes over last 30 days)
            TODAYS_UPLOAD = sum_bytes_sent today
            IF TODAYS_UPLOAD > BASELINE THEN ALERT
  - question: Can we automatically cluster and identify anomalous connection patterns to cloud services that may indicate C2 or data exfiltration?
    context: This question uses an unsupervised machine learning algorithm (like DBSCAN) to discover hidden patterns in network traffic to cloud services. By clustering connections based on features like duration, data volume, byte ratios, and timing, the model can automatically group them into 'normal' activity (e.g., small, infrequent syncs) and 'anomalous' activity (e.g., large, sustained, periodic transfers). New connections that fall into an anomalous cluster are flagged for review.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Security Event ID 4624
      - Network egress points, user endpoint devices, and Cloud Access Security Broker (CASB) logs.
    range: last 90 days
    queries:
      - pseudocode: |
          CLUSTERS = dbscan(data=cloud_connections, features=[duration, total_bytes, byte_ratio, periodicity])
          LABEL clusters as 'normal' or 'anomalous'
          FOR each new_connection:
            IF new_connection is in 'anomalous' cluster THEN ALERT
  - question: Are non-developer or non-admin workstations accessing raw content URLs from code repositories using non-standard user agents?
    context: This question uses a highly specific symbolic rule to detect a common adversary technique: 'living off the land' by downloading scripts from sites like GitHub. It looks for the combination of a raw content domain (e.g., raw.githubusercontent.com), a user-agent associated with scripting tools (PowerShell, curl, wget), and a source IP that does not belong to a developer or system administrator. This combination is a strong indicator of malicious activity.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Non-developer user workstations, production server subnets, and network proxy logs.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH http.log WHERE http_host IN raw_content_domains
            AND user_agent IN ('PowerShell', 'curl', 'wget', 'python-requests')
            AND source_ip NOT IN developer_allowlist
          ALERT on match
  - question: Is any user accessing a set of domains that significantly deviates from the typical access patterns for their role, especially if it includes code repositories?
    context: This question uses a statistical, behavioral approach to spot anomalies. It first profiles the typical set of domains accessed by users in a specific role (e.g., Sales, HR). Then, for each user, it compares their daily domain activity to their role's profile using a similarity score (Jaccard index). A low score, especially when combined with visits to developer-centric sites like code repositories or pastebins, indicates a significant behavioral deviation that warrants investigation.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Non-developer user workstations, production server subnets, and network proxy logs.
    range: last 90 days
    queries:
      - pseudocode: |
          ROLE_PROFILES = profile_domains_per_user_role()
          FOR each user:
            SIMILARITY = jaccard_index(user_daily_domains, ROLE_PROFILES[user.role])
            IF SIMILARITY is low AND user visited a paste_site THEN ALERT
  - question: Can we automatically analyze the content of files downloaded from paste sites and code repositories to identify malicious topics?
    context: This question leverages Natural Language Processing (NLP) and machine learning to analyze content. A topic modeling algorithm (like LDA) is trained to identify thematic clusters in text. By training it on known malicious and benign scripts, it can learn to recognize topics like 'obfuscated PowerShell,' 'Base64 payloads,' or 'C2 logic.' The model can then classify newly downloaded files, flagging any that are strongly associated with a malicious topic for analyst review.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Non-developer user workstations, production server subnets, and network proxy logs.
    range: last 90 days
    queries:
      - pseudocode: |
          TOPIC_MODEL = train_lda_model(labeled_script_corpus)
          FOR each new_downloaded_file:
            TOPICS = TOPIC_MODEL.predict(file_content)
            IF 'malicious_topic' in TOPICS with high probability THEN ALERT