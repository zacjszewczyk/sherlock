name: "T1059.004: Unix Shell"
id: "d8a2b1c0-4e5f-4a9b-8c7d-6f5e4d3c2b1a"
description: "This playbook helps identify if an adversary is using Unix shell environments for command execution. It covers various scenarios including interactive SSH sessions followed by malicious network activity, execution of remote payloads via Windows Subsystem for Linux (WSL), unusual process chains where applications like Microsoft Office spawn shells, post-login scanning or beaconing behavior, 'curl-pipe-shell' attacks identified through network traffic, and the creation of malicious scripts in persistence locations like cron or systemd directories."
type: "technique"
related:
  - "TA0002: Execution"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Has a successful interactive SSH login been followed by network connections to known command and control (C2) infrastructure within five minutes?"
    context: "This question aims to detect a common attack pattern where an adversary gains interactive access via SSH and immediately establishes a connection to their C2 server for further commands or data exfiltration. Correlating the login with outbound traffic to known malicious destinations provides a high-fidelity signal of compromise."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssh.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "DMZ Web Servers"
      - "Internal Linux Application Servers"
      - "SSH Jump Boxes"
      - "VPN Concentrators"
      - "Crown Jewel Asset Subnets"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each successful SSH login event in ssh.log
            GET source_host and timestamp
            SEARCH conn.log, dns.log, http.log for outbound traffic from source_host
            WHERE event_timestamp is within 5 minutes of SSH login timestamp
            AND (destination_ip OR dns_query OR http_host) in threat_intel_feed
            RETURN alert
  - question: "Following a successful SSH login, is the host exhibiting anomalous outbound network behavior, such as connecting to an unusual number of ports or destination IPs?"
    context: "Adversaries often perform network reconnaissance or connect to multiple C2 channels after gaining access. This question seeks to identify such activity by comparing post-login network patterns to a historical baseline. A sudden increase in the variety of destination ports or the entropy of destination IPs can indicate scanning or other non-standard behavior that deviates from normal operations."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssh.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "DMZ Web Servers"
      - "Internal Linux Application Servers"
      - "SSH Jump Boxes"
      - "VPN Concentrators"
      - "Crown Jewel Asset Subnets"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each host
            CALCULATE 30-day baseline of (distinct destination ports per hour) and (entropy of destination IPs)
          FOR each successful SSH login
            MONITOR outbound connections for 1 hour
            CALCULATE post-login metrics
            IF post-login_ports > 95th_percentile_baseline OR post-login_ip_entropy > 3_std_dev_from_baseline
            RETURN alert
  - question: "Is a host exfiltrating an unusually large volume of data following a successful SSH login event?"
    context: "Data exfiltration is a key objective for many adversaries. This question uses a time-series model to predict a host's normal outbound data volume. An alert is triggered if the actual data volume significantly and persistently exceeds the prediction after an SSH login, suggesting that an attacker may be staging or exfiltrating sensitive information."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssh.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "DMZ Web Servers"
      - "Internal Linux Application Servers"
      - "SSH Jump Boxes"
      - "VPN Concentrators"
      - "Crown Jewel Asset Subnets"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each host, TRAIN time-series model on historical outbound data volume
          FOR each successful SSH login
            MONITOR outbound data volume per minute
            IF observed_volume > 99%_prediction_interval for > 10 consecutive minutes
            RETURN alert
  - question: "Has a Unix shell process on a Windows host been executed with command-line arguments that attempt to download and run a remote script (e.g., 'curl | bash')?"
    context: "This question looks for the 'living-off-the-land' technique where an attacker uses legitimate tools like WSL, curl, or wget to download and execute malicious payloads directly in memory. Searching for these specific command-line patterns in process creation logs can directly uncover this type of attack, often referred to as a 'dropper'."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Developer Workstations"
      - "Administrator Workstations"
      - "Windows Servers with WSL enabled"
      - "Build and CI/CD Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process creation logs
          WHERE (process_name == 'wsl.exe' OR process_name == 'bash.exe')
          AND command_line MATCHES REGEX ('curl .* | bash', 'wget .* | sh', 'bash -c .*base64')
          RETURN alert
  - question: "Are there any Unix shell commands on Windows hosts that are unusually long or have high character entropy, suggesting obfuscation?"
    context: "Adversaries often obfuscate their commands using encoding (like Base64) or by embedding complex scripts directly on the command line to evade simple signature-based detection. This question aims to identify such commands by establishing a baseline for normal command length and entropy. Commands that are statistical outliers are highly suspicious and warrant investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Developer Workstations"
      - "Administrator Workstations"
      - "Windows Servers with WSL enabled"
      - "Build and CI/CD Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CALCULATE baseline of command_line length and entropy for all shell processes
          FOR each new shell process creation event
            CALCULATE current command_line length and entropy
            IF length > 98th_percentile_baseline OR entropy > 98th_percentile_baseline
            RETURN alert
  - question: "Has a machine learning model classified a Unix shell command executed on a Windows host as potentially malicious?"
    context: "This question leverages a more advanced, behavioral approach to detection. By training a model on features extracted from known benign and malicious commands (e.g., length, argument count, presence of keywords), it can identify novel or complex malicious commands that might evade simpler rule-based methods. A high confidence score from the model indicates a strong likelihood of malicious intent."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Developer Workstations"
      - "Administrator Workstations"
      - "Windows Servers with WSL enabled"
      - "Build and CI/CD Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new shell process creation event
            EXTRACT features (length, arg_count, keywords, etc.) from command_line
            SCORE features with classification model
            IF score > 0.9
            RETURN alert
  - question: "Has a Unix shell process been spawned by an unusual parent process, such as a Microsoft Office application, web browser, or PDF reader?"
    context: "Legitimate shell usage typically originates from a predictable set of parent processes (e.g., explorer.exe, cmd.exe). When an application like Word or Chrome spawns a shell, it is a strong indicator of compromise, often resulting from a user opening a malicious document or clicking a malicious link. This question uses an allowlist of normal behavior to detect these highly anomalous and suspicious process chains."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "User Workstations (Windows)"
      - "Virtual Desktop Infrastructure (VDI)"
      - "Microsoft Office and Web Servers"
      - "Terminal Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          DEFINE allowlist of parent-child pairs for shells
          SEARCH process creation logs
          WHERE child_process is a Unix shell
          AND (parent_process, child_process) NOT IN allowlist
          RETURN alert
  - question: "Has a Unix shell process been created by a parent process that is statistically rare across the enterprise?"
    context: "Instead of a manually maintained allowlist, this question uses a data-driven approach to find anomalies. It identifies all parent-child process relationships in the environment and flags those that are exceptionally infrequent. This can uncover novel attack vectors or misconfigurations that lead to unexpected process executions, without the overhead of maintaining a static list."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "User Workstations (Windows)"
      - "Virtual Desktop Infrastructure (VDI)"
      - "Microsoft Office and Web Servers"
      - "Terminal Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CALCULATE 30-day frequency distribution of all parent-child process pairs
          FOR each new shell process creation event
            GET parent_process
            IF frequency of (parent_process, shell_process) is in bottom 1%
            RETURN alert
  - question: "Does an unsupervised machine learning model identify the creation of a Unix shell process as part of an anomalous process cluster?"
    context: "This question uses clustering algorithms to group similar process execution events based on features like parent process, child process, and user context. Normal, high-volume activities will form large, dense clusters. Malicious or rare activities, such as a specific user's web browser spawning a shell, will form small, isolated clusters, making them easy to identify as anomalies worth investigating."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "User Workstations (Windows)"
      - "Virtual Desktop Infrastructure (VDI)"
      - "Microsoft Office and Web Servers"
      - "Terminal Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          APPLY clustering algorithm (e.g., DBSCAN) on process creation events
          USING features like parent_process, child_process, user_id
          INVESTIGATE small, isolated clusters containing shell processes
          RETURN alert for members of anomalous clusters
  - question: "Has an interactive SSH login from a geographically anomalous location been followed by suspicious DNS lookups?"
    context: "This question aims to identify access from unexpected or high-risk locations, which is a common indicator of an external threat. By enriching login data with GeoIP information and correlating it with subsequent activity like queries to dynamic DNS domains (often used by attackers), security teams can quickly flag potentially unauthorized access."
    answer_sources:
      - "Zeek ssh.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Critical Linux/Unix Servers (e.g., database, application)"
      - "Network Egress Points"
      - "Authentication Servers"
      - "Internal Network Segments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each successful SSH login
            ENRICH source_ip with GeoIP data
            IF source_country is not in business_presence_list
              AND subsequent DNS query is for a dynamic DNS domain
              RETURN alert
  - question: "Following an SSH login that is anomalous for a specific user (based on time or network location), is there evidence of network scanning from the compromised host?"
    context: "Attackers often perform internal reconnaissance after gaining a foothold. This question identifies this behavior by first flagging user logins that deviate from their established patterns (e.g., logging in at 3 AM from a new network). It then correlates this anomalous login with signs of port scanning, such as a high rate of failed connection attempts (Zeek 'S0' state), to detect post-compromise discovery activity."
    answer_sources:
      - "Zeek ssh.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Critical Linux/Unix Servers (e.g., database, application)"
      - "Network Egress Points"
      - "Authentication Servers"
      - "Internal Network Segments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each user, BASELINE login hours and source ASNs
          FOR each successful SSH login
            IF login_hour or source_ASN is anomalous for that user
              MONITOR subsequent connections
              IF ratio of 'S0' connections to total connections spikes
              RETURN alert
  - question: "Is there evidence of periodic, machine-like network beaconing to a single destination following an anomalous SSH login?"
    context: "Command and control malware often communicates with its server at regular intervals (beaconing). This periodic traffic can be identified using signal processing techniques like FFT. This question seeks to detect this pattern by analyzing the timestamps of connections to a specific destination. A strong, regular signal following a suspicious login is a classic indicator of C2 communication."
    answer_sources:
      - "Zeek ssh.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Critical Linux/Unix Servers (e.g., database, application)"
      - "Network Egress Points"
      - "Authentication Servers"
      - "Internal Network Segments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each anomalous SSH login
            FOR each source-destination IP pair in subsequent traffic
              APPLY FFT to the time series of connection timestamps
              IF a strong periodic signal is detected
              RETURN alert
  - question: "Has a file downloaded via 'curl' or 'wget' been followed by a new connection to a known malicious destination?"
    context: "This question targets the 'curl-pipe-shell' attack pattern where a script is downloaded and executed. The initial download is often a stager that, once run, initiates a connection to a C2 server. By detecting the initial download and correlating it with a subsequent connection to a known-bad IP or domain, we can identify this multi-stage attack."
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "Internal network segments containing Linux/Unix systems"
      - "Developer and DevOps Subnets"
      - "Cloud VPC Flow Logs"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH http.log for user_agent 'curl' or 'wget'
          IF file is downloaded (from files.log)
            MONITOR client IP for 60 seconds
            IF new connection to destination in threat_intel_feed
            RETURN alert
  - question: "Has a host made a new outbound connection almost immediately after downloading a file via HTTP, especially to a raw IP address?"
    context: "Automated scripts, like those used by attackers, execute tasks much faster than humans. This question leverages that fact by looking for an extremely short time delay between a file download and a subsequent network connection. This near-instantaneous action is a strong indicator of an automated script executing. Connections to raw IP addresses are also suspicious as they bypass DNS and are common in malware."
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "Internal network segments containing Linux/Unix systems"
      - "Developer and DevOps Subnets"
      - "Cloud VPC Flow Logs"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          BASELINE time delta between (HTTP download) and (new outbound connection) per host
          FOR each HTTP download
            CALCULATE time to next new outbound connection
            IF time_delta is in lowest 1st percentile OR http_host is a raw IP
            RETURN alert
  - question: "Has a sequence analysis model detected the specific chain of events corresponding to a 'curl-pipe-shell' attack?"
    context: "This question aims to increase detection fidelity by looking for a specific sequence of events in order: a DNS query for a new domain, an HTTP GET request with a 'curl' agent, a small file download, and finally a new connection to a different IP. Using a sequence model like an HMM can piece together these disparate logs into a single, high-confidence alert for a complete attack chain."
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "Internal network segments containing Linux/Unix systems"
      - "Developer and DevOps Subnets"
      - "Cloud VPC Flow Logs"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          USE sequence model (e.g., HMM) to find the pattern:
          [1] DNS query for new/uncategorized domain
          [2] HTTP GET from curl to that domain
          [3] Small file download (<50KB)
          [4] New outbound connection to different IP within 30s
          IF sequence is detected
          RETURN alert
  - question: "Has a new script or executable been created or modified in a known Linux persistence location by a process other than a standard package manager?"
    context: "Adversaries establish persistence by placing scripts or binaries in locations that ensure their code is executed automatically (e.g., on boot or a schedule). This question monitors these sensitive directories for any changes not made by legitimate software installation or update processes (like 'yum' or 'apt'). Such unauthorized modifications are a strong sign of a persistence attempt."
    answer_sources:
      - "auditd logs"
      - "Sysmon for Linux Event ID 11"
      - "Sysmon for Linux Event ID 1"
      - "System-level persistence locations on critical Linux servers (/etc/cron.d, /etc/init.d, /etc/rc.local, /etc/systemd/system, /etc/profile.d)"
      - "User-specific persistence locations (~/.bashrc, ~/.profile, /var/spool/cron/)"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH file/process creation logs in persistence directories
          (e.g., /etc/cron.d/, /etc/systemd/system/)
          IF creating_process is NOT ('yum', 'apt', 'dpkg', etc.)
          AND change is not authorized
          RETURN alert
  - question: "Does a new script created in a persistence location have unusually high entropy or other signs of obfuscation?"
    context: "To evade detection, attackers often pack, encrypt, or obfuscate their persistence scripts. These techniques increase the file's Shannon entropy, making it appear more random than a typical text-based script. This question analyzes new scripts for high entropy or other indicators like very long strings to identify these obfuscation attempts."
    answer_sources:
      - "auditd logs"
      - "Sysmon for Linux Event ID 11"
      - "Sysmon for Linux Event ID 1"
      - "System-level persistence locations on critical Linux servers (/etc/cron.d, /etc/init.d, /etc/rc.local, /etc/systemd/system, /etc/profile.d)"
      - "User-specific persistence locations (~/.bashrc, ~/.profile, /var/spool/cron/)"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new script in persistence location
            CALCULATE file content entropy
            COMPARE to baseline entropy for benign scripts
            IF entropy > 3 standard deviations from mean
            RETURN alert
  - question: "Has a machine learning model classified a new script in a persistence location as malicious based on its text content?"
    context: "This question uses Natural Language Processing (NLP) to understand the *intent* of a script. By training a model on a large set of good and bad scripts, it can learn to recognize patterns and keywords associated with malicious activity (e.g., reverse shells, disabling security tools, data exfiltration). This provides a powerful way to detect malicious logic even in novel scripts."
    answer_sources:
      - "auditd logs"
      - "Sysmon for Linux Event ID 11"
      - "Sysmon for Linux Event ID 1"
      - "System-level persistence locations on critical Linux servers (/etc/cron.d, /etc/init.d, /etc/rc.local, /etc/systemd/system, /etc/profile.d)"
      - "User-specific persistence locations (~/.bashrc, ~/.profile, /var/spool/cron/)"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new script in persistence location
            ANALYZE script content with NLP model
            (trained on keywords like 'nc', 'base64 -d', 'unset HISTFILE')
            IF model classifies script as malicious
            RETURN alert