name: T1110.004: Credential Stuffing
id: f8a1b2c3-d4e5-4f6a-7b8c-9d0e1f2a3b4c
description: This playbook helps determine if an adversary is attempting to gain access to user accounts via credential stuffing. It focuses on identifying patterns indicative of this technique, such as authentication attempts from known malicious IPs or using automated tools, a high volume of failed logins from a single source across many accounts, successful logins from geographically impossible locations, and web requests to authentication endpoints that exhibit signs of automation (e.g., programmatic User-Agents, unnatural timing). The goal is to detect and respond to large-scale, automated attempts to compromise user credentials using lists of usernames and passwords obtained from other breaches.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are authentication events originating from source IPs or associated with User-Agents that are known indicators of credential stuffing campaigns?
  context: This question aims to identify direct matches between observed authentication activity and high-confidence threat intelligence. A match provides a strong signal that an external attacker is using known malicious infrastructure to target the organization's login portals, warranting an immediate investigation.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - Zeek http.log
  - Externally-facing authentication services (VPN, OWA, M365)
  - Internet Gateway/Firewall
  - Web Proxies
  - Cloud Identity Provider (e.g., Azure AD)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      JOIN auth_logs (EventIDs 4624, 4625) with web_logs (Zeek http.log) ON source_ip
      FOR each event:
        IF source_ip IN threat_intel_feed OR user_agent IN threat_intel_feed:
          ALERT (high_severity)
- question: Are there any source IPs exhibiting a disproportionately high ratio of login attempts associated with known malicious indicators compared to their total login activity?
  context: This moves beyond simple one-off matches to identify source IPs that are heavily involved in malicious activity. An IP where the vast majority of login attempts are tied to known IOCs is highly suspect and likely a dedicated attack platform, even if some of its traffic appears benign. This helps prioritize alerts based on the concentration of malicious behavior.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - Zeek http.log
  - Externally-facing authentication services (VPN, OWA, M365)
  - Internet Gateway/Firewall
  - Web Proxies
  - Cloud Identity Provider (e.g., Azure AD)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each source_ip in 1_hour_window:
        ioc_logins = COUNT(logins where source_ip OR user_agent IN threat_intel_feed)
        total_logins = COUNT(logins from source_ip)
        ratio = ioc_logins / total_logins
        IF ratio > 99th_percentile_of_all_ratios:
          ALERT
- question: Can a machine learning model predict, in real-time, whether a new login attempt is malicious based on features like its origin, User-Agent, and correlation with threat intelligence?
  context: This question explores a proactive, predictive approach. By training a model on historical data, the system can learn the subtle characteristics of credential stuffing attempts beyond simple IOC matches, allowing it to score and flag previously unseen malicious login attempts with high confidence.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - Zeek http.log
  - Externally-facing authentication services (VPN, OWA, M365)
  - Internet Gateway/Firewall
  - Web Proxies
  - Cloud Identity Provider (e.g., Azure AD)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each new_login_event:
        EXTRACT features (ASN, geo, UA_length, UA_tokens, on_threat_list_boolean)
        prediction = model.predict_proba(features)
        IF prediction > 0.90:
          ALERT
- question: Has any single source IP generated a high volume of failed logins across a large number of different user accounts in a short time?
  context: This is a classic detection for credential stuffing. A legitimate user may have a few failed logins, but an attacker will try many username/password combinations, resulting in many failures across many accounts from one IP. The presence of a few successful logins within this storm of failures is a strong indicator of a successful attack.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - Domain Controllers
  - Authentication Servers (RADIUS, LDAP)
  - Cloud Identity Provider (e.g., Azure AD)
  - VPN Concentrators
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      GROUP events by source_ip in 5_minute_windows
      LET failed_logins = COUNT(EventID 4625)
      LET unique_users = DISTINCT_COUNT(username where EventID 4625)
      LET successful_logins = DISTINCT_COUNT(username where EventID 4624)
      IF failed_logins > 100 AND unique_users > 20:
        IF successful_logins >= 2:
          ALERT (high_severity)
        ELSE:
          ALERT (medium_severity)
- question: Are there source IPs targeting an unusually diverse and random set of usernames during failed login attempts?
  context: This question uses statistical measures to identify attackers. High entropy (randomness) in usernames suggests the attacker is not guessing common names but is instead using a large, varied list of potential usernames, which is characteristic of a credential stuffing list obtained from a data breach.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - Domain Controllers
  - Authentication Servers (RADIUS, LDAP)
  - Cloud Identity Provider (e.g., Azure AD)
  - VPN Concentrators
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      GROUP events by source_ip in 5_minute_windows
      LET unique_user_count = DISTINCT_COUNT(username where EventID 4625)
      LET username_entropy = SHANNON_ENTROPY(usernames where EventID 4625)
      IF unique_user_count > 98th_percentile AND username_entropy > baseline_entropy:
        ALERT
- question: Can machine learning (clustering) automatically identify anomalous source IPs based on their login behavior patterns without predefined thresholds?
  context: This approach uses unsupervised machine learning to find outliers. Instead of setting fixed thresholds (e.g., '100 failures'), a clustering algorithm can dynamically identify groups of IPs behaving similarly. Normal users will form a dense cluster, while attacker IPs with high-volume, high-failure activity will form their own sparse, anomalous clusters, making them easy to spot.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - Domain Controllers
  - Authentication Servers (RADIUS, LDAP)
  - Cloud Identity Provider (e.g., Azure AD)
  - VPN Concentrators
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each 1_hour_window:
        FOR each source_ip:
          CALCULATE features (total_logins, failed_logins, successful_logins, unique_users)
        results = DBSCAN(features)
        FOR each ip in results:
          IF ip.cluster == 'outlier':
            ALERT
- question: Has a user account successfully logged in from two different geographic locations in a time frame that would require physically impossible travel speeds?
  context: This is a high-fidelity indicator of account compromise. If a user logs in from one city and then five minutes later from a city across the world, it is certain that at least one of the sessions is illegitimate. This check helps pinpoint compromised accounts by analyzing the physical plausibility of sequential logins.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - VPN Concentrators
  - Cloud Identity Provider (e.g., Azure AD)
  - Internet Gateway/Firewall
  - Geolocation Intelligence Service
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each new_successful_login (EventID 4624):
        current_location = GEO_LOOKUP(source_ip)
        current_time = event_timestamp
        last_login = GET_LAST_LOGIN(username)
        last_location = last_login.location
        last_time = last_login.timestamp
        speed = CALCULATE_SPEED(current_location, last_location, current_time, last_time)
        IF speed > 600 mph:
          ALERT ('Impossible Travel')
- question: Has a user successfully logged in from a location that is statistically improbable based on their own historical login patterns?
  context: This question personalizes anomaly detection. Instead of a global 'impossible travel' rule, it builds a behavioral baseline for each user's typical login locations. A login from a new country might be normal for a frequent traveler but highly anomalous for an office-based employee. This method measures how much of an outlier a new login is for that specific user.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - VPN Concentrators
  - Cloud Identity Provider (e.g., Azure AD)
  - Internet Gateway/Firewall
  - Geolocation Intelligence Service
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each new_successful_login:
        user_history = GET_USER_LOGIN_HISTORY(username)
        centroid = CALCULATE_CENTROID(user_history.locations)
        new_location = GEO_LOOKUP(source_ip)
        distance = MAHALANOBIS_DISTANCE(new_location, centroid)
        IF distance > 98th_percentile_for_user:
          ALERT
- question: Can a user-specific machine learning model, trained only on that user's normal login history, identify and flag new logins that deviate from their established behavior?
  context: This employs an advanced, user-centric modeling technique (One-Class SVM) that learns the boundary of 'normal' behavior from only normal examples. It can model complex patterns involving location, time of day, and source network, flagging any login that falls outside this learned boundary as a potential compromise.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Zeek conn.log
  - VPN Concentrators
  - Cloud Identity Provider (e.g., Azure AD)
  - Internet Gateway/Firewall
  - Geolocation Intelligence Service
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each new_successful_login:
        user_model = GET_USER_MODEL(username)
        features = EXTRACT_FEATURES(login_event)
        classification = user_model.predict(features)
        IF classification == 'outlier':
          ALERT
- question: Are web requests to our authentication endpoints showing signs of automation, such as using scripted User-Agents or missing expected HTTP headers?
  context: This question focuses on identifying non-human web traffic targeting login pages. Attack tools often use distinctive User-Agent strings (like 'curl') or fail to include headers like 'Referer' that are typically present in browser-based navigation. Flagging these provides an early warning of an automated attack.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Windows Event ID 4625
  - Web Servers hosting login pages
  - Web Application Firewalls (WAFs)
  - Reverse Proxies
  - Content Delivery Networks (CDNs)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH web_logs (Zeek http.log) for requests to '/login' or '/auth'
      FOR each request:
        IF user_agent IN automation_tool_list OR referer_header IS NULL:
          IF EXISTS failed_login (EventID 4625) from same source_ip within 1 minute:
            ALERT
- question: Are there source IPs interacting with login pages at a perfectly consistent, machine-like pace or with an unusually high ratio of login attempts (POSTs) to page loads (GETs)?
  context: Human users have natural variance in their request timing. A script or bot will often make requests with near-perfect, robotic timing. A very low standard deviation of time between requests or a high ratio of login attempts (POSTs) to page loads (GETs) are strong indicators of automation.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Windows Event ID 4625
  - Web Servers hosting login pages
  - Web Application Firewalls (WAFs)
  - Reverse Proxies
  - Content Delivery Networks (CDNs)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      GROUP requests to login_pages by source_ip in 1_minute_windows
      LET time_stdev = STDEV(inter_arrival_time)
      LET post_get_ratio = COUNT(POST) / COUNT(GET)
      IF time_stdev < 50ms OR post_get_ratio > 10:
        ALERT
- question: Does the overall volume of failed logins across the entire organization show a sudden, anomalous spike when analyzed as a time-series?
  context: This question provides a macro-level view to detect large-scale attacks that may be distributed across many source IPs. A time-series model can learn the normal 'heartbeat' of failed logins and alert when a sudden, statistically significant deviation occurs, which is a hallmark of a major credential stuffing campaign.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Windows Event ID 4625
  - Web Servers hosting login pages
  - Web Application Firewalls (WAFs)
  - Reverse Proxies
  - Content Delivery Networks (CDNs)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      AGGREGATE COUNT(EventID 4625) into time_buckets (e.g., 5 minutes)
      INPUT time_series into LSTM_autoencoder_model
      reconstruction_error = CALCULATE_ERROR(model_prediction, actual_value)
      IF reconstruction_error > learned_threshold:
        ALERT ('Anomalous spike in failed logins')