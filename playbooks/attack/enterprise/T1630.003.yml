name: T1630.003: Disguise Root/Jailbreak Indicators
id: a4b1c2d3-e4f5-4a6b-7c8d-9e0f1a2b3c4d
description: This playbook helps investigate whether an adversary is actively concealing a compromised (rooted/jailbroken) mobile device state. Indicators of this activity include conflicts between Mobile Device Management (MDM) attestation failures and Mobile Threat Defense (MTD) compliance reports, the execution of unknown processes with root privileges, and the use of suspicious command-line arguments to remount filesystems or escalate privileges. The goal is to detect evasion techniques where a device's compromised status is deliberately hidden from security monitoring tools.
type: technique
related:
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: How can we detect a real-time conflict between MDM attestation failures and MTD compliance reports for the same device?
    context: This question aims to identify a direct contradiction in security reporting for a single device, a strong indicator that a tool is being used to bypass security controls. An adversary might compromise a device, triggering an MDM attestation failure, but use an evasion tool to fool the MTD agent into reporting a compliant state. Correlating these conflicting events in near-real-time is critical for immediate incident response.
    answer_sources:
      - MDM Remote Attestation Logs
      - MTD Compliance Status Logs
      - Zeek conn.log
      - Zeek dns.log
      - Centralized SIEM or data lake containing Mobile Device Management (MDM) and Mobile Threat Defense (MTD) logs
      - Cloud Identity Provider (IdP) conditional access policy logs
      - Network sensors at internet egress points and VPN concentrators.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: JOIN mdm_logs AND mtd_logs ON device_id WHERE mdm.attestation.result == 'failure' AND mtd.compliance.status == 'compliant' AND timestamp_diff < 300s. ENRICH with network_logs for 60min window.
  - question: Can we identify anomalous network behavior on a mobile device shortly after it has failed an MDM attestation?
    context: This question focuses on detecting secondary indicators of compromise. After a device is rooted, an adversary will likely use it for malicious activity, which often manifests as unusual network traffic. By baselining normal network behavior (e.g., destination ports, IP entropy) and alerting on significant deviations, we can catch suspicious activity even if the root/jailbreak itself is well-hidden, especially when correlated with a recent attestation failure.
    answer_sources:
      - MDM Remote Attestation Logs
      - Zeek conn.log
      - Centralized SIEM or data lake containing Mobile Device Management (MDM) and Mobile Threat Defense (MTD) logs
      - Cloud Identity Provider (IdP) conditional access policy logs
      - Network sensors at internet egress points and VPN concentrators.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: FOR EACH device, CALCULATE 30-day baseline of hourly unique_dst_ports and dst_ip_entropy. ALERT if hourly value > 95th_percentile. ESCALATE if mdm.attestation.result == 'failure' within 24h.
  - question: Does a device's DNS query pattern exhibit statistically significant anomalies that correlate with MDM attestation failures?
    context: This question uses advanced anomaly detection to find subtle signs of compromise, such as C2 communication or domain generation algorithms (DGAs). An unsupervised model can learn a device's unique "DNS fingerprint" and flag deviations that simple thresholding might miss. Correlating these DNS anomalies with MDM failures provides strong, evidence-backed alerts.
    answer_sources:
      - MDM Remote Attestation Logs
      - Zeek dns.log
      - Centralized SIEM or data lake containing Mobile Device Management (MDM) and Mobile Threat Defense (MTD) logs
      - Cloud Identity Provider (IdP) conditional access policy logs
      - Network sensors at internet egress points and VPN concentrators.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: TRAIN unsupervised anomaly model (e.g., Seasonal-Hybrid ESD) on per-device hourly DNS aggregates. ALERT on statistically significant anomaly score. ESCALATE if anomaly coincides with MDM attestation failure.
  - question: Is an unknown process running with root privileges on a mobile device?
    context: A process running as root (UID 0) has full control over the device. By checking its hash against an allowlist of legitimate system files and a blocklist of known malware, we can quickly identify any unauthorized and unknown binary operating with the highest privileges. This is a critical and high-fidelity indicator of a targeted attack or a novel malware strain.
    answer_sources:
      - MTD Process Execution Logs
      - Threat Intelligence Hash Feeds
      - Zeek conn.log
      - Zeek software.log
      - MTD agent log repositories on mobile endpoints
      - Centralized SIEM or data lake
      - Threat Intelligence Platform for hash lookups
      - Network sensors monitoring traffic from mobile subnets.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: ON process_event WHERE user.id == 0, QUERY allowlist and blocklist with process.file.sha256. ALERT if hash is NOT FOUND in either list.
  - question: Is a rare parent-child process relationship occurring where the child process has root privileges and initiates network traffic?
    context: This question seeks to uncover stealthy execution chains where malicious processes are spawned by legitimate parent processes to evade detection. By identifying statistically rare parent-child pairings where the child runs as root and makes an outbound network connection, we can detect likely C2 communication or data exfiltration with high confidence.
    answer_sources:
      - MTD Process Execution Logs
      - Zeek conn.log
      - MTD agent log repositories on mobile endpoints
      - Centralized SIEM or data lake
      - Threat Intelligence Platform for hash lookups
      - Network sensors monitoring traffic from mobile subnets.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: CALCULATE 30-day frequency for all parent-child process relationships. ALERT if a root-privileged child process is part of a top 1% rarity relationship. ESCALATE if child process initiates outbound connection within 5 min.
  - question: Can we use machine learning to classify a privileged process event as malicious based on its execution and network characteristics?
    context: This question aims to build a proactive detection capability. A supervised machine learning model can learn the subtle, combined patterns of malicious behavior from multiple data points (process name, arguments, network connections). This allows for the detection of novel threats that don't match known signatures but exhibit malicious "behavioral" traits.
    answer_sources:
      - MTD Process Execution Logs
      - Zeek conn.log
      - MTD agent log repositories on mobile endpoints
      - Centralized SIEM or data lake
      - Threat Intelligence Platform for hash lookups
      - Network sensors monitoring traffic from mobile subnets.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: TRAIN supervised classifier (e.g., Random Forest) on labeled dataset of privileged process events and network features. DEPLOY model to score new events. ALERT if classification is 'malicious' with confidence > 0.80.
  - question: Is a process executing commands to remount filesystems with write permissions or improperly change permissions on sensitive system files?
    context: This question targets explicit attempts to disable system protections. On a secure mobile OS, critical filesystems are read-only. An adversary must remount them as read-write (`rw`) to install rootkits. Searching for these specific command-line arguments is a direct way to detect an active attempt to subvert the device's security model.
    answer_sources:
      - MTD File System Integrity Logs
      - MTD Process Command-line Logs
      - Zeek files.log
      - Zeek conn.log
      - Log storage for MTD agents on mobile endpoints
      - Centralized SIEM for log correlation
      - Network sensors capable of file extraction (e.g., Zeek)
      - Application sandboxing analysis platforms.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: SCAN process.command_line with regex for 'mount -o rw' or 'chmod ...'. ALERT on match. ENRICH with preceding file downloads and subsequent C2 traffic from network logs.
  - question: Is an application modifying files in an unusually diverse or abnormal set of directory paths?
    context: This question seeks to identify malicious application behavior by analyzing its file system "footprint." Legitimate apps write to predictable directories. A compromised app might write to unexpected system locations to establish persistence. By baselining normal file write locations and alerting on high-entropy deviations, we can detect an application operating outside its expected boundaries.
    answer_sources:
      - MTD File System Integrity Logs
      - Log storage for MTD agents on mobile endpoints
      - Centralized SIEM for log correlation
      - Network sensors capable of file extraction (e.g., Zeek)
      - Application sandboxing analysis platforms.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: FOR EACH app, BASELINE 30-day daily entropy of modified directory paths. ALERT if daily entropy > 3 standard deviations from the historical mean.
  - question: Can we detect anomalous sequences of application behavior (API calls, network connections, file modifications) using a deep learning model?
    context: This proposes a sophisticated, holistic approach to behavior analysis. By treating an application's actions as a sequence, an autoencoder can learn the "grammar" of normal behavior. When an app performs a sequence of actions the model cannot accurately reconstruct (high reconstruction error), it indicates a novel and likely malicious chain of events that would evade rule-based analysis.
    answer_sources:
      - MTD File System Integrity Logs
      - MTD Process Command-line Logs
      - Zeek files.log
      - Zeek conn.log
      - Log storage for MTD agents on mobile endpoints
      - Centralized SIEM for log correlation
      - Network sensors capable of file extraction (e.g., Zeek)
      - Application sandboxing analysis platforms.
    range: last 90 days
    queries:
      - platform: pseudocode
        query: TRAIN seq2seq autoencoder on sequences of benign app events (API calls, network, file mods). PROCESS new event sequences in real-time. ALERT if model reconstruction error exceeds 99th percentile threshold.