name: T1547.007: Re-opened Applications
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversaries leveraging the macOS "Reopen windows when logging back in" feature for persistence and privilege escalation. Adversaries achieve this by modifying `com.apple.loginwindow.[UUID].plist` files to include malicious applications that are automatically launched upon user login. The investigation involves monitoring for unauthorized modifications to these plist files, analyzing the paths of applications added to them for rarity or suspicious locations, and scrutinizing the subsequent network and process behavior of these re-opened applications for signs of command and control (C2) activity or privilege escalation attempts.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process other than the legitimate 'loginwindow' process modifying 'Re-open windows' property list files?
  context: On macOS, the `loginwindow` process is responsible for managing the user session, including legitimately modifying the `com.apple.loginwindow.*.plist` files during a logout or restart. Any other process writing to these files is highly anomalous and could indicate an adversary is programmatically inserting a malicious application to establish persistence. This question aims to identify these unauthorized modifications for immediate triage.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - User library directories (`~/Library/Preferences/ByHost/`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_write_events WHERE file_path MATCHES '*/Library/Preferences/ByHost/com.apple.loginwindow.*.plist' AND process_name != 'loginwindow' | RETURN process_name, process_hash, parent_process_info, timestamp
- question: Is a rare or low-prevalence process modifying 'Re-open windows' property list files across the environment?
  context: This question applies prevalence analysis to identify suspicious behavior. While a legitimate third-party application might interact with session files, malware or attacker tools will likely have a very small footprint in the environment. By identifying processes that modify these key persistence files but are only seen on a small percentage of endpoints (e.g., <1%), analysts can focus on high-probability threats.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - User library directories (`~/Library/Preferences/ByHost/`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_write_events WHERE file_path MATCHES 'com.apple.loginwindow.*.plist' | GROUP by process_name | CALCULATE prevalence = (distinct_host_count / total_host_count) | FILTER prevalence < 0.01
- question: Can machine learning models identify malicious modifications to 'Re-open windows' property list files based on process and file write characteristics?
  context: This question explores an advanced, automated detection method. A machine learning model can be trained to recognize subtle patterns of malicious activity that rules might miss. By analyzing features like the writing process's path, its code signature status (e.g., unsigned, ad-hoc), and its parent process, a model can assign a risk score to the modification, allowing for more effective prioritization and response.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - User library directories (`~/Library/Preferences/ByHost/`) on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PREDICT is_malicious FROM file_write_events ON 'com.apple.loginwindow.*.plist' USING ML_model(features=[process_name, process_path, code_signature, parent_process, write_count_last_hour]) | RETURN events WHERE is_malicious == true
- question: Has an application from a non-standard or suspicious location (e.g., temp folders) or an unsigned application been added to the 'Re-opened Applications' list?
  context: Adversaries often place malicious payloads in temporary directories (`/tmp`, `~/Downloads`) to bypass stricter permissions in standard application folders. Legitimate applications are almost always code-signed by their developer. This question seeks to detect persistence attempts by parsing the plist files and alerting on application paths that are in suspicious locations or lack a valid code signature.
  answer_sources:
  - File Integrity Monitoring logs
  - osquery scheduled query results
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - File systems on all macOS endpoints, specifically targeting plist files in `~/Library/Preferences/ByHost/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_modifications ON 'com.apple.loginwindow.*.plist' | PARSE plist_file | EXTRACT application_paths from 'SessionItems.CustomListItems' | FOR each path CHECK if path IN suspicious_locations OR is_application_unsigned(path) | ALERT on true
- question: Has a rare or previously unseen application path been added to the 'Re-opened Applications' list across the organization?
  context: This question uses organizational prevalence to find anomalies. Most users will have a common set of applications that re-open on login. An application path that is extremely rare or unique across the entire fleet is a strong indicator of a targeted attack or custom malware. By baselining all known paths, any new path falling below a frequency threshold can be flagged for investigation.
  answer_sources:
  - File Integrity Monitoring logs
  - osquery scheduled query results
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - File systems on all macOS endpoints, specifically targeting plist files in `~/Library/Preferences/ByHost/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH plist_file_contents | EXTRACT all application_paths | GROUP by path | CALCULATE prevalence | FILTER prevalence < 5th_percentile
- question: Can unsupervised machine learning identify anomalous application paths added to the 'Re-opened Applications' list?
  context: This question leverages unsupervised learning to find outliers without pre-defined rules. By clustering application paths based on features like path structure, keywords ('tmp', 'cache'), and location, a model like DBSCAN can automatically group normal paths together. Any paths that do not fit into these clusters are flagged as anomalies, potentially revealing novel attacker techniques.
  answer_sources:
  - File Integrity Monitoring logs
  - osquery scheduled query results
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - File systems on all macOS endpoints, specifically targeting plist files in `~/Library/Preferences/ByHost/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER application_paths using DBSCAN on features=[path_depth, keywords, is_in_applications_dir] | IDENTIFY outliers and small clusters for review
- question: Is an application launched via the 'Re-opened Applications' mechanism communicating with known malicious infrastructure?
  context: This question aims to find high-confidence indicators of compromise. If an application that was automatically launched at login is observed making network connections to IP addresses, domains, or JA3/JA3S hashes found in threat intelligence feeds, it strongly suggests the application is malicious and communicating with a command and control (C2) server.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and process execution logs on macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_events WHERE process_is_reopened_app | JOIN network_logs on process_id | MATCH destination_ip OR domain against threat_intelligence_feed | ALERT on match
- question: Is a re-opened application exhibiting anomalous network behavior, such as unusual connection frequency, data volume, or high-entropy domains indicative of DGA?
  context: This question seeks to identify C2 activity by looking for statistical deviations from normal behavior. Malware often exhibits tell-tale network patterns, such as regular beaconing (unusual frequency), data exfiltration (unusual volume), or the use of Domain Generation Algorithms (DGA) for resilient C2, which results in DNS lookups for high-entropy, random-looking domains.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and process execution logs on macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each re-opened_app | CALCULATE network_baseline | SEARCH new_network_traffic | CALCULATE z-score against baseline | ALERT on z-score > 3 | ALSO, CALCULATE shannon_entropy of DNS_queries | ALERT on entropy > 3.5
- question: Can an unsupervised machine learning model detect anomalous network sequences from re-opened applications that indicate C2 activity?
  context: This question uses an advanced ML model to learn the normal sequence and rhythm of an application's network communications. An autoencoder model can detect when a process deviates from this learned behavior. A high reconstruction error indicates the observed network traffic is anomalous and does not fit the established pattern, which could be a sign of C2 activity that simpler statistical methods might miss.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and process execution logs on macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TRAIN autoencoder_model on legitimate_app_network_sequences | FOR new_reopened_app_traffic | CALCULATE reconstruction_error using model | ALERT on high_error_score
- question: Did a re-opened application, running as a standard user, spawn a child process with root privileges?
  context: This question directly targets privilege escalation events. A process running as a standard user (UID > 500) should not typically create a child process with root privileges (EUID 0) outside of known administrative actions (like `sudo`). By tracing the parent's ancestry back to an application launched via the re-open mechanism, this query links a persistence method directly to a privilege escalation attempt.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - macOS ESF ES_EVENT_TYPE_NOTIFY_FORK
  - Process execution and ancestry data on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE process_euid == 0 AND parent_process_uid > 500 | TRACE parent_ancestry | IF ancestor is re-opened_app AND parent_process NOT IN allowlist | ALERT
- question: Is a re-opened application performing a rare or previously unseen privilege escalation?
  context: Legitimate software sometimes needs to escalate privileges. This question helps differentiate between normal administrative actions and malicious activity by using prevalence analysis. A privilege escalation event involving a parent-child process pair that has never been seen before, or is extremely rare across the environment, is highly suspicious and warrants immediate investigation.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - macOS ESF ES_EVENT_TYPE_NOTIFY_FORK
  - Process execution and ancestry data on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH privilege_escalation_events from re-opened_apps | EXTRACT parent_process, child_process | CHECK if (parent, child) pair is rare or new in historical baseline | ALERT on true
- question: Can a machine learning model distinguish between malicious and legitimate privilege escalations originating from re-opened applications?
  context: This question proposes using a supervised learning model to improve the accuracy of privilege escalation detection. By training a model like XGBoost on features from known-good and known-bad escalations (e.g., process paths, code signatures, command-line arguments), it can learn to make nuanced decisions and automatically flag high-risk events that are tied to re-opened applications.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - macOS ESF ES_EVENT_TYPE_NOTIFY_FORK
  - Process execution and ancestry data on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PREDICT is_malicious_escalation FROM process_events WHERE parent_is_reopened_app USING XGBoost_model(features=[parent_path, child_path, parent_signature, child_signature, child_cmdline]) | ALERT on true
- question: Is a re-opened application, running as a standard user, writing to protected system directories?
  context: This question looks for post-privilege-escalation behavior. After an adversary gains root access, a common next step is to write to a protected system directory (e.g., `/Library/LaunchDaemons`) to establish a more durable form of persistence. Detecting a process that originated from a re-opened application writing to these locations is a strong indicator of a successful compromise.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - Protected macOS system directories, including `/System/`, `/Library/LaunchDaemons/`, `/Library/LaunchAgents/`, `/Library/PrivilegedHelperTools/`, and `/usr/local/bin/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_write_events WHERE process_uid > 500 AND file_path IN protected_system_dirs | TRACE process_ancestry | IF ancestor is re-opened_app | ALERT
- question: Is a re-opened application writing to an unusual set of directories compared to its normal behavior?
  context: This question uses behavioral profiling to detect anomalies. Every application has a typical pattern of file system access. If a re-opened application suddenly starts writing to a completely new set of directories, particularly privileged ones it has never touched before, this is a strong sign of compromise. The Jaccard similarity index can be used to quantify this deviation from its historical baseline.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - Protected macOS system directories, including `/System/`, `/Library/LaunchDaemons/`, `/Library/LaunchAgents/`, `/Library/PrivilegedHelperTools/`, and `/usr/local/bin/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each re-opened_app_process | GET current_session_write_dirs | GET historical_write_dirs_baseline | CALCULATE jaccard_similarity(current, baseline) | IF similarity < 0.3 AND current contains privileged_dirs | ALERT
- question: Can a sequence-aware machine learning model detect when a re-opened application deviates from its normal pattern of file system interactions?
  context: This question proposes using a sophisticated model like an LSTM to understand the normal *order* of an application's file system activities. For example, an app might normally read a config file, then access its support directory. A deviation, such as writing a binary to `/usr/local/bin`, would break this learned sequence. This can detect malicious behavior even if the individual actions themselves are not inherently suspicious.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - Protected macOS system directories, including `/System/`, `/Library/LaunchDaemons/`, `/Library/LaunchAgents/`, `/Library/PrivilegedHelperTools/`, and `/usr/local/bin/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TRAIN LSTM_model on normal_file_interaction_sequences for common_apps | FOR re-opened_app_process | FEED current_sequence to model | IF model flags sequence as anomalous | ALERT