name: T1569.003: Systemctl
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is leveraging the systemctl utility on a Linux host for execution or persistence. This involves detecting the creation or modification of systemd service files (.service) with anomalous content, such as obfuscated commands or known malicious indicators in the ExecStart directive. It also looks for service files being created in non-standard, world-writable directories (like /tmp or /dev/shm) and then being loaded. The playbook addresses systemctl being executed by unusual parent processes (e.g., web servers), which could indicate a compromised application. Furthermore, it aims to identify defense evasion by detecting attempts to stop or disable critical security services. Finally, it helps spot reconnaissance activity by monitoring for an unusually high number of systemctl enumeration commands executed in a short time frame.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Was a new systemd service file created or modified with content matching known malicious indicators?
    context: This question seeks to identify high-fidelity threats by checking for the creation or modification of systemd service files (.service) whose content, specifically the `ExecStart` command, matches known malicious indicators. The file content is scanned against threat intelligence feeds for malicious hashes, domains, IPs, or command patterns. A match provides a strong signal that a known adversary is attempting to establish persistence.
    answer_sources:
      - Sysmon for Linux Event ID 11 (FileCreate)
      - auditd logs (syscall=creat, openat)
      - File content of .service files
      - Systemd service file directories on all Linux hosts, including /etc/systemd/system/, /run/systemd/system/, /usr/lib/systemd/system/, and user-specific paths like ~/.config/systemd/user/.
    range: last 90 days
    queries:
      - "SEARCH file creation events for *.service in systemd directories. FOR each event, GET file content. PARSE ExecStart line. MATCH content against threat intelligence feeds."
  - question: Did a newly created or modified systemd service file contain a command with unusually high entropy, suggesting obfuscation?
    context: This question helps detect unknown or novel threats by identifying obfuscation. By calculating the Shannon entropy of the command string within a service file's `ExecStart` directive and comparing it to a baseline of normal services, analysts can flag commands that are likely packed or obfuscated, which is a common malware characteristic. An entropy score exceeding the 95th percentile of the baseline warrants manual review.
    answer_sources:
      - Sysmon for Linux Event ID 11 (FileCreate)
      - auditd logs (syscall=creat, openat)
      - File content of .service files
      - Systemd service file directories on all Linux hosts, including /etc/systemd/system/, /run/systemd/system/, /usr/lib/systemd/system/, and user-specific paths like ~/.config/systemd/user/.
    range: last 90 days
    queries:
      - "SEARCH file creation/modification events for *.service. FOR each event, GET file content. PARSE ExecStart line. CALCULATE Shannon entropy. COMPARE entropy to baseline for all other services. ALERT if entropy > 95th percentile."
  - question: Does a newly created systemd service file exhibit characteristics of maliciousness based on a machine learning classification model?
    context: This question provides a probabilistic assessment of whether a new service file is malicious. A supervised machine learning model, trained on features from known benign and malicious files (e.g., command length, presence of IPs, special character ratios, use of encoding), can classify new .service files in near real-time. This approach can catch threats that don't match specific signatures but share general characteristics with malware.
    answer_sources:
      - Sysmon for Linux Event ID 11 (FileCreate)
      - auditd logs (syscall=creat, openat)
      - File content of .service files
      - Systemd service file directories on all Linux hosts, including /etc/systemd/system/, /run/systemd/system/, /usr/lib/systemd/system/, and user-specific paths like ~/.config/systemd/user/.
    range: last 90 days
    queries:
      - "ON file creation event for *.service, EXTRACT features (length, IPs, domains, char ratio, etc.) from ExecStart. INPUT features into trained classification model. ALERT if classified as malicious."
  - question: Was a systemd service file created in a non-standard, world-writable directory and then immediately started or enabled?
    context: This question looks for a highly suspicious pattern indicative of an adversary "living off the land." It correlates two events: the creation of a `.service` file in a non-standard, temporary directory (e.g., /tmp, /dev/shm) and a subsequent `systemctl start` or `systemctl enable` command targeting that same file within a short time window (e.g., 5 minutes). This combination is rarely seen in legitimate administration and strongly suggests malicious persistence.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - Sysmon for Linux Event ID 11 (FileCreate)
      - auditd logs (syscall=execve, creat)
      - File system and process execution logs from all Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - "CORRELATE file creation events for '*.service' in /tmp, /dev/shm, /var/tmp WITH process creation events for 'systemctl start' or 'systemctl enable' targeting the same file path within a 5-minute window."
  - question: Has a systemd service file been created in a directory that is historically very rare for such files?
    context: This question helps find adversaries attempting to hide persistence mechanisms in unusual locations. By establishing a baseline of all directories where `.service` files are normally created across the enterprise, analysts can flag any new service file created in a statistically rare location (e.g., a directory in the bottom 1% of the frequency distribution). This behavioral analytic can uncover non-standard deployment scripts or manual placement by an attacker.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - Sysmon for Linux Event ID 11 (FileCreate)
      - auditd logs (syscall=execve, creat)
      - File system and process execution logs from all Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - "SEARCH file creation events for '*.service'. FOR each event, get parent directory. LOOKUP historical frequency of that directory for .service files. ALERT if directory is in the bottom 1% of rarity."
  - question: Was there an anomalous spike in the rate of systemd service file creations in non-standard directories?
    context: This question aims to detect automated attacks or mass deployment of malicious services. By using a time-series anomaly detection model, it monitors the rate of `.service` file creations in uncommon directories. A sudden, significant spike that deviates from the established baseline pattern, not associated with a known deployment, should be investigated as a potential large-scale compromise.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - Sysmon for Linux Event ID 11 (FileCreate)
      - auditd logs (syscall=execve, creat)
      - File system and process execution logs from all Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - "MONITOR time-series of '*.service' file creation counts in non-standard directories. APPLY anomaly detection model (e.g., SARIMA). ALERT on significant positive deviation from baseline."
  - question: Was the `systemctl` command executed by a suspicious parent process, such as a web server or database service?
    context: This question helps identify when a compromised application is used to escalate privileges or establish persistence. It checks for instances where the `systemctl` command is spawned by a parent process that is not a typical interactive shell or administrative tool. Anomalous parents like `nginx`, `httpd`, `java`, or `node` are strong indicators that a web or application vulnerability has been exploited.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - Process creation and process relationship logs from all Linux hosts, especially mission-critical servers (e.g., web servers running Apache/Nginx, application servers running Java/Node.js, database servers).
    range: last 90 days
    queries:
      - "SEARCH process creation events for 'systemctl'. CHECK parent process name. ALERT if parent name is in blocklist (e.g., nginx, httpd, apache2, java, node)."
  - question: Was `systemctl` executed by a parent process that has rarely or never spawned it before on this host or server group?
    context: This question uses a behavioral approach to find anomalous execution chains. It involves establishing a baseline of normal parent-child process relationships for `systemctl` on a per-host or per-group basis. An alert is triggered if `systemctl` is executed by a parent process that has a historically low probability of doing so, highlighting a deviation from normal administrative or system behavior that could indicate a compromise.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - Process creation and process relationship logs from all Linux hosts, especially mission-critical servers (e.g., web servers running Apache/Nginx, application servers running Java/Node.js, database servers).
    range: last 90 days
    queries:
      - "SEARCH process creation events for 'systemctl'. FOR each event, get parent process. LOOKUP historical probability of this parent-child relationship on this host. ALERT if probability is < 1%."
  - question: Did the execution of `systemctl` originate from an abnormal process execution chain, as identified by a graph-based anomaly detection model?
    context: This question aims to uncover complex, multi-step attacks. By modeling all process executions and their parent-child relationships as a graph, analysts can use anomaly detection algorithms to find rare or topologically unusual paths that lead to the execution of `systemctl`. This method is effective at identifying sophisticated adversaries who chain multiple legitimate tools and processes to hide their activity.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - Process creation and process relationship logs from all Linux hosts, especially mission-critical servers (e.g., web servers running Apache/Nginx, application servers running Java/Node.js, database servers).
    range: last 90 days
    queries:
      - "MODEL process events as a graph. ON 'systemctl' execution, analyze the execution path (parent, grandparent, etc.). USE graph anomaly detection to identify topologically rare paths. ALERT on abnormal paths."
  - question: Was a command executed to stop or disable a critical security service (e.g., auditd, EDR agent)?
    context: This question is focused on detecting active defense evasion. It involves creating a critical alert that triggers whenever a `systemctl stop` or `systemctl disable` command is used against a service on a predefined watchlist of essential security tools (e.g., `auditd.service`, `falcon-sensor.service`, `rsyslog.service`). Such an event is a direct attempt by an adversary to blind security monitoring and operate undetected.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - SIEM ingestion logs
      - Zeek conn.log
      - Process execution logs from all Linux hosts. Log ingestion health metrics from the SIEM. Network traffic logs from network gateways and core switches.
    range: last 90 days
    queries:
      - "SEARCH process creation events for 'systemctl' with 'stop' or 'disable' arguments. CHECK if the target service name is on the critical service watchlist (e.g., auditd.service, falcon-sensor.service). GENERATE critical alert on match."
  - question: Did a critical security agent stop sending logs, and was this outage preceded by `systemctl` activity on the host?
    context: This question provides an indirect way to detect disabled security services. It monitors the health and heartbeat of critical agents by tracking their log ingestion into the SIEM. If an agent's telemetry suddenly stops for an unusual length of time, an alert is generated. Correlating this outage with recent `systemctl` commands on the same host can pinpoint the cause as a potential act of defense evasion.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - SIEM ingestion logs
      - Zeek conn.log
      - Process execution logs from all Linux hosts. Log ingestion health metrics from the SIEM. Network traffic logs from network gateways and core switches.
    range: last 90 days
    queries:
      - "MONITOR log ingestion timestamps for security agents. IF time between logs exceeds mean + 3*std_dev, ALERT for outage. CORRELATE outage with recent 'systemctl' process events on the affected host."
  - question: Was there a sudden, unexplained drop in security log volume from a host, as detected by a time-series model?
    context: This question uses machine learning to detect defense evasion by monitoring overall security log volume from each host. A time-series model that accounts for normal daily and weekly fluctuations can identify a sudden, anomalous drop in ingested logs. This drop, not explained by planned maintenance, can be a strong indicator of a disabled security agent, which can then be correlated with `systemctl` activity on the host.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - SIEM ingestion logs
      - Zeek conn.log
      - Process execution logs from all Linux hosts. Log ingestion health metrics from the SIEM. Network traffic logs from network gateways and core switches.
    range: last 90 days
    queries:
      - "MODEL security log volume per host using a time-series model (e.g., Prophet). ALERT on sudden drops in actual volume vs. predicted volume. CORRELATE alert with 'systemctl' process logs from the host."
  - question: Did a user or process execute an excessive number of `systemctl` enumeration commands in a short period?
    context: This question helps detect automated reconnaissance activity. By using a simple sliding-window counter, it flags when a single user or process executes a high number of `systemctl` discovery commands (`status`, `list-units`, etc.) in a short time frame (e.g., more than 15 commands in one minute). This behavior is characteristic of an adversary running a script to understand the system's configuration and running services.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - Shell history logs (e.g., .bash_history, .zsh_history)
      - Process execution logs and shell command history logs from all interactive Linux sessions, including bastion hosts, developer workstations, and administrative servers.
    range: last 90 days
    queries:
      - "COUNT 'systemctl' executions with recon subcommands (status, list-units, etc.) per user/host in a 1-minute sliding window. ALERT if count > 15."
  - question: Did a user's rate of `systemctl` reconnaissance commands significantly deviate from their own established baseline?
    context: This question helps distinguish between normal administrative work and malicious activity, such as from a compromised account. It involves creating a behavioral baseline of each user's typical rate of `systemctl` reconnaissance command usage. An alert is triggered if a user's activity in a given hour significantly exceeds their personal 99th percentile, indicating a departure from their normal behavior.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - Shell history logs (e.g., .bash_history, .zsh_history)
      - Process execution logs and shell command history logs from all interactive Linux sessions, including bastion hosts, developer workstations, and administrative servers.
    range: last 90 days
    queries:
      - "FOR each user, calculate baseline hourly rate of 'systemctl' recon commands. IN real-time, compare current hourly rate to baseline. ALERT if current rate > 99th percentile of user's personal baseline."
  - question: Were `systemctl` enumeration commands executed in a dense, rapidly-fired cluster, suggesting automated scripting?
    context: This question uses machine learning to differentiate automated from manual command execution. A density-based clustering algorithm (like DBSCAN) analyzes features such as the time between consecutive commands, the user, and the host. The algorithm can automatically group tightly packed, rapid-fire command sequences, which are indicative of scripting, and separate them from the sparse patterns of manually typed commands, flagging the automated clusters as suspicious.
    answer_sources:
      - Sysmon for Linux Event ID 1 (ProcessCreate)
      - auditd logs (syscall=execve)
      - Shell history logs (e.g., .bash_history, .zsh_history)
      - Process execution logs and shell command history logs from all interactive Linux sessions, including bastion hosts, developer workstations, and administrative servers.
    range: last 90 days
    queries:
      - "APPLY DBSCAN clustering to 'systemctl' command events using features like inter-command time delta, user, and host. ALERT on any identified dense cluster, as it indicates automation."