name: T1654: Log Enumeration
id: 9a8c3d7e-2b1f-4a9e-8c6d-5e4f3a2b1c0d
description: This playbook focuses on detecting adversary discovery activities related to enumerating system logs on Windows hosts. It provides investigative questions to identify when adversaries use known log enumeration tools followed by C2 communication, leverage native utilities like 'wevtutil.exe' or 'powershell.exe' to query or export logs, directly access multiple .evtx files, exfiltrate log data over the network, or clear audit logs (Event ID 1102) to cover their tracks. The detection strategies range from symbolic correlation rules to statistical anomaly detection and machine learning models to uncover these behaviors.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I create a correlation rule to detect the use of known log enumeration tools followed by network connections to known C2 servers?
    context: This question aims to identify a high-confidence attack pattern where an adversary uses a specific, fingerprinted tool to gather logs and then immediately communicates with a command-and-control server. Correlating the process execution (identified by hash) with suspicious outbound network activity within a short, 5-minute time window significantly reduces false positives and points to active compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Applicable to All Windows Endpoints and Servers; Network Egress Points; DNS Resolvers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          SEARCH ProcessCreationEvents (EID 4688)
          WHERE ProcessHash IN (LogEnumToolHashes)
          JOIN (WITHIN 5m) NetworkConnectionLogs (Zeek conn.log, Zeek dns.log) ON HostName
          WHERE DestinationIP OR ResolvedDomain IN (C2ThreatFeed)
          RETURN HighSeverityAlert
  - question: How can I use statistical analysis to find anomalous network behavior from known log enumeration tools?
    context: This question focuses on detecting covert C2 channels. Adversaries may use legitimate-seeming tools but connect to unusual destinations or ports to evade simple signature-based detections. By baselining normal network activity for these processes and looking for statistical outliers—specifically, a rare destination IP combined with a non-standard port—we can uncover hidden exfiltration or C2 communication.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Applicable to All Windows Endpoints and Servers; Network Egress Points; DNS Resolvers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          BASELINE NetworkConnections for processes in (LogEnumTools) over 30 days.
          FOR EACH NewConnection from process in (LogEnumTools):
            CALCULATE Rarity(DestinationIP) across enterprise.
            IF Rarity(DestinationIP) < 1% AND DestinationPort NOT IN (80, 443, 22, 3389):
              RETURN AnomalyAlert
  - question: Can a machine learning model be trained to classify process and network activity sequences as malicious log exfiltration?
    context: This question explores a more advanced, behavioral approach. Instead of relying on single indicators, it proposes using a Random Forest model to analyze a combination of features from both the process and subsequent network traffic. This allows the model to learn the subtle, complex patterns that distinguish malicious log exfiltration from benign administrative activity, potentially detecting novel tools or techniques with high confidence.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Applicable to All Windows Endpoints and Servers; Network Egress Points; DNS Resolvers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          MODEL = RandomForestClassifier(features=[ProcessName, ParentProcess, User, CmdLineEntropy, OutboundBytes, DestPort, JA3, IsOnThreatFeed])
          FOR EACH Process-NetworkSequence:
            PREDICTION = MODEL.predict(Sequence)
            IF PREDICTION == "malicious_log_exfiltration" AND Confidence > 0.9:
              RETURN MLAlert
  - question: How can I write a rule to detect the use of native Windows utilities for log enumeration via specific command-line arguments?
    context: Adversaries often use built-in tools like 'wevtutil.exe' and 'powershell.exe' to live off the land, making detection harder. This question focuses on creating a high-fidelity symbolic rule that uses regular expressions to find specific command-line patterns indicative of log querying, exporting, or filtering, while using an allowlist to exclude known benign administrative scripts.
    answer_sources:
      - Windows Event ID 4688
      - Applicable to All Windows Endpoints and Servers; Domain Controllers; Administrator Workstations
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          SEARCH ProcessCreationEvents (EID 4688)
          WHERE (ProcessName IN ('wevtutil.exe', 'powershell.exe', 'pwsh.exe'))
          AND (CommandLine MATCHES REGEX '(qe|query-events|epl|export-log|Get-WinEvent|Get-EventLog|.evtx)')
          AND (CommandLine NOT IN (AdminScriptAllowlist))
          RETURN Alert
  - question: How can I statistically detect when a user runs an unusually rare command with 'powershell.exe' or 'wevtutil.exe'?
    context: This question aims to identify anomalous command-line usage on a per-user basis. By creating a historical baseline of commands for each user, we can tokenize new commands and calculate their rarity. A command that is statistically very rare for a specific user, especially one combining terms like 'export-log' and a network path, is highly suspicious and can indicate a deviation from their normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Applicable to All Windows Endpoints and Servers; Domain Controllers; Administrator Workstations
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          FOR EACH User:
            BASELINE command tokens from 'powershell.exe', 'wevtutil.exe' over 30 days.
          FOR EACH NewCommand:
            CALCULATE RarityScore based on token frequency.
            IF RarityScore > 99th percentile for that User:
              RETURN AnomalyAlert
  - question: Can a machine learning model classify command-line activity to identify log enumeration intent?
    context: This question proposes using a sophisticated natural language processing model (like BERT) to understand the *intent* behind a command line, rather than just matching keywords. By fine-tuning a model on commands labeled with their tactical purpose, it can identify log enumeration attempts, even if they use obfuscated or novel syntax, providing a more resilient detection method.
    answer_sources:
      - Windows Event ID 4688
      - Applicable to All Windows Endpoints and Servers; Domain Controllers; Administrator Workstations
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          MODEL = FineTunedTransformer(labels=['Log Enumeration', 'Discovery', ...])
          FOR EACH CommandLine from EventID 4688:
            CLASSIFICATION = MODEL.predict(CommandLine)
            IF CLASSIFICATION == 'Log Enumeration' AND Probability > 0.85:
              RETURN MediumSeverityAlert
  - question: How can I detect a single process accessing an unusual number of distinct event log files in a short time?
    context: This question addresses the behavior of a tool systematically dumping all available event logs. By enabling object access auditing on the logs directory, we can create a simple but effective rule that counts the number of unique '.evtx' files accessed by a single process within a 60-second window. Exceeding a threshold (e.g., 10 files) is a strong indicator of enumeration, especially if performed by a non-system user account.
    answer_sources:
      - Windows Event ID 4663
      - Applicable to File systems on Domain Controllers; File systems on critical servers; SIEM servers and Log Collectors
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          SEARCH FileAccessEvents (EID 4663)
          WHERE ObjectName ENDS WITH '.evtx'
          GROUP BY ProcessId, SlidingWindow(60s)
          COUNT DISTINCT ObjectName
          IF Count > 10 AND SubjectUserName NOT IN (SYSTEM, DWM-1, ...):
            RETURN Alert
  - question: Can I use statistical methods to detect anomalous access rates to event log files on a host?
    context: This question aims to find unusual log access behavior by establishing a baseline. By tracking the number of unique '.evtx' files accessed per process per hour over 30 days, we can use a Z-score to flag any significant deviation (e.g., >3 standard deviations). This can detect slow, methodical enumeration that might not trigger a simple threshold rule. Additionally, a spike in the entropy of accessed log file names can indicate enumeration of non-standard logs.
    answer_sources:
      - Windows Event ID 4663
      - Applicable to File systems on Domain Controllers; File systems on critical servers; SIEM servers and Log Collectors
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          FOR EACH Host:
            BASELINE hourly unique '.evtx' access count per process over 30 days.
          FOR EACH Hour:
            CALCULATE Z-score for current access count vs baseline.
            IF Z-score > 3:
              RETURN AnomalyAlert
  - question: Can a time-series model forecast normal log access patterns and detect anomalies?
    context: This question proposes a machine learning approach to model the natural rhythm of log access on a host. Services and scheduled tasks often access logs in predictable daily or weekly patterns. A time-series model (like ARIMA) can learn this seasonality and forecast the expected volume of log access events. A significant, unexplained spike in access that the model flags as an anomaly points to unexpected activity that requires investigation.
    answer_sources:
      - Windows Event ID 4663
      - Applicable to File systems on Domain Controllers; File systems on critical servers; SIEM servers and Log Collectors
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          FOR EACH Host:
            MODEL = TimeSeriesModel (e.g., ARIMA) trained on rate of EID 4663 for 'winevt\logs'.
          FOR EACH TimeInterval:
            FORECAST = MODEL.predict()
            IF ActualRate deviates significantly from FORECAST:
              RETURN TimeSeriesAnomalyAlert
  - question: How can I create a rule that links event log access to subsequent suspicious network exfiltration?
    context: This question targets the full kill chain of log enumeration followed by data exfiltration. It describes a stateful rule that first looks for access to a '.evtx' file. It then watches for network connections from the same host within 5 minutes. If a connection is made to a new, never-before-seen IP on a non-standard port with a large data payload (>1MB), it generates a high-severity alert, strongly indicating log theft.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Applicable to All Windows Endpoints and Servers; Network Egress Points; DNS Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          SEARCH FileAccessEvents (EID 4663) WHERE ObjectName ENDS WITH '.evtx'
          JOIN (WITHIN 5m) NetworkLogs (Zeek conn.log) ON SourceIP
          WHERE DestinationIP is new (not seen in 30d)
          AND DestinationPort NOT IN (80, 443, 53)
          AND OutboundBytes > 1000000
          RETURN HighSeverityAlert
  - question: How can I statistically identify unusually large data transfers from a host shortly after it accesses log files?
    context: This question provides a statistical method to find potential data exfiltration without relying on threat intelligence or fixed thresholds. For each host, a baseline of normal outbound data volume is established. After a log file access event is observed, if a subsequent network connection from that host has an outbound byte count in the top percentile (e.g., 98th) of its historical activity, it is flagged for review as a potential exfiltration event.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Applicable to All Windows Endpoints and Servers; Network Egress Points; DNS Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          BASELINE outbound byte counts per host over 30 days.
          TRIGGER on FileAccessEvent (EID 4663) for '.evtx' on HostA.
          MONITOR NetworkLogs from HostA for 5 minutes.
          FOR EACH Connection:
            IF OutboundBytes > 98th percentile for HostA:
              RETURN AnomalyForReview
  - question: Can a machine learning model identify the sequence of 'log access' followed by 'data exfiltration'?
    context: This question proposes using a Hidden Markov Model (HMM) to understand the sequence of attacker behaviors. The HMM is trained to recognize different states of host activity, such as 'Benign', 'Suspicious Log Access', and 'Potential Exfiltration'. By feeding it a stream of events from a host, the model can determine the most likely sequence of states. If the decoded path is 'Benign' -> 'Suspicious Log Access' -> 'Potential Exfiltration', it indicates a likely attack.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Applicable to All Windows Endpoints and Servers; Network Egress Points; DNS Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          MODEL = HiddenMarkovModel(states=['Benign', 'LogAccess', 'Exfil'])
          OBSERVATIONS = Stream of events (Process, FileAccess, Network) from Host.
          PATH = MODEL.decode(OBSERVATIONS)
          IF PATH contains ('LogAccess' -> 'Exfil'):
            RETURN MLAlert
  - question: How should I respond to an event indicating the audit log was cleared?
    context: This question addresses a critical event, Windows Event ID 1102, which signals that an adversary may be covering their tracks. The primary recommendation is to treat this event as a confirmed indicator of compromise. A symbolic rule should fire a critical alert immediately, which should automatically trigger an incident response playbook to contain the potential breach, for instance by isolating the host from the network.
    answer_sources:
      - Windows Event ID 1102
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Applicable to Domain Controllers; Security-critical servers; Workstations of Privileged Users
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          SEARCH for WindowsEvent (EID 1102)
          ON DETECTION:
            TRIGGER CriticalSeverityAlert
            INITIATE IncidentResponsePlaybook('Host Isolation')
  - question: How can I add context to a log clearing event to better score its risk?
    context: While any log clearing event is serious, some are more suspicious than others. This question focuses on adding risk context through statistical analysis. Any instance of Event ID 1102 that occurs outside of a pre-approved, scheduled maintenance window should be flagged. The risk score should be further increased if the action was performed by a user account that is not a designated Tier 0 administrator, as this is highly irregular.
    answer_sources:
      - Windows Event ID 1102
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Applicable to Domain Controllers; Security-critical servers; Workstations of Privileged Users
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          SEARCH for WindowsEvent (EID 1102)
          IF EventTime NOT IN (ApprovedMaintenanceWindows):
            FLAG Event
          IF SubjectUserName NOT IN (Tier0Admins):
            ELEVATE AlertPriority
  - question: Can a machine learning model calculate the probability that a log clearing event is malicious?
    context: This question proposes a probabilistic approach using a Bayesian network to assess the likelihood of malicious intent behind a log clearing event. The model would consider preceding events within a one-hour window, such as a login from an unusual location or the use of obfuscated PowerShell commands. By calculating the posterior probability P(MaliciousClear | PrecedingEvents), the system can issue a high-confidence, critical alert with the specific contributing factors automatically listed for the analyst.
    answer_sources:
      - Windows Event ID 1102
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Applicable to Domain Controllers; Security-critical servers; Workstations of Privileged Users
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: |
          MODEL = BayesianNetwork(nodes=['MaliciousClear', 'AtypicalGeoLogin', 'ObfuscatedPS'])
          ON EID 1102:
            LOOKBACK 1 hour for preceding events.
            PROB = MODEL.calculate_probability(P(MaliciousClear | PrecedingEvents))
            IF PROB > 0.9:
              TRIGGER CriticalAlert with contributing_factors