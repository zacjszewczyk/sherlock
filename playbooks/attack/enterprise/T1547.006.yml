name: "T1547.006: Kernel Modules and Extensions"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps identify adversaries using malicious kernel modules or extensions to maintain persistence or escalate privileges on Windows, Linux, and macOS systems. It focuses on detecting the loading of unsigned, rare, or known-bad drivers/modules, often from anomalous file paths. It also looks for subsequent suspicious activity, such as command-and-control network traffic or the spawning of higher-privilege processes, which are common indicators of a successful compromise using this technique."
type: "technique"
related:
  - "TA0003: Persistence"
  - "TA0004: Privilege Escalation"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a Windows kernel driver been loaded that is unsigned or has a hash matching known malicious indicators?"
    context: "Adversaries often use custom or compromised kernel drivers to establish deep, persistent access. Unsigned drivers or those with known malicious hashes are strong indicators of compromise. This question aims to detect the initial loading of such a driver via the Service Control Manager."
    answer_sources:
      - "Windows Event ID 7045"
      - "Windows Event ID 4688"
      - "Windows Sysmon Event ID 6"
      - "Threat Intelligence Feeds"
      - "NAI: Windows endpoint and server fleet, including Domain Controllers and application servers; System driver directories (%SystemRoot%\\System32\\drivers) for baselining."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH Windows Event ID 7045 WHERE ServiceType == 'kernel driver' | FOREACH event GET ImagePath | CHECK_SIGNATURE ImagePath | GET_HASH ImagePath | QUERY_THREAT_INTEL hash | IF signature == 'unsigned' OR threat_intel_match == 'true' THEN ALERT"
  - question: "Has a Windows kernel driver been loaded from an anomalous or statistically rare file path?"
    context: "Legitimate kernel drivers are almost always loaded from standard system directories (e.g., %SystemRoot%\\System32\\drivers). Adversaries may place their malicious drivers in non-standard locations like temporary directories or user profiles to evade detection. This question identifies driver loads from unusual locations by comparing the path against a baseline of normal activity."
    answer_sources:
      - "Windows Event ID 7045"
      - "Windows Sysmon Event ID 6"
      - "NAI: Windows endpoint and server fleet, including Domain Controllers and application servers; System driver directories (%SystemRoot%\\System32\\drivers) for baselining."
    range: "last 90 days"
    queries:
      - "pseudocode: BASELINE driver directories from Event ID 7045/Sysmon Event ID 6 over 90 days | CALCULATE frequency percentile for each directory | SEARCH new driver load events | IF directory_frequency < 5th_percentile THEN ALERT"
  - question: "Does a newly loaded Windows driver exhibit multiple characteristics of maliciousness according to a machine learning model?"
    context: "A single indicator might not be sufficient to condemn a driver. This question uses a machine learning model to combine multiple weak signals—such as signature status, path rarity, and service name characteristics—into a single high-confidence judgment. This helps to identify sophisticated threats that might evade simpler, single-rule detections."
    answer_sources:
      - "Windows Event ID 7045"
      - "Windows Event ID 4688"
      - "Windows Sysmon Event ID 6"
      - "NAI: Windows endpoint and server fleet, including Domain Controllers and application servers; System driver directories (%SystemRoot%\\System32\\drivers) for baselining."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new driver load | EXTRACT features (is_signed, path_rarity, service_name_entropy, is_in_NSRL) | PREDICT using trained classification model | IF prediction == 'malicious' AND confidence > 0.9 THEN ALERT"
  - question: "Did a host initiate network connections to a known malicious destination shortly after a new kernel driver was loaded?"
    context: "Malicious kernel-mode components often need to communicate with a command-and-control (C2) server for tasking or data exfiltration. This question looks for this 'phone home' activity by correlating a driver load event with outbound network connections to destinations on threat intelligence lists within a short time window."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 7036"
      - "Windows Sysmon Event ID 3"
      - "NAI: Network egress points, DNS servers, and all Windows hosts."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH driver load events (Event ID 7036/Sysmon 6) | FOR each event, SEARCH network connections (Zeek conn.log) from host within 5 minutes | CHECK destination against C2/NRD threat intel feeds | IF match THEN ALERT"
  - question: "Following a new driver load, did the host's network traffic exhibit anomalous characteristics, such as high-entropy domains or unusual data transfer ratios?"
    context: "Even if the destination isn't on a known threat list, the nature of the traffic can be suspicious. Adversaries may use domain generation algorithms (DGAs), resulting in high-entropy domain names, or exfiltrate large amounts of data, altering the normal outbound/inbound traffic ratio. This question seeks to detect these statistical anomalies following a driver load."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 7036"
      - "Windows Sysmon Event ID 3"
      - "NAI: Network egress points, DNS servers, and all Windows hosts."
    range: "last 90 days"
    queries:
      - "pseudocode: ON driver load event | MONITOR host network traffic for 1 hour | CALCULATE FQDN entropy and outbound/inbound byte ratio | COMPARE to host's 30-day baseline | IF deviation > 3 standard deviations THEN ALERT"
  - question: "Did the volume of outbound data from a host significantly and unexpectedly increase after a new kernel driver was loaded?"
    context: "A primary function of malware is data exfiltration. A malicious driver could initiate the transfer of large volumes of data. This question uses a time-series model to forecast expected outbound traffic volume and alerts when the actual volume dramatically exceeds the forecast immediately following a driver load, suggesting potential exfiltration."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 7036"
      - "Windows Sysmon Event ID 3"
      - "NAI: Network egress points, DNS servers, and all Windows hosts."
    range: "last 90 days"
    queries:
      - "pseudocode: ON driver load event | GET actual outbound data volume | GET forecasted volume from ARIMA model | CALCULATE deviation | IF deviation is large and unexplained THEN ALERT"
  - question: "Was a Linux kernel module loaded from a non-standard directory, and does it correlate with a prior file download or known malicious hash?"
    context: "Similar to Windows, legitimate Linux kernel modules reside in specific, protected directories. Adversaries often drop their malicious modules (.ko files) into world-writable locations like /tmp or /dev/shm before loading them with insmod or modprobe. This question detects this behavior and enriches it by checking if the module was recently downloaded or is known-bad."
    answer_sources:
      - "Linux auditd logs (type=EXECVE, type=SYSCALL for init_module)"
      - "Package manager logs (/var/log/apt/history.log, /var/log/yum.log)"
      - "Zeek conn.log"
      - "NAI: Critical Linux server fleet (e.g., web servers, database servers, container hosts); Linux file systems, specifically /tmp, /var/tmp, user home directories, and standard module paths like /lib/modules."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH auditd for execve of 'insmod' or 'modprobe' | IF module_path is in '/tmp', '/dev/shm', '/home' | GET module_hash | QUERY threat intel | CHECK Zeek for prior download of hash | IF path is non-standard OR hash is malicious THEN ALERT"
  - question: "Is a Linux host running a kernel module that is statistically rare across the entire server fleet?"
    context: "In a managed environment, servers with similar roles should have similar sets of loaded kernel modules. A module that is present on only one or a very small number of hosts (low prevalence) is an anomaly. This could be a legitimate but specialized piece of software, or it could be a rootkit. This question identifies these outliers for investigation."
    answer_sources:
      - "Linux auditd logs (type=EXECVE, type=SYSCALL for init_module)"
      - "Package manager logs (/var/log/apt/history.log, /var/log/yum.log)"
      - "Zeek conn.log"
      - "NAI: Critical Linux server fleet (e.g., web servers, database servers, container hosts); Linux file systems, specifically /tmp, /var/tmp, user home directories, and standard module paths like /lib/modules."
    range: "last 90 days"
    queries:
      - "pseudocode: BUILD baseline of all loaded modules across fleet from 'lsmod' or auditd | CALCULATE prevalence for each module | FOR each host, IDENTIFY loaded modules | IF module_prevalence < 1% THEN ALERT"
  - question: "Was a Linux kernel module loaded in a context that a machine learning model deems suspicious?"
    context: "The context of a module load is critical. A load initiated by a package manager (yum, dpkg) during a system update is normal. A load initiated by a user in an interactive shell (bash) or via a remote access daemon (sshd) is highly suspicious. This question uses a model to classify the legitimacy of the load event based on its context."
    answer_sources:
      - "Linux auditd logs (type=EXECVE, type=SYSCALL for init_module)"
      - "Package manager logs (/var/log/apt/history.log, /var/log/yum.log)"
      - "Zeek conn.log"
      - "NAI: Critical Linux server fleet (e.g., web servers, database servers, container hosts); Linux file systems, specifically /tmp, /var/tmp, user home directories, and standard module paths like /lib/modules."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each module load event | EXTRACT features (parent_process, path_rarity, is_interactive_shell) | PREDICT using trained decision tree | IF prediction == 'suspicious' THEN ALERT"
  - question: "Was a macOS kernel extension (kext) loaded that was unsigned or signed by an untrusted developer?"
    context: "Apple enforces strict signing requirements for kernel extensions to protect system integrity. Adversaries may use unsigned kexts or kexts signed with a stolen or illegitimate developer certificate. This question detects the loading of such kexts by checking their signature against an allow-list of trusted developer IDs."
    answer_sources:
      - "macOS Unified Logs (process == 'kextload')"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "NAI: macOS endpoint fleet, especially developer and executive workstations; Network egress points and DNS servers."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH macOS Unified Logs for process == 'kextload' | GET kext signature and developer ID | IF kext is unsigned OR developer ID not in allow-list THEN ALERT"
  - question: "Was a new, never-before-seen kernel extension loaded on a macOS host, and was it followed by anomalous network activity?"
    context: "While new kexts can be installed with legitimate software, the first appearance of a kext on a machine is a noteworthy event. This is especially true if it is immediately followed by suspicious network behavior, like connections to high-entropy domains, which can be indicative of DGA-based C2 communication. This question combines host-based and network-based anomaly detection."
    answer_sources:
      - "macOS Unified Logs (process == 'kextload')"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "NAI: macOS endpoint fleet, especially developer and executive workstations; Network egress points and DNS servers."
    range: "last 90 days"
    queries:
      - "pseudocode: MAINTAIN baseline of kext bundle IDs per host | ON 'kextload' event, CHECK if bundle ID is new for host | IF new, MONITOR DNS queries for 5 minutes | CALCULATE FQDN entropy | IF bundle ID is new AND entropy spikes THEN ALERT"
  - question: "Did a macOS host experience an anomalous spike in the number of kernel extension load events?"
    context: "Kext loading activity typically follows a predictable pattern, with bursts during software installation or system updates. A sudden, unexplained spike in 'kextload' events outside of these patterns could indicate an adversary attempting to load or test multiple malicious kexts. This question uses a time-series model to detect such anomalous bursts."
    answer_sources:
      - "macOS Unified Logs (process == 'kextload')"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "NAI: macOS endpoint fleet, especially developer and executive workstations; Network egress points and DNS servers."
    range: "last 90 days"
    queries:
      - "pseudocode: MODEL daily 'kextload' event count per host using LSTM | COMPARE actual daily count to model's forecast | IF actual count significantly deviates from forecast THEN ALERT"
  - question: "Did a non-administrative user attempt to load a known vulnerable driver (BYOVD)?"
    context: "The 'Bring Your Own Vulnerable Driver' (BYOVD) technique involves a low-privileged user loading a legitimate but vulnerable driver. The attacker then exploits the vulnerability in the driver to execute code with kernel-level privileges. This question specifically looks for the loading of a driver whose hash matches a public list of exploitable drivers."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 7045"
      - "Windows Sysmon Event ID 1"
      - "NAI: Multi-user Windows workstations and servers (e.g., Remote Desktop Session Hosts)."
    range: "last 90 days"
    queries:
      - "pseudocode: MAINTAIN watchlist of vulnerable driver hashes (loldrivers.io) | SEARCH Sysmon EID 1 for 'sc.exe' or 'fltmc.exe' execution by non-admin user | GET hash of driver file from command line | IF hash is on watchlist THEN ALERT"
  - question: "Did a non-administrative user use service control commands (sc.exe) to create or load a kernel service?"
    context: "Standard users have no legitimate reason to interact with the Service Control Manager to create or load kernel-mode drivers. Any such attempt is extremely suspicious and a strong indicator of a privilege escalation attempt, regardless of whether the driver itself is known-vulnerable. This question detects this highly anomalous user behavior."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 7045"
      - "Windows Sysmon Event ID 1"
      - "NAI: Multi-user Windows workstations and servers (e.g., Remote Desktop Session Hosts)."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process execution logs for 'sc.exe' with arguments 'create', 'type=kernel', or 'load' | IF executing user is non-administrative THEN ALERT"
  - question: "Did a non-administrative user perform a sequence of actions indicative of a BYOVD attack?"
    context: "A full BYOVD attack involves a chain of actions: acquiring the vulnerable driver, loading it as a service, starting the service, and then leveraging it to gain SYSTEM privileges. This question uses a sequence analysis model to detect this entire attack chain as a single, connected event, providing higher confidence than looking at each step in isolation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 7045"
      - "Windows Sysmon Event ID 1"
      - "NAI: Multi-user Windows workstations and servers (e.g., Remote Desktop Session Hosts)."
    range: "last 90 days"
    queries:
      - "pseudocode: MODEL user session command sequences with LSTM | SEARCH for anomalous sequences like [download .sys -> sc create -> sc start -> spawn system shell] by non-admin user | IF sequence detected THEN ALERT"
  - question: "Was a process created with a higher integrity level (High/System) than its parent (Medium/Low)?"
    context: "Windows Integrity Levels are a security mechanism to prevent lower-privilege processes from tampering with higher-privilege ones. A process spawning a child with a higher integrity level is a direct sign of privilege escalation. This question looks for these integrity-level jumps, filtering out legitimate system behavior (like UAC prompts via consent.exe) to focus on malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Sysmon Event ID 1"
      - "NAI: All Windows endpoints and servers."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH Sysmon EID 1 | IF child.IntegrityLevel > parent.IntegrityLevel AND parent.ProcessName NOT IN [svchost.exe, consent.exe] THEN ALERT"
  - question: "Did a common user-space process (like powershell.exe or word.exe) spawn a SYSTEM-level child process?"
    context: "It is extremely rare for applications like Microsoft Word or even PowerShell to directly spawn a child process running as SYSTEM. Such an event would almost certainly be the result of an exploit. This question identifies these statistically impossible parent-child relationships as a strong indicator of compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Sysmon Event ID 1"
      - "NAI: All Windows endpoints and servers."
    range: "last 90 days"
    queries:
      - "pseudocode: BASELINE historical probability of parent process spawning SYSTEM-level child | SEARCH Sysmon EID 1 for new SYSTEM-level child processes | GET parent process | IF historical_probability(parent) < 0.01% THEN ALERT"
  - question: "Did a process creation event represent an anomalous edge in a graph of parent-child relationships?"
    context: "Process activity on a system can be modeled as a graph. Legitimate activity forms predictable patterns and structures within this graph. A privilege escalation event, such as a medium-integrity cmd.exe spawning a system-integrity cmd.exe, would create a rare and anomalous edge in this graph. This question uses graph analytics to detect such structural anomalies."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Sysmon Event ID 1"
      - "NAI: All Windows endpoints and servers."
    range: "last 90 days"
    queries:
      - "pseudocode: MODEL process events as a graph (nodes=processes, edges=parent-child relationships) | LEARN legitimate graph patterns | SEARCH for new edges representing privilege escalation (e.g., Medium -> System) | IF edge is not part of learned patterns THEN ALERT"
  - question: "Did a Linux user session gain root privileges shortly after loading a kernel module?"
    context: "This is the classic signature of a privilege escalation exploit using a malicious kernel module. The adversary loads the module (insmod/modprobe) which contains a vulnerability or backdoor, and then immediately uses it to spawn a root shell or execute a command as root. This question correlates these two events within a single user session."
    answer_sources:
      - "Linux auditd logs (type=EXECVE, type=USER_START, type=SYSCALL for init_module)"
      - "NAI: Shared Linux environments (e.g., developer shell servers, multi-user systems)."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH auditd logs by session ID | FIND session with 'insmod' or 'modprobe' execution | WITHIN 5 minutes in same session, SEARCH for process with euid=0 | IF found THEN ALERT"
  - question: "Was a Linux process created with an effective UID of 0 (root) by a parent process that was not running as root?"
    context: "Similar to Windows Integrity Levels, a non-root process on Linux should not be able to directly spawn a root process. The only legitimate way this happens is via programs with the 'setuid' bit set (e.g., sudo). By filtering out known 'setuid' executables, any remaining parent-child transitions from non-root to root are highly indicative of an exploit."
    answer_sources:
      - "Linux auditd logs (type=EXECVE, type=USER_START, type=SYSCALL for init_module)"
      - "NAI: Shared Linux environments (e.g., developer shell servers, multi-user systems)."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH auditd EXECVE logs | IF child.euid == 0 AND parent.euid != 0 AND parent.executable NOT IN [known_setuid_binaries] THEN ALERT"
  - question: "Did a user's command sequence indicate an anomalous transition from standard user activity to root activity?"
    context: "User behavior can be modeled as a series of states (e.g., 'file editing', 'compiling', 'root administration'). A Hidden Markov Model can learn the normal probabilities of transitioning between these states. An unexpected transition from a 'standard user' state to a 'root activity' state, especially when triggered by a rare command like 'insmod', would be flagged by the model as a highly improbable and suspicious sequence."
    answer_sources:
      - "Linux auditd logs (type=EXECVE, type=USER_START, type=SYSCALL for init_module)"
      - "NAI: Shared Linux environments (e.g., developer shell servers, multi-user systems)."
    range: "last 90 days"
    queries:
      - "pseudocode: MODEL user command sequences using HMM with states for privilege levels | IDENTIFY low-probability transitions from 'standard user' to 'root activity' state | IF transition is preceded by rare command like 'insmod' THEN ALERT"