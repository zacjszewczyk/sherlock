name: "T1055.005: Thread Local Storage"
id: "f7b3c1d0-a8e9-4f6c-b2d1-5a9e8f7c6b5a"
description: "This playbook helps identify adversarial use of Thread Local Storage (TLS) callbacks for privilege escalation and defense evasion. Adversaries leverage this technique by injecting malicious code into legitimate processes. For privilege escalation, they target high-privilege system processes (e.g., lsass.exe) to execute code with elevated permissions. For defense evasion, they target common, network-facing processes (e.g., explorer.exe, chrome.exe) to masquerade their command-and-control (C2) traffic or other malicious activities. Indicators include processes from unusual paths or with known-bad hashes requesting write/execute access to other processes, followed by anomalous activity like spawning command shells, unexpected network connections, or dropping new executables."
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a known malicious process requesting write or execute access to a critical system process like lsass.exe or services.exe?"
    context: "This question aims to detect a classic injection technique where a process, already identified as malicious by its hash, attempts to gain control over a high-privilege system process. Gaining this access allows the adversary to execute code with system-level privileges, effectively escalating their permissions. The query specifically looks for handle requests with memory writing or thread creation flags, which are necessary for this type of injection."
    answer_sources:
      - "Windows Event ID 4656"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 1"
      - "Monitored on: Domain Controllers, Critical Application Servers, Privileged User Workstations"
    range: "Last 90 days"
    queries:
      - "Symbolic: SEARCH (EventID=4656 OR SysmonID=10) AND TargetProcess IN (lsass.exe, services.exe, wininit.exe) AND AccessMask CONTAINS (PROCESS_VM_WRITE OR PROCESS_VM_OPERATION OR PROCESS_CREATE_THREAD). JOIN SourceProcessID with (EventID=4688 OR SysmonID=1) to get ProcessHash. CHECK ProcessHash against threat intel feeds. ALERT if match."
  - question: "Is a process with an unusually obfuscated or randomized file path requesting access to a critical system process?"
    context: "Adversaries often place their tools in unexpected or randomized directories to evade simple path-based detection rules. This question uses Shannon entropy to statistically measure the randomness of the source process's file path. A high entropy score compared to a historical baseline suggests the path may be algorithmically generated or intentionally obfuscated, which is a common characteristic of malware droppers attempting to inject into privileged processes."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Monitored on: Domain Controllers, Critical Application Servers, Privileged User Workstations"
    range: "Last 90 days"
    queries:
      - "Statistical: SEARCH (EventID=4656 OR SysmonID=10) AND TargetProcess IN (lsass.exe, services.exe, wininit.exe). CALCULATE Shannon entropy of SourceProcessPath. COMPARE to 30-day baseline. ALERT if entropy is in top 98th percentile."
  - question: "Can a machine learning model predict with high confidence that a handle request to a critical system process is malicious based on its characteristics?"
    context: "This question leverages a machine learning model to perform a more sophisticated, multi-faceted analysis of handle request events. By considering features like process path entropy, command-line details, digital signature status, and parent process information, the model can identify complex patterns indicative of malicious injection attempts that might be missed by simpler rules. A high probability score from the model provides a strong signal of a potential privilege escalation attempt."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Monitored on: Domain Controllers, Critical Application Servers, Privileged User Workstations"
    range: "Last 90 days"
    queries:
      - "Machine Learning: FOR EACH (SysmonID=10) event: EXTRACT features (source path entropy, cmdline length/entropy, is_signed, access_rights, is_target_privileged, parent_process). INPUT features into trained logistic regression model. ALERT if prediction probability > 0.9."
  - question: "Did a privileged process spawn a shell or initiate a network connection shortly after being accessed by an unsigned process?"
    context: "This question looks for the direct aftermath of a successful process injection. An unsigned process gaining write access to a privileged process is suspicious. If that privileged process then behaves abnormally—like spawning a command shell or making a network call—it's a strong indicator that it has been compromised and is now executing the adversary's payload. The 60-second time window is critical for correlating the cause (injection) with the effect (malicious activity)."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek conn.log"
      - "Monitored on: Domain Controllers, Enterprise DNS Servers, Network Egress Points"
    range: "Last 90 days"
    queries:
      - "Symbolic: ON (EventID=4656 OR SysmonID=10) from unsigned SourceProcess to privileged TargetProcess: WATCH TargetPID for 60 seconds. ALERT if TargetPID creates child process (cmd.exe, powershell.exe) OR initiates network connection."
  - question: "Following a write-access handle request, did a privileged process exhibit statistically rare behavior, such as spawning an uncommon child process or connecting to a new IP address?"
    context: "This question aims to detect post-injection activity by baselining the normal behavior of privileged processes. Legitimate system processes typically have a very predictable set of child processes and network destinations. Any deviation from this baseline, especially after a potentially compromising write-access event, is highly suspicious. Flagging activity in the bottom 1% of historical frequency helps to identify these 'never-seen-before' or 'rarely-seen' actions."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek conn.log"
      - "Monitored on: Domain Controllers, Enterprise DNS Servers, Network Egress Points"
    range: "Last 90 days"
    queries:
      - "Statistical: ON (EventID=4656 OR SysmonID=10) with write access to privileged TargetProcess: MONITOR subsequent activity from TargetPID. COMPARE child process name and destination IP to 30-day historical baseline for TargetProcess. ALERT if activity is in bottom 1% frequency."
  - question: "Does a time-series model detect an anomalous spike in network output from a critical process that correlates with a recent write-access event?"
    context: "This question uses a time-series model to detect subtle changes in a critical process's network behavior that might indicate data exfiltration or command-and-control communication following an injection. The model learns the normal rhythm of network traffic (e.g., volume of bytes, unique destinations). A significant, unexplained spike that occurs shortly after a write-access handle request suggests the process's networking capabilities have been hijacked."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Monitored on: Domain Controllers, Enterprise DNS Servers, Network Egress Points"
    range: "Last 90 days"
    queries:
      - "Machine Learning: FOR EACH critical process: MONITOR network metrics (bytes_out, unique_dest_ips) using a time-series anomaly detection model. ON (EventID=4656 OR SysmonID=10) with write access to that process: CHECK for a correlated anomaly spike from the model. ALERT if found."
  - question: "Is a critical system process like lsass.exe making any external network connection?"
    context: "This is a zero-tolerance detection. Critical system processes like lsass.exe, smss.exe, or wininit.exe have no legitimate reason to initiate outbound network connections to external addresses. Any such activity is a high-fidelity indicator of compromise, likely resulting from process injection or another form of subversion."
    answer_sources:
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Monitored on: Network Egress Points, Domain Controllers, DNS Servers"
    range: "Last 90 days"
    queries:
      - "Symbolic: ALERT on (EventID=5156 OR SysmonID=3 OR Zeek conn) where SourceProcess IN (lsass.exe, smss.exe, wininit.exe, csrss.exe) AND DestinationIP is_external."
  - question: "Is a system process like services.exe making a statistically anomalous network connection, such as to a high port or a newly registered domain?"
    context: "This question targets processes that may have legitimate but rare network activity, making a zero-tolerance rule impractical. It uses a Z-score to identify statistically significant outliers in connection patterns (e.g., an unusually high number of connections to a non-standard port). Correlating this with DNS lookups for newly registered domains further increases confidence that the activity is malicious."
    answer_sources:
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Monitored on: Network Egress Points, Domain Controllers, DNS Servers"
    range: "Last 90 days"
    queries:
      - "Statistical: FOR services.exe connections: CALCULATE Z-score on daily connection count per destination port. ALERT if Z > 3. CORRELATE with Zeek DNS logs for domains < 30 days old."
  - question: "Can a one-class SVM model classify a network connection from a system process as anomalous?"
    context: "This question uses a machine learning model (One-Class SVM) that is trained exclusively on legitimate network behavior for system processes. It creates a boundary of 'normalcy'. Any new connection that falls outside this learned boundary is classified as an anomaly. This is effective for detecting novel C2 techniques without prior knowledge of what 'bad' looks like, using features like port, protocol, and SSL/TLS fingerprints."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Monitored on: Network Egress Points, Domain Controllers, DNS Servers"
    range: "Last 90 days"
    queries:
      - "Machine Learning: TRAIN One-Class SVM on legit system process network connections (features: dest_port, protocol, bytes_sent, duration, JA3). FOR new connections: CLASSIFY with model. ALERT if classified as anomaly."
  - question: "Is a process running from a suspicious, user-writable directory requesting full access to a privileged process?"
    context: "This is a classic indicator of malware behavior. Adversaries often drop their payloads into non-standard, user-writable locations like C:\\Users\\...\\AppData or C:\\ProgramData to ensure execution permissions and evade detection. From there, the malware attempts to inject into a privileged process by requesting full access rights (PROCESS_ALL_ACCESS), making this sequence a high-confidence alert."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Monitored on: User Workstations, Terminal Servers, Application Servers"
    range: "Last 90 days"
    queries:
      - "Symbolic: SEARCH (EventID=4656 OR SysmonID=10) with AccessMask=PROCESS_ALL_ACCESS to privileged process. JOIN SourcePID to get SourcePath. ALERT if SourcePath matches regex for user-writable/temp locations."
  - question: "Is a process from a statistically rare file path attempting to inject into a privileged process?"
    context: "This question helps find outlier behavior without relying on predefined lists of 'bad' directories. By calculating the frequency of all process paths that request handles to privileged processes, we can identify paths that are rarely seen. A process executing from a rare path that then attempts to write to a privileged process is highly suspicious and could indicate a novel malware location."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Monitored on: User Workstations, Terminal Servers, Application Servers"
    range: "Last 90 days"
    queries:
      - "Statistical: CALCULATE frequency of all SourceProcessPaths that request handles to privileged processes. ALERT if a request comes from a path in the bottom 5th percentile of frequency."
  - question: "Is a process that exhibits anomalous execution behavior (based on clustering) attempting to inject into a privileged process?"
    context: "This is a two-step approach using machine learning. First, a clustering algorithm like DBSCAN groups all process executions based on features like path, parent, and command line to find anomalous clusters of activity. Second, if any process from one of these anomalous clusters is later observed attempting to inject into a privileged process, it generates a high-confidence alert, effectively linking suspicious execution to a privilege escalation attempt."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Monitored on: User Workstations, Terminal Servers, Application Servers"
    range: "Last 90 days"
    queries:
      - "Machine Learning: CLUSTER Sysmon 1 events (features: path tokens, parent process, cmdline). IDENTIFY anomalous clusters. ALERT if a process from an anomalous cluster later appears in a Sysmon 10 event targeting a privileged process."
  - question: "Is a known malicious process attempting to inject into a common host process like explorer.exe to masquerade its activity?"
    context: "This question aims to detect known malware that uses process injection for defense evasion. The adversary injects into a common, trusted process like explorer.exe or svchost.exe to hide its malicious activities (e.g., C2 communication) within the noise of normal system behavior. The query first identifies a known-bad process by its hash and then alerts if that process attempts to gain write/execute access to a common host process."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Monitored on: All Enterprise Workstations and Servers, VDI Environments"
    range: "Last 90 days"
    queries:
      - "Symbolic: ON (EventID=4688/Sysmon 1): CHECK hash against threat intel. IF match, WATCH PID. ALERT if PID is source of (EventID=4656/Sysmon 10) targeting explorer.exe/svchost.exe with write access."
  - question: "Is a statistically rare process requesting write access to a common injection target like explorer.exe?"
    context: "This question establishes a behavioral baseline of which processes normally interact with common injection targets like explorer.exe. By profiling legitimate handle requests, it can flag any request coming from a source process that is statistically rare or has never been seen before. This is effective for detecting new or unknown malware attempting to use common processes for masquerading."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Monitored on: All Enterprise Workstations and Servers, VDI Environments"
    range: "Last 90 days"
    queries:
      - "Statistical: FOR explorer.exe/svchost.exe: PROFILE legitimate source processes requesting handles. ALERT on write-access requests from a source process not in the top 95% of frequent requesters."
  - question: "Can a Random Forest model predict that a handle request to explorer.exe or svchost.exe is malicious?"
    context: "This question applies a supervised machine learning model to classify handle requests to common host processes. By training on a rich feature set—including details about the source process, its parent, its command line, and signature status—the model can learn the subtle differences between benign and malicious interactions, providing a probabilistic score to alert on high-risk events that might evade simpler rules."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Monitored on: All Enterprise Workstations and Servers, VDI Environments"
    range: "Last 90 days"
    queries:
      - "Machine Learning: FOR EACH handle request to explorer.exe/svchost.exe: EXTRACT features (source process details, parent, cmdline, signature, access mask). SCORE with Random Forest model. ALERT if score > threshold."
  - question: "Did a common process like explorer.exe spawn a command shell immediately after another process gained write access to it?"
    context: "This is a classic post-injection indicator for defense evasion. The adversary injects code into a common process like explorer.exe, and that code's first action is often to spawn a command shell (cmd.exe, powershell.exe) for the attacker to use. This query correlates the write-access event with the subsequent suspicious child process creation within a short time window."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Monitored on: User Workstations, Terminal Servers"
    range: "Last 90 days"
    queries:
      - "Symbolic: ON (EventID=4656/Sysmon 10) with write access to TargetProcess (e.g., explorer.exe): WATCH TargetPID for 60s. ALERT if TargetPID spawns child (cmd.exe, powershell.exe)."
  - question: "After a write-access handle request, did a common process spawn a statistically rare child process?"
    context: "This question detects post-injection activity by baselining normal parent-child relationships. Common processes like chrome.exe or explorer.exe typically spawn a predictable set of child processes. If, after a write-access event, one of these processes spawns a child that is statistically rare (e.g., ftp.exe, whoami.exe), it is a strong indication that the parent process has been hijacked."
    answer_sources:
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Monitored on: User Workstations, Terminal Servers"
    range: "Last 90 days"
    queries:
      - "Statistical: FOR common processes (explorer.exe, chrome.exe): BASELINE child process frequency. ON write-access handle request to one of these: if it spawns a child in the bottom 5th percentile of frequency, ALERT."
  - question: "Can a graph-based anomaly detection model identify an anomalous process execution chain originating from a process that recently had a handle opened to it?"
    context: "This question models process activity as a graph, where processes are nodes and parent-child relationships are edges. It can identify anomalous structures, such as a browser spawning a shell which then spawns a network utility. By correlating the appearance of these unusual process trees with a preceding handle request event to the root of that tree, it can link a potential injection to its malicious consequence with high confidence."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Monitored on: User Workstations, Terminal Servers"
    range: "Last 90 days"
    queries:
      - "Machine Learning: MODEL process lineage (Sysmon 1) as a graph. DETECT anomalous subgraphs. CORRELATE appearance of anomalous subgraph with preceding Sysmon 10 event to the root process of the subgraph. ALERT on correlation."
  - question: "Is a common user-facing process like a web browser connecting to a known-bad or newly registered domain?"
    context: "This question seeks to detect C2 communication that is being masqueraded through a legitimate, user-facing process. After injecting into a process like chrome.exe, the adversary's code will initiate a connection to their C2 server. This query detects such activity by checking the destination against threat intelligence feeds for bad reputation or by identifying domains that were registered very recently (a common tactic for attackers)."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Monitored on: User Workstations, Network Egress Points, DNS Servers"
    range: "Last 90 days"
    queries:
      - "Symbolic: ENRICH Zeek logs with threat intel (reputation, domain age). ALERT if common process (explorer.exe, chrome.exe) connects to destination with bad rep OR domain age < 30 days."
  - question: "Is a process connecting to a 'first seen' domain for that host that also has high entropy, suggesting DGA?"
    context: "This question aims to detect connections to domains generated by a Domain Generation Algorithm (DGA), a common C2 technique. It combines two statistical properties: 1) the domain is new to the specific host ('first seen'), and 2) the domain name itself is random-looking (high Shannon entropy). A domain that is both new and has high entropy is very likely to be part of a DGA-based C2 infrastructure."
    answer_sources:
      - "Zeek dns.log"
      - "Monitored on: User Workstations, Network Egress Points, DNS Servers"
    range: "Last 90 days"
    queries:
      - "Statistical: MAINTAIN baseline of domains per host. ON connection to 'first seen' domain: CALCULATE domain entropy. ALERT if entropy is in top 5th percentile."
  - question: "Does a time-series model detect anomalous network traffic patterns from a common application?"
    context: "This question uses an unsupervised machine learning model to learn the normal 'rhythm' of network traffic from common applications on a per-host basis. It monitors metrics like bytes sent, connection frequency, and SSL/TLS fingerprints. A significant deviation from the learned pattern (a high reconstruction error) indicates an anomaly. If this anomaly coincides with connections to new destinations, it strongly suggests the application's network activity has been hijacked by injected code."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Monitored on: User Workstations, Network Egress Points, DNS Servers"
    range: "Last 90 days"
    queries:
      - "Machine Learning: TRAIN LSTM autoencoder on normal network traffic patterns per host/app. MONITOR for high reconstruction error on new traffic. ALERT on significant deviation, especially to new destinations or with unusual JA3 hash."
  - question: "Did a non-installer process like Microsoft Word write an executable to disk and then attempt to inject into another process?"
    context: "This question targets a common attack chain known as 'drop and inject,' often initiated from a malicious document macro. A process like WINWORD.EXE or OUTLOOK.EXE, which should not be creating executable files, first 'drops' a malicious DLL or EXE to disk. Then, the same process attempts to 'inject' it into another host process. Detecting this specific sequence provides a high-fidelity alert for this TTP."
    answer_sources:
      - "Sysmon Event ID 11"
      - "Windows Event ID 4656"
      - "Sysmon Event ID 10"
      - "Monitored on: User Workstations, Download Directories, Temporary File Locations"
    range: "Last 90 days"
    queries:
      - "Symbolic: ON file creation (Sysmon 11) of .exe/.dll by non-installer (winword.exe): WATCH PID for 5 mins. ALERT if PID is source of handle request (Sysmon 10) with write access."
  - question: "Did a statistically uncommon process create an executable file, especially in an unusual location, before attempting process injection?"
    context: "This question uses a statistical approach to find 'dropper' behavior. It builds a frequency table of which processes normally create executables (e.g., installers, updaters). If a process that rarely creates executables (like a browser or office app) is observed writing a .dll or .exe, it's flagged as an anomaly. The anomaly score is increased if this is followed by an injection attempt from the same process, indicating a likely 'drop and inject' attack."
    answer_sources:
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 10"
      - "Monitored on: User Workstations, Download Directories, Temporary File Locations"
    range: "Last 90 days"
    queries:
      - "Statistical: PROFILE which processes create .exe/.dll files. ALERT if a process outside the top 95% of creators writes an executable, especially if followed by an injection attempt from the same PID."
  - question: "Can a machine learning model identify a 'drop and inject' sequence based on file creation and subsequent process interaction events?"
    context: "This question leverages a machine learning classifier to specifically recognize the 'drop and inject' pattern. The model is trained on features describing the file creation event (e.g., creating process, file type, location) and whether that event was followed by a process injection attempt within a short window. This allows the model to learn the specific combination of features that represent this malicious sequence with high confidence."
    answer_sources:
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 10"
      - "Monitored on: User Workstations, Download Directories, Temporary File Locations"
    range: "Last 90 days"
    queries:
      - "Machine Learning: TRAIN Gradient Boosting model on features (creating process, file ext, target dir, subsequent injection attempt). ALERT if model predicts a high probability of a malicious drop-and-inject sequence."