name: T1497.002: User Activity Based Checks
id: f4a5b6c7-d8e9-4f0a-1b2c-3d4e5f6a7b8c
description: This playbook helps analysts investigate whether an adversary is checking for user activity. This can be done for two primary reasons: defense evasion, where malware checks for signs of human interaction like mouse movement or open documents to avoid execution in automated sandbox environments; and discovery, where an attacker actively searches user directories and files to profile the user or find sensitive data for collection and exfiltration. The included questions cover a range of detection strategies, from matching known tool signatures and analyzing command-line arguments to using statistical and machine learning models to find anomalous behaviors like unusual process delays, high-volume file access, or suspicious sequences of activity.
type: technique
related:
- TA0005: Defense Evasion
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any processes executing that match file hashes of known sandbox evasion tools?
  context: Adversaries use specific tools like 'Pafish' or 'Al-Khaser' to check for user activity (e.g., mouse movement, open documents) to determine if they are running in an automated analysis environment or sandbox. A match against a known file hash for such a tool is a high-confidence indicator of an attempt to evade analysis.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All corporate endpoints (laptops, desktops)
  - Virtual Desktop Infrastructure (VDI) environment
  - Server infrastructure
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_events
      join threat_intel_feed on process_events.file_hash = threat_intel_feed.hash
      where threat_intel_feed.category = "sandbox_evasion_tool"
      return hostname, process_name, command_line, file_hash
- question: Are unsigned executables importing an unusually high number of functions related to user activity checks?
  context: Malware designed for sandbox evasion often imports Windows API functions to check for user interaction (e.g., 'GetCursorPos', 'GetForegroundWindow'). By analyzing the import table of unsigned executables, especially those in user-writable locations, we can statistically identify outliers that import an anomalously high number of these functions compared to a baseline of legitimate software.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - PE file analysis tools
  - All corporate endpoints (laptops, desktops)
  - Virtual Desktop Infrastructure (VDI) environment
  - Server infrastructure
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new unsigned executable in user_writable_path:
        imported_functions = parse_pe_imports(executable)
        user_activity_function_count = count(imported_functions in known_user_activity_apis)
        baseline_count = get_baseline(executable.name)
        if user_activity_function_count > 99th_percentile(baseline_count):
          alert(executable)
- question: Can machine learning models classify any new process executions as 'evasive' based on their characteristics?
  context: A machine learning classifier can learn the complex patterns of evasive processes by analyzing features like parent process, command line, execution path, and whether the binary is signed. This approach can detect novel or previously unseen evasion techniques that may not be caught by signature-based or simple statistical methods. An alert is generated when a process is classified as 'evasive' with a high confidence score.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Machine Learning model inference logs
  - All corporate endpoints (laptops, desktops)
  - Virtual Desktop Infrastructure (VDI) environment
  - Server infrastructure
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new process_event:
        features = extract_features(process_event)
        prediction, confidence = ml_model.predict(features)
        if prediction == "evasive" and confidence > 0.85:
          alert(process_event)
- question: Has a process performed a rapid sequence of file or registry reads indicative of checking for user activity?
  context: Sandbox evasion malware often checks for signs of recent user activity by quickly accessing specific files and registry keys, such as recent document lists, browser history, or desktop contents. This query looks for a predefined, ordered sequence of these accesses by a single process within a very short time window (<10 seconds), which is a strong behavioral indicator of this technique.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - User workstations
  - Terminal servers
  - Domain Controllers
  - File servers hosting user profiles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_and_reg_events
      group by ProcessGUID
      look for sequence [read HKCU\\...\\RunMRU, access %APPDATA%\\...\\Recent, read C:\\Users\\*\\Desktop] within 10 seconds
      if sequence_matched:
        alert(ProcessGUID)
- question: Has a new process accessed an unusually diverse set of directories and registry hives shortly after execution?
  context: A process checking for widespread user activity will touch many different file paths and registry hives. By calculating the Shannon entropy of the unique paths accessed by a process within its first minute of life, we can identify outliers. A high entropy score, especially for an unsigned process in a temp directory, suggests broad, non-standard system interaction, which could be an evasion or discovery check.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - User workstations
  - Terminal servers
  - Domain Controllers
  - File servers hosting user profiles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new process:
        paths = get_file_reg_access_paths(process, first_60_seconds)
        entropy = calculate_shannon_entropy(unique(paths))
        baseline_entropy = get_baseline(process.name)
        if entropy > mean(baseline_entropy) + 3 * stdev(baseline_entropy):
          alert(process)
- question: Do any process event sequences deviate significantly from normal, learned behavior?
  context: An autoencoder model can be trained on sequences of events (process creation, file access, registry access) from millions of benign processes to learn what 'normal' behavior looks like. When a new process exhibits a sequence of events that the model cannot accurately reconstruct, it results in a high reconstruction error. This indicates the behavior is anomalous and could represent a novel evasion or discovery technique.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Machine Learning model inference logs
  - User workstations
  - Terminal servers
  - Domain Controllers
  - File servers hosting user profiles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new process_event_sequence:
        reconstruction_error = autoencoder_model.score(sequence)
        if reconstruction_error > anomaly_threshold:
          alert(sequence.ProcessGUID)
- question: Did a process spawned by a document handler (e.g., Word, Acrobat) wait an unusually long time before making its first network connection?
  context: Adversaries may embed malicious code in documents that uses a "time-stomp" or sleep technique. The malware waits for a period of time, assuming that a sandbox will time out its analysis before the malicious activity begins. This query identifies processes launched from document viewers that exhibit a significant delay (e.g., >3 minutes) between their creation and their first outbound network connection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - User endpoints
  - Email gateway servers
  - Network egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events
      where parent_process in ["WINWORD.EXE", "ACROBAT.EXE"]
      join network_connection_events on process_guid
      group by process_guid
      calculate time_delta = min(network_event.time) - process_creation_event.time
      if time_delta > 3 minutes:
        alert(process_guid)
- question: Is the time delay between a document-spawned process starting and its first network activity a statistical outlier?
  context: Rather than using a fixed time threshold, this approach analyzes the historical distribution of time delays for all processes spawned by document handlers. By identifying processes whose delay falls into the extreme upper percentile (e.g., 98th percentile) of this distribution, we can more adaptively detect anomalous sleep behavior that might be tuned to evade fixed-threshold detections.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - User endpoints
  - Email gateway servers
  - Network egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new document_handler_child_process:
        time_delta = calculate_time_to_first_network_connection(process)
        historical_distribution = get_time_delta_distribution(process.parent_name)
        if time_delta > 98th_percentile(historical_distribution):
          alert(process)
- question: Did a process spawned from a document exhibit a long period of inactivity followed by a sudden burst of activity?
  context: This machine learning approach models the behavior of a process over time, looking at features like child process creation, network connections, and file/registry modifications in short intervals. An anomaly detection model can identify patterns characteristic of evasion, such as a process that does nothing for several minutes (to wait out a sandbox) and then suddenly initiates a flurry of malicious actions.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Machine Learning model inference logs
  - User endpoints
  - Email gateway servers
  - Network egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new document_handler_child_process over first 10 minutes:
        featurize activity in 15-second intervals (process_count, net_conn_count, etc.)
        anomaly_score = time_series_model.predict(feature_vector)
        if anomaly_score > threshold:
          alert(process)
- question: Are command-line arguments being used to search user directories for sensitive keywords?
  context: Adversaries use built-in command-line utilities (like `findstr.exe`) or scripting languages (like PowerShell) to perform discovery. This query uses regular expressions to look for specific command-line patterns that indicate a search for sensitive data (e.g., files containing "password") within user profile directories.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Document management systems
  - Network file shares
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_events
      where command_line matches regex `findstr.*password.*C:\\Users` OR command_line matches regex `powershell.*(Get-ChildItem|Select-String).*login`
      return hostname, process_name, command_line
- question: Do any processes have command-line arguments with unusually high length or entropy?
  context: Long, complex, or obfuscated command lines are often indicative of malicious activity, as adversaries try to cram functionality into a single execution or hide their intent. By baselining the normal length and entropy of command lines for each process, we can flag executions that are statistical outliers, especially when they also reference user profile paths, suggesting discovery or data collection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Document management systems
  - Network file shares
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_event:
        length = length(process_event.command_line)
        entropy = calculate_entropy(process_event.command_line)
        baseline = get_command_line_baseline(process_event.process_name)
        if (length > 99th_percentile(baseline.length) OR entropy > 99th_percentile(baseline.entropy)) AND process_event.command_line contains "C:\\Users\\":
          alert(process_event)
- question: Can a machine learning model classify any command lines as suspicious or indicative of discovery?
  context: Natural language processing models can be trained to understand the structure and intent of command lines, even when they are obfuscated or use novel syntax. This approach allows for the detection of malicious discovery commands that might evade simpler regex or statistical methods. The model classifies each command line in real-time and flags those deemed suspicious with high confidence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Machine Learning model inference logs
  - User workstations
  - Document management systems
  - Network file shares
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_event:
        prediction, confidence = text_classification_model.predict(process_event.command_line)
        if prediction in ["suspicious", "malicious-discovery"] and confidence > threshold:
          alert(process_event)
- question: Is a non-standard process reading a high volume of unique files from user directories?
  context: Adversaries often scan user directories to find files of interest for exfiltration. This behavior can be detected by looking for processes that are not on an allowlist of known good software (like backup or AV tools) and are reading an unusually large number of distinct files from user directories within a short time frame. This is a strong indicator of data staging or discovery.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User home directories on endpoints
  - Departmental and project-specific network file shares
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_read_events
      where process_name not in allowlist and file_path starts with "C:\\Users\\"
      group by process_name, user, hostname over 1_minute_window
      where distinct_count(file_path) > 100
      return process_name, user, hostname, distinct_count(file_path)
- question: Is any process accessing a statistically anomalous number of unique user documents compared to its baseline?
  context: This approach improves upon a fixed threshold by establishing a historical baseline for file access behavior for every process. It tracks the number of unique user documents accessed by each process in a sliding window and alerts when that count significantly exceeds its own normal behavior (e.g., 99.5th percentile). This helps reduce false positives from legitimate applications that may occasionally access many files.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User home directories on endpoints
  - Departmental and project-specific network file shares
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process over 5_minute_window:
        file_count = count_unique_user_files_accessed(process)
        baseline_distribution = get_historical_file_count(process.name)
        if file_count > 99.5th_percentile(baseline_distribution):
          alert(process)
- question: Are any processes exhibiting file access patterns that are behaviorally different from established norms?
  context: By featurizing process behavior (e.g., file access rate, read/write ratio, entropy of file extensions) and applying clustering algorithms, we can group processes into clusters of 'normal' behavior. Processes that do not fit into any existing cluster (outliers) or form new, small clusters represent behavioral deviations. This can uncover novel file scanning or data discovery activities that don't match predefined rules.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Machine Learning model inference logs
  - User home directories on endpoints
  - Departmental and project-specific network file shares
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process over 5_minute_interval:
        features = featurize_file_access_behavior(process)
        cluster_label = clustering_model.predict(features)
        if cluster_label == "outlier" or is_new_small_cluster(cluster_label):
          alert(process)
- question: Did a process access sensitive user files and then immediately make an outbound network connection?
  context: A classic data theft pattern involves an application accessing a store of sensitive data (like browser credential databases or SSH keys) and then exfiltrating that data over the network. This high-fidelity rule looks for this specific chain of events: a process reads a sensitive file and, within a minute, connects to an external, non-allowlisted IP address.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points/Internet gateway
  - DNS resolvers
  - Endpoints hosting user profiles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_access_events
      where file_path in sensitive_file_list
      join network_connection_events on ProcessGUID where time_delta < 60 seconds
      where destination_ip is external and not in allowlist
      alert(ProcessGUID, file_path, destination_ip)
- question: Following access to sensitive files, was the volume of outbound data in the subsequent network connection a statistical outlier?
  context: After gaining access to credentials or other sensitive data, an adversary needs to exfiltrate it. By analyzing the amount of data sent (`orig_bytes`) in network connections that immediately follow sensitive file access, we can spot anomalies. A connection with an unusually large data volume compared to the host's or user's baseline could indicate the exfiltration of the stolen data.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points/Internet gateway
  - DNS resolvers
  - Endpoints hosting user profiles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      find processes that accessed sensitive files
      for each subsequent network connection within 1 minute:
        outbound_bytes = connection.orig_bytes
        baseline_bytes = get_historical_outbound_bytes(connection.source_host)
        if outbound_bytes > 95th_percentile(baseline_bytes):
          alert(connection)
- question: Are there any low-probability event chains involving processes, sensitive files, and network destinations?
  context: This advanced approach models the entire environment as a graph of entities (processes, files, domains) and their interactions (events). A machine learning model learns the common, high-probability paths in this graph. An alert is triggered on rare and suspicious sequences, such as a Word document spawning a PowerShell process that reads the Chrome credential store and then connects to a never-before-seen domain. This detects the entire attack chain as an anomaly.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Machine Learning model inference logs
  - Network egress points/Internet gateway
  - DNS resolvers
  - Endpoints hosting user profiles
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each new event_chain (e.g., process -> reads_file -> connects_to_domain):
        probability_score = graph_model.score(event_chain)
        if probability_score < anomaly_threshold:
          alert(event_chain)