name: T1497.002: User Activity Based Checks
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries attempting to evade defenses or perform discovery by checking for user activity. The playbook helps identify malware that is trying to determine if it is running in an automated analysis environment (a sandbox) or is attempting to profile user activity for data collection. Indicators include processes matching known sandbox evasion tool hashes, rapid file/registry reads in user-activity locations, delayed execution after being spawned from document handlers, command-line searches of user directories, high-volume file reads by non-standard processes, and sensitive file access followed by network connections.
type: technique
related:
  - TA0005: Defense Evasion
  - TA0007: Discovery
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can symbolic logic be used to detect the execution of known sandbox evasion tools by matching file hashes?
    context: This question aims to identify malware that is actively trying to determine if it's running in an automated analysis environment (a sandbox) before executing its main payload. By matching the file hashes of all new processes against a continuously updated list of known evasion tool hashes (like 'Pafish' or 'Al-Khaser'), analysts can catch adversaries in the early stages of an intrusion. A match indicates a high-confidence attempt to evade defenses by checking for signs of user activity.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Applicable to: All corporate endpoints (laptops, desktops); Virtual Desktop Infrastructure (VDI) environment; Server infrastructure.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process_creation_event (Sysmon EID 1):
            LET file_hash = event.file_hash
            IF file_hash IN threat_intel_feed_of_evasion_tools:
              CREATE high_severity_alert with process details
  - question: How can statistical analysis of PE import tables identify potential user activity checks in unsigned executables?
    context: This question helps uncover novel or unknown malware that checks for user activity. Legitimate software has a predictable set of imported functions. Malware designed to evade sandboxes often imports an unusual number of functions related to user interaction (e.g., 'GetCursorPos', 'GetForegroundWindow'). By calculating the frequency of these imports for new, unsigned executables and comparing it to a baseline, analysts can flag suspicious binaries that exceed a normal threshold (e.g., the 99th percentile), indicating likely evasive behavior.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Applicable to: All corporate endpoints (laptops, desktops); Virtual Desktop Infrastructure (VDI) environment; Server infrastructure.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new unsigned_process_event from a user-writable path:
            PARSE PE import table for the process executable
            COUNT occurrences of user-activity-related functions (e.g., GetCursorPos)
            IF count > 99th_percentile_of_baseline:
              CREATE medium_severity_alert
  - question: How can a machine learning classifier be used to identify evasive processes based on execution features?
    context: This question leverages machine learning to detect complex patterns of sandbox evasion that are difficult to define with simple rules or statistics. By training a model (e.g., Random Forest) on features like parent process, command-line arguments, execution path, and PE characteristics, the system can learn to distinguish between benign and evasive processes. When deployed, this model can score new process executions in real-time, allowing analysts to detect sophisticated threats with a high degree of confidence.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Applicable to: All corporate endpoints (laptops, desktops); Virtual Desktop Infrastructure (VDI) environment; Server infrastructure.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process_creation_event:
            EXTRACT features (parent_process, cmd_line, path, is_signed, etc.)
            LET score = ml_classifier_model.predict(features)
            IF score > 0.85:
              CREATE alert with process details and score
  - question: How can symbolic logic detect rapid, sequential access to user-activity-related files and registry keys?
    context: This question focuses on identifying a common malware behavior: rapidly checking for signs of a real user by looking at recent files, browser history, or desktop contents. By defining a specific, ordered sequence of these checks (e.g., query RunMRU registry key, then access Recent Items folder, then read Desktop contents) performed by a single process within a very short time window (<10 seconds), analysts can create a high-fidelity alert for this specific evasive TTP.
    answer_sources: Windows Event ID 4663, Sysmon Event ID 11, Sysmon Event ID 13. Applicable to: User workstations; Terminal servers; Domain Controllers; File servers hosting user profiles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_guid within a 10_second_window:
            IF process accesses 'HKCU\\...\\RunMRU' AND
               process accesses '%APPDATA%\\...\\Recent' AND
               process accesses 'C:\\Users\\*\\Desktop':
              CREATE high_severity_alert
  - question: How can statistical analysis of file/registry path entropy identify anomalous process behavior indicative of user activity checks?
    context: This question helps detect when a process is performing an unusually broad or random-seeming search for user activity artifacts, a behavior that deviates from normal program execution. By calculating the Shannon entropy of the unique directory and registry paths a process accesses shortly after it starts, we can quantify this "randomness." Comparing this entropy score to a baseline for that specific program allows analysts to flag processes whose search behavior is a statistical outlier (e.g., >3 standard deviations above the mean), especially if the process is unsigned.
    answer_sources: Windows Event ID 4663, Sysmon Event ID 11, Sysmon Event ID 13. Applicable to: User workstations; Terminal servers; Domain Controllers; File servers hosting user profiles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process_guid over first 60 seconds:
            AGGREGATE all file and registry access paths
            CALCULATE Shannon entropy of unique paths
            LET baseline_mean, baseline_stddev = get_baseline(process_name)
            IF entropy > (baseline_mean + 3 * baseline_stddev):
              CREATE medium_severity_alert
  - question: How can a machine learning sequence autoencoder detect anomalous process event sequences that suggest evasion?
    context: This question applies deep learning to detect novel evasive behaviors that don't match any predefined signature. A sequence-to-sequence autoencoder is trained on vast amounts of normal process event sequences (e.g., process created, file read, registry key accessed). When a new process's event sequence is fed into the model, the model attempts to reconstruct it. If the reconstruction error is high, it means the sequence is highly abnormal and does not conform to learned benign behaviors, flagging it as a potential threat for investigation.
    answer_sources: Windows Event ID 4663, Sysmon Event ID 11, Sysmon Event ID 13. Applicable to: User workstations; Terminal servers; Domain Controllers; File servers hosting user profiles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process_guid:
            STREAM its event sequence (EventType, TargetObject) to autoencoder_model
            LET reconstruction_error = model.get_error(event_sequence)
            IF reconstruction_error > anomaly_threshold:
              CREATE alert for anomalous event sequence
  - question: How can symbolic logic detect processes from document handlers that delay network activity to evade sandboxes?
    context: This question targets a specific sandbox evasion technique known as "time-based evasion." Automated sandboxes often run a sample for a limited time (e.g., 2-3 minutes). Malware can exploit this by having its dropper (e.g., a macro in a Word document) spawn a process that sleeps for longer than this analysis window before initiating its malicious network connection. This rule detects such behavior by alerting when a process spawned by a document handler (WINWORD.EXE, ACROBAT.EXE) waits an unusually long time (e.g., >3 minutes) before making its first network call.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log. Applicable to: User endpoints; Email gateway servers; Network egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event (Sysmon EID 1) with document_handler_parent:
            LET start_time = event.timestamp
            MONITOR for first network_connection_event (Sysmon EID 3) from the same process
            LET connect_time = network_event.timestamp
            IF (connect_time - start_time) > 3_minutes:
              CREATE high_severity_alert
  - question: How can statistical analysis of time-to-first-network-connection for document-spawned processes identify outliers?
    context: This question provides a more dynamic way to detect time-based evasion compared to a fixed threshold. Instead of a static 3-minute rule, this method involves maintaining a historical distribution of the time delays between process start and first network connection for all processes spawned by document handlers. By alerting on any new process whose delay exceeds a high percentile (e.g., the 98th) of this historical data, the system can adapt to the normal behavior in the environment and more accurately flag true statistical outliers as suspicious.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log. Applicable to: User endpoints; Email gateway servers; Network egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process from document_handler with first_network_connection:
            CALCULATE time_delta = connection_time - process_start_time
            LET percentile_98 = get_historical_percentile(98)
            IF time_delta > percentile_98:
              CREATE medium_severity_alert
  - question: How can a time-series machine learning model detect delayed bursts of activity from processes spawned by document handlers?
    context: This question addresses a sophisticated form of time-based evasion where malware stays dormant for a period and then exhibits a sudden burst of activity (e.g., creating child processes, writing files, making network calls). A time-series anomaly detection model (e.g., Isolation Forest) can be trained on features that capture this activity over short time intervals (e.g., 15 seconds) for the first few minutes of a process's life. The model can then identify a pattern of "long inactivity followed by a sudden burst" as a clear anomaly, indicative of evasion.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log. Applicable to: User endpoints; Email gateway servers; Network egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process from document_handler:
            GENERATE time-series features (child_process_count, net_conn_count per 15s) for first 10 mins
            LET is_anomaly = timeseries_model.predict(features)
            IF is_anomaly:
              CREATE alert for anomalous activity burst
  - question: How can symbolic logic with regular expressions detect discovery activity in process command lines?
    context: This question aims to catch adversaries using built-in command-line tools for discovery. Adversaries often use utilities like `findstr.exe` or scripting languages like PowerShell to search through user directories for files containing sensitive keywords (e.g., "password", "bank", "login"). By monitoring all process command lines for regular expressions that match these search patterns, analysts can detect blatant attempts to find and collect sensitive user data.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Applicable to: User workstations; Document management systems; Network file shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE regex_list = ['findstr.*password.*C:\\Users', 'powershell.*sqlite.*login']
          FOR each process_creation_event:
            IF event.command_line MATCHES ANY in regex_list:
              CREATE high_severity_alert
  - question: How can statistical analysis of command-line length and entropy identify discovery attempts?
    context: This question helps to detect obfuscated or unusually complex command-line activity that may indicate discovery. While a simple command is normal, a very long and complex one, especially for a common process, is suspicious. By establishing a baseline for the length and Shannon entropy (a measure of randomness) of command lines for each process, analysts can flag executions where these metrics are statistical outliers (e.g., >99th percentile), especially if the command also references user profile paths.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Applicable to: User workstations; Document management systems; Network file shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event:
            CALCULATE cmd_length, cmd_entropy = metrics(event.command_line)
            LET baseline_99p = get_baseline(process_name)
            IF (cmd_length > baseline_99p.length OR cmd_entropy > baseline_99p.entropy) AND 'C:\\Users' in event.command_line:
              CREATE medium_severity_alert
  - question: How can a machine learning text classifier be used to detect malicious discovery patterns in command lines?
    context: This question leverages advanced natural language processing to detect novel and obfuscated discovery commands. Simple regex or statistical methods can be bypassed. By training a sophisticated text classification model (like BERT) on a massive dataset of labeled command lines, the system can learn the subtle characteristics of malicious commands. This allows it to classify new, unseen command lines in real-time and flag those that appear to be for discovery, even if they use different syntax or tools.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1. Applicable to: User workstations; Document management systems; Network file shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event:
            LET classification = ml_text_model.predict(event.command_line)
            IF classification == 'malicious-discovery' with high_confidence:
              CREATE alert with command line and classification
  - question: How can a threshold-based rule identify unauthorized processes performing high-volume file reads in user directories?
    context: This question focuses on detecting "smash and grab" data collection, where an adversary's tool rapidly reads a large number of user files. By creating a simple rule that triggers when a single process (that is not an expected process like a backup or antivirus agent) reads more than a set number of unique files (e.g., 100) from user directories within a short window (e.g., 1 minute), analysts can get a clear signal of potential data staging or discovery.
    answer_sources: Windows Event ID 4663, Sysmon Event ID 11. Applicable to: User home directories on endpoints; Departmental and project-specific network file shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_guid over a 1_minute_window:
            IF process_name NOT IN allowlist:
              COUNT unique_file_accesses in 'C:\\Users\\*'
              IF count > 100:
                CREATE alert with process name and files accessed
  - question: How can statistical baselining of unique file accesses per process detect anomalous discovery behavior?
    context: This question provides a more robust way to detect anomalous file scanning by comparing a process's activity to its own history. Some legitimate processes may access many files, which a static threshold would falsely flag. This method establishes a baseline distribution of how many unique files each process typically accesses in a 5-minute window. An alert is only generated when a process's activity dramatically exceeds its own normal behavior (e.g., surpasses the 99.5th percentile), resulting in a more accurate detection.
    answer_sources: Windows Event ID 4663, Sysmon Event ID 11. Applicable to: User home directories on endpoints; Departmental and project-specific network file shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_name over a 5_minute_window:
            COUNT unique_user_documents_accessed
            LET baseline_99_5p = get_historical_baseline(process_name)
            IF count > baseline_99_5p:
              CREATE medium_severity_alert
  - question: How can machine learning clustering algorithms identify processes performing anomalous file scanning?
    context: This question seeks to find outlier processes whose file access behavior does not fit any known pattern of normal activity. By continuously characterizing process behavior into a set of features (e.g., file access rate, read/write ratio, entropy of file extensions) and applying a clustering algorithm like DBSCAN, normal processes will form dense clusters. Processes that are flagged as "noise" or form new, small, isolated clusters are, by definition, behaving differently from the norm and may represent malicious file scanning that warrants investigation.
    answer_sources: Windows Event ID 4663, Sysmon Event ID 11. Applicable to: User home directories on endpoints; Departmental and project-specific network file shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process over 5_minute_intervals:
            FEATURIZE behavior (file_rate, rw_ratio, etc.)
            APPLY DBSCAN clustering algorithm to feature set
            INVESTIGATE processes identified as noise points or new small clusters
  - question: How can stateful correlation link sensitive file access to subsequent suspicious network connections?
    context: This question targets a critical phase of an attack: credential theft and exfiltration. This is a high-confidence detection that looks for a specific chain of events. A stateful rule is created to watch for a process accessing a highly sensitive file (like a browser's credential database or SSH keys). If, within a short time window (e.g., 60 seconds), that same process initiates an outbound network connection to a destination not on a known-good allowlist, an alert is generated. This directly points to likely credential theft.
    answer_sources: Sysmon Event ID 11, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log. Applicable to: Network egress points/Internet gateway; DNS resolvers; Endpoints hosting user profiles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CREATE stateful rule:
          ON Sysmon EID 11 access to sensitive_file (e.g., 'Login Data'):
            WATCH for Sysmon EID 3 from same process_guid within 60 seconds
            IF network destination is not on allowlist:
              CREATE critical_severity_alert
  - question: How can statistical analysis of outbound data volume detect potential exfiltration after sensitive file access?
    context: This question provides supporting evidence for data exfiltration. After a process has accessed a sensitive file, it's crucial to know if it sent any data out. By analyzing the byte count (`orig_bytes`) of the outbound network connection that follows the file access, and comparing that volume to a historical baseline for the user or host, analysts can identify statistical outliers. A connection that sends significantly more data than is normal (e.g., >95th percentile) strongly suggests that the contents of the file were just exfiltrated.
    answer_sources: Sysmon Event ID 11, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log. Applicable to: Network egress points/Internet gateway; DNS resolvers; Endpoints hosting user profiles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network_connection following sensitive_file_access:
            LET data_volume = zeek_conn_log.orig_bytes
            LET baseline_95p = get_baseline(source_host)
            IF data_volume > baseline_95p:
              CREATE alert for potential data exfiltration
  - question: How can a graph-based machine learning model detect suspicious chains of events involving file access and network connections?
    context: This question uses a holistic, graph-based approach to find highly suspicious, multi-stage attack paths that are nearly impossible to define with rules. By modeling security data as a graph (nodes=processes, files, IPs; edges=events), a GNN-based model can learn what normal relationships and event chains look like. It can then spot and alert on low-probability paths in real-time, such as a process spawned from an unusual parent, that then accesses a credential file, and subsequently connects to a never-before-seen domain.
    answer_sources: Sysmon Event ID 11, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log. Applicable to: Network egress points/Internet gateway; DNS resolvers; Endpoints hosting user profiles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM events to security data graph
          USE GNN model to score probability of new event chains
          IF chain_probability is below anomaly_threshold:
            CREATE alert for highly suspicious chain of events (e.g., unusual_parent -> credential_file_access -> new_domain_connection)