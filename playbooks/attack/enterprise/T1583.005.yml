name: T1583.005: Botnet
id: c0f3d5b8-5a3c-4e1d-8f9b-6a7c8d9e0f1a
description: Is the adversary leveraging botnet infrastructure for operations targeting our organization? This playbook helps identify botnet activity through several means: detecting communication with known or suspected C2 infrastructure; identifying network traffic artifacts like malicious User-Agents or rare JA3 hashes; spotting volumetric anomalies like DDoS attacks; finding internal hosts performing scanning or using DGA; and uncovering automated C2 beaconing through timing analysis.
type: technique
related:
- TA0042: Resource Development
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any internal hosts communicating with known botnet command and control (C2) infrastructure based on high-confidence threat intelligence?
  context: This question aims to detect direct communication with known malicious servers. By continuously comparing outbound network connections and DNS queries against a curated list of botnet C2 indicators, we can identify compromised systems with high certainty. A match is a strong signal of an active infection.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Internet gateways
  - DNS resolvers
  - web proxies
  - and perimeter firewalls.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_logs (conn, dns)
      JOIN threat_intel_feed on (destination_ip OR query_domain)
      WHERE feed_source = 'botnet_c2'
      RETURN source_ip, destination_ip, query_domain, timestamp
- question: Are any internal hosts exhibiting a high cumulative risk score by communicating with multiple low-reputation IP addresses associated with potential botnet activity?
  context: This question identifies hosts that may be communicating with emerging or less-documented C2 infrastructure. Instead of relying on a single high-confidence match, it aggregates risk by scoring connections to IPs from various reputation feeds. A host whose cumulative risk score is statistically anomalous compared to its peers is a strong candidate for investigation, even without a definitive C2 match.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Internet gateways
  - DNS resolvers
  - web proxies
  - and perimeter firewalls.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Calculate risk scores for each host over 24h
      CALCULATE risk_score for each source_ip based on destination_ip_reputation
      // Step 2: Establish baseline
      CALCULATE 95th_percentile of all host risk_scores
      // Step 3: Alert
      ALERT where host_risk_score > 95th_percentile
- question: Can we predictively identify new or unknown botnet C2 infrastructure by analyzing the characteristics of outbound connections?
  context: This question uses machine learning to proactively identify potential botnet C2 servers that are not yet on any threat intelligence list. By training a model on features of known good and bad IPs/domains (like ASN, hosting country, domain age), it can score new connections and flag those with a high probability of being malicious. This helps detect novel threats.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Internet gateways
  - DNS resolvers
  - web proxies
  - and perimeter firewalls.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Feature Engineering
      EXTRACT features (ip_rep, asn, country, domain_age, domain_entropy) for each connection
      // Step 2: Prediction
      SCORE connection using pre-trained classification_model
      // Step 3: Alert
      ALERT where probability_score > 0.90
- question: Are any outbound HTTP/TLS connections using fingerprints (User-Agent, JA3/JA3S, JARM) that match known botnet families?
  context: This question seeks to identify specific malware families by matching their unique network fingerprints. Malware often uses hardcoded values for things like HTTP User-Agents or TLS client libraries, resulting in consistent JA3/JA3S hashes or JARM fingerprints. Matching these against a watchlist of known malicious indicators provides high-fidelity alerts for specific botnet infections like Qakbot or Emotet.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek conn.log
  - Network egress points
  - web proxies
  - SSL/TLS inspection appliances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http_logs, ssl_logs
      WHERE user_agent IN botnet_user_agent_watchlist
      OR ja3_hash IN botnet_ja3_watchlist
      OR jarm_fingerprint IN botnet_jarm_watchlist
      RETURN source_ip, destination_ip, user_agent, ja3_hash, jarm_fingerprint
- question: Are any internal hosts using rare or anomalous HTTP User-Agents or TLS client fingerprints (JA3) compared to the rest of the organization?
  context: This question helps find suspicious activity without relying on a pre-existing watchlist. Legitimate software (browsers, system tools) is typically widespread, resulting in common User-Agents and JA3 hashes. Custom malware or unusual tools will appear as rare outliers. By flagging statistically rare fingerprints, analysts can uncover potentially malicious or unauthorized software that deviates from the established organizational baseline.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek conn.log
  - Network egress points
  - web proxies
  - SSL/TLS inspection appliances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Calculate prevalence over 30 days
      CALCULATE prevalence (count of unique hosts) for each ja3_hash and user_agent
      // Step 2: Identify rare values
      IDENTIFY ja3_hashes and user_agents in the bottom 1% of prevalence
      // Step 3: Alert
      SEARCH for current connections using these rare values and ALERT
- question: Can we use machine learning to detect anomalous outbound HTTP/TLS connections that deviate from normal traffic patterns?
  context: This question applies unsupervised machine learning to identify suspicious connections that don't fit the normal profile of the network. An anomaly detection model, like an Isolation Forest, learns the characteristics of legitimate traffic. It can then flag connections with unusual combinations of features (e.g., a strange User-Agent length combined with an unusual certificate issuer) as outliers, even if no single feature is explicitly malicious. This is effective for finding novel or polymorphic malware.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek conn.log
  - Network egress points
  - web proxies
  - SSL/TLS inspection appliances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Feature Engineering
      EXTRACT features (ja3, jarm, cert_issuer, user_agent_length, uri_length) from http/ssl logs
      // Step 2: Anomaly Detection
      SCORE connections using pre-trained isolation_forest_model
      // Step 3: Alert
      ALERT on connections identified as significant outliers
- question: Is any internal service experiencing a high rate of failed or rejected inbound connection attempts from a large number of distinct sources, indicative of a DDoS attack?
  context: This question provides a simple, direct way to detect the onset of a common DDoS attack, such as a SYN flood. A high volume of connection attempts ('S0') or rejections ('REJ') to a single service from many different sources points to a coordinated effort to overwhelm that service. A static threshold provides a clear trigger for an immediate alert.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Perimeter firewalls
  - internet-facing application servers
  - public DNS servers
  - VPN concentrators.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH conn_logs in last 1 minute
      WHERE conn_state IN ('S0', 'REJ')
      COUNT distinct source_ips by destination_ip, destination_port
      ALERT if distinct_source_ip_count > 10000
- question: Is there a statistically significant increase in the diversity of source IP addresses targeting a specific internal service?
  context: This question aims to detect DDoS attacks by measuring the randomness (entropy) of source IPs. Normal traffic to a service comes from a somewhat predictable set of sources. A DDoS attack, originating from a distributed botnet, causes a sharp, anomalous spike in the diversity and randomness of source IPs. Comparing the current entropy to a rolling baseline is a robust way to detect this shift and is less prone to false positives than static thresholds.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Perimeter firewalls
  - internet-facing application servers
  - public DNS servers
  - VPN concentrators.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Calculate current entropy
      CALCULATE shannon_entropy of source_ips per destination_service in last 5 minutes
      // Step 2: Get baseline
      CALCULATE mean and std_dev of entropy for the last 24 hours
      // Step 3: Alert
      ALERT if current_entropy > (mean + 3 * std_dev)
- question: Are the current inbound connection volume and source IP count for a critical service significantly deviating from forecasted normal levels?
  context: This question uses time-series forecasting to create a sophisticated, dynamic baseline for critical service traffic. Models like ARIMA or LSTM learn the normal patterns, including daily and weekly cycles. A DDoS attack causes a sudden, massive spike in traffic that will fall far outside the model's predicted range. This method is highly effective at detecting volumetric anomalies while minimizing false alarms from legitimate traffic spikes.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Perimeter firewalls
  - internet-facing application servers
  - public DNS servers
  - VPN concentrators.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Forecast
      FORECAST expected_connection_count and expected_unique_source_ips using pre-trained time_series_model
      // Step 2: Observe
      GET current_connection_count and current_unique_source_ips
      // Step 3: Alert
      ALERT if current values significantly exceed forecasted range
- question: Is any internal host making an unusually high number of connections to unique external destinations, and can we identify the process responsible?
  context: This question seeks to identify internal hosts that have been compromised and are being used for scanning activities, a common behavior for bots seeking new targets. A high, fixed threshold for unique connections is a simple indicator of scanning. Correlating this network activity with endpoint process creation logs (Event IDs 5156 and 4688) is crucial for moving from detection to response, as it pinpoints the malicious executable on the compromised host.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Windows Event ID 4688
  - Endpoint devices (workstations and servers)
  - internal DNS resolvers
  - and network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH conn_logs in last 1 hour
      COUNT unique destination_ips by source_ip
      IF count > 500 for a source_ip:
        SEARCH endpoint_logs for that source_ip and timestamp
        CORRELATE WinEventID 5156 with WinEventID 4688
        RETURN source_ip, responsible_process_name
- question: Is any internal host exhibiting statistically anomalous scanning behavior or making DNS queries for random-looking domains characteristic of a Domain Generation Algorithm (DGA)?
  context: This question uses two statistical methods to find compromised bots. First, it identifies hosts whose scanning activity is abnormal for that specific host, rather than using a single threshold for everyone. This is more accurate, as a server's normal behavior is different from a user's workstation. Second, it detects DGA, a technique used by malware to find its C2 server, by measuring the randomness (entropy) of DNS queries. A spike in DNS query entropy is a strong indicator of a DGA-based bot.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Windows Event ID 4688
  - Endpoint devices (workstations and servers)
  - internal DNS resolvers
  - and network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For scanning:
      CALCULATE 99th_percentile of hourly unique destination_ips for each host over 30 days
      ALERT if current hourly count > 99th_percentile
      // For DGA:
      CALCULATE shannon_entropy of DNS query domains per host per 15 mins
      COMPARE to host's historical baseline
      ALERT on significant entropy increase
- question: Can we identify compromised internal bots by finding hosts whose overall network behavior patterns are anomalous compared to their peers?
  context: This question uses clustering, an unsupervised machine learning technique, to group hosts with similar network behaviors. The vast majority of hosts will fall into one or more large 'normal' clusters. Compromised bots, with their unique scanning or beaconing patterns, will not fit into these clusters and will be flagged as outliers. This approach can detect a wide variety of bot-like behaviors without prior knowledge of the specific attack.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Windows Event ID 4688
  - Endpoint devices (workstations and servers)
  - internal DNS resolvers
  - and network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Feature Engineering
      FOR each host, EXTRACT features (total_connections, unique_dests, bytes_out, dns_queries)
      // Step 2: Clustering
      RUN DBSCAN clustering algorithm on all hosts
      // Step 3: Alert
      ALERT on hosts classified as noise/outliers (not in a major cluster)
- question: Are there any outbound connections to known C2 servers, or is any network protocol being used on a non-standard port to evade detection?
  context: This question looks for two common C2 communication patterns. The first is a straightforward check against a list of known malicious servers. The second, and more subtle, is looking for protocol mismatch or tunneling, such as SSH traffic over port 443 (typically HTTPS). Adversaries use this technique to blend their C2 traffic with normal encrypted web traffic, bypassing simple port-based firewall rules. Detecting this mismatch is a strong sign of evasion.
  answer_sources:
  - Zeek conn.log
  - Network egress points
  - endpoint devices (workstations, servers).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Check 1: Known C2
      SEARCH outbound_connections
      WHERE destination_ip IN c2_intel_list
      ALERT on match
      // Check 2: Protocol Mismatch
      SEARCH outbound_connections
      WHERE (zeek_protocol = 'ssh' AND destination_port != 22)
      OR (zeek_protocol = 'dns' AND destination_port != 53)
      ALERT on match
- question: Is any internal host communicating with an external destination using highly regular, machine-like time intervals, indicating automated C2 beaconing?
  context: This question aims to identify C2 beaconing by its robotic regularity. Human-generated traffic is bursty and irregular, while automated malware beacons are often highly periodic. By calculating the standard deviation of the time between connections (jitter) for a given source-destination pair, we can quantify this regularity. A very low standard deviation (low jitter) over a series of connections is a strong statistical indicator of automated, non-human communication.
  answer_sources:
  - Zeek conn.log
  - Network egress points
  - endpoint devices (workstations, servers).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip, destination_ip pair:
        CALCULATE time_delta between consecutive connections
        CALCULATE standard_deviation of time_deltas
        IF connection_count > 10 AND std_dev < 1_second:
          ALERT for low-jitter beaconing
- question: Can we detect periodic C2 beaconing by transforming connection timing data into the frequency domain, even if the beaconing has some jitter?
  context: This question uses advanced signal processing to find C2 beaconing. A Fast Fourier Transform (FFT) converts a time-based signal (like connection timestamps) into its constituent frequencies. A perfectly regular beacon will show up as a single, sharp spike in the frequency domain. This method is powerful because it can still detect the underlying periodicity even if the malware adds random delays (jitter) to its beacons, a common technique to evade simple statistical analysis. A strong peak in the frequency spectrum is a robust indicator of automated beaconing.
  answer_sources:
  - Zeek conn.log
  - Network egress points
  - endpoint devices (workstations, servers).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip, destination_ip pair over 24 hours:
        CREATE time_series of connection events
        APPLY Fast Fourier Transform (FFT) to the time_series
        SEARCH for dominant frequency peaks in the spectrum
        ALERT if a strong peak is found above the noise floor