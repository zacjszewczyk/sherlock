name: T1584.004: Server
id: f1a2b3c4-d5e6-4f78-9a0b-1c2d3e4f5a67
description: >-
  This playbook addresses the question: "Is the adversary developing resources by compromising external servers for use in operations against our organization?". It provides investigative steps to detect malicious outbound connections that could indicate an internal host is communicating with an adversary-controlled server. The playbook focuses on identifying connections to known malicious infrastructure, detecting network artifacts characteristic of C2 frameworks (e.g., JA3/JA3S, URI patterns), analyzing traffic for beaconing behavior and anomalous data volumes, scrutinizing SSL/TLS certificates for anomalies like self-signed status or short validity, and correlating network connections to new domains with subsequent suspicious process executions on the endpoint.
type: technique
related:
- TA0042: Resource Development
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: >-
    Are any internal hosts communicating with external IPs, domains, or servers using certificates that are listed in our threat intelligence database as known malicious infrastructure?
  context: >-
    This question aims to detect direct communication with known adversary infrastructure. Matching network artifacts like IPs, domains, or certificate serials against a high-confidence threat intelligence feed is one of the most direct ways to identify compromised hosts or ongoing attacks. A positive match indicates a high probability of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek x509.log
  - Network Egress Points (Firewalls/Proxies)
  - Corporate DNS Resolvers
  - TLS-inspecting network sensors
  - Threat Intelligence Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_logs, dns_logs, certificate_logs
      JOIN with threat_intelligence_db ON (destination_ip, domain, certificate_serial)
      WHERE match_found
      RETURN source_ip, destination, indicator_matched
- question: >-
    Are internal hosts connecting to non-allowlisted external domains that exhibit high-risk characteristics, such as being newly registered or having a high risk score?
  context: >-
    Adversaries often use newly registered or strategically chosen domains for their operations. This question proactively hunts for such activity by risk-scoring domains that are not on an approved list. Factors like domain age, registration privacy, and ASN reputation can reveal suspicious domains before they are added to formal threat intelligence feeds.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls/Proxies)
  - Corporate DNS Resolvers
  - External domain enrichment service (WHOIS, ASN reputation)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each domain in dns_logs NOT in allowlist:
        ENRICH domain with (age, registration_info, ASN_reputation)
        CALCULATE risk_score
        IF risk_score > threshold OR age < 30_days:
          RETURN source_ip, domain, risk_score, age
- question: >-
    Are there any outbound network connections that a machine learning model predicts as having a high probability of being malicious?
  context: >-
    This question leverages a predictive model to identify malicious connections that may not match known indicators. By training a model on features from network logs (e.g., IP, port, ASN, duration, certificate details), it can learn the subtle patterns of malicious traffic and flag new, previously unseen connections that fit this profile with a high degree of confidence.
  answer_sources:
  - Zeek conn.log
  - Zeek x509.log
  - Network Egress Points (Firewalls/Proxies)
  - TLS-inspecting network sensors
  - Trained classification model
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_connection in network_logs:
        EXTRACT features (dest_ip, port, asn, protocol, duration, cert_attributes)
        PREDICT probability_malicious = model.predict(features)
        IF probability_malicious > 0.85:
          RETURN source_ip, destination_ip, probability_malicious, connection_details
- question: >-
    Have any outbound connections been identified that use JA3/JA3S hashes, HTTP User-Agents, or URI patterns matching those of known command-and-control (C2) frameworks?
  context: >-
    C2 frameworks often have unique network fingerprints (e.g., the way a client constructs a TLS handshake, resulting in a specific JA3 hash). This question seeks to identify these fingerprints in real-time. A match against a watchlist of known C2 indicators provides strong evidence of a specific malware or threat actor toolkit operating on the network.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - TLS-inspecting network sensors
  - Network Egress Points (Firewalls/Proxies)
  - Endpoints generating the traffic
  - C2 Indicator Watchlist
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH ssl_logs, http_logs
      JOIN with C2_watchlist ON (ja3_hash, ja3s_hash, user_agent, uri_pattern)
      WHERE match_found
      RETURN source_ip, destination_ip, matched_indicator, indicator_type
- question: >-
    Are there any outbound HTTP requests with unusually high entropy in their URI path or query parameters, suggesting encoded C2 communication?
  context: >-
    Adversaries often encode data within URI parameters to exfiltrate information or send commands, which results in a high degree of randomness or entropy. This question aims to detect this anomaly by comparing the entropy of URIs against a baseline of normal traffic. A high-entropy URI is a strong statistical indicator of non-human, potentially malicious communication.
  answer_sources:
  - Zeek http.log
  - Network Egress Points (Firewalls/Proxies)
  - Endpoints generating the traffic
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each request in http_logs:
        CALCULATE entropy(uri_path, query_params)
        IF entropy > baseline_95th_percentile:
          RETURN source_ip, destination, uri, entropy_value
- question: >-
    Are there any outbound HTTP requests being classified as malicious by a sequence-based machine learning model trained to recognize malicious URI patterns?
  context: >-
    This question uses a more advanced machine learning approach (like an LSTM) to detect C2 communications that use algorithmically generated URIs. These models can learn the structural patterns of malicious URIs and identify variations that would evade simple signature or entropy-based detection, providing a more robust defense against evolving C2 techniques.
  answer_sources:
  - Zeek http.log
  - Network Egress Points (Firewalls/Proxies)
  - Endpoints generating the traffic
  - Trained sequence model
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_request in http_logs:
        PREDICT classification = sequence_model.predict(uri_pattern)
        IF classification == 'malicious':
          RETURN source_ip, destination, uri, model_confidence
- question: >-
    Are any internal hosts making a high number of small, frequent connections to a single external destination, which could indicate C2 beaconing?
  context: >-
    This question looks for a common beaconing pattern: many small 'heartbeat' connections over a short period. By setting a threshold for connection count (e.g., >20 in an hour) and a ceiling for data volume (<1MB), this rule effectively distinguishes likely C2 beaconing from legitimate, high-volume data transfers.
  answer_sources:
  - Zeek conn.log
  - Network Egress Points (Firewalls/Proxies)
  - Endpoint devices and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      AGGREGATE conn_logs by source_ip, dest_ip over 1_hour_windows
      WHERE source_ip is internal AND dest_ip is external AND dest_ip NOT in allowlist
      CALCULATE connection_count, total_bytes
      IF connection_count > 20 AND total_bytes < 1MB:
        RETURN source_ip, dest_ip, connection_count, total_bytes
- question: >-
    Are any internal hosts connecting to an external destination with machine-like regularity, suggesting automated C2 beaconing?
  context: >-
    Automated malware, unlike humans, communicates at precise, regular intervals. This question aims to detect this regularity by calculating the standard deviation of time intervals between connections (jitter). A very low standard deviation indicates a consistent, non-random pattern, which is a strong signal of automated beaconing.
  answer_sources:
  - Zeek conn.log
  - Network Egress Points (Firewalls/Proxies)
  - Endpoint devices and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip, dest_ip pair in conn_logs over 24_hours:
        CALCULATE time_deltas between consecutive connections
        CALCULATE stdev(time_deltas)
        IF stdev < 2.0_seconds:
          RETURN source_ip, dest_ip, stdev
- question: >-
    Can a time-series analysis of outbound connection patterns for any internal host reveal strong, uncommon periodic signals indicative of beaconing?
  context: >-
    This question applies advanced time-series analysis to uncover hidden periodic behaviors that might be missed by simpler statistical methods. A decomposition model can isolate the periodic component of connection activity, allowing an analyst to identify strong, repeating cycles (e.g., a connection every 7 minutes) that do not align with known legitimate application behavior.
  answer_sources:
  - Zeek conn.log
  - Network Egress Points (Firewalls/Proxies)
  - Endpoint devices and servers
  - Time-series decomposition model
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host in internal_network:
        GET outbound_connection_timestamps over time
        APPLY STL_decomposition(timestamps)
        ANALYZE periodic_component for strong, uncommon frequencies
        IF strong_uncommon_periodicity_found:
          RETURN host, destination, detected_period
- question: >-
    Are any internal hosts connecting to non-approved external servers using self-signed SSL/TLS certificates?
  context: >-
    While self-signed certificates have legitimate uses in internal networks, their use by external servers is highly suspicious and a common tactic for adversaries setting up C2 infrastructure. This question specifically looks for this combination to flag connections that warrant immediate investigation, as they are likely attempting to encrypt malicious traffic with an untrusted certificate.
  answer_sources:
  - Zeek ssl.log
  - Zeek x509.log
  - Network Egress Points (Firewalls/Proxies)
  - Public Certificate Transparency Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH x509_logs
      WHERE issuer == subject AND destination_ip NOT in internal/partner_allowlist
      RETURN source_ip, destination_ip, certificate_subject
- question: >-
    Are we observing any outbound TLS connections using certificates with unusually short validity periods or high-entropy subject names?
  context: >-
    Adversaries often use free, short-term certificates (e.g., from Let's Encrypt, valid for 90 days) or generate certificates with randomized, high-entropy subject names. This question establishes a baseline for normal certificate attributes and flags outliers. A certificate with a very short lifespan or a nonsensical subject name is statistically anomalous and may indicate it was created for temporary, malicious use.
  answer_sources:
  - Zeek x509.log
  - Network Egress Points (Firewalls/Proxies)
  - Public Certificate Transparency Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each certificate in x509_logs:
        CALCULATE validity_days, subject_entropy
        IF validity_days < bottom_5_percentile OR subject_entropy > top_5_percentile:
          RETURN source_ip, destination_ip, certificate_subject, validity_days, subject_entropy
- question: >-
    Can we use unsupervised machine learning to identify anomalous certificates that do not group with the large clusters of legitimate, trusted certificates?
  context: >-
    This question employs clustering algorithms (like DBSCAN) to automatically group certificates by their features (validity, key length, algorithm, etc.). Legitimate certificates from major CAs will form large, dense clusters. Adversary-generated certificates, having different characteristics, will appear as small, isolated clusters or individual noise points. This method can discover novel malicious certificates without prior knowledge of their attributes.
  answer_sources:
  - Zeek x509.log
  - Network Egress Points (Firewalls/Proxies)
  - Public Certificate Transparency Logs
  - Unsupervised clustering model
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GET all certificates and features (validity, key_length, algo, subject_entropy)
      APPLY DBSCAN_clustering(certificate_features)
      FOR each certificate classified as 'outlier' or in a 'small_cluster':
        RETURN source_ip, destination_ip, certificate_details, cluster_id
- question: >-
    Has any host connected to a newly observed domain and then immediately executed a suspicious PowerShell command?
  context: >-
    This question correlates network activity with endpoint behavior to detect a common attack chain: a user clicks a link (to a new domain), which triggers a download and execution of a malicious payload via PowerShell. Correlating the new domain resolution with the subsequent execution of PowerShell using obfuscation or stealth arguments ('-enc', '-nop') provides high-fidelity evidence of a likely compromise.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Endpoint devices
  - Domain Controllers
  - Corporate DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for dns_resolution to a new_domain (first time in 24h)
      WITHIN 5 minutes on same host:
        SEARCH for process_creation (event_id 4688)
        WHERE process_name == 'powershell.exe' AND command_line contains ('-enc', '-nop', '-w hidden')
        RETURN host, new_domain, powershell_command
- question: >-
    Are there any instances of a host connecting to a rarely seen domain, followed immediately by the execution of a rarely used process on that same host?
  context: >-
    This question hunts for statistical anomalies by correlating two rare events. A connection to an uncommon domain is suspicious, and the execution of an uncommon process is also suspicious. When both occur in a tight sequence on the same host, the probability of the combined event being malicious is significantly higher. This technique can uncover novel threats without relying on known signatures.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Endpoint devices
  - Domain Controllers
  - Corporate DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        IDENTIFY rare_domains (bottom 5% frequency) and rare_processes (bottom 5% frequency)
        SEARCH for connection to a rare_domain
        WITHIN 2 minutes on same host:
          SEARCH for execution of a rare_process
          RETURN host, rare_domain, rare_process
- question: >-
    Has a graph-based anomaly detection model identified any highly unusual sequences of network and endpoint activity, such as a host connecting to a new domain and then launching a scripting engine?
  context: >-
    This question uses a sophisticated graph-based model to understand the relationships and sequences of events (host -> resolves -> domain, host -> executes -> process). The model learns what "normal" pathways look like and can then assign an anomaly score to new event sequences. A high score on a path like [Host] -> [New Domain] -> [Scripting Engine] would indicate a significant deviation from normal behavior and a likely attack.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Endpoint devices
  - Domain Controllers
  - Corporate DNS Resolvers
  - Graph-based anomaly detection model
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CONSTRUCT event_graph with nodes (hosts, domains, processes) and time-ordered edges (resolves, connects, executes)
      FOR each new event_sequence:
        CALCULATE anomaly_score = GNN_model.predict(sequence)
        IF anomaly_score > threshold:
          RETURN sequence, anomaly_score