name: "T1418: Software Discovery"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps determine if an adversary is attempting to discover installed applications on managed mobile devices. This is often accomplished by using tools like the Android Debug Bridge (adb.exe) to query for package lists, by exfiltrating application lists over the network via anomalous outbound connections, or by installing malicious applications that request specific permissions (like 'android.permission.QUERY_ALL_PACKAGES' on Android or use of the private 'LSApplicationWorkspace' API on iOS) to enumerate other apps on the device."
type: "technique"
related:
  - "TA0032: Discovery"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
investigative_questions:
  - question: "Has the Android Debug Bridge (adb.exe) been used to list installed packages from an unauthorized host?"
    context: "This question focuses on a common method for enumerating software on a connected mobile device. The 'adb.exe shell pm list packages' command is a specific indicator of this activity. By correlating the source host of this command with a pre-defined list of authorized developers or IT staff, analysts can filter out legitimate activity and focus on executions from unauthorized systems, which are highly suspicious."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities."
    range: "last 90 days"
    queries:
      - "Search process creation logs for ProcessName 'adb.exe' and CommandLine containing 'shell', 'pm', 'list', and 'packages'. Check if the source hostname is on the authorized asset list. Alert if not."
  - question: "Is a user executing 'adb.exe pm list packages' commands at an anomalously high frequency or with unusually complex command-line arguments?"
    context: "This question aims to detect abuse by legitimate users or attackers using compromised accounts. It uses statistical methods to identify behavior that deviates from a user's established baseline. A sudden spike in the frequency of package listing commands (measured by standard deviation) or the use of unusually long or complex commands (measured by Shannon entropy) can indicate automated scripting or obfuscation techniques used by an adversary."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities."
    range: "last 90 days"
    queries:
      - "For each user, baseline daily 'adb.exe pm list packages' frequency over 30 days. Alert if current day's count > 3 standard deviations from baseline. Separately, calculate command-line entropy for all 'adb.exe' executions and alert if entropy is in the 98th percentile for that user."
  - question: "Does an 'adb.exe' execution exhibit a combination of features that a machine learning model identifies as highly indicative of malicious activity?"
    context: "This question leverages a sophisticated, multi-faceted approach using machine learning. By considering features like command-line length, entropy, specific keywords, the parent process (e.g., 'cmd.exe' vs. 'explorer.exe'), and time of day, the model can identify complex patterns of maliciousness that simple rule-based alerts might miss. A high probability score suggests a strong correlation with previously observed malicious behavior."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities."
    range: "last 90 days"
    queries:
      - "For each 'adb.exe' process creation event, extract features (e.g., command-line length, entropy, parent process, time of day). Input features into a trained classification model. Alert if the returned malicious probability score is > 0.90."
  - question: "Is a mobile device exfiltrating data consistent with an application list via an HTTP POST to a suspicious domain, or using long DNS queries indicative of tunneling?"
    context: "This question targets two potential exfiltration methods for discovered software lists. The first looks for moderately sized data uploads (1KB-50KB) via HTTP POST to known-bad or newly created domains. The second looks for DNS tunneling, where data is encoded in long DNS queries to malicious servers. Both are strong indicators of data theft, and checking against threat intelligence or domain age adds critical context."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers."
    range: "last 90 days"
    queries:
      - "Search http.log for POST requests from mobile IP range with request_body_len between 1024-51200 AND destination host is on a threat feed or < 30 days old. OR, search dns.log for query length > 100 characters to a low-reputation domain."
  - question: "Has a mobile device made an unusually large, brief outbound connection to an uncommon destination?"
    context: "This question seeks to identify anomalous network behavior at the individual device level. A short-lived connection with an abnormally large amount of data sent from the device, especially to a destination rarely contacted by other devices in the organization, is highly suspicious. This pattern could represent the rapid exfiltration of a collected application list or other sensitive data."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers."
    range: "last 90 days"
    queries:
      - "For each mobile IP, baseline outbound data size (orig_bytes) over 30 days. Alert if a new connection's orig_bytes > 99th percentile AND duration < 10 seconds AND destination IP is seen by < 5 other internal devices."
  - question: "Does a mobile device's network session exhibit anomalous characteristics, and is the destination domain algorithmically generated (DGA)?"
    context: "This advanced question uses a two-step machine learning process. First, it identifies network sessions that are statistical outliers based on their connection properties (e.g., data volume, duration, protocol). Second, for those anomalous sessions, it checks if the destination domain appears to be generated by a Domain Generation Algorithm (DGA), a common technique for malware command and control. A match in both stages is a high-fidelity indicator of malicious activity."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers."
    range: "last 90 days"
    queries:
      - "Run clustering algorithm (DBSCAN) on mobile device conn.log data. For sessions flagged as anomalies, extract destination domain from http.log/dns.log. Input domain into a DGA detection model. Alert if DGA score > 0.85."
  - question: "Has an application been installed or updated that requests permissions known to allow for application discovery on Android or iOS?"
    context: "This question focuses on a direct and high-confidence indicator. The 'android.permission.QUERY_ALL_PACKAGES' permission (Android) and private 'LSApplicationWorkspace' API (iOS) are powerful and often unnecessary capabilities that allow an app to see all other installed apps. Alerting on their use, while allowing for specific, approved exceptions, is a critical step in preventing this form of software discovery."
    answer_sources:
      - "MDM/MTD Application Inventory Logs"
      - "MDM/MTD Security Alert Logs"
      - "Corporate MDM/MTD platform and Application Vetting Systems."
    range: "last 90 days"
    queries:
      - "Search MDM/MTD logs for new app installs or updates where the manifest contains 'android.permission.QUERY_ALL_PACKAGES' or analysis flags 'LSApplicationWorkspace' API usage. Alert if the app is not on the approved allowlist."
  - question: "Has a newly installed application requested a set of permissions that are statistically rare and therefore high-risk?"
    context: "This question moves beyond single permissions to assess the overall risk of an application based on the rarity of its entire permission set. An application requesting many uncommon permissions is more likely to be suspicious. By assigning a risk score based on permission prevalence across the entire mobile fleet, this method can flag potentially malicious apps that don't use a single, obvious high-risk permission."
    answer_sources:
      - "MDM/MTD Application Inventory Logs"
      - "MDM/MTD Security Alert Logs"
      - "Corporate MDM/MTD platform and Application Vetting Systems."
    range: "last 90 days"
    queries:
      - "From MDM inventory, calculate prevalence of each permission. For each app, sum the inverse prevalence of its permissions to create a risk score. Alert on any new app with a risk score in the 99th percentile."
  - question: "Based on a machine learning model, does a new application's combination of permissions, install source, and developer reputation indicate a high probability of being malicious?"
    context: "This question represents a proactive, predictive security control. By training a model on known good and bad applications, it can learn the complex interplay of factors that indicate malice. This allows for the automatic identification and quarantining of new threats based on features like permissions requested, install method, and developer history, providing a powerful defense against novel malware."
    answer_sources:
      - "MDM/MTD Application Inventory Logs"
      - "MDM/MTD Security Alert Logs"
      - "Corporate MDM/MTD platform and Application Vetting Systems."
    range: "last 90 days"
    queries:
      - "For each new application, extract features (permission vector, install source, developer reputation). Input features into a trained classification model. Quarantine the app and alert if the returned malicious probability score is > 0.95."