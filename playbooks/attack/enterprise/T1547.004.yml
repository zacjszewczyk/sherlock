name: T1547.004: Winlogon Helper DLL
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is maintaining persistence or escalating privileges by abusing Winlogon helper DLL configurations. This involves detecting modifications to critical Winlogon registry keys (`Userinit`, `Shell`, or `Notify` subkeys) that reference malicious, unknown, or baseline-deviating executables/DLLs. It also looks for suspicious processes spawned by `winlogon.exe`, `userinit.exe`, or `explorer.exe` shortly after logon, outbound network connections from these processes, and evidence of credential dumping or privilege escalation commands being executed through this mechanism.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Have any Winlogon registry keys (`Userinit`, `Shell`, `Notify`) been modified to reference a file that is known to be malicious based on its hash?
    context: Adversaries can achieve persistence by adding a malicious DLL or executable to a Winlogon registry key. This question aims to detect this behavior by checking if the hash of a newly referenced file matches any known malicious indicators in a threat intelligence feed. A match is a high-confidence indicator of a compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Configuration Management Databases (for baseline validation)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Winlogon\\Userinit" OR TargetObject CONTAINS "Winlogon\\Shell" OR TargetObject CONTAINS "Winlogon\\Notify")
          | EXTRACT FilePath from EventDetails
          | JOIN FileCreationEvents ON FilePath
          | EXTRACT FileHash
          | LOOKUP ThreatIntelFeed for FileHash
          | RETURN Events where ThreatIntelFeed.Match = true
  - question: Have any Winlogon registry keys been modified to point to a file with an unusually high-entropy name located in a rare directory?
    context: To evade detection based on known filenames, adversaries often use randomly generated filenames (high entropy) and place them in uncommon directories. This statistical check identifies outliers that fit this pattern, which is a strong indicator of an attempted evasion technique, even if the file hash is not yet known to be malicious.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Configuration Management Databases (for baseline validation)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Winlogon")
          | EXTRACT FilePath from EventDetails
          | CALCULATE Entropy(FileName) as FileNameEntropy
          | CALCULATE Rarity(Directory) as DirectoryRarity
          | RETURN Events where FileNameEntropy > 95th_percentile AND DirectoryRarity > 99th_percentile
  - question: Can a machine learning model identify a Winlogon registry modification as malicious based on a combination of event and file characteristics?
    context: This question leverages a machine learning model to perform a holistic assessment of a Winlogon registry modification. By considering multiple features simultaneously—such as the process making the change, the file's path characteristics, and its PE header properties—the model can detect complex, subtle patterns of malicious activity that might be missed by simpler symbolic or statistical checks.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Configuration Management Databases (for baseline validation)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          STREAM RegistrySetEvents, FileCreationEvents
          | ENRICH with PE_Header_Info, Process_Tree
          | EXTRACT Features (ProcessName, ParentProcess, PathEntropy, DirectoryRarity, IsSigned, etc.)
          | APPLY ML_Model_WinlogonPersistence
          | RETURN Events where Model_Score > threshold
  - question: Have the `Userinit` or `Shell` registry values been modified to deviate from the established corporate baseline, or has a new `Notify` subkey been created by a non-standard process?
    context: This question focuses on detecting deviations from a known-good state. The `Userinit` and `Shell` values are typically static. Any change that doesn't match the corporate baseline is highly suspicious. Similarly, new `Notify` subkeys should only be created by trusted system installers; creation by any other process warrants investigation for a persistence attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Image and Build Repositories (for baseline definition)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Userinit" OR TargetObject CONTAINS "Shell")
          | WHERE NewValue NOT IN (BaselineValues)
          | UNION
          | SEARCH RegistryKeyCreateEvents WHERE (TargetObject CONTAINS "Winlogon\\Notify")
          | WHERE ProcessName NOT IN (TrustedInstallers)
          | RETURN AllResults
  - question: Has the `Userinit` registry value been modified to a value that is a statistical outlier in length compared to its historical baseline for that host?
    context: The `Userinit` value can legitimately contain multiple comma-separated paths, but adversaries may append long malicious commands. This question uses a statistical approach (Z-score) to detect when the length of this registry value changes in a statistically significant way for a specific host, which could indicate the injection of malicious code.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Image and Build Repositories (for baseline definition)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Userinit")
          | CALCULATE Length(NewValue) as NewLength
          | LOOKUP Historical_Userinit_Stats for Host
          | CALCULATE Z_Score(NewLength, Historical_Mean, Historical_StdDev)
          | RETURN Events where Z_Score > 3
  - question: Has there been an anomalous spike in the creation of `Winlogon\Notify` subkeys across the enterprise?
    context: A widespread attack campaign leveraging this persistence technique might cause a sudden, enterprise-wide increase in the creation of `Notify` subkeys. This question uses a time-series anomaly detection model to monitor the frequency of these events, flagging any sudden burst that deviates from the normal, forecasted rate of activity.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Image and Build Repositories (for baseline definition)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistryKeyCreateEvents WHERE (TargetObject CONTAINS "Winlogon\\Notify")
          | BUCKET by hour
          | COUNT Events
          | APPLY TimeSeries_Anomaly_Model
          | RETURN Buckets where IsAnomalous = true
  - question: Shortly after a user logon, did `winlogon.exe`, `userinit.exe`, or `explorer.exe` launch a command shell, scripting interpreter, or an executable from a non-standard directory?
    context: Adversaries abuse the logon process to execute their code. This question looks for the immediate aftermath of this technique: the launch of suspicious child processes (like `cmd.exe` or `powershell.exe`) or executables from unusual locations (like `C:\Users\Public`) by the core logon processes. This behavior is a strong signal that a malicious payload was triggered during logon.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Sysmon Event ID 1
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH LogonEvents WHERE (LogonType = 2 OR LogonType = 10)
          | JOIN ProcessCreationEvents on Host within 90s
          | WHERE ParentProcess IN ("winlogon.exe", "userinit.exe", "explorer.exe")
          | AND (ChildProcess IN ("cmd.exe", "powershell.exe") OR ChildProcessPath NOT IN ("C:\\Windows\\System32\\*", "C:\\Program Files\\*"))
          | RETURN AllResults
  - question: Following a logon, has `winlogon.exe`, `userinit.exe`, or `explorer.exe` spawned a child process that has never or rarely been seen before in the environment?
    context: Legitimate logon processes typically spawn a predictable set of child processes. This question establishes a baseline of normal child process activity and uses least-frequency analysis to flag any process that is novel or extremely rare. This is an effective way to spot custom malware or tools that have been configured to run at logon.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Sysmon Event ID 1
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH ProcessCreationEvents WHERE ParentProcess IN ("winlogon.exe", "userinit.exe", "explorer.exe")
          | LOOKUP Historical_ChildProcess_Frequency
          | WHERE Frequency < 1st_percentile OR IsNull(Frequency)
          | RETURN Events
  - question: Did a sequence of processes following a user logon deviate from learned, normal patterns of activity?
    context: This question uses a sophisticated sequence analysis model (like an LSTM) to understand the entire chain of events that normally occurs after a user logs on. The model can detect not just a single anomalous process, but an entire sequence of actions that, when taken together, is abnormal—for example, `logon -> explorer.exe -> powershell.exe`. This helps find malicious logic that might otherwise be missed.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Sysmon Event ID 1
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          STREAM LogonEvents, ProcessCreationEvents
          | GROUP by LogonSession
          | CONSTRUCT Sequence of events
          | APPLY Sequence_Analysis_Model
          | RETURN Sequences where IsAnomalous = true
  - question: Has `userinit.exe` or a child of `explorer.exe` made an outbound network connection to a known-bad destination?
    context: The `userinit.exe` process and its children should generally not be making direct outbound network connections, especially to suspicious locations. This question checks for connections from these processes to destinations flagged by threat intelligence, such as known command-and-control (C2) servers, recently registered domains, or domains generated by algorithms (DGA).
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Network Egress Points (Firewalls, Proxies)
      - DNS Servers
      - Endpoint devices (Workstations, Servers)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH NetworkConnectionEvents WHERE ProcessName IN ("userinit.exe") OR ParentProcessName IN ("explorer.exe")
          | LOOKUP ThreatIntelFeed for DestinationIP/Domain
          | WHERE ThreatIntelFeed.Match = true
          | RETURN Events
  - question: Has a child of `explorer.exe` made an outbound network connection that is statistically anomalous for that host in terms of destination or data volume?
    context: Beyond known-bad destinations, adversaries may use novel C2 infrastructure. This question establishes a baseline of normal network behavior for `explorer.exe`'s children on a per-host basis. It then flags connections to unusual countries or ASNs, or sessions where the amount of data transferred is a significant outlier, indicating potential data exfiltration or C2 communication.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Network Egress Points (Firewalls, Proxies)
      - DNS Servers
      - Endpoint devices (Workstations, Servers)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH NetworkConnectionEvents WHERE ParentProcessName = "explorer.exe"
          | LOOKUP Historical_Network_Stats for Host
          | WHERE DestinationCountry NOT IN (BaselineCountries) OR UploadedBytes > 99th_percentile
          | RETURN Events
  - question: Can a machine learning model detect an anomalous network connection from a post-logon process?
    context: This question employs an autoencoder, a type of machine learning model ideal for anomaly detection. The model learns the intricate characteristics of all benign network connections from post-logon processes. Any connection that the model cannot "reconstruct" accurately—meaning it has a high reconstruction error—is flagged as an anomaly, allowing for the detection of novel and sophisticated C2 channels that don't match any predefined rule.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Network Egress Points (Firewalls, Proxies)
      - DNS Servers
      - Endpoint devices (Workstations, Servers)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          STREAM NetworkConnectionEvents WHERE ParentProcessName IN ("explorer.exe", "userinit.exe")
          | EXTRACT Features (Port, Protocol, DataVolume, Duration, ASN, etc.)
          | APPLY Network_Autoencoder_Model
          | RETURN Events where ReconstructionError > threshold
  - question: Has a Winlogon registry key been modified to reference a file known to be a privilege escalation or credential dumping tool?
    context: This is a high-fidelity check to see if an adversary is using the Winlogon persistence mechanism to specifically launch a known malicious tool, such as Mimikatz or PowerSploit. By matching the file hash against a specialized threat database of such tools, analysts can quickly identify a direct attempt to escalate privileges or steal credentials.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Threat Intelligence Platforms
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Winlogon")
          | EXTRACT FilePath
          | JOIN FileCreationEvents ON FilePath
          | EXTRACT FileHash
          | LOOKUP PrivEscToolDB for FileHash
          | RETURN Events where PrivEscToolDB.Match = true
  - question: Does a file referenced in a Winlogon registry modification have multiple statistically anomalous PE header characteristics?
    context: This question hunts for malicious files that may not have a known-bad hash. It inspects the file's metadata (PE header) for a combination of suspicious traits common in malware, such as being unsigned, being packed (high entropy), having a very recent compile time, or importing dangerous functions. A file exhibiting several of these traits is highly likely to be malicious.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Threat Intelligence Platforms
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Winlogon")
          | ENRICH with PE_Header_Info
          | COUNT AnomalousFeatures (IsUnsigned, IsPacked, ImportsSuspiciousAPI, etc.)
          | WHERE AnomalousFeatureCount >= 3
          | RETURN Events
  - question: Does a machine learning model predict that a file path added to a Winlogon key is malicious based on its string characteristics?
    context: Adversaries often place malicious files in paths that look out of place (e.g., `C:\Users\Public\svchost.exe`). This question uses a machine learning model trained to recognize the characteristics of malicious file paths, such as unusual depth, the presence of keywords like 'temp', high filename entropy, or a rare file extension for that directory. This can flag suspicious modifications even before the file itself is analyzed.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
      - Threat Intelligence Platforms
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Winlogon")
          | EXTRACT FilePath from EventDetails
          | EXTRACT Features (PathDepth, Keywords, Entropy, ExtensionRarity, etc.)
          | APPLY ML_Model_MaliciousPath
          | RETURN Events where Model_Score > threshold
  - question: Has the `Userinit` registry value been modified to include suspicious commands for user management or disabling security tools?
    context: Adversaries may append commands directly to the `Userinit` registry value to create new users, add users to admin groups, or disable security controls upon logon. This question uses regular expressions to specifically search for these command strings within the registry value, providing a direct and high-confidence alert for privilege escalation or defense evasion attempts.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Userinit")
          | WHERE NewValue MATCHES_REGEX ("net user /add", "net localgroup administrators /add", "RunAsPPL", "wmic process call create")
          | RETURN Events
  - question: Has the `Userinit` registry value been modified to a value with an anomalously large character length or token count?
    context: The legitimate `Userinit` value is typically short. Appending malicious commands, as adversaries often do, significantly increases its length and complexity. This statistical check flags any modification where the new value's length or number of components (tokens) is a major outlier compared to the historical norm, indicating a likely injection of unauthorized commands.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Userinit")
          | CALCULATE Length(NewValue) as ValueLength, TokenCount(NewValue) as ValueTokens
          | LOOKUP Historical_Userinit_Stats
          | WHERE ValueLength > 99.9th_percentile OR ValueTokens > 99.9th_percentile
          | RETURN Events
  - question: Does a natural language processing (NLP) model classify the command string in the `Userinit` value as malicious?
    context: This advanced question uses a sophisticated NLP model, trained on vast numbers of shell commands, to understand the *intent* of the command string in the `Userinit` value. Instead of just matching keywords, the model can determine if the command's purpose is 'user management', 'service manipulation', or something else, allowing it to flag commands with malicious intent even if they are obfuscated or use unusual syntax.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Endpoint devices (Workstations, Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH RegistrySetEvents WHERE (TargetObject CONTAINS "Userinit")
          | EXTRACT NewValue
          | APPLY NLP_CLI_Intent_Model
          | WHERE Intent IN ("MaliciousUserManagement", "SuspiciousServiceManipulation")
          | RETURN Events
  - question: Is there a sequence where a process spawned by `winlogon.exe` or `userinit.exe` with SYSTEM privileges then creates a new user or modifies a privileged group?
    context: This question looks for a direct chain of evidence for privilege escalation. It correlates a process being launched with high (SYSTEM) privileges by the logon mechanism with a subsequent, immediate action by that same process to create a user or add a member to a sensitive group like 'Domain Admins'. This sequence is a powerful indicator of a successful privilege escalation attack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Windows Event ID 4728
      - Domain Controllers
      - Active Directory
      - Windows Servers
      - Identity and Access Management Systems
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH ProcessCreationEvents WHERE (ParentProcess IN ("winlogon.exe", "userinit.exe") AND User = "SYSTEM")
          | JOIN (UserCreationEvents OR GroupModificationEvents) on ProcessGUID within 60s
          | WHERE GroupName IN ("Administrators", "Domain Admins")
          | RETURN AllResults
  - question: Did a SYSTEM-level process spawned by `userinit.exe` generate a statistically rare event, such as user creation?
    context: Processes running as NT AUTHORITY\SYSTEM have immense power, but their actions are usually predictable. This question establishes a baseline of normal events generated by SYSTEM processes and flags any process that performs a rare action. For example, a user creation event (EID 4720) originating from a child of `userinit.exe` would be extremely unusual and highly suspicious, as this is not its normal function.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Windows Event ID 4728
      - Domain Controllers
      - Active Directory
      - Windows Servers
      - Identity and Access Management Systems
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH ProcessCreationEvents as pce WHERE pce.ParentProcess = "userinit.exe" AND pce.User = "SYSTEM"
          | JOIN AllEvents as ae ON pce.ProcessGUID = ae.ProcessGUID
          | LOOKUP Historical_SYSTEM_Event_Frequency for ae.EventID
          | WHERE Frequency < 1st_percentile AND ae.EventID = 4720
          | RETURN Events
  - question: Can a graph-based anomaly detection model identify an anomalous path from `winlogon.exe` to a privileged group modification?
    context: This question models system activity as a large graph of interconnected entities (processes, users, groups) and actions. A machine learning model learns the normal structure of this graph. An attack, such as `winlogon.exe` (as SYSTEM) spawning `evil.exe`, which then adds a user to 'Domain Admins', creates a new, structurally anomalous path in the graph that the model can detect and flag.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Windows Event ID 4728
      - Domain Controllers
      - Active Directory
      - Windows Servers
      - Identity and Access Management Systems
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          STREAM AllEvents
          | CONSTRUCT ActivityGraph (Nodes: Processes, Groups; Edges: Actions)
          | APPLY Graph_Anomaly_Detection_Model
          | RETURN AnomalousSubgraphs where Path starts with "winlogon.exe" and ends with "add member to Domain Admins"
  - question: Did a child process of `winlogon.exe` or `userinit.exe` attempt to read the memory of the LSASS process?
    context: The LSASS (Local Security Authority Subsystem Service) process stores credentials in memory. Adversaries attempt to dump this memory to steal credentials. This question looks for the tell-tale sign of this attack: a process access event where a child of `winlogon.exe` or `userinit.exe` requests read access (`PROCESS_VM_READ`) to `lsass.exe`. This is a very specific and high-confidence indicator of a credential dumping attempt.
    answer_sources:
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - Domain Controllers
      - Windows Servers
      - Windows Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH ProcessAccessEvents WHERE (TargetImage = "lsass.exe" AND GrantedAccess CONTAINS "0x1010")
          | JOIN ProcessCreationEvents on SourceProcessGUID
          | WHERE ParentProcess IN ("winlogon.exe", "userinit.exe")
          | RETURN Events
  - question: Has the LSASS process been accessed by any process not on the established allowlist of legitimate accessors?
    context: Access to the LSASS process memory is highly sensitive and should only be performed by a very small, well-defined set of legitimate processes (like EDR tools). This question leverages a strict allowlist and frequency analysis. Any process not on the list that accesses LSASS is immediately flagged, especially if that process was spawned via the Winlogon mechanism, as it would be a novel and unauthorized accessor.
    answer_sources:
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - Domain Controllers
      - Windows Servers
      - Windows Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH ProcessAccessEvents WHERE (TargetImage = "lsass.exe")
          | WHERE SourceImage NOT IN (LSASS_Accessor_Allowlist)
          | JOIN ProcessCreationEvents on SourceProcessGUID
          | WHERE ParentProcess IN ("winlogon.exe", "userinit.exe")
          | RETURN Events
  - question: Can a machine learning model classify an LSASS access event as anomalous?
    context: This question uses a one-class SVM, a model designed to learn a tight boundary around what is normal. The model is trained exclusively on the features of legitimate LSASS access events. Any new access event—such as one from a previously unseen process spawned by `userinit.exe`—will fall outside this learned boundary and be immediately classified as an anomaly, providing a powerful detection for novel credential dumping techniques.
    answer_sources:
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - Domain Controllers
      - Windows Servers
      - Windows Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          STREAM ProcessAccessEvents WHERE (TargetImage = "lsass.exe")
          | EXTRACT Features (SourceImage, ParentProcess, GrantedAccess)
          | APPLY OneClass_SVM_LSASS_Model
          | RETURN Events where IsAnomaly = true