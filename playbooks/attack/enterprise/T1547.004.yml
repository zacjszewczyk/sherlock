name: T1547.004: Winlogon Helper DLL
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversaries abusing Winlogon helper DLLs
  and other related registry configurations for persistence and privilege escalation.
  It addresses the modification of critical Winlogon registry keys such as `Userinit`,
  `Shell`, and `Notify` subkeys to execute malicious code, scripts, or commands at
  user logon. Investigations should look for deviations from established baselines,
  references to known-malicious files, anomalous process behavior spawning from `winlogon.exe`
  or `userinit.exe`, suspicious network connections post-logon, and direct evidence
  of privilege escalation activities like user creation or credential dumping initiated
  through this mechanism.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known-malicious file being configured to run at logon by modifying
    a Winlogon registry key (Userinit, Shell, or Notify)?
  context: Adversaries establish persistence by modifying Winlogon registry keys
    to point to their malicious executables or DLLs, ensuring their code runs automatically
    at logon. This question uses a symbolic approach to detect this by monitoring
    modifications to these specific keys, retrieving the hash of the newly referenced
    file, and checking it against threat intelligence feeds. A positive match is a
    high-fidelity indicator of this persistence technique.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Configuration Management Databases (for baseline validation)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=4657 OR event_id=13)
      WHERE registry_key CONTAINS "\\Winlogon\\Userinit" OR "\\Winlogon\\Shell" OR "\\Winlogon\\Notify\\"
      JOIN file_creation_events (event_id=11) ON file_path
      LOOKUP file_hash IN threat_intelligence_feed
      WHERE match_found
      RETURN hostname, timestamp, registry_key, file_path, file_hash
- question: Has a Winlogon registry key been modified to point to a file with an unusually
    complex name or in a rare directory location?
  context: To evade detection based on known file names, adversaries often use randomly
    generated filenames (high entropy) and place their malware in uncommon directories.
    This question applies statistical analysis to detect these evasion tactics. It
    flags modifications to Winlogon keys that reference files where the filename's
    complexity and the parent directory's rarity across the enterprise are statistically
    significant, suggesting an attempt to hide the persistence mechanism.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Configuration Management Databases (for baseline validation)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=4657 OR event_id=13)
      WHERE registry_key CONTAINS "\\Winlogon\\"
      CALCULATE entropy(filename), frequency(directory)
      ALERT IF entropy > 95th_percentile AND frequency < 1st_percentile
      RETURN hostname, file_path, entropy_score, frequency_score
- question: Can a machine learning model predict that a modification to a Winlogon
    registry key is malicious based on its associated file and process characteristics?
  context: This question leverages a machine learning model to provide a more holistic
    assessment of a Winlogon registry modification. By training a classifier on a
    rich set of features—such as the process making the change, file path characteristics,
    and PE header information of the referenced file—the model can identify complex,
    non-obvious patterns of malicious activity. A high probability score from the
    model indicates a likely persistence attempt.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Configuration Management Databases (for baseline validation)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH registry_event (event_id=4657 OR event_id=13) WHERE registry_key CONTAINS "\\Winlogon\\"
        EXTRACT features (process_name, parent_process, path_entropy, dir_rarity, pe_features)
        INPUT features INTO ML_model
        ALERT IF model_score > threshold
        RETURN hostname, file_path, model_score, contributing_features
- question: Has the Userinit or Shell registry value been changed to a non-standard
    value, or has a new Notify subkey been created by an untrusted process?
  context: Legitimate values for Winlogon's `Userinit` and `Shell` keys are highly
    predictable. Deviations from a known-good baseline are a strong indicator of
    tampering. Similarly, new `Notify` subkeys, which load DLLs into Winlogon, should
    only be created by trusted system installers. This question focuses on detecting
    these baseline violations to identify unauthorized persistence mechanisms.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Image and Build Repositories (for baseline definition)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=4657 OR event_id=13)
      WHERE (registry_key="...\\Winlogon\\Userinit" AND value NOT IN baseline)
      OR (registry_key="...\\Winlogon\\Shell" AND value NOT IN baseline)
      OR (registry_key CONTAINS "...\\Winlogon\\Notify\\" AND process_name NOT IN trusted_installers)
      RETURN hostname, timestamp, process_name, registry_key, new_value
- question: Has the Userinit registry value been modified to a length that is statistically
    anomalous for a given host?
  context: Adversaries may append their malicious executable to the existing `Userinit`
    list, resulting in a value that is significantly longer than the host's typical
    configuration. This question uses a Z-score to measure the statistical deviation
    of the new value's length from its historical average on that specific host, flagging
    significant increases as suspicious.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Image and Build Repositories (for baseline definition)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=4657 OR event_id=13) WHERE registry_key="...\\Winlogon\\Userinit"
      FOR EACH event, CALCULATE z_score(length(new_value), host_baseline_mean, host_baseline_stddev)
      ALERT IF z_score > 3
      RETURN hostname, new_value, value_length, z_score
- question: Is there an anomalous spike in the creation of Winlogon Notify subkeys
    across the enterprise, suggesting a widespread campaign?
  context: A widespread malware campaign might use the Winlogon `Notify` persistence
    mechanism across many machines in a short period. This question applies a time-series
    anomaly detection model to the enterprise-wide frequency of `Notify` subkey creation
    events. A sudden spike that deviates significantly from the model's forecast can
    be an early indicator of a large-scale attack.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Image and Build Repositories (for baseline definition)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      AGGREGATE count(registry_creation_events) WHERE key CONTAINS "...\\Winlogon\\Notify\\" BY hour
      INPUT hourly_counts INTO time_series_model
      ALERT IF latest_count > forecast_confidence_interval
      RETURN timestamp, event_count, forecast_value
- question: Has a suspicious process (e.g., cmd.exe, powershell.exe) or a process
    from a non-standard directory been launched by winlogon.exe, userinit.exe, or
    explorer.exe shortly after a user logon?
  context: Processes initiated through Winlogon persistence typically spawn from
    core logon processes like `winlogon.exe`, `userinit.exe`, or `explorer.exe`. An
    adversary's payload is often a command shell, scripting interpreter, or an executable
    dropped in a temporary or user-writable location. This query looks for this specific
    sequence of events within a short time window after a user logs on.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 1
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH logon_events (event_id=4624, logon_type IN (2,10))
      JOIN process_events (event_id=1) ON hostname WHERE event.time < logon.time + 90s
      WHERE parent_process IN ("winlogon.exe", "userinit.exe", "explorer.exe")
      AND (child_process IN ("cmd.exe", "powershell.exe") OR child_path NOT IN ("C:\\Windows\\System32\\", "C:\\Program Files\\"))
      RETURN hostname, username, logon_time, parent_process, child_process
- question: Has a historically rare child process been launched by winlogon.exe, userinit.exe,
    or explorer.exe?
  context: Legitimate child processes of `winlogon.exe`, `userinit.exe`, and `explorer.exe`
    are typically consistent and predictable. Adversarial code introduced via Winlogon
    persistence will appear as a new or very rare child process. This question uses
    least-frequency analysis to identify child processes that have never been seen
    before or are statistical outliers, indicating a high probability of malicious
    activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 1
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_events (event_id=1)
      WHERE parent_process IN ("winlogon.exe", "userinit.exe", "explorer.exe")
      LOOKUP child_process in historical_baseline
      ALERT IF frequency < 1st_percentile OR frequency=0
      RETURN hostname, parent_process, child_process, historical_frequency
- question: Has an anomalous sequence of processes occurred immediately following
    a user logon event?
  context: Normal user logons trigger a relatively predictable sequence of process
    initializations. A machine learning model like an LSTM can learn these benign
    sequences. This question uses such a model to detect when a new, unexpected process
    sequence occurs post-logon, such as `explorer.exe` spawning an encoded PowerShell
    command, which would be flagged as a significant deviation from normal behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 1
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH logon_event (event_id=4624)
        CONSTRUCT process_sequence for next N seconds
        INPUT sequence INTO LSTM_model
        ALERT IF model flags sequence as anomalous
        RETURN hostname, username, anomalous_sequence, anomaly_score
- question: Is userinit.exe or a child of explorer.exe making a network connection
    to a known-bad destination or a recently registered domain?
  context: After establishing persistence, an adversary's implant will often initiate
    a network connection for command and control (C2). The `userinit.exe` process
    or immediate children of `explorer.exe` are unlikely to make direct outbound connections
    to external addresses. This question checks for such connections and correlates
    the destination with threat intelligence feeds to identify potential C2 traffic.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Sysmon Event ID 1
  - Network Egress Points (Firewalls, Proxies)
  - DNS Servers
  - Endpoint devices (Workstations, Servers)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH network_events (event_id=3) OR zeek_logs
      WHERE process_name="userinit.exe" OR parent_process="explorer.exe"
      LOOKUP destination_ip/domain IN (ti_feeds, recently_registered_domains)
      ALERT on match
      RETURN hostname, process_name, destination, lookup_source
- question: Is a child of explorer.exe exhibiting anomalous network behavior, such
    as connecting to a rare country or transferring an unusual amount of data?
  context: This question establishes a baseline of normal network activity for processes
    spawned by `explorer.exe` on a per-host basis. It then uses statistical analysis
    to detect deviations from this baseline. Anomalies such as connecting to a destination
    country for the first time or uploading a volume of data that far exceeds the
    historical average can indicate exfiltration or C2 activity stemming from a Winlogon
    persistence mechanism.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Sysmon Event ID 1
  - Network Egress Points (Firewalls, Proxies)
  - DNS Servers
  - Endpoint devices (Workstations, Servers)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH network_events WHERE parent_process="explorer.exe"
      COMPARE destination_country, data_uploaded to per-host_baseline
      ALERT IF destination_country_frequency=0 OR data_uploaded > 99th_percentile
      RETURN hostname, process_name, destination_country, data_uploaded
- question: Does a network connection from a post-logon process appear anomalous
    to a machine learning model?
  context: This question uses an autoencoder, a type of unsupervised machine learning
    model, to learn the characteristics of normal network connections from post-logon
    processes. The model is trained on features like port, protocol, data volume,
    and destination ASN. Any connection that the model cannot accurately reconstruct
    (i.e., has a high reconstruction error) is flagged as an anomaly, allowing for
    the detection of novel C2 channels that don't match known signatures.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Sysmon Event ID 1
  - Network Egress Points (Firewalls, Proxies)
  - DNS Servers
  - Endpoint devices (Workstations, Servers)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH network_event from post-logon_process
        EXTRACT features (port, protocol, volume, duration, dest_asn)
        INPUT features into autoencoder_model
        ALERT IF reconstruction_error > threshold
        RETURN hostname, process_name, destination_ip, anomaly_score
- question: Has a Winlogon registry key been modified to point to a file whose hash
    matches a known privilege escalation or credential dumping tool?
  context: Adversaries may use the Winlogon mechanism not just for persistence, but
    to execute privilege escalation or credential dumping tools like Mimikatz with
    SYSTEM privileges at startup. This question performs a targeted check by comparing
    the hash of the file referenced in a Winlogon registry modification against a
    curated database of such tools, providing a high-confidence alert for privilege
    escalation attempts.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=13) WHERE key CONTAINS "\\Winlogon\\"
      GET file_hash for file in new_value
      LOOKUP file_hash in privesc_tool_database
      ALERT on match
      RETURN hostname, file_path, file_hash, tool_name
- question: Does a file referenced in a Winlogon registry modification have statistically
    anomalous PE header characteristics indicative of malicious tools?
  context: Malicious tools used for privilege escalation are often unsigned, recently
    compiled, packed (to evade signature detection), and import suspicious Windows
    API functions. This question statistically analyzes the PE header of the file
    referenced by a Winlogon key modification. It flags files that exhibit a combination
    of these anomalous characteristics, suggesting the file is likely a malicious
    implant rather than a legitimate system component.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH file referenced in a Winlogon registry modification
        ANALYZE pe_header (is_signed, compile_time, section_entropy, imported_functions)
        ALERT IF (is_signed=false AND has_high_entropy_sections AND imports_suspicious_functions)
        RETURN hostname, file_path, anomalous_pe_characteristics
- question: Can a machine learning model predict that a file path in a Winlogon registry
    key points to a malicious implant?
  context: Adversaries often place their privilege escalation tools in predictable,
    non-standard locations like 'temp' or 'public' directories, sometimes using random-looking
    filenames. This question uses a supervised machine learning model trained on
    file path characteristics (depth, keywords, entropy, etc.) to calculate the probability
    that a given path, found in a Winlogon key, is associated with malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH file_path in a Winlogon registry modification
        EXTRACT path_features (depth, keywords, entropy, extension_rarity)
        INPUT features INTO path_classifier_model
        ALERT IF probability_score > threshold
        RETURN hostname, file_path, probability_score
- question: Has the Userinit registry value been modified to include commands for
    user creation, group modification, or security tool tampering?
  context: Instead of pointing to a separate executable, an adversary can directly
    embed malicious commands (e.g., `net user /add`) into the `Userinit` registry
    value. These commands will be executed with high privileges during the logon process.
    This question uses regular expressions to parse the `Userinit` value for syntax
    indicative of such commands, providing a direct method for detecting this privilege
    escalation technique.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=13) WHERE key="...\\Winlogon\\Userinit"
      APPLY regex on new_value to find patterns like "net user /add", "net localgroup * /add", "reg add * RunAsPPL"
      ALERT on match
      RETURN hostname, process_name, matched_command_in_value
- question: Is the Userinit registry value anomalously long or complex, suggesting
    the addition of malicious commands?
  context: The legitimate `Userinit` registry value is typically short and simple
    (e.g., `C:\\Windows\\system32\\userinit.exe,`). When an adversary appends commands,
    the value's length and token count (the number of distinct parts) increase dramatically.
    This question establishes a tight baseline for these metrics and alerts on any
    modification that results in a value exceeding the 99.9th percentile, indicating
    a high likelihood of malicious command injection.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH registry_events (event_id=13) WHERE key="...\\Winlogon\\Userinit"
      CALCULATE length and token_count of new_value
      COMPARE to historical distribution
      ALERT IF length > 99.9th_percentile OR token_count > 99.9th_percentile
      RETURN hostname, new_value, length, token_count
- question: Does the string in the Userinit registry value contain syntax that an
    NLP model classifies as a malicious command?
  context: This question advances beyond simple regex by using a Natural Language
    Processing (NLP) model trained to understand command-line syntax. By feeding
    the `Userinit` string to the model, it can classify the *intent* of the command
    sequence (e.g., 'user management', 'security modification'). This allows for the
    detection of a broader and more nuanced range of malicious commands that might
    not match a specific regular expression.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Endpoint devices (Workstations, Servers)
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH new_value in Userinit registry modification events
        INPUT new_value into NLP_command_classifier
        ALERT IF classified_intent IN ('malicious', 'suspicious_user_management', 'security_tampering')
        RETURN hostname, new_value, classified_intent
- question: Was a new user account created or an existing account added to a privileged
    group by a process that was spawned by winlogon.exe or userinit.exe with SYSTEM
    privileges?
  context: This is a high-fidelity detection that directly links the Winlogon mechanism
    to a privilege escalation outcome. It looks for a specific, correlated sequence
    of events: a process is created by `winlogon.exe` or `userinit.exe` running as
    SYSTEM, and that same process then immediately creates a new user or adds a user
    to an administrative group. This sequence is highly indicative of a successful
    privilege escalation attack.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Domain Controllers
  - Active Directory
  - Windows Servers
  - Identity and Access Management Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_events (event_id=1) WHERE parent IN ("winlogon.exe", "userinit.exe") AND user="SYSTEM"
      JOIN identity_events (event_id IN (4720, 4732, 4728)) ON hostname
      WHERE identity_event.time < process_event.time + 60s AND identity_event.process_guid = process_event.guid
      ALERT on sequence
      RETURN hostname, username, action_taken (e.g., "user created", "added to admins")
- question: Did a child process of userinit.exe running as SYSTEM generate a statistically
    rare event, such as user creation?
  context: Processes running as NT AUTHORITY\\SYSTEM perform a predictable set of
    actions. Events like user creation (Event ID 4720) are extremely rare for arbitrary
    SYSTEM processes that are not part of the core identity management subsystem.
    This question identifies any process spawned by `userinit.exe` that subsequently
    generates such a statistically rare and high-impact event, pointing to abuse
    of the SYSTEM privileges granted by the Winlogon mechanism.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Domain Controllers
  - Active Directory
  - Windows Servers
  - Identity and Access Management Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH for events generated by processes where user="SYSTEM" AND parent_process="userinit.exe"
      LOOKUP event_id in baseline_frequency_table_for_system_processes
      ALERT IF frequency is very low (e.g., < 0.01%) AND event_id=4720
      RETURN hostname, process_name, generated_event_id, event_frequency
- question: Can a graph-based anomaly detection model identify a malicious path of
    activity originating from winlogon.exe?
  context: This question models system activity as a graph, where processes and groups
    are nodes and actions (like 'spawned' or 'added member') are edges. A machine
    learning model learns the normal structure of this graph. An attack path, such
    as `winlogon.exe` spawning a malicious process that then adds a user to the 'Domain
    Admins' group, would appear as a structurally anomalous and previously unseen
    subgraph, allowing for its detection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Domain Controllers
  - Active Directory
  - Windows Servers
  - Identity and Access Management Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CONSTRUCT activity graph from process and identity events
      INPUT graph into graph_anomaly_detection_model
      ALERT on anomalous paths originating from "winlogon.exe" or "userinit.exe"
      RETURN anomalous_path (e.g., winlogon -> evil.exe -> added_member -> Domain Admins)
- question: Did a child process of winlogon.exe or userinit.exe attempt to read the
    memory of the LSASS process?
  context: The LSASS (Local Security Authority Subsystem Service) process stores
    user credentials in memory. Accessing this memory with read privileges (`PROCESS_VM_READ`)
    is a hallmark of credential dumping tools like Mimikatz. This question looks
    for the specific, high-fidelity event of a process spawned by the Winlogon mechanism
    attempting to access LSASS memory, which is a strong indicator of an active credential
    theft attempt.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - Domain Controllers
  - Windows Servers
  - Windows Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_access_events (event_id=10)
      WHERE target_image="lsass.exe" AND granted_access CONTAINS "PROCESS_VM_READ"
      GET parent_process of source_process
      ALERT IF parent_process IN ("winlogon.exe", "userinit.exe")
      RETURN hostname, source_process, parent_process, target_process
- question: Has a process that is not on an established allowlist attempted to access
    LSASS memory after being spawned by a Winlogon process?
  context: Very few legitimate processes need to access LSASS memory. This question
    relies on building a tight baseline or allowlist of these legitimate processes
    (e.g., specific EDR tools). Any process accessing LSASS that is not on this list,
    especially one that was spawned via the Winlogon mechanism, would have a historical
    frequency of zero and is almost certainly malicious. This is a powerful statistical
    method for detecting novel credential dumping tools.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - Domain Controllers
  - Windows Servers
  - Windows Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_access_events (event_id=10) WHERE target_image="lsass.exe"
      GET parent_process of source_process
      ALERT IF source_process NOT IN lsass_accessor_allowlist AND parent_process IN ("winlogon.exe", "userinit.exe")
      RETURN hostname, source_process, parent_process
- question: Does a machine learning model classify an LSASS access event originating
    from a Winlogon child process as anomalous?
  context: This question uses a one-class Support Vector Machine (SVM) or similar
    model trained exclusively on the features of legitimate LSASS access events.
    The model creates a tight boundary defining "normal." Any new access event, such
    as one from a novel process spawned by `userinit.exe`, will fall outside this
    boundary and be immediately classified as an anomaly, providing a robust method
    for detecting unknown threats attempting to dump credentials.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - Domain Controllers
  - Windows Servers
  - Windows Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH lsass_access_event (event_id=10)
        EXTRACT features (source_image, parent_of_source, granted_access)
        INPUT features into one_class_svm_model
        ALERT IF model classifies as anomaly AND parent_of_source IN ("winlogon.exe", "userinit.exe")
        RETURN hostname, source_process, anomaly_score