name: T1553.003: SIP and Trust Provider Hijacking
id: e9a3b6f0-1c7d-4b8e-9a6f-0d1e2f3a4b5c
description: This playbook aims to detect instances where an adversary has hijacked a Subject Interface Package (SIP) or a Trust Provider to evade defenses. Adversaries achieve this by modifying specific registry keys under HKLM\SOFTWARE\Microsoft\Cryptography to point to a malicious DLL. This allows their code to be loaded and executed by legitimate, signed processes during signature validation checks, effectively bypassing application control and other security measures. The playbook focuses on identifying anomalous registry modifications, the use of known malicious or statistically rare DLLs, suspicious process behavior related to these registry keys (e.g., modification via command-line tools), and the full chain of events from DLL creation to registry modification to subsequent suspicious process execution and network activity.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known malicious DLL been registered as a SIP or Trust Provider?
  context: This question aims to identify direct evidence of SIP/Trust Provider hijacking by checking if a newly registered DLL is a known malicious file. Adversaries modify these registry keys to point to their own malicious DLLs, which then get loaded by legitimate processes for code execution, bypassing defenses. Correlating the registry modification with the DLL's file hash against threat intelligence is a high-fidelity way to detect this specific attack pattern.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - Zeek files.log
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Endpoint file systems
  - Network egress points
  - Threat intelligence platforms
  range: last 90 days
  queries:
  - pseudocode: SEARCH registry modification events (Sysmon EID 13, Win EID 4657) for SIP/Trust paths. EXTRACT DLL path. JOIN with file creation events (Sysmon EID 11) or network file transfers (Zeek files.log) on file path to get hash. LOOKUP hash against threat intelligence. ALERT on match.
- question: Has a rare or unique DLL been registered as a SIP or Trust Provider by an unauthorized process?
  context: This question focuses on identifying anomalous DLL registrations. Legitimate software installations or updates might modify these keys, but the associated DLLs are typically common across many systems. A DLL path with very low prevalence across the enterprise suggests it might be a custom tool or malware dropped by an adversary. Filtering out known legitimate installers helps reduce false positives.
  answer_sources:
  - Sysmon Event ID 13
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Endpoint file systems
  range: last 90 days
  queries:
  - pseudocode: SEARCH registry modification events (Sysmon EID 13) for SIP/Trust paths. EXTRACT DLL path and modifying process. FILTER OUT processes on allowlist. CALCULATE prevalence of DLL path across all hosts over 30 days. ALERT where prevalence is < 1st percentile.
- question: Does a recent SIP or Trust Provider registry modification exhibit characteristics of known malicious behavior based on a machine learning model?
  context: This question uses a machine learning approach to score the risk of a registry modification. By training a model on features like the modifying process, its parent, command line, user context, and the location of the new DLL (e.g., user-writable directories like AppData or Temp), we can identify suspicious modifications that might not be caught by simple signature or prevalence rules. This helps detect novel or obfuscated hijacking attempts.
  answer_sources:
  - Sysmon Event ID 13
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Endpoint file systems
  range: last 90 days
  queries:
  - pseudocode: FOR EACH registry modification event (Sysmon EID 13), EXTRACT features (process, parent, cmdline, user, target_is_SIP, dll_path_is_user_writable). INPUT features into trained logistic regression model. ALERT if model output score is > high confidence threshold.
- question: Are command-line utilities like reg.exe or regedit.exe being used to directly manipulate SIP or Trust Provider registry keys?
  context: This question seeks to detect hands-on-keyboard or scripted modification of critical cryptography keys using standard Windows utilities. Legitimate software installations typically use APIs for these changes, not command-line tools. An adversary might use reg.exe to manually set a malicious DLL path, and the presence of specific SIP-related strings or GUIDs in the command line is a strong indicator of this technique.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Endpoint process execution logs
  range: last 90 days
  queries:
  - pseudocode: SEARCH process creation events (Sysmon EID 1, Win EID 4688). FILTER for process name in (reg.exe, regedit.exe, regsvr32.exe). FILTER for command line containing ('CryptSIPDllGetSignedDataMsg', 'FinalPolicy', known SIP GUIDs). ALERT on match.
- question: Is an unusual variety of processes modifying SIP or Trust Provider keys on a single host?
  context: This question looks for anomalous patterns in the processes that modify SIP/Trust keys. On a stable system, these sensitive keys should be modified infrequently by a small, predictable set of processes (e.g., installers, system services). A sudden increase in the variety (entropy) of parent processes making these changes could indicate reconnaissance, tampering, or multiple malicious tools attempting to establish persistence or evade defenses on the host.
  answer_sources:
  - Sysmon Event ID 13
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Endpoint process execution logs
  range: last 90 days
  queries:
  - pseudocode: FOR EACH host, AGGREGATE registry modifications to SIP/Trust keys (Sysmon EID 13) by parent process per hour. CALCULATE Shannon entropy of parent process names. COMPARE hourly entropy to 30-day rolling baseline. ALERT if current entropy > (baseline + 3 * stddev).
- question: Is a recent SIP or Trust Provider registry modification anomalous when compared to a baseline of normal administrative activity?
  context: This question employs an unsupervised machine learning model (Isolation Forest) to find outlier events without pre-labeled data. By modeling what normal modifications to these keys look like (in terms of process, parent, user, etc.), the model can flag events that deviate significantly from this baseline. This is effective for detecting novel attack patterns that don't match known signatures or simple statistical thresholds.
  answer_sources:
  - Sysmon Event ID 13
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Endpoint process execution logs
  range: last 90 days
  queries:
  - pseudocode: FOR EACH registry modification to SIP/Trust key (Sysmon EID 13), CREATE feature vector (process, parent, user, cmdline). INPUT vector into trained Isolation Forest model. ALERT if model scores event as a strong anomaly.
- question: Has a process not on the approved software allowlist modified a SIP or Trust Provider key?
  context: This question implements a simple but effective allowlisting strategy. Modifications to sensitive SIP/Trust Provider keys should only be performed by trusted processes like system services (e.g., TrustedInstaller.exe) or legitimate software installers (e.g., msiexec.exe). Any modification by a process not on this curated allowlist is highly suspicious and warrants immediate investigation.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Enterprise-wide process execution baselines
  - Software deployment and patching servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH registry modification events (Sysmon EID 13, Win EID 4657) for SIP/Trust paths. EXTRACT modifying process name. ALERT if process name is NOT IN allowlist.
- question: Has a statistically rare process modified a SIP or Trust Provider key?
  context: This is a statistical approach similar to prevalence analysis. Instead of analyzing the DLL path, this question focuses on the modifying process itself. Processes that rarely or never modify these critical keys across the entire enterprise are suspicious if they suddenly do. This method helps to automatically identify unusual software or potential malware without maintaining a manual allowlist.
  answer_sources:
  - Sysmon Event ID 13
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Enterprise-wide process execution baselines
  range: last 90 days
  queries:
  - pseudocode: CALCULATE 30-day frequency of all process names that modify SIP/Trust keys (Sysmon EID 13). FOR EACH new modification event, get the modifying process name. ALERT if process frequency is in the bottom 5th percentile.
- question: Is there a statistically significant surge in SIP or Trust Provider key modifications by rare processes?
  context: This question aims to detect broader campaigns rather than single events. While a single modification by a rare process is suspicious, a sudden increase in the volume of such events across the enterprise is a strong indicator of a widespread, coordinated attack. A time-series model can predict the expected "background noise" of these events and alert when the actual count significantly exceeds the forecast, signaling a potential campaign.
  answer_sources:
  - Sysmon Event ID 13
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Enterprise-wide process execution baselines
  range: last 90 days
  queries:
  - pseudocode: AGGREGATE daily count of SIP/Trust key modifications by rare processes (from previous question). INPUT daily count into time-series forecasting model (e.g., SARIMA). ALERT if today's count > forecasted upper confidence bound.
- question: Has the classic SIP hijacking sequence of 'DLL drop, registry modify, signature validation' been observed on a host?
  context: This question looks for a specific, high-confidence chain of events that strongly indicates SIP hijacking. Adversaries must first place their malicious DLL on the system, then modify the registry to point to it, and the goal is for this DLL to be used in a subsequent signature validation operation. Observing this exact sequence—a new DLL created in a common staging area, a registry modification pointing to it, and a successful validation event—all in a short time frame is a powerful indicator of compromise.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Microsoft-Windows-CAPI2/Operational Event ID 11
  - Endpoint file systems (e.g., %APPDATA%, %TEMP%, %PUBLIC%)
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Windows CAPI2 event logs on endpoints
  range: last 90 days
  queries:
  - pseudocode: CORRELATE events on same host within 5 minutes, (1) Sysmon EID 11 (FileCreate) for .dll in user-writable dir. (2) Sysmon EID 13 (RegistryValueSet) for SIP/Trust key pointing to that new DLL. (3) CAPI2 EID 11 (Successful Validation). ALERT on sequence match.
- question: Has a successful signature validation occurred immediately after a SIP or Trust Provider key was modified, which is a statistically rare sequence?
  context: This is a probabilistic approach to detecting the hijacking sequence. In normal operations, modifications to these keys (e.g., during software updates) are not immediately followed by signature validation events. By establishing that this sequence is extremely rare (near-zero probability), any occurrence can be treated as a high-confidence anomaly. This avoids the need for complex stateful rules by focusing on the statistical improbability of the event pair.
  answer_sources:
  - Sysmon Event ID 13
  - Microsoft-Windows-CAPI2/Operational Event ID 11
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  - Windows CAPI2 event logs on endpoints
  range: last 90 days
  queries:
  - pseudocode: FOR EACH host, search for a CAPI2 EID 11 event that occurs within 5 minutes after a Sysmon EID 13 modification to a SIP/Trust key. As this is a near-zero probability event, ALERT on any occurrence.
- question: Does the sequence of recent file, registry, and validation events on a host match a known malicious pattern according to a sequence-aware model?
  context: This question applies a more advanced machine learning model (HMM) capable of understanding event sequences. The model is trained to recognize normal "paths" through different system states. A SIP hijack represents a specific, abnormal path of transitions—from a suspicious DLL write, to a critical registry modification, to an anomalous validation. The model can detect this malicious sequence even if individual events seem benign in isolation.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Microsoft-Windows-CAPI2/Operational Event ID 11
  - Windows CAPI2 event logs on endpoints
  range: last 90 days
  queries:
  - pseudocode: STREAM host events (Sysmon EID 11, Sysmon EID 13, CAPI2 EID 11) into a trained Hidden Markov Model. ALERT if the event sequence follows the high-probability path for 'Suspicious DLL Write' -> 'Critical Registry Modify' -> 'Anomalous Validation'.
- question: Has a process that passed signature validation, but is running from a suspicious location, made a network connection to a known malicious destination?
  context: This question looks for the post-exploitation effects of a successful hijack. The adversary's goal is often to establish command and control. A process that appears legitimate (because its signature validation was hijacked) but runs from an unusual user-writable directory and then immediately calls out to a known C2 server is a very strong signal of compromise. This correlates endpoint behavior with network threat intelligence.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Microsoft-Windows-CAPI2/Operational Event ID 11
  - Zeek conn.log
  - Endpoint process and network connection logs
  - Windows CAPI2 event logs
  - Network gateway traffic logs
  range: last 90 days
  queries:
  - pseudocode: JOIN CAPI2 EID 11 with Sysmon EID 1 on ProcessGUID. IF process path is in a suspicious directory AND is followed within 60s by a network connection (Sysmon EID 3, Zeek conn.log) to a blocklisted IP, ALERT.
- question: Is a process that passed signature validation running from an unusual path or spawned by an unusual parent, and is it contacting a newly registered domain?
  context: This question uses statistical baselining to find anomalies. A legitimate process like svchost.exe should almost always run from C:\Windows\System32 and be spawned by services.exe. If a signature-validated svchost.exe is seen running from %APPDATA% or spawned by explorer.exe, it's anomalous. Coupling this execution anomaly with network communication to a domain that has just been registered (a common tactic for C2 infrastructure) creates a high-fidelity alert.
  answer_sources:
  - Sysmon Event ID 1
  - Microsoft-Windows-CAPI2/Operational Event ID 11
  - Zeek dns.log
  - Endpoint process and network connection logs
  - Windows CAPI2 event logs
  - DNS server logs
  range: last 90 days
  queries:
  - pseudocode: FOR EACH validated process execution (CAPI2 EID 11 + Sysmon EID 1), CHECK if execution path or parent process is statistically rare for that process name. IF rare, THEN check for subsequent DNS queries (Zeek dns.log) to domains seen for the first time in 24 hours. ALERT on match.
- question: Does the full chain of activity—from registry modification to process execution to network connection—form an anomalous relationship graph?
  context: This question takes a holistic, graph-based view of the attack. It models the relationships between all relevant entities (processes, files, registry keys, IPs). A SIP hijack creates a very unusual graph structure, a rare process connecting to a sensitive registry key, that key pointing to a file in an odd location, that file being executed as a process, and that process connecting to a rare external IP. A graph-based model can learn what normal "neighborhoods" of activity look like and flag this entire subgraph as a high-confidence anomaly.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 13
  - Zeek conn.log
  - Endpoint process and network connection logs
  - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
  range: last 90 days
  queries:
  - pseudocode: MODEL system activity as a graph (nodes, processes, files, IPs; edges, interactions). TRAIN on benign activity. SCORE new subgraphs for anomaly. ALERT if a subgraph representing 'rare process -> modifies SIP key -> executes validated file from strange path -> connects to rare IP' receives a high anomaly score.