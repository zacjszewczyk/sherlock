name: T1628: Hide Artifacts
id: 9a8b7c6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d
description: This playbook helps identify instances where an adversary is attempting to hide artifacts on managed mobile devices to evade detection. This includes tactics such as installing applications without user-facing launcher icons to remain hidden from the user, or running processes that are not tied to a formally installed application package, which could indicate fileless malware or other cloaking techniques.
type: technique
related:
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any non-whitelisted applications installed on mobile devices that lack a launcher icon and match known threat intelligence?
    context: Adversaries may package malicious applications without a launcher icon, making them invisible on the device's home screen or app drawer and thus harder for users to discover and remove. This question focuses on identifying these hidden applications by querying Mobile Device Management (MDM) or Unified Endpoint Management (UEM) logs for packages flagged as having no icon. To reduce false positives, these results are filtered against a corporate whitelist of known-good applications that operate without icons (e.g., system services). Any remaining non-whitelisted, iconless apps are then checked against a Threat Intelligence Platform (TIP) to determine if they are known malicious software.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - Corporate Application Whitelist Database
      - Threat Intelligence Platform (TIP) Data
      - MDM/UEM management console and underlying database; The population of managed corporate-owned and BYOD mobile devices.
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          # Retrieve all apps from MDM/UEM logs with the 'has_launcher_icon' flag set to false
          iconless_apps = query_mdm_logs(has_launcher_icon=false)
          
          # Retrieve the list of pre-approved whitelisted applications
          whitelisted_apps = get_app_whitelist()
          
          # Identify suspicious apps by removing whitelisted apps from the iconless list
          suspicious_apps = iconless_apps - whitelisted_apps
          
          # For each suspicious app, check its hash against the threat intelligence platform
          for app in suspicious_apps:
            is_known_threat = query_tip(hash=app.sha256_hash)
            if is_known_threat:
              # Generate a high-severity alert for analyst review
              alert(severity='high', app_name=app.name, device_id=app.device)
  - question: Can statistical analysis identify suspicious, non-whitelisted, iconless applications based on rarity, device concentration, or permission complexity?
    context: Beyond checking against known threat intelligence, this question uses statistical and behavioral analysis to uncover potentially malicious, iconless applications that are not yet known threats. The rationale is that malicious apps often exhibit outlier characteristics. The analysis focuses on three areas: 1) Rarity, by flagging applications with a very low installation count across the device fleet (e.g., below the 5th percentile), as targeted malware is often not widespread. 2) Concentration, by identifying devices with an unusually high number of non-whitelisted, iconless apps, which could indicate a compromised device. 3) Complexity, by measuring the Shannon entropy of an app's requested permissions and flagging those with abnormally high entropy, which can be a sign of a feature-rich malicious tool.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - Corporate Application Whitelist Database
      - Threat Intelligence Platform (TIP) Data
      - MDM/UEM management console and underlying database; The population of managed corporate-owned and BYOD mobile devices.
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          # Get all non-whitelisted, iconless applications
          suspicious_apps = get_non_whitelisted_iconless_apps()
          
          # Calculate fleet-wide prevalence and flag rare applications
          prevalence = calculate_fleet_prevalence(suspicious_apps)
          rare_apps = filter_by_prevalence(prevalence, percentile < 5)
          flag(rare_apps, reason="Low installation prevalence")
          
          # Count suspicious apps per device and flag outliers
          device_counts = count_apps_per_device(suspicious_apps)
          outlier_devices = filter_by_count(device_counts, percentile > 98)
          flag(outlier_devices, reason="High concentration of iconless apps")
          
          # Calculate permission entropy and flag apps with unusually high complexity
          whitelisted_entropy_stats = get_entropy_stats(whitelisted_apps)
          for app in suspicious_apps:
            app_entropy = calculate_permission_entropy(app.permissions)
            if app_entropy > (whitelisted_entropy_stats.mean + 2 * whitelisted_entropy_stats.stdev):
              flag(app, reason="Anomalously high permission entropy")
  - question: Can a machine learning model be used to predict the maliciousness of non-whitelisted, iconless applications based on their characteristics?
    context: This question proposes a proactive, predictive approach to identifying malicious iconless applications. Instead of relying solely on static rules or known signatures, a machine learning model (such as a Random Forest or Gradient Boosting classifier) is trained to calculate a risk score. The model is built using features like fleet-wide prevalence, whether the app was installed from an unofficial source, the number and entropy of its requested permissions, and the presence of specific high-risk permissions. In a production environment, all new non-whitelisted, iconless apps are scored by this model. If an app's predicted probability of being malicious exceeds a defined threshold (e.g., $$ > 0.85 $$), an automated response can be triggered, such as quarantining the app and creating a medium-severity alert for investigation.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - Corporate Application Whitelist Database
      - Threat Intelligence Platform (TIP) Data
      - MDM/UEM management console and underlying database; The population of managed corporate-owned and BYOD mobile devices.
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          # Load the pre-trained machine learning model
          ml_model = load_model("iconless_app_classifier.model")
          
          # Get all new non-whitelisted, iconless applications
          new_suspicious_apps = get_new_non_whitelisted_iconless_apps()
          
          # Score each new app using the model
          for app in new_suspicious_apps:
            features = extract_features(app) # e.g., prevalence, permission count, source
            malicious_probability = ml_model.predict_proba(features)
            
            # If the score exceeds the threshold, trigger an automated response
            if malicious_probability > 0.85:
              quarantine_app(app.id, app.device_id)
              alert(severity='medium', app_name=app.name, score=malicious_probability)
  - question: Are there any running processes on mobile devices that do not map to a known installed application and match threat intelligence?
    context: Adversaries may use techniques like "fileless" malware to execute malicious code directly in memory without installing a formal application package. This makes the activity invisible to traditional application inventory scans. This question aims to detect this behavior by correlating data from two different sources. It compares the list of currently running processes, reported by a Mobile Threat Protection (MTP) agent, with the list of installed applications from the MDM/UEM inventory for the same device. Any process that cannot be mapped to an installed application is considered "unmapped" or "orphaned." The file hash or name of this unmapped process is then checked against threat intelligence feeds to identify known malware.
    answer_sources:
      - Mobile Threat Protection (MTP) Process Execution Log
      - MDM/UEM Application Inventory Log
      - Threat Intelligence Platform (TIP) Data
      - Mobile Threat Protection (MTP) platform console; MDM/UEM management console; Endpoint file systems and process tables on managed mobile devices.
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          # Iterate through each managed device
          for device in all_devices:
            # Get running processes from MTP and installed apps from MDM
            running_processes = get_mtp_processes(device.id)
            installed_apps = get_mdm_inventory(device.id)
            
            # Identify processes that don't belong to any installed app
            unmapped_processes = find_unmapped_processes(running_processes, installed_apps)
            
            # Check each unmapped process against threat intelligence
            for process in unmapped_processes:
              is_known_threat = query_tip(hash=process.hash)
              if is_known_threat:
                alert(severity='high', process_name=process.name, device_id=device.id)
  - question: Do any devices exhibit a set of unmapped running processes that significantly deviates from a known-good baseline?
    context: Not all unmapped processes are malicious; some may be legitimate system daemons or transient helper processes. To distinguish between normal and suspicious unmapped processes, this question involves baselining. A "golden image" or a set of known-good, cleanly configured devices is used to create a baseline set of expected unmapped processes. The set of unmapped processes on every other device in the fleet is then compared against this baseline using a set similarity metric, such as the Jaccard index. A device whose unmapped process set has a low similarity score (e.g., Jaccard similarity $$ < 0.5 $$) to the baseline is flagged as a significant outlier, indicating it is running a unique and potentially unauthorized set of processes that warrants investigation.
    answer_sources:
      - Mobile Threat Protection (MTP) Process Execution Log
      - MDM/UEM Application Inventory Log
      - Threat Intelligence Platform (TIP) Data
      - Mobile Threat Protection (MTP) platform console; MDM/UEM management console; Endpoint file systems and process tables on managed mobile devices.
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          # Establish the baseline set of unmapped processes from a golden image
          golden_processes = get_unmapped_processes(golden_image_device_id)
          
          # Iterate through all other devices
          for device in all_devices:
            # Get the set of unmapped processes for the current device
            device_processes = get_unmapped_processes(device.id)
            
            # Calculate the Jaccard similarity between the device's set and the baseline
            similarity_score = jaccard_similarity(device_processes, golden_processes)
            
            # If similarity is below the threshold, flag the device
            if similarity_score < 0.5:
              alert(severity='medium', device_id=device.id, reason="Significant deviation from process baseline")
  - question: Can a time-series anomaly detection model identify devices with an abnormal and sustained number of unmapped running processes over time?
    context: Malicious activity may not just introduce new unmapped processes, but also change the temporal pattern of their occurrence. For example, a compromise might lead to a sudden and sustained increase in the number of unmapped processes. This question proposes using a time-series anomaly detection model, like an LSTM Autoencoder, to learn the normal behavior for each device. The model is trained on historical data of the count of unmapped processes over time (e.g., sampled hourly). In production, the model continuously monitors this time series for each device. If the model's reconstruction error for a device's recent activity exceeds a dynamic threshold, it signifies a deviation from the learned normal pattern, triggering an alert for an abnormal and sustained presence of unmapped processes.
    answer_sources:
      - Mobile Threat Protection (MTP) Process Execution Log
      - MDM/UEM Application Inventory Log
      - Threat Intelligence Platform (TIP) Data
      - Mobile Threat Protection (MTP) platform console; MDM/UEM management console; Endpoint file systems and process tables on managed mobile devices.
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          # Load the pre-trained LSTM autoencoder model
          lstm_model = load_model("process_timeseries_anomaly.model")
          
          # For each device, analyze its recent process count history
          for device in all_devices:
            # Get the time series of unmapped process counts (e.g., last 24 hours)
            process_count_ts = get_hourly_unmapped_process_count(device.id, timespan='24h')
            
            # Calculate the reconstruction error using the trained model
            reconstruction_error = lstm_model.evaluate(process_count_ts)
            
            # Get the dynamic threshold for this specific device
            threshold = get_dynamic_threshold(device.id)
            
            # If the error exceeds the threshold, it's an anomaly
            if reconstruction_error > threshold:
              alert(severity='medium', device_id=device.id, reason="Anomalous time-series pattern of unmapped processes")