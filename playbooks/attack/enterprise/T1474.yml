name: "T1474: Supply Chain Compromise"
id: "f8a5e3c2-5d1b-4f9e-8c6a-7b2d1e4f0a9b"
description: "This playbook helps investigate if a corporate mobile application or software build process has been compromised through its supply chain. It focuses on detecting anomalies that occur after an application update or during a software build cycle. Key indicators include managed mobile applications making anomalous network connections (to new or high-entropy domains, using untrusted certificates, or direct-to-IP), trusted build processes on developer systems spawning unusual child processes that initiate external network connections, or a significant deviation in an application's aggregate network traffic profile (such as increased data egress or a change in communication patterns) following an update. The investigation leverages network traffic analysis, endpoint process monitoring, and behavioral baselining to uncover evidence of a compromise."
type: "technique"
related:
  - "TA0027: Initial Access"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "After a mobile app update, did any devices connect to known malicious command and control (C2) servers identified in our threat intelligence feeds?"
    context: "This question aims to quickly identify high-confidence indicators of compromise. By correlating an application update event with subsequent network traffic and comparing it against known malicious infrastructure, we can detect if the updated application has been trojanized to communicate with an attacker's C2 server. A match provides a strong signal of a supply chain attack."
    answer_sources:
      - "MDM Logs"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network egress points, corporate Wi-Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers."
    range: "Last 24 hours post-update"
    queries:
      - tech: "pseudocode"
        query: |
          GET devices updated with App_X from MDM_logs in last 24h
          FOR each device:
            GET network connections (DNS, IP) from Zeek logs for 24h post-update
            COMPARE connection destinations against C2_threat_intel_feed
            IF match found:
              ALERT high_severity
  - question: "Following an update, did the mobile application exhibit anomalous network behavior compared to its historical baseline, such as contacting new domains, using untrusted TLS certificates, employing rare JA3/JA3S hashes, or using domains that appear to be algorithmically generated (DGA)?"
    context: "This question focuses on detecting deviations from established normal behavior. Attackers often use new domains, self-signed certificates, or unique TLS fingerprints for their C2 channels. By baselining normal activity, we can spot these subtle but significant changes that may indicate a compromise, even if the destination isn't on a known threat list. Detecting potential DGA activity is crucial for identifying resilient C2 mechanisms."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "MDM Logs"
      - "Network egress points, corporate Wi-Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers."
    range: "Last 90 days for baseline, compare against last 24 hours post-update"
    queries:
      - tech: "pseudocode"
        query: |
          GET 90-day baseline of domains, cert_issuers, JA3/JA3S_hashes for App_X
          GET post-update network data for App_X in last 24h
          IF new_domain NOT IN baseline OR cert_issuer is untrusted OR JA3/JA3S_hash_rarity < 1%:
            ALERT anomaly
          CALCULATE entropy for new domains
          IF domain_entropy > 3.5:
            ALERT potential_DGA
  - question: "Did an autoencoder model, trained on normal network connection patterns, flag any post-update connections as anomalous due to high reconstruction error?"
    context: "This question leverages machine learning to identify complex and subtle deviations in network behavior that might be missed by rule-based detections. An autoencoder learns the latent features of 'normal' traffic. When a compromised application communicates with a C2 server, its connection characteristics (e.g., duration, data size, protocol) will likely differ from the norm, resulting in a high reconstruction error from the model, thereby flagging a potential C2 channel."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "MDM Logs"
      - "Network egress points, corporate Wi-Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers."
    range: "Last 90 days for model training, compare against last 24 hours post-update"
    queries:
      - tech: "pseudocode"
        query: |
          MODEL = train_autoencoder(historical_network_data)
          GET post-update network connection vectors
          FOR each connection:
            reconstruction_error = MODEL.predict(connection)
            IF reconstruction_error > threshold:
              ALERT medium_severity_anomaly
  - question: "Did a trusted software build tool (e.g., MSBuild, gradle) on a development or CI/CD system spawn a networking utility that connected to a known malicious IP address?"
    context: "This question seeks to detect a classic supply chain attack vector where the build environment itself is compromised. A legitimate build process should not typically spawn networking tools to connect to untrusted external addresses. Correlating such a process chain with a connection to an IP on a C2 threat feed is a high-fidelity indicator of a compromised build tool or script."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 5156"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers. Network traffic from the development subnet."
    range: "Last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FIND process_creation_events where parent is build_tool AND child is network_utility
          FOR each event:
            GET associated network_connection event for child_process_ID
            IF destination_IP IN C2_threat_intel_feed OR destination_IP NOT IN allowlist:
              ALERT critical_severity
              QUARANTINE host
  - question: "Did any build systems exhibit anomalous process activity, such as rare parent-child process relationships or the execution of highly obfuscated command-line scripts?"
    context: "This question aims to detect attacker activity by looking for unusual process behavior and obfuscation techniques. Attackers often introduce malicious logic via scripts or tools that are not typically used in a build process, creating statistically rare process chains. They also heavily obfuscate their commands (e.g., PowerShell) to evade simple signature-based detection, which can be identified by measuring linguistic entropy."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers."
    range: "Last 30 days for baseline, check current activity"
    queries:
      - tech: "pseudocode"
        query: |
          BASELINE = get_30day_parent_child_process_pairs()
          MONITOR new process_creation_events
          IF new_pair NOT IN BASELINE or is_rare(new_pair):
            ALERT anomaly
          MONITOR powershell_script_block_logs (EID 4104)
          CALCULATE entropy of script_block_content
          IF entropy > 4.5:
            ALERT high_entropy_script
  - question: "Did a machine learning classifier, trained to identify malicious process chains, flag any activity on a build system with high confidence?"
    context: "This question uses a supervised machine learning model to proactively identify malicious activity based on a combination of features. Unlike simple rule-based methods, a gradient boosting classifier can learn complex, non-linear relationships between features like process names, command-line properties, and network behavior to make a sophisticated judgment, allowing for the detection of novel or cleverly disguised attacks."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 5156"
      - "Windows Event ID 4104"
      - "Zeek conn.log"
      - "Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers. Network traffic from the development subnet."
    range: "Last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          MODEL = train_XGBoost_classifier(labeled_process_chain_data)
          FOR each new process_chain:
            EXTRACT features (parent, child, cmd_line_entropy, network_dest, etc.)
            prediction = MODEL.predict(features)
            IF prediction.label == 'malicious' AND prediction.confidence > 0.9:
              ALERT high_confidence_malicious_activity
              QUARANTINE host
  - question: "For the group of devices that received a specific application update, were any connections made to domains or IPs listed on malicious infrastructure threat intelligence feeds?"
    context: "This is a targeted threat intelligence check. By creating a specific watchlist of devices that just received an update, we can focus our investigation and reduce noise. Matching any network traffic from this group against a known-malicious feed provides a high-priority, actionable alert that strongly suggests the application update was compromised."
    answer_sources:
      - "MDM Logs"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi-Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic."
    range: "Last 24 hours post-update"
    queries:
      - tech: "pseudocode"
        query: |
          WATCHLIST = get_devices_with_App_update from MDM_logs
          GET all network connections from WATCHLIST in last 24h
          COMPARE connection_destinations against malicious_mobile_infra_feed
          IF match found AND destination NOT IN app_allowlist:
            ALERT high_priority
  - question: "Did the aggregate network traffic profile for the updated application significantly deviate from its 30-day historical baseline in terms of data volume, unique destinations, connection duration distribution, or destination port distribution?"
    context: "This question uses statistical analysis to find anomalous changes in the collective behavior of an application across all devices. A compromised application might exfiltrate data (increasing data volume), use new C2 infrastructure (increasing unique IPs), or alter its communication patterns (changing connection durations or ports). Statistical tests like K-S and Chi-squared can quantify these changes and flag significant deviations that indicate a potential compromise."
    answer_sources:
      - "Zeek conn.log"
      - "MDM Logs"
      - "MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi-Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic."
    range: "Last 30 days for baseline, compare against last 24 hours post-update"
    queries:
      - tech: "pseudocode"
        query: |
          BASELINE = get_30day_hourly_network_metrics(orig_bytes, unique_IPs)
          GET post-update hourly metrics
          IF post_update_bytes > BASELINE.99th_percentile_bytes for >2 hours:
            ALERT anomalous_data_volume
          IF post_update_unique_IPs > BASELINE.99th_percentile_IPs for >2 hours:
            ALERT anomalous_IP_count
          PERFORM K-S test on pre/post update connection_duration distributions
          PERFORM Chi-squared test on pre/post update destination_port frequencies
          IF p_value < 0.01:
            ALERT significant_distribution_change
  - question: "Did a time-series forecasting model predict the post-update network behavior accurately, or did the actual observed metrics (like data volume or DNS query rate) consistently fall outside the model's expected confidence interval?"
    context: "This question applies time-series analysis to detect 'low-and-slow' attacks that might not trigger simple threshold alerts. Models like ARIMA or Prophet learn the normal rhythm and seasonality of an application's network traffic. A sustained deviation from the forecast, even if the absolute values aren't extreme, can indicate a persistent, stealthy C2 channel or periodic data exfiltration, which this method is designed to uncover."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "MDM Logs"
      - "MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi-Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic."
    range: "Last 90 days for model training, compare against last 24-72 hours post-update"
    queries:
      - tech: "pseudocode"
        query: |
          MODEL = train_timeseries_model(historical_agg_metrics)
          GET post-update aggregate metrics (data_volume, DNS_rate, etc.)
          FORECAST = MODEL.predict(future_time_steps)
          IF actual_metric is outside FORECAST.confidence_interval for >3 consecutive hours:
            ALERT timeseries_anomaly