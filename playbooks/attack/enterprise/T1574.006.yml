name: T1574.006: Dynamic Linker Hijacking
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook investigates Dynamic Linker Hijacking (T1574.006), a technique used by adversaries to achieve persistence, escalate privileges, and evade defenses on Linux and macOS systems. It focuses on detecting the creation of malicious shared libraries (.so, .dylib), unauthorized modifications to linker configurations (e.g., /etc/ld.so.preload), and the abusive use of environment variables like LD_PRELOAD to load malicious code into trusted processes. Investigations cover analyzing file creation events, process command lines, shell configuration changes, and anomalous network or system behavior stemming from hijacked processes.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known malicious shared libraries (.so, .dylib) being created in user-writable or standard library paths?
    context: Adversaries may drop a pre-compiled malicious shared library onto a system to be loaded by a legitimate application. This question aims to detect this behavior by matching the hash of newly created library files against a feed of known-malicious indicators, which is a high-fidelity method for identifying known threats.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery file table
      - NAI: User home directories, /tmp, /var/tmp, /dev/shm, and standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file creation events
          WHERE file_name ENDS WITH '.so' OR '.dylib'
          AND file_hash IN known_malicious_hashes_from_threat_intel
          RETURN hostname, timestamp, user, process_name, file_path, file_hash

  - question: Is there an anomalous number of new shared libraries being created in standard library paths on a given host?
    context: While software installation is normal, a sudden spike in the creation of new shared libraries in standard system paths could indicate an adversary attempting to place multiple malicious libraries for persistence. This question helps detect such deviations from a host's normal activity baseline.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery file table
      - NAI: Standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE file creation events by day and hostname
          WHERE file_name ENDS WITH '.so' OR '.dylib'
          AND file_path IN standard_library_paths
          CALCULATE daily_count
          COMPARE daily_count to historical 30-day average + 99th percentile for that host
          ALERT if daily_count > threshold

  - question: Can newly created shared libraries be classified as malicious based on their intrinsic features?
    context: Sophisticated adversaries may use novel, unknown shared libraries. This question proposes using a machine learning model to proactively identify malicious libraries based on characteristics like high entropy, embedded suspicious strings (IPs, domains), unusual file paths, and suspicious exported function names, allowing detection of zero-day threats.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery file table
      - NAI: User home directories, /tmp, /var/tmp, /dev/shm, and standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new shared library file creation:
            EXTRACT features (file path, entropy, strings, exports)
            INPUT features into pre-trained classification model
            ALERT if model_output_confidence is 'malicious' and > 95%

  - question: Are processes modifying dynamic linker configuration files using suspicious command-line patterns?
    context: Adversaries often modify files like `/etc/ld.so.preload` to force the loading of a malicious library. They may use common shell commands to do so. This question focuses on creating a specific detection rule to look for command-line arguments that indicate a direct attempt to write to or modify these critical configuration files.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - File integrity monitoring logs
      - NAI: The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events
          WHERE command_line MATCHES ('echo .* >> /etc/ld.so.preload', 'tee -a /etc/ld.so.preload', 'ln -s .* /etc/ld.so.conf.d/')
          RETURN hostname, timestamp, user, process_name, command_line

  - question: Are commands modifying linker configuration files exhibiting unusually high entropy?
    context: To evade simple pattern matching, adversaries might obfuscate the commands used to modify linker configurations. This question aims to detect such obfuscation by analyzing the Shannon entropy of command-line arguments. Legitimate administrative commands typically have low entropy, so a high-entropy command modifying a sensitive file is highly suspicious.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - File integrity monitoring logs
      - NAI: The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events
          WHERE process writes to '/etc/ld.so.preload' OR '/etc/ld.so.conf.d/.*'
          CALCULATE Shannon entropy of command_line_arguments
          COMPARE entropy to baseline for legitimate admin commands
          ALERT if entropy > baseline + 3 * standard_deviation

  - question: Is the rate of modification to linker configuration files anomalous compared to historical patterns?
    context: System-level linker configurations are typically only modified during software installations or system patching. A modification outside of a maintenance window or at a frequency inconsistent with historical norms could indicate malicious activity. This question uses time-series analysis to spot these temporal anomalies.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - File integrity monitoring logs
      - NAI: The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR modification rate of '/etc/ld.so.preload' and '/etc/ld.so.conf.d/*'
          COMPARE current rate to historical baseline (e.g., patching cycles, maintenance windows)
          ALERT if modification occurs outside of expected timeframes or at an anomalous frequency

  - question: Are shell startup files being modified to include 'LD_PRELOAD' or 'DYLD_INSERT_LIBRARIES'?
    context: A common persistence mechanism is to add an `export LD_PRELOAD=...` command to a user's shell configuration file (e.g., `.bashrc`, `.profile`). This ensures the malicious library is loaded every time the user starts a new shell. This question uses file integrity monitoring to directly detect this specific, high-confidence indicator of compromise.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - File integrity monitoring logs
      - NAI: User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR file write events to shell startup files (~/.bashrc, ~/.profile, etc.)
          ALERT if added content CONTAINS 'LD_PRELOAD=' OR 'DYLD_INSERT_LIBRARIES='
          RETURN hostname, timestamp, user, file_path, added_content

  - question: Is a user modifying their shell startup files more frequently than their established baseline?
    context: Most users set up their shell configuration files once and rarely touch them again. An unusual frequency of modifications for a specific user, or a frequency that is an outlier compared to other users, can be a behavioral indicator of an adversary setting up or altering a persistence mechanism.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - File integrity monitoring logs
      - NAI: User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROFILE modification frequency of shell startup files per user
          ESTABLISH historical baseline for each user
          ALERT if modification_count for a user > (user_baseline OR 98th_percentile_of_all_users)

  - question: Do modifications to shell startup files have a high risk score, indicating potential malice?
    context: This question proposes a more advanced detection method that scores the risk of any modification to a shell startup file. By considering features like user role, time of day, and the presence of sensitive strings like 'LD_PRELOAD', a model can flag suspicious changes that might be missed by simpler rules.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - File integrity monitoring logs
      - NAI: User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON modification to shell startup file:
            EXTRACT features (user_role, time_of_day, content_strings, etc.)
            INPUT features into risk-scoring regression model
            ALERT if risk_score > defined_threshold

  - question: Are critical system processes that normally do not use the network initiating outbound connections?
    context: A successful dynamic linker hijack can inject network functionality into processes that should never have it. This question focuses on identifying this by creating a watchlist of core system processes (like `crond`) and alerting any time they make an outbound network connection, which is a strong anomaly.
    answer_sources:
      - Zeek conn.log
      - Sysmon for Linux Event ID 3
      - NAI: Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers (e.g., authentication servers, web servers, database servers).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE watchlist of non-networked system processes (e.g., 'crond', 'systemd-journald')
          SEARCH network connection events
          WHERE source_process_name IN watchlist AND destination_ip is not local
          ALERT on any match

  - question: Are system processes exhibiting anomalous network behavior, such as using unusual ports or transferring abnormal amounts of data?
    context: Even if a process is expected to use the network, a hijack could alter its behavior. This question aims to detect these subtle changes by baselining normal network activity (ports, data volume) for each process and alerting on significant deviations, such as connecting to a rare port or exfiltrating an unusual amount of data.
    answer_sources:
      - Zeek conn.log
      - Sysmon for Linux Event ID 3
      - NAI: Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each system process:
            BASELINE normal network behavior (destination ports, data volume)
            MONITOR new connections
            ALERT if destination_port is not in top 95% of historical ports
            ALERT if data_volume > 3 standard deviations from average

  - question: Does the network behavior of system processes deviate significantly from patterns learned by an unsupervised learning model?
    context: This question proposes using an advanced anomaly detection model, like an autoencoder, to learn the complex patterns of legitimate process-network interactions. The model can then detect novel or subtle deviations that would be missed by threshold-based methods, providing a powerful way to spot hijacked process behavior.
    answer_sources:
      - Zeek conn.log
      - Sysmon for Linux Event ID 3
      - NAI: Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN autoencoder model on legitimate process-network event features
          FEED live events into the trained model
          CALCULATE reconstruction_error
          ALERT if reconstruction_error is high, indicating a deviation from normal

  - question: Is a non-root user creating a shared library in a world-writable directory that is also in the search path of a SUID/SGID executable?
    context: This is a classic privilege escalation vector. An adversary can place a malicious shared library in a location like `/tmp` where it will be loaded by a root-owned SUID program, allowing the adversary's code to run with elevated privileges. This question aims to detect the setup for this attack.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery suid_bin table
      - NAI: All file systems on multi-user Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INVENTORY SUID/SGID executables and their library search paths
          SEARCH file creation events
          WHERE user_id > 1000 AND file_name ENDS WITH '.so'
          AND file_path IS world-writable AND IN an SUID library search path
          ALERT on any match

  - question: Is a SUID binary being executed by an anomalous parent process?
    context: After dropping a malicious library, an adversary might trigger its execution by causing an unusual process (e.g., a web server) to run a SUID binary. This question focuses on baselining normal parent-child relationships for SUID executables and alerting when an unexpected parent process is observed, which could indicate the final step of the attack.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery suid_bin table
      - NAI: All file systems on multi-user Linux hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROFILE legitimate parent processes for all SUID/SGID binaries
          SEARCH process creation events where child is a SUID/SGID binary
          ALERT if parent_process_name is not in the established baseline for that child

  - question: Can graph analysis reveal a high-risk path where a low-privilege user creates a library that is subsequently loaded by a root process?
    context: The relationships between users, files, and processes can be complex. This question suggests using a graph database to model these interactions. By doing so, an analyst can query for specific attack chains, such as a low-privilege user creating a file that is later read/loaded by a high-privilege SUID process, providing a holistic view of the attack.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery suid_bin table
      - NAI: All file systems on multi-user Linux hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL users, processes, and files as nodes in a graph
          QUERY for paths: (User {privilege:low})-[CREATED]->(File {type:.so})-[LOADED_BY]->(Process {privilege:root, type:SUID})
          ALERT on any such path discovery

  - question: Is a SUID/SGID executable being launched with the 'LD_PRELOAD' environment variable set?
    context: On misconfigured or older systems, the dynamic linker may not properly sanitize the environment for SUID/SGID executables. An adversary can abuse this by setting `LD_PRELOAD` before running a SUID binary to escalate privileges. This is a very specific and high-confidence indicator of an active privilege escalation attempt.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs from all Linux endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events
          WHERE 'LD_PRELOAD=' in process_environment_variables
          AND process_image_path is a known SUID/SGID binary
          CREATE high-severity alert

  - question: Is the 'LD_PRELOAD' variable being set for a process where its use is statistically rare?
    context: While some applications legitimately use `LD_PRELOAD`, its use with most common binaries, especially SUID-enabled ones, is extremely rare. This question aims to find outliers by calculating the rarity of `LD_PRELOAD` usage for every unique process across the enterprise and alerting when it appears with a process for which it is not a normal behavior.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs from all Linux endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE frequency of 'LD_PRELOAD' usage per unique process name enterprise-wide
          SEARCH for new process executions with 'LD_PRELOAD'
          ALERT if frequency for that process_name is < 0.01%

  - question: Can a decision tree classifier identify malicious command-line executions involving SUID/SGID binaries and 'LD_PRELOAD'?
    context: This question proposes building a machine learning classifier to distinguish between legitimate and malicious command-line activity. By training on features like process name, user context, and the presence of `LD_PRELOAD`, the model can learn to flag suspicious executions, especially those involving SUID/SGID binaries, that might indicate a privilege escalation attempt.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs from all Linux endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN decision tree classifier on command-line features
          FOR each new command-line execution involving a SUID/SGID binary:
            EXTRACT features (process name, user, env vars, etc.)
            ALERT if classifier output is 'malicious'

  - question: Is a SUID/SGID binary spawning an unexpected child shell process?
    context: A successful hijack of a SUID/SGID executable often results in the adversary spawning a shell (`/bin/sh`, `bash`, etc.) to gain interactive access with elevated privileges. SUID programs should almost never spawn a shell as a direct child, making this a very strong indicator of exploitation.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Sysmon for Linux Event ID 11
      - Zeek conn.log
      - NAI: Process, network, and file system logs from all Linux hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events
          WHERE parent_process is a SUID/SGID binary
          AND child_process_name IN ('sh', 'bash', 'zsh')
          ALERT on any match

  - question: Is a SUID/SGID binary exhibiting anomalous behavior, such as spawning unusual child processes or making unexpected network connections?
    context: Beyond just spawning a shell, a hijacked SUID binary might perform other actions that are out of character, such as making a network connection or spawning other unexpected helper processes. This question involves baselining the normal behavior of each SUID binary and alerting on any statistical deviation.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Sysmon for Linux Event ID 11
      - Zeek conn.log
      - NAI: Process, network, and file system logs from all Linux hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each SUID/SGID binary:
            BASELINE normal child processes and network destinations
          MONITOR new executions of SUID/SGID binaries
          ALERT if child process is not on baseline list
          ALERT if network destination is a statistical outlier

  - question: Are the system call sequences of SUID/SGID binaries deviating from learned benign patterns?
    context: At the lowest level, a program's execution is a sequence of system calls. A hijacked binary will have a different syscall sequence than a legitimate one. This question proposes using a sophisticated sequence analysis model (like an LSTM) to learn the 'grammar' of normal syscalls for a process and detect any deviation, indicating a code-flow hijack.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Sysmon for Linux Event ID 11
      - Zeek conn.log
      - NAI: Process, network, and file system logs from all Linux hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN LSTM model on legitimate syscall sequences for high-risk SUID binaries
          MONITOR real-time syscall traces for these binaries
          ALERT if the observed sequence significantly deviates from the learned model

  - question: Are newly created shared libraries in non-standard paths hooking common libc functions, suggesting a userland rootkit?
    context: Adversaries use dynamic linker hijacking to install userland rootkits that hook common functions (like `readdir` to hide files, or `connect` to hide network connections) to evade detection. This question aims to detect these rootkits by scanning new libraries for exports of these common functions, especially when the library is in an unusual location.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - osquery shared_libraries table
      - YARA scan results
      - NAI: File systems of hosts with critical security agents, particularly in user-writable locations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEPLOY YARA rule to scan new files
          YARA rule should trigger if file is a shared library
          AND exports symbols like 'readdir', 'connect', 'execve'
          AND file_path is NOT in standard system library paths
          ALERT on YARA match

  - question: Do any shared libraries on the system have a high 'suspicion score' based on hooked functions, path rarity, and signature status?
    context: Instead of a binary rule, this question proposes a scoring system to evaluate the risk of any given shared library. By combining factors like the number of hooked functions, how unusual its file path is, and whether it's signed, a score can be generated to prioritize investigation on the most suspicious libraries that may be part of a rootkit.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - osquery shared_libraries table
      - YARA scan results
      - NAI: File systems of hosts with critical security agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each shared library on a system:
            CALCULATE suspicion_score = (weight1 * num_hooked_functions) + (weight2 * path_rarity) + (weight3 * is_unsigned)
            ALERT if suspicion_score > 99th percentile of all scores

  - question: Can new shared libraries be classified as malicious based on their exported function tables?
    context: The set of functions a library exports is a strong indicator of its purpose. This question suggests training a machine learning model to distinguish between the export tables of legitimate libraries and those of known malware. This allows the system to classify newly discovered libraries as potentially malicious rootkit components even if they are previously unseen.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - osquery shared_libraries table
      - YARA scan results
      - NAI: File systems of hosts with critical security agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN classifier on exported function tables of benign and malicious libraries
          ON new library creation:
            EXTRACT its export table
            INPUT to classifier
            ALERT if classified as 'malicious'

  - question: Is a security agent process being executed with the 'LD_PRELOAD' or 'DYLD_INSERT_LIBRARIES' variable set?
    context: A primary goal for an adversary is to disable security tools. A direct way to do this is to use `LD_PRELOAD` to hijack the security agent process itself, causing it to malfunction or blinding it to the adversary's other activities. This is an extremely high-confidence indicator of a defense evasion attempt and should be treated as a critical alert.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs from all endpoints and servers where security monitoring agents are deployed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE list of security agent process names (e.g., 'osqueryd', 'falcon-sensor')
          SEARCH process creation events
          WHERE process_name IN security_agent_list
          AND ('LD_PRELOAD=' OR 'DYLD_INSERT_LIBRARIES=') in process_environment
          CREATE critical-severity alert

  - question: Has a security agent process been observed running with 'LD_PRELOAD' for the first time across the enterprise?
    context: Legitimate use of `LD_PRELOAD` with a security agent is virtually nonexistent. This question leverages this fact by maintaining a set of all processes ever seen with `LD_PRELOAD`. If a security agent's name ever appears in this set for the first time, it's a strong signal of a novel defense evasion attempt that requires immediate investigation.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN a set of all process names ever seen with 'LD_PRELOAD'
          ON process creation with 'LD_PRELOAD':
            IF process_name is a security agent AND is new to the set:
              ALERT immediately

  - question: Is a security agent being launched by an unusual parent process or with anomalous environment variables?
    context: Adversaries might try to hijack and then restart a security agent to load their malicious code. This could result in the agent being launched by an abnormal parent (e.g., a user's shell instead of `systemd`) or with unusual environment variables. This question uses anomaly detection to spot these irregular launch patterns.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL normal parent-child relationships and environments for security agents
          MONITOR new agent process creation events
          ALERT if parent process is not 'systemd' (or other known parent)
          ALERT if environment variables are anomalous

  - question: Are common administrative or enumeration tools being executed with 'LD_PRELOAD' set?
    context: To hide their presence (e.g., processes, files, network connections), adversaries can use `LD_PRELOAD` to hijack the output of common enumeration tools like `ps`, `ls`, or `netstat`. An analyst running `ps` would then see a filtered view, hiding the malicious process. Detecting `LD_PRELOAD` with these tools is a direct indication of this hiding technique.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs on all Linux systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE watchlist of enumeration tools ('ps', 'ls', 'netstat', 'lsof', etc.)
          SEARCH process creation events
          WHERE process_name IN watchlist
          AND 'LD_PRELOAD=' in process_environment
          ALERT on any match

  - question: Is 'LD_PRELOAD' being used with an enumeration tool where it is statistically absent, or is the library path obfuscated?
    context: This question refines the previous one by adding statistical analysis. It flags the use of `LD_PRELOAD` with tools where it's almost never seen legitimately. It also adds a check for high-entropy library paths in the `LD_PRELOAD` variable, which can detect an adversary's attempt to randomize file paths to avoid static detection rules.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs on all Linux systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for process executions of enumeration tools with 'LD_PRELOAD'
          ALERT if 'LD_PRELOAD' usage for this tool is statistically rare (<0.001%)
          CALCULATE entropy of the library path in the 'LD_PRELOAD' variable
          ALERT if entropy is high

  - question: Do administrative shell sessions contain command sequences that deviate from normal patterns, such as prepending enumeration tools with 'LD_PRELOAD'?
    context: Normal administrative work follows certain patterns or 'grammar'. An adversary attempting to hide their tracks will issue commands that break this grammar, for example, by consistently prepending `ls` and `ps` with `LD_PRELOAD=...`. This question suggests using NLP models to learn normal command sequences and flag sessions that contain these abnormal, evasive patterns.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - NAI: Process execution logs on all Linux systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN NLP model on sequences of legitimate admin commands
          ANALYZE live shell session command sequences
          ALERT if a session contains sequences that the model flags as anomalous,
          especially those involving 'LD_PRELOAD' + enumeration tools.

  - question: Does a significant drop in security log volume from a host correlate with a recent security agent restart on that same host?
    context: If an adversary successfully hijacks a security agent, a common symptom is that the agent stops sending logs. This question aims to directly link a loss of visibility (a 'log source silent' alert) to a recent agent restart event on the same host, providing strong, correlated evidence of a successful defense evasion attack.
    answer_sources:
      - SIEM event ingestion logs
      - Zeek conn.log
      - Sysmon for Linux Event ID 1
      - Log forwarder health metrics
      - NAI: Log ingestion pipeline health dashboards and process monitoring logs on hosts with security agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'log source silent' alert is triggered for a host:
            SEARCH for security agent restart events (Sysmon EID 1) on that host
            within the last 5 minutes.
            IF found, create a correlated alert for potential agent hijacking.

  - question: Has the event-per-second (EPS) volume for a log source dropped below its historical baseline?
    context: A compromised security agent may not fail entirely but might be partially disabled, leading to a reduced, but not zero, log volume. This question uses time-series analysis to establish a normal EPS baseline for each log source and alerts if the volume drops significantly for a sustained period, which could indicate a partially successful agent hijack.
    answer_sources:
      - SIEM event ingestion logs
      - Log forwarder health metrics
      - NAI: Log ingestion pipeline health dashboards.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each log source:
            CALCULATE 15-minute rolling average of EPS
            ESTABLISH historical baseline (e.g., 5th percentile of past averages)
            ALERT if current rolling average drops below baseline for > 30 minutes.

  - question: Is the observed log volume from a host significantly lower than the volume predicted by a forecasting model?
    context: This is a more advanced approach to detecting log volume drops. By using a forecasting model (like Prophet), it can account for seasonality and trends (e.g., lower volume over a weekend). An alert is generated only when the actual log volume is significantly below the forecasted volume's confidence interval, leading to more accurate detection of anomalous drops caused by agent tampering.
    answer_sources:
      - SIEM event ingestion logs
      - Log forwarder health metrics
      - NAI: Log ingestion pipeline health dashboards.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each log source:
            TRAIN time-series forecasting model (e.g., Prophet) on historical log volume.
            PREDICT expected log volume and confidence interval for the current time.
            ALERT if observed volume is below the lower bound of the confidence interval.