name: T1574.006: Dynamic Linker Hijacking
id: 5a8e01e2-8b9f-4d3a-9e1e-2c7c7f7d7f7e
description: |
  Investigates whether an adversary is establishing persistence, escalating privileges, or evading defenses using dynamic linker hijacking (T1574.006). This involves detecting the creation of malicious shared object files (.so, .dylib) in user-writable or standard library paths, unauthorized modifications to dynamic linker configuration files like /etc/ld.so.preload, the malicious use of environment variables such as `LD_PRELOAD` or `DYLD_INSERT_LIBRARIES` in shell configuration files or process contexts, and the hijacking of SUID/SGID or security agent processes to hide activity, gain elevated permissions, or disable security controls.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Are new shared library files (.so, .dylib) being created that match known-bad hashes from threat intelligence?
    context: |
      This question seeks to identify the most direct evidence of dynamic linker hijacking: the creation of a malicious library file. By comparing the hash of newly created shared object files against a threat intelligence feed, analysts can quickly detect known malware or attack tools being staged for persistence.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery file table
      - User home directories, /tmp, /var/tmp, /dev/shm, and standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_creation_events
          WHERE file_name ENDS_WITH '.so' OR file_name ENDS_WITH '.dylib'
          JOIN threat_intelligence_hashes ON file_hash
          RETURN host, user, file_path, file_hash, timestamp
  - question: Is there an anomalous spike in the number of new shared libraries being created in standard library paths on any given host?
    context: |
      Legitimate software installations and updates can create new shared libraries, but these events are typically infrequent. A sudden, statistically significant increase in the creation of these files on a host, outside of a planned maintenance window, can indicate an adversary placing multiple malicious libraries or tools.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery file table
      - User home directories, /tmp, /var/tmp, /dev/shm, and standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_creation_events
          WHERE file_path IN standard_library_paths AND (file_name ENDS_WITH '.so' OR file_name ENDS_WITH '.dylib')
          AGGREGATE count by host, day
          COMPARE daily_count to 99th_percentile_of_last_30_days
          ALERT if daily_count > threshold
  - question: Can machine learning models classify newly created shared libraries as malicious based on their intrinsic features?
    context: |
      This question addresses the detection of novel or unknown malicious libraries that won't be caught by hash-based lookups. By training a model on features like file entropy, string characteristics, and exported functions, the system can identify suspicious libraries that share characteristics with known malware, even if they are not identical.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery file table
      - User home directories, /tmp, /var/tmp, /dev/shm, and standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR new_shared_library_file:
            EXTRACT features (file_path, entropy, strings, exports)
            INPUT features into classification_model
            ALERT if model_confidence_is_high and class_is_malicious
  - question: Are processes being executed with command-line arguments that modify dynamic linker configuration files like /etc/ld.so.preload?
    context: |
      Adversaries can gain persistence by adding a malicious library to the system's preload list, causing it to be loaded by every new process. This question looks for the specific commands used to modify these sensitive configuration files, such as using 'echo' or 'tee' to append a path.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - File integrity monitoring logs
      - The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE command_line MATCHES_REGEX 'echo .* >> /etc/ld.so.preload' OR 'tee .* /etc/ld.so.preload' OR 'ln -s .* /etc/ld.so.conf.d/'
          RETURN host, user, process_name, command_line, timestamp
  - question: Are commands modifying linker configuration files exhibiting unusually high entropy, potentially indicating obfuscation?
    context: |
      To evade simple pattern matching, adversaries may obfuscate the paths or commands used to modify linker configurations. High entropy (randomness) in the command line can be a strong indicator of such obfuscation techniques. This question helps detect these more advanced attempts.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - File integrity monitoring logs
      - The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE target_file_path IS '/etc/ld.so.preload' or IN '/etc/ld.so.conf.d/'
          CALCULATE entropy of command_line_arguments
          ALERT if entropy > (baseline_entropy + 3 * std_dev)
  - question: Are linker configuration files being modified at a time or frequency that is inconsistent with normal administrative activity?
    context: |
      Linker configuration files should only be modified during software installation or system patching, which often occurs within predictable maintenance windows. This question aims to detect modifications that happen outside of these normal cycles, which is highly suspicious and could signal adversary activity.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - File integrity monitoring logs
      - The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR modification_events for '/etc/ld.so.preload' and '/etc/ld.so.conf.d/*'
          INPUT event_timestamps into time-series_anomaly_detection_model
          ALERT if modification occurs outside of learned maintenance_windows or at an anomalous frequency
  - question: Are user shell configuration files (e.g., .bashrc, .profile) being modified to include `LD_PRELOAD` or `DYLD_INSERT_LIBRARIES`?
    context: |
      To ensure their malicious library is loaded every time a user starts a shell session, an adversary may add an export command for `LD_PRELOAD` to a shell startup script. This provides user-level persistence. Monitoring these files for such additions is a key detection strategy.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - File integrity monitoring logs
      - User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_modification_events
          WHERE file_path IN common_shell_startup_files
          AND content_added CONTAINS 'LD_PRELOAD=' OR 'DYLD_INSERT_LIBRARIES='
          RETURN host, user, file_path, content_added, timestamp
  - question: Is any user modifying their shell startup files at an anomalously high frequency?
    context: |
      Shell configuration files are typically set up once and then rarely changed. A user who frequently modifies these files may be iterating on an attack, or an automated script may be repeatedly trying to establish persistence. This behavioral anomaly can be a valuable indicator.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - File integrity monitoring logs
      - User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_modification_events
          WHERE file_path IN common_shell_startup_files
          AGGREGATE count by user, day
          COMPARE daily_count to user_specific_baseline
          ALERT if daily_count is anomalous
  - question: Can a risk score be assigned to shell startup file modifications to prioritize investigations?
    context: |
      Not all modifications are malicious. By creating a risk score based on multiple factors—such as the user's role, time of day, and the specific content being added—analysts can focus on the highest-risk changes, reducing alert fatigue and improving efficiency.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - File integrity monitoring logs
      - User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each shell_startup_file_modification:
            EXTRACT features (user_role, time_of_day, content_added, reputation_of_paths)
            INPUT features into regression_model
            ALERT if risk_score > threshold
  - question: Are any critical system processes that normally do not use the network (e.g., crond, systemd-journald) initiating outbound network connections?
    context: |
      This is a strong indicator of process hijacking. If a malicious library is preloaded into a core system process, it may cause that process to initiate a command-and-control connection. Since these processes have no legitimate reason to connect to the internet, any such activity is highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Sysmon for Linux Event ID 3
      - Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers (e.g., authentication servers, web servers, database servers).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH network_connection_events
          WHERE process_name IN (critical_process_watchlist)
          AND destination_ip IS_not_local
          RETURN host, process_name, destination_ip, destination_port, timestamp
  - question: Is a system process exhibiting anomalous network behavior, such as connecting to unusual ports or transferring unusual amounts of data?
    context: |
      Even processes that do use the network typically have very predictable behavior. A hijacked process might connect to a non-standard C2 port or exfiltrate data, causing deviations in its network patterns. This behavioral analysis can catch hijacking even in network-enabled processes.
    answer_sources:
      - Zeek conn.log
      - Sysmon for Linux Event ID 3
      - Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers (e.g., authentication servers, web servers, database servers).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each system_process_network_connection:
            COMPARE destination_port to baseline_ports
            COMPARE data_volume to baseline_volume
            ALERT if anomalous
  - question: Does an unsupervised machine learning model detect anomalous process-network behavior that deviates from a learned norm?
    context: |
      This question leverages advanced anomaly detection to find subtle deviations that might be missed by simple thresholding. An autoencoder can learn the complex patterns of legitimate activity and flag any event that it cannot 'reconstruct' well, indicating a novel or unexpected behavior indicative of a compromise.
    answer_sources:
      - Zeek conn.log
      - Sysmon for Linux Event ID 3
      - Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers (e.g., authentication servers, web servers, database servers).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_network_event:
            EXTRACT features (process_name, dest_ip, port, protocol, bytes_out)
            INPUT features into autoencoder_model
            CALCULATE reconstruction_error
            ALERT if reconstruction_error is high
  - question: Is a non-root user creating a shared library file in a directory that is searched by a SUID/SGID executable?
    context: |
      This is a classic privilege escalation vector. An adversary places a malicious library in a location (like /tmp) where a privileged (SUID/SGID) program will find and load it, causing the adversary's code to run with elevated permissions. Detecting this specific sequence of events is critical.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery suid_bin table
      - All file systems on multi-user Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE high_risk_paths from SUID_binary_library_paths
          SEARCH file_creation_events
          WHERE user_id > 1000 AND file_name ENDS_WITH '.so' AND file_path IN high_risk_paths
          RETURN host, user, file_path, timestamp
  - question: Is a SUID/SGID binary being executed by an unusual parent process, suggesting it was triggered as part of an exploit?
    context: |
      SUID programs are typically run directly by users or specific system services. If a web server process, for example, suddenly executes a SUID binary like `/bin/mount`, it may indicate that an attacker has compromised the web server and is now using this technique to escalate privileges.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery suid_bin table
      - All file systems on multi-user Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each execution of a SUID_binary:
            CHECK if parent_process is in the known_legitimate_parents_list
            ALERT if parent_process is not on the list
  - question: Can graph analysis reveal a high-risk chain of events, such as a low-privilege user creating a library that is later loaded by a root-owned SUID process?
    context: |
      This question involves connecting disparate events over time. A graph database can model the relationships between users, files they create, and processes that load those files. By querying this graph, analysts can uncover the full attack chain from library creation to privileged execution.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - auditd logs
      - osquery suid_bin table
      - All file systems on multi-user Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          QUERY graph_database for path:
            (User {privilege:low})-[CREATED]->(File {type:library})-[LOADED_BY]->(Process {owner:root, is_suid:true})
          ALERT if path exists
  - question: Is a SUID/SGID executable being launched with the `LD_PRELOAD` environment variable set?
    context: |
      Modern linkers sanitize (ignore) `LD_PRELOAD` for SUID/SGID executables as a security measure. However, on older or misconfigured systems, this protection may be absent. An attempt to launch a SUID binary with `LD_PRELOAD` is a direct, high-confidence indicator of a privilege escalation attempt.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs from all Linux endpoints and servers, especially those running older OS versions or custom-compiled applications.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE process_is_suid_sgid IS TRUE
          AND process_environment CONTAINS 'LD_PRELOAD='
          RETURN host, user, process_name, command_line, timestamp
  - question: Is the `LD_PRELOAD` variable being used with a process that has rarely or never used it before?
    context: |
      While some development and debugging tools use `LD_PRELOAD` legitimately, most applications do not. By baselining its usage, we can detect when it's applied to a new process, which could be the target of a hijacking attempt. This is especially suspicious for any SUID/SGID binary.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs from all Linux endpoints and servers, especially those running older OS versions or custom-compiled applications.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE process_environment CONTAINS 'LD_PRELOAD='
          CALCULATE historical_frequency of LD_PRELOAD for process_name
          ALERT if frequency < 0.01%
  - question: Can a machine learning classifier identify malicious command-line executions involving SUID/SGID binaries and `LD_PRELOAD`?
    context: |
      This question proposes a more holistic approach than simple pattern matching. A decision tree can learn the complex interplay of features—process name, user, environment variables, command arguments—that distinguish a legitimate command from a malicious one, allowing for more accurate detection.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs from all Linux endpoints and servers, especially those running older OS versions or custom-compiled applications.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event:
            EXTRACT features (process_name, user, has_ld_preload, cmd_line_length, etc.)
            INPUT features to decision_tree_model
            ALERT if class is malicious, especially for SUID/SGID processes
  - question: Has a SUID/SGID executable spawned a shell (e.g., sh, bash) as a direct child process?
    context: |
      This is a smoking gun for successful privilege escalation. After hijacking a SUID process, the adversary's primary goal is often to get a root shell. Therefore, a privileged process like `sudo` or `crontab` spawning `/bin/sh` is an extremely high-fidelity indicator of compromise.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Sysmon for Linux Event ID 11
      - Zeek conn.log
      - Process, network, and file system logs from all Linux hosts, especially critical application and database servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE parent_process_is_suid_sgid IS TRUE
          AND process_name IN ('sh', 'bash', 'zsh', 'dash')
          RETURN host, parent_process_name, process_name, timestamp
  - question: Is a SUID/SGID binary exhibiting anomalous behavior, such as spawning unexpected child processes or making unusual network connections?
    context: |
      Beyond just spawning a shell, a hijacked SUID process might perform other anomalous actions, like running reconnaissance commands or connecting to a C2 server. By baselining the normal behavior of each SUID binary, we can detect any deviation as a potential sign of compromise.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Sysmon for Linux Event ID 11
      - Zeek conn.log
      - Process, network, and file system logs from all Linux hosts, especially critical application and database servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each SUID_process_event (child_process or network_connection):
            COMPARE event_details to historical_baseline for that SUID process
            ALERT if child_process or network_destination is a statistical outlier
  - question: Is a SUID/SGID binary executing a sequence of system calls that deviates from its learned, legitimate behavior?
    context: |
      This is a deep, low-level detection method. The sequence of system calls a program makes is like its fingerprint. A hijacked process will have its execution flow altered, resulting in a different sequence of syscalls. An LSTM or similar model can learn the normal sequence and detect these malicious deviations.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Sysmon for Linux Event ID 3
      - Sysmon for Linux Event ID 11
      - Zeek conn.log
      - Process, network, and file system logs from all Linux hosts, especially critical application and database servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR syscall_trace for SUID_process
          INPUT syscall_sequence into LSTM_model
          ALERT if model detects significant deviation from learned benign sequences
  - question: Are new shared libraries being created in non-standard locations that appear to be hooking common system functions?
    context: |
      This question targets userland rootkits. Adversaries create fake libraries that replace common functions like `readdir` (to hide files) or `connect` (to hide network connections). A YARA rule can scan new libraries for these exported function names, and if found in an unusual location, it's a strong sign of a rootkit.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - osquery shared_libraries table
      - YARA scan results
      - File systems of hosts with critical security agents (e.g., EDR, log forwarders), particularly directories where tools are installed or in user-writable locations like /tmp or /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new_file_creation:
            IF file_path NOT IN standard_library_paths:
              SCAN file with YARA_rule_for_hooking_functions
              ALERT on match
  - question: Can a 'suspicion score' based on multiple factors identify likely rootkit libraries already present on a system?
    context: |
      This moves from real-time detection to periodic hunting. By scoring all libraries on a system based on factors like path rarity, number of hooked functions, and lack of a digital signature, analysts can proactively hunt for potentially malicious libraries that may have been missed by other detections.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - osquery shared_libraries table
      - YARA scan results
      - File systems of hosts with critical security agents (e.g., EDR, log forwarders), particularly directories where tools are installed or in user-writable locations like /tmp or /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each shared_library on system:
            CALCULATE suspicion_score (hooked_functions, path_rarity, is_unsigned)
            ALERT if score > 99th_percentile_threshold
  - question: Can a machine learning model classify a shared library as malicious based on its table of exported functions?
    context: |
      Legitimate libraries and malicious rootkits have very different profiles of exported functions. By training a classifier on these profiles, it's possible to detect novel rootkits that use different function names or combinations than those caught by static YARA rules.
    answer_sources:
      - Sysmon for Linux Event ID 11
      - osquery shared_libraries table
      - YARA scan results
      - File systems of hosts with critical security agents (e.g., EDR, log forwarders), particularly directories where tools are installed or in user-writable locations like /tmp or /dev/shm.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new_shared_library_creation:
            EXTRACT exported_function_table
            INPUT exports into classifier_model
            ALERT if class is malicious
  - question: Is a security agent process (e.g., EDR, auditd) being launched with `LD_PRELOAD` or `DYLD_INSERT_LIBRARIES`?
    context: |
      This is a direct and unambiguous attempt to disable or blind a security control. An adversary preloads a malicious library into the security agent itself to make it ignore the adversary's subsequent actions. This should always be treated as a critical, high-priority alert.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs from all endpoints and servers where security monitoring agents (e.g., EDR, FIM, log forwarders) are deployed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE process_name IN (security_agent_watchlist)
          AND process_environment CONTAINS 'LD_PRELOAD=' OR 'DYLD_INSERT_LIBRARIES='
          ALERT with critical severity
  - question: Has a security agent process ever been observed running with `LD_PRELOAD` across the entire enterprise?
    context: |
      This question uses enterprise-wide historical data to spot an extreme anomaly. Since no legitimate security agent should ever run with `LD_PRELOAD`, the first time this is ever seen for a given agent process (e.g., `falcon-sensor`) is a massive red flag indicating a novel attack.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs from all endpoints and servers where security monitoring agents (e.g., EDR, FIM, log forwarders) are deployed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN set of all processes ever seen with LD_PRELOAD
          ON process_creation with LD_PRELOAD:
            IF process_name in security_agent_watchlist AND process_name is new to the set:
              ALERT
  - question: Is a security agent being started in an anomalous context, such as by an unusual parent process or with unusual environment variables?
    context: |
      Adversaries may try to stop and then restart a security agent with their malicious library preloaded. This 'hijack-and-relaunch' attempt can be detected by noticing that the agent is no longer being started by the system's service manager (like `systemd`) but by a user shell or another unexpected process.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs from all endpoints and servers where security monitoring agents (e.g., EDR, FIM, log forwarders) are deployed.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each security_agent_process_creation:
            COMPARE parent_process and environment_variables to baseline
            ALERT if parent is not 'systemd' (or expected parent) or environment is anomalous
  - question: Are common system enumeration tools like `ps`, `ls`, or `netstat` being run with `LD_PRELOAD`?
    context: |
      This is a classic defense evasion technique. An adversary uses `LD_PRELOAD` with a tool like `ps` or `ls` to hook its underlying functions and filter out results related to the adversary's processes or files, effectively hiding from an analyst performing live forensics on the box.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs on all Linux systems, especially multi-user systems and administrative bastion hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE process_name IN ('ps', 'ls', 'ss', 'netstat', 'lsof', 'top', 'find')
          AND process_environment CONTAINS 'LD_PRELOAD='
          RETURN host, user, command_line, timestamp
  - question: Is `LD_PRELOAD` being used with an enumeration tool where such usage is statistically non-existent?
    context: |
      While a developer might use `LD_PRELOAD` with a custom program, it is virtually never used with standard system utilities like `ls`. This question leverages this fact to create a high-fidelity alert based on the extreme rarity of the event. It also suggests checking for obfuscated paths via entropy analysis.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs on all Linux systems, especially multi-user systems and administrative bastion hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events with LD_PRELOAD
          WHERE process_name in enumeration_watchlist
          CALCULATE historical_frequency of LD_PRELOAD for that process_name
          ALERT if frequency < 0.001%
  - question: Do administrative shell sessions contain command sequences that are grammatically incorrect according to a model of normal behavior, specifically involving `LD_PRELOAD`?
    context: |
      This innovative approach treats shell command history like a language. Legitimate administrators have a certain 'grammar' to their commands. An adversary injecting `LD_PRELOAD=...` before a normal command like `ps aux` breaks this grammar. An NLP model can be trained to detect these ungrammatical and suspicious sequences.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - auditd logs
      - Process execution logs on all Linux systems, especially multi-user systems and administrative bastion hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT shell_session_command_history into NLP_grammar_model
          ALERT if model flags a sequence like 'LD_PRELOAD=... ps aux' as grammatically anomalous
  - question: Did a host's security logs stop shortly after a security agent was restarted on that host?
    context: |
      This question directly links a potential cause (agent restart) with a negative effect (loss of visibility). If an adversary hijacks and restarts an EDR agent, and that agent then fails to send logs, this correlation provides strong evidence that the agent has been successfully disabled or tampered with.
    answer_sources:
      - SIEM event ingestion logs
      - Zeek conn.log
      - Sysmon for Linux Event ID 1
      - Log forwarder health metrics
      - Log ingestion pipeline health dashboards, network traffic summaries from core switches, and process monitoring logs on hosts with security agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for 'log source silent' alerts
          LOOKUP process_creation_events on the same host in the previous 5 minutes
          IF security_agent_process_restart is found:
            ALERT on correlation
  - question: Has the log volume from any given host dropped to a statistically anomalous low level?
    context: |
      This provides a more general way to detect disabled agents without needing to see the restart event. Every host should have a relatively stable baseline of log output. A sustained, significant drop in this volume that isn't part of a planned outage is a strong indicator that the logging agent has been stopped or compromised.
    answer_sources:
      - SIEM event ingestion logs
      - Zeek conn.log
      - Sysmon for Linux Event ID 1
      - Log forwarder health metrics
      - Log ingestion pipeline health dashboards, network traffic summaries from core switches, and process monitoring logs on hosts with security agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each log_source:
            MONITOR 15-min rolling average of EPS
            COMPARE to historical baseline for that source
            ALERT if current_EPS < 5th_percentile for a sustained period
  - question: Is the observed log volume from a host significantly lower than the volume predicted by a forecasting model?
    context: |
      This is a more sophisticated version of the previous question. Forecasting models can account for time-of-day, day-of-week, and other seasonalities in log volume. This allows them to create a much more accurate prediction of expected volume, leading to fewer false positives and a higher chance of catching a real outage caused by a disabled agent.
    answer_sources:
      - SIEM event ingestion logs
      - Zeek conn.log
      - Sysmon for Linux Event ID 1
      - Log forwarder health metrics
      - Log ingestion pipeline health dashboards, network traffic summaries from core switches, and process monitoring logs on hosts with security agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each log_source:
            FORECAST expected_log_volume with confidence_interval using Prophet model
            COMPARE actual_log_volume to forecast
            ALERT if actual_volume is below the lower bound of the confidence_interval