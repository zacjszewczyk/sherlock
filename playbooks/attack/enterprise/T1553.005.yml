name: T1553.005: Mark-of-the-Web Bypass
id: f4a8b1c2-d3e4-4f5a-6b7c-8d9e0f1a2b3c
description: This playbook helps investigate whether an adversary has bypassed Mark-of-the-Web (MOTW) protections by using container files (e.g., ISO, VHD, ZIP, RAR). The investigation focuses on identifying the download of such container files from suspicious sources, monitoring for their subsequent mounting or extraction, and detecting the execution of potentially malicious, unsigned payloads from the new paths created by these containers. The goal is to trace the full sequence of events from network download to endpoint execution.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a downloaded container file (ISO, VHD, ZIP, etc.) associated with known malicious indicators?
  context: This question aims to identify the initial download of a potentially malicious container file by checking its hash, the source IP, and the source domain against threat intelligence feeds. A match is a strong indicator of a known threat attempting to bypass Mark-of-the-Web protections, which are not applied to files within containers.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Zeek conn.log
  - Internet gateway
  - Network egress points
  - DNS servers
  - Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search zeek_logs | where mime_type in (zip, rar, iso, octet-stream) or file_extension in (iso, img, vhd, zip, rar) | lookup threat_intel on file_hash, source_ip, server_name | where threat_match=true
- question: Has a rare or suspicious container file been downloaded from a new or low-reputation domain?
  context: This question focuses on identifying suspicious downloads that may not be in threat intelligence feeds yet. It uses rarity and reputation as proxies for maliciousness. A file hash seen for the first time, downloaded from a newly registered or poorly reputed domain, is highly suspicious, especially if downloaded by multiple hosts.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Zeek conn.log
  - Internet gateway
  - Network egress points
  - DNS servers
  - Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search container_downloads | calculate prevalence(file_hash) and domain_reputation(domain) | where file_hash_prevalence < 5th_percentile and (domain_age < 30_days or domain_reputation = low)
- question: Does the download of a container file exhibit a high-risk score based on a machine learning model?
  context: This question leverages a machine learning model to score the risk of a container file download. By combining multiple features like file size, source ASN/geolocation, domain age, filename entropy, and historical prevalence, the model can identify complex patterns of malicious activity that simpler rules might miss, providing a more nuanced detection capability.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Zeek conn.log
  - Internet gateway
  - Network egress points
  - DNS servers
  - Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream container_downloads | enrich with features (file_size, asn, geo, domain_age, reputation, etc.) | apply ml_risk_model | where risk_score > threshold
- question: Is a web browser or Microsoft Office application spawning a process to mount or extract a container file?
  context: This question seeks to identify the direct action of a user opening a downloaded container. Legitimate user activity might involve this, but it's also a key step in this attack chain. When a browser or Office application, which are common entry vectors, directly initiates the mounting or extraction of an archive, it warrants investigation as it's the precursor to executing the hidden payload.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events | where parent_process in (browsers, office_apps) and process_name in (mount_utils, archive_utils) and command_line contains (mount_keywords, extract_flags)
- question: Has an unusual or rare parent-child process relationship related to file mounting or extraction occurred?
  context: This question aims to detect anomalous behavior by focusing on the rarity of process relationships. While a user might occasionally extract a file downloaded via a browser, a program like Outlook spawning an archive utility (e.g., 7z.exe) is highly unusual and could indicate a malicious attachment being automatically or manually processed. This method finds deviations from normal user and system behavior.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events | calculate frequency(parent_process, process_name) | where pair_frequency < 1st_percentile and process_name in (mount_utils, archive_utils)
- question: Has there been an anomalous spike in disk image mounting activity for a specific host or user?
  context: This question uses time-series analysis to find unusual bursts of activity. A sudden, sharp increase in disk image mounting events for a single user or host, deviating significantly from their established baseline, could signal an automated script or an adversary deploying tools across a system, rather than normal, sporadic user activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search disk_mount_events | aggregate count by time, host, user | apply time_series_anomaly_detection | where event_count > 3_std_dev_from_baseline
- question: Has a recently downloaded container file been quickly followed by mounting/extraction and then process execution from the new path?
  context: This question correlates network and endpoint events to trace the entire attack chain in a short time window. Observing the sequence of a container download, its immediate mounting/extraction, and a subsequent process execution from the newly created location provides strong, high-fidelity evidence of a MOTW bypass attempt.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - SIEM/Data analytics platform
  - User workstations
  - Network sensors at egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: correlate network_download(container_file) with process_creation(mount_util) on same_host within 10_mins | then correlate with process_creation where image_path in new_drive/temp_dir on same_host within 2_mins
- question: Is the time between a container file download and execution from its contents suspiciously short?
  context: This question focuses on the speed of execution as an indicator of automation. A very short "Time-To-Execution" (TTE), such as a few seconds between download and execution, is more characteristic of a malicious script or macro than a human user who would typically take longer to navigate and launch a file.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - SIEM/Data analytics platform
  - User workstations
  - Network sensors at egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: join network_download_events and process_execution_events | calculate time_delta(process_start, download_end) as TTE | where TTE < 10th_percentile_of_baseline
- question: Does host activity form a graph pattern matching the known MOTW bypass attack chain?
  context: This question models system activity as a graph to identify complex relationships that define an attack. By looking for a specific subgraph pattern (e.g., external IP -> file write -> mount process -> new file write -> process execution), analysts can detect the entire attack sequence as a single, high-confidence event, even if the individual events are not suspicious on their own.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - SIEM/Data analytics platform
  - User workstations
  - Network sensors at egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: build activity_graph from endpoint_and_network_logs | search for subgraph pattern (External_IP)-[downloads]->(Container_File)-[mounted_by]->(Mount_Process)-[creates]->(Payload_File)-[executed_as]->(Payload_Process)
- question: Is an unsigned executable running from a temporary directory or a newly mounted drive?
  context: This question focuses on the final payload execution. Adversaries often place unsigned or custom-compiled executables inside containers. Executing a file that lacks a valid digital signature from a non-standard location, like a temporary folder or a newly mounted ISO/VHD drive letter, is a very strong indicator of malicious activity following a MOTW bypass.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - User workstations
  - Servers
  - Domain Controllers
  - Code signing certificate authorities
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events | where (image_path matches "temp_dir_pattern" or image_path not starts_with "C:") and (signature_status = "Unsigned" or signature_status = "Invalid")
- question: Is a process executing from a file path with unusually high entropy?
  context: This question looks for obfuscated or randomized file paths, a common tactic used by malware to evade simple signature-based detections. A legitimate software path is typically predictable and readable (e.g., C:\Program Files\App\app.exe), whereas a malicious one might be randomized (e.g., D:\asdf89h34h\run.exe). High entropy in the path suggests this type of obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - User workstations
  - Servers
  - Domain Controllers
  - Code signing certificate authorities
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events | calculate shannon_entropy(image_path) | where path_entropy > 98th_percentile_of_baseline
- question: Does a process creation event have a high anomaly score based on features like path, signature status, and parent process?
  context: This question employs an unsupervised machine learning model to find outlier process execution events without prior labeling. By feeding the model features like path entropy, parent process, execution from a temporary/removable drive, and signature status, it can learn what normal process execution looks like and flag any event that deviates significantly, catching novel or unknown threats.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - User workstations
  - Servers
  - Domain Controllers
  - Code signing certificate authorities
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream process_creation_events | featurize (path_entropy, parent, is_temp, is_unsigned, etc.) | apply isolation_forest_model | where anomaly_score is high