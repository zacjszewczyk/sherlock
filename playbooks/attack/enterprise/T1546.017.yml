name: T1546.017: Udev Rules
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses adversary actions using udev rules for persistence and privilege escalation on Linux systems. It focuses on detecting the creation or modification of udev rules that execute malicious commands. Key indicators include rule modifications containing suspicious `RUN+=` directives (e.g., reverse shells, privilege escalation commands), rules being altered by unauthorized processes (i.e., not standard package managers), and anomalous child processes being spawned by the `systemd-udevd` service, such as unauthorized interpreters or processes making outbound network connections. The playbook provides questions to investigate these activities through symbolic, statistical, and machine learning-based approaches.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are udev rule files being modified to include suspicious commands indicative of persistence?
  context: This question aims to detect adversaries embedding persistence mechanisms directly into udev rules. By monitoring for file modifications in udev directories and scanning for `RUN+=` directives that contain common reverse shell commands (`bash -i`, `nc -e`), downloaders (`curl`, `wget`), or executables in world-writable locations (`/tmp/`), analysts can identify attempts to execute malicious code when a specific device event occurs. This is a direct and high-confidence indicator of a persistence attempt.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscall=open,openat,creat)
  - File content scans (YARA)
  - Zeek files.log
  - Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.
  range: last 90 days
  queries:
  - Pseudocode: SEARCH file modification events in udev directories (`/etc/udev/rules.d/`, `/run/udev/rules.d/`). WHERE file content matches regex for suspicious `RUN+=` commands (e.g., `bash -i`, `nc -e`, `/tmp/`). ALERT on match.
- question: Do `RUN+=` commands in modified udev rules have an unusually high entropy score compared to a baseline?
  context: This question helps identify obfuscated or encoded payloads within udev rules. Legitimate commands typically have low entropy, while malicious scripts, especially when encoded (e.g., Base64), have high entropy. By calculating the Shannon entropy of commands in `RUN+=` directives and comparing them against a baseline of known-good rules, analysts can flag potentially malicious, obfuscated commands that might evade simple signature-based detection.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscall=open,openat,creat)
  - File content scans (YARA)
  - Zeek files.log
  - Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.
  range: last 90 days
  queries:
  - Pseudocode: FOR each udev rule modification, EXTRACT `RUN+=` command. CALCULATE Shannon entropy of command string. IF entropy > 95th percentile of baseline, ALERT.
- question: Are there anomalous spikes in the frequency of udev rule modifications on any host?
  context: This question uses time series analysis to detect widespread or automated persistence campaigns. In a stable environment, udev rules are modified infrequently, typically during system updates. A sudden, significant increase in the rate of these modifications across one or more hosts, deviating from the established baseline, can indicate an adversary deploying persistence at scale.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscall=open,openat,creat)
  - File content scans (YARA)
  - Zeek files.log
  - Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.
  range: last 90 days
  queries:
  - Pseudocode: MONITOR time series of udev rule modification counts per host. TRAIN anomaly detection model on 30-day baseline. ALERT on significant deviations from the expected pattern.
- question: Are udev rules being modified by processes other than approved package managers or configuration tools?
  context: This question focuses on the origin of the change. Udev rules should only be modified by trusted administrative tools like package managers (`apt`, `yum`) or configuration management systems (`ansible`, `puppet`). A modification made by any other process, such as a user shell, a script interpreter, or an unknown binary, is highly suspicious and warrants investigation as it could indicate manual tampering or malicious activity.
  answer_sources:
  - Linux auditd logs (type=SYSCALL, key=udev_mod)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Linux servers, Linux workstations, especially those managed by configuration management tools.
  range: last 90 days
  queries:
  - Pseudocode: SEARCH for file modification events in udev directories. CHECK if the initiating process name is NOT in allowlist (`dpkg`, `yum`, `ansible`, etc.). ALERT on match.
- question: Are non-admin users modifying udev rules, or are any users modifying them at a rate that deviates from their baseline?
  context: This question establishes a behavioral baseline for user activity related to udev rule modifications. Most non-administrative users should never modify these files. An alert on the first such modification by a non-admin is a strong signal. For administrators, this method can detect unusual behavior if their modification activity suddenly increases beyond their normal or their peers' established patterns, potentially indicating a compromised account.
  answer_sources:
  - Linux auditd logs (type=SYSCALL, key=udev_mod)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Linux servers, Linux workstations, especially those managed by configuration management tools.
  range: last 90 days
  queries:
  - Pseudocode: MAINTAIN a 30-day rolling count of udev modifications per user. ALERT if a non-admin user's count > 0 OR any user's count exceeds 2 standard deviations from their baseline.
- question: Can udev rule modifications be classified as 'suspicious' based on process context?
  context: This question leverages machine learning to perform a holistic assessment of the modification event. By training a model on features like the process name, parent process, user, terminal session status, and time of day, the system can learn the characteristics of benign changes (e.g., `apt` running non-interactively as root during a maintenance window) versus suspicious ones (e.g., `bash` running under a web server user account late at night).
  answer_sources:
  - Linux auditd logs (type=SYSCALL, key=udev_mod)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Linux servers, Linux workstations, especially those managed by configuration management tools.
  range: last 90 days
  queries:
  - Pseudocode: TRAIN a classification model on features (process name, user, time, etc.) from udev modification events. DEPLOY model to score new events. ALERT on events classified as 'suspicious'.
- question: Is `systemd-udevd` spawning unauthorized interpreters or processes that make outbound network connections to known malicious IPs?
  context: This question investigates the downstream effects of a potentially malicious udev rule. Since `systemd-udevd` (which runs as root) executes the commands in `RUN+=` directives, observing it spawning shells (`bash`), interpreters (`python`), or processes that immediately connect to threat-listed IPs is a critical indicator that a malicious rule has been triggered.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Linux auditd logs (type=EXECVE)
  - Zeek conn.log
  - All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.
  range: last 90 days
  queries:
  - Pseudocode: TRIGGER on process creation where parent is `systemd-udevd`. ALERT if child process is an interpreter OR if child process subsequently makes a network connection to a blocked IP.
- question: Is `systemd-udevd` spawning statistically rare child processes or processes with unusual command-line arguments?
  context: This question aims to find anomalies in the behavior of `systemd-udevd`'s child processes. Over time, a system will have a predictable set of processes that are legitimately spawned by udev events. A process that has never been seen before, or one with command-line arguments that are dissimilar to known-good arguments, is a statistical outlier that may represent the execution of a newly installed persistence mechanism.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Linux auditd logs (type=EXECVE)
  - Zeek conn.log
  - All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.
  range: last 90 days
  queries:
  - Pseudocode: BASELINE frequency of child process names spawned by `systemd-udevd`. ALERT on statistically rare process names. CALCULATE Jaccard similarity of arguments to known-good; ALERT on low similarity.
- question: Can anomalous process executions by `systemd-udevd` be detected by clustering process features?
  context: This question uses unsupervised machine learning to find anomalous `systemd-udevd` child processes without pre-existing labels. By grouping processes based on their characteristics (name, command entropy, network activity), normal, recurring executions will form dense clusters. Malicious or one-off executions will be isolated as noise or outliers, allowing analysts to discover novel threats that do not match any known pattern.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Linux auditd logs (type=EXECVE)
  - Zeek conn.log
  - All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.
  range: last 90 days
  queries:
  - Pseudocode: CLUSTER `systemd-udevd` child processes using DBSCAN on features (process name, command entropy, network connection flag). INVESTIGATE processes identified as noise/outliers.
- question: Are udev rules being modified to include explicit privilege escalation commands in `RUN+=` directives?
  context: This question looks for specific, high-confidence indicators of privilege escalation. An adversary may create a udev rule that, when triggered, uses its root-level execution privilege to perform actions like setting the SUID bit on a binary (`chmod u+s`), creating a new user, or adding a user to the sudoers file. Searching for these specific command strings within modified udev rules is a direct way to detect this technique.
  answer_sources:
  - File content scans (YARA)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs
  - All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.
  range: last 90 days
  queries:
  - Pseudocode: SEARCH content of modified udev rules. ALERT if `RUN+=` directive contains strings like `chmod u+s`, `/etc/passwd`, `NOPASSWD:`, `useradd`.
- question: Do `RUN+=` commands in modified udev rules contain rare keywords associated with privilege escalation?
  context: This question uses TF-IDF to surface suspicious commands that may not be caught by exact string matches. Common, benign commands will have low TF-IDF scores. A command that contains a term which is rare across all udev rules (high IDF) but prominent in this specific rule (high TF), especially if that term is on a watchlist (e.g., `setcap`, `usermod`), is highly anomalous and likely malicious.
  answer_sources:
  - File content scans (YARA)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs
  - All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.
  range: last 90 days
  queries:
  - Pseudocode: CALCULATE TF-IDF scores for all tokens in `RUN+=` commands across the environment. ALERT on commands containing tokens with high TF-IDF scores that are also on a privesc keyword watchlist.
- question: Can the intent of `RUN+=` commands be automatically classified as 'privilege-escalation'?
  context: This question applies advanced natural language processing to understand the purpose of a command within a udev rule. By fine-tuning a transformer model on labeled shell commands, the system can learn to differentiate between benign device setup commands and malicious privilege escalation attempts with high accuracy, enabling automated detection of novel or obfuscated attack variations.
  answer_sources:
  - File content scans (YARA)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs
  - All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.
  range: last 90 days
  queries:
  - Pseudocode: TRAIN a text classification model (e.g., DistilBERT) on labeled shell commands. DEPLOY model to classify `RUN+=` commands from new udev rules. ALERT on 'privilege-escalation' classification.
- question: Are `RUN+=` directives in modified udev rules pointing to executables in world-writable directories like /tmp or /var/tmp?
  context: This question detects a common attack pattern where an adversary places a malicious payload in a world-writable directory (like `/tmp`) and then creates a root-level trigger to execute it. Since udev rules run as root, a `RUN+=` directive pointing to `/tmp/payload` is a classic privilege escalation technique. Monitoring for this specific pattern is a high-fidelity way to catch this behavior.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (type=SYSCALL)
  - File content scans
  - All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.
  range: last 90 days
  queries:
  - Pseudocode: PARSE `RUN+=` commands from modified udev rules. USE regex to check if the executable path is in a world-writable directory (`/tmp/`, `/var/tmp/`, etc.). ALERT on match.
- question: Do executables called by `RUN+=` directives have statistically rare file permissions?
  context: This question focuses on the properties of the file being executed by the udev rule. Legitimate executables called by system services typically have strict, standard permissions. If a `RUN+=` directive points to a file that is, for example, world-writable, it is a significant anomaly. This suggests an adversary may have placed a file and made it writable so it can be easily modified, while a udev rule provides a reliable way to execute it as root.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (type=SYSCALL)
  - File content scans
  - All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.
  range: last 90 days
  queries:
  - Pseudocode: For executables in `RUN+=`, ANALYZE file permissions. BASELINE typical permission sets. ALERT if a target executable has a statistically rare permission set (e.g., world-writable).
- question: Is there a time-correlated spike between file creation in world-writable directories and udev rule modifications?
  context: This question seeks to link two distinct phases of an attack: staging the payload and setting up the execution trigger. An adversary will often first write their malicious executable to a location like `/tmp` and then, shortly after, modify a udev rule to run it. By monitoring the time series for both event types, a strong correlation with a short time lag is a powerful indicator of this attack chain.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (type=SYSCALL)
  - File content scans
  - All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.
  range: last 90 days
  queries:
  - Pseudocode: MONITOR two time series: 1) file creations in `/tmp` and 2) udev rule modifications. CALCULATE cross-correlation. ALERT on a high correlation score with a short time lag (e.g., < 5 mins).
- question: Are root processes spawned by `systemd-udevd` subsequently modifying system files, creating users, or making suspicious network connections?
  context: This question tracks the behavior of a child process after it is spawned by `systemd-udevd` with root privileges. By creating a stateful rule, analysts can link the initial process creation to subsequent high-impact, malicious activities, such as writing to `/etc/passwd`, running `useradd`, or initiating a reverse shell. This provides definitive evidence of a successful privilege escalation and persistence event.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscalls)
  - Zeek conn.log
  - All Linux hosts with root access; Network egress points for outbound traffic analysis.
  range: last 90 days
  queries:
  - Pseudocode: TRIGGER when `systemd-udevd` creates a root process. TRACK the child PID. ALERT if the child PID performs suspicious actions (writes to /etc/, runs `useradd`, connects to threat intel IP).
- question: Are root processes spawned by `systemd-udevd` exhibiting statistically improbable sequences of system calls?
  context: This question provides a deep, low-level behavioral analysis of processes executed by udev. Legitimate device setup or helper scripts will have a predictable sequence of system calls. A malicious payload, however, will have a very different sequence (e.g., `socket`, `connect`, `dup2`, `execve`). By baselining normal syscall n-grams and alerting on rare or unseen sequences, analysts can detect malicious code execution even if the code itself is novel.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscalls)
  - Zeek conn.log
  - All Linux hosts with root access; Network egress points for outbound traffic analysis.
  range: last 90 days
  queries:
  - Pseudocode: CAPTURE syscall sequences for root processes spawned by `systemd-udevd`. CONVERT sequences to n-grams. BASELINE common n-grams. ALERT on the appearance of statistically improbable n-grams.
- question: Can an Isolation Forest model detect anomalous root processes spawned by `systemd-udevd` based on their behavior?
  context: This question uses an anomaly detection algorithm well-suited for identifying outliers in high-dimensional data. By creating a feature set for each process that includes counts of file writes, network connections, child processes, and syscalls, an Isolation Forest can efficiently identify processes whose behavior patterns do not conform to the norm. This allows for the detection of suspicious activity without relying on pre-defined signatures.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscalls)
  - Zeek conn.log
  - All Linux hosts with root access; Network egress points for outbound traffic analysis.
  range: last 90 days
  queries:
  - Pseudocode: TRAIN an Isolation Forest model on behavioral features (file writes, network calls, syscalls) of legitimate root processes from `systemd-udevd`. SCORE new processes and ALERT on those identified as anomalies.