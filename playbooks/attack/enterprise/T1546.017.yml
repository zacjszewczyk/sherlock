name: T1546.017: Udev Rules
id: f8a1b2c3-d4e5-4f6a-8b9c-0d1e2f3a4b5c
description: This playbook focuses on detecting adversaries who create or modify Linux udev rules to establish persistence or escalate privileges. Udev rules are triggered by device events and can be configured to run arbitrary commands as root, making them a powerful target for attackers. The investigation involves analyzing the content of new or modified udev rules for suspicious commands, identifying unauthorized processes making these changes, and monitoring the behavior of child processes spawned by the udev service (`systemd-udevd`) for anomalous activity such as reverse shells or further system modification.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any modifications to udev rule files that include suspicious commands or paths in the `RUN+=` directive?
  context: This question aims to find udev rules that have been weaponized for persistence. Adversaries often embed commands directly into the `RUN+=` directive to execute payloads. This query looks for common malicious patterns like reverse shells (`bash -i`, `nc -e`), downloaders (`curl`, `wget`), or execution from world-writable directories (`/tmp`, `/var/tmp`), which are strong indicators of compromise.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscall=open,openat,creat)
  - File content scans (YARA)
  - Zeek files.log
  - Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path in ('/etc/udev/rules.d/*', '/run/udev/rules.d/*')
      | regex file_content matches 'RUN\s*\+=\s*".*(bash -i|nc -e|curl|wget|/tmp/|/var/tmp/|/dev/shm).*"'
      | alert
- question: Do any `RUN+=` commands in modified udev rules exhibit unusually high entropy, suggesting obfuscation?
  context: Adversaries may encode or obfuscate commands within udev rules to evade simple signature-based detections. This question uses Shannon entropy to measure the randomness of the command string. A command with significantly higher entropy than the established baseline of legitimate, known-good commands may indicate a hidden or packed payload that requires decoding and further investigation.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscall=open,openat,creat)
  - File content scans (YARA)
  - Zeek files.log
  - Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | extract_run_command
      | calculate_shannon_entropy(run_command)
      | where entropy > baseline_95th_percentile
      | alert
- question: Is there an anomalous spike in the frequency of udev rule modifications across the environment?
  context: Udev rule modifications are typically infrequent events tied to package installations or system configuration changes. A sudden, widespread increase in these modifications, especially outside of planned maintenance, could signal an automated adversary campaign deploying persistence across multiple hosts. This question uses time-series anomaly detection to identify such deviations from normal operational patterns.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscall=open,openat,creat)
  - File content scans (YARA)
  - Zeek files.log
  - Linux servers (web, database, application), Linux workstations, CI/CD pipeline servers, and container hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | time_series_aggregate count by host, time
      | apply anomaly_detection_model(count)
      | where is_anomaly=true
      | alert
- question: Are udev rules being created or modified by processes other than standard package managers or approved configuration management tools?
  context: Legitimate changes to udev rules are almost always performed by trusted utilities like `dpkg`, `yum`, `ansible`, or `puppet`. A modification initiated by an unexpected process, such as a user's shell, a script interpreter, or an unknown binary, is highly suspicious. This question focuses on verifying the parent process responsible for the change to filter out legitimate activity and pinpoint direct, unauthorized manipulation.
  answer_sources:
  - Linux auditd logs (type=SYSCALL, key=udev_mod)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Linux servers, Linux workstations, especially those managed by configuration management tools.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | where process_name not in (allowlist: 'dpkg', 'yum', 'rpm', 'apt-get', 'ansible', 'puppet', 'chef')
      | alert
- question: Are any user accounts, particularly non-administrative ones, modifying udev rules at a rate that deviates from their baseline?
  context: Most user accounts should have no reason to ever modify udev rules. This question establishes a baseline of modification activity for each user. An alert is triggered when a non-administrative user modifies a rule for the first time, or when any user's modification activity suddenly increases beyond their normal behavior. This is effective for catching privilege abuse or compromised accounts being used to establish persistence.
  answer_sources:
  - Linux auditd logs (type=SYSCALL, key=udev_mod)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Linux servers, Linux workstations, especially those managed by configuration management tools.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | group by user
      | calculate rolling_30day_count
      | where (user_is_non_admin and count > 0) or (count > user_baseline + 2*stddev)
      | alert
- question: Can machine learning classify udev rule modification events as suspicious based on contextual features like the modifying process, user, and time?
  context: This question proposes a more advanced detection method that moves beyond simple allowlists. By training a classification model on various contextual features (e.g., process name, parent process, user, terminal attachment, time of day), the system can learn to identify complex patterns of suspicious behavior that might not trigger individual rules but are collectively indicative of malicious activity.
  answer_sources:
  - Linux auditd logs (type=SYSCALL, key=udev_mod)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Linux servers, Linux workstations, especially those managed by configuration management tools.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | enrich_with_process_context
      | apply classification_model(event_features)
      | where prediction='suspicious'
      | alert
- question: Are any processes spawned by `systemd-udevd` unauthorized interpreters or initiating network connections to known malicious destinations?
  context: A malicious udev rule's `RUN+=` command will be executed as a child process of `systemd-udevd`. This question looks for the direct result of such an execution. It specifically hunts for the spawning of shells (`bash`, `python`) or network utilities, and correlates this activity with any subsequent outbound network connections to IPs on a threat intelligence blocklist, indicating a likely C2 callback.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Linux auditd logs (type=EXECVE)
  - Zeek conn.log
  - All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=process_creation_logs
      | filter parent_process_name = 'systemd-udevd'
      | join with network_connection_logs on process_id
      | where (child_process_name in ('bash', 'python', 'nc')) or (destination_ip in threat_intel_blocklist)
      | alert
- question: Are processes spawned by `systemd-udevd` statistically rare or using anomalous command-line arguments?
  context: Legitimate helper processes launched by udev are typically predictable and consistent. This question aims to find outliers by establishing a baseline of normal child process names and their command-line arguments. A process name that has never been seen before, or one launched with an unusual combination of arguments, is flagged as a potential anomaly that could be the result of a malicious udev rule.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Linux auditd logs (type=EXECVE)
  - Zeek conn.log
  - All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=process_creation_logs
      | filter parent_process_name = 'systemd-udevd'
      | where child_process_name is statistically_rare or jaccard_similarity(command_line, known_good_args) is low
      | alert
- question: Do any processes spawned by `systemd-udevd` exhibit anomalous behavior when clustered with other similar processes?
  context: This question uses unsupervised machine learning to find malicious activity without pre-defined signatures. It groups processes spawned by udev into clusters based on a wide range of behavioral features (e.g., process name, network activity, command-line entropy). Processes that do not fit into any known-good cluster are flagged as outliers, representing novel or unusual executions that warrant investigation.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Linux auditd logs (type=EXECVE)
  - Zeek conn.log
  - All Linux hosts; Network egress points and internal network sensors for Zeek data correlation.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=process_creation_logs
      | filter parent_process_name = 'systemd-udevd'
      | enrich_with_behavioral_features
      | apply clustering_model(process_features)
      | where cluster_label = 'outlier'
      | alert
- question: Are any udev rules being modified to include commands explicitly used for privilege escalation?
  context: Because udev rules execute with root privileges, adversaries can use them to directly escalate privileges. This question uses high-confidence signatures to scan `RUN+=` directives for commands that are almost exclusively used for this purpose, such as setting the SUID bit on a binary (`chmod u+s`), modifying user password files (`/etc/passwd`), or granting passwordless sudo access (`NOPASSWD:`).
  answer_sources:
  - File content scans (YARA)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs
  - All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | regex file_content matches 'RUN\s*\+=\s*".*(chmod u\+s|chmod 4755|/etc/passwd|NOPASSWD:|useradd|setcap).*"'
      | alert
- question: Do any `RUN+=` commands in modified udev rules contain rare but sensitive privilege escalation keywords?
  context: This statistical approach complements signature-based detection. It uses TF-IDF (Term Frequency-Inverse Document Frequency) to identify commands where privilege-escalation-related keywords are unusually prominent. This can help uncover novel or slightly obfuscated techniques that a simple regex might miss by flagging commands that contain rare, high-impact terms.
  answer_sources:
  - File content scans (YARA)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs
  - All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | extract_run_command_tokens
      | calculate_tfidf(tokens)
      | where token in privesc_watchlist and tfidf_score > threshold
      | alert
- question: Can a machine learning model classify the intent of `RUN+=` commands and identify those intended for privilege escalation?
  context: This question proposes using a sophisticated text classification model to understand the semantic purpose of a command embedded in a udev rule. By training a model on a large, labeled dataset of shell commands, it can learn to distinguish between benign device setup actions and malicious privilege escalation attempts, providing a more robust and adaptable detection capability.
  answer_sources:
  - File content scans (YARA)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs
  - All Linux hosts, with a focus on multi-user systems and servers hosting sensitive applications or data.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | extract_run_command
      | apply text_classification_model(run_command)
      | where prediction='privilege-escalation'
      | alert
- question: Are any udev rules being modified to execute files from world-writable directories like /tmp, /var/tmp, or /dev/shm?
  context: Executing code from a world-writable directory is a classic attack pattern. It allows a low-privileged attacker to place a malicious payload where a high-privileged process, like the root-level udev service, can be tricked into running it. This question looks for this specific, high-risk behavior by scanning `RUN+=` directives for paths pointing to these insecure locations.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (type=SYSCALL)
  - File content scans
  - All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=file_modification_logs
      | filter path contains '/udev/rules.d/'
      | regex file_content matches 'RUN\s*\+=\s*".*(/tmp/|/var/tmp/|/dev/shm/).*"'
      | alert
- question: Are any udev rules executing files that have statistically rare or insecure file permissions?
  context: This question enhances the detection of malicious executables by analyzing their file permissions. An executable called by a udev rule that is also world-writable is extremely suspicious, as it can be easily modified or replaced by an attacker. This analysis baselines typical file permissions for legitimate executables called by udev and flags any that have a rare or insecure permission set.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (type=SYSCALL)
  - File content scans
  - All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=udev_rule_logs
      | extract_executable_path
      | get_file_permissions(executable_path)
      | where permissions are statistically_rare (e.g., world-writable)
      | alert
- question: Is there a strong temporal correlation between file creation in world-writable directories and subsequent udev rule modifications?
  context: This question looks for a specific attack chain: 1) an adversary stages a payload by writing a file to a directory like `/tmp`, and 2) the adversary immediately modifies a udev rule to execute that payload. By analyzing the time series of these two distinct events, a high correlation score with a short time lag between them serves as a powerful indicator of this privilege escalation setup.
  answer_sources:
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (type=SYSCALL)
  - File content scans
  - All Linux hosts, especially multi-user systems like web servers, developer workstations, and shared servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      series1 = count(file_creations in '/tmp', '/var/tmp', '/dev/shm') by time
      series2 = count(udev_rule_modifications) by time
      calculate_cross_correlation(series1, series2)
      | where correlation_score is high and time_lag is short
      | alert
- question: Are any root processes spawned by `systemd-udevd` subsequently performing high-impact system changes or creating reverse shells?
  context: This is a behavioral detection that tracks the actions of a process after it has been launched by a udev rule with root privileges. It seeks to identify a chain of malicious events, such as the process writing to critical system files (`/etc/`), creating new users (`useradd`), or initiating an outbound network connection to a known malicious IP, confirming that the udev rule was used for malicious purposes.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscalls)
  - Zeek conn.log
  - All Linux hosts with root access; Network egress points for outbound traffic analysis.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      trigger on process_create where parent='systemd-udevd' and user='root'
      | track child_pid
      | alert if child_pid later performs: file_write to /etc/, process_create of ('useradd', 'passwd'), or network_connect to threat_intel_ip
- question: Are root processes spawned by `systemd-udevd` exhibiting statistically improbable sequences of system calls?
  context: This low-level behavioral analysis fingerprints a process by its sequence of system calls (syscalls). Legitimate helper processes have predictable syscall patterns. A malicious payload will likely have a very different and unusual sequence (e.g., involving `socket`, `connect`, `execve`). This question identifies processes with rare or unseen syscall sequences (n-grams), which can indicate malicious code execution.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscalls)
  - Zeek conn.log
  - All Linux hosts with root access; Network egress points for outbound traffic analysis.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=auditd_logs
      | filter parent_of_process is 'systemd-udevd' and user is 'root'
      | generate_syscall_ngrams(process_syscalls)
      | where ngram is not in baseline_of_common_ngrams
      | alert
- question: Can an anomaly detection model identify outlier root processes spawned by `systemd-udevd` based on their overall behavior?
  context: This question uses an unsupervised learning model (e.g., Isolation Forest) to find anomalous processes without relying on known signatures. It builds a multi-faceted profile of each process (e.g., file writes, network connections, child processes, syscalls) and flags any process whose behavior deviates significantly from the learned model of normalcy. This is highly effective at catching novel or unknown attack techniques.
  answer_sources:
  - Sysmon for Linux Event ID 1 (ProcessCreate)
  - Sysmon for Linux Event ID 3 (NetworkConnect)
  - Sysmon for Linux Event ID 11 (FileCreate)
  - Linux auditd logs (syscalls)
  - Zeek conn.log
  - All Linux hosts with root access; Network egress points for outbound traffic analysis.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      source=process_behavior_logs
      | filter parent is 'systemd-udevd' and user is 'root'
      | generate_feature_vector(behavior)
      | apply isolation_forest_model(feature_vector)
      | where score is anomalous
      | alert