name: T1505.001: SQL Stored Procedures
id: 69a3926f-080b-433e-9040-975f792404a4
description: This playbook helps determine if an adversary has established persistence using SQL stored procedures. The investigation focuses on detecting anomalous behaviors originating from the SQL Server process (sqlservr.exe), such as suspicious outbound network connections to known C2 servers or statistically rare destinations, the spawning of unusual child processes like command shells, the creation of executable files in non-standard locations, and the enabling of high-risk server configurations like 'xp_cmdshell' or 'clr enabled'.
type: technique
related:
- TA0003: Persistence
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is the SQL Server process (sqlservr.exe) making outbound network connections to known command and control (C2) servers?
  context: Adversaries may use stored procedures to initiate network connections from the database server for C2. This question aims to detect such activity by comparing outbound connections from 'sqlservr.exe' against a high-confidence threat intelligence feed. A match is a strong indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - SQL server hosts
  - Enterprise edge firewalls
  - Network sensor appliances (e.g., Zeek)
  - Threat intelligence platform feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs WHERE source_process = 'sqlservr.exe' | JOIN threat_intel_feed ON destination_ip = c2_ip OR destination_domain = c2_domain | RETURN alert
- question: Is the SQL Server process (sqlservr.exe) making outbound network connections to statistically rare destinations?
  context: C2 servers are often new or infrequently contacted endpoints. This question identifies anomalous connections by baselining normal outbound network activity for each SQL server and flagging connections to destinations (IP, domain, port) that are historically rare, suggesting a potential C2 channel.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - SQL server hosts
  - Enterprise edge firewalls
  - Network sensor appliances (e.g., Zeek)
  - Threat intelligence platform feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs WHERE source_process = 'sqlservr.exe' | CALCULATE frequency of destination_ip, destination_domain, destination_port over 90 days | FILTER frequency < 5th_percentile | RETURN alert
- question: Can we predict if an outbound network connection from the SQL Server process (sqlservr.exe) is malicious based on its characteristics?
  context: This question applies a machine learning model to proactively identify malicious connections that might not be caught by simple symbolic or statistical checks. The model uses features like connection duration, data volume, port, and threat intel matches to score the likelihood of a connection being part of a C2 channel, allowing for more nuanced detection.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - SQL server hosts
  - Enterprise edge firewalls
  - Network sensor appliances (e.g., Zeek)
  - Threat intelligence platform feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL predict_malicious_connection(features: [duration, bytes_sent, bytes_received, dest_port, ja3, cti_match]) | APPLY model to all 'sqlservr.exe' connections | FILTER probability > threshold | RETURN alert
- question: Is the SQL Server process (sqlservr.exe) spawning suspicious child processes like command shells or scripting engines?
  context: A common way for adversaries to execute commands via SQL persistence is to use stored procedures like 'xp_cmdshell' to spawn processes. This question looks for direct evidence of this by monitoring for 'sqlservr.exe' creating child processes on a watchlist of suspicious executables (e.g., cmd.exe, powershell.exe) or command lines containing indicators of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint Detection and Response (EDR) agents on SQL servers
  - Windows Security Event Logs on SQL servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE parent_process = 'sqlservr.exe' AND (child_process IN ['cmd.exe', 'powershell.exe', ...] OR command_line CONTAINS ['IEX', '-enc', ...]) | RETURN alert
- question: Is the SQL Server process (sqlservr.exe) spawning child processes that are statistically rare or have unusually complex command lines?
  context: Beyond a simple watchlist, adversaries may use living-off-the-land binaries or obfuscated commands. This question aims to detect such evasive behavior by baselining normal child process activity from 'sqlservr.exe' and alerting on first-seen processes or those with high-entropy command lines, which often indicate obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint Detection and Response (EDR) agents on SQL servers
  - Windows Security Event Logs on SQL servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE parent_process = 'sqlservr.exe' | BASELINE child_process_names and command_line_entropy | ALERT on new process name OR command_line_entropy > 95th_percentile | RETURN alert
- question: Can we use an anomaly detection model to identify unusual child processes spawned by the SQL Server process (sqlservr.exe)?
  context: This question uses a machine learning approach to build a model of what constitutes "normal" child process behavior for 'sqlservr.exe'. The model can then identify any new process creation events that deviate significantly from this learned baseline, flagging them as potential outliers for investigation, even if they don't match a predefined rule.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint Detection and Response (EDR) agents on SQL servers
  - Windows Security Event Logs on SQL servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL detect_anomalous_child_process(features: [process_name, cmd_line_length, ...]) | APPLY model to all 'sqlservr.exe' child processes | FILTER anomaly_score > threshold | RETURN alert
- question: Is the SQL Server process (sqlservr.exe) making outbound network connections to countries not associated with normal business operations?
  context: Adversaries often host C2 infrastructure in countries outside of an organization's typical geographic footprint. This question leverages geolocation data to identify connections from 'sqlservr.exe' to unexpected or disallowed countries, which can be a strong indicator of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Network sensor appliances (e.g., Zeek)
  - SQL server hosts
  - Internal DNS server logs
  - Geolocation intelligence feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs WHERE source_process = 'sqlservr.exe' | ENRICH destination_ip with geolocation | FILTER destination_country NOT IN business_country_allowlist | RETURN alert
- question: Are outbound network connections from the SQL Server process (sqlservr.exe) exhibiting statistically anomalous data volumes or durations?
  context: C2 communication or data exfiltration can manifest as connections that are unusually long or involve transferring an abnormal amount of data. This question establishes a baseline for these metrics for each SQL server and alerts when a new connection significantly deviates from the norm (e.g., exceeds 3 standard deviations), pointing to potential C2 or exfil.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Network sensor appliances (e.g., Zeek)
  - SQL server hosts
  - Internal DNS server logs
  - Geolocation intelligence feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs WHERE source_process = 'sqlservr.exe' | BASELINE connection metrics (bytes_sent, duration) over 30 days | ALERT if new connection metric > (mean + 3*stddev) | RETURN alert
- question: Does the daily volume of outbound network traffic from the SQL Server process (sqlservr.exe) deviate from forecasted expectations?
  context: This question uses time-series forecasting to model the expected daily patterns of outbound network activity from 'sqlservr.exe'. By comparing actual daily traffic volume and unique destinations against the model's forecast, it can detect significant anomalies that might indicate a large-scale data exfiltration event or a widespread C2 campaign.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 5156
  - Network sensor appliances (e.g., Zeek)
  - SQL server hosts
  - Internal DNS server logs
  - Geolocation intelligence feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL forecast_daily_traffic(features: [time_series_data]) | APPLY model to daily 'sqlservr.exe' traffic | FILTER actual_volume > forecast_confidence_interval | RETURN alert
- question: Is the SQL Server process (sqlservr.exe) creating potentially executable files in non-standard directories?
  context: Adversaries may use the SQL Server process to write malicious tools or payloads to disk for later execution. This question specifically looks for 'sqlservr.exe' creating files with executable extensions (e.g., .exe, .dll, .ps1) in locations outside of the expected database, log, or backup paths, which is highly suspicious behavior.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - EDR File Creation Logs
  - File systems of SQL servers, particularly temporary directories (e.g., C:\Windows\Temp) and user profile paths
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_creation_logs WHERE process = 'sqlservr.exe' AND file_extension IN ['.exe', '.dll', '.ps1', ...] AND file_path NOT IN standard_sql_paths | RETURN alert
- question: Is the SQL Server process (sqlservr.exe) creating files with high-entropy or statistically unusual filenames?
  context: To evade simple signature-based detection, adversaries often use randomized filenames for their payloads. This question analyzes the filenames of files created by 'sqlservr.exe' and alerts when the filename's entropy (a measure of randomness) is unusually high, suggesting a potentially malicious, auto-generated name.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - EDR File Creation Logs
  - File systems of SQL servers, particularly temporary directories (e.g., C:\Windows\Temp) and user profile paths
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_creation_logs WHERE process = 'sqlservr.exe' | CALCULATE shannon_entropy of filename | BASELINE normal filename entropy | ALERT if entropy > 95th_percentile | RETURN alert
- question: Can we use a machine learning model to classify file creation events by the SQL Server process (sqlservr.exe) as benign or suspicious?
  context: This question uses a classification model to evaluate multiple features of a file creation event—such as the file path, extension, and filename characteristics—to make a holistic judgment on whether the activity is suspicious. This approach can detect novel or complex attacker techniques that might bypass simpler rules.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - EDR File Creation Logs
  - File systems of SQL servers, particularly temporary directories (e.g., C:\Windows\Temp) and user profile paths
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL classify_file_creation(features: [path_depth, parent_dir, extension, entropy]) | APPLY model to all 'sqlservr.exe' file creations | FILTER prediction = 'suspicious' | RETURN alert
- question: Has a high-risk SQL Server configuration option, such as 'xp_cmdshell' or 'clr enabled', been enabled?
  context: Options like 'xp_cmdshell' allow the database to execute operating system commands, providing a powerful persistence and execution vector for adversaries. This question provides a high-fidelity alert by directly monitoring for the enabling of these specific, high-risk configurations and correlating the change with authorized change requests.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - SQL Server Audit Logs
  - Windows Registry on SQL Servers
  - SQL Server's internal audit logging system
  - Change management ticket database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_logs WHERE registry_key IN ['...\\xp_cmdshell', '...\\clr enabled'] AND value = 1 | CORRELATE timestamp with change_management_db | IF no_match THEN RETURN alert
- question: Is there a statistically unusual number of configuration changes occurring on a SQL server?
  context: While a single configuration change might be missed, an adversary reconfiguring a server for their use may perform a series of changes. This question detects such activity by baselining the normal frequency of configuration changes and alerting on any day where the number of changes is anomalously high.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - SQL Server Audit Logs
  - Windows Registry on SQL Servers
  - SQL Server's internal audit logging system
  - Change management ticket database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH config_change_logs | COUNT changes per day per host | BASELINE daily change frequency | ALERT if daily_count > (mean + 3*stddev) | RETURN alert
- question: Can we predict if a SQL Server configuration change is unauthorized based on contextual factors?
  context: This question leverages a machine learning model to determine the likelihood that a configuration change is unauthorized. By considering factors like the user who made the change, the time of day, and whether it aligns with a scheduled maintenance window, the model can identify suspicious changes that might otherwise appear legitimate.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - SQL Server Audit Logs
  - Windows Registry on SQL Servers
  - SQL Server's internal audit logging system
  - Change management ticket database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL predict_unauthorized_change(features: [config_item, user, time_of_day, is_maintenance_window]) | APPLY model to all config changes | FILTER probability > threshold | RETURN alert