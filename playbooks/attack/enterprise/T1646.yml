name: T1646: Exfiltration Over C2 Channel
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is exfiltrating data from mobile devices over an established command and control (C2) channel. It focuses on identifying anomalous data volumes or connection durations, unusual HTTP/S request patterns (such as high POST-to-GET ratios), and signs of custom encryption or compression in network traffic payloads. Evidence is gathered by analyzing network logs for connections to low-reputation destinations, transfers of archived file types, and traffic flows exhibiting high Shannon entropy.
type: technique
related:
- TA0036: Exfiltration
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are mobile devices connecting to known C2 infrastructure or exfiltrating large data volumes in a single session?
  context: This question aims to identify two high-confidence indicators of data exfiltration. First, it checks for any communication from mobile devices to destinations listed on C2 threat intelligence feeds, which strongly suggests a compromise. It further refines this by correlating with TLS fingerprints (JA3 hashes) known to be used by malware. Second, it looks for anomalously large single-session data transfers, a common tactic for bulk data exfiltration, by applying a static threshold.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network gateways for corporate Wi-Fi, VPN concentrators, Cloud Access Security Broker (CASB) egress points, and other network egress points monitoring mobile device traffic.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        SEARCH Zeek:conn_log AND Zeek:ssl_log
        WHERE source_ip IN mobile_ip_range
        AND (destination_ip IN c2_threat_feed OR ja3_hash IN malicious_ja3_list)
  - search:
      technology: pseudocode
      query: |
        SEARCH Zeek:conn_log
        WHERE source_ip IN mobile_ip_range
        AND outbound_bytes > 25000000
- question: Is any mobile device exhibiting a statistically significant anomaly in data volume or connection duration to a specific destination compared to its own baseline?
  context: This question focuses on detecting deviations from normal behavior on a per-device, per-destination basis. Instead of using a single static threshold for all devices, it establishes a historical baseline of communication patterns (data volume and connection duration) for each device. An alert is triggered when a new connection exceeds the 99th percentile of this baseline, indicating a rare and potentially malicious event like data staging or exfiltration that is abnormal for that specific communication channel.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network gateways for corporate Wi-Fi, VPN concentrators, Cloud Access Security Broker (CASB) egress points, and other network egress points monitoring mobile device traffic.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        FOR EACH source_ip, destination_ip PAIR:
          BASELINE = calculate_99th_percentile(outbound_bytes, duration) over last 30 days
        SEARCH Zeek:conn_log
        WHERE (connection.outbound_bytes > BASELINE.outbound_bytes OR connection.duration > BASELINE.duration)
- question: Does the total daily data volume sent from a mobile device to a destination exceed the amount predicted by a time series forecasting model?
  context: This question uses advanced modeling to detect subtle, long-term exfiltration. A time series model learns the rhythm and seasonality of data transfers between a device and a destination. By alerting when the actual daily data volume exceeds the model's prediction (specifically, the upper bound of the 95% confidence interval), this method can catch 'low-and-slow' exfiltration that might not trigger single-session or simple percentile-based alerts. It identifies statistically significant deviations from a device's established daily communication patterns.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network gateways for corporate Wi-Fi, VPN concentrators, Cloud Access Security Broker (CASB) egress points, and other network egress points monitoring mobile device traffic.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        FOR EACH source_ip, destination_ip PAIR:
          MODEL = train_timeseries_model(daily_sum(outbound_bytes)) on 90-day history
          PREDICTION = MODEL.predict(today)
        SEARCH aggregated_daily_logs
        WHERE daily_sum(outbound_bytes) > PREDICTION.confidence_interval_upper_bound
- question: Are mobile devices sending large HTTP POST/PUT requests to suspicious domains or using malicious indicators in their web traffic?
  context: This question seeks to identify exfiltration disguised as web traffic. It starts by finding devices looking up suspicious domains (known C2 or algorithmically generated). It then checks if those devices are sending large amounts of data (via POST/PUT requests) to those domains. The query is further strengthened by looking for other indicators of compromise, such as User-Agent strings associated with malware or generic Content-Types used to mask the true nature of the uploaded data.
  answer_sources:
  - Zeek http.log
  - Zeek dns.log
  - Internet-facing web proxies, DNS resolvers used by mobile devices, and Unified Endpoint Management (UEM) proxy logs.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        SEARCH Zeek:dns_log
        WHERE source_ip IN mobile_ip_range
        AND (domain IN c2_blocklist OR entropy(domain) > high_threshold)
        CORRELATE source_ip with Zeek:http_log
        WHERE http.method IN ["POST", "PUT"]
        AND (http.request_body_len > 1000000 OR http.user_agent IN malicious_ua_list OR http.content_type = "application/octet-stream")
- question: Is a mobile device exhibiting an abnormally high ratio of data uploads (POST) versus downloads (GET) or sending unusually large POST requests to a specific web server?
  context: This question identifies exfiltration by analyzing the balance of web requests. Normal web browsing involves many GET requests and few POST requests. A high POST-to-GET ratio (e.g., more than 10 uploads for every download) is highly anomalous and suggests data is being sent out, not consumed. This is combined with a check for POST request sizes that are statistically larger than the historical average for that device-destination pair, allowing detection of exfiltration that hides within otherwise normal-looking web traffic.
  answer_sources:
  - Zeek http.log
  - Zeek dns.log
  - Internet-facing web proxies, DNS resolvers used by mobile devices, and Unified Endpoint Management (UEM) proxy logs.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        FOR EACH source_ip, destination_host PAIR:
          BASELINE_RATIO = calculate_baseline(count(POST)/count(GET)) over 30 days
          BASELINE_SIZE = calculate_baseline_avg_stddev(request_body_len) over 30 days
        SEARCH aggregated_daily_http_logs
        WHERE (daily_post_get_ratio > 10 OR daily_avg(request_body_len) > BASELINE_SIZE.avg + 3 * BASELINE_SIZE.stddev)
- question: Can we identify groups of anomalous HTTP sessions that deviate significantly from normal mobile web traffic patterns?
  context: This question uses machine learning to find the "unknown unknowns." By grouping all HTTP sessions based on multiple features (like size ratios, method ratios, and string randomness), an unsupervised clustering algorithm can automatically identify small groups of sessions that behave differently from the vast majority. These outlier clusters represent novel or evasive behaviors that do not match pre-defined rules or signatures, making this an effective method for discovering new exfiltration techniques.
  answer_sources:
  - Zeek http.log
  - Zeek dns.log
  - Internet-facing web proxies, DNS resolvers used by mobile devices, and Unified Endpoint Management (UEM) proxy logs.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        AGGREGATE http_log data by hour for each source-destination pair
        ENGINEER features: req/resp size ratio, POST/GET ratio, user-agent entropy, URI entropy, Content-Type distribution
        APPLY clustering algorithm (DBSCAN) to feature set
        INVESTIGATE sessions in outlier clusters
- question: Are mobile devices transferring archived files (ZIP, RAR) over unencrypted channels to non-approved destinations?
  context: This question looks for a straightforward exfiltration method: bundling data into an archive and sending it over a simple, unencrypted protocol. The presence of archive file types (like ZIP or RAR) in network traffic is a strong indicator that data has been collected and staged for exfiltration. By checking if these files are being sent to destinations that are not approved corporate services (e.g., sanctioned file sharing platforms), this query can effectively identify policy violations and potential data theft.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - PCAP
  - Network TAPs capturing traffic from mobile subnets, Virtual Private Cloud (VPC) traffic mirroring, and Wi-Fi access points configured for full packet capture.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        SEARCH Zeek:files_log
        WHERE file.source IN ["HTTP", "FTP"]
        AND file.mime_type IN ["application/zip", "application/x-rar-compressed"]
        CORRELATE conn_uid with Zeek:conn_log
        WHERE conn.source_ip IN mobile_ip_range
        AND conn.destination_ip NOT IN approved_cloud_service_list
- question: Is there unencrypted traffic from mobile devices that appears to be compressed or custom-encrypted, suggesting hidden data exfiltration?
  context: This question aims to find exfiltration hidden in plain sight. Attackers may avoid standard TLS encryption to evade certain network inspections but will still encrypt or compress the stolen data to obfuscate it. This results in traffic with high entropy (high randomness). By calculating the Shannon entropy of unencrypted flows and alerting when it surpasses a threshold typical of compressed or encrypted data (e.g., >7.5), this method can detect custom C2 protocols or data exfiltration that isn't using standard SSL/TLS.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - PCAP
  - Network TAPs capturing traffic from mobile subnets, Virtual Private Cloud (VPC) traffic mirroring, and Wi-Fi access points configured for full packet capture.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        FOR unencrypted flows from mobile_ip_range to non-allowlisted destinations:
          CALCULATE Shannon entropy of payload
          IF entropy > 7.5:
            ALERT
- question: Can a machine learning model, trained on various network features, automatically classify live network flows as potential exfiltration?
  context: This question proposes a comprehensive, supervised machine learning approach for detection. By training a classification model on a wide array of features—including connection metadata, payload entropy, and threat intelligence lookups—the system can learn the subtle, combined characteristics of malicious exfiltration traffic. Once deployed, this model can analyze live traffic and generate high-confidence alerts, effectively automating the detection of complex exfiltration patterns that might be missed by individual rules or simpler analytics.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - PCAP
  - Network TAPs capturing traffic from mobile subnets, Virtual Private Cloud (VPC) traffic mirroring, and Wi-Fi access points configured for full packet capture.
  range: last 90 days
  queries:
  - search:
      technology: pseudocode
      query: |
        MODEL = train_classifier(features=[entropy, protocol, port, duration, bytes, etc.]) on labeled benign/malicious flows
        FOR each new network flow:
          PREDICTION = MODEL.predict(flow_features)
          IF PREDICTION == "potential exfiltration":
            ALERT