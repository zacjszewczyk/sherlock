name: T1106: Native API
id: a1f9e8d2-5c7a-4b0f-8d6e-3c4a5b6c7d8e
description: This playbook helps investigate whether an adversary is using native operating system APIs to execute malicious code. This technique involves several key indicators: the execution of files with hashes matching known malware; the abuse of legitimate system binaries (LOLBAS) with suspicious command-line arguments; unusual process-to-process memory access requests, particularly against critical processes like lsass.exe; anomalous parent-child process relationships, such as an Office application spawning a command shell; and processes running from unusual locations that initiate suspicious network connections.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are processes being created or modules loaded with file hashes matching known malicious indicators?
  context: This question aims to detect the most straightforward indicator of compromise: the execution of a file that is already known to be malicious. By continuously comparing the hashes of all newly created processes and loaded modules against a curated threat intelligence feed, security teams can achieve rapid, high-confidence detection of known threats. An alert from this check signifies a definite security event that requires immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process creation or module load event, GET file_hash. IF file_hash IN known_malicious_hashes_database, THEN ALERT.
- question: Are there any newly executed files that are extremely rare within the environment?
  context: This question helps uncover potentially malicious files that are not yet present in threat intelligence feeds. Adversaries often use custom or newly compiled malware that will have a very low prevalence across an organization. By identifying file hashes that appear on a small number of hosts, analysts can focus on novel tools and initial points of compromise. This is particularly useful when a common process like 'winword.exe' spawns a process with a rare hash.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: FOR each file_hash, COUNT distinct hosts over 30 days. IF host_count < threshold (e.g., 5), THEN FLAG for investigation.
- question: Can we predict if a new, unknown file hash is malicious based on its characteristics?
  context: This question addresses the challenge of zero-day or completely unknown malware. When a file hash is not found in threat intelligence and is not rare enough to be flagged by prevalence analysis, a machine learning model can provide a reputation score. The model, trained on features from static and dynamic analysis of thousands of benign and malicious files, can identify suspicious characteristics in new files, allowing analysts to prioritize investigation on high-risk, unknown executables.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each new file_hash, APPLY pre-trained reputation_model. IF score > high_risk_threshold, THEN ALERT.
- question: Are legitimate system binaries (LOLBAS) being executed with command-line arguments matching known malicious patterns?
  context: This question seeks to identify the abuse of trusted system utilities, a common 'living-off-the-land' technique. Adversaries use binaries like 'rundll32.exe' or 'regsvr32.exe' with specific command-line flags to execute malicious code or scripts. By searching for these known malicious patterns (e.g., using 'javascript:' protocol handler, remote script execution via '/i:http...'), analysts can detect this technique with high precision.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM process creation logs, FILTER for LOLBAS processes. APPLY regex for known malicious patterns to command_line. IF match, THEN ALERT.
- question: Are there any LOLBAS executions with unusually long or complex command-line arguments?
  context: This question is designed to detect obfuscated commands passed to LOLBAS. Adversaries often encode or obfuscate their payloads to evade simple signature-based detection, resulting in command-line arguments that are significantly longer or have higher entropy (randomness) than normal. By baselining the typical length and entropy for each LOLBAS and flagging significant deviations, analysts can uncover potentially malicious, obfuscated activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each LOLBAS process, CALCULATE length and entropy of command_line. IF length or entropy > baseline_threshold (e.g., 95th percentile), THEN FLAG for investigation.
- question: Are there LOLBAS executions with command-line arguments that are novel or outliers compared to established benign usage clusters?
  context: This question aims to identify new or rare LOLBAS abuse patterns that don't match known signatures or simple statistical outliers. By using a clustering algorithm, we can group all historical command-line arguments for a specific LOLBAS into 'normal' usage profiles. Any new execution that does not fit well into an existing cluster (i.e., is flagged as noise or an outlier) represents a deviation from established behavior and is a strong candidate for malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each LOLBAS, TOKENIZE and CLUSTER historical command_lines. FOR new command_line, IF classified as outlier/noise by cluster model, THEN ALERT.
- question: Is a non-standard process attempting to gain high-risk access to a critical system process like lsass.exe?
  context: This question targets a common credential dumping technique where an adversary's tool attempts to access the memory of the Local Security Authority Subsystem Service (lsass.exe). A rule can be created to specifically look for non-debugging or non-security processes (like Word or PowerShell) requesting dangerous access rights (like PROCESS_ALL_ACCESS) to critical processes. A match is a very strong indicator of credential theft in progress.
  answer_sources:
  - Sysmon Event ID 10
  - All Windows endpoints and servers, with a focus on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM process access logs, IF source_process is not 'approved_debugger' AND target_process is 'lsass.exe' AND access_rights are 'high_risk', THEN ALERT.
- question: Are there rare or previously unseen process-to-process access events occurring?
  context: This question helps to find anomalous process interactions beyond a predefined list of suspicious behaviors. By tracking all process access events (source process, target process, and access rights granted) over time, a baseline of normal activity can be established. Any new event that represents a very rare combination is flagged. This can uncover novel attack techniques, such as a compromised application attempting to inject code into another process for the first time.
  answer_sources:
  - Sysmon Event ID 10
  - All Windows endpoints and servers, with a focus on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: MAINTAIN frequency table of (SourceImage, TargetImage, GrantedAccess) tuples. FOR new event, CALCULATE rarity_score. IF score > threshold, THEN ALERT.
- question: Can we detect anomalous process interactions using a graph-based model of system behavior?
  context: This question takes a holistic view of process interactions, modeling the entire system as a graph. This allows for the detection of anomalies not just in individual interactions, but in the context of the overall system state. A machine learning model can learn what 'normal' system-wide behavior looks like. It can then flag interactions that, while perhaps not rare in isolation, are anomalous given the current state of the graph (e.g., a process that normally only receives handles starting to request them), indicating a potential compromise.
  answer_sources:
  - Sysmon Event ID 10
  - All Windows endpoints and servers, with a focus on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL process interactions as a graph. USE graph anomaly detection model to learn embeddings. IF new interaction (edge) is flagged as anomalous by model, THEN ALERT.
- question: Is an office application, browser, or system service spawning a command-line interpreter?
  context: This question looks for classic, high-confidence indicators of compromise where a process spawns a child process it has no legitimate reason to. For example, Microsoft Word ('winword.exe') should not be launching PowerShell. Maintaining a denylist of these illogical or forbidden parent-child relationships allows for quick detection of initial code execution following a successful phishing attack or exploit.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM process creation logs, IF (parent_process, child_process) pair IN denylist (e.g., 'winword.exe', 'powershell.exe'), THEN ALERT.
- question: Are there any process creation events that represent a very rare parent-child relationship in the environment?
  context: This question extends beyond a static denylist to find any unusual parent-child relationship, even those not previously identified as malicious. By baselining all parent-child process creations across the enterprise, any new pair that is statistically rare can be flagged for review. This is effective for discovering new or custom attacker tools that create process chains never before seen in the organization.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MAINTAIN probability distribution of all (parent_process, child_process) pairs. IF probability of new pair < rarity_threshold, THEN ALERT.
- question: Can a machine learning model identify suspicious process creation events based on a combination of features?
  context: This question uses a more sophisticated approach to identify malicious process creation. Instead of just looking at the parent-child pair, a model like an Isolation Forest can consider multiple features at once: the parent's file path, the user context, the complexity of the child's command line, and more. This allows it to detect subtle anomalies that rule-based or simple statistical methods might miss, such as a legitimate parent-child pair being executed from an unusual directory or with a suspicious command.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process creation event, EXTRACT features (parent_path, user_context, child_cmd_entropy, etc.). APPLY anomaly detection model (e.g., Isolation Forest). IF anomaly_score is high, THEN ALERT.
- question: Is a process running from a temporary or user-writable directory making network connections to a known-bad destination?
  context: This question combines two strong indicators of malicious activity. Malware is often dropped into temporary or user-specific directories (like AppData). When a process from one of these locations immediately makes a network connection to an IP or domain on a threat intelligence blocklist, it is highly likely to be malware calling home or downloading a second stage. Correlating process creation and network events within a short time window provides a high-fidelity alert.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - User workstations, web-facing servers, and network egress points instrumented with Zeek.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE process creation (Sysmon 1) with network connections (Sysmon 3, Zeek) within 60s. IF process_path is 'user_writable' AND destination_ip IN blocklist, THEN ALERT.
- question: Is a process with a high-entropy (randomized) file path connecting to a rarely seen domain?
  context: This question is designed to detect malware that uses randomization to evade detection. Adversaries may use randomly generated filenames (leading to high entropy paths) to avoid static blocklists. They may also use newly registered domains for command and control. By combining these two statistical anomalies—a high-entropy path and a low-prevalence domain—analysts can effectively hunt for this type of evasive malware.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - User workstations, web-facing servers, and network egress points instrumented with Zeek.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR new process, CALCULATE entropy of image_path. IF entropy > threshold, GET network destinations. CALCULATE prevalence of destination_domain. IF domain_prevalence is very low, THEN ALERT.
- question: Does a process exhibit anomalous network and file I/O patterns over time, such as C2 beaconing or ransomware activity?
  context: This question moves beyond one-time events to analyze process behavior over time. A time-series model can be trained to recognize the 'normal' rhythm of network and file activity for different applications. It can then detect deviations that are characteristic of malware, such as the periodic, low-and-slow network 'heartbeat' of a command-and-control beacon, or the sudden, high-volume burst of file writes associated with a ransomware attack.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - User workstations, web-facing servers, and network egress points instrumented with Zeek.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL network/file I/O rates per process over time. IF new pattern deviates from learned benign profiles (e.g., matches C2 beacon or ransomware profile), THEN ALERT.