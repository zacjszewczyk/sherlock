name: T1106: Native API
id: d4b8f0a0-62c5-4d7e-8c9a-1f2b3c4d5e6f
description: This playbook helps determine if an adversary is using native OS APIs to execute malicious code. It focuses on identifying malicious activity by analyzing process and module load events for known bad file hashes, detecting abuse of legitimate system binaries (LOLBAS) through suspicious command-line arguments, monitoring for high-risk process handle requests between uncommon process pairs, flagging anomalous parent-child process relationships (e.g., Office apps spawning command shells), and identifying newly created processes from unusual locations that initiate network connections to rare external destinations.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are file hashes from process creation or module load events matching known malicious hashes in our threat intelligence feeds?
    context: This question aims to detect known malware by continuously comparing file hashes from all new processes and loaded modules against a threat intelligence database. A match is a high-confidence indicator of compromise and should be treated as a high-priority alert, as it signifies that a file with a confirmed malicious signature is active on a system.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_logs, module_load_logs | JOIN file_hash with threat_intel_hashes | WHERE match_found
  - question: Are there any process hashes that are unusually rare across the enterprise?
    context: This question helps uncover novel or targeted malware not yet present in threat intelligence feeds. By calculating the prevalence of every file hash across all hosts over a 30-day window, analysts can identify executables or modules that are running on a very small number of systems. Such rarity is a strong indicator of a potential targeted attack or early-stage infection and warrants deeper investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_logs, module_load_logs in last 30 days | GROUP BY file_hash, COUNT(distinct host) as host_count | WHERE host_count < 5
  - question: Can we use a machine learning model to score the reputation of new, unknown file hashes?
    context: When a file hash is not found in any threat intelligence or internal prevalence databases, this question addresses the need to assess its risk. A machine learning model, pre-trained on the features of known benign and malicious files, can assign a reputation score to these unknown hashes. This allows security operations to prioritize the investigation of potentially malicious files that would otherwise go unnoticed.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - All Windows endpoints and servers, particularly those with EDR agents capable of file hashing and process monitoring.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: STREAM process_creation_logs, module_load_logs | WHERE file_hash is unknown | APPLY ML_model(file_hash) as reputation_score | WHERE reputation_score > threshold
  - question: Are legitimate system binaries (LOLBAS) being executed with command-line arguments indicative of malicious activity?
    context: Adversaries often abuse legitimate system tools (Living-Off-the-Land Binaries and Scripts, or LOLBAS) to evade detection. This question focuses on finding this abuse by searching process creation logs for known malicious patterns in command-line arguments, such as encoded commands or network-based script execution. A match indicates a high likelihood that a trusted system utility is being used for malicious purposes.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_logs | FILTER process_name in LOLBAS_list | APPLY REGEX to command_line for malicious_patterns
  - question: Are there any LOLBAS executions with unusually long or complex command-line arguments?
    context: To hide their activity, adversaries often obfuscate commands passed to LOLBAS. This question seeks to detect such obfuscation by analyzing the statistical properties of command-line arguments. By establishing a baseline for normal argument length and entropy (randomness) for each LOLBAS, analysts can flag executions that significantly deviate from this norm, which may indicate encoded or packed malicious scripts.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_logs | FILTER process_name in LOLBAS_list | CALCULATE entropy(command_line), length(command_line) | WHERE entropy > baseline_95th_percentile OR length > baseline_95th_percentile
  - question: Are there any LOLBAS executions with command-line arguments that are statistical outliers compared to normal usage?
    context: This question aims to identify novel or rare LOLBAS abuse patterns that rule-based or simple statistical methods might miss. By using a clustering algorithm to group all historical command-line arguments for a given LOLBAS, we can define what constitutes 'normal' usage. Any new execution whose arguments do not fit into an established cluster is flagged as an outlier, representing a potentially new or unique attack technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, application servers, and domain controllers where common Living-Off-the-Land Binaries and Scripts (LOLBAS) are present.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: STREAM process_creation_logs | FILTER process_name in LOLBAS_list | APPLY clustering_model(command_line_tokens) | ALERT on outliers/noise
  - question: Is a non-standard process attempting to access a critical system process with high-risk permissions?
    context: This question is designed to detect credential theft and process injection techniques, such as an attacker's tool attempting to read memory from `lsass.exe`. By creating a rule that alerts when a non-debugging, non-security process (like an Office application) requests powerful access rights (like `PROCESS_ALL_ACCESS`) to a critical system process, we can catch blatant attempts to compromise system integrity.
    answer_sources:
      - Sysmon Event ID 10
      - All Windows endpoints and servers, with a focus on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_access_events | WHERE TargetImage in critical_process_list AND SourceImage not in approved_process_list AND GrantedAccess has high_risk_flags
  - question: Are there any rare or never-before-seen process-to-process access events occurring?
    context: To detect more subtle or novel process interaction attacks, this question focuses on identifying statistical rarity. By building a frequency table of all source process, target process, and access rights combinations over a 30-day period, we can identify new interactions that are extremely uncommon. Alerting on the rarest interactions helps surface anomalous behavior that may represent a new tool or technique used by an adversary.
    answer_sources:
      - Sysmon Event ID 10
      - All Windows endpoints and servers, with a focus on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_access_events in last 30 days | CALCULATE frequency(SourceImage, TargetImage, GrantedAccess) | SCORE new events based on inverse frequency | ALERT on scores > threshold
  - question: Is a machine learning model detecting anomalous process interaction behavior?
    context: This question uses a sophisticated graph-based approach to model the complex web of process interactions. By representing processes as nodes and handle requests as edges in a graph, a machine learning model can learn the normal patterns of system behavior. The model can then identify and alert on new interactions (edges) that are anomalous within the context of the entire graph, catching suspicious behavior that might appear benign in isolation.
    answer_sources:
      - Sysmon Event ID 10
      - All Windows endpoints and servers, with a focus on on high-value assets such as Domain Controllers (for lsass.exe access) and developer workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: STREAM process_access_events | BUILD process_interaction_graph | APPLY graph_anomaly_detection_model | ALERT on anomalous edges
  - question: Is a typically non-interactive process, like an Office application or system service, spawning a command-line interpreter?
    context: This question targets a common attack vector where adversaries use a compromised application to launch a shell for further execution. By maintaining a denylist of highly suspicious parent-child process relationships (e.g., `winword.exe` spawning `cmd.exe`), security teams can generate high-severity alerts on activities that are almost always malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_events | WHERE (ParentImage, Image) in malicious_pair_denylist
  - question: Are there any statistically rare parent-child process relationships occurring in the environment?
    context: To detect unknown or novel malicious parent-child process relationships, this question focuses on rarity. By analyzing historical process logs to build a probability distribution of all parent-child pairs, we can identify and alert on new process creations that represent a very infrequent pairing. This approach helps find suspicious activity that isn't on a predefined denylist.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH historical_process_logs | CALCULATE probability(ParentImage, Image) | ALERT on new events where probability < threshold
  - question: Is a machine learning model flagging any process creation events as anomalous?
    context: This question uses a machine learning classifier to provide a more holistic assessment of process creation events. The model considers a variety of features (e.g., parent path, user context, child command-line entropy) to score each event for its likelihood of being an anomaly. This enables the detection of sophisticated attacks that might evade simpler rule-based or statistical checks by blending in with normal activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations (for Office/browser parents), critical servers (for service parents), and mail servers (for email client parents).
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: STREAM process_creation_events | EXTRACT features(ParentImage, Image, command_line) | APPLY anomaly_detection_model | ALERT on high anomaly scores
  - question: Is a process created from a temporary or user-writable directory connecting to a known-bad IP or domain?
    context: This question helps detect the execution of a malicious payload dropped onto a system. It correlates process creation events from suspicious locations (like `C:\Users\*\AppData`) with subsequent network connections made by that process. If the process connects to a destination on a threat intelligence blocklist within a short time window (e.g., 60 seconds), it's a strong signal of a malware infection.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations, web-facing servers, and network egress points instrumented with Zeek.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: CORRELATE process_creation_events with network_connection_events by ProcessGUID within 60s | WHERE process_path is user_writable AND destination_ip in blocklist
  - question: Is a process with a high-entropy (randomized) file path connecting to a very rare external domain?
    context: Adversaries often use randomized file paths to evade signature-based detection. This question combines two indicators: a process path with high entropy (suggesting randomization) and a network connection to a domain with very low prevalence (suggesting a new C2 server). The combination of these two statistical anomalies is highly suspicious and can uncover sophisticated malware.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - User workstations, web-facing servers, and network egress points instrumented with Zeek.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_events | WHERE entropy(process_path) > threshold | ENRICH with network_connections | WHERE domain_prevalence is very_low
  - question: Is a process exhibiting network or file activity patterns that deviate from a learned baseline of normal behavior?
    context: This question seeks to identify malicious activity, like C2 beaconing or ransomware encryption, by modeling its behavior over time. A time-series model can learn the normal rate and pattern of network connections and file I/O for different applications. It can then alert on deviations from this norm, such as the periodic, low-and-slow heartbeat of a C2 implant or the sudden, high-volume file modification burst of ransomware.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - User workstations, web-facing servers, and network egress points instrumented with Zeek.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: STREAM process_events (network, file I/O) | APPLY time_series_model per process | ALERT on deviations from learned behavioral patterns