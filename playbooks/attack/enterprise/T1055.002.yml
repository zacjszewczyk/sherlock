name: T1055.002: Portable Executable Injection
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps identify Portable Executable (PE) Injection (T1055.002), a technique used by adversaries for privilege escalation and defense evasion. The investigation focuses on detecting anomalous process behaviors that indicate code is being run within the address space of a separate live process. Key indicators include: atypical remote thread creation, especially into high-privilege processes; execution of files matching known IOCs or originating from unusual locations; command-line arguments or parent-child process relationships indicative of injection; and core system processes exhibiting anomalous network or child process activity. Further indicators of defense evasion include legitimate processes making suspicious network connections (e.g., to C2 servers), spawning unusual child processes (like command-line interpreters), exhibiting beaconing behavior, or being part of a suspicious event sequence following a file download.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any remote thread creations into critical system processes originating from non-standard system directories?
    context: |
      This question aims to detect a common PE injection pattern where an adversary injects code from a non-system location (like a user's download folder) into a high-privilege process (like lsass.exe) to escalate privileges. Legitimate remote thread creations into these processes typically originate from trusted system binaries located in C:\Windows\System32\. Flagging exceptions helps to quickly identify blatant injection attempts.
    answer_sources:
      - Sysmon Event ID 8
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, especially Privileged Access Workstations (PAWs) and Domain Controllers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH process:CreateRemoteThread
          WHERE source_image_path NOT IN ('C:\Windows\System32\*')
          AND target_image_path IN ('lsass.exe', 'services.exe', 'wininit.exe', 'csrss.exe')
          RETURN count by source_image, target_image, hostname
  - question: Have any statistically rare source-to-target process pairs for remote thread creation been observed?
    context: |
      This question focuses on identifying sophisticated PE injection that might use legitimate-looking source processes. By baselining all normal remote thread creation activity across the enterprise, analysts can spot outliers that, while not matching a simple blocklist, are highly unusual for the environment. A process pair that has occurred only a handful of times might indicate an adversary trying to blend in.
    answer_sources:
      - Sysmon Event ID 8
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, especially Privileged Access Workstations (PAWs) and Domain Controllers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          // Step 1: Baseline Creation (run periodically)
          SEARCH process:CreateRemoteThread over last 90 days
          AGGREGATE count by source_image_path, target_image_path
          STORE results as baseline_counts

          // Step 2: Detection Query
          SEARCH process:CreateRemoteThread
          LOOKUP baseline_counts for source_image_path, target_image_path
          WHERE count < 5
          RETURN source_image, target_image, hostname
  - question: Have any remote thread creation events received a high-risk score from the PE injection classification model?
    context: |
      This question leverages machine learning to detect nuanced and previously unseen injection techniques. By training a model on various features like process paths, user context, and function reputation, the system can automatically score the risk of each event. High-score events, even if they don't trigger specific rule-based alerts, warrant investigation as they may represent novel or evasive adversary behavior.
    answer_sources:
      - Sysmon Event ID 8
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, especially Privileged Access Workstations (PAWs) and Domain Controllers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ml_predictions:pe_injection_model
          WHERE risk_score > 0.9
          RETURN event_details, risk_score, contributing_features
  - question: Have any processes been created from executables matching known malicious file hashes associated with injection tools?
    context: |
      This question seeks to identify the use of known malicious tools for PE injection. By comparing the file hashes of all newly created processes against a curated threat intelligence feed, analysts can quickly detect the presence of malware droppers, loaders, or specific injection utilities like those found in Cobalt Strike.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, general user endpoints.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH process:creation
          JOIN file_hash with threat_intelligence_feed
          WHERE threat_intelligence_feed.tags CONTAINS ('injector', 'loader', 'Cobalt Strike')
          RETURN hostname, process_name, file_hash, user
  - question: Are there any newly created processes with rare file hashes executing from user-writable directories?
    context: |
      This question helps to uncover previously unknown or custom malware used for PE injection. Adversaries often place their tools in common user-writable directories to ensure execution permissions. A file hash that is present on very few machines in the environment and is running from a location like C:\Users\Public\ or %APPDATA% is highly suspicious and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, general user endpoints.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH process:creation
          WHERE file_path IN ('C:\Users\Public\*', 'C:\Temp\*', '%APPDATA%\*')
          AGGREGATE host_count by file_hash
          WHERE host_count < (total_endpoints * 0.001)
          RETURN file_hash, process_name, file_path
  - question: Has a machine learning model flagged any newly created processes as potentially malicious, which were also observed accessing high-privilege processes?
    context: |
      This question combines two powerful signals: a machine learning model's prediction and subsequent high-risk behavior. A process flagged by an ML classifier is suspicious, but if that same process is then observed attempting to access the memory of a critical process like lsass.exe, it provides strong, correlated evidence of a PE injection attempt.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, general user endpoints.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ml_predictions:process_creation_model
          WHERE prediction == 'malicious'
          AND (
            SEARCH process:access
            WHERE source_process == ml_predictions.process_name
            AND target_process == 'lsass.exe'
          )
          RETURN process_details, ml_prediction_score
  - question: Are there any processes being executed with command-line arguments that specify a target process ID for injection?
    context: |
      This question looks for explicit evidence of process injection in command-line arguments. Tools used for injection often require the operator to specify the Process ID (PID) of the target process. Searching for patterns like '--pid' or '/pid:' in command lines can directly uncover the use of such tools.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH process:creation
          WHERE command_line MATCHES_REGEX ('--pid [0-9]+', '/pid:[0-9]+')
          OR (process_name == 'rundll32.exe' AND command_line NOT CONTAINS 'C:\Windows\System32')
          RETURN hostname, process_name, command_line, parent_process
  - question: Have any statistically rare parent-child process relationships been observed, especially involving non-interactive parents and interactive children?
    context: |
      This question aims to detect anomalous process chains indicative of injection. A non-interactive process like a Windows service ('services.exe') should not normally spawn an interactive command shell ('cmd.exe', 'powershell.exe'). Baselining normal parent-child relationships and alerting on rare or illogical pairings can reveal that a parent process has been hijacked.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          // Baseline normal parent-child pairs and find rare ones
          SEARCH process:creation
          AGGREGATE frequency by parent_process, child_process
          FILTER by low frequency (e.g., bottom 1st percentile)
          WHERE parent_process IN ('services.exe', 'wininit.exe') AND child_process IN ('cmd.exe', 'powershell.exe', 'whoami.exe', 'net.exe')
          RETURN parent_process, child_process, hostname
  - question: Have any unusual sequences of child processes been spawned from a common parent process?
    context: |
      This question uses sequence analysis to detect post-injection activity. An adversary who has injected into a process like 'explorer.exe' may then spawn a chain of commands for discovery (e.g., explorer.exe -> powershell.exe -> whoami.exe). A model trained on normal process sequences can flag these anomalous chains that deviate from benign user behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH sequence_model:child_process_sequences
          WHERE anomaly_score > threshold
          AND parent_process == 'explorer.exe'
          RETURN sequence, anomaly_score, hostname
  - question: Have any core system processes initiated an outbound network connection or created a child process?
    context: |
      This question establishes a high-fidelity, zero-trust rule for critical system processes. Processes like 'lsass.exe', 'csrss.exe', and 'wininit.exe' have no legitimate reason to create child processes or make outbound network calls. Any observation of this behavior is a strong indicator of compromise, likely resulting from process injection, and should be treated as a critical alert.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Network Egress Points (Firewalls/Gateways), Critical System Servers (e.g., Domain Controllers).
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH (process:creation OR network:connection)
          WHERE process_name IN ('lsass.exe', 'csrss.exe', 'wininit.exe', 'winlogon.exe')
          AND (event_type == 'child_process_creation' OR event_type == 'outbound_network_connection')
          RETURN event_details, hostname
  - question: Have critical system processes, like svchost.exe, exhibited outlier network behavior?
    context: |
      This question addresses the challenge that some system processes, like 'svchost.exe', do have legitimate network activity. By baselining their normal destinations and data volumes, we can use statistical methods to detect outliers. A connection to a very low-reputation IP or an unusually large data transfer could indicate that the process has been injected with malicious code for C2 or exfiltration.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network Egress Points (Firewalls/Gateways), Critical System Servers (e.g., Domain Controllers).
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH network:connection
          WHERE process_name == 'svchost.exe'
          COMPARE current_activity to historical_baseline for process
          WHERE destination_ip_reputation < 5th_percentile OR bytes_sent > 99th_percentile
          RETURN connection_details, outlier_reason
  - question: Has an anomaly detection model identified unusual process and network behavior from a critical system process?
    context: |
      This question applies unsupervised machine learning to find novel injection attacks. An Isolation Forest or similar model can analyze multiple features (process name, port, protocol, bytes sent) simultaneously to find anomalous combinations that simple rules would miss. This provides a safety net to catch sophisticated attacks that evade other detection methods.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network Egress Points (Firewalls/Gateways), Critical System Servers (e.g., Domain Controllers).
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ml_predictions:critical_process_anomaly_model
          WHERE prediction == 'anomaly'
          RETURN event_details, contributing_features, hostname
  - question: Has a trusted process connected to a known malicious IP or domain?
    context: |
      This question seeks to find defense evasion where an adversary injects into a trusted process (e.g., 'notepad.exe') to bypass firewalls. By joining host-based network logs with threat intelligence, we can catch legitimate applications making illegitimate connections, a strong sign that the process is compromised and being used for C2 communications.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network Egress Points, DNS Resolvers, Web Proxies, Host-based network sensors.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH network:connection OR dns:query
          WHERE process_name IN ('svchost.exe', 'notepad.exe', 'explorer.exe')
          JOIN destination_ip OR domain with threat_intelligence_feed
          WHERE threat_intelligence_feed.is_malicious == true
          RETURN process_name, destination, hostname
  - question: Has a trusted process communicated with a newly registered or algorithmically generated domain?
    context: |
      This question helps detect C2 infrastructure that is not yet on threat intelligence lists. Adversaries often use newly registered domains (NRDs) or domain generation algorithms (DGAs). Alerting when a trusted process connects to a domain registered in the last 30 days or one with high character entropy helps to proactively identify suspicious C2 channels.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network Egress Points, DNS Resolvers, Web Proxies, Host-based network sensors.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH dns:query
          WHERE process_name IN ('svchost.exe', 'notepad.exe', 'explorer.exe')
          ENRICH domain with whois_data and calculate entropy
          WHERE domain_age < 30_days OR domain_entropy > 3.5
          RETURN process_name, domain, hostname
  - question: Has a time-series model detected a sudden spike in data being sent to a low-reputation domain by a trusted process?
    context: |
      This question aims to detect data exfiltration or heavy C2 traffic from an injected process. A time-series model can learn the normal 'heartbeat' of data transfer for a given process. A sudden, anomalous spike in outbound data volume, especially to a suspicious domain, provides a strong signal of malicious activity that warrants immediate investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network Egress Points, DNS Resolvers, Web Proxies, Host-based network sensors.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ml_predictions:data_volume_timeseries_model
          WHERE anomaly_detected == true
          AND process_name IN ('svchost.exe', 'notepad.exe', 'explorer.exe')
          AND destination_reputation == 'low'
          RETURN process_name, destination, data_volume, forecast_vs_actual
  - question: Has a trusted application like a web browser or office product spawned a command-line interpreter or living-off-the-land binary (LOLBin)?
    context: |
      This question targets a classic sign of code execution following exploitation or injection. A process like Microsoft Word ('WINWORD.EXE') or a web browser has no legitimate reason to spawn 'cmd.exe' or 'powershell.exe'. This behavior strongly indicates that a malicious payload has been executed and is now using the command line to perform follow-on actions.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI).
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH process:creation
          WHERE parent_process IN ('WINWORD.EXE', 'explorer.exe', 'outlook.exe', 'chrome.exe')
          AND child_process IN ('cmd.exe', 'powershell.exe', 'net.exe', 'whoami.exe', 'certutil.exe')
          RETURN parent_process, child_process, command_line, hostname
  - question: Have any child processes been spawned by trusted applications with highly obfuscated command-line arguments?
    context: |
      This question looks for attempts by adversaries to hide their commands. A high entropy score in a command line, particularly for PowerShell, suggests the use of encoding (like Base64) or obfuscation to evade simple keyword-based detections. Alerting on unusually complex commands spawned from trusted parents can reveal malicious script execution.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI).
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH process:creation
          WHERE parent_process IN ('WINWORD.EXE', 'explorer.exe', 'outlook.exe')
          CALCULATE entropy of child_process.command_line
          COMPARE entropy to baseline for parent_child_pair
          WHERE entropy > 95th_percentile
          RETURN parent_process, child_process, command_line, entropy_score
  - question: Has a machine learning model detected unusual or non-standard command-line arguments for a common utility like PowerShell?
    context: |
      This question uses advanced modeling to understand the 'grammar' of legitimate command-line usage. A sophisticated model can learn valid combinations of arguments and flags. When it encounters a command line that is syntactically unusual or combines arguments in a way never seen in benign activity, it can flag it as potentially malicious, even if it contains no obviously malicious keywords.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI).
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ml_predictions:command_line_grammar_model
          WHERE process_name == 'powershell.exe' AND is_anomalous == true
          RETURN command_line, anomaly_reason, parent_process, hostname
  - question: Has a trusted process initiated a TLS connection using a self-signed certificate or with a server name mismatch?
    context: |
      This question scrutinizes the cryptographic details of network connections to find C2 channels. Adversaries often use self-signed certificates for their C2 servers to enable encryption without the cost or traceability of a proper certificate. A mismatch between the certificate's subject name and the server name indication (SNI) is also a red flag. Observing a trusted process making such a connection is highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Sysmon Event ID 3
      - Network Egress Points, Correlated Host Logs.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ssl:log OR x509:log
          CORRELATE with host logs to find process_name
          WHERE (certificate.issuer == certificate.subject OR certificate.validation_status == 'self-signed')
          OR (ssl.server_name != certificate.subject_cn)
          RETURN process_name, destination_ip, server_name, cert_subject
  - question: Has a process exhibited periodic, low-jitter network beaconing using a rare JA3/JA3S hash?
    context: |
      This question combines two powerful indicators of C2 activity: beaconing behavior and TLS fingerprinting. Machine-generated C2 traffic often occurs at regular intervals with very little timing variation (low jitter). A JA3/JA3S hash, which fingerprints the TLS client, that is rare for a given process type indicates a non-standard or malicious library is being used to make the connection, which is a strong sign of injection.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network Egress Points, Correlated Host Logs.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          // For each source host/process, analyze time between connections
          SEARCH network:connection
          CALCULATE standard_deviation(time_delta) by src_host, process_name, destination
          WHERE std_dev < 2_seconds
          // Correlate with JA3 hash rarity
          AND LOOKUP ja3_prevalence for connection.ja3_hash
          WHERE ja3_prevalence < 1%
          RETURN src_host, process_name, destination, ja3_hash
  - question: Has a clustering algorithm identified an anomalous group of network connections for a common process?
    context: |
      This question uses unsupervised machine learning to find 'unknown unknowns' in network traffic. By clustering connections based on multiple features (duration, port, data size, JA3 hash), we can identify the main 'cloud' of benign activity. Small, distinct clusters of outlier connections represent anomalous behavior that does not fit the normal profile and may indicate a compromised process being used for C2.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network Egress Points, Correlated Host Logs.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          // Run DBSCAN or similar clustering on connection metadata per process
          SEARCH ml_results:network_clustering
          WHERE cluster_label == 'outlier'
          RETURN process_name, connection_details, hostname
  - question: Has a specific sequence of a file download, followed by a short-lived process, followed by new beaconing from a legitimate process been observed on a single host?
    context: |
      This question hunts for a specific, high-fidelity attack chain. It correlates events across different data sources to piece together the narrative of an attack: 1) Initial payload delivery via browser/email, 2) Execution of a dropper/loader that is quickly deleted, and 3) The final injected process beginning its C2 communication. Detecting this full sequence provides very strong evidence of a successful compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - User Workstations, Email Gateway Servers, Web Proxy Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          // Correlated search across multiple event types on the same host
          FIND sequence on a single host where:
          1. process:creation with parent IN ('outlook.exe', 'chrome.exe') AND file:download occurs
          2. AND within 60s, process from (1) terminates
          3. AND within 2m, network:beaconing starts from process IN ('explorer.exe', 'svchost.exe') to a new, low-reputation domain
          RETURN host, timeline_of_events
  - question: Has a change point detection algorithm identified a sudden spike in the rate of short-lived process creations on a host?
    context: |
      This question acts as an early warning system for dropper or loader activity. A sudden increase in the number of processes that run for less than a minute can indicate that a script or tool is rapidly executing commands or stages of an attack. Identifying this change point allows analysts to focus on a specific host and timeframe to investigate the subsequent activity for signs of injection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations, Email Gateway Servers, Web Proxy Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          // Create time-series of short-lived process counts per host
          SEARCH process:creation where lifetime < 60s
          APPLY change_point_detection algorithm to time-series
          WHERE change_point_detected == true
          RETURN host, time_of_spike, list_of_processes
  - question: Has a Hidden Markov Model classified a host's state as 'Dropper Active' or 'Injected' based on its stream of system events?
    context: |
      This question uses a sophisticated state-based model to assess the overall threat level of a host in real-time. By training a model on the typical sequences of events (process creations, network connections) that occur during different phases of an attack, it can infer the most likely current 'hidden state' of the host. A transition to an 'Injected' state serves as a high-confidence alert that the host is compromised.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - User Workstations, Email Gateway Servers, Web Proxy Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: |
          SEARCH ml_predictions:host_state_hmm_model
          WHERE current_state IN ('Dropper Active', 'Injected')
          RETURN host, current_state, probability, contributing_events