name: T1547.009: Shortcut Modification
id: 5c18a986-27d1-4b79-8f96-26d9e078a63f
description: This playbook focuses on detecting adversaries who modify or create shortcut (.lnk) files to achieve persistence or privilege escalation. It provides investigative questions to identify shortcuts pointing to malicious executables, those executing LOLBAS with suspicious arguments, processes from shortcuts exhibiting anomalous behavior like spawning reconnaissance tools or making unusual network connections, and shortcuts with deceptive metadata. The playbook also covers privilege escalation scenarios, such as the modification of shortcuts in privileged system locations to hijack execution flow or the correlation of shortcut execution with subsequent privileged activities like new account creation.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a process launched from a shortcut (.lnk) file been identified as malicious based on threat intelligence matching its target executable hash, command-line domains, or IP addresses?
  context: This question aims to detect direct malicious shortcut usage. Adversaries often create shortcuts pointing to their malware. By hashing the target executable and parsing command-line arguments for network indicators, we can cross-reference them with threat intelligence feeds. A match provides a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - Zeek conn.log
  - Zeek dns.log
  - Endpoints (User and System Startup Folders)
  - DNS Resolvers
  - Network Egress Points
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events where parent_image ends with ".lnk"
      for each event:
        target_hash = hash(event.executable_path)
        arguments = parse_arguments(event.command_line)
        if threat_intel_lookup(target_hash) or threat_intel_lookup(arguments.ips) or threat_intel_lookup(arguments.domains):
          alert "Malicious shortcut execution based on TI match"
- question: Is a process launched from a shortcut (.lnk) file making a network connection to a rare or unique destination IP address within the enterprise?
  context: This question helps identify potential command-and-control (C2) channels. Legitimate applications often connect to well-known, popular servers. Adversaries may use dedicated, low-prevalence infrastructure. By identifying network connections from shortcut-spawned processes to statistically rare destinations, we can uncover potential C2 activity that might not yet be in threat intelligence feeds.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - Zeek conn.log
  - Zeek dns.log
  - Endpoints (User and System Startup Folders)
  - DNS Resolvers
  - Network Egress Points
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_creation_event with network_connection:
        if parent_image ends with ".lnk":
          dest_ip_prevalence = calculate_prevalence(event.destination_ip, last_30_days)
          if dest_ip_prevalence < 1st_percentile:
            alert "Shortcut process connecting to rare destination IP"
- question: Can we score the maliciousness of a shortcut execution event using a machine learning model?
  context: This question proposes a more advanced detection method using a supervised classification model. By engineering features like the target's digital signature status, path entropy, command-line length, and indicator reputation, a model can learn to distinguish between benign and malicious shortcut executions, providing a probabilistic risk score for analysts to prioritize investigations.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - Zeek conn.log
  - Zeek dns.log
  - Endpoints (User and System Startup Folders)
  - DNS Resolvers
  - Network Egress Points
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_creation_event where parent_image ends with ".lnk":
        features = extract_features(event)
        score = ml_model.predict(features)
        if score > threshold:
          alert "High-scoring malicious shortcut execution detected by ML model"
- question: Has a shortcut (.lnk) file in a startup folder recently been created or modified to execute a Living-off-the-Land Binary (LOLBAS) with suspicious command-line arguments?
  context: This question targets a common persistence technique where adversaries use legitimate system utilities (LOLBAS) to avoid dropping new malware. This query looks for the creation of a shortcut in a startup folder that immediately precedes the execution of a known LOLBAS with high-risk arguments used for encoding, in-memory execution, or downloading payloads.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: User Startup Folder (%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup), System Startup Folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp)'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_creation_events for ".lnk" in startup_folders
      within 5 minutes, search for process_creation_events where:
        parent_image is "explorer.exe"
        process_name is in [powershell.exe, mshta.exe, wscript.exe, rundll32.exe]
        command_line contains "-e", "-enc", "IEX", "DownloadString", ".hta", "javascript:"
      correlate and alert "Suspicious LOLBAS execution from startup shortcut"
- question: Is a LOLBAS process launched from a shortcut file using command-line arguments with unusually high entropy?
  context: Adversaries often use encoding or obfuscation (like Base64) to hide their commands within LOLBAS command lines, which significantly increases the character randomness, or entropy. This question establishes a normal entropy baseline for each LOLBAS and flags executions where the command-line entropy is a statistical outlier, indicating probable obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: User Startup Folder (%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup), System Startup Folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp)'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each lolbas_process_event from_lnk:
        entropy = calculate_shannon_entropy(event.command_line)
        baseline_percentile = get_baseline_entropy_percentile(event.process_name, 98)
        if entropy > baseline_percentile:
          alert "High entropy detected in LOLBAS command line from shortcut"
- question: Are there anomalous clusters of LOLBAS executions originating from shortcut files?
  context: This question uses unsupervised machine learning to find unusual patterns in LOLBAS usage. By clustering executions based on features like command-line length, entropy, and special characters, we can identify small, outlier clusters that deviate from common administrative patterns. These outlier clusters represent potentially malicious activity that warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: User Startup Folder (%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup), System Startup Folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp)'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      data = get_lolbas_executions_from_lnk()
      features = featurize(data)
      clusters = dbscan_cluster(features)
      for each point in clusters.outliers:
        alert "Anomalous outlier LOLBAS execution from shortcut detected"
- question: Has a process launched from a startup shortcut spawned a child process associated with system discovery or reconnaissance?
  context: This question looks for post-persistence actions. After an adversary establishes persistence via a startup shortcut, they often perform reconnaissance. This rule detects when a process launched from a startup folder shortcut spawns common discovery tools (e.g., whoami.exe, net.exe, ipconfig.exe) shortly after execution, which is a strong indicator of malicious follow-on activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Process Trees
  - Network Gateway Traffic Logs
  - DNS Query Logs
  - System and User Startup Folders
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events as child
      where child.name in [whoami.exe, net.exe, ipconfig.exe, systeminfo.exe, tasklist.exe]
      and child.creation_time < parent.creation_time + 60s
      and parent was launched from a file in a startup_folder
      alert "Reconnaissance tool launched by startup shortcut process"
- question: Is a process launched from a startup shortcut exhibiting anomalous child process or network behavior compared to its baseline?
  context: Legitimate startup programs typically have predictable behavior. This question involves creating a baseline profile for each legitimate startup process, including its normal child processes and network destinations. It then scores and alerts on deviations from this baseline, such as spawning a new, unexpected child process or connecting to a rare port, indicating a potential process hijack or compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Process Trees
  - Network Gateway Traffic Logs
  - DNS Query Logs
  - System and User Startup Folders
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_event from startup_shortcut:
        risk_score = 0
        if process_event.child_process is not in baseline(process.name).child_processes: risk_score += 1
        if process_event.network.port is not in baseline(process.name).ports: risk_score += 1
        if process_event.network.upload_volume > baseline(process.name).upload_volume_3sd: risk_score += 2
        if risk_score > threshold:
          alert "Anomalous behavior from startup process"
- question: Has there been an anomalous spike in the creation rate of new shortcut files in startup folders across the enterprise?
  context: This question aims to detect widespread, automated persistence campaigns. A threat actor deploying malware across many systems at once would cause a sudden, significant increase in the number of .lnk files created in startup folders. A time-series forecasting model can predict the normal rate of creation and alert when the observed count dramatically exceeds this forecast.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Process Trees
  - Network Gateway Traffic Logs
  - DNS Query Logs
  - System and User Startup Folders
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hourly_lnk_count = count(file_creation_events where file ends with ".lnk" and path is startup_folder) group by hour
      forecast = time_series_model.predict(hourly_lnk_count)
      if hourly_lnk_count.latest > forecast.upper_confidence_bound:
        alert "Anomalous spike in startup shortcut creation rate"
- question: Has a shortcut file been created that appears to be a document or common application but actually executes a script interpreter?
  context: This question detects social engineering attempts where an adversary tries to trick a user into running a malicious script. The rule checks for a mismatch between the shortcut's file name (e.g., 'Report.docx.lnk') and the actual process it executes (e.g., 'powershell.exe'), which is a common masquerading technique.
  answer_sources:
  - Windows Sysmon Event ID 11
  - File System Auditing Logs
  - 'Endpoint File Systems: User profile directories, Temporary file directories (%TEMP%), Email attachment sandboxes, Web download folders'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events where parent_image ends with ".lnk"
      if event.process_name in [powershell.exe, wscript.exe, cmd.exe] and event.parent_image contains ["doc", "xls", "pdf", "Chrome", "Firefox"]:
        alert "Masquerading shortcut detected: name/target mismatch"
- question: Has an unusually large shortcut (.lnk) file been created on an endpoint?
  context: Shortcut files are typically very small (a few kilobytes). Adversaries may embed scripts or payloads directly into a .lnk file, causing its size to become abnormally large. This question establishes a baseline for normal .lnk file sizes and flags any newly created shortcut that is a statistical outlier (e.g., larger than 1 MB), as it may contain an embedded payload.
  answer_sources:
  - Windows Sysmon Event ID 11
  - File System Auditing Logs
  - 'Endpoint File Systems: User profile directories, Temporary file directories (%TEMP%), Email attachment sandboxes, Web download folders'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_creation_events where file_name ends with ".lnk"
      baseline_size = get_percentile(lnk_file_sizes, 99)
      if event.file_size > baseline_size:
        alert "Unusually large shortcut file created"
- question: Can we identify masquerading shortcut files using a machine learning classification model?
  context: This question leverages a machine learning model to detect deceptive shortcuts with higher accuracy. By training a model on features like icon/target mismatches, file size, target path entropy, and internet origin (Zone.Identifier), it can learn to identify complex masquerading techniques that may evade simple symbolic rules.
  answer_sources:
  - Windows Sysmon Event ID 11
  - File System Auditing Logs
  - 'Endpoint File Systems: User profile directories, Temporary file directories (%TEMP%), Email attachment sandboxes, Web download folders'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each file_creation_event where file_name ends with ".lnk":
        features = extract_lnk_features(event)
        score = ml_model.predict(features)
        if score > threshold:
          alert "Masquerading shortcut detected by ML model"
- question: Has a shortcut in a privileged, system-wide directory been modified to execute a known malicious file?
  context: This question targets a specific privilege escalation vector where an adversary modifies a shortcut in a location like the Public Desktop or system-wide startup folder. Since these shortcuts may be run by administrative users, changing the target to a malicious executable is a way to get that malware to run with elevated permissions. This rule checks the new target's hash against threat intelligence.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: System-wide startup folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp), Public Desktop folder (C:\Users\Public\Desktop), Administrative Tools folder'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_modification_events for ".lnk" in privileged_directories
      target_path = parse_lnk(event.file_path)
      target_hash = hash(target_path)
      if threat_intel_lookup(target_hash):
        alert "Privileged shortcut modified to point to known malicious file"
- question: Has a shortcut in a privileged location been modified to point to a new executable that is rare across the enterprise?
  context: This is a statistical approach to the previous question. Instead of relying on known-bad hashes, this query identifies when a privileged shortcut is changed to point to a non-standard, rare binary. Legitimate software updates would typically point to files present on many systems, whereas an attacker's custom payload would likely be rare, making this a strong anomaly indicator.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: System-wide startup folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp), Public Desktop folder (C:\Users\Public\Desktop), Administrative Tools folder'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search file_modification_events for ".lnk" in privileged_directories
      target_path = parse_lnk(event.file_path)
      target_hash = hash(target_path)
      hash_prevalence = count_enterprise_endpoints_with_hash(target_hash)
      if hash_prevalence < 5:
        alert "Privileged shortcut modified to point to rare executable"
- question: Has an anomalous sequence of events, such as PowerShell modifying a privileged shortcut, been observed?
  context: This question uses machine learning to detect unusual modification processes. Software installers (like msiexec.exe) normally create or modify shortcuts. An administrative script (like powershell.exe) modifying a shortcut in a privileged location is an anomalous sequence of events. A sequence-based model can learn these normal patterns and flag deviations that suggest malicious tampering.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: System-wide startup folder (C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp), Public Desktop folder (C:\Users\Public\Desktop), Administrative Tools folder'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each event_sequence involving lnk_modification in privileged_dir:
        score = lstm_autoencoder.predict(sequence)
        if score indicates anomaly:
          alert "Anomalous event sequence modifying privileged shortcut"
- question: Has a process with high integrity been launched where a LOLBAS appears to be hijacking the execution of another program in the command line?
  context: This question detects execution hijacking. An adversary might modify a privileged shortcut's target from 'app.exe' to 'cmd.exe /c evil.bat && app.exe'. This rule looks for high-integrity processes where the command line starts with a LOLBAS and is followed by another executable, a pattern indicative of an attempt to run malicious code before the legitimate application.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: Administrative Tools folder, Control Panel items folder, System-wide Start Menu programs folder'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events where integrity_level is "High"
      if command_line matches regex `^(cmd\.exe /c|powershell\.exe -c|wscript\.exe).*\.(exe|com|bat)`:
        alert "Potential LOLBAS hijacking of high-integrity process"
- question: Has the command line for a privileged shortcut execution significantly deviated from its established baseline?
  context: This is a statistical method for detecting command-line hijacking. For each privileged shortcut, a baseline of its normal command line is stored. This query calculates the similarity (e.g., Levenshtein distance) between a new execution's command line and the baseline. A significant difference flags a potential modification or hijack.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: Administrative Tools folder, Control Panel items folder, System-wide Start Menu programs folder'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_event from privileged_shortcut:
        baseline_cmd = get_baseline_command(event.parent_shortcut)
        distance = levenshtein_distance(event.command_line, baseline_cmd)
        if distance > threshold:
          alert "Significant command-line deviation for privileged shortcut"
- question: Can a machine learning model classify the command line of a privileged shortcut execution as being hijacked?
  context: This question applies a supervised learning model to detect command-line hijacking. By training a classifier on features like the presence of LOLBAS strings, argument count, and command length, the model can learn to distinguish between simple, direct command lines ('app.exe') and complex, hijacked ones ('cmd.exe /c ... && app.exe'), providing a more robust detection method.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Windows Sysmon Event ID 11
  - 'Endpoints: Administrative Tools folder, Control Panel items folder, System-wide Start Menu programs folder'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_event from privileged_shortcut:
        features = extract_command_line_features(event.command_line)
        score = ml_model.predict(features)
        if score indicates "hijacked":
          alert "ML model classified privileged command line as hijacked"
- question: Has a high-integrity process launched from a privileged shortcut spawned reconnaissance tools or made an external network connection?
  context: This question seeks to identify malicious activity immediately following a potential privilege escalation. A legitimate application running with high privileges is unlikely to spawn 'whoami.exe' or connect to a random external IP. This rule detects such behavior from processes launched by privileged shortcuts, indicating the execution has been compromised.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - 'High-Value Assets: Domain Controllers, Application Servers, Administrator Workstations; Network Infrastructure: Egress Points, DNS Resolvers'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events as p
      where p.integrity_level in ["High", "System"] and p.parent was from privileged_shortcut
      if p spawns child in [net.exe, whoami.exe, powershell.exe] or p makes network_connection to non_rfc1918_ip:
        alert "Suspicious child process or network activity from privileged shortcut execution"
- question: Has a privileged shortcut execution resulted in network behavior that is a statistical outlier compared to its baseline?
  context: This question establishes a profile of normal network activity for each privileged shortcut. It then hunts for executions of that shortcut that deviate from the norm, such as connecting to an external IP address when it normally only connects internally, or using a port it has never used before. Such outliers suggest the process's behavior has been maliciously altered.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - 'High-Value Assets: Domain Controllers, Application Servers, Administrator Workstations; Network Infrastructure: Egress Points, DNS Resolvers'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_event from privileged_shortcut:
        if network_connection.destination is external and baseline(process.name).is_internal_only:
          alert "Privileged process made unexpected external connection"
        if network_connection.port not in baseline(process.name).common_ports:
          alert "Privileged process connected to anomalous port"
- question: Does the process execution tree originating from a privileged shortcut show a structurally anomalous pattern?
  context: This question uses graph-based anomaly detection to model entire process execution chains. A legitimate execution has a predictable graph structure (parent process, child processes). An attacker hijacking the execution will introduce new nodes (e.g., 'powershell.exe') and new edges (e.g., a network connection node), creating a graph structure that an algorithm can flag as a significant anomaly.
  answer_sources:
  - Windows Event ID 4688
  - Windows Sysmon Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - 'High-Value Assets: Domain Controllers, Application Servers, Administrator Workstations; Network Infrastructure: Egress Points, DNS Resolvers'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      for each process_tree from privileged_shortcut:
        graph = build_process_graph(tree)
        if graph_anomaly_detection_model.is_anomalous(graph):
          alert "Anomalous process graph structure from privileged shortcut"
- question: Did the execution of a modified privileged shortcut immediately precede the creation of a new user account or addition of a member to a privileged group?
  context: This is a high-fidelity correlation rule that links the means (shortcut execution) to the objective (privilege escalation). It looks for a tight temporal relationship between the execution of a recently modified privileged shortcut and a key privilege escalation event, such as creating a new admin account. This chained sequence is a strong indicator of a successful attack.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Windows Event ID 4672
  - Windows Event ID 4720
  - Windows Event ID 4732
  - 'Security Logs: Domain Controller Security Event Logs, Endpoint Security Event Logs; Processes: Local Security Authority Subsystem Service (LSASS) process monitoring'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      search process_creation_events from modified_privileged_shortcut
      within 10 seconds, search for user_creation(4720) or group_add(4732) or new_logon(4624) by same user/process
      if found, alert "Privilege escalation event immediately followed modified shortcut execution"
- question: Is there a statistical spike in special privilege assignment events occurring shortly after processes are launched from privileged shortcuts?
  context: This question looks for a statistical correlation between two event types. While a single instance might be coincidental, a sudden increase in the rate of privileged shortcut executions being followed by special privilege assignments (EID 4672) across the enterprise is a strong signal that an adversary may be using this technique at scale.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Windows Event ID 4672
  - Windows Event ID 4720
  - Windows Event ID 4732
  - 'Security Logs: Domain Controller Security Event Logs, Endpoint Security Event Logs; Processes: Local Security Authority Subsystem Service (LSASS) process monitoring'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      rate = count(events where EID_4672 occurs within 60s of privileged_shortcut_exec)
      baseline_rate = get_baseline_rate()
      if rate > percentile(baseline_rate, 99.9):
        alert "Anomalous rate of privilege assignment following shortcut execution"
- question: Have we observed a rare sequence of events, such as a shortcut modification followed by its execution, privilege assignment, and then addition to a privileged group?
  context: This question uses sequence mining algorithms to discover attack patterns automatically. The full chain of events from initial modification to final privilege escalation is extremely rare in benign activity. By mining event logs for these rare but logical sequences, we can uncover the entire attack path as a single, high-confidence detection.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Windows Event ID 4672
  - Windows Event ID 4720
  - Windows Event ID 4732
  - 'Security Logs: Domain Controller Security Event Logs, Endpoint Security Event Logs; Processes: Local Security Authority Subsystem Service (LSASS) process monitoring'
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      event_sequences = mine_sequences_from_logs(time_window=5m)
      target_sequence = [LNK_Mod, LNK_Exec, Priv_Assign, Group_Add]
      if target_sequence in event_sequences and is_rare(target_sequence):
        alert "Rare attack sequence for privilege escalation via shortcut detected"