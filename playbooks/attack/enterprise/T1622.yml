name: T1622: Debugger Evasion
id: c6a8a1e2-5f6b-4b9c-8d1a-3e5f7a2b9c0d
description: This playbook helps analysts investigate whether an adversary is attempting to evade defenses or perform discovery by detecting the presence of debuggers. This is achieved by searching for various indicators, such as processes accessing debugger-related files or registry keys, extremely short-lived processes indicative of anti-debugging checks, a process attempting to debug its own parent, or specific exception handling patterns. The playbook also covers discovery-oriented actions like identifying malware known for these techniques via hash matching, or detecting rapid process enumeration and subsequent network activity.
type: technique
related:
  - TA0005: Defense Evasion
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process querying or accessing file paths or registry keys associated with known debuggers?
    context: This question aims to identify malware that is actively checking for the presence of common debugging tools on a system. Adversaries often perform these checks to determine if they are running in an analysis environment. A positive finding suggests the process is 'debugger-aware' and may alter its behavior to evade analysis. The query looks for command-line activity (`reg query`, `dir`) or direct registry access targeting paths and keys specific to tools like x64dbg, OllyDbg, WinDbg, or Image File Execution Options (IFEO) debugger settings. Legitimate developer or administrative tools should be excluded to reduce false positives.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 11 (Sysmon)
      - Windows Event ID 12 (Sysmon)
      - Windows Event ID 13 (Sysmon)
      - Standard user workstations
      - Production servers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH Process_Creation_Events OR Registry_Events WHERE (command_line CONTAINS "reg query" OR command_line CONTAINS "dir" OR registry_path CONTAINS "Image File Execution Options") AND (command_line CONTAINS "x64dbg" OR registry_path CONTAINS "OllyDbg") EXCLUDE known_good_processes
  - question: Is any process accessing debugger-related files or registry keys at an anomalously high rate compared to its baseline?
    context: This question moves beyond simple signature-based checks to a statistical approach. It seeks to find outliers in process behavior. By baselining normal activity for each process, we can detect when a legitimate-looking process begins to interact with debugger artifacts in a way that is unusual for it or its peers. An alert based on exceeding a high percentile (like the 99th) indicates a statistically significant deviation that could signal malicious reconnaissance or evasion.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 11 (Sysmon)
      - Windows Event ID 12 (Sysmon)
      - Windows Event ID 13 (Sysmon)
      - Standard user workstations
      - Production servers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each process_name, BASELINE access_frequency to debugger_artifacts. FOR each recent process, CALCULATE access_frequency. ALERT if access_frequency > 99th_percentile_of_baseline.
  - question: Can machine learning models classify process and registry activity as malicious based on features indicative of debugger evasion?
    context: This question explores using a supervised machine learning model to predict maliciousness. Instead of relying on specific rules, this approach learns from a dataset of known good and bad activities. By extracting features like process lineage, path entropy, and specific registry interactions, a model can identify complex, non-linear patterns that are characteristic of debugger evasion techniques.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 11 (Sysmon)
      - Windows Event ID 12 (Sysmon)
      - Windows Event ID 13 (Sysmon)
      - Standard user workstations
      - Production servers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: EXTRACT features (process_name, parent_process, path_entropy, cmd_line, registry_access_vector) from Process_and_Registry_Events. PREDICT is_malicious using pre-trained_classifier_model. ALERT if prediction_score > threshold.
  - question: Is a process terminating almost immediately after loading core system DLLs?
    context: This question identifies a common anti-debugging pattern where a program loads essential libraries, performs a quick check for a debugger, and then exits if one is found. Correlating an image load event for 'kernel32.dll' or 'ntdll.dll' with a process termination event for the same process within a very short timeframe (e.g., one second) is a strong indicator of this 'check-and-exit' behavior. The risk is considered higher if the executable is unsigned or runs from a temporary location.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 5 (Sysmon)
      - Windows Event ID 7 (Sysmon)
      - All Windows endpoints and servers
      - Virtual Desktop Infrastructure (VDI) instances
      - Security analysis sandbox environments
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CORRELATE events by ProcessGuid. FIND Sysmon_Event_7 (ImageLoad of 'kernel32.dll' OR 'ntdll.dll'). IF followed by Sysmon_Event_5 (ProcessTerminate) for same ProcessGuid within 1 second, THEN ALERT.
  - question: Are there any new or rare processes that consistently have an extremely short execution lifetime?
    context: This question uses statistical analysis to find outliers based on process lifetime. By calculating the 1st percentile of lifetimes for all processes across the enterprise, we can identify a threshold for unusually fast execution. Any new or rare process whose median lifetime falls below this threshold is suspicious, as it may be a 'check-and-exit' binary designed for debugger detection or other quick reconnaissance tasks.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 5 (Sysmon)
      - Windows Event ID 7 (Sysmon)
      - All Windows endpoints and servers
      - Virtual Desktop Infrastructure (VDI) instances
      - Security analysis sandbox environments
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CALCULATE 1st_percentile_lifetime across all processes. FOR each new or rare process_name, CALCULATE median_lifetime. ALERT if median_lifetime < 1st_percentile_threshold.
  - question: Can we identify clusters of anomalous short-lived processes using machine learning?
    context: This question applies unsupervised machine learning to group processes based on their execution characteristics. By using features like lifetime, number of loaded DLLs, parent process, and file path entropy, an algorithm like DBSCAN can identify small, dense clusters of activity that are separate from the large clusters of normal system behavior. These anomalous clusters often represent malicious tools or scripts that share similar, suspicious traits.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 5 (Sysmon)
      - Windows Event ID 7 (Sysmon)
      - All Windows endpoints and servers
      - Virtual Desktop Infrastructure (VDI) instances
      - Security analysis sandbox environments
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CLUSTER process execution data using features (lifetime, dll_count, parent_process, path_entropy). INVESTIGATE small, dense clusters of short-lived processes.
  - question: Is a process spawning a debugger to attach to its own parent process?
    context: This question looks for a very specific and high-confidence indicator of malicious activity. A process that spawns a debugger (like ntsd.exe) and instructs it to attach to its own parent is a highly unusual event outside of specific development or crash analysis scenarios. This technique can be used by malware to inject code or manipulate the parent process under the cover of a legitimate debugging tool.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH Process_Creation_Events WHERE child_process_name IS a_known_debugger AND command_line CONTAINS ParentProcessId. ALERT with critical severity.
  - question: Has a debugger ever been observed as a child process of a non-developer tool?
    context: This question uses statistical baselining to detect a rare event. In a typical production environment, the probability of a standard application spawning a debugger to attach to its parent is virtually zero. Therefore, any occurrence of this parent-child relationship is a statistically significant anomaly that warrants immediate investigation, as it strongly suggests a malicious attempt at process manipulation or evasion.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: BASELINE parent-child process relationships. ALERT on any occurrence where child_process is a debugger and command_line targets ParentProcessId, as the baseline frequency is zero.
  - question: Can we model and detect a self-debugging process relationship using a graph database?
    context: This question proposes using a graph database to model process creation events as a network of nodes and edges. This allows for the creation of a specific, high-risk query pattern: a parent process node ('A') creates a child debugger node ('B'), and the connecting edge has an attribute indicating that B's command line targets A's process ID. Continuously querying for this specific subgraph pattern provides a robust way to detect this malicious technique in near real-time.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL process events in a graph database. QUERY for graph pattern where (ProcessA)-[:CREATES]->(ProcessB) AND ProcessB is a debugger AND ProcessB.command_line targets ProcessA.Id. ALERT on match.
  - question: Is a non-debugger process generating and handling a single-step exception?
    context: This question targets a sophisticated anti-debugging technique where a program intentionally raises an exception (like STATUS_SINGLE_STEP, 0x80000004) to see how it's handled. If a debugger is attached, it will typically intercept the exception, altering the program's execution flow. If no debugger is present, the program's own exception handler will catch it, and the program continues. Observing this exception from a process that is not a known debugger is a strong sign of an evasion attempt.
    answer_sources:
      - EDR Telemetry (Exception Events)
      - Windows Event ID 1000 (Application Error)
      - Windows Event ID 1001 (Windows Error Reporting)
      - All Windows endpoints, especially those not used for software development
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH Exception_Events WHERE exception_code = '0x80000004' AND process_does_not_terminate AND process_name IS NOT in debugger_whitelist. ALERT on finding.
  - question: Is a process showing a statistically significant increase in handled exceptions, particularly debug-related ones?
    context: This question uses statistical analysis to find anomalies in exception handling. While crashes (unhandled exceptions) are common, a sudden spike in the ratio of handled-to-unhandled exceptions for a specific process is unusual. It suggests the process is intentionally generating and catching exceptions. If these exceptions are related to debugging (like single-step or breakpoints), it provides strong evidence of anti-analysis behavior.
    answer_sources:
      - EDR Telemetry (Exception Events)
      - Windows Event ID 1000 (Application Error)
      - Windows Event ID 1001 (Windows Error Reporting)
      - All Windows endpoints, especially those not used for software development
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each executable_name, BASELINE the ratio of handled-to-unhandled exceptions. ALERT if a process shows a significant increase in this ratio, especially for debug-related exception codes.
  - question: Can an anomaly detection model identify sequences of events that indicate exception-based debugger detection?
    context: This question leverages an unsupervised machine learning model, like an Autoencoder, to learn what normal sequences of system events look like for a given process. The model is trained on features like exception codes, termination status, and loaded modules. It can then identify and flag anomalous sequences, such as a process triggering a debug-related exception without subsequently crashing, which is a hallmark of an intentional anti-debugging check.
    answer_sources:
      - EDR Telemetry (Exception Events)
      - Windows Event ID 1000 (Application Error)
      - Windows Event ID 1001 (Windows Error Reporting)
      - All Windows endpoints, especially those not used for software development
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN an autoencoder model on normal sequences of process events (exceptions, termination, module loads). FEED live event sequences to the model. ALERT if reconstruction error is high for a sequence containing a debug exception without termination.
  - question: Is a process running whose file hash matches a known malware sample with debugger evasion capabilities?
    context: This question focuses on leveraging threat intelligence to identify known threats. By taking the hash (e.g., SHA256) of every new process and checking it against a threat intelligence database in real-time, defenders can immediately identify and alert on malware. Enriching the alert with context from the intelligence provider, specifically noting 'Debugger-Evasion' capabilities, gives the analyst a head start on the investigation.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - Email gateways
      - Web proxies
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON Process_Creation_Event, LOOKUP process_hash in threat_intelligence_platform. IF match found, ALERT. ENRICH alert with malware capabilities like 'Debugger-Evasion'.
  - question: Are there any rare or 'first seen' executables in the environment that should be prioritized for threat intelligence analysis?
    context: This question aims to proactively hunt for new and unknown threats. Instead of only checking known malicious hashes, this approach identifies any executable that is new to the enterprise or running on a very small number of hosts (e.g., fewer than five). These rare files are inherently more suspicious and should be automatically submitted for threat intelligence lookups or sandbox analysis to determine if they are malicious.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - Email gateways
      - Web proxies
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MAINTAIN a database of all file_hashes and their host_prevalence. IF a new hash is seen OR its prevalence is < 5, SUBMIT hash for threat intelligence lookup.
  - question: Can a static file classifier automatically identify potentially malicious executables for further hash lookups?
    context: This question describes using a pre-emptive classification model to score executables before they are even run. By analyzing static properties of a file—such as its PE header, section entropy, and embedded strings—a machine learning model can assign a maliciousness score. Files that receive a high score can then be automatically prioritized for deeper analysis, such as a hash lookup against threat intelligence feeds, creating an efficient filtering pipeline.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - Email gateways
      - Web proxies
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON new_executable_file, SCORE file using a static classifier model. IF score > high_threshold, AUTOMATE hash lookup in threat intelligence feeds.
  - question: Is a single process rapidly spawning multiple child processes to search for running debuggers?
    context: This question looks for a burst of discovery activity from a single parent process. A common malware behavior is to run several commands in quick succession to enumerate running processes (e.g., using 'tasklist' or 'wmic process get') and check for the presence of debugger process names. Alerting when a single parent spawns more than a few of these commands in a short window (e.g., 30 seconds) can effectively detect this reconnaissance pattern.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: COUNT child processes per ParentProcessGuid within 30 seconds. ALERT if count > 3 AND child_process_command_line contains 'tasklist', 'wmic process get', 'x64dbg', etc.
  - question: Is any parent process spawning an anomalously high number of discovery-related child processes?
    context: This question uses statistical baselining to detect abnormal process enumeration. By establishing a normal baseline for how often legitimate administrative scripts spawn discovery tools, we can detect outliers. A parent process that spawns a number of such children far exceeding the 99th percentile of normal behavior is a strong indicator of a malicious script or implant performing reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: For each ParentProcessGuid, COUNT child processes with discovery commands in a 1-minute window. BASELINE this count. ALERT if any parent exceeds the 99th percentile.
  - question: Are there any highly improbable sequences of command-line executions indicative of discovery?
    context: This question applies sequence analysis to user or host activity. Normal command-line usage follows predictable patterns. By training a model (like a Markov Chain) on these normal sequences, we can identify and flag new sequences that have a very low probability of occurring. A rapid succession of process enumeration commands, for example, would likely be flagged as a low-probability, anomalous sequence warranting investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Windows endpoints and servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN a sequence model (e.g., Markov Chain) on normal command sequences per user/host. ALERT if an observed sequence has a very low probability, especially if it contains multiple discovery commands.
  - question: Is a host exhibiting a correlated sequence of local discovery, internal scanning, and failing DNS lookups?
    context: This question seeks to identify a full attack pattern by correlating events from different data sources. An adversary often follows a sequence: (1) check for debuggers/analysis tools on the local host, (2) scan the internal network for other targets if the coast is clear, and (3) perform DNS lookups for command-and-control servers. Alerting on this specific sequence from a single host within a short time window provides a high-confidence alert of active compromise and lateral movement attempts.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Core network switches (for SPAN/TAP port)
      - DNS servers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CORRELATE by source_ip over 5 minutes. TRIGGER if [1] Process event with 'tasklist', THEN [2] Zeek conn.log shows >10 internal IPs contacted, AND [3] Zeek dns.log shows high NXDOMAIN ratio.
  - question: Does any host have an anomalously high 'Discovery and Lateral Movement Score'?
    context: This question quantifies suspicious behavior into a single risk score. By assigning points for various suspicious activities over a rolling time window—such as running discovery commands, scanning multiple internal IPs, or generating failed DNS lookups—we can create a composite score. When a host's score exceeds a statistical threshold (e.g., 3 standard deviations above the mean), it can be flagged for investigation, effectively aggregating multiple weak signals into one strong one.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Core network switches (for SPAN/TAP port)
      - DNS servers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: For each host, CALCULATE a score over 10 mins. SCORE += points for discovery commands, unique IPs scanned, NXDOMAIN count. ALERT if score > 3 standard deviations above enterprise mean.
  - question: Can an anomaly detection model identify hosts with a combined activity profile indicative of post-discovery lateral movement?
    context: This question uses unsupervised machine learning to find outlier hosts based on a composite view of their behavior. By creating a feature vector for each host that includes counts of discovery commands, network scan fan-out (IPs contacted), and DNS query statistics, an algorithm like Isolation Forest can identify hosts whose overall activity profile is abnormal compared to their peers and their own historical baseline, without relying on predefined rules.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Core network switches (for SPAN/TAP port)
      - DNS servers
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: For each host, CREATE a feature vector (discovery_cmd_count, network_fan_out, nxdomain_ratio). USE an anomaly detection model (e.g., Isolation Forest) to find outlier hosts.