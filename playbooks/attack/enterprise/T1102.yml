name: T1102: Web Service
id: 0c89a7f3-e38a-4d9a-9b43-26f555ab5089
description: This playbook helps investigate whether an adversary is using legitimate web services for command and control. It focuses on identifying C2 activity by analyzing network connections for matches against threat intelligence, looking for static signatures of known C2 frameworks in HTTP traffic, detecting automated beaconing behavior through low jitter and regular connection intervals, identifying statistical outliers in data upload/download ratios indicative of exfiltration, and correlating network activity with suspicious process behavior on endpoints, such as connections initiated by unexpected processes or from unusual file paths.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any network connections (DNS, TCP/UDP, TLS) that match known C2 indicators from threat intelligence feeds?
    context: This question aims to identify direct connections to known malicious infrastructure. By cross-referencing live network data with up-to-date threat intelligence (IPs, domains, JA3/JA4 hashes, SSL certificate hashes), analysts can detect initial C2 callbacks or ongoing communication with high confidence. A match is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points (e.g., Firewalls, Proxies)
      - DNS Resolvers
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs (conn, dns, ssl) | JOIN threat_intel_feeds (IPs, domains, hashes) ON destination_ip, destination_domain, tls_fingerprint | WHERE match_found
  - question: Are any internal hosts communicating with an unusually high number of distinct C2 indicators compared to their peers?
    context: While a single C2 hit is significant, a host communicating with multiple, distinct malicious endpoints over a short period is a stronger signal of a sophisticated or widespread infection. This question helps prioritize investigations by identifying the most active or compromised systems based on the breadth of their malicious contacts, using a statistical percentile to define 'unusual'.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points (e.g., Firewalls, Proxies)
      - DNS Resolvers
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs | JOIN threat_intel_feeds | GROUPBY source_ip | COUNT distinct_c2_indicators | COMPARE_TO_PEER_PERCENTILE(95)
  - question: Can we predictively identify C2 connections that do not match known indicators using machine learning models trained on connection metadata?
    context: Threat actors constantly change infrastructure, making indicator-based detection a reactive measure. This question explores a proactive approach. By training a machine learning model on the characteristics of known C2 connections (e.g., duration, bytes transferred, protocol, TLS parameters), we can identify new, unseen C2 activity that shares similar behavioral 'fingerprints' but uses different infrastructure.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points (e.g., Firewalls, Proxies)
      - DNS Resolvers
    range: last 90 days
    queries:
      - pseudocode: INPUT network_connection_features (duration, bytes, proto, tls_cipher) | APPLY ML_MODEL (c2_classifier) | FILTER probability > threshold
  - question: Are there any HTTP requests containing URI paths, User-Agent strings, or headers that match signatures of known C2 frameworks?
    context: Many C2 frameworks (e.g., Cobalt Strike, Empire) use default or recognizable patterns in their HTTP communications. This question focuses on finding these static signatures in HTTP traffic. A match provides a strong clue about the specific malware family or C2 framework being used, which can inform subsequent response and remediation actions.
    answer_sources:
      - Zeek http.log
      - Application-Layer Proxies with TLS Inspection
      - Network Taps with Decryption Capabilities
    range: last 90 days
    queries:
      - pseudocode: SEARCH http_logs | APPLY REGEX on uri, user_agent, headers for known_c2_patterns | WHERE match_found
  - question: Are there HTTP requests to legitimate web services with unusually structured or random-looking User-Agents or URIs?
    context: Adversaries often hide C2 data within HTTP requests to legitimate services like GitHub or Pastebin. This data can appear as highly random strings (encoded data in URIs) or overly simplistic, non-standard values (e.g., a generic User-Agent). This question uses Shannon entropy to measure the randomness or simplicity of these fields, flagging requests that deviate from the normal baseline for a given service, which could indicate C2 communications.
    answer_sources:
      - Zeek http.log
      - Application-Layer Proxies with TLS Inspection
      - Network Taps with Decryption Capabilities
    range: last 90 days
    queries:
      - pseudocode: SEARCH http_logs to common_web_services | CALCULATE SHANNON_ENTROPY for uri, user_agent | COMPARE to baseline_entropy | FILTER is_outlier
  - question: Has there been an unexpected spike in the volume of HTTP requests that match a known C2 signature?
    context: A sudden increase in the number of hits for a specific C2 signature can signal the start of a new campaign or a widespread outbreak within the environment. This question uses time-series forecasting to predict the expected volume of such hits and alerts when the observed count significantly exceeds this prediction, allowing for early detection of large-scale C2 activity.
    answer_sources:
      - Zeek http.log
      - Application-Layer Proxies with TLS Inspection
      - Network Taps with Decryption Capabilities
    range: last 90 days
    queries:
      - pseudocode: SEARCH http_logs | COUNT requests matching c2_regex over time | APPLY TIME_SERIES_MODEL (prophet, arima) | DETECT anomaly where actual_count > forecasted_upper_bound
  - question: Is any internal host making an unusually high number of connections to a single external destination, especially on a non-standard port?
    context: Automated C2 implants often connect back to their server frequently. While a few connections are normal, a very high number (e.g., hundreds per hour) to the same destination is highly anomalous and suggests automated activity. This is particularly suspicious if the destination is a known web service but the communication occurs on a port not typically used for web traffic, indicating a covert channel.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points (e.g., Firewalls, Proxies)
      - Endpoint Detection and Response (EDR) agents on workstations and servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH connection_logs | GROUPBY source_ip, dest_ip, dest_port | COUNT connections over 1_hour | FILTER count > 60 AND is_web_service_on_non_standard_port
  - question: Are there any sequences of connections from a source to a destination that occur at highly regular, machine-like intervals?
    context: Human-generated network traffic is typically bursty and irregular. C2 beaconing, however, is often programmed to occur at fixed intervals (e.g., every 60 seconds). This results in a very low standard deviation in the time between connections (jitter). This question aims to find these unnaturally consistent communication patterns, which are a strong hallmark of automated C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points (e.g., Firewalls, Proxies)
      - Endpoint Detection and Response (EDR) agents on workstations and servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH connection_logs | GROUPBY source_ip, dest_ip, dest_port | CALCULATE time_difference_between_connections | COMPUTE standard_deviation(time_differences) | FILTER std_dev < 2_seconds
  - question: Can we identify groups of internal hosts that are all beaconing to the same external C2 service in a similar manner?
    context: During a campaign, multiple compromised hosts may be configured to communicate with the same C2 server. This question uses clustering algorithms like DBSCAN to group connection events based on features like destination, port, data size, and timing regularity. This can reveal small, dense clusters of activity that represent multiple internal systems all reporting to a single external C2 endpoint, helping to scope the full extent of an intrusion.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points (e.g., Firewalls, Proxies)
      - Endpoint Detection and Response (EDR) agents on workstations and servers
    range: last 90 days
    queries:
      - pseudocode: INPUT connection_log_features (source, dest, port, bytes, jitter) | APPLY CLUSTERING_ALGORITHM (dbscan) | IDENTIFY and investigate small, dense clusters
  - question: Are there any large, one-way data transfers to public file sharing or paste sites?
    context: This question looks for clear-cut cases of data exfiltration masquerading as legitimate web traffic. A connection to a file sharing site where a large amount of data is uploaded (>10MB) with very little downloaded in return (high upload/download ratio) is highly suspicious and deviates significantly from normal browsing behavior. This is a simple but effective heuristic for spotting bulk data theft.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points (e.g., Firewalls, Proxies)
      - Data Loss Prevention (DLP) Systems
    range: last 90 days
    queries:
      - pseudocode: SEARCH connection_logs | FILTER destination is file_sharing_site AND uploaded_bytes > 10MB AND (uploaded_bytes / downloaded_bytes) > 10
  - question: Are there any connections to a specific web service where the ratio of uploaded to downloaded data is a statistical outlier compared to the normal baseline for that service?
    context: Different web services have different typical usage patterns. This question aims to detect C2 exfiltration by first learning the normal upload/download ratio for each service and then flagging connections that deviate significantly from that norm. A Z-score greater than 3 indicates a rare event (less than 0.3% probability in a normal distribution) and strongly suggests that the connection is being used for a purpose, like data exfiltration, that is different from typical user activity for that service.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points (e.g., Firewalls, Proxies)
      - Data Loss Prevention (DLP) Systems
    range: last 90 days
    queries:
      - pseudocode: SEARCH connection_logs | For each web_service, CALCULATE historical_mean_and_std_dev of upload_download_ratio | For new connections, CALCULATE z_score | FILTER z_score > 3
  - question: Can we use an unsupervised machine learning model to detect anomalous network connections that may represent data exfiltration, without pre-defined rules?
    context: This question seeks to find the 'unknown unknowns' in network traffic. By training an anomaly detection model (like Isolation Forest) on various connection features, the model learns what 'normal' traffic looks like as a whole. It can then assign a high anomaly score to connections that don't fit this pattern, even if they don't trigger specific rules. Analysts can then investigate these high-scoring anomalies, especially those with high upload ratios, to find novel exfiltration techniques.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points (e.g., Firewalls, Proxies)
      - Data Loss Prevention (DLP) Systems
    range: last 90 days
    queries:
      - pseudocode: INPUT connection_log_features (bytes_up, bytes_down, duration, proto) | APPLY ANOMALY_DETECTION_MODEL (isolation_forest) | SORT by anomaly_score | INVESTIGATE top anomalies
  - question: Is a sensitive system process (e.g., lsass.exe, winlogon.exe) that should not normally access the network making an outbound connection?
    context: Core Windows processes like lsass.exe are critical for system operation but have no legitimate reason to initiate outbound network connections. An adversary might inject code into these trusted processes to perform C2 communications and evade detection (a technique known as process hollowing or masquerading). This question aims to detect this highly suspicious behavior by alerting on any network activity from a predefined list of sensitive, non-networking processes.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - User Workstations
      - Critical Servers (especially Domain Controllers and Application Servers)
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - pseudocode: JOIN process_logs and network_logs | FILTER process_name IN sensitive_process_list AND destination_ip is not local
  - question: Is a legitimate process (like powershell.exe or svchost.exe) being executed from an unusual file path or launched by an unexpected parent process?
    context: Adversaries often place legitimate system tools in non-standard locations (e.g., %APPDATA%) to bypass security controls or use unusual parent-child process chains (e.g., Microsoft Word spawning PowerShell) to execute commands. This question focuses on establishing a baseline of normal process execution patterns (path, parent, arguments) and then flagging any execution that deviates from this baseline, as it may indicate malicious activity trying to hide behind a legitimate process name.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - User Workstations
      - Critical Servers (especially Domain Controllers and Application Servers)
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs | For each process_name, CALCULATE frequency of (parent_process, file_path) combinations | ALERT on rare combinations
  - question: Can a machine learning model identify suspicious process execution chains, and do those chains subsequently make network connections to web services?
    context: This question combines the power of machine learning for process analysis with network event correlation. By training a model to recognize suspicious process lineage (based on parent-child relationships, command-line entropy, etc.), we can flag potentially malicious activity at the point of execution. Correlating these high-confidence endpoint alerts with subsequent network connections to web services provides a very strong signal that the network activity is part of the malicious C2 process.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - User Workstations
      - Critical Servers (especially Domain Controllers and Application Servers)
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - pseudocode: INPUT process_lineage_features | APPLY ML_MODEL (process_classifier) | IF classification is 'suspicious', CORRELATE with subsequent network_connections