name: "T1552.008: Chat Messages"
id: b9d4c2a1-8e6f-4b0a-9d7c-3e5f6a1b0c8d
description: This playbook is designed to detect adversarial attempts to steal credentials by exploiting enterprise chat services like Slack or Microsoft Teams. It identifies threats by searching for known credential theft tools targeting these applications, monitoring for suspicious scripting activity that searches for keywords like 'password' or 'token' in chat data directories, flagging unauthorized processes that attempt to read chat history or local storage files, and detecting anomalous network traffic patterns to chat service domains that could indicate bulk data exfiltration.
type: technique
related:
- "TA0006: Credential Access"
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known credential theft tool that targets chat applications running on any endpoints?
  context: This question aims to identify the most direct evidence of credential theft from chat applications. Adversaries often use publicly available or custom tools (e.g., Slack-Pirate, Teams-Stealer) designed specifically to parse and steal credentials from local chat client data stores. A direct match on a process name or file hash from a reliable threat intelligence source is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint file systems on user workstations and VDI instances where chat clients are installed. Monitored directories include temporary download folders and user profile directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE (process_name IN threat_intel_watchlist OR file_hash IN threat_intel_watchlist)
- question: Are there any newly executed processes with a low prevalence across the enterprise?
  context: This question uses rarity as an indicator of potential malicious activity. Standard enterprise software is typically widespread, whereas custom malware or attacker tools will often appear on a very small number of compromised hosts. Identifying processes with a file hash present on fewer than 5 hosts or less than 1% of the environment can uncover non-standard or unauthorized tooling that warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint file systems on user workstations and VDI instances where chat clients are installed. Monitored directories include temporary download folders and user profile directories.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: FOR each new_process_hash, COUNT distinct_hosts. IF host_count < 5, ALERT.
- question: Have any process execution events been flagged as malicious by a machine learning model?
  context: This question leverages machine learning to detect suspicious process behavior that may not match known signatures. By analyzing features like command-line length, process name entropy, parent process rarity, and code signing status, a classifier can identify characteristics common to malware. A high confidence score from the model indicates that a process is exhibiting multiple anomalous traits, suggesting it could be a previously unseen threat.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint file systems on user workstations and VDI instances where chat clients are installed. Monitored directories include temporary download folders and user profile directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs | APPLY ml_model | WHERE model_confidence_score > 0.9, ALERT.
- question: Is a scripting engine (e.g., PowerShell, Python) being used to search for credential-related keywords within chat application data directories?
  context: This question looks for 'living-off-the-land' techniques where adversaries use legitimate scripting tools already present on a system to perform malicious actions. Specifically, it checks for command lines or script content that simultaneously references common credential terms ('password', 'token') and file paths associated with chat clients (Slack, Teams), which is a strong indicator of a targeted credential harvesting attempt.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows PowerShell Event ID 4104
  - Endpoint command-line logs and PowerShell script block logs. Key locations for monitoring include user workstations and any servers where administrative scripts are run. Relevant GPOs for logging are managed on Domain Controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (process_creation_logs OR script_block_logs) WHERE process_name IN (powershell.exe, python.exe) AND (command_line CONTAINS 'password' OR 'token') AND (command_line CONTAINS '%APPDATA%\\Slack' OR '%APPDATA%\\Microsoft\\Teams')
- question: Have any executed PowerShell scripts exhibited unusually high entropy?
  context: This question aims to detect obfuscated scripts. Adversaries often encode or compress their malicious scripts to evade signature-based detection. This obfuscation results in a higher-than-normal Shannon entropy score (a measure of randomness). By baselining the entropy of typical administrative scripts, we can flag outliers that are likely obfuscated and malicious.
  answer_sources:
  - Windows PowerShell Event ID 4104
  - Endpoint command-line logs and PowerShell script block logs. Key locations for monitoring include user workstations and any servers where administrative scripts are run. Relevant GPOs for logging are managed on Domain Controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH script_block_logs | CALCULATE shannon_entropy(script_content) | WHERE entropy_score > baseline_95th_percentile, ALERT.
- question: Has a Natural Language Processing (NLP) model classified any script or command-line execution as 'Credential Harvesting'?
  context: This question uses advanced NLP to understand the semantic intent of a script, going beyond simple keyword matching. A model trained on malicious and benign scripts can recognize the patterns, functions, and argument structures indicative of credential harvesting, even if specific keywords are avoided or obfuscated. A high-confidence classification from such a model is a powerful indicator of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows PowerShell Event ID 4104
  - Endpoint command-line logs and PowerShell script block logs. Key locations for monitoring include user workstations and any servers where administrative scripts are run. Relevant GPOs for logging are managed on Domain Controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (process_creation_logs OR script_block_logs) | APPLY nlp_classifier | WHERE classification == 'Credential Harvesting' AND confidence > 0.9, ALERT.
- question: Has any process not on the approved allow-list attempted to read files from protected chat application data directories?
  context: This question focuses on unauthorized access to sensitive data stores. By defining an explicit allow-list of processes that are expected to access chat data (e.g., the chat client itself, system indexers), any other process attempting to read from these directories becomes highly suspicious. This method can effectively detect custom or unknown tools trying to access chat history or credential files.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 1
  - Endpoint file systems where chat client data is stored. Specific NAIs include user profile directories such as '%APPDATA%\Microsoft\Teams', '%APPDATA%\Slack', and '%LOCALAPPDATA%\Microsoft\Teams' on Windows workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_access_logs WHERE target_directory IN ('%APPDATA%\\Slack', '%APPDATA%\\Microsoft\\Teams') AND access_type == 'Read' AND process_name NOT IN (allow_list)
- question: Has a process accessed a chat data directory for the first time in the last 30 days?
  context: This question uses behavioral baselining to detect deviations from normal activity. Over time, a stable pattern of processes accessing chat directories will emerge. A process accessing one of these directories for the very first time represents an anomaly that could indicate the introduction of a new, potentially malicious tool on the endpoint. This approach helps find threats without relying on pre-defined signatures or allow-lists.
  answer_sources:
  - Windows Event ID 4663
  - Endpoint file systems where chat client data is stored. Specific NAIs include user profile directories such as '%APPDATA%\Microsoft\Teams', '%APPDATA%\Slack', and '%LOCALAPPDATA%\Microsoft\Teams' on Windows workstations.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: FOR each new_file_access_event, CHECK if process_name has accessed target_directory in last 30 days. IF first_time_access, ALERT.
- question: Have any file access events on chat data directories been identified as anomalous outliers by a clustering model?
  context: This question applies unsupervised machine learning to identify unusual file access patterns. By clustering 'normal' access events based on features like the process, user, and time of day, any event that doesn't fit into a cluster (i.e., is an outlier) can be flagged. This is effective at finding novel attack techniques that differ significantly from established benign behaviors.
  answer_sources:
  - Windows Event ID 4663
  - Endpoint file systems where chat client data is stored. Specific NAIs include user profile directories such as '%APPDATA%\Microsoft\Teams', '%APPDATA%\Slack', and '%LOCALAPPDATA%\Microsoft\Teams' on Windows workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_access_logs | APPLY dbscan_clustering_model | WHERE cluster_label == 'outlier', ALERT.
- question: Are any endpoints communicating with suspicious or typosquatted domains mimicking legitimate chat services?
  context: This question aims to detect command and control (C2) or data exfiltration channels masquerading as legitimate services. Adversaries may register domains like 'teams-login.com' or 'slack-auth.net' to trick users or evade simple network filters. Monitoring DNS and TLS records for connections to domains that are similar to, but not exactly matching, approved service domains can reveal these malicious communication attempts.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Network sensor data from egress points, including perimeter firewalls and network taps. DNS server logs, web proxy logs, and Cloud Access Security Broker (CASB) logs are also key NAIs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (dns_logs OR tls_logs) WHERE query_domain SIMILAR TO approved_chat_domains AND query_domain NOT IN approved_chat_domains_list, ALERT.
- question: Has any host exhibited a significant spike in the volume of data sent to approved chat services?
  context: This question seeks to identify bulk data exfiltration. While normal chat usage involves a steady flow of data, an adversary scraping chat history or uploading stolen files would likely generate a large, anomalous spike in outbound traffic. By establishing a baseline of normal data volume for each host and alerting on significant deviations (e.g., more than 3 standard deviations above the average), we can detect potential data theft.
  answer_sources:
  - Zeek conn.log
  - Network sensor data from egress points, including perimeter firewalls and network taps. DNS server logs, web proxy logs, and Cloud Access Security Broker (CASB) logs are also key NAIs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each host, CALCULATE daily_bytes_sent_to_chat_services. IF daily_bytes_sent > (30_day_avg + 3 * 30_day_stddev), ALERT.
- question: Have any hosts shown a statistically significant deviation from their normal communication patterns with chat services, as determined by a time-series model?
  context: This question uses a more sophisticated anomaly detection method to find subtle changes in behavior. A time-series model (like ARIMA or LSTM) learns the complex, hour-by-hour patterns of a user's communication (e.g., connection frequency, data volume). It can then predict the expected behavior and flag any real-time activity that falls outside the normal predicted range. This can detect attacks that are less obvious than a simple volume spike, such as a 'low and slow' data drip.
  answer_sources:
  - Zeek conn.log
  - Network sensor data from egress points, including perimeter firewalls and network taps. DNS server logs, web proxy logs, and Cloud Access Security Broker (CASB) logs are also key NAIs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each host_service_pair, APPLY time_series_model. IF observed_activity OUTSIDE 99%_prediction_interval, ALERT.