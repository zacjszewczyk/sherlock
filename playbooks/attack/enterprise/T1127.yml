name: T1127: Trusted Developer Utilities Proxy Execution
id: 69b8c2d1-0f4a-4b9e-9a6d-8f3c1e0b5d7a
description: This playbook helps investigate whether an adversary is using a trusted developer utility (e.g., MSBuild.exe, WinDbg.exe) to proxy the execution of malicious code, thereby bypassing application control defenses. Detection strategies include identifying developer utilities making network connections to known malicious destinations; finding executions with suspicious command-line arguments (e.g., base64, inline C#); observing anomalous child processes (e.g., powershell.exe); flagging executions by non-developer users or on non-development systems; and detecting a rapid sequence of a utility being dropped, executed, connecting to the network, and then deleted from a temporary location.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a trusted developer utility making a network connection to a known malicious destination or does its file hash match a known threat?
    context: This question aims to detect the most direct evidence of compromise, where a developer tool is either replaced by a malicious version or is being used to communicate with a known adversary command and control (C2) server. Correlating process execution with network activity and enriching this data with threat intelligence is a high-fidelity method for identifying malicious proxy execution.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Developer workstations, build servers, domain controllers, and network egress points/gateways.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process creation events (EVID 4688) for developer utilities (e.g., MSBuild.exe)
          JOIN with network connection logs (Zeek) on PID and timestamp
          LOOKUP process file hash in threat intelligence database
          LOOKUP destination IP/domain in C2 blocklist
          ALERT if hash or network destination is malicious
  - question: Is a trusted developer utility connecting to an unusually rare network destination or using an uncommon TLS fingerprint?
    context: Adversaries often use unique, short-lived infrastructure for C2 communications. Benign developer tools typically connect to common, well-known services. By identifying statistically rare destination IPs or TLS fingerprints (JA3/JA3S), we can uncover potential C2 channels that are not yet on public threat intelligence feeds. This is a form of anomaly detection.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Developer workstations, build servers, domain controllers, and network egress points/gateways.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each network connection from a developer utility:
            CALCULATE frequency of destination IP across all hosts (last 30 days)
            CALCULATE frequency of JA3/JA3S hash across all hosts (last 30 days)
            ALERT if destination IP or JA3/JA3S hash is in the 99th percentile for rarity
  - question: Can a machine learning model classify the execution of a developer utility as malicious based on its behavioral features?
    context: This question moves beyond simple rules to a more holistic, behavioral analysis. By training a model on features like command-line properties, parent process, user context, and network connection details, we can identify complex patterns of malicious activity that might evade individual IOC-based or anomaly detections. This provides a more robust and adaptable detection capability.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Developer workstations, build servers, domain controllers, and network egress points/gateways.
    range: last 90 days
    queries:
      - pseudocode: |
          EXTRACT features for developer utility executions (cmdline length/entropy, parent, user, IP reputation, port, duration, bytes, JA3/JA3S)
          INPUT features into pre-trained classification model
          ALERT if model classifies execution as malicious with high confidence
  - question: Is a trusted developer utility being executed with command-line arguments containing suspicious strings or file paths?
    context: Adversaries often embed malicious scripts or commands directly into the command line of a trusted utility. This question looks for specific keywords (like `FromBase64String`, `RoslynCodeTaskFactory`), signs of PowerShell abuse (`System.Management.Automation`), or usage of insecure file paths (like `C:\Users\Public` or temp directories) that are strong indicators of malicious proxy execution.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, particularly those not designated for software development; Configuration Management Database (CMDB) to identify asset roles.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process creation events (EVID 4688) for developer utilities
          FILTER command-line arguments using regex for keywords like 'FromBase64String', 'RoslynCodeTaskFactory', 'System.Management.Automation'
          FILTER command-line arguments for paths like 'C:\\Users\\Public\\', 'C:\\Temp\\', 'AppData\\Local\\Temp'
          ALERT on any match
  - question: Does the command line of a developer utility execution deviate significantly in length or complexity from its historical baseline?
    context: Malicious commands, especially those that are obfuscated or contain embedded scripts, are often longer and have higher entropy (more random-looking) than benign commands. By establishing a normal baseline for each specific utility, we can flag new executions that are statistical outliers, suggesting an attempt to hide malicious code within the command line.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, particularly those not designated for software development; CMDB to identify asset roles.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new developer utility execution:
            CALCULATE command-line length and Shannon entropy
            COMPARE to historical baseline (95th percentile) for that specific utility
            ALERT if length or entropy exceeds the baseline threshold
  - question: Has there been an anomalous spike in the frequency of developer utility executions on a specific host?
    context: While a single developer utility execution might be normal, a sudden, sharp increase in the number of executions on a host can indicate automated, script-driven malicious activity. This question uses time-series forecasting to model the expected daily execution count and alerts when the actual count significantly exceeds the prediction, catching potential widespread abuse.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, particularly those not designated for software development; CMDB to identify asset roles.
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL daily frequency of developer utility executions per host as a time series
          FORECAST expected frequency for the current day
          ALERT if actual execution count significantly exceeds the forecasted upper confidence interval
  - question: Did a trusted developer utility spawn an unexpected or disallowed child process?
    context: Developer utilities typically spawn a predictable set of child processes (e.g., compilers). An adversary might use a developer utility to launch other tools for lateral movement or execution, such as script interpreters (`powershell.exe`, `cmd.exe`) or network utilities (`certutil.exe`). This question uses a strict allowlist to detect any deviation from known-good parent-child relationships, which is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, focusing on process lineage from non-developer systems; Asset inventory databases to distinguish developer from non-developer systems.
    range: last 90 days
    queries:
      - pseudocode: |
          MONITOR parent-child process relationships (EVID 4688)
          FOR developer utility parent processes:
            CHECK if the child process is on a pre-defined allowlist (e.g., csc.exe)
            ALERT if child process is not on the allowlist, especially if it is powershell.exe, cmd.exe, certutil.exe, etc.
  - question: Did a trusted developer utility spawn a child process that is historically rare or has never been seen before?
    context: This question provides a more flexible, data-driven alternative to a static allowlist. By analyzing historical parent-child process data, we can identify relationships that are statistically anomalous. Spawning a child process that has never been seen before, or is seen very rarely, is a strong signal that the parent process's behavior has changed, possibly due to malicious misuse.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, focusing on process lineage from non-developer systems; Asset inventory databases to distinguish developer from non-developer systems.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new parent(dev utility)-child process event:
            LOOKUP historical frequency of this specific child process for this parent over the last 90 days
            ALERT if the child process has never been seen before or its frequency is in the bottom 1%
  - question: Does the process execution chain originating from a developer utility exhibit an anomalous structure?
    context: Adversary actions can create complex process trees that differ structurally from benign activity (e.g., deeper chains, unusual branching). This question involves modeling process lineage as a graph and using advanced techniques like graph neural networks to learn the 'normal' shape of these graphs. This allows for the detection of subtle but significant deviations in the entire execution subgraph, rather than just a single parent-child link.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers, focusing on process lineage from non-developer systems; Asset inventory databases to distinguish developer from non-developer systems.
    range: last 90 days
    queries:
      - pseudocode: |
          CONSTRUCT process lineage graphs per host
          INPUT subgraphs originating from developer utilities into a trained graph-based anomaly detection model (e.g., GNN)
          ALERT if a subgraph receives a high anomaly score
  - question: Was a trusted developer utility executed by a non-developer user, on a non-development machine, or spawned by an office application?
    context: Developer tools should be used by developers on development machines. Execution outside of this context is highly suspicious. This question checks for clear policy violations: a user from HR running MSBuild, a build server process being spawned from Microsoft Word, etc. These are strong indicators that the utility is being abused as part of an intrusion, likely originating from a phishing attack.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Human Resources user role database, Active Directory servers, CMDB for asset role categorization, all non-developer workstations, and production servers.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each developer utility execution (EVID 4688):
            JOIN with user group data (AD) and host role data (CMDB)
            ALERT if user is not in 'Developers' group OR host is not a 'Development' asset
            ALERT if parent process is an office application (e.g., WINWORD.EXE, OUTLOOK.EXE)
  - question: Was a developer utility spawned by a parent process that has historically been very unlikely to do so?
    context: This is a statistical approach to identifying anomalous parent-child relationships. While a rule might check for specific parents like `WINWORD.EXE`, this method calculates the probability of *any* observed parent spawning a developer utility. It can uncover unusual relationships that aren't explicitly forbidden but are statistically improbable, indicating a potential deviation from normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Human Resources user role database, Active Directory servers, CMDB for asset role categorization, all non-developer workstations, and production servers.
    range: last 90 days
    queries:
      - pseudocode: |
          CALCULATE historical conditional probability P(dev utility | parent process) over a 90-day baseline
          FOR each new execution of a dev utility:
            LOOKUP the calculated probability for its parent process
            ALERT if the probability is below a very low threshold (e.g., < 0.005)
  - question: Does the execution context (user, host, parent, time) of a developer utility deviate from the established norm for benign activity?
    context: This question uses an unsupervised machine learning model to create a multi-dimensional profile of "normal" developer utility usage. The model learns what constitutes a typical execution based on the user's role, the host's function, the parent process, and even the time of day. Any new execution that falls outside this learned profile is flagged as an outlier, providing a powerful way to detect novel or subtle abuse patterns.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Human Resources user role database, Active Directory servers, CMDB for asset role categorization, all non-developer workstations, and production servers.
    range: last 90 days
    queries:
      - pseudocode: |
          EXTRACT features for developer utility executions (user role, host role, parent process, time of day)
          INPUT features into a pre-trained one-class anomaly detection model (e.g., Isolation Forest)
          ALERT if the model classifies the event as an outlier/anomaly
  - question: Did a developer utility appear in a temporary location, execute, make a network connection, and then get deleted, all within a short time frame?
    context: This sequence of events is a classic signature of a "living off the land" binary (LOLBin) attack. An adversary drops a tool, uses it for C2 or another malicious purpose, and then immediately cleans up to evade detection. This question uses a stateful correlation rule to look for this specific, highly suspicious sequence of actions on a single host.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Windows Event ID 4663
      - Windows Event ID 4656
      - User workstations, particularly temporary file directories (%TEMP%, %APPDATA%), public writeable directories (C:\Users\Public), and network egress points.
    range: last 90 days
    queries:
      - pseudocode: |
          CREATE stateful rule to detect on a single host within 5 minutes:
          1. File create event for a dev utility in a temp path.
          2. Process create event for the same file path.
          3. Network connection from the new process ID.
          4. File delete event for the same file path.
          ALERT if all four events occur in sequence.
  - question: Was a developer utility created in and deleted from a temporary directory with an unusually short lifetime, especially when correlated with network activity?
    context: Automated attack scripts operate much faster than human users. A legitimate tool might exist for minutes, hours, or days. A malicious tool dropped for a single purpose might exist for only a few seconds. This question focuses on identifying executables with an extremely short lifespan in temporary locations, as this is characteristic of automated cleanup by malware or scripts.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Windows Event ID 4663
      - Windows Event ID 4656
      - User workstations, particularly temporary file directories (%TEMP%, %APPDATA%), public writeable directories (C:\Users\Public), and network egress points.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR executables in temp directories:
            CALCULATE lifetime (delete time - create time)
            FLAG developer utilities with a lifetime in the bottom 5th percentile (e.g., < 10 seconds)
            CORRELATE with an outbound network connection
            ALERT on match
  - question: Does a sequence of user and system events, including the execution of a developer utility, have a low probability of being generated by normal user behavior?
    context: This question models user activity as a sequence of states (e.g., 'file_create', 'process_exec'). A Hidden Markov Model (HMM) can learn the normal transition probabilities between these states from benign activity. Malicious, automated sequences often follow a rigid, improbable path that a trained HMM would identify as having a very low likelihood. This detects the unnatural "rhythm" of an attack script compared to a human.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Windows Event ID 4663
      - Windows Event ID 4656
      - User workstations, particularly temporary file directories (%TEMP%, %APPDATA%), public writeable directories (C:\Users\Public), and network egress points.
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL sequences of user/system events (file create, process exec, network conn, file delete) using a Hidden Markov Model (HMM) trained on benign data.
          SCORE new event sequences against the trained HMM.
          ALERT on sequences with a very low likelihood score, indicating an anomalous series of actions.