name: "T1574.004: Dylib Hijacking"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps investigate whether an adversary is leveraging Dylib Hijacking on macOS endpoints. This technique involves placing a malicious dynamic library (.dylib) in a location where it will be loaded by a legitimate application, leading to arbitrary code execution. The investigation focuses on detecting this activity when used for persistence via auto-starting applications, for privilege escalation by targeting SUID/GUID binaries, and for defense evasion by using trusted processes to execute malicious code. The playbook covers analyzing file creation events, dylib load patterns, process parent-child relationships, and anomalous network behavior originating from hijacked processes."
type: "technique"
related:
  - "TA0003: Persistence"
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a newly created dynamic library (dylib) malicious based on its hash or code signature?"
    context: "This question aims to detect the initial placement of a malicious dylib. Adversaries can achieve persistence by writing a malicious dylib to a location where a legitimate, auto-starting application will load from. By checking the file's hash against threat intelligence and examining its code signature, analysts can identify dylibs that are known-malicious, unsigned, ad-hoc signed, or signed by untrusted developers, which are common characteristics of hijacked libraries."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)"
      - "osquery file table (path, sha256)"
      - "osquery authenticode table"
      - "macOS endpoints, specifically LaunchAgent/LaunchDaemon plists in /Library/LaunchDaemons, /Library/LaunchAgents, ~/Library/LaunchAgents, and application bundles in /Applications/, ~/Applications/, and user-writable library paths like ~/Library/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          SEARCH dylib file creation events
          FOR each event:
            CALCULATE sha256_hash
            GET code_signature
            IF sha256_hash IN threat_intel_feed
            OR code_signature IN ('unsigned', 'ad-hoc', 'untrusted_developer')
            THEN ALERT (event_details)
  - question: "Has the set of dylibs loaded by an auto-starting application changed significantly from its historical baseline?"
    context: "This question seeks to identify dylib hijacking by detecting deviations from normal application behavior. By establishing a baseline of dylibs that an auto-starting application normally loads, analysts can spot when a new, unexpected dylib is introduced into its search path. A low Jaccard similarity score between the current dylib set and the baseline indicates a potential hijack."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)"
      - "osquery file table (path, sha256)"
      - "osquery authenticode table"
      - "osquery process_open_files table"
      - "macOS endpoints, specifically LaunchAgent/LaunchDaemon plists in /Library/LaunchDaemons, /Library/LaunchAgents, ~/Library/LaunchAgents, and application bundles in /Applications/, ~/Applications/, and user-writable library paths like ~/Library/."
    range: "last 30 days"
    queries:
      - tech: "pseudocode"
        query: |
          DEFINE baseline_dylibs for each auto-start app over 30 days
          ON new dylib load by auto-start app:
            GET current_dylibs_loaded
            CALCULATE jaccard_similarity(current_dylibs_loaded, baseline_dylibs)
            IF jaccard_similarity < 0.95 THEN ALERT
  - question: "Can machine learning predict if a dylib file write event is malicious based on its context?"
    context: "This question leverages a machine learning model to proactively identify high-risk dylib write events. The model analyzes features like the file path's randomness (entropy), the process responsible for the write (e.g., 'curl'), and the writability of the path to score the event's maliciousness. This helps automate detection of sophisticated placement techniques that might evade simpler rules."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)"
      - "osquery file table (path, sha256)"
      - "osquery authenticode table"
      - "macOS endpoints, specifically LaunchAgent/LaunchDaemon plists in /Library/LaunchDaemons, /Library/LaunchAgents, ~/Library/LaunchAgents, and application bundles in /Applications/, ~/Applications/, and user-writable library paths like ~/Library/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          ON dylib file write event:
            EXTRACT features (path_entropy, writing_process, is_user_writable, time_delta_to_app_launch)
            SCORE event with Random Forest model
            IF score > 0.9 THEN ALERT
  - question: "Is a process started by launchd (PID 1) loading a dylib from a user-writable directory?"
    context: "This question targets a common persistence pattern where a malicious dylib is placed in a non-standard, user-writable location like '/Users/Shared/' or '/tmp/'. Since system processes initiated by launchd should typically load libraries from protected system directories, loading one from a user-writable location is highly suspicious and indicative of a hijack."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_MMAP)"
      - "osquery process_open_files table"
      - "osquery processes table (for parent PID)"
      - "macOS endpoints, focusing on processes spawned by launchd (PID 1) and their file open/memory map events, specifically monitoring user-writable locations like /tmp/, /Users/Shared/, and user home directories."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          SEARCH for process events where parent_pid is 1
          FILTER for events loading a .dylib file
          IF dylib_path starts with '/Users/Shared/', '/tmp/', or '/Users/*/'
          AND process_name NOT IN allowlist
          THEN ALERT
  - question: "Is an auto-starting process loading a dylib from a statistically rare file path?"
    context: "This question uses environmental baselining to find outliers. By calculating the frequency of all dylib load paths across the entire organization, analysts can identify loads from paths that are exceptionally uncommon. An auto-starting process loading a library from a very rare path is a strong anomaly signal, suggesting an adversary is using an unusual location to evade detection."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_MMAP)"
      - "osquery process_open_files table"
      - "osquery processes table (for parent PID)"
      - "macOS endpoints, focusing on processes spawned by launchd (PID 1) and their file open/memory map events, specifically monitoring user-writable locations like /tmp/, /Users/Shared/, and user home directories."
    range: "last 30 days"
    queries:
      - tech: "pseudocode"
        query: |
          CALCULATE frequency of all dylib load paths globally over 30 days
          FOR each dylib load by a process with parent_pid 1:
            GET path_frequency_score
            IF path_frequency_score is in bottom 5th percentile THEN ALERT
  - question: "Does a graph-based model show a new, high-risk relationship between an auto-starting process and a dylib?"
    context: "This question applies graph analytics to detect anomalies in process-file interactions. A graph representing 'who loads what from where' is built from a baseline of normal activity. A new edge in the graph, such as one connecting a trusted auto-start process like 'CalendarAgent' to a dylib in a suspicious path like '~/Downloads/', represents a structural change in behavior and a potential hijack."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_MMAP)"
      - "osquery process_open_files table"
      - "osquery processes table (for parent PID)"
      - "macOS endpoints, focusing on processes spawned by launchd (PID 1) and their file open/memory map events, specifically monitoring user-writable locations like /tmp/, /Users/Shared/, and user home directories."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          MAINTAIN a graph of (process)-[loads_from]->(dylib) at (path)
          ON new dylib load event:
            IF the new edge connects an auto-start process to a dylib in a user-writable path
            AND edge did not exist in baseline
            THEN ALERT
  - question: "Is an auto-starting process, which normally doesn't use the network, making external network connections?"
    context: "This question helps detect when a hijacked process is used for command and control or data exfiltration. By maintaining a list of auto-starting processes that are not expected to make network connections, any attempt by them to communicate with an external IP address becomes a high-fidelity alert, suggesting their normal function has been subverted."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network egress points, DNS servers, and macOS endpoints (for process context)."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          DEFINE non-networking_process_allowlist
          SEARCH network connection logs
          FOR each connection:
            GET process_name from endpoint logs using timestamp and source_ip
            IF process_name IN non-networking_process_allowlist
            AND destination_ip is external
            THEN ALERT
  - question: "Is an auto-starting process exhibiting anomalous network behavior compared to its baseline?"
    context: "This question identifies subtle signs of hijacking by profiling the normal network activity of auto-starting processes. Even for processes that are expected to use the network, a significant deviation from their baseline—such as connecting to a new ASN, using a strange port, or transferring an unusually large amount of data—can indicate that the process has been compromised and is being used for malicious purposes."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network egress points, DNS servers, and macOS endpoints (for process context)."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each auto-start process:
            CREATE network baseline (dest_asn, dest_port, protocol, ja3, daily_volume)
            MONITOR new connections
            IF new connection features deviate significantly from baseline
            OR data volume > (average + 4 * std_dev)
            THEN ALERT
  - question: "Is an auto-starting application's network traffic volume significantly higher than its forecasted amount, especially after a system start?"
    context: "This question uses time-series forecasting to detect unexpected bursts of network activity, a potential sign of a hijacked process communicating with a C2 server or exfiltrating data. By modeling the expected traffic volume per hour, any observed traffic that dramatically exceeds the forecast's confidence interval, particularly right after a user logs in, can be flagged as a high-risk anomaly."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network egress points, DNS servers, and macOS endpoints (for process context)."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each auto-start app:
            TRAIN ARIMA model on hourly network traffic volume
            CONTINUOUSLY forecast expected volume
            GET real-time traffic volume
            IF real-time_volume > forecasted_volume_confidence_interval
            (especially within 1 hour of boot/login)
            THEN ALERT
  - question: "Was a dylib created by a non-root user in a world-writable directory just before a vulnerable SUID binary was executed?"
    context: "This question targets a specific privilege escalation sequence. An adversary with standard user permissions may write a malicious dylib to a shared location like '/tmp' and then trigger a vulnerable SUID-enabled program. The privileged program then inadvertently loads the malicious dylib, executing the adversary's code with elevated permissions. Correlating these two events within a short time window is key to detection."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "osquery suid_bin table"
      - "system.log"
      - "macOS endpoints, focusing on SUID/GUID binaries, privileged helper tools, and world-writable directories such as /tmp/ and /Users/Shared/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          DEFINE vulnerable_suid_binaries_list
          SEARCH for dylib creation events where user_id > 500 AND path is world-writable
          IF a process from vulnerable_suid_binaries_list is executed on same host within 60 seconds
          THEN ALERT
  - question: "Is a process running as root loading a dylib from a new or user-writable path not seen in its baseline?"
    context: "This question focuses on detecting privilege escalation by monitoring the integrity of root-level processes. These processes should be highly predictable. By baselining the legitimate dylibs they load, any deviation—especially loading a dylib from a user-writable path or a path never seen before—is a critical indicator that the root process has been hijacked to load malicious code."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "osquery suid_bin table"
      - "system.log"
      - "macOS endpoints, focusing on SUID/GUID binaries, privileged helper tools, and world-writable directories such as /tmp/ and /Users/Shared/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each process running with eUID 0:
            ESTABLISH baseline of legitimate dylib load paths
            MONITOR for dylib load events
            IF loaded_dylib_path NOT IN baseline
            AND (path is user-writable OR dylib_creation_time is recent)
            THEN ALERT
  - question: "Does a sequence of endpoint events, captured by an LSTM model, indicate a dylib-based privilege escalation?"
    context: "This question uses a sophisticated sequence-aware model (LSTM) to detect privilege escalation tactics. The model learns the normal sequences of process creations and file writes that occur on an endpoint. An anomalous sequence, such as a user process writing a dylib immediately followed by the execution of a privileged SUID binary, would be flagged by the model as a deviation from learned legitimate behavior."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "osquery suid_bin table"
      - "system.log"
      - "macOS endpoints, focusing on SUID/GUID binaries, privileged helper tools, and world-writable directories such as /tmp/ and /Users/Shared/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          TRAIN LSTM model on sequences of (process_exec, file_create) events
          FEED live event stream into model
          IF model flags a sequence as anomalous
          AND sequence matches (user_writes_dylib -> privileged_process_executes)
          THEN ALERT
  - question: "Did a standard user process write a dylib to a SIP-protected system directory?"
    context: "This question identifies a critical security boundary violation. System Integrity Protection (SIP) is designed to prevent modification of core system directories, even by the root user. A successful dylib creation in a path like '/System/Library/' by a non-root process (UID > 0) implies a SIP bypass or a severe system misconfiguration has been exploited, representing a high-severity privilege escalation event."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)"
      - "osquery file_events table"
      - "Protected macOS directories such as /System/, /Library/, /usr/bin/, /usr/sbin/, and privileged Application bundles in /Applications/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          SEARCH for file creation events
          IF file_name ends with '.dylib'
          AND file_path starts with '/System/', '/Library/', '/usr/lib/'
          AND process_euid > 0
          THEN CREATE CRITICAL ALERT
  - question: "Is a user process writing files to a directory path that is statistically rare for that user?"
    context: "This question uses user-specific behavioral baselining to spot anomalies. While a user writing to '/tmp' might be normal, that same user writing a dylib to a subdirectory of another user's home directory or a deep system path would be highly unusual. By identifying writes to paths that are rare for a specific user, analysts can uncover attempts to stage malicious files in unexpected locations as part of a privilege escalation attempt."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)"
      - "osquery file_events table"
      - "Protected macOS directories such as /System/, /Library/, /usr/bin/, /usr/sbin/, and privileged Application bundles in /Applications/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each user:
            BASELINE frequency of file write paths
            MONITOR new file write events
            IF write_path is in bottom 1% of frequency for that user
            AND file is a .dylib
            THEN ALERT
  - question: "Does a one-class SVM model classify a dylib creation in a system path by a user process as an anomaly?"
    context: "This question employs anomaly detection to find malicious file write activity that deviates from established norms. A One-Class SVM is trained on legitimate file modification events by non-root users to learn a 'boundary' of normal behavior. Any new file write, especially a dylib creation in a system directory, that falls outside this boundary is flagged as a potential exploit, providing a powerful way to detect novel or obfuscated privilege escalation techniques."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_CREATE)"
      - "osquery file_events table"
      - "Protected macOS directories such as /System/, /Library/, /usr/bin/, /usr/sbin/, and privileged Application bundles in /Applications/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          TRAIN One-Class SVM on legitimate file write events (path, process, extension)
          SCORE new file write events with the model
          IF model classifies event as anomaly
          AND event is dylib creation in system path by non-root user
          THEN ALERT
  - question: "Is a trusted, signed macOS process making a network connection to a known malicious destination?"
    context: "This question seeks to uncover defense evasion, where an adversary hijacks a trusted process (like Safari or a security tool) to blend in their C2 traffic. By cross-referencing network logs with threat intelligence feeds, a connection from a trusted Apple-signed binary to a malicious IP becomes a high-fidelity indicator that the trusted process has been compromised via dylib hijacking."
    answer_sources:
      - "Zeek conn.log (id.resp_h, ja3, ja3s)"
      - "Zeek dns.log (query, answers)"
      - "macOS Endpoint Security Framework logs (for process name and path)"
      - "Network egress points, DNS servers, and macOS endpoints running trusted, signed applications."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          SEARCH network logs for destination_ip in C2_threat_feed
          FOR each match:
            CORRELATE with endpoint logs to find source_process_name
            IF source_process_name is a trusted, signed binary (e.g., path starts with /System/Applications/)
            THEN CREATE CRITICAL ALERT
  - question: "Is a trusted process making a network connection that is statistically abnormal based on its multi-feature profile?"
    context: "This question uses advanced statistical analysis to find subtle signs of process hijacking. It creates a detailed baseline of normal network behavior for each trusted process, including destination ports, protocols, and TLS fingerprints (JA3). The Mahalanobis distance is then used to score how much a new connection deviates from this multi-dimensional norm. A high score indicates a significant anomaly, suggesting the process's behavior has been altered by malicious code."
    answer_sources:
      - "Zeek conn.log (id.resp_h, ja3, ja3s)"
      - "Zeek dns.log (query, answers)"
      - "macOS Endpoint Security Framework logs (for process name and path)"
      - "Network egress points, DNS servers, and macOS endpoints running trusted, signed applications."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each trusted process:
            CREATE network profile baseline (port, protocol, JA3, JA3S)
            FOR each new connection:
              CALCULATE Mahalanobis distance from baseline
              IF distance is high THEN ALERT
  - question: "Does an autoencoder model flag a network connection from a trusted application as anomalous?"
    context: "This question applies a deep learning approach to detect defense evasion. An autoencoder is trained to 'reconstruct' legitimate network connection patterns from trusted apps. When a hijacked process makes a malicious connection, its features (process, port, protocol, etc.) will differ from the training data. The autoencoder will fail to reconstruct this anomalous pattern accurately, resulting in a high reconstruction error and triggering an alert."
    answer_sources:
      - "Zeek conn.log (id.resp_h, ja3, ja3s)"
      - "Zeek dns.log (query, answers)"
      - "macOS Endpoint Security Framework logs (for process name and path)"
      - "Network egress points, DNS servers, and macOS endpoints running trusted, signed applications."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          TRAIN autoencoder on legitimate connection metadata
          FOR each new connection from a trusted app:
            CALCULATE reconstruction_error using the autoencoder
            IF reconstruction_error > threshold THEN ALERT
  - question: "Is a legitimate macOS application running from a user-writable directory instead of its proper installation path?"
    context: "This question detects a common setup for dylib side-loading. Adversaries often copy a legitimate, trusted application (like 'Safari' or 'Calculator') to a user-writable directory (like '~/Downloads'). They then place a malicious dylib in the same directory. When the copied application is executed, it loads the malicious dylib from its local path instead of the legitimate one. Detecting a trusted app running from an unusual location is a strong precursor to this attack."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "osquery process_events table (path, cmdline)"
      - "User-writable directories on macOS endpoints, such as ~/Downloads, ~/Documents, /Users/Shared/, and /tmp/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          DEFINE trusted_app_names (e.g., 'Safari', 'Calculator')
          SEARCH process execution events
          IF process_name IN trusted_app_names
          AND process_path is in a user-writable directory (e.g., /Users/*, /tmp/)
          THEN ALERT
  - question: "Is a known-good process executing from a path with unusually high entropy?"
    context: "This question aims to detect adversaries who randomize file paths to evade simple path-based detection rules. While a process like 'Safari' normally runs from a predictable, low-entropy path (e.g., '/System/Applications/Safari.app/...'), an adversary might place it in a deeply nested, randomized directory to hide it. A high path entropy score for a known-good process name is a strong indicator of such evasive staging."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "osquery process_events table (path, cmdline)"
      - "User-writable directories on macOS endpoints, such as ~/Downloads, ~/Documents, /Users/Shared/, and /tmp/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each process execution:
            CALCULATE Shannon entropy of process_path
            GET baseline entropy for that process_name
            IF path_entropy > 99th percentile for that process_name THEN ALERT
  - question: "Does a clustering algorithm identify a small, dense group of anomalous process executions?"
    context: "This question uses unsupervised machine learning to find outliers that rule-based methods might miss. By clustering process executions based on features like path, parent process, and user, the DBSCAN algorithm can automatically group normal activities into large clusters. Small, isolated clusters often represent rare and suspicious behaviors, such as a trusted application being executed from a strange location by an unusual parent process, which is a hallmark of a side-loading attack."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC)"
      - "osquery process_events table (path, cmdline)"
      - "User-writable directories on macOS endpoints, such as ~/Downloads, ~/Documents, /Users/Shared/, and /tmp/."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          CLUSTER process execution events using DBSCAN on features (path, parent_name, user_id)
          REVIEW small, dense clusters flagged as anomalies
          IF cluster represents trusted app in unusual location THEN ALERT
  - question: "Is a typically non-network-facing application (like Calculator) making network connections or spawning a shell?"
    context: "This question identifies blatant behavioral anomalies that indicate a process hijack. Applications like TextEdit or Calculator have no legitimate reason to initiate network connections or spawn shell processes (bash, zsh). If such an event occurs, it is a very high-confidence indicator that the application's code execution flow has been hijacked by a malicious dylib to perform unauthorized actions."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_FORK)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "macOS endpoints and network egress points."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          DEFINE non-networking_app_list ('Calculator.app', 'TextEdit.app')
          SEARCH for process events where parent_process in non-networking_app_list
          IF child_process is in ('zsh', 'bash', 'sh', 'osascript') THEN ALERT
          SEARCH network logs for connections from processes in non-networking_app_list
          IF connection to external IP exists THEN ALERT
  - question: "Is a non-network-facing application spawning a statistically rare child process?"
    context: "This question looks for subtler signs of hijacking by analyzing process lineage. By creating a frequency distribution of all parent-child process relationships, analysts can spot when an application like 'Font Book' spawns a child process it has never spawned before, or one that is extremely rare (like 'curl' or 'python'). This deviation from normal process creation behavior suggests the parent has been compromised."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_FORK)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "macOS endpoints and network egress points."
    range: "last 30 days"
    queries:
      - tech: "pseudocode"
        query: |
          BASELINE parent-child process relationships over 30 days
          FOR each new process creation event:
            IF parent is non-network-facing app
            AND child process is statistically rare for that parent (<0.01% frequency)
            THEN ALERT
  - question: "Does a graph-based model detect the creation of an anomalous process parent-child relationship?"
    context: "This question uses a graph neural network (like GraphSAGE) to understand the normal context of process relationships. The model learns embeddings that represent a process's typical behavior within the process lineage graph. When a new, unexpected relationship is formed—such as an edge appearing between 'TextEdit' and 'zsh'—the model flags it as a contextual anomaly, indicating a likely hijack that simpler frequency analysis might miss."
    answer_sources:
      - "macOS Endpoint Security Framework (ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_FORK)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "macOS endpoints and network egress points."
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          TRAIN GraphSAGE model on legitimate process parent-child graph
          MONITOR for new process creation events (new edges)
          IF a new edge (e.g., TextEdit -> zsh) is flagged as anomalous by the model
          THEN ALERT