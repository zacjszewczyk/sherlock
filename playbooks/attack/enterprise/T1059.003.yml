name: "T1059.003: Windows Command Shell"
id: "1e8a9b0f-7c1d-4e8a-9b0f-7c1d4e8a9b0f"
description: |
  This playbook helps investigate whether an adversary has used the Windows command shell (cmd.exe) for execution. It covers various detection strategies, including identifying command lines that contain known indicators of compromise (IOCs) like malicious IPs or hashes, detecting obfuscated commands through pattern matching and entropy analysis, and spotting unusual parent processes (e.g., Microsoft Office applications) spawning cmd.exe. The playbook also focuses on behavioral anomalies, such as a rapid succession of reconnaissance commands, direct outbound network connections from cmd.exe, and the execution of batch files recently written to temporary or public directories. The goal is to uncover malicious use of the command shell, from simple IOC-based threats to more advanced, obfuscated, and behaviorally anomalous activity.
type: "technique"
related:
  - "TA0002: Execution"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are there any cmd.exe process command lines containing known indicators of compromise (IOCs)?"
    context: |
      This question aims to find direct evidence of known malicious activity. Adversaries may use cmd.exe to run commands that reference malicious IP addresses, domains, or files. By extracting these artifacts from command lines and comparing them against high-confidence threat intelligence, analysts can quickly identify and confirm a compromise with a low false-positive rate.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "All Windows Endpoints and Servers"
      - "DNS and Web Proxy logs"
      - "Threat Intelligence Platform feeds"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events WHERE process_name = 'cmd.exe'
          | EXTRACT artifacts (IPs, domains, hashes) from command_line
          | LOOKUP artifacts in threat_intelligence_feed
          | RETURN events with matching artifacts
  - question: "Have any rare domains been observed in cmd.exe command lines?"
    context: |
      This question helps uncover unknown or novel threats by focusing on statistical rarity. Legitimate software and administrative activities typically involve a set of common, high-prevalence domains. A domain that appears very infrequently across the enterprise, especially when executed from a command line, is suspicious and could be part of a new C2 infrastructure. Corroborating this with DNS logs helps confirm if the domain is truly rare network-wide.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek dns.log"
      - "All Windows Endpoints and Servers"
      - "DNS and Web Proxy logs"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events WHERE process_name = 'cmd.exe'
          | EXTRACT domains from command_line
          | CALCULATE prevalence of each domain across the enterprise over 30 days
          | RETURN commands with domains below a low percentile threshold
  - question: "Have any cmd.exe command lines been classified as malicious by a string classification model?"
    context: |
      This question leverages machine learning to detect malicious commands that may not contain known IOCs or use obvious obfuscation. A model trained on the characteristics of thousands of malicious and benign commands can identify subtle patterns and combinations of strings that indicate malicious intent, providing a proactive and scalable detection method.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          STREAM process_creation_events WHERE process_name = 'cmd.exe'
          | APPLY string_classification_model to command_line
          | RETURN commands classified as malicious with high probability
  - question: "Are there any cmd.exe command lines that exhibit known obfuscation patterns?"
    context: |
      Adversaries frequently obfuscate commands to evade simple keyword-based detections. This question focuses on identifying the tell-tale signs of obfuscation, such as excessive use of carets (`^`), string construction with environment variables, or redirection to `nul`. Detecting these patterns is a strong indication that an actor is attempting to hide their actions.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events WHERE process_name = 'cmd.exe'
          | APPLY a library of regex for known obfuscation patterns to the command_line
          | RETURN events where the command_line matches a pattern
  - question: "Are there any cmd.exe command lines with unusually high character entropy?"
    context: |
      This question provides a way to detect obfuscated or encrypted commands without relying on specific patterns. Obfuscated commands often have a higher degree of character randomness (entropy) than legitimate commands. By establishing a baseline for normal entropy in an environment, commands that are statistical outliers can be flagged for review, helping to uncover novel obfuscation techniques.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events WHERE process_name = 'cmd.exe'
          | CALCULATE character_entropy for each command_line
          | ESTABLISH baseline entropy from historical data
          | RETURN commands with entropy scores exceeding a high percentile threshold (e.g., 95th)
  - question: "Are there any cmd.exe command lines that fall into anomalous clusters based on their structural features?"
    context: |
      This question uses unsupervised machine learning to find suspicious commands that "don't look like the others." By grouping all command lines based on features like length, character counts, and n-grams, most commands will form large, dense clusters representing normal activity. Small, isolated clusters are anomalous and likely represent malicious or at least non-standard activity worth investigating.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events WHERE process_name = 'cmd.exe'
          | CREATE feature_vectors for all command_lines (length, char_counts, entropy, etc.)
          | CLUSTER the vectors using an algorithm like DBSCAN
          | RETURN commands belonging to small, sparse, or outlier clusters
  - question: "Has a single parent process rapidly spawned multiple cmd.exe instances to run common reconnaissance commands?"
    context: |
      This question targets a common adversary behavior: running a quick series of discovery commands (`whoami`, `ipconfig`, `net user`, etc.) to orient themselves on a newly compromised host. Detecting a burst of these commands from a single parent process within a short time window is a strong indicator of active, hands-on-keyboard reconnaissance.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events where child_process = 'cmd.exe' and command_line contains discovery_command
          | GROUP by ParentProcessID over a 5-minute window
          | COUNT distinct discovery commands per group
          | RETURN groups where the count is >= 3
  - question: "Has any user executed a statistically rare sequence of commands?"
    context: |
      This question aims to detect deviations from established user behavior. While a single command might be benign, a sequence of commands may be highly anomalous for a specific user or their peer group. By baselining normal command sequences, this method can flag an accountant running commands typically only seen from a developer, or any user running a sequence for the very first time.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each user:
          | BASELINE frequency of 3-command sequences from historical process_creation_events
          | MONITOR new command sequences
          | RETURN any sequence that is statistically rare or has never been seen for that user/peer group
  - question: "Have any observed sequences of user commands been flagged as anomalous by a sequence prediction model?"
    context: |
      This is an advanced technique for detecting anomalous user behavior. By modeling command execution as a sequence (using a Markov chain or LSTM), we can learn the normal transition probabilities between commands for a user. A sequence that has a very low probability of occurring according to the model is highly suspicious and could indicate an account takeover or malicious insider.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each user:
          | TRAIN a sequence model (e.g., Markov chain) on their historical command activity
          | FOR each new command, calculate the probability of the current sequence
          | RETURN any sequence with a probability below a learned threshold
  - question: "Has cmd.exe been launched by a process not typically associated with command-line activity, such as an Office application or web browser?"
    context: |
      This question targets a very common initial access and execution pattern. It is highly irregular for applications like Microsoft Word, Excel, Outlook, or web browsers to spawn a command shell. An alert on this activity is a high-fidelity indicator that a user likely opened a malicious document or visited a compromised website.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows workstations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events WHERE child_process_name = 'cmd.exe'
          | FILTER where parent_process_name is in [WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, OUTLOOK.EXE, chrome.exe, firefox.exe, AcroRd32.exe]
          | RETURN all matching events
  - question: "Has cmd.exe been launched by a parent process that has rarely or never launched it before across the enterprise?"
    context: |
      This question moves beyond a static watchlist of parent processes to a dynamic, learned approach. By baselining all parent-child relationships across the environment, we can detect when a process launches cmd.exe for the first time, or very rarely. This can uncover novel attack vectors that don't use the common Office-based lures.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows workstations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CALCULATE frequency of all parent-child process pairs over the last 90 days
          | SEARCH for new process_creation_events where child_process_name = 'cmd.exe'
          | RETURN events where the parent-child pair frequency is below a low threshold (e.g., 1st percentile) or is new
  - question: "Have any cmd.exe process creation events been classified as suspicious by a parent-child relationship model?"
    context: |
      This question applies machine learning for a more nuanced detection of suspicious cmd.exe launches. A model can consider a wide range of features—not just the parent name, but its file path, the user context, logon type, etc.—to generate a risk score. This allows for the detection of suspicious events that might not be caught by simple frequency analysis alone.
    answer_sources:
      - "Windows Event ID 4688"
      - "All Windows workstations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          STREAM process_creation_events where child_process_name = 'cmd.exe'
          | EXTRACT features (parent_name, parent_path, user_context, etc.)
          | APPLY classification_model to the feature set
          | RETURN events that are classified as 'suspicious' with high confidence
  - question: "Has a cmd.exe process been observed making a direct outbound network connection to an external IP address?"
    context: |
      The command shell itself (cmd.exe) should not be making outbound network connections. This behavior is a strong indicator of a C2 channel or data exfiltration. This question seeks to find direct proof of this activity by correlating process creation events for cmd.exe with network connection events originating from the same process ID.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 5156"
      - "Zeek conn.log"
      - "Network egress points"
      - "Endpoints and servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          JOIN (process_creation events where process_name='cmd.exe') with (network_connection events) on ProcessID
          | FILTER where destination_ip is external and not whitelisted
          | RETURN correlated events
  - question: "Has a cmd.exe process made a network connection to a geographically or organizationally rare destination?"
    context: |
      This question adds context to network connections from cmd.exe. Even if some outbound traffic is expected, a connection to a country or Autonomous System (ASN) that the host has never contacted before is highly suspicious. This helps prioritize alerts and can point to a new or different C2 infrastructure than previously observed.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network egress points"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH network_connections where process_name = 'cmd.exe'
          | ENRICH with GeoIP and ASN data for destination_ip
          | BASELINE destination countries/ASNs per host
          | RETURN connections to a country/ASN that is rare or new for that host
  - question: "Has there been an anomalous spike in the volume of outbound data from a cmd.exe process?"
    context: |
      This question focuses on detecting data exfiltration. While a C2 connection from cmd.exe might involve small amounts of data, a large, sudden spike in outbound data volume is a significant anomaly. Applying time-series analysis to the byte count of these connections can effectively detect when a large amount of data is being transferred out of the network via a command shell.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network egress points"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          AGGREGATE outbound_bytes from 'cmd.exe' network connections over 5-minute intervals
          | APPLY time-series anomaly detection model (e.g., SARIMA)
          | RETURN intervals with significant positive anomalies (spikes)
  - question: "Has a batch file been written to a temporary or world-writable directory and then executed shortly after?"
    context: |
      This question targets the common adversary tactic of "living off the land" by dropping and executing scripts. Adversaries often write batch files (.bat, .cmd) to non-standard, world-writable locations like %TEMP% or C:\Users\Public and then immediately execute them. Correlating a file write event with a subsequent process execution of that same file is a high-fidelity indicator of this technique.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "User profile directories, temporary file locations, and public folders"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MONITOR for file_write events (4663) where object_name ends in .bat/.cmd and is in a high-risk directory
          | IF a write is found, look for a process_creation event (4688) for the same file path within 2 minutes
          | RETURN any correlated write-then-execute pairs
  - question: "Have any newly created and executed batch files had filenames with unusually high entropy?"
    context: |
      This question helps detect malware that programmatically generates random filenames for its scripts to evade signature-based detection. A filename like 'uwhf73gd.bat' has a much higher character randomness (entropy) than a human-created one like 'install.bat'. High filename entropy for an executed script is a strong signal of automation and malicious intent.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "User profile directories and temporary file locations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MONITOR for file_creation events (4663) for .bat/.cmd files
          | CALCULATE Shannon entropy of the filename
          | IF entropy is above a baseline threshold AND the file is executed (4688), RETURN the event
  - question: "Has a batch file been created and executed in a file path that is classified as suspicious?"
    context: |
      This question uses machine learning to assess the "suspiciousness" of a script's location. Rather than relying on a simple list of "bad" directories, a model can learn from features of the entire file path (e.g., path depth, presence of temp-like tokens, directory permissions) to score how likely it is that a script in that location is malicious. This provides a more robust and adaptable method for detecting dropped scripts.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "User profile directories and temporary file locations"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MONITOR for executed (.bat/.cmd) files (4688)
          | EXTRACT features from the file's full path
          | APPLY a pre-trained path classification model
          | RETURN events where the file path is classified as 'suspicious' with high confidence