name: T1485.001: Lifecycle-Triggered Deletion
id: 9e1d8a1c-7f5b-4d6e-8b0a-3c9f8e7d6c5b
description: Investigates whether an adversary has impacted data availability or integrity by deleting cloud storage data. This is achieved by looking for indicators of lifecycle-triggered deletion, such as API calls or CLI executions that create or modify storage lifecycle policies with immediate or short-term deletion rules. The playbook also examines sequences of reconnaissance followed by policy modification, unexpected drops in network traffic to storage destinations, and connections to cloud API endpoints from unauthorized hosts or at unusual times.
type: technique
related:
- TA0040: Impact
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any cloud storage lifecycle policies been created or modified via API with an immediate or short-term deletion rule (e.g., 1 day or less)?
  context: This question seeks to identify direct attempts by an adversary to delete data by abusing cloud storage lifecycle policies. By setting a very short expiration period, an attacker can trigger the automated deletion of vast amounts of data, causing significant impact on availability. Detecting these specific API calls (e.g., AWS 'PutBucketLifecycleConfiguration') is a direct way to find this malicious activity.
  answer_sources:
  - AWS CloudTrail
  - Azure Activity Log
  - GCP Audit Log
  - Cloud Provider Management Plane
  - Log Aggregation Systems (SIEM)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH cloud_audit_logs WHERE (api_call IN ('PutBucketLifecycleConfiguration', 'Set-AzStorageBlobInventoryPolicy', 'storage.buckets.patch')) AND (lifecycle_rule_action IN ('Delete', 'Expiration')) AND (lifecycle_expiration_days <= 1)
- question: Has a user who rarely modifies lifecycle policies suddenly performed such an action, or has a lifecycle policy modification originated from an unusual geographic location?
  context: This question aims to find anomalous behavior that might indicate a compromised account being used for destructive purposes. Legitimate administrators typically have established patterns of behavior. A sudden, uncharacteristic modification of a critical setting like a lifecycle policy, especially from a novel location, is a strong indicator of malicious intent.
  answer_sources:
  - AWS CloudTrail
  - Azure Activity Log
  - GCP Audit Log
  - Cloud Provider Management Plane
  - Log Aggregation Systems (SIEM)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH cloud_audit_logs FOR lifecycle_policy_modifications | PROFILE frequency by user | ALERT if user_frequency < 10th_percentile;
      SEARCH cloud_audit_logs FOR lifecycle_policy_modifications | PROFILE source_ip_geolocation by user over 90 days | ALERT if current_geolocation is new for user
- question: Can machine learning models identify any lifecycle policy modifications that are classified as highly malicious based on historical data and event features?
  context: This question leverages machine learning to move beyond simple rules and statistics. By training a model on a rich set of features (user, IP, time, parameters), it can learn the subtle, complex patterns that differentiate normal administrative work from malicious actions. This approach helps detect sophisticated attacks that might evade simpler detection methods by flagging events with a high probability of being malicious.
  answer_sources:
  - AWS CloudTrail
  - Azure Activity Log
  - GCP Audit Log
  - Cloud Provider Management Plane
  - Log Aggregation Systems (SIEM)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY ML_model to cloud_audit_logs with features (user, source_ip, time_of_day, user_agent, api_parameters) | FILTER for lifecycle_modification_events | ALERT if malicious_score > threshold
- question: Has a command-line interface (CLI) process been used to configure a cloud storage lifecycle policy with an expiration of 1 day or less?
  context: This question looks for evidence of lifecycle policy abuse originating from the command line on an endpoint. Adversaries may gain access to a host with cloud credentials and use CLIs (e.g., 'aws.exe', 'az.exe') to execute their attack. Monitoring process execution logs (like Windows Event ID 4688) for specific commands and parameters related to immediate data deletion is crucial for detection.
  answer_sources:
  - Windows Event ID 4688
  - Endpoints of developers and cloud administrators
  - CI/CD pipeline servers
  - Virtual machine instances with cloud SDKs installed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs WHERE (process_name IN ('aws.exe', 'az.exe', 'gcloud.exe')) AND (command_line CONTAINS 'lifecycle-configuration' AND command_line CONTAINS ('Days:1', 'Days:0'))
- question: Has a user set a lifecycle expiration value that is a statistical outlier compared to their own historical behavior or organizational norms?
  context: This question seeks to identify anomalous parameter usage that could signal malicious intent. An administrator might typically set lifecycles for 30 or 90 days. If that same user, or any user, suddenly sets a value of 0 or 1, it's a significant deviation. This statistical approach helps catch abuse even when the action itself is performed by an authorized user.
  answer_sources:
  - Windows Event ID 4688
  - Endpoints of developers and cloud administrators
  - CI/CD pipeline servers
  - Virtual machine instances with cloud SDKs installed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE baseline of 'Days' values in lifecycle commands per user | ALERT if new command's 'Days' value is > 2 standard deviations below user's average OR in bottom 1st percentile of all org values
- question: Has an anomaly detection model identified any unusual CLI-based lifecycle modifications?
  context: This question applies machine learning to endpoint process data to find anomalous CLI executions. By modeling features like the user, host, command, time of day, and specific parameter values, an Isolation Forest or similar model can identify outlier events that don't fit the pattern of normal administrative activity, such as a non-admin account setting an unusually short lifecycle.
  answer_sources:
  - Windows Event ID 4688
  - Endpoints of developers and cloud administrators
  - CI/CD pipeline servers
  - Virtual machine instances with cloud SDKs installed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY anomaly_detection_model on CLI execution data with features (user, host, command_type, is_off_hours, lifecycle_day_value) | ALERT on outlier events
- question: Has a cloud storage reconnaissance command been followed by a lifecycle policy modification command from the same host within a short time window (e.g., 30 minutes)?
  context: This question aims to detect a common attack pattern: 'look then leap'. An adversary will often first list storage buckets ('aws s3 ls') to identify a target before executing the destructive action ('put-bucket-lifecycle-configuration'). Correlating these two events in a short sequence from the same source is a high-fidelity indicator of targeted, malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoints of developers and cloud administrators
  - Network Egress Points (Firewalls/Proxies)
  - Log Aggregation Systems (SIEM)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events where (command CONTAINS 'ls' or 'get-bucket-lifecycle') is followed by (command CONTAINS 'put-bucket-lifecycle-configuration') from same source_host within 30 minutes
- question: Has a user executed a sequence of storage commands that has a very low probability of occurring based on their role's normal workflow?
  context: This question uses a Markov chain model to understand normal administrative workflows. For example, a developer might list buckets, download a file, then upload a new version. A sequence of listing buckets and then immediately modifying a lifecycle policy might be a very low-probability transition. Alerting on such improbable sequences helps detect deviations from established, safe procedures.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoints of developers and cloud administrators
  - Network Egress Points (Firewalls/Proxies)
  - Log Aggregation Systems (SIEM)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL command sequences with Markov chains per user_role | CALCULATE transition probability between 'recon' and 'modify' commands | ALERT if sequence occurs with probability < 5%
- question: Has a sequence-based machine learning model detected an anomalous 'sentence' of CLI commands?
  context: This question treats sequences of CLI commands like sentences, where a model (like an RNN or LSTM) learns the 'grammar' of normal administrative sessions. It can then flag command sequences that are grammatically incorrect or nonsensical from a security perspective, such as reconnaissance immediately followed by a destructive action without any intervening steps, which is highly indicative of an attack.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoints of developers and cloud administrators
  - Network Egress Points (Firewalls/Proxies)
  - Log Aggregation Systems (SIEM)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY sequence_anomaly_model (RNN/LSTM) to user command sessions | ALERT on sessions with high anomaly scores or improbable sequences
- question: Has a critical backup data flow to cloud storage stopped unexpectedly?
  context: This question provides an indirect but powerful way to detect data destruction. If a critical process, like a database backup, is expected to write data to a cloud bucket every 12 hours, the absence of that network connection is a major red flag. This 'heartbeat' rule can alert an organization that data is no longer being written, possibly because the destination bucket or its contents have been deleted.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls/Proxies)
  - Servers responsible for backups and log shipping
  - Application servers writing to cloud storage
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR network connections from known backup_server to cloud_storage_fqdn | ALERT if no connection is seen for > 12 hours
- question: Has network traffic volume to a critical cloud storage bucket dropped significantly below its established baseline?
  context: This question looks for a sustained, anomalous drop in data flow volume. By establishing a statistical baseline (e.g., mean and standard deviation) of hourly traffic to a cloud bucket, you can detect when the volume drops significantly below the normal range. This could indicate that a lifecycle policy has begun deleting objects, thus reducing the total storage and associated traffic.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls/Proxies)
  - Servers responsible for backups and log shipping
  - Application servers writing to cloud storage
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE 30-day rolling baseline of hourly traffic volume (bytes_out) to critical_storage_bucket | ALERT if volume is < (mean - 3 * std_dev) for 3 consecutive hours
- question: Has a time-series forecasting model predicted a significant, unexplained drop in traffic to a cloud storage destination?
  context: This is a more advanced statistical method for detecting data flow interruptions. A time-series model (like ARIMA or Prophet) learns the complex patterns of traffic, including daily and weekly seasonality. It can then predict the expected traffic volume for the next hour. An alert is generated if the actual traffic falls far outside the model's prediction, indicating a deviation that is not explained by normal fluctuations.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls/Proxies)
  - Servers responsible for backups and log shipping
  - Application servers writing to cloud storage
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN time-series model (ARIMA/Prophet) on traffic volume to cloud storage | PREDICT expected volume for next hour | ALERT if actual volume is significantly outside the prediction's confidence interval
- question: Has a connection to a cloud management API endpoint originated from a host or user not on a predefined allowlist?
  context: This question focuses on access control enforcement. By maintaining a strict allowlist of which hosts and users are authorized to access sensitive cloud management APIs, any connection from an unlisted source is immediately suspicious. This is a straightforward and effective way to detect attempts to use compromised credentials or systems to manage cloud resources.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - AWS CloudTrail
  - Network Egress Points (Firewalls/Proxies)
  - Domain Controllers and Authentication Servers
  - Endpoints of developers and cloud administrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN allowlist of authorized (source_ip, user_account) for cloud_management_endpoints | ALERT on any connection to those endpoints NOT in the allowlist
- question: Has an administrative user connected to a cloud management API outside of their normal, established working hours?
  context: This question aims to detect anomalous user behavior based on timing. Most administrative users have a regular work schedule. By profiling their connection times (from VPN, workstation logon, etc.), you can establish a baseline for their 'normal' hours. An API connection made at 3 AM by a user who always works 9-to-5 is highly suspicious and could indicate a compromised account.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - AWS CloudTrail
  - Network Egress Points (Firewalls/Proxies)
  - Domain Controllers and Authentication Servers
  - Endpoints of developers and cloud administrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      PROFILE API connection times for each admin user | DEFINE 'normal' hours using percentile analysis (e.g., 5th to 95th percentile) | ALERT if connection occurs outside this window for that user
- question: Has a machine learning clustering model identified a cloud API connection as an anomaly?
  context: This question uses unsupervised machine learning to find unusual connections without predefined rules. A clustering algorithm like DBSCAN can group together connections based on features like source IP, destination, user agent, and time. Connections that don't fit into any existing 'normal' cluster are flagged as anomalies, which could represent a new, unauthorized access method or a compromised host.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - AWS CloudTrail
  - Network Egress Points (Firewalls/Proxies)
  - Domain Controllers and Authentication Servers
  - Endpoints of developers and cloud administrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY clustering algorithm (DBSCAN) on connection data features (source_ip, destination_fqdn, user_agent, time_of_day) | ALERT on any connection that does not fall into a known cluster (is an outlier)