name: T1055: Process Injection
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps analysts investigate whether an adversary is leveraging process injection (T1055) for privilege escalation or defense evasion. It provides questions to detect various injection techniques, such as a malicious process creating a remote thread in a higher-privileged process, rapid memory-write-then-thread-create sequences, integrity level violations, and post-injection behavior like unexpected network connections from system processes. It also covers evasion indicators like the use of malicious named pipes, loading of unsigned or rare DLLs, DLLs loaded from non-standard paths, and network activity from normally quiet processes.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process with a known malicious hash creating a remote thread in or accessing the memory of a critical system process?
    context: This question aims to detect a high-confidence indicator of malicious process injection. By correlating process creation events (to get the file hash) with remote thread creation or process access events, we can identify when a process confirmed as malicious by threat intelligence directly manipulates a high-value system process (like lsass.exe). A successful match is a strong signal of an attempt to escalate privileges or steal credentials.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 8
      - Windows Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations
      - Standard User Endpoints
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon | JOIN (EventID=1) with (EventID=8 OR EventID=10) on ProcessGUID | WHERE SourceImageHash IN ThreatIntelFeed AND TargetImage IN CriticalProcessList
  - question: Are there statistically rare or anomalous source-target process interaction pairs involving remote thread creation or process access?
    context: Adversaries often inject into processes in ways that are not typical for a normal enterprise environment. This question focuses on identifying these unusual interactions by baselining all source-target process pairs. An alert for a pair that is statistically rare (e.g., in the 1st percentile of frequency) suggests a novel and potentially malicious behavior that deviates from established norms, especially when a high-integrity process is the target.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations
      - Standard User Endpoints
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon (EventID=8 OR EventID=10) | STATS count by SourceImage, TargetImage | IDENTIFY pairs with count below 1st_percentile_threshold
  - question: Can a machine learning model identify malicious process injection events based on process names, access rights, and executable prevalence?
    context: This question proposes an advanced, model-based approach. By training a supervised classification model on known good and bad process interaction events, the system can learn the subtle characteristics of malicious behavior. Features like the names of the source and target processes, the specific memory access rights requested, and how common the source executable is across the enterprise can be powerful predictors for identifying new, previously unseen injection attacks.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 8
      - Windows Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations
      - Standard User Endpoints
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SCORE events from Sysmon (EventID=8, EventID=10) using ML_Model(features=[SourceImage, TargetImage, GrantedAccess, SourcePrevalence]) | ALERT where score > confidence_threshold
  - question: Has a process gained memory write access and immediately created a remote thread in the same target process within a sub-second window?
    context: This specific sequence of events—gaining write access to a process's memory and then creating a thread in it almost instantaneously—is a classic signature of an automated process injection tool. This question aims to detect this programmatic behavior by creating a stateful rule that looks for this tight temporal correlation, which is highly unlikely to occur during benign operations.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations
      - Standard User Endpoints
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon | SEQUENCE by SourceProcessGUID, TargetProcessGUID [EventID=10 with WriteAccess] within 1s [EventID=8] | ALERT
  - question: Is the time delta between a process gaining write access and creating a remote thread a statistical outlier?
    context: This question uses statistical analysis to find programmatic injection sequences that may not be caught by a fixed time window. By analyzing the distribution of time delays between memory access and thread creation events for all processes, we can identify sequences that are abnormally fast (e.g., more than 3 standard deviations below the mean). This anomaly detection approach can uncover sophisticated injection tools that are optimized for speed.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations
      - Standard User Endpoints
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: CALC time_delta between (EventID=10 with WriteAccess) and (EventID=8) per ProcessGUID | STATS mean, stdev of time_delta | ALERT if time_delta < (mean - 3*stdev)
  - question: Can a sequence-aware model detect anomalous chains of process interactions indicative of injection?
    context: This question proposes using advanced machine learning models like RNNs or HMMs that are designed to understand sequences. By learning the normal sequences of process interactions on endpoints, these models can identify when a new, low-probability sequence occurs, such as an unexpected ProcessAccess followed by CreateRemoteThread. This behavioral approach can detect novel injection methods that don't match predefined rules.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations
      - Standard User Endpoints
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: STREAM Sysmon events to sequence_model | ALERT on low_probability_sequences identified by model
  - question: Has a process with a lower integrity level attempted to create a remote thread in or access the memory of a higher integrity level process?
    context: This is a direct query for a violation of the Windows integrity level security control. A process at a 'Medium' integrity level (typical for user applications) should not be able to manipulate a 'High' or 'System' integrity process. An event matching this pattern is a strong indicator of a privilege escalation attempt, as malware tries to inject code from a compromised user-level process into a more privileged one.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Standard User Endpoints
      - Virtual Desktop Infrastructure (VDI) fleet
      - Multi-user Terminal Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon (EventID=8 OR EventID=10) | WHERE (SourceProcessIntegrityLevel='Medium' AND TargetProcessIntegrityLevel IN ['High', 'System']) OR (SourceProcessIntegrityLevel='High' AND TargetProcessIntegrityLevel='System')
  - question: Is a process interacting with a process at an integrity level that is statistically unusual for it?
    context: This question moves beyond simple rule violations to a behavioral anomaly detection approach. Every process typically interacts with other processes at predictable integrity levels. By creating a historical baseline of these interactions for each process name, we can detect when a process (e.g., 'chrome.exe') suddenly starts accessing a process at an integrity level it has never or rarely interacted with before, signaling a potential compromise and change in behavior.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Standard User Endpoints
      - Virtual Desktop Infrastructure (VDI) fleet
      - Multi-user Terminal Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: BASELINE historical TargetProcessIntegrityLevel for each SourceImage | SEARCH Sysmon (EventID=8 OR EventID=10) | ALERT if current TargetProcessIntegrityLevel is a statistical outlier for SourceImage
  - question: Can an anomaly detection model identify rare combinations of source/target processes and their integrity levels?
    context: This question leverages an unsupervised machine learning model like Isolation Forest to find rare and unusual integrity level transitions. The model can analyze multiple features at once (Source Image, Target Image, Source IL, Target IL) to identify combinations that are isolated from the normal clusters of activity. This is effective at catching novel privilege escalation techniques that might not be obvious from analyzing any single feature alone.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - Standard User Endpoints
      - Virtual Desktop Infrastructure (VDI) fleet
      - Multi-user Terminal Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SCORE Sysmon events using anomaly_model(features=[SourceImage, TargetImage, SourceIL, TargetIL]) | ALERT on events identified as outliers
  - question: Did a critical system process spawn an unexpected child process or make an outbound network connection immediately after being injected into?
    context: This question looks for post-exploitation activity following a suspected injection event. If a critical process like lsass.exe is targeted by a remote thread creation, it should not subsequently spawn a command shell or connect to the internet. This stateful rule correlates the injection event with subsequent suspicious activity from the victim process, providing strong evidence that the injection was successful and the attacker is now executing commands.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Windows Event ID 8
      - Windows Event ID 10
      - Zeek conn.log
      - Domain Controllers
      - Internet Gateway/Egress Points
      - Core Network Switches
      - DNS Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: ON (EventID=8 OR EventID=10) targeting CriticalProcess, MONITOR TargetProcessGUID | ALERT if TargetProcessGUID is ParentProcessGUID for (cmd.exe OR powershell.exe) OR makes outbound network connection
  - question: Is a critical system process exhibiting statistically anomalous child process or network behavior?
    context: This question aims to detect post-injection activity by baselining the normal behavior of critical system processes. By profiling their typical child processes and network destinations, we can use frequency analysis to detect when an outlier appears (e.g., svchost.exe spawning ftp.exe). Additionally, a spike in the entropy of command-line arguments can indicate obfuscated commands being passed to a newly spawned shell, a common attacker technique.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Zeek conn.log
      - Domain Controllers
      - Internet Gateway/Egress Points
      - Core Network Switches
      - DNS Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: BASELINE normal child processes and network destinations for critical processes | ALERT on outlier child process or destination | ALERT on spike in command-line entropy
  - question: Is a time-series model detecting anomalous network traffic patterns from critical system processes?
    context: This question applies time-series analysis to monitor the network behavior of high-value processes. A process like lsass.exe should have very predictable, low-volume network traffic. A model can learn this temporal pattern and detect a sudden change—such as a spike in bytes sent or connections to new ports—which could indicate that the process has been compromised and is being used for data exfiltration or command and control.
    answer_sources:
      - Zeek conn.log
      - Domain Controllers
      - Internet Gateway/Egress Points
      - Core Network Switches
      - DNS Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: MONITOR time_series metrics (bytes_sent, conn_freq) from critical processes using anomaly_model | ALERT on significant deviation from pattern
  - question: Is a named pipe being created or connected that matches a known malicious pattern?
    context: Malware, particularly components of C2 frameworks like Cobalt Strike, uses named pipes for inter-process communication. This question focuses on detecting this activity by matching observed pipe names against a threat intelligence feed of known malicious patterns and regular expressions. A match provides a high-confidence indicator of a specific malware family or toolset operating on the endpoint.
    answer_sources:
      - Windows Event ID 17
      - Windows Event ID 18
      - All Windows Endpoints and Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon (EventID=17 OR EventID=18) | WHERE PipeName MATCHES Regex in MaliciousPipeFeed | ALERT
  - question: Is a named pipe being used that has an abnormally high-entropy or seemingly random name?
    context: To evade simple signature-based detection, adversaries often use algorithmically generated names for their named pipes. These names typically have high character randomness (entropy) compared to legitimate, human-readable pipe names. This question aims to detect this evasion technique by calculating the entropy of all observed pipe names and flagging those that are statistical outliers, suggesting they were machine-generated.
    answer_sources:
      - Windows Event ID 17
      - Windows Event ID 18
      - All Windows Endpoints and Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: FOR each PipeName in Sysmon (EventID=17, 18), CALC entropy | BASELINE entropy scores | ALERT if entropy > 99th_percentile
  - question: Can a machine learning model distinguish between benign and malicious named pipes based on their name characteristics?
    context: This question proposes using a supervised model to automatically classify pipe names. By extracting features from the name string—such as its length, character types, n-gram frequencies, and entropy—a model can learn the patterns of both legitimate and malicious pipe names. This allows for the detection of novel malicious pipes that may not match known signatures or simple entropy checks.
    answer_sources:
      - Windows Event ID 17
      - Windows Event ID 18
      - All Windows Endpoints and Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SCORE new PipeNames using ML_Model(features=[length, char_dist, ngrams, entropy]) | ALERT where score is malicious with high confidence
  - question: Is a process loading an unsigned DLL from a user-writable directory?
    context: Legitimate system DLLs are almost always digitally signed by Microsoft or a trusted vendor. Adversaries often drop unsigned, custom DLLs onto a system to be loaded by a legitimate process. This question creates a high-fidelity alert by looking for the combination of two suspicious attributes: an unsigned DLL being loaded from a non-standard, user-writable location like a Temp or user profile folder, which is a common staging area for malware.
    answer_sources:
      - Windows Event ID 7
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon (EventID=7) | WHERE Signed='false' AND ImageLoadedPath IN UserWritableDirectories | ALERT
  - question: Is a process loading a DLL that is statistically rare across the enterprise?
    context: Commodity malware might be widespread, but targeted attackers often use custom tools and DLLs that will only be present on a small number of machines. This question leverages the concept of prevalence to find these rare binaries. By maintaining an inventory of all DLLs loaded across the environment, we can flag any DLL that has been seen on a very small number of hosts, as it is more likely to be part of a targeted attack than a legitimate application.
    answer_sources:
      - Windows Event ID 7
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: CALCULATE enterprise-wide prevalence for each DLL hash from Sysmon (EventID=7) | ALERT when a process loads a DLL with prevalence < threshold (e.g., 5 hosts)
  - question: Can a clustering algorithm identify anomalous groups of DLL load events?
    context: This question uses unsupervised machine learning to find suspicious DLL loads without relying on predefined rules. By grouping DLL load events based on features like file prevalence, signature status, and file path characteristics, a clustering algorithm can isolate small, dense clusters of anomalous activity. These outlier clusters represent groups of DLL loads that are different from the norm and warrant investigation.
    answer_sources:
      - Windows Event ID 7
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: CLUSTER Sysmon (EventID=7) events using DBSCAN(features=[prevalence, signed_status, path_entropy]) | INVESTIGATE outlier clusters
  - question: Is a critical system process loading a DLL from a non-standard, un-allowed directory?
    context: This question addresses the DLL hijacking or sideloading technique where malware places a malicious DLL in a location where it will be loaded by a trusted process. By defining a strict allowlist of directories from which a critical process (e.g., 'svchost.exe') is allowed to load DLLs (e.g., only 'C:\\Windows\\System32'), we can generate a very high-confidence alert whenever that process loads a DLL from any other path.
    answer_sources:
      - Windows Event ID 7
      - All Windows Endpoints and Servers
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon (EventID=7) | WHERE Image IN CriticalProcessList AND ImageLoadedPath NOT IN AllowlistForImage | ALERT
  - question: Is a process loading a DLL from a directory that is statistically unusual for that specific process?
    context: This question provides a more dynamic alternative to a static allowlist. By building a statistical profile of the directories from which each process normally loads its DLLs, we can detect behavioral changes. If a process like 'explorer.exe', which typically loads DLLs from Windows system directories, suddenly loads a DLL from a user's AppData folder, this deviation from its established baseline is highly suspicious.
    answer_sources:
      - Windows Event ID 7
      - All Windows Endpoints and Servers
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: BASELINE common ImageLoaded directories for each Image | ALERT if an Image loads a DLL from a directory not in its established baseline set
  - question: Can a one-class machine learning model detect when a critical process loads a DLL from an anomalous location?
    context: This question proposes building a dedicated anomaly detection model for each critical process to learn its normal DLL loading behavior. Using a one-class SVM, the model can learn the boundary of 'normal' load paths based on features of the path string. Any new DLL load event whose path falls outside this learned boundary is flagged as an anomaly, providing a sophisticated way to detect novel DLL hijacking techniques.
    answer_sources:
      - Windows Event ID 7
      - All Windows Endpoints and Servers
      - Domain Controllers
      - Application Servers
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: FOR each critical process, SCORE new DLL load paths using a one-class SVM model | ALERT on paths flagged as anomalies
  - question: Is a process that should never have network activity, such as notepad.exe, initiating an outbound connection?
    context: This question uses a simple but effective blocklist approach. Certain utilities like 'notepad.exe' or 'calculator.exe' have no legitimate reason to make network connections. An outbound connection from one of these processes is a strong indicator that it has been compromised, likely via process hollowing, where its memory is replaced with malicious code that then establishes a C2 channel.
    answer_sources:
      - Windows Event ID 3
      - Zeek conn.log
      - Standard User Endpoints
      - Internet Gateway/Egress Points
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: SEARCH Sysmon (EventID=3) | WHERE Image IN NoNetworkActivityList AND DestinationIP is outbound | ALERT
  - question: Is a process that has historically shown no network activity suddenly making an outbound connection?
    context: This question expands on the blocklist concept by creating a dynamic baseline for every process in the environment. By tracking the network connection history for all executables, the system can identify the 'first time' any given process makes a network connection. This is a powerful anomaly detection method that can flag a compromised process without needing a pre-defined list of names.
    answer_sources:
      - Windows Event ID 3
      - Zeek conn.log
      - Standard User Endpoints
      - Internet Gateway/Egress Points
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: BASELINE network activity for all processes | ALERT if a process with a historical connection count of zero makes a connection
  - question: After being targeted by a process injection, does a process's network behavior change from non-existent to active?
    context: This is a sophisticated, stateful detection that directly links process injection to subsequent malicious activity. The rule triggers a monitoring state for a specific process instance (TargetProcessGUID) that has been targeted by an injection attempt (Event ID 8 or 10). A time-series model, baselined on zero network activity for that instance, then detects the state change to 'active network connections', confirming that the process was successfully hollowed out and is now communicating with an attacker.
    answer_sources:
      - Windows Event ID 3
      - Windows Event ID 8
      - Windows Event ID 10
      - Standard User Endpoints
      - Internet Gateway/Egress Points
    range: last 90 days
    queries:
      - query_type: pseudocode
        query: ON (EventID=8 or 10), MONITOR TargetProcessGUID's network activity | USE time-series model to detect state change from zero to active connections | ALERT