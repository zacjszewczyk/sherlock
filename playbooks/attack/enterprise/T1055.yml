name: T1055: Process Injection
id: e8f1b2c3-d4e5-4f6a-b7c8-d9e0f1a2b3c4
description: |
  This playbook is designed to help analysts investigate whether an adversary is leveraging process injection for privilege escalation or defense evasion. It provides questions and queries to detect various process injection techniques, such as a known malicious process creating a remote thread in a higher-privileged process, a process gaining memory write access and immediately creating a remote thread, a lower integrity process accessing a higher integrity process, and a critical system process exhibiting anomalous behavior (like spawning a shell or making a network connection) after being targeted. It also covers defense evasion indicators like the use of malicious or high-entropy named pipes, the loading of unsigned or statistically rare DLLs, and unexpected network activity from normally quiet processes.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a process with a known malicious hash injected into a critical system process?
  context: |
    This question aims to detect a common process injection pattern where a confirmed malicious executable (identified by its file hash against a threat intelligence feed) creates a remote thread or accesses the memory of a critical, high-privilege system process like lsass.exe. A successful correlation indicates a high-confidence privilege escalation attempt.
  answer_sources:
  - Windows Event ID 1, Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs
      | JOIN events with same ProcessGUID
      | FIND Process Creation (EID 1) with malicious hash
      | WHERE this process also created a remote thread (EID 8) or accessed memory (EID 10) of a critical process (e.g., lsass.exe, services.exe)
- question: Are there statistically rare or anomalous process interaction pairs (source process accessing target process)?
  context: |
    Adversaries often use novel or uncommon processes to inject into legitimate system processes. This question seeks to identify such activity by baselining all source-target process interactions across the enterprise. An interaction pair that is statistically rare (e.g., in the bottom 1st percentile of frequency) is highly suspicious and could indicate a previously unseen injection technique.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 8 or 10
      | GROUP by SourceImage, TargetImage
      | COUNT occurrences of each pair
      | COMPARE against historical baseline
      | ALERT on pairs with frequency below 1st percentile
- question: Can a machine learning model identify malicious process injection events based on process characteristics and prevalence?
  context: |
    This question proposes a more advanced, predictive approach. By training a machine learning model on historical data (both benign and malicious), it can learn to identify subtle patterns indicative of process injection. Features like the names of the source and target processes, specific memory access rights requested (GrantedAccess), and the overall rarity of the source executable can be powerful predictors of malicious activity.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT stream of Sysmon EID 8 & 10 events
      | EXTRACT features (SourceImage, TargetImage, GrantedAccess, SourceImage prevalence)
      | APPLY pre-trained classification model
      | ALERT on events classified as malicious with high confidence
- question: Has a process gained memory write access and immediately created a remote thread in the same target process?
  context: |
    This question looks for a very specific, high-fidelity indicator of process injection. The sequence of gaining write access to a process's memory (Event ID 10) and then immediately creating a thread in it (Event ID 8) within a very short timeframe (e.g., under one second) is a classic signature of shellcode injection. Legitimate applications rarely perform this exact sequence so quickly.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs
      | CORRELATE EID 10 (with write access) followed by EID 8
      | WHERE SourceProcessGUID and TargetProcessGUID are the same for both events
      | WHERE time difference < 1 second
      | ALERT on match
- question: Is the time between a process gaining write access and creating a remote thread a statistical outlier?
  context: |
    This question aims to find automated, programmatic injection sequences by analyzing the timing between events. While some legitimate interactions might involve both memory access and thread creation, malicious tools often perform these actions almost instantaneously. By baselining the time delta for these event pairs, we can flag sequences that are unusually fast, suggesting they are performed by malware rather than a human or benign application.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 8 & 10 with same ProcessGUIDs
      | CALCULATE time delta between events
      | COMPARE delta to historical distribution
      | ALERT on deltas that are statistical outliers (e.g., > 3 std dev below mean)
- question: Does a sequence of process interactions on a host deviate from normal, learned behavior?
  context: |
    This question proposes using a sequence-aware model (like an RNN) to understand the 'grammar' of normal process behavior on an endpoint. Process injection is not just a single event but a sequence of actions. By learning what normal sequences look like, the model can detect a series of events (e.g., process access followed by thread creation) that has a very low probability of occurring, flagging it as a potential attack chain.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT stream of process interaction events (EID 8, 10, etc.) per host
      | APPLY pre-trained sequence model (RNN/HMM)
      | CALCULATE probability of observed sequence
      | ALERT on sequences with low probability
- question: Is a lower-integrity process attempting to access or inject into a higher-integrity process?
  context: |
    This question targets a direct violation of the Windows integrity level security control. A process at a 'Medium' integrity level (typical for user applications) should not be able to inject into a 'High' or 'System' level process. Such an event is a strong indicator of a privilege escalation exploit attempting to break out of its security sandbox.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Standard User Endpoints, Virtual Desktop Infrastructure (VDI) fleet, Multi-user Terminal Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 8 or 10
      | ALERT where SourceProcessIntegrityLevel is 'Medium' and TargetProcessIntegrityLevel is 'High' or 'System'
- question: Is a process interacting with integrity levels it does not normally interact with?
  context: |
    This question seeks anomalies in integrity level interactions. While a direct violation (Medium -> High) is a clear indicator, an adversary might use more subtle techniques. By baselining which integrity levels a specific process (e.g., 'chrome.exe') typically interacts with, we can detect when it suddenly starts accessing a different, unexpected integrity level, which could be a sign of compromise and exploitation.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Standard User Endpoints, Virtual Desktop Infrastructure (VDI) fleet, Multi-user Terminal Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 8 or 10
      | For each SourceImage, build profile of normal TargetProcessIntegrityLevels
      | ALERT if a new interaction deviates from the established profile
- question: Can an anomaly detection model identify rare combinations of processes and integrity level transitions?
  context: |
    This question uses unsupervised machine learning to find unusual integrity level interactions without pre-defined rules. An Isolation Forest model can identify data points that are 'easy to isolate' from the rest of the data. In this context, a rare combination of a source process, target process, and their respective integrity levels would be flagged as an anomaly, warranting investigation for potential privilege escalation.
  answer_sources:
  - Windows Event ID 8, Windows Event ID 10
  - Network Assets of Interest: Standard User Endpoints, Virtual Desktop Infrastructure (VDI) fleet, Multi-user Terminal Servers
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT stream of Sysmon EID 8 & 10 events
      | EXTRACT features (SourceImage, TargetImage, SourceIL, TargetIL)
      | APPLY pre-trained anomaly detection model (Isolation Forest)
      | ALERT on events flagged as outliers
- question: After being injected into, did a critical system process spawn a shell or initiate a network connection?
  context: |
    This question looks for the post-exploitation behavior that follows a successful process injection. After an adversary injects code into a process like 'lsass.exe', that process (now under the adversary's control) might be used to spawn a command shell (cmd.exe) for further execution or initiate a C2 network connection. Detecting this sequence provides strong evidence of a compromise.
  answer_sources:
  - Windows Event ID 1, Windows Event ID 3, Windows Event ID 8, Windows Event ID 10, Zeek conn.log
  - Network Assets of Interest: Domain Controllers, Internet Gateway/Egress Points, Core Network Switches, DNS Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH for injection event (EID 8 or 10) targeting critical process
      | MONITOR the TargetProcessGUID
      | ALERT if that GUID becomes the parent of cmd.exe/powershell.exe (EID 1) OR initiates an outbound network connection (EID 3)
- question: Is a critical system process exhibiting anomalous child process or network behavior?
  context: |
    This question aims to detect post-injection activity by baselining the normal behavior of critical processes. A process like 'svchost.exe' has a predictable set of child processes and network destinations. If it suddenly spawns a rare process or connects to an unusual IP address, it suggests its behavior has been altered, possibly due to malicious code injection. Monitoring command-line entropy can also detect obfuscated commands.
  answer_sources:
  - Windows Event ID 1, Windows Event ID 3, Windows Event ID 8, Windows Event ID 10, Zeek conn.log
  - Network Assets of Interest: Domain Controllers, Internet Gateway/Egress Points, Core Network Switches, DNS Servers
  range: last 90 days
  queries:
  - pseudocode: |
      For each critical process
      | BASELINE normal child processes (EID 1) and network destinations (EID 3/Zeek)
      | ALERT on new child processes or network destinations that are statistical outliers
      | ALERT on spikes in command-line entropy
- question: Is the network traffic pattern from a critical system process showing anomalous changes over time?
  context: |
    This question focuses on detecting subtle changes in the network behavior of a compromised critical process. Instead of just looking for new destinations, a time-series model can detect changes in the volume, frequency, or type of traffic. A sudden, unexplained increase in data exfiltration or beaconing frequency from a process like 'lsass.exe' would be flagged as a significant anomaly.
  answer_sources:
  - Windows Event ID 1, Windows Event ID 3, Windows Event ID 8, Windows Event ID 10, Zeek conn.log
  - Network Assets of Interest: Domain Controllers, Internet Gateway/Egress Points, Core Network Switches, DNS Servers
  range: last 90 days
  queries:
  - pseudocode: |
      For each critical process
      | MODEL network metrics (bytes, frequency, port entropy) over time
      | APPLY time-series anomaly detection
      | ALERT on significant deviations from the learned temporal pattern
- question: Has a named pipe with a known malicious or suspicious name been created or connected?
  context: |
    This question aims to detect malware C2 and lateral movement that uses named pipes for communication. By comparing observed pipe names from Sysmon events against a threat intelligence feed of known malicious pipe names (e.g., from Cobalt Strike), we can identify active malware with high confidence.
  answer_sources:
  - Windows Event ID 17, Windows Event ID 18
  - Network Assets of Interest: All Windows Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 17 or 18
      | MATCH PipeName against threat intel list of malicious pipe names/regex
      | ALERT on match
- question: Has a named pipe with a high-entropy (random-looking) name been created?
  context: |
    To avoid static signatures, malware often generates random names for its C2 channels, including named pipes. These algorithmically generated names typically have higher character entropy than human-readable, legitimate pipe names. This question seeks to detect such malware by flagging pipe names that are statistical outliers in terms of their entropy score.
  answer_sources:
  - Windows Event ID 17, Windows Event ID 18
  - Network Assets of Interest: All Windows Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 17 or 18
      | CALCULATE Shannon entropy for each PipeName
      | COMPARE entropy score against baseline distribution
      | ALERT on scores above 99th percentile
- question: Can a machine learning model classify named pipes as benign or malicious based on name characteristics?
  context: |
    This question proposes a machine learning approach to named pipe detection that goes beyond simple entropy. By training a model on features like name length, character ratios, and n-gram frequencies, it can learn more complex patterns that distinguish malicious pipe names from benign ones, providing a more robust detection method.
  answer_sources:
  - Windows Event ID 17, Windows Event ID 18
  - Network Assets of Interest: All Windows Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT stream of Sysmon EID 17 & 18 events
      | EXTRACT features from PipeName (length, entropy, n-grams)
      | APPLY pre-trained classification model
      | ALERT on pipes classified as malicious
- question: Has a process loaded an unsigned DLL from a user-writable directory?
  context: |
    This question targets a common malware persistence and execution technique. Legitimate software is typically signed by a trusted authority. An unsigned DLL, especially when loaded from a non-standard, user-writable location like a temp folder, is highly suspicious and often indicates a malicious payload being loaded into a process.
  answer_sources:
  - Windows Event ID 7
  - Network Assets of Interest: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 7
      | ALERT where 'Signed' is 'false' AND 'ImageLoaded' path is a user-writable directory (e.g., C:\Users\, C:\Temp\)
- question: Has a process loaded a DLL that is statistically rare across the enterprise?
  context: |
    This question helps find custom or targeted malware that won't be caught by signature-based tools. A DLL used by legitimate software (e.g., Microsoft Office, Chrome) will be present on thousands of machines. A malicious DLL may only be present on a few compromised hosts. By tracking the prevalence of every loaded DLL hash, we can flag rare DLLs for investigation.
  answer_sources:
  - Windows Event ID 7
  - Network Assets of Interest: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 7
      | For each DLL hash, count distinct hosts that loaded it
      | ALERT when a DLL is loaded whose hash prevalence is below a threshold (e.g., < 5 hosts)
- question: Can anomalous DLL load events be identified using clustering analysis?
  context: |
    This question uses unsupervised machine learning to find groups of suspicious DLL loads. By clustering events based on features like the DLL's signed status, prevalence, and the parent process characteristics, normal activity will form dense clusters. Malicious or anomalous DLL loads will be isolated as outliers or small, distinct clusters, allowing analysts to focus on the most unusual events.
  answer_sources:
  - Windows Event ID 7
  - Network Assets of Interest: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT stream of Sysmon EID 7 events
      | EXTRACT features (prevalence, signed status, path entropy)
      | APPLY clustering algorithm (DBSCAN)
      | ALERT on events identified as noise/outliers
- question: Has a critical system process loaded a DLL from a non-approved directory?
  context: |
    This question aims to detect DLL hijacking or other injection techniques against trusted processes. Critical system processes like 'svchost.exe' should only load DLLs from protected system directories (e.g., C:\Windows\System32). If such a process is observed loading a DLL from a different location (like a user's download folder), it is a strong indication that it has been compromised.
  answer_sources:
  - Windows Event ID 7
  - Network Assets of Interest: All Windows Endpoints and Servers, Domain Controllers, Application Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 7
      | For critical processes (svchost.exe, etc.), check 'ImageLoaded' path
      | ALERT if path is not in the pre-defined allowlist for that process
- question: Is a process loading a DLL from a statistically unusual directory for that specific process?
  context: |
    This question provides a more dynamic alternative to a static allowlist. By learning the normal DLL load paths for every process in the environment, we can detect deviations. For example, if 'winword.exe' suddenly loads a DLL from 'C:\Perflogs' instead of its usual Program Files or AppData locations, this anomalous behavior would be flagged for review.
  answer_sources:
  - Windows Event ID 7
  - Network Assets of Interest: All Windows Endpoints and Servers, Domain Controllers, Application Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 7
      | For each 'Image', build a profile of common 'ImageLoaded' directories
      | ALERT when a load occurs from a directory not in the established baseline for that process
- question: Can a machine learning model detect when a critical process loads a DLL from an anomalous location?
  context: |
    This question applies a specialized anomaly detection model (One-Class SVM) to the problem of DLL load path analysis. For each critical process, a model is trained to learn the 'shape' of its normal DLL load locations. Any new load event whose path characteristics fall outside this learned boundary is flagged as a potential threat, providing a sophisticated way to detect novel hijacking techniques.
  answer_sources:
  - Windows Event ID 7
  - Network Assets of Interest: All Windows Endpoints and Servers, Domain Controllers, Application Servers
  range: last 90 days
  queries:
  - pseudocode: |
      For each critical process
      | INPUT features from 'ImageLoaded' path (depth, n-grams)
      | APPLY pre-trained One-Class SVM model
      | ALERT on events that fall outside the learned boundary of normal
- question: Has a process that should never use the network (e.g., notepad.exe) initiated an outbound connection?
  context: |
    This question targets a high-confidence indicator of process hollowing or masquerading. Adversaries may inject code into a benign, trusted process like 'notepad.exe' to evade defenses. Since Notepad has no legitimate reason to make network connections, any outbound traffic from it is almost certainly malicious.
  answer_sources:
  - Windows Event ID 3, Zeek conn.log
  - Network Assets of Interest: Standard User Endpoints, Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Sysmon logs for EID 3
      | ALERT if 'Image' is on a blocklist of non-networked applications (notepad.exe, calc.exe, etc.)
- question: Is a process that has never been seen making network connections now initiating one?
  context: |
    This question expands the static list approach to a dynamic, enterprise-wide baseline. It identifies the 'first time' any process makes a network connection. While this may generate some benign alerts for new software, it is a powerful way to detect when an adversary hijacks a local, non-networked process for C2 communications.
  answer_sources:
  - Windows Event ID 3, Zeek conn.log
  - Network Assets of Interest: Standard User Endpoints, Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: |
      For each process 'Image'
      | BASELINE historical network connection count
      | ALERT if a process with a zero-count baseline is observed in a new EID 3 event
- question: Following a potential injection event, did the targeted process begin initiating network activity?
  context: |
    This question creates a powerful, stateful correlation. It directly links a suspected process injection event (memory access or remote thread creation) to subsequent malicious behavior. By flagging a process for monitoring immediately after it is targeted, we can detect with high confidence when the injected code 'activates' and begins C2 communication, confirming a successful compromise.
  answer_sources:
  - Windows Event ID 3, Zeek conn.log
  - Network Assets of Interest: Standard User Endpoints, Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH for injection event (EID 8 or 10)
      | MONITOR the TargetProcessGUID
      | APPLY time-series anomaly detection to its network activity (EID 3)
      | ALERT if activity changes from zero to non-zero