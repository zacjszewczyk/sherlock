name: T1204.002: Malicious File
id: 9e3a65c2-0b8c-4a3d-8e4f-7b1c4d6a8e3b
description: This playbook helps investigate whether an adversary has executed malicious code via user interaction with a malicious file. This involves detecting the execution of files with known malicious hashes, identifying network connections to malicious infrastructure shortly after a file is run, spotting office applications spawning interpreters (like PowerShell), analyzing interpreter command lines for obfuscation, tracking child processes of office apps that make network connections, and correlating process executions from temporary directories with recent file downloads.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
investigative_questions:
- question: Are processes being executed whose file hashes match known malicious indicators from threat intelligence?
  context: This question seeks to identify direct evidence of a compromise by matching the hash of executed files against a curated list of known malicious file hashes from threat intelligence feeds. A match is a high-fidelity indicator that a malicious file has been executed within the environment.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, and critical application servers.
  - Aggregated Cyber Threat Intelligence (CTI) feeds.
  range: last 90 days
  queries:
  - 'FOR each process creation event (e.g., Windows Event ID 4688), CALCULATE the file hash. JOIN the hash against a CTI feed of known malicious hashes. ALERT on any match.'
- question: For processes matching malicious indicators, how prevalent are they across the enterprise, and can this be used to prioritize alerts?
  context: This question aims to enrich alerts for known malicious files with context about their rarity. A malicious file found on a small number of hosts is often a higher priority for investigation than one that is widespread, as the latter might indicate a false positive or a widespread but lower-severity issue.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, and critical application servers.
  - A historical baseline of all file hashes executed across the enterprise.
  range: last 90 days
  queries:
  - 'FOR each CTI hash match alert, QUERY a historical baseline to COUNT the number of unique hosts the hash has executed on. PRIORITIZE alerts where the host count is below a defined threshold (e.g., < 5).'
- question: Can a machine learning model be used to predict if a new, unknown process is malicious based on its execution characteristics?
  context: This question explores a proactive approach to detect potentially malicious files that are not yet present in threat intelligence feeds. By training a model on features of known-bad and known-good process executions (e.g., file path, parent process), it can score new, unknown processes for their likelihood of being malicious.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, and critical application servers.
  - A trained logistic regression or similar classification model.
  range: last 90 days
  queries:
  - 'FOR each new process creation event, EXTRACT features (e.g., file path entropy, parent process name). SCORE the process using a pre-trained ML model. ALERT on processes with a high probability score of being malicious.'
- question: Did a newly executed process make a network connection to a known malicious destination within 60 seconds of its creation?
  context: This question attempts to directly link a process execution to subsequent command-and-control (C2) or data exfiltration activity. Malicious payloads often 'call home' immediately after execution, so correlating a new process with a network connection to a known-bad IP, domain, or URL within a short time window is a strong indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log, dns.log, http.log
  - Network egress points (e.g., firewalls, proxies) and all endpoint and server network interfaces.
  - CTI feeds of malicious IPs, domains, and URLs.
  range: last 90 days
  queries:
  - 'JOIN process creation events with network connection events on the same host where the network event occurs within 60 seconds of the process start time. CHECK the destination IP/domain/URL against CTI feeds. ALERT on any match.'
- question: Are there statistically unusual network connections, such as those to rare domains or those occurring unusually quickly after a process starts?
  context: This question looks for anomalous network behavior that may indicate malicious activity without relying on known IOCs. It focuses on identifying outliers, such as non-browser processes that make an outbound connection faster than normal or connections to domains that are very rarely visited by anyone in the organization.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log, dns.log, http.log
  - Network egress points (e.g., firewalls, proxies) and all endpoint and server network interfaces.
  range: last 90 days
  queries:
  - 'FOR connections from non-browser processes, CALCULATE the time delta between process start and the connection. FLAG deltas that are statistical outliers (e.g., < 5th percentile). Additionally, SCORE destination domains based on their historical rarity and FLAG connections to rare domains.'
- question: Can time series anomaly detection identify hosts with unusual network activity, and can this be correlated with recent process executions?
  context: This question proposes using a machine learning model to establish a baseline of normal network traffic volume for each host. The model can then detect significant deviations from this baseline (anomalies). These anomalies can be correlated with recent process executions on the same host to identify the potential cause of the suspicious network behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Network egress points (e.g., firewalls, proxies) and all endpoint and server network interfaces.
  range: last 90 days
  queries:
  - 'MODEL the time series of outbound connection counts per minute for each host. USE an anomaly detection algorithm (e.g., Isolation Forest) to identify spikes. CORRELATE detected anomalies with process creation events that occurred just before the spike.'
- question: Is an office application or archive utility spawning an interpreter process like PowerShell or Command Prompt?
  context: This is a classic question to detect macro-based attacks or the execution of malicious scripts embedded in documents. It is highly irregular for applications like Word, Excel, or 7-Zip to be the parent process of a command-line interpreter. This behavior is a strong indicator that a user has opened a malicious file.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, and servers hosting office applications.
  range: last 90 days
  queries:
  - 'MONITOR process creation events (4688) for instances where the Parent Process Name is in a list of office/archive apps (WINWORD.EXE, EXCEL.EXE, 7z.exe) and the New Process Name is in a list of interpreters (powershell.exe, cmd.exe, wscript.exe). ALERT on any match.'
- question: Are there any statistically rare parent-child process relationships involving office applications and interpreters?
  context: This question aims to refine the detection of suspicious parent-child relationships by focusing on rarity. By baselining all parent-child process pairs across the enterprise, you can filter out noise from any legitimate (though perhaps uncommon) use cases and alert only on pairs that are truly anomalous or have never been seen before.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, and servers hosting office applications.
  range: last 90 days
  queries:
  - 'MAINTAIN a frequency baseline of all parent-child process pairs observed over 30 days. ALERT on any office-to-interpreter process pair that is statistically rare (e.g., seen on < 5 hosts).'
- question: Can graph analysis identify anomalous process relationships, such as an office application process bridging to an administrative tools process community?
  context: This question proposes a more advanced analytical method where process relationships are modeled as a graph. Normal behavior forms distinct clusters or 'communities' (e.g., office apps, browsers, admin tools). An attack can be identified when a process creates an anomalous link between two otherwise separate communities, such as WINWORD.EXE spawning a process that belongs to the admin tools community.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, and servers hosting office applications.
  range: last 90 days
  queries:
  - 'MODEL process creation events as a directed graph. APPLY community detection algorithms to identify clusters of normal behavior. IDENTIFY and score processes that create edges between distinct communities.'
- question: Are interpreters being executed with command-line arguments that contain known malicious patterns, such as download cradles or obfuscation techniques?
  context: This question focuses on the content of command lines used to launch interpreters. Attackers frequently use PowerShell, CMD, and other interpreters to run malicious code. This involves looking for specific, well-known malicious command fragments, such as PowerShell download cradles (e.g., 'IEX (New-Object Net.WebClient).DownloadString') or base64 encoding flags.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, Domain Controllers, and administrative jump boxes.
  range: last 90 days
  queries:
  - 'FROM process creation events for interpreters, ANALYZE the command-line field. APPLY a library of regular expressions to detect known malicious patterns. ALERT on any match.'
- question: Are there interpreter executions with statistically anomalous command-line arguments, such as unusually high length or character entropy?
  context: This question seeks to detect malicious command lines without relying on specific patterns. Malicious scripts, especially when obfuscated, are often significantly longer or have higher character entropy (more randomness) than benign administrative commands. By baselining these metrics, you can flag executions that are statistical outliers.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, Domain Controllers, and administrative jump boxes.
  range: last 90 days
  queries:
  - 'FOR each interpreter type, BUILD a statistical baseline of command-line length and character entropy. ALERT on any execution where these metrics exceed a dynamic threshold (e.g., 3 standard deviations from the mean).'
- question: Can an NLP model be trained to classify interpreter command lines as malicious or benign in real time?
  context: This question investigates the use of Natural Language Processing (NLP) to detect malicious command lines. By training a text classification model on a large, labeled dataset of benign and malicious commands, the system can learn to identify suspicious characteristics beyond simple regex or statistical measures, allowing it to detect novel attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, VDI instances, Domain Controllers, and administrative jump boxes.
  - A trained NLP classification model.
  range: last 90 days
  queries:
  - 'TRAIN a text classification model (e.g., TF-IDF with logistic regression) on labeled command lines. USE this model to score all new interpreter command lines in real time. INVESTIGATE commands receiving a high malicious probability score.'
- question: Has a child process of an office application made an external network connection, and is that child process not on an approved allow-list?
  context: This question looks for a specific attack chain: an office application spawns a separate process, and that new process then makes an outbound network connection. This is a common pattern for malware droppers. The logic can be refined by maintaining an allow-list of known, legitimate helper applications that are expected to be spawned by office apps.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Network egress points (e.g., firewalls, proxies) and user workstations.
  range: last 90 days
  queries:
  - 'CREATE a rule that joins process creation and network connection events. ALERT if a process makes an external network connection AND its parent is an office application AND the process name is not on an allow-list of known helpers.'
- question: Are there statistically rare combinations of (Parent Process, Child Process, Destination Port) where the parent is an office application?
  context: This question adds another layer of detail to parent-child analysis by including the destination port of any network connection. It seeks to identify rare 3-part tuples (e.g., WINWORD.EXE, powershell.exe, 4444) that are highly indicative of malicious activity, as legitimate behavior typically involves common ports and processes.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Network egress points (e.g., firewalls, proxies) and user workstations.
  range: last 90 days
  queries:
  - 'FOR all instances where a child process makes a network connection, GENERATE a 3-tuple: (ParentName, ChildName, DestinationPort). MAINTAIN a frequency count for every unique tuple. FLAG tuples that are statistically rare and involve an office application as the parent.'
- question: Can a clustering model identify anomalous process network activity related to office applications?
  context: This question proposes using an unsupervised machine learning approach to find anomalies. By representing process network events as data points with various features (e.g., parent is office app, child process name, port), a clustering algorithm like DBSCAN can group all normal behaviors together. Events that do not belong to any cluster are considered noise or outliers and should be investigated.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Network egress points (e.g., firewalls, proxies) and user workstations.
  range: last 90 days
  queries:
  - 'VECTORIZE process network events with features like parent_is_office_app, child_process_name, and destination_port. USE a clustering algorithm (e.g., DBSCAN) to group normal behaviors. INVESTIGATE events classified as noise/outliers.'
- question: Is a process being executed from a temporary or download directory within five minutes of a file with the same name being downloaded to that host?
  context: This question aims to detect a 'drive-by' attack by directly correlating a file download with its immediate execution. This is a very strong signal of a user being tricked into downloading and running a malicious file. The 5-minute window provides a tight correlation between the two events.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log, files.log, http.log
  - User profile directories on endpoints (e.g., Downloads, AppData) and network file transfer logs at the boundary.
  range: last 90 days
  queries:
  - 'CORRELATE network file transfer logs (e.g., Zeek files.log) with process execution logs (4688) by host and time. TRIGGER an alert when a process is executed from a temp/download path within 5 minutes of a file with the same name being downloaded to that host.'
- question: Are there processes with very low enterprise-wide prevalence executing from temporary directories, or are there unusual spikes in executions from these directories on a specific host?
  context: This question uses two statistical methods to find suspicious executions from temporary locations. The first looks for 'needles in a haystack': executables running from a temp folder that are extremely rare across the entire organization. The second looks for time-based anomalies: a sudden burst of process executions from temp folders on a single machine, which could indicate a malware unpacker or dropper.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log, files.log, http.log
  - User profile directories on endpoints (e.g., Downloads, AppData) and network file transfer logs at the boundary.
  range: last 90 days
  queries:
  - 'MAINTAIN a prevalence baseline of all executable hashes running from temp/download paths. ALERT when a new process has very low prevalence (e.g., < 0.1%). Also, MONITOR the rate of process executions from these paths per host and ALERT on spikes.'
- question: Can a sequence analysis model detect anomalous user activity, such as a file download immediately followed by process execution from a temporary directory?
  context: This question proposes modeling user activity as a sequence of discrete events (e.g., web_browse, file_download, process_exec). A machine learning model, such as an LSTM, can be trained to learn what benign sequences look like. It can then score new sequences in real-time, flagging those that represent a deviation from normal behavior, such as the classic attack pattern of a download immediately followed by execution.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log, files.log, http.log
  - User profile directories on endpoints (e.g., Downloads, AppData) and network file transfer logs at the boundary.
  range: last 90 days
  queries:
  - 'MODEL user activity as a sequence of events. TRAIN a sequence-based anomaly detection model (e.g., LSTM) on benign sequences. SCORE new event sequences and ALERT on those with a high anomaly score, especially those containing a download-then-execute pattern.'