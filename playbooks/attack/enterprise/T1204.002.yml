name: T1204.002: Malicious File
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses the adversary technique of executing malicious code by tricking a user into interacting with a malicious file (T1204.002). It focuses on identifying several key indicators of this activity, which stems from the primary information requirement: Has the adversary executed malicious code via user interaction with a malicious file? These indicators include: the execution of a process whose file hash is a known malicious IOC; a network connection to a malicious destination occurring shortly after a file is executed; an office or archive application spawning an interpreter process like powershell.exe or cmd.exe; the use of obfuscated or suspicious command-line arguments; a child process of an office application making an external network connection; and a process being executed from a temporary or download directory shortly after a file was downloaded to that location. The goal is to detect various stages and methods of malicious file execution, from direct hash matches to more subtle behavioral and statistical anomalies.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are processes being executed whose file hash matches a known malicious indicator from threat intelligence?
    context: This question aims to identify the direct execution of known malware. By calculating the hash of every newly created process and comparing it against a curated list of malicious hashes from Cyber Threat Intelligence (CTI) feeds, we can detect unambiguous threats. A match provides high-fidelity evidence of a compromise and should be treated as a critical alert requiring immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - critical application servers
    range: last 90 days
    queries:
      - pseudocode: FOR each process_creation_event (EID 4688), GET file_hash. IF file_hash IN known_malicious_hashes_feed, THEN ALERT.
  - question: How prevalent is a CTI-matched malicious file hash across the enterprise, and can this prevalence help prioritize the alert?
    context: This question helps analysts prioritize alerts by adding context about the rarity of a malicious file. A file seen on only one or a few machines is often more suspicious or indicative of a targeted attack than one that is widespread (which could be a false positive or a widespread campaign). By establishing a baseline of all executed file hashes, we can quickly determine if a CTI-matched hash is rare (low prevalence) and elevate its priority for investigation.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - critical application servers
    range: last 90 days
    queries:
      - pseudocode: FOR each CTI_hash_match_alert, COUNT unique hosts where hash was executed. IF count < threshold (e.g., 5), THEN increase alert priority.
  - question: Can we proactively identify new, unknown malicious processes by modeling the characteristics of known malicious ones?
    context: This question uses machine learning to move beyond reactive IOC matching. By training a classifier on features of known malicious processes (identified via CTI hash matches), we can build a model that predicts the likelihood of any new, unknown process being malicious. This allows for the detection of zero-day threats or variations of known malware that have a different hash but exhibit similar behavioral features, such as being executed from a strange path or having a suspicious parent process.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - critical application servers
    range: last 90 days
    queries:
      - pseudocode: FOR each new_process_event, EXTRACT features (path, parent, etc.). SCORE features with ML model. IF score > probability_threshold, THEN ALERT.
  - question: Did a newly executed process make a network connection to a known malicious IP, domain, or URL within 60 seconds of starting?
    context: This question seeks to identify malware 'call-home' activity immediately after execution. Malicious files often need to connect to a command-and-control (C2) server to receive instructions or exfiltrate data. By correlating process creation events with subsequent network connections and checking the destination against CTI feeds, we can detect this behavior with high confidence. The 60-second window focuses on immediate post-execution activity, which is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Network egress points (e.g., firewalls, proxies)
      - all endpoint and server network interfaces
    range: last 90 days
    queries:
      - pseudocode: JOIN process_creation (4688) with network_connection (5156/Zeek) on host WHERE time_delta < 60s. IF destination_IP/domain IN CTI_feed, THEN ALERT.
  - question: Is a non-browser process making an outbound connection to a rare destination domain unusually quickly after it starts?
    context: This question identifies suspicious network behavior by focusing on statistical outliers. Benign applications have predictable patterns for network connections. A process that connects to the network almost instantly after starting, especially to a domain rarely seen in the enterprise, is anomalous. This method helps find potential C2 traffic without relying on known IOCs, by flagging behavior that deviates from the established norm in terms of both timing and destination rarity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Network egress points (e.g., firewalls, proxies)
      - all endpoint and server network interfaces
    range: last 90 days
    queries:
      - pseudocode: FOR non-browser processes, CALCULATE time_delta to first network connection. IF time_delta is outlier AND destination_domain is rare, THEN ALERT.
  - question: Can we detect anomalous spikes in a host's outbound network traffic and correlate them to a recently executed file?
    context: This question uses machine learning to monitor the overall network behavior of a host. Instead of looking at individual connections, it models the time series of connection volume. A sudden, significant spike in outbound connections that deviates from the host's normal baseline is a potential sign of malicious activity (e.g., scanning, data exfiltration). By correlating this anomaly with a process that was executed just before the spike, an analyst can pinpoint the likely malicious file responsible for the behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Network egress points (e.g., firewalls, proxies)
      - all endpoint and server network interfaces
    range: last 90 days
    queries:
      - pseudocode: MODEL time series of outbound connections per host. DETECT anomalies (spikes). CORRELATE anomaly time with recent process_creation events on the same host.
  - question: Is an office application or archive utility spawning a command-line interpreter like PowerShell or cmd.exe?
    context: This is a classic and high-fidelity indicator of malicious macro execution or exploitation of a document-based vulnerability. Office applications and archive tools should not normally launch command shells or scripting interpreters. This question uses a simple, powerful rule to detect this specific parent-child process relationship, which is a common step in initial access and execution stages of an attack.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - servers hosting office applications
    range: last 90 days
    queries:
      - pseudocode: ON process_creation (4688), IF parent_process IN [word, excel, 7z,...] AND child_process IN [powershell, cmd, wscript,...], THEN ALERT.
  - question: Is a statistically rare parent-child process pair involving an office application and an interpreter being observed?
    context: This question enhances the rule-based approach by using frequency analysis to reduce false positives and find novel attack variations. While a simple rule is effective, some legitimate but rare administrative tasks might trigger it. By baselining all parent-child relationships across the enterprise, we can specifically alert on office-to-interpreter pairings that are not just present, but statistically uncommon, making them more likely to be malicious.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - servers hosting office applications
    range: last 90 days
    queries:
      - pseudocode: BASELINE all parent-child process pairs. IF new_pair is office-to-interpreter AND pair_frequency is in bottom percentile, THEN ALERT.
  - question: Can we detect when a process acts as an anomalous bridge between two distinct communities of processes, such as an office app spawning an admin tool?
    context: This question applies graph analysis to model process relationships as a network. In this model, legitimate processes form clusters or 'communities' of related activity (e.g., office apps, developer tools, system processes). An attack often involves a process from one community illegitimately launching a process in another. By identifying these anomalous 'bridge' events, such as Word (Office community) launching PowerShell (Admin community), we can detect suspicious execution flows that deviate from the graph's normal structure.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - servers hosting office applications
    range: last 90 days
    queries:
      - pseudocode: MODEL process creations as a graph. USE community detection. IF an edge (parent-child) bridges two distinct communities anomalously, THEN ALERT.
  - question: Is a command-line interpreter being executed with arguments containing known obfuscation techniques or download cradle patterns?
    context: This question targets the content of command lines to find evidence of malicious activity. Attackers frequently use interpreters like PowerShell with obfuscated commands to hide their actions and download additional payloads. By using regular expressions (regex) to search for common malicious patterns, such as base64 encoding flags, web download commands, or in-memory execution flags (IEX), we can detect these techniques directly.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - Domain Controllers
      - administrative jump boxes
    range: last 90 days
    queries:
      - pseudocode: ON process_creation (4688) with interpreter, APPLY regex library to command_line_arguments. IF regex_match for known malicious pattern, THEN ALERT.
  - question: Is an interpreter being executed with an unusually long or high-entropy command line compared to its normal baseline?
    context: This question uses statistical metrics to find anomalous command lines without relying on specific patterns. Obfuscated malicious scripts are often significantly longer and more random (higher character entropy) than benign administrative commands. By establishing a baseline for the length and entropy of command lines for each interpreter (e.g., powershell.exe), we can flag executions that are statistical outliers, which are strong candidates for being malicious.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - Domain Controllers
      - administrative jump boxes
    range: last 90 days
    queries:
      - pseudocode: FOR each interpreter, BASELINE command line length and entropy. IF new_execution exceeds N standard deviations from the mean, THEN ALERT.
  - question: Can we use a text classification model to predict whether a new, unseen interpreter command line is malicious?
    context: This question applies Natural Language Processing (NLP) to classify command-line content. By training a model on a large dataset of labeled benign and malicious command lines, the model learns the textual features (like specific keywords, character combinations, and structure) associated with malicious activity. This allows for the scoring of any new command line for its probability of being malicious, enabling the detection of novel threats that don't match existing regex patterns or simple statistical thresholds.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - Domain Controllers
      - administrative jump boxes
    range: last 90 days
    queries:
      - pseudocode: FOR each new interpreter command line, SCORE with trained NLP model. IF malicious_probability > threshold, THEN ALERT.
  - question: Did a process spawned by an office application make an external network connection, and is that process not on an approved allow-list?
    context: This question identifies a suspicious two-step behavior: an office application launching a separate process, which in turn connects to the internet. This is a common pattern for malware to bypass detection by having a seemingly benign helper process perform the C2 communication. By creating a rule that looks for this parent-child-network chain and filtering out known, legitimate helper applications, we can accurately detect this evasive technique.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Network egress points (e.g., firewalls, proxies)
      - user workstations
    range: last 90 days
    queries:
      - pseudocode: FIND process P where parent is office app. IF P makes external network connection AND P is not in helper_app_allowlist, THEN ALERT.
  - question: Is the combination of (Parent Process, Child Process, Destination Port) statistically rare across the environment?
    context: This question adds statistical rarity to the analysis of process-driven network connections. Instead of just looking at the behavior, it looks at the frequency of the specific combination of the parent process, the child process that makes the connection, and the port it connects to. A tuple like (WINWORD.EXE, svchost.exe, 443) might be common, but a tuple like (EXCEL.EXE, random.exe, 8080) that has never been seen before is highly suspicious. This helps focus analyst attention on truly anomalous events.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Network egress points (e.g., firewalls, proxies)
      - user workstations
    range: last 90 days
    queries:
      - pseudocode: FOR child processes making network connections, create tuple (ParentName, ChildName, DstPort). COUNT frequency of each tuple. IF tuple_count < threshold, THEN ALERT.
  - question: Can we use clustering to identify anomalous process network behaviors that don't fit into established normal patterns?
    context: This question uses unsupervised machine learning to find outliers without pre-defined rules. By converting process network events into numerical vectors (including features like parent type, child name, port, etc.), a clustering algorithm like DBSCAN can group them into clusters of 'normal' behavior. Any event that doesn't fit into a cluster is labeled as noise or an anomaly. These noise points represent novel or infrequent behaviors that warrant investigation, such as a process spawned by an office app making an unusual network connection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Network egress points (e.g., firewalls, proxies)
      - user workstations
    range: last 90 days
    queries:
      - pseudocode: VECTORIZE process network events with features. APPLY clustering algorithm (DBSCAN). INVESTIGATE events classified as noise/outliers.
  - question: Was a process executed from a temporary or download directory within five minutes of a file with the same name being downloaded to that host?
    context: This question directly targets the 'download and execute' behavior common in phishing and drive-by download attacks. By correlating network file download logs with process execution logs on the same host within a tight time window (5 minutes), we can create a high-fidelity alert. This links the delivery of a file to its immediate execution from a non-standard program location, which is a strong indicator of a user being tricked into running a malicious file.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - Zeek http.log
      - User profile directories on endpoints (e.g., Downloads, AppData)
      - network file transfer logs at the boundary
    range: last 90 days
    queries:
      - pseudocode: CORRELATE file_download_logs with process_execution_logs on host. IF process_path is in temp/download dir AND process_start_time is within 5 mins of download_time AND filenames match, THEN ALERT.
  - question: Is a low-prevalence executable running from a temp/download directory, or is there a spike in executions from these locations on a given host?
    context: This question uses two statistical approaches to find suspicious executions in temporary locations. First, it looks for rarity: a file that has run on very few machines in the enterprise but executes from a download folder is suspicious. Legitimate installers are usually more widespread. Second, it looks for volume: a sudden spike in the number of processes being run from these folders on a single host can indicate a dropper unpacking multiple malicious tools or a user executing multiple malicious files.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - Zeek http.log
      - User profile directories on endpoints (e.g., Downloads, AppData)
      - network file transfer logs at the boundary
    range: last 90 days
    queries:
      - pseudocode: ALERT if process runs from temp/download dir AND its hash prevalence < 0.1%. ALSO, ALERT if rate of execution from these dirs on a host spikes > 3 standard deviations.
  - question: Does a user's sequence of actions, such as 'file download' followed immediately by 'process execution from temp', represent a statistically anomalous sequence of behavior?
    context: This question models user behavior as a sequence of events to identify malicious workflows. Using a sequence-based model (like an LSTM), we can train it on millions of benign event sequences to learn what 'normal' user activity looks like. When a new sequence occurs, like downloading a file and immediately running it from the temp directory, the model can score it for anomalousness. A high anomaly score indicates that this specific sequence of actions is highly uncharacteristic of normal user behavior and is likely malicious.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - Zeek http.log
      - User profile directories on endpoints (e.g., Downloads, AppData)
      - network file transfer logs at the boundary
    range: last 90 days
    queries:
      - pseudocode: MODEL user activity as event sequences (web_browse, file_download, etc.). SCORE new sequences with trained LSTM model. IF anomaly_score > threshold for a download-then-exec sequence, THEN ALERT.