name: T1543: Create or Modify System Process
id: 1c3b1e7a-9f5e-4b8c-8d1a-2e9f6a4b1c3d
description: This playbook focuses on detecting adversaries who create or modify system processes, such as Windows Services or Linux daemons, to establish persistence or escalate privileges. An adversary might install a new malicious service that runs at startup, modify an existing legitimate service to point to a malicious payload, or exploit service misconfigurations like unquoted paths or weak permissions to execute code with elevated (e.g., SYSTEM) privileges. Investigations should focus on analyzing service creation and modification events, the properties of the service binaries (location, signature, entropy), the context of the creating process, and subsequent actions taken by the newly established service.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are newly created services associated with known malicious indicators from threat intelligence feeds?
  context: Adversaries often reuse tools, service names, or descriptions. Comparing newly created service artifacts (file name, hash, description) against a curated list of known malicious indicators is a high-fidelity method for detecting known threats attempting to establish persistence. A match provides strong evidence of a compromise.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations, DNS Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation_events | JOIN process_creation_events to get file_hash | LOOKUP threat_intel on service_name, service_filename, description, file_hash | RETURN matches
- question: Are newly created services using names or descriptions that are lexically dissimilar from known benign services in the environment?
  context: Attackers may use randomly generated or unusual names for their malicious services to avoid detection or collision with legitimate services. By establishing a baseline of normal service names and descriptions, we can use string similarity algorithms to flag new services that are statistical outliers, potentially indicating an attempt at evasion.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations, DNS Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH new_service_creation_events | EXTRACT service_name, description | COMPARE against baseline_of_benign_services using string_similarity_algorithm | ALERT where similarity_score < threshold
- question: Can we use machine learning to predict if a newly created service is malicious based on its properties?
  context: Malicious services often exhibit subtle characteristics that, when combined, can form a strong indicator of compromise. By training a machine learning model on features like binary path depth, name entropy, and file hash reputation, we can automate the detection of suspicious new services and assign a risk score to prioritize investigations.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations, DNS Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM service_creation_events | EXTRACT features (path_depth, name_entropy, hash_reputation) | APPLY classification_model | ALERT where prediction is "malicious" with high_confidence
- question: Are newly created services using command-lines that indicate the use of Living Off the Land Binaries (LOLBAS) or encoded commands?
  context: Adversaries frequently abuse legitimate system utilities (LOLBAS) to execute malicious code, as this helps them blend in with normal activity. Searching the command-line arguments of new services for patterns associated with LOLBAS execution (e.g., `powershell -e`, `rundll32.exe`), encoded commands, or other suspicious structures can reveal attempts to establish persistence stealthily.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH new_service_creation_events | JOIN process_creation_events | APPLY regex_library for LOLBAS_patterns on command_line | ALERT on match
- question: Do newly created services have names or file paths with unusually high character entropy?
  context: To evade signature-based detection and make their artifacts less memorable, adversaries may use randomly generated strings for service names and file paths. Calculating the Shannon entropy of these strings and comparing them to a baseline of normal services can identify outliers that are likely algorithmically generated and thus suspicious.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH new_service_creation_events | CALCULATE entropy for service_name, service_filename | COMPARE against baseline_entropy_distribution | ALERT where entropy > 95th_percentile
- question: Is there an anomalous spike in the rate of service creation on a specific host or across the enterprise?
  context: While individual service creations may seem normal, a sudden, large-scale increase in service creation activity can indicate automated adversary behavior, such as a worm spreading or a tool being deployed across multiple systems. Time-series anomaly detection can identify these significant deviations from the established baseline rate of change.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: COUNT service_creation_events over time by host | APPLY time_series_anomaly_detection_model | ALERT on significant positive deviation
- question: Are new services being created with binaries located in uncommon or user-writable directories?
  context: Legitimate system services are almost always located in protected system directories like C:\Windows\System32. Adversaries often place their malicious service binaries in user-writable locations like C:\Users, C:\ProgramData, or temporary folders. Alerting on service binaries in these disallowed locations is a strong indicator of malicious persistence. This can be further enriched by checking if the binary is unsigned.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation_events | WHERE service_filename_path in (disallowed_paths_list) | ENRICH with signing_info | ALERT if path is disallowed or binary is unsigned
- question: Are new service binaries being placed in directories that are statistically rare across the enterprise?
  context: Beyond a static list of "bad" directories, we can statistically identify suspicious locations. If a service binary is placed in a directory path that is unique or extremely uncommon across the entire organization, it warrants investigation. This "least frequency of occurrence" analysis can uncover novel persistence locations.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: AGGREGATE service_binary_paths over 30_days | CALCULATE frequency of each path | ALERT on paths below frequency_threshold (e.g., 1st percentile)
- question: Can a machine learning model predict service suspiciousness based on binary location and signing properties?
  context: A simple, rule-based model like a decision tree can effectively combine several suspicious features to generate a risk score. By training a model on features like whether the path is in a user profile, if the binary is unsigned, or if the signer is untrusted, we can automate the triage of new services and focus analyst attention on the highest-risk events.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Sysmon Event ID 7
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM service_creation_events | EXTRACT features (is_in_user_profile, is_unsigned, signer_untrusted) | APPLY decision_tree_model | ALERT on high_risk_score
- question: Are core service host processes (services.exe, svchost.exe) spawning interactive shells or other suspicious child processes?
  context: Core service processes typically do not spawn interactive shells like cmd.exe or powershell.exe. Such an event is highly anomalous and may indicate that a legitimate service has been compromised or hijacked to execute arbitrary commands. Correlating this activity with subsequent outbound network connections significantly increases the likelihood of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Asset Inventory: All Windows Endpoints and Servers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation where parent is 'services.exe' or 'svchost.exe' AND child is 'cmd.exe', 'powershell.exe', etc. | CORRELATE with network_logs from child_pid | ESCALATE if outbound_connection_exists
- question: Are legitimate service processes spawning child processes that deviate from their established baseline of behavior?
  context: Every service process has a predictable set of child processes it may spawn during normal operation. By baselining these parent-child relationships, including typical command-line structures, we can detect anomalies. A service spawning a new, never-before-seen child process or using unusually long command-line arguments is a strong indicator of potential compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: All Windows Endpoints and Servers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation where parent is a service | LOOKUP child_process_name in baseline_for_parent | ALERT if child_process is not in baseline or command_line_args are anomalous
- question: Can graph analysis reveal anomalous parent-child process relationships involving system services?
  context: Viewing the enterprise's process activity as a massive graph allows for powerful anomaly detection. A new, rare "edge" in this graph—for instance, the first-ever observation of svchost.exe spawning cscript.exe—represents a significant deviation from normal system behavior. Graph-based algorithms can automatically surface these novel relationships for investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: All Windows Endpoints and Servers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL process_creation_events as a graph | APPLY graph_anomaly_detection | ALERT on new or rare edges involving service processes
- question: Is an unauthorized process modifying the registry keys that control a service's executable path or failure action?
  context: A common persistence technique is to hijack an existing service by modifying its `ImagePath` registry key to point to a malicious binary. Monitoring these critical registry values for changes and alerting when the modifying process is not an approved installer or administrative tool can directly detect this type of tampering.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4697
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_write_events where target_key is 'ImagePath', 'ServiceDll', 'FailureCommand' | IF modifying_process not in allowlist | ALERT
- question: Are specific service configurations changing more frequently than their historical baseline?
  context: While some service configurations may change during legitimate updates, most remain static. By periodically hashing the key configuration values of each service, we can establish a baseline rate of change. A service whose configuration suddenly starts changing frequently is anomalous and could be a sign of repeated tampering or a misconfigured tool.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SNAPSHOT service_configs daily | HASH key_values | TRACK hash_changes_over_time per service | ALERT if change_rate > (mean + 3*stdev)
- question: Can a machine learning model detect anomalous service configurations compared to a known-good baseline?
  context: A One-Class SVM is an anomaly detection model that learns the boundary of "normal" data. By training it on snapshots of service configurations from a trusted golden image, the model can then classify any live configuration as either normal (inlier) or anomalous (outlier). This is effective for detecting novel or unusual modifications that might not be caught by specific rules.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Network Asset Inventory: Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON registry_modification_event | CAPTURE current_service_config | APPLY one_class_svm_model | ALERT if classification is 'outlier'
- question: Is a new service being created to run as LocalSystem using a binary associated with a known privilege escalation tool?
  context: Adversaries use well-known tools (like JuicyPotato, PrintSpoofer) to exploit vulnerabilities and create a service running with the highest privileges (LocalSystem). This action is a direct, high-confidence indicator of a privilege escalation attempt. Matching the service binary against a list of known tool names or hashes is a critical detection.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation_events where service_account is 'LocalSystem' | LOOKUP service_filename, file_hash in privesc_tool_intel_list | ALERT on match
- question: Are service creation commands using statistically rare argument combinations, such as pointing to a LOLBAS while requesting LocalSystem privileges?
  context: The specific combination of command-line arguments used to create a service can be revealing. A rare combination, such as using `sc.exe` to create a service named after a LOLBAS (`binPath= C:\Windows\System32\rundll32.exe...`) and setting the account to LocalSystem (`obj= LocalSystem`), is highly suspicious and deviates from normal administrative behavior.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation where process_name is 'sc.exe', 'powershell.exe' | ANALYZE command_line_arguments | CALCULATE frequency of argument_combinations | ALERT on combinations below frequency_threshold
- question: Can a machine learning model predict privilege escalation attempts based on the context of a service's creation?
  context: A predictive model can synthesize multiple weak indicators into a strong signal. By training a model on features like whether the service account is SYSTEM, the binary is a LOLBAS, the path is user-writable, and the creating user is a non-admin, we can automatically score the risk of a new service being part of a privilege escalation chain.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM service_creation_events | EXTRACT features (account_is_system, binary_is_lolbas, path_is_writable) | APPLY classification_model | ALERT where prediction is 'privesc' with high_confidence
- question: Is a malicious executable being placed in a directory to exploit an unquoted service path vulnerability?
  context: Unquoted service paths (e.g., `C:\Program Files\App\service.exe`) can be exploited by placing a malicious executable at a higher-level path (e.g., `C:\Program.exe`). The system will execute the malicious file first. This query first identifies vulnerable services and then creates targeted monitoring to detect file creation in those specific, exploitable locations.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Windows Event ID 4688
  - Network Asset Inventory: All Windows Endpoints and Servers, particularly older systems or those with third-party software
  range: last 90 days
  queries:
  - technology: pseudocode
    query: IDENTIFY services with unquoted_paths | FOR each vulnerable_path | MONITOR for file_creation_events where new_filename matches exploitable_name (e.g., 'Program.exe') | ALERT
- question: Are attackers using typosquatting to plant executables that exploit unquoted service paths?
  context: In addition to exact path hijacking, attackers might use filenames that are very similar to the intended service name (e.g., `servlce.exe` instead of `service.exe`). Using a string distance algorithm can detect these subtle misspellings in vulnerable directories, which might otherwise be missed by human review.
  answer_sources:
  - Sysmon Event ID 11
  - Network Asset Inventory: All Windows Endpoints and Servers, particularly older systems or those with third-party software
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCAN vulnerable_unquoted_path_directories for new_executables | CALCULATE string_distance between new_filename and legitimate_service_name | ALERT if distance is low
- question: Can we prioritize monitoring efforts by risk-scoring services based on their configuration weaknesses?
  context: Not all services are equally vulnerable. By systematically identifying weaknesses like unquoted paths or weak permissions and using a model to assign a risk score, security teams can focus their high-fidelity, and potentially more resource-intensive, detections on the services most likely to be targeted for privilege escalation.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Network Asset Inventory: All Windows Endpoints and Servers, particularly older systems or those with third-party software
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCAN services for weaknesses (unquoted_path, weak_acls) | APPLY regression_model to assign risk_score | PRIORITIZE monitoring on high_risk_services
- question: Is a non-administrative user account creating a service configured to run with SYSTEM privileges?
  context: Standard users should never be able to create services that run as LocalSystem. This action is a fundamental violation of the principle of least privilege and is a very strong indicator of a successful privilege escalation exploit. The query requires enriching log data with the user's group memberships from Active Directory.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: All Windows Endpoints and Servers, Authentication Logs from Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation_events where service_account is 'LocalSystem' | ENRICH with creating_user_group_membership | ALERT if user is not in admin_groups_list
- question: Are users creating services at a rate that is anomalous for their own historical behavior?
  context: This is a behavioral analytic that looks for deviations in user activity. For a non-admin, any service creation is an anomaly. For an administrator, a sudden spike in service creation activity compared to their own normal baseline could indicate their account has been compromised and is being used to deploy malicious services at scale.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: All Windows Endpoints and Servers, Authentication Logs from Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: COUNT service_creations by user per day | COMPARE count to user's historical baseline | ALERT if count > (mean + 3*stdev) OR if non-admin_user count > 0
- question: Is a user performing an action (like creating a SYSTEM service) that is inconsistent with the behavior of their peer group?
  context: Users can be clustered into peer groups based on their typical job functions and activities. Anomaly detection can then identify when a user's behavior deviates not just from their own baseline, but from the baseline of their peers. A user from a 'developer' peer group creating a SYSTEM service is a high-risk anomaly.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: All Windows Endpoints and Servers, Authentication Logs from Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER users into peer_groups based on activity_logs | ON service_creation_event | IF creating_user's_action is anomalous for their peer_group | ALERT
- question: Following the creation of a new SYSTEM service, does that service immediately execute post-exploitation activities like credential dumping or discovery?
  context: A key indicator of malicious intent is what a process does immediately after it's created. This query chains events to look for a common attack pattern: first, a service is created with SYSTEM privileges, and second, that new service process immediately spawns tools for credential dumping (e.g., Mimikatz) or reconnaissance (e.g., `whoami /all`). This sequence is a critical alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TRIGGER on new_SYSTEM_service_creation | MONITOR service_pid for 5_minutes | IF child_process matches credential_dumping or discovery_signatures | CRITICAL_ALERT
- question: Do the child processes of a new SYSTEM service contain rare or suspicious command-line fragments (n-grams)?
  context: Instead of looking for full command-line signatures, n-gram analysis breaks command lines into small, overlapping chunks (e.g., 'add user', '-w hidden'). By baselining the frequency of these n-grams from benign processes, we can flag new commands that contain statistically rare and suspicious fragments, indicating novel or obfuscated malicious commands.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON new_SYSTEM_service_child_process | EXTRACT command_line_ngrams | COMPARE ngram_frequency to baseline | ALERT on rare_ngrams (e.g., 'dumplsass', '-w hidden')
- question: Can we detect the entire attack chain of privilege escalation followed by C2 communication using a sequence analysis model?
  context: Advanced attacks consist of a sequence of actions. A Hidden Markov Model or similar technique can learn the probability of transitioning from one state to another (e.g., from 'PowerShell execution' to 'Outbound Network Connection'). It can then identify entire chains of events, like `Service Create -> Spawn PowerShell -> Execute Encoded Command -> C2 Connection`, as a single, high-confidence malicious sequence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Network Asset Inventory: All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM host_events | APPLY sequence_analysis_model (HMM) | ALERT if observed_sequence matches known_malicious_attack_chain
- question: Has a non-administrative user been granted permissions to modify a service and then immediately used those permissions to alter its configuration?
  context: This is a classic privilege escalation technique involving weak service permissions. The attack occurs in two stages: first, the attacker modifies the service's permissions (DACL) to give themselves control, and second, they modify the service's binary path to point to their payload. Chaining these two events together, performed by the same non-admin user in a short time window, provides a very strong detection.
  answer_sources:
  - Windows Event ID 4670
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4697
  - Network Asset Inventory: Service configuration objects on Domain Controllers and critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE events within 1_hour by same_non_admin_user: (1) EventID 4670 granting write_permission on a service; (2) EventID 13/4657 modifying ImagePath for same service | ALERT
- question: Are the permissions on critical services changing over time to become less secure?
  context: Instead of waiting for the exploit, we can proactively monitor the security posture of services. By assigning a risk score to a service based on who can modify it, we can track this score over time. A sudden increase in the score (e.g., a standard user is granted write access) indicates a degradation in security and a potential precursor to an attack.
  answer_sources:
  - Windows Event ID 4670
  - Network Asset Inventory: Service configuration objects on Domain Controllers and critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PERIODICALLY scan service_DACLs | CALCULATE risk_score based on accounts_with_write_access | TRACK score_over_time for each service | ALERT on significant score_increase
- question: Can we automatically discover the relationship between permission changes and subsequent service modification events in our environment's data?
  context: Association rule mining is a data science technique that can automatically find "if-then" patterns in large datasets. By applying it to security event logs, we might discover a rule like "If a non-admin user gets write permission on ServiceX, then they are highly likely to modify its ImagePath." Discovering such a rule from the data itself validates the detection logic and can uncover new, similar attack patterns.
  answer_sources:
  - Windows Event ID 4670
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4697
  - Network Asset Inventory: Service configuration objects on Domain Controllers and critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: APPLY association_rule_mining to security_event_logs | SEARCH for rules with high_confidence like {PermissionChangeEvent} => {ConfigurationChangeEvent} by same_user | USE discovered_rules for detection