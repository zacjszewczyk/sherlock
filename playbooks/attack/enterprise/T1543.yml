name: T1543: Create or Modify System Process
id: 5a8e9d3c-1b7f-4d6a-9e0b-2c1f8a7d6e5b
description: This playbook helps investigate the creation or modification of system processes for persistence and privilege escalation. It covers detecting malicious new services based on threat intelligence, lexical analysis, and machine learning; identifying LOLBAS usage, high entropy names, and unusual service paths; monitoring for anomalous process relationships where services spawn unexpected children; tracking registry modifications to service configurations; detecting unquoted service path exploits; and identifying service creation or modification by non-administrative users to gain SYSTEM privileges.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any new services been created that match known malicious indicators from threat intelligence feeds?
    context: This question aims to identify persistence attempts where an adversary installs a service whose name, description, or underlying binary file hash is a known indicator of compromise (IOC). Matching against a threat intelligence feed provides a high-fidelity method for detecting known malicious tools or malware families that use services for persistence.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Domain Controllers, Application Servers, Critical Workstations, DNS Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH service_creation_events (EventID 7045, 4697)
          JOIN process_creation_events (EventID 4688, Sysmon 1) ON ProcessID to get file_hash
          LOOKUP file_hash, service_name, service_filename AGAINST threat_intelligence_feed
          RETURN events where a match is found
  - question: Are there any newly created services with names or descriptions that are lexically dissimilar to known benign services in the environment?
    context: This question helps uncover evasive adversary techniques where a malicious service is given a unique or randomized name to avoid signature-based detection. By comparing the new service's name and description to a baseline of all known-good services, a low similarity score (e.g., using Jaccard or Levenshtein distance) can highlight potentially suspicious outliers that warrant further investigation.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Domain Controllers, Application Servers, Critical Workstations, DNS Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          GET new_service_name, new_service_description FROM service_creation_events
          FOR EACH new_service:
            CALCULATE similarity_score against baseline_of_benign_services
            IF similarity_score < 5th_percentile:
              FLAG as suspicious
          RETURN suspicious services
  - question: Can a machine learning model classify any newly created services as malicious based on their features?
    context: This question leverages a machine learning approach to proactively identify malicious services that may not be caught by simple signature or anomaly rules. By training a classifier (like a Random Forest) on features such as binary path depth, name entropy, and file hash, the model can learn complex patterns associated with malicious services and assign a risk score to new ones, enabling automated and prioritized alerting.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Domain Controllers, Application Servers, Critical Workstations, DNS Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH new_service_event:
            EXTRACT features (path_depth, name_entropy, file_hash, etc.)
            INPUT features into trained_classification_model
            GET risk_score
            IF risk_score > high_confidence_threshold:
              ALERT as potentially malicious
          RETURN high-risk services
  - question: Are any new services configured to execute using suspicious command-line patterns, such as LOLBAS, encoded commands, or unusual arguments?
    context: This question focuses on detecting services that abuse legitimate system tools (Living Off The Land Binaries, or LOLBAS) to execute malicious code. Adversaries use this technique to evade detection, as the parent process is a trusted utility. By inspecting the command line for patterns associated with LOLBAS execution (e.g., `powershell -e`, `rundll32.exe` with suspicious DLLs), we can identify this masquerading behavior.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Domain Controllers, Application Servers, Critical Workstations
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH service_creation_events
          JOIN process_creation_events ON ProcessID
          GET command_line
          APPLY regex_library for LOLBAS_patterns
          RETURN events where command_line matches pattern
  - question: Do any newly created services have names or file paths with unusually high character entropy?
    context: This question aims to detect algorithmically generated or randomized service names and paths, which are often used by malware to avoid static blacklists. Calculating the Shannon entropy of these strings and comparing them to a baseline of normal values can effectively flag outliers. A high entropy score suggests randomness and is a strong indicator of potentially malicious, automated activity.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Domain Controllers, Application Servers, Critical Workstations
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH new_service_event:
            CALCULATE entropy(service_name) and entropy(service_file_name)
            COMPARE to baseline_entropy_distribution
            IF entropy > 95th_percentile:
              ALERT as high entropy
          RETURN high-entropy services
  - question: Has there been an anomalous spike in the rate of new service creations on a host or across the enterprise?
    context: This question seeks to identify mass deployment of malicious services by monitoring the rate of service creation over time. A sudden, significant deviation from the normal baseline rate, detected using a time-series anomaly detection model, can indicate an automated attack, such as a worm or a script-based lateral movement tool installing persistence on multiple machines simultaneously.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Domain Controllers, Application Servers, Critical Workstations
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          AGGREGATE count(service_creation_events) per host and globally over time_buckets
          INPUT time_series into anomaly_detection_model (e.g., LSTM, ARIMA)
          IF current_rate > (forecast + 3 * std_dev):
            ALERT as anomalous spike
          RETURN anomalous time windows and hosts
  - question: Have any new services been installed with their executable binary located in an uncommon or user-writable directory, such as a user profile or temp folder?
    context: This question helps identify a common adversary tactic where malicious service binaries are dropped into non-standard, user-writable locations to bypass protections on system directories. Legitimate services are almost always installed in protected locations like `C:\Windows\System32` or `C:\Program Files`. Alerting on service creation from directories like `C:\Users`, `C:\Temp`, or `C:\ProgramData` is a high-fidelity indicator of suspicious activity, especially if the binary is also unsigned.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH service_creation_events
          WHERE service_file_path IN (list_of_disallowed_dirs)
          ENRICH with signing_info (Sysmon 7)
          ALERT if path is disallowed, especially if unsigned
          RETURN suspicious service events
  - question: Are any new services pointing to a binary path that is statistically rare across the enterprise?
    context: This question uses frequency analysis to find outlier service paths. While some legitimate third-party applications might install services in unique locations, a path that appears on only one or a very small number of machines is highly suspicious. This 'least frequency of occurrence' analysis can uncover custom malware or tools that have not been widely deployed.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          GET all service_binary_paths from new_service_events over 30 days
          CALCULATE frequency of each path across enterprise
          FLAG paths with frequency < 1st_percentile
          RETURN services with statistically rare paths
  - question: Can a machine learning model identify a new service as suspicious based on its binary's location and signing properties?
    context: This question applies a simple, targeted machine learning model to score the risk of a new service. By using clear, high-impact features like whether the path is in a temp/user directory and whether the binary is unsigned, a decision tree can quickly and accurately classify new services, automating the initial triage process for analysts.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH new_service:
            EXTRACT features (path_in_user_profile, binary_is_unsigned, etc.)
            INPUT features into decision_tree_classifier
            GET risk_score
            IF risk_score indicates 'suspicious':
              ALERT for review
          RETURN services classified as suspicious
  - question: Has a service process like services.exe spawned a suspicious child process, such as an interactive shell or a LOLBAS utility?
    context: This question targets a critical anomaly where a parent service process, which normally has a predictable set of child processes, spawns an unexpected and high-risk tool like `cmd.exe` or `powershell.exe`. This behavior is a strong indicator that a service has been compromised or was malicious from the start, and is now being used as a privileged execution context. Correlating this with outbound network activity further increases the severity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - NAI: All Windows Endpoints and Servers, Network Egress Points
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH process_creation_events
          WHERE ParentProcessName IN ('services.exe', 'svchost.exe')
          AND ProcessName IN ('cmd.exe', 'powershell.exe', 'rundll32.exe', etc.)
          CORRELATE with network_logs within 1 minute
          ALERT if child process makes outbound connection
          RETURN correlated alert
  - question: Has a legitimate service process spawned a child process that has never been observed before or has anomalous command-line arguments?
    context: This question uses baselining to detect deviations in process behavior. By creating a profile of normal child processes for each service (e.g., `svchost.exe`), any new or unseen child process becomes an immediate anomaly. This can detect novel attack techniques that don't match known signatures but deviate from established normal behavior within the specific environment.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - NAI: All Windows Endpoints and Servers, Network Egress Points
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH service_parent_process:
            BUILD baseline of normal_child_processes and command_line_stats
          MONITOR new_child_processes
          IF child_process_name NOT IN baseline OR command_line_length > 99th_percentile:
            FLAG as anomalous
          RETURN anomalous parent-child events
  - question: Does graph analysis reveal a new or rare parent-child relationship involving a service process?
    context: This question treats the environment's process activity as a large graph and looks for structural anomalies. A service process spawning a LOLBAS for the first time creates a new, rare 'edge' in this graph. Graph-based anomaly detection algorithms can automatically surface these rare connections, which are often indicative of an adversary exploring a new execution path.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - NAI: All Windows Endpoints and Servers, Network Egress Points
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MODEL all parent-child process events as a directed graph
          APPLY graph anomaly detection algorithm (e.g., PageRank, Community Detection)
          IDENTIFY new or statistically rare edges (relationships)
          ALERT on new edges originating from service processes
          RETURN anomalous edges for investigation
  - question: Has an unauthorized process modified a critical service configuration value in the registry?
    context: This question aims to detect a direct service hijacking attempt. Adversaries may modify the `ImagePath` or `ServiceDll` registry value to point to their own payload, which will then be executed with the service's privileges. By monitoring these specific, sensitive registry values and alerting on any modification made by a process not on an explicit allowlist, these takeover attempts can be caught.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows Event ID 4697
      - NAI: Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH registry_write_events (EventID 4657, Sysmon 13)
          WHERE TargetObject ends with 'ImagePath', 'ServiceDll', or 'FailureCommand'
          AND ProcessName NOT IN (allowlist_of_installers)
          ALERT on unauthorized modification
          RETURN suspicious registry modification events
  - question: Is any service's configuration changing at an abnormally high frequency?
    context: This question uses the concept of configuration integrity to find suspicious activity. Legitimate service configurations are static and rarely change. By periodically snapshotting and hashing key configuration values, we can track their rate of change. A service whose configuration hash changes frequently is behaving anomalously, which could indicate repeated tampering or a misconfigured, malfunctioning, or compromised component.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows Event ID 4697
      - NAI: Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          PERIODICALLY snapshot and hash service configurations (ImagePath, ServiceDll, etc.)
          FOR EACH service, track its hash_change_rate over time
          IF change_rate > (historical_mean + 3 * std_dev):
            ALERT as abnormal modification activity
          RETURN services with high change rates
  - question: Can a machine learning model detect an anomalous service configuration modification?
    context: This question applies unsupervised machine learning to detect malicious service configurations. A One-Class SVM is trained on snapshots of known-good service configurations from a golden image. When a service modification event occurs, the new configuration is passed to the model. If the model classifies it as an 'outlier,' it means the configuration does not conform to the learned pattern of 'normal,' flagging it for immediate review.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows Event ID 4697
      - NAI: Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          TRAIN One-Class SVM on known-good service configurations
          ON service_modification_event (Sysmon 13):
            CLASSIFY new configuration with the model
            IF classified as 'outlier':
              ALERT as anomalous configuration
          RETURN outlier services
  - question: Has a new service been created to run as LocalSystem using a known privilege escalation tool?
    context: This is a high-confidence question for detecting privilege escalation. It specifically looks for the combination of a new service being configured to run with the highest privileges (`LocalSystem`) and the service's binary matching a known privilege escalation tool like JuicyPotato or PrintSpoofer. A match provides a strong signal that an adversary is attempting to elevate from a lower-privileged user to SYSTEM.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH service_creation_events (EventID 7045, 4697)
          WHERE ServiceAccount = 'LocalSystem'
          AND ServiceFileName (or its hash) IN (threat_intel_list_of_privesc_tools)
          CREATE critical alert
          RETURN matching events
  - question: Has a service been created using a statistically rare combination of command-line arguments?
    context: This question uses frequency analysis on command-line arguments to spot unusual service creation commands. While an administrator might use `sc.exe create`, an adversary might use a rare combination of arguments, such as pointing `binPath=` to a LOLBAS while also setting `obj= LocalSystem`. Flagging commands with argument combinations that are statistically rare across the environment can surface these subtle deviations.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          ANALYZE command_lines of service creation processes (sc.exe, powershell.exe)
          CALCULATE frequency of argument combinations across the environment
          IF combination_frequency < 1% threshold:
            FLAG as rare and suspicious
          RETURN events with rare command-line combinations
  - question: Can a machine learning model predict a service creation event as a privilege escalation attempt?
    context: This question uses a supervised machine learning model to proactively identify service-based privilege escalation. By training a model on features like the service account, the type of binary (LOLBAS or not), the binary's location, and the creating user's privileges, the system can learn the patterns of malicious attempts and flag new service creations that fit this profile with high confidence.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH new_service_event:
            EXTRACT features (service_account_is_system, binary_is_lolbas, etc.)
            INPUT features into trained_privesc_classifier
            GET prediction_score
            IF prediction is 'malicious' with high confidence:
              ALERT
          RETURN services predicted as malicious
  - question: Has a file been created that could exploit an unquoted service path vulnerability?
    context: This question targets a classic privilege escalation technique. First, it requires identifying services with unquoted paths in their configuration (e.g., `C:\Program Files\Some App\service.exe`). Then, it involves monitoring for the creation of a malicious executable in a way that hijacks the path (e.g., `C:\Program.exe`). A file creation event that matches this pattern is a strong indicator of an active exploitation attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Windows Event ID 4688
      - NAI: All Windows Endpoints and Servers, particularly older systems or those with third-party software
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          IDENTIFY services with unquoted paths from registry
          FOR EACH vulnerable service:
            MONITOR for file_creation_events (Sysmon 11) in exploitable path segments
            (e.g., monitor for C:\Program.exe if path is C:\Program Files\...)
            ALERT on matching file creation
          RETURN alerts
  - question: Has a file been created in a vulnerable service path directory with a name similar to the legitimate service executable?
    context: This question looks for typosquatting attempts related to unquoted service path vulnerabilities. After identifying services with vulnerable paths, this analytic scans for new executables in those paths whose names are very similar (e.g., `servlce.exe` instead of `service.exe`). A small string distance (Damerau-Levenshtein) between the legitimate and new filename suggests a deliberate attempt to hijack execution.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Windows Event ID 4688
      - NAI: All Windows Endpoints and Servers, particularly older systems or those with third-party software
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          IDENTIFY services with unquoted paths
          SCAN vulnerable directories for new executables
          FOR EACH new_file:
            CALCULATE string_distance(new_filename, legitimate_filename)
            IF distance <= 2:
              FLAG as potential typosquatting
          RETURN flagged files
  - question: Can a model prioritize monitoring efforts based on a service's configuration weakness risk score?
    context: This question proposes a risk-based approach to monitoring. Instead of monitoring all services equally, a regression model can assign a risk score to each service based on its configuration weaknesses (unquoted paths, weak permissions). High-fidelity, but potentially expensive, detection analytics can then be focused only on the highest-risk services, optimizing resource usage.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Windows Event ID 4688
      - NAI: All Windows Endpoints and Servers, particularly older systems or those with third-party software
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SCAN all services for configuration weaknesses (unquoted paths, ACLs)
          INPUT features into regression_model to get a risk_score per service
          APPLY high-fidelity detections to top N riskiest services
          RETURN list of services prioritized by risk
  - question: Has a non-administrative user created a service to run as SYSTEM?
    context: This is a critical and high-confidence question for detecting privilege escalation. The creation of a service is a privileged operation. If a user who is not a member of an administrative group creates a service, especially one that runs as SYSTEM, it is a major security violation. This almost certainly indicates that the non-administrative account is compromised and being used to escalate privileges.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: All Windows Endpoints and Servers, Authentication Logs from Domain Controllers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH service_creation_events (EventID 7045, 4697)
          ENRICH event with creating_user's group memberships from Active Directory
          IF ServiceAccount = 'LocalSystem' AND creating_user NOT IN admin_groups:
            CREATE critical alert
          RETURN matching events
  - question: Is a user creating an anomalous number of system services compared to their historical baseline?
    context: This question uses behavioral baselining to detect unusual activity. For non-administrative users, the baseline of service creations should be zero, making any such action an immediate anomaly. For administrators, a sudden spike in service creation activity, significantly deviating from their personal norm, can indicate that their account is compromised and being used for automated persistence or lateral movement.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: All Windows Endpoints and Servers, Authentication Logs from Domain Controllers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH user, establish baseline of service_creations_per_day
          FOR non-admin_users, baseline is 0
          MONITOR new service creations
          IF user is non-admin OR (user is admin AND count > mean + 3 * std_dev):
            FLAG as anomalous
          RETURN anomalous user activity
  - question: Is a user performing an action, like creating a SYSTEM service, that is inconsistent with the behavior of their peer group?
    context: This question uses peer group analysis to spot anomalies that individual baselining might miss. Users are clustered based on their typical job functions and activities. If a user from a 'Standard User' cluster performs an action that is characteristic of the 'System Administrator' cluster (like creating a SYSTEM service), this cross-cluster behavior is highly suspicious and indicates a potential compromise or insider threat.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: All Windows Endpoints and Servers, Authentication Logs from Domain Controllers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          CLUSTER users into peer_groups based on activity logs
          FOR EACH new_service_creation by a user:
            CHECK if 'create_system_service' is a normal action for that user's peer_group
            IF action is not characteristic of peer_group:
              FLAG as high-risk anomaly
          RETURN cross-cluster anomalous events
  - question: Has a newly created SYSTEM service spawned a child process associated with credential dumping or discovery?
    context: This question looks for the immediate post-exploitation activity following a successful privilege escalation. It creates a short-lived correlation rule that watches a new SYSTEM service. If that service's process quickly spawns a child process known for credential dumping (e.g., `mimikatz.exe`, `procdump lsass.exe`) or reconnaissance (`whoami /all`), it's a strong indication the service was malicious and is now being used to further the attack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7045
      - Windows Event ID 4697
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          ON new_system_service_creation (EventID 7045):
            MONITOR process tree for 5 minutes
            IF child_process matches credential_dumping or discovery signatures:
              CREATE critical alert
          RETURN chained alerts
  - question: Does the command line of a child process spawned by a new SYSTEM service contain statistically rare n-grams?
    context: This question uses n-gram analysis to detect suspicious command lines without relying on full signatures. By breaking down the command lines of child processes into small chunks (n-grams) and comparing their frequency to a baseline, rare sequences like 'add user', '-w hidden', or 'dumplsass' can be flagged even if the full command is obfuscated or novel.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7045
      - Windows Event ID 4697
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR child_processes of new SYSTEM services:
            CALCULATE n-gram frequency of command_line
            COMPARE to baseline n-gram frequencies from benign processes
            IF command_line contains n-grams with frequency < 1% threshold:
              FLAG as suspicious
          RETURN suspicious command lines
  - question: Has a sequence of events occurred that matches a known malicious attack chain involving service creation?
    context: This question uses sequence analysis to detect a multi-stage attack pattern. Rather than looking at single events, it uses a model (like a Hidden Markov Model) to identify a specific, ordered chain of events, such as a SYSTEM service being created, which then spawns PowerShell, which then executes an encoded command and makes a C2 connection. Detecting the entire sequence provides a very high-confidence alert.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7045
      - Windows Event ID 4697
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          INPUT stream of security events into a sequence analysis model (HMM)
          MODEL is trained to recognize malicious sequences, e.g.:
          {Service Create (SYSTEM)} -> {Spawn powershell} -> {Execute encoded command}
          IF model detects a match for a malicious sequence:
            ALERT on the entire event chain
          RETURN detected malicious sequences
  - question: Has a non-administrative user been granted write access to a service and then subsequently modified that service's configuration?
    context: This question detects a privilege escalation pathway where an attacker first modifies a service's permissions (DACL) to give their lower-privileged user account write access, and then uses that access to modify the service's `ImagePath` to point to a malicious payload. Correlating these two events (permission change followed by configuration change) by the same non-admin user within a short time window is a strong indicator of this attack.
    answer_sources:
      - Windows Event ID 4670
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Windows Event ID 4697
      - NAI: Service configuration objects on Domain Controllers and critical servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH for Event A: Permission change (EventID 4670) on a service by a non-admin user
          SEARCH for Event B: Config change (Sysmon 13, etc.) on the SAME service by the SAME user
          IF Event B occurs within 1 hour of Event A:
            CREATE critical alert
          RETURN correlated events
  - question: Has a service's permission risk score increased anomalously?
    context: This question provides a quantitative way to track service security posture. A risk score is calculated for each service based on who has write access (e.g., a standard user having write access gives a high score). By tracking this score over time, a sudden increase indicates that a risky permission has been granted. This change, deviating from the service's historical baseline, serves as an early warning of a potential misconfiguration or malicious tampering.
    answer_sources:
      - Windows Event ID 4670
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Windows Event ID 4697
      - NAI: Service configuration objects on Domain Controllers and critical servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          PERIODICALLY audit service DACLs and calculate a risk_score for each
          TRACK risk_score over time for each service
          IF current_score > (historical_mean + 2 * std_dev):
            ALERT as anomalous permission change
          RETURN services with increased risk scores
  - question: Can data mining discover a strong association rule between a non-admin user gaining service write permissions and then modifying the service?
    context: This question uses association rule mining (e.g., Apriori algorithm) to automatically discover attack patterns from raw event logs. The goal is to find a rule like "If a non-admin user gets write access to Service X, they will then modify the ImagePath of Service X" with high confidence. Discovering such a rule from the data itself validates this attack path is happening in the environment and provides a data-driven detection pattern for future use.
    answer_sources:
      - Windows Event ID 4670
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Windows Event ID 4697
      - NAI: Service configuration objects on Domain Controllers and critical servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          APPLY association rule mining (Apriori) to security event logs
          SEARCH for rules with high confidence and lift, such as:
          {Event=PermissionChange, User=NonAdmin} => {Event=ConfigChange, User=NonAdmin}
          DISCOVERED rules represent strong detection patterns
          RETURN high-confidence rules found in the data