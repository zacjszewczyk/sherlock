name: T1496.001: Compute Hijacking
id: d5c8e9f0-a1b2-4c3d-8e9f-0a1b2c3d4e5f
description: This playbook helps investigate whether an adversary is impacting system or service availability through compute hijacking (cryptomining). It provides questions to detect this activity by identifying processes that connect to known cryptocurrency mining pools, execute with known miner file hashes, or use command-line arguments containing mining-related patterns like wallet addresses or pool URLs. The playbook also focuses on behavioral indicators, such as sustained and anomalous high CPU utilization caused by unauthorized processes, a sequence of events involving defense evasion followed by suspicious process execution and network activity, and an increase in system instability or application errors that correlates with periods of high CPU load.
type: technique
related:
- TA0040: Impact
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any processes making DNS queries or network connections to known cryptocurrency mining pools, or do any running processes match the file hash of a known cryptominer?
  context: This question aims to identify the most direct evidence of cryptomining activity by leveraging threat intelligence. Matching DNS queries, connection IPs, or file hashes against a curated list of known malicious indicators is a high-confidence method for detecting common cryptomining tools and infrastructure. A positive match strongly suggests that a system's resources are being hijacked for unauthorized mining.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Internal DNS servers
  - network egress points (e.g., firewalls, proxies)
  - all server and workstation endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH (dns_logs OR network_logs OR process_creation_logs)
      WHERE (destination_domain IN cryptomining_domain_feed OR destination_ip IN cryptomining_ip_feed OR process_hash IN cryptomining_hash_feed)
      RETURN hostname, process_name, process_hash, destination_domain, destination_ip
- question: Have any domains with unusually high subdomain entropy been queried, and do these correlate with long-duration network connections?
  context: This question seeks to uncover cryptomining activity that uses domain generation algorithms (DGAs) or randomized pool connection strings to evade simple blocklists. High entropy in subdomains is a statistical anomaly that can indicate such evasion techniques. Correlating this with long-lived connections, which are typical for mining protocols, increases the confidence that the activity is related to cryptomining.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Internal DNS servers
  - network egress points (e.g., firewalls, proxies)
  - all server and workstation endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE subdomain_entropy for all dns_queries
      IDENTIFY domains where subdomain_entropy > 95th_percentile
      SEARCH network_logs for connections to these high_entropy_domains
      WHERE connection_duration > 10_minutes
      RETURN hostname, source_ip, high_entropy_domain
- question: Can machine learning models classify any network connections as having a high probability of being related to cryptomining based on their features?
  context: This question leverages a machine learning approach to detect cryptomining that may not rely on known indicators or simple statistical anomalies. By training a model on features like connection duration, data volume, and destination ASN, it can learn the subtle, complex patterns of cryptomining network traffic and identify suspicious connections that might otherwise be missed.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Internal DNS servers
  - network egress points (e.g., firewalls, proxies)
  - all server and workstation endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT network_connections to ML_model
      WHERE model_prediction_score > 0.9
      RETURN hostname, source_ip, destination_ip, prediction_score, contributing_features
- question: Has any process been executed with command-line arguments or script content containing patterns indicative of cryptomining?
  context: This question focuses on detecting cryptominers by inspecting their execution parameters. Cryptomining software often requires specific command-line arguments to function, such as a wallet address, a mining pool URL (e.g., using the 'stratum+tcp://' protocol), and algorithm specifications. Searching for these unique patterns in process creation and script execution logs is a highly effective way to identify active miners.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - PowerShell Script Block Logging (Event ID 4104)
  - All host endpoints and servers, particularly web servers and application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH (process_creation_logs OR powershell_script_block_logs)
      WHERE (command_line MATCHES REGEX '--algo|--user|-u|-o|stratum+tcp://' OR script_block MATCHES REGEX '--algo|--user|-u|-o|stratum+tcp://')
      RETURN hostname, process_name, command_line, script_block_content
- question: Has a common system process been executed with command-line arguments that are statistical outliers in terms of length or character entropy?
  context: Adversaries often disguise cryptomining activity by running it under the guise of legitimate system processes like 'svchost.exe' or 'powershell.exe'. This question aims to uncover this masquerading by identifying when such a process is launched with unusually long or complex (high-entropy) command-line arguments, which is uncharacteristic of its normal behavior but typical for passing encoded mining configurations.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - PowerShell Script Block Logging (Event ID 4104)
  - All host endpoints and servers, particularly web servers and application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each unique_process_name:
        CALCULATE baseline_command_line_length_and_entropy
      SEARCH process_creation_logs
      WHERE command_line_length > (baseline_length + 3*stdev) OR command_line_entropy > (baseline_entropy + 3*stdev)
      RETURN hostname, process_name, command_line
- question: Can a machine learning model classify any process command-line arguments as suspicious or malicious for cryptomining?
  context: This question uses a more advanced, Natural Language Processing (NLP) based approach to analyze command-line arguments. Unlike simple regex or statistical methods, an NLP model can understand the context and structure of commands, allowing it to detect novel, obfuscated, or previously unseen variations of cryptomining commands that other methods would miss.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - PowerShell Script Block Logging (Event ID 4104)
  - All host endpoints and servers, particularly web servers and application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT process_command_lines to NLP_model
      WHERE model_classification IN ('suspicious', 'malicious-cryptomining')
      RETURN hostname, process_name, command_line, model_classification
- question: Has any host's CPU utilization exceeded a hard threshold (e.g., 90%) for a sustained period, and which process was responsible?
  context: This question seeks to identify the most obvious symptom of compute hijacking: sustained, abnormally high CPU usage. By setting a fixed threshold, this method can catch resource abuse outside of expected high-load periods. Correlating the high utilization with the specific process responsible is the crucial next step to determine if the activity is unauthorized.
  answer_sources:
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - Windows Performance Monitor Logs (Process\% Processor Time)
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All host endpoints and servers
  - Cloud compute instances
  - Virtualization hypervisors.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH performance_logs
      WHERE total_cpu_utilization > 90% for 60_minutes
      CORRELATE with process_performance_logs for the same time_window
      RETURN hostname, top_cpu_process_name, process_cpu_utilization
- question: Has any host experienced CPU utilization that is a significant statistical outlier compared to its own historical baseline?
  context: This question refines the search for high CPU usage by comparing current activity against a host's normal, learned behavior. This statistical approach is more adaptable than a fixed threshold, as it can identify anomalous activity on a server that normally runs at 60% CPU just as well as on a workstation that normally runs at 10%. It helps to reduce false positives by understanding what is "normal" for each specific system.
  answer_sources:
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - Windows Performance Monitor Logs (Process\% Processor Time)
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All host endpoints and servers
  - Cloud compute instances
  - Virtualization hypervisors.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        CALCULATE baseline_cpu_utilization by hour_of_day, day_of_week
      SEARCH performance_logs
      WHERE current_cpu_utilization_zscore > 3 for 20_minutes
      RETURN hostname, top_5_cpu_processes
- question: Has a time-series forecasting model detected a significant anomaly in any host's CPU utilization pattern?
  context: This question applies machine learning to detect compute hijacking by predicting what a host's CPU load *should* be and alerting when reality deviates significantly. This method can detect more subtle or complex patterns of abuse that might not be caught by simple thresholding or statistical baselining, as it accounts for seasonality and long-term trends in system behavior.
  answer_sources:
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - Windows Performance Monitor Logs (Process\% Processor Time)
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All host endpoints and servers
  - Cloud compute instances
  - Virtualization hypervisors.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        INPUT current_cpu_utilization to time_series_model
        CALCULATE anomaly_score = (actual_cpu - predicted_cpu)
        WHERE anomaly_score > threshold for 15_minutes
        RETURN hostname, anomaly_score, running_processes
- question: Has a sequence of events occurred on a host involving a security service being stopped, followed by a suspicious process creation and a long-duration network connection?
  context: This question looks for a specific chain of events that is highly indicative of a defense evasion TTP followed by payload execution, a common pattern for cryptomining deployment. By correlating these disparate events (service stop, process creation, network connection) in a specific order and time window, this query can detect a full attack sequence with high confidence.
  answer_sources:
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - Zeek conn.log
  - All host endpoints and servers
  - Domain Controllers (for security policy changes)
  - Network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for sequence on same_host within 15_minutes:
        (event_id=7036 AND service_name='WinDefend' AND state='stopped')
        FOLLOWED BY (event_id=1 AND process_path IS suspicious)
        FOLLOWED BY (network_log AND duration > 10_minutes)
      RETURN hostname, timestamp, service_name, process_name, destination_ip
- question: Has any host accumulated a high risk score based on a combination of events like security service stops, suspicious process execution, and high CPU usage?
  context: This question moves beyond looking for a single indicator and instead uses a risk-scoring model. Individual events might be low-fidelity, but when several suspicious events occur on the same host around the same time, their cumulative risk score can point to a larger, malicious activity. This approach helps to surface threats by aggregating weak signals into a strong one.
  answer_sources:
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - Zeek conn.log
  - All host endpoints and servers
  - Domain Controllers (for security policy changes)
  - Network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        CALCULATE risk_score over 30_minute_window from (service_stop_events, suspicious_process_events, high_cpu_events, new_ip_connection_events)
        WHERE cumulative_risk_score > threshold
      RETURN hostname, cumulative_risk_score, contributing_events
- question: Can a graph-based ML model identify an anomalous subgraph of activity representing the cryptomining attack chain?
  context: This question uses an advanced graph analytics approach to model host behavior. By representing entities (processes, hosts, IPs) as nodes and their interactions as edges, a machine learning model can learn the normal "shape" of activity. It can then identify when a new, anomalous structure appears, such as the specific chain of defense evasion -> process creation -> external connection characteristic of cryptomining.
  answer_sources:
  - Windows System Event Log (Event ID 7036)
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - Zeek conn.log
  - All host endpoints and servers
  - Domain Controllers (for security policy changes)
  - Network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT event_stream to graph_neural_network
      IDENTIFY anomalous_subgraphs
      WHERE subgraph_pattern MATCHES cryptomining_attack_chain
      RETURN anomalous_subgraph_nodes_and_edges
- question: Is there a correlation between a high rate of application errors and high CPU utilization on any host?
  context: This question investigates a secondary effect of compute hijacking: system instability. Cryptominers that aggressively consume CPU resources can starve legitimate applications, causing them to crash or terminate unexpectedly. This query seeks to find this correlation by looking for a spike in application error events that occurs during a period of sustained high CPU load, which can be a strong indicator of resource exhaustion caused by malware.
  answer_sources:
  - Windows Application Event Log (Event ID 1000, 1002)
  - Windows System Event Log (Event ID 7031, 7034)
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - All host endpoints and servers, especially those with critical applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH application_error_logs
      WHERE count(event_id=1000) > 5 in 1_hour
      CORRELATE with performance_logs for same_host and same_hour
      WHERE avg_cpu_utilization > 90%
      RETURN hostname, error_event_count, avg_cpu_utilization
- question: Has any host experienced a statistically significant outlier in its hourly rate of application or service error events that coincides with an outlier in its CPU usage?
  context: This question refines the search for system instability by using statistical analysis instead of fixed thresholds. It establishes a baseline for what constitutes a "normal" rate of errors for each host and alerts only when a significant deviation occurs. By requiring this error-rate anomaly to be temporally correlated with a CPU usage anomaly, it creates a high-fidelity signal for resource exhaustion likely caused by cryptomining.
  answer_sources:
  - Windows Application Event Log (Event ID 1000, 1002)
  - Windows System Event Log (Event ID 7031, 7034)
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - All host endpoints and servers, especially those with critical applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        CALCULATE baseline_hourly_error_rate and baseline_cpu_usage
      IDENTIFY hours where error_count is poisson_outlier
      FOR those hours, CHECK if cpu_usage is also statistical_outlier
      RETURN hostname, outlier_hour, error_count, cpu_usage
- question: Can a Bayesian network infer a high probability of cryptomining activity based on observed evidence of system instability and high CPU load?
  context: This question applies a probabilistic model to determine the likelihood of an underlying cause (cryptomining) given observed effects (application crashes, high CPU). A Bayesian network can model the dependencies between these events. When evidence of app crashes is observed, the model can calculate the updated probability that the cause is high CPU from an unknown process, providing a quantitative, risk-based alert.
  answer_sources:
  - Windows Application Event Log (Event ID 1000, 1002)
  - Windows System Event Log (Event ID 7031, 7034)
  - Windows Performance Monitor Logs (Processor\% Processor Time)
  - All host endpoints and servers, especially those with critical applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT observed_evidence (e.g., AppCrash=True) to Bayesian_network
      CALCULATE posterior_probability P(Cryptomining | AppCrash)
      WHERE posterior_probability > 0.85
      RETURN hostname, calculated_probability, supporting_evidence