name: T1027.010: Command Obfuscation
id: d4a3b1c0-2e9f-4d8a-9c7b-6a5e4f3d2c1b
description: This playbook helps investigate whether an adversary has used command obfuscation to evade defenses, a technique covered by MITRE ATT&CK T1027.010. It focuses on identifying signs of obfuscation such as the use of known obfuscation framework strings (e.g., 'Invoke-Obfuscation'), structural characteristics like excessive special characters or string concatenation, high character entropy indicating encoding/encryption, dynamic command construction (e.g., using 'IEX' with string building), and layered obfuscation where multiple techniques are combined. The goal is to detect hidden malicious commands within command line arguments, script blocks, and URI arguments.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there command line arguments or PowerShell script blocks containing high-fidelity strings known to be associated with specific obfuscation tools or malware?
    context: This question aims to find direct evidence of command obfuscation by searching for known indicators. Adversaries often reuse public or private obfuscation frameworks (e.g., Invoke-Obfuscation), which can leave behind specific artifacts like function names, comments, or unique variable names. Detecting these strings is a high-confidence sign that an attacker is attempting to hide their command-line activity from security tools.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH command_line_logs, powershell_script_block_logs
          WHERE content MATCHES REGEX ('Invoke-Obfuscation'|'\$DoIt'|...<other_intel_strings>)
  - question: Has the frequency of known obfuscation-related keywords on any host exceeded its normal baseline?
    context: This question focuses on detecting obfuscation through statistical anomaly detection. Instead of looking for specific, unique strings, it tracks the usage frequency of common keywords involved in obfuscation (e.g., 'FromBase64String', 'EncodedCommand'). A sudden, significant spike in the use of these keywords on a single host, compared to its own history, can indicate a new obfuscation attempt that might not use a known framework.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE 30-day rolling average and standard deviation of keywords ('FromBase64String', 'EncodedCommand', 'Bypass') per host.
          ALERT if hourly_count > (rolling_avg + 3 * std_dev).
  - question: Can a machine learning model identify command lines that have a high probability of being obfuscated based on keyword features?
    context: This question leverages a machine learning approach to generalize detection beyond simple keyword matching or frequency analysis. By training a Naive Bayes classifier on a large dataset of both benign and malicious command lines, the model learns the statistical relationships between various keywords and maliciousness. This allows it to score and flag new, unseen command lines that are structurally similar to previously observed obfuscated commands.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new command_line:
            EXTRACT keyword features.
            SCORE with Naive Bayes model.
            IF probability > threshold, FLAG for review.
  - question: Have any commands been executed that exhibit structural characteristics of obfuscation, such as specific patterns or an excessive number of escape characters?
    context: This question seeks to identify obfuscation by its structure, rather than specific keywords. Adversaries use techniques like string concatenation ('wor'+'d'), character escaping (e.g., `^` in cmd.exe), or specific invocation patterns (`IEX(New-Object Net.WebClient).DownloadString`) to break up and hide malicious commands. Regular expressions can effectively detect these known structural patterns.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH command_line_logs, powershell_script_block_logs
          WHERE content MATCHES REGEX ('IEX\(New-Object Net\.WebClient\)\.DownloadString' OR '%VAR:~start,len%' OR '\^\^\^\^\^')
  - question: Are there commands with an anomalously high complexity score, based on character ratios and nesting depth, compared to their parent process baseline?
    context: This question quantifies the "messiness" of a command to find outliers. Benign commands from a specific parent process (e.g., svchost.exe) tend to have a consistent level of complexity. A command with a much higher ratio of special characters or deeper nested parentheses than is typical for its context is a strong candidate for being obfuscated.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each command:
            CALCULATE complexity_score (ratio of non-alphanumeric, special chars, nesting).
            GET baseline score for parent_process.
            IF complexity_score > 99th_percentile_of_baseline, ALERT.
  - question: Have any command lines been identified as part of a small, dense cluster of anomalous activity using unsupervised machine learning?
    context: This question uses clustering to find new or unknown obfuscation techniques. By converting command lines into numerical vectors (e.g., via TF-IDF on character 3-grams), a clustering algorithm like DBSCAN can group similar commands together. Small, isolated clusters that don't map to known benign software represent novel or rare behaviors that warrant investigation as potential obfuscation variants.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          VECTORIZE all command lines using TF-IDF on character 3-grams.
          APPLY DBSCAN clustering algorithm.
          INVESTIGATE small, dense clusters not associated with known benign activity.
  - question: Are there any command lines or URI parameters containing long, unbroken alphanumeric strings indicative of Base64 encoding?
    context: This question uses a strong heuristic to detect a common encoding method. Base64 is frequently used to hide payloads (e.g., scripts, binaries) within command lines. A long, unbroken string (e.g., >128 characters) containing a mix of upper, lower, and numeric characters is highly likely to be a Base64-encoded block and should be investigated.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek http.log
      - Zeek dns.log
      - Network egress points (for Zeek logs) and all enterprise endpoints (for host logs).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH command_line_logs, uri_logs
          WHERE content MATCHES REGEX ('[a-zA-Z0-9]{128,}')
  - question: Have any commands exhibited an entropy level that is a statistical outlier compared to the baseline for their specific parent-process context?
    context: This question uses Shannon entropy to measure the randomness of a command line string. Encoded or encrypted data is much more random (higher entropy) than plain text. By establishing a baseline entropy level for normal commands spawned by a specific parent-child process pair (e.g., `explorer.exe` > `cmd.exe`), any new command with an entropy value significantly exceeding that baseline is a strong indicator of obfuscation.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek http.log
      - Zeek dns.log
      - Network egress points (for Zeek logs) and all enterprise endpoints (for host logs).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each command:
            CALCULATE shannon_entropy of argument string.
            GET 14-day baseline entropy for parent_process/process pair.
            IF entropy > 99.5th_percentile_of_baseline, ALERT.
  - question: Has a time-series model detected a sudden, sustained spike in the average command-line entropy for any given host?
    context: This question looks for changes in host behavior over time by monitoring the average command-line entropy. A sudden and sustained increase in this metric, flagged as an anomaly by a time-series model (like ARIMA), suggests a significant change in activity on the host. This could be caused by an interactive attacker session or an automated script repeatedly using obfuscated commands.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek http.log
      - Zeek dns.log
      - Network egress points (for Zeek logs) and all enterprise endpoints (for host logs).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL hourly average command-line entropy per host with Seasonal-ARIMA.
          ALERT on anomalies flagged by the model.
  - question: Are there any PowerShell or command-prompt logs showing evidence of dynamic command construction followed by an execution keyword?
    context: This question targets a common obfuscation technique where the adversary builds a command from smaller strings or variables before executing it. This is done to evade static signature-based detections. Searching for the co-occurrence of string-building operators (`+`, `-join`, `for` loops) and execution keywords (`IEX`, `Invoke-Expression`) can reveal these attempts.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Application servers, developer workstations, and administrative jump boxes where scripting and dynamic command generation are common.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH powershell_script_block_logs
          WHERE content CONTAINS ('IEX' OR 'Invoke-Expression')
          AND content CONTAINS ('+' OR '-join')
  - question: Have any PowerShell scripts exhibited an unusually high 'construction ratio' of assignment and concatenation operators?
    context: This question quantifies the degree to which a script is focused on building strings. A script with a very high ratio of assignment (`=`) and concatenation (`+`) operators relative to its total size is likely dedicated to dynamically constructing a command, a common feature of malicious obfuscated scripts. Flagging scripts with a ratio in the top percentile can surface these outliers for review.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Application servers, developer workstations, and administrative jump boxes where scripting and dynamic command generation are common.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each script_block:
            CALCULATE construction_ratio = (count('=') + count('+')) / total_length.
            IF construction_ratio > 98th_percentile_of_all_scripts, FLAG for review.
  - question: Can a machine learning model identify dynamically constructed commands that are likely to be malicious?
    context: This question applies a supervised machine learning model to the complex problem of distinguishing benign from malicious dynamic commands. By training a robust model like XGBoost on features such as parent process, character ratios, and command length, it can learn the subtle patterns of malicious construction and provide a probability score to prioritize the most suspicious events for analysts.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Application servers, developer workstations, and administrative jump boxes where scripting and dynamic command generation are common.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new command:
            ENGINEER features (parent process, char ratios, length, etc.).
            SCORE with Gradient Boosting model.
            PRIORITIZE alerts based on output probability.
  - question: Are there script blocks or command lines showing evidence of layered obfuscation, such as decoded Base64 content containing further obfuscation indicators?
    context: This question aims to detect more sophisticated, multi-layered obfuscation. Adversaries may encode a payload (e.g., with Base64) and then also compress or reverse the inner payload. This multi-stage analytic rule first identifies and decodes the outer layer, then inspects the decoded content for a second layer of obfuscation indicators, generating a high-confidence alert if both are found.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems like Domain Controllers and administrator workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each command with Base64 content:
            DECODE Base64 content.
            SEARCH decoded_content for REGEX ('GzipStream' OR 'DeflateStream' OR 'string_reversal_pattern').
            IF found, GENERATE critical alert.
  - question: For commands flagged by other analytics, does a significant drop in entropy occur after applying a common decoding step?
    context: This question serves as a validation method for suspected obfuscation. If a command has high entropy (is very random), it might be encoded. By programmatically applying common decoding functions (Base64, hex, etc.) and re-calculating the entropy, a large drop (e.g., >2.5 points) strongly indicates that the correct decoding function was found and the original content was indeed encoded.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems like Domain Controllers and administrator workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each high_entropy_command:
            initial_entropy = shannon_entropy(command)
            decoded_command = decode_base64(command)
            final_entropy = shannon_entropy(decoded_command)
            IF (initial_entropy - final_entropy) > 2.5, FLAG as deobfuscated.
  - question: Can a sequence-to-sequence neural network model successfully 'translate' a new command from an obfuscated form to a deobfuscated one?
    context: This question represents a state-of-the-art approach using deep learning to recognize and reverse complex obfuscation. By training a seq2seq model (similar to those used for language translation) on pairs of obfuscated and deobfuscated scripts, the model learns the "language" of obfuscation. If the model can successfully "translate" a new, unseen command into a coherent, deobfuscated form, it indicates the command uses recognized obfuscation patterns.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems like Domain Controllers and administrator workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new command:
            INPUT command into trained seq2seq model.
            IF model produces successful, coherent deobfuscated output, TRIGGER alert.