name: T1027.010: Command Obfuscation
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary has evaded defenses using command obfuscation. It provides questions to investigate for signs of obfuscation, including the use of known obfuscation framework signatures, structural anomalies like excessive special characters, high character entropy indicating encoding, dynamic command construction before execution, and layered obfuscation techniques where multiple methods are combined.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there command line arguments or script blocks containing high-fidelity strings indicative of known obfuscation tools or malware?
  context: This question aims to find direct evidence of specific, named obfuscation frameworks (like Invoke-Obfuscation) or malware families by searching for unique strings, function names, or comments they use. A positive match is a strong indicator of malicious activity and can help identify the exact tools the adversary is leveraging.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH command_line_logs, powershell_script_block_logs FOR strings IN (threat_intel_list_of_obfuscation_keywords) USING regex
- question: Has there been an anomalous spike in the usage of common obfuscation-related keywords on any host?
  context: This question seeks to identify subtler obfuscation activity by baselining the normal frequency of keywords often associated with obfuscation (like 'FromBase64String' or 'EncodedCommand'). A statistically significant increase in their usage on a single host can indicate an adversary's attempt to evade defenses, even if the commands themselves are not immediately identifiable as malicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: COUNT keywords ('FromBase64String', 'EncodedCommand', 'Bypass') BY host, hour. ALERT if count > (3 * stdev(30_day_rolling_average_for_host)).
- question: Can machine learning models identify command lines that have a high probability of being obfuscated based on keyword features?
  context: This question involves using a trained machine learning model (e.g., Naive Bayes) to proactively score command lines for their likelihood of being malicious or obfuscated. By analyzing the combination of many different keywords as features, this approach can detect novel or complex obfuscation patterns that simpler rule-based searches might miss.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCORE command_lines with Naive_Bayes_classifier. ALERT if probability > threshold.
- question: Are there command lines or script blocks exhibiting structural patterns characteristic of obfuscation, such as excessive special characters or specific download cradle syntax?
  context: This question focuses on identifying obfuscation not by specific keywords, but by the structure of the command itself. Techniques like using many escape characters (`^`), specific download patterns (`IEX(New-Object Net.WebClient).DownloadString`), or chained variable substringing are red flags. Detecting these structures helps uncover obfuscation even when the attacker avoids known tool signatures.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH command_logs with regex FOR patterns LIKE 'IEX(New-Object...)', '^^^^^', '%VAR:~start,len%'.
- question: Have any commands been executed with an unusually high complexity score compared to their parent process baseline?
  context: This question aims to find anomalous commands by calculating a 'complexity score' based on character ratios (non-alphanumeric vs. total), special character counts, and nesting depth. By establishing a baseline score for normal commands launched by common parent processes (e.g., explorer.exe), any command exceeding the 99th percentile of that baseline can be flagged as a potential outlier indicative of obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE complexity_score for each command. ALERT if score > 99th_percentile_for_parent_process_baseline.
- question: Are there anomalous clusters of command lines that may represent a new or uncommon obfuscation variant?
  context: This question uses unsupervised machine learning to find new threats. By converting command lines into numerical vectors (e.g., using TF-IDF on character 3-grams) and applying a clustering algorithm (e.g., DBSCAN), we can group similar commands. Small, dense clusters that don't match known benign software behavior are highly suspicious and may represent a novel obfuscation technique.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: VECTORIZE command_lines using TF-IDF. CLUSTER vectors using DBSCAN. INVESTIGATE small, dense, anomalous clusters.
- question: Are there any command lines or URI parameters containing long, unbroken alphanumeric strings indicative of Base64 encoding?
  context: This question uses a strong heuristic to detect one of the most common encoding methods, Base64. A long (e.g., >128 characters) unbroken string containing a mix of upper, lower, and numeric characters within a command line or URI is highly likely to be a Base64-encoded payload, which is a common technique for smuggling malicious scripts or binaries.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek http.log
  - Zeek dns.log
  - Network egress points and all enterprise endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH logs for alphanumeric_string where length > 128 AND contains (uppercase, lowercase, numbers).
- question: Have any executed commands exhibited a character entropy significantly higher than the established baseline for their parent-child process relationship?
  context: This question seeks to identify encoded or encrypted data within command lines by measuring randomness using Shannon entropy. By creating a rolling baseline of normal entropy values for specific process execution chains (e.g., explorer.exe launching cmd.exe), a command with an entropy value exceeding the 99.5th percentile of its baseline is a strong statistical outlier that warrants investigation for obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek http.log
  - Zeek dns.log
  - Network egress points and all enterprise endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE shannon_entropy for each command_line. ALERT if entropy > 99.5th_percentile of 14-day_baseline for parent_process/process pair.
- question: Has a time-series anomaly detection model detected a sudden, sustained spike in the average command-line entropy on any host?
  context: This question moves from analyzing individual commands to monitoring host-level behavior over time. A sudden and sustained increase in the average entropy of all commands on a host, as detected by a time-series model (e.g., ARIMA), can indicate a significant event like an interactive adversary session or an automated script using heavy obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek http.log
  - Zeek dns.log
  - Network egress points and all enterprise endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL hourly_average_entropy per host with ARIMA. ALERT on detected anomalies indicating a sustained spike.
- question: Are there any PowerShell or command-prompt logs showing evidence of commands being dynamically constructed before being executed?
  context: This question targets a common obfuscation pattern where the adversary builds a malicious command in memory using parts, such as by joining strings or using format specifiers, before executing it with a function like 'Invoke-Expression' (IEX). Detecting the combination of construction operators (`+`, `-join`) and invocation keywords (`IEX`) in the same block is a key indicator of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Application servers, developer workstations, and administrative jump boxes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH PowerShell logs FOR (('+' OR '-join') AND ('IEX' OR 'Invoke-Expression')). SEARCH cmd logs FOR 'for' loops constructing and executing commands.
- question: Have any PowerShell script blocks exhibited an unusually high ratio of construction operators to total characters?
  context: This question provides a quantitative method to detect dynamic command construction. By calculating a 'construction ratio' (the number of assignment and concatenation operators vs. total characters), we can baseline normal scripting behavior. Scripts with a ratio in the top 2% are statistical outliers and may be using excessive construction logic to build an obfuscated payload.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Application servers, developer workstations, and administrative jump boxes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE ratio of ('=', '+') to total_chars for each script_block. ALERT if ratio is in top 2% of all observed scripts.
- question: Can a machine learning classifier identify dynamically constructed commands that are likely to be malicious?
  context: This question leverages a more advanced supervised learning model (e.g., XGBoost) to distinguish between benign and malicious dynamic commands. By engineering features like parent process, environment variable counts, and character ratios, the model can learn subtle differences and provide a probability score to prioritize the most suspicious-looking constructed commands for analyst review.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Application servers, developer workstations, and administrative jump boxes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCORE script_blocks with XGBoost_model using engineered_features. ALERT based on high probability_score.
- question: Is there evidence of layered obfuscation, where the output of one deobfuscation function is passed to another?
  context: This question looks for advanced adversaries who use multiple layers of obfuscation. The detection logic first identifies and decodes a common encoding layer (like Base64) and then inspects the decoded content for signs of a second layer, such as string reversal or compression artifacts (`GzipStream`). A match in both stages is a high-confidence indicator of sophisticated evasion.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DECODE Base64 from command. SEARCH decoded_content with regex for 'GzipStream' or string_reversal_syntax. ALERT if both found.
- question: For commands flagged as potentially obfuscated, does a significant drop in entropy occur after a common decoding step is applied?
  context: This question serves as a validation method for other analytics. When a command is flagged (e.g., for high entropy), this step involves programmatically attempting to decode it using common methods (Base64, hex, etc.). A sharp drop in Shannon entropy (e.g., >2.5 points) after a decoding step strongly suggests the correct deobfuscation method was found, confirming the presence of encoding.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR flagged_command, DO attempt_decoding(Base64, hex, URL). CALCULATE entropy_drop. ALERT if drop > 2.5.
- question: Can a sequence-to-sequence neural network model successfully 'translate' a command from an obfuscated form to a deobfuscated one?
  context: This question proposes using a state-of-the-art deep learning approach (seq2seq model) to combat layered obfuscation. By training a model on pairs of known obfuscated and deobfuscated scripts, it learns the 'language' of obfuscation. If the model can successfully 'translate' a new, unseen command into a coherent, deobfuscated form, it indicates the command used recognized obfuscation patterns and should be alerted on.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT command into seq2seq_deobfuscation_model. ALERT if model produces successful/coherent translation.