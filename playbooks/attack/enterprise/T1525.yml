name: T1525: Implant Internal Image
id: f8a9b7c6-d5e4-4f32-8a1b-9c0d1e2f3a4b
description: This playbook helps detect if an adversary is maintaining persistence by implanting malicious code into internal container images. This technique can be identified by observing containers making network connections to known command and control (C2) servers, executing suspicious commands like reverse shells, or exhibiting anomalous network traffic patterns. The playbook also covers the detection of the initial implant event, such as an unauthorized push to the container registry from a suspicious source, user, or time. Further indicators include significant behavioral deviations in a container after an image update and reconnaissance activity against the image registry itself.
type: technique
related:
- TA0003: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a container making network connections to known command and control (C2) servers?
  context: This question aims to detect direct C2 communication from a container, a strong indicator that the internal image it was deployed from has been compromised. By comparing outbound network traffic against a high-confidence threat intelligence feed, we can identify connections to malicious infrastructure. An alert here would signify a high-priority incident requiring immediate investigation of the source container and its image.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Container host nodes, network egress points, internal DNS resolvers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek conn.log AND dns.log WHERE source_ip IN container_ip_space | JOIN destination_ip OR resolved_fqdn WITH c2_threat_feed | ALERT on match
- question: Is a container using non-standard or previously unseen TLS encryption fingerprints (JA3/JA3S)?
  context: Malicious tools and C2 frameworks often use specific cryptographic libraries that produce unique TLS fingerprints (JA3/JA3S hashes). This question helps identify anomalous TLS traffic by baselining the normal fingerprints for each container image. A deviation from this baseline can expose the use of unauthorized or malicious software within the container, even if the destination IP is not on a threat list.
  answer_sources:
  - Zeek ssl.log
  - Container host nodes, network egress points, internal DNS resolvers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each container_image: BASELINE normal_ja3_hashes FROM Zeek ssl.log | SEARCH Zeek ssl.log WHERE source_ip IN container_ip_space | ALERT if observed_ja3_hash NOT IN normal_ja3_hashes FOR that image
- question: Is a container exhibiting an anomalous spike in network traffic volume or connection frequency?
  context: C2 beaconing and data exfiltration often create distinct patterns in network traffic. This question uses time-series analysis to model a container's normal network behavior (data volume and connection counts). A significant and sustained deviation from the forecasted model, such as a sudden increase in outbound data or a regular, heartbeat-like connection pattern, can indicate malicious activity that might otherwise be missed.
  answer_sources:
  - Zeek conn.log
  - Container host nodes, network egress points, internal DNS resolvers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each container_instance: TRAIN time_series_model ON (orig_bytes + resp_bytes) and connection_count FROM Zeek conn.log | FORECAST expected_traffic and confidence_interval | ALERT if actual_traffic > forecasted_upper_bound for a sustained period
- question: Has a process been created within a Windows container using a command line that matches known malicious patterns?
  context: Adversaries often use specific command-line syntax to execute reverse shells, download additional tools, or run malware. This question involves scanning process creation events (Windows Event ID 4688) for high-fidelity indicators of compromise, such as PowerShell-based TCP clients, 'certutil' downloads, or the names of common cryptomining tools. A match provides strong evidence of malicious execution within the container.
  answer_sources:
  - Windows Event ID 4688
  - Container host nodes (Windows Servers)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event ID 4688 | FILTER CommandLine MATCHES regex_library_of_malicious_patterns (e.g., 'powershell -nop -c', 'certutil -urlcache', 'xmrig') | ALERT on match
- question: Is a container executing a previously unseen process or a known process with unusually complex command-line arguments?
  context: This question aims to detect anomalous process activity by baselining what is normal for a specific container image. The first part identifies "first seen" processes, which could be unauthorized tools. The second part analyzes command-line entropy; a high entropy value can indicate obfuscated or packed commands, which are common adversary techniques to evade simple signature-based detection.
  answer_sources:
  - Windows Event ID 4688
  - Container host nodes (Windows Servers)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each container_image: BASELINE normal_processes AND commandline_entropy | SEARCH Windows Event ID 4688 | ALERT if process_name IS new FOR that image OR commandline_entropy > 99th_percentile_of_baseline
- question: Does a machine learning model classify a command line executed within a container as malicious?
  context: To move beyond simple regex and baselining, this question leverages a machine learning model trained to understand the nuances of malicious command-line syntax in containerized environments. By feeding new process creation events to the model, it can identify novel or complex malicious commands that might not match predefined patterns, providing a more sophisticated and adaptable detection capability.
  answer_sources:
  - Windows Event ID 4688
  - Container host nodes (Windows Servers)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event ID 4688 | PIPE CommandLine to classification_model | ALERT if classification IS 'malicious' AND confidence_score > 0.90
- question: Was an image pushed to the internal registry by an unauthorized user or from an unapproved system?
  context: This question enforces access control policies on the container registry. By maintaining strict allowlists for CI/CD server IPs and authorized user accounts, any image push from an entity not on these lists is immediately flagged as a potential security breach. This is a high-fidelity method for detecting attempts to implant a malicious image.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Container Registry Audit Logs
  - Internal container image registry, CI/CD pipeline servers, authentication servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_logs (http.log, audit_logs) FOR image_push_event | CORRELATE with authentication_logs (Event ID 4624) | ALERT if source_ip NOT IN ci_cd_allowlist OR user_account NOT IN admin_allowlist
- question: Does a recent image push event have a high risk score based on multiple anomalous factors?
  context: Not all unauthorized activity will be from a completely unknown source. This question uses a risk-scoring model to identify suspicious image pushes that are subtly anomalous. It aggregates multiple weak signals—such as an infrequent source IP, an unusual time of day, or an abnormal image size—into a single score. An event exceeding the risk threshold warrants investigation even if no single factor violates a hard rule.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Container Registry Audit Logs
  - Internal container image registry, CI/CD pipeline servers, authentication servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each image_push_event: CALCULATE risk_score based on (source_ip_frequency, user_frequency, time_of_day, image_size_deviation) | ALERT if risk_score > threshold
- question: Has an unsupervised machine learning model identified an image push event as a statistical anomaly?
  context: This question aims to find "unknown unknowns" by using an unsupervised ML model (like Isolation Forest) to detect image pushes that deviate from the norm across multiple dimensions simultaneously. The model can identify strange combinations of features (e.g., a specific user agent, pushing a small image, from a new geolocation, on a weekend) that are collectively suspicious, even if each feature individually is not.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Container Registry Audit Logs
  - Internal container image registry, CI/CD pipeline servers, authentication servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each image_push_event: CREATE feature_vector (source_geo, user_agent, time_of_day, image_size, etc.) | PIPE feature_vector to anomaly_detection_model | ALERT if model_classifies_as_anomaly
- question: Is a newly updated container violating its predefined network connection or process execution profile?
  context: For critical applications, a "zero trust" approach can be highly effective. This question involves creating a strict, manually defined profile of all legitimate network and process behaviors for a given image. After an update, any activity outside this profile—like a connection to an unapproved IP or the execution of an unlisted process—is immediately flagged as a policy violation and potential compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Container host nodes, internal network segments, network egress points
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek conn.log AND Windows Event ID 4688 for traffic/processes from updated_container | ALERT if destination OR process_tree NOT IN predefined_application_profile
- question: Has the network behavior of a container changed significantly after an image update?
  context: This question automates the detection of behavioral changes by comparing a container's post-update network activity to its own pre-update baseline. It looks for statistical deviations, such as connections to new ports, communication with a much wider range of IP addresses (indicated by increased entropy), or changes in subnet communication patterns. This can catch malicious changes without requiring a manually maintained profile.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Container host nodes, internal network segments, network egress points
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR updated_container: COMPARE post_update_network_behavior (ports, subnet_dist, ip_entropy) FROM Zeek conn.log WITH pre_update_baseline | ALERT on significant statistical deviation
- question: Has an image update caused a container to be reclassified into a different behavioral cluster?
  context: This question uses clustering to group containers with similar runtime behaviors (processes, network ports, traffic volume). A legitimate update should result in a container remaining in its established cluster. If an update causes a container to move to a different cluster, or form a new, small cluster, it signifies a fundamental shift in its behavior that could be malicious and warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Container host nodes, internal network segments, network egress points
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each container: CREATE feature_vector (processes, ports, traffic_volume) | RUN K-Means clustering | AFTER image_update, re-calculate cluster | ALERT if container_moves_to_new_cluster
- question: Is a source IP performing a high volume of registry discovery API calls without any subsequent pull or push activity?
  context: Before an adversary can implant a malicious image, they may first perform reconnaissance to understand the registry's structure, repositories, and tags. This question identifies this behavior by flagging sources that make an excessive number of discovery calls (e.g., listing catalogs or tags) within a short time frame but do not follow up with a legitimate action like pulling or pushing an image.
  answer_sources:
  - Zeek http.log
  - Container Registry Audit Logs
  - Internal container image registry, user workstation network segments
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_logs for discovery_api_calls (e.g., GET /v2/_catalog) | COUNT calls by source_ip in 10min_window | IF count > 50 AND no pull/push from same IP in next 30min, ALERT
- question: Does a source IP exhibit an anomalously high ratio of discovery-to-action (pull/push) API calls?
  context: Legitimate systems like CI/CD servers typically have a predictable ratio of discovery calls to pull/push actions. Reconnaissance tools, however, will perform almost exclusively discovery. This question establishes a baseline for this ratio across all sources and alerts when a source's ratio is a statistical outlier, effectively distinguishing scanning activity from normal operational behavior.
  answer_sources:
  - Zeek http.log
  - Container Registry Audit Logs
  - Internal container image registry, user workstation network segments
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE ratio of (discovery_calls / (pull_calls + push_calls)) per source_ip over 24h | BASELINE normal_ratios | ALERT if source_ip_ratio > 99th_percentile_of_baseline
- question: Is a user interacting with the registry API in a sequence that is statistically improbable for a normal session?
  context: Normal interactions with a registry follow logical workflows (e.g., search, list tags, pull). This question uses a sequence analysis model (like a Hidden Markov Model) to learn these normal workflows. It can then identify sessions that follow an abnormal or nonsensical sequence of API calls, such as repeatedly listing the same tags over and over, which is characteristic of automated scanning rather than human or legitimate automated behavior.
  answer_sources:
  - Zeek http.log
  - Container Registry Audit Logs
  - Internal container image registry, user workstation network segments
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: TRAIN HMM model on sequences of API calls per user session | FOR new sessions, calculate probability of observed sequence | ALERT if probability is below a low threshold