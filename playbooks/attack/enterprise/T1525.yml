name: T1525: Implant Internal Image
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps answer the question: Is the adversary maintaining persistence by implanting internal images? An adversary may implant a malicious container image into a private registry to establish a persistent presence in an environment. This can occur through various means, including pushing a modified image from an unauthorized source, updating an existing legitimate image with malicious code, or having a container exhibit anomalous network or process behavior after an update. Indicators of this activity include network connections to known C2 servers, execution of reverse shells, unauthorized image pushes to the registry, significant behavioral deviations from historical norms, and reconnaissance activity against the registry itself.
type: technique
related:
  - TA0003: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any containers communicating with known command and control (C2) servers?
    context: This question seeks to identify if a container, potentially deployed from a compromised image, is making outbound network connections to destinations known to be malicious. A match against a C2 threat intelligence feed is a high-fidelity indicator of a compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Container host nodes
      - network egress points
      - internal DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each connection in conn.log or dns.log from container_IP_space
            JOIN destination_IP or resolved_FQDN with C2_threat_feed
            IF match_found
              ALERT (source_container, destination, C2_indicator)
  - question: Are any containers exhibiting new or anomalous TLS fingerprints (JA3/JA3S) not seen in their established baseline?
    context: Malicious software often uses non-standard cryptographic libraries for C2 communication, resulting in unique TLS fingerprints (JA3/JA3S). This question aims to detect such anomalies by baselining the normal fingerprints for each container image and alerting on any deviations, which could indicate a malicious implant.
    answer_sources:
      - Zeek ssl.log
      - Container host nodes
      - network egress points
      - internal DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container_image
            CREATE baseline_set of JA3/JA3S_hashes from ssl.log
          FOR each new connection from a container
            IF connection_JA3/JA3S_hash NOT IN baseline_set for its image
              ALERT (container, new_hash)
  - question: Is any container showing a significant and sustained increase in network traffic volume or connection count compared to its forecasted baseline?
    context: C2 beaconing or data exfiltration can cause noticeable changes in a container's network patterns. This question uses time-series forecasting to model expected traffic and connection counts, allowing for the detection of sustained, anomalous increases that exceed predicted values and their confidence intervals.
    answer_sources:
      - Zeek conn.log
      - Container host nodes
      - network egress points
      - internal DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container
            TRAIN time-series_model on (total_bytes, connection_count) in 5-min intervals
            FORECAST expected_traffic and confidence_interval
            IF observed_traffic > forecasted_traffic + confidence_interval for sustained_period
              ALERT (container, traffic_anomaly)
  - question: Are any processes being created within Windows containers with command lines matching known malicious patterns (e.g., reverse shells, specific downloaders)?
    context: Adversaries often use specific command-line syntax to execute malicious actions like establishing reverse shells or downloading tools. This question focuses on detecting these high-fidelity patterns within Windows containers by scanning process creation events for known malicious command strings.
    answer_sources:
      - Windows Event ID 4688
      - Container host nodes (Windows Servers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event (EID 4688) on container_hosts
            SCAN CommandLine field with regex_library_of_malicious_patterns
            IF regex_match_found
              ALERT (hostname, process, CommandLine, matched_pattern)
  - question: Are any containers spawning 'first seen' processes or processes with unusually high command-line entropy compared to their image baseline?
    context: A compromised container may execute processes not part of its legitimate application stack or use obfuscated commands. This question aims to detect such deviations by creating a baseline of normal processes and command-line argument complexity (entropy) for each image, then alerting on 'first seen' processes or abnormally high entropy.
    answer_sources:
      - Windows Event ID 4688
      - Container host nodes (Windows Servers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container_image
            CREATE baseline of {process_name, parent_process, cmd_entropy_percentiles}
          FOR each new process in a container
            IF process_name NOT IN baseline OR cmd_entropy > 99th_percentile
              ALERT (container, process_name, entropy_value)
  - question: Can machine learning models classify new process command lines in Windows containers as malicious with high confidence?
    context: This question proposes a more advanced detection method using a trained machine learning model to classify command lines as benign or malicious. This approach can identify novel or obfuscated malicious commands that may evade simpler pattern matching, providing a more robust and adaptable detection capability.
    answer_sources:
      - Windows Event ID 4688
      - Container host nodes (Windows Servers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process_creation_event (EID 4688)
            INPUT CommandLine into trained_ML_model
            GET prediction, confidence_score
            IF prediction is 'malicious' AND confidence_score > 0.90
              ALERT (container, process, CommandLine, confidence_score)
  - question: Are any images being pushed to the internal registry from unauthorized source IPs or user accounts?
    context: To implant a malicious image, an adversary might push it from a system not part of the standard CI/CD pipeline or use a compromised/unauthorized account. This question focuses on enforcing access control by checking every image push against allowlists of authorized IPs and user accounts.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Container Registry Audit Logs
      - Internal container image registry
      - CI/CD pipeline servers
      - authentication servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE allowlist_IPs, allowlist_users
          FOR each image_push_event
            GET source_IP, user_account from logs
            IF source_IP NOT IN allowlist_IPs OR user_account NOT IN allowlist_users
              ALERT (source_IP, user_account, image_pushed)
  - question: Are there any image push events with a high composite risk score based on factors like unusual source IP, user, time of day, or image size?
    context: A single suspicious attribute may not be enough to trigger an alert, but a combination of them can be highly indicative of malicious activity. This question involves calculating a risk score for each image push based on multiple factors (source IP, user, time, size) to identify events that are collectively anomalous.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Container Registry Audit Logs
      - Internal container image registry
      - CI/CD pipeline servers
      - authentication servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each image_push_event
            CALCULATE risk_score based on (source_IP_rarity, user_rarity, time_of_day, image_size_deviation)
            IF risk_score > threshold
              ALERT (event_details, risk_score)
  - question: Does an unsupervised anomaly detection model identify any image push events as suspicious based on a combination of features like source geolocation, user agent, and time?
    context: This question proposes using an unsupervised model (e.g., Isolation Forest) to find 'unknown unknowns'. By training on various features of historical push events, the model can identify novel combinations of attributes that are collectively suspicious, even if they haven't been seen before and don't match predefined rules.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Container Registry Audit Logs
      - Internal container image registry
      - CI/CD pipeline servers
      - authentication servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN isolation_forest_model on historical push_event_features
          FOR each new image_push_event
            GET anomaly_score from model
            IF anomaly_score indicates outlier
              ALERT (event_details, anomaly_score)
  - question: Are any updated containers violating their pre-defined strict profiles of allowed network connections or process execution trees?
    context: For critical applications, a 'zero trust' approach can be highly effective. This question involves creating a strict, manually curated profile of exactly what network connections and processes are allowed for a given image. Any deviation after an update immediately triggers an alert, indicating a potential compromise or unauthorized change.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Container host nodes
      - internal network segments
      - network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE strict_profile for critical_image {allowed_connections, allowed_processes}
          FOR each new process or connection from updated_container
            IF activity NOT IN strict_profile
              ALERT (container, violating_activity)
  - question: After an image update, is a container showing significant changes in its network behavior, such as connecting to new ports or having a spike in destination IP entropy?
    context: A malicious implant will likely alter a container's network behavior. This question aims to detect these changes by comparing a container's post-update network activity (destination ports, subnet distribution, IP entropy) against its own pre-update baseline, flagging significant deviations that could indicate scanning or C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Container host nodes
      - internal network segments
      - network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container before update
            CREATE pre_update_baseline of network_behavior
          AFTER update
            COMPARE new_network_behavior to pre_update_baseline
            IF significant_change (e.g., new_port, entropy_spike)
              ALERT (container, change_details)
  - question: Are any updated containers being assigned to a different behavioral cluster (via K-Means) than their pre-update versions, indicating a significant behavioral shift?
    context: This question uses clustering to group containers based on their overall runtime behavior (processes, network stats). A container that, after an update, 'moves' to a different cluster or forms a new, small cluster indicates a fundamental shift in its behavior, which is a strong signal of a potential compromise or major functional change.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Container host nodes
      - internal network segments
      - network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CREATE behavioral_feature_vectors for all containers
          CLUSTER containers using K-Means
          FOR each updated_container
            IF new_cluster_assignment != old_cluster_assignment
              ALERT (container, old_cluster, new_cluster)
  - question: Are any source IPs performing a high volume of discovery API calls against the registry without then pulling or pushing an image, suggesting reconnaissance?
    context: Before attempting to implant an image, an adversary may perform reconnaissance to understand the registry's contents. This question aims to detect this behavior by identifying sources that make many discovery calls (listing repositories/tags) but do not follow up with a legitimate action like pulling or pushing an image.
    answer_sources:
      - Zeek http.log
      - Container Registry Audit Logs
      - Internal container image registry
      - user workstation network segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_IP
            COUNT discovery_API_calls in 10-min window
            IF count > 50 AND no_pull_or_push_in_next_30_mins
              ALERT (source_IP, "Suspected Reconnaissance")
  - question: Are any source IPs exhibiting an anomalously high ratio of discovery-to-action (pull/push) API calls compared to the established baseline?
    context: Normal users and systems (like CI/CD pipelines) typically pull or push images after discovering them, leading to a balanced ratio of discovery-to-action calls. An adversary performing reconnaissance will have a very high ratio. This question detects such outliers by baselining this ratio across all users and flagging sources that exceed the 99th percentile.
    answer_sources:
      - Zeek http.log
      - Container Registry Audit Logs
      - Internal container image registry
      - user workstation network segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE baseline_percentiles for (discovery_calls / action_calls) ratio per IP
          FOR each source_IP
            CALCULATE current_ratio
            IF current_ratio > 99th_percentile
              ALERT (source_IP, current_ratio)
  - question: Are any user sessions with the registry API following a sequence of actions that is statistically improbable according to a trained sequence analysis model?
    context: Legitimate interactions with a container registry tend to follow predictable workflows (e.g., search, list tags, pull). This question uses a sequence analysis model (like a Hidden Markov Model) to learn these normal workflows. An alert is generated when a user's actions form a sequence that has a very low probability of occurring, indicating a deviation from normal behavior, such as repetitive, purely reconnaissance-focused actions.
    answer_sources:
      - Zeek http.log
      - Container Registry Audit Logs
      - Internal container image registry
      - user workstation network segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN HMM_model on sequences of API calls from normal user sessions
          FOR each new user_session_sequence
            CALCULATE probability_of_sequence given HMM_model
            IF probability is very low
              ALERT (user, session_details, probability)