name: T1055.004: Asynchronous Procedure Call
id: 5e9d3b1a-8c7f-4d6e-9a2b-1f3c5d7e9b1a
description: This playbook focuses on detecting adversaries escalating privileges or evading
  defenses through process injection via Asynchronous Procedure Calls (APCs). The
  investigation centers on identifying several key indicators: the execution of known
  malicious tools associated with APC injection; unsigned or anomalously located
  processes gaining injection-level access to other processes; tools not on an established
  allow-list requesting memory modification rights; common injection targets like
  svchost.exe or explorer.exe spawning unusual child processes (e.g., cmd.exe); these
  same compromised processes initiating outbound network connections to suspicious
  destinations; and processes with no business reason for network access (e.g., notepad.exe)
  making outbound connections.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are any newly created processes associated with known malicious tools that
    use APC injection?
  context: This question seeks to identify the execution of known malicious binaries
    by comparing the hash of every new process against a threat intelligence feed.
    A match, especially for tools known for process injection, is a strong indicator
    of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - User Workstations
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - 'SEARCH process_creation_events | JOIN threat_intelligence_feed ON file_hash
    | WHERE match_found AND tool_category CONTAINS ''process injection'' | ALERT'
- question: Have any processes with exceptionally rare file hashes executed, and did
    they subsequently access critical system processes?
  context: This question identifies potentially malicious files that are not yet
    in threat intelligence feeds by focusing on their rarity within the environment.
    A process hash seen on only one or a few machines is suspicious. Correlating
    this rarity with subsequent access to sensitive processes like lsass.exe helps
    prioritize these anomalies for investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - User Workstations
  - Log Aggregation Platform (SIEM)
  range: last 30 days
  queries:
  - SEARCH process_creation_events | CALCULATE hash_prevalence over 30d | FILTER
    rare_hashes (<0.1% of hosts) | CORRELATE with subsequent process_access_events
    targeting system_processes | ALERT
- question: Are there any newly created processes that a machine learning model flags
    as having a high probability of being a malicious injector?
  context: This question leverages a machine learning model to proactively identify
    suspicious processes based on a combination of features like file path, parent
    process, command-line characteristics, and hash prevalence. It aims to detect
    novel or obfuscated injectors that might evade signature or simple rule-based
    detection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - User Workstations
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - STREAM process_creation_events | APPLY classification_model (features: path_entropy,
    parent_process, cmd_length, etc.) | WHERE malicious_probability > threshold |
    ALERT
- question: Has an unsigned process or a process from a non-standard directory attempted
    to gain injection-level access to a high-integrity system process?
  context: This question looks for a common attacker pattern, a suspicious process
    (identified by its lack of a valid digital signature or its unusual location
    on disk) requesting powerful access rights to a critical system process like
    lsass.exe or svchost.exe. This is a direct analytic for detecting process injection
    preparation.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - All Windows Endpoints and Servers
  - Active Directory Domain Controllers
  - High-Value Asset Servers
  range: last 90 days
  queries:
  - SEARCH process_access_events (Sysmon ID 10) with injection_rights | JOIN process_creation_events
    (Sysmon ID 1) ON source_pid | WHERE source_is_unsigned OR source_path_is_suspicious
    AND target_is_system_process | ALERT
- question: Have any statistically rare process access events occurred, especially
    involving a source process with anomalous path or signature status?
  context: This question uses anomaly detection to find unusual interactions between
    processes. By baselining normal 'Source-Target-AccessRights' combinations, it
    can flag never-before-seen or infrequent interactions that may represent an injection
    attempt, even if the source process isn't inherently malicious.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - All Windows Endpoints and Servers
  - Active Directory Domain Controllers
  - High-Value Asset Servers
  range: last 30 days
  queries:
  - SEARCH process_access_events | CALCULATE rarity_score based on (Source, Target,
    Access) baseline | FILTER high_rarity_events | ENRICH with source_process_anomalies
    | ALERT
- question: Has a machine learning model identified any process access events as
    significant deviations from normal activity?
  context: This question applies an unsupervised anomaly detection model to a rich
    set of features from process access and creation events. The goal is to identify
    complex, multi-faceted deviations from normal inter-process communication that
    might signify a sophisticated injection attempt missed by simpler rules.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - All Windows Endpoints and Servers
  - Active Directory Domain Controllers
  - High-Value Asset Servers
  range: last 90 days
  queries:
  - STREAM process_access_events | APPLY anomaly_detection_model (features: source_name,
    target_name, access_rights, path_entropy) | WHERE anomaly_score > threshold |
    ALERT
- question: Has any process not on the approved tool allow-list requested memory
    modification or thread manipulation rights to another process?
  context: This question enforces a strict policy by defining a list of approved
    administration, debugging, or security tools that are permitted to perform high-privilege
    operations. Any process access request with injection-related rights from a source
    not on this list is immediately flagged as a policy violation and potential threat.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - User Workstations
  - Developer Machines
  - System Administration Consoles
  - All Windows Servers
  range: last 90 days
  queries:
  - SEARCH process_access_events (Sysmon ID 10) with injection_rights | WHERE source_process
    NOT IN allow_list | ALERT
- question: Has any process requested access rights to another process that are statistically
    unusual for its own behavior?
  context: This question focuses on behavioral anomaly detection at the individual
    process level. For example, notepad.exe should never need to write to the memory
    of another process. By baselining the typical access rights requested by each
    executable, this method can spot when a legitimate process is compromised and
    used to perform malicious actions.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - User Workstations
  - Developer Machines
  - System Administration Consoles
  - All Windows Servers
  range: last 90 days
  queries:
  - SEARCH process_access_events | FOR_EACH source_process, CALCULATE z-score of
    requested_access_rights against historical_baseline | WHERE z-score > threshold
    | ALERT
- question: Has a graph-based model detected an anomalous interaction between processes,
    representing a structurally unusual relationship?
  context: This question models the entire system's inter-process communications
    as a graph. It aims to find structurally anomalous connections, such as a process
    that typically only interacts with a few other processes suddenly connecting to
    a critical system process with high privileges. This detects deviations in the
    overall 'shape' of system activity.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - User Workstations
  - Developer Machines
  - System Administration Consoles
  - All Windows Servers
  range: last 90 days
  queries:
  - BUILD process_interaction_graph from event logs | APPLY graph_anomaly_detection
    | IDENTIFY anomalous_edges (interactions) | ALERT
- question: Has a common injection target process, like svchost.exe or explorer.exe,
    spawned a suspicious child process like a command shell?
  context: This question looks for a common post-injection outcome. After an attacker
    injects code into a stable, long-running process (e.g., explorer.exe), they often
    use that compromised process to launch a command shell (cmd.exe, powershell.exe)
    or other tools. This rule directly targets these high-confidence malicious parent-child
    relationships.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - 'SEARCH process_creation_events | WHERE (parent_process IN [svchost.exe, explorer.exe]
    AND child_process IN [cmd.exe, powershell.exe, net.exe]) | ALERT'
- question: Has a common parent process spawned a child process that is either unusual
    for that parent or has an abnormally complex command line?
  context: This question enhances parent-child analysis with anomaly detection. It
    identifies two types of suspicion, a parent process spawning a child it has never
    spawned before, or a parent spawning a legitimate child but with a command line
    that has high entropy, suggesting obfuscation or complex, non-interactive commands
    often used by malware.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - SEARCH process_creation_events | FOR_EACH parent_process, CHECK if child_process
    is in baseline | IF NOT, ALERT | ELSE, CALCULATE command_line_entropy | IF entropy
    > threshold, ALERT
- question: Has a machine learning model detected a sequence of process events on
    a host that has a low probability of being normal operational workflow?
  context: This question uses a sophisticated time-series model to understand the
    normal 'rhythm' of process activity on a host. It aims to detect when this rhythm
    is broken, such as a stable system process suddenly spawning an unusual child,
    which could indicate that its execution flow was hijacked by injected code.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - STREAM process_event_sequences per host | APPLY LSTM_model to predict next event
    | IF actual_event has low_probability under model, ALERT
- question: Has a common injection target process (e.g., explorer.exe) initiated
    a network connection to a known malicious IP address or domain?
  context: This question seeks to find evidence of command-and-control (C2) activity
    from a compromised process. After injecting into a process like a web browser
    or explorer.exe, malware will use that process to 'call home'. Matching the destination
    against a threat feed is a high-confidence indicator of compromise.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls, Proxies)
  - DNS Resolvers
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - SEARCH network_connections from common_injection_targets | JOIN threat_intelligence_feed
    ON destination_ip OR destination_domain | WHERE match_found | ALERT
- question: Has a process made a network connection to a domain that is statistically
    dissimilar to its normal destinations based on domain age, character distribution,
    or popularity?
  context: This question tries to identify C2 communications without relying on a
    threat feed. It profiles the characteristics of domains a process typically connects
    to and looks for outliers. A connection to a brand new, unpopular, or strangely-named
    domain by a process like svchost.exe is highly suspicious.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls, Proxies)
  - DNS Resolvers
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - SEARCH network_connections from candidate_injected_processes | CALCULATE Mahalanobis_distance
    for destination_domain_features (age, popularity, etc.) | WHERE distance > threshold
    | ALERT
- question: Has a common injection target process attempted to connect to a domain
    that a machine learning model flags as likely being machine-generated (DGA)?
  context: This question specifically targets malware that uses Domain Generation
    Algorithms (DGAs) to create a constantly changing list of C2 domains. By applying
    a DGA detection model to domains requested by likely-injected processes, this
    can catch C2 attempts that would evade static lists or reputation feeds.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points (Firewalls, Proxies)
  - DNS Resolvers
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - STREAM network_connections from candidate_injected_processes | APPLY DGA_classifier
    to destination_domain | WHERE is_dga_domain IS TRUE | ALERT
- question: Has an unsigned or suspiciously-located process attempted to inject into
    a common network-facing application like a web browser or email client?
  context: This question looks for a specific defense evasion pattern where an attacker
    injects into a process that is expected to make network connections (like chrome.exe)
    to blend in their C2 traffic. It combines the suspicious nature of the source
    process with the target's network-facing role.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - User Workstations
  - Remote Desktop Servers
  - All Windows Endpoints
  range: last 90 days
  queries:
  - SEARCH process_access_events (Sysmon ID 10) with injection_rights | WHERE target_is_browser_or_email_client
    | JOIN process_creation_events ON source_pid | WHERE source_is_unsigned OR source_path_is_suspicious
    | ALERT
- question: Has a rare or never-before-seen process attempted to access a browser
    or email client with high privileges?
  context: This question uses baselining to detect anomalous interactions with network-facing
    applications. Most inter-process communication is routine. A novel interaction,
    such as a previously unknown executable trying to write to the memory of Outlook,
    is a strong indicator of a malicious attempt to steal data or hijack network
    connections.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - User Workstations
  - Remote Desktop Servers
  - All Windows Endpoints
  range: last 90 days
  queries:
  - SEARCH process_access_events involving network_apps | CALCULATE rarity_score
    for (Source, Target) pair | WHERE rarity_score is high AND access_rights are
    privileged | ALERT
- question: Has a machine learning model assigned a high risk score to any event
    where one process accessed another?
  context: This question uses a supervised learning model to formalize the risk assessment
    of a process access event. By training on known-good and known-bad examples,
    the model can learn complex patterns and provide a probabilistic score of maliciousness
    for new events, helping to automate and prioritize alerts for defense evasion
    attempts.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - User Workstations
  - Remote Desktop Servers
  - All Windows Endpoints
  range: last 90 days
  queries:
  - STREAM process_access_events | APPLY risk_classification_model | WHERE risk_score
    > threshold | ALERT
- question: Has any process that is not on the network-access allow-list (e.g., notepad.exe,
    calculator.exe) initiated an outbound network connection?
  context: This question enforces a simple but powerful security policy, only approved
    applications can access the network. A process like calculator.exe making an
    outbound connection is an extremely high-fidelity indicator that it has been
    compromised, likely via process injection, and is being used for C2 or data exfiltration.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 1
  - All Windows Endpoints
  - Network Egress Points
  - Internal DNS Resolvers
  range: last 90 days
  queries:
  - SEARCH network_connections | WHERE source_process NOT IN network_allow_list |
    ALERT with parent_process_info
- question: If an unexpected process made a network connection, was the destination
    also rare, and does the traffic exhibit beaconing patterns?
  context: This question adds layers of confirmation to an already suspicious event.
    If a process that shouldn't be on the network connects to a destination that
    is also unique or rare within the enterprise, the likelihood of maliciousness
    increases. Further analysis for beaconing (regular, timed connections) can confirm
    C2 activity.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 1
  - All Windows Endpoints
  - Network Egress Points
  - Internal DNS Resolvers
  range: last 7 days
  queries:
  - SEARCH network_connections from unexpected_processes | CALCULATE destination_prevalence
    over 7d | IF destination_is_rare, ANALYZE for beaconing_patterns | ALERT
- question: Has a time-series model detected an uncharacteristic spike in network
    activity from a process that is normally network-silent?
  context: This question uses anomaly detection on network volume metrics. It's designed
    to catch instances where a typically quiet process (like services.exe) is injected
    with malicious code and suddenly begins sending or receiving significant amounts
    of data, a clear deviation from its baseline behavior.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dnslog
  - Sysmon Event ID 1
  - All Windows Endpoints
  - Network Egress Points
  - Internal DNS Resolvers
  range: last 90 days
  queries:
  - MODEL network_volume_timeseries per process per host | DETECT anomalous spikes
    from network-silent processes | ALERT
- question: Following an anomalous process creation (e.g., Word spawning cmd.exe),
    did the original parent process initiate a suspicious network connection after
    the child terminated?
  context: This question connects multiple events in a stateful sequence to detect
    a common attack chain. An attacker uses a document to spawn a shell, uses the
    shell to perform an action (like injecting into the original Word process), and
    then the compromised Word process makes a C2 connection. This detects the full
    lifecycle of the attack.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 5
  - Sysmon Event ID 3
  - Zeek conn.log
  - All Windows Endpoints and Servers
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - DETECT anomalous_process_chain (e.g., winword.exe -> cmd.exe) | ON child_termination,
    MONITOR parent_pid | IF parent initiates network_connection to non-allowlisted
    destination, ALERT
- question: After spawning an anomalous child, did the parent process make a network
    connection whose timing, protocol, or volume was statistically unusual for that
    parent?
  context: This question looks for subtle behavioral changes. Even if a parent process
    (like explorer.exe) normally makes network connections, its behavior might change
    after being compromised. This analytic detects anomalies in the *nature* of the
    network connection (e.g., different timing, protocol, or data patterns) that
    occur after a suspicious child process event.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 5
  - Sysmon Event ID 3
  - Zeek conn.log
  - All Windows Endpoints and Servers
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - ON anomalous_child_spawn, ANALYZE subsequent parent_network_connection | COMPARE
    connection_characteristics (timing, protocol, volume) to parent's baseline |
    IF outlier, ALERT
- question: Has a machine learning model predicted that a sequence of events, such
    as an anomalous process chain followed by a network connection, represents a
    break from normal host behavior?
  context: This question uses an advanced sequence-based model to learn the grammar
    of normal system activity. It can detect when a combination of events, even if
    individually plausible, forms a sequence that is highly improbable under the
e   learned model, indicating a potential multi-stage attack.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 5
  - Sysmon Event ID 3
  - Zeek conn.log
  - All Windows Endpoints and Servers
  - Log Aggregation Platform (SIEM)
  range: last 90 days
  queries:
  - STREAM event_sequences (process_create, process_terminate, network_connect) |
    APPLY Seq2Seq model | IF observed_sequence has low_probability, ALERT