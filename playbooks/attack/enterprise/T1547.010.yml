name: T1547.010: Port Monitors
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting the abuse of Port Monitors (T1547.010)
  for persistence and privilege escalation. Adversaries can install a malicious DLL
  as a port monitor, which is then loaded by the high-privileged Print Spooler service
  (spoolsv.exe) upon system boot. This provides a stealthy way to maintain access
  and execute code with SYSTEM privileges. The playbook provides investigative questions
  to identify suspicious registry modifications related to port monitors, the loading
  of unusual DLLs by the spooler service, anomalous network connections initiated
  by the spooler, and process activity patterns associated with known exploitation
  tools like PrintSpoofer.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known malicious DLL being registered as a Port Monitor driver?
  context: Adversaries establish persistence by modifying the 'Driver' registry value
    under a Print Monitor key to point to their malicious DLL. This question helps
    identify this specific behavior by checking if the DLL registered has a file
    hash that matches known malicious indicators from threat intelligence feeds. A
    match is a high-confidence indicator of compromise.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Print Servers, Windows Domain Controllers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Registry events (Sysmon EID 13) WHERE TargetObject ends with '\Print\Monitors\*\Driver'
      | EXTRACT FilePath from Details | JOIN FilePath with File Creation events (Sysmon
      EID 11) to get FileHash | LOOKUP FileHash against Threat Intelligence | ALERT
      on match
- question: Has a rare or new DLL been registered as a Port Monitor driver?
  context: Malicious DLLs used for persistence are often not part of standard software
    installations and will therefore be rare across the enterprise. This question
    aims to uncover these outliers by baselining all DLLs used as Port Monitors and
    alerting when a new registration points to a DLL with very low prevalence. This
    helps detect novel or targeted malware that isn't yet in threat intelligence
    feeds.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Print Servers, Windows Domain Controllers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Registry events (Sysmon EID 13) WHERE TargetObject ends with '\Print\Monitors\*\Driver'
      | EXTRACT FilePath from Details | CALCULATE prevalence of FilePath across all
      endpoints over 30 days | ALERT if FilePath prevalence < 1% AND FilePath is
      not in allowlist
- question: Does a newly registered Port Monitor DLL exhibit suspicious characteristics
    according to a machine learning model?
  context: This question uses a machine learning approach to proactively score the
    risk of a new Port Monitor DLL. By analyzing features like file entropy, digital
    signature validity, enterprise-wide prevalence, and the context of the registry
    modification, a model can identify suspicious DLLs that might not be caught by
    simple signature or prevalence checks. A high risk score suggests a likely malicious
    implant.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Print Servers, Windows Domain Controllers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'FOR each new Port Monitor DLL registration: | EXTRACT features (entropy,
      signature, prevalence, source process info) | INPUT features into classification
      model | ALERT if risk_score > 0.85'
- question: Was a new Port Monitor registry key created and populated with a recently
    created DLL in a short time frame?
  context: Adversaries often perform the steps to install a malicious Port Monitor
    in a rapid sequence: drop the DLL, create the new monitor registry key, and set
    the 'Driver' value to point to the new DLL. This question looks for this specific,
    time-sensitive sequence of events (file create -> registry key create -> registry
    value set) occurring within a few minutes on the same host, which is a strong
    indicator of an active attack.
  answer_sources:
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Print Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'SEARCH for sequence on a single host: [File Create (Sysmon EID 11) for
      new DLL -> Registry Key Create (Sysmon EID 12) under ''\Print\Monitors'' ->
      Registry Value Set (Sysmon EID 13) for ''Driver'' pointing to new DLL] WHERE
      all events occur within 5 minutes | ALERT on sequence detection'
- question: Has a new Port Monitor registry key been created with a suspicious or
    randomly generated name?
  context: Legitimate Port Monitors have predictable, human-readable names (e.g.,
    'Local Port'). Adversaries may use randomly generated strings for their monitor
    key names to avoid detection and collisions. This question aims to detect this
    by checking for newly created monitor keys that are not on an allowlist of known
    good names and have high entropy, suggesting a non-standard or algorithmically
    generated name.
  answer_sources:
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Print Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Registry Key Create events (Sysmon EID 12) WHERE TargetObject is
      under '\Print\Monitors' | EXTRACT NewKeyName | CALCULATE entropy of NewKeyName
      | ALERT if NewKeyName not in allowlist AND entropy > 3.5
- question: Is there an unusual spike in the creation of Port Monitor registry keys
    on a specific host?
  context: The creation of Port Monitors is an infrequent event, typically tied to
    printer driver installation or system setup. A sudden, anomalous increase in
    the rate of Port Monitor key creations on a single host can indicate a misbehaving
    script or an adversary attempting to establish persistence. This question uses
    time-series analysis to detect such deviations from a host's normal behavior.
  answer_sources:
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Print Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: AGGREGATE count of Port Monitor key creations by host per hour | APPLY
      time-series anomaly detection model | ALERT if count for a host significantly
      exceeds predicted baseline
- question: Is the Print Spooler service loading a DLL from a non-standard or user-writable
    directory?
  context: The Print Spooler service (spoolsv.exe) should only load DLLs from trusted
    system locations like System32. An adversary might place their malicious Port
    Monitor DLL in a less conspicuous, user-writable directory (e.g., C:\ProgramData,
    C:\Users, C:\Windows\Temp) to evade detection. This question directly checks
    for this suspicious behavior, as it is highly irregular for the spooler service.
  answer_sources:
  - Sysmon Event ID 7
  - All Windows Endpoints, Windows Print Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Image Load events (Sysmon EID 7) WHERE Image is 'spoolsv.exe' AND
      ImageLoaded path is in ['C:\Users\*', 'C:\ProgramData\*', 'C:\Windows\Temp\*']
      | ALERT on match
- question: Has the Print Spooler service loaded a rare or uncommon DLL?
  context: Malicious DLLs will likely be unique or rare across the enterprise. By
    baselining all DLLs loaded by spoolsv.exe, we can identify and alert on instances
    where it loads a new or very low-prevalence DLL, which could be a malicious Port
    Monitor.
  answer_sources:
  - Sysmon Event ID 7
  - All Windows Endpoints, Windows Print Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Image Load events (Sysmon EID 7) WHERE Image is 'spoolsv.exe' |
      CALCULATE enterprise-wide prevalence of ImageLoaded file hash | ALERT if prevalence
      < 0.1%
- question: Does a DLL loaded by the Print Spooler service have a high anomaly score
    based on its collective properties?
  context: This question uses an unsupervised machine learning model to detect anomalous
    DLL load events by the spooler service. The model considers multiple features
    simultaneously—such as the DLL's path, its signature status, and its prevalence—to
    identify events that deviate from normal behavior. This holistic approach can
    catch sophisticated threats that might evade single-feature detections.
  answer_sources:
  - Sysmon Event ID 7
  - All Windows Endpoints, Windows Print Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'FOR each spoolsv.exe DLL load event: | EXTRACT features (path entropy,
      signature status, prevalence, etc.) | INPUT features into anomaly detection
      model (e.g., Isolation Forest) | ALERT if anomaly_score is high'
- question: Is the Print Spooler service making network connections to a known malicious
    IP or domain?
  context: A malicious Port Monitor DLL, once loaded by spoolsv.exe, may initiate
    command and control (C2) communications. Since spoolsv.exe is a legitimate system
    process, this traffic might be overlooked. This question specifically looks for
    outbound network connections from the spooler process to destinations that are
    present in threat intelligence feeds, indicating a likely C2 channel.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints, Network Egress Points (Firewalls/Proxies), DNS Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Network Connection events (Sysmon EID 3) WHERE ProcessImage is 'spoolsv.exe'
      | JOIN with DNS logs (Zeek) to get Domain | LOOKUP DestinationIP and Domain
      against Threat Intelligence | ALERT on match
- question: Is the Print Spooler service connecting to a rare or unusual domain?
  context: Beyond known malicious destinations, adversaries often use newly registered
    or obscure domains for C2. The Print Spooler service typically communicates with
    a limited set of well-known destinations. This question aims to detect anomalous
    connections by baselining all destinations contacted by spoolsv.exe and alerting
    on connections to domains or TLDs that are exceptionally rare.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints, Network Egress Points (Firewalls/Proxies), DNS Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Network Connection events from 'spoolsv.exe' | EXTRACT Destination
      FQDN | CALCULATE prevalence of FQDN's TLD and SLD across enterprise | ALERT
      if prevalence is in bottom 1%
- question: Is the Print Spooler service exhibiting anomalous network traffic patterns,
    such as C2 beaconing?
  context: Malicious implants often communicate with a C2 server using a periodic,
    "heartbeat" signal known as beaconing. This question uses time-series analysis
    to model the normal network behavior of spoolsv.exe on each host. It aims to
    detect deviations from this baseline, such as the emergence of regularly timed
    connections or unusually large data transfers, which are characteristic of C2
    activity.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints, Network Egress Points (Firewalls/Proxies), DNS Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL network traffic from 'spoolsv.exe' per host, analyzing bytes sent
      and connection timing | APPLY time-series anomaly detection | ALERT on detection
      of periodic beaconing or unusual data volume
- question: Has a known Port Monitor exploit tool been executed shortly before a
    Port Monitor registry modification?
  context: Adversaries use specific tools (e.g., PrintSpoofer) to exploit vulnerabilities
    related to the Print Spooler service to escalate privileges. A key indicator
    of this activity is the execution of such a tool immediately followed by the modification
    of a Port Monitor registry key. This question looks for this tight temporal correlation,
    which is a strong sign of an active privilege escalation attempt.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - All Windows Endpoints, Windows Servers (Non-Domain Controllers)
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'SEARCH for sequence on a single host: [Process Create (Sysmon EID 1) with
      hash matching exploit tool allowlist -> Registry Value Set (Sysmon EID 13) to
      ''\Print\Monitors\*\Driver''] WHERE events occur within 60 seconds | ALERT on
      sequence detection'
- question: Was a Port Monitor registry key modified by a process with an unusually
    long or complex command line?
  context: Legitimate modifications to these keys are typically done by system tools
    with simple commands. Exploits or malicious scripts often involve long, obfuscated,
    or complex command line arguments. This question aims to detect such anomalies
    by baselining the typical command line length and entropy for processes that
    modify Port Monitor keys and alerting on significant deviations.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - All Windows Endpoints, Windows Servers (Non-Domain Controllers)
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH for processes modifying Port Monitor registry keys | EXTRACT command
      line | CALCULATE length and entropy | ALERT if length or entropy > (baseline_mean
      + 2 * baseline_std_dev)
- question: Has a sequence of events typical of Port Monitor exploitation been observed
    on a host?
  context: Port Monitor exploitation follows a predictable pattern of events: a process
    is created, which may create an exploit tool process, which drops a DLL, modifies
    the registry, and causes the spooler to load the DLL. This question uses a sequence
    analysis model to learn normal system activity and flag event sequences that
    match this specific attack pattern and are anomalous for the host.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - All Windows Endpoints, Windows Servers (Non-Domain Controllers)
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL sequences of Sysmon events (1, 7, 11, 13) per host using an LSTM
      autoencoder | ALERT on sequences with high reconstruction error that match
      the pattern [Process Create -> Exploit Create -> File Create -> Registry Set
      -> Image Load]
- question: Was a Port Monitor registry key modified by a non-system or non-administrative
    user?
  context: Modifications to the Port Monitor registry keys are sensitive operations
    that should only be performed by the SYSTEM account or a member of the Administrators
    group during software installation. A modification by any other user account
    is highly suspicious and strongly indicates an attempt to escalate privileges
    by exploiting a vulnerability that allows a lower-privileged user to write to
    a system-level registry key.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - All Windows Endpoints, Domain Controllers (for user context lookup)
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Registry Write events (Sysmon EID 13) to '\Print\Monitors' | ALERT
      if User is NOT IN ['NT AUTHORITY\SYSTEM', 'NT AUTHORITY\LOCAL SERVICE', 'BUILTIN\Administrators']
- question: Was a Port Monitor registry key modified by a process running with low
    or medium integrity?
  context: Processes that legitimately modify system settings, including Port Monitors,
    run with 'High' or 'System' integrity levels. A process running at 'Medium' (the
    default for standard users) or 'Low' integrity should not be able to write to
    these protected registry keys. If such a write occurs, it is a definitive sign
    of a privilege escalation vulnerability being exploited.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All Windows Endpoints, Domain Controllers (for user context lookup)
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Registry Write events (Sysmon EID 13) to '\Print\Monitors' | JOIN
      with Process Create events (Sysmon EID 1) to get IntegrityLevel | ALERT if
      IntegrityLevel is 'Medium' or 'Low'
- question: Does a Port Monitor registry modification have a high risk score based
    on its contextual properties?
  context: This question uses a machine learning model to assess the risk of a Port
    Monitor registry write by considering multiple factors at once. By analyzing
    the user account, process integrity level, parent process, and session type,
    the model can distinguish between legitimate administrative actions and suspicious
    modifications indicative of a privilege escalation attempt.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - All Windows Endpoints, Domain Controllers (for user context lookup)
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'FOR each Port Monitor registry write: | EXTRACT features (User, IntegrityLevel,
      ParentProcess, SessionID) | INPUT features into classification model | ALERT
      if risk_score is high'
- question: Was a Port Monitor registry modification initiated by an unusual parent
    process like an interactive shell or an Office application?
  context: Legitimate modifications to Port Monitor keys are typically child processes
    of trusted installers like 'msiexec.exe' or system services like 'svchost.exe'.
    When the parent process is an interactive shell (cmd.exe, powershell.exe) or
    an Office application, it strongly suggests that the action was performed manually
    by an attacker or through a malicious script or document, which is a classic
    sign of an attack in progress.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - All Windows Endpoints, Application Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Registry Write events (Sysmon EID 13) to '\Print\Monitors' | JOIN
      with Process Create events (Sysmon EID 1) to get ParentProcess | ALERT if ParentProcess
      in ['cmd.exe', 'powershell.exe', 'winword.exe', 'excel.exe', etc.]
- question: Was a Port Monitor registry modification initiated by a rare parent process?
  context: This question aims to detect suspicious process chains by identifying
    rare parent-child relationships. By baselining the common parent processes (like
    installers and system services) that lead to Port Monitor modifications, we can
    alert on modifications spawned from an uncommon parent. This can uncover novel
    attack vectors or living-off-the-land techniques.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - All Windows Endpoints, Application Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE parent processes of processes modifying Port Monitor keys | FOR
      each new modification, get ParentProcess | ALERT if ParentProcess is not in
      the top 95% of the baseline
- question: Does the full process ancestry chain leading to a Port Monitor modification
    appear anomalous?
  context: Attacks often involve complex process chains (e.g., email client -> Word
    -> PowerShell -> exploit). Instead of just looking at the immediate parent, this
    question analyzes the entire process tree leading to the registry modification.
    Using a graph-based model, it can detect structurally rare or suspicious chains
    that would be missed by simple parent-child checks, providing deeper context
    into the attack.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - All Windows Endpoints, Application Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL process events as a graph | FOR each Port Monitor registry modification
      event, trace process ancestry | APPLY graph anomaly detection algorithm to
      the ancestry chain | ALERT on anomalous chains
- question: Did the Print Spooler service load a suspicious DLL shortly after a credential
    access attempt?
  context: This question connects two distinct adversarial activities: credential
    access and persistence/privilege escalation. An attacker who has successfully
    attempted to access credentials from LSASS may quickly follow up by installing
    a Port Monitor to solidify their access or escalate privileges. Correlating these
    events in a short time window on the same host provides a high-confidence signal
    of a multi-stage attack.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 10
  - All Windows Endpoints, Domain Controllers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: 'SEARCH for sequence on a single host: [Process Access (Sysmon EID 10)
      targeting ''lsass.exe'' -> Image Load (Sysmon EID 7) by ''spoolsv.exe'' of a
      low-prevalence/unsigned DLL] WHERE events occur within 10 minutes | ALERT on
      sequence detection'
- question: Did the Print Spooler load a new DLL on a host that was recently exhibiting
    high-risk reconnaissance or credential access behavior?
  context: Instead of a simple correlation, this question uses a risk-scoring model.
    A host's risk score increases as it exhibits suspicious behaviors like running
    recon commands or accessing LSASS. If this accumulated risk score crosses a threshold,
    the host is considered "hot." The subsequent loading of a new DLL by the spooler
    service on this "hot" host becomes a much stronger signal of compromise, allowing
    for prioritization of alerts.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 10
  - All Windows Endpoints, Domain Controllers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: MAINTAIN a risk score for each host based on recon commands and LSASS access
      | IF host_risk_score > threshold AND spoolsv.exe loads a new DLL within 1 hour,
      THEN ALERT
- question: Does a machine learning model predict a high probability of privilege
    escalation on a host just before the Print Spooler loads a new DLL?
  context: This is a predictive approach. A supervised machine learning model is
    trained on historical data to recognize patterns of activity (recon, logins,
    LSASS access) that precede successful privilege escalation. The model continuously
    scores hosts, and if the predicted probability of an attack becomes high, it primes
    the system. If a spooler DLL load then occurs, it's treated as the confirmation
    of the predicted attack, generating a very high-confidence alert.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Sysmon Event ID 10
  - All Windows Endpoints, Domain Controllers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: CONTINUOUSLY score hosts with a supervised model based on aggregated recon/credential
      access features | IF predicted_privesc_probability > threshold AND spoolsv.exe
      loads a new DLL within minutes, THEN ALERT