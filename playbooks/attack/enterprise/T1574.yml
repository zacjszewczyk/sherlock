name: T1574: Hijack Execution Flow
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is maintaining persistence, elevating privileges, or evading defenses by hijacking the execution flow of programs. This involves tactics like planting malicious DLLs in application or system directories, modifying registry keys like service ImagePath or AppInit_DLLs to point to malicious code, or exploiting insecure file permissions to replace legitimate executables. The goal is to identify unauthorized code execution within the context of trusted processes or system startup routines.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any files been created in sensitive directories that match threat intelligence for known T1574 malware?
    context: Adversaries often reuse malware components (DLLs, EXEs) in hijacking attacks. By comparing the hashes of newly created files in critical system paths against a feed of known malicious hashes, analysts can quickly identify the use of known T1574 tools and generate a high-confidence alert. This applies to both files written on endpoints and files transferred over the network.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 1 (Process Creation)
      - Zeek files.log
      - Endpoint and server file systems, specifically application installation directories (`C:\Program Files`), user profile directories (`%APPDATA%`), and core system folders (`%SystemRoot%\System32`).
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_11 OR Zeek_files.log | JOIN file_hash with threat_intel_feed | WHERE file_path IN ('C:\Windows\System32\*', '%APPDATA%\*', 'C:\Program Files\*') | ALERT
  - question: Have any files with unusually high-entropy filenames been created in application directories?
    context: To evade signature-based detections that look for specific malicious filenames (e.g., 'version.dll'), adversaries may use randomized or nonsensical filenames. Calculating the entropy of filenames for newly created files and comparing it to a historical baseline for that directory can reveal these evasion attempts. A filename with an entropy score significantly above the norm is a statistical indicator of suspicious activity.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 1 (Process Creation)
      - Zeek files.log
      - Endpoint and server file systems, specifically application installation directories (`C:\Program Files`), user profile directories (`%APPDATA%`), and core system folders (`%SystemRoot%\System32`).
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_11 in application_directories | CALCULATE entropy(filename) | BASELINE per directory | ALERT if entropy > 98th_percentile
  - question: Can a machine learning model identify malicious file write events associated with execution flow hijacking?
    context: A supervised machine learning model can be trained to recognize the subtle patterns of malicious file writes. By using features like the file's path, the name and integrity level of the process creating the file, and the file's signature status, the model can learn to distinguish between legitimate software installation and malicious DLL planting, providing a probabilistic risk score for each event.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 1 (Process Creation)
      - Zeek files.log
      - Endpoint and server file systems, specifically application installation directories (`C:\Program Files`), user profile directories (`%APPDATA%`), and core system folders (`%SystemRoot%\System32`).
    range: last 90 days
    queries:
      - query: INPUT (Sysmon_EID_11, Sysmon_EID_1) | EXTRACT features(file_path, parent_process, integrity_level, signature_status) | PREDICT is_malicious with classification_model | ALERT if probability > threshold
  - question: Has a service's ImagePath registry value been modified to point to an unsigned or suspiciously located executable?
    context: Adversaries can achieve persistence by modifying the `ImagePath` of a legitimate Windows service to point to their own malicious executable. This query focuses on detecting such modifications by alerting when the new executable path is in a user-writable directory (like C:\Users or C:\Temp) or when the new executable lacks a valid digital signature, both of which are strong indicators of a service hijack.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4697 (A service was installed in the system)
      - Windows Event ID 4657 (A registry value was modified)
      - Registry hives on Domain Controllers, critical application servers, and standard endpoints, specifically `HKLM\SYSTEM\CurrentControlSet\Services\*`.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_13 | WHERE registry_key_path LIKE 'HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath' | IF (new_value_path IN ('C:\Users\*', 'C:\Temp\*') OR is_signed(new_value_path) == false) | ALERT
  - question: Have any services been reconfigured to use a new executable path that is rare across the enterprise?
    context: In a well-managed environment, service executable paths are highly consistent across hosts. A service `ImagePath` value that has a very low prevalence (e.g., seen on only 1% of systems) is a statistical anomaly. This question helps identify outliers that could represent a targeted hijack, especially when the change does not correspond to a known software deployment or patch.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4697 (A service was installed in the system)
      - Windows Event ID 4657 (A registry value was modified)
      - Registry hives on Domain Controllers, critical application servers, and standard endpoints, specifically `HKLM\SYSTEM\CurrentControlSet\Services\*`.
    range: last 90 days
    queries:
      - query: AGGREGATE service_imagepaths across all hosts | CALCULATE prevalence(imagepath) | ALERT if prevalence < 1% AND NOT in known_good_list
  - question: Has there been an anomalous spike in the rate of service modification events on any host?
    context: While individual service modifications can occur during normal operations, a sudden burst of such events on a single host or a small group of hosts is highly unusual. This question uses time-series analysis to detect these spikes, which could indicate an automated script or adversary attempting to establish persistence across multiple services simultaneously, outside of a normal maintenance window.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4697 (A service was installed in the system)
      - Windows Event ID 4657 (A registry value was modified)
      - Registry hives on Domain Controllers, critical application servers, and standard endpoints, specifically `HKLM\SYSTEM\CurrentControlSet\Services\*`.
    range: last 90 days
    queries:
      - query: SEARCH (Sysmon_EID_13, WinEvent_4697) | COUNT by host, time_bucket | APPLY time_series_anomaly_detection | ALERT on anomalous_spikes
  - question: Has the AppInit_DLLs registry key been modified?
    context: The `AppInit_DLLs` registry key is a deprecated but still functional mechanism for loading DLLs into most user-mode processes. Because it is rarely used for legitimate purposes in modern systems, any modification to this key is extremely suspicious. This question implements a zero-tolerance rule to generate a critical alert for any write to this key, as it is a high-confidence indicator of a persistence attempt.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4657 (A registry value was modified)
      - Sysmon Event ID 7 (Image loaded)
      - Endpoint and server registry hives, specifically the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows` key.
    range: last 90 days
    queries:
      - query: SEARCH (Sysmon_EID_13 OR WinEvent_4657) | WHERE registry_key_path == 'HKLM\...\Windows\AppInit_DLLs' AND NOT in exclusion_list | CRITICAL_ALERT
  - question: Are there any hosts that have ever had their AppInit_DLLs key modified?
    context: Since legitimate modification of `AppInit_DLLs` is virtually nonexistent, any host showing a history of one or more modifications is a statistical outlier compared to a clean fleet. This question helps threat hunters prioritize systems for deeper investigation by identifying hosts that have been tampered with via this specific, high-impact persistence mechanism at any point in their logged history.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4657 (A registry value was modified)
      - Sysmon Event ID 7 (Image loaded)
      - Endpoint and server registry hives, specifically the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows` key.
    range: last 90 days
    queries:
      - query: SEARCH (Sysmon_EID_13 OR WinEvent_4657) | WHERE registry_key_path == 'HKLM\...\Windows\AppInit_DLLs' | COUNT by hostname | RANK hosts by count for threat_hunting
  - question: Can a two-step event sequence (registry write to AppInit_DLLs followed by a process loading the specified DLL) be detected?
    context: A successful `AppInit_DLLs` hijack involves two distinct steps, the registry key modification and the subsequent loading of the malicious DLL by a new process. This question uses a graph-based approach to explicitly look for this sequence. Detecting this connected path provides extremely high-confidence evidence that the hijack was not only attempted but was also successful.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4657 (A registry value was modified)
      - Sysmon Event ID 7 (Image loaded)
      - Endpoint and server registry hives, specifically the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows` key.
    range: last 90 days
    queries:
      - query: GRAPH_SEARCH find path (RegistryWrite:AppInit_DLLs) -> (ProcessLoad:DLL) where RegistryWrite.dll_path == ProcessLoad.dll_path | ALERT on path_found
  - question: Is a critical system process loading a DLL from a non-standard location or loading an unsigned DLL?
    context: Core Windows processes like `lsass.exe` and `explorer.exe` have a predictable set of modules they load from trusted system directories. An adversary can hijack the execution flow by placing a malicious DLL in a location that is searched before the legitimate path. This question detects this by alerting when a critical process loads a DLL from an unusual location (like %APPDATA%) or when the loaded DLL is unsigned.
    answer_sources:
      - Sysmon Event ID 7 (Image loaded)
      - Windows Event ID 4688 (Process Creation)
      - Process memory space on endpoints and servers, monitored via endpoint security agents.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_7 | WHERE process_name IN (lsass.exe, explorer.exe, svchost.exe) AND (dll_path IN ('%APPDATA%', '%TEMP%') OR is_signed(dll_path) == false) | ALERT
  - question: Is a critical system process loading a known DLL with a mismatched hash, or is its set of loaded modules significantly different from its historical baseline?
    context: This question uses statistical baselining to detect subtle hijacks. It checks for two conditions, 1) A known system DLL (e.g., `ntdll.dll`) is loaded, but its hash doesn't match the known-good version, indicating replacement or patching. 2) The overall collection of DLLs loaded by a process diverges significantly from its normal profile (measured by Jaccard similarity, $$< 0.9$$), indicating that a hijack has altered its behavior by loading one or more malicious modules.
    answer_sources:
      - Sysmon Event ID 7 (Image loaded)
      - Windows Event ID 4688 (Process Creation)
      - Process memory space on endpoints and servers, monitored via endpoint security agents.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_7 | GROUP dll_hashes by process_name | COMPARE current_hashes to historical_baseline | ALERT if hash_mismatch OR jaccard_similarity < 0.9
  - question: Is there a sudden, enterprise-wide spike in the number of novel DLLs being loaded by system processes?
    context: A widespread DLL search order hijacking campaign would cause many system processes across multiple machines to load new, malicious DLLs. This question looks for the macro-level effect of such a campaign by monitoring the rate of 'first seen' DLLs being loaded across the entire environment. A sudden surge in this metric is a strong indicator of a large-scale attack.
    answer_sources:
      - Sysmon Event ID 7 (Image loaded)
      - Windows Event ID 4688 (Process Creation)
      - Process memory space on endpoints and servers, monitored via endpoint security agents.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_7 | IDENTIFY never-before-seen DLLs | COUNT new_DLLs by time_bucket | APPLY time_series_anomaly_detection | ALERT on anomalous_spikes
  - question: Has a DLL known to be vulnerable to hijacking by a privileged service been created in a user-writable directory?
    context: Certain privileged services are known to insecurely load DLLs from user-writable locations. Adversaries exploit this for privilege escalation by placing a malicious DLL with the expected name (e.g., `wlbsctrl.dll`) in a public directory. This question creates a watchlist for these specific DLLs and alerts if they are created in insecure locations by a standard user process.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 1 (Process Creation)
      - World-writable directories on endpoints and servers, such as `C:\`, `C:\ProgramData`, and `C:\PerfLogs`.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_11 | WHERE filename IN (vulnerable_dll_list) AND file_path IN (user_writable_paths) | ALERT
  - question: Has a medium-integrity process written a DLL to a high-integrity system directory?
    context: Standard user processes (running at Medium integrity) should not be able to write files to protected system directories like `C:\Windows\System32`. A successful file write of a DLL from a medium-integrity process to a system-level directory is a statistically rare and highly anomalous event, strongly indicating a successful bypass of file system permissions for privilege escalation.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 1 (Process Creation)
      - World-writable directories on endpoints and servers, such as `C:\`, `C:\ProgramData`, and `C:\PerfLogs`.
    range: last 90 days
    queries:
      - query: JOIN Sysmon_EID_11 and Sysmon_EID_1 on ProcessGuid | WHERE file_path LIKE 'C:\Windows\System32\*' AND process_integrity_level == 'Medium' AND filename LIKE '%.dll' | ALERT
  - question: Has the specific three-step sequence of a DLL hijack for privilege escalation been observed?
    context: A successful DLL hijacking attack for privilege escalation follows a clear pattern, 1) A low-privilege process writes a malicious DLL, 2) A privileged service is restarted, and 3) The restarted service loads the malicious DLL and spawns a new process with SYSTEM privileges. This question uses a sequence model to detect this specific chain of events, providing a high-confidence indicator of a successful attack.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 1 (Process Creation)
      - World-writable directories on endpoints and servers, such as `C:\`, `C:\ProgramData`, and `C:\PerfLogs`.
    range: last 90 days
    queries:
      - query: DETECT sequence [EID11 by low_priv_proc], [ServiceRestart event], [EID1 by service_proc with SYSTEM privs] | ALERT on sequence_match
  - question: Has an Image File Execution Options (IFEO) debugger key been set for an application?
    context: Adversaries can use IFEO to attach a 'debugger' (a malicious executable) to a legitimate application. When the application is launched, the OS will execute the adversary's program instead. This question monitors for any process writing to a 'Debugger' value within the IFEO registry path, which is a common technique for persistence and privilege escalation, especially when targeting accessibility tools.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4657 (A registry value was modified)
      - Endpoint and server registry hives, specifically `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` and `HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\`.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_13 | WHERE registry_key_path LIKE 'HKLM\...\Image File Execution Options\*\Debugger' AND process_name NOT IN (legit_debuggers_list) | ALERT
  - question: Has an IFEO key been created for an unusual or rarely-debugged process?
    context: While developers use IFEO for legitimate debugging, adversaries often target system utilities that are not typically debugged (e.g., `sethc.exe`, `utilman.exe`). This question establishes a baseline of normal IFEO usage and alerts on the creation of a new IFEO subkey for a process that is statistically rare to be debugged across the enterprise, indicating potential abuse.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4657 (A registry value was modified)
      - Endpoint and server registry hives, specifically `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` and `HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\`.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_13 | WHERE registry_key_path LIKE 'HKLM\...\Image File Execution Options\*' | EXTRACT target_process | CALCULATE prevalence(target_process) | ALERT if prevalence is low AND target_process IN (suspicious_process_list)
  - question: Can a machine learning model distinguish malicious IFEO modifications from legitimate administrative changes?
    context: By training a decision tree on features of IFEO registry modification events—such as the process making the change, the target application, and the path of the new debugger executable—a model can learn the patterns of malicious use. This allows for automated detection of IFEO abuse for privilege escalation while minimizing false positives from legitimate debugging or administrative activities.
    answer_sources:
      - Sysmon Event ID 13 (RegistryValue Set)
      - Windows Event ID 4657 (A registry value was modified)
      - Endpoint and server registry hives, specifically `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` and `HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\`.
    range: last 90 days
    queries:
      - query: INPUT Sysmon_EID_13 targeting IFEO | EXTRACT features(modifying_process, target_exe, debugger_path) | PREDICT is_malicious with decision_tree_model | ALERT if prediction is malicious
  - question: Has a low-integrity process written a file to a protected system directory?
    context: This is a critical indicator of a privilege escalation exploit. Protected directories like `C:\Windows\System32` are configured with System-level integrity SACLs, which should prevent modification by processes running at 'Medium' or 'Low' integrity. A file write event that violates this rule is a high-confidence signal that a permission bypass has occurred.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 7 (Image loaded)
      - Sysmon Event ID 1 (Process Creation)
      - Protected system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) and their associated file system ACLs on all Windows hosts.
    range: last 90 days
    queries:
      - query: JOIN Sysmon_EID_11 and Sysmon_EID_1 on ProcessGuid | WHERE file_path LIKE 'C:\Windows\System32\*' AND process_integrity_level IN ('Low', 'Medium') | CRITICAL_ALERT
  - question: Has a suspicious file write by a low-privilege process been immediately followed by a high-privilege process loading that same file?
    context: This question looks for a direct exploit chain. A short time delta (e.g., under 60 seconds) between a low-privilege process creating a file in a sensitive location and a high-privilege process subsequently loading it is a statistically significant pattern. Correlating these two events provides strong evidence of a successful privilege escalation via file planting.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 7 (Image loaded)
      - Sysmon Event ID 1 (Process Creation)
      - Protected system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) and their associated file system ACLs on all Windows hosts.
    range: last 90 days
    queries:
      - query: CORRELATE (Sysmon_EID_11 by low_priv_proc) with (Sysmon_EID_7 by high_priv_proc) on filename | WHERE time_delta < 60 seconds | ALERT
  - question: Can a process-file interaction graph reveal a privilege escalation path?
    context: Visualizing interactions as a graph can make complex attack chains obvious. This question involves building a graph where nodes are processes and files, and edges are actions like 'writes' or 'loaded_by'. An algorithm can then search for a specific path that represents privilege escalation, such as a low-privilege process writing a DLL that is subsequently loaded by a SYSTEM-level process.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 7 (Image loaded)
      - Sysmon Event ID 1 (Process Creation)
      - Protected system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) and their associated file system ACLs on all Windows hosts.
    range: last 90 days
    queries:
      - query: GRAPH_SEARCH find path (Process:LowPriv) -writes-> (File:DLL) -loaded_by-> (Process:SYSTEM) | ALERT on path_found
  - question: Has a suspicious or impossible parent-child process relationship occurred?
    context: Adversaries often create anomalous process chains after a successful hijack. This question looks for process creation events that violate normal operating system behavior, such as `lsass.exe` (a core security process) spawning a command shell (`cmd.exe`), or `services.exe` spawning a reconnaissance tool (`whoami.exe`). These relationships are almost always malicious.
    answer_sources:
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 13 (RegistryValue Set)
      - Zeek conn.log
      - System-wide process ancestry trees on endpoints and servers; Egress network traffic logs.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_1 | WHERE (parent_process, child_process) IN (impossible_pairs_list) | HIGH_ALERT
  - question: Has a statistically rare parent-child process relationship been observed?
    context: Beyond impossible relationships, some are just highly improbable. By baselining all parent-child process pairs across the enterprise, a probabilistic model can be built. This question uses that model to calculate the conditional probability $$P(Child | Parent)$$ for each new process creation event. An event with an extremely low probability is flagged as a statistical anomaly worthy of investigation.
    answer_sources:
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 13 (RegistryValue Set)
      - Zeek conn.log
      - System-wide process ancestry trees on endpoints and servers; Egress network traffic logs.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_1 | CALCULATE probability(child_process | parent_process) from baseline | ALERT if probability < 0.1_percentile
  - question: Can clustering identify anomalous process execution chains?
    context: This question uses unsupervised machine learning to find new or unusual execution patterns. By clustering process creation events based on features like the parent/child names, command-line entropy, user context, and subsequent network activity, outlier clusters can be identified. These clusters often represent novel malicious activity that does not match any predefined rule or signature.
    answer_sources:
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 13 (RegistryValue Set)
      - Zeek conn.log
      - System-wide process ancestry trees on endpoints and servers; Egress network traffic logs.
    range: last 90 days
    queries:
      - query: INPUT enriched_process_events | CLUSTER using DBSCAN on features(parent, child, cmd_entropy, user, has_network_conn) | INVESTIGATE outlier_clusters
  - question: Has a file belonging to a security tool been modified or replaced?
    context: A common defense evasion technique is to tamper with security products (e.g., EDR, AV). This question involves maintaining a manifest of known-good file paths and hashes for all security tools. A critical alert is generated if a file create or write event is observed in a protected security directory and the resulting file's hash does not match the manifest, indicating tampering.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - File Integrity Monitoring (FIM) logs
      - Installation directories of all security products (e.g., `C:\Program Files\Windows Defender`) on all endpoints and servers.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_11 in security_tool_directories | VALIDATE hash against manifest | CRITICAL_ALERT if hash_mismatch
  - question: Is there an anomalous increase in disabled or unhealthy security agents?
    context: If an adversary successfully hijacks and tampers with security agents on a large scale, it will manifest as a statistical anomaly in the health status of the agent population. This question looks for a sudden increase in agents reporting as 'disabled' or 'unhealthy' within a specific host group or subnet and correlates it with file modification events on those systems.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - File Integrity Monitoring (FIM) logs
      - Installation directories of all security products (e.g., `C:\Program Files\Windows Defender`) on all endpoints and servers.
    range: last 90 days
    queries:
      - query: MONITOR security_agent_health_status | DETECT anomalous increase in 'unhealthy' agents per group | CORRELATE with file_modification_events on affected_hosts
  - question: Can a machine learning model detect tampering events in security-sensitive directories?
    context: This question proposes training a classification model to provide a risk score for file modifications in directories belonging to security tools. By learning from features like the target file path, the modifying process, and the resulting file's signature status, the model can distinguish between legitimate updates (e.g., by `TiWorker.exe`) and malicious tampering (e.g., by `powershell.exe`).
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - File Integrity Monitoring (FIM) logs
      - Installation directories of all security products (e.g., `C:\Program Files\Windows Defender`) on all endpoints and servers.
    range: last 90 days
    queries:
      - query: INPUT Sysmon_EID_11 in security_dirs | EXTRACT features(path, process, signature) | PREDICT tampering_risk_score | ALERT on high_score
  - question: Has a commonly hijacked system DLL been created in an application's local directory?
    context: This is a classic DLL search order hijacking scenario. An adversary places a malicious DLL with a generic system name (like `version.dll`) in an application's folder. When the application runs, the OS finds and loads the malicious DLL before the legitimate one in `System32`. This rule alerts when such a file is created in an application directory.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 7 (Image loaded)
      - Application installation directories on endpoints, especially for commonly used software with known vulnerabilities like browsers, office suites, and developer tools.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_11 | WHERE filename IN (common_hijack_dlls) AND file_path LIKE 'C:\Program Files\*' AND file_path NOT LIKE 'C:\Windows\System32\*' | ALERT
  - question: Is a major application loading a DLL from a new or unexpected path?
    context: This question uses baselining to detect search order hijacking. For each major application (e.g., `chrome.exe`), a profile of all normally loaded DLLs and their full paths is maintained. An alert is triggered if the application is observed loading a DLL of the same name but from a different, unexpected path, which strongly indicates that a malicious DLL has been planted in the search path.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 7 (Image loaded)
      - Application installation directories on endpoints, especially for commonly used software with known vulnerabilities like browsers, office suites, and developer tools.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_7 | BASELINE dll_load_paths per process | ALERT if process loads dll_name from a new_path, when baseline_path exists
  - question: Does a major application's loaded module profile show anomalous changes?
    context: This question uses an autoencoder to learn the normal 'module load profile' for an application, which is the complete set of DLLs it typically loads. A hijacked process will have a different profile (e.g., it loads an extra malicious DLL). The autoencoder will fail to reconstruct this anomalous profile accurately, resulting in a high reconstruction error that flags the process as an anomaly.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - Sysmon Event ID 7 (Image loaded)
      - Application installation directories on endpoints, especially for commonly used software with known vulnerabilities like browsers, office suites, and developer tools.
    range: last 90 days
    queries:
      - query: INPUT Sysmon_EID_7 module_profiles per process | APPLY autoencoder_model | ALERT on high reconstruction_error
  - question: Has a Microsoft-signed binary in a trusted system directory been modified and left unsigned?
    context: System files in `C:\Windows\System32` are protected and signed by Microsoft. An adversary might replace or patch one of these files to evade defenses. This question detects such tampering by triggering a signature check upon any file write to this directory and alerting if a file that was previously Microsoft-signed becomes unsigned or is signed by an untrusted publisher.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - File Integrity Monitoring (FIM) logs
      - Trusted system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) on all Windows hosts.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_11 in 'C:\Windows\System32' | TRIGGER signature_check | ALERT if old_signature == 'Microsoft' AND (new_signature == 'Unsigned' OR new_signature == 'Untrusted')
  - question: Are there any hosts with an unusually high number of mismatched system file hashes?
    context: This question uses statistical analysis for threat hunting. By periodically hashing all executables in `System32` on every host and comparing them to a known-good baseline for the OS patch level, it's possible to count the number of mismatched files per host. A host with a count in the 99.9th percentile is a significant outlier and a prime candidate for investigation of system file tampering.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - File Integrity Monitoring (FIM) logs
      - Trusted system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) on all Windows hosts.
    range: last 90 days
    queries:
      - query: HASH all executables in System32 on all hosts | COMPARE to known_good_baseline | COUNT mismatches per host | RANK hosts by mismatch_count | INVESTIGATE top_percentile
  - question: Can a machine learning model identify patched or replaced system files?
    context: This question uses a one-class SVM, a model ideal for anomaly detection, to identify malicious files masquerading as legitimate system files. The model is trained only on the features of legitimate system files (entropy, PE header details, size, etc.). When scanning a system directory, any file that the model classifies as an 'outlier' is highly suspect and likely a replaced or patched binary.
    answer_sources:
      - Sysmon Event ID 11 (FileCreate)
      - File Integrity Monitoring (FIM) logs
      - Trusted system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) on all Windows hosts.
    range: last 90 days
    queries:
      - query: SCAN files in System32 | EXTRACT features (entropy, PE_header, signature, size) | APPLY one_class_SVM_model | ALERT on outliers
  - question: Has a core system process that should never use the network initiated an external connection?
    context: Certain core Windows processes (e.g., `lsass.exe`, `wininit.exe`) have no legitimate reason to make outbound network connections. This question implements a zero-tolerance rule that generates a critical alert if any of these specified processes are observed initiating a network connection to an external (non-RFC1918) IP address, as this is a strong indicator of a process hijack.
    answer_sources:
      - Sysmon Event ID 3 (Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (firewalls, proxies), DNS resolvers, and endpoint network stacks.
    range: last 90 days
    queries:
      - query: SEARCH Sysmon_EID_3 | WHERE process_name IN (lsass.exe, wininit.exe, csrss.exe) AND is_external(DestinationIp) | CRITICAL_ALERT
  - question: Is a trusted networking process (like svchost.exe) exhibiting anomalous network behavior?
    context: While some system processes like `svchost.exe` are expected to use the network, their behavior is often predictable. This question uses statistical baselining (z-scores) to detect outliers in their network activity. Anomalies could include connecting to a new country for the first time, or a sudden spike in data sent to a new IP address that is more than 3 standard deviations from the norm.
    answer_sources:
      - Sysmon Event ID 3 (Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (firewalls, proxies), DNS resolvers, and endpoint network stacks.
    range: last 90 days
    queries:
      - query: SEARCH Zeek_conn.log | BASELINE network behavior per process (svchost.exe) | CALCULATE z-score for (destination_country, data_volume) | ALERT on high z-score
  - question: Can a time-series model detect the establishment of a C2 channel from a hijacked system process?
    context: A hijacked process establishing a command-and-control (C2) channel often creates a new, periodic network pattern (a 'heartbeat'). This question uses a time-series anomaly detection model like LSTM to learn the normal rhythm of network connections for each process. The model can then flag the emergence of a new, regular pattern that is characteristic of C2 communication.
    answer_sources:
      - Sysmon Event ID 3 (Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (firewalls, proxies), DNS resolvers, and endpoint network stacks.
    range: last 90 days
    queries:
      - query: INPUT network_connection_logs grouped by process_name | APPLY LSTM_time_series_model | ALERT on detected anomalous periodic patterns