name: T1574: Hijack Execution Flow
id: 3c5a611c-2d1d-4f1e-9b2a-8d6e4c7b9f3a
description: This playbook investigates adversary attempts to maintain persistence, elevate privileges, or evade defenses by hijacking execution flow (T1574). This technique involves manipulating how the operating system or applications load and execute code. Indicators include the creation of malicious DLLs in application or system directories to be loaded instead of legitimate ones (DLL hijacking), modifying registry keys like AppInit_DLLs or service ImagePaths to point to malicious executables, using Image File Execution Options (IFEO) to attach a debugger to a target process, or exploiting trusted system processes to load malicious code from non-standard paths. The goal is to detect these manipulations across file systems, the registry, and process execution patterns.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a file been created in a sensitive directory that matches a known-malicious hash from a threat intelligence feed?
  context: This question seeks to identify classic DLL hijacking or binary planting where an adversary places a known-malicious file in a location like C:\Windows\System32. By joining file creation events (from endpoints) or file transfer events (from network sensors) with a threat intelligence feed of hashes associated with T1574, we can detect high-confidence indicators of compromise. A match suggests an adversary is attempting to have a legitimate application or the OS load their malicious code.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 1 (Process Creation)
  - Zeek files.log
  - NAI: Endpoint and server file systems, specifically application installation directories (`C:\Program Files`), user profile directories (`%APPDATA%`), and core system folders (`%SystemRoot%\System32`).
  range: last 90 days
  queries:
  - SEARCH file creation events (Sysmon 11) OR file transfer events (Zeek files.log). JOIN with threat intelligence hash feed. WHERE file path is in a sensitive directory (e.g., System32). ALERT on match.
- question: Has a file with an unusually high-entropy filename been created in an application directory?
  context: Adversaries may use randomized filenames to evade simple signature-based detections. This question aims to detect such behavior by establishing a baseline of normal filename entropy for specific application directories and alerting on significant deviations. A new file with a filename entropy score in the 98th percentile or higher for its location could indicate an attempt to plant a malicious payload with a randomized name to avoid being easily identified.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 1 (Process Creation)
  - Zeek files.log
  - NAI: Endpoint and server file systems, specifically application installation directories (`C:\Program Files`), user profile directories (`%APPDATA%`), and core system folders (`%SystemRoot%\System32`).
  range: last 90 days
  queries:
  - FOR each application directory, BASELINE filename entropy. SEARCH new file creation events (Sysmon 11). CALCULATE entropy of new filename. WHERE entropy > 98th percentile of baseline. ALERT.
- question: Does a machine learning model classify a new file creation event as likely malicious based on its context?
  context: This question leverages a machine learning model to score the risk of a file write event. By training a model on features like the file's path, the parent process that created it, the process's integrity level, and the file's signature status, we can identify suspicious combinations that a human analyst or a simple rule might miss. An alert is triggered when the model's confidence score for a 'malicious' prediction exceeds a defined threshold, indicating a high probability of a hijack attempt.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 1 (Process Creation)
  - Zeek files.log
  - NAI: Endpoint and server file systems, specifically application installation directories (`C:\Program Files`), user profile directories (`%APPDATA%`), and core system folders (`%SystemRoot%\System32`).
  range: last 90 days
  queries:
  - PREDICT using classification model on new file creation events (Sysmon 11) enriched with parent process data (Sysmon 1). FEATURES include file path, parent process name, integrity level, signature status. WHERE prediction_probability > confidence_threshold. ALERT.
- question: Has a service's ImagePath been modified in the registry to point to an unsigned executable or an executable in a user-writable directory?
  context: Adversaries can gain persistence by modifying the registry key that defines the executable path for a system service. This question looks for direct evidence of this tampering. An alert is triggered if a service's `ImagePath` value is changed to a binary in a non-standard, user-writable location like `C:\Users` or `C:\Temp`, or if the new binary lacks a valid digital signature. This is a strong indicator of an attempt to hijack a service for persistent execution.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4697 (A service was installed in the system)
  - Windows Event ID 4657 (A registry value was modified)
  - NAI: Registry hives on Domain Controllers, critical application servers, and standard endpoints, specifically `HKLM\SYSTEM\CurrentControlSet\Services\*`.
  range: last 90 days
  queries:
  - SEARCH registry set events (Sysmon 13). WHERE TargetObject path is 'HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath' AND (New value path is in user-writable dir OR New executable is unsigned). ALERT.
- question: Has a service's ImagePath been changed to a value that is rare or has a low prevalence across the enterprise?
  context: This question aims to detect service hijacking by identifying statistical anomalies. Legitimate service paths are typically uniform across an enterprise or change predictably with software updates. An adversary modifying a service's `ImagePath` will likely introduce a new, low-prevalence path. By baselining all `ImagePath` values, we can alert on any new path that appears on a very small percentage of hosts (e.g., <1%), especially if it doesn't correlate with a known software deployment.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4697 (A service was installed in the system)
  - Windows Event ID 4657 (A registry value was modified)
  - NAI: Registry hives on Domain Controllers, critical application servers, and standard endpoints, specifically `HKLM\SYSTEM\CurrentControlSet\Services\*`.
  range: last 90 days
  queries:
  - BASELINE all service ImagePath values across all hosts. SEARCH for new ImagePath values from registry/service events. CALCULATE prevalence of new value. WHERE prevalence < 1% of hosts. ALERT.
- question: Is there a sudden spike in the rate of service modification events on a host or group of hosts?
  context: Instead of looking at a single modification, this question analyzes the frequency of service modifications over time. A sudden, sharp increase in these events on a host, outside of a scheduled maintenance window, is anomalous. It could indicate an automated script or malware attempting to establish persistence across multiple services or hosts. A time-series model can detect these spikes and flag them for investigation.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4697 (A service was installed in the system)
  - Windows Event ID 4657 (A registry value was modified)
  - NAI: Registry hives on Domain Controllers, critical application servers, and standard endpoints, specifically `HKLM\SYSTEM\CurrentControlSet\Services\*`.
  range: last 90 days
  queries:
  - MODEL rate of service modification events (Sysmon 13, Win 4697) per host over time. DETECT anomalous spikes in event frequency. WHERE spike is outside of maintenance window. ALERT.
- question: Has the AppInit_DLLs registry key been modified?
  context: This question implements a zero-tolerance policy for modifications to the `AppInit_DLLs` registry key. This mechanism, which forces DLLs to be loaded into every user-mode process, is deprecated and rarely used for legitimate purposes, making any modification highly suspicious. An alert should be generated for any write to this key, with exceptions only for explicitly documented and approved administrative actions.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4657 (A registry value was modified)
  - Sysmon Event ID 7 (Image loaded)
  - NAI: Endpoint and server registry hives, specifically the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows` key.
  range: last 90 days
  queries:
  - SEARCH registry modification events (Sysmon 13 or Win 4657). WHERE target registry value is 'HKLM\...\Windows\AppInit_DLLs'. ALERT on any modification.
- question: Has a host shown an unusual number of modifications to the AppInit_DLLs key over its lifetime?
  context: This question uses the lifetime modification count of the `AppInit_DLLs` key as a threat hunting metric. Since the fleet-wide average for modifications to this key should be zero, any host with a count greater than zero is a statistical outlier. This allows analysts to rank and prioritize hosts for deeper investigation based on this high-confidence indicator of potential compromise.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4657 (A registry value was modified)
  - Sysmon Event ID 7 (Image loaded)
  - NAI: Endpoint and server registry hives, specifically the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows` key.
  range: last 90 days
  queries:
  - TRACK lifetime count of 'AppInit_DLLs' modifications per host. RANK hosts for hunting where count > 0.
- question: Is there evidence of a process loading a DLL specified by a recent AppInit_DLLs registry modification?
  context: This question seeks to confirm a successful `AppInit_DLLs` hijack by correlating the registry write with the subsequent loading of the malicious DLL. Using a graph model, we can connect the write event to the `AppInit_DLLs` key with a later module load event by any process that loads the specified DLL. The existence of this two-step path provides a high-confidence confirmation that the hijack was successful.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4657 (A registry value was modified)
  - Sysmon Event ID 7 (Image loaded)
  - NAI: Endpoint and server registry hives, specifically the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows` key.
  range: last 90 days
  queries:
  - SEARCH for event chain: 1) Registry write (Sysmon 13) to 'AppInit_DLLs' key. 2) Followed by a process loading the DLL (Sysmon 7) specified in the registry write. ALERT on chain detection.
- question: Has a critical system process loaded a DLL from a non-standard location or an unsigned DLL?
  context: This question looks for trusted system processes (like `lsass.exe`, `explorer.exe`) loading code from unexpected places. These processes should only load signed DLLs from protected system directories. Loading a DLL from a user-writable path like `%APPDATA%` or loading an unsigned module is a strong red flag for process injection or DLL hijacking, indicating the process's execution flow has been compromised.
  answer_sources:
  - Sysmon Event ID 7 (Image loaded)
  - Windows Event ID 4688 (Process Creation)
  - NAI: Process memory space on endpoints and servers, monitored via endpoint security agents.
  range: last 90 days
  queries:
  - SEARCH module load events (Sysmon 7). WHERE process is critical system process (lsass.exe, etc.) AND (DLL path is non-standard OR DLL is unsigned). ALERT.
- question: Has a critical system process loaded a DLL with a hash that does not match its historical baseline?
  context: This question aims to detect when a legitimate DLL has been replaced or patched on disk (a form of DLL hijacking). By creating a baseline of known-good hashes for all DLLs normally loaded by a critical process, we can detect any deviation. A hash mismatch for a standard DLL name (e.g., `kernel32.dll`) is a high-confidence statistical indicator that the legitimate file has been swapped for a malicious one.
  answer_sources:
  - Sysmon Event ID 7 (Image loaded)
  - Windows Event ID 4688 (Process Creation)
  - NAI: Process memory space on endpoints and servers, monitored via endpoint security agents.
  range: last 90 days
  queries:
  - BASELINE normal DLL names and hashes for critical processes. SEARCH for new module loads (Sysmon 7). WHERE DLL name is in baseline BUT hash does not match. ALERT.
- question: Has there been a sudden enterprise-wide spike in new, never-before-seen DLLs being loaded by system processes?
  context: This question uses time-series analysis to detect a potential widespread DLL search order hijacking campaign. Adversaries might deploy a malicious DLL with the same name across many machines to hijack a common application. This would cause a sudden increase in the enterprise-wide frequency of a 'new' DLL (from the perspective of the monitoring system) being loaded. Detecting this spike can provide an early warning of a large-scale attack.
  answer_sources:
  - Sysmon Event ID 7 (Image loaded)
  - Windows Event ID 4688 (Process Creation)
  - NAI: Process memory space on endpoints and servers, monitored via endpoint security agents.
  range: last 90 days
  queries:
  - MODEL time-series of enterprise-wide frequency of new/unseen DLLs loaded by system processes. DETECT anomalous spikes in the frequency. ALERT on spike.
- question: Was a DLL known to be vulnerable to insecure loading by a privileged service created in a user-writable directory?
  context: This question targets a specific privilege escalation vector where an adversary plants a malicious DLL (e.g., `wlbsctrl.dll`) in a world-writable location. A higher-privileged service that insecurely searches for this DLL will find and load the malicious version, executing its code with elevated permissions. This rule looks for the creation of these specific, high-risk DLLs in insecure locations.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 1 (Process Creation)
  - NAI: World-writable directories on endpoints and servers, such as `C:\`, `C:\ProgramData`, and `C:\PerfLogs`.
  range: last 90 days
  queries:
  - SEARCH file creation events (Sysmon 11). WHERE filename is on watchlist (e.g., 'wlbsctrl.dll') AND path is in user-writable directory (e.g., C:\ProgramData). ALERT.
- question: Has a process running with medium integrity written a DLL file to a protected system directory?
  context: This question identifies a clear violation of Windows integrity controls. Protected system directories like `C:\Windows\System32` should only be writable by high or system integrity processes. A medium-integrity process (the default for a standard user) writing a DLL to such a location is statistically rare and strongly indicates an exploit or misconfiguration is being used to bypass security boundaries for privilege escalation.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 1 (Process Creation)
  - NAI: World-writable directories on endpoints and servers, such as `C:\`, `C:\ProgramData`, and `C:\PerfLogs`.
  range: last 90 days
  queries:
  - SEARCH file creation events (Sysmon 11). JOIN with creating process data (Sysmon 1). WHERE file path is protected system dir AND process integrity level is 'Medium'. ALERT.
- question: Has a sequence of events indicating a successful DLL hijacking for privilege escalation been observed?
  context: This question uses sequence analysis to detect a full privilege escalation attack chain. The specific pattern of interest is: 1) a low-privilege process writes a DLL, 2) a system service is observed restarting, and 3) that service spawns a new child process with SYSTEM privileges. Detecting this entire sequence provides a very high-confidence alert that a DLL hijack was successfully used to escalate privileges.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 1 (Process Creation)
  - NAI: World-writable directories on endpoints and servers, such as `C:\`, `C:\ProgramData`, and `C:\PerfLogs`.
  range: last 90 days
  queries:
  - MODEL for event sequence: 1) Low-privilege process writes DLL. 2) System service restarts. 3) Service spawns new child process as SYSTEM. ALERT on sequence detection.
- question: Has a 'Debugger' value been set in an Image File Execution Options (IFEO) registry key?
  context: This question targets the abuse of the IFEO 'Debugger' registry value for persistence and privilege escalation. By setting this value for a target application (e.g., `sethc.exe`), an adversary can cause the operating system to execute their malicious program instead of the legitimate one. Any write to a 'Debugger' value should be considered highly suspicious and alerted on, with exceptions only for known, legitimate debugging tools.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4657 (A registry value was modified)
  - NAI: Endpoint and server registry hives, specifically `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` and `HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\`.
  range: last 90 days
  queries:
  - SEARCH registry set events (Sysmon 13). WHERE value name is 'Debugger' under an IFEO path. EXCLUDE writes from known debuggers. ALERT on all others.
- question: Has a new IFEO subkey been created for a process not typically associated with debugging, such as an accessibility feature?
  context: This question aims to detect the setup for an IFEO hijack by monitoring the creation of new subkeys. Adversaries often target accessibility applications (`sethc.exe`, `utilman.exe`) for IFEO hijacking because they can be easily launched from the login screen with high privileges. Alerting on the creation of a new IFEO key for such a target process, which is statistically rare across the enterprise, can provide an early warning of this attack.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4657 (A registry value was modified)
  - NAI: Endpoint and server registry hives, specifically `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` and `HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\`.
  range: last 90 days
  queries:
  - BASELINE existing IFEO subkeys. SEARCH for new IFEO subkey creation. WHERE subkey name is for a non-standard debug target (e.g., 'sethc.exe'). ALERT.
- question: Does a machine learning model classify a registry write to an IFEO key as malicious?
  context: This question uses a decision tree classifier to distinguish between legitimate administrative use of IFEO and malicious abuse. By training the model on features like the process making the change, the target application of the IFEO key, and the path of the new debugger executable, the system can learn to identify suspicious patterns. This provides a more nuanced detection than a simple rule, reducing false positives from legitimate debugging activities.
  answer_sources:
  - Sysmon Event ID 13 (RegistryValue Set)
  - Windows Event ID 4657 (A registry value was modified)
  - NAI: Endpoint and server registry hives, specifically `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` and `HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\`.
  range: last 90 days
  queries:
  - PREDICT using decision tree model on IFEO registry write events (Sysmon 13). FEATURES: modifying process name, target exe name, new debugger path. WHERE prediction is 'malicious'. ALERT.
- question: Has a process with a low or medium integrity level written a file to a protected system directory?
  context: This question looks for a direct violation of Windows Integrity Control, which is a strong indicator of a privilege escalation bypass. Protected directories like `C:\Windows\System32` are protected by a System-level integrity SACL. A process running at 'Medium' or 'Low' integrity should not be able to write files there. A file creation event that violates this rule is a critical alert, suggesting an exploit has successfully bypassed this security mechanism.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 7 (Image loaded)
  - Sysmon Event ID 1 (Process Creation)
  - NAI: Protected system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) and their associated file system ACLs on all Windows hosts.
  range: last 90 days
  queries:
  - SEARCH file write events (Sysmon 11). JOIN with creating process data (Sysmon 1). WHERE file path is a protected directory AND process IntegrityLevel is 'Medium' or 'Low'. ALERT.
- question: Has a suspicious file write by a low-privilege process been immediately followed by a high-privilege process loading that same file?
  context: This question aims to detect a successful privilege escalation chain by correlating events in a tight time window. The pattern of interest is a low-privilege process creating a file (e.g., a DLL) in a specific location, followed very quickly (e.g., within 60 seconds) by a high-privilege process loading that same file. This time-boxed correlation is a statistically significant indicator of a successful exploit chain in action.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 7 (Image loaded)
  - Sysmon Event ID 1 (Process Creation)
  - NAI: Protected system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) and their associated file system ACLs on all Windows hosts.
  range: last 90 days
  queries:
  - CORRELATE file writes (Sysmon 11) by low-privilege processes with module loads (Sysmon 7) by high-privilege processes. WHERE file path is the same AND time delta is < 60 seconds. ALERT.
- question: Does a process-file interaction graph show a path from a low-privilege user to a SYSTEM-level execution?
  context: This question visualizes and algorithmically detects privilege escalation using a graph database. Nodes in the graph represent users, processes, and files, while edges represent actions like 'writes' or 'loaded_by'. A path that shows a low-privilege user running a low-privilege process, which writes a DLL that is then loaded by a SYSTEM-level process, provides a clear, high-confidence visualization and detection of privilege escalation via hijacking.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 7 (Image loaded)
  - Sysmon Event ID 1 (Process Creation)
  - NAI: Protected system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) and their associated file system ACLs on all Windows hosts.
  range: last 90 days
  queries:
  - SEARCH graph for path: Node(User, Low-Priv) -> Node(Process, Low-Priv) -writes-> Node(File.dll) -loaded_by-> Node(Process, SYSTEM). ALERT on path existence.
- question: Has a highly suspicious parent-child process relationship been observed following a potential hijack event?
  context: Certain parent-child process relationships are extremely rare or impossible during normal operations (e.g., `services.exe` spawning `cmd.exe`). The appearance of such a relationship is a strong indicator of compromise, often as a result of a successful process or service hijack. This question monitors for a predefined list of these anomalous process creations and generates a high-severity alert on any match.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 13 (RegistryValue Set)
  - Zeek conn.log
  - NAI: System-wide process ancestry trees on endpoints and servers; Egress network traffic logs.
  range: last 90 days
  queries:
  - SEARCH process creation events (Sysmon 1). WHERE parent-child pair is on a watchlist of impossible relationships (e.g., parent=lsass.exe, child=cmd.exe). ALERT on match.
- question: Has a statistically rare parent-child process relationship occurred?
  context: This question moves beyond a static list of bad relationships and uses a probabilistic model to detect any anomalous process creation. By baselining all parent-child process relationships across the enterprise, we can calculate the conditional probability of a specific child process being spawned by a specific parent. An event with a very low probability (e.g., in the 0.1st percentile) is a statistical anomaly that warrants investigation.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 13 (RegistryValue Set)
  - Zeek conn.log
  - NAI: System-wide process ancestry trees on endpoints and servers; Egress network traffic logs.
  range: last 90 days
  queries:
  - BASELINE conditional probability P(Child | Parent) for all process creations. SEARCH new process creation events. WHERE P(Child | Parent) is below a low threshold (e.g., 0.1st percentile). ALERT.
- question: Does a clustering algorithm identify a new process creation event as an outlier?
  context: This question uses unsupervised machine learning to find novel execution chains. By clustering process creation events based on features like parent/child names, command-line argument entropy, user context, and subsequent network activity, we can identify normal "clusters" of behavior. Any new event that does not fit into an existing cluster is flagged as an outlier, representing a new execution pattern that could be the result of a hijack and requires investigation.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 13 (RegistryValue Set)
  - Zeek conn.log
  - NAI: System-wide process ancestry trees on endpoints and servers; Egress network traffic logs.
  range: last 90 days
  queries:
  - CLUSTER process creation events using features (parent, child, cmdline entropy, user, network activity). IDENTIFY events that are outliers to existing clusters. ALERT on outliers.
- question: Has a file belonging to a security tool been modified to have a hash that does not match the known-good manifest?
  context: This question aims to detect direct tampering with security products, a common defense evasion technique. A manifest of all file paths and their correct cryptographic hashes for deployed security tools (e.g., EDR agents, AV) is maintained. File integrity monitoring events are checked against this manifest. Any modification to a monitored file that results in a hash mismatch triggers a critical alert, as it indicates a potential attempt to disable or bypass the security control.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - File Integrity Monitoring (FIM) logs
  - NAI: Installation directories of all security products (e.g., `C:\Program Files\Windows Defender`) on all endpoints and servers.
  range: last 90 days
  queries:
  - MAINTAIN manifest of security tool file paths and hashes. MONITOR file events (Sysmon 11, FIM). WHERE file path is in manifest AND new hash does not match manifest. ALERT.
- question: Is there a statistical anomaly in the reported health status of security agents?
  context: This question looks for evidence of widespread security tool tampering at a macro level. A sudden increase in the number of agents reporting as 'disabled' or 'unhealthy' within a specific host group or subnet is a statistical anomaly. Correlating this status change with file modification events on the affected hosts can help determine if the mass disabling is due to a coordinated attack, potentially using a hijacked deployment mechanism.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - File Integrity Monitoring (FIM) logs
  - NAI: Installation directories of all security products (e.g., `C:\Program Files\Windows Defender`) on all endpoints and servers.
  range: last 90 days
  queries:
  - MONITOR security agent health status across the enterprise. DETECT anomalous spikes in 'disabled' or 'unhealthy' agents per host group. CORRELATE with file modification events on those hosts. ALERT.
- question: Does a machine learning model classify a file modification in a security tool directory as a 'tampering' event?
  context: This question uses a classification model to assess the risk of file modifications in security-sensitive directories. The model considers features like the target file path (e.g., is it a critical EDR component?), the process that made the change, and the signature status of the resulting file. It provides a risk score for each event, allowing for more nuanced detection of tampering attempts compared to simple rule-based alerts.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - File Integrity Monitoring (FIM) logs
  - NAI: Installation directories of all security products (e.g., `C:\Program Files\Windows Defender`) on all endpoints and servers.
  range: last 90 days
  queries:
  - PREDICT using a 'tampering' classification model on file modification events. FEATURES: target file path, modifying process, new file signature status. WHERE risk_score > threshold. ALERT.
- question: Has a common system DLL name (e.g., version.dll) been created in a local application directory?
  context: This question detects a classic DLL search order hijacking technique used for defense evasion. Adversaries place a malicious DLL with a generic system name (like `version.dll`) in an application's local directory. Because this directory is often searched before `C:\Windows\System32`, the application will load the malicious DLL instead of the legitimate one. This rule alerts when any of these commonly hijacked DLL names are created outside of their proper system directories.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 7 (Image loaded)
  - NAI: Application installation directories on endpoints, especially for commonly used software with known vulnerabilities like browsers, office suites, and developer tools.
  range: last 90 days
  queries:
  - SEARCH file creation events (Sysmon 11). WHERE filename is on a list of commonly hijacked DLLs AND path is an application directory (not System32). ALERT.
- question: Has a process started loading a DLL from a new, unexpected path, especially if the DLL name is not new?
  context: This question identifies a change in a process's DLL loading behavior, which is a strong statistical indicator of a hijack. By baselining the full paths of all DLLs normally loaded by a process, we can alert when it suddenly loads a DLL from a new location. This is especially suspicious if the DLL has the same name as one it typically loads from a system directory, indicating the DLL search path was likely manipulated.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 7 (Image loaded)
  - NAI: Application installation directories on endpoints, especially for commonly used software with known vulnerabilities like browsers, office suites, and developer tools.
  range: last 90 days
  queries:
  - BASELINE DLL load paths for each major application process. SEARCH for module load events (Sysmon 7). WHERE loaded DLL path is not in the process's baseline. ALERT.
- question: Does an autoencoder model detect an anomaly in an application's 'module load profile'?
  context: This question uses an autoencoder neural network to learn a complex profile of an application's normal DLL loading behavior. This 'profile' is a vector representing the set of all loaded DLLs and their paths. When a process is hijacked and loads a malicious DLL from an abnormal path, its profile will change. The autoencoder will have a high reconstruction error when trying to process this new, anomalous profile, thereby flagging the process for investigation.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - Sysmon Event ID 7 (Image loaded)
  - NAI: Application installation directories on endpoints, especially for commonly used software with known vulnerabilities like browsers, office suites, and developer tools.
  range: last 90 days
  queries:
  - MODEL 'module load profiles' for applications using an autoencoder. FOR each new process instance, calculate the profile's reconstruction error. WHERE error is anomalously high. ALERT.
- question: Has a Microsoft-signed file in a trusted system directory been replaced with an unsigned or untrusted file?
  context: This question looks for evidence of an adversary replacing or patching a legitimate, signed system file with a malicious version. It monitors for file write events in trusted directories like `C:\Windows\System32`. After a write, the new file's digital signature is checked. A critical alert is generated if a file that was previously signed by Microsoft is now unsigned, or if its new signature is from an untrusted or expired publisher.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - File Integrity Monitoring (FIM) logs
  - NAI: Trusted system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) on all Windows hosts.
  range: last 90 days
  queries:
  - MONITOR file write events (Sysmon 11) in System32. ON WRITE, check signature of new file. WHERE previous file was Microsoft-signed AND new file is unsigned or untrusted. ALERT.
- question: Does a host have an unusually high number of system files with mismatched hashes compared to a known-good baseline?
  context: This question uses a periodic, fleet-wide scan to hunt for hosts with modified system files. A known-good hash set for the current OS patch level is maintained. A script hashes all executables in `System32` on each host and compares them to this baseline. A host with a percentage of mismatched hashes in the 99.9th percentile is a significant outlier, suggesting widespread file modification and requiring immediate investigation.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - File Integrity Monitoring (FIM) logs
  - NAI: Trusted system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) on all Windows hosts.
  range: last 90 days
  queries:
  - PERIODICALLY hash all executables in System32 on all hosts. COMPARE hashes to known-good baseline. CALCULATE percentage of mismatched hashes per host. WHERE mismatch percentage is in 99.9th percentile. ALERT.
- question: Does a one-class SVM model classify a file in a system directory as an 'outlier'?
  context: This question uses a one-class SVM, a machine learning algorithm well-suited for anomaly detection, to find modified system files. The model is trained exclusively on the features of legitimate system files (e.g., entropy, PE header details, signature status). When scanning files in system directories, any file that the model classifies as an 'outlier' is a strong candidate for being a malicious binary that an adversary has placed or modified for defense evasion.
  answer_sources:
  - Sysmon Event ID 11 (FileCreate)
  - File Integrity Monitoring (FIM) logs
  - NAI: Trusted system directories (`%SystemRoot%\System32`, `%SystemRoot%\SysWOW64`) on all Windows hosts.
  range: last 90 days
  queries:
  - TRAIN a one-class SVM model on features of legitimate system files. SCAN files in system directories. WHERE model classifies file as 'outlier'. ALERT.
- question: Has a core system process that should never access the network initiated an external network connection?
  context: This question enforces a zero-tolerance policy for network activity from specific, sensitive system processes. Processes like `lsass.exe`, `wininit.exe`, and `csrss.exe` have no legitimate reason to initiate outbound network connections. Any observed external connection from these processes is a critical indicator of compromise, suggesting the process has been injected with malicious code that is now establishing a command and control channel.
  answer_sources:
  - Sysmon Event ID 3 (Network Connection)
  - Zeek conn.log
  - Zeek dns.log
  - NAI: Network egress points (firewalls, proxies), DNS resolvers, and endpoint network stacks.
  range: last 90 days
  queries:
  - SEARCH network connection events (Sysmon 3). WHERE process is on zero-tolerance list (lsass.exe, etc.) AND DestinationIP is external (not RFC1918). ALERT.
- question: Has a trusted networking process (e.g., svchost.exe) exhibited anomalous network behavior?
  context: While some system processes like `svchost.exe` are expected to communicate on the network, their behavior is often predictable. This question uses z-scores to detect statistical outliers in their network activity. By baselining normal behavior, we can alert on anomalies such as `svchost.exe` connecting to a new destination country for the first time, or if the volume of data sent to a new IP address is more than three standard deviations above the historical average for that process.
  answer_sources:
  - Sysmon Event ID 3 (Network Connection)
  - Zeek conn.log
  - Zeek dns.log
  - NAI: Network egress points (firewalls, proxies), DNS resolvers, and endpoint network stacks.
  range: last 90 days
  queries:
  - BASELINE network behavior (destination country, data volume) for trusted processes like svchost.exe. USE z-scores to detect outliers. WHERE z-score > 3 for a new connection's attributes. ALERT.
- question: Does a time-series model detect an anomalous new pattern in a process's network connection rhythm?
  context: This question uses a sophisticated time-series algorithm (like LSTM) to learn the normal 'rhythm' of network connections for a given process, including frequency, duration, and data volume. A hijacked process that establishes a command and control (C2) channel will often create a new, periodic pattern (e.g., beaconing every 60 seconds). The model can detect this new, anomalous rhythm and flag it for investigation, even if the individual connections are not suspicious on their own.
  answer_sources:
  - Sysmon Event ID 3 (Network Connection)
  - Zeek conn.log
  - Zeek dns.log
  - NAI: Network egress points (firewalls, proxies), DNS resolvers, and endpoint network stacks.
  range: last 90 days
  queries:
  - MODEL time-series of network connection patterns (frequency, duration, volume) per process. DETECT anomalous new rhythms or periodic patterns. ALERT on anomaly detection.