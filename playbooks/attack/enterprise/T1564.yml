name: T1564: Hide Artifacts
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is attempting to hide their activity to evade detection. It focuses on identifying the use of specific tools or rootkits to hide artifacts, the manipulation of file attributes and Alternate Data Streams (ADS) using built-in system utilities, the alteration of file timestamps (timestomping) to blend in with system files, the execution of processes from unusual or hidden locations, and the creation of suspiciously named user accounts or scheduled tasks to maintain persistence stealthily.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there process or file creation events that match known artifact-hiding tools or rootkits?
    context: This question seeks to identify the direct execution of malicious tools designed to conceal an adversary's presence. By implementing a SIEM rule to alert on process or file creation events whose names, command lines, or hashes match a curated threat intelligence list, an analyst can quickly detect the use of known bad software like Slacker, Transmo, or various rootkits. A positive match is a strong indicator of a defense evasion attempt.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - All Windows Endpoints, All Windows Servers, Domain Controllers
    range: last 90 days
    queries:
      - symbolic: SEARCH process_creation OR file_creation WHERE (process_name IN (threat_intel_list) OR command_line IN (threat_intel_list) OR file_hash IN (threat_intel_list))
  - question: Are common command-line utilities being spawned by unusual parent processes, or are new processes using names that mimic legitimate system processes?
    context: This question aims to uncover stealthy execution techniques that avoid using overtly malicious process names. Adversaries may use legitimate applications like Microsoft Word to launch cmd.exe. By baselining normal parent-child process relationships, we can flag anomalous executions. Additionally, checking for 'typosquatting' (e.g., svch0st.exe instead of svchost.exe) by calculating the Levenshtein distance helps catch attempts to blend in with normal system activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints, All Windows Servers, Domain Controllers
    range: last 90 days
    queries:
      - statistical: SEARCH process_creation | CALCULATE parent_process_prevalence | FLAG RARE parent_child_pairs (e.g., winword.exe -> cmd.exe) | CALCULATE Levenshtein_distance(process_name, system_processes_list) | FLAG distance < 3
  - question: Can we use a machine learning model to score process creation events for their likelihood of being malicious tool execution based on multiple features?
    context: This question leverages machine learning to create a more robust and nuanced detection than simple rules. By training a classification model on features like process name entropy, command-line characteristics, and parent process rarity, the system can identify complex patterns indicative of malicious activity that might not trigger individual symbolic or statistical rules. This provides a probabilistic score for an analyst to prioritize investigations.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints, All Windows Servers, Domain Controllers
    range: last 90 days
    queries:
      - machine_learning: INPUT process_creation_events | EXTRACT_FEATURES (entropy, arg_length, parent_rarity) | SCORE with trained_classification_model | ALERT on high_score
  - question: Are there any process command-line arguments indicating the use of built-in Windows tools to hide files or create Alternate Data Streams (ADS)?
    context: This question focuses on detecting adversaries 'living off the land' by using legitimate system utilities for malicious purposes. Specific command-line patterns, such as 'attrib.exe +h' to hide files, 'icacls.exe /deny' to block access, or PowerShell commands for manipulating Alternate Data Streams (ADS), are strong indicators of defense evasion. Regular expression searches in SIEM logs can effectively pinpoint this activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints, File Servers, Application Servers
    range: last 90 days
    queries:
      - symbolic: SEARCH process_creation WHERE command_line MATCHES_REGEX ('attrib\\.exe.*\\+h' OR 'icacls\\.exe.*\\/deny' OR 'Set-Content.*-Stream' OR 'type .*>.*:.*')
  - question: Are common system utilities being used with rare or statistically improbable command-line arguments?
    context: This question helps find malicious use of legitimate tools by identifying unusual usage patterns. While a tool like icacls.exe might be used frequently, certain combinations of arguments are rare in normal administrative activity. By baselining common argument sets and alerting on infrequent combinations (e.g., those below the 5th percentile of usage), analysts can focus on potentially malicious behavior that would otherwise be lost in the noise.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints, File Servers, Application Servers
    range: last 90 days
    queries:
      - statistical: SEARCH process_creation (attrib.exe, icacls.exe, powershell.exe) | BASELINE command_line_frequency | ALERT on command_lines with frequency < 5th_percentile
  - question: Can an unsupervised machine learning model identify anomalous command-line structures without prior knowledge of malicious patterns?
    context: This question proposes using anomaly detection to find novel or unknown 'living off the land' techniques. By training a model like an autoencoder or isolation forest on a large corpus of normal command-line arguments, the system learns what 'normal' looks like. When an adversary uses a new or unusual combination of commands and arguments, the model will flag it as an anomaly, enabling detection of zero-day techniques.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints, File Servers, Application Servers
    range: last 90 days
    queries:
      - machine_learning: INPUT command_lines | SCORE with unsupervised_anomaly_model (e.g., autoencoder) | ALERT on high_anomaly_score
  - question: Is there a correlation between the execution of a known timestomping tool and a subsequent file modification event on the same host?
    context: This question addresses 'timestomping,' a technique used to alter file timestamps to make malicious files look like legitimate, older system files. A correlation rule can detect this by linking the execution of a timestomping utility (like a specific PowerShell command) with a file modification event occurring immediately after on the same machine. This temporal link is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows PowerShell Event ID 4104
      - Critical System Directories (e.g., System32), User Profile Directories, Temporary File Locations
    range: last 90 days
    queries:
      - symbolic: CORRELATE process_creation (known_timestomp_tools OR 'Set-ItemProperty -Name CreationTime') WITH file_modification ON host within 5_seconds
  - question: Are file modification events showing timestamps that are inconsistent with the log event's time or that exactly match other system files?
    context: This question provides a statistical method to detect timestomping without relying on known tool names. By analyzing file modification events, we can flag any instance where a file's 'Modified' timestamp is set to a time before the event was logged. Another red flag is when a modified file's new timestamp is an exact clone of a nearby, unrelated system file, which is a common tactic to blend in.
    answer_sources:
      - Windows Event ID 4663
      - Critical System Directories (e.g., System32), User Profile Directories, Temporary File Locations
    range: last 90 days
    queries:
      - statistical: SEARCH file_modification | CALCULATE delta = new_timestamp - event_timestamp | ALERT on delta < 0 | COMPARE new_timestamp with other_files_in_directory | ALERT on exact_match
  - question: Can a time-series model detect anomalies in file metadata, specifically timestamps that move backward or jump illogically?
    context: This question applies time-series analysis to file integrity monitoring data. For any given file, its metadata timestamps should naturally progress forward in time. A time-series model (like ARIMA) can learn this expected behavior. Any modification that causes a timestamp to revert to a past value is a significant deviation from this model and a strong, machine-learned indicator of timestomping.
    answer_sources:
      - Windows Event ID 4663
      - Critical System Directories (e.g., System32), User Profile Directories, Temporary File Locations
    range: last 90 days
    queries:
      - machine_learning: INPUT file_metadata_stream | MODEL timestamp_behavior with time_series_model (e.g., ARIMA) | ALERT on events that break monotonic_time_progression
  - question: Are processes being launched from suspicious or hidden locations and subsequently making outbound network connections to known malicious IPs?
    context: This question correlates internal host behavior with external network activity to identify malware execution. Adversaries often place executables in unusual locations like the Recycle Bin or Alternate Data Streams. A correlation rule can link a process creation event from one of these blacklisted paths with a network connection event to an IP address found on a threat intelligence feed.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows Endpoints, Network Egress Points (Firewalls, Proxies), DNS Servers
    range: last 90 days
    queries:
      - symbolic: CORRELATE process_creation (from path matching '\\Users\\Public\\' OR '\\$Recycle.Bin\\' OR '.*:.*') WITH network_connection (to threat_intel_ip) ON host AND time
  - question: Can we identify high-risk processes by combining multiple statistical risk factors, such as execution path rarity and suspicious network behavior?
    context: A process might not be definitively malicious based on one attribute alone. By combining factors—such as the rarity of its execution path, whether it's unsigned, and whether it connects to a new or non-standard destination IP/port—we can build a more comprehensive risk profile. Processes exceeding a statistical threshold warrant investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows Endpoints, Network Egress Points (Firewalls, Proxies), DNS Servers
    range: last 90 days
    queries:
      - statistical: SEARCH process_creation | SCORE risk based on path_rarity, is_unsigned, destination_port, destination_ip_reputation | ALERT on composite_risk_score > threshold
  - question: Can a graph-based machine learning model identify complex attack chains involving processes, files, and network connections?
    context: This question proposes a sophisticated graph-based approach to see the bigger picture of an attack. By modeling endpoint and network events as an interconnected graph (nodes = processes, files, IPs; edges = interactions), we can use algorithms like Graph Neural Networks (GNNs) to find suspicious subgraphs that reveal entire attack chains.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows Endpoints, Network Egress Points (Firewalls, Proxies), DNS Servers
    range: last 90 days
    queries:
      - machine_learning: BUILD graph from process, file, and network events | APPLY graph_anomaly_detection_algorithm (e.g., GNN) | ALERT on suspicious_subgraphs
  - question: Are new user accounts or scheduled tasks being created with names that closely mimic legitimate system accounts (typosquatting)?
    context: This question targets a common persistence and evasion technique where an adversary creates an account or task with a name that is a slight misspelling of a legitimate one (e.g., 'Administartor'). By calculating the Levenshtein distance between the new name and a list of critical system names, a SIEM rule can automatically flag these low-distance matches.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4698
      - Domain Controllers, Active Directory Servers, All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - symbolic: SEARCH account_creation OR scheduled_task_creation | CALCULATE Levenshtein_distance(new_name, system_account_list) | ALERT on distance < 3
  - question: Are new user accounts or scheduled tasks being created with randomized, high-entropy names?
    context: This question helps detect machine-generated artifacts. Legitimate account and task names usually have low-to-moderate complexity. By calculating the Shannon entropy of new names and comparing it to a baseline of normal names, we can flag those with unusually high entropy (e.g., in the top 5th percentile), which suggests they were not created by a human.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4698
      - Domain Controllers, Active Directory Servers, All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - statistical: SEARCH account_creation OR scheduled_task_creation | CALCULATE Shannon_entropy(new_name) | ALERT on entropy_score > 95th_percentile
  - question: Can a one-class machine learning model be trained to distinguish between legitimate and anomalous account or task names?
    context: This question proposes using a one-class classifier (like a one-class SVM) to build a model of what 'normal' account and task names look like. The model is trained exclusively on known-good names. When a new name is created, the model determines if it fits within this learned 'normal' profile. Any name classified as an outlier is flagged for investigation.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4698
      - Domain Controllers, Active Directory Servers, All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - machine_learning: INPUT new_account_or_task_name | EXTRACT_FEATURES (length, n-grams, entropy) | CLASSIFY with one-class_SVM_model | ALERT if outlier