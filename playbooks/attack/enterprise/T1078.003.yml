name: T1078.003: Local Accounts
id: d2b1a03e-8f9a-4b6c-8d7e-9f0a1b2c3d4e
description: An analytic playbook to detect adversary activity using compromised local accounts (T1078.003). This playbook addresses the full lifecycle of an attack, from initial access to persistence, privilege escalation, and defense evasion. It provides investigative questions to identify various indicators, including successful remote logins from anomalous or malicious sources, brute-force and password spraying attacks, impossible travel scenarios, activation of dormant accounts, creation of new accounts followed by immediate use, execution of malware, creation of persistence mechanisms like scheduled tasks, privilege escalation via exploit tools or UAC bypass, and defense evasion techniques like clearing logs or disabling security services. The playbook leverages event logs, network data, and machine learning models to uncover these activities.
type: technique
related:
- TA0001: Initial Access
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any successful remote logins by local accounts originated from IP addresses known to be malicious?
  context: This question seeks to identify high-confidence compromises by checking if the source IP of a successful remote login (Logon Type 3 for network or 10 for RemoteInteractive) by a local account is listed on a threat intelligence feed. A match indicates that a known malicious actor has successfully authenticated and gained access to the environment.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Perimeter Firewalls
  - VPN Concentrators
  - Public-Facing Application Servers
  - Remote Desktop Gateway Servers
  - Cloud IAM Services
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH successful remote logins (EventID 4624, LogonType 3 or 10)
      FOR each login:
        GET source_ip
        IF source_ip IN threat_intelligence_feed:
          ALERT "Successful login from known malicious IP"
- question: Are local accounts being accessed remotely from geographically rare or anomalous locations?
  context: This question aims to detect unusual access patterns by baselining the normal geographic origins (countries and ASNs) for each local account's remote logins over 90 days. A login from a location that is statistically rare (e.g., in the bottom 1% of historical frequency) for that specific account could indicate a compromised credential being used by an attacker in an unfamiliar location.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Perimeter Firewalls
  - VPN Concentrators
  - Public-Facing Application Servers
  - Remote Desktop Gateway Servers
  - Cloud IAM Services
  - GeoIP Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each local_account:
        BASELINE historical source countries/ASNs over 90 days
      FOR each new remote login:
        GET source_country, source_asn
        CALCULATE historical frequency of country/asn for this account
        IF frequency < 1st percentile:
          ALERT "Anomalous geographic login"
- question: Can machine learning models identify high-risk remote logins by local accounts based on contextual features?
  context: This question leverages a machine learning approach (a random forest classifier) to score the risk of each remote login. By analyzing a combination of features like time of day, source location, and threat intelligence data, the model can identify complex patterns indicative of malicious behavior that might be missed by simpler rules, providing a probabilistic risk score for each login.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Perimeter Firewalls
  - VPN Concentrators
  - Public-Facing Application Servers
  - Remote Desktop Gateway Servers
  - Cloud IAM Services
  - GeoIP Database
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN random forest model on historical login data (features: time, day, country, ASN, threat_intel_hit)
      FOR each new remote login:
        EXTRACT features
        PREDICT probability_score = model.predict(features)
        IF probability_score > 0.85:
          ALERT "High-risk login detected by ML model"
- question: Has a successful brute-force attack against common local accounts occurred from a single source IP?
  context: This question looks for a classic brute-force attack pattern: a high volume of failed login attempts from a single IP address targeting common accounts ('admin', 'guest', etc.) that culminates in a successful login. Detecting this sequence within a short time window (5 minutes) provides a high-fidelity alert for a compromised account.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Authentication Servers
  - Public-Facing Web Servers
  - Domain Controllers
  - Bastion Hosts
  range: last 5 minutes
  queries:
  - technology: pseudocode
    query: |
      WATCH source_ip over 5-minute window
      COUNT failed logins (EventID 4625) for common accounts > 20
      IF followed by successful login (EventID 4624) from same source_ip:
        ALERT "Successful brute-force attack detected"
- question: Can we distinguish between brute-force and password spraying attacks based on login failure patterns?
  context: This question aims to differentiate two common attack methods by analyzing the ratio of unique targeted accounts to total failed logins from a single IP. A low ratio (many failures, few accounts) signifies a brute-force attack. A high ratio (many accounts, few failures each) signifies a password spraying attack. Alerting on either pattern when it leads to a success helps identify the specific technique used.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Authentication Servers
  - Public-Facing Web Servers
  - Domain Controllers
  - Bastion Hosts
  range: last 10 minutes
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip in a 10-minute window:
        CALCULATE ratio = unique_accounts_failed / total_failures
        IF (ratio < 0.2 AND total_failures > 50) OR (ratio > 0.9):
          IF followed by successful login (EventID 4624) from same source_ip:
            ALERT "Brute-force or Password Spray attack succeeded"
- question: Is there evidence of a coordinated, low-and-slow login attack from multiple distributed IP addresses?
  context: This question uses clustering analysis (DBSCAN) to uncover distributed attacks that would evade simple single-IP threshold rules. By grouping login attempts based on features like target username and time between attempts, this method can identify a coordinated campaign originating from many different IPs, revealing a more sophisticated 'low-and-slow' attack.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4625
  - Authentication Servers
  - Public-Facing Web Servers
  - Domain Controllers
  - Bastion Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GATHER login attempt data (EventIDs 4624, 4625)
      APPLY DBSCAN clustering on features (source_ip, target_user, time_delta)
      ANALYZE clusters for coordinated attack patterns
      IF malicious cluster is found:
        ALERT "Distributed low-and-slow attack detected"
- question: Has a local account logged in from two locations that are physically impossible to travel between in the elapsed time?
  context: This question tries to identify 'Impossible Travel' scenarios. By calculating the required travel speed between the geographic locations of two consecutive successful logins for the same account, we can flag activity that exceeds physically possible speeds (e.g., 600 mph), which strongly indicates that the account credentials have been compromised and are being used from multiple locations.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Concentrators
  - Remote Desktop Gateways
  - Cloud IAM Services
  - Geolocation Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each successful remote login:
        GET current_location, current_time
        GET previous_location, previous_time for same user
        CALCULATE required_speed = distance(current, previous) / time_delta
        IF required_speed > 600 mph:
          ALERT "Impossible Travel detected"
- question: Has a local account logged in from a location that is anomalous compared to its historical geographic behavior?
  context: This question identifies geographic anomalies even when an impossible travel rule is not triggered. It uses a Gaussian Mixture Model (GMM) to learn an account's normal clusters of login locations (e.g., office, home). A new login from a location that falls outside these typical clusters is flagged as a potential compromise, indicating access from an unexpected place.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Concentrators
  - Remote Desktop Gateways
  - Cloud IAM Services
  - Geolocation Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each local account:
        TRAIN GMM on historical login geolocations
      FOR each new login:
        CALCULATE probability_density under the account's GMM
        IF probability_density is in bottom 1%:
          ALERT "Geographic anomaly detected"
- question: Does a local account's login sequence deviate from its established pattern of life?
  context: This question uses a Long Short-Term Memory (LSTM) autoencoder to model the sequence of a user's logins (time and location). This advanced method learns the user's routine and travel patterns. A new login that causes a high reconstruction error from the model indicates a significant break from the user's normal 'pattern of life' and is flagged as a sophisticated anomaly.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Concentrators
  - Remote Desktop Gateways
  - Cloud IAM Services
  - Geolocation Database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user:
        TRAIN LSTM autoencoder on login sequence (timestamp, lat, lon)
      FOR each new login event:
        CALCULATE reconstruction_error from the model
        IF reconstruction_error is high:
          ALERT "Pattern of life anomaly detected"
- question: Is there evidence of a password spraying attack against local accounts from a single source?
  context: This question looks for the specific signature of a password spraying attack: a single source IP attempting a small number of logins (1-3) against a large number of different local accounts. This 'low and slow' approach per account is designed to avoid lockouts, so detecting the one-to-many relationship of source IP to target accounts is key.
  answer_sources:
  - Windows Event ID 4625
  - Domain Controllers
  - ADFS Servers
  - Member Servers with remote access capabilities
  - Public-facing applications
  range: last 15 minutes
  queries:
  - technology: pseudocode
    query: |
      AGGREGATE failed logins (EventID 4625) by source_ip over 15 mins
      IF unique_target_accounts > 20 AND failures_per_account BETWEEN 1 AND 3:
        ALERT "Password Spraying Attack detected"
- question: Can we statistically identify password spraying activity?
  context: This question provides a statistical method to identify password spraying. The key indicator is a ratio of unique targeted accounts to total login failures that approaches 1.0. This means nearly every failed login attempt was against a new account, which is the classic behavior of trying one password against a long list of users.
  answer_sources:
  - Windows Event ID 4625
  - Domain Controllers
  - ADFS Servers
  - Member Servers with remote access capabilities
  - Public-facing applications
  range: last 10 minutes
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip in a 10-minute window:
        CALCULATE ratio = unique_target_accounts / total_failures
        IF ratio > 0.9 AND unique_target_accounts > 10:
          ALERT "Statistical indication of Password Spraying"
- question: Is there evidence of a distributed password spraying attack from multiple source IPs?
  context: This question addresses sophisticated attacks where password spraying is distributed across many source IPs to avoid single-source detection thresholds. By using clustering algorithms (K-Means or DBSCAN) on features like target patterns and time of day, we can group these disparate IPs together and identify them as part of a single, coordinated campaign.
  answer_sources:
  - Windows Event ID 4625
  - Domain Controllers
  - ADFS Servers
  - Member Servers with remote access capabilities
  - Public-facing applications
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLUSTER source_ips based on login failure patterns (total_failures, unique_targets, time_of_day, ASN)
      IDENTIFY clusters representing distributed password spraying
      IF malicious cluster is found:
        ALERT "Distributed Password Spraying attack detected"
- question: Has a newly created local account been used for a remote login shortly after its creation?
  context: This question aims to detect a common adversary tactic: create a new account for persistence or access, then immediately use it. Correlating an account creation event (4720) with a successful remote login (4624) for that same account from an external IP within a short window (one hour) is a high-fidelity indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4624
  - Domain Controllers
  - Critical Servers
  - Bastion Hosts
  - Member Servers
  range: last 60 minutes
  queries:
  - technology: pseudocode
    query: |
      ON new account creation (EventID 4720):
        WATCH for successful remote login (EventID 4624, LogonType 3 or 10) for same username within 1 hour
        IF login is from external_ip:
          ALERT "Newly created account used for immediate remote access"
- question: Is there an anomalous spike in the rate of new local account creations?
  context: This question provides a broader, environmental view. Instead of tracking a single account, it monitors the overall rate of local account creation. A sudden spike above a statistical baseline (e.g., the 95th percentile), especially if those new accounts are then used for remote access, can indicate a scripted or automated attack creating multiple accounts at once.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4624
  - Domain Controllers
  - Critical Servers
  - Bastion Hosts
  - Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR hourly rate of new local account creations (EventID 4720)
      ESTABLISH 95th percentile baseline
      IF current_rate > baseline:
        CORRELATE with subsequent remote logins from those new accounts
        ALERT "Anomalous spike in local account creation"
- question: Can we detect the "create and use" account pattern using sequence mining?
  context: This question applies a more advanced data science technique, sequence pattern mining, to security event logs. This method can automatically discover frequently occurring event sequences. If the specific pattern of `(Event 4720 -> Event 4624 from external IP)` suddenly becomes more frequent than its historical norm, it suggests an adversary may be repeatedly using this tactic.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4624
  - Domain Controllers
  - Critical Servers
  - Bastion Hosts
  - Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY sequence pattern mining (e.g., GSP) to event logs
      CALCULATE frequency (support) of the sequence (Event 4720 -> Event 4624 from external IP)
      IF frequency is anomalously high:
        ALERT "Anomalous frequency of 'create and use' account pattern"
- question: Is a process running under a local account communicating with a known malicious destination or is it known malware?
  context: This question checks for straightforward indicators of compromise. It verifies if any process running under a local account is either a known piece of malware (by matching its hash) or is communicating with a known command-and-control (C2) server (by matching its destination IP/domain against a threat feed). A match is a strong sign of a breach.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  - Malware Hash Database
  - C2 Threat Intelligence Feed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process (EventID 4688) running as a local account:
        GET process_hash, destination_ip, destination_domain
        IF process_hash IN malware_db OR destination_ip/domain IN c2_feed:
          ALERT "Malware or C2 communication detected for local account process"
- question: Is a local account running rare or unauthorized software that connects to the internet?
  context: This question helps identify potentially malicious or unauthorized software that isn't yet in a threat database. By calculating the prevalence of a file hash across the enterprise, any executable run by a local account that is extremely rare (e.g., seen on fewer than 5 hosts) and makes external network connections is flagged as a statistical anomaly worthy of investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - All Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each executable run by a local account with external connections:
        GET file_hash
        CALCULATE enterprise-wide prevalence of file_hash
        IF prevalence < 0.1% (or < 5 hosts):
          ALERT "Rare process with external network connection detected"
- question: Is a process run by a local account making DNS queries for algorithmically generated domains (DGAs)?
  context: This question seeks to identify a common malware technique for C2 communication. Domain Generation Algorithms (DGAs) create a large number of pseudo-random domain names for the malware to try. By analyzing the characteristics (entropy, length, character ratios) of DNS queries made by processes under local accounts, we can detect and flag likely DGA activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek dns.log
  - All Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each DNS query from a local account process:
        ANALYZE domain name for DGA characteristics (entropy, n-grams, etc.)
        IF DGA_score > threshold:
          ALERT "Potential DGA activity detected"
- question: Has a local account created a scheduled task with a suspicious command line?
  context: This question targets a common persistence mechanism. It monitors for the creation of scheduled tasks by local accounts and inspects the command line for signs of malicious intent, such as the use of obfuscation (`powershell -enc`), living-off-the-land binaries (`mshta.exe http://`), or execution from unusual directories like `%TEMP%` or `C:\Users\Public`.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR scheduled task creation (EventID 4698, 4702) by local accounts
      APPLY regex to command line for suspicious patterns (e.g., 'powershell -enc', 'mshta.exe', execution from '%TEMP%')
      IF pattern matches:
        ALERT "Suspicious scheduled task created"
- question: Has a local account created a scheduled task with an obfuscated command line?
  context: This question provides a way to detect obfuscated commands without relying on specific patterns. By calculating the character entropy of the command line in a newly created scheduled task, we can identify commands that are likely encoded or encrypted. A high entropy score compared to a baseline of normal tasks is a strong indicator of obfuscation.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new scheduled task:
        CALCULATE entropy of command-line argument
        ESTABLISH baseline entropy from legitimate tasks
        IF entropy > 3 standard deviations above the mean:
          ALERT "High entropy scheduled task command detected"
- question: Can a machine learning model classify a new scheduled task's command line as malicious?
  context: This question applies a text classification model to proactively identify malicious scheduled tasks. By training a model on a large, labeled dataset of both benign and malicious command lines, the system can score any new task command created by a local account and alert when it is classified as malicious with high confidence, catching novel threats.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN text classification model on labeled command-line data
      FOR each new scheduled task command:
        PREDICT malicious_score = model.predict(command)
        IF malicious_score > confidence_threshold:
          ALERT "ML model classified scheduled task as malicious"
- question: Has a dormant local account (inactive for >90 days) suddenly started being used for remote logins?
  context: This question targets the misuse of old, forgotten accounts. Adversaries often seek out dormant accounts because their activity is less likely to be noticed. This query specifically maintains a list of accounts that have not logged in for over 90 days and generates a high-severity alert if one of them is suddenly used for a remote login.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers
  - VPN Logs
  - Server Authentication Logs
  - Active Directory User Objects
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN list of 'dormant' accounts (LastLogon > 90 days)
      ON successful remote login (EventID 4624, LogonType 3 or 10):
        IF user IN dormant_list:
          ALERT "Dormant account used for remote login"
- question: Is a newly-active dormant account exhibiting machine-like C2 beaconing behavior?
  context: This question helps determine if a reactivated dormant account is being used by an automated tool rather than a human. By analyzing the time intervals between logins, we can detect the regular, periodic cadence typical of a C2 beacon. A very low standard deviation in these time intervals (low 'jitter') suggests machine-generated activity.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers
  - VPN Logs
  - Server Authentication Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR newly-active dormant account:
        CALCULATE standard deviation of time between remote logins
        IF std_dev is very low:
          ALERT "Anomalous login cadence (beaconing) detected for dormant account"
- question: Does the reactivation of a dormant account represent a massive deviation from its forecasted activity?
  context: This question uses time-series forecasting to detect dormant account usage as a major anomaly. For any account, a model (like Prophet or LSTM) can be used to predict its future login activity. For a dormant account, the model will predict zero activity. Therefore, any actual login will create a massive deviation from the forecast, flagging it as a high-risk event.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers
  - VPN Logs
  - Server Authentication Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each account, model login history as a time series and forecast future activity
      FOR each new login:
        IF user was dormant AND login is a major deviation from forecast (which was zero):
          ALERT "Dormant account login is a high-risk time-series anomaly"
- question: Has a local account been added to a privileged local group like 'Administrators'?
  context: This question looks for a direct and high-impact persistence and privilege escalation technique. The addition of any account to a highly privileged local group (e.g., Administrators, Remote Desktop Users) is a critical security event that needs immediate attention. This query generates an instant alert for such an event (Windows Event ID 4732).
  answer_sources:
  - Windows Event ID 4732
  - Domain Controllers
  - Member Servers
  - Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON event (EventID 4732):
        IF 'Group Name' is in ('Administrators', 'Remote Desktop Users', etc.):
          ALERT "Member added to a privileged local group"
- question: Is an administrative user adding local accounts to privileged groups at an anomalous rate?
  context: This question looks for compromised administrator accounts being used to escalate the privileges of other local accounts. By baselining the normal group-modification behavior for each admin, a sudden increase in the rate at which they add members to privileged groups can be detected as an anomaly, suggesting their account may be misused.
  answer_sources:
  - Windows Event ID 4732
  - Domain Controllers
  - Member Servers
  - Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each admin user, baseline weekly rate of adding members to privileged groups
      IF an admin's activity exceeds the 95th percentile of their normal behavior:
        ALERT "Anomalous rate of privileged group additions by administrator"
- question: Has an improbable change occurred in the user-group membership graph?
  context: This question uses a graph-based approach to detect anomalous privilege changes. The relationships between users and groups are modeled as a graph network. An anomaly detection algorithm (e.g., using a Graph Neural Network) can learn normal patterns of group membership changes and flag improbable events, such as a low-privilege account suddenly being linked to a high-privilege group.
  answer_sources:
  - Windows Event ID 4732
  - Domain Controllers
  - Member Servers
  - Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL users and groups as a graph network
      USE GNN-based anomaly detection to learn probable edge creations
      IF a new membership (edge) has a very low learned probability:
        ALERT "Improbable user-to-group membership change detected"
- question: Has a non-administrative local account executed a known privilege escalation tool?
  context: This question seeks to detect the active use of privilege escalation exploits. It monitors for process creation events initiated by standard (non-admin) local accounts and checks the file hash of the executed program against a database of known exploit tools (like JuicyPotatoNG, BadPotato, etc.). A match provides a critical alert for an active escalation attempt.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  - Threat Intelligence Feed of Exploit Hashes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process creation (EventID 4688) by a non-admin local account:
        GET process_hash
        IF process_hash IN known_privesc_tool_hashes:
          ALERT "Known privilege escalation tool executed"
- question: Has an unusual parent-child process relationship, indicative of an exploit, been observed?
  context: This question identifies privilege escalation attempts by looking for anomalous process lineage. Certain exploits cause legitimate system processes to spawn shells. A rare parent-child relationship, such as the Print Spooler (`spoolsv.exe`) spawning a command prompt (`cmd.exe`) under a local account's context, is a strong statistical indicator of exploit activity.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      PROFILE legitimate parent-child process relationships across the enterprise
      FOR each new process creation:
        GET parent_process, child_process
        IF relationship is statistically rare (e.g., spoolsv.exe -> cmd.exe):
          ALERT "Anomalous parent-child process relationship detected"
- question: Can a machine learning model detect privilege escalation attempts based on process event features?
  context: This question leverages a supervised machine learning model (like XGBoost) to identify privilege escalation attempts that might use unknown or novel tools. By training on features from known benign and malicious process events (process name, parent, user, command line), the model can learn to classify new events, flagging suspicious activity that shares characteristics with known exploits.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN XGBoost model on labeled process creation event features
      FOR each new process creation event:
        PREDICT is_privesc = model.predict(event_features)
        IF is_privesc is TRUE:
          ALERT "ML model detected potential privilege escalation"
- question: Has a non-administrative local account performed a known UAC bypass sequence?
  context: This question looks for a specific, multi-step technique used to bypass User Account Control (UAC). It uses a complex event processing rule to detect the exact sequence of a registry key modification to a known UAC bypass path, immediately followed by the execution of a specific auto-elevating binary (like `fodhelper.exe`) by the same process.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - Windows Workstations and Servers
  range: last 2 seconds
  queries:
  - technology: pseudocode
    query: |
      DETECT sequence:
      1. Registry modify (Sysmon EID 13) to 'HKCU:\Software\Classes\ms-settings\shell\open\command'
      2. Followed within 2s by Process create (EID 4688) of 'fodhelper.exe' by same PID
      IF sequence detected:
        ALERT "UAC Bypass sequence detected"
- question: Has a registry key associated with UAC bypass been modified by a standard user process?
  context: This question provides a simpler, but still effective, way to detect potential UAC bypass attempts. It monitors a list of registry keys known to be used in various UAC bypass techniques. Since these keys are rarely touched during normal operations, any modification by a process running as a standard local user is a statistical anomaly and warrants an alert.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Workstations and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR modifications to known UAC bypass registry keys
      IF modification is performed by a standard (non-admin) user process:
        ALERT "Anomalous modification of UAC bypass registry key"
- question: Has a rare sequence of events indicative of UAC bypass occurred?
  context: This question uses sequence pattern mining to discover UAC bypass activity without relying on pre-defined rules. By analyzing streams of process, registry, and file system events, the algorithm can flag event sequences that are historically rare but contain the building blocks of a UAC bypass (e.g., a registry write to HKCU followed by a LOLBin execution).
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 13
  - Windows Workstations and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      USE sequence pattern mining on process, registry, and file events
      FLAG event sequences with very low historical probability that contain known UAC bypass components
      IF such a sequence is flagged:
        ALERT "Anomalous event sequence indicative of UAC bypass"
- question: Has a local account added itself to the local Administrators group?
  context: This question looks for a clear case of self-privilege escalation. It generates a critical alert if a Windows Event ID 4732 is logged where the account performing the action ('Subject') is the same as the account being added ('Member') to the 'Administrators' group. This is an unambiguous indicator of successful privilege escalation.
  answer_sources:
  - Windows Event ID 4732
  - Domain Controllers
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON event (EventID 4732):
        IF 'Group Name' is 'Administrators' AND 'Subject SID' == 'Member SID':
          ALERT "Self-elevation to Administrators group detected"
- question: Is a user performing privileged group additions that are anomalous compared to their peers?
  context: This question uses peer group analysis to spot compromised accounts. When a local account is added to an admin group, the activity of the user who performed the action is compared to their peers (e.g., other non-admins). If this user is the only one in their peer group performing such a privileged action, it is a statistical outlier that warrants investigation.
  answer_sources:
  - Windows Event ID 4732
  - Domain Controllers
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON privileged group addition:
        GET the 'Subject' user who performed the action
        COMPARE this user's actions to their peer group
        IF this action is a statistical outlier for that peer group:
          ALERT "Anomalous privileged action compared to user's peers"
- question: Has a machine learning model detected an improbable user-to-group membership change?
  context: This question applies a graph-based machine learning model to detect anomalous privilege escalation. By learning the probabilities of which users are likely to add members to which groups, the model can flag an edge-creation event (a user adding another to a group) that has a very low learned probability, such as a local service account adding itself to 'Administrators'.
  answer_sources:
  - Windows Event ID 4732
  - Domain Controllers
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL user-group permissions as a graph and learn edge creation probabilities
      ON new group addition (EventID 4732):
        CALCULATE probability of this event based on the model
        IF probability is very low:
          ALERT "ML model detected improbable privilege escalation event"
- question: Has a local account attempted to clear event logs or disable security services?
  context: This question looks for direct evidence of defense evasion. It generates immediate alerts for the log clearing event (Event ID 1102) and uses regular expressions on process command lines to detect the use of utilities like `wevtutil.exe`, `sc.exe`, or `netsh.exe` to clear logs, stop security services, or disable the host firewall.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1102
  - All Windows Hosts
  - Security Log Aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ALERT on EventID 1102 ('The audit log was cleared')
      ALERT on command line matching regex for:
        - 'wevtutil.exe cl'
        - 'sc.exe stop/delete <security_service>'
        - 'netsh.exe advfirewall set allprofiles state off'
- question: Has a critical security process been terminated by a non-standard process?
  context: This question detects the termination of security software (like antivirus or EDR agents). A process termination event for a critical security agent is a major red flag. This query flags such terminations and checks if the action was performed by a trusted installer; if not, it's considered a statistical anomaly and likely malicious.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR for termination of critical security processes (e.g., MsMpEng.exe, Sysmon64.exe)
      GET terminating process
      IF terminating process is NOT a trusted installer/updater:
        ALERT "Critical security process terminated by unauthorized process"
- question: Can we classify the intent of a command line executed by a local account as malicious?
  context: This question uses a pre-trained Natural Language Processing (NLP) model to understand the purpose of a command executed by a local account. By classifying the 'intent' of the command, it can flag actions whose purpose is to 'Disable Security Control' or 'Clear Logs', providing a more intelligent way to detect defense evasion beyond simple keyword matching.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each command line from a local account process:
        CLASSIFY intent using NLP model (e.g., BERT)
        IF intent is 'Disable Security Control', 'Clear Logs', or 'Tamper':
          ALERT "Command with malicious intent detected"
- question: Has a local account used a Living-off-the-Land Binary (LOLBin) in a known malicious way?
  context: This question detects the abuse of legitimate Windows binaries (LOLBins) for malicious purposes. It uses a library of regular expressions to check command-line arguments for patterns known to be used by attackers, such as using `certutil.exe` to download files or `rundll32.exe` to execute malicious scripts.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY regex library for known malicious LOLBin usage to command lines (EventID 4688)
      e.g., 'certutil.exe -urlcache -f http://...'
      e.g., 'rundll32.exe javascript:...'
      IF pattern matches:
        ALERT "Known malicious LOLBin usage detected"
- question: Has a local account executed a LOLBin in a statistically anomalous manner?
  context: This question detects novel or unusual abuse of LOLBins. For each common LOLBin, it establishes a behavioral baseline (normal parent processes, command-line structure, etc.). It then alerts when a local account executes that LOLBin in a way that significantly deviates from the established norm, flagging it as a potential zero-day or unknown technique.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each LOLBin, create a baseline of normal execution behavior
      FOR each new execution by a local account:
        IF execution deviates > 3 standard deviations from baseline:
          ALERT "Anomalous execution of LOLBin detected"
- question: Has a machine learning model identified a LOLBin execution as anomalous?
  context: This question uses a One-Class Support Vector Machine (OC-SVM), an anomaly detection model, to find malicious LOLBin usage. The model is trained exclusively on benign execution data to create a tight boundary of 'normal' behavior. Any new execution by a local account that falls outside this boundary is flagged as a novel and potentially malicious anomaly.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN One-Class SVM model on features from millions of benign LOLBin executions
      FOR each new execution by a local account:
        IF model classifies event as an outlier (outside the normal boundary):
          ALERT "ML model detected anomalous LOLBin execution"
- question: Has a non-browser process run by a local account made a direct-to-IP network connection?
  context: This question identifies suspicious network behavior often used to evade DNS-based security controls. It checks for processes that are not on an allow-list of web browsers or updaters and make an external network connection to an IP address without a preceding DNS query for that IP, which is a strong indicator of hardcoded C2 communication.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - DNS Resolvers
  - All Endpoints
  range: last 1 hour
  queries:
  - technology: pseudocode
    query: |
      FOR each external connection from a non-allowlisted process:
        CHECK for preceding DNS query for the destination IP in the last hour
        IF no DNS query found:
          ALERT "Direct-to-IP connection from non-browser process detected"
- question: Is a process run by a local account exfiltrating an anomalously large amount of data?
  context: This question aims to detect data exfiltration. For every process name, it creates a historical baseline of the typical amount of data sent per hour. If a process running under a local account suddenly sends an amount of data that far exceeds its normal behavior (e.g., above the 99th percentile), it is flagged as potential data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Network Egress Points
  - All Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process name, baseline hourly outbound data volume (orig_bytes)
      FOR each hour:
        IF data sent by a process > 99th percentile of its historical baseline:
          ALERT "Anomalous data exfiltration volume detected for process"
- question: Is there an unexplained spike in a host's outbound network traffic correlated with local account activity?
  context: This question uses time-series forecasting to detect C2 beaconing or exfiltration at the host level. It models a host's normal outbound traffic volume and forecasts the expected volume for the next hour. A significant, unexplained spike in actual traffic compared to the forecast, when correlated with recent process activity from a local account, can reveal malicious network activity.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Network Egress Points
  - All Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host, forecast expected outbound traffic volume for the next hour
      IF actual_traffic >> forecasted_traffic:
        CORRELATE with recent local account process activity on that host
        ALERT "Anomalous host network egress detected"