name: T1078.003: Local Accounts
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook investigates the malicious use of local accounts, a common vector for adversaries. It covers detecting initial access through compromised credentials (evidenced by logins from anomalous locations, brute-force/password spraying patterns, or impossible travel scenarios), persistence mechanisms (such as malware execution, creation of scheduled tasks, or reactivation of dormant accounts), privilege escalation (using known exploits or UAC bypasses), and defense evasion (disabling security tools or clearing logs). The goal is to identify and respond to unauthorized local account activity across various stages of an attack.
type: technique
related:
  - TA0001: Initial Access
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there successful remote logins from IP addresses listed on threat intelligence feeds?
    context: Adversaries often leverage infrastructure that is known to be malicious. Correlating successful remote logins by local accounts with high-confidence threat intelligence feeds is a high-fidelity method for detecting the use of compromised credentials from attacker-controlled systems.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Perimeter Firewalls
      - VPN Concentrators
      - Public-Facing Application Servers
      - Remote Desktop Gateway Servers
      - Cloud IAM Services
    range: last 90 days
    queries:
      - pseudocode: SEARCH remote logins (WinEvent 4624, Logon Type 3/10) | JOIN with network logs (Zeek conn.log) by timestamp/IP | LOOKUP source_ip against threat_intel_feed | ALERT on match
  - question: Have any local accounts logged in remotely from a geographically rare location?
    context: Legitimate users typically log in from a predictable set of geographic locations. A remote login from a country or network (ASN) that is statistically rare for a specific user account is a strong indicator that the account may be compromised. This method helps detect anomalies even when the source IP is not on a known threat list.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Perimeter Firewalls
      - VPN Concentrators
      - Public-Facing Application Servers
      - Remote Desktop Gateway Servers
      - Cloud IAM Services
    range: last 90 days
    queries:
      - pseudocode: FOR each local_account | BASELINE source_country/ASN over 90 days | FOR each new remote_login | CALCULATE historical frequency of source_country/ASN | ALERT if frequency < 1st percentile
  - question: Can machine learning models identify anomalous remote logins based on contextual features?
    context: Sophisticated attackers may use techniques that evade simple rule-based detection. A machine learning model, such as a random forest classifier, can analyze multiple features of a login event (time, day, source location, IP reputation) simultaneously to identify complex patterns indicative of malicious behavior that would be difficult for a human to define.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Perimeter Firewalls
      - VPN Concentrators
      - Public-Facing Application Servers
      - Remote Desktop Gateway Servers
      - Cloud IAM Services
    range: last 90 days
    queries:
      - pseudocode: INPUT login data (Event 4624 + GeoIP/ASN/ThreatIntel) | APPLY trained random forest model | PREDICT probability of maliciousness | ALERT if score > threshold (e.g., 0.85)
  - question: Has a brute-force attack from a single source IP resulted in a successful login?
    context: A classic brute-force attack involves an attacker making numerous failed login attempts from a single IP address before eventually guessing the correct password. Detecting a high volume of failures (Event ID 4625) followed immediately by a success (Event ID 4624) from the same source is a clear indicator of a successful brute-force compromise.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Authentication Servers
      - Public-Facing Web Servers
      - Domain Controllers
      - Bastion Hosts
    range: last 90 days
    queries:
      - pseudocode: STATEFUL_RULE: For each source_ip | COUNT failed logins (Event 4625) in 5 mins | IF count > 20 AND is followed by success (Event 4624) from same IP | ALERT 'Brute-Force Success'
  - question: Is there evidence of password spraying or targeted brute-force attacks based on the ratio of failed logins to unique accounts?
    context: Attackers use different password guessing strategies. Brute-force attacks target one account with many passwords (low ratio of unique accounts to failures), while password spraying targets many accounts with one password (high ratio). This query differentiates between these two attack types to provide more specific insight into adversary TTPs.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Authentication Servers
      - Public-Facing Web Servers
      - Domain Controllers
      - Bastion Hosts
    range: last 90 days
    queries:
      - pseudocode: SLIDING_WINDOW 10 mins by source_ip | CALCULATE ratio = unique_failed_accounts / total_failed_logins | IF ratio is low (<0.2) AND total > 50 -> Brute-Force | IF ratio is high (>0.9) -> Password Spray | ALERT if followed by success
  - question: Can login attempts from multiple, disparate IP addresses be clustered to reveal a coordinated, low-and-slow attack?
    context: To evade simple volumetric thresholds, adversaries may distribute a brute-force or password spraying attack across many different IP addresses over a longer period (low-and-slow). Clustering algorithms like DBSCAN can group these seemingly unrelated events together based on shared features (like target account or timing patterns), revealing the coordinated campaign.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Authentication Servers
      - Public-Facing Web Servers
      - Domain Controllers
      - Bastion Hosts
    range: last 90 days
    queries:
      - pseudocode: INPUT login events (4624, 4625) | APPLY DBSCAN clustering on features (source_ip, target_user, time_delta) | ANALYZE clusters for coordinated attack patterns
  - question: Has a local account logged in from two locations in a time frame that would require physically impossible travel?
    context: A high-fidelity indicator of account compromise is when a single account appears to be in two places at once. By calculating the required speed to travel between the geolocations of two consecutive logins, we can flag events that are physically impossible, strongly suggesting that at least one of the logins was made by an unauthorized party.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - VPN Concentrators
      - Remote Desktop Gateways
      - Cloud IAM Services
      - Geolocation Database
    range: last 90 days
    queries:
      - pseudocode: FOR each successful remote_login | GET current_location and current_time | GET previous_location and previous_time for same user | CALCULATE speed = distance / time | ALERT if speed > 600 mph
  - question: Has a remote login occurred from a location that is anomalous compared to the user's historical clusters of activity?
    context: Even if a login doesn't trigger an impossible travel alert, it can still be geographically anomalous. By modeling a user's normal login locations (e.g., office, home) as clusters, we can detect a new login that falls far outside these established areas of activity, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - VPN Concentrators
      - Remote Desktop Gateways
      - Cloud IAM Services
      - Geolocation Database
    range: last 90 days
    queries:
      - pseudocode: FOR each user | TRAIN GMM on historical login geolocations | FOR each new login | CALCULATE probability density under GMM | ALERT if probability is very low (e.g., bottom 1%)
  - question: Does a new login event deviate significantly from the user's learned sequential pattern of life?
    context: Users often have predictable sequences of activity (e.g., login from home in the morning, office in the afternoon). An LSTM autoencoder can learn these complex temporal and spatial patterns. A new login that the model cannot accurately "reconstruct" indicates a significant break from the user's established pattern of life, flagging it as a potential threat.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - VPN Concentrators
      - Remote Desktop Gateways
      - Cloud IAM Services
      - Geolocation Database
    range: last 90 days
    queries:
      - pseudocode: FOR each user | TRAIN LSTM autoencoder on login sequence (time, lat, lon) | FOR each new login | CALCULATE reconstruction error | ALERT if error is high
  - question: Is a single source IP attempting to log into many different local accounts with a low number of failures per account?
    context: This is the classic signature of a password spraying attack, where an attacker tries a single, common password (like 'Password123') against a large list of usernames. The pattern is distinct: many unique accounts targeted, but only a few (often one) failed attempts per account.
    answer_sources:
      - Windows Event ID 4625
      - Domain Controllers
      - ADFS Servers
      - Member Servers with remote access capabilities
      - Public-facing applications
    range: last 90 days
    queries:
      - pseudocode: AGGREGATE failed logins (Event 4625) by source_ip over 15 mins | IF unique_target_accounts > 20 AND failures_per_account between 1-3 | ALERT 'Password Spraying'
  - question: Does the ratio of unique targeted accounts to total login failures indicate a password spraying attempt?
    context: A mathematical approach to identifying password spraying involves calculating the ratio of unique accounts targeted to the total number of failures. A ratio close to 1.0 (e.g., 100 failures against 98 unique accounts) is a strong statistical indicator of this specific attack technique.
    answer_sources:
      - Windows Event ID 4625
      - Domain Controllers
      - ADFS Servers
      - Member Servers with remote access capabilities
      - Public-facing applications
    range: last 90 days
    queries:
      - pseudocode: AGGREGATE failed logins (Event 4625) by source_ip over 10 mins | CALCULATE ratio = unique_target_accounts / total_failures | IF ratio > 0.9 AND unique_target_accounts > 10 | ALERT 'Password Spraying'
  - question: Can we identify a distributed password spraying attack originating from multiple source IPs?
    context: To avoid single-IP detection thresholds, attackers may distribute a password spraying attack across a botnet or multiple compromised hosts. Unsupervised clustering can group these disparate source IPs together based on similar behavior patterns (e.g., targeting the same block of users, operating at the same time of day), revealing the coordinated nature of the attack.
    answer_sources:
      - Windows Event ID 4625
      - Domain Controllers
      - ADFS Servers
      - Member Servers with remote access capabilities
      - Public-facing applications
    range: last 90 days
    queries:
      - pseudocode: INPUT failed login data | CLUSTER source IPs using K-Means/DBSCAN on features (total_failures, unique_targets, time_of_day, ASN) | ANALYZE clusters for distributed password spray activity
  - question: Was a newly created local account used for a remote login shortly after its creation?
    context: A common adversary tactic is to create a new account for persistence or access and then immediately use it. Correlating an account creation event (4720) with a subsequent remote logon (4624, Logon Type 3 or 10) for that same account within a short time window is a high-fidelity indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4624
      - Domain Controllers
      - Critical Servers
      - Bastion Hosts
      - Member Servers
    range: last 90 days
    queries:
      - pseudocode: CORRELATE Event 4720 (Account Created) with Event 4624 (Successful Logon) within 1 hour | WHERE username is the same AND logon_type is remote (3/10) AND source_ip is external | ALERT on match
  - question: Has there been an anomalous spike in the rate of new local account creations?
    context: While single account creations may be legitimate, a sudden, statistically significant increase in the number of new local accounts being created per hour can indicate that an adversary is using a script to provision multiple backdoors across the environment.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4624
      - Domain Controllers
      - Critical Servers
      - Bastion Hosts
      - Member Servers
    range: last 90 days
    queries:
      - pseudocode: MONITOR rate of new account creations (Event 4720) per hour | BASELINE the hourly rate | ALERT if current rate > 95th percentile of baseline
  - question: Has the specific event sequence of 'account creation followed by remote login' become anomalously frequent?
    context: Sequence pattern mining algorithms can discover common and rare chains of events in logs. While a single instance of `Event 4720 -> Event 4624` is suspicious, if the algorithm detects that this specific sequence is suddenly occurring much more frequently than its historical baseline, it suggests a potential automated or widespread campaign.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4624
      - Domain Controllers
      - Critical Servers
      - Bastion Hosts
      - Member Servers
    range: last 90 days
    queries:
      - pseudocode: APPLY sequence mining (e.g., GSP) to security logs | DISCOVER frequency of sequence (Event 4720 -> Remote Event 4624) | ALERT if frequency becomes anomalously high
  - question: Is a process running as a local account matching known malware or connecting to a C2 server?
    context: A primary goal for an adversary after gaining access is to run their malicious payload. This query checks if any process executed by a local account is either a known piece of malware (by hash) or is communicating with a known command-and-control (C2) server.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Endpoints and Servers
      - DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: JOIN process events (4688) with network logs (Zeek) | ALERT if process_hash in malware_db OR destination_ip in C2_feed
  - question: Are local accounts running executables that are extremely rare in the environment?
    context: Custom malware or tools used by attackers will often have a very low prevalence across an enterprise network. By identifying executable file hashes that have only been seen on a small number of hosts, we can uncover potentially malicious software that isn't yet in signature-based threat feeds.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Endpoints and Servers
      - DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: FOR each executable run by local account | CALCULATE enterprise-wide prevalence of its hash | ALERT if prevalence < 0.1% (or < 5 hosts)
  - question: Are processes run by local accounts making DNS queries for algorithmically generated domains (DGAs)?
    context: To make their C2 infrastructure resilient, adversaries often use Domain Generation Algorithms (DGAs) to create a large number of potential domains for their malware to contact. Detecting DNS queries to domains that have characteristics of being machine-generated (high entropy, odd character patterns) can uncover this C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Endpoints and Servers
      - DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: ANALYZE DNS queries (Zeek dns.log) from local account processes | APPLY DGA detection model (e.g., based on entropy, n-grams) | ALERT on domains classified as DGA
  - question: Have local accounts created persistence mechanisms using obfuscated commands or suspicious execution paths?
    context: Adversaries establish persistence by creating scheduled tasks or registry keys that automatically run their code. This query looks for common red flags in these persistence mechanisms, such as encoded PowerShell commands, execution from unusual directories like C:\Temp, or the use of LOLBins to download payloads.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4688
      - All Windows Hosts, especially Servers and Developer Workstations
    range: last 90 days
    queries:
      - pseudocode: MONITOR task creation (4698/4702) command lines | APPLY regex for 'powershell -enc', 'mshta.exe http', or execution from '%TEMP%', 'C:\\Users\\Public' | ALERT on match
  - question: Are there new scheduled tasks with unusually high command-line entropy, suggesting obfuscation?
    context: To hide their commands from simple keyword-based detection, attackers often use encoding or obfuscation. This results in a command line with high character entropy (randomness). Measuring the entropy of new scheduled task commands and alerting on high-entropy outliers can effectively detect this evasion technique.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4688
      - All Windows Hosts, especially Servers and Developer Workstations
    range: last 90 days
    queries:
      - pseudocode: FOR each new scheduled task | CALCULATE entropy of command-line string | BASELINE entropy of legitimate tasks | ALERT if entropy > 3 standard deviations from mean
  - question: Can a machine learning model classify new scheduled task commands as malicious?
    context: While regex and entropy are effective, a more advanced approach is to train a text classification model on a large dataset of known benign and malicious commands. Such a model can learn the subtle characteristics of malicious commands and identify novel threats that don't match predefined patterns.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4688
      - All Windows Hosts, especially Servers and Developer Workstations
    range: last 90 days
    queries:
      - pseudocode: INPUT new scheduled task command lines | APPLY trained text classification model (e.g., Naive Bayes) | ALERT on commands classified as malicious with high confidence
  - question: Has a local account that has been inactive for over 90 days suddenly been used for a remote login?
    context: Adversaries may compromise and use dormant accounts (e.g., old service or test accounts) to hide their activity, as these accounts are often not monitored. An alert on any remote login from an account that has been inactive for an extended period is a simple but highly effective way to detect this.
    answer_sources:
      - Windows Event ID 4624
      - Domain Controllers
      - VPN Logs
      - Server Authentication Logs
      - Active Directory User Objects
    range: last 90 days
    queries:
      - pseudocode: MAINTAIN list of dormant accounts (LastLogon > 90 days) | MONITOR for remote logins (Event 4624, Type 3/10) | ALERT if logging-in user is on the dormant list
  - question: Does a newly-active dormant account exhibit highly regular, machine-like login intervals?
    context: Automated malware or C2 implants often check in on a strict schedule (e.g., every 60 minutes exactly). This results in login time intervals with very little "jitter" or variation. Analyzing the timing of logins from a newly active dormant account for this machine-like cadence can confirm that the activity is automated and malicious.
    answer_sources:
      - Windows Event ID 4624
      - Domain Controllers
      - VPN Logs
      - Server Authentication Logs
      - Active Directory User Objects
    range: last 90 days
    queries:
      - pseudocode: FOR newly-active dormant account | CALCULATE standard deviation of time between logins | ALERT if standard deviation is very low (e.g., < 10 seconds), indicating 'Anomalous Cadence'
  - question: Does a login from a dormant account represent a significant anomaly according to time-series forecasting models?
    context: For any given account, a time-series model can predict future activity based on past behavior. For a dormant account, the model would predict zero future activity. Therefore, any login at all will appear as a massive deviation from the forecast, providing a robust, mathematical basis for flagging the event as anomalous.
    answer_sources:
      - Windows Event ID 4624
      - Domain Controllers
      - VPN Logs
      - Server Authentication Logs
      - Active Directory User Objects
    range: last 90 days
    queries:
      - pseudocode: FOR each account | MODEL login history as time-series | FORECAST future login windows | ALERT if a login occurs from a dormant account, as it will be a major deviation from the forecast
  - question: Has a local account been added to a privileged group like 'Administrators' or 'Remote Desktop Users'?
    context: Adding a user to a privileged local group is a direct and common method for an adversary to escalate or maintain privileged access. This action is security-critical and should generate an immediate, high-priority alert for investigation, as it provides the account with powerful new capabilities.
    answer_sources:
      - Windows Event ID 4732
      - Domain Controllers
      - Member Servers
      - Workstations
    range: last 90 days
    queries:
      - pseudocode: MONITOR for Event ID 4732 | IF 'Group Name' is 'Administrators', 'Remote Desktop Users', etc. | GENERATE immediate high-severity alert
  - question: Is an administrative user adding local accounts to privileged groups at an anomalous rate compared to their baseline?
    context: An adversary who has compromised an administrator's account might use it to create backdoors by adding other accounts to privileged groups. While the administrator is authorized to perform this action, doing so at a rate that is statistically unusual for them can be an indicator that their account has been compromised and is being used maliciously.
    answer_sources:
      - Windows Event ID 4732
      - Domain Controllers
      - Member Servers
      - Workstations
    range: last 90 days
    queries:
      - pseudocode: FOR each admin user | BASELINE rate of group modification events (Event 4732) | ALERT if current activity > 95th percentile of their normal behavior
  - question: Can a graph-based anomaly detection model identify improbable changes in user-to-group memberships?
    context: Modeling the relationships between users and groups as a graph allows for the detection of structurally improbable changes. An anomaly detection model can learn what normal connections look like. An event like a low-privilege local account suddenly being connected to a central, high-privilege group like 'Administrators' would be flagged as a very low-probability, high-risk event.
    answer_sources:
      - Windows Event ID 4732
      - Domain Controllers
      - Member Servers
      - Workstations
    range: last 90 days
    queries:
      - pseudocode: MODEL users and groups as a graph network | APPLY graph-based anomaly detection | ALERT on low-probability edge creations (e.g., local account -> 'Administrators' group)
  - question: Is a non-administrative local account running a process that matches the hash of a known privilege escalation tool?
    context: Adversaries use well-known tools and exploits (like JuicyPotato, PrintNightmare exploits, etc.) to escalate their privileges from a standard user to an administrator. Matching the file hash of any process run by a non-admin account against a database of these known tool hashes is a direct way to detect this critical attack phase.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Hosts, especially unpatched systems and legacy servers
    range: last 90 days
    queries:
      - pseudocode: FOR each process creation (Event 4688) by non-admin local account | LOOKUP process_hash in privilege escalation tool feed | ALERT on match
  - question: Are there rare parent-child process relationships, such as a web server spawning a command shell, indicating exploitation?
    context: Legitimate software has predictable process execution chains (e.g., Word.exe spawning from explorer.exe). Many privilege escalation exploits cause unusual parent-child process relationships, such as a system service like the Print Spooler (`spoolsv.exe`) suddenly spawning a command prompt (`cmd.exe`). Detecting these statistically rare relationships is a strong indicator of exploitation.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Hosts, especially unpatched systems and legacy servers
    range: last 90 days
    queries:
      - pseudocode: BASELINE normal parent-child process relationships | MONITOR for new process creations (Event 4688) | ALERT on statistically rare relationships (e.g., w3wp.exe -> cmd.exe)
  - question: Can a machine learning model detect privilege escalation attempts based on process creation event features?
    context: To catch novel or unknown privilege escalation techniques, a machine learning model can be trained on the features of known exploits (e.g., user context, parent process, command line patterns). This allows the model to identify new, unseen attacks that share similar characteristics with known malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Hosts, especially unpatched systems and legacy servers
    range: last 90 days
    queries:
      - pseudocode: INPUT process creation events | APPLY trained ML model (e.g., XGBoost) on features (process, parent, user, cmdline) | ALERT on events classified as privilege escalation
  - question: Has a known UAC bypass sequence, such as a specific registry modification followed by a LOLBin execution, been observed?
    context: User Account Control (UAC) bypass is a common technique for privilege escalation on Windows. Many bypasses involve a specific sequence of actions, such as writing to a particular registry key and then executing an auto-elevating Windows binary (like `fodhelper.exe`). Using a correlation rule to detect this exact sequence provides high-fidelity alerts for this technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Windows Workstations and Servers
    range: last 90 days
    queries:
      - pseudocode: CORRELATE registry write (Sysmon EID 13) to UAC bypass path (e.g., HKCU:\Software\Classes\ms-settings) FOLLOWED BY process creation (EID 4688) of fodhelper.exe by same PID within 2s
  - question: Have registry keys associated with UAC bypasses been modified by a standard local account?
    context: The specific registry keys used in UAC bypass techniques are rarely, if ever, modified during normal system or user activity. Therefore, any modification to one of these keys, especially by a process running as a standard, non-administrative local account, is a statistical anomaly and highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Windows Workstations and Servers
    range: last 90 days
    queries:
      - pseudocode: MONITOR for modifications to a list of known UAC bypass registry keys | ALERT if the modification is performed by a standard local account
  - question: Can sequence pattern mining detect rare event chains that correspond to UAC bypass techniques?
    context: Instead of looking for one specific, known UAC bypass sequence, pattern mining algorithms can analyze streams of process, registry, and file events to discover any rare sequence that contains elements known to be part of bypass techniques. This can help discover new or variant UAC bypass methods.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Windows Workstations and Servers
    range: last 90 days
    queries:
      - pseudocode: APPLY sequence pattern mining to event stream (process, registry, file) | FLAG rare sequences that contain known UAC bypass indicators (e.g., HKCU write -> LOLBin exec)
  - question: Has a local account added itself to a privileged local group?
    context: This is a critical indicator of a successful privilege escalation. If an account that is not an administrator (`Subject`) successfully adds itself (`Member`) to the 'Administrators' group, it means the account has found and exploited a flaw to elevate its own permissions. This should be a critical-severity alert.
    answer_sources:
      - Windows Event ID 4732
      - Domain Controllers
      - All Windows Servers and Workstations
    range: last 90 days
    queries:
      - pseudocode: MONITOR Event ID 4732 | IF 'Group Name' is 'Administrators' AND 'Member SID' equals 'Subject SID' | GENERATE critical alert for self-elevation
  - question: Is a user adding accounts to privileged groups in a way that is anomalous compared to their peers?
    context: Peer group analysis can help detect when a compromised account is being used in an uncharacteristic way. If a local service account, for example, suddenly adds a user to an admin group, this action can be flagged as anomalous because other, similar service accounts do not perform this action.
    answer_sources:
      - Windows Event ID 4732
      - Domain Controllers
      - All Windows Servers and Workstations
    range: last 90 days
    queries:
      - pseudocode: FOR any privileged group addition | COMPARE the acting user's behavior to their defined peer group | ALERT if this user is a statistical outlier in performing this action
  - question: Does a graph-based model detect a low-probability event where a user node creates a membership edge to a privileged group node?
    context: Graph-based machine learning can learn the probability of certain types of users being added to certain types of groups. A low-privilege local account being added to a high-privilege group is an event that a trained model would assign a very low probability to, making it stand out as a significant anomaly indicative of privilege escalation.
    answer_sources:
      - Windows Event ID 4732
      - Domain Controllers
      - All Windows Servers and Workstations
    range: last 90 days
    queries:
      - pseudocode: MODEL user-group permissions as a graph | USE ML model to learn edge creation probabilities | ALERT on low-probability events (e.g., service_account -> 'Administrators')
  - question: Has a local account been used to clear event logs, stop security services, or disable the firewall?
    context: A common defense evasion tactic is to blind security monitoring by clearing logs or disabling security tools. The generation of Event ID 1102 (The audit log was cleared) or the use of command-line tools like `wevtutil.exe cl`, `sc.exe stop`, or `netsh.exe` to tamper with security controls are high-fidelity indicators of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1102
      - All Windows Hosts
      - Security Log Aggregators
    range: last 90 days
    queries:
      - pseudocode: ALERT on Event ID 1102 | USE regex on command lines (Event 4688) to detect 'wevtutil cl', 'sc stop WinDefend', 'netsh advfirewall set state off'
  - question: Have critical security processes been terminated by an unauthorized process?
    context: Adversaries will often try to kill the processes of antivirus or EDR agents to operate undetected. Monitoring for the termination of these critical security processes and checking if the termination was initiated by an unauthorized process (i.e., not a trusted updater or installer) is a key defense evasion detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1102
      - All Windows Hosts
      - Security Log Aggregators
    range: last 90 days
    queries:
      - pseudocode: MONITOR for termination of security processes (e.g., MsMpEng.exe, Sysmon64.exe) | ALERT if terminating process is not on an approved software updater list
  - question: Can an NLP model classify command-line arguments to detect an intent to disable security controls?
    context: Adversaries may use novel or obfuscated commands to tamper with defenses. A Natural Language Processing (NLP) model trained on command lines can learn to understand the 'intent' of a command, even if the syntax is unfamiliar. This allows it to flag commands whose intent is classified as 'Disable Security Control' or 'Clear Logs'.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1102
      - All Windows Hosts
      - Security Log Aggregators
    range: last 90 days
    queries:
      - pseudocode: INPUT command-line arguments from local account processes | APPLY trained NLP model to classify intent | ALERT if intent is 'Disable Security' or 'Tamper'
  - question: Are local accounts using legitimate Windows binaries (LOLBins) with command-line arguments known to be malicious?
    context: Adversaries "live off the land" by using pre-existing, legitimate Windows tools (LOLBins) for malicious purposes. This query uses a library of known-bad command-line patterns for tools like `certutil.exe` (for downloading files) or `rundll32.exe` (for executing scriptlets) to detect this common evasion technique.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Hosts
    range: last 90 days
    queries:
      - pseudocode: APPLY regex library of malicious LOLBin usage to command lines (Event 4688) | ALERT on matches, e.g., 'certutil.exe -urlcache -f http://...'
  - question: Has a LOLBin been executed in a way that deviates from its established baseline of normal behavior?
    context: Every legitimate tool has a pattern of normal use (common parent processes, typical command arguments, etc.). By creating a behavioral baseline for each major LOLBin, we can detect when a local account uses it in a statistically anomalous way, which is a strong indicator of malicious use.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Hosts
    range: last 90 days
    queries:
      - pseudocode: FOR each LOLBin | BASELINE normal behavior (parent process, cmdline structure, etc.) | ALERT when a new execution deviates > 3 standard deviations from the baseline
  - question: Can a one-class anomaly detection model identify novel or malicious uses of LOLBins?
    context: A One-Class SVM is a machine learning model trained only on "normal" data. It creates a boundary around what constitutes benign behavior for a given LOLBin. Any new execution by a local account that falls outside this learned boundary is, by definition, an anomaly and potentially a novel malicious technique.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Hosts
    range: last 90 days
    queries:
      - pseudocode: FOR each LOLBin, TRAIN a One-Class SVM on millions of benign execution events | SCORE new executions by local accounts | ALERT if the event falls outside the learned 'normal' boundary
  - question: Is a non-browser process making direct-to-IP connections or connecting to IPs on threat feeds?
    context: Most legitimate applications resolve a domain name via DNS before making a network connection. Malware, however, often connects directly to a hardcoded IP address to evade DNS-based security controls. This query detects processes (that are not on an allow-list of browsers, etc.) making external connections without a preceding DNS query.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Resolvers
      - All Endpoints
    range: last 90 days
    queries:
      - pseudocode: JOIN process data (4688) with network data (Zeek) | ALERT if non-browser process makes external connection AND no preceding DNS query for the destination IP exists
  - question: Is a process running as a local account exfiltrating an anomalously large amount of data?
    context: After collecting data, adversaries must exfiltrate it. This can be detected by monitoring the volume of outbound data for each process. By baselining the normal amount of data a process sends, we can alert when it suddenly sends a significantly larger amount, potentially indicating data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Resolvers
      - All Endpoints
    range: last 90 days
    queries:
      - pseudocode: FOR each process name | BASELINE hourly outbound data volume (Zeek orig_bytes) | ALERT if current hourly volume > 99th percentile of historical distribution
  - question: Does a host's outbound network traffic significantly deviate from its forecasted volume?
    context: The total outbound traffic from a host often follows a predictable daily or weekly pattern. A time-series forecasting model can learn this pattern and predict the expected traffic volume for the next hour. A large, unexplained spike in traffic that deviates from the forecast can indicate C2 beaconing or data exfiltration activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Resolvers
      - All Endpoints
    range: last 90 days
    queries:
      - pseudocode: FOR each host | USE time-series model (ARIMA) to forecast expected outbound traffic volume | ALERT if observed traffic significantly deviates from the forecast