name: T1003: OS Credential Dumping
id: 3c5a6108-628a-4f51-8a9d-2e6b7f3d5c9e
description: This playbook helps investigate if an adversary has attempted to dump credentials from compromised systems. This can involve detecting known credential dumping tools through process creation and file transfers, identifying obfuscated PowerShell scripts containing credential dumping commands, observing sequences of commands used to copy credential stores like NTDS.dit or SAM files, spotting exfiltration of Linux credential files, monitoring for direct process access to LSASS, detecting unauthorized directory replication requests (DCSync), tracking direct access to the SAM file or sensitive LSA registry keys, and identifying attempts to disable LSA Protection (RunAsPPL).
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are known credential dumping tools being executed or transferred onto the network?
    context: This question aims to detect the presence of well-known credential dumping utilities like Mimikatz or ProcDump. By monitoring for their execution via process creation events and their transfer across the network by matching file hashes against threat intelligence, analysts can identify the initial stages of a credential dumping attack.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Zeek conn.log
      - Domain Controllers, Member Servers, Privileged Access Workstations (PAWs), Network Egress Points
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_events WHERE process_name IN (credential_dumping_tool_watchlist) | OR SEARCH file_transfer_logs WHERE file_hash IN (malicious_hash_feed)
  - question: Are there statistically rare or suspicious file transfers occurring that might indicate the movement of a credential dumping tool?
    context: Adversaries may rename their tools to evade simple name-based detections. This question focuses on identifying anomalous file transfers by analyzing the rarity of file characteristics (like MIME type and extension) and the use of non-standard ports for transferring executables. This helps uncover disguised malicious tools.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Zeek conn.log
      - Domain Controllers, Member Servers, Privileged Access Workstations (PAWs), Network Egress Points
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH file_transfer_logs | CALCULATE rarity_score(mime_type, file_extension) | CALCULATE port_rarity(port, file_type) | FILTER rarity_score > 99th_percentile OR port_rarity > 99th_percentile
  - question: Can machine learning models identify subtle patterns in process and network events that indicate credential dumping activity?
    context: This question proposes a more advanced, behavioral approach. By training a classification model on features from both process creation and file transfer events, the system can learn to identify complex, multi-event patterns indicative of credential dumping, potentially catching novel or heavily obfuscated tools that evade signature-based methods.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Zeek conn.log
      - Domain Controllers, Member Servers, Privileged Access Workstations (PAWs), Network Egress Points
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT process_events, file_events | EXTRACT features (parent_process, cmd_length, entropy, file_size, mime_type) | PREDICT is_credential_dumping_tool(features)
  - question: Are PowerShell scripts being executed that contain keywords or commands associated with credential dumping?
    context: This question focuses on detecting fileless credential dumping attempts using PowerShell. By searching for specific strings, function names, and API calls (like `Invoke-Mimikatz` or `sekurlsa::logonpasswords`) within PowerShell script block logs, analysts can find direct evidence of malicious script execution, even if the commands are obfuscated.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - All Windows Endpoints, Windows Servers, Active Directory Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH powershell_script_logs WHERE script_content MATCHES REGEX ('Invoke-Mimikatz|Get-GPPPassword|sekurlsa::logonpasswords|LsaSecrets')
  - question: Are there any PowerShell scripts with unusually high entropy, suggesting obfuscation?
    context: Adversaries often obfuscate PowerShell scripts to hide malicious commands from simple keyword searches. This question uses statistical analysis to identify such scripts. By calculating the entropy (randomness) of script content and flagging scripts that deviate significantly from the baseline, analysts can uncover potentially malicious, hidden code.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - All Windows Endpoints, Windows Servers, Active Directory Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH powershell_script_logs | CALCULATE entropy(script_content) | FILTER entropy > (baseline_mean + 3 * baseline_std_dev)
  - question: Is there an anomalous spike in the execution of high-entropy PowerShell scripts on any single host?
    context: This question moves from analyzing individual scripts to profiling host behavior over time. A sudden increase in the frequency or average entropy of PowerShell scripts on a specific machine can be a strong indicator that an adversary has deployed a malicious PowerShell framework. This time-series approach helps detect the overall activity, not just a single event.
    answer_sources:
      - Windows Event ID 4104
      - Windows Event ID 4688
      - All Windows Endpoints, Windows Servers, Active Directory Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: AGGREGATE powershell_script_logs by host, time | CALCULATE count_of_scripts, average_entropy | DETECT_ANOMALY in time_series(count_of_scripts, average_entropy)
  - question: Is a process creating a volume shadow copy and then immediately copying sensitive credential files like NTDS.dit or SAM?
    context: This question targets a classic "living off the land" technique for credential dumping. Adversaries use the Volume Shadow Copy service to create a snapshot of the system, allowing them to copy locked files like the NTDS.dit database (on Domain Controllers) or the SAM hive. Correlating the creation of a shadow copy with the subsequent copying of these files is a high-fidelity indicator of this attack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers (for NTDS.dit), All Windows Systems (for SAM/SYSTEM hives)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: CORRELATE (process_event with 'vssadmin create shadow') AND (process_event with 'copy NTDS.dit' from shadow_path) WITHIN 10 minutes
  - question: Is there anomalous usage of system utilities like `vssadmin`, `reg.exe save`, or `ntdsutil` by a specific user or on a specific host?
    context: While these utilities have legitimate administrative uses, their frequency can be a tell-tale sign of abuse. This question aims to establish a baseline of normal usage for these commands and then alert when a user or host significantly deviates from that baseline, which could indicate an adversary is using them for credential harvesting.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers (for NTDS.dit), All Windows Systems (for SAM/SYSTEM hives)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: AGGREGATE process_events for ('vssadmin', 'reg save', 'ntdsutil') by user, host | CALCULATE execution_count | FILTER execution_count > 99th_percentile_of_baseline
  - question: Can a sequence analysis model detect the specific chain of commands associated with credential harvesting from a shadow copy?
    context: This question proposes a sophisticated method to differentiate between benign and malicious command sequences. An HMM or similar model can be trained to recognize the specific order of operations an attacker uses (`vssadmin create` -> `copy` -> `vssadmin delete`), allowing it to distinguish this malicious pattern from legitimate administrative tasks that might use the same commands in a different order or context.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers (for NTDS.dit), All Windows Systems (for SAM/SYSTEM hives)
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT sequence_of_process_events_per_host | PREDICT is_credential_harvesting_sequence(event_sequence)
  - question: Are files commonly associated with Linux credentials being transferred over the network?
    context: This question focuses on credential dumping from Linux systems. It aims to detect the exfiltration of critical credential files like `/etc/shadow`, `/etc/passwd`, or SSH private keys (`id_rsa`). Alerting when these specific filenames are seen in network file transfers, especially over unencrypted channels or to external destinations, is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek ssh.log
      - Network segments containing critical Linux servers, Network egress points, VPN concentrators
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH file_transfer_logs WHERE filename IN ('shadow', 'passwd', 'id_rsa') AND (protocol = 'http' OR destination_ip = external)
  - question: Are there any SSH sessions with an anomalously high ratio of server-to-client data transfer?
    context: A typical interactive SSH session involves small amounts of data. A large file transfer, such as exfiltrating a credential file, will result in a significantly higher volume of data flowing from the server to the client. This question seeks to identify these outlier sessions by analyzing the byte ratio, which can indicate data theft over an otherwise legitimate-looking SSH connection.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek ssh.log
      - Network segments containing critical Linux servers, Network egress points, VPN concentrators
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH ssh_sessions | CALCULATE ratio = server_bytes / client_bytes | FILTER ratio > (baseline_mean + 3 * baseline_std_dev)
  - question: Are there anomalous network connections, such as a web server initiating SSH to a database server, that could indicate lateral movement for credential access?
    context: This question uses graph analysis to model the "who talks to whom" baseline in the network. An adversary moving laterally to access credentials will likely create connections that deviate from this normal pattern. Identifying these new or unusual communication edges (e.g., a web server using SSH) can reveal attacker movement that might otherwise be missed.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek ssh.log
      - Network segments containing critical Linux servers, Network egress points, VPN concentrators
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: BUILD communication_graph from conn_logs | DETECT anomalous_edges WHERE edge_is_not_in_baseline_graph
  - question: Is a non-allowlisted process attempting to access the LSASS process memory with high-risk permissions?
    context: The Local Security Authority Subsystem Service (LSASS) process stores credentials in memory. Direct access to this process's memory is a primary goal for credential dumping tools. This question aims to detect this activity directly by using Sysmon to monitor for processes requesting dangerous access rights (like `PROCESS_VM_READ`) to `lsass.exe` and filtering out known-good system and security tools.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - All Windows Endpoints, Windows Servers, Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH sysmon_process_access_logs WHERE target_process = 'lsass.exe' AND granted_access IN ('0x1010', '0x1410') AND source_process NOT IN (allowlist)
  - question: Are there any unusual or rare processes accessing LSASS, or is a common process accessing it with rare permissions?
    context: Adversaries may use legitimate, common processes to access LSASS to blend in. This question focuses on baselining all LSASS access events to find statistical anomalies. It can flag a process that has never accessed LSASS before, or a common process (like `svchost.exe`) that suddenly requests a rare, high-privilege access right, both of which are highly suspicious.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - All Windows Endpoints, Windows Servers, Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH sysmon_process_access_logs WHERE target_process = 'lsass.exe' | CALCULATE rarity(source_process) and rarity(granted_access) | FILTER rarity_score is high
  - question: Can a machine learning model be used to classify LSASS access events as malicious or benign?
    context: This question proposes building a predictive model to automate the detection of malicious LSASS access. By training a classifier on features like the source and parent process, user context, and whether the process is signed, the model can learn to distinguish legitimate system activity from attacker techniques, providing a more robust and scalable detection capability.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - All Windows Endpoints, Windows Servers, Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT lsass_access_events | EXTRACT features (source_process, parent_process, user, is_signed) | PREDICT is_malicious_access(features)
  - question: Is a non-Domain Controller account attempting to replicate directory changes from a DC?
    context: The DCSync attack involves a non-DC machine impersonating a Domain Controller to request password hashes from another DC. This question aims to detect this by monitoring for directory replication events (Windows Event ID 4662 or Zeek `drsuapi` traffic) initiated by an account or IP address that is not an authorized Domain Controller. This is a very high-fidelity indicator of a DCSync attack.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Windows Event ID 4662
      - Domain Controllers, Network links between domain member segments and the DC segment
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH windows_event_4662 WHERE access_type = 'Replicating Directory Changes' AND account_name NOT LIKE '%$' | OR SEARCH dce_rpc_logs WHERE operation = 'drsuapi' AND source_ip NOT IN (dc_ip_list)
  - question: Is there a statistical anomaly in the volume or frequency of directory replication traffic?
    context: While legitimate replication occurs, a DCSync attack may cause a noticeable spike in this traffic. This question involves baselining the normal patterns of replication traffic between DCs. An alert is generated if there is a sudden, anomalous increase in this traffic, or if replication-like traffic patterns appear from a non-DC host, which could indicate an attack is in progress.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Windows Event ID 4662
      - Domain Controllers, Network links between domain member segments and the DC segment
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: AGGREGATE replication_traffic by source, dest, time | DETECT_ANOMALY in time_series(traffic_volume) WHERE source_is_not_a_dc
  - question: Does a host initiating replication requests behave differently from the peer group of legitimate Domain Controllers?
    context: This question uses peer group analysis to identify an attacking machine. All legitimate DCs should behave similarly when replicating (e.g., using the same protocols, at similar frequencies). A machine conducting a DCSync attack will likely fall outside this normal behavioral cluster, making it a clear anomaly. This is effective for identifying an attacker posing as a DC.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Windows Event ID 4662
      - Domain Controllers, Network links between domain member segments and the DC segment
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: CLUSTER hosts based on replication_behavior_features | IDENTIFY outliers from the main_dc_cluster
  - question: Is a non-allowlisted process accessing the SAM file or sensitive LSA registry keys?
    context: This question targets direct access to credential stores on disk. By enabling and monitoring object access auditing for the SAM file and critical `HKLM\SECURITY` registry keys, an alert can be triggered whenever any process not on a very strict allowlist (e.g., System, lsass.exe, backup agents) attempts to read them. This provides a direct and reliable signal of tampering.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Windows Event ID 4656
      - All Windows Systems, Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH file_or_registry_access_events WHERE (target_object = 'SAM' OR target_object = 'HKLM\\SECURITY\\Policy\\Secrets') AND process_name NOT IN (allowlist)
  - question: Is access to the SAM file or sensitive LSA registry keys occurring at an unusual time of day?
    context: Legitimate access to these sensitive objects typically happens at predictable times, such as system boot or during scheduled patching windows. This question aims to identify malicious access by baselining these normal access times. Any access event that occurs outside of the typical time window is flagged as anomalous and suspicious, even if performed by a seemingly legitimate process.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Windows Event ID 4656
      - All Windows Systems, Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH access_events for SAM/LSA_keys | CALCULATE time_of_day_percentile | FILTER percentile < 5 OR percentile > 95
  - question: Can a one-class machine learning model identify anomalous access patterns to the SAM file or LSA registry keys?
    context: This question proposes an advanced anomaly detection method. A one-class SVM is trained only on data from legitimate access events to learn a tight boundary of what constitutes "normal." Any new access event that doesn't fit within this learned boundary is immediately flagged as an anomaly, making this approach effective for detecting novel or unforeseen attack methods.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Windows Event ID 4656
      - All Windows Systems, Domain Controllers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT access_event_features | PREDICT is_anomaly using one_class_svm_model
  - question: Has LSA Protection (RunAsPPL) been disabled or configured to not start?
    context: LSA Protection is a critical security feature that prevents non-trusted processes from accessing LSASS memory. Disabling it is a common prerequisite for many credential dumping tools. This question aims to detect this tampering by creating high-priority alerts for the specific event log entry indicating LSA failed to start as protected, or for any modification to the registry key that controls this feature.
    answer_sources:
      - Windows Event ID 12
      - Windows Event ID 4657
      - All Windows 8.1/Server 2012 R2 and newer systems, especially Domain Controllers and PAWs
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH windows_event_12 WHERE source = 'Wininit' and message contains 'LSA was not started as a protected process' | OR SEARCH registry_events WHERE key = '...\\Lsa\\RunAsPPL'
  - question: Is there an unusual amount of modification activity in the sensitive LSA registry key area?
    context: Even if the `RunAsPPL` key itself isn't changed, an adversary might be tampering with other related LSA configuration values. This question seeks to detect this broader activity by monitoring the overall frequency of changes to the parent `HKLM\SYSTEM\CurrentControlSet\Control\Lsa` key. A spike in modifications on a host compared to its baseline or peers can indicate suspicious tampering.
    answer_sources:
      - Windows Event ID 12
      - Windows Event ID 4657
      - All Windows 8.1/Server 2012 R2 and newer systems, especially Domain Controllers and PAWs
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: AGGREGATE registry_events for '...\\Control\\Lsa' by host, time | DETECT_ANOMALY in modification_count_time_series
  - question: Has the configuration of critical security registry keys, including RunAsPPL, drifted from the established secure baseline?
    context: This question proposes a sophisticated method for ensuring configuration integrity. An autoencoder model is trained on the registry settings from a "golden" secure image. By periodically checking live systems against this model, any significant deviation (which would result in a high reconstruction error) can be automatically flagged as unauthorized configuration drift, indicating potential tampering.
    answer_sources:
      - Windows Event ID 12
      - Windows Event ID 4657
      - All Windows 8.1/Server 2012 R2 and newer systems, especially Domain Controllers and PAWs
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: INPUT current_registry_config | CALCULATE reconstruction_error using autoencoder_model | FILTER error > threshold