name: "T1036: Masquerading"
id: "f4b1b1b0-5a1a-4b0a-8c1a-1b1b1b1b1b1b"
description: "This playbook helps to determine if an adversary is employing masquerading techniques for defense evasion. Adversaries may attempt to manipulate the name, path, or metadata of a malicious file or process to make it appear as a legitimate, benign program. This can involve matching the names of legitimate system binaries, using deceptive filenames with special characters or multiple extensions, executing processes from non-standard locations, mismatching PE header information, establishing atypical parent-child process relationships, using invalid or mismatched digital signatures, and running legitimate utilities with obfuscated command-line arguments. This playbook provides a series of investigative questions to uncover these various forms of masquerading."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a process with a legitimate name (e.g., svchost.exe) executing with a file hash known to be malicious?"
    context: "This question aims to detect a common masquerading technique where an adversary replaces a legitimate system file with malware but keeps the original filename to avoid suspicion. Answering this helps identify trojanized system binaries by comparing the file hash of running processes against threat intelligence feeds. A match indicates a high-confidence compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), Domain Controllers, Certificate Authorities"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "JOIN process creation logs with threat intelligence feed ON file_hash. WHERE process_name IN (common_system_binaries_watchlist) AND threat_feed_match IS NOT NULL."
  - question: "Is a critical system process (e.g., lsass.exe) running with a file hash that has not been previously approved or seen in our environment?"
    context: "This question focuses on identifying unauthorized or unknown versions of critical system files. By maintaining a baseline of known-good hashes for essential binaries (from a golden image or software inventory), any deviation can signal a potential file replacement attack, even if the new hash isn't in a threat intelligence feed yet."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), Domain Controllers, Certificate Authorities"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "FOR each process creation event, IF process_name IN (critical_binaries_list), CHECK if file_hash is in the known_good_hash_set for that process_name. ALERT if not found."
  - question: "Can we predict if a process execution is a malicious masquerade based on its name, hash prevalence, and other execution properties?"
    context: "This question explores a predictive approach to detecting masquerading. It's useful when symbolic rules are too rigid and statistical methods are too noisy. By training a model on features like process name, parent process, command-line length, and hash rarity, we can score new process events to find suspicious combinations that might indicate a sophisticated masquerade attempt."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), Domain Controllers, Certificate Authorities"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SCORE process creation events using a trained classification model. FEATURES: process_name, parent_process, cmd_line_length, hash_prevalence, in_threat_intel. ALERT on high malicious score."
  - question: "Is a process executing from a filename that uses deceptive formatting, such as a Right-to-Left-Override (RTLO) character, multiple extensions, or a trailing space?"
    context: "Adversaries use these tricks to make malicious executables look like benign documents (e.g., 'report.exe.pdf' appearing as 'report.pdf.exe'). This question helps detect these explicit, rule-based attempts at user deception by scanning filenames for known deceptive patterns."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints, email gateways, web proxies, and file shares"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SEARCH process creation logs WHERE process_name MATCHES REGEX for RTLO, multiple extensions (e.g., `\\.(pdf|docx)\\.exe$`), or trailing spaces."
  - question: "Is a process running with a name that is a close misspelling of a legitimate critical system binary (e.g., 'svch0st.exe' instead of 'svchost.exe')?"
    context: "This question aims to catch typosquatting, where an adversary uses a filename that is visually very similar to a real system file. By calculating the string similarity (e.g., Levenshtein distance) between a new process name and a list of known critical process names, we can flag suspicious, near-miss names for review."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints, email gateways, web proxies, and file shares"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "FOR each process creation, CALCULATE string_distance(process_name, critical_process_list). ALERT if distance is high but not an exact match."
  - question: "Can we use a machine learning model to classify filenames as suspicious based on their character-level patterns?"
    context: "Sophisticated adversaries may create deceptive filenames that don't match simple regex or typosquatting checks. This question proposes using a model (like a CNN) that learns the subtle sequence and structural patterns of malicious filenames from a large dataset, allowing it to identify novel or complex deceptive naming schemes."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints, email gateways, web proxies, and file shares"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "CLASSIFY new process filenames using a trained character-level CNN model. ALERT on 'suspicious' classification."
  - question: "Is a legitimate system process (e.g., svchost.exe) executing from a non-standard file path?"
    context: "System binaries are expected to run from specific, protected directories like C:\\Windows\\System32. An adversary may place a malicious file with the same name in a different, often user-writable, location (e.g., C:\\Users\\Public). This question helps detect such anomalies by comparing the execution path against a strict allowlist of known-good locations for that process name."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), especially user-writable directories (e.g., C:\\Users\\*, C:\\ProgramData, C:\\Temp, C:\\Perflogs)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SEARCH process creation logs WHERE process_name is in critical_list AND execution_path is NOT in allowed_paths_for_process."
  - question: "Is a critical system process executing from a statistically rare file path compared to enterprise-wide activity?"
    context: "Even without a strict allowlist, normal system activity creates a predictable pattern of execution paths. This question helps find outliers by building a frequency distribution of execution locations for each critical process. An execution from a path that is statistically rare (e.g., in the bottom 1% of frequency) is highly suspicious and could indicate a masquerading attempt."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), especially user-writable directories (e.g., C:\\Users\\*, C:\\ProgramData, C:\\Temp, C:\\Perflogs)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "FOR each process, calculate frequency of its execution path. ALERT if frequency for a critical process is below a low percentile threshold (e.g., 1st percentile)."
  - question: "Can we identify anomalous clusters of system binaries running from unusual locations?"
    context: "This question uses clustering algorithms to group process executions based on file path characteristics. Normal activity will form large, dense clusters (e.g., svchost.exe in System32). Masquerading attacks will often appear as small, isolated clusters in unusual locations (e.g., a few instances of rundll32.exe in a user's music folder), making them easy to spot as anomalies."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), especially user-writable directories (e.g., C:\\Users\\*, C:\\ProgramData, C:\\Temp, C:\\Perflogs)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "CLUSTER process executions using path-derived features (e.g., directory depth, path strings). INVESTIGATE small, outlier clusters of system binaries."
  - question: "Is a process running where its on-disk filename does not match the 'OriginalFilename' specified in its PE metadata?"
    context: "When a file is compiled, its original name is often embedded in the PE header metadata. Adversaries may rename a malicious file (e.g., 'malware.exe' to 'svchost.exe'), but they often neglect to change this internal metadata. This question checks for this discrepancy, which is a strong indicator that the file has been renamed to masquerade as something else."
    answer_sources:
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SEARCH Sysmon Event ID 1 logs WHERE basename(Image) != OriginalFileName and process_name NOT IN exception_list."
  - question: "Are there new or rare combinations of on-disk filenames and internal PE metadata names appearing in the environment?"
    context: "This question seeks to identify masquerading by baselining all combinations of filenames and their internal PE names. A legitimate 'svchost.exe' will consistently have an internal name of 'svchost.exe'. A newly observed or extremely rare triplet (e.g., Image: 'svchost.exe', OriginalFileName: 'evil.exe') is highly indicative of a renamed malicious file."
    answer_sources:
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "BASELINE all (Image, OriginalFileName, InternalName) triplets. ALERT on new or low-frequency triplets."
  - question: "Can a machine learning model predict masquerading based on discrepancies between on-disk filenames and PE header metadata?"
    context: "This question proposes a predictive model to automate the detection of filename/metadata mismatches. By training a model on features like name equality flags, signer information, and file path, it can learn to score the likelihood of masquerading, providing a more nuanced detection than a simple rule and helping to prioritize alerts."
    answer_sources:
      - "Sysmon Event ID 1"
      - "All enterprise endpoints (workstations, servers), Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SCORE process executions using a trained decision tree. FEATURES: (Image_name == OriginalFileName), signer_info, path. ALERT on high masquerading score."
  - question: "Is a critical system process being launched by an atypical parent process?"
    context: "Legitimate system processes have predictable parent-child relationships (e.g., 'wininit.exe' is the only expected parent of 'lsass.exe'). An adversary might cause an unusual process, like Microsoft Word, to spawn a command shell (cmd.exe). This question looks for violations of these expected relationships, which are strong indicators of malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints, especially user workstations and application servers running software like Microsoft Office or Adobe Reader."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SEARCH for forbidden parent-child process relationships (e.g., Parent: winword.exe, Child: cmd.exe; Parent: NOT wininit.exe, Child: lsass.exe)."
  - question: "Are there any statistically rare or never-before-seen parent-child process relationships occurring?"
    context: "This question moves beyond a fixed list of bad relationships to a probabilistic approach. By modeling all parent-child process relationships over time, we can calculate the probability of any given pairing. A new pairing that has never been seen before or has an extremely low probability is highly anomalous and warrants immediate investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints, especially user workstations and application servers running software like Microsoft Office or Adobe Reader."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "CALCULATE P(Child | Parent) for all process executions. ALERT if probability is below a threshold or the pair is new."
  - question: "Can we detect anomalous process lineage using a graph-based model?"
    context: "This question models the entire enterprise's process activity as a graph, where nodes are processes and edges are parent-child relationships. This allows for the detection of unusual connections between different 'communities' in the graph, such as an edge suddenly appearing between an 'Office Application' community and a 'System Tool' community, which could signify malicious code execution."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All enterprise endpoints, especially user workstations and application servers running software like Microsoft Office or Adobe Reader."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "MODEL process lineage as a graph. IDENTIFY low-weight edges connecting disparate communities (e.g., Office Apps -> System Tools)."
  - question: "Is a process with a known Microsoft binary name running but is unsigned, has an invalid signature, or is signed by a non-Microsoft publisher?"
    context: "Legitimate Microsoft system binaries are digitally signed by Microsoft to guarantee their authenticity. An adversary might create a malicious file named 'explorer.exe' but it will lack a valid Microsoft signature. This question checks the signature status of critical processes to verify their integrity."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "All enterprise endpoints (workstations, servers), code signing servers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "FOR critical Microsoft process names, ALERT if SignatureStatus is not 'Valid' or Signature is not from Microsoft."
  - question: "Is a process that is almost always signed by Microsoft suddenly seen with a new, non-Microsoft signer or as unsigned?"
    context: "This question uses a statistical approach to detect signature anomalies. While a simple rule checks for a valid Microsoft signature, this method baselines the signers for each process. If a process like 'lsass.exe', which is signed by Microsoft 99.9%+ of the time, is suddenly seen with a different signer or no signer, it is a high-confidence indicator of a problem."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "All enterprise endpoints (workstations, servers), code signing servers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "BASELINE all (Process Name, Signer) pairs. ALERT when a typically Microsoft-signed process appears with a new or null signer."
  - question: "Can a machine learning model flag executions where the combination of process name and signature information is anomalous?"
    context: "This question leverages a machine learning model to find subtle signature anomalies. A technically valid signature from a lesser-known publisher on a critical system process might not violate a simple rule but is highly suspicious. A model can learn these normal and abnormal combinations of features to flag such unusual events."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "All enterprise endpoints (workstations, servers), code signing servers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "USE a Naive Bayes classifier on features (process_name, is_signed, signer_name, signer_prevalence) to flag anomalous signature combinations."
  - question: "Is a common system utility (e.g., powershell.exe, certutil.exe) being run with known obfuscated command-line arguments?"
    context: "Adversaries abuse legitimate system utilities ('Living Off The Land' binaries) to execute malicious code. They often use specific command-line switches to run encoded or hidden commands (e.g., powershell.exe -encodedcommand). This question looks for these known malicious patterns in command-line logs."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek http.log"
      - "All enterprise endpoints (workstations, servers), DMZ servers, Domain Controllers, Web Proxies"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "SEARCH process command lines for known obfuscation indicators like '-enc', 'FromBase64String', or suspicious LOLBAS usage patterns."
  - question: "Is a system utility being executed with command-line arguments that are abnormally long or have unusually high entropy?"
    context: "Benign use of system utilities typically involves short, readable commands. Adversaries often pass long, obfuscated, or encrypted scripts as command-line arguments. This results in arguments that are statistically anomalous in their length and character randomness (entropy). This question establishes a baseline for normal command lines and alerts on outliers."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek http.log"
      - "All enterprise endpoints (workstations, servers), DMZ servers, Domain Controllers, Web Proxies"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "FOR each system utility, baseline command-line length and entropy. ALERT when a new execution exceeds the 98th percentile for either metric."
  - question: "Can we identify outlier clusters of command-line arguments for system utilities?"
    context: "This question uses clustering to group similar command-line arguments together. Normal administrative scripts and user activity will form large, well-defined clusters. Malicious and obfuscated commands are often unique and will form small, isolated clusters or be identified as noise, making them easy to spot and investigate."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek http.log"
      - "All enterprise endpoints (workstations, servers), DMZ servers, Domain Controllers, Web Proxies"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: "VECTORIZE command-line arguments with TF-IDF and run a clustering algorithm (e.g., K-Means). INVESTIGATE small, outlier clusters."