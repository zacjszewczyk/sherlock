name: T1098.004: SSH Authorized Keys
id: 9e3a6c1d-8f0a-4b7c-8d1e-2f9a0b3c4d5e
description: This playbook helps investigate whether an adversary is maintaining persistence or escalating privileges by modifying SSH authorized_keys files. It addresses indicators such as successful SSH logins from malicious or anomalous IP addresses, direct modification of authorized_keys files by suspicious processes (e.g., web shells), use of unusual parent processes to alter keys, and temporal correlation between key file modifications and subsequent logins with new keys. It also covers privilege escalation scenarios, including enabling root login in sshd_config, adding keys to privileged accounts, and injecting keys via cloud provider APIs.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is an SSH public key authentication originating from a known malicious IP address?
  context: This question seeks to identify high-confidence indicators of compromise by correlating successful inbound SSH logins with threat intelligence feeds. A match suggests that a known adversary, such as a command-and-control (C2) server or a TOR exit node, is accessing the environment, which requires immediate investigation.
  answer_sources:
  - Zeek ssh.log
  - Zeek conn.log
  - SSH bastion hosts
  - Critical Linux/macOS servers
  - Internet gateways
  - VPN concentrators
  - Centralized log repositories
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FROM zeek_ssh_logs WHERE direction == 'INBOUND' and auth_success == true JOIN threat_intel_ips ON zeek_ssh_logs.source_ip == threat_intel_ips.ip
- question: Has a user authenticated via SSH from a geographic location or Autonomous System (AS) that is new for them?
  context: This question aims to detect anomalous access patterns by baselining each user's normal login behavior. A login from a country or ASN never before seen for a specific user is a statistical rarity that could indicate a compromised account or credential, even if the source IP is not on a threat list.
  answer_sources:
  - Zeek ssh.log
  - Zeek conn.log
  - SSH bastion hosts
  - Critical Linux/macOS servers
  - Internet gateways
  - VPN concentrators
  - Centralized log repositories
  - Geolocation Database
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each user, GET historical_locations from past 90 days. FOR each new successful login, IF login_location NOT IN user.historical_locations, THEN ALERT.
- question: Does a recent SSH login exhibit anomalous characteristics compared to the user's typical login behavior profile?
  context: This question uses an unsupervised machine learning model to create a multi-faceted profile of normal SSH activity for each user, considering factors like time of day, client version, and source ASN. The goal is to detect sophisticated adversaries whose activities might not trigger simple symbolic or statistical rules but deviate subtly from established patterns, flagging them as outliers.
  answer_sources:
  - Zeek ssh.log
  - Zeek conn.log
  - SSH bastion hosts
  - Critical Linux/macOS servers
  - Internet gateways
  - VPN concentrators
  - Centralized log repositories
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN anomaly detection model (e.g., Isolation Forest) on user's historical login features (time, day, ASN, country, client_version). PREDICT anomaly score for new logins. IF score is outlier, THEN ALERT.
- question: Is a process redirecting output to an authorized_keys file, especially if run by a web service account?
  context: This question looks for direct evidence of an adversary adding their public key to a user's authorized_keys file. Attackers often use command-line utilities like echo, cat, or curl to append their key. This action is highly suspicious, particularly when executed by a non-interactive account (e.g., 'www-data') which suggests a web shell or other automated process is establishing persistence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs (syscall=execve)
  - Critical Linux servers
  - Developer workstations
  - Web servers
  - Application servers
  - Containerized environments
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FROM process_creation_logs WHERE command_line MATCHES '(echo|cat|curl|wget).*>>.*\\.ssh/authorized_keys' AND user IN ['www-data', 'nginx'].
- question: Was an authorized_keys file modified using a command with unusually high entropy?
  context: This question attempts to find obfuscated commands used to modify authorized_keys files. Adversaries may encode their public key (e.g., using base64) to evade simple signature-based detection. A command with abnormally high Shannon entropy compared to a historical baseline of legitimate modifications can indicate such obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs (syscall=execve)
  - Critical Linux servers
  - Developer workstations
  - Web servers
  - Application servers
  - Containerized environments
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each process modifying authorized_keys, CALCULATE entropy of command_line. IF entropy > 95th_percentile_of_baseline, THEN ALERT.
- question: Is there a sudden, widespread spike in authorized_keys file modifications across the environment?
  context: This question uses a time-series model to detect automated, large-scale campaigns to establish persistence. A single modification might be missed, but a coordinated attack across many hosts will appear as a significant anomaly in the aggregated rate of modification events, suggesting a worm or scripted attack.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs (syscall=execve)
  - Critical Linux servers
  - Developer workstations
  - Web servers
  - Application servers
  - Containerized environments
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: MONITOR hourly count of authorized_keys modifications. USE time-series model (e.g., SARIMA) to detect anomalous spikes in the count.
- question: Was an authorized_keys file modified by a process whose parent is not an approved administrative shell or tool?
  context: This question helps distinguish legitimate administrative changes from malicious ones by examining the parent process. Legitimate modifications are typically performed by an administrator in a shell (bash, zsh) or by a configuration management tool (Ansible, Puppet). A modification originating from a web server process (httpd, nginx) or an application process (java, python) is a strong indicator of a compromise, such as a web shell.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs
  - Web servers
  - Application servers
  - Containerized environments
  - Jump boxes
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FROM process_creation_logs WHERE target_file_path CONTAINS '.ssh/authorized_keys' AND parent_process_name NOT IN ['bash', 'zsh', 'ansible-playbook', 'sshd'].
- question: Has an authorized_keys file been modified by a historically rare parent-child process combination?
  context: This question aims to find unusual or first-time process relationships that lead to a key modification. By baselining all parent-child process pairs that modify authorized_keys files, any pair that has never been seen before or is extremely infrequent (e.g., in the bottom 1st percentile) can be flagged as a statistical anomaly worth investigating.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs
  - Web servers
  - Application servers
  - Containerized environments
  - Jump boxes
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: CALCULATE historical frequency of all (parent_process, child_process) pairs that modify authorized_keys. ALERT on pairs with frequency in the bottom 1st percentile.
- question: Does a machine learning model classify a recent authorized_keys file modification as malicious?
  context: This question leverages a supervised classification model to provide a holistic assessment of a file modification event. By training on features like the parent process, user context, command-line arguments, and process tree depth, the model can learn the complex patterns that differentiate legitimate administrative actions from malicious activity, providing a high-fidelity alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs
  - Web servers
  - Application servers
  - Containerized environments
  - Jump boxes
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN classification model on labeled file modification events. PREDICT if new authorized_keys modification is 'malicious' based on process features.
- question: Has a successful SSH authentication occurred with a public key never seen before for any user?
  context: This question provides situational awareness about changes to SSH access across the environment. By maintaining a stateful list of all known user-to-public-key pairings, any successful login with a brand new key can be flagged. While this may be a legitimate key rotation, it is a critical event to monitor as it could be the first sign of an adversary adding their own key.
  answer_sources:
  - Zeek ssh.log
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - File Integrity Monitoring (FIM) logs
  - All SSH-enabled systems
  - Authentication servers
  - Centralized log repositories
  - File servers hosting user home directories
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: MAINTAIN database of known (user, public_key) pairs. ON successful login, IF (user, public_key) is new, THEN ALERT.
- question: Did a successful SSH login with a new public key occur within 15 minutes of that user's authorized_keys file being modified?
  context: This question creates a high-fidelity alert by correlating two distinct events. A file modification alone could be noise, and a new key login could be legitimate. However, when a user's authorized_keys file is changed and is immediately followed by a login using a new key, the temporal proximity is a strong statistical indicator that an adversary has just established and tested their persistence mechanism.
  answer_sources:
  - Zeek ssh.log
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - File Integrity Monitoring (FIM) logs
  - All SSH-enabled systems
  - Authentication servers
  - Centralized log repositories
  - File servers hosting user home directories
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE file_modification_events on authorized_keys WITH successful_ssh_logins. IF login.user == file.user AND login.key is new AND login.time - file.time < 15 minutes, THEN ALERT.
- question: Has a sequence analysis model detected the pattern of an authorized_keys modification followed by a new key login?
  context: This question uses a more advanced machine learning approach to detect a specific attack sequence amidst a noisy stream of security events. A model like a Hidden Markov Model or LSTM can be trained to recognize the specific state transition from [file modification] to [new key login] as a high-risk pattern, providing a robust detection method that is less prone to false positives from unrelated events.
  answer_sources:
  - Zeek ssh.log
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - File Integrity Monitoring (FIM) logs
  - All SSH-enabled systems
  - Authentication servers
  - Centralized log repositories
  - File servers hosting user home directories
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN sequence model (e.g., LSTM) on event streams. IF model detects sequence [modify authorized_keys] -> [successful login with new key], THEN ALERT.
- question: Has a high-privilege account (e.g., root) been accessed via SSH from a known malicious IP address?
  context: This question focuses on the highest-risk type of access by combining two critical factors: a privileged account and a known malicious source. A successful login to an account like 'root' or 'administrator' from an IP on a threat intelligence feed is a critical security incident that indicates a severe compromise and requires immediate response.
  answer_sources:
  - Zeek ssh.log
  - Zeek conn.log
  - Domain controllers
  - Root-enabled servers
  - Cloud IAM infrastructure
  - Database administrator hosts
  - ESXi hypervisors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FROM zeek_ssh_logs WHERE auth_success == true AND user IN ['root', 'admin'] JOIN threat_intel_ips ON zeek_ssh_logs.source_ip == threat_intel_ips.ip.
- question: Has a high-privilege account been accessed from a source IP, country, or ASN that is not on its strict allow-list?
  context: This question enforces a zero-trust model for privileged accounts. Due to their sensitivity, these accounts should only be accessed from a tightly controlled set of locations. Any successful login from a source outside of this pre-defined baseline (e.g., a new country or unlisted ASN) is a high-severity statistical anomaly that should be treated as a potential compromise.
  answer_sources:
  - Zeek ssh.log
  - Zeek conn.log
  - Domain controllers
  - Root-enabled servers
  - Cloud IAM infrastructure
  - Database administrator hosts
  - ESXi hypervisors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: DEFINE allow_list of (IPs, ASNs, countries) for privileged_users. FOR each successful login to privileged_user, IF source NOT IN allow_list, THEN ALERT.
- question: Has an anomaly detection model, trained specifically on privileged account logins, flagged a recent login as anomalous?
  context: This question applies machine learning to the most critical assets. A generic anomaly detection model might miss subtle deviations in privileged access patterns. By training a specialized model (e.g., One-Class SVM) only on the historical data for privileged accounts, it becomes highly sensitive to any change in behavior (e.g., time of day, source IP), providing a high-fidelity alert for potential abuse.
  answer_sources:
  - Zeek ssh.log
  - Zeek conn.log
  - Domain controllers
  - Root-enabled servers
  - Cloud IAM infrastructure
  - Database administrator hosts
  - ESXi hypervisors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN anomaly detection model exclusively on historical logins for privileged accounts. PREDICT anomaly score for new privileged logins. IF score is outlier, THEN ALERT.
- question: Has the sshd_config file been modified to permit root login or password authentication?
  context: This question looks for an explicit attempt by an adversary to weaken security controls for privilege escalation. Changing 'PermitRootLogin' to 'yes' or 'PasswordAuthentication' to 'yes' in the SSH daemon configuration file opens up high-risk access vectors. Monitoring for these specific string changes provides a clear, symbolic indicator of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Zeek ssh.log
  - File Integrity Monitoring (FIM) logs
  - All SSH-enabled systems
  - System configuration management servers
  - Git repositories storing infrastructure-as-code
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FROM file_or_process_logs, MONITOR '/etc/ssh/sshd_config' for changes. IF change contains 'PermitRootLogin yes' OR 'PasswordAuthentication yes', THEN ALERT.
- question: Has a successful root login occurred within 10 minutes of the sshd_config file being modified to allow it?
  context: This question correlates a suspicious configuration change with its immediate exploitation. Modifying sshd_config to allow root login is suspicious, but seeing a successful root login shortly thereafter confirms that the change was likely malicious and is being actively used. This temporal correlation provides a high-confidence alert for privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Zeek ssh.log
  - File Integrity Monitoring (FIM) logs
  - All SSH-enabled systems
  - System configuration management servers
  - Git repositories storing infrastructure-as-code
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE sshd_config modifications enabling root login WITH successful root logins. IF root login occurs within 10 minutes of modification, THEN ALERT.
- question: Has the multi-stage attack pattern of sshd_config modification, SSH service restart, and successful root login been observed?
  context: This question uses sequence analysis to detect a full kill chain for privilege escalation. An adversary must modify the config, restart the SSH service for the change to take effect, and then log in. Detecting this entire sequence ([config_mod] -> [sshd_restart] -> [root_login]) provides an extremely high-confidence detection that is difficult to dispute.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Zeek ssh.log
  - File Integrity Monitoring (FIM) logs
  - All SSH-enabled systems
  - System configuration management servers
  - Git repositories storing infrastructure-as-code
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: USE sequence model to detect pattern: [modify sshd_config to allow root] -> [process 'systemctl restart sshd'] -> [successful root login from new source].
- question: Was a modification to a privileged account's authorized_keys file followed within 5 minutes by a successful login using a new public key?
  context: This question identifies a classic privilege escalation pattern with high confidence. Modifying a file like /root/.ssh/authorized_keys and then immediately logging in with a previously unseen key is a critical indicator that an adversary has gained the ability to write to the file and is now using that access to elevate their privileges. The short time window makes this a high-fidelity signal.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Zeek ssh.log
  - File Integrity Monitoring (FIM) logs
  - Critical servers with privileged accounts
  - Database servers
  - Virtualization hypervisors (ESXi)
  - Cloud compute instances with root access
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: IF modification to '/root/.ssh/authorized_keys' is followed within 5 minutes by successful 'root' login with a new public key, THEN ALERT.
- question: Has any new public key been added to the root account's authorized_keys file?
  context: This question applies a zero-tolerance policy for modifications to the root account's SSH keys. The baseline assumption is that the rate of legitimate new key additions for 'root' is effectively zero. Therefore, any event matching the pattern of a file modification followed by a login with a new key is a severe statistical outlier (a greater than 4-sigma event) and should be treated as a confirmed incident.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Zeek ssh.log
  - File Integrity Monitoring (FIM) logs
  - Critical servers with privileged accounts
  - Database servers
  - Virtualization hypervisors (ESXi)
  - Cloud compute instances with root access
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE new key additions for 'root' user as zero. ANY modification followed by a new key login is a >4-sigma statistical anomaly. ALERT.
- question: Has a graph-based model detected a new privilege escalation path involving an SSH key?
  context: This question uses graph analytics to discover risky relationships. By modeling users, hosts, and public keys as nodes in a graph, an adversary's actions can create new connections. For example, if a key previously used by a low-privilege user is added to the 'root' account, it creates a new "privilege escalation path" in the graph. Graph algorithms can detect these structural anomalies, revealing lateral movement and escalation attempts.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon for Linux Event ID 1
  - Zeek ssh.log
  - File Integrity Monitoring (FIM) logs
  - Critical servers with privileged accounts
  - Database servers
  - Virtualization hypervisors (ESXi)
  - Cloud compute instances with root access
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL users, hosts, keys as a graph. DETECT when a new edge (login) creates a path from a low-privilege node to a high-privilege node (e.g. root).
- question: Has a cloud API call been used to inject an SSH key into a compute instance, especially by an unusual user or from an untrusted network?
  context: This question targets a cloud-specific vector for privilege escalation. Adversaries with compromised cloud credentials can use API calls (e.g., AWS ModifyInstanceAttribute, GCP setCommonInstanceMetadata) to inject their SSH key into a virtual machine's metadata. This bypasses the need to log into the OS directly. Alerting on these API calls, especially when made by unexpected users or from suspicious IPs, is crucial for cloud security.
  answer_sources:
  - AWS CloudTrail logs
  - Azure Activity Logs
  - Google Cloud Audit Logs
  - Zeek ssh.log
  - Zeek conn.log
  - Cloud provider audit logs
  - Cloud virtual machines
  - Developer workstations with cloud CLI tools installed
  - IAM services
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FROM cloud_audit_logs, ALERT on API calls like 'setCommonInstanceMetadata' or 'ModifyInstanceAttribute' IF initiator is unexpected OR source_ip is untrusted.
- question: Was a cloud API call to modify a VM's SSH key followed within 5 minutes by a successful SSH login to that VM?
  context: This question correlates a cloud control plane action with a data plane event to confirm malicious activity. An API call to inject a key is suspicious; a subsequent SSH login to that VM from a new source IP within minutes of the API call is strong statistical evidence that the injected key was immediately used for access, indicating a successful compromise.
  answer_sources:
  - AWS CloudTrail logs
  - Azure Activity Logs
  - Google Cloud Audit Logs
  - Zeek ssh.log
  - Zeek conn.log
  - Cloud provider audit logs
  - Cloud virtual machines
  - Developer workstations with cloud CLI tools installed
  - IAM services
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE cloud API key-injection events with network logs. IF successful SSH login to target VM occurs within 5 minutes of API call, THEN ALERT.
- question: Has a machine learning model, trained on cloud and network logs, classified a key injection event as malicious?
  context: This question uses a holistic machine learning approach to detect cloud-based privilege escalation. By training a classifier on a rich feature set—including the IAM principal making the API call, their permissions, the API source IP, and details of the subsequent SSH login—the model can learn to distinguish legitimate operational key updates from malicious key injections with high accuracy.
  answer_sources:
  - AWS CloudTrail logs
  - Azure Activity Logs
  - Google Cloud Audit Logs
  - Zeek ssh.log
  - Zeek conn.log
  - Cloud provider audit logs
  - Cloud virtual machines
  - Developer workstations with cloud CLI tools installed
  - IAM services
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN classifier on combined cloud and network log features. PREDICT if API key injection + SSH login sequence is 'malicious'.