name: T1595.002: Vulnerability Scanning
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps to determine if an adversary is performing vulnerability scanning against external-facing infrastructure. It focuses on identifying a range of scanning activities, including connections from IPs on threat intelligence feeds, web requests using known scanner user-agents or targeting sensitive URIs, banner grabbing where a service is identified and the connection is dropped, vertical and horizontal port scans, and sequences of correlated low-fidelity alerts that together indicate a multi-stage reconnaissance campaign.
type: technique
related:
- TA0043: Reconnaissance
contributors:
- Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is an external IP known to a threat intelligence feed connecting to our network?
  context: This question aims to identify initial inbound connections from IPs already flagged as malicious, scanners, TOR exit nodes, or proxies. By querying a threat intelligence database for every inbound connection, we can proactively flag suspicious activity from known bad actors before they proceed further.
  answer_sources:
  - Zeek conn.log
  - Threat Intelligence Feed
  - Network Perimeter Firewall
  - Threat Intelligence Platform
  - Cloud Network Security Groups
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each connection IN zeek_conn_logs
      LET source_ip = connection.id_orig_h
      QUERY threat_intel_db FOR source_ip
      IF threat_intel_db.category IN ['scanner', 'malicious', 'TOR', 'proxy']
        ALERT
- question: Is a known malicious IP exhibiting abnormally persistent connection activity?
  context: This question seeks to differentiate between casual, opportunistic scanning and persistent, targeted activity from a known malicious source. By calculating a baseline for connection counts from IPs in specific threat categories, we can identify outliers whose activity level is significantly higher than their peers, suggesting a more focused interest in our infrastructure.
  answer_sources:
  - Zeek conn.log
  - Threat Intelligence Feed
  - Network Perimeter Firewall
  - Threat Intelligence Platform
  - Cloud Network Security Groups
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      LET threat_ips = GET_THREAT_IPS_FROM_LAST_24H()
      FOR each category IN threat_categories
        LET ips_in_category = FILTER threat_ips BY category
        LET connection_counts = COUNT connections FOR each_ip IN ips_in_category
        LET threshold = PERCENTILE(connection_counts, 95)
        FOR each_ip, count IN connection_counts
          IF count > threshold
            ALERT
- question: Can we predict if a connection from a CTI-flagged IP is part of a targeted reconnaissance campaign?
  context: This question uses machine learning to score the maliciousness of a connection from an already-flagged IP. By analyzing features like connection volume, port diversity, and connection states (e.g., rejected vs. established), a logistic regression model can provide a probability score, helping to prioritize the most likely targeted and sophisticated reconnaissance attempts for immediate investigation.
  answer_sources:
  - Zeek conn.log
  - Threat Intelligence Feed
  - Network Perimeter Firewall
  - Threat Intelligence Platform
  - Cloud Network Security Groups
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_connection FROM cti_flagged_ip
        EXTRACT features (threat_category, conn_count_24h, distinct_ports, state_ratios)
        LET probability = PREDICT with logistic_regression_model(features)
        IF probability > 0.9
          ALERT
- question: Are inbound web requests using user agents of known scanning tools or targeting sensitive files/paths?
  context: This question focuses on identifying common web-based vulnerability scanning techniques. Scanners often use specific User-Agent strings (e.g., 'nmap', 'nikto') or probe for common misconfigurations and sensitive files (e.g., '.git/config', '/wp-admin'). Alerting on these patterns in web server logs can quickly reveal automated reconnaissance attempts against web applications.
  answer_sources:
  - Zeek http.log
  - Windows IIS Logs
  - Internet-facing Web Servers
  - Web Application Firewalls
  - Application Gateways
  - Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE scanner_ua_regex = 'nmap|sqlmap|nikto'
      DEFINE sensitive_path_regex = '/\.env|/\.git|/wp-admin'
      FOR each request IN http_logs
        IF request.user_agent MATCHES scanner_ua_regex OR request.uri MATCHES sensitive_path_regex
          ALERT
- question: Is a source IP generating an unusually high ratio of HTTP errors, indicative of forced browsing or fuzzing?
  context: Adversaries performing forced browsing or fuzzing will generate a large number of requests for non-existent pages, resulting in a high rate of 4xx (Client Error) or 5xx (Server Error) responses. This question identifies such behavior by calculating the error-to-total-request ratio for each source IP within a short time window, flagging IPs that are likely probing for hidden content.
  answer_sources:
  - Zeek http.log
  - Windows IIS Logs
  - Internet-facing Web Servers
  - Web Application Firewalls
  - Application Gateways
  - Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 5_minute_window
        GROUP requests BY source_ip
        FOR each source_ip
          LET total_requests = COUNT(requests)
          LET error_requests = COUNT(requests WHERE status_code >= 400)
          IF total_requests >= 20 AND (error_requests / total_requests) > 0.80
            ALERT
- question: Can we classify the intent of a web request URI to detect vulnerability probes or injection attempts?
  context: This question leverages Natural Language Processing (NLP) to move beyond simple regex matching and understand the intent behind a web request's URI. A trained model can classify URIs into categories like 'SQL Injection', 'Path Traversal', or 'Vulnerability Probe'. This provides a more sophisticated method for detecting malicious web activity, especially for novel or obfuscated attack patterns.
  answer_sources:
  - Zeek http.log
  - Windows IIS Logs
  - Internet-facing Web Servers
  - Web Application Firewalls
  - Application Gateways
  - Load Balancers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_request IN http_logs
        LET uri = request.uri
        LET classification = PREDICT with nlp_model(uri)
        IF classification NOT IN ['Benign Navigation']
          AGGREGATE by source_ip and classification
          IF count is high
            ALERT
- question: Is an external IP connecting to a service, receiving a banner, and immediately disconnecting without authenticating?
  context: This behavior, known as banner grabbing, is a common reconnaissance technique where an adversary identifies the type and version of a running service (e.g., SSH, RDP) to find potential vulnerabilities. This question identifies these short-lived connections by correlating network connection logs (which show a connection established and quickly torn down) with protocol-specific logs (which show a lack of a subsequent authentication attempt).
  answer_sources:
  - Zeek conn.log
  - Zeek ssh.log
  - Zeek rdp.log
  - Windows Event ID 5156
  - DMZ Servers
  - VPN Concentrators
  - Externally-facing servers hosting SSH/RDP/FTP
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each connection IN zeek_conn_log WHERE state IN ['S1', 'RSTO'] AND duration < 2s
        LET has_auth = SEARCH protocol_logs FOR connection.uid within 30s
        IF NOT has_auth
          ALERT
- question: Is a source IP exhibiting an anomalously low ratio of successful authentications to total connection attempts for a sensitive service?
  context: This question provides a statistical method to detect banner grabbing or failed brute-force attempts. For a given service like SSH or RDP, a legitimate user will have a high success rate of authentication. An attacker performing reconnaissance or initial access attempts will have a very low success rate. By baselining this ratio, we can flag source IPs whose behavior deviates significantly from the norm.
  answer_sources:
  - Zeek conn.log
  - Zeek ssh.log
  - Zeek rdp.log
  - Windows Event ID 5156
  - DMZ Servers
  - VPN Concentrators
  - Externally-facing servers hosting SSH/RDP/FTP
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each sensitive_port
        CALCULATE baseline auth_success_ratio per source_ip per hour
        LET threshold = PERCENTILE(baseline, 5)
        FOR each source_ip in current_hour
          CALCULATE current_ratio
          IF current_ratio < threshold
            ALERT
- question: Is there a sudden spike in anomalously short-duration connections from a single source IP to a specific service port?
  context: This question uses time-series anomaly detection to identify banner grabbing at scale. An automated tool will generate many very short connections in a brief period. An Isolation Forest or similar model can learn the normal distribution of connection durations for a given port and flag a sudden burst of outliers from a single source as a potential automated scanning event.
  answer_sources:
  - Zeek conn.log
  - Zeek ssh.log
  - Zeek rdp.log
  - Windows Event ID 5156
  - DMZ Servers
  - VPN Concentrators
  - Externally-facing servers hosting SSH/RDP/FTP
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL normal connection duration per port using Isolation Forest
      FOR each new_connection in zeek_conn_log
        LET is_anomaly = PREDICT with model(connection.duration)
        IF is_anomaly
          AGGREGATE anomalies by source_ip and port over time
          IF spike detected
            ALERT
- question: Is a single external IP attempting to connect to a large number of distinct ports on a single host in a short time frame?
  context: This question aims to detect a classic 'vertical' port scan. Attackers perform this activity to discover all open ports and running services on a single target host. A simple threshold-based rule (e.g., >50 unique ports from one source to one destination in <1 minute) is a highly effective way to detect this common reconnaissance technique.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Network Perimeter Firewall
  - Edge Routers
  - Cloud Network Security Groups
  - Individual Host Firewalls
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GROUP connections by source_ip, dest_ip over 60s window
      FOR each group
        LET distinct_ports = COUNT_UNIQUE(dest_port)
        IF distinct_ports > 50
          ALERT
- question: Does the set of destination ports contacted by a source IP show a high degree of randomness?
  context: This question uses information theory to detect port scans. A normal user's traffic will contact a small, predictable set of ports (e.g., 80, 443), resulting in low entropy. A port scan, which contacts many different ports, will have a high Shannon entropy score. This statistical method can detect scans that are slower or more distributed than what a simple threshold rule might catch.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Network Perimeter Firewall
  - Edge Routers
  - Cloud Network Security Groups
  - Individual Host Firewalls
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 5_minute_window
        GROUP connections by source_ip
        FOR each source_ip
          LET ports_contacted = GET_DEST_PORTS(connections)
          LET entropy = SHANNON_ENTROPY(ports_contacted)
          IF entropy > 3.5
            ALERT
- question: Can we use clustering to identify a rapid vertical port scan in connection data?
  context: This question applies a density-based clustering algorithm like DBSCAN to a dataset of (timestamp, destination_port). A rapid vertical port scan will appear as a dense cluster of points that is very narrow on the time axis but very wide on the port axis. This machine learning approach can visually and programmatically identify the distinct shape of a port scan in network traffic data.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Network Perimeter Firewall
  - Edge Routers
  - Cloud Network Security Groups
  - Individual Host Firewalls
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip
        CREATE dataset of (timestamp, dest_port) points
        APPLY DBSCAN to dataset
        ANALYZE clusters
        IF cluster is found with low time_variance and high port_variance
          ALERT
- question: Is a single external IP attempting to connect to the same port across many different hosts in our network?
  context: This question is designed to detect a 'horizontal' port scan or network sweep. Attackers use this to find all hosts in a subnet that have a specific port open (e.g., port 445 for SMB, port 3389 for RDP). A threshold-based rule (e.g., >20 unique hosts on the same port from one source in <1 minute) is a straightforward and effective detection method.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Network Perimeter Firewall
  - Edge Routers
  - Cloud Network Security Groups
  - Subnet Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GROUP connections by source_ip, dest_port over 60s window
      FOR each group
        LET distinct_hosts = COUNT_UNIQUE(dest_ip)
        IF distinct_hosts > 20
          ALERT
- question: For a specific service port, is any source IP contacting an anomalously high number of unique destination hosts?
  context: This question provides a statistical approach to detecting network sweeps that is more dynamic than a fixed threshold. By baselining the normal activity for a specific port (i.e., how many hosts a typical source IP talks to on that port), we can identify any source IP whose activity falls into the extreme upper percentile. This helps detect sweeps that might be too slow to trigger a simple time-windowed rule.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Network Perimeter Firewall
  - Edge Routers
  - Cloud Network Security Groups
  - Subnet Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 5_minute_window
        GROUP connections by source_ip, dest_port
        FOR each group
          LET unique_hosts = COUNT_UNIQUE(dest_ip)
          LET threshold = 99th_PERCENTILE for that dest_port
          IF unique_hosts > threshold
            ALERT
- question: Can time-series analysis detect anomalous spikes in the number of unique hosts contacted by a source IP on a specific port?
  context: This question applies advanced time-series anomaly detection to identify network sweeps. For a given port, we can model the count of unique destination hosts contacted by a source IP over time. An algorithm like S-H-ESD, which accounts for seasonality, can detect sudden, uncharacteristic spikes in this metric, indicating that a source IP has begun a network sweep.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Network Perimeter Firewall
  - Edge Routers
  - Cloud Network Security Groups
  - Subnet Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each high_traffic_port
        CREATE time_series of unique_dest_hosts_per_source_ip
        APPLY S-H-ESD algorithm to time_series
        IF anomalous spike is detected for a source_ip
          ALERT
- question: Has a sequence of related alerts, such as a port scan followed by a web application probe, occurred for the same source IP?
  context: Individual low-fidelity alerts can be noisy, but a sequence of them from a single source IP is a strong indicator of a multi-stage attack. This question aims to correlate different types of alerts (e.g., port scan, web probe) that occur within a specific time window for the same attacker IP, creating a higher-fidelity 'meta-alert' that represents a more complete picture of the reconnaissance activity.
  answer_sources:
  - SIEM Alerts
  - Zeek conn.log
  - Zeek http.log
  - SIEM / Log Aggregation Platform
  - Security Orchestration, Automation, and Response (SOAR) Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      WHEN Alert_A(source_ip, target_A) occurs
      WATCH for Alert_B(source_ip, target_B) within 60 minutes
      IF Alert_B occurs AND target_B was discovered in Alert_A
        CREATE meta_alert
- question: Does the aggregated risk score of all alerts associated with a single source IP exceed a defined threshold?
  context: This question describes a Risk-Based Alerting (RBA) approach. Instead of treating all alerts equally, we assign a risk score to each type (e.g., a CTI hit is riskier than a simple port scan). By summing these scores for a source IP over a sliding time window, we can trigger a high-priority incident only when the cumulative activity indicates a significant threat, effectively reducing alert fatigue and focusing analyst attention.
  answer_sources:
  - SIEM Alerts
  - Zeek conn.log
  - Zeek http.log
  - SIEM / Log Aggregation Platform
  - Security Orchestration, Automation, and Response (SOAR) Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE risk_scores = {PortScan: 10, WebProbe: 15, CTIHit: 25}
      FOR each 1_hour_window
        GROUP alerts by source_ip
        FOR each source_ip
          LET total_risk = SUM(risk_scores for each alert)
          IF total_risk > 40
            CREATE incident
- question: Does the sequence of alerts from a source IP match a known malicious TTP pattern?
  context: This question involves using machine learning to identify known attack chains. By mining historical alert data, we can discover common sequences of attacker behavior (e.g., 'CTI Hit -> Port Scan -> Web Probe'). A model trained on these patterns can then analyze the live stream of alerts in real-time, classifying a sequence of actions from a single IP as a known TTP and providing high-confidence detection of an ongoing campaign.
  answer_sources:
  - SIEM Alerts
  - Zeek conn.log
  - Zeek http.log
  - SIEM / Log Aggregation Platform
  - Security Orchestration, Automation, and Response (SOAR) Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN sequence_pattern_model (e.g., PrefixSpan) on historical alert sequences
      FOR each new alert
        ADD to sequence for source_ip
        LET matches_pattern = PREDICT with model(current_sequence)
        IF matches_pattern
          ALERT