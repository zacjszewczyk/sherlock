name: 'T1071.001: Web Protocols'
id: '5e0f1a9b-3c8d-4a1e-8f2b-6d7c9e0a1b2c'
description: 'This playbook helps determine if an adversary is using web protocols (HTTP/S) for command and control (C2) communication. It focuses on identifying malicious C2 traffic by correlating outbound connections with threat intelligence, detecting known C2 framework signatures (like specific User-Agent strings, URI patterns, or JA3/JA3S fingerprints), identifying periodic beaconing activity, flagging connections from unauthorized processes or unusual file paths, and spotting anomalous request characteristics such as high entropy, unusually long URIs, or skewed data transfer ratios indicative of data exfiltration.'
type: technique
related:
  - 'TA0011: Command And Control'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: 'Is an internal host making an outbound HTTP/S connection to a destination IP, domain, or certificate hash known to be associated with C2 servers?'
    context: 'This question is crucial for identifying direct communication with known malicious infrastructure. By cross-referencing outbound network traffic (destination IPs, requested domains from HTTP Host headers or SNI, and SSL/TLS certificate hashes) against a high-confidence threat intelligence feed of C2 servers, analysts can quickly detect confirmed malicious activity and prioritize it for immediate investigation.'
    answer_sources:
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Network sensors at internet egress points'
      - 'DNS resolvers'
      - 'Web proxies'
      - 'Threat Intelligence Blocklist'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN Zeek conn.log, http.log, ssl.log ON uid
          WHERE conn.log.resp_p IN (80, 443)
          MATCH conn.log.resp_h, http.log.host, ssl.log.cert_chain_fuids
          AGAINST threat_intel_feed(type=ip), threat_intel_feed(type=domain), threat_intel_feed(type=certhash)
          RETURN alerts for any matches
  - question: 'Are internal hosts communicating with rare or newly observed domains that could indicate a C2 channel?'
    context: 'Adversaries often use unique or newly registered domains for C2 that have not yet been flagged by threat intelligence. This question helps uncover these by identifying domains with very low prevalence (i.e., accessed by only a few hosts) within the organization. Such low-frequency domains, especially those not on an allowlist of known business partners, are highly suspicious and warrant investigation as potential C2 infrastructure.'
    answer_sources:
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Network sensors at internet egress points'
      - 'DNS resolvers'
      - 'Web proxies'
      - 'Domain allowlist'
    range: last 24 hours
    queries:
      - technology: pseudocode
        query: |
          FOR each FQDN in http.log.host, ssl.log.server_name over 24h:
            CALCULATE unique_source_ip_count
          IDENTIFY FQDNs in bottom 1st percentile of prevalence
          FILTER OUT FQDNs on business_partner_allowlist
          RETURN suspicious FQDNs for investigation
  - question: 'Can machine learning models identify suspicious outbound web connections based on their network characteristics?'
    context: 'This question explores using a data science approach to C2 detection. By training a supervised classification model (like a Random Forest) on features engineered from network logs—such as domain name length and entropy, destination ASN, and SSL certificate attributes—we can create a system that scores new connections in real-time. This allows for the proactive detection of potentially malicious traffic that may not match any known signatures but exhibits characteristics similar to previously seen C2 activity.'
    answer_sources:
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Labeled threat intelligence data (for training)'
      - 'Network sensors at internet egress points'
      - 'DNS resolvers'
      - 'Web proxies'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each connection in Zeek logs:
            EXTRACT features (domain length, entropy, TLD, ASN, cert_age, is_self_signed)
          APPLY pre-trained classification model
          SCORE the connection
          RETURN connections with score > threshold (e.g., 0.90) for alerting
  - question: 'Does an outbound HTTP/S connection contain signatures of known C2 frameworks, such as specific User-Agent strings, URI patterns, or JA3/JA3S fingerprints?'
    context: 'This question aims to detect C2 activity by matching traffic against specific, high-fidelity signatures of known malware and C2 frameworks (e.g., Cobalt Strike). By scanning User-Agent strings, URIs, and TLS fingerprints (JA3/JA3S) for patterns associated with malicious tools, analysts can identify compromised systems with a high degree of confidence.'
    answer_sources:
      - 'Zeek http.log'
      - 'Zeek ssl.log'
      - 'Network sensors at internet egress points'
      - 'Web proxies'
      - 'Endpoint Detection and Response (EDR) agents'
      - 'C2 Signature Database (Regex, JA3/JA3S)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SCAN http.log.user_agent, http.log.uri with regex_library_of_c2_patterns
          MATCH ssl.log.ja3, ssl.log.ja3s against blocklist_of_c2_hashes
          RETURN alerts for any matches
  - question: 'Is an internal host using a rare or uncommon TLS client (identified by its JA3 hash) for outbound communication?'
    context: 'Malware often uses custom TLS libraries, resulting in unique or rare JA3 fingerprints within an organization. This question helps identify potential C2 by flagging JA3 hashes that are seen on a very small percentage of endpoints (e.g., less than 1%). While not always malicious, such anomalies are worth investigating, especially when cross-referenced with public repositories to rule out legitimate but uncommon applications.'
    answer_sources:
      - 'Zeek ssl.log'
      - 'Network sensors at internet egress points'
      - 'Web proxies'
      - 'Endpoint Detection and Response (EDR) agents'
      - 'Public JA3 repositories'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each unique JA3 hash in ssl.log:
            CALCULATE prevalence (count of distinct hosts with this JA3)
          FLAG JA3 hashes with prevalence < 1% of total endpoints
          ENRICH with public JA3 data
          RETURN anomalous JA3 hashes for investigation
  - question: 'Can anomalous C2 communication channels be identified by clustering outbound web request URIs based on their structural features?'
    context: 'This question applies an unsupervised machine learning approach to find C2 activity. C2 URIs often have different structural characteristics (length, parameter count, entropy) than normal web traffic. By using a clustering algorithm like DBSCAN, we can group all URIs from an organization. Small, isolated clusters that are distant from the large clusters of normal traffic are highly suspicious and may represent distinct C2 communication patterns.'
    answer_sources:
      - 'Zeek http.log'
      - 'Network sensors at internet egress points'
      - 'Web proxies'
      - 'Endpoint Detection and Response (EDR) agents'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each URI in http.log:
            EXTRACT features (length, query_param_count, path_depth, entropy)
          APPLY DBSCAN clustering algorithm to the feature set
          INVESTIGATE small, dense clusters identified as outliers
          RETURN URIs from outlier clusters
  - question: 'Is an internal host communicating with an external destination with a highly regular, machine-like periodicity, indicative of C2 beaconing?'
    context: 'C2 frameworks often use "beacons" that contact the C2 server at fixed intervals (e.g., every 60 seconds). This question aims to detect this behavior by analyzing connection timestamps for each source-destination pair. A sequence of connections with a stable time interval and low jitter (e.g., 10+ connections all 60 +/- 2 seconds apart) is a strong indicator of automated, non-human C2 communication.'
    answer_sources:
      - 'Zeek conn.log'
      - 'Network sensors at internet egress points'
      - 'Host-based firewalls'
      - 'Netflow collectors'
    range: last 30 minutes
    queries:
      - technology: pseudocode
        query: |
          FOR each source-destination IP pair:
            BUFFER connection timestamps in a 30-minute window
          CALCULATE time deltas between consecutive connections
          IF sequence_count >= 10 AND time_delta is stable (e.g., +/- 2s):
            RETURN alert for beaconing detection
  - question: 'Are there any source-destination communication pairs that exhibit both highly consistent timing and consistent data sizes, suggesting programmatic C2 beaconing?'
    context: 'This question refines beacon detection by looking for two signs of automation simultaneously: regularity in timing and regularity in the amount of data sent. By calculating the standard deviation of both the inter-arrival times and the bytes sent for each communication pair, we can identify traffic that is not just periodic but also uniform in size. Pairs with very low standard deviations in both metrics are highly likely to be C2 beacons and should be investigated, after filtering out known benign services.'
    answer_sources:
      - 'Zeek conn.log'
      - 'Network sensors at internet egress points'
      - 'Host-based firewalls'
      - 'Netflow collectors'
      - 'Allowlist of known services'
    range: last 1 hour
    queries:
      - technology: pseudocode
        query: |
          FOR each source-destination IP pair over 1 hour:
            CALCULATE stddev(inter_arrival_times)
            CALCULATE stddev(orig_bytes)
          FILTER out pairs on service_allowlist
          IF stddev(inter_arrival_times) is low AND stddev(orig_bytes) is low:
            RETURN suspicious pair for investigation
  - question: 'Can advanced time-series analysis and anomaly detection models identify C2 beaconing that might be missed by simpler statistical methods?'
    context: 'This question proposes a sophisticated method for beacon detection. By treating connection events as a time series, a Fast Fourier Transform (FFT) can be applied to identify dominant frequencies, which directly correspond to beaconing intervals. These frequencies, along with other features like connection count and data size variance, can be fed into an anomaly detection model (e.g., Isolation Forest) to score the traffic. This approach can uncover more complex or hidden beaconing patterns.'
    answer_sources:
      - 'Zeek conn.log'
      - 'Network sensors at internet egress points'
      - 'Host-based firewalls'
      - 'Netflow collectors'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each high-traffic source-destination pair:
            CREATE time series from connection events
            APPLY FFT to find dominant frequencies
            EXTRACT features (dominant_frequency, amplitude, conn_count, data_size_variance)
            APPLY anomaly detection model (e.g., Isolation Forest)
            RETURN pairs with high anomaly scores
  - question: 'Is an unauthorized process, or a process running from an unusual location, initiating outbound web traffic?'
    context: 'Legitimate web traffic is typically generated by a small set of approved applications, like web browsers. This question aims to find C2 activity by identifying network connections to ports 80/443 that are initiated by processes not on this allowlist (e.g., cmd.exe, powershell.exe). The suspicion is further increased if the process is running from a temporary or user-writable public directory, which are common locations for malware droppers.'
    answer_sources:
      - 'Sysmon Event ID 3'
      - 'Windows Event ID 4688'
      - 'Windows Event ID 5156'
      - 'Zeek conn.log'
      - 'All Windows endpoints and servers'
      - 'Domain Controllers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          QUERY Sysmon Event ID 3
          WHERE DestinationPort IN (80, 443)
          AND Image NOT IN (allowlist of browsers/updaters)
          OR ImagePath IN (list of temp/public directories)
          RETURN alerts for suspicious network connections
  - question: 'Is outbound web traffic being initiated by a process with a suspicious parent process or a high-entropy command line?'
    context: 'Malware often uses legitimate processes to spawn malicious ones (e.g., Microsoft Word spawning PowerShell). This question seeks to identify this by baselining normal parent-child process relationships and flagging network connections from processes with a rare or statistically improbable parent. Additionally, obfuscated or complex commands, often used by malware, can be detected by flagging processes with unusually high command-line entropy that also initiate network connections.'
    answer_sources:
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 3'
      - 'Windows Event ID 4688'
      - 'Windows Event ID 5156'
      - 'Zeek conn.log'
      - 'All Windows endpoints and servers'
      - 'Domain Controllers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE normal (ParentImage, Image) relationships from Sysmon
          FOR each new network connection (Sysmon EID 3):
            CHECK if its (ParentImage, Image) relationship is rare
            CALCULATE command-line entropy for the process
            IF relationship is rare OR command-line entropy is high (e.g., top 98th percentile):
              RETURN alert for investigation
  - question: 'Can a machine learning model be trained to classify network-initiating processes as benign or malicious based on their context?'
    context: 'This question leverages machine learning to automate the detection of malicious processes initiating network connections. By training a model on a rich set of features from endpoint logs (e.g., process name, parent process, file path entropy, command line attributes, user context), we can create a classifier that scores each network-initiating process. This provides a powerful, scalable way to identify malicious activity that might otherwise be missed.'
    answer_sources:
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 3'
      - 'Windows Event ID 4688'
      - 'Windows Event ID 5156'
      - 'Zeek conn.log'
      - 'All Windows endpoints and servers'
      - 'Domain Controllers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network-initiating process (Sysmon EID 3):
            EXTRACT features (process name, parent, path entropy, cmdline length/entropy, user)
          APPLY pre-trained classification model
          SCORE the process
          RETURN processes with high malicious score for alerting
  - question: 'Are there outbound HTTP/S connections with static anomalous characteristics, such as an extremely long URI, a high data upload-to-download ratio, or a generic User-Agent?'
    context: 'This question focuses on simple, static rules to find clear outliers indicative of C2. C2 channels may use very long URIs to encode information, exfiltrate data (leading to a high upload/download ratio), or use generic, non-browser User-Agents (like "curl"). These fixed-threshold rules provide a quick and efficient way to catch unsophisticated or misconfigured C2 implants.'
    answer_sources:
      - 'Zeek http.log'
      - 'Zeek conn.log'
      - 'Network sensors at internet egress points'
      - 'Web proxies with full packet capture or deep logging capabilities'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          QUERY http.log, conn.log
          ALERT IF (
            http.log.uri_length > 1024
          ) OR (
            conn.log.orig_bytes / conn.log.resp_bytes > 10 AND conn.log.orig_bytes > 1KB
          ) OR (
            http.log.user_agent is null or matches generic list
          )
  - question: 'Are there outbound HTTP/S connections that are anomalous when compared to the organization''s own dynamic baseline of normal traffic?'
    context: 'Instead of using static thresholds, this question involves creating a dynamic baseline of what is "normal" for the organization''s web traffic. By calculating rolling baselines for metrics like URI length, URI entropy, and the ratio of sent-to-received bytes, we can detect deviations that are anomalous *for our specific environment*. This adaptive approach is more resilient to changes in legitimate application behavior and is better at catching outliers than fixed rules.'
    answer_sources:
      - 'Zeek http.log'
      - 'Zeek conn.log'
      - 'Network sensors at internet egress points'
      - 'Web proxies with full packet capture or deep logging capabilities'
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN rolling 30-day baseline (95th/99th percentile) for:
            - URI length
            - URI entropy
            - Upload/download byte ratio
          FOR each new request/connection:
            COMPARE metrics against dynamic baseline
            ALERT if any metric exceeds its threshold
  - question: 'Can an unsupervised anomaly detection model, like an autoencoder, identify novel C2 requests that deviate from learned normal behavior?'
    context: 'This question proposes using an autoencoder, a type of neural network, to learn the fundamental patterns of an organization''s normal HTTP traffic. The autoencoder is trained to reconstruct "normal" requests accurately. When a new, anomalous request (like one from a C2 tool) is fed into the model, it will have a high reconstruction error because it doesn''t fit the learned patterns. This technique is powerful for finding new and unknown C2 threats without relying on pre-existing signatures.'
    answer_sources:
      - 'Zeek http.log'
      - 'Zeek conn.log'
      - 'Network sensors at internet egress points'
      - 'Web proxies with full packet capture or deep logging capabilities'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN autoencoder model on vectorized features of normal HTTP requests
          FOR each new HTTP request:
            CALCULATE reconstruction error using the trained autoencoder
          INVESTIGATE requests with high reconstruction error
          CLUSTER high-error events to find emerging threats