name: T1071.001: Web Protocols
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify if an adversary is using web protocols (HTTP/S) for command and control (C2) communication. It provides investigative questions to detect this technique through various means, including matching traffic against threat intelligence of known C2 servers, identifying signatures of C2 frameworks (like specific User-Agents or JA3 fingerprints), detecting periodic beaconing behavior, finding non-standard processes making outbound web connections (e.g., a Word document spawning a PowerShell network connection), and flagging anomalous characteristics in the web traffic itself, such as unusually long URIs or high data upload volumes.
type: technique
related:
  - TA0011: Command And Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are internal hosts connecting to known malicious IPs, domains, or certificate hashes associated with C2 servers?
    context: This question aims to identify direct connections to known adversary infrastructure. Matching outbound network traffic against a high-confidence threat intelligence blocklist provides a strong, direct indicator of a potential compromise. These blocklists contain IPs, domains, and SSL/TLS certificate hashes that have been previously identified and verified as part of command and control networks.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network sensors at internet egress points
      - DNS resolvers
      - Web proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN Zeek conn.log, http.log, ssl.log ON uid
          WHERE conn.log.port IN (80, 443)
          MATCH conn.log.destination_ip, http.log.host, ssl.log.cert_hash AGAINST threat_intel_blocklist
          IF match FOUND
            ALERT high_severity
  - question: Are internal hosts connecting to unusually rare or low-prevalence domains that could be indicative of C2 activity?
    context: Adversaries often use newly registered or purpose-built domains for C2 that are not widely visited by others in the organization. By identifying domains with very low prevalence (i.e., accessed by only a few internal hosts), we can uncover potential C2 channels. This technique, often called 'domain stacking' or 'prevalence analysis', helps filter out the noise of popular websites to focus on suspicious outliers. It's important to maintain an allowlist of known, legitimate low-traffic sites to reduce false positives.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network sensors at internet egress points
      - DNS resolvers
      - Web proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each destination_domain IN (http.log.host, ssl.log.server_name) over 24 hours:
            CALCULATE prevalence = COUNT(DISTINCT source_ip)
          IDENTIFY domains in bottom 1st percentile of prevalence
          FILTER OUT domains on business_partner_allowlist
          FLAG remaining rare domains as suspicious
  - question: Can we use machine learning to score and identify outbound web connections that exhibit characteristics of C2 traffic?
    context: This question involves moving beyond simple signatures to a more sophisticated, behavioral approach. By extracting features like domain name length, entropy, TLD, destination ASN, and SSL certificate properties, we can train a machine learning model (e.g., Random Forest) to distinguish between benign and malicious C2 traffic. This model can then score new, unseen connections in real-time, allowing for the detection of novel C2 infrastructure that isn't yet on any blocklist.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network sensors at internet egress points
      - DNS resolvers
      - Web proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each connection IN Zeek logs:
            EXTRACT features (domain_length, domain_entropy, TLD, ASN, cert_age, is_self_signed)
          INPUT features into pre-trained classification_model
          IF model_score > 0.90
            ALERT as potential C2
  - question: Are outbound connections using User-Agent strings, URIs, or JA3/JA3S fingerprints that match known C2 framework signatures?
    context: Many C2 frameworks (e.g., Cobalt Strike, Metasploit) have default or recognizable signatures in the traffic they generate. This can include specific User-Agent strings, URI patterns used for check-ins, or unique TLS fingerprints (JA3/JA3S) created by the client/server handshake. Searching for these known-bad signatures is an effective way to identify the use of specific adversary toolkits.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Network sensors at internet egress points
      - Web proxies
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SCAN http.log.user_agent, http.log.uri WITH c2_regex_library
          MATCH ssl.log.ja3, ssl.log.ja3s AGAINST c2_ja3_blocklist
          IF match FOUND
            ALERT on signature match
  - question: Are any TLS clients using rare or anomalous JA3 fingerprints within the organization?
    context: A JA3 hash is a fingerprint of how a client communicates over TLS. While popular applications like web browsers have common JA3s, malware often uses custom HTTP libraries, resulting in rare or unique JA3s. By calculating the prevalence of each JA3 hash across the enterprise, we can identify outliers that may correspond to malicious tools, even if the specific signature is not yet known.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Network sensors at internet egress points
      - Web proxies
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each unique ja3_hash IN ssl.log:
            CALCULATE prevalence = COUNT(DISTINCT host)
          FLAG ja3_hashes with prevalence < 1% of total hosts
          ENRICH with public JA3 repositories to filter known-good rare applications
  - question: Can we identify clusters of anomalous URIs that suggest programmatic C2 communication?
    context: Unlike human-driven web browsing, C2 communications often use algorithmically generated or highly structured URIs. These URIs might share characteristics like length, parameter count, or character entropy. By using a clustering algorithm like DBSCAN, we can group all observed URIs. Small, dense clusters that are mathematically distant from the large clusters of normal web traffic can reveal these programmatic C2 URI structures.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Network sensors at internet egress points
      - Web proxies
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each uri IN http.log:
            EXTRACT features (uri_length, query_param_count, path_depth, entropy)
          APPLY DBSCAN clustering algorithm to feature set
          INVESTIGATE small, dense, and distant clusters as potential C2
  - question: Are any internal hosts communicating with an external destination with machine-like regularity and low jitter?
    context: C2 beaconing involves an implant on a compromised host calling back to the C2 server at regular intervals. This programmatic communication often has a highly consistent time interval (e.g., every 60 seconds) with very little variation or 'jitter'. This question aims to detect these periodic signals by analyzing the timestamps of connections between a single internal host and a single external destination over a short time window.
    answer_sources:
      - Zeek conn.log
      - Network sensors at internet egress points
      - Host-based firewalls
      - Netflow collectors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP connections by source_ip, destination_ip over 30-minute windows
          FOR each group:
            CALCULATE time deltas between consecutive connections
          IF a sequence of >= 10 connections has a stable time delta (e.g., 60s +/- 2s)
            ALERT as beaconing
  - question: Are there any source-destination traffic pairs that show abnormally low variation in connection timing and data size, suggesting beaconing?
    context: In addition to regular timing, C2 check-in beacons often involve sending a consistent amount of data (e.g., a small 'heartbeat' packet). By analyzing a stream of traffic between a source and destination, we can calculate the standard deviation of both the inter-arrival times and the bytes sent. If both values are exceptionally low, it strongly indicates automated, non-human communication characteristic of a C2 beacon.
    answer_sources:
      - Zeek conn.log
      - Network sensors at internet egress points
      - Host-based firewalls
      - Netflow collectors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP connections by source_ip, destination_ip over 1-hour windows
          FOR each group:
            CALCULATE std_dev(inter_arrival_times)
            CALCULATE std_dev(bytes_sent)
          FILTER OUT known update services via allowlist
          FLAG pairs where both std_dev values are in the bottom 5th percentile
  - question: Can we use frequency analysis on connection time series to detect periodic C2 beaconing?
    context: This question applies signal processing techniques to network traffic analysis. By treating the connection events between a host and a destination as a time series, a Fast Fourier Transform (FFT) can be used to transform the data into the frequency domain. A strong peak in the frequency domain reveals a dominant, repeating cycle, which directly corresponds to a beaconing interval. This method is robust for identifying periodicity even in noisy traffic.
    answer_sources:
      - Zeek conn.log
      - Network sensors at internet egress points
      - Host-based firewalls
      - Netflow collectors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source-destination pair:
            CREATE time series from connection timestamps
            APPLY Fast Fourier Transform (FFT) to time series
            IDENTIFY dominant frequency and its amplitude
          USE anomaly detection model on features (frequency, amplitude, count) to score C2 likelihood
  - question: Are non-browser processes or processes from unusual locations initiating outbound web connections?
    context: Legitimate outbound web traffic is typically generated by a small set of applications, primarily web browsers and software updaters. When a process like 'svchost.exe' running from a temporary directory or an Office application initiates an HTTP/S connection, it is highly suspicious. This question aims to identify such activity by monitoring network connections at the endpoint and checking the initiating process against an allowlist of expected applications and file paths.
    answer_sources:
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows endpoints and servers
      - Domain Controllers (for security log aggregation)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR Sysmon Event ID 3 (Network Connection)
          FILTER for DestinationPort 80 or 443
          ALERT IF process_name NOT IN ['chrome.exe', 'firefox.exe', 'svchost.exe', ...]
          OR IF process_path CONTAINS ['%TEMP%', 'C:\\Users\\Public\\']
  - question: Are network connections being made by processes with rare parent-child relationships or high-entropy command lines?
    context: Adversaries often use legitimate processes to launch malicious activity, creating unusual process lineages (e.g., winword.exe spawning powershell.exe). Furthermore, they may use obfuscated or packed commands, resulting in high-entropy command lines. This question looks for network connections originating from processes that were spawned by a statistically rare parent or that have an unusually complex command line, both of which are indicators of malicious execution.
    answer_sources:
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows endpoints and servers
      - Domain Controllers (for security log aggregation)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE (ParentImage, Image) pairs from Sysmon logs for network-connected processes
          FLAG network connections where the (ParentImage, Image) pair is statistically rare
          CALCULATE entropy of process command line
          FLAG connections from processes with command-line entropy in top 98th percentile
  - question: Can we use a machine learning model to classify network-initiating processes as benign or malicious based on their attributes?
    context: This question seeks to automate the detection of malicious, network-aware processes using machine learning. By creating a feature set for each process that initiates a network connection—including its name, parent, file path characteristics, and command-line properties—a supervised model can be trained to distinguish between legitimate and malicious behavior. This allows for the detection of novel threats that may not trigger specific rules.
    answer_sources:
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - All Windows endpoints and servers
      - Domain Controllers (for security log aggregation)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network-initiating process:
            EXTRACT features (process_name, parent_name, path_entropy, cmdline_length, cmdline_entropy)
          INPUT features into pre-trained classification model
          IF model classifies as malicious with high confidence
            ALERT for investigation
  - question: Are there any outbound web requests with unusually long URIs, high data upload-to-download ratios, or generic User-Agents?
    context: C2 communications can sometimes be identified by their fundamental characteristics. For example, adversaries may encode data in long URIs for exfiltration, leading to unusually long URI lengths. C2 can also be used to upload stolen data, resulting in a connection where much more data is sent than received. Simple, static rules can be created to flag these primitive but effective indicators.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network sensors at internet egress points
      - Web proxies with full packet capture or deep logging capabilities
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALERT IF http.log.uri_length > 1024
          ALERT IF (conn.log.orig_bytes / conn.log.resp_bytes > 10) AND (conn.log.orig_bytes > 1KB)
          ALERT IF http.log.user_agent IS NULL or matches 'curl/.*'
  - question: Are any web requests exceeding dynamically baselined thresholds for URI length, URI entropy, or data transfer ratios?
    context: While static thresholds are useful, they can be brittle. A more robust approach is to create a dynamic baseline of what is 'normal' for the organization's traffic. By calculating a rolling 30-day baseline for metrics like URI length, URI entropy, and the ratio of sent-to-received bytes, we can alert on new activity that significantly deviates from the established norm, making the detection more adaptive to the specific environment.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network sensors at internet egress points
      - Web proxies with full packet capture or deep logging capabilities
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE 30-day rolling 95th percentile for uri_length and uri_entropy
          ALERT if new request exceeds this dynamic threshold
          CALCULATE 30-day rolling 99th percentile for orig_bytes/resp_bytes ratio
          ALERT if new connection exceeds this dynamic threshold
  - question: Can an autoencoder neural network detect anomalous HTTP requests that deviate from learned normal patterns?
    context: This question proposes using an unsupervised machine learning approach to find 'unknown unknowns'. An autoencoder is trained exclusively on normal, benign HTTP request data. It learns to compress and then reconstruct this normal data with very low error. When a malicious or anomalous C2 request is fed into the model, it will be unable to reconstruct it accurately, resulting in a high 'reconstruction error'. This error score serves as a powerful anomaly signal.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network sensors at internet egress points
      - Web proxies with full packet capture or deep logging capabilities
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN autoencoder neural network on vectorized features of normal HTTP requests
          FOR each new HTTP request:
            CALCULATE reconstruction_error from the autoencoder
          IF reconstruction_error is high
            FLAG request as anomalous for investigation