name: T1003.004: LSA Secrets
id: 5e9a8f7c-1b2d-4e3f-a9b8-c7d6e5f4a3b2
description: This playbook helps investigate whether an adversary has illicitly accessed credentials by dumping Local Security Authority (LSA) secrets. It focuses on detecting the creation of known LSA secret dumping utilities, the execution of processes with suspicious command-line arguments or PowerShell scripts, unauthorized access to the LSA secrets registry key (HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets), non-standard processes reading LSASS process memory, and sequences involving registry hive backups followed by access and exfiltration.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known LSA secret dumping utility been executed on the network?
    context: This question seeks to identify the execution of tools explicitly designed for dumping LSA secrets, such as Mimikatz, Pypykatz, or Procdump. An exact match of a process name or file hash against a threat intelligence feed provides a high-confidence indicator of malicious activity, as these tools are rarely used for legitimate administrative purposes. This is a direct, symbolic check for known-bad artifacts.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Domain Controllers, Tier 0 Servers, Privileged Access Workstations (PAWs), Administrator Workstations
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation logs FOR process_name IN ('mimikatz.exe', 'pypykatz.exe', 'procdump.exe') OR file_hash IN (threat_intel_feed)
  - question: Have any statistically rare processes with SYSTEM privileges, not on an allowlist, been executed?
    context: Adversaries may rename common dumping tools to evade simple name-based detections. This question aims to uncover such evasions by identifying processes that are statistically uncommon in the environment. By focusing on rare processes running with high privileges (SYSTEM), we can surface potential malicious tools masquerading under benign-looking names. This statistical approach complements symbolic checks by looking for anomalous behavior rather than known signatures.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Domain Controllers, Tier 0 Servers, Privileged Access Workstations (PAWs), Administrator Workstations
    range: last 90 days
    queries:
      - pseudocode: CALCULATE frequency of all process names over 90 days. FILTER for process frequency < 1st percentile AND user_context = 'SYSTEM' AND process_name NOT IN (allowlist).
  - question: Can a machine learning model identify process creation events indicative of LSA secret dumping tools?
    context: This question leverages machine learning to provide a more sophisticated detection layer. By training a model on features like parent process, user context, and process name characteristics (e.g., entropy, length), it can learn the subtle patterns of malicious tool execution. This approach is designed to detect novel or unknown dumping tools that may not be in threat intelligence feeds and do not stand out as simple statistical outliers.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Domain Controllers, Tier 0 Servers, Privileged Access Workstations (PAWs), Administrator Workstations
    range: last 90 days
    queries:
      - pseudocode: APPLY classification model to process creation event features (parent_process, user_context, process_name_entropy). ALERT on 'suspicious LSA access tool' classification.
  - question: Has a process been executed with command-line arguments or a PowerShell script block containing keywords for LSA secret dumping?
    context: This question focuses on the intent of a process by inspecting its command-line arguments or the content of a PowerShell script. Adversaries often use legitimate tools like PowerShell with specific commands or modules (e.g., 'lsadump::secrets', 'Invoke-Mimikatz') to perform malicious actions. Searching for these specific strings provides a strong indication of credential dumping activity, even if the executable itself is a standard system utility.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Domain Controllers, Critical Application Servers, Endpoint devices of administrators
    range: last 90 days
    queries:
      - pseudocode: SEARCH command_line_logs AND powershell_script_block_logs FOR regex('lsadump::secrets', 'sekurlsa::lsa', 'Invoke-Mimikatz', 'LsaRetrievePrivateData').
  - question: Have any PowerShell script blocks with anomalously high entropy been executed?
    context: To evade string-based detection, adversaries frequently obfuscate their scripts. This question uses the statistical property of Shannon entropy to detect such obfuscation. Obfuscated or packed code tends to have higher entropy (more randomness) than plain-text administrative scripts. Flagging scripts with entropy scores in the highest percentile can reveal suspicious payloads that would otherwise be missed.
    answer_sources:
      - Windows Event ID 4104
      - Domain Controllers, Critical Application Servers, Endpoint devices of administrators
    range: last 90 days
    queries:
      - pseudocode: CALCULATE Shannon entropy for all PowerShell script blocks. ALERT on scripts with entropy > 98th percentile of baseline.
  - question: Can a Natural Language Processing (NLP) model classify PowerShell script blocks as malicious credential dumping activity?
    context: This question applies advanced machine learning to understand the semantic meaning of PowerShell scripts, going beyond simple keyword matching or entropy calculation. An NLP model, trained to differentiate between malicious and benign scripts, can identify novel or heavily obfuscated credential dumping techniques by analyzing the code's structure and function, providing a robust defense against evolving threats.
    answer_sources:
      - Windows Event ID 4104
      - Domain Controllers, Critical Application Servers, Endpoint devices of administrators
    range: last 90 days
    queries:
      - pseudocode: APPLY NLP classification model to PowerShell script blocks. ALERT on 'malicious (credential dumping)' classification.
  - question: Has a process not on an established allowlist accessed the LSA secrets registry key?
    context: The LSA secrets are stored in a specific, protected registry key (HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets). Access to this key is highly restricted and should only be performed by a small, well-defined set of system processes. This question establishes a clear allowlist of authorized processes and users and alerts on any deviation, providing a high-fidelity signal of a direct attempt to access stored secrets.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 13 (Sysmon)
      - Domain Controllers, Tier 0 Servers, Servers with sensitive service accounts
    range: last 90 days
    queries:
      - pseudocode: ENABLE auditing on registry key 'HKLM\SECURITY\Policy\Secrets'. SEARCH registry access logs FOR process_name NOT IN ('lsass.exe', ...) OR user_account NOT IN ('NT AUTHORITY\SYSTEM', ...).
  - question: Has any process accessed the LSA secrets registry key with an anomalous frequency or at an unusual time?
    context: This question seeks to identify unusual access patterns to the LSA secrets key that might not be caught by a static allowlist. By building a statistical profile of normal access for each process (e.g., frequency, time of day), we can flag events that are statistical outliers. For example, a process accessing the key far less frequently than usual or at an odd hour could indicate a one-off, targeted attack.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 13 (Sysmon)
      - Domain Controllers, Tier 0 Servers, Servers with sensitive service accounts
    range: last 90 days
    queries:
      - pseudocode: PROFILE normal access frequency and time-of-day for each process accessing the LSA secrets key. ALERT if access frequency is > 3 standard deviations from mean OR time is outside 95% confidence interval.
  - question: Can an anomaly detection model identify suspicious access events to the LSA secrets registry key?
    context: This question employs a machine learning model to detect anomalies in the stream of registry access events. By considering a combination of features like the process, parent process, user, and time of day, an Isolation Forest or similar model can identify complex patterns of deviation that are not apparent from single-variable statistical analysis. This provides a more holistic view of what constitutes 'abnormal' access.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 13 (Sysmon)
      - Domain Controllers, Tier 0 Servers, Servers with sensitive service accounts
    range: last 90 days
    queries:
      - pseudocode: APPLY anomaly detection model (e.g., Isolation Forest) to registry access events using features (process_name, parent_process, user, time). ALERT on high anomaly scores.
  - question: Has a non-allowlisted process requested read access to the LSASS process memory?
    context: A common method for dumping credentials is to directly read the memory of the Local Security Authority Subsystem Service (LSASS) process. This question aims to detect this activity by monitoring for processes that request read access (PROCESS_VM_READ) to LSASS. By maintaining an allowlist of legitimate processes that perform this action (like EDR/AV solutions), any unauthorized access attempt becomes a high-confidence indicator of credential dumping.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 10 (Sysmon)
      - All Windows Endpoints, All Windows Servers, Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: MONITOR LSASS process access logs (Sysmon 10). ALERT if source_process is NOT IN (allowlist) AND granted_access includes '0x10'.
  - question: Has a non-system process accessed LSASS memory on a statistically unusual number of hosts?
    context: While a single access to LSASS might be investigated, an adversary attempting to gather credentials at scale might perform this action across many hosts. This question identifies such behavior by tracking how many unique hosts a specific process accesses LSASS on within a 24-hour window. A process that is not a standard system or security tool accessing LSASS on an unusually low number of machines could indicate targeted, non-widespread dumping activity.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 10 (Sysmon)
      - All Windows Endpoints, All Windows Servers, Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: FOR each non-system process accessing LSASS, COUNT unique hosts over 24 hours. ALERT if host count is < 5th percentile for that process.
  - question: Can a time-series model detect a sudden spike in LSASS memory access events on a host?
    context: This question uses time-series analysis to detect a sudden change in the rate of LSASS memory access on a single host. A credential dumping campaign might involve multiple tools or scripts running in a short period, causing a sharp, anomalous spike in access events compared to the host's normal baseline. A model like ARIMA can automatically detect these temporal anomalies, pointing to a potential compromise in progress.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 10 (Sysmon)
      - All Windows Endpoints, All Windows Servers, Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: APPLY time-series anomaly detection (e.g., ARIMA) to the count of LSASS access events per host per hour. ALERT on sudden spikes.
  - question: Has a registry hive backup been created and then immediately accessed by a non-standard process?
    context: Adversaries may dump the SECURITY or SYSTEM registry hives to disk to crack credentials offline. This involves a sequence of actions a backup command (e.g., 'reg.exe save'), followed by access to the resulting file. This question uses a correlation rule to detect this specific chain of events, alerting when a hive backup is followed within a short time window by access from an unexpected process (like a scripting engine or compression utility), indicating potential staging for exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 11 (Sysmon)
      - Domain Controllers, File Servers hosting backups, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: CORRELATE process creation ('reg.exe save') with subsequent file access to the created hive file by a non-admin process within 5 minutes.
  - question: Has a file with a hive-related extension or an anomalously large size been transferred to a low-reputation destination from a server that recently performed a registry backup?
    context: This question focuses on the exfiltration phase of offline hive theft. It looks for the network transfer of files that are likely registry hives (.sav, .hiv) or are anomalously large. By correlating this network activity with recent registry backup commands on the source server and considering the reputation of the destination IP, we can identify likely exfiltration of sensitive credential material.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Windows Event ID 4688
      - Domain Controllers, File Servers hosting backups, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: SEARCH network file logs for outbound transfers of files with '.sav' or '.hiv' extensions OR anomalously large size. CORRELATE with recent 'reg.exe save' on source host AND low destination IP reputation.
  - question: Can a sequence analysis model detect the pattern of registry backup, file access, and network exfiltration?
    context: This question leverages a more advanced model to recognize the entire attack chain as a single, high-confidence event. A sequence analysis model (like a Hidden Markov Model) can be trained to identify the specific sequence of [Backup Command -> File Access by Scripting Engine -> Outbound Network Connection to Rare IP]. Flagging this entire sequence as anomalous is more robust than alerting on individual components, significantly reducing false positives and providing a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 11 (Sysmon)
      - Zeek conn.log
      - Domain Controllers, File Servers hosting backups, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: APPLY sequence analysis model to event streams (process, file, network). ALERT on sequences matching [Backup -> File Access -> Network Exfil to Rare IP].