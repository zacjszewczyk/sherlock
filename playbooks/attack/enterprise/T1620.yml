name: 'T1620: Reflective Code Loading'
id: 'f8d2b3a1-7e8c-4a6f-8b9d-1c2e3f4a5b6c'
description: 'This playbook helps to identify if an adversary is evading defenses using reflective code loading. This technique involves loading and executing code in memory without it first being written to disk. Key indicators include: a process creating a named pipe with a suspicious name (e.g., high entropy or matching known malicious patterns); command lines containing substrings related to in-memory execution APIs or large, high-entropy strings suggesting an encoded payload; a non-.NET native Windows process loading .NET CLR modules it does not normally use; a process initiating an outbound network connection when it has no historical baseline of network activity or the destination is suspicious; a process performing cross-process memory access immediately followed by remote thread creation; or a process creating a thread in its own memory where the start address does not map to a legitimate, on-disk module.'
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: 'none'
questions:
  - question: 'Is a process creating a named pipe with a name matching known malicious C2 patterns or originating from a suspicious parent process?'
    context: 'Malicious tools, such as Cobalt Strike, often use predictable named pipe patterns for command and control (C2) communications. Detecting these patterns is a direct way to identify the presence of such tools. Furthermore, by correlating the pipe creation event with its parent process (e.g., an Office application spawning the process that creates the pipe), an analyst can trace the activity back to the initial infection vector and understand the attack chain.'
    answer_sources:
      - 'Windows Event ID 17'
      - 'Windows Event ID 18'
      - 'Windows Event ID 1'
      - 'Domain Controllers, File Servers, Application Servers, User Workstations'
    range: 'last 90 days'
    queries:
      - 'SEARCH Sysmon EventID=17 WHERE pipe_name MATCHES regex_patterns for known C2. JOIN with Sysmon EventID=1 on process_guid to find parent process. FILTER for suspicious parent-child relationships (e.g., winword.exe -> cmd.exe).'
  - question: 'Is a process creating a named pipe with an unusually high-entropy name, or is a process creating a named pipe when it has rarely done so before?'
    context: 'To evade simple signature-based detections, adversaries often use algorithmically generated names for their named pipes, which result in high Shannon entropy scores. Baselining normal process behavior allows for the detection of anomalies. For instance, a process like notepad.exe creating a named pipe is highly unusual and warrants investigation, even if the pipe name itself does not match a known malicious pattern.'
    answer_sources:
      - 'Windows Event ID 17'
      - 'Windows Event ID 18'
      - 'Windows Event ID 1'
      - 'Domain Controllers, File Servers, Application Servers, User Workstations'
    range: 'last 90 days'
    queries:
      - 'CALCULATE entropy for pipe_names from Sysmon EventID=17. FLAG pipe_names with entropy > 95th percentile. COMPARE process_name creating pipes against historical baseline. ALERT if process is not in baseline of pipe-creating processes.'
  - question: 'Can a machine learning model classify named pipe creation events as benign or suspicious based on features like process context and pipe name characteristics?'
    context: 'A classification model can automate the detection of novel and sophisticated threats that use reflective code loading. By training on features like process lineage, pipe name entropy, user context, and time of day, the model can identify complex patterns that are difficult to capture with static rules, reducing analyst workload and improving detection accuracy for new C2 frameworks.'
    answer_sources:
      - 'Windows Event ID 17'
      - 'Windows Event ID 18'
      - 'Windows Event ID 1'
      - 'Domain Controllers, File Servers, Application Servers, User Workstations'
    range: 'last 90 days'
    queries:
      - 'EXTRACT features (process_name, parent_process_name, pipe_name_entropy, user, time) from Sysmon EventID=17 and 18. INPUT features into trained classification model. ALERT on events classified as suspicious.'
  - question: 'Does a process command line or PowerShell script block contain keywords or large encoded strings indicative of reflective loading?'
    context: 'This is a direct hunt for common indicators of in-memory execution. Keywords like `[System.Reflection.Assembly]::Load` or `IEX` are frequently used by adversaries to load assemblies or execute code directly from memory. Large Base64 strings in a command line are a strong indicator of an embedded payload, bypassing on-disk antivirus scanning.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Windows Event ID 1'
      - 'Windows PowerShell Operational Log Event ID 4104'
      - 'User Workstations, Servers with PowerShell Remoting enabled, Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'SEARCH command_lines (Sysmon EID=1, Win EID=4688) and script_blocks (PS EID=4104) FOR keywords (`IEX`, `Reflection.Assembly`, etc.) OR regex for large Base64 strings.'
  - question: 'Is a process being executed with an abnormally long or high-entropy command line argument, suggesting an obfuscated or encoded payload?'
    context: 'Similar to named pipes, high entropy in command lines can reveal obfuscated scripts or encoded payloads. Adversaries use this to hide their code from simple keyword searches. Baselining command line length and entropy per process helps to identify significant deviations that could represent a malicious command.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Windows Event ID 1'
      - 'Windows PowerShell Operational Log Event ID 4104'
      - 'User Workstations, Servers with PowerShell Remoting enabled, Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'CALCULATE entropy and length for command_lines and script_blocks. BASELINE per process_name. ALERT if entropy > 99th percentile OR length > 3 standard deviations from the mean for that process.'
  - question: 'Can a machine learning model be used to score the likelihood that a command line is malicious based on its characteristics?'
    context: 'A logistic regression model provides a probabilistic score of maliciousness, which is more nuanced than a binary alert from a simple rule. This allows for better prioritization of alerts for analysts. By combining features like command length, entropy, keyword presence, and parent process, the model can identify suspicious commands with higher confidence and reduce false positives.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Windows Event ID 1'
      - 'Windows PowerShell Operational Log Event ID 4104'
      - 'User Workstations, Servers with PowerShell Remoting enabled, Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'EXTRACT features (length, entropy, keywords, parent_process) from command line events. INPUT to logistic regression model. PRIORITIZE alerts based on high maliciousness score.'
  - question: 'Is a native, non-.NET process, such as notepad.exe or an Office application, loading the .NET Common Language Runtime (CLR)?'
    context: 'Native Windows processes do not typically need the .NET runtime. An adversary may inject code into a trusted process (like svchost.exe) and then load the CLR to execute a managed (.NET) payload from memory. This is a high-fidelity indicator of process injection and defense evasion.'
    answer_sources:
      - 'Windows Event ID 7'
      - 'Processes on user workstations and servers, especially non-.NET native Windows processes (e.g., notepad.exe, svchost.exe), user-facing applications (e.g., web browsers, Microsoft Office suite), and web server processes.'
    range: 'last 90 days'
    queries:
      - 'SEARCH Sysmon EventID=7 WHERE process_name IN (`notepad.exe`, `svchost.exe`, Office apps, etc.) AND loaded_module IN (`clr.dll`, `mscoree.dll`, etc.).'
  - question: 'Is a process loading a module that is rarely or never loaded by that process across the enterprise?'
    context: 'This approach moves beyond a static watchlist to dynamic, environment-specific anomaly detection. By baselining all module loads for each process, you can detect when a process loads an unusual DLL. This could indicate process injection or a DLL hijacking variant used to set up reflective loading.'
    answer_sources:
      - 'Windows Event ID 7'
      - 'Processes on user workstations and servers, especially non-.NET native Windows processes (e.g., notepad.exe, svchost.exe), user-facing applications (e.g., web browsers, Microsoft Office suite), and web server processes.'
    range: 'last 90 days'
    queries:
      - 'BUILD baseline of process-module pairs from Sysmon EventID=7 over 30 days. CALCULATE frequency of each pair. ALERT when a new module load event occurs for a pair in the bottom 5th percentile of rarity.'
  - question: 'Can an anomaly detection model identify abnormal patterns of module loading activity for a given process?'
    context: 'An autoencoder or similar unsupervised model can learn the complex "normal" behavior of a process''s module loading activity over time. When an adversary injects code that loads an unusual combination of DLLs, the model will fail to reconstruct this event accurately, resulting in a high anomaly score. This is effective for detecting novel or previously unseen injection techniques.'
    answer_sources:
      - 'Windows Event ID 7'
      - 'Processes on user workstations and servers, especially non-.NET native Windows processes (e.g., notepad.exe, svchost.exe), user-facing applications (e.g., web browsers, Microsoft Office suite), and web server processes.'
    range: 'last 90 days'
    queries:
      - 'TRAIN autoencoder model on vectors of module load events (Sysmon EID=7) per process. MONITOR for new events with high reconstruction error. ALERT on high anomaly scores.'
  - question: 'Is a process making an outbound network connection to an IP, domain, or TLS fingerprint known to be malicious?'
    context: 'This is a classic threat intelligence matching technique. Correlating internal host logs (Sysmon) with network data (Zeek) and external threat intelligence provides a high-confidence way to detect C2 communications. Matching on JA3/JA3S fingerprints is particularly effective against malware that uses specific TLS libraries, even if the destination IP changes.'
    answer_sources:
      - 'Windows Event ID 3'
      - 'Windows Event ID 1'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Zeek ssl.log'
      - 'Network Egress Points (Firewalls, Proxies), Workstations, Servers hosting sensitive data'
    range: 'last 90 days'
    queries:
      - 'JOIN Sysmon EID=3 with Zeek logs on IP/port/time. QUERY destination_ip, domain, ja3_hash against threat intelligence feeds. ALERT on any match.'
  - question: 'Is a process, such as notepad.exe, initiating a network connection when it has no history of doing so, or are its connection characteristics (port, data volume) anomalous?'
    context: 'Reflectively loaded code often needs to establish C2. When this code is injected into a process that normally does not make network connections (e.g., notepad.exe), the connection itself is a major anomaly. Baselining network behavior per process helps identify these outliers, which are strong indicators of compromise.'
    answer_sources:
      - 'Windows Event ID 3'
      - 'Windows Event ID 1'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Zeek ssl.log'
      - 'Network Egress Points (Firewalls, Proxies), Workstations, Servers hosting sensitive data'
    range: 'last 90 days'
    queries:
      - 'BASELINE network behavior (ports, data volume, frequency) per process_name. ALERT if a connection from a process (e.g., notepad.exe) is in the 99.9th percentile of rarity for that process.'
  - question: 'Can graph analysis reveal suspicious chains of activity, such as a script execution leading to a legitimate process making a rare external connection?'
    context: 'Attacks are often a sequence of events, not a single one. Graph analysis helps visualize and programmatically detect these chains. A subgraph showing an email attachment -> script execution -> Word -> rare network connection by Word is a powerful visualization and detection method for post-exploitation activity initiated by reflective loading.'
    answer_sources:
      - 'Windows Event ID 3'
      - 'Windows Event ID 1'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Zeek ssl.log'
      - 'Network Egress Points (Firewalls, Proxies), Workstations, Servers hosting sensitive data'
    range: 'last 90 days'
    queries:
      - 'MODEL processes, users, and network connections as a graph. APPLY community detection algorithms. FLAG small, isolated subgraphs that link an initial execution event to a rare network connection.'
  - question: 'Is one process accessing the memory of another process and immediately creating a remote thread in it, especially involving high-risk processes?'
    context: 'The sequence of ProcessAccess (Sysmon Event ID 10) followed by CreateRemoteThread (Sysmon Event ID 8) between the same source and target processes is a classic pattern for code injection. The source process writes shellcode into the target''s memory and then executes it. Monitoring for this specific sequence, especially when targeting critical processes like lsass.exe, is a high-fidelity detection for this technique.'
    answer_sources:
      - 'Windows Event ID 8'
      - 'Windows Event ID 10'
      - 'High-value processes (lsass.exe, winlogon.exe, explorer.exe), User workstations, Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'CORRELATE Sysmon EID=10 and EID=8 where SourceImage and TargetImage match. TRIGGER alert if EID=8 occurs within 1 second of EID=10. PRIORITIZE alerts where TargetImage is a high-value process.'
  - question: 'Is a remote thread being created between a statistically rare pair of processes, or is the thread''s start address not mapped to a known module?'
    context: 'While some remote thread creation is legitimate, malicious use often involves unusual process pairs (e.g., WINWORD.EXE targeting svchost.exe). By baselining what is normal, rare pairs can be flagged. Furthermore, a key indicator of reflective loading is when the remote thread''s start address is in a private memory region, not an on-disk DLL, which can be checked by analyzing the StartAddress field.'
    answer_sources:
      - 'Windows Event ID 8'
      - 'Windows Event ID 10'
      - 'High-value processes (lsass.exe, winlogon.exe, explorer.exe), User workstations, Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'CALCULATE rarity of SourceImage-TargetImage pairs from Sysmon EID=8. ALERT on rare pairs. For alerts, CHECK if StartAddress maps to a known on-disk module in the target process. FLAG if it does not.'
  - question: 'Can a sequence-based machine learning model detect anomalous sequences of process interactions that indicate malicious injection?'
    context: 'System activity has a natural flow. An LSTM model can learn these normal sequences of events on a host. A malicious injection, like an Office application accessing and creating a thread in a system process, would be a deviation from the learned benign sequences, resulting in a high anomaly score. This helps detect sophisticated attacks that might not trigger rule-based alerts.'
    answer_sources:
      - 'Windows Event ID 8'
      - 'Windows Event ID 10'
      - 'High-value processes (lsass.exe, winlogon.exe, explorer.exe), User workstations, Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'TRAIN LSTM model on sequences of Sysmon events per host. MONITOR new event sequences for high anomaly scores. ALERT on sequences like (ProcessAccess -> CreateRemoteThread) from an unusual parent.'
  - question: 'Is a process creating a new thread in its own memory space where the thread''s start address is unknown or doesn''t map to a signed, on-disk module?'
    context: 'This is a core indicator of reflective code loading where a payload is executed within the host process itself. The key is that the code does not exist on disk. Sysmon indicates this when the StartAddress of the new thread is "Unknown" or points to a memory region not associated with a loaded DLL. This is a very strong sign of shellcode execution.'
    answer_sources:
      - 'Windows Event ID 8'
      - 'Windows Event ID 7'
      - 'All running processes on critical servers and workstations, especially those handling untrusted data (e.g., browsers, email clients, Office applications).'
    range: 'last 90 days'
    queries:
      - 'SEARCH Sysmon EID=8 where SourceImage == TargetImage. For each event, CHECK if StartAddress maps to a loaded module (from EID=7 baseline). ALERT if StartAddress is "Unknown" or does not map to a module.'
  - question: 'Is a process creating a local thread with a start address in a statistically rare memory range?'
    context: 'Legitimate processes that use techniques like Just-In-Time (JIT) compilation create threads from dynamically allocated memory, but these often fall into predictable memory ranges. By baselining these ranges per-process, it is possible to identify when a new thread starts in a highly unusual location, which could indicate a reflectively loaded payload has been placed there.'
    answer_sources:
      - 'Windows Event ID 8'
      - 'Windows Event ID 7'
      - 'All running processes on critical servers and workstations, especially those handling untrusted data (e.g., browsers, email clients, Office applications).'
    range: 'last 90 days'
    queries:
      - 'BASELINE common StartAddress ranges for local threads (Sysmon EID=8) per process_name. ALERT if a new thread''s StartAddress is in a statistically rare range (e.g., bottom 1st percentile).'
  - question: 'Can a machine learning model be trained to differentiate between legitimate and malicious in-process thread creation?'
    context: 'Differentiating legitimate JIT compilation from malicious shellcode can be complex. A classification model can learn these nuances by using features like the thread''s start address, whether it is local, the parent process, and command-line arguments. This allows for more accurate detection of malicious in-memory execution while reducing false positives from benign activity.'
    answer_sources:
      - 'Windows Event ID 8'
      - 'Windows Event ID 7'
      - 'All running processes on critical servers and workstations, especially those handling untrusted data (e.g., browsers, email clients, Office applications).'
    range: 'last 90 days'
    queries:
      - 'EXTRACT features (is_local_thread, start_address_location, parent_process, cmd_args) from Sysmon EID=8. INPUT to trained XGBoost model. ALERT on events classified as malicious.'