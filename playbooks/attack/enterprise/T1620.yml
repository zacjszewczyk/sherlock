name: T1620: Reflective Code Loading
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: Is the adversary evading defenses using reflective code loading? This involves looking for processes creating suspicious named pipes, command lines with in-memory execution indicators, non-.NET processes loading the CLR, processes making anomalous network connections, cross-process memory access followed by remote thread creation, and processes creating threads in their own memory with unusual start addresses.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any named pipes being created that match known malicious C2 patterns?
    context: Adversaries, particularly those using frameworks like Cobalt Strike, often use named pipes for lateral movement and inter-process communication. This question aims to identify these malicious pipes by matching their names against known patterns (regex) and analyzing the process lineage to spot suspicious origins, such as an Office application spawning a process that then creates a pipe.
    answer_sources:
      - Windows Event ID 17
      - Windows Event ID 18
      - Windows Event ID 1
      - Domain Controllers
      - File Servers
      - Application Servers
      - User Workstations
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=17 AND PipeName MATCHES_REGEX ('^\\msse-[0-9]+-server$', '^\\postex_[a-f0-9]+$') | CORRELATE ProcessGuid WITH Sysmon EventID=1 TO GET ParentProcess
  - question: Are any processes creating named pipes with unusually high entropy or exhibiting anomalous pipe creation behavior compared to their baseline?
    context: To evade simple signature-based detection, malware may use algorithmically generated pipe names, which often result in high entropy (randomness). This question focuses on identifying such activity by baselining normal pipe creation for each process and flagging outliers, either by high entropy scores or by a process creating a pipe when it has never done so before.
    answer_sources:
      - Windows Event ID 17
      - Windows Event ID 18
      - Windows Event ID 1
      - Domain Controllers
      - File Servers
      - Application Servers
      - User Workstations
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=17 | CALCULATE_ENTROPY(PipeName) | DETECT outliers WHERE entropy > 95th_percentile_for_process OR process_pipe_creation_is_rare
  - question: Can a machine learning model identify suspicious named pipe creation events that may indicate novel C2 activity?
    context: This question proposes a more advanced, proactive approach using machine learning. By training a model on various features like process name, parent process, pipe name entropy, user context, and time of day, it's possible to classify pipe creation events as benign or suspicious. This helps detect new and unknown C2 frameworks that don't match existing patterns.
    answer_sources:
      - Windows Event ID 17
      - Windows Event ID 18
      - Windows Event ID 1
      - Domain Controllers
      - File Servers
      - Application Servers
      - User Workstations
    range: last 90 days
    queries:
      - pseudocode: INPUT Sysmon EventID=17, 18 | EXTRACT_FEATURES(ProcessName, ParentProcess, PipeNameEntropy, User) | PREDICT using trained_classification_model | SHOW suspicious_events
  - question: Are any command lines or PowerShell script blocks invoking APIs or containing strings indicative of reflective code loading?
    context: Adversaries frequently use command-line tools and PowerShell to load code directly into memory, bypassing on-disk scanning. This question seeks to find direct evidence of this technique by searching for specific keywords (e.g., '[System.Reflection.Assembly]::Load', 'IEX'), API calls, and large base64 encoded strings that suggest a payload is being loaded and executed.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1
      - Windows PowerShell Operational Log Event ID 4104
      - User Workstations
      - Servers with PowerShell Remoting enabled
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: SEARCH (Sysmon EventID=1 OR WinEventID=4688 OR PowerShell EventID=4104) WHERE CommandLine CONTAINS ('[System.Reflection.Assembly]::Load', 'IEX', '[A-Za-z0-9+/=]{200,}')
  - question: Are there any command lines or PowerShell scripts with abnormally high entropy or unusual length?
    context: Encoded payloads and obfuscated scripts often appear as long, random-looking strings, resulting in high entropy and unusual length. This question aims to detect these anomalies by baselining normal command-line characteristics for each process and flagging significant deviations, which can indicate hidden malicious code.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1
      - Windows PowerShell Operational Log Event ID 4104
      - User Workstations
      - Servers with PowerShell Remoting enabled
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: SEARCH (Sysmon EventID=1 OR WinEventID=4688 OR PowerShell EventID=4104) | CALCULATE_ENTROPY(CommandLine) | DETECT outliers WHERE entropy > 99th_percentile_for_process OR length > 3_std_dev_from_mean
  - question: Can a machine learning model score and prioritize command-line activity to identify the most likely malicious instances?
    context: To reduce analyst fatigue from simple keyword matches that may have legitimate use cases, a machine learning model can be used. This question involves training a model to consider multiple features in concert—such as command length, entropy, keywords, and parent process—to generate a risk score for each command, allowing analysts to focus on the highest-priority alerts.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1
      - Windows PowerShell Operational Log Event ID 4104
      - User Workstations
      - Servers with PowerShell Remoting enabled
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: INPUT (Sysmon EventID=1 OR WinEventID=4688) | EXTRACT_FEATURES(Length, Entropy, Keywords, ParentProcess) | PREDICT using trained_regression_model | SHOW high_risk_commands
  - question: Is a non-.NET native process loading the .NET Common Language Runtime (CLR)?
    context: A common abuse pattern involves an adversary injecting code into a legitimate, non-.NET process (like notepad.exe or svchost.exe) and forcing it to load the .NET runtime to execute a malicious .NET assembly in memory. This question aims to detect this high-fidelity indicator by alerting when a process that doesn't normally use .NET loads modules like 'clr.dll' or 'mscoree.dll'.
    answer_sources:
      - Windows Event ID 7
      - Processes on user workstations and servers
      - non-.NET native Windows processes
      - user-facing applications
      - web server processes.
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=7 WHERE ProcessName IN ('notepad.exe', 'svchost.exe', 'lsass.exe') AND ImageLoaded IN ('clr.dll', 'mscoree.dll', 'mscorwks.dll')
  - question: Are any processes loading modules that are statistically rare for that process across the enterprise?
    context: Beyond a static watchlist, a more dynamic approach is to identify any anomalous module load. This question involves baselining all module loads for every process across the environment. An alert is generated when a process loads a module that it, or its peers across the enterprise, rarely or never loads. This can uncover novel or targeted injection techniques.
    answer_sources:
      - Windows Event ID 7
      - Processes on user workstations and servers
      - non-.NET native Windows processes
      - user-facing applications
      - web server processes.
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=7 | CALCULATE frequency of all (ProcessName, ImageLoaded) pairs | DETECT pairs where frequency < 5th_percentile
  - question: Can an unsupervised machine learning model detect anomalous patterns of module loading within a process?
    context: This question proposes using an anomaly detection model, such as an autoencoder, to learn the "normal" sequence and combination of modules a process loads over time. If an adversary injects code that causes the process to load an unusual set of DLLs, the model will fail to reconstruct this pattern accurately, resulting in a high anomaly score that flags the event for investigation.
    answer_sources:
      - Windows Event ID 7
      - Processes on user workstations and servers
      - non-.NET native Windows processes
      - user-facing applications
      - web server processes.
    range: last 90 days
    queries:
      - pseudocode: INPUT stream of Sysmon EventID=7 per process | TRAIN autoencoder_model on normal module load patterns | PREDICT on new data | SHOW events with high reconstruction_error
  - question: Is a process making a network connection to a destination known to be malicious by threat intelligence?
    context: A fundamental check for malicious activity is to see if any outbound connections are going to known-bad destinations. This question involves correlating host-based network events (Sysmon) with network sensor data (Zeek) and checking the destination IP, domain name, or TLS fingerprint (JA3/JA3S) against threat intelligence feeds. A match is a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 3
      - Windows Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points (Firewalls, Proxies)
      - Workstations
      - Servers hosting sensitive data
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=3 | JOIN with Zeek logs on IP/port/time | LOOKUP DestinationIp, DestinationHostname, TlsFingerprint IN threat_intelligence_feeds | ALERT on match
  - question: Is a process exhibiting anomalous network behavior, such as connecting to a rare port or a process like notepad.exe making any external connection?
    context: Reflectively loaded code often causes a compromised process to initiate network connections for C2 communication. This behavior is frequently anomalous for the process in question (e.g., 'notepad.exe' should not be making network calls). This question aims to detect these anomalies by baselining normal network activity for each process and flagging connections that are statistically rare or deviate from the established norm.
    answer_sources:
      - Windows Event ID 3
      - Windows Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points (Firewalls, Proxies)
      - Workstations
      - Servers hosting sensitive data
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=3 | BASELINE normal network behavior per ProcessName | DETECT outliers where connection_rarity > 99.9th_percentile (e.g., notepad.exe making a connection)
  - question: Can graph analysis reveal suspicious chains of activity, such as a script execution leading to a rare network connection from a legitimate process?
    context: Malicious activity is often a sequence of events, not a single atomic indicator. This question proposes using graph analysis to connect disparate events (process creation, script execution, network connections) into a unified view. By identifying small, isolated clusters of activity that link an initial execution to a rare network connection by a legitimate process, analysts can uncover complex post-exploitation behavior that might otherwise be missed.
    answer_sources:
      - Windows Event ID 3
      - Windows Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points (Firewalls, Proxies)
      - Workstations
      - Servers hosting sensitive data
    range: last 90 days
    queries:
      - pseudocode: BUILD graph from process, network, and user events | APPLY community detection algorithms | IDENTIFY and FLAG small, isolated subgraphs showing rare process->network chains
  - question: Is a process accessing the memory of another process and then immediately creating a remote thread in it?
    context: The classic process injection technique involves one process writing shellcode into the memory of a target process and then creating a remote thread to execute it. This question looks for this specific, high-fidelity sequence of events by correlating a Sysmon 'ProcessAccess' event (ID 10) with a 'CreateRemoteThread' event (ID 8) between the same source and target processes occurring in quick succession.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - High-value processes (lsass.exe, winlogon.exe, explorer.exe)
      - User workstations
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: SEARCH for Sysmon EventID=10 | CORRELATE with Sysmon EventID=8 where SourceImage and TargetImage match AND time_difference < 1s
  - question: Is a statistically rare process pair involved in remote thread creation, or is the thread's start address suspicious?
    context: While some remote thread creation is legitimate, malicious use often involves unusual process pairs (e.g., 'powershell.exe' targeting 'lsass.exe'). This question aims to find these by identifying statistically rare source-target combinations. Furthermore, it suggests inspecting the thread's start address; if the address doesn't map to a known DLL on disk, it's highly likely to be shellcode in dynamically allocated memory.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - High-value processes (lsass.exe, winlogon.exe, explorer.exe)
      - User workstations
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=8 | CALCULATE frequency of (SourceImage, TargetImage) pairs | FLAG rare pairs | CHECK if StartAddress maps to a known module
  - question: Can a sequence-based machine learning model detect anomalous process interaction patterns indicative of injection?
    context: This question proposes using a model like an LSTM, which is well-suited for time-series data, to learn the normal sequences of system events on a host. An attack sequence, such as Word opening, spawning PowerShell which then accesses and creates a thread in 'svchost.exe', would deviate significantly from learned benign patterns and be flagged as a high-scoring anomaly.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 10
      - High-value processes (lsass.exe, winlogon.exe, explorer.exe)
      - User workstations
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: INPUT stream of Sysmon events per host | TRAIN LSTM model on normal event sequences | PREDICT on new data | SHOW sequences with high anomaly_score
  - question: Is a process creating a thread in its own memory space where the thread's start address does not map to a module on disk?
    context: This is a key indicator of reflective loading, where a payload is loaded into a private memory region and then executed via a new thread. This question targets this by looking for local thread creation (SourceImage = TargetImage) where the thread's start address is "Unknown" or doesn't correspond to any legitimate DLL loaded by the process, strongly suggesting it's executing from a hidden, in-memory payload.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 7
      - All running processes on critical servers and workstations
      - browsers
      - email clients
      - Office applications.
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=8 WHERE SourceImage == TargetImage | CHECK if StartAddress maps to a module from Sysmon EventID=7 baseline | ALERT if StartAddress is 'Unknown' or not found
  - question: Is a process creating a local thread with a start address in a statistically rare memory range?
    context: Even when a start address is not explicitly "Unknown," it can still be suspicious. Legitimate threads, like those from JIT compilers, often start in predictable memory ranges. This question focuses on baselining these common start addresses for each process and flagging any new thread whose start address falls into a rare or unusual memory region, which could indicate dynamically allocated executable memory for shellcode.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 7
      - All running processes on critical servers and workstations
      - browsers
      - email clients
      - Office applications.
    range: last 90 days
    queries:
      - pseudocode: SEARCH Sysmon EventID=8 WHERE SourceImage == TargetImage | BASELINE common StartAddress ranges per process | FLAG events where StartAddress is in a rare range (<1st percentile)
  - question: Can a machine learning model differentiate between legitimate and malicious local thread creation events?
    context: To improve detection accuracy and reduce false positives from legitimate in-memory operations like JIT compilation, a classification model can be used. This question involves training a model on features like the thread's locality, start address characteristics, parent process, and command line to learn the difference between benign and malicious thread creation, providing a more confident signal to analysts.
    answer_sources:
      - Windows Event ID 8
      - Windows Event ID 7
      - All running processes on critical servers and workstations
      - browsers
      - email clients
      - Office applications.
    range: last 90 days
    queries:
      - pseudocode: INPUT Sysmon EventID=8 | EXTRACT_FEATURES(IsLocalThread, StartAddress, ParentProcess, CommandLine) | PREDICT using trained_XGBoost_model | SHOW malicious_thread_events