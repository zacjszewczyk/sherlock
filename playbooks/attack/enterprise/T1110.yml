name: T1110: Brute Force
id: 2d8f6b7c-7e9a-4f0d-9b1c-3e2a1b0c9d8e
description: |
  Identifies if an adversary is attempting to gain credentials via brute force. This is indicated by several patterns: a series of failed authentications from an IP or user-agent present on a threat intelligence feed; a high number of failed attempts against common administrative accounts from a single IP (dictionary attack); a high number of failed logins against a single user account from a few IPs; a low-and-slow pattern of single failed logins across many user accounts from one IP (password spraying); or a successful login that immediately follows a high number of failed attempts for the same user and IP.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Have there been failed authentications from source IPs or user-agents that are present on a threat intelligence feed?
    context: This question seeks to identify brute-force attempts by matching indicators from failed login events (Windows Event ID 4625) against known malicious infrastructure from threat intelligence feeds. A match provides a high-confidence signal of an attack, enabling swift blocking and investigation.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Zeek http.log
      - Externally-facing authentication services (e.g., VPN, OWA, RDP gateways)
      - Cloud identity providers (e.g., Microsoft Entra ID, Okta)
      - Perimeter firewalls
      - Web application firewalls
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each 'failed auth event' (Event ID 4625) in the last 5 minutes:
            EXTRACT source_ip
            EXTRACT user_agent from corresponding web logs (Zeek http.log)
            IF source_ip OR user_agent IN 'threat_intelligence_feed':
              ALERT high_severity('IOC match for brute-force activity')
  - question: Is any single source IP generating a statistically anomalous rate of authentication failures?
    context: This question identifies potential brute-force sources by detecting IPs with an unusually high rate of failed logins compared to a historical baseline. By calculating the failure rate per IP over a sliding window and flagging outliers (e.g., those in the 95th percentile), this approach can uncover emerging threats not yet present in threat intelligence. The finding can be strengthened by assessing the reputation of the source IP's Autonomous System (AS).
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Zeek http.log
      - Externally-facing authentication services (e.g., VPN, OWA, RDP gateways)
      - Cloud identity providers (e.g., Microsoft Entra ID, Okta)
      - Perimeter firewalls
      - Web application firewalls
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          CALCULATE baseline failure rate percentile (95th) for all external IPs over the last 30 days.
          FOR each source_ip in the last 1 hour:
            CALCULATE current_failure_rate
            IF current_failure_rate > baseline:
              CHECK ASN reputation for source_ip
              ALERT medium_severity('Statistical anomaly in login failures from IP')
  - question: Can machine learning identify failed authentication attempts that have a high probability of being malicious?
    context: This question uses a supervised machine learning model to score new authentication failures in real-time. By training on historical data labeled with known malicious indicators, the model learns complex patterns associated with brute-force attacks, considering features like IP geolocation, ASN, time of day, and user-agent. This allows for the detection of novel and sophisticated attacks that may evade simpler rule-based or statistical methods.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Zeek http.log
      - Externally-facing authentication services (e.g., VPN, OWA, RDP gateways)
      - Cloud identity providers (e.g., Microsoft Entra ID, Okta)
      - Perimeter firewalls
      - Web application firewalls
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each new 'failed auth event':
            EXTRACT features (IP geo, ASN, time, protocol, user-agent)
            SCORE event using pre-trained classification model
            IF score > 'malicious_threshold':
              ALERT high_severity('ML model detected probable brute-force attempt')
  - question: Is a single source IP attempting to log in using a list of common administrative or default account names?
    context: This question aims to detect dictionary attacks, a common brute-force variant. It works by monitoring for a high volume (e.g., >10) of failed logins (Windows Event ID 4625) from a single IP that are targeting a predefined list of high-value default usernames ('admin', 'root', etc.) within a short time frame. A positive match indicates a targeted attempt to compromise privileged accounts.
    answer_sources:
      - Windows Event ID 4625
      - Domain Controllers
      - Authentication servers (e.g., RADIUS)
      - Linux/UNIX servers
      - Database servers
      - Network device administration interfaces
      - IoT/OT device management portals
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          DEFINE admin_account_dictionary
          FOR each source_ip in the last 5 minutes:
            COUNT failed logins (Event ID 4625) where username IN admin_account_dictionary
            IF count > 10:
              ALERT high_severity('Dictionary attack detected')
  - question: Is any source IP showing a statistically significant ratio of failed logins against administrative accounts compared to other accounts?
    context: This statistical approach seeks to identify dictionary attacks by analyzing the *proportion* of failed login attempts directed at administrative accounts from a single IP. An IP whose ratio of admin account failures to total failures is a statistical outlier (e.g., exceeds the 99th percentile of the baseline) is highly likely to be conducting a targeted dictionary attack, even if the total volume of failures is not high.
    answer_sources:
      - Windows Event ID 4625
      - Domain Controllers
      - Authentication servers (e.g., RADIUS)
      - Linux/UNIX servers
      - Database servers
      - Network device administration interfaces
      - IoT/OT device management portals
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          DEFINE admin_account_dictionary
          CALCULATE baseline ratio of admin_failures/total_failures across all IPs
          FOR each source_ip in the last 1 hour:
            CALCULATE current_ratio for source_ip
            IF current_ratio > 99th_percentile_of_baseline:
              ALERT high_severity('Anomalous ratio of admin account failures detected')
  - question: Can a sequence analysis model detect anomalous patterns in the usernames being targeted by a single source IP?
    context: This advanced question uses machine learning to analyze the sequence of usernames an attacker tries. A legitimate user has a predictable (or at least non-malicious) pattern, whereas an attacker cycling through a dictionary of admin names will generate a highly anomalous sequence. A sequence analysis model (like an RNN) can be trained on normal behavior and then identify these attack sequences by their low probability score.
    answer_sources:
      - Windows Event ID 4625
      - Domain Controllers
      - Authentication servers (e.g., RADIUS)
      - Linux/UNIX servers
      - Database servers
      - Network device administration interfaces
      - IoT/OT device management portals
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each source_ip:
            CREATE sequence of attempted usernames over time
            SCORE sequence using pre-trained sequence analysis model
            IF probability_score is low AND sequence contains high density of admin names:
              ALERT high_severity('ML model detected dictionary attack sequence')
  - question: Has a single user account experienced a high number of failed logins from a small number of source IPs?
    context: This question identifies a classic brute-force attack against a specific user account. The rule triggers when a threshold (e.g., >20 failures in 10 minutes) for failed logins (Windows Event ID 4625) is breached for one user from one source IP. Correlating with network logs (Zeek conn.log) to identify the targeted service (like RDP or a web service) adds valuable context for the responding analyst.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Externally-facing services (RDP, VPNs, webmail)
      - Domain Controllers
      - User workstations with remote access enabled
      - Critical application servers
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each user_account and source_ip pair:
            COUNT failed logins (Event ID 4625) in the last 10 minutes
            IF count > 20:
              GET destination_service from network logs (Zeek conn.log)
              ALERT high_severity('Brute-force attempt against single user account')
  - question: Is any user account experiencing a statistically significant spike in failed login attempts?
    context: This question detects brute-force attempts by modeling the normal pattern of failed logins for each individual user. Using historical data (e.g., 30 days), a normal distribution of failure counts per time interval is established. A new interval where the failure count is a major statistical outlier (e.g., more than 3 standard deviations from the mean, $$ z > 3 $$) strongly indicates an attack against that specific account.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Externally-facing services (RDP, VPNs, webmail)
      - Domain Controllers
      - User workstations with remote access enabled
      - Critical application servers
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each user_account:
            CALCULATE mean and standard_deviation of failed logins per 10-min interval from historical data
            GET current_failed_login_count for the last 10 minutes
            IF current_failed_login_count > (mean + 3 * standard_deviation):
              ALERT high_severity('Statistically significant spike in failed logins for user')
  - question: Does a time-series forecasting model predict an anomalous number of failed logins for any user account?
    context: This question uses a machine learning forecasting model (like ARIMA) to predict the expected number of failed logins for a user account in a given time window, including a confidence interval. If the actual observed number of failures exceeds the upper bound of the model's prediction, it signifies a deviation from normal behavior that is characteristic of a brute-force attack, allowing for detection of subtle or slowly escalating attempts.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Externally-facing services (RDP, VPNs, webmail)
      - Domain Controllers
      - User workstations with remote access enabled
      - Critical application servers
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each user_account:
            FORECAST expected_failed_logins and confidence_interval for the next time window
            GET observed_failed_logins in the current window
            IF observed_failed_logins > upper_bound_of_confidence_interval:
              ALERT high_severity('ML forecast model detected anomalous failed logins')
  - question: Is a single source IP attempting to log into a large number of different user accounts with only a few attempts per account?
    context: This question is designed to detect password spraying attacks. This is a "low-and-slow" technique where an attacker tries one or two common passwords against many different user accounts. The rule triggers when a single source IP generates failed logins (Windows Event ID 4625) for a large number of unique accounts (e.g., >50) but with a very low failure count per account (e.g., <4) within an hour.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Cloud authentication services (e.g., Microsoft Entra ID, Okta)
      - Federated identity providers (e.g., ADFS)
      - Domain Controllers
      - Externally-facing web applications with corporate SSO
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each source_ip in the last 1 hour:
            COUNT distinct user_accounts with failed logins
            CALCULATE max failures per account
            IF distinct_account_count > 50 AND max_failures_per_account < 4:
              ALERT high_severity('Password spraying attack detected')
  - question: Is any source IP targeting a set of usernames with statistically high entropy, indicating a password spray?
    context: This statistical method identifies password spraying by analyzing the diversity of usernames targeted from a single source IP. A legitimate user typically targets one account, resulting in low username entropy. A password spray targets many different accounts, resulting in very high username entropy. By flagging IPs where the Shannon entropy of targeted usernames is an outlier (e.g., >98th percentile), we can detect these attacks.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Cloud authentication services (e.g., Microsoft Entra ID, Okta)
      - Federated identity providers (e.g., ADFS)
      - Domain Controllers
      - Externally-facing web applications with corporate SSO
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          CALCULATE baseline entropy scores for targeted usernames per IP
          FOR each source_ip in the last 1 hour:
            CALCULATE shannon_entropy of the set of targeted usernames
            IF shannon_entropy > 98th_percentile_of_baseline:
              ALERT high_severity('Anomalously high username entropy suggests password spray')
  - question: Can an unsupervised clustering model identify groups of authentication failures that represent a password spraying attack?
    context: This question applies unsupervised machine learning (like DBSCAN) to group authentication failures based on their characteristics. A password spraying attack will form a distinct cluster of data points characterized by a single source IP, a high number of unique target accounts, and a low number of failures per account. This method can discover password spraying patterns without prior knowledge or explicit rules.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Cloud authentication services (e.g., Microsoft Entra ID, Okta)
      - Federated identity providers (e.g., ADFS)
      - Domain Controllers
      - Externally-facing web applications with corporate SSO
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          GATHER failed auth events from the last hour
          RUN DBSCAN clustering on features (source_ip, unique_target_count, avg_failures_per_account)
          FOR each identified cluster:
            IF cluster matches password_spray_profile:
              ALERT high_severity('ML clustering identified password spraying pattern')
  - question: Has a successful login occurred for a user account and source IP that just had a high number of failed attempts?
    context: This question aims to detect the successful culmination of a brute-force attack. It creates a stateful rule that, upon seeing a successful login (Windows Event ID 4624), immediately checks the recent past (e.g., 15 minutes) for a high number of failed logins (Event ID 4625) from the same user and IP. A match is a high-confidence indicator that an attacker has guessed the correct password and gained access.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Domain Controllers
      - Critical asset servers
      - VPN concentrators
      - Privileged access workstations
      - Cloud administration consoles
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          ON successful login (Event ID 4624) for user and source_ip:
            QUERY last 15 minutes for failed logins (Event ID 4625) for same user and source_ip
            COUNT failures
            IF count > 10:
              ALERT high_priority('Successful login after brute-force attempt')
  - question: For any given user, has a successful login been preceded by a statistically anomalous number of failures from the same IP?
    context: This question refines the detection of a successful brute-force by creating a user-specific baseline. For each user, it models the normal number of failed attempts that precede a successful login. A new successful login (Event ID 4624) that follows a number of failures (Event ID 4625) that is a statistical outlier (e.g., >99th percentile) for that specific user is flagged as a likely compromise.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Domain Controllers
      - Critical asset servers
      - VPN concentrators
      - Privileged access workstations
      - Cloud administration consoles
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          FOR each user:
            CALCULATE baseline distribution of failures preceding a successful login
          ON successful login (Event ID 4624) for user and source_ip:
            COUNT preceding failures from the same IP
            IF failure_count > 99th_percentile_of_baseline for that user:
              ALERT high_severity('Successful login preceded by anomalous failure count')
  - question: Can a machine learning classifier distinguish between a normal successful login and one that is the result of a brute-force attack?
    context: This question uses a supervised ML model to determine the likelihood that a successful login is malicious. The model is trained on features surrounding the login event, such as the number of recent failures, time since last success, IP reputation, and time of day. It scores every new successful login, providing a probabilistic assessment that can catch sophisticated attackers who may have compromised an account.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Domain Controllers
      - Critical asset servers
      - VPN concentrators
      - Privileged access workstations
      - Cloud administration consoles
    range: last 90 days
    queries:
      - platform: pseudocode
        query: |
          ON successful login (Event ID 4624):
            EXTRACT features (preceding_failure_count, time_since_last_login, ip_rep, etc.)
            SCORE login event using pre-trained 'post-brute-force' classifier
            IF probability > 0.90:
              ALERT high_severity('ML model classified login as likely result of brute-force')