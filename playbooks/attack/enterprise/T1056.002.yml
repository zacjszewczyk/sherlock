name: T1056.002: GUI Input Capture
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversary attempts to capture user credentials by spoofing legitimate Graphical User Interface (GUI) prompts and subsequently exfiltrating the collected data. It covers detection of known malicious tools via hash matching, statistical analysis of rare processes and scripts, machine learning-based classification of suspicious behaviors, anomalous parent-child process relationships, and correlation of these events with network activity indicative of data exfiltration to known bad domains or via covert channels.
type: technique
related:
  - TA0006: Credential Access
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Is a process being created whose file hash matches a known malicious hash associated with GUI-based credential capture tools?
    context: This question aims to identify the execution of known malicious tools used for GUI-based credential theft, such as PowerSploit modules or Mimikatz variants. A match against a known malicious hash (IoC) is a high-confidence indicator that an adversary is attempting to capture user credentials by spoofing legitimate graphical user interface prompts. Detecting this early allows for rapid response before credentials can be successfully stolen and used for lateral movement.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, Remote Desktop servers, Citrix servers, Virtual Desktop Infrastructure (VDI) instances, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (event_id:4688 OR event_id:1)
          JOIN file_hash with known_malicious_hash_list
          ON process.hash = malicious_hash.hash
          RETURN hostname, user, process_name, process_hash
  - question: Is a rare or previously unseen process being spawned by a common user application, suggesting a potential custom credential theft tool?
    context: This question focuses on detecting unknown or custom malware that wouldn't be caught by signature-based methods. By calculating the enterprise-wide prevalence of every process hash, we can identify executables that are statistically rare. When a rare process is spawned by a common application like Outlook or Word, it is highly suspicious and could indicate a custom tool designed to spoof GUI prompts for credential capture.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, Remote Desktop servers, Citrix servers, Virtual Desktop Infrastructure (VDI) instances, SIEM correlation engine
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events over last 30 days
          WHERE parent_process in ('OUTLOOK.EXE', 'WINWORD.EXE', ...)
          CALCULATE prevalence of process.hash across all hosts
          FILTER prevalence < 0.1% OR count < 5
          RETURN hostname, user, process_name, process_hash, prevalence
  - question: Does a newly created process exhibit features that a machine learning model classifies as indicative of a credential phishing attempt?
    context: This question leverages machine learning to detect sophisticated credential theft attempts that may evade both signature-based and statistical methods. A supervised model, trained on features like parent-child relationships, command-line characteristics, and file paths, can identify complex patterns associated with malicious behavior. An alert from a high-confidence classification suggests that a process is highly likely to be a credential phisher.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, Remote Desktop servers, Citrix servers, Virtual Desktop Infrastructure (VDI) instances, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM process_creation_events to ML_model
          MODEL uses features: parent_process, path_depth, cmd_length, cmd_entropy, user
          IF model_prediction == 'credential_phisher' AND confidence > 0.90
          ALERT with event_details
  - question: Is a scripting interpreter being executed with command-line arguments or script content containing keywords for GUI creation?
    context: This question looks for direct evidence of scripts attempting to build GUI forms. The presence of keywords like 'System.Windows.Forms', 'Show-Dialog', or 'Out-GridView -PassThru' in PowerShell command lines or script blocks is a strong indicator of an attempt to create a pop-up window, which could be used to spoof a legitimate credential prompt.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows PowerShell Event ID 4104
      - User workstations, Domain Controllers, Application servers, Exchange servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH (command_line_events OR powershell_script_block_logs)
          FILTER command_line contains ('System.Windows.Forms' OR 'Show-Dialog' OR 'Out-GridView -PassThru')
          AND parent_process is not ('powershell_ise.exe')
          ALERT with event_details
  - question: Is a PowerShell script executing with unusually high character entropy or length compared to its historical baseline?
    context: This question aims to detect obfuscated or unusually complex scripts. Adversaries often embed malicious code, including GUI generation logic, within larger, obfuscated scripts to evade simple keyword-based detection. A sudden spike in the entropy or length of a script executed by a user or on a host, compared to its normal baseline, is a statistical anomaly that warrants investigation for malicious activity.
    answer_sources:
      - Windows PowerShell Event ID 4104
      - User workstations, Domain Controllers, Application servers, Exchange servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each user/host:
            CALCULATE baseline_entropy and baseline_length from PowerShell Event 4104 over last 90 days
          SEARCH new PowerShell Event 4104
          CALCULATE event_entropy and event_length
          IF event_entropy > 98th_percentile(baseline_entropy) OR event_length > 98th_percentile(baseline_length)
          ALERT with script_block_details
  - question: Is a machine learning model classifying a PowerShell script block as malicious based on its tokenized content?
    context: This question uses a sophisticated machine learning approach to analyze the full content of PowerShell scripts (Event ID 4104). By training a model on a large dataset of both benign and malicious scripts, it can learn the nuanced patterns, function calls, and structures indicative of credential theft, including GUI spoofing. This provides a more robust detection capability than keyword matching or simple statistical measures.
    answer_sources:
      - Windows PowerShell Event ID 4104
      - User workstations, Domain Controllers, Application servers, Exchange servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM powershell_script_block_logs (Event 4104) to ML_model
          MODEL analyzes tokenized script content
          IF model_prediction == 'malicious_gui_spoofer'
          ALERT with event_details
  - question: Is a common office application or non-interactive process spawning a scripting interpreter?
    context: This question identifies anomalous parent-child process relationships. Applications like Word, Outlook, or Adobe Reader should not normally spawn command shells or PowerShell. Such an event is highly indicative of a malicious macro or exploit being used to execute a secondary payload, which could be a script designed to create a fake GUI login prompt.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, File servers hosting Office documents, Mail servers, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (event_id:4688 OR event_id:1)
          WHERE (parent_process in ['WINWORD.EXE', 'OUTLOOK.EXE', 'AcroRd32.exe']
          AND child_process in ['powershell.exe', 'cmd.exe', 'wscript.exe'])
          ALERT with parent and child process details
  - question: Is a statistically rare or first-seen parent-child process relationship being observed?
    context: This question hunts for novel or unusual execution chains that deviate from established normal behavior. By baselining all parent-child process pairs across the environment, we can flag any pair that has never been seen before or is extremely infrequent. This statistical approach can uncover new attack vectors, such as a compromised application spawning an unexpected child process to capture credentials.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, File servers hosting Office documents, Mail servers, SIEM correlation engine
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE frequency of all parent-child_process pairs over last 30 days
          SEARCH new process_creation_events
          IF pair is 'first_seen' OR frequency < 1st_percentile
          ALERT with pair_details and frequency
  - question: Is an unsupervised machine learning model flagging a process creation event as a high-scoring anomaly?
    context: This question applies unsupervised anomaly detection to learn the normal patterns of process execution chains within the environment. Unlike supervised models, this approach does not require pre-labeled data. It can identify novel deviations from normal behavior based on features like process names, user context, and time of day. A high anomaly score indicates that a process creation event is a significant outlier and potentially malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, File servers hosting Office documents, Mail servers, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM process_creation_events to anomaly_detection_model (e.g., Isolation Forest)
          MODEL uses features: parent_name, child_name, user, time_of_day
          IF anomaly_score > threshold
          ALERT with event_details and score
  - question: Following a suspected GUI credential capture event, did the host make a network connection to a known malicious C2 endpoint?
    context: This question directly links a potential credential theft attempt on an endpoint with subsequent network activity indicative of exfiltration. By correlating a suspicious process alert with an outbound network connection to a destination on a threat intelligence blocklist, we can significantly increase the confidence of a true positive incident and accelerate the response.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Network egress points (firewalls, proxies), Endpoints, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for credential_capture_alerts in last 5 minutes
          GET source_host from alert
          SEARCH network_connection_logs from source_host within 5 minutes of alert
          JOIN destination_ip/domain with threat_intel_blocklist
          IF match found, ESCALATE to incident
  - question: Following a suspected credential capture event, did the host make a DNS query for a statistically anomalous domain?
    context: Adversaries often use newly registered or algorithmically generated domains for C2 communication to evade blocklists. This question analyzes DNS queries made shortly after a credential capture alert for suspicious characteristics. Domains that are very new, have high character entropy, or are rarely seen across the enterprise are flagged as potential C2 channels for exfiltrating stolen credentials.
    answer_sources:
      - Zeek dns.log
      - Network egress points (firewalls, proxies), DNS servers, Endpoints, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for credential_capture_alerts
          GET source_host from alert
          SEARCH dns_logs from source_host after alert time
          FOR each domain, CALCULATE registration_age, entropy, prevalence
          IF (registration_age < 30 days) OR (entropy > 3.5) OR (prevalence is rare)
          ALERT with domain_details
  - question: Following a suspected credential capture event, did the host attempt to resolve a domain classified as likely DGA-generated?
    context: This question uses a machine learning model to specifically detect Domain Generation Algorithms (DGAs), which are used by malware to create a large number of potential C2 domains. If a host attempts to resolve a domain that a DGA detection model flags as malicious shortly after a suspicious GUI process was observed, it strongly suggests an automated exfiltration attempt by malware.
    answer_sources:
      - Zeek dns.log
      - Network egress points (firewalls, proxies), DNS servers, Endpoints, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for credential_capture_alerts
          GET source_host from alert
          STREAM dns_logs from source_host to DGA_detection_model
          IF model_prediction == 'DGA'
          ALERT with domain and host details
  - question: Is an outbound HTTP POST request containing credential-like patterns originating from a non-browser process?
    context: This question inspects unencrypted HTTP traffic (or decrypted HTTPS) for cleartext credential exfiltration. Legitimate credential submissions typically come from web browsers. When a process like powershell.exe or an unsigned binary sends an HTTP POST request containing 'username=' or 'password=', it is a high-fidelity indicator that captured credentials are being sent to an adversary-controlled server.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Web proxies with TLS inspection, Network TAPs at egress points, Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH http_logs where http_method == 'POST'
          FILTER request_body contains regex(/(user|pass|login|cred)(name|word)?=/i)
          CORRELATE with process_logs on source_ip/timestamp
          IF originating_process is not in ('chrome.exe', 'firefox.exe', ...)
          ALERT with request and process details
  - question: Is a non-browser process making an HTTP POST request with a body size that is a statistical outlier for that process?
    context: This question provides a way to detect potential credential exfiltration without relying on specific keywords in the request body. By establishing a baseline of normal HTTP POST request sizes for each process, we can flag anomalies. A small request (under 1KB, typical for credentials) from a process that normally sends large amounts of data, or no data at all, is suspicious and could represent an exfiltration event.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Web proxies with TLS inspection, Network TAPs at egress points, Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process, CALCULATE baseline of http_post_size
          SEARCH http_logs where http_method == 'POST' and process is not a browser
          IF request_body_size is small (<1KB) AND is >3 standard deviations from baseline
          ALERT with request and process details
  - question: Is a machine learning model classifying an HTTP/S connection as malicious based on its metadata?
    context: This question leverages machine learning to detect malicious C2 traffic even when it is encrypted. By training a model on features like the originating process, destination Server Name Indicator (SNI), URI structure, and TLS handshake properties (JA3/JA3S), it can distinguish malicious connections from benign ones. This is effective for identifying exfiltration to C2 servers without needing to decrypt the traffic.
    answer_sources:
      - Zeek ssl.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Web proxies with TLS inspection, Network TAPs at egress points, Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM network_connection_metadata (process_name, sni, uri_path, ja3_hash) to ML_model
          IF model_prediction == 'malicious_exfil' AND confidence > 0.9
          ALERT with connection details
  - question: Following a credential capture alert, is data being sent from the host using unusually long DNS queries or ICMP packets with payloads?
    context: This question looks for evidence of data exfiltration over covert channels, which are often used to bypass firewalls and network monitoring. After a suspected credential capture, any DNS queries with abnormally long subdomains (suggesting encoded data) or ICMP echo requests with data payloads from the same host are highly suspicious and indicate a likely attempt to tunnel the stolen data out.
    answer_sources:
      - Zeek dns.log
      - Zeek icmp.log
      - DNS resolvers, Network egress points (firewalls), Endpoints, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for credential_capture_alerts
          GET source_host from alert
          SEARCH (dns_logs OR icmp_logs) from source_host after alert
          IF (dns_query_length > 100) OR (icmp_payload_size > 0)
          ALERT with host and covert channel details
  - question: Is a host exhibiting a sudden, sustained spike in DNS query activity that deviates from its baseline?
    context: This question aims to detect DNS tunneling through statistical analysis of a host's behavior over time. A sudden and significant increase in metrics like average query length, number of unique subdomains, or frequency of TXT record requests compared to the host's established 30-day baseline can indicate that the DNS protocol is being abused to exfiltrate data, such as captured credentials.
    answer_sources:
      - Zeek dns.log
      - DNS resolvers, Network egress points (firewalls), Endpoints, SIEM correlation engine
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host, CALCULATE 30-day baseline of DNS metrics (avg_len, unique_subdomains, txt_freq)
          MONITOR real-time DNS traffic per host
          IF current_metrics > (baseline + 3 * std_dev) for a sustained period
          ALERT on host for potential DNS tunneling
  - question: Is an unsupervised anomaly detection model flagging a host's DNS traffic as highly anomalous?
    context: This question applies machine learning to detect covert DNS exfiltration by learning a host's normal DNS behavior. An unsupervised model analyzes multiple features of DNS traffic in real-time, such as query/response sizes, label entropy, and query type distribution. A high anomaly score indicates that the host's current DNS activity is a significant departure from its learned profile, suggesting a potential tunneling attack.
    answer_sources:
      - Zeek dns.log
      - DNS resolvers, Network egress points (firewalls), Endpoints, SIEM correlation engine
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host, TRAIN anomaly_detection_model on historic DNS traffic features
          STREAM real-time DNS traffic to model
          IF anomaly_score > threshold
          ALERT on host for anomalous DNS behavior