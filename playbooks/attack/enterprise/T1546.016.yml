name: T1546.016: Installer Packages
id: 5a8a1b9c-6d3e-4f7b-9c2d-8e4a1b0c9f3a
description: This playbook focuses on detecting adversaries using malicious installer packages for persistence and privilege escalation. It provides investigative questions to identify Trojanized installers that drop known malicious files, create unauthorized persistence mechanisms (services, tasks, run keys), initiate suspicious network connections, execute obfuscated scripts, or leverage vulnerabilities for privilege escalation by spawning exploitation tools, elevating process integrity levels, or modifying sensitive system configurations like privileged groups and critical registry keys.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known installer process creating files or child processes that match known malicious hashes?
  context: This question seeks to identify Trojanized installers that drop or execute known malicious payloads. By correlating file creation or process execution events with common installer parent processes (e.g., msiexec.exe, setup.exe) and comparing the resulting file/process hash against threat intelligence, analysts can detect high-confidence compromises where an installer is used as a delivery mechanism for malware.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Windows Event ID 4104
  - Endpoint devices
  - Application servers
  - Software deployment servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation OR file_creation
      WHERE parent_process_name IN ('msiexec.exe', 'setup.exe', 'install.exe')
      JOIN threat_intelligence_feed ON (child_process_hash OR file_hash)
      RETURN host, timestamp, parent_process_name, child_process_name, hash
- question: Do PowerShell scripts executed by installer processes show signs of obfuscation through high entropy?
  context: Adversaries often obfuscate PowerShell scripts launched by installers to hide malicious commands. This question uses statistical analysis to identify such activity. By calculating the Shannon entropy of script blocks (from Event ID 4104) executed by installer processes, analysts can flag scripts with unusually high entropy scores, which are indicative of obfuscation or encryption and warrant further investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Windows Event ID 4104
  - Endpoint devices
  - Application servers
  - Software deployment servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH powershell_script_block_log (Event ID 4104)
      WHERE parent_process_name IN ('msiexec.exe', 'setup.exe', 'install.exe')
      CALCULATE shannon_entropy(script_block_text) as entropy_score
      WHERE entropy_score > 6.5
      RETURN host, timestamp, parent_process_name, entropy_score, script_block_text
- question: Can we predict if a file written by an installer is malicious based on its characteristics?
  context: This question leverages machine learning to proactively identify malicious files dropped by installers. A model can be trained on features like file entropy, size, write path (e.g., Temp vs. Program Files), parent process, and digital signature status. This allows for the automated scoring of files created during installation, enabling analysts to focus on high-probability malicious files that might be missed by signature-based detection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Windows Event ID 4104
  - Endpoint devices
  - Application servers
  - Software deployment servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT file_creation_events WHERE parent_process_name IS installer
      EXTRACT features (file_entropy, file_size, write_path, parent_process_name, is_signed)
      APPLY trained_classifier_model(features) as prediction_score
      WHERE prediction_score > 0.9
      ALERT host, timestamp, file_path, parent_process_name, prediction_score
- question: Has an installer process created a persistence mechanism that matches known malicious patterns?
  context: This question aims to detect when an installer creates a persistence mechanism (like a new service, scheduled task, or registry autorun key) that matches known adversary techniques. By monitoring for these persistence events and applying a ruleset (like Sigma or YARA) to their properties (e.g., service name, command line), analysts can identify installers being used to establish a long-term foothold on a system.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Endpoint devices
  - Application servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH service_creation OR scheduled_task_creation OR registry_autorun_modification
      CORRELATE event to parent_process (installer) via ProcessID
      APPLY ruleset (Sigma/YARA) to service_name, task_command, registry_value
      ON a match, ALERT host, timestamp, persistence_type, rule_name
- question: Has an installer created a persistence mechanism with statistically rare properties?
  context: Adversaries often create persistence in unusual locations or with uncommon names to evade detection. This question uses statistical rarity to uncover such anomalies. By calculating a rarity score for the properties of a new persistence entry (e.g., the executable path for a service), analysts can flag mechanisms that deviate significantly from established enterprise baselines, suggesting they may be malicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Endpoint devices
  - Application servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new persistence_event created by an installer:
        CALCULATE rarity_score(executable_path)
        CALCULATE rarity_score(service_name)
        CALCULATE rarity_score(user_context)
      AGGREGATE scores as combined_rarity
      WHERE combined_rarity > 98th_percentile_baseline
      ALERT host, timestamp, persistence_details, combined_rarity
- question: Can we predict if a new persistence entry created by an installer is malicious?
  context: This question uses a machine learning model to classify new persistence entries as benign or malicious. By training a classifier on features like the parent installer process, the path of the new executable, command-line arguments, and the rarity of the executable's path, the system can automatically flag suspicious persistence attempts that exhibit characteristics of known malware behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4697
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Endpoint devices
  - Application servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT persistence_creation_events from installers
      EXTRACT features (parent_process, executable_path, arguments, persistence_location, path_rarity)
      APPLY logistic_regression_model(features) as prediction
      WHERE prediction is 'malicious' AND confidence > 0.9
      ALERT host, timestamp, persistence_details, confidence_score
- question: Is a known installer package creating a persistence mechanism that is not on its approved allowlist?
  context: Legitimate installers often create specific, predictable persistence mechanisms. This question leverages this fact by maintaining an allowlist that maps approved installers to their authorized persistence entries. Any deviation—where an installer creates a service, task, or run key not on its explicit allowlist—is a strong indicator of a compromised or malicious installer.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4698
  - Windows Event ID 4697
  - Windows Event ID 4657
  - Endpoint devices
  - Application servers
  - Domain Controllers
  - Software deployment servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH persistence_creation_event
      WHERE installer_hash IN known_installer_allowlist
      AND created_persistence_entry NOT IN allowlist_for(installer_hash)
      ALERT host, timestamp, installer_name, unauthorized_persistence_entry
- question: Is a common installer creating persistence in a statistically unusual location or manner?
  context: This question aims to find anomalies by baselining the normal persistence-creating behavior of all installers in an environment. By using frequency analysis on the combination of the installer's name, the type of persistence, and the location of the created artifact, analysts can flag events that are statistically rare (e.g., a common installer writing a run key to a user's Temp directory), which could indicate a malicious variant.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4698
  - Windows Event ID 4697
  - Windows Event ID 4657
  - Endpoint devices
  - Application servers
  - Domain Controllers
  - Software deployment servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH persistence_creation_event by installer
      CREATE tuple of (installer_name, persistence_type, persistence_path_location)
      CALCULATE frequency of tuple over last 30 days
      WHERE frequency is in bottom 1st percentile
      ALERT host, timestamp, installer_name, rare_persistence_details
- question: Do persistence creation events by installers fall outside of normal behavioral clusters?
  context: This question uses unsupervised machine learning to identify anomalous installation patterns. By clustering persistence creation events based on features like the installer name, persistence type, and target path, the system can learn what "normal" installation behavior looks like. Events that do not fit into any dense cluster (i.e., are classified as noise or outliers) represent unusual activity that warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4698
  - Windows Event ID 4697
  - Windows Event ID 4657
  - Endpoint devices
  - Application servers
  - Domain Controllers
  - Software deployment servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT persistence_creation_events
      EXTRACT features (parent_process_name, persistence_type, target_path_characteristics, user_context)
      APPLY DBSCAN_clustering(features)
      FOR each event classified as 'noise' or in a sparse cluster
      ALERT host, timestamp, event_details, anomaly_reason
- question: Is an installer process making a network connection to a known malicious IP or domain?
  context: Malicious installers may need to connect to command-and-control (C2) servers to download additional payloads or exfiltrate data. This question seeks to detect this behavior by correlating network connection events with installer processes and comparing the destination IP/domain against threat intelligence feeds. A match provides a high-confidence indicator of a malicious installer.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network egress points (firewalls/proxies)
  - DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_connection_events
      CORRELATE to parent_process (installer) via ProcessID
      JOIN threat_intelligence_feed ON (destination_ip OR destination_domain)
      ON a match, ALERT host, timestamp, installer_process, malicious_destination
- question: Is an installer's network activity statistically anomalous compared to its historical baseline?
  context: This question focuses on detecting deviations from an installer's normal network behavior. By building a profile for each unique installer (e.g., typical destination ports, protocols, data volumes), analysts can flag instances where an installer's network connection is anomalous, such as connecting to a newly registered domain or transferring an unusually large amount of data, which could indicate C2 activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network egress points (firewalls/proxies)
  - DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each network_connection from an installer:
        COMPARE connection_properties (port, protocol, data_volume, domain_age) to historical_baseline for that installer_name
      WHERE data_volume > 99th_percentile_baseline OR domain_is_newly_registered
      ALERT host, timestamp, installer_name, anomalous_property
- question: Does an installer's network connection fall outside the boundary of normal behavior defined by a machine learning model?
  context: This question uses a one-class SVM model to learn the characteristics of legitimate installer network activity. The model creates a boundary around "normal" behavior based on features like port, protocol, JA3 hash, and connection size. Any new network connection from an installer that falls outside this learned boundary is flagged as a high-confidence anomaly, potentially indicating malicious activity not caught by signatures.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network egress points (firewalls/proxies)
  - DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT network_connections from installers
      EXTRACT features (dest_port, protocol, ja3_hash, duration, bytes_transferred, tld)
      APPLY one_class_svm_model(features) as anomaly_score
      WHERE anomaly_score indicates 'outlier'
      ALERT host, timestamp, installer_name, connection_details
- question: Is an installer executing a PowerShell script containing suspicious keywords or commands?
  context: Adversaries frequently use PowerShell for malicious post-installation tasks. This question involves applying a ruleset (like Sigma) to the content of PowerShell script blocks (Event ID 4104) that are executed by installer processes. This allows for the detection of specific suspicious commands like 'IEX', 'DownloadString', or Base64-encoded payloads, indicating malicious script execution.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint devices
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH powershell_script_block_log (Event ID 4104)
      WHERE parent_process_name IN ('msiexec.exe', 'setup.exe', 'install.exe')
      APPLY ruleset to script_block_text for keywords ('IEX', 'DownloadString', etc.)
      ON a match, ALERT host, timestamp, parent_process_name, rule_name, script_block_text
- question: Is an installer executing a PowerShell script that is statistically anomalous in its content or cmdlet usage?
  context: This question uses statistical methods to find unusual scripts executed by installers. By calculating the Shannon entropy of script content, analysts can identify obfuscated code. Additionally, by tracking the frequency of cmdlet usage by installers over time, the system can flag the use of statistically rare cmdlets, which may indicate an adversary is using functionality not typical for a standard installation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint devices
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH powershell_script_block_log (Event ID 4104) from installers
      CALCULATE shannon_entropy(script_block_text) as entropy
      CALCULATE cmdlet_rarity(script_block_text)
      WHERE entropy > 95th_percentile OR cmdlet_rarity is high
      ALERT host, timestamp, parent_process_name, anomaly_type
- question: Does a machine learning model classify a script executed by an installer as malicious?
  context: This question leverages a pre-trained Natural Language Processing (NLP) model to analyze and classify PowerShell scripts. By feeding the script block content from installers into a model trained to distinguish between malicious and benign scripts, analysts can achieve a high degree of accuracy in detecting sophisticated or novel malicious scripts that might evade signature or statistical methods.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint devices
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT powershell_script_block_log (Event ID 4104) from installers
      APPLY nlp_classifier_model(script_block_text) as prediction
      WHERE prediction is 'malicious' AND confidence > 0.90
      ALERT host, timestamp, parent_process_name, confidence_score, script_block_text
- question: Has an executed installer been identified as a known vulnerable application with a privilege escalation exploit?
  context: Adversaries may use legitimate but vulnerable installers to escalate privileges. This question involves checking the file hash of any executed installer against a database of known-vulnerable software versions. A match indicates that a potential attack vector for privilege escalation has been introduced into the environment and requires immediate attention.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint devices
  - Software repositories
  - Patch management systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation
      WHERE process_name IN ('msiexec.exe', 'setup.exe', 'install.exe')
      JOIN vulnerable_installer_database ON (process_hash)
      ON a match, ALERT host, timestamp, process_name, cve_details
- question: Is a new software installation known to have a high-severity privilege escalation vulnerability?
  context: This question aims to proactively identify risk by flagging the installation of any software with known, severe privilege escalation vulnerabilities. By cross-referencing the name and version of newly installed software against a vulnerability database (like NVD), analysts can identify and review installations that introduce a significant security risk (e.g., CVSS score > 7.0) before it can be exploited.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint devices
  - Software repositories
  - Patch management systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new software_installation_event:
        LOOKUP software_name, software_version in vulnerability_database
      WHERE vulnerability_exists AND cvss_score > 7.0 AND attack_vector is 'Local'
      ALERT host, timestamp, software_name, software_version, cve_details
- question: Can we predict if an installer corresponds to a known vulnerable version of an application?
  context: This question uses a machine learning model to proactively identify the installation of outdated, vulnerable software. The model is trained on features like software name, version string, and publisher information from both vulnerable and patched installers. This allows the system to flag potentially risky installations even if an exact hash match isn't found in a vulnerability database.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint devices
  - Software repositories
  - Patch management systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT installer_execution_events
      EXTRACT features (software_name, version_string, publisher, certificate_info)
      APPLY vulnerability_classifier_model(features) as prediction
      WHERE prediction is 'vulnerable'
      ALERT host, timestamp, installer_name, prediction_details
- question: Has an installer spawned a child process associated with known privilege escalation tools?
  context: A key indicator of exploitation is an installer process spawning a known privilege escalation tool (e.g., JuicyPotato, PrintSpoofer). This question involves monitoring the child processes of installers and using regular expressions to match their process names or command-line arguments against a list of known tools and techniques, enabling rapid detection of active exploitation attempts.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint devices
  - Domain Controllers
  - High-value asset servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation
      WHERE parent_process_name IS installer
      APPLY regex on child_process_command_line for patterns ('JuicyPotato', 'PrintSpoofer', 'Invoke-PowerUp')
      ON a match, ALERT host, timestamp, parent_process, suspicious_child_process
- question: Do the command-line arguments of a child process spawned by an installer show signs of obfuscation or rarity?
  context: Adversaries often obfuscate command-line arguments to hide privilege escalation activities. This question uses statistical analysis to detect these anomalies. By calculating the Shannon entropy or character frequency of command lines for processes spawned by installers, analysts can flag commands that are highly random or use statistically rare arguments, which may indicate malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint devices
  - Domain Controllers
  - High-value asset servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation where parent_process_name IS installer
      CALCULATE shannon_entropy(child_process_command_line) as entropy
      WHERE entropy > 99th_percentile_for(child_process_name)
      ALERT host, timestamp, child_process_name, high_entropy_command_line
- question: Are the command-line arguments of a child process spawned by an installer anomalous according to a machine learning model?
  context: This question employs a sequence-based model (like an LSTM) to learn the normal structure and syntax of command-line arguments for processes launched by legitimate installers. The model can then identify any new command line that deviates significantly from these learned patterns, flagging it as an anomaly. This is effective for detecting novel or heavily obfuscated privilege escalation techniques.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint devices
  - Domain Controllers
  - High-value asset servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT command_line_tokens from child processes of installers
      APPLY lstm_anomaly_detection_model(command_line_tokens) as anomaly_score
      WHERE anomaly_score is high
      ALERT host, timestamp, parent_process, anomalous_command_line
- question: Has an installer process elevated its child process's integrity level without using the standard UAC mechanism?
  context: A significant indicator of a privilege escalation exploit is when a process running at a 'Medium' integrity level spawns a child process at a 'High' or 'System' level without the involvement of a legitimate broker like `consent.exe` (the UAC prompt). This question creates a specific rule to detect this non-standard elevation, which is highly suspicious behavior for an installer process.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices
  - User workstations
  - Terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation (Sysmon Event ID 1)
      WHERE parent_process_name IS installer
      AND parent_integrity_level is 'Medium'
      AND child_integrity_level IN ('High', 'System')
      AND child_process_name IS NOT 'consent.exe'
      ALERT host, timestamp, parent_process, child_process, integrity_levels
- question: Has an installer spawned a child process with a statistically anomalous integrity level?
  context: This question establishes a baseline of the normal integrity levels for child processes spawned by each unique installer. By tracking this data, the system can alert when an installer creates a child process with an integrity level that is a statistical outlier (e.g., a specific installer almost always spawns 'Medium' integrity children, but suddenly spawns one at 'System' level), indicating a potential exploit.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices
  - User workstations
  - Terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event from an installer:
        LOOKUP historical_integrity_levels for that installer_name
      WHERE child_integrity_level is statistically rare for that installer
      ALERT host, timestamp, installer_name, child_process, anomalous_integrity_level
- question: Is a process integrity level elevation by an installer identified as an anomaly by a machine learning model?
  context: This question uses an unsupervised learning algorithm, like Isolation Forest, to detect rare and anomalous combinations of process creation features. The model can quickly isolate events where an installer process at one integrity level spawns a child at another, unexpected level. Such isolated events are flagged as highly anomalous and likely indicative of a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices
  - User workstations
  - Terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT process_creation_events
      EXTRACT features (parent_name, child_name, parent_integrity, child_integrity)
      APPLY isolation_forest_model(features) as anomaly_score
      WHERE anomaly_score is high
      ALERT host, timestamp, event_details, anomaly_score
- question: Has a user been added to a privileged group by an installer process or its child?
  context: A direct method of privilege escalation is adding a user account to a high-privilege group like 'Administrators'. This question creates a high-severity alert for any such group modification and correlates it back to recent process creation events. If the process responsible for the change is an installer, it is a strong sign that the installer was malicious and used to elevate privileges.
  answer_sources:
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Windows Event ID 4688
  - Endpoint devices
  - Domain Controllers
  - Active Directory databases
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH privileged_group_membership_add (Event ID 4732/4728)
      CORRELATE subject_process_name with recent process_creation_events
      WHERE original_parent_process is installer within last 5 minutes
      ALERT host, timestamp, user_added, group_name, responsible_process
- question: Is there a sudden spike in privileged group modifications immediately following a software installation?
  context: This question uses time-series analysis to detect anomalous bursts of activity. A malicious installer might make several system changes, including adding users to groups. By monitoring the baseline rate of group modifications per host, the system can detect a sudden spike that occurs right after an installation event, flagging a strong statistical anomaly that warrants investigation.
  answer_sources:
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Windows Event ID 4688
  - Endpoint devices
  - Domain Controllers
  - Active Directory databases
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR hourly rate of group_modification_events per host
      DETECT installation_events (4688)
      IF rate of group_modifications > (baseline_rate + 3 * std_dev) within 1 hour of installation
      ALERT host, timestamp, spike_details
- question: Does a machine learning model classify a group membership change initiated by an installer as suspicious?
  context: This question uses a classifier to determine if a group membership change is malicious. A model can be trained to recognize that changes made by processes like `net.exe` are highly suspicious if their parent process was an installer (e.g., `msiexec.exe`), as this is not a standard installation behavior. This provides an automated way to flag high-risk privilege escalation events.
  answer_sources:
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Windows Event ID 4688
  - Endpoint devices
  - Domain Controllers
  - Active Directory databases
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT group_membership_change_events
      EXTRACT features (process_name, parent_process_name, group_name, time_of_day)
      APPLY decision_tree_model(features) as prediction
      WHERE prediction is 'suspicious'
      ALERT host, timestamp, event_details
- question: Has an installer process modified a sensitive registry key used for privilege escalation or persistence?
  context: Adversaries often modify critical registry keys (e.g., Image File Execution Options, LSA, Winlogon) to escalate privileges or establish persistence. This question creates a rule to generate a critical alert whenever any write or create operation is performed on these monitored keys by a process that is identified as an installer or a direct child of an installer, as this is highly indicative of malicious activity.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Endpoint devices
  - Windows Registry hives on critical servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_key_modification
      WHERE target_key_path IN ('HKLM\\...\\IFEO', 'HKLM\\...\\Lsa', etc.)
      AND (process_name is installer OR parent_process_name is installer)
      ALERT host, timestamp, process_name, modified_key, value
- question: Has a statistically rare process, such as an installer, modified a sensitive registry key?
  context: Certain sensitive registry keys are typically only modified by a small, predictable set of system processes. This question builds a frequency profile of which processes normally write to these keys. An alert is generated if a process that rarely or has never been seen modifying a specific sensitive key, such as `msiexec.exe`, performs a write operation, flagging it as a statistical anomaly.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Endpoint devices
  - Windows Registry hives on critical servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_key_modification on sensitive_keys
      LOOKUP historical frequency of process_name writing to target_key_path
      WHERE frequency is in bottom 1st percentile OR is zero
      ALERT host, timestamp, rare_process_name, target_key_path
- question: Did an installer's sequence of registry key access deviate from normal installation behavior?
  context: Legitimate installers tend to access registry keys in a predictable sequence. This question uses a Markov Chain model to learn these normal transition probabilities (e.g., the likelihood of accessing Key B after Key A). If an installer follows an anomalous path, such as writing to its own software key and then immediately writing to a sensitive system key like IFEO (a low-probability transition), the model flags this deviation as suspicious.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Endpoint devices
  - Windows Registry hives on critical servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL sequence of registry_key_access events during installations
      FOR each new installation:
        CALCULATE probability of observed access sequence using Markov Chain model
      WHERE probability is anomalously low
      ALERT host, timestamp, installer_name, anomalous_registry_sequence