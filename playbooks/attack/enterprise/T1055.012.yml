name: T1055.012: Process Hollowing
id: f8a5b2c1-d3e4-4f6a-8b9c-1d0e9f8a7b6c
description: This playbook helps identify Process Hollowing (T1055.012), a technique where an adversary creates a new process in a suspended state and replaces its memory with malicious code before resuming it. This allows malicious code to execute under the guise of a legitimate process, aiding in privilege escalation and defense evasion. Key indicators include anomalous parent-child process relationships (e.g., svchost.exe spawned by an Office app), significant delays between process creation and its first activity, direct memory modification from a parent to a child process (e.g., via Sysmon Event ID 10), suspicious network activity from commonly hollowed processes, obfuscated command-line arguments, and the use of CreateRemoteThread to inject code into legitimate processes.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors: Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any critical system binaries been created by a parent process that is not on the established known-good parent-child whitelist?
  context: Adversaries using process hollowing often start legitimate system processes (e.g., svchost.exe) from an anomalous parent (e.g., winword.exe) to mask their activity. Legitimate system processes have predictable parent-child relationships (e.g., services.exe is the parent of svchost.exe). This question aims to detect violations of these expected relationships, which are a strong indicator of process hollowing or similar injection techniques.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - User Workstations
  - Member Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR
    query: |
      SEARCH process_creation_logs
      WHERE child_process_name IN (critical_system_binaries_list)
      AND parent_process_name NOT IN (known_good_parents_for_child)
      | ALERT
- question: Are there any statistically rare parent-child process pairs occurring in the environment that might indicate process hollowing?
  context: While whitelists are effective, they can be rigid. This question uses a statistical approach to find outliers. By analyzing the frequency of all parent-child process relationships across the environment ($$ P(pair) < P_{1} $$), we can identify pairs that occur very rarely. A legitimate process being spawned by an unusual parent will appear as a low-frequency event and could indicate malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - User Workstations
  - Member Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      COUNT process_creation_events BY parent_process, child_process over last 30 days
      | CALCULATE frequency_percentile
      | SEARCH where frequency_percentile < 1%
      | ALERT
- question: Has an unsupervised anomaly detection model identified any process creation events as significant deviations from the established baseline of normal behavior?
  context: This question leverages machine learning to detect novel or complex variations of process hollowing. An unsupervised model, like an Isolation Forest, learns the characteristics of normal process creation events (e.g., parent process name, child process name, file paths). It can then flag new events that differ significantly from this learned norm, indicating a potential anomaly that requires investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - User Workstations
  - Member Servers
  range: last 90 days
  queries:
  - search_technology: ML Anomaly Detection Engine
    query: |
      PROCESS process_creation_logs with anomaly_detection_model(features=[parent_name, child_name, parent_path])
      | FILTER events with anomaly_score > threshold
      | ALERT
- question: Has a commonly hollowed process exceeded a static time threshold between its creation and its first subsequent activity?
  context: Process hollowing involves creating a process in a suspended state to allow time for memory manipulation. This question checks for a suspicious delay between process creation and its first action (like a network connection or child process creation). A static threshold (e.g., > 5 seconds) for a watchlist of vulnerable processes can serve as a simple but effective indicator of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Zeek conn.log
  - User Workstations
  - Critical Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR Correlation
    query: |
      CORRELATE process_creation_events (EID 1) with first_activity_events (network, child_process) BY process_guid
      | CALCULATE time_delta = first_activity.timestamp - creation.timestamp
      | WHERE process_name IN (hollowed_process_watchlist) AND time_delta > 5s
      | ALERT
- question: Is any process exhibiting an abnormally long startup delay compared to its own historical behavior?
  context: This question improves upon a static threshold by comparing a process's startup time to its own historical baseline. By calculating the time delta between creation and first activity and flagging instances that exceed a high percentile ($$ \Delta t > P_{99} $$), this method can dynamically detect suspicious delays for any process, not just those on a watchlist, making it more adaptive to different process behaviors.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Zeek conn.log
  - User Workstations
  - Critical Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      CALCULATE time_delta between process_creation and first_activity per process_instance
      | LOOKUP historical_percentile(99) for process_name
      | WHERE time_delta > historical_99th_percentile
      | ALERT
- question: Has a clustering algorithm classified any new process event as having 'suspended' startup behavior?
  context: This question uses machine learning to categorize process startup behavior. By clustering events based on features like time-to-first-action and parent process, the model can identify distinct groups, such as 'normal' and 'suspended' startups. New events that fall into a 'suspended' cluster are flagged as highly suspicious, providing a sophisticated method for detecting the initial stage of process hollowing.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Zeek conn.log
  - User Workstations
  - Critical Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - search_technology: ML Clustering Engine
    query: |
      PROCESS process_events with clustering_model(features=[time_to_first_action, parent_name, cmd_entropy])
      | CLASSIFY new events into learned clusters
      | FILTER events classified as 'suspended'
      | ALERT
- question: Has a parent process been observed writing to the memory of a newly created child process?
  context: A key step in process hollowing is the parent process writing malicious code into the memory space of the suspended child process. This question uses a correlation rule to detect this specific, high-fidelity sequence: a Sysmon Event ID 1 (Process Creation) immediately followed by a Sysmon Event ID 10 (Process Access) where the parent accesses the child with memory write permissions (e.g., `PROCESS_VM_WRITE`).
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - Domain Controllers
  - User Workstations
  - Member Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR Correlation
    query: |
      SEQUENCE [Sysmon EID 1 as create] by host, [Sysmon EID 10 as access] by host
      WHERE create.TargetImage == access.TargetImage AND create.Image == access.SourceImage
      AND access.GrantedAccess includes ('PROCESS_VM_WRITE' or 'PROCESS_VM_OPERATION')
      | ALERT
- question: Have any parent-child process pairs used statistically rare memory access rights during a process access event?
  context: Beyond a simple rule, this question analyzes the frequency of `GrantedAccess` codes used between specific parent-child pairs. Legitimate interactions typically use a predictable set of access rights. If a process access event shows a parent using a rare memory write permission on its child, especially if that pair has never used it before (<0.1% frequency), it strongly suggests an anomalous and potentially malicious memory manipulation event.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - Domain Controllers
  - User Workstations
  - Member Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      PROFILE frequency of GrantedAccess codes per (SourceImage, TargetImage) pair
      | FOR each new Sysmon EID 10 event
      | IF frequency of event.GrantedAccess for (event.SourceImage, event.TargetImage) < 0.1%
      | AND event.GrantedAccess includes memory write flags
      | THEN ALERT
- question: Has a sequence-based model flagged a [Process Create -> Process Access with write rights] event sequence as anomalous?
  context: This question employs a sophisticated sequence analysis model (like an LSTM or HMM) to understand the normal flow of events on a host after a process is created. The model learns legitimate sequences. An event sequence where a process is created and then immediately accessed with write permissions by its parent, especially if the child is a common system binary, would be flagged by the model as a low-probability, anomalous pattern indicative of process hollowing.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - Domain Controllers
  - User Workstations
  - Member Servers
  range: last 90 days
  queries:
  - search_technology: ML Sequence Analysis Engine
    query: |
      PROCESS sequences of Sysmon events per host with sequence_model
      | SCORE probability of each sequence
      | FILTER for sequences matching [Create -> Access(Write)] with low_probability_score
      | ALERT
- question: Has a process created by an anomalous parent made a network connection to a known malicious IP or domain?
  context: This is a high-confidence indicator that combines two suspicious events. An anomalously spawned process (e.g., 'svchost.exe' not created by 'services.exe') that also communicates with a destination on a threat intelligence feed is very likely a compromised process executing a malicious payload. This question correlates process and network data to detect this specific pattern.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR Correlation
    query: |
      CORRELATE process_creation_logs with network_connection_logs
      | JOIN with threat_intelligence_feed ON destination_ip/domain
      | WHERE parent_process is anomalous for child_process
      | ALERT
- question: Does a process exhibit high-entropy network behavior or connect using a rare JA3S hash shortly after creation?
  context: Adversaries often use domain generation algorithms (DGAs) or non-standard TLS clients for C2 communications. This question looks for these artifacts. High Shannon entropy ($$ H(X) $$) in DNS queries suggests DGA, while a statistically rare JA3S hash (server-side TLS fingerprint) indicates the process is communicating with a non-standard or previously unseen server, both of which are red flags for malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  range: last 90 days
  queries:
  - search_technology: Network/Analytics Platform
    query: |
      FOR each process, within 5 mins of creation:
      CALCULATE shannon_entropy of DNS queries OR prevalence of JA3S hash
      IF entropy > high_threshold OR prevalence < 1%
      THEN ALERT
- question: Has a graph-based anomaly detection model identified a rare subgraph representing a suspicious process execution and network connection chain?
  context: This question models endpoint and network activity as a graph, where nodes are processes, hosts, and IPs. The model learns what normal connections and process relationships look like. It can then detect the emergence of anomalous subgraphs, such as an Office app spawning `calculator.exe` which then connects to a low-reputation IP. This provides a holistic view of an attack chain.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  range: last 90 days
  queries:
  - search_technology: Graph Analytics/ML Engine
    query: |
      CONSTRUCT graph from process and network logs
      | RUN anomaly detection to find rare subgraphs
      | FILTER for subgraphs like [App -> Process -> LowRep_IP]
      | ALERT
- question: Has a process been created with a command line that matches known malicious patterns or YARA rules?
  context: Attackers often reuse tools and scripts for process hollowing, which leave identifiable signatures in command-line arguments. This question aims to detect these known patterns. By scanning process creation events against a library of YARA or regex rules for tools like Formbook or Dridex, defenders can catch common and known malicious implementations of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR
    query: |
      SEARCH process_creation_logs
      | SCAN CommandLine field with YARA/regex rule_set
      | ON match, ALERT
- question: Has a process been launched with a command line that has abnormally high entropy or a strange character ratio?
  context: To evade signature-based detection, attackers often obfuscate payloads and commands passed via the command line. This obfuscation typically results in a high degree of randomness (entropy) or an unusual ratio of alphanumeric to non-alphanumeric characters. This question establishes a baseline for normal command lines for each process and flags outliers that exceed statistical thresholds, suggesting obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      FOR each process_creation_event:
      CALCULATE entropy and char_ratio of CommandLine
      LOOKUP baseline_mean, baseline_std_dev for process_name
      IF entropy > (baseline_mean + 3*baseline_std_dev)
      THEN ALERT
- question: Has a text classification model classified a process command line as malicious?
  context: This question uses a supervised machine learning model trained on a large dataset of benign and malicious command lines. The model learns the subtle textual and structural features that differentiate them. It can then classify new, unseen command lines in real-time, providing a powerful and adaptive method for detecting novel or heavily obfuscated malicious commands associated with process hollowing.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: ML Text Classification Engine
    query: |
      PROCESS process_creation_logs with command_line_classifier_model
      | FILTER events where classification is 'malicious' and confidence > high_threshold
      | ALERT
- question: Has a process that should never have network activity been observed making an outbound connection?
  context: Certain legitimate Windows processes, like 'calculator.exe' or 'notepad.exe', have no reason to make network connections. An outbound connection from one of these processes is a very strong indicator that it has been compromised, likely through a technique like process hollowing. This question checks for this clear violation of expected behavior by correlating process and network logs against a blacklist.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - User Workstations
  - Application Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR Correlation
    query: |
      SEARCH network_connection_logs
      WHERE process_name IN (network_blacklist)
      | ALERT
- question: Has a process exhibited network behavior that deviates significantly from its historical baseline?
  context: Even processes that are expected to use the network, like 'svchost.exe', tend to have predictable behavior (e.g., connecting to specific ports). This question establishes a historical baseline of normal network activity for each process, including destination ports, protocols, and data volume. It then alerts on significant deviations, such as connecting to a port outside the top 99.9% of historical ports, which could indicate a hollowed process being used for C2.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - User Workstations
  - Application Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      FOR each network_connection:
      LOOKUP historical_profile for process_name (ports, protocols, volume)
      IF connection.port is not in top 99.9% of historical ports
      OR connection.volume > 99th_percentile of historical volume
      THEN ALERT
- question: Has an autoencoder neural network detected an anomalous network connection based on high reconstruction error?
  context: This question uses an autoencoder, a type of neural network, to learn a compressed representation of 'normal' network connections based on features like process name, port, and data volume. When a new connection event is processed, the model attempts to reconstruct it. A high reconstruction error means the event is dissimilar to the learned norm and is therefore anomalous, providing a way to detect novel malicious network patterns.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - User Workstations
  - Application Servers
  range: last 90 days
  queries:
  - search_technology: ML Anomaly Detection Engine
    query: |
      PROCESS network_connection_logs with autoencoder_model
      | CALCULATE reconstruction_error for each event
      | IF reconstruction_error > anomaly_threshold
      THEN ALERT
- question: Has a parent process terminated almost immediately after creating a child process?
  context: This behavior is characteristic of a 'dropper' or 'loader,' where a parent process's only job is to launch a payload (the child process) and then quickly exit to evade detection. This question uses a stateful correlation rule to look for the sequence of parent creation, child creation, and parent termination, alerting if the time between child creation and parent termination is suspiciously short (e.g., < 2 seconds).
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR Correlation
    query: |
      SEQUENCE [EID 4688 as child_create], [EID 4689 as parent_terminate]
      WHERE child_create.CreatorProcessId == parent_terminate.ProcessId
      | CALCULATE time_delta = parent_terminate.timestamp - child_create.timestamp
      | IF time_delta < 2s
      THEN ALERT
- question: Has any parent process exhibited an abnormally short lifespan after spawning a child, compared to its historical behavior?
  context: Building on the fixed-threshold concept, this question analyzes the 'parent post-spawn lifespan' for every process creation event. By calculating the distribution of these lifespans for each parent process name, it can identify instances that are statistical outliers. A parent that terminates in the 1st percentile of its typical lifespan after creating a child is an anomaly that strongly suggests dropper-like behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      CALCULATE parent_lifespan_after_spawn for each parent-child event
      | LOOKUP historical_lifespan_percentile(1) for parent_process_name
      | IF parent_lifespan_after_spawn < historical_1st_percentile
      THEN ALERT
- question: Has a sequence analysis model detected a low-probability 'create-child-then-terminate' event pattern?
  context: This question applies a sequence analysis model (like an RNN) to learn the normal probability of various event sequences on a host. A pattern where a parent process creates a child and then terminates very quickly is often associated with malicious loaders. The model can assign a probability score to this sequence; a very low score indicates the pattern is rare and highly suspicious for that context.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search_technology: ML Sequence Analysis Engine
    query: |
      PROCESS sequences of endpoint events per host with sequence_model
      | SCORE probability of each sequence
      | FILTER for sequences matching [Create -> Terminate] with low_probability_score and short_time_delta
      | ALERT
- question: Has any process injected a thread into a different process, particularly a legitimate system process?
  context: CreateRemoteThread is a Windows API call that allows one process to create a thread in another, a technique often used for code injection and a key component of some process hollowing methods. This question looks for Sysmon Event ID 8 (CreateRemoteThread) where the source and target processes are different. This is highly suspicious, especially when the target is a common system process like 'explorer.exe' and the source is not a known good tool.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 1
  - User Workstations
  - Terminal Servers
  - Critical Application Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/EDR
    query: |
      SEARCH for Sysmon Event ID 8
      WHERE SourceImage != TargetImage
      AND TargetImage IN (common_system_processes)
      AND SourceImage NOT IN (known_good_tools)
      | ALERT
- question: Has a statistically rare source-target process pair been observed in a CreateRemoteThread event?
  context: While some legitimate applications use CreateRemoteThread, they typically do so in predictable ways. This question baselines normal `(SourceImage, TargetImage)` pairs for CreateRemoteThread events. It then alerts on any pair that is statistically rare (e.g., seen < 5 times in 90 days) or involves a source process running from an unusual location like `AppData`. This helps distinguish legitimate use from malicious injection.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 1
  - User Workstations
  - Terminal Servers
  - Critical Application Servers
  range: last 90 days
  queries:
  - search_technology: SIEM/Analytics Platform
    query: |
      PROFILE frequency of (SourceImage, TargetImage) pairs from Sysmon EID 8
      | FOR each new EID 8 event:
      | IF pair_frequency < 5 in last 90 days OR SourceImage path is in user-writable dir
      | THEN ALERT
- question: Has a machine learning model classified a CreateRemoteThread event as malicious?
  context: This question uses a classification model (e.g., Random Forest) trained on features from CreateRemoteThread events. By learning from labeled examples, the model can predict whether a new event is malicious based on a combination of factors like the source/target processes, their reputation, and their file paths. This provides a robust and adaptive method for detecting suspicious thread injection.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 1
  - User Workstations
  - Terminal Servers
  - Critical Application Servers
  range: last 90 days
  queries:
  - search_technology: ML Classification Engine
    query: |
      PROCESS Sysmon EID 8 events with createremotethread_classifier_model
      | FILTER events where classification is 'malicious' and confidence > high_threshold
      | ALERT