name: "T1055.012: Process Hollowing"
id: "a4b1c8d0-9e7f-4a6b-8c5d-1f2a3b4c5d6e"
description: "This playbook is designed to detect Process Hollowing (T1055.012), a technique used by adversaries for privilege escalation and defense evasion. It focuses on identifying malicious code execution disguised within legitimate processes. Key indicators include anomalous parent-child process relationships (e.g., svchost.exe spawned by an unusual parent), processes created in a suspended state which is indicated by a significant delay before their first activity, a parent process writing into its child's memory space, and the use of CreateRemoteThread for cross-process injection. The playbook also helps uncover defense evasion tactics such as hollowed processes making network connections to suspicious destinations, using obfuscated command-line arguments, processes with no normal network function making outbound connections, and parent processes terminating immediately after spawning a child to cover their tracks."
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there any process creation events that violate established known-good parent-child relationships for critical system binaries?"
    context: "This question aims to detect a common process hollowing indicator where a legitimate process is spawned by an unusual parent. For example, svchost.exe should be created by services.exe. If it's created by winword.exe, it's highly suspicious. By maintaining a whitelist of expected relationships, any deviation can be quickly identified as a potential threat."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Domain Controllers"
      - "User Workstations"
      - "Member Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_creation_logs | WHERE child_process IN (critical_binaries) AND parent_child_pair NOT IN (known_good_pairs) | RETURN host, parent_process, child_process, timestamp"
  - question: "Have any statistically rare parent-child process pairs been observed across the environment?"
    context: "This question uses a statistical approach to find anomalies without a predefined whitelist. By baselining all parent-child process relationships over a period, we can identify pairs that occur very infrequently. Such rare events are often indicative of malicious activity, like process hollowing, that deviates from normal system behavior. The threshold $$ P(pair) < P_{1} $$ flags the rarest 1% of relationships for investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Domain Controllers"
      - "User Workstations"
      - "Member Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_creation_logs | STATS count BY parent_process, child_process | EVENTSTATS total(count) as total_events | EVAL frequency = count/total_events | WHERE frequency < 1st_percentile | RETURN parent_process, child_process, frequency"
  - question: "Has an unsupervised machine learning model detected any anomalous process creation events based on parent-child features?"
    context: "This question leverages machine learning to automate the detection of unusual process creations. An unsupervised model like an Isolation Forest can learn the complex patterns of normal behavior from features like parent/child names and paths. Events that the model flags with a high anomaly score are significant deviations from this learned baseline and are strong candidates for process hollowing attempts."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Domain Controllers"
      - "User Workstations"
      - "Member Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_creation_logs | INPUT to anomaly_detection_model(features=[parent, child, parent_path]) | WHERE anomaly_score > threshold | RETURN host, parent_process, child_process, anomaly_score"
  - question: "Has a commonly hollowed process exceeded a static time threshold between its creation and its first subsequent activity?"
    context: "This question seeks to identify processes created in a suspended state, a key step in process hollowing. Adversaries suspend a process to modify its memory before resuming it. This results in an abnormally long delay between the process creation event and its first action, such as a network connection or loading a module. A static threshold (e.g., > 5 seconds) for watchlist processes provides a simple but effective detection method."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 7"
      - "Zeek conn.log"
      - "User Workstations"
      - "Critical Application Servers"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - "pseudocode: CORRELATE process_creation_logs with (network_logs OR child_process_logs OR module_load_logs) | CALCULATE time_delta = first_activity_time - creation_time | WHERE child_process IN (hollowing_watchlist) AND time_delta > 5_seconds | RETURN host, process_name, time_delta"
  - question: "Has any process exhibited an abnormally long startup delay, exceeding the 99th percentile of its historical distribution?"
    context: "This question uses a statistical approach to detect suspended processes by dynamically baselining the startup time for every process. Instead of a static threshold, it compares the time delta between creation and first activity ($$ \\Delta t $$) to the historical behavior of that specific process. An instance where the delay exceeds a high percentile (e.g., $$ P_{99} $$) is a strong statistical anomaly, suggesting potential manipulation like process hollowing."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 7"
      - "Zeek conn.log"
      - "User Workstations"
      - "Critical Application Servers"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - "pseudocode: CORRELATE process_creation_logs with subsequent_activity_logs | CALCULATE time_delta | FOR each process_name, calculate 99th_percentile(time_delta) as threshold | WHERE time_delta > threshold | RETURN host, process_name, time_delta, threshold"
  - question: "Has a clustering model classified any new process event as having 'suspended' startup behavior?"
    context: "This question applies unsupervised machine learning to group process startup behaviors. By using a clustering algorithm like DBSCAN on features like time-to-first-action and parent process, the system can automatically identify distinct clusters. These clusters can be labeled as 'normal' or 'suspended'. Any new process event that falls into a 'suspended' cluster is flagged as a high-risk anomaly indicative of process hollowing."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 7"
      - "Zeek conn.log"
      - "User Workstations"
      - "Critical Application Servers"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - "pseudocode: GATHER process_startup_features (time_delta, parent, cmd_entropy) | INPUT to clustering_model | WHERE cluster_label == 'suspended' | RETURN host, process_name, cluster_label"
  - question: "Has a parent process been observed accessing its newly created child process with memory write permissions?"
    context: "This question targets a direct indicator of process hollowing: a parent process writing to the memory of its child. This is detected by correlating a Sysmon Process Creation event (EID 1) with a subsequent Process Access event (EID 10). An alert is triggered if the source of the access is the parent, the target is the child, and the access rights (`GrantedAccess`) explicitly permit memory modification (e.g., `PROCESS_VM_WRITE` or `PROCESS_VM_OPERATION`)."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Domain Controllers"
      - "User Workstations"
      - "Member Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: CORRELATE (Sysmon EID 1 as P1) with (Sysmon EID 10 as P2) | WHERE P1.pid == P2.source_pid AND P1.new_pid == P2.target_pid AND P2.granted_access IN (memory_write_flags) | RETURN host, source_process, target_process, granted_access"
  - question: "Have any parent-child process pairs been observed using statistically rare memory access codes?"
    context: "This question identifies anomalous memory access by baselining the `GrantedAccess` codes used between specific parent-child process pairs. While some access is normal, certain codes, especially those for writing to virtual memory, are rarely used in legitimate operations. By flagging pairs that use access codes with a very low frequency (e.g., <0.1%), we can uncover suspicious memory manipulation attempts characteristic of process hollowing."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Domain Controllers"
      - "User Workstations"
      - "Member Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH Sysmon_EID_10 | STATS count by parent_process, child_process, granted_access | GROUP by parent_child_pair | IDENTIFY rare granted_access codes per pair | ALERT on usage of rare codes"
  - question: "Has a sequence analysis model detected an anomalous event sequence indicative of a parent process writing to a child's memory?"
    context: "This question uses a sophisticated sequence model (like an LSTM or HMM) to learn the normal temporal patterns of Sysmon events on a host. The model can then identify event sequences that are highly improbable. A sequence of [Process Create] followed by [Process Access with write rights] is a classic pattern for process hollowing, and if the model flags this sequence as anomalous for the involved processes, it provides a strong signal of malicious activity."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Domain Controllers"
      - "User Workstations"
      - "Member Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: STREAM Sysmon_events per host | INPUT to sequence_model | WHERE sequence_pattern == [create -> access_write] AND probability < threshold | RETURN host, anomalous_sequence, probability"
  - question: "Has a process with an anomalous parent connected to a destination known to be malicious?"
    context: "This question seeks to find a strong indicator of compromise by correlating two suspicious events. First, a process is created by an unexpected parent (e.g., svchost.exe not spawned by services.exe), suggesting it may have been hollowed. Second, this suspicious process makes a network connection to an IP or domain on a threat intelligence feed. The combination of these two events is a high-fidelity indicator that a compromised process is communicating with a command-and-control server."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "pseudocode: JOIN (process_creation_logs WHERE parent_is_anomalous) with (network_logs) on process_id | LOOKUP destination_ip in threat_intel_feed | WHERE match_found | RETURN host, process, parent, destination_ip"
  - question: "Has a newly created process exhibited signs of algorithmic domain generation or connected using a rare JA3/JA3S hash?"
    context: "This question looks for indicators of sophisticated command-and-control (C2) communication. High Shannon entropy ($$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$) in queried domain names can reveal Domain Generation Algorithms (DGAs). Additionally, a rare JA3S hash (server-side TLS fingerprint) suggests the process is communicating with a non-standard, possibly malicious server. Both are strong indicators that a hollowed process is being used for C2."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH network_logs near process_creation_time | CALCULATE shannon_entropy(queried_domains) OR CHECK rarity(JA3S_hash) | WHERE entropy > threshold OR rarity < threshold | RETURN host, process, indicator_type"
  - question: "Has a graph-based anomaly detection model identified a rare relationship between processes, hosts, and network destinations?"
    context: "This question uses graph analysis to uncover complex, multi-hop attack patterns that are difficult to spot with simple rules. By modeling processes, hosts, and IPs as a graph, the system can learn what normal system interactions look like. The emergence of a rare subgraph—for instance, an Office app spawning calculator.exe which then connects to a low-reputation IP—represents a significant structural anomaly highly indicative of a successful process hollowing attack."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "pseudocode: CONSTRUCT graph from process and network logs | INPUT graph to anomaly_detection_model | WHERE subgraph is flagged as rare | RETURN anomalous_subgraph_details"
  - question: "Have any process creation events contained command-line arguments that match known malicious patterns or YARA rules?"
    context: "This question focuses on signature-based detection by scanning the command-line arguments of all new processes. Many malware families and attack tools (like Formbook or Dridex) use specific, recognizable command-line flags or structures when performing process hollowing. By matching these against a library of YARA or regex rules, we can quickly identify known threats."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_creation_logs | SCAN command_line with YARA_ruleset | WHERE match_found | RETURN host, process, command_line, matched_rule"
  - question: "Have any processes been created with command-line arguments exhibiting unusually high entropy or a strange character ratio?"
    context: "This question aims to detect obfuscated or randomized command-line arguments, a common technique to hide malicious payloads. By establishing a baseline for the normal complexity (entropy) and character composition for each process's command line, we can flag significant deviations. A command line with entropy or a character ratio more than 3 standard deviations from its process's norm suggests obfuscation and warrants investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_creation_logs | CALCULATE entropy(command_line), char_ratio(command_line) | COMPARE to historical_baseline for that process | WHERE value > (mean + 3*stdev) | RETURN host, process, command_line, anomalous_metric"
  - question: "Has a machine learning model classified any process command lines as malicious?"
    context: "This question leverages a supervised machine learning model to distinguish between benign and malicious command lines. By training on a large, labeled dataset, a text classification model can learn the subtle features and structures that indicate malicious intent, even for previously unseen commands. This provides a scalable way to score all new process creation events and automatically flag suspicious ones with high confidence."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: STREAM process_creation_logs | INPUT command_line to text_classification_model | WHERE prediction == 'malicious' AND confidence > threshold | RETURN host, process, command_line, confidence_score"
  - question: "Has a process that should never have network activity (e.g., calculator.exe) been observed making an outbound connection?"
    context: "This question implements a simple but highly effective rule. Certain system utilities and applications, like calculator.exe or notepad.exe, have no legitimate reason to make network connections. By maintaining a blacklist of such processes and alerting anytime one is seen in network logs, we can reliably detect when it has been compromised or hollowed to act as a C2 channel."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek conn.log"
      - "Network Egress Points"
      - "User Workstations"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH network_logs | LOOKUP process_name in no_network_blacklist | WHERE match_found | RETURN host, process_name, destination_ip, destination_port"
  - question: "Has a process exhibited network behavior that deviates significantly from its historical baseline?"
    context: "This question focuses on behavioral anomaly detection for processes that do have legitimate network activity. For a process like svchost.exe, we can build a profile of its normal destination ports, protocols, and data volumes. An alert is triggered if a new connection deviates from this norm, such as using a port outside the top 99.9% of its historical usage. This can detect a hollowed process being used for non-standard C2 communication."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "User Workstations"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH network_logs | COMPARE connection_details (port, proto, bytes) to historical_baseline for process_name | WHERE deviation > threshold (e.g., port not in top 99.9%) | RETURN host, process, connection_details"
  - question: "Has an autoencoder model detected an anomalous network connection based on a high reconstruction error?"
    context: "This question applies a neural network approach to find anomalous network connections. An autoencoder is trained on features of normal connections (process name, port, protocol, etc.) and learns to reconstruct them with low error. When a new connection, potentially from a hollowed process, has features that differ from the norm, the model will struggle to reconstruct it, resulting in a high reconstruction error. This high error serves as a powerful anomaly signal."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "User Workstations"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: STREAM network_connection_features | INPUT to autoencoder_model | CALCULATE reconstruction_error | WHERE reconstruction_error > threshold | RETURN host, process, connection_details, error_score"
  - question: "Has a parent process terminated within a very short time (< 2 seconds) after creating a child process?"
    context: "This question looks for the 'dropper' pattern, where a loader process creates and injects into a new process and then immediately terminates to cover its tracks. By correlating process creation (Event ID 4688) and termination (Event ID 4689) events, we can detect when a parent's lifespan is suspiciously short after spawning a child. A fixed threshold (e.g., < 2 seconds) can effectively catch this behavior."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4689"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: CORRELATE (EID 4688 as child_create), (EID 4689 as parent_terminate) on parent_pid | CALCULATE time_delta = parent_terminate_time - child_create_time | WHERE time_delta < 2_seconds | RETURN host, parent_process, child_process, time_delta"
  - question: "Has a parent process exhibited an abnormally fast termination after spawning a child, relative to its own historical behavior?"
    context: "This question refines the previous one by using a statistical baseline instead of a fixed threshold. It calculates the 'parent post-spawn lifespan' for every process creation event and compares it to the historical distribution for that specific parent process name. An instance where the lifespan falls into a very low percentile (e.g., the 1st percentile) indicates that the parent terminated abnormally quickly, a strong sign of a dropper or loader."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4689"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: CALCULATE parent_lifespan_post_spawn for all events | FOR each parent_process, calculate 1st_percentile(lifespan) as threshold | WHERE current_lifespan < threshold | RETURN host, parent_process, child_process, lifespan"
  - question: "Has a sequence analysis model flagged a 'create-child-then-terminate' event sequence as having a low probability?"
    context: "This question uses a Recurrent Neural Network (RNN) or similar model to understand the normal sequences of endpoint events. The model learns the probability of transitions between events like process creation and termination. A sequence where a parent process creates a child and then immediately terminates might be normal for some processes (like updaters) but highly anomalous for others. The model can distinguish between these cases and flag low-probability occurrences as high-risk."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4689"
      - "All Windows Endpoints and Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: STREAM endpoint_events per host | INPUT to sequence_model | WHERE event_sequence matches 'create->terminate' pattern AND sequence_probability is low | RETURN host, parent, child, probability"
  - question: "Has a Sysmon Event ID 8 (CreateRemoteThread) been observed where the source and target processes are different?"
    context: "This question targets a primary method of code injection. A CreateRemoteThread event where the source and target processes differ indicates that one process is injecting a thread into another. While this can be legitimate (e.g., debuggers, AV), it is often malicious, especially when the target is a common system process like explorer.exe and the source is not a known-good tool. This rule provides a broad net to catch suspicious cross-process injection."
    answer_sources:
      - "Sysmon Event ID 8"
      - "Sysmon Event ID 1"
      - "User Workstations"
      - "Terminal Servers"
      - "Critical Application Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH Sysmon_EID_8 | WHERE source_image != target_image AND target_image IN (common_system_processes) AND source_image NOT IN (known_good_injectors) | RETURN host, source_image, target_image"
  - question: "Has a statistically rare source-target pair been observed in a CreateRemoteThread event?"
    context: "This question refines the detection of malicious thread injection by baselining normal activity. By profiling which `(SourceImage, TargetImage)` pairs are common in CreateRemoteThread events, we can flag any pair that is statistically rare (e.g., seen < 5 times in 90 days). This helps filter out the noise of legitimate tools and focuses on novel, potentially malicious injection events, especially if the source process is running from an unusual location like AppData."
    answer_sources:
      - "Sysmon Event ID 8"
      - "Sysmon Event ID 1"
      - "User Workstations"
      - "Terminal Servers"
      - "Critical Application Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH Sysmon_EID_8 | STATS count by source_image, target_image | WHERE count < 5 | RETURN host, source_image, target_image, count"
  - question: "Has a machine learning model classified a CreateRemoteThread event as likely malicious?"
    context: "This question uses a supervised model like a Random Forest to automate the classification of CreateRemoteThread events. By training on features like the source/target process names, their reputation, and whether the source path is user-writable, the model can learn to accurately predict malicious injection. This provides a powerful, automated way to score all Event ID 8 occurrences and alert on those with a high probability of being malicious."
    answer_sources:
      - "Sysmon Event ID 8"
      - "Sysmon Event ID 1"
      - "User Workstations"
      - "Terminal Servers"
      - "Critical Application Servers"
    range: "last 90 days"
    queries:
      - "pseudocode: STREAM Sysmon_EID_8_events | EXTRACT features (source, target, path, reputation) | INPUT to classification_model | WHERE prediction == 'malicious' | RETURN host, source, target, confidence_score"