name: "T1027.002: Software Packing"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook provides a structured approach to answer the question: 'Is the adversary evading defenses using software packing?'. It outlines methods to detect packed executables by identifying known malicious hashes and static packer signatures, analyzing heuristic properties like high file entropy and abnormally low import counts, and correlating these static indicators with suspicious runtime behaviors such as spawning command-line interpreters or initiating beaconing-like network communications. The goal is to uncover malware that uses packing to obfuscate its code and evade traditional signature-based defenses."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are any newly executed processes identified as known malicious packed executables by hash or by static signatures of software packers?"
    context: "This question aims to identify threats using known packing techniques. By comparing file hashes against threat intelligence feeds and scanning file content with YARA rules for packers like UPX or Themida, analysts can detect previously identified malicious software that uses packing to evade signature-based antivirus. A match provides a high-confidence indicator of compromise."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "File content analysis"
      - "Threat intelligence feeds"
      - "User endpoints"
      - "Application servers"
      - "File shares"
      - "Email gateways"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process creation events (Sysmon Event ID 1)
          FOR each event:
            EXTRACT file hash (SHA256)
            QUERY threat intelligence feed with hash
            IF match THEN ALERT
            SCAN file content with YARA rules for packers (UPX, MPRESS, etc.)
            IF match THEN ALERT
  - question: "Do any newly observed executables have statistically rare or non-standard PE section names compared to an established baseline?"
    context: "This question helps uncover unknown or custom packers. Packers often rename or create unusual PE section names to obscure the executable's structure. By baselining normal section names (like '.text', '.data') across the environment, analysts can flag executables with anomalous names as suspicious, warranting further investigation for packing or other forms of obfuscation."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "File content analysis"
      - "Threat intelligence feeds"
      - "User endpoints"
      - "Application servers"
      - "File shares"
      - "Email gateways"
    range: "last 30 days"
    queries:
      - technology: "pseudocode"
        query: |
          CREATE a 30-day baseline of PE section name frequencies.
          FOR each new executable:
            EXTRACT PE section names.
            COMPARE names against baseline frequency distribution.
            IF name is rare (e.g., bottom 5%) OR non-standard THEN ALERT
  - question: "Can a machine learning model, trained on PE header features, classify any new executables as 'packed' with high confidence?"
    context: "This question leverages machine learning to proactively identify packed executables, including novel variants. By training a model on features like section entropy, size ratios, and import/export tables, the system can learn the statistical properties of packed files. Scoring new executables in real-time allows for automated detection of suspicious files that might otherwise evade static signatures."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "File content analysis"
      - "Threat intelligence feeds"
      - "User endpoints"
      - "Application servers"
      - "File shares"
      - "Email gateways"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new executable:
            EXTRACT PE header features (entropy, size ratios, IAT/EAT size).
            INPUT features into pre-trained classification model.
            GET 'packed' probability score.
            IF score > 0.90 THEN ALERT
  - question: "Are there any new executables with an abnormally low number of imported functions in their Import Address Table (IAT)?"
    context: "This question targets a common packing artifact. Packers often hide the true imports of a program, resolving them dynamically at runtime to hinder static analysis. The packed executable itself may only import a few functions needed for the unpacking stub (e.g., LoadLibraryA, GetProcAddress). A very small IAT is a strong heuristic indicator that the file is packed and not on an approved software list."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "File content analysis"
      - "User endpoints"
      - "Development servers"
      - "Staging environments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new executable:
            IF file is on allow-list THEN IGNORE
            PARSE PE Import Address Table (IAT).
            COUNT unique imported functions.
            IF count < 5 THEN ALERT
  - question: "Are any new executables exhibiting statistically high Shannon entropy, suggesting they are compressed or encrypted?"
    context: "This question uses information theory to detect obfuscation. High Shannon entropy indicates data that is close to random, a common characteristic of compressed or encrypted content. Since packers use these techniques to hide the original code, an executable with an entropy value significantly higher than the baseline for normal, non-packed software (e.g., > 7.5) is highly suspect."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "File content analysis"
      - "User endpoints"
      - "Development servers"
      - "Staging environments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          ESTABLISH baseline entropy for known-good executables.
          FOR each new executable:
            CALCULATE Shannon entropy of the file.
            IF entropy > 7.5 OR is statistical outlier (e.g., 99th percentile) THEN ALERT
  - question: "Can unsupervised machine learning identify clusters of executables with anomalous features (entropy, IAT size, section ratios) that differ from known-good software?"
    context: "This question seeks to find 'unknown unknowns' by grouping similar files. Unsupervised clustering algorithms can automatically group executables based on intrinsic properties without prior labels. Normal software will typically form a large, dense cluster. Smaller, outlier clusters represent groups of files that share unusual characteristics, which could indicate a new family of malware or a custom packer being used in a campaign."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "File content analysis"
      - "User endpoints"
      - "Development servers"
      - "Staging environments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new executable:
            EXTRACT feature vector (entropy, IAT size, section size ratios, etc.).
            APPLY clustering algorithm (e.g., DBSCAN) to the population of feature vectors.
            IDENTIFY and ALERT on files belonging to small, outlier clusters.
  - question: "Did any process identified as potentially packed subsequently spawn a command-line interpreter or connect to a known malicious domain/IP?"
    context: "This question links static detection with malicious runtime behavior to increase confidence. A packed file is not inherently malicious, but if it unpacks and then immediately executes cmd.exe or powershell.exe, or contacts a command-and-control server, the likelihood of malicious intent is extremely high. This correlation helps filter out false positives from static analysis alone."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User endpoints"
      - "Domain Controllers"
      - "Internet gateways"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          IDENTIFY processes with static packing indicators (e.g., high entropy).
          MONITOR these processes for 60 seconds.
          IF process spawns 'cmd.exe' or 'powershell.exe' THEN ALERT
          IF process connects to IP/domain on blocklist THEN ALERT
  - question: "Are any processes with high entropy exhibiting network traffic patterns indicative of automated beaconing or Domain Generation Algorithms (DGA)?"
    context: "This question seeks to identify C2 communications from unpacked malware. Malware often uses automated 'beaconing' to check in with its C2 server, characterized by regular time intervals (low jitter) and consistent packet sizes. It may also use DGAs to find its C2, resulting in many DNS queries for unique subdomains of a single domain. Detecting these network patterns in a process already suspected of being packed is a strong indicator of malicious C2 activity."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User endpoints"
      - "Domain Controllers"
      - "Internet gateways"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR processes with high entropy:
            ANALYZE outbound network connections (Zeek conn.log).
            CALCULATE jitter and payload size standard deviation.
            IF metrics are below threshold (indicating beaconing) THEN ALERT.
            ANALYZE DNS queries (Zeek dns.log).
            CALCULATE unique subdomain to domain ratio.
            IF ratio is high (indicating DGA) THEN ALERT.
  - question: "Does the sequence of runtime behaviors (process/network/file/registry events) for a potentially packed process deviate significantly from the normal behavior modeled for known-good applications?"
    context: "This question uses advanced behavioral modeling to detect anomalous post-unpacking activity. By training a model like an LSTM Autoencoder on the typical event sequences of legitimate software, analysts can create a profile of 'normal.' When a process suspected of being packed exhibits a sequence of actions that the model cannot accurately reconstruct (high reconstruction error), it signals a novel or unexpected behavior chain, which is a strong sign of malicious activity."
    answer_sources:
      - "Windows Event ID 1 (Sysmon)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User endpoints"
      - "Domain Controllers"
      - "Internet gateways"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR new processes with static packing indicators:
            CREATE time-series vector of runtime events (child processes, network, file, registry).
            INPUT vector into pre-trained time-series anomaly detection model (e.g., LSTM Autoencoder).
            CALCULATE reconstruction error.
            IF error is above threshold THEN ALERT.