name: T1027.002: Software Packing
id: 9e5e7f2d-9b8c-4a1e-8d0c-5f6a7b8c9d0e
description: This playbook addresses the question: Is the adversary evading defenses using software packing? It provides investigative steps to detect software packing by identifying files that match known malicious hashes or packer signatures, exhibit heuristic characteristics like high entropy and few imported functions, or perform suspicious runtime activities after being identified as packed.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are newly executed files matching known malicious packed executables or exhibiting static signatures of common packers?
    context: This question aims to identify packed malware at the point of execution by leveraging threat intelligence and signature-based detection. Comparing file hashes against known malicious lists and using YARA rules to detect packer-specific byte sequences (like those from UPX, MPRESS, Themida, or VMProtect) provides a direct and high-fidelity method for spotting known threats attempting to evade static analysis.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - File content analysis
      - Threat intelligence feeds
      - User endpoints, Application servers, File shares, Email gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process_creation_event (Sysmon EID 1) CHECK file_hash against threat_intel_feed; IF match, ALERT. SCAN file_content with YARA_rules_for_packers; IF match, ALERT.
  - question: Are there any new executables with unusual or statistically rare PE section names?
    context: Packers often rename or create non-standard PE section names to obfuscate the binary's true structure. This question seeks to detect such anomalies by baselining normal PE section name frequencies across the environment. An executable with section names that are statistically rare (e.g., bottom 5th percentile) or deviate from standard conventions (like '.text', '.data') is a strong indicator of packing or obfuscation.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - File content analysis
      - Threat intelligence feeds
      - User endpoints, Application servers, File shares, Email gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new_executable_file EXTRACT PE_section_names; COMPARE section_name_frequency against 30-day_baseline; IF frequency is rare (e.g., <5th percentile) or name is non-standard, ALERT.
  - question: Can a machine learning model classify any new executables as packed based on their PE header features?
    context: This question leverages a supervised machine learning model to proactively identify packed executables. By training a model (like Gradient Boosting or Random Forest) on features extracted from the PE header (section properties, import/export tables, etc.), it can learn the complex patterns that distinguish packed from non-packed files. Scoring new executables in real-time and alerting on high-confidence 'packed' classifications provides a scalable way to detect novel or unknown packers.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - File content analysis
      - Threat intelligence feeds
      - User endpoints, Application servers, File shares, Email gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new_executable_file EXTRACT PE_features (entropy, section_ratios, IAT_size); SCORE file with trained_ML_model; IF score > 0.90, ALERT.
  - question: Are there any new executables with an abnormally low number of imported functions?
    context: Many packers hide the true functionality of a binary by resolving necessary API functions at runtime instead of listing them in the static Import Address Table (IAT). This question aims to detect this behavior by identifying executables with a suspiciously small IAT (e.g., fewer than 5 imported functions). Such a characteristic is a strong heuristic for packing, especially if the file is not on an allow-list of legitimate simple utilities.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - File content analysis
      - User endpoints, Development servers, Staging environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new_executable_file PARSE PE_import_table; COUNT unique_imported_functions; IF count < 5 AND file NOT in allow_list, ALERT.
  - question: Do any new executables exhibit statistically high file entropy, suggesting compression or encryption?
    context: Packed executables are often compressed or encrypted, leading to high Shannon entropy (a measure of randomness). This question focuses on identifying these files by calculating their entropy and comparing it against a baseline of known-good files. An executable with an entropy value that is a statistical outlier (e.g., >7.5, or above the 99th percentile) is highly likely to be packed, as non-packed code and data have more predictable, lower-entropy structures.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - File content analysis
      - User endpoints, Development servers, Staging environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new_executable_file CALCULATE Shannon_entropy; COMPARE entropy against baseline; IF entropy > 7.5 OR > 99th_percentile, ALERT.
  - question: Can unsupervised machine learning identify clusters of executables with anomalous features indicative of custom packing?
    context: This question uses unsupervised clustering (like DBSCAN or K-Means) to find unknown or custom packers without prior signatures. By grouping executables based on a set of features (entropy, IAT size, section size ratios, flags), most legitimate software will form a large, dense cluster. Files that fall into small, distinct outlier clusters share anomalous characteristics and are prime candidates for investigation as potentially packed or obfuscated executables.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - File content analysis
      - User endpoints, Development servers, Staging environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR all new_executables, CREATE feature_vector (entropy, IAT_size, section_ratios); APPLY clustering_algorithm (e.g., DBSCAN); INVESTIGATE files in outlier_clusters.
  - question: Are processes with static packing characteristics spawning suspicious child processes or making malicious network connections shortly after execution?
    context: A packed executable is benign until it unpacks and executes its malicious payload. This question aims to detect this transition by correlating static packing indicators (like high entropy) with suspicious runtime behavior. If a process identified as potentially packed spawns a command-line interpreter (cmd.exe, powershell.exe) or connects to a known malicious IP/domain within a short time window (e.g., 60 seconds), it strongly indicates that the unpacking was successful and a malicious action is underway.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
      - User endpoints, Domain Controllers, Internet gateways, DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR process with high_entropy, MONITOR for 60s; IF process spawns (cmd.exe OR powershell.exe) OR connects_to (blocked_IP_or_domain), ALERT.
  - question: Are high-entropy processes exhibiting network traffic patterns consistent with C2 beaconing or domain generation algorithms (DGA)?
    context: This question seeks to identify command-and-control (C2) activity from a potentially packed process by analyzing its network traffic patterns. Robotic C2 beaconing often has very regular timing (low jitter) and consistent payload sizes. Furthermore, malware may use DGAs to find its C2 server, resulting in a high number of DNS queries for unique subdomains of a single parent domain. Detecting these statistical anomalies in network logs for a high-entropy process is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
      - User endpoints, Domain Controllers, Internet gateways, DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR high_entropy_process, ANALYZE network_traffic (Zeek); IF connection_interval_std_dev is low AND payload_size_std_dev is low, ALERT. IF DNS_query_ratio (unique_subdomains/domain) is high, ALERT.
  - question: Does the sequence of runtime behaviors for a potentially packed process deviate significantly from the learned normal behavior of applications?
    context: This question uses advanced anomaly detection to spot malicious behavior even if the specific actions themselves are not overtly suspicious. By training a time-series model (like an LSTM Autoencoder) on the normal sequence of events (process creation, network connections, etc.) for legitimate applications, we can create a profile of 'normal.' When a new process with static packing indicators is run, its sequence of actions is compared to this profile. A high reconstruction error means its behavior is anomalous and likely malicious, even if the individual actions are not.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
      - User endpoints, Domain Controllers, Internet gateways, DNS servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR new_process with packing_indicators, CREATE time_series_vector of its runtime_events; INPUT vector to trained_LSTM_autoencoder; IF reconstruction_error is high, ALERT.