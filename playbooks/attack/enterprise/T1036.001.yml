name: T1036.001: Invalid Code Signature
id: a3f8b0e1-4c6d-4f8a-9b5c-8d7e6f5a4b3c
description: This playbook focuses on detecting defense evasion techniques where an adversary uses an invalid code signature to execute malicious code. It provides investigative steps to identify processes created from executables with known-malicious hashes or certificates, processes that fail the operating system's signature validation, files that have been modified after signing (tampering), executables signed with statistically rare or suspicious certificates, and the correlation of network downloads with subsequent invalid signature execution events.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can I detect the execution of files that match known-malicious hashes or certificate thumbprints from threat intelligence feeds?
  context: This question aims to identify direct threats by checking every executed file against a curated list of known bad indicators. A match provides a high-confidence signal that malicious code, attempting to evade defenses via invalid signatures, is running in the environment.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Windows Event ID 4688
  - Endpoint devices (workstations, servers)
  - Domain Controllers
  - Code repositories
  - Build servers
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation OR image_load_events | EXTRACT file_hash, cert_thumbprint | JOIN with high-confidence_threat_intel_blocklist ON file_hash OR cert_thumbprint | ALERT if match_found.
- question: How can I statistically identify endpoints with an unusually high number of threat intelligence matches, which might indicate a targeted attack?
  context: This question helps differentiate between isolated, opportunistic malware infections and a more concerted, targeted attack on a specific endpoint. By baselining normal activity and alerting on significant deviations, analysts can prioritize investigating hosts that show an abnormal volume of malicious indicators.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Windows Event ID 4688
  - Endpoint devices (workstations, servers)
  - Domain Controllers
  - Code repositories
  - Build servers
  range: last 90 days
  queries:
  - statistical: SEARCH ioc_matches | GROUP BY endpoint, day | CALCULATE count_unique_iocs | COMPARE daily_count to 30-day_baseline (mean + 3*stddev) for each endpoint | ALERT if daily_count > threshold.
- question: Can machine learning be used to detect widespread campaigns by identifying anomalous spikes in threat intelligence matches across the entire enterprise?
  context: This question focuses on detecting large-scale attacks or new malware campaigns that might be missed by looking at individual endpoints. A sudden, enterprise-wide increase in matches for a specific indicator is a strong signal of a coordinated attack, and a time-series model can automatically flag these unforecasted spikes for immediate investigation.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Windows Event ID 4688
  - Endpoint devices (workstations, servers)
  - Domain Controllers
  - Code repositories
  - Build servers
  range: last 90 days
  queries:
  - machine_learning: SEARCH ioc_matches | AGGREGATE count by time_interval, ioc_type | INPUT into time_series_anomaly_model | ALERT on high anomaly_score.
- question: How can I detect processes created from an executable that fails the operating system's digital signature validation check?
  context: This question is crucial for identifying malware or unauthorized tools that are not properly signed or have had their signatures invalidated. By creating a rule to trigger on invalid signature statuses, excluding known-good exceptions, analysts can focus on genuinely suspicious execution events.
  answer_sources:
  - Sysmon Event ID 7
  - Microsoft-Windows-CodeIntegrity/Operational Event ID 3077
  - Sysmon Event ID 1
  - All enterprise workstations
  - Application servers
  - Developer workstations
  - Systems with strict application control policies (e.g., WDAC)
  range: last 90 days
  queries:
  - symbolic: SEARCH Sysmon_EventID_7 WHERE SignatureStatus='Invalid' | EXCLUDE known_good_allowlist | CORRELATE with Sysmon_EventID_1 on ProcessGUID to get parent_process, command_line | ALERT on event.
- question: How can I use baselining to find hosts or users generating an abnormal number of invalid signature events?
  context: This question helps to distinguish isolated, benign events from a potential burst of malicious activity on a specific host or by a specific user. Alerting when an entity exceeds its own 99th percentile baseline for these events can surface a developing incident.
  answer_sources:
  - Sysmon Event ID 7
  - Microsoft-Windows-CodeIntegrity/Operational Event ID 3077
  - Sysmon Event ID 1
  - All enterprise workstations
  - Application servers
  - Developer workstations
  - Systems with strict application control policies (e.g., WDAC)
  range: last 90 days
  queries:
  - statistical: SEARCH invalid_signature_events | CALCULATE rolling 30-day count per host/user | ESTABLISH 99th_percentile_threshold | ALERT if 24-hour_count > threshold.
- question: Can a machine learning model be trained to automatically triage alerts for invalid signature events?
  context: This question aims to reduce analyst fatigue and improve response time by automatically prioritizing the most likely malicious events. A classification model can analyze various features of an invalid signature event to predict its probability of being malicious, allowing security teams to focus on the highest-risk alerts.
  answer_sources:
  - Sysmon Event ID 7
  - Microsoft-Windows-CodeIntegrity/Operational Event ID 3077
  - Sysmon Event ID 1
  - All enterprise workstations
  - Application servers
  - Developer workstations
  - Systems with strict application control policies (e.g., WDAC)
  range: last 90 days
  queries:
  - machine_learning: GATHER features from invalid_signature_events (file_path, entropy, parent_process, etc.) | INPUT into trained_classification_model | USE output_probability_score to triage alert priority.
- question: How can I detect if a signed file has been tampered with or modified after its signature was applied?
  context: This question addresses a specific tradecraft where an adversary modifies a legitimate, signed file to include malicious code, a technique known as binary padding or code signing abuse. Verifying that a file's re-computed Authenticode hash matches the one in its signature block is a direct way to detect such tampering.
  answer_sources:
  - File binary from endpoint
  - Sysmon Event ID 1
  - All enterprise workstations
  - Critical servers (Domain Controllers, Database Servers)
  - Software distribution points
  - File shares
  range: last 90 days
  queries:
  - symbolic: ON process_creation for new_PE_file | ACQUIRE file_binary | PARSE signature_block for stored_hash | RECALCULATE Authenticode_hash of file | ALERT if stored_hash != recalculated_hash.
- question: How can I perform a statistical hunt to find hosts with a high prevalence of tampered files?
  context: This question provides a proactive hunting method to find compromised systems. By periodically scanning critical directories on all hosts and comparing the percentage of tampered files to a network-wide baseline, analysts can identify outlier systems that warrant deeper investigation.
  answer_sources:
  - File binary from endpoint
  - Sysmon Event ID 1
  - All enterprise workstations
  - Critical servers (Domain Controllers, Database Servers)
  - Software distribution points
  - File shares
  range: last 90 days
  queries:
  - statistical: SCHEDULE weekly_scan of critical_directories | FOR each signed_file, perform hash_mismatch_check | CALCULATE percentage_mismatched_files per host | COMPARE to network_baseline | ALERT on hosts with Z-score > 3.
- question: Can unsupervised machine learning help prioritize investigations into tampered files?
  context: This question seeks to find the "most interesting" instances of file tampering among potentially many. An anomaly detection model can score each tampered file based on its features, allowing analysts to focus on the most unusual and therefore highest-risk cases first.
  answer_sources:
  - File binary from endpoint
  - Sysmon Event ID 1
  - All enterprise workstations
  - Critical servers (Domain Controllers, Database Servers)
  - Software distribution points
  - File shares
  range: last 90 days
  queries:
  - machine_learning: FOR each mismatched_file, extract_feature_vector (PE_metadata, signature_metadata, context) | INPUT into unsupervised_anomaly_detection_model | RANK by anomaly_score for prioritization.
- question: How can I detect executables signed with suspicious or known-bad certificates?
  context: This question addresses the adversary tactic of using stolen or specially created code-signing certificates. By maintaining and checking against a watchlist of suspicious attributes (e.g., known-bad names, typosquatting), analysts can directly identify malware attempting to masquerade as legitimate software.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - All enterprise workstations and servers
  - Certificate Authority servers
  - Developer workstations
  range: last 90 days
  queries:
  - symbolic: SEARCH image_load_events | EXTRACT certificate_subject, certificate_issuer | JOIN with suspicious_certificate_watchlist (known-bad, typosquatting, long_validity) | ALERT on match.
- question: How can I statistically identify newly executed files that are signed by an unusually rare certificate?
  context: Adversaries often use newly created or seldom-used certificates. This question aims to detect such activity by flagging executables signed by certificates that are statistical outliers (very rare) compared to the baseline of all certificates seen in the environment, indicating a potential threat.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - All enterprise workstations and servers
  - Certificate Authority servers
  - Developer workstations
  range: last 90 days
  queries:
  - statistical: INGEST unique_certs to lookup_table with counts | FOR new_file_execution, calculate rarity_score = 1 / (issuer_count * subject_count) | ALERT if rarity_score is in top 1% for the day.
- question: Can machine learning identify anomalous certificate signing practices without prior knowledge?
  context: This question focuses on discovering novel or unknown malicious signing activity. By clustering all observed certificates based on their intrinsic properties (validity period, name entropy, etc.), an unsupervised model can isolate small clusters or noise points that represent anomalous practices deviating from the norm.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - All enterprise workstations and servers
  - Certificate Authority servers
  - Developer workstations
  range: last 90 days
  queries:
  - machine_learning: EXTRACT features from all certificates (validity_duration, subject_entropy, self-signed_status) | INPUT into clustering_model (e.g., DBSCAN) | FLAG certificates in small_clusters or marked_as_noise for review.
- question: How can I correlate a network file download with a subsequent invalid signature execution event on the same host?
  context: This question establishes a high-fidelity attack chain. Correlating a file download from an external source directly to its execution and a resulting invalid signature error within a short time window provides strong evidence of a malicious payload delivery and execution.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Network Egress/Internet Gateway
  - Proxy server logs
  - All enterprise workstations
  range: last 90 days
  queries:
  - symbolic: CORRELATE Zeek_files.log (hash) with Sysmon_EventID_1 (hash) on same_host within 10_minutes | JOIN with Sysmon_EventID_7 | ALERT if SignatureStatus='Invalid'.
- question: How can I statistically rank external domains by their risk of serving improperly signed executables?
  context: This question helps identify malicious or compromised content distribution networks and C2 servers. By calculating a risk ratio for each source domain based on how often downloads from it lead to invalid signature executions, security teams can proactively block or investigate the highest-risk domains.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Network Egress/Internet Gateway
  - Proxy server logs
  - All enterprise workstations
  range: last 90 days
  queries:
  - statistical: TRACK source_domain for 'download -> invalid_execution' events | CALCULATE risk_ratio = (invalid_exec_downloads / total_downloads) per domain | RANK domains by risk_ratio and investigate top 5%.
- question: Can time series analysis detect a widespread campaign involving the download and execution of improperly signed files?
  context: This question aims to detect a surge in malicious activity across the enterprise. By monitoring the enterprise-wide count of 'download -> invalid execution' events over time, an anomaly detection algorithm can automatically flag a sudden, unforecasted spike, indicating a possible large-scale campaign.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Network Egress/Internet Gateway
  - Proxy server logs
  - All enterprise workstations
  range: last 90 days
  queries:
  - machine_learning: CREATE hourly_time_series of 'download -> invalid_execution' event_count | APPLY time_series_anomaly_detection | ALERT on significant positive anomaly.