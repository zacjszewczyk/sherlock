name: T1547.005: Security Support Provider
id: f9a1b0c2-3d4e-4f5a-8b6c-7d8e9f0a1b2c
description: This playbook aims to detect adversaries abusing Security Support Providers (SSPs) for persistence and privilege escalation. This involves monitoring for modifications to the SSP registry keys, unusual DLLs loaded by lsass.exe, suspicious network connections from lsass.exe, and command-line activity indicative of tools like Mimikatz being used to manipulate SSPs. Investigations should focus on identifying unauthorized DLLs added to the LSA configuration, tracing registry changes back to their originating user accounts, and spotting anomalous behavior from the lsass.exe process following a system reboot.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a new Security Support Provider been added to the LSA configuration that is not on an established allowlist or matches a known malicious DLL?
  context: This question aims to detect the direct modification of the Windows registry to install a malicious SSP. Adversaries add their own DLLs to the 'Security Packages' key to achieve persistence, as the Local Security Authority (LSA) will load these DLLs on startup. By comparing the newly added DLL against a curated allowlist of legitimate SSPs and a blocklist from threat intelligence, analysts can quickly identify unauthorized persistence mechanisms.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Registry hives on all Windows endpoints, especially Domain Controllers and privileged access workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events WHERE (event_id=4657 OR event_id=13) AND object_path CONTAINS "Lsa\\Security Packages" | PARSE new_value_dlls | COMPARE new_value_dlls AGAINST (allowlist, blocklist)
- question: Has a statistically rare or unique DLL been registered as a Security Support Provider across the enterprise?
  context: This question uses statistical analysis to find outliers. Legitimate SSPs are typically standardized across an enterprise environment. A DLL that is added to the LSA configuration on only one or a very small number of systems is highly suspicious and could represent a targeted attack. This method helps detect unknown or custom malicious SSPs that would not be caught by signature-based allowlists or blocklists.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Registry hives on all Windows endpoints, especially Domain Controllers and privileged access workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events WHERE object_path CONTAINS "Lsa\\Security Packages" | STATS count(dll_name) by host | CALCULATE prevalence(dll_name) across all_hosts | FILTER prevalence < 1st_percentile
- question: Does the context surrounding a Security Support Provider registry modification exhibit characteristics of malicious activity according to a machine learning model?
  context: This question leverages machine learning to identify subtle patterns of malicious behavior that are difficult to define with simple rules. By analyzing features like the process making the change, the user context, and the characteristics of the DLL name, a model can learn to distinguish between benign administrative actions and malicious persistence attempts. A high-risk score from the model provides a strong signal for investigation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Registry hives on all Windows endpoints, especially Domain Controllers and privileged access workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events WHERE object_path CONTAINS "Lsa\\Security Packages" | EXTRACT features (process, parent_process, user, time, dll_name_entropy) | SCORE features with ML_model | ALERT where score > threshold
- question: Has the lsass.exe process loaded a DLL that is unsigned, has an invalid signature, or is not on an approved allowlist?
  context: This question focuses on the direct evidence of a malicious DLL being loaded into the highly sensitive lsass.exe process. Legitimate SSPs and system DLLs loaded by LSA should be properly signed by trusted publishers. An unsigned or unexpectedly loaded DLL is a strong indicator of compromise, suggesting a malicious SSP has been successfully loaded into memory to steal credentials or maintain persistence.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4657
  - Windows Event ID 6005
  - Process execution and module load logs on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH module_loads WHERE event_id=7 AND process_name="lsass.exe" | FILTER (signature_status IN ("Unsigned", "Invalid") OR loaded_image NOT IN allowlist)
- question: Is lsass.exe loading a DLL that is statistically rare across the enterprise, especially after a recent system reboot?
  context: This question aims to detect unknown or custom malicious SSPs by identifying anomalous module loads. While an attacker's DLL might be signed to evade simple checks, it is unlikely to be a common DLL loaded by lsass.exe across the entire environment. Correlating a rare DLL load with a recent reboot is critical, as SSPs are loaded by lsass.exe during the system startup process. This combination of rarity and timing points strongly to a malicious persistence mechanism.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4657
  - Windows Event ID 6005
  - Process execution and module load logs on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH module_loads WHERE process_name="lsass.exe" | BASELINE frequency(loaded_image, signature) | DETECT new_load where frequency < 5th_percentile | CORRELATE with reboot_event (event_id=6005) on same host
- question: Did the sequence of DLLs loaded by lsass.exe during system startup deviate from the normal, expected order?
  context: This question uses a sophisticated analytical approach to detect malicious SSP loading. The lsass.exe process loads its required DLLs in a relatively predictable sequence during system startup. A malicious SSP may be loaded out of order or may be an entirely unexpected addition to the sequence. A sequence-aware model can learn the normal boot-time behavior and flag deviations that would be missed by simple event-based rules, indicating a potential compromise.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4657
  - Windows Event ID 6005
  - Process execution and module load logs on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH module_loads WHERE process_name="lsass.exe" GROUPBY boot_session | CREATE sequence(loaded_image) | SCORE sequence with LSTM_model | ALERT where score > threshold
- question: Has lsass.exe initiated a network connection to a known malicious IP or domain, especially shortly after an SSP registry modification?
  context: This question seeks to identify command-and-control (C2) activity originating from a compromised lsass.exe process. The lsass.exe process should typically not initiate outbound network connections. When it does, and the destination is a known C2 server, it is a high-fidelity indicator of compromise. Correlating this network activity with a recent SSP registry modification provides a complete picture of the attack, from persistence installation to C2 communication.
  answer_sources:
  - Zeek conn.log
  - Sysmon Event ID 3
  - Windows Event ID 4657
  - Windows Event ID 6005
  - Network traffic logs from egress points and host-based network connection logs from all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_connections WHERE process_name="lsass.exe" AND destination_ip IN threat_intel_feed | CORRELATE with registry_modification on same host within 24 hours
- question: Is lsass.exe making an anomalous network connection, characterized by a rare destination port, a rare destination IP, or an unusually large data transfer?
  context: This question uses statistical baselining to detect suspicious C2 traffic from lsass.exe that may not involve known malicious destinations. Normal lsass.exe network activity (if any) is typically limited and predictable (e.g., to Domain Controllers). An adversary's C2 communication will likely use non-standard ports, connect to rare IPs, or exfiltrate data, causing deviations from the established baseline. This approach helps find novel C2 channels.
  answer_sources:
  - Zeek conn.log
  - Sysmon Event ID 3
  - Windows Event ID 4657
  - Windows Event ID 6005
  - Network traffic logs from egress points and host-based network connection logs from all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_connections WHERE process_name="lsass.exe" | BASELINE stats(dest_port, dest_ip, bytes_sent) | ALERT where dest_port_freq < 1% OR dest_ip_freq < 1% OR bytes_sent > 3*stdev
- question: Does a network connection from lsass.exe exhibit a combination of anomalous features, such as an unusual TLS fingerprint or connection duration, as identified by a machine learning model?
  context: This question applies unsupervised machine learning to detect sophisticated C2 communications from a compromised lsass.exe process. Adversaries may try to blend in by using common ports, but other connection artifacts like TLS client fingerprints (JA3), connection timing, and data patterns can still betray them. An anomaly detection model can learn the multi-dimensional profile of normal network traffic and flag connections that are outliers, indicating potentially malicious activity.
  answer_sources:
  - Zeek conn.log
  - Sysmon Event ID 3
  - Windows Event ID 4657
  - Windows Event ID 6005
  - Network traffic logs from egress points and host-based network connection logs from all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_connections WHERE process_name="lsass.exe" | EXTRACT features(port, protocol, duration, bytes, ja3) | SCORE features with anomaly_model | ALERT where score > threshold
- question: Have any command lines been executed that contain strings or patterns associated with known SSP abuse tools or registry modification commands?
  context: This question seeks to detect the explicit use of tools or commands to manipulate SSPs. Adversaries often use well-known tools like Mimikatz or specific PowerShell/reg.exe commands to install their malicious SSPs. Searching for these specific strings and patterns in command-line logs provides a direct and high-confidence method for identifying attempts to establish this form of persistence or privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process creation logs with command-line auditing enabled on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events | FILTER command_line MATCHES REGEX("(?i)mimikatz|Install-SSP|Security\\sPackages|AddSecurityPackage")
- question: Has a command line with unusually high entropy or length been executed, particularly one related to LSA or Security Packages?
  context: This question aims to detect obfuscated or complex commands used to manipulate SSPs. Adversaries often use encoding (like Base64) or complex scripting to hide their actions, which results in command lines that are abnormally long or have high entropy (randomness). By baselining normal command-line characteristics for common shells and utilities, analysts can flag these statistical outliers as suspicious, even without a specific signature match.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process creation logs with command-line auditing enabled on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events | CALCULATE entropy(command_line), length(command_line) | BASELINE stats by process_name | ALERT where (entropy > 99th_percentile OR length > 99th_percentile) AND command_line CONTAINS ("Lsa", "Security Packages")
- question: Does a command line execution score highly as malicious based on a text classification model trained to identify LSA manipulation?
  context: This question leverages a machine learning model to proactively identify malicious command-line activity beyond simple keyword matching or statistical outliers. By training on a large dataset of known good and bad commands, the model can learn the subtle linguistic patterns, n-grams, and keyword combinations that indicate an attempt to abuse SSPs. This provides a more robust and adaptable detection method against evolving attacker techniques.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process creation logs with command-line auditing enabled on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events | EXTRACT features from command_line | SCORE with text_classification_model | ALERT where score > threshold
- question: Was the Security Packages registry key modified by a process that originated from a non-administrative user session?
  context: This question is designed to detect privilege escalation. Modifying the LSA configuration requires administrative privileges. If a registry modification to the SSP key can be traced back to a process chain that started from a standard, non-administrative user, it is a strong indicator that the adversary has successfully exploited a vulnerability to elevate their privileges and is now establishing persistence.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Windows Event ID 4624
  - Logon session, process creation, and registry audit logs across all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events where object_path CONTAINS "Lsa\\Security Packages" | GET process_id | TRACE process_ancestry to root_process | GET logon_id from root_process | JOIN with logon_events on logon_id | ALERT if user_is_not_admin
- question: Has the Security Packages registry key been modified by a user account not explicitly authorized to perform this action?
  context: This question implements a zero-trust model for a critical system configuration. Changes to SSPs should be rare and performed only by a small, well-defined set of administrative or automated system accounts. By maintaining a strict allowlist of authorized accounts, any modification from an account not on this list is immediately flagged as a high-priority security event, effectively assuming any unauthorized change is malicious until proven otherwise.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Windows Event ID 4624
  - Logon session, process creation, and registry audit logs across all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_events where object_path CONTAINS "Lsa\\Security Packages" | GET user_account | ALERT if user_account NOT IN authorized_ssp_modifiers_allowlist
- question: Can a path be identified in event data that connects a non-administrative user to a modification of the Security Packages registry key through a series of process creations?
  context: This question uses graph analytics to formally model and detect privilege escalation chains. By representing users, processes, and system objects as a graph, complex attack paths can be discovered that might be missed by simple event correlation. Finding a complete path from a non-admin user logon to a privileged action like an SSP registry write provides a comprehensive and high-confidence alert that visualizes the entire privilege escalation and persistence sequence for the analyst.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Windows Event ID 4624
  - Logon session, process creation, and registry audit logs across all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CONSTRUCT graph from logon, process, and registry events | SEARCH for path from node(type="user", admin=false) to node(type="registry", path="Lsa\\Security Packages")
- question: Following a suspicious SSP modification and a system reboot, has lsass.exe spawned a command shell like cmd.exe or powershell.exe?
  context: This question looks for the direct execution of a payload by a malicious SSP. The lsass.exe process should never spawn a command shell. If this behavior is observed, it is an extremely strong indicator that a malicious SSP loaded by lsass.exe at startup is now executing commands. Correlating this with a prior suspicious SSP registry modification and a system reboot connects the persistence mechanism to its malicious payload execution.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Event ID 6005
  - Sysmon Event ID 1
  - Process creation and system event logs on all Windows systems, especially those flagged for suspicious registry activity.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH suspicious_ssp_modification | ON same host, WAIT for reboot_event | AFTER reboot, SEARCH process_creation where parent_process="lsass.exe" AND process_name IN ("cmd.exe", "powershell.exe")
- question: After a suspicious SSP modification and reboot, did an unusual process execute with SYSTEM privileges during the startup sequence?
  context: This question aims to detect the execution of an adversary's payload after a malicious SSP has been loaded. The set of processes that run as SYSTEM during a normal system startup is typically stable and predictable. By creating a baseline of this activity, any new or unexpected process running as SYSTEM after a reboot on a potentially compromised machine can be flagged. This indicates that the persistence mechanism was successful in launching a malicious payload.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Event ID 6005
  - Sysmon Event ID 1
  - Process creation and system event logs on all Windows systems, especially those flagged for suspicious registry activity.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE processes where user="SYSTEM" within 10_minutes of reboot | ON host with suspicious_ssp_mod, AFTER next reboot, SEARCH for process where user="SYSTEM" AND process_name NOT IN baseline
- question: Following a suspicious SSP modification and reboot, was there a statistically anomalous spike in the number of processes created with SYSTEM privileges during startup?
  context: This question uses time-series analysis to detect abnormal system activity post-compromise. A normal boot sequence has a characteristic rhythm of process creation. A malicious SSP launching its payload might cause a sudden, unexpected burst of new processes running as SYSTEM. A time-series model can learn the normal boot-time process creation cadence and alert on significant deviations, providing a quantitative way to detect the execution of a malicious payload.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Windows Event ID 6005
  - Sysmon Event ID 1
  - Process creation and system event logs on all Windows systems, especially those flagged for suspicious registry activity.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL normal_process_count_per_minute post-reboot with ARIMA | ON host with suspicious_ssp_mod, AFTER next reboot, MONITOR process_count_per_minute | ALERT if actual_count significantly deviates from predicted_count