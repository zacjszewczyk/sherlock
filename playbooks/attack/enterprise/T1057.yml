name: T1057: Process Discovery
id: 3e9a5d12-6f2c-4b8a-9e1d-0c7f8a6b3d2e
description: This playbook helps determine if an adversary is performing process discovery on systems or network devices. It focuses on identifying known discovery tools via file hashes from threat intelligence, detecting the use of native utilities (like tasklist.exe or ps) with suspicious arguments, spotting discovery tools being launched from anomalous parent processes (like Microsoft Word), flagging high-volume enumeration from a single host or user, and detecting process enumeration commands on network devices from unusual remote sessions. The goal is to uncover reconnaissance activity that adversaries use to understand the environment and plan their next moves.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any newly created processes whose file hashes match known discovery tools from our threat intelligence feeds?
    context: Adversaries often use publicly available or custom-built tools for reconnaissance. This question aims to identify the execution of these tools by matching the file hash of newly created processes against a curated list of known malicious tool hashes. A match is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - User Workstations
      - Domain Controllers
      - Application Servers
      - Web Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation_logs
          | EXTRACT file_hash
          | JOIN file_hash with threat_intelligence_hashes
          | WHERE match_is_found
          | ALERT
  - question: For any process identified as a malicious discovery tool, how rare is its execution across the environment?
    context: This question helps differentiate a targeted attack from a widespread, potentially misclassified benign tool. If a tool with a malicious hash is found on only a handful of systems, it is more likely to be part of a deliberate, targeted intrusion, warranting a higher-priority investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - User Workstations
      - Domain Controllers
      - Application Servers
      - Web Servers
    range: Last 30 days
    queries:
      - search_technology: pseudocode
        query: |
          INPUT matched_malicious_hash
          SEARCH process_creation_logs for matched_malicious_hash over last 30 days
          | COUNT distinct hosts
          | IF host_count < threshold (e.g., 5)
          | INCREASE alert_priority
  - question: Can a machine learning model, considering the full execution context, predict if a process is a malicious discovery tool?
    context: Simple hash matching can be noisy. This question explores using a machine learning model to improve detection accuracy. By analyzing features like the parent process, user context, and command-line arguments in addition to the hash, the model can make a more informed decision and reduce false positives.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - User Workstations
      - Domain Controllers
      - Application Servers
      - Web Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each process_creation_event
          | EXTRACT features (parent_process, user, cmd_line_entropy, hash_match_bool)
          | APPLY pre-trained_classification_model
          | IF model_prediction == "malicious"
          | ALERT
  - question: Are native system utilities being executed with command-line arguments that indicate comprehensive process enumeration?
    context: Adversaries often "live off the land" by using built-in utilities like `tasklist.exe`, `wmic.exe`, or `ps` to gather information. This question focuses on detecting specific command-line patterns, such as verbose or formatting flags (`/v`, `/m`, `get /format:list`, `aux`), which are commonly used for detailed reconnaissance rather than typical administrative checks.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 4104 (PowerShell Script Block Logging)
      - User Workstations
      - Domain Controllers
      - Critical Servers
      - Development Environments
      - Centralized Log Management Platform (SIEM)
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation_logs AND powershell_logs
          | FILTER process_name IN (`tasklist.exe`, `wmic.exe`, `ps`, `powershell.exe`)
          | WHERE command_line MATCHES regex (`/v`, `/m`, `get /format:list`, `aux`, `Format-List *`)
          | ALERT
  - question: Is there an anomalous spike in the frequency or complexity of process discovery commands on any host?
    context: This question aims to detect automated or scripted reconnaissance activity by establishing a baseline of normal command usage for each host. An alert is triggered when a host's activity significantly deviates from its own baseline, such as executing `tasklist.exe` far more frequently than usual or running PowerShell commands with unusually high complexity (entropy).
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 4104 (PowerShell Script Block Logging)
      - User Workstations
      - Domain Controllers
      - Critical Servers
      - Development Environments
      - Centralized Log Management Platform (SIEM)
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each host
          | CALCULATE baseline of hourly_frequency and cmd_entropy for discovery_commands
          | MONITOR new executions
          | IF current_frequency > 3 * stdev(baseline_frequency) OR current_entropy is anomalous
          | ALERT
  - question: Is a user account executing process discovery commands at a rate inconsistent with their established behavior?
    context: This question seeks to identify compromised user accounts by modeling the typical administrative cadence of each user. A time-series model learns a user's normal rhythm of activity. A sudden burst of discovery commands that deviates from this learned pattern suggests that the account may be under the control of an adversary.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 4104 (PowerShell Script Block Logging)
      - User Workstations
      - Domain Controllers
      - Critical Servers
      - Development Environments
      - Centralized Log Management Platform (SIEM)
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user_account
          | APPLY time_series_model to discovery_command_rate
          | IF observed_rate significantly deviates from forecast
          | ALERT
  - question: Are process discovery utilities being launched by unusual parent processes, such as office applications or web servers?
    context: Legitimate process discovery commands are typically initiated from interactive shells (`cmd.exe`, `powershell.exe`) or administrative scripts. When a discovery tool like `tasklist.exe` is spawned by a parent like `WINWORD.EXE` or a web server process (`w3wp.exe`), it is highly indicative of code execution from a compromised application.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - User Workstations (especially for high-value users)
      - Public-Facing Web Servers
      - Application Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation_logs
          | FILTER child_process IN (`tasklist.exe`, `ps`, `Get-Process`)
          | WHERE parent_process IN (`WINWORD.EXE`, `CHROME.EXE`, `w3wp.exe`, etc.)
          | ALERT
  - question: Are we observing statistically rare parent-child process relationships that involve discovery tools?
    context: This question moves beyond a fixed list of bad parents to a data-driven approach. By analyzing historical logs, we can determine the probability of any given parent-child process pair. An event involving a discovery tool, such as `powershell.exe` spawning `tasklist.exe`, is flagged if that specific relationship is extremely rare in the environment's history, indicating a novel and potentially malicious execution chain.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - User Workstations (especially for high-value users)
      - Public-Facing Web Servers
      - Application Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          INPUT new_event(parent, child) where child is a discovery_tool
          | LOOKUP historical probability P(child | parent)
          | IF probability < threshold (e.g., 0.0001)
          | ALERT
  - question: Does the process activity on a host, when viewed as a graph, exhibit structurally anomalous relationships?
    context: This question models process activity as a graph, where processes are nodes and parent-child relationships are edges. By learning the normal graph structure of a typical host, a Graph Neural Network (GNN) can identify structural anomalies, such as a new, unexpected edge connecting a web browser directly to a system utility like `tasklist.exe`, which would be highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - User Workstations (especially for high-value users)
      - Public-Facing Web Servers
      - Application Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each host
          | BUILD process_relationship_graph
          | APPLY graph_anomaly_detection_model
          | IF anomalous_edge_is_detected (e.g., Office App -> tasklist.exe)
          | ALERT
  - question: Has any single host or user executed an excessive number of process discovery commands within a short time frame?
    context: This question uses a simple but effective tripwire to detect automated reconnaissance. A fixed threshold, such as more than 20 discovery commands in 5 minutes, can quickly identify a high-volume burst of activity from a single source that is characteristic of an automated script rather than manual administrative work.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Endpoints and Servers
      - VPN Concentrators
      - Active Directory Domain Controllers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          AGGREGATE discovery_command_events by host, user over 5-minute windows
          | WHERE event_count > 20
          | ALERT
  - question: Is the rate of process discovery commands from a specific user or host statistically significant compared to its own baseline?
    context: This question refines the simple threshold approach by creating a dynamic, statistical threshold for each entity. By calculating the mean and standard deviation of normal activity for each user and host, we can detect when their current activity is a statistical outlier (e.g., a Z-score greater than 3), indicating a burst that is abnormal for that specific entity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Endpoints and Servers
      - VPN Concentrators
      - Active Directory Domain Controllers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user, host
          | CALCULATE baseline_mean and baseline_stdev of discovery_command_count
          | MONITOR current_count in a rolling window
          | CALCULATE z_score = (current_count - baseline_mean) / baseline_stdev
          | IF z_score > 3
          | ALERT
  - question: Can we identify dense clusters of process discovery commands that are indicative of automated scripting?
    context: This question applies density-based clustering algorithms like DBSCAN to distinguish between normal, sporadic administrative commands and automated attacks. Legitimate activity will appear as sparse "noise" points, while a rapid succession of commands from a single source will form a dense cluster that the algorithm can identify as an anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - All Endpoints and Servers
      - VPN Concentrators
      - Active Directory Domain Controllers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          INPUT discovery_command_events with features (host, user, timestamp)
          | APPLY DBSCAN clustering algorithm
          | IDENTIFY dense micro-clusters
          | ALERT on hosts/users within those clusters
  - question: Are process enumeration commands being executed on network devices from untrusted source IP addresses?
    context: This question focuses on securing network infrastructure by correlating remote access logs with command execution logs. It aims to detect if an administrative session, originating from an IP address not on a pre-approved allow-list of administrative workstations, is used to execute process discovery commands (e.g., `show processes`) on a router or switch.
    answer_sources:
      - Zeek conn.log
      - Zeek ssh.log
      - RADIUS/TACACS+ Authentication Logs
      - Network device syslog
      - Network Management Subnet
      - Core Routers and Switches
      - Firewalls
      - VPN Concentrators
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH for successful admin_logins on network_devices
          | JOIN with command_logs for that session
          | IF command_log contains 'show process' AND source_ip is NOT in admin_ip_allowlist
          | ALERT
  - question: Are administrative sessions on network devices, which involve process discovery, exhibiting other anomalous characteristics?
    context: This question seeks to identify compromised administrator accounts by building a multi-faceted baseline of their normal behavior on network devices. It checks for deviations across several metrics, such as the source IP's subnet/country, the time of day, and session duration. An alert is triggered if a session deviates from the norm on multiple fronts, providing stronger evidence of a compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek ssh.log
      - RADIUS/TACACS+ Authentication Logs
      - Network device syslog
      - Network Management Subnet
      - Core Routers and Switches
      - Firewalls
      - VPN Concentrators
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each admin_user
          | BUILD baseline of (source_ips, login_hours, session_durations)
          | FOR each new session involving process_discovery
          | COUNT number of baseline deviations
          | IF deviation_count >= 2
          | ALERT
  - question: Do the command sequences within administrative sessions on network devices follow a pattern more indicative of reconnaissance than routine work?
    context: This question analyzes the *order* of commands within a session. By modeling legitimate administrative sessions with a Markov chain, we can learn the common transitions between commands (e.g., `config t` is often followed by `interface X`). A session containing a sequence of commands with low transition probabilities (e.g., jumping between various 'show' commands) is flagged as anomalous, as it mirrors a reconnaissance pattern.
    answer_sources:
      - Zeek conn.log
      - Zeek ssh.log
      - RADIUS/TACACS+ Authentication Logs
      - Network device syslog
      - Network Management Subnet
      - Core Routers and Switches
      - Firewalls
      - VPN Concentrators
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each admin_session
          | EXTRACT sequence of commands
          | APPLY pre-trained Markov model to calculate sequence probability
          | IF probability is below a learned threshold
          | ALERT