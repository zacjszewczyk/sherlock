name: T1090.004: Domain Fronting
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is using domain fronting for command and control. It provides investigative questions to detect this technique by identifying mismatches between TLS SNI and HTTP Host headers, analyzing traffic for C2-like behavior such as beaconing or anomalous data volumes, detecting high-entropy fan-outs of inner domains, and correlating network indicators with suspicious host-level process activity.
type: technique
related: TA0011: Command and Control
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any network sessions where the TLS SNI does not match the inner HTTP Host header, and the destination IP or inner Host domain is on a known threat intelligence list?
    context: This question uses a high-fidelity symbolic check to find domain fronting. It works by joining network connection logs to find sessions where the outer layer (TLS SNI) domain is different from the inner layer (HTTP Host) domain. It then compares the actual destination (IP address or inner host) against a list of known malicious indicators. A match provides strong evidence of C2 communication using known-bad infrastructure.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Egress points (e.g., internet gateways, forward proxies) and security infrastructure (e.g., SIEM, TIP).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN ssl.log, http.log ON connection_uid
          WHERE ssl.server_name != http.host
          JOIN conn.log ON connection_uid
          LOOKUP http.host OR conn.destination_ip IN threat_intel_feed
          ALERT on match
  - question: Are there any SNI/Host mismatch pairs where the destination IP or inner Host domain is statistically rare compared to the organization's 30-day traffic baseline?
    context: This question aims to uncover unknown or novel malicious infrastructure. Adversaries often use domains and IPs that are not commonly visited by an organization's users. By first identifying all SNI/Host mismatches and then calculating the historical prevalence of the destinations, we can flag connections to exceptionally rare domains or IPs. Those falling below a low percentile threshold (e.g., 5th percentile) are highly suspicious and warrant investigation.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Egress points (e.g., internet gateways, forward proxies) and security infrastructure (e.g., SIEM, TIP).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // First, build a 30-day baseline of destination prevalence
          BASELINE = PREVALENCE(http.host, conn.destination_ip) for last 30 days
          // Then, check current traffic
          FIND sessions WHERE ssl.server_name != http.host
          FOR each session:
            IF PREVALENCE(session.http.host) < 5th_percentile(BASELINE) OR PREVALENCE(session.conn.destination_ip) < 5th_percentile(BASELINE):
              ALERT on statistical rarity
  - question: Can a machine learning model classify new SNI/Host mismatch events as malicious based on features like IP reputation, domain age, ASN, and TLS fingerprint?
    context: This question seeks to automate the detection of malicious domain fronting by using a supervised machine learning model. By training a model on historical data containing both benign (e.g., legitimate CDN traffic) and malicious examples, the system can learn to distinguish between them. Features like the reputation of the destination IP, the age of the inner domain, and the TLS client fingerprint (JA3) are powerful predictors. This approach can classify new events in near real-time, reducing analyst fatigue and improving detection speed.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Egress points (e.g., internet gateways, forward proxies) and security infrastructure (e.g., SIEM, TIP).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // During operation
          FOR each new SNI/Host mismatch event:
            EXTRACT features (IP reputation, domain age, ASN, JA3, etc.)
            PREDICT probability = model.predict(features)
            IF probability > high_confidence_threshold:
              ALERT as high-probability malicious event
  - question: Are any internal hosts generating SNI/Host mismatches or connections with a blank SNI that do not match an established allowlist of known-good behavior?
    context: Many legitimate applications and services use domain fronting or blank SNIs, which can create significant noise. This question focuses on reducing that noise by creating an allowlist of known-good (SNI, Host) pairs and legitimate applications that generate blank SNIs. Any mismatch or blank SNI connection that does not appear on this pre-approved list is flagged as an anomaly, allowing analysts to focus on truly unusual and potentially malicious activity.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Egress points (e.g., internet gateways, forward proxies) and internal network segments.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALLOWLIST = KNOWN_GOOD(sni, host_header) pairs
          FIND sessions WHERE (ssl.server_name != http.host) OR (ssl.server_name is NULL)
          FOR each session:
            IF (session.sni, session.host) NOT IN ALLOWLIST:
              ALERT on non-allowlisted mismatch
  - question: Has any internal host exhibited a statistically significant increase in its hourly ratio of mismatched SNI/Host connections compared to its own 7-day rolling average?
    context: This question focuses on detecting a change in a single host's behavior. A compromised machine that starts communicating with a C2 server via domain fronting will likely show a sudden spike in SNI/Host mismatches. By tracking the ratio of mismatched connections to total TLS connections for each host and comparing it to its own rolling average, we can detect such deviations. An alert is triggered when the ratio exceeds a statistical threshold (e.g., 3 standard deviations), indicating a significant change from its normal behavior.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Egress points (e.g., internet gateways, forward proxies) and internal network segments.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_host:
            CALCULATE 7-day rolling_avg and rolling_stddev of (mismatch_count / total_tls_count)
            CALCULATE current_hourly_ratio
            IF current_hourly_ratio > (rolling_avg + 3 * rolling_stddev):
              ALERT on behavioral change for host
  - question: Can an unsupervised anomaly detection model identify outlier connections among SNI/Host mismatches based on features like IPs, port, data volume, and the specific SNI/Host values?
    context: This question aims to find novel threats without relying on predefined rules or labeled data. An unsupervised model, such as an Isolation Forest, can be applied to the metadata of all SNI/Host mismatch connections. By learning the characteristics of 'normal' mismatches within the environment, the model can identify connections that are strong outliers based on a combination of features. These outliers represent previously unseen or highly unusual activity that warrants investigation as potential C2.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Egress points (e.g., internet gateways, forward proxies) and internal network segments.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Train model on historical mismatch data
          model = TRAIN IsolationForest(features: src_ip, dst_ip, dst_port, bytes, duration, etc.)
          // Apply to new data
          FOR each new mismatch_connection:
            anomaly_score = model.predict(connection_features)
            IF anomaly_score indicates a strong outlier:
              ALERT on anomalous mismatch connection
  - question: Are any connections to known CDN IP ranges using TLS fingerprints (JA3/JA3S) that are associated with known malware families?
    context: This question uses TLS fingerprinting as a high-fidelity indicator to identify specific malware tools. The JA3 hash is a fingerprint of the client's TLS handshake, which is often unique and static for a given malware family (e.g., Cobalt Strike, Metasploit). By extracting JA3 hashes from connections to CDNs and comparing them against a threat intelligence feed of known-malicious hashes, we can identify C2 activity even when the destination domain and IP appear benign.
    answer_sources: Zeek conn.log, Zeek ssl.log, Zeek dns.log, Egress points, cloud service access points, and endpoint devices.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FILTER connections where destination_ip is in CDN_RANGES
          EXTRACT ja3, ja3s from ssl.log
          LOOKUP ja3, ja3s in malware_fingerprint_feed
          ALERT on match
  - question: Are there any connections to CDNs that exhibit statistical anomalies such as highly regular beaconing (low time delta standard deviation) or unusually large data transfers compared to peers?
    context: This question seeks to identify C2 behavior hidden in traffic to legitimate CDNs. C2 implants often 'beacon' back to the server at fixed intervals, which is machine-like, not human. We can detect this by calculating the standard deviation of time between connections from a source to a destination; a very low value indicates regularity. Separately, flagging connections with data volumes that are statistical outliers compared to their peers can help uncover data exfiltration.
    answer_sources: Zeek conn.log, Zeek ssl.log, Zeek dns.log, Egress points, cloud service access points, and endpoint devices.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP connections to CDNs by source_host, destination_sni
          CALCULATE stddev of time_delta between consecutive connections
          IF stddev is near zero: ALERT for beaconing
          
          CALCULATE 95th_percentile of data_volume per user-to-service
          IF session_volume > 95th_percentile: ALERT for large transfer
  - question: Can a time series analysis model detect non-business-related periodic communication patterns (beaconing) in a host's connection counts to CDN domains?
    context: This question applies a more advanced technique to find C2 beaconing. By creating a time series of connection counts from a host to CDN domains, we can use a forecasting model (like SARIMA) to decompose the series into trend, seasonal, and residual components. This allows the model to identify strong periodic patterns (seasonality) that do not align with normal business hours (e.g., a heartbeat every 30 seconds, 24/7). Such patterns are strong indicators of automated C2 communication.
    answer_sources: Zeek conn.log, Zeek ssl.log, Zeek dns.log, Egress points, cloud service access points, and endpoint devices.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_host:
            CREATE time_series of connection counts to CDNs
            APPLY time series decomposition model
            IDENTIFY periodic components in the signal
            IF component_periodicity aligns with non-business cycles:
              ALERT on detected beaconing pattern
  - question: Is any single source IP communicating with an unusually high number of unique inner HTTP hosts behind a single outer SNI domain within a 24-hour period?
    context: This question aims to detect a 'fan-out' pattern common in some C2 frameworks that use domain fronting. The malware may rapidly cycle through a large number of different subdomains for C2, all hidden behind a single, legitimate-looking SNI domain. By counting the number of unique inner HTTP hosts contacted by a single source IP via one SNI over a 24-hour period, we can use a simple threshold (e.g., >50) to detect this suspicious high-cardinality behavior.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Internal network segments and egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP mismatches by source_ip, outer_sni over 24 hours
          COUNT unique inner_http_hosts
          IF unique_host_count > 50:
            ALERT on high fan-out activity
  - question: For any given source IP and fronted SNI, is the Shannon entropy of the associated inner HTTP Host names statistically anomalous compared to the enterprise baseline?
    context: This question uses information theory to quantify the randomness of inner hostnames used in domain fronting. A legitimate service might use a few predictable subdomains, resulting in low entropy. In contrast, some C2 frameworks use randomly generated subdomains, leading to high entropy. By calculating the Shannon entropy for the set of inner hosts per source/SNI pair and comparing it to a baseline, we can flag activity where the destinations are abnormally diverse or random.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Internal network segments and egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE_ENTROPY = 99th percentile of entropy across all legitimate traffic
          FOR each source_ip/sni_pair in a 1-hour window:
            CALCULATE shannon_entropy of associated inner_http_hosts
            IF entropy > BASELINE_ENTROPY:
              ALERT on high entropy
  - question: Can a clustering algorithm identify outlier hosts based on their domain fronting activity features, such as mismatch counts, unique SNI/Host counts, and average entropy?
    context: This question uses an unsupervised machine learning approach to find anomalous hosts. A clustering algorithm like DBSCAN can group hosts based on multiple features of their domain fronting activity (e.g., total mismatches, number of unique SNIs, number of unique inner hosts). Most hosts will fall into 'normal' clusters. Hosts that do not belong to any cluster are considered outliers. This method is effective at finding hosts whose overall domain fronting behavior profile is unique and suspicious.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Internal network segments and egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR all hosts:
            CREATE feature vector (mismatch_count, unique_sni_count, unique_host_count, avg_entropy)
          APPLY DBSCAN clustering algorithm to all host vectors
          IDENTIFY hosts classified as outliers (noise)
          ALERT on outlier hosts
  - question: After detecting a suspicious SNI/Host mismatch, can the source process on the endpoint be identified and is it an unapproved application (i.e., not on an allowlist of known browsers and updaters)?
    context: This question provides critical context by pivoting from a network alert to the originating host process. By correlating the 4-tuple of the suspicious network connection (from Zeek) with endpoint process and network logs (from Sysmon), an analyst can identify the exact executable responsible for the traffic. Checking this process 'Image' path against an allowlist of legitimate web browsers and system tools can quickly confirm if the activity is from an unauthorized or potentially malicious program.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Sysmon Event ID 1, Sysmon Event ID 3, Windows Event ID 4688, Endpoint devices (workstations, servers) and log aggregation platforms (e.g., SIEM).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON network_alert(src_ip, src_port, dst_ip, dst_port):
            QUERY Sysmon Event ID 3 for matching 4-tuple
            EXTRACT ProcessId, Image path
            IF Image path NOT IN (chrome.exe, firefox.exe, svchost.exe, etc.):
              ALERT on suspicious source process
  - question: For a process linked to a domain fronting alert, does it exhibit a high cumulative risk score based on factors like being an unsigned binary, running from a temporary directory, or having an unusual parent process?
    context: This question enriches a host-level finding by layering additional risk factors. Malware often exhibits multiple suspicious characteristics. After identifying the source process of a domain fronting connection, we can check if it is digitally signed, where it is running from (e.g., C:\Users\...\AppData\), and what process launched it (e.g., Word launching PowerShell). By assigning a point for each risky attribute, we can calculate a cumulative score to quickly triage and prioritize the most suspicious events.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Sysmon Event ID 1, Sysmon Event ID 3, Windows Event ID 4688, Endpoint devices (workstations, servers) and log aggregation platforms (e.g., SIEM).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON identified_process:
            risk_score = 0
            IF process is unsigned: risk_score += 1
            IF process_path is in user/temp directory: risk_score += 1
            IF parent_process is unusual (e.g., winword.exe): risk_score += 1
            IF risk_score > 2:
              ALERT with high risk score
  - question: Can a trained classification model determine if the process initiating a domain fronting connection is malicious based on its execution characteristics (e.g., parent process, command line entropy, signature status)?
    context: This question aims to fully automate the host-level analysis following a network alert. A machine learning model can be trained on features from process creation events (Sysmon Event ID 1) to distinguish between benign and malicious processes. When a network alert for domain fronting occurs, this model can be used to automatically classify the source process on the endpoint. A 'malicious' classification would escalate the alert's priority, enabling a faster and more decisive response.
    answer_sources: Zeek ssl.log, Zeek http.log, Zeek conn.log, Sysmon Event ID 1, Sysmon Event ID 3, Windows Event ID 4688, Endpoint devices (workstations, servers) and log aggregation platforms (e.g., SIEM).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON network_alert:
            IDENTIFY source process on host
            EXTRACT process features (parent_process, cmd_entropy, signature_status)
            prediction = classification_model.predict(features)
            IF prediction == 'malicious':
              ESCALATE alert priority for immediate investigation