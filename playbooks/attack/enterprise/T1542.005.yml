name: T1542.005: TFTP Boot
id: 4b1c8f9e-6a3d-4c2b-8e1f-9a0b7c6d5e4f
description: This playbook focuses on detecting adversary persistence and defense evasion on network devices through the use of TFTP boot (T1542.005). It provides investigative steps to identify malicious firmware transfers by checking file hashes and IP reputations, analyzing TFTP filenames for anomalies using entropy and regular expressions, monitoring for connections to unauthorized servers, and correlating TFTP events with subsequent suspicious device behavior like reboots and covert C2 communication. The goal is to uncover unauthorized changes to network device operating systems that could lead to long-term compromise.
type: technique
related:
  - TA0003: Persistence
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are file hashes or IP addresses from TFTP transfers matching known malicious indicators?
    context: This question aims to detect the use of known-malicious firmware or connections to known adversary infrastructure. A match on a threat intelligence feed for either a file hash (SHA256) or an IP address provides a high-confidence indicator of compromise, suggesting an attempt to load a malicious OS onto a network device.
    answer_sources:
      - Zeek file.log
      - Zeek conn.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
      - Internet gateways and perimeter firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each tftp_transfer IN (zeek_file_logs):
            CHECK file_hash AGAINST threat_intel_hashes
            IF match THEN ALERT
          FOR each tftp_connection IN (zeek_conn_logs):
            CHECK source_ip, dest_ip AGAINST threat_intel_ips
            IF match THEN ALERT
  - question: Are TFTP transfers using filenames with unusually high entropy?
    context: Adversaries may use randomized or obfuscated filenames to evade simple signature-based detections. Calculating the Shannon entropy of filenames can quantify this randomness. A filename with an entropy score significantly higher than the established baseline for a server suggests a potential attempt to hide malicious activity.
    answer_sources:
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
      - Internet gateways and perimeter firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = calculate_95th_percentile_entropy(filenames from last 30 days)
          FOR each new_tftp_file IN (zeek_file_logs):
            current_entropy = calculate_shannon_entropy(filename)
            IF current_entropy > BASELINE THEN ALERT
  - question: Can TFTP transfers be classified as suspicious based on their metadata profile?
    context: This question uses machine learning to distinguish between benign and malicious TFTP activity. By training a model on features like IP geolocation, subnet, file size, and time of day, we can identify transfers that deviate from normal, legitimate patterns (e.g., scheduled maintenance) and flag them as suspicious, even without a known-bad signature.
    answer_sources:
      - Zeek file.log
      - Zeek conn.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
      - Internet gateways and perimeter firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_decision_tree_classifier(historical_tftp_metadata)
          FOR each new_tftp_transfer IN (zeek_logs):
            prediction = MODEL.predict(new_tftp_transfer_metadata)
            IF prediction == 'suspicious' THEN ALERT
  - question: Are TFTP transfers using filenames with suspicious extensions or patterns matching known malicious toolkits?
    context: This question seeks to identify malicious files based on their names. Standard network device images have predictable naming conventions and extensions. A filename matching a regex for a known toolkit or having an unusual extension (like .sh, .py, .elf) is a strong indicator that an adversary is attempting to place a script or executable on the device, rather than a legitimate OS image.
    answer_sources:
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each tftp_file IN (zeek_file_logs):
            IF filename MATCHES regex_patterns('.sh$', '.py$', 'malicious_toolkit_*') THEN ALERT
  - question: Are TFTP transfers using file extensions that are historically rare or appearing with anomalous frequency?
    context: This question focuses on detecting novelty and frequency anomalies in file extensions used in TFTP transfers. The appearance of a never-before-seen or extremely rare extension, or a sudden spike in the frequency of a particular extension, can indicate a deviation from normal operations and may signal malicious activity.
    answer_sources:
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = calculate_frequency_distribution(extensions from last 30 days)
          FOR each new_tftp_file IN (zeek_file_logs):
            IF extension_frequency < 0.1% IN BASELINE OR extension_frequency > (mean + 3*std_dev) THEN ALERT
  - question: Do TFTP filenames deviate from the learned linguistic patterns of legitimate files?
    context: This question applies NLP techniques to identify anomalous filenames. By training a model on the 'language' of legitimate filenames, it can detect new names that are structurally or characteristically different. This can catch sophisticated evasion attempts that use complex but non-random names designed to bypass simpler entropy or regex checks.
    answer_sources:
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_nlp_model(legitimate_filenames)
          FOR each new_tftp_file IN (zeek_file_logs):
            anomaly_score = MODEL.score(filename)
            IF anomaly_score > threshold THEN ALERT
  - question: Is a network device initiating a TFTP connection to a server not on the authorized allowlist?
    context: This is a high-fidelity detection method based on a simple policy. Network devices should only communicate with a small, well-defined set of management and TFTP servers. Any TFTP connection from a network device to a destination IP not on this explicit allowlist is a significant security violation and highly indicative of a compromise or misconfiguration.
    answer_sources:
      - Zeek conn.log
      - Firewall Logs
      - Network device management VLAN
      - Perimeter firewall logs
      - Core router and switch ACLs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALLOWLIST = [authorized_tftp_server_ips]
          FOR each tftp_connection FROM network_device_subnet IN (zeek_conn_logs):
            IF destination_ip NOT IN ALLOWLIST THEN ALERT
  - question: Is a network device communicating with a statistically rare or new TFTP server compared to its own baseline?
    context: This question provides a more dynamic alternative to a static allowlist. By profiling the historical TFTP behavior of each device individually, we can detect when a device starts communicating with a new or infrequent server. This can catch instances where an adversary uses a legitimate but rarely-used server, or sets up a new rogue server within the network.
    answer_sources:
      - Zeek conn.log
      - Firewall Logs
      - Network device management VLAN
      - Perimeter firewall logs
      - Core router and switch ACLs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each device IN network_device_subnet:
            BASELINE = profile_destination_servers(device, last 30 days)
            FOR each new_tftp_connection FROM device:
              IF destination_ip IS RARE in BASELINE (e.g., < 5th percentile) THEN ALERT
  - question: Are there TFTP connections that are outliers when compared to the dense clusters of normal activity?
    context: This question uses unsupervised machine learning to find anomalous connections. Normal TFTP activity (device-to-server pairs) should form dense clusters. A clustering algorithm like DBSCAN can automatically identify these clusters. Any connection that does not belong to a cluster is considered an outlier or noise, making it a strong candidate for investigation.
    answer_sources:
      - Zeek conn.log
      - Firewall Logs
      - Network device management VLAN
      - Perimeter firewall logs
      - Core router and switch ACLs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_dbscan_on_connection_pairs(historical_tftp_connections)
          FOR each new_tftp_connection:
            IF MODEL.predict(new_connection) == 'outlier' THEN ALERT
  - question: Is TFTP activity involving network devices occurring outside of scheduled maintenance windows or from unauthorized source IPs?
    context: This question enforces business logic and operational policies as a detection method. Legitimate firmware updates and configuration changes are typically performed during scheduled maintenance windows from specific management workstations. TFTP activity outside these times or from an unexpected source IP is highly suspicious and warrants immediate investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each tftp_activity:
            IF activity_time NOT IN maintenance_window OR source_ip NOT IN authorized_sources THEN ALERT
  - question: Does a TFTP transfer exhibit multiple deviations from a device's normal baseline, such as anomalous time, file size, or source IP?
    context: This question moves beyond single indicators to a composite risk score. An adversary's actions may trip several low-confidence indicators simultaneously (e.g., an update at an odd time, with a slightly larger file size). By creating a scoring system that aggregates these minor deviations, we can build a higher-confidence alert for activity that is subtly but broadly anomalous.
    answer_sources:
      - Zeek conn.log
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each tftp_transfer:
            risk_score = 0
            IF time is anomalous THEN risk_score += 1
            IF file_size > 3*std_dev THEN risk_score += 2
            IF source_ip is infrequent THEN risk_score += 1
            IF risk_score > threshold THEN ALERT
  - question: Is the volume or frequency of TFTP transfers for a device anomalous when analyzed as a time-series?
    context: This question focuses on the rhythm and tempo of TFTP activity. Normal management tasks may have a regular weekly or monthly pattern. A time-series model can learn this seasonality and pattern. An alert would be generated for a burst of activity or a transfer at a time that breaks the established rhythm, which could indicate an unscheduled, malicious update.
    answer_sources:
      - Zeek conn.log
      - Zeek file.log
      - Core network switches and routers
      - Network management servers
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_timeseries_model(historical_tftp_volume_per_device)
          FOR each time_interval:
            current_volume = count_tftp_transfers(current_interval)
            IF MODEL.predict(current_volume) == 'anomaly' THEN ALERT
  - question: Does the SHA256 hash of a file transferred via TFTP match a known-malicious firmware image?
    context: This is a direct, high-fidelity check for known threats. By hashing every firmware file transferred via TFTP and comparing it against a curated threat intelligence database of malicious firmware, a match provides a definitive indicator that an adversary is attempting to install a compromised OS on a network device.
    answer_sources:
      - Zeek file.log
      - Network management servers
      - File repositories for OS images
      - Network device management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each tftp_file IN (zeek_file_logs):
            file_hash = calculate_sha256(file)
            IF file_hash IN known_malicious_firmware_hashes THEN ALERT
  - question: Is a TFTP-transferred file highly similar, but not identical, to a known-good firmware image?
    context: This question aims to detect patched or trojanized firmware. Adversaries may slightly modify a legitimate firmware image to insert a backdoor. Such a file will have a different SHA256 hash but will be very similar in structure to the original. Fuzzy hashing (ssdeep) can detect this similarity, flagging files that are suspiciously close to legitimate versions, indicating potential tampering.
    answer_sources:
      - Zeek file.log
      - Network management servers
      - File repositories for OS images
      - Network device management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE_HASHES = calculate_ssdeep_for(all_approved_firmware)
          FOR each new_tftp_file:
            new_hash = calculate_ssdeep(new_file)
            FOR each baseline_hash in BASELINE_HASHES:
              IF similarity_score(new_hash, baseline_hash) > 70 AND new_file IS NOT an exact_match THEN ALERT
  - question: Can a machine learning model classify a new firmware image as malicious based on its binary features?
    context: This question seeks to identify novel threats for which no hash signature exists. By training a model on intrinsic features of file binaries (like byte entropy, string presence, section characteristics), it can learn to distinguish between the general properties of benign and malicious firmware. This allows for the detection of brand-new, previously unseen malicious images.
    answer_sources:
      - Zeek file.log
      - Network management servers
      - File repositories for OS images
      - Network device management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_classifier_on_binary_features(known_good_and_bad_firmware)
          FOR each new_tftp_file:
            features = extract_binary_features(file)
            IF MODEL.predict(features) == 'malicious' THEN ALERT
  - question: Has a network device exhibited a sequence of TFTP transfer, followed by a reboot, followed by suspicious outbound C2 communication?
    context: This question correlates multiple events to build a high-confidence attack narrative. The sequence of a TFTP transfer (potential new OS), a reboot (to load the new OS), and subsequent command-and-control (C2) traffic is a classic sign of a successful device compromise. Detecting this specific chain of events provides strong evidence of persistence and defense evasion.
    answer_sources:
      - Zeek conn.log
      - Zeek file.log
      - Zeek dns.log
      - Zeek notice.log
      - Device Syslog
      - Core network switches and routers
      - Perimeter firewall logs
      - DNS resolvers
      - Network management VLAN
      - Syslog servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each device:
            DETECT sequence within 15 mins:
              1. TFTP transfer TO device
              2. Reboot signal FOR device (syslog/SNMP)
              3. New outbound connection TO known C2 OR DNS tunneling pattern
            IF sequence_complete THEN ALERT
  - question: Following a TFTP transfer and reboot, is the device making DNS requests with unusually high entropy, suggesting DGA-based C2?
    context: This question looks for a specific type of C2 communication post-compromise. Domain Generation Algorithms (DGAs) are often used by malware to locate C2 servers. These algorithms produce pseudo-random domain names, which have high Shannon entropy. A spike in the entropy of DNS requests from a device that just received a new firmware image is a strong indicator of a DGA-based backdoor.
    answer_sources:
      - Zeek conn.log
      - Zeek file.log
      - Zeek dns.log
      - Zeek notice.log
      - Device Syslog
      - Core network switches and routers
      - Perimeter firewall logs
      - DNS resolvers
      - Network management VLAN
      - Syslog servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN TFTP transfer AND reboot detected for device:
            BASELINE_ENTROPY = calculate_historical_dns_entropy(device)
            POST_REBOOT_ENTROPY = calculate_dns_entropy(device, next_hour)
            IF POST_REBOOT_ENTROPY > 99th_percentile(BASELINE_ENTROPY) THEN ALERT
  - question: Does a device's sequence of network states (e.g., Idle -> TFTP -> Reboot) have a high probability of transitioning to a C2 Communication state?
    context: This question uses a probabilistic model to evaluate event sequences. An HMM can learn the normal transitions between device states (idle, maintenance, etc.). An observed sequence of 'TFTP transfer' followed by 'Reboot' that leads to a state with a high probability of being 'C2 Communication' (based on traffic characteristics) would be flagged as anomalous.
    answer_sources:
      - Zeek conn.log
      - Zeek file.log
      - Zeek dns.log
      - Zeek notice.log
      - Device Syslog
      - Core network switches and routers
      - Perimeter firewall logs
      - DNS resolvers
      - Network management VLAN
      - Syslog servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_hmm_on_device_event_sequences()
          FOR each device:
            OBSERVED_SEQUENCE = [tftp_event, reboot_event, outbound_traffic_event]
            PROBABILITY_OF_C2_STATE = MODEL.predict_next_state_probability(OBSERVED_SEQUENCE)
            IF PROBABILITY_OF_C2_STATE > threshold THEN ALERT
  - question: After a TFTP event, is a critical device communicating using protocols or ports not on its strict allowlist?
    context: This question applies a strict, policy-based check immediately following a potentially risky event. Critical network devices should have a very predictable and limited traffic profile. After a firmware update via TFTP, any communication that violates this profile (e.g., unexpected protocols or ports) is a strong indicator that the new firmware contains unauthorized functionality.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek protocol logs (e.g., http.log)
      - Core network switches and routers
      - East-West traffic collection points
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN TFTP event for critical_device:
            MONITOR traffic from critical_device for next hour
            IF traffic.protocol OR traffic.port NOT IN device_allowlist THEN ALERT
  - question: After a TFTP event, is the device's new traffic distribution significantly different from its historical baseline?
    context: This question uses statistical tests to detect subtle changes in a device's behavior post-update. A malicious firmware image might not use obviously bad protocols, but it could alter the overall traffic pattern. A K-S test can statistically determine if the 'shape' of the new traffic distribution is different from the established baseline, signaling a fundamental change in device behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek protocol logs (e.g., http.log)
      - Core network switches and routers
      - East-West traffic collection points
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN TFTP event for device:
            BASELINE_DIST = get_traffic_distribution(device, last 30 days)
            NEW_DIST = get_traffic_distribution(device, next 1 hour)
            P_VALUE = ks_test(BASELINE_DIST, NEW_DIST)
            IF P_VALUE < 0.01 THEN ALERT
  - question: After a TFTP event, does a device's traffic profile generate a high reconstruction error when passed through an autoencoder trained on normal behavior?
    context: This question uses an autoencoder for anomaly detection. The model learns to compress and decompress feature vectors representing normal traffic. When a new traffic profile (post-TFTP) is fed in, if it's anomalous, the model will struggle to reconstruct it accurately, resulting in a high 'reconstruction error'. This error serves as a sensitive indicator that the device's behavior no longer conforms to its learned normal patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek protocol logs (e.g., http.log)
      - Core network switches and routers
      - East-West traffic collection points
      - Network management VLAN
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_autoencoder(normal_traffic_profiles_for_device)
          WHEN TFTP event for device:
            NEW_PROFILE = create_traffic_profile(device, next 1 hour)
            RECONSTRUCTION_ERROR = MODEL.calculate_error(NEW_PROFILE)
            IF RECONSTRUCTION_ERROR > threshold THEN ALERT
  - question: Is there a TFTP connection to a network device originating from an external IP or an unauthorized internal host?
    context: This question focuses on identifying illegitimate connection sources. TFTP for device management should only come from a trusted, internal management zone. A TFTP connection from the public internet to a network device is a critical security event. Similarly, a connection from a non-management host internally suggests lateral movement or a compromised internal machine being used to attack infrastructure.
    answer_sources:
      - Zeek conn.log
      - Firewall Logs
      - Perimeter firewalls
      - Network device management VLAN
      - Network management servers
      - Internal network segmentation boundaries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each tftp_connection in firewall_logs:
            IF destination_ip IN network_device_subnet THEN ALERT (CRITICAL)
          FOR each tftp_connection in zeek_conn_logs:
            IF destination_ip IN network_device_subnet AND source_ip NOT IN management_allowlist THEN ALERT (HIGH)
  - question: Are there inbound TFTP attempts originating from new or statistically rare countries or Autonomous System Numbers (ASNs)?
    context: This question adds geographic and network-level context to connection attempts. Legitimate management traffic should originate from predictable geographic locations and ISPs (ASNs). An attempt from a new country or an ASN never before seen in TFTP logs is highly anomalous and suggests an external attacker probing or attacking the network infrastructure.
    answer_sources:
      - Zeek conn.log
      - Firewall Logs
      - Perimeter firewalls
      - Network device management VLAN
      - Network management servers
      - Internal network segmentation boundaries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE_ASNS = get_historical_source_asns(firewall_logs)
          FOR each new_inbound_tftp_attempt:
            IF source_asn NOT IN BASELINE_ASNS THEN ALERT
            IF source_country IS RARE THEN ALERT
  - question: Are there TFTP connection sources that a one-class SVM model, trained on authorized server IPs, flags as anomalous?
    context: This question uses a machine learning model designed for anomaly detection when only 'good' data is available. A one-class SVM learns a boundary around the feature space of authorized management server IPs. Any new connection attempt whose source IP falls outside this learned 'normal' boundary is immediately flagged as an anomaly, providing a dynamic way to detect unauthorized sources.
    answer_sources:
      - Zeek conn.log
      - Firewall Logs
      - Perimeter firewalls
      - Network device management VLAN
      - Network management servers
      - Internal network segmentation boundaries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_one_class_svm(authorized_management_server_ips)
          FOR each new_tftp_connection:
            IF MODEL.predict(source_ip) == 'anomaly' THEN ALERT