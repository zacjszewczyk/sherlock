playbook:
  name: T1546.002: Screensaver
  id: 9e1a03b4-7f5c-4d8e-8a6b-2c1d9e0f8a7b
  description: This playbook is designed to help analysts determine if an adversary is using screensaver manipulation for persistence or privilege escalation. This involves detecting the execution of malicious screensaver files (.scr), identifying unusual modifications to screensaver-related registry keys, correlating screensaver executions with suspicious network activity, and flagging executions from non-standard locations. It also covers scenarios where screensavers are used to launch privilege escalation tools, command shells, or access sensitive system resources like lsass.exe or the SAM file.
  type: technique
  related:
    - TA0003: Persistence
    - TA0004: Privilege Escalation
  contributors:
    - Zachary Szewczyk
    - Ask Sage
  created: 2025-10-01
  modified: 2025-10-01
  version: 1.0
  tags: none
  investigative_questions:
    - question: Has a new process with a '.scr' extension been executed, and does its file hash match a known malicious indicator?
      context: This question aims to identify persistence attempts where an adversary has replaced or created a screensaver file with a malicious executable. By querying for process creation events for files ending in '.scr' and comparing their hashes against threat intelligence feeds, analysts can directly detect the execution of known malware disguised as a screensaver. A positive match is a high-confidence indicator of compromise.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process execution logs on all Windows workstations and servers.
        - Threat intelligence feed of known malicious hashes.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH process_creation_logs (e.g., EventID 4688)
            WHERE process_name ENDS WITH '.scr'
            FOR EACH result:
              file_hash = GET_HASH(result.process_path)
              is_malicious = QUERY_THREAT_INTEL(file_hash)
              IF is_malicious:
                ALERT(severity='high', event=result)
    - question: Has an abnormally rare screensaver file (based on its hash) been executed across the enterprise?
      context: This question uses a statistical approach to find unknown or custom malicious screensavers that would not be caught by signature-based threat intelligence. By baselining the execution frequency of all screensaver files (identified by their SHA256 hash) over a 30-day period, any file that executes very rarely (e.g., in the bottom 5th percentile) is flagged as an anomaly. This could indicate a malicious tool deployed to a small number of targets, which warrants further investigation.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process execution logs on all Windows workstations and servers.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            BASELINE_START = NOW - 30 days
            FREQUENCY_TABLE = COUNT(process.sha256) FROM process_logs WHERE process_name ENDS WITH '.scr' AND timestamp > BASELINE_START
            THRESHOLD = 5th_PERCENTILE(FREQUENCY_TABLE.counts)
            SEARCH process_logs WHERE process_name ENDS WITH '.scr' AND COUNT(process.sha256) < THRESHOLD
            ALERT(severity='medium', event=result)
    - question: Does a machine learning model classify a screensaver execution event as malicious?
      context: This question leverages a machine learning model to detect sophisticated malicious screensavers by analyzing a combination of features from the execution event. The model is trained on known benign and malicious data, considering attributes like file path entropy, parent process, command-line arguments, and user context. An execution classified as malicious with high confidence indicates a likely threat that may evade simpler detection methods.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process execution logs on all Windows workstations and servers.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            FOR EACH new_process_event WHERE process_name ENDS WITH '.scr':
              features = EXTRACT_FEATURES(event)
              prediction = ML_MODEL.predict(features)
              IF prediction == 'malicious' AND confidence > 0.9:
                ALERT(severity='high', event=event)
    - question: Has the screensaver executable registry key been modified to point to an executable outside of standard system directories, or has the screensaver security been disabled?
      context: This question looks for direct evidence of an adversary hijacking the screensaver mechanism for persistence. A change to the 'SCRNSAVE.exe' registry value to a non-standard path (outside of System32/SysWOW64) is a strong indicator of a malicious screensaver being set. Similarly, disabling the 'ScreenSaverIsSecure' feature (setting it to '0') is a common technique used by malware to ensure it can run without restrictions.
      answer_sources:
        - Windows Event ID 4657
        - Endpoint registry monitoring logs on all Windows workstations.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH registry_write_events (e.g., EventID 4657)
            WHERE (key_path ENDS WITH '\Control Panel\Desktop\SCRNSAVE.exe' AND new_value NOT IN ('C:\Windows\System32\*', 'C:\Windows\SysWOW64\*'))
            OR (key_path ENDS WITH '\Control Panel\Desktop\ScreenSaverIsSecure' AND new_value == '0')
            ALERT(severity='high', event=result)
    - question: Has an uncommon process modified a screensaver-related registry key, or is the new screensaver file path statistically anomalous?
      context: This question seeks to identify suspicious screensaver registry modifications by focusing on statistical outliers. Legitimate changes are typically made by a small set of standard processes (like 'explorer.exe'). A modification by an unusual process is suspicious. Additionally, malicious file paths often exhibit high entropy (randomness) to evade simple signature-based detections. Flagging modifications by rare processes or paths with unusually high entropy can uncover novel threats.
      answer_sources:
        - Windows Event ID 4657
        - Endpoint registry monitoring logs on all Windows workstations.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            BASELINE a list of common processes that modify screensaver registry keys.
            SEARCH registry_write_events for screensaver keys.
            IF modifying_process is NOT in baseline of common processes:
              ALERT(severity='medium', event=result)
            IF key is 'SCRNSAVE.exe' AND ENTROPY(new_value) is > 2 STDEV above mean:
              ALERT(severity='medium', event=result)
    - question: Has a time-series anomaly detection model detected a spike in screensaver-related registry modifications on a host?
      context: This question is designed to detect an abnormal burst of activity related to screensaver configuration changes. Adversaries may make multiple rapid changes while setting up or testing their persistence mechanism. A time-series model (like ARIMA) learns the normal rhythm of these modifications on a per-host basis. An alert is generated when the observed activity significantly exceeds the predicted normal range, indicating a potential compromise in progress.
      answer_sources:
        - Windows Event ID 4657
        - Endpoint registry monitoring logs on all Windows workstations.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            AGGREGATE count of screensaver registry modifications per host in 1-hour windows.
            FOR EACH host:
              MODEL = TRAIN_ARIMA_MODEL(host.historical_counts)
              PREDICTION = MODEL.forecast(next_hour)
              IF current_hour_count > PREDICTION.upper_bound:
                ALERT(severity='medium', host=host)
    - question: Has a screensaver process initiated an external network connection shortly after execution?
      context: This question is based on the premise that legitimate screensavers should not initiate network connections to external addresses. By joining process execution logs for '.scr' files with network connection logs, we can detect this highly anomalous behavior. A correlation where a screensaver process communicates externally within 60 seconds of its launch is a strong indicator of a malicious payload executing, such as a backdoor calling back to a command and control (C2) server.
      answer_sources:
        - Windows Event ID 4688
        - Zeek conn.log
        - Endpoint process execution logs on all Windows hosts.
        - Network traffic logs from core network sensors or egress points.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            JOIN process_events (WHERE process_name ENDS WITH '.scr') AS P
            WITH network_events AS N
            ON P.host_ip == N.host_ip
            AND P.timestamp < N.timestamp < (P.timestamp + 60s)
            WHERE N.destination_ip is external
            ALERT(severity='high', event=result)
    - question: Does a network connection from a screensaver process have a high-risk score based on threat intelligence and other context?
      context: This question provides a method for risk-scoring network connections originating from screensaver processes, even if the destination is not on a known blocklist. By enriching the destination IP with threat intelligence (reputation), ASN rarity (is this a common cloud provider or a rare, suspicious one?), and destination port uncommonness, a cumulative risk score can be calculated. Connections exceeding a certain risk threshold warrant investigation as potentially malicious C2 traffic.
      answer_sources:
        - Windows Event ID 4688
        - Zeek conn.log
        - Endpoint process execution logs on all Windows hosts.
        - Network traffic logs from core network sensors or egress points.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            FOR EACH network_connection from a '.scr' process:
              ip_rep = GET_IP_REPUTATION(destination_ip)
              asn_rarity = GET_ASN_RARITY(destination_ip)
              port_risk = GET_PORT_RISK(destination_port)
              risk_score = CALCULATE_SCORE(ip_rep, asn_rarity, port_risk)
              IF risk_score > THRESHOLD:
                ALERT(severity='medium', event=connection)
    - question: Does an anomaly detection model flag network traffic from a screensaver process as an outlier compared to normal enterprise traffic?
      context: This question aims to detect malicious network activity from a screensaver by modeling what constitutes 'normal' network behavior for the entire organization. A one-class SVM or Isolation Forest model is trained on benign traffic features (port, protocol, data volume, etc.). When a connection from a '.scr' process is analyzed, the model determines if it conforms to this established norm. If the connection is flagged as an outlier, it is highly suspicious, as it deviates from all learned patterns of legitimate traffic.
      answer_sources:
        - Windows Event ID 4688
        - Zeek conn.log
        - Endpoint process execution logs on all Windows hosts.
        - Network traffic logs from core network sensors or egress points.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            MODEL = TRAIN_ISOLATION_FOREST(benign_network_traffic_features)
            FOR EACH network_connection from a '.scr' process:
              features = EXTRACT_FEATURES(connection)
              is_outlier = MODEL.predict(features)
              IF is_outlier:
                ALERT(severity='medium', event=connection)
    - question: Has a screensaver file been executed from a non-standard, user-writable directory?
      context: This question helps detect malicious screensavers by focusing on their location. Legitimate screensavers reside in protected system directories (e.g., 'C:\Windows\System32'). Adversaries often drop their payloads into user-writable locations like 'C:\Users\', '%APPDATA%', or '%TEMP%' because these locations do not require elevated permissions. An alert on a '.scr' file executing from one of these non-standard directories is a strong indicator of a potential threat.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process execution logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH process_creation_events (e.g., EventID 4688)
            WHERE process_name ENDS WITH '.scr'
            AND process_path CONTAINS ('Users\', 'AppData', 'Temp', 'Downloads', 'ProgramData')
            AND process_path NOT CONTAINS 'C:\Windows\System32'
            ALERT(severity='high', event=result)
    - question: Has a screensaver been executed from a statistically rare directory or with a high-entropy filename?
      context: This question uses statistical analysis to find suspiciously placed or named screensaver files. By creating a frequency distribution of all directories from which '.scr' files are executed, any execution from a very rare location can be flagged. Additionally, adversaries may use randomly generated filenames to avoid detection. Calculating the Shannon entropy of the filename can identify this randomness; a high entropy score suggests the name is not human-readable and could be malicious.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process execution logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            BASELINE frequency of parent directories for '.scr' executions.
            FOR EACH '.scr' execution event:
              IF parent_directory is in bottom 5% of frequency:
                ALERT(severity='medium', event=result)
              IF ENTROPY(filename) is high:
                ALERT(severity='medium', event=result)
    - question: Does a machine learning clustering model identify a screensaver's execution path as anomalous?
      context: This question uses unsupervised machine learning to identify anomalous screensaver execution locations without prior knowledge of good or bad paths. By representing file paths as numerical vectors, a clustering algorithm like DBSCAN can group them. The vast majority of legitimate screensavers will form dense clusters around 'System32'. Any execution path that doesn't fall into a major cluster (i.e., is classified as noise or a micro-cluster) is anomalous by definition and warrants investigation.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process execution logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            VECTORS = VECTORIZE all '.scr' execution paths.
            CLUSTERS = DBSCAN.fit(VECTORS)
            FOR EACH data_point:
              IF data_point is classified as 'noise' or in a very small cluster:
                ALERT(severity='medium', event=original_event)
    - question: Did a screensaver process spawn a child process associated with a known privilege escalation tool?
      context: This question looks for a clear and critical sign of malicious activity: a process disguised as a screensaver launching a tool designed for privilege escalation. By monitoring the children of any process ending in '.scr' and comparing the child's file hash against a known list of hacking tools (e.g., Mimikatz, BadPotato), analysts can detect this overt escalation attempt with high confidence. A positive match should be treated as a critical alert.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process lineage data from all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH process_creation_events (e.g., EventID 4688)
            WHERE parent_process_name ENDS WITH '.scr'
            child_hash = GET_HASH(event.process_name)
            is_pe_tool = QUERY_IOC_LIST(child_hash)
            IF is_pe_tool:
              ALERT(severity='critical', event=event)
    - question: Has a screensaver process spawned a child process that is highly unusual for that parent?
      context: This question uses statistical analysis of process lineage to find anomalous behavior. Over time, a baseline of normal child processes for legitimate screensavers can be established (which should be a very small or empty set). This analytic calculates the conditional probability of a specific child process appearing given a screensaver parent. If that probability is extremely low, it indicates a highly unusual and suspicious event, suggesting the screensaver has been compromised to launch an unexpected program.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process lineage data from all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            BASELINE conditional probabilities of P(child | parent) for all '.scr' parents.
            FOR EACH process_creation_event WHERE parent_process_name ENDS WITH '.scr':
              probability = GET_PROBABILITY(event.process_name | event.parent_process_name)
              IF probability < 0.01:
                ALERT(severity='medium', event=event)
    - question: Does a graph-based anomaly detection model flag the process tree originating from a screensaver as suspicious?
      context: This question treats process activity as a graph, where a screensaver execution is the root of a tree. A machine learning model is trained on the structure and nodes of benign process trees. When a new screensaver runs, its resulting process tree is analyzed by the model. The model can flag anomalies in the tree's structure (e.g., unexpected depth) or its nodes (e.g., a rare child process like 'powershell.exe'), providing a sophisticated way to detect complex, multi-stage attacks originating from a compromised screensaver.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process lineage data from all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            MODEL = TRAIN_GRAPH_MODEL(benign_process_trees)
            FOR EACH new process tree starting with a '.scr' process:
              is_anomalous = MODEL.predict(tree)
              IF is_anomalous:
                ALERT(severity='medium', event=root_event)
    - question: Has a legitimate screensaver been launched with suspicious command-line arguments?
      context: This question targets the abuse of legitimate screensavers by injecting malicious commands. Adversaries might not replace the screensaver file itself but instead call it with malicious arguments. This analytic uses regular expressions to scan the command line of known screensaver processes for suspicious patterns like Base64 encoded strings, PowerShell download cradles ('IEX', 'DownloadString'), or any arguments beyond the standard '/s', '/c', or '/p' switches, which are strong indicators of abuse.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process command-line logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH process_creation_events for known screensaver executables
            WHERE command_line MATCHES_REGEX ('(?i)base64|iex|downloadstring')
            OR command_line NOT MATCHES_REGEX ('/s|/c|/p')
            ALERT(severity='high', event=result)
    - question: Does the command line of a screensaver execution have an abnormally high entropy score?
      context: This question uses a statistical measure, Shannon entropy, to detect obfuscated or complex command-line arguments passed to a screensaver. Legitimate screensaver commands are simple and predictable (e.g., 'scrnsave.scr /s'). Malicious commands, especially those carrying encoded payloads, are often long and random-looking, resulting in a high entropy score. By baselining the normal entropy for each screensaver's command line, any execution with a score significantly above the average can be flagged as anomalous and potentially malicious.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process command-line logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            BASELINE the mean and STDEV of command-line entropy for each known screensaver.
            FOR EACH execution of a known screensaver:
              entropy = CALCULATE_ENTROPY(event.command_line)
              IF entropy > (mean + 3 * STDEV):
                ALERT(severity='medium', event=event)
    - question: Does a machine learning model classify a screensaver's command-line arguments as malicious?
      context: This question applies a supervised machine learning model to the task of classifying command-line arguments as malicious or benign. The model is trained on a large dataset and uses Natural Language Processing (NLP) techniques to learn the features of malicious commands (e.g., specific keywords, character patterns, n-grams). This allows it to score the command line of every screensaver execution and alert on those that receive a high malice score, effectively detecting novel and complex injection techniques.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process command-line logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            MODEL = TRAIN_CLASSIFIER(command_line_dataset)
            FOR EACH screensaver execution event:
              features = EXTRACT_NLP_FEATURES(event.command_line)
              score = MODEL.predict_score(features)
              IF score > 0.9:
                ALERT(severity='high', event=event)
    - question: Has a screensaver process spawned a command shell or scripting engine, or has it spawned a child with a higher integrity level?
      context: This question detects a common privilege escalation or execution step where a compromised screensaver is used to launch a more powerful process. Legitimate screensavers have no reason to spawn a command shell ('cmd.exe', 'powershell.exe') or a scripting engine ('wscript.exe'). Furthermore, a child process running at a higher integrity level than its screensaver parent is a definitive sign of a privilege escalation exploit. Both scenarios are high-confidence indicators of malicious activity.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process lineage and integrity level data from all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH process_creation_events where parent_process_name ENDS WITH '.scr'
            IF child_process_name IN ('cmd.exe', 'powershell.exe', 'pwsh.exe', 'wscript.exe', 'cscript.exe'):
              ALERT(severity='high', event=result)
            IF child_integrity_level > parent_integrity_level:
              ALERT(severity='high', event=result)
    - question: Has a screensaver process spawned a statistically rare child process?
      context: This question provides a broader, statistical approach to finding unusual process lineage originating from a screensaver. Instead of looking for a specific list of bad child processes, this analytic builds a frequency table of all children ever spawned by '.scr' processes across the enterprise. Any child process that is not among the most common (e.g., not in the top 99%) is flagged as an anomaly. This method is effective at catching novel or unexpected tools being launched via a compromised screensaver.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process lineage and integrity level data from all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            FREQUENCY_TABLE = COUNT(child_process) for all '.scr' parent processes.
            THRESHOLD = 99th_PERCENTILE(FREQUENCY_TABLE.processes)
            SEARCH process_creation_events where parent_process_name ENDS WITH '.scr'
            IF child_process_name NOT IN THRESHOLD:
              ALERT(severity='medium', event=result)
    - question: Did an autoencoder model flag a screensaver's process tree as anomalous?
      context: This question uses an autoencoder, a type of neural network, to learn a compressed representation of 'normal' process behavior following a screensaver launch. The model is trained only on benign process trees. When a new tree is fed into the model, it attempts to reconstruct it. If the tree contains anomalous activity (like spawning a shell), the model will do a poor job, resulting in a high 'reconstruction error'. This error signals a deviation from the learned norm and flags the activity as suspicious.
      answer_sources:
        - Windows Event ID 4688
        - Endpoint process lineage and integrity level data from all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            MODEL = TRAIN_AUTOENCODER(feature_vectors_of_benign_process_trees)
            FOR EACH new process tree starting with a '.scr' process:
              vector = VECTORIZE(tree)
              reconstruction_error = MODEL.get_reconstruction_error(vector)
              IF reconstruction_error > THRESHOLD:
                ALERT(severity='medium', event=root_event)
    - question: Has a screensaver process (or its child) attempted to access highly sensitive system resources?
      context: This question looks for the ultimate objective of many privilege escalation attacks: accessing sensitive data or system components. By correlating a screensaver's process ID with subsequent object access events, we can detect if it attempts to read 'lsass.exe' memory (for credential dumping), the SAM file, or critical security-related registry hives. Such an access attempt by a screensaver process is an unambiguous, critical indicator of compromise.
      answer_sources:
        - Windows Event ID 4688
        - Windows Event ID 4663
        - Windows Event ID 4657
        - Endpoint object access logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            SEARCH for process_creation of '.scr' file, get ProcessID.
            SEARCH for object_access events (4663, 4657) with same ProcessID.
            WHERE object_name IN ('lsass.exe', 'config\SAM', 'NTDS\ntds.dit', '\REGISTRY\MACHINE\SECURITY')
            ALERT(severity='critical', event=access_event)
    - question: Has a screensaver process accessed any file or registry object outside of a very narrow, established baseline?
      context: This question operates on the principle of least privilege: a legitimate screensaver should access a very limited and predictable set of files and registry keys to function. This analytic establishes a baseline of all objects normally accessed by screensavers. Since this baseline should be near-zero for sensitive assets, any access by a '.scr' process to an object outside this baseline is a statistical outlier and should be investigated as a potential indicator of compromise.
      answer_sources:
        - Windows Event ID 4688
        - Windows Event ID 4663
        - Windows Event ID 4657
        - Endpoint object access logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            BASELINE = set of all objects accessed by legitimate screensavers.
            FOR EACH object_access event by a '.scr' process:
              IF accessed_object NOT IN BASELINE:
                ALERT(severity='medium', event=access_event)
    - question: Did a sequence-based anomaly detection model flag the system calls following a screensaver launch as suspicious?
      context: This question models process behavior as a sequence of events (e.g., system calls or object accesses). A recurrent neural network (like an LSTM) is trained on the typical sequences that follow benign process launches. This allows the model to understand the normal 'grammar' of process activity. If a screensaver is compromised and performs a malicious chain of actions (e.g., file open -> process access -> registry write), the model will recognize this sequence as anomalous and generate an alert, detecting the malicious behavior pattern.
      answer_sources:
        - Windows Event ID 4688
        - Windows Event ID 4663
        - Windows Event ID 4657
        - Endpoint object access logs on all Windows hosts.
      range: last 90 days
      queries:
        - technology: pseudocode
          query: |
            MODEL = TRAIN_LSTM(sequences_of_events_from_benign_processes)
            FOR EACH '.scr' process launch:
              sequence = GET_SUBSEQUENT_SYSTEM_CALLS(process_id)
              is_anomalous = MODEL.predict(sequence)
              IF is_anomalous:
                ALERT(severity='medium', event=root_event)