name: T1027.017: SVG Smuggling
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is evading defenses by smuggling malicious payloads in SVG files. This is achieved by analyzing SVG files for multiple layers of evidence. The playbook outlines checks for known malicious signatures by matching file hashes and embedded URLs against threat intelligence. It also details methods for detecting suspicious script content through YARA rules targeting smuggling techniques, statistical analysis of keyword frequency, and machine learning models that identify malicious code structures. Furthermore, it addresses obfuscation by analyzing file entropy and searching for encoded payloads. Finally, it provides methods to correlate network SVG downloads with suspicious endpoint behavior, such as a browser spawning a script interpreter, to confirm successful execution.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any downloaded SVG files or the URLs/IPs embedded within them found on threat intelligence blocklists?
  context: This question aims to detect known malicious SVG files or those pointing to malicious infrastructure. Matching against CTI feeds is a high-fidelity method for identifying threats that have already been observed and cataloged by the security community. It is a fundamental first step in SVG analysis.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Mail Gateway, Network Egress Points, Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network logs for file downloads with mime_type 'image/svg+xml'
      FOR each file:
        COMPUTE SHA256 hash
        QUERY hash against threat intelligence database
        IF match, ALERT
        EXTRACT URLs and IPs from SVG content
        FOR each URL/IP:
          QUERY against threat intelligence database
          IF match, ALERT
- question: Are any SVG files linking to anomalously rare domains that are seldom visited by the organization?
  context: Adversaries often use newly registered or purpose-built domains for C2 or payload delivery. These domains will not have a history of legitimate traffic within the organization. Identifying SVGs that link to these statistically rare domains can uncover suspicious activity that might not be on a CTI list yet.
  answer_sources: Zeek files.log, Zeek http.log, Zeek dns.log, Enterprise Web Proxy, Mail Gateway, Network Egress Points, Threat Intelligence Platform
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      CREATE baseline of domain request frequency over 30 days from DNS/HTTP logs
      SEARCH network logs for SVG file downloads
      FOR each SVG:
        EXTRACT domains from content
        FOR each domain:
          CALCULATE rarity score based on baseline
          IF rarity is in bottom 5th percentile, ALERT
- question: Can a machine learning model, trained on features like script presence, URL reputation, and domain rarity, identify SVG files as malicious?
  context: This question moves beyond simple indicators to a holistic, feature-based detection approach. By training a model on a combination of characteristics (structural, reputational, statistical), it's possible to identify novel or complex malicious SVGs that evade signature-based or single-indicator checks. A high probability score from the model indicates the file shares many traits with known malicious samples.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Mail Gateway, Network Egress Points, Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new SVG file:
        EXTRACT features (has_script, script_length, num_urls, url_reputation, domain_rarity)
        INPUT features into trained classification model
        GET malicious probability score
        IF score > 0.90, ALERT
- question: Do any downloaded SVG files contain script content matching YARA rules designed to detect known smuggling techniques or malware families?
  context: This question focuses on identifying specific, known malicious code patterns within the SVG's script. YARA rules provide a flexible and powerful way to hunt for text or binary patterns, such as function names (`atob`, `createObjectURL`), code structures, or unique strings used by malware families like Qakbot or IcedID. A match is a strong indicator of malicious intent.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Cloud Application Security Broker (CASB), User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      EXTRACT content of all 'image/svg+xml' files from network traffic
      SCAN content with YARA rule set for SVG smuggling techniques
      IF rule match, ALERT
- question: Does the JavaScript within an SVG file show an anomalous distribution of keywords, such as an unusually high frequency of high-risk functions like `eval`?
  context: Malicious scripts often use functions related to obfuscation (`atob`), dynamic code execution (`eval`), or file manipulation differently than benign scripts. By baselining the normal frequency of these keywords, we can spot outliers. A script with a statistically significant deviation, especially an overrepresentation of high-risk keywords, is highly suspicious.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Cloud Application Security Broker (CASB), User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE baseline of JavaScript keyword frequencies from a benign SVG corpus
      FOR each new SVG with a script:
        CALCULATE keyword frequency distribution
        COMPARE distribution to baseline
        IF frequency of high-risk keyword > 99.9th percentile OR KL-divergence score is high, ALERT
- question: Can a sequence-based machine learning model, trained on code structure (ASTs) or token sequences, classify the script content of an SVG as malicious?
  context: This question addresses the detection of malicious logic and structure, which can be missed by simple keyword or signature analysis. By analyzing the sequence and relationship of code elements (via ASTs or tokens), an RNN or LSTM model can learn the "grammar" of malicious scripts, enabling it to detect obfuscated or novel threats based on their underlying structure rather than specific strings.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Cloud Application Security Broker (CASB), User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new SVG with a script:
        PARSE script into token sequence or Abstract Syntax Tree (AST)
        INPUT sequence/AST into trained RNN/LSTM model
        GET classification result
        IF classified as malicious with high confidence, ALERT
- question: Are there any SVG files that contain both a script tag and an embedded Base64 `data:` URI, potentially hiding an executable or another script?
  context: This is a very specific and high-confidence indicator of smuggling. Legitimate SVGs rarely embed large Base64 blobs inside a script tag. Adversaries use this technique to encode a payload (like a DLL or second-stage script) directly within the SVG, which the script then decodes and executes. Checking for file headers like 'MZ' after decoding confirms the presence of an executable.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Mail Gateway, File Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for SVG files containing both a <script> tag and a 'data:' URI
      FOR each match:
        DECODE Base64 content from data URI
        CHECK decoded content for executable file headers (e.g., 'MZ') or script shebangs
        IF header is found, ALERT
- question: Do any SVG files contain script content with anomalously high entropy, suggesting obfuscation or encryption?
  context: High Shannon entropy indicates a high degree of randomness in data. While normal code has a relatively low, predictable entropy, encrypted or compressed data is nearly random and has high entropy. Adversaries pack or encrypt their payloads to evade signature-based detection. A script with entropy significantly higher than the established baseline is a strong sign that it contains a hidden, obfuscated payload.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Mail Gateway, File Servers
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN rolling 30-day baseline of script entropy for SVGs
      FOR each new SVG with a script:
        CALCULATE Shannon entropy of the script content
        IF entropy > 98th percentile of baseline, ALERT
- question: Can an anomaly detection model, trained on features related to file structure and data encoding, identify suspicious SVG files?
  context: This question uses an unsupervised learning approach to find outliers without pre-labeled data. An Isolation Forest model is effective at identifying anomalies by learning what "normal" SVGs look like based on features like file size, script length, entropy, and the presence of encoded strings. Files that don't conform to this normal profile are flagged as suspicious, which is useful for detecting novel threats.
  answer_sources: Zeek files.log, Zeek http.log, Enterprise Web Proxy, Mail Gateway, File Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new SVG file:
        EXTRACT features (file_size, script_length, entropy, encoded_string_counts, etc.)
        INPUT features into trained Isolation Forest model
        GET anomaly score
        IF file is flagged as an anomaly, ALERT
- question: Did a browser process spawn a script interpreter (like wscript.exe or powershell.exe) on an endpoint shortly after that same endpoint downloaded an SVG file?
  context: This is a critical correlation between network activity and endpoint behavior. A browser's primary function is not to launch script interpreters. When this behavior occurs immediately after an SVG download, it strongly suggests the SVG contained a malicious script that, once rendered, triggered the download and execution of a payload via the script interpreter. This directly connects the suspicious file to post-exploitation activity.
  answer_sources: Zeek http.log, Zeek conn.log, Zeek dns.log, Windows Event ID 4688, User Workstations, Active Directory Domain Controllers, Internal DNS Resolvers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE network logs and endpoint process logs by host IP and timestamp
      ALERT when:
        (Event A) Host downloads file with mime_type 'image/svg+xml'
        AND
        (Event B) On same host, a browser process spawns a script interpreter (wscript.exe, powershell.exe, etc.)
        AND
        (Timestamp of Event B) is within 5 minutes of (Timestamp of Event A)
- question: Following an SVG download, did a browser on a host spawn a rare or 'first-seen' child process?
  context: This question focuses on detecting anomalous endpoint behavior by baselining normal process relationships. While a browser might legitimately spawn some helper processes, spawning a script interpreter or an unknown executable is highly unusual. By identifying process creation events that are novel for a specific host or rare across the entire enterprise, we can detect suspicious activity linked to the SVG download.
  answer_sources: Zeek http.log, Zeek conn.log, Zeek dns.log, Windows Event ID 4688, User Workstations, Active Directory Domain Controllers, Internal DNS Resolvers, Network Egress Points
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN baseline of browser parent-child process relationships per host
      WHEN an SVG download is observed on a host:
        MONITOR subsequent process creation events from the browser on that host
        IF a new child process is spawned that is not in the baseline OR is globally rare, ALERT
- question: Was there an anomalous spike in network activity, DNS queries, or process creation on a host within 10 minutes of it downloading an SVG file?
  context: This question seeks to identify the secondary effects of a malicious payload execution. After a smuggled file is run, it will often initiate C2 communication (spiking outbound connections and DNS queries) or launch other tools (spiking process creation). A time-series model can learn the normal rhythm of a host's activity and detect sudden, anomalous deviations that, when correlated with a recent SVG download, point to a successful compromise.
  answer_sources: Zeek http.log, Zeek conn.log, Zeek dns.log, Windows Event ID 4688, User Workstations, Active Directory Domain Controllers, Internal DNS Resolvers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR time-series data for network connections, DNS queries, and process creations per host
      WHEN an SVG download is observed on a host:
        IF anomaly detection model flags a significant spike in any monitored time-series within 10 minutes, ALERT