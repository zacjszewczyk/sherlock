name: T1027.017: SVG Smuggling
id: f8e2c0b6-9a1d-4f7e-9c0a-1b2c3d4e5f6a
description: This playbook investigates whether an adversary is evading defenses by smuggling malicious payloads in SVG files. It focuses on identifying SVG files that are malicious by nature, either through known signatures, embedded malicious links, or suspicious structural properties like high entropy or unusual code patterns. It also aims to correlate the network event of an SVG download with subsequent malicious endpoint behavior, such as a browser process spawning a script interpreter.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any downloaded SVG files been identified as malicious by matching their file hash or embedded URLs/IPs against threat intelligence feeds?
    context: This question aims to detect known malicious SVG files at the network boundary. By checking file hashes and embedded links against CTI feeds, we can quickly identify threats that have been previously analyzed and flagged, providing a high-fidelity, low-effort detection method.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Mail Gateway
      - Network Egress Points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each file with mime_type 'image/svg+xml' in files.log, GET hash, QUERY hash against CTI. PARSE SVG for URLs/IPs, QUERY URLs/IPs against CTI. ALERT on match.
  - question: Are any downloaded SVG files referencing anomalously rare domains that are seldom visited by the enterprise?
    context: Malicious actors often use newly registered or obscure domains to host payloads. By identifying SVG files that link to domains with very low request frequencies across the enterprise, we can uncover suspicious activity that might otherwise be missed. This statistical approach helps detect novel threats not yet present in CTI feeds.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek dns.log
      - Enterprise Web Proxy
      - Mail Gateway
      - Network Egress Points
      - Threat Intelligence Platform
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: AGGREGATE domain requests from http.log and dns.log for 30 days. FOR each domain in SVG file, CALCULATE request frequency. ALERT if frequency is in bottom 5th percentile.
  - question: Can a machine learning model, trained on features like script presence, URL reputation, and domain rarity, identify SVG files as likely malicious?
    context: This leverages machine learning to build a more nuanced and predictive detection capability. By combining multiple weak signals (features) into a single model, it can identify complex patterns indicative of malicious SVGs that are difficult to define with simple rules, adapting to evolving attacker techniques.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Mail Gateway
      - Network Egress Points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: EXTRACT features from SVG (script presence, URL reputation, domain rarity). INPUT features into trained ML model. ALERT if malicious probability > threshold.
  - question: Do any downloaded SVG files contain specific code patterns or strings (e.g., atob(), Blob(), URL.createObjectURL()) known to be used in JavaScript smuggling techniques?
    context: This question focuses on identifying the specific functions and code snippets that are hallmarks of JavaScript-based smuggling. Using YARA rules to find these patterns provides a precise method for detecting the core mechanism of the attack, even if other aspects like the payload or domain are new.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Cloud Application Security Broker (CASB)
      - User Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each SVG file content, SCAN with YARA ruleset for smuggling patterns (e.g., 'atob(', 'msSaveBlob'). ALERT on match.
  - question: Does the JavaScript within an SVG file exhibit an anomalous distribution of keywords compared to a baseline of benign SVGs?
    context: Malicious scripts often have a different statistical profile than benign ones. They may overuse functions related to obfuscation (eval, atob) or DOM manipulation. By comparing the keyword frequency of a script to a known-good baseline, we can flag statistical outliers that are likely malicious.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Cloud Application Security Broker (CASB)
      - User Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CALCULATE JS keyword frequency for script in SVG. COMPARE distribution to benign baseline using KL-divergence or percentile. ALERT on significant deviation.
  - question: Can a sequence-based machine learning model classify the JavaScript content within an SVG as malicious based on its code structure and syntax?
    context: This advanced approach moves beyond simple keywords to analyze the grammatical structure and flow of the code itself. By training a model on Abstract Syntax Trees (ASTs) or token sequences, it can learn to recognize the complex logic and sequences characteristic of malicious code, making it resilient to simple obfuscation.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Cloud Application Security Broker (CASB)
      - User Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CONVERT JS in SVG to AST or token sequence. INPUT sequence into trained RNN/LSTM model. ALERT if classified as malicious with high confidence.
  - question: Are there any SVG files that contain both a script tag and an embedded Base64-encoded data URI, potentially hiding an executable or another script?
    context: This is a very specific and high-confidence indicator of smuggling. Legitimate SVGs rarely embed large Base64 blobs, especially executables, inside a script tag. Detecting this combination and verifying the decoded content for file headers (like 'MZ' for Windows executables) is a strong signal of a malicious payload being smuggled.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Mail Gateway
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: DETECT SVGs with both '<script>' tag and 'data:' URI. DECODE Base64 content. SEARCH for executable file headers (e.g., 'MZ'). ALERT on match.
  - question: Does the script content within an SVG file have an anomalously high Shannon entropy value compared to the environmental baseline, suggesting obfuscation or encryption?
    context: High entropy is a classic indicator of packed or encrypted data. Malicious actors use this to hide their code from signature-based detection. By establishing a baseline for normal script entropy in your environment and alerting on significant deviations, you can detect potentially obfuscated malicious code.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Mail Gateway
      - File Servers
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: FOR each SVG with script, CALCULATE Shannon entropy of script content. COMPARE to 30-day rolling baseline. ALERT if entropy > 98th percentile.
  - question: Can an anomaly detection model identify malicious SVGs by scoring features related to obfuscation, such as file size, script length, entropy, and the presence of encoded strings?
    context: This question proposes using an unsupervised machine learning model to find outliers based on a set of features associated with obfuscation. An Isolation Forest is particularly good at this, as it doesn't require pre-labeled malicious examples and can effectively identify files that "don't look right" based on their structural and content properties.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Enterprise Web Proxy
      - Mail Gateway
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: EXTRACT features from SVG (size, script length, entropy, encoded strings). INPUT features to Isolation Forest model. ALERT if file is flagged as an anomaly.
  - question: Has a browser process spawned a script interpreter (like wscript.exe or powershell.exe) on an endpoint within five minutes of that same endpoint downloading an SVG file?
    context: This is a crucial correlation between network activity (the download) and endpoint behavior (the execution). A browser spawning a script host shortly after downloading an image file is highly anomalous and directly points to the successful execution of a smuggled payload. This provides strong evidence of a compromise.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - User Workstations
      - Active Directory Domain Controllers
      - Internal DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CORRELATE network and endpoint logs. ALERT if Host A downloads SVG at Time T, AND Host A's browser process spawns script host (wscript.exe, etc.) between T and T+5 minutes.
  - question: Following an SVG download, did the browser on that host spawn a child process that is rare or has never been seen before in its process creation history?
    context: This approach uses historical endpoint behavior to spot anomalies. Most users' browsers have a predictable set of child processes they might spawn. A new or statistically rare parent-child relationship (e.g., chrome.exe -> wscript.exe) appearing after an SVG download is a strong indicator that the SVG initiated an unusual and potentially malicious action.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - User Workstations
      - Active Directory Domain Controllers
      - Internal DNS Resolvers
      - Network Egress Points
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: MAINTAIN 30-day baseline of browser parent-child process relationships per host. AFTER SVG download on Host A, CHECK new browser child processes. ALERT if child process is 'first seen' or rare for that host.
  - question: Did an endpoint exhibit a statistically significant anomaly in its network activity or process creation rate within 10 minutes of downloading an SVG file?
    context: This question looks for the secondary effects of a successful compromise. After a payload is executed, it will often initiate C2 communication (spikes in network connections/DNS queries) or further local activity (spike in process creation). Correlating these anomalous spikes with a preceding SVG download can help detect the impact of the attack.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - User Workstations
      - Active Directory Domain Controllers
      - Internal DNS Resolvers
      - Network Egress Points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: MONITOR time-series data for network/process activity per host. ALERT if anomaly detected within 10 minutes after an SVG download on the same host.