name: T1217: Browser Information Discovery
id: 5a24683c-9ba3-4298-9255-3221c9705a67
description: This playbook helps investigate if an adversary is attempting to discover browser information on compromised hosts. This can manifest as the execution of known credential harvesting tools, scripting interpreters accessing sensitive browser file paths, unauthorized processes reading browser data files like cookie or login databases, a sequence of actions involving browser data access followed by staging and network exfiltration, or non-standard utilities accessing the memory of running browser processes.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known browser credential dumping tool been executed on any monitored host?
  context: This question aims to detect the most direct evidence of browser information discovery; the execution of a tool specifically designed for this purpose. Tools like LaZagne, WebBrowserPassView, or modules within Mimikatz are explicitly built to extract credentials, cookies, and history from browsers. An exact match from a trusted threat intelligence feed is a high-confidence indicator of compromise that requires immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Developer workstations
  - Administrative jump boxes
  - Critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (Sysmon_ID=1, WinEvent_ID=4688)
      WHERE process_hash IN (threat_intel_feed_of_browser_dumping_tools)
         OR process_name IN (threat_intel_feed_of_browser_dumping_tools)
      RETURN hostname, username, process_name, process_hash, timestamp
- question: Is a suspicious or uncommon process, with a name similar to known credential harvesting tools, running on a small number of hosts?
  context: Adversaries may rename or slightly modify common tools to evade simple signature-based detection. This question uses statistical analysis to find outliers. A process with a suspicious name (e.g., contains 'lazagne', 'passview') that is not widely deployed across the enterprise is a strong candidate for being a malicious tool, as it is neither standard software nor a common user-installed application.
  answer_sources:
  - Sysmon Event ID 1
  - User workstations
  - Developer workstations
  - Administrative jump boxes
  - Critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Calculate prevalence of all processes
      prevalence_table = SEARCH process_creation_events (Sysmon_ID=1)
                         | STATS unique_hosts by process_hash
                         | CALCULATE prevalence = (unique_hosts / total_hosts) * 100

      // Step 2: Find low-prevalence suspicious processes
      SEARCH process_creation_events (Sysmon_ID=1)
      WHERE process_name MATCHES ('*lazagne*', '*sharpweb*', '*passview*')
        AND process_hash IN (SELECT process_hash FROM prevalence_table WHERE prevalence < 1.0)
      RETURN hostname, username, process_name, process_hash, prevalence
- question: Can machine learning identify process execution events that are characteristic of malicious browser information discovery, even for unknown tools?
  context: This question leverages machine learning to build a predictive model that can generalize beyond known threats. By training on features like process name entropy (to detect randomness), parent-child process relationships, user context, and code signing status, the model can learn the subtle patterns of malicious executions and flag novel or heavily obfuscated tools that other methods might miss.
  answer_sources:
  - Sysmon Event ID 1
  - User workstations
  - Developer workstations
  - Administrative jump boxes
  - Critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a model application, not a simple query
      FOR each process_creation_event (Sysmon_ID=1):
        EXTRACT features (process_name_entropy, parent_process, user, is_signed)
        PREDICT classification using pre-trained_model(features)
        IF classification == 'suspicious':
          ALERT on event details
- question: Have any scripting interpreters or command-line utilities been executed with parameters that reference sensitive browser file paths or databases?
  context: Adversaries often use built-in tools ('living off the land') like PowerShell, cmd, or even database utilities like sqlite3.exe to interact with browser data without dropping a custom binary. This question looks for command-line evidence of these tools being directed to access specific, sensitive browser files (e.g., 'Login Data', 'cookies.sqlite') or their containing folders.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Developer workstations
  - Administrative jump boxes
  - Critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (Sysmon_ID=1, WinEvent_ID=4688)
      WHERE process_name IN ('powershell.exe', 'cmd.exe', 'cscript.exe', 'sqlite3.exe', 'esentutl.exe')
        AND command_line MATCHES ('*Login Data*', '*cookies.sqlite*', '*key4.db*', '*AppData\\Local\\Google\\Chrome*', '*AppData\\Roaming\\Mozilla\\Firefox*')
      RETURN hostname, username, process_name, command_line, timestamp
- question: Are there any scripting interpreter executions with unusually long or complex (high entropy) command lines, or that reference browser paths rarely accessed by that user or host?
  context: This question aims to find obfuscated commands. Adversaries may use encoding (like Base64) or complex scripting to hide their actions, which often results in command lines that are statistically different from normal administrative commandsâ€”either much longer or more random-looking (higher entropy). It also flags behavior that is anomalous for a specific user or host, such as accessing a browser file path for the first time.
  answer_sources:
  - Sysmon Event ID 1
  - User workstations
  - Developer workstations
  - Administrative jump boxes
  - Critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (Sysmon_ID=1)
      WHERE process_name IN ('powershell.exe', 'cmd.exe')
      CALCULATE command_line_entropy, command_line_length
      COMPARE with historical_baseline for user/host
      IF command_line_entropy > 95th_percentile OR command_line_length > 95th_percentile:
        ALERT on event details
- question: Can an NLP model classify command lines and identify those semantically related to malicious browser data discovery?
  context: Command lines can be viewed as a form of language. This question applies Natural Language Processing (NLP) to understand the intent of a command, not just its keywords. A fine-tuned model can differentiate between a sysadmin legitimately querying a database and an attacker using similar commands to steal browser data, by learning the broader context and structure of malicious vs. benign command-line patterns.
  answer_sources:
  - Sysmon Event ID 1
  - User workstations
  - Developer workstations
  - Administrative jump boxes
  - Critical servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a model application, not a simple query
      FOR each process_creation_event (Sysmon_ID=1):
        EXTRACT command_line
        PREDICT classification using pre-trained_NLP_model(command_line)
        IF classification == 'malicious discovery':
          ALERT on event details
- question: Has any process not on the approved allowlist (e.g., not a web browser) attempted to read sensitive browser data files?
  context: This question focuses on file system auditing to directly monitor access to critical browser files. By defining what's normal (the browser itself, security tools) and creating an allowlist, any other process attempting to read these files (e.g., 'Login Data', 'cookies.sqlite') is immediately suspicious. This requires enabling specific audit policies (SACLs) on the target files and directories.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - Default user profile directories on endpoints and servers (e.g., C:\Users\<username>\AppData\)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      allowlist = ['chrome.exe', 'firefox.exe', 'msedge.exe', 'approved_av.exe']
      sensitive_files = ['*Login Data*', '*cookies.sqlite*', '*places.sqlite*']

      SEARCH file_access_events (WinEvent_ID=4663, Sysmon_ID=11)
      WHERE target_file IN sensitive_files
        AND access_type IN ('ReadData', 'read')
        AND process_name NOT IN allowlist
      RETURN hostname, username, process_name, target_file, timestamp
- question: Has there been an anomalous frequency of access to browser data files, or access from a process that rarely interacts with them?
  context: Instead of a rigid allowlist, this question uses baselining to detect unusual behavior. It learns which processes typically access browser files on each host and how often. An alert is triggered if a process like powershell.exe suddenly accesses these files, or if a legitimate process like chrome.exe starts reading them at a rate that is statistically abnormal (e.g., many standard deviations above its average), which could indicate process injection.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - Default user profile directories on endpoints and servers (e.g., C:\Users\<username>\AppData\)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Establish baseline of process access to browser files
      baseline = SEARCH file_access_events
                 | STATS hourly_avg_access, std_dev by process_name, hostname

      // Step 2: Detect anomalies
      SEARCH file_access_events
      WHERE target_file IN sensitive_browser_files
      COMPARE current_hourly_rate with baseline
      IF current_hourly_rate > (hourly_avg_access + 3 * std_dev):
        ALERT on anomalous access
- question: Can an unsupervised machine learning model detect anomalous access to browser data files without pre-existing labels or rules?
  context: This question applies unsupervised learning, which excels at finding 'unknown unknowns'. The model (e.g., Isolation Forest) is trained on a vast amount of file access data and learns the complex characteristics of normal behavior, considering features like process, parent process, user, and time of day. It can then flag any event that doesn't fit this learned pattern, identifying novel attack techniques without needing explicit rules or signatures.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - Default user profile directories on endpoints and servers (e.g., C:\Users\<username>\AppData\)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a model application, not a simple query
      FOR each file_access_event to browser_data_files:
        EXTRACT features (process, parent_process, user, time_of_day)
        PREDICT anomaly_score using pre-trained_IsolationForest_model(features)
        IF anomaly_score is high:
          ALERT on event details
- question: Has a host exhibited the attack chain of reading browser data, creating a staging file, and then making an outbound network connection in a short time frame?
  context: This question looks for a common adversary TTP (Tactic, Technique, and Procedure) chain. Individual events might not be suspicious, but their sequence is. This rule correlates multiple data sources (file access, file creation, network logs) to detect the logical flow of an attack; steal the data (read browser file), package it (create zip/rar in a temp folder), and send it out (outbound connection).
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Zeek conn.log
  - User workstations
  - Temporary file directories (e.g., %TEMP%, C:\Users\Public)
  - Network egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN (
        SEARCH file_read_events (WinEvent_ID=4663) WHERE target_file IN browser_files
      ) as event1
      WITH (
        SEARCH file_create_events (Sysmon_ID=11) WHERE target_directory IN staging_dirs
      ) as event2 ON (event1.hostname = event2.hostname AND event1.process_id = event2.process_id)
      WITH (
        SEARCH network_events (Sysmon_ID=3, Zeek) WHERE direction = 'outbound'
      ) as event3 ON (event2.hostname = event3.hostname)
      WHERE (event3.timestamp - event1.timestamp) < 5_minutes
      ALERT on correlated event chain
- question: Following an access to browser data files, did the host initiate a network connection with an unusually large amount of outbound data?
  context: This question uses statistical correlation to link browser data access to potential data exfiltration. While a connection itself isn't proof, a connection that transfers a volume of data significantly larger than that host's normal baseline, especially to a low-reputation or new IP address, strongly suggests that the recently accessed data is being stolen.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Zeek conn.log
  - User workstations
  - Temporary file directories (e.g., %TEMP%, C:\Users\Public)
  - Network egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRIGGER on file_read_event for browser_file
      MONITOR network_logs from same host for next 10 minutes
      FOR each outbound_connection:
        IF outbound_bytes > 99th_percentile_baseline_for_host:
          ALERT on potential exfiltration (file read + large upload)
- question: Can a sequence analysis model identify the specific chain of events corresponding to browser data theft and exfiltration as an anomalous sequence?
  context: This question employs advanced machine learning to understand the 'grammar' of system events. Models like LSTMs or HMMs are trained on countless sequences of benign events (file reads, network connections, process creations). They learn what normal 'sentences' of activity look like. The specific sequence of 'read browser file -> create temp file -> outbound connection' will appear as a grammatical error or an anomalous sentence, allowing the model to flag it as suspicious even if the individual events seem benign.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 11
  - Zeek conn.log
  - User workstations
  - Temporary file directories (e.g., %TEMP%, C:\Users\Public)
  - Network egress points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a model application, not a simple query
      STREAM events (file_access, file_create, network_conn) for each host into sequence_model
      MODEL learns normal event sequences
      IF incoming_sequence [read_browser_file, create_stage_file, outbound_conn] has high anomaly_score:
        ALERT on anomalous event sequence
- question: Has any unapproved process attempted to read the memory of a running web browser process?
  context: This question targets in-memory credential theft, a technique used by tools like Mimikatz. Instead of reading files from disk, the adversary accesses the browser's memory directly to steal credentials, session tokens, and other sensitive data. Monitoring for process access events (Sysmon Event ID 10) and filtering for unapproved source processes requesting read access (PROCESS_VM_READ) to a browser process is a direct way to detect this.
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4688
  - Process memory space of web browsers on user workstations and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      allowlist = ['WerFault.exe', 'approved_debugger.exe']
      browsers = ['chrome.exe', 'msedge.exe', 'firefox.exe']

      SEARCH process_access_events (Sysmon_ID=10)
      WHERE TargetImage IN browsers
        AND SourceImage NOT IN allowlist
        AND GrantedAccess CONTAINS '0x1000' // PROCESS_VM_READ
      RETURN hostname, SourceImage, TargetImage, GrantedAccess, timestamp
- question: Have there been a statistically unusual number of memory access attempts against a browser process, especially from an uncommon source process?
  context: Some legitimate tools might occasionally need to access a browser's memory, creating noise for a purely symbolic rule. This question uses statistics to find the signal in that noise. It baselines normal process access activity for each host. An alert is raised if an unusual process (like powershell.exe) starts making these requests, or if any process makes them with a frequency that is statistically significant, suggesting an automated or repeated attempt to scrape memory.
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4688
  - Process memory space of web browsers on user workstations and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_access_events (Sysmon_ID=10)
      WHERE TargetImage IN browsers
      STATS count by SourceImage, hostname over 5_minute_windows
      COMPARE with historical_baseline
      IF count > threshold (e.g., > 2):
        ALERT on frequent memory access
- question: Can a machine learning model distinguish between benign and malicious attempts to access a browser's process memory?
  context: This question uses supervised machine learning to add context and intelligence to the analysis of process access events. By training a model on labeled examples of both good (e.g., crash dumps, legitimate debugging) and bad (e.g., credential theft) memory access, the model can learn the nuanced patterns that differentiate them. This allows for more accurate alerting, reducing false positives from legitimate system activities.
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4688
  - Process memory space of web browsers on user workstations and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // This is a model application, not a simple query
      FOR each process_access_event (Sysmon_ID=10):
        EXTRACT features (SourceImage, TargetImage, GrantedAccess, user, parent_process)
        PREDICT classification using pre-trained_model(features)
        IF classification == 'malicious' with high_confidence:
          ALERT on event details