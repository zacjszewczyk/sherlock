name: T1046: Network Service Discovery
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the information requirement, "Is the adversary attempting to discover network services on the enterprise network?". It provides investigative questions and queries to detect network service discovery (T1046) through various means. This includes identifying network traffic artifacts like specific User-Agent strings or protocol anomalies from scanning tools; detecting the execution of scanner processes or native utilities with scanning-related command-line arguments on hosts; recognizing network patterns characteristic of horizontal (network) scans and vertical (port) scans; and flagging when a specific process initiates network traffic inconsistent with its established historical behavior.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any network connections using User-Agent strings associated with known scanning tools?
    context: This question seeks to identify overt network scanning activity by looking for specific fingerprints left by common scanning tools like Nmap or masscan in HTTP traffic. Detecting these User-Agent strings is a high-confidence indicator that a scanning tool was used against a web server.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek weird.log
      - Network egress points
      - Internal network segments (East-West traffic)
      - Server subnets
      - DMZ
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek http.log WHERE user_agent IN (scanner_watchlist) | ALERT
  - question: Is any single source IP generating an anomalous number of scanner-related network events?
    context: This question aims to detect network scanning by identifying hosts that produce an unusually high volume of protocol anomalies, such as TCP Christmas scans. By baselining normal network behavior and alerting on deviations, this approach can uncover scanning activities that might not use obvious signatures but still violate protocol norms.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek weird.log
      - Network egress points
      - Internal network segments (East-West traffic)
      - Server subnets
      - DMZ
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek weird.log | AGGREGATE count by source_ip, event_type | COMPARE count to baseline | ALERT if count > 99th_percentile
  - question: Can machine learning classify network flows as scanning activity in real-time?
    context: This question explores using a Random Forest classifier to proactively identify network scanning. By training a model on features like protocol, duration, and TCP flags from connection logs, we can automate the detection of both known and unknown scanning techniques that would be difficult to define with static rules.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek weird.log
      - Network egress points
      - Internal network segments (East-West traffic)
      - Server subnets
      - DMZ
    range: last 90 days
    queries:
      - language: pseudocode
        query: STREAM Zeek conn.log | APPLY ML_model(RandomForest) on (protocol, duration, service, flags) | ALERT if classification == 'scan'
  - question: Are processes being executed that correspond to known scanning tools or native utilities used for scanning?
    context: This question focuses on detecting network discovery at the host level by monitoring for the execution of scanning tools (e.g., 'nmap.exe') or the use of legitimate system utilities (e.g., 'Test-NetConnection') with parameters indicative of scanning. This provides direct evidence of an adversary's intent to map the network from a compromised host.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Member Servers
      - Critical Workstations
      - Jump Boxes
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN (scanner_watchlist) OR command_line MATCHES (scanning_regex) | ALERT
  - question: Are there any command-line executions with anomalously high entropy, suggesting obfuscated or complex scanning commands?
    context: This question attempts to find sophisticated or obfuscated scanning commands by analyzing the complexity (Shannon entropy) of command-line arguments. Adversaries may use complex, randomized, or encoded commands to evade simple signature-based detection. A sudden spike in entropy for a common utility like 'powershell.exe' on a host can indicate such malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Member Servers
      - Critical Workstations
      - Jump Boxes
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_logs | CALCULATE entropy of command_line | COMPARE entropy to baseline for host/process | ALERT if entropy > (mean + 3*std_dev)
  - question: Can an NLP model identify command-line arguments that are indicative of network discovery?
    context: This question proposes using a Natural Language Processing (NLP) model to understand the semantic intent of command-line arguments. By training a model to recognize patterns associated with discovery, it can identify novel or unusual variations of scanning commands that might be missed by regex or entropy analysis, providing a more robust detection method.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Member Servers
      - Critical Workstations
      - Jump Boxes
    range: last 90 days
    queries:
      - language: pseudocode
        query: STREAM process_creation_logs | APPLY NLP_model on command_line | ALERT if classification == 'discovery' AND confidence > threshold
  - question: Is a single host connecting to an unusually large number of other hosts on a specific port, indicating a horizontal scan?
    context: This question is designed to detect horizontal (or network) scans, where an attacker searches for a specific open port (e.g., 445 for SMB, 3389 for RDP) across many different hosts in a network. This is a common reconnaissance technique for finding vulnerable services and planning lateral movement. The query sets a simple threshold for alerting.
    answer_sources:
      - Zeek conn.log
      - Internal network segments
      - Cloud VPCs
      - VPN client subnets
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek conn.log in 5min_window | AGGREGATE unique_destination_ips by source_ip, destination_port | ALERT if unique_destination_ips > 50
  - question: Is any host exhibiting an anomalously high 'fan-out' of network connections compared to a historical baseline?
    context: This question provides a more dynamic way to detect horizontal scans by baselining the normal 'fan-out' (count of unique destination IPs) for each source. Instead of a fixed threshold, it alerts when a host's connection behavior significantly deviates from its own established norm, reducing false positives and adapting to different roles of hosts in the network.
    answer_sources:
      - Zeek conn.log
      - Internal network segments
      - Cloud VPCs
      - VPN client subnets
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek conn.log in 10min_window | CALCULATE fan_out_metric (unique_dest_ip_count) per source_ip | COMPARE to historical distribution | ALERT if fan_out > 98th_percentile
  - question: Can clustering algorithms identify hosts performing horizontal scans by treating them as outliers in network connection data?
    context: This question uses an unsupervised machine learning approach (DBSCAN) to find scanning behavior. The premise is that normal network traffic forms dense, predictable clusters, while scanning activity—a single host connecting to many disparate hosts—will not fit into these clusters and will be identified as noise or outliers. This can detect slow or unusual scan patterns that other methods might miss.
    answer_sources:
      - Zeek conn.log
      - Internal network segments
      - Cloud VPCs
      - VPN client subnets
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek conn.log in time_window | APPLY DBSCAN_clustering on (source_ip, dest_ip_count, dest_port_count) | ALERT on noise_points (outliers)
  - question: Is a single host connecting to an abnormally high number of ports on another single host, indicating a vertical scan?
    context: This question aims to detect vertical (or port) scans, where an attacker probes a single target host for a wide range of open ports to fingerprint its services. This is a classic reconnaissance technique to understand a target's attack surface. The query uses a fixed threshold to identify this behavior.
    answer_sources:
      - Zeek conn.log
      - Critical asset subnets (e.g., database servers, application servers)
      - Domain Controllers
      - Internet-facing servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek conn.log in 5min_window | AGGREGATE unique_destination_ports by source_ip, destination_ip | ALERT if unique_destination_ports > 100
  - question: Is a source-destination IP pair showing anomalously high entropy in destination port numbers, suggesting a non-sequential port scan?
    context: This question looks for port scans by measuring the randomness (Shannon entropy) of the destination ports being contacted. While a sequential scan (1, 2, 3...) has low entropy, a randomized scan (80, 443, 8080...) has high entropy. Alerting on high entropy can detect more advanced scanning tools that try to evade simple sequential detection.
    answer_sources:
      - Zeek conn.log
      - Critical asset subnets (e.g., database servers, application servers)
      - Domain Controllers
      - Internet-facing servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH Zeek conn.log in 10min_window | CALCULATE Shannon_entropy of destination_ports per source/dest_pair | COMPARE to baseline | ALERT if entropy > 99th_percentile
  - question: Can a time-series model detect anomalies in the rate of new connections between a source and destination, indicating a potential port scan?
    context: This question applies time-series forecasting (like ARIMA) to network connection counts. The model learns the normal rhythm of connections between two hosts. A port scan will cause a sudden, unexpected spike in connection counts, which the model will flag as a large residual error (a significant deviation from the forecast), triggering an alert.
    answer_sources:
      - Zeek conn.log
      - Critical asset subnets (e.g., database servers, application servers)
      - Domain Controllers
      - Internet-facing servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: MODEL connection_count_per_minute as time_series (ARIMA) for each source/dest_pair | PREDICT next_minute_count | ALERT if (actual_count - predicted_count) > threshold
  - question: Are typically non-network-intensive processes, like 'winword.exe', making an unusually high number of network connections?
    context: This question aims to detect when a legitimate, common process (like Microsoft Word or Adobe Reader) is compromised or used as a host for malicious code that performs network scanning. By creating a watchlist of such applications and alerting when they exhibit unexpected network activity (e.g., many outbound connections), we can identify process injection or macro-based attacks.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Application servers
      - any host where process and network telemetry can be correlated
    range: last 90 days
    queries:
      - language: pseudocode
        query: JOIN process_logs and network_logs | FILTER process_name IN (non_network_app_watchlist) | AGGREGATE connection_count in 1min_window | ALERT if connection_count > 20
  - question: Is a specific process exhibiting network behavior that deviates significantly from its own historical baseline on a given host?
    context: This question focuses on dynamic, per-process baselining. Instead of a static rule, it learns what is normal for 'svchost.exe' on Server A versus 'svchost.exe' on Workstation B. An alert is generated when a process's network activity (e.g., number of unique IPs contacted) deviates significantly from its established norm, indicating a potential compromise or misuse of that process.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Application servers
      - any host where process and network telemetry can be correlated
    range: last 90 days
    queries:
      - language: pseudocode
        query: BASELINE network_behavior (e.g., unique_dest_ips_per_hour) for each process/host | COMPARE current_behavior to baseline | ALERT if deviation > 3*std_dev
  - question: Can an anomaly detection algorithm like Isolation Forest identify suspicious network connections originating from unusual processes?
    context: This question leverages an unsupervised anomaly detection model (Isolation Forest) to score every network connection event based on its context (process name, parent process, destination, etc.). The model learns to isolate anomalous events that differ from the majority of normal activities. This is effective for finding rare and unexpected behaviors, such as a notepad.exe process connecting to a suspicious IP on a non-standard port.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Application servers
      - any host where process and network telemetry can be correlated
    range: last 90 days
    queries:
      - language: pseudocode
        query: STREAM network_connection_events | CREATE feature_vector (process, parent, dest_ip, dest_port) | APPLY IsolationForest model | ALERT on high anomaly_score