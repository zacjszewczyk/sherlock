name: T1046: Network Service Discovery
id: 5a9b8c7d-6e5f-4a3b-2c1d-0e9f8a7b6c5d
description: Investigates whether an adversary is attempting to discover network services on the enterprise network. This involves looking for network traffic artifacts from scanning tools (like specific User-Agents or protocol anomalies), process creation events for known scanning tools or native utilities used for scanning, and anomalous network connection patterns such as horizontal (one source to many hosts on one port) or vertical (one source to one host on many ports) scans. It also checks for unusual network behavior from processes that typically do not perform network-intensive activities.
type: technique
related:
- TA0007: Discovery
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Is there any HTTP traffic containing User-Agent strings associated with known network scanning tools?
  context: Adversaries often use automated scanning tools like Nmap or masscan. These tools frequently leave a distinct footprint in the User-Agent string of their HTTP requests. By monitoring for these specific strings, an analyst can quickly identify the use of common scanning tools on the network, which is a strong indicator of a reconnaissance phase.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Zeek weird.log
  - Network egress points
  - Internal network segments (East-West traffic)
  - Server subnets
  - DMZ
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek http.log
      WHERE user_agent IN (scanner_watchlist)
      RETURN source_ip, destination_ip, user_agent, timestamp
- question: Are any source IPs generating an anomalous number of scanner-related network events, such as TCP Christmas scans?
  context: Certain scanning techniques manipulate TCP flags in ways that violate standard protocol behavior (e.g., FIN, PSH, and URG flags set simultaneously in a 'Christmas tree' scan). Network monitoring tools like Zeek can detect and log these anomalies as 'weird' events. A sudden spike in these events from a single source IP strongly suggests a deliberate, non-standard network scan is underway, which requires immediate investigation.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Zeek weird.log
  - Network egress points
  - Internal network segments (East-West traffic)
  - Server subnets
  - DMZ
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek weird.log
      WHERE event_type IN (scanner_event_types)
      AGGREGATE count by source_ip over 24h
      ALERT if count > baseline_threshold
- question: Can machine learning models identify network flows that are characteristic of scanning activity based on connection logs?
  context: Beyond simple rules, machine learning can identify subtle, complex patterns indicative of scanning. By training a classifier on features like protocol, duration, service, and TCP flags from connection logs, analysts can build a sophisticated detection mechanism. This approach helps find novel or obfuscated scanning techniques that might evade signature-based or simple threshold-based rules.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Zeek weird.log
  - Network egress points
  - Internal network segments (East-West traffic)
  - Server subnets
  - DMZ
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT Zeek conn.log data
      APPLY Random Forest model
      CLASSIFY flow as 'benign' or 'scan'
      ALERT if 'scan'
- question: Has a process been executed with a name or command-line argument that indicates the use of a network scanning tool?
  context: The most direct evidence of scanning is the execution of a known scanning tool (e.g., 'nmap.exe') or the use of built-in utilities (e.g., PowerShell's 'Test-NetConnection') with parameters that facilitate network discovery. Monitoring process creation events (like Windows Event ID 4688 or Sysmon Event ID 1) for these specific executables and command-line patterns provides high-fidelity alerts for reconnaissance activity on an endpoint.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  - Jump Boxes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation logs
      WHERE process_name IN (scanner_watchlist)
      OR command_line MATCHES (scanner_regex)
      RETURN hostname, process_name, command_line, timestamp
- question: Are legitimate system utilities like 'powershell.exe' or 'cmd.exe' being executed with unusually complex or random-looking command-line arguments?
  context: Adversaries often use obfuscated or complex command-line arguments to hide their activity when using native utilities for scanning. These complex commands can have a higher Shannon entropy (a measure of randomness) than typical administrative commands. By baselining the normal command-line entropy for utilities on a host and alerting on significant deviations, analysts can detect this obfuscation tactic.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  - Jump Boxes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new process event
      CALCULATE entropy of command_line
      COMPARE entropy to historical baseline for that host/utility
      ALERT if entropy > (mean + 3*std_dev)
- question: Can a machine learning model classify command-line arguments in real-time to detect their use for network discovery?
  context: Advanced adversaries may construct novel command-line arguments to evade simple regex or keyword matching. An NLP model trained to understand the structure and intent of command lines can identify discovery-related activity with greater accuracy. This provides a more resilient detection method against evolving adversary tradecraft.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  - Jump Boxes
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT new process command_line
      APPLY NLP classification model
      ALERT if classification is 'discovery' with high confidence
- question: Is any single host attempting to connect to an unusually high number of other hosts on the same port in a short time frame?
  context: This behavior, known as a horizontal scan, is a classic indicator of an adversary trying to find a specific open service (e.g., SSH on port 22, RDP on port 3389) across a wide range of hosts in the network. A simple threshold rule, such as one source IP connecting to over 50 unique destinations on one port within 5 minutes, is an effective way to detect this widespread reconnaissance.
  answer_sources:
  - Zeek conn.log
  - Internal network segments
  - Cloud VPCs
  - VPN client subnets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek conn.log
      AGGREGATE unique_destination_ips by source_ip, destination_port over 5m
      ALERT if unique_destination_ips > 50
- question: Is any host exhibiting a 'fan-out' network behavior that significantly deviates from the established network-wide baseline?
  context: Instead of a fixed threshold, a more dynamic approach is to compare a host's connection 'fan-out' (the number of unique destinations it connects to) against a historical baseline for the entire network. This statistical method adapts to normal fluctuations in network traffic and is more effective at identifying true anomalies, reducing false positives that might be caused by legitimate services like patch management servers.
  answer_sources:
  - Zeek conn.log
  - Internal network segments
  - Cloud VPCs
  - VPN client subnets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE fan-out (unique destination IPs per source IP) over 10m
      COMPARE fan-out to network-wide historical distribution
      ALERT if fan-out > 98th_percentile
- question: Can clustering algorithms identify hosts performing horizontal scans by flagging them as outliers in network connection data?
  context: Density-based clustering algorithms like DBSCAN can group 'normal' network traffic into dense clusters. Scanning activity, which is inherently different from normal user or server behavior, will not fit into these clusters and will be identified as noise or outliers. This unsupervised machine learning approach is powerful for discovering previously unknown scanning patterns without a need for pre-defined signatures.
  answer_sources:
  - Zeek conn.log
  - Internal network segments
  - Cloud VPCs
  - VPN client subnets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT connection data (source_ip, dest_ip_count, dest_port_count)
      APPLY DBSCAN clustering algorithm
      ALERT on points classified as noise/outliers
- question: Is any single host attempting to connect to a large number of different ports on another single host in a short time frame?
  context: This behavior, known as a vertical scan or port scan, indicates an adversary is probing a single target machine to discover all of its open services. A simple threshold, such as a source connecting to over 100 unique ports on a single destination within 5 minutes, is a straightforward and effective method for detecting this focused reconnaissance against a high-value asset.
  answer_sources:
  - Zeek conn.log
  - Critical asset subnets (e.g., database servers, application servers)
  - Domain Controllers
  - Internet-facing servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek conn.log
      AGGREGATE unique_destination_ports by source_ip, destination_ip over 5m
      ALERT if unique_destination_ports > 100
- question: Is a host connecting to ports on a target in a random or non-sequential pattern, as indicated by high entropy?
  context: Sophisticated scanners often randomize or shuffle the order of ports they scan to evade simple sequential detection. Calculating the Shannon entropy of the destination port numbers can defeat this. A high entropy score indicates a wide, non-sequential scan, whereas normal traffic or a sequential scan would have low entropy. Alerting on high port entropy for a source-destination pair can reveal these advanced scanning techniques.
  answer_sources:
  - Zeek conn.log
  - Critical asset subnets (e.g., database servers, application servers)
  - Domain Controllers
  - Internet-facing servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source-destination pair over 10m
      CALCULATE Shannon entropy of destination ports
      COMPARE to historical baseline
      ALERT if entropy > 99th_percentile
- question: Is there an anomalous spike in the rate of new connections between a source and destination, based on time-series forecasting?
  context: Time-series analysis can model the expected 'heartbeat' of connections between two hosts. A sudden burst of connection attempts, characteristic of a port scan, will cause a significant deviation from the forecast. By using a model like ARIMA to predict the normal connection rate and alerting on large residual errors (the difference between predicted and actual), analysts can detect scanning activity that manifests as a sudden change in connection frequency.
  answer_sources:
  - Zeek conn.log
  - Critical asset subnets (e.g., database servers, application servers)
  - Domain Controllers
  - Internet-facing servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL connection count per minute as time series (ARIMA)
      PREDICT expected connection count
      CALCULATE residual error (actual - predicted)
      ALERT if residual_error > threshold
- question: Is a typically non-network-intensive process, such as 'winword.exe' or 'notepad.exe', making an unusually large number of outbound network connections?
  context: Adversaries may inject code into or spawn legitimate processes to carry out malicious network activity, a technique used to blend in and evade defenses. A process like Microsoft Word or Notepad has no legitimate reason to make dozens of network connections in a minute. By correlating process and network logs and alerting when these 'quiet' applications exhibit network-scanning behavior, analysts can uncover this stealthy form of reconnaissance.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Application servers
  - any host where process and network telemetry can be correlated
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN process logs and network logs
      WHERE process_name IN (non_network_app_watchlist)
      AGGREGATE connection_count by process over 1m
      ALERT if connection_count > 20
- question: Is any process exhibiting network behavior that deviates significantly from its own established historical baseline on a specific host?
  context: Every process has a characteristic network 'fingerprint'. By creating a specific baseline for each process on each host (e.g., average number of unique IPs contacted per hour), analysts can perform highly contextual anomaly detection. An alert is triggered only when a process, like 'svchost.exe', suddenly starts behaving differently from its own normal past behavior, which is a strong indicator of compromise or misuse.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Application servers
  - any host where process and network telemetry can be correlated
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process event
      COMPARE hourly network behavior (e.g., unique dest IPs) to its historical baseline
      ALERT if deviation > 3 standard deviations
- question: Can an unsupervised machine learning model, like Isolation Forest, identify anomalous process-related network connections?
  context: Isolation Forest is an efficient algorithm for identifying anomalies by 'isolating' outliers. By feeding it features from process and network events (e.g., process name, parent process, destination IP/port), it can learn what 'normal' process network activity looks like and assign high anomaly scores to events that do not fit. This is particularly effective for finding novel attacks where a process is hijacked to perform unusual network actions.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Application servers
  - any host where process and network telemetry can be correlated
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE feature vector (process_name, parent_process, dest_ip, dest_port)
      APPLY Isolation Forest model to score event
      ALERT on events with high anomaly scores