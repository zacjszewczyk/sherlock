name: T1497.001: System Checks
id: e1f8a2b1-5c3d-4e6f-8a9b-0c1d2e3f4a5b
description: This playbook helps investigate whether an adversary is performing system
  checks to discover the execution environment, often with the goal of evading defenses
  like sandboxes or virtual machines. This involves looking for processes that execute
  commands with specific strings known to be used for sandbox detection (e.g., querying
  VMware MAC addresses), rapidly access multiple distinct VM-related files or registry
  keys, or exhibit behavior patterns like executing checks and quickly terminating
  without network activity. The playbook also covers hunting for connections to known
  VM host-guest communication channels, the execution of common discovery tools (e.g.,
  Seatbelt, Pafish), an unusually high number of WMI or PowerShell queries from a
  new process, and attempts to access files with names related to security analysis
  tools (e.g., 'procmon', 'sandbox').
type: technique
related:
- TA0005: Defense Evasion
- TA0007: Discovery
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are processes being executed with command-line arguments or script content
    known to be used for sandbox or VM detection?
  context: Adversaries often use well-known commands and scripts to check for specific
    artifacts of virtualization, such as VMware MAC address prefixes or specific WMI
    classes that only exist in sandboxes. This question aims to find these high-confidence
    indicators by matching command lines and script blocks against a watchlist of
    known bad strings.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source IN (win_event_4688, win_event_4104) | search command_line OR script_block
      MATCHES (vm_detection_watchlist)
- question: Are PowerShell scripts exhibiting unusually high entropy, suggesting the
    use of obfuscation to hide evasion logic?
  context: To avoid simple string-based detection, attackers may obfuscate the PowerShell
    scripts used for system checks. Obfuscated code often has a higher Shannon entropy
    (a measure of randomness) than normal code. This question seeks to identify such
    scripts by flagging those with statistically significant high entropy compared
    to a baseline of normal activity.
  answer_sources:
  - Windows Event ID 4104
  - All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source=win_event_4104 | calculate entropy(script_block) as script_entropy
      | where script_entropy > baseline_99th_percentile
- question: Are common system utilities (like wmic.exe, reg.exe) being executed with
    anomalous command-line arguments that deviate from established baselines?
  context: While utilities like `wmic.exe` are used for legitimate administration,
    adversaries use them with specific arguments to probe for sandbox artifacts. A
    machine learning model trained on legitimate command-line usage can detect these
    malicious invocations as statistical outliers, even if the specific strings are
    not on a watchlist.
  answer_sources:
  - Windows Event ID 4688
  - All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source=win_event_4688 | score command_line with outlier_detection_model
      | where anomaly_score > threshold
- question: Is a single process rapidly accessing multiple distinct files, registry
    keys, or services known to be indicative of a virtualized environment?
  context: Evasive malware often performs a series of checks in quick succession
    to build a profile of its environment. This question looks for a single process
    (tracked by its GUID) that accesses three or more known VM-specific artifacts
    (like VBoxGuest.sys or vmtoolsd service) within a short time window, which is
    a strong indicator of a coordinated discovery effort.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Event ID 4656
  - Windows Event ID 7036
  - All corporate endpoints, especially developer workstations and security analysis
    sandbox systems.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: 'sources IN (4663, 4656, 7036) | filter object_name IN vm_artifact_watchlist
      | stats distinct_count(object_name) as unique_artifacts by process_guid, time_window(60s)
      | where unique_artifacts >= 3'
- question: Is any process accessing known VM-related artifacts at a rate that significantly
    exceeds the environmental baseline?
  context: While an occasional access to a VM-related artifact might be benign, a
    process that probes many of them is suspicious. This question aims to find outliers
    by counting the number of VM artifact accesses per process per minute and alerting
    when that count exceeds a high percentile (e.g., 99.9th) of what is normally observed
    across the environment.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4656
  - Windows Event ID 7036
  - All corporate endpoints, especially developer workstations and security analysis
    sandbox systems.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: 'sources IN (4663, 4656, 7036) | filter object_name IN vm_artifact_watchlist
      | stats count by process_guid, time_window(1m) | where count > baseline_99.9th_percentile'
- question: Can process and artifact access events be clustered to identify a single
    process making a dense, coordinated set of queries for VM-related artifacts?
  context: Normal system activity involves many processes accessing a wide variety
    of system resources. A malicious discovery process, however, creates a very specific
    pattern: one process accessing many VM-related artifacts. This question uses graph-based
    analysis to find these small, dense clusters of activity that stand out from the
    sparse, normal access patterns.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Event ID 4656
  - Windows Event ID 7036
  - All corporate endpoints, especially developer workstations and security analysis
    sandbox systems.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: build graph of process-to-artifact_access events | run clustering algorithm
      | find small, dense clusters with one process and many VM_artifact nodes
- question: Has a process, originating from a user-writable directory, performed a
    system check, terminated quickly, generated no network traffic, and had its source
    executable deleted?
  context: This sequence of events is highly indicative of an evasive payload. It
    runs, checks if it's in a sandbox, decides to abort its mission if it is, and
    then cleans up after itself to avoid analysis. This question uses a stateful correlation
    rule to detect this specific, high-confidence attack pattern.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Windows Event ID 4663
  - Zeek conn.log
  - User workstations, particularly for phishing targets, and internet-facing servers.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: correlate events where (process_created from temp_dir) -> (process_performs_vm_check)
      -> (process_terminated in <2min) -> (no outbound_network_traffic) -> (source_executable_deleted)
- question: Are there processes with short lifespans exhibiting an anomalously high
    ratio of system interaction events to network connection events?
  context: Normal programs typically perform some system setup and then engage in
    network activity. An evasive tool that only performs checks and then exits will
    have many system interactions (file/registry queries) but little to no network
    traffic. This question seeks to find these outliers by calculating this ratio
    and flagging processes with an abnormally high score.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Windows Event ID 4663
  - Zeek conn.log
  - User workstations, particularly for phishing targets, and internet-facing servers.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: for processes with lifetime < 5min | calculate (system_queries / (network_connections
      + 1)) as ratio | where ratio > baseline_99.5th_percentile
- question: Are process event sequences deviating from normal, learned models by performing
    system checks but failing to transition to an expected network activity state
    before terminating?
  context: Process behavior can be modeled as a sequence of states (e.g., Create,
    Read File, Network Activity, Terminate). A machine learning model can learn these
    normal sequences. This question uses such a model to detect when a process follows
    an anomalous path, such as performing discovery actions but then terminating without
    ever entering the expected 'Network Activity' state.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4689
  - Windows Event ID 4663
  - Zeek conn.log
  - User workstations, particularly for phishing targets, and internet-facing servers.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: stream process_event_sequences to HMM/LSTM_model | alert where anomaly_score
      > threshold AND sequence lacks 'Network Activity' state
- question: Is an endpoint attempting to connect to a destination port known to be
    a VM host-guest communication or backdoor channel?
  context: Some virtual machine platforms have specific network ports used for communication
    between the guest OS and the host. Malware can attempt to connect to these ports
    to detect the virtualization software. This question looks for these high-confidence
    connection attempts in network logs.
  answer_sources:
  - Zeek conn.log
  - Network egress points, core switches, VDI host-only networks, and intra-VM traffic
    monitors.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source=zeek_conn_log | where dest_port IN (vm_backdoor_port_watchlist)
- question: Is a host generating a sudden and significant spike in unsuccessful network
    connection attempts?
  context: Some sandboxes have network listeners on non-standard ports to monitor
    malware activity. An adversary might probe for these listeners by attempting to
    connect to a wide range of ports. This results in a high rate of rejected or timed-out
    connections. This question aims to detect this probing behavior by looking for
    statistical spikes in connection failures.
  answer_sources:
  - Zeek conn.log
  - Network egress points, core switches, VDI host-only networks, and intra-VM traffic
    monitors.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source=zeek_conn_log | filter conn_state IN ('REJ', 'RSTO') | stats count
      by host, time_window(1h) | where count > statistical_spike_threshold
- question: Are there anomalous network connections identified by a high reconstruction
    error from an autoencoder model?
  context: An autoencoder trained on legitimate network traffic learns to efficiently
    represent normal connections. When a connection with unusual properties (like
    a rare port or destination) is processed, the model struggles to reconstruct it,
    resulting in a high error. This question uses this method to flag anomalous connections
    that may be related to system checks.
  answer_sources:
  - Zeek conn.log
  - Network egress points, core switches, VDI host-only networks, and intra-VM traffic
    monitors.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: stream zeek_conn_log to autoencoder_model | where reconstruction_error
      > threshold
- question: Are processes or scripts being executed with command-line arguments or
    function names that match known open-source discovery tools?
  context: Adversaries frequently use publicly available tools like Seatbelt, V-Hunter,
    or Pafish for system discovery and sandbox evasion. These tools have characteristic
    command-line invocations and function names. This question hunts for the execution
    of these tools by matching process and script logs against a library of their
    known signatures.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - All corporate endpoints and servers, particularly those managed by IT and security
    teams.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source IN (win_event_4688, win_event_4104) | search command_line OR script_block
      MATCHES (discovery_tool_regex_library)
- question: Is a standard user account exhibiting a discovery-related command usage
    profile that is statistically similar to that of a system administrator?
  context: System administrators frequently use discovery cmdlets (e.g., `Get-WmiObject`),
    while regular users do not. An adversary operating under a compromised user account
    who runs discovery tools will create a usage profile that looks more like an admin's.
    This question aims to find this behavioral mismatch by comparing user activity
    against established role-based baselines.
  answer_sources:
  - Windows Event ID 4104
  - All corporate endpoints and servers, particularly those managed by IT and security
    teams.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: for each user | create vector of discovery_cmdlet_frequency | calculate
      cosine_similarity(user_vector, admin_baseline_vector) | where similarity >
      threshold AND user_role != 'admin'
- question: Are PowerShell script blocks being classified as 'Reconnaissance' by a
    trained machine learning model?
  context: Instead of relying on specific signatures, a machine learning classifier
    can be trained to recognize the general characteristics of reconnaissance scripts
    (e.g., high frequency of certain cmdlets, specific keywords, high entropy). This
    question applies such a model to classify all executed PowerShell scripts in real-time,
    providing a more robust and scalable detection method.
  answer_sources:
  - Windows Event ID 4104
  - All corporate endpoints and servers, particularly those managed by IT and security
    teams.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: stream win_event_4104 to powershell_classifier_model | where prediction
      == 'Reconnaissance' AND confidence_score > threshold
- question: Is an unsigned process, launched from a temporary directory, executing
    an excessive number of system information utilities within its first minute?
  context: This combination of attributes is highly suspicious. Legitimate software
    is typically signed and runs from a standard location. A malicious discovery tool,
    often dropped in a temporary folder, will frequently call utilities like `wmic.exe`
    or `systeminfo.exe` multiple times in rapid succession to gather information.
    This question uses a simple correlation rule to detect this behavior.
  answer_sources:
  - Windows Event ID 4688
  - All endpoints and servers, with a focus on monitoring newly created processes.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source=win_event_4688 | filter is_unsigned==true AND path IN ('%APPDATA%',
      '%TEMP%') | join with child_processes where child_process_name IN ('wmic.exe',
      'systeminfo.exe') within 60s | stats count by parent_process | where count >
      5
- question: Are new processes exhibiting high entropy in the set of WMI classes or
    registry hives they query?
  context: A legitimate process usually queries a small, predictable set of system
    resources related to its function. A discovery tool, however, often probes a
    wide and varied range of WMI classes and registry keys to build a comprehensive
    picture of the system. This broad, unfocused activity results in high entropy,
    which this question seeks to detect.
  answer_sources:
  - Windows Event ID 4656
  - Windows Event ID 4104
  - All endpoints and servers, with a focus on monitoring newly created processes.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: for each process | get set of WMI_classes_queried or registry_hives_queried
      within first 60s | calculate shannon_entropy(set) as query_entropy | where
      query_entropy > baseline_99th_percentile
- question: Do behavioral clusters of new processes reveal small, distinct groups
    characterized by a high volume of initial system queries?
  context: By representing the initial behavior of every new process as a set of features
    (e.g., query counts, child processes), clustering algorithms can group similar
    processes together. Most processes will fall into large clusters of normal behavior.
    This question looks for the small, isolated clusters that represent anomalous
    behaviors, such as intense discovery activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4656
  - Windows Event ID 4104
  - All endpoints and servers, with a focus on monitoring newly created processes.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: for new processes | create feature_vector(wmi_query_count, reg_query_count,
      etc.) | run DBSCAN clustering on vectors | investigate processes in small, outlier
      clusters
- question: Is a process attempting to access files or directories containing keywords
    associated with security analysis tools or malware samples?
  context: Adversaries often check for the presence of security tools (like Process
    Monitor or Wireshark) or analysis artifacts (like files named 'sample.bin' or
    'malware.exe' on the desktop) to determine if they are being watched. This question
    monitors all file access events for attempts to read files or list directories
    whose names contain these suspicious keywords.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - User profile directories (Desktop, Downloads), temporary file locations, and dedicated
    security analysis VM environments.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: source=win_event_4663 | where object_name CONTAINS (security_tool_keyword_watchlist)
- question: Is a process generating a spike in accesses to files that are historically
    rare for that user or host?
  context: Users and systems exhibit predictable file access patterns over time.
    When a malicious process begins enumerating the filesystem, it will inevitably
    access files and directories that are rarely, if ever, touched during normal operations.
    This question detects this anomaly by scoring the rarity of each file access
    and alerting when a process generates a burst of high-rarity access events.
  answer_sources:
  - Windows Event ID 4663
  - User profile directories (Desktop, Downloads), temporary file locations, and dedicated
    security analysis VM environments.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: for each file_access_event | calculate rarity_score based on historical
      frequency | stats moving_avg(rarity_score) by process | alert on spikes in moving_avg
- question: Are file access events receiving a high 'suspicious' score from a classifier
    trained to identify combinations of risky attributes?
  context: A single attribute, like a process running from a temp directory, may
    not be malicious on its own. However, a combination of attributes (e.g., an unsigned
    process, running from temp, with no network connections, accessing a rare file
    path) is highly suspicious. This question uses a machine learning classifier to
    evaluate these combinations and assign a risk score to each file access event
    for prioritized alerting.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - User profile directories (Desktop, Downloads), temporary file locations, and dedicated
    security analysis VM environments.
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: for each file_access_event | create feature_vector(is_unsigned, is_from_temp,
      is_rare_path, etc.) | score with random_forest_model | where risk_score > threshold