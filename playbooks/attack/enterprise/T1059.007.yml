name: T1059.007: JavaScript
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: >
  Investigates whether an adversary has executed malicious code using a JavaScript interpreter (e.g., wscript.exe, cscript.exe, node.exe). This involves analyzing evidence from multiple sources to detect suspicious activity. Key indicators include script hosts initiating network connections to malicious or rare destinations, the use of obfuscated command-line arguments, JavaScript files containing known malicious signatures or structures, unusual process ancestry (e.g., an Office application spawning a script host), execution from non-standard directories, and post-execution behavior like C2 beaconing or the spawning of command-line shells.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Did a script host process (wscript.exe, cscript.exe, node.exe) connect to a destination IP, domain, or HTTP host known to be malicious, or was a known malicious JavaScript file transferred?
    context: >
      This question is crucial for detecting the initial stages of an attack where a script, often a dropper or stager, reaches out to a command-and-control (C2) server or a malware distribution point. Correlating process execution with network logs and threat intelligence provides a high-fidelity signal of malicious activity. It also checks for the transfer of JavaScript files whose hashes are present in malware signature databases.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - Zeek dns.log
      - User Workstations
      - Web Proxies and Gateways
      - DNS Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe, node.exe)
          | JOIN network_logs (conn, dns, http) by host and timestamp
          | LOOKUP destination_ip, domain, http_host against threat_intel_feed
          | WHERE threat_intel_match = true
      - search_technology: pseudocode
        query: >
          SEARCH file_transfer_logs (javascript)
          | LOOKUP file_hash against threat_intel_feed
          | WHERE threat_intel_match = true
  - question: Did a script host process connect to a domain that is new for the user and rare across the enterprise?
    context: >
      Attackers often use newly registered or obscure domains for C2 infrastructure to evade reputation-based blocking. This question helps identify such activity by focusing on behavioral anomalies (new for the user) and statistical rarity (uncommon enterprise-wide), which can surface sophisticated or targeted threats that don't appear on standard threat feeds.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - Zeek dns.log
      - User Workstations
      - Web Proxies and Gateways
      - DNS Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH network_logs where process in (wscript.exe, cscript.exe, node.exe)
          | BASELINE per_user unique domains over 30 days
          | CALCULATE enterprise_wide domain rarity
          | ALERT where domain is new for user AND domain_rarity < 1%
  - question: Did a script host process request a URL that a machine learning model classifies as likely malicious based on its lexical features?
    context: >
      Sophisticated attackers may use algorithmically generated domains (DGAs) or craft URLs to look benign. This question leverages machine learning to analyze the structure of a URL itself—evaluating features like length, character entropy, and query parameters—to identify subtle patterns indicative of maliciousness that simple blocklists or signature matching would miss.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - Zeek dns.log
      - User Workstations
      - Web Proxies and Gateways
      - DNS Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH network_logs where process in (wscript.exe, cscript.exe, node.exe)
          | EXTRACT URL lexical features (length, entropy, etc.)
          | APPLY ML_model(URL_features)
          | ALERT where malicious_score > 0.90
  - question: Was a script host (wscript.exe, cscript.exe) executed with a command line containing suspicious keywords or Base64-encoded strings?
    context: >
      Adversaries frequently use obfuscation to hide their intentions within command-line arguments. This question searches for common indicators of malicious script execution, such as keywords like 'eval' or 'ActiveXObject' that enable dynamic code execution, or patterns matching Base64 encoding, a popular method for concealing malicious payloads.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint Devices
      - Application Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe)
          | ANALYZE command_line_arguments for keywords ('eval', 'ActiveXObject', 'setRequestHeader', 'fromCharCode')
          | ANALYZE command_line_arguments for regex_match(Base64_pattern)
          | ALERT on any match
  - question: Was a script host executed with a command line exhibiting unusually high Shannon entropy?
    context: >
      High Shannon entropy in a command-line string is a strong indicator of packed or encrypted data, which is not typical for legitimate scripts. By establishing a baseline for normal entropy scores in the environment, this question can detect outliers that represent heavily obfuscated commands, a common tactic used by malware to evade signature-based detection.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint Devices
      - Application Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe)
          | CALCULATE shannon_entropy(command_line)
          | COMPARE entropy_score against historical_baseline
          | ALERT if entropy_score > 98th_percentile
  - question: Was a script host executed with a command line that a machine learning model classifies as likely malicious?
    context: >
      This question moves beyond simple keyword matching or entropy calculation by using a classification model trained on a richer set of features. The model can learn complex patterns from command-line length, argument count, character frequencies, and other attributes to distinguish between benign administrative scripts and malicious one-liners with greater accuracy.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint Devices
      - Application Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe)
          | EXTRACT command_line_features (length, arg_count, char_frequency, entropy)
          | APPLY ML_model(command_line_features)
          | ALERT where malicious_score is high
  - question: Did JavaScript content transferred over the network contain signatures of known malicious libraries, functions, or C2 indicators?
    context: >
      This question involves deep packet or file content inspection to find tell-tale signs of malicious JavaScript. By applying signatures (like YARA rules) to network traffic, analysts can detect known attack frameworks (e.g., BeEF), common obfuscation patterns (e.g., `eval(atob(...))`), or hardcoded C2 infrastructure, allowing for detection even if the script is delivered from a previously unknown source.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Network Egress Points
      - Web Application Firewalls (WAFs)
      - Intrusion Detection/Prevention Systems (IDS/IPS)
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH file_content from network_logs (javascript)
          | APPLY YARA_rules for malicious_functions, libraries, C2_indicators
          | ALERT on any rule match
  - question: Did a downloaded JavaScript file exhibit an abnormal structure, such as a low comment-to-code ratio or a high frequency of obfuscation-related AST nodes?
    context: >
      Legitimate JavaScript often contains comments for maintainability, whereas malicious scripts are typically minified and obfuscated, resulting in a low comment-to-code ratio. This question analyzes the script's structure using an Abstract Syntax Tree (AST) to identify anomalies, such as an unusual distribution of node types that suggest obfuscation, providing a way to flag suspicious scripts based on their form rather than their specific content.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Network Egress Points
      - Web Application Firewalls (WAFs)
      - Intrusion Detection/Prevention Systems (IDS/IPS)
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH file_content from network_logs (javascript)
          | PARSE file into Abstract_Syntax_Tree (AST)
          | CALCULATE comment_to_code_ratio, distribution_of_AST_nodes
          | COMPARE metrics against benign_baseline
          | ALERT if deviation > 3_standard_deviations
  - question: Did a JavaScript file from network traffic get classified as malicious by an NLP model?
    context: >
      This question applies advanced Natural Language Processing (NLP) techniques to analyze the "language" of the JavaScript code itself. By tokenizing the code and using a model trained on vast datasets of benign and malicious samples, this method can classify the script's intent (e.g., dropper, skimmer, C2) with high confidence, catching novel or heavily obfuscated threats that other methods might miss.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Network Egress Points
      - Web Application Firewalls (WAFs)
      - Intrusion Detection/Prevention Systems (IDS/IPS)
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH file_content from network_logs (javascript)
          | TOKENIZE javascript_code
          | APPLY NLP_classification_model(tokens)
          | ALERT where classification is malicious with high_confidence
  - question: Was a JavaScript interpreter (wscript.exe, cscript.exe) spawned by an unusual parent process or executed from a disallowed directory?
    context: >
      This question helps detect common malware delivery vectors, such as a malicious macro in an Office document spawning a script host to download a payload. By enforcing rules against forbidden parent-child process relationships (e.g., WINWORD.EXE -> wscript.exe) and execution from high-risk directories (e.g., Downloads, Temp), analysts can quickly identify clear-cut policy violations that are strong indicators of compromise.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Mail Servers
      - File Servers
      - Web Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe)
          | CHECK parent_process against forbidden_list (WINWORD.EXE, OUTLOOK.EXE, etc.)
          | CHECK script_path against disallowed_directories (Downloads, Temp, etc.)
          | ALERT on any match
  - question: Was a script host launched by a statistically rare parent process or from an uncommon directory?
    context: >
      This is a behavioral approach to the previous question. Instead of relying on a static list of forbidden relationships, it builds a baseline of normal activity and flags deviations. This method is effective at detecting novel or targeted attacks where an adversary uses a legitimate-but-uncommon process to launch a script, an activity that would be missed by rigid rule-based systems but stands out as a statistical anomaly.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Mail Servers
      - File Servers
      - Web Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe)
          | BASELINE frequency of parent_process_name and script_directory over 30 days
          | ALERT if observed parent_process or directory frequency < 5th_percentile
  - question: Did a script host execution exhibit an anomalous combination of parent process, file path, and user context?
    context: >
      This question uses a more sophisticated anomaly detection model to consider multiple features simultaneously. An adversary's actions might appear normal if each feature is viewed in isolation (e.g., a known parent process, a standard user account), but the combination of features might be highly unusual. An Isolation Forest or one-class SVM can identify these rare combinations, flagging complex and evasive execution patterns.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Mail Servers
      - File Servers
      - Web Servers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (wscript.exe, cscript.exe)
          | EXTRACT features (parent_process_name, parent_path, script_path, user)
          | APPLY anomaly_detection_model(features)
          | ALERT on anomalous combinations
  - question: Following a script host execution, did the same host spawn a suspicious child process or modify a persistence-related registry key within 5 minutes?
    context: >
      This question looks for immediate post-execution activity to confirm malicious intent. A malicious script often acts as a stager, quickly leading to the execution of other tools (like powershell.exe or cmd.exe) or the establishment of persistence (by modifying Run keys in the registry). Correlating the initial script execution with these subsequent high-risk actions provides strong evidence of a successful compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 4663
      - Zeek conn.log
      - All Endpoints and Servers
      - Domain Controllers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          TRIGGER on script_host_execution (wscript.exe, cscript.exe)
          | MONITOR host for 5 minutes
          | ALERT if child_process in (powershell.exe, cmd.exe, bitsadmin.exe, certutil.exe)
          | ALERT if registry_modification to persistence_keys (HKCU\\...\\Run, etc.)
  - question: Following a script execution, did the host exhibit network traffic patterns characteristic of C2 beaconing?
    context: >
      Command-and-control (C2) beaconing is the heartbeat of a remote access trojan, characterized by regular, low-volume connections to a C2 server. This question analyzes network traffic following a script execution for these specific patterns: connections with very low time variation (regular intervals) and consistently small data payloads. Detecting this pattern is a key indicator that the script has established a C2 channel.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 4663
      - Zeek conn.log
      - All Endpoints and Servers
      - Domain Controllers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          TRIGGER on script_host_execution
          | ANALYZE subsequent_network_connections from host to single_destination over 10 minutes
          | CALCULATE std_dev(inter_arrival_time), avg(data_volume)
          | ALERT if std_dev is near zero AND avg_volume is low
  - question: Did the sequence of system events following a script execution represent a structurally anomalous activity graph?
    context: >
      This question models post-execution behavior (process creation, file access, network connections) as a temporal graph and compares it against a library of known benign graphs. This advanced technique can detect sophisticated attack chains where individual actions may seem harmless, but the overall sequence and relationship between them is abnormal and indicative of a malicious workflow.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 4663
      - Zeek conn.log
      - All Endpoints and Servers
      - Domain Controllers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          TRIGGER on script_host_execution
          | MODEL subsequent_host_events as a temporal_graph
          | APPLY graph_anomaly_detection_algorithm
          | ALERT if graph is structurally dissimilar to benign_baseline
  - question: Was Node.js (node.exe) executed from a high-risk directory or did it spawn a suspicious child process?
    context: >
      While Node.js is a legitimate development and server-side runtime, adversaries can abuse it for execution. This question flags high-risk uses of `node.exe`, such as running scripts from temporary or download directories, or using it to launch discovery tools (`whoami.exe`) or other shells (`powershell.exe`). This helps distinguish between legitimate development/application activity and malicious use of the Node.js engine.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Development Environments
      - Web Servers
      - User Workstations
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (node.exe)
          | ALERT if script_path in high_risk_directories (%APPDATA%, %TEMP%, Downloads)
          | ALERT if child_process in (powershell.exe, whoami.exe) outside of known_context
  - question: Did a Node.js process spawn a previously unobserved child process or generate an anomalous volume of outbound network data?
    context: >
      This question establishes a behavioral baseline for legitimate Node.js applications on a given host. It detects anomalies by flagging when `node.exe` spawns a child process it has never spawned before on that system, or when its network traffic dramatically increases. A sudden spike in outbound data could indicate data exfiltration, while a novel child process might signify a new stage in an attack.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Development Environments
      - Web Servers
      - User Workstations
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH process_creation_logs (node.exe) and network_logs from node.exe
          | BASELINE normal_child_processes and network_volume_per_host over 30 days
          | ALERT if child_process is new for host
          | ALERT if outbound_data_volume > 3_standard_deviations from baseline
  - question: Did network traffic from a Node.js process deviate significantly from its normal, learned pattern?
    context: >
      This question applies sophisticated time-series analysis to the network telemetry of `node.exe`. An LSTM autoencoder or similar model can learn the intricate patterns of a legitimate application's network behavior (e.g., API calls, database connections). It can then detect subtle but significant deviations from this norm that might indicate a compromised application is now being used for C2 or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Development Environments
      - Web Servers
      - User Workstations
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: >
          SEARCH network_telemetry from node.exe (bytes_out, conn_count, etc.)
          | APPLY time_series_anomaly_detection_model (e.g., LSTM autoencoder)
          | ALERT on significant deviation from learned_pattern