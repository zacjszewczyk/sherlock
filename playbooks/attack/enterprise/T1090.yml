name: T1090: Proxy
id: 9e1b3c8a-7d6f-4a5b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversary use of proxy techniques for command and control (C2) communications. It covers detection methods for connections to known malicious infrastructure (proxies, Tor, C2 nodes), execution of proxy tools, anomalous network connections from unexpected processes, protocol tunneling over standard ports, unusual traffic patterns like long-lived low-data connections, and domain fronting techniques where the outer TLS destination differs from the inner HTTP host.
type: technique
related:
  - TA0011: Command And Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are outbound network connections being made to IP addresses or domains identified as proxies, Tor nodes, C2 servers, or unsanctioned VPNs by threat intelligence?
    context: This is a high-fidelity method to detect C2 communications. Adversaries often use known malicious infrastructure, and matching network logs against curated threat intelligence feeds allows for direct identification of connections to these known-bad destinations.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress/Internet Gateway
      - Corporate DNS Resolvers
      - Web Proxy Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (Zeek dns.log OR Zeek conn.log) | JOIN on connection_uid | WHERE (destination_ip IN threat_feed_ips OR query IN threat_feed_domains) AND threat_feed_category IN ('Proxy', 'Tor', 'C2', 'Unsanctioned VPN')
  - question: Are there successful outbound connections to externally resolved domains that are exceptionally rare within the enterprise?
    context: Adversary C2 domains are often unique to a specific campaign or organization and are not widely visited by others. By identifying domains with very low query frequency and a small number of unique internal clients, we can uncover potential C2 channels that would be missed by reputation-based feeds alone. This method helps find the "needle in the haystack."
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress/Internet Gateway
      - Corporate DNS Resolvers
      - Web Proxy Logs
    range: last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH Zeek dns.log | CALCULATE frequency and unique_queriers per domain over 30 days | FILTER for domains in bottom 5th percentile for both metrics | JOIN with conn.log to confirm successful connection | EXCLUDE known_good_allowlist
  - question: Can we use machine learning to classify newly observed domains as potentially malicious based on their lexical and historical features?
    context: This question aims to proactively identify malicious domains, including those generated by algorithms (DGAs), before they appear on threat intelligence feeds. By training a model on features like domain length, character randomness (entropy), and subdomain structure, we can score and flag suspicious domains that do not resemble legitimate ones.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress/Internet Gateway
      - Corporate DNS Resolvers
      - Web Proxy Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new domain in dns.log | EXTRACT features (length, entropy, TLD, etc.) | INPUT features into trained classification model | ALERT if model_prediction == 'malicious' AND confidence_score > 0.9
  - question: Is a process being created that is a known proxy tool or is being executed with command-line arguments indicative of proxying or tunneling?
    context: Adversaries frequently deploy well-known proxy and tunneling tools (like Plink, Ngrok, Chisel) for C2. This question directly searches for the execution of these tools by name or by their characteristic command-line flags (e.g., -R, -L, -D, 'reverse'), providing strong evidence of proxy activity on an endpoint.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Domain Controllers (for centralized logging)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events (EID 4688) | WHERE (process_name IN known_proxy_tools) OR (command_line MATCHES_REGEX ('-R', '-L', '-D', 'reverse', 'tunnel'))
  - question: Are there any newly observed command-line executions that are extremely rare across the enterprise and contain numeric arguments?
    context: This statistical approach helps find novel or custom proxy tools not caught by name. Malicious or unauthorized command lines are often unique and have very low prevalence. By flagging rare commands, especially those containing numbers that could be IP addresses or port numbers, we can uncover suspicious activity that deviates from normal administrative behavior.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Domain Controllers (for centralized logging)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE prevalence of each unique command_line | ALERT if prevalence < 0.1% AND command_line CONTAINS numeric_arguments
  - question: Can we use an anomaly detection model to identify command-line executions that are inconsistent with established baseline behavior?
    context: Instead of relying on specific signatures or rarity, this question uses machine learning to learn what "normal" command-line activity looks like for an environment. An unsupervised model can then flag any new command that significantly deviates from this learned baseline, effectively detecting novel, obfuscated, or custom adversary command-line usage.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Domain Controllers (for centralized logging)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new command_line | VECTORIZE using TF-IDF | INPUT vector into trained Isolation Forest model | ALERT if anomaly_score is high
  - question: Is a process that is not on an approved allowlist initiating an outbound network connection?
    context: Most legitimate applications that connect to the internet are well-known (e.g., web browsers, email clients). Malware or unauthorized proxy tools often execute from non-standard paths or are processes not expected to make network connections. By maintaining an allowlist of approved network-aware applications, any connection from a process not on the list is immediately suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Zeek conn.log
      - Endpoint Detection and Response (EDR) Systems
      - Critical Servers
      - User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connection_events (Sysmon EID 3) | WHERE process_path NOT IN network_application_allowlist AND destination_ip IS_NOT_private
  - question: Is a network connection being initiated by a process in an unusual context (e.g., rare parent process, executable path, or user)?
    context: Even legitimate processes can be hijacked or used for malicious purposes. This question seeks to identify such instances by baselining the normal context for every network-aware process. A connection from svchost.exe might be normal, but a connection from svchost.exe launched by an unusual parent process or running from a strange directory is highly anomalous and could indicate process injection or masquerading.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Zeek conn.log
      - Endpoint Detection and Response (EDR) Systems
      - Critical Servers
      - User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each network_connection | CALCULATE rarity_score based on (process_name, parent_process, process_path, user_context) combination | ALERT if rarity_score > 99th percentile
  - question: Can a machine learning model identify process-network events that fall outside the boundary of legitimate, learned behavior?
    context: This question leverages a one-class SVM model to create a sophisticated, multi-faceted definition of "normal" process-network behavior. By considering features like process path entropy, user context, and destination IP reputation simultaneously, the model can detect subtle anomalies that might be missed by single-variable statistical checks.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Zeek conn.log
      - Endpoint Detection and Response (EDR) Systems
      - Critical Servers
      - User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process-network event | EXTRACT features (path_entropy, parent, user, IP_rep, dest_port) | INPUT into trained one-class SVM model | ALERT if event is outside learned boundary
  - question: Is network traffic on a standard port (like 53, 80, 443) being identified as a different protocol than expected, or is a protocol violation being reported?
    context: Adversaries often tunnel C2 traffic over common ports like DNS (53) or HTTPS (443) to blend in and bypass simple firewall rules. Network monitoring tools like Zeek can inspect the traffic and identify when the protocol does not match the port (e.g., SSH over port 443). This mismatch is a strong indicator of non-standard tunneling or C2 activity.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Taps/Spanning Ports feeding Zeek sensors
      - Internet Gateway
      - DMZ Network Segment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Zeek conn.log | WHERE (port == 53 AND service != 'dns') OR (port == 443 AND service != 'ssl') | UNION | SEARCH Zeek weird.log WHERE notice IN ('non_dns_traffic_on_dns_port', 'possible_split_routing')
  - question: Does the payload data of a connection on a standard port exhibit unusually high entropy, suggesting it is encrypted or packed where plaintext is expected?
    context: Standard protocols like DNS and HTTP often have predictable, low-entropy (less random) data. Encrypted C2 traffic, even when tunneled over these ports, will have high entropy. By establishing a baseline for payload entropy on a per-port basis, we can flag connections that are statistical outliers, indicating they likely contain non-standard, potentially malicious data.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Taps/Spanning Ports feeding Zeek sensors
      - Internet Gateway
      - DMZ Network Segment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each connection on port 80, 443, 53 | SAMPLE first 1KB of payload | CALCULATE Shannon entropy | ALERT if entropy is > 3 standard deviations from the port's baseline mean
  - question: Using a machine learning model, does the predicted protocol for a connection, based on its traffic characteristics, differ from the protocol expected for its port?
    context: This approach identifies protocol tunneling without needing to inspect the payload directly. A machine learning model can be trained to recognize protocols based on port-agnostic metadata like packet size, timing, and connection duration. When the model predicts "SSH" for a connection on port 53 (DNS), it provides a strong, data-driven alert for protocol mismatch.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Taps/Spanning Ports feeding Zeek sensors
      - Internet Gateway
      - DMZ Network Segment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each connection | EXTRACT features (duration, packet_count, inter_arrival_time) | PREDICT protocol using trained classifier | ALERT if predicted_protocol mismatches standard_port_protocol
  - question: Are there any extremely long-lived TCP connections with low data volume, indicative of a C2 heartbeat?
    context: Many C2 implants maintain a persistent connection to the adversary's server, sending small, periodic "heartbeat" signals to show they are still active and ready for commands. This question looks for these characteristic long-duration, low-traffic connections that stand out from normal, more transient network activity.
    answer_sources:
      - Zeek conn.log
      - Network Egress/Internet Gateway
      - Internal Network Core Switches
      - Server-to-Server Traffic Segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Zeek conn.log | WHERE duration > 12 hours AND (bytes_sent + bytes_received) < 10MB AND history CONTAINS '^' (keep-alive) | EXCLUDE known_good_persistent_services
  - question: Is a host exhibiting a significant change in its typical upload/download ratio for network connections?
    context: User behavior and applications have typical traffic patterns. For example, web browsing involves small uploads (requests) and large downloads (content). Data exfiltration or interactive C2 channels can reverse this. By baselining the data ratio for each host, a sudden, statistically significant deviation can indicate a change in behavior, such as a new C2 implant becoming active.
    answer_sources:
      - Zeek conn.log
      - Network Egress/Internet Gateway
      - Internal Network Core Switches
      - Server-to-Server Traffic Segments
    range: last 7 days
    queries:
      - technology: pseudocode
        query: FOR each source_ip, establish 7-day baseline of (upload/download) ratio | FOR each new connection | ALERT if ratio is > 3 standard deviations from the source IP's historical mean
  - question: Can we use clustering to identify small groups of network connections that are outliers from the main clusters of normal traffic?
    context: This unsupervised learning approach automatically groups connections with similar characteristics (duration, bytes transferred, etc.). Normal traffic like web browsing will form large, dense clusters. C2 traffic, with its unique patterns, will often form small, distinct clusters or be flagged as noise (outliers) by the algorithm. Investigating these outlier clusters is an effective way to hunt for unknown C2 channels.
    answer_sources:
      - Zeek conn.log
      - Network Egress/Internet Gateway
      - Internal Network Core Switches
      - Server-to-Server Traffic Segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: RUN DBSCAN clustering on conn.log features (log(duration), log(bytes), ratio) | INVESTIGATE small, dense clusters identified as outliers from large, normal traffic clusters
  - question: Is there evidence of domain fronting, where the unencrypted TLS SNI domain (e.g., a CDN) differs from the encrypted inner HTTP Host header?
    context: Domain fronting is a technique to hide the true destination of C2 traffic. It routes traffic through a legitimate, trusted domain (like a major CDN) while specifying the real, malicious destination in the encrypted portion of the request. Detecting a mismatch between the outer SNI and inner Host header is a direct, high-fidelity indicator of this evasion technique.
    answer_sources:
      - Zeek ssl.log
      - Zeek http.log
      - Zeek dns.log
      - Web Proxies
      - Network Taps monitoring traffic to CDNs
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN Zeek ssl.log and http.log on connection_uid | WHERE ssl.server_name != http.host AND ssl.server_name IN known_CDN_domains
  - question: Within traffic to a known CDN, is a client using an HTTP Host header that is exceptionally rare or has never been seen before?
    context: While a CDN may host thousands of domains, an organization's users will typically only access a small subset of them. Adversary-controlled domains hidden via domain fronting will be new and rare within the organization's traffic. By baselining which Host headers are normally seen for a given CDN, we can flag new, low-prevalence Host headers as suspicious.
    answer_sources:
      - Zeek ssl.log
      - Zeek http.log
      - Zeek dns.log
      - Web Proxies
      - Network Taps monitoring traffic to CDNs
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each CDN domain | BASELINE historical http.host values | ALERT if a new connection uses a http.host that is in the bottom 1st percentile of prevalence
  - question: When domain fronting is detected, can a machine learning model classify the inner, hidden HTTP Host domain as malicious?
    context: This question adds a layer of confirmation to a domain fronting alert. Once a mismatch is found via the symbolic rule, the hidden inner domain can be passed to a domain-scoring ML model (like the one in Question 3). If the model classifies this hidden domain as malicious, it significantly increases the confidence and severity of the alert.
    answer_sources:
      - Zeek ssl.log
      - Zeek http.log
      - Zeek dns.log
      - Web Proxies
      - Network Taps monitoring traffic to CDNs
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON domain_fronting_alert | EXTRACT inner http.host | SCORE host with domain classification model | ELEVATE alert severity if model_prediction == 'malicious'