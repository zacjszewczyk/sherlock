name: T1195.003: Compromise Hardware Supply Chain
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Investigates whether an adversary has gained initial access via a compromised hardware supply chain. This involves detecting anomalies in newly provisioned assets, such as connections to known C2 infrastructure or rare destinations, execution of malicious firmware or tools identified by hash, beaconing behavior indicative of implants, unusual network activity occurring before a user logs on, and boot integrity failures. The playbook combines threat intelligence matching, statistical analysis, machine learning, and correlation of disparate events to uncover sophisticated hardware-based attacks.
type: technique
related:
- TA0001: Initial Access
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can we detect if a newly provisioned asset is communicating with a known hardware implant command and control (C2) server?
  context: Adversaries using compromised hardware often embed implants that "call home" to C2 servers shortly after the device is powered on and connected to a network. This question focuses on the most direct detection method: matching outbound network traffic from new assets (e.g., deployed within 30 days) against a high-confidence threat intelligence feed of known malicious C2 domains and IPs. A match is a strong indicator of a hardware-based compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Asset Inventory Database
  - Network Egress Points (e.g., Firewalls, Proxies)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      GET new_assets from asset_inventory where deployed_date > now() - 30d
      GET c2_indicators from threat_intel_feed
      FOR EACH connection in conn.log or dns.log
        IF connection.source_ip IN new_assets AND (connection.dest_ip IN c2_indicators OR connection.dns_query IN c2_indicators)
        THEN ALERT "New asset communicating with known C2"
- question: Are newly provisioned assets making network connections to geographically or organizationally rare destinations?
  context: Hardware implant C2 servers are often hosted in atypical Autonomous Systems (ASNs) or countries not commonly frequented by legitimate enterprise traffic. This question aims to identify these statistical outliers. By establishing a baseline of normal destination ASNs and countries, we can flag connections from new assets to destinations that are exceptionally rare (e.g., seen <0.01% of the time). This provides a powerful heuristic for discovering previously unknown C2 infrastructure.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Asset Inventory Database
  - Network Egress Points (e.g., Firewalls, Proxies)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      CALCULATE baseline_asn_freq and baseline_country_freq for all enterprise traffic over 90 days
      GET new_assets from asset_inventory
      FOR EACH connection from new_assets
        ENRICH dest_ip with ASN and Country
        IF frequency(connection.ASN) < 0.0001 OR frequency(connection.Country) < 0.0001
        THEN ALERT "New asset connecting to rare ASN/Country"
- question: Can a machine learning model identify high-risk outbound connections from new assets that are likely C2 traffic?
  context: This question proposes a more advanced, predictive approach to detecting C2 traffic. Instead of relying on single indicators, a classification model (like XGBoost) can learn the complex patterns of malicious connections by analyzing multiple features simultaneously. These features include destination port, protocol, JA3/JA3S hashes, IP reputation, and statistical rarity scores. The model can then score all outbound connections from new assets, flagging those with a high probability of being malicious for focused analyst review.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Asset Inventory Database
  - Network Egress Points (e.g., Firewalls, Proxies)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN classification_model on labeled (benign/malicious) connection data
      FEATURES = [dest_port, protocol, ja3, ja3s, ip_rep, asn_rarity, country_rarity, is_new_asset]
      FOR EACH connection from new_assets
        SCORE connection with classification_model
        IF score > high_probability_threshold
        THEN ALERT "ML model detected probable C2 connection from new asset"
- question: Is known firmware-level malware or a supply chain attack tool being executed or transferred on our network?
  context: Adversaries may package malicious code as part of a firmware update or include attack tools within a compromised software package. This question focuses on detecting these threats by their cryptographic hash. By continuously comparing the hashes of all executed processes (from endpoint logs) and files transferred over the network (from network sensors) against a threat intelligence feed of known malicious hashes, we can immediately identify and alert on the presence of these known threats.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Endpoint Devices (Workstations, Servers)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      GET malicious_hashes from threat_intel_feed
      FOR EACH process_creation_event OR file_transfer_event
        IF event.file_hash IN malicious_hashes
        THEN ALERT "Known malicious file hash detected"
- question: Are there any extremely rare, unsigned files being executed from high-entropy file paths?
  context: Malicious files, especially those used in targeted attacks, are often not widely distributed across an enterprise. This question aims to find these needles in the haystack. By identifying executed files that are both extremely rare (e.g., running on only one or two hosts) and unsigned, we can flag suspicious activity. Adding a check for high Shannon entropy in the file path helps detect polymorphic malware that randomizes its installation directory to evade detection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Endpoint Devices (Workstations, Servers)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      CALCULATE hash_prevalence for all executed files
      FOR EACH process_creation_event
        CALCULATE path_entropy for event.file_path
        IF hash_prevalence(event.file_hash) < 3 AND event.is_signed == false AND path_entropy > high_threshold
        THEN ALERT "Rare, unsigned file executed from high-entropy path"
- question: Can a machine learning model predict the risk of a newly executed file being malicious based on its characteristics?
  context: This question proposes using a machine learning classifier to assess the risk of every file execution. The model would ingest a variety of features, such as the file's prevalence across the network, the validity of its digital signature, the entropy of its name and path, and details about its parent process. By training on historical data of known good and bad executions, the model can learn to predict the likelihood that a new, unknown file is malicious, allowing for proactive alerting on high-risk events.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Endpoint Devices (Workstations, Servers)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN classification_model on labeled (benign/malicious) file execution data
      FEATURES = [hash_prevalence, signer_validity, filename_entropy, filepath_entropy, parent_process_details]
      FOR EACH file_execution_event
        SCORE event with classification_model
        IF score > high_probability_threshold
        THEN ALERT "ML model detected high-risk file execution"
- question: Is any network traffic using TLS fingerprints (JA3/JA3S) or DNS queries known to be associated with firmware implants?
  context: Malware, including firmware implants, often has a unique network communication stack that results in a specific, fingerprintable TLS client hello (JA3) and server hello (JA3S). Similarly, they may use hardcoded domains for C2. This question focuses on matching observed JA3/JA3S hashes and DNS queries against curated watchlists of indicators known to be used by firmware implants and supply chain C2 frameworks, providing a high-fidelity method for detecting specific threats.
  answer_sources:
  - Zeek dns.log
  - Zeek ssl.log
  - Zeek conn.log
  - Network Egress Points, DNS Resolvers, SSL/TLS Inspection Points
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      GET implant_indicators (JA3, JA3S, DNS) from watchlist
      FOR EACH ssl_log_entry OR dns_log_entry
        IF entry.ja3 IN implant_indicators OR entry.ja3s IN implant_indicators OR entry.query IN implant_indicators
        THEN ALERT "Firmware implant indicator (JA3/JA3S/DNS) detected"
- question: Are any hosts exhibiting highly regular, automated network communication patterns (beaconing)?
  context: C2 communication from implants is often automated, resulting in connections with highly consistent time intervals ("heartbeats") and similar data payloads. This is known as beaconing. This question aims to detect this behavior by analyzing the statistical properties of network connections. By calculating the standard deviation of time between connections and bytes sent for each source-destination pair, we can identify traffic with exceptionally low variance, which is a strong indicator of non-human, automated C2 activity.
  answer_sources:
  - Zeek dns.log
  - Zeek ssl.log
  - Zeek conn.log
  - Network Egress Points, DNS Resolvers, SSL/TLS Inspection Points
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR EACH source_dest_pair over 24h
        CALCULATE std_dev(time_delta_between_connections)
        CALCULATE std_dev(bytes_sent)
        IF std_dev(time_delta) < low_threshold AND std_dev(bytes_sent) < low_threshold
        THEN ALERT "Potential C2 beaconing detected based on low variance"
- question: Can we use advanced signal processing and clustering to identify groups of devices beaconing in a similar, anomalous manner?
  context: This question proposes a more sophisticated method for detecting beaconing. Applying a Fast Fourier Transform (FFT) to the time series of a host's network activity can reveal strong periodic signals that might be missed by simple statistical methods. Furthermore, by clustering hosts based on their beaconing characteristics (e.g., frequency, jitter, payload size, JA3), we can identify small, coordinated groups of devices that are communicating in a similar, anomalous way, which could indicate a single adversary controlling multiple compromised assets.
  answer_sources:
  - Zeek dns.log
  - Zeek ssl.log
  - Zeek conn.log
  - Network Egress Points, DNS Resolvers, SSL/TLS Inspection Points
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR EACH host
        CREATE time_series of connection_counts and data_volumes
        APPLY FFT to time_series to find dominant_frequency
      CLUSTER hosts using DBSCAN on features (frequency, jitter, payload_size, JA3)
      FOR EACH small_anomalous_cluster
        ALERT "Group of devices detected with similar anomalous beaconing patterns"
- question: Are any hosts making suspicious external network connections after booting but before a user logs in?
  context: Legitimate pre-logon network activity is typically limited to essential services like DHCP, DNS, and NTP. A hardware implant, however, may attempt to establish a C2 connection immediately after boot, before user logon and before many security tools are fully active. This question aims to detect this by creating a rule that monitors the specific time window between a system boot event and the first interactive user logon. Any connection to an external IP on a non-standard port during this window is highly suspicious and warrants an alert.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 6005
  - Windows Event ID 4624
  - Sysmon Event ID 3
  - Endpoint devices, Servers, Network Egress Points, Domain Controller Authentication Logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR EACH host
        FIND boot_time from EventID 6005
        FIND first_logon_time from EventID 4624 (Type 2 or 10)
        FOR EACH network_connection between boot_time and first_logon_time
          IF connection.dest_ip is_external AND connection.dest_port NOT IN (80, 443, 53, 123)
          THEN ALERT "Suspicious external network connection in pre-logon window"
- question: Do any hosts exhibit anomalous pre-logon network activity when compared to a baseline of their peer group?
  context: This question builds on the pre-logon detection concept by using baselining to find outliers. Different types of assets (e.g., workstations vs. servers) have different legitimate pre-logon network behaviors. By creating a profile of normal activity (e.g., typical ports, data volumes) for each asset group, we can use statistical measures like a Z-score to detect significant deviations. A host whose pre-logon data volume to external IPs is many standard deviations above its group's average is a strong candidate for investigation.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 6005
  - Windows Event ID 4624
  - Sysmon Event ID 3
  - Endpoint devices, Servers, Network Egress Points, Domain Controller Authentication Logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR EACH asset_group
        CALCULATE baseline_mean and baseline_std_dev for pre-logon_data_volume
      FOR EACH host in asset_group
        MEASURE current pre-logon_data_volume
        CALCULATE z_score = (current - baseline_mean) / baseline_std_dev
        IF z_score > 3
        THEN ALERT "Anomalous pre-logon network data volume detected"
- question: Can an autoencoder model detect anomalous pre-logon network sessions that don't conform to normal patterns?
  context: This question proposes a sophisticated machine learning approach for detecting abnormal pre-logon activity. An autoencoder is trained exclusively on data representing normal pre-logon network sessions (e.g., feature vectors of ports, protocols, byte counts). Because it only learns to reconstruct "normal," it will produce a high reconstruction error when given a session that is anomalous, such as one involving a hardware implant's C2 communication. This high error serves as a reliable anomaly signal, flagging the session for investigation.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 6005
  - Windows Event ID 4624
  - Sysmon Event ID 3
  - Endpoint devices, Servers, Network Egress Points, Domain Controller Authentication Logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN autoencoder_model on feature_vectors of normal pre-logon sessions
      FOR EACH new pre-logon_session
        CALCULATE reconstruction_error using autoencoder_model
        IF reconstruction_error > high_threshold
        THEN ALERT "Autoencoder detected anomalous pre-logon network session"
- question: Are there any critical boot integrity failures on devices that have had recent hardware changes?
  context: A compromised hardware component can interfere with the system's secure boot process. This question focuses on creating a high-fidelity alert by correlating critical boot integrity failure events (like a Secure Boot failure or BitLocker entering recovery mode) with asset management data. An alert that triggers for one of these events on a host that has had hardware replaced or installed within the last 90 days is a very strong signal of a potential hardware supply chain compromise and should be investigated immediately.
  answer_sources:
  - Microsoft-Windows-CodeIntegrity/Operational Event ID 3077
  - Microsoft-Windows-BitLocker-Driver/Operational Event ID 24620
  - System Log TPM Event ID 15
  - Endpoint Device Event Logs, Server Event Logs, Physical Asset Management Database
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      WATCH FOR critical_boot_events (e.g., EventID 3077, 24620)
      ON alert
        QUERY asset_inventory for recent_hardware_changes(alert.hostname, 90d)
        IF recent_hardware_changes == true
        THEN CREATE_HIGH_PRIORITY_ALERT "Boot integrity failure on host with recent hardware change"
- question: Is there a statistically significant increase in boot integrity errors, either on a single host or across the enterprise?
  context: While isolated boot errors can occur for benign reasons, a statistical increase can indicate a systemic problem. This question involves two checks: first, identifying any single host that experiences an abnormally high rate of boot errors compared to its peers. Second, monitoring the enterprise-wide count of these errors for a sudden spike. A significant increase across the fleet could indicate a bad batch of hardware from a supplier or a widespread attack campaign, warranting a broader investigation.
  answer_sources:
  - Microsoft-Windows-CodeIntegrity/Operational Event ID 3077
  - Microsoft-Windows-BitLocker-Driver/Operational Event ID 24620
  - System Log TPM Event ID 15
  - Endpoint Device Event Logs, Server Event Logs, Physical Asset Management Database
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Per-host check
      CALCULATE baseline_error_rate_percentile per hardware_model
      FOR EACH host
        IF host.error_rate > 99th_percentile
        THEN ALERT "Host has anomalous rate of boot errors"
      // Enterprise-wide check
      CALCULATE moving_avg and std_dev of daily_enterprise_error_count
      IF today_error_count > moving_avg + (3 * std_dev)
        THEN ALERT "Enterprise-wide spike in boot integrity errors"
- question: Can a time-series model detect an anomalous spike in boot errors specific to a particular hardware model?
  context: A hardware supply chain attack may only affect a specific model or batch of devices from a single manufacturer. This question proposes a targeted approach to detection by applying a separate time-series anomaly detection model (like Seasonal Hybrid ESD) to the daily count of boot errors for each major hardware model in the environment. This allows for the precise identification of a statistically significant problem affecting a specific hardware type, providing an early and focused warning of a potential supply chain issue.
  answer_sources:
  - Microsoft-Windows-CodeIntegrity/Operational Event ID 3077
  - Microsoft-Windows-BitLocker-Driver/Operational Event ID 24620
  - System Log TPM Event ID 15
  - Endpoint Device Event Logs, Server Event Logs, Physical Asset Management Database
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR EACH hardware_model in enterprise
        CREATE time_series of daily_boot_error_count
        APPLY anomaly_detection_model (e.g., ESD) to time_series
        IF anomaly detected
        THEN ALERT "Anomalous spike in boot errors for hardware model: " + hardware_model
- question: Can we detect a specific chain of events: a boot error, followed by an unsigned process execution, followed by a connection to a malicious IP?
  context: This question focuses on creating a high-confidence alert by correlating a specific sequence of suspicious events on a single host. The attack pattern is: a hardware implant causes a boot integrity error, then executes its malicious (and likely unsigned) payload, which in turn establishes a C2 connection. A SIEM correlation rule that triggers only when this exact sequence occurs within a short time window (e.g., 5-10 minutes) is extremely unlikely to be a false positive and indicates a successful compromise.
  answer_sources:
  - Microsoft-Windows-BitLocker-Driver Event ID 24620
  - Sysmon Event ID 1
  - Zeek conn.log
  - Threat Intelligence Feed
  - SIEM/Log Aggregator, Endpoint Device Logs, Network Sensor Logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      DEFINE correlation_rule on hostname over 5 minutes:
      SEQUENCE:
        1. event_id == 24620
        2. event_id == 1 AND is_signed == false
        3. event_id == 3 AND dest_ip IN threat_intel_feed
      ON match
        THEN ALERT "Correlated attack chain detected: Boot Error -> Unsigned Process -> C2 Connection"
- question: Can we use a risk scoring model to identify hosts exhibiting a combination of suspicious behaviors within a short time window?
  context: Instead of a rigid correlation rule, this question proposes a more flexible risk scoring model. Different suspicious events (a boot error, executing an unsigned file, connecting to a rare country) are assigned point values. A host's risk score accumulates as these events occur within a defined time window (e.g., 10 minutes). When a host's score crosses a dynamically determined threshold (e.g., the 99.9th percentile of all host scores), it triggers a high-fidelity alert. This approach can detect variations of an attack chain that a rigid sequence rule might miss.
  answer_sources:
  - Microsoft-Windows-BitLocker-Driver Event ID 24620
  - Sysmon Event ID 1
  - Zeek conn.log
  - Threat Intelligence Feed
  - SIEM/Log Aggregator, Endpoint Device Logs, Network Sensor Logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      DEFINE risk_scores: boot_error=+15, unsigned_exec=+10, rare_country_conn=+10
      FOR EACH host
        CALCULATE cumulative_score over last 10 minutes
        IF host.score > threshold (e.g., 99.9th percentile)
        THEN ALERT "Host exceeded composite risk score threshold"
- question: Can a Hidden Markov Model be used to infer a 'Compromised Boot' state from a sequence of observed system and network events?
  context: This question proposes a highly advanced probabilistic model for incident detection. A Hidden Markov Model (HMM) can be trained to understand the likely sequences of events (e.g., logs for boot errors, process creations, network flows) that correspond to unobservable "hidden" states of a system, such as 'Benign Boot', 'Compromised Boot', and 'C2 Active'. By feeding a real-time stream of logs from a host into the trained model, we can calculate the probability of the host transitioning into a compromised state. A high probability of this transition provides a very strong, model-driven signal of a hardware compromise.
  answer_sources:
  - Microsoft-Windows-BitLocker-Driver Event ID 24620
  - Sysmon Event ID 1
  - Zeek conn.log
  - Threat Intelligence Feed
  - SIEM/Log Aggregator, Endpoint Device Logs, Network Sensor Logs
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN HMM with hidden_states ('Benign', 'Compromised', 'C2') on sequences of observed_events (logs)
      FOR EACH host
        FEED sequence of new_events to HMM
        CALCULATE probability of transitioning to 'Compromised' or 'C2' state
        IF probability > high_threshold
        THEN ALERT "HMM detected high probability of system compromise"