name: T1595: Active Scanning
id: f8a1b2c3-d4e5-4f6a-8b9c-0d1e2f3a4b5c
description: Is the adversary performing active scanning against our external infrastructure? This involves identifying single external source IPs on threat intelligence feeds; analyzing inbound HTTP/S requests for user-agents or JA3/JA3S hashes characteristic of scanning tools; detecting high volumes of inbound connections with TCP states indicative of reconnaissance; identifying vertical or horizontal scans based on connections to numerous ports or hosts; and detecting high Shannon entropy in destination ports or hosts, which suggests slow, evasive probing.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are inbound connections originating from source IPs that are present on a threat intelligence watchlist?
    context: This question focuses on identifying known malicious actors by cross-referencing inbound connection source IPs with a continuously updated threat intelligence feed. A match is a high-confidence indicator of malicious intent, such as scanning or initial access attempts, and warrants an immediate high-severity alert and investigation.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Windows Defender Firewall with Advanced Security log
      - Network perimeter firewalls, VPN gateways, cloud network security groups (e.g., AWS Security Groups, Azure NSGs), and other internet-facing network appliances.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          JOIN (FROM network_logs WHERE direction=inbound)
          WITH (FROM threat_intel_ips)
          ON source_ip = malicious_ip
          ALERT on match
  - question: For IPs found on a threat intelligence feed, is there a statistically anomalous ratio of rejected to total connections?
    context: This question helps validate and prioritize alerts for IPs on CTI feeds. Scanners often generate a high number of failed or rejected connections. By calculating the ratio of rejected connections and comparing it to a baseline, we can statistically confirm if a flagged IP's behavior is consistent with scanning activity, reducing false positives from potentially stale or miscategorized CTI entries.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Windows Defender Firewall with Advanced Security log
      - Network perimeter firewalls, VPN gateways, cloud network security groups (e.g., AWS Security Groups, Azure NSGs), and other internet-facing network appliances.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip in threat_intel_ips:
            CALCULATE ratio = (COUNT where connection_state='rejected') / (COUNT all_connections) over 10_min_window
            CALCULATE baseline_ratio = baseline for all external traffic
            IF ratio > (baseline_ratio + 3 * STDEV(baseline_ratio)):
              ALERT for investigation
  - question: Can we classify an inbound connection as part of a malicious scan using a machine learning model?
    context: This question leverages a supervised machine learning model to provide a probabilistic assessment of whether a connection is malicious. By training on features like CTI matches, connection states, protocol, and source ASN, the model can identify complex patterns that simple rules might miss, offering a more nuanced and potentially more accurate method for detecting scanning activity.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Windows Defender Firewall with Advanced Security log
      - Network perimeter firewalls, VPN gateways, cloud network security groups (e.g., AWS Security Groups, Azure NSGs), and other internet-facing network appliances.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each inbound_connection:
            EXTRACT features (cti_match, conn_state, protocol, service, duration, source_asn)
            INPUT features into trained_classification_model
            IF model_output_probability > threshold:
              ALERT as malicious_scan
  - question: Are inbound HTTP/S requests using User-Agent strings or JA3/JA3S hashes associated with known scanning tools?
    context: This question aims to identify automated scanning tools by inspecting their unique fingerprints in network traffic. Many tools use default or characteristic User-Agent strings (e.g., 'nmap', 'sqlmap') or have specific TLS/SSL client configurations that result in a unique JA3/JA3S hash. Matching against a deny-list of these indicators is an effective way to detect reconnaissance.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Internet-facing web servers, reverse proxies, Web Application Firewalls (WAFs), and Application Load Balancers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SCAN http_logs for user_agent MATCHES regex_list_of_scanner_agents
          SCAN ssl_logs for ja3_hash IN deny_list_of_scanner_hashes
          ALERT on match
  - question: Are we observing rare User-Agent strings or JA3/JA3S hashes in inbound traffic that are not on an allow-list?
    context: This question uses rarity analysis to find outliers that may indicate a new or modified scanning tool. By establishing a baseline of common, legitimate User-Agents and JA3/JA3S hashes (e.g., from popular browsers), any indicator that is seen infrequently and is not on the allow-list becomes suspicious and warrants further investigation as a potential low-frequency scan or custom tool.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Internet-facing web servers, reverse proxies, Web Application Firewalls (WAFs), and Application Load Balancers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CALCULATE frequency of all user_agents and ja3_hashes over 24_hours
          FOR each unique_indicator:
            IF frequency < 5 AND indicator NOT IN allow_list:
              FLAG for analysis
  - question: Can an unsupervised anomaly detection model identify suspicious HTTP/S requests based on header characteristics?
    context: This question applies machine learning to detect anomalous requests without relying on predefined signatures. An unsupervised model, like an Isolation Forest, can learn the characteristics of normal traffic from features like header length, entropy, and structure. It can then flag requests that deviate significantly from this norm, which is useful for identifying novel or obfuscated scanning techniques.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Internet-facing web servers, reverse proxies, Web Application Firewalls (WAFs), and Application Load Balancers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each http_request:
            EXTRACT features (user_agent_length, user_agent_entropy, header_presence, ja3_hash)
            INPUT features into trained_anomaly_detection_model
            IF model_anomaly_score > threshold:
              FLAG as anomalous_request
  - question: Is a single source IP generating a high number of connections with states indicative of scanning (e.g., SYN-only, rejected) within a short time frame?
    context: This question uses a simple threshold to detect common scanning behaviors. Scans like SYN scans (half-open) or scans against closed ports generate a large volume of connections that never fully establish ('S0') or are actively rejected ('REJ'). Alerting when a single source exceeds a threshold for these events in a minute is a direct way to identify active network probing.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Windows Defender Firewall with Advanced Security log (Event ID 2004)
      - Network perimeter firewalls, internet-facing hosts, and Internet-facing Windows Servers (e.g., IIS, RDP gateways).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip:
            COUNT connections where state in ('S0', 'REJ', 'RSTRH') over 1_min_window
            IF count > 100:
              ALERT for scanning
          MONITOR weird_logs for 'bad_TCP_header_len', 'TCP_Christmas_scan' from single source
  - question: Does the distribution of connection states from a single source IP deviate statistically from the normal traffic profile?
    context: This question provides a more robust statistical method for detecting scanning. Normal traffic has a predictable distribution of connection states (e.g., mostly 'SF' for established and finished). A scanner's traffic will have a very different distribution. Using a chi-squared test to compare an IP's connection state distribution against the baseline can identify anomalous patterns characteristic of scanning.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Windows Defender Firewall with Advanced Security log (Event ID 2004)
      - Network perimeter firewalls, internet-facing hosts, and Internet-facing Windows Servers (e.g., IIS, RDP gateways).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip over 5_min_window:
            CALCULATE distribution of connection_states
            COMPARE distribution to baseline_profile using chi_squared_test
            IF deviation is statistically_significant:
              FLAG IP as anomalous
  - question: Is a source IP exhibiting a sudden burst of anomalous connection states that deviates from its predicted behavior?
    context: This question uses time series forecasting to detect sudden changes in behavior. By modeling the expected number of anomalous connections ('S0', 'REJ', etc.) per minute from a source IP, the model can alert when the actual count suddenly spikes beyond the predicted range. This is effective for catching scanners that begin activity abruptly.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Windows Defender Firewall with Advanced Security log (Event ID 2004)
      - Network perimeter firewalls, internet-facing hosts, and Internet-facing Windows Servers (e.g., IIS, RDP gateways).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip:
            CREATE time_series of anomalous_connection_counts per minute
            USE forecasting_model to predict next_interval_count
            IF observed_count > prediction_confidence_interval:
              ALERT for scan_burst
  - question: Is a single source IP connecting to an unusually large number of distinct ports on one host (vertical scan) or distinct hosts on one port (horizontal scan)?
    context: This question aims to detect two classic scanning patterns using fixed thresholds. A vertical scan checks for open services on a single target, while a horizontal scan looks for a specific open service across many targets. Counting distinct ports per host and distinct hosts per port within a short window provides a direct and simple method for identifying this behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek icmp.log
      - Network perimeter firewalls, demilitarized zone (DMZ) segments, and Cloud VPC Flow Logs.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip over 1_min_window:
            CALCULATE distinct_ports_per_dest_host
            CALCULATE distinct_hosts_per_dest_port
            IF distinct_ports_per_dest_host > 50:
              ALERT as vertical_scan
            IF distinct_hosts_per_dest_port > 50:
              ALERT as horizontal_scan
  - question: Is a source IP exceeding a dynamically calculated percentile threshold for unique destination ports or hosts contacted?
    context: This question improves upon fixed thresholds by using dynamic ones based on recent network-wide activity. By calculating the 99th percentile for unique ports and hosts contacted across all sources, the system can adapt to changes in traffic volume and patterns. This makes the detection more resilient and reduces false positives compared to a static number.
    answer_sources:
      - Zeek conn.log
      - Zeek icmp.log
      - Network perimeter firewalls, demilitarized zone (DMZ) segments, and Cloud VPC Flow Logs.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          OVER 5_min_window:
            CALCULATE 99th_percentile for unique_dest_ports across all sources (port_threshold)
            CALCULATE 99th_percentile for unique_dest_hosts across all sources (host_threshold)
          FOR each source_ip:
            IF unique_dest_ports > port_threshold OR unique_dest_hosts > host_threshold:
              FLAG IP as scanner
  - question: Can we identify scanning behavior by finding dense clusters in a feature space of source IP, destination IP, and destination port?
    context: This question uses a clustering algorithm like DBSCAN to find scanning patterns visually and programmatically. When plotted, vertical scans appear as a dense vertical line (one source IP, many ports), and horizontal scans appear as a dense horizontal line (one source IP, many hosts). Clustering algorithms can automatically identify these dense regions, which represent scanning activity, without needing predefined thresholds.
    answer_sources:
      - Zeek conn.log
      - Zeek icmp.log
      - Network perimeter firewalls, demilitarized zone (DMZ) segments, and Cloud VPC Flow Logs.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          INPUT 5_min_batches of [Source IP, Destination IP, Destination Port] into DBSCAN_model
          IDENTIFY dense clusters
          IF cluster_shape resembles vertical_line:
            FLAG as vertical_scan
          IF cluster_shape resembles horizontal_line:
            FLAG as horizontal_scan
  - question: Is a source IP connecting to a high number of unique ports over a long period, but with a high average time between new connections?
    context: This question uses a heuristic rule to identify 'low and slow' scanning, an evasive technique designed to defeat simple rate-based detection. By looking for a combination of a high total number of unique ports contacted over 24 hours and a large average time delay between those connections, we can flag suspicious activity that would otherwise appear normal in short time windows.
    answer_sources:
      - Zeek conn.log
      - Network perimeter firewalls, log aggregation systems, and SIEM/Data Lake holding long-term network logs.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip over 24_hours:
            CALCULATE avg_time_delta between new_port_connections
            CALCULATE cumulative_unique_ports
            IF avg_time_delta > 10_seconds AND cumulative_unique_ports > 100:
              FLAG for manual_review as 'low and slow'
  - question: Does a source IP exhibit an anomalously high Shannon entropy based on the set of destination ports it connects to over an hour?
    context: This question uses information theory to detect scanning. A scanner connecting to many different, random-seeming ports will have a high Shannon entropy, while normal traffic to a few common ports will have low entropy. By establishing a baseline for normal entropy values, we can flag any source IP that exceeds a high percentile (e.g., 98th) as a likely scanner.
    answer_sources:
      - Zeek conn.log
      - Network perimeter firewalls, log aggregation systems, and SIEM/Data Lake holding long-term network logs.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip over 1_hour_window:
            CREATE list of unique destination_ports
            CALCULATE shannon_entropy of the list
            CALCULATE baseline_entropy_distribution for normal traffic
            IF entropy > 98th_percentile of baseline:
              FLAG IP as scanner
  - question: Does a source IP's hourly destination port entropy pattern show a high reconstruction error when processed by a recurrent neural network (RNN) autoencoder?
    context: This question uses an advanced anomaly detection technique to identify evasive scanning over time. An RNN autoencoder is trained to learn the 'normal' time series patterns of hourly port entropy. When a scanner's entropy pattern—which may be erratic or consistently high—is fed to the model, it will fail to reconstruct it accurately, resulting in a high reconstruction error. This error is a strong signal of an anomalous, potentially malicious, pattern.
    answer_sources:
      - Zeek conn.log
      - Network perimeter firewalls, log aggregation systems, and SIEM/Data Lake holding long-term network logs.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each source_ip:
            CREATE time_series of hourly_destination_port_entropy
            INPUT time_series into trained_RNN_autoencoder
            CALCULATE reconstruction_error
            IF reconstruction_error > threshold:
              FLAG as anomalous_pattern