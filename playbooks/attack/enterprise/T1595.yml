name: T1595: Active Scanning
id: b2a8f8d6-4c1e-4b8a-9f0d-3c2e1b9a7d6c
description: This playbook helps determine if an adversary is performing active scanning against an organization's external infrastructure. It provides investigative questions to detect various scanning techniques, including the use of threat-intelligence-listed IPs, scanner-specific user-agents and TLS fingerprints, anomalous TCP connection states indicative of reconnaissance, high-volume vertical and horizontal port/host scanning, and slow, evasive probing identified through entropy analysis.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any inbound connections originating from an IP address present on a subscribed threat intelligence feed?
    context: |
      This question uses Indicator of Compromise (IOC) matching to identify known malicious actors. By comparing inbound source IPs against a curated list of known scanners, malicious hosts, or anonymizing proxies from threat intelligence feeds, analysts can quickly detect and respond to obvious reconnaissance attempts with high confidence.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Windows Defender Firewall with Advanced Security log
      - Network perimeter firewalls, VPN gateways, cloud network security groups (e.g., AWS Security Groups, Azure NSGs), and other internet-facing network appliances.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN network_logs ON source_ip WITH threat_intel_feed ON ip;
          ALERT on match;
  - question: For IPs found on a threat intelligence feed, is there a statistically significant ratio of rejected to total connections?
    context: |
      This question adds a layer of statistical validation to an IOC match. A high ratio of rejected connections from a known-malicious IP strongly suggests an active, indiscriminate scan, as the IP attempts to connect to closed ports. This helps prioritize alerts and differentiate between a targeted connection and a broad scanning pattern.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Windows Defender Firewall with Advanced Security log
      - Network perimeter firewalls, VPN gateways, cloud network security groups (e.g., AWS Security Groups, Azure NSGs), and other internet-facing network appliances.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip on threat_intel_feed:
            CALCULATE ratio = (count of rejected_connections / count of total_connections) in 10-min window;
            IF ratio > 3_std_dev_of_baseline THEN ALERT;
  - question: Can a machine learning model classify inbound connections as part of a malicious scan based on features like threat intelligence matches, connection state, and protocol?
    context: |
      This question leverages machine learning to create a sophisticated detection mechanism. A supervised classification model can learn complex patterns from multiple features (CTI match, connection state, protocol, duration, ASN) to predict the probability of a connection being malicious. This provides a more nuanced and potentially more accurate detection than simple rules alone.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Windows Defender Firewall with Advanced Security log
      - Network perimeter firewalls, VPN gateways, cloud network security groups (e.g., AWS Security Groups, Azure NSGs), and other internet-facing network appliances.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each connection:
            EXTRACT features (is_on_cti_feed, conn_state, protocol, duration, source_asn);
            INPUT features into trained_classification_model;
            IF model_probability_score > threshold THEN ALERT;
  - question: Are there any inbound HTTP/S requests with User-Agent strings or JA3/JA3S hashes matching known scanning tools?
    context: |
      This question focuses on identifying automated scanning tools by their unique fingerprints. Many scanners use default or identifiable User-Agent strings (e.g., 'nmap', 'sqlmap') or have specific TLS negotiation characteristics that produce a consistent JA3/JA3S hash. Matching these IOCs in web and SSL logs is a reliable way to detect application-layer reconnaissance.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Internet-facing web servers, reverse proxies, Web Application Firewalls (WAFs), and Application Load Balancers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH http_logs for user_agent matching scanner_regex_list;
          SEARCH ssl_logs for ja3_hash in scanner_ja3_denylist;
          ALERT on match;
  - question: Are there any rare or infrequent User-Agent strings or JA3/JA3S hashes observed in inbound traffic?
    context: |
      This question uses rarity analysis to find outliers that may indicate a scanning tool. While legitimate clients (like popular web browsers) produce common User-Agents and JA3/JA3S hashes, custom or malicious tools often produce unique, rarely-seen values. By identifying values that fall below a frequency threshold and are not on an allow-list, analysts can uncover novel or customized scanning activity.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Internet-facing web servers, reverse proxies, Web Application Firewalls (WAFs), and Application Load Balancers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE frequency of all user_agents and ja3_hashes in 24-hr window;
          IF (frequency < threshold) AND (value NOT in common_allow_list) THEN ALERT;
  - question: Can an unsupervised machine learning model detect anomalous HTTP/S requests based on header features?
    context: |
      This question applies unsupervised machine learning to detect unusual HTTP/S requests without prior knowledge of what is 'bad'. By training a model on features like header length, entropy, and the presence of common headers, the system can learn a baseline of normal request structures. Requests that deviate significantly from this baseline, as indicated by a high anomaly score, are flagged for investigation, enabling the detection of new or evasive scanning techniques.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Internet-facing web servers, reverse proxies, Web Application Firewalls (WAFs), and Application Load Balancers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each http_request:
            EXTRACT header_features (ua_length, ua_entropy, ja3_hash, etc.);
            INPUT features into trained_anomaly_detection_model;
            IF anomaly_score > threshold THEN ALERT;
  - question: Has any single source IP generated an abnormally high number of connections with states like 'S0', 'REJ', or 'RSTRH' in a short time frame?
    context: |
      This question aims to detect common scan types by looking for their network-level signatures. A large number of 'S0' connections (SYN scan), 'REJ' connections (port/host unreachable), or other non-established states from one source is a strong indicator of a reconnaissance scan. A simple threshold rule can effectively catch this high-volume, noisy activity.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Windows Defender Firewall with Advanced Security log (Event ID 2004)
      - Network perimeter firewalls, internet-facing hosts, and Internet-facing Windows Servers (e.g., IIS, RDP gateways).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip:
            COUNT connections where state is 'S0', 'REJ', or 'RSTRH' in a 1-min window;
            IF count > 100 THEN ALERT;
  - question: Does the distribution of connection states from any single source IP deviate statistically from the baseline of normal traffic?
    context: |
      This question uses statistical analysis to identify subtle scanning behavior. Normal traffic has a predictable distribution of connection states (mostly established, 'SF'). A scanner's traffic will have a very different distribution, skewed towards states like 'S0' or 'REJ'. A chi-squared test can quantify this difference, allowing for the detection of scanners whose activity might not be voluminous enough to trigger a simple threshold.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Windows Defender Firewall with Advanced Security log (Event ID 2004)
      - Network perimeter firewalls, internet-facing hosts, and Internet-facing Windows Servers (e.g., IIS, RDP gateways).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip:
            CALCULATE distribution of conn_states in a 5-min window;
            COMPARE distribution to normal_traffic_baseline using chi-squared_test;
            IF deviation is statistically_significant THEN ALERT;
  - question: Does the observed count of anomalous connection states from a source IP significantly exceed the forecasted count from a time series model?
    context: |
      This question uses time series forecasting to detect sudden bursts of scanning activity. A model like ARIMA or Prophet can learn the typical rate of anomalous connection states (e.g., 'S0', 'REJ') for a given source IP. An alert is triggered only when the observed rate sharply and unexpectedly increases beyond the model's prediction, effectively identifying a change in behavior indicative of a new scan starting.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Windows Defender Firewall with Advanced Security log (Event ID 2004)
      - Network perimeter firewalls, internet-facing hosts, and Internet-facing Windows Servers (e.g., IIS, RDP gateways).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip:
            FORECAST expected_count of anomalous_conn_states using time_series_model;
            IF observed_count > forecasted_confidence_interval THEN ALERT;
  - question: Has any single source IP connected to an excessive number of unique destination ports on one host (vertical scan) or unique destination hosts on one port (horizontal scan)?
    context: |
      This question targets the two primary forms of network scanning. A vertical scan probes many ports on a single target to find open services, while a horizontal scan checks for a single open port across many targets. By counting distinct destination ports per host and distinct destination hosts per port from a single source, simple thresholds can effectively detect both types of scanning.
    answer_sources:
      - Zeek conn.log
      - Zeek icmp.log
      - Network perimeter firewalls, demilitarized zone (DMZ) segments, and Cloud VPC Flow Logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip in 1-min window:
            IF count(distinct dest_ports) on a single dest_host > 50 THEN ALERT 'Vertical Scan';
            IF count(distinct dest_hosts) on a single dest_port > 50 THEN ALERT 'Horizontal Scan';
  - question: Does any source IP exceed the 99th percentile for the number of unique destination ports or hosts contacted across all sources?
    context: |
      This question uses dynamic, percentile-based thresholds instead of fixed ones to adapt to changing network conditions. By calculating the 99th percentile of 'fan-out' (number of unique ports/hosts contacted) across all sources, the system establishes a data-driven baseline for normal behavior. Any source exceeding this dynamic threshold is flagged as an outlier, making the detection more robust and less prone to false positives from static thresholds.
    answer_sources:
      - Zeek conn.log
      - Zeek icmp.log
      - Network perimeter firewalls, demilitarized zone (DMZ) segments, and Cloud VPC Flow Logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE 99th_percentile for unique_dest_ports and unique_dest_hosts across all sources in 5-min window;
          FOR each source_ip:
            IF unique_dest_ports > 99th_percentile_ports OR unique_dest_hosts > 99th_percentile_hosts THEN ALERT;
  - question: Can a clustering algorithm identify dense groups of connections indicative of vertical or horizontal scanning?
    context: |
      This question employs clustering algorithms like DBSCAN to discover scanning patterns visually and programmatically. When plotted in a feature space of [Source IP, Destination IP, Destination Port], scan traffic forms dense, geometric shapes. A vertical scan appears as a dense vertical line (one source, many ports), and a horizontal scan appears as a dense horizontal line (one source, many hosts). This method can uncover complex scan patterns that might evade simpler counting methods.
    answer_sources:
      - Zeek conn.log
      - Zeek icmp.log
      - Network perimeter firewalls, demilitarized zone (DMZ) segments, and Cloud VPC Flow Logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          APPLY DBSCAN clustering to connection data [source_ip, dest_ip, dest_port];
          IDENTIFY dense linear clusters;
          ALERT on identified clusters as potential scans;
  - question: Is any source IP connecting to a large number of unique ports over a long period, but with a high average time between new connections?
    context: |
      This question uses a heuristic rule to detect 'low and slow' scanning, a technique used to evade detection by being less noisy. An attacker may probe one port every few minutes. While the rate is low, the cumulative number of unique ports probed over 24 hours will be high. This combination of a high time delta and a high cumulative count is a strong indicator of an evasive scanner.
    answer_sources:
      - Zeek conn.log
      - Network perimeter firewalls, log aggregation systems, and SIEM/Data Lake holding long-term network logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip over 24 hours:
            CALCULATE avg_time_delta between new port connections;
            CALCULATE total_unique_ports;
            IF avg_time_delta > 10s AND total_unique_ports > 100 THEN ALERT 'Low and Slow Scan';
  - question: Does the Shannon entropy of destination ports for any source IP exceed the statistical baseline for normal traffic?
    context: |
      This question uses information theory to quantify the randomness of a source's connections, which is characteristic of scanning. A scanner probing many different, non-sequential ports will have a high Shannon entropy. By establishing a baseline entropy level for normal traffic and flagging sources that exceed the 98th percentile, analysts can identify sources exhibiting highly random, scan-like behavior, even if the scan is slow.
    answer_sources:
      - Zeek conn.log
      - Network perimeter firewalls, log aggregation systems, and SIEM/Data Lake holding long-term network logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip in 1-hr window:
            CALCULATE shannon_entropy of destination_port_list;
            IF entropy > 98th_percentile_of_baseline THEN ALERT;
  - question: Can a machine learning model detect anomalous patterns in the time series of a source IP's destination port entropy?
    context: |
      This question applies advanced machine learning to detect changes in scanning behavior over time. An RNN autoencoder can learn the 'normal' pattern of port entropy for benign sources. When a source begins an evasive scan, its entropy time series will change. The model will fail to reconstruct this new, anomalous pattern accurately, resulting in a high reconstruction error that signals a potential threat.
    answer_sources:
      - Zeek conn.log
      - Network perimeter firewalls, log aggregation systems, and SIEM/Data Lake holding long-term network logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip:
            CREATE time series of hourly port entropy;
            INPUT time_series into trained_rnn_autoencoder;
            IF reconstruction_error > threshold THEN ALERT;