name: T1001.003: Protocol or Service Impersonation
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if an adversary is attempting to blend command and control (C2) traffic by impersonating legitimate protocols or services. This involves looking for several key indicators: connections from internal hosts to known malicious infrastructure (IPs, domains, ASNs) found in threat intelligence feeds; TLS or HTTP traffic containing artifacts specific to C2 frameworks (e.g., JA3/JA3S hashes, User-Agents, suspicious SSL certificates); network connections initiated by processes that should not normally access the network (e.g., lsass.exe); automated C2 beaconing characterized by highly periodic connections with low jitter; connections on well-known ports that do not conform to the expected application-layer protocol (e.g., non-TLS over port 443); and connections with atypical data transfer ratios, such as large uploads over DNS or HTTP GET requests.
type: technique
related:
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has any internal host connected to an IP address, domain, or ASN known to be associated with command and control infrastructure?
  context: This question aims to identify direct connections to known malicious endpoints by cross-referencing network connection logs with a high-confidence threat intelligence feed. A match provides a strong indication of a compromise, as it shows communication with infrastructure already identified as part of an adversary's C2 network. This is a fundamental, high-fidelity check for known threats.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Internet Gateway
  - Egress Firewalls
  - DNS Resolvers
  - Web Proxies
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each connection in (conn.log, http.log, dns.log)
        LET destination = connection.destination_ip OR connection.host_header OR connection.dns_query
        IF destination IN CTI_feed_of_C2_indicators
          ALERT on connection
- question: Are a statistically unusual number of internal hosts connecting to the same newly observed external destination?
  context: This question looks for the 'fan-out' effect, where a new malicious domain or IP suddenly receives connections from many different hosts within the organization. This pattern is characteristic of a widespread malware campaign where compromised machines are all calling home to the same new C2 server. By focusing on newly seen destinations and identifying statistical outliers in connection counts, this approach can detect emerging C2 infrastructure before it is added to threat intelligence feeds.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Internet Gateway
  - Egress Firewalls
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE new_destinations = destinations not seen before today
      FOR each destination in new_destinations
        CALCULATE unique_source_count over last 1 hour
        IF unique_source_count > 95th_percentile_of_fanout
          ALERT on destination
- question: Can machine learning models identify network connections to potential emerging C2 servers based on connection features and enriched CTI data?
  context: This question leverages a machine learning classifier to identify malicious connections that may not match known indicators but exhibit suspicious characteristics. The model is trained on features like connection state, data volume, and protocol, enriched with contextual data like domain age and IP reputation. A high 'malicious' probability score for a connection to a destination that isn't on a blocklist can proactively flag new or unknown C2 servers, moving beyond simple signature-based detection.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Internet Gateway
  - Egress Firewalls
  - DNS Resolvers
  - Web Proxies
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each connection
        EXTRACT features (conn_state, bytes, protocol, etc.)
        ENRICH with CTI (domain age, IP reputation, etc.)
        PREDICT classification using trained ML model
        IF prediction_score > threshold_for_malicious
          ALERT on connection
- question: Are there any TLS or HTTP connections that match known C2 framework signatures like specific JA3/JA3S hashes, User-Agents, or SSL certificate details?
  context: This question focuses on identifying C2 communications by matching specific, hardcoded artifacts associated with known C2 frameworks. Adversary tools often have unique fingerprints, such as the way they construct a TLS handshake (JA3/JA3S), the User-Agent string they send in HTTP requests, or patterns in the SSL certificates they use. Alerting on a match against a curated list of these indicators provides high-confidence detection of a specific malware family or tool.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek x509.log
  - Internet Gateway
  - Web Proxies
  - TLS-terminating Firewalls
  - Intrusion Detection/Prevention Systems (IDS/IPS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE known_c2_signatures = list of (JA3/JA3S hashes, User-Agents, URI patterns, SSL subjects)
      FOR each connection in (ssl.log, http.log, x509.log)
        IF connection.JA3_hash IN known_c2_signatures OR connection.User_Agent IN known_c2_signatures OR connection.URI matches pattern OR connection.cert_subject IN known_c2_signatures
          ALERT on connection
- question: Are there any SSL certificates with unusually low entropy in their subject/issuer fields or abnormally short validity periods?
  context: Adversaries often use default, simplistic, or self-signed SSL certificates for their C2 infrastructure. This question aims to find these outliers statistically. Certificates with very low Shannon entropy in their subject/issuer fields often contain default or non-random values (e.g., 'localhost'). Similarly, an unusually short validity period (e.g., less than 30 days) can be indicative of a temporary, adversary-controlled server, contrasting with legitimate services that typically use certificates valid for months or years.
  answer_sources:
  - Zeek ssl.log
  - Zeek x509.log
  - Internet Gateway
  - Web Proxies
  - TLS-terminating Firewalls
  - Intrusion Detection/Prevention Systems (IDS/IPS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each certificate in x509.log
        CALCULATE entropy of subject/issuer fields
        CALCULATE validity_duration
        IF entropy < 5th_percentile OR validity_duration < 5th_percentile
          ALERT on certificate
- question: Can clustering algorithms identify small, anomalous groups of web traffic that deviate from normal browsing behavior, potentially indicating a specific C2 framework?
  context: This question uses an unsupervised machine learning approach to find C2 activity without prior knowledge of its signatures. Most web traffic (from browsers, APIs, etc.) forms large, dense clusters based on features like User-Agent strings, URI structures, and JA3 hashes. C2 traffic from a specific tool often forms its own small, distinct cluster. By using an algorithm like DBSCAN, we can isolate these small, anomalous clusters, which represent a group of hosts likely communicating with the same C2 framework.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek x509.log
  - Internet Gateway
  - Web Proxies
  - TLS-terminating Firewalls
  - Intrusion Detection/Prevention Systems (IDS/IPS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      EXTRACT feature vectors from http.log and ssl.log (User-Agent entropy, URI depth, JA3 hash, etc.)
      APPLY DBSCAN clustering algorithm to feature vectors
      FOR each cluster identified
        IF cluster_size is small and distinct from large legitimate clusters
          ALERT on all connections in the cluster
- question: Has a sensitive system process, which should not normally access the network, initiated an outbound connection?
  context: This question aims to detect a common technique where malware injects into or masquerades as a legitimate, trusted Windows process (e.g., lsass.exe, smss.exe) to establish C2. These core system processes have no valid reason to make direct outbound network connections. Correlating process creation events with network connection events and alerting when a process from a predefined watchlist communicates externally is a high-fidelity method for detecting this type of C2 channel.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Zeek conn.log
  - Domain Controllers
  - Critical Application Servers
  - User Workstations
  - Endpoints of privileged users
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE sensitive_processes = (lsass.exe, smss.exe, csrss.exe, etc.)
      JOIN Process_Creation_Events with Network_Connection_Events on Host and ProcessID
      IF Process_Name IN sensitive_processes AND Connection is outbound
        ALERT on event
- question: Is there a process making a network connection that was spawned by a rare or suspicious parent process, or with a high-entropy command line?
  context: This question seeks to identify suspicious process lineage and execution parameters associated with network activity. Adversaries often use legitimate applications (e.g., Microsoft Word) to launch command-line interpreters (e.g., powershell.exe) that then make outbound connections. By building a historical baseline of normal parent-child process relationships that lead to network connections, we can statistically score and alert on rare or anomalous chains (e.g., WINWORD.EXE -> cmd.exe -> outbound connection), which are highly indicative of malicious activity. High-entropy command lines can also indicate obfuscated or randomized scripts.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Zeek conn.log
  - Domain Controllers
  - Critical Application Servers
  - User Workstations
  - Endpoints of privileged users
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each networking process
        GET parent process and command line
        CALCULATE rarity score for (parent, child, destination) triplet
        CALCULATE entropy of command line
        COMBINE into a total risk score
        IF risk_score > 98th_percentile of historical scores for that process
          ALERT on process
- question: Can a machine learning model detect anomalous process networking activity that deviates from a learned baseline for a given host role?
  context: This question applies unsupervised machine learning to detect novel malicious behavior on a per-host basis. A model like a one-class SVM or isolation forest is trained on features representing normal network activity for a specific host type (e.g., a web server's typical processes, ports, and destinations). Any new network connection that the model flags as an anomaly—because it deviates significantly from this learned baseline—is suspicious. This can catch sophisticated attacks where adversaries use custom tools that don't match any known signatures.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Zeek conn.log
  - Domain Controllers
  - Critical Application Servers
  - User Workstations
  - Endpoints of privileged users
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host role (e.g., workstation, web server)
        TRAIN one-class SVM model on normal process network activity features
      FOR each new network connection
        EXTRACT features (process name, parent, command hash, port, etc.)
        IF model classifies connection as an anomaly/outlier
          ALERT on connection
- question: Are there any network connections to a single destination that exhibit highly regular, low-jitter timing and consistent duration, matching known C2 beaconing profiles?
  context: This question uses a symbolic approach to find classic C2 beaconing behavior. Many C2 frameworks, like Cobalt Strike, have default configurations that cause compromised hosts to check in with the C2 server at a fixed interval (e.g., every 60 seconds). By searching for a series of connections from a source to a destination where the time between connections is nearly constant (low jitter) and the connection duration is short and uniform, we can directly identify this automated, non-interactive activity.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - Network Taps/Sensors
  - Core network switch SPAN/TAP ports
  - Firewall Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GROUP connections by source_ip, destination_ip
      CALCULATE time deltas between consecutive connections
      CALCULATE connection durations
      IF time_delta is consistent (e.g., 60s +/- 5s) AND duration is consistent (e.g., < 1s)
        ALERT on connection group
- question: Are there any source-destination communication pairs showing a statistically low standard deviation in the time between connections, indicating automated beaconing?
  context: This question uses a statistical method to find C2 beaconing that may not match a known, fixed interval. Instead of looking for a specific timing, it calculates the standard deviation (jitter) of the time between connections for each source-destination pair. Human-generated traffic is typically bursty and irregular, resulting in high jitter. Automated beaconing, even if the interval is randomized within a range, will have a much lower jitter. Flagging pairs with a standard deviation below a certain threshold can effectively identify this machine-generated periodicity.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - Network Taps/Sensors
  - Core network switch SPAN/TAP ports
  - Firewall Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GROUP connections by source_ip, destination_ip over a 1-hour window
      CALCULATE time deltas between consecutive connections
      CALCULATE standard_deviation of time deltas (jitter)
      IF jitter < 2 seconds AND mean_interval is between 5s and 600s
        ALERT on connection group
- question: Can a Fast Fourier Transform (FFT) analysis of connection time series data reveal an abnormally strong periodic signal, characteristic of automated C2 beaconing?
  context: This question applies a signal processing technique to find beaconing. A time series of connection events is converted from the time domain to the frequency domain using an FFT. Random, human-driven traffic will have a noisy, flat frequency spectrum. In contrast, highly periodic beaconing will show up as a sharp, strong peak at a specific frequency (corresponding to the beacon interval). An anomaly detection model can then flag any source-destination pair with an unusually strong peak in its frequency spectrum, indicating a high likelihood of automated C2 communications.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - Network Taps/Sensors
  - Core network switch SPAN/TAP ports
  - Firewall Logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source-destination pair
        CREATE time series of connection events
        APPLY Fast Fourier Transform (FFT) to the time series
        ANALYZE resulting frequency spectrum
        IF a sharp, high-amplitude peak is detected
          ALERT on the source-destination pair
- question: Are there connections on standard service ports (like 443) that do not use the expected protocol (e.g., non-TLS traffic) or generate specific protocol violation alerts?
  context: Adversaries often tunnel their C2 traffic over common ports like 443 (HTTPS) to bypass firewall egress rules. However, their custom protocol may not be actual TLS. This question aims to find these mismatches. By joining connection logs with SSL logs, we can find traffic on port 443 that never completed a TLS handshake. Additionally, network security monitoring tools like Zeek generate specific 'weird' notices for protocol violations, which are strong indicators of this technique.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek weird.log
  - Internet Gateway
  - Internal Network Segments via Zeek sensors
  - DMZ
  - Network Security Monitoring (NSM) sensor locations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN conn.log with ssl.log on connection UID
      IF conn.log.port == 443 AND no matching entry in ssl.log
        ALERT on connection
      IF weird.log shows 'active_protocol_violation'
        ALERT on notice
- question: Has there been a statistically significant spike in the rate of specific TLS handshake errors from a host or across the network?
  context: This question looks for anomalies in TLS handshake validation. While some TLS errors (like for self-signed certificates) are common on internal networks, a sudden, sharp increase in a specific error type, especially from a single host, is highly abnormal. This could indicate a misconfigured C2 tool attempting to communicate, or an adversary probing defenses. By baselining the normal rate of various TLS errors and alerting on statistical deviations (e.g., >3 standard deviations from the mean), we can detect this suspicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek weird.log
  - Internet Gateway
  - Internal Network Segments via Zeek sensors
  - DMZ
  - Network Security Monitoring (NSM) sensor locations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      PROFILE historical hourly rate of each 'validation_status' in ssl.log
      CALCULATE current hourly rate for each status
      IF current_rate > (mean_rate + 3 * standard_deviation)
        ALERT on the anomalous error rate
- question: Can a machine learning model trained on legitimate TLS handshakes identify anomalous handshakes that may be part of a custom C2 protocol mimicking TLS?
  context: This question uses machine learning to detect C2 tools that try to impersonate TLS but get the details wrong. A one-class SVM model can be trained on feature vectors from legitimate TLS handshakes (e.g., cipher suite choice, TLS version, extensions used). The model learns the complex pattern of a 'normal' handshake. When a C2 tool uses a custom implementation, it will likely deviate from this norm in subtle ways. The model can identify these anomalous handshakes as outliers, providing a way to detect unknown or custom C2 protocols.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek weird.log
  - Internet Gateway
  - Internal Network Segments via Zeek sensors
  - DMZ
  - Network Security Monitoring (NSM) sensor locations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN one-class SVM on feature vectors from legitimate TLS handshakes in ssl.log
      FOR each new TLS handshake
        EXTRACT feature vector
        IF model classifies handshake as an outlier/anomaly
          ALERT on the connection
- question: Are there connections that violate explicit rules for data transfer, such as large data uploads over DNS or via an HTTP GET request?
  context: This question looks for clear violations of protocol standards that are often abused for data exfiltration or C2. The DNS protocol, for example, is designed for short queries and responses; a query larger than 255 bytes is highly suspicious and indicative of DNS tunneling. Similarly, an HTTP GET request should not have a large request body. Defining and alerting on these strict, symbolic rules can provide high-fidelity alerts for C2 channels that abuse legitimate protocols in illegitimate ways.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Internet Gateway
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      IF dns.log query_length > 255 bytes
        ALERT on DNS query
      IF http.log method == 'GET' AND request_body_len > 1MB
        ALERT on HTTP session
- question: Are there network connections with a client-to-server data transfer ratio that is a statistical outlier compared to the historical baseline for that destination port?
  context: This question aims to find C2 channels by analyzing the balance of data sent versus received. For a given protocol (e.g., HTTP on port 80), there is a typical ratio of uploaded (orig_bytes) to downloaded (resp_bytes) data. For example, web browsing involves small uploads and large downloads. C2 traffic, especially for data exfiltration, can reverse this, resulting in a large upload-to-download ratio. By creating a historical baseline of this ratio for each port and flagging connections that are statistical outliers, we can detect anomalous data transfers indicative of C2.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Internet Gateway
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each destination port (80, 443, 53)
        CALCULATE historical distribution of ratio R = orig_bytes / (orig_bytes + resp_bytes)
      FOR each new connection
        CALCULATE its ratio R
        IF R is in an extreme percentile (e.g., > 99th) for its port
          ALERT on connection
- question: Can density-based clustering identify outlier connections based on their sent vs. received byte counts, indicating atypical data exchange patterns used for C2?
  context: This question uses an unsupervised machine learning approach to find anomalous data transfer patterns. For common ports, legitimate traffic forms large, dense clusters in a 2D space defined by bytes sent and bytes received. For example, most web browsing on port 443 would cluster in a region of low bytes sent and high bytes received. A C2 channel used for exfiltration might appear as a lone 'noise' point with high bytes sent and low bytes received. A clustering algorithm like DBSCAN can automatically identify these outlier points that don't fit any normal traffic profile.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Internet Gateway
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each common port (80, 443, 53)
        PLOT connections on a [log(orig_bytes), log(resp_bytes)] graph
        APPLY DBSCAN clustering algorithm
        IDENTIFY points classified as 'noise' (outliers)
        ALERT on outlier connections