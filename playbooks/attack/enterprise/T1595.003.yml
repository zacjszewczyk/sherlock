name: T1595.003: Wordlist Scanning
id: 3c1a7b8e-9d0f-4a6b-8c5d-1e2f3a4b5c6d
description: Is the adversary performing reconnaissance against our perimeter using wordlist
  scanning? This playbook helps identify wordlist scanning by looking for several
  key indicators: inbound connections from known malicious IPs, HTTP requests with
  user-agents matching scanning tools, anomalous rates of HTTP errors from a single
  IP, high volumes of DNS queries for cloud storage endpoints with organizational
  keywords, and a high number of requests to the same URI path with iterating query
  parameters.
type: technique
related:
- TA0043: Reconnaissance
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are inbound connections originating from IP addresses known to be malicious
    based on threat intelligence feeds?
  context: This question aims to identify initial contact from known bad actors. By
    cross-referencing inbound source IP addresses with a curated threat intelligence
    database, analysts can quickly detect connections from known scanners, botnets,
    or other malicious entities, allowing for immediate blocking or further investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Network egress/ingress points (e.g., Firewalls, Edge Routers)
  - Web Application Firewalls (WAFs)
  - Reverse Proxies
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH conn.log, http.log
      JOIN source_ip WITH threat_intel_db.ip
      WHERE threat_intel_db.ip IS NOT NULL
      RETURN source_ip, destination_ip, timestamp, threat_category
- question: Are IPs on threat intelligence feeds exhibiting a high ratio of failed
    to successful web requests, suggesting scanning activity?
  context: This question helps differentiate between benign traffic from a potentially
    miscategorized IP and genuine malicious scanning. A high failure rate indicates
    the actor is likely probing for non-existent pages or vulnerabilities, a common
    behavior of wordlist scanning, thus justifying a higher alert priority.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Network egress/ingress points (e.g., Firewalls, Edge Routers)
  - Web Application Firewalls (WAFs)
  - Reverse Proxies
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http.log
      FILTER source_ip IN threat_intel_feed
      GROUP BY source_ip
      CALCULATE failure_ratio = COUNT(status_code >= 400) / COUNT(status_code < 400)
      COMPARE failure_ratio with historical_percentile(98)
      RETURN source_ip WHERE failure_ratio > threshold
- question: Can we use a machine learning model to classify inbound traffic from IPs
    on threat feeds as malicious with high confidence?
  context: This question leverages a machine learning model to provide a more nuanced
    and accurate assessment than static rules. By analyzing multiple features like
    connection frequency, data volume, and protocol usage, the model can identify
    complex patterns indicative of malicious scanning, even for previously unseen
    behaviors, and assign a confidence score to aid analyst prioritization.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Network egress/ingress points (e.g., Firewalls, Edge Routers)
  - Web Application Firewalls (WAFs)
  - Reverse Proxies
  - Threat Intelligence Feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT conn.log, http.log features (frequency, bytes, protocol_dist)
      APPLY classification_model
      RETURN source_ip WHERE model_score > 0.9
- question: Are there any inbound HTTP requests with User-Agent strings matching known
    scanning tools like 'gobuster', 'dirb', or 'nikto'?
  context: This is a direct and effective way to identify unsophisticated scanning
    attempts. Adversaries often use off-the-shelf tools that do not spoof their User-Agent
    string. Detecting these known strings provides a high-fidelity signal that a
    web server is being targeted for content discovery or vulnerability scanning.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Public-facing web servers
  - Application load balancers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http.log, iis.log
      FILTER user_agent MATCHES REGEX ('gobuster|dirb|ffuf|nikto|sqlmap')
      RETURN source_ip, user_agent, timestamp, requested_uri
- question: Are we observing new, never-before-seen User-Agent strings associated
    with a high request rate from a single source IP?
  context: This question helps detect custom or modified scanning tools that don't
    match known signatures. A novel User-Agent combined with aggressive request behavior
    (e.g., >10 req/sec) is highly suspicious and suggests an adversary is attempting
    to evade basic signature-based detection while performing a scan.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Public-facing web servers
  - Application load balancers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http.log, iis.log
      IDENTIFY new_user_agents by comparing to 30-day history
      FOR each new_user_agent
        CALCULATE request_rate per source_ip
        RETURN source_ip, new_user_agent WHERE request_rate > 10/sec
- question: Can an NLP model identify malicious User-Agent strings that are designed
    to look benign but deviate from normal patterns?
  context: This question addresses the challenge of adversaries spoofing User-Agent
    strings to mimic legitimate browsers. A character-level NLP model can learn the
    subtle structural and syntactic patterns of legitimate agents and flag malicious
    ones that, while not matching a known bad signature, are anomalous in their composition,
    thereby catching more sophisticated evasion attempts.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Public-facing web servers
  - Application load balancers
  - API Gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT http.log user_agent strings
      APPLY nlp_classification_model
      RETURN source_ip, user_agent WHERE classification == 'malicious-scanner'
- question: Is any single external IP address generating a high volume of HTTP errors
    (e.g., >100 404/403 errors in 1 minute)?
  context: This question targets brute-force directory and file discovery. A large
    number of 'Not Found' (404) or 'Forbidden' (403) errors from one source in a short
    time is a classic sign of wordlist scanning, where an attacker is guessing paths
    to find hidden content. This simple threshold-based rule is effective for detecting
    noisy, aggressive scanners.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Public-facing web servers
  - API Gateways
  - Cloud Storage Buckets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http.log, iis.log
      FILTER status_code IN [403, 404]
      AGGREGATE count by source_ip over 1_minute_window
      RETURN source_ip WHERE count > 100
- question: Is any source IP exhibiting an error-to-total-request ratio that is statistically
    anomalous compared to the normal baseline for the targeted web server?
  context: This question provides a more intelligent way to detect scanning by adapting
    to the normal behavior of each web asset. Some applications may naturally generate
    more errors than others. By establishing a dynamic baseline and using standard
    deviations, this method can accurately flag suspicious error rates that deviate
    from the norm for a specific host, reducing false positives.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Public-facing web servers
  - API Gateways
  - Cloud Storage Buckets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each destination_host
        CALCULATE baseline_error_ratio (30-day moving average) and std_dev
      FOR each source_ip in a 5_minute_window
        CALCULATE current_error_ratio
        RETURN source_ip WHERE current_error_ratio > (baseline_error_ratio + 3 * std_dev)
- question: Is a time-series anomaly detection model detecting unexpected spikes in
    the rate of 404 errors caused by specific source IPs?
  context: This question applies advanced anomaly detection to find scanning activity
    that might be too slow or subtle for simple thresholds or ratio analysis. A time-series
    model can learn the normal rhythm (including daily or weekly seasonality) of
    errors for each asset and identify even modest, but statistically significant,
    increases in errors from a single source that indicate a 'low-and-slow' scanning
    attempt.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Public-facing web servers
  - API Gateways
  - Cloud Storage Buckets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT time_series of 404_error_count per (source_ip, destination_host)
      APPLY seasonal_esd_anomaly_detection_model
      RETURN source_ip, destination_host, timestamp WHERE anomaly_detected
- question: Is a single source IP making an excessive number of DNS queries (>50 in
    10 minutes) for cloud storage buckets using our organization's keywords?
  context: This question aims to detect reconnaissance specifically targeting cloud
    storage assets. Adversaries often guess bucket names using permutations of company
    or project names. A high frequency of such DNS lookups from a single source is
    a strong indicator of an attempt to discover publicly accessible or misconfigured
    S3 buckets, Azure blobs, etc.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Cloud storage account boundaries (e.g., AWS account, Azure subscription)
  - Corporate DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH dns.log
      FILTER query MATCHES ('*acme-prod*.s3.amazonaws.com', '*acme-dev*.s3.amazonaws.com')
      AGGREGATE count by source_ip over 10_minute_window
      RETURN source_ip WHERE count > 50
- question: Are source IPs making sequential DNS requests for cloud storage names
    where the names are very similar to each other (low Levenshtein distance)?
  context: This question identifies a specific scanning pattern where an adversary
    iterates through a wordlist with minor variations (e.g., 'acme-prod-1', 'acme-prod-2',
    'acme-prod-bak'). Calculating the Levenshtein distance (a measure of string similarity)
    between successive requests reveals this systematic, non-random behavior, which
    is characteristic of automated enumeration tools.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Cloud storage account boundaries (e.g., AWS account, Azure subscription)
  - Corporate DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH dns.log or tls.sni
      FOR each source_ip
        EXTRACT list of requested_bucket_names
        CALCULATE average_levenshtein_distance between successive names
        RETURN source_ip WHERE count(requests) > 20 AND avg_distance < 3
- question: Can a clustering model group normal cloud access behavior and identify
    scanning activity as anomalous clusters or noise?
  context: This question uses an unsupervised machine learning approach to find attackers
    without pre-defined rules. By clustering connections based on features like request
    rate, randomness of queried names (entropy), and success ratio, the DBSCAN algorithm
    can automatically group legitimate user and application traffic. Scanning activity,
    which has different characteristics, will be isolated as 'noise' or form its
    own small, dense clusters, making it easy for an analyst to spot.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Cloud storage account boundaries (e.g., AWS account, Azure subscription)
  - Corporate DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT features (request_freq, subdomain_entropy, fail_ratio) from conn.log, dns.log
      APPLY DBSCAN clustering model
      RETURN points classified as noise or members of anomalous_clusters
- question: Is any source IP rapidly targeting a single URI path while trying many
    different query parameters from a known wordlist (e.g., 'debug', 'admin', 'id')?
  context: This question seeks to detect parameter fuzzing, a technique used to find
    hidden or unlinked functionality in a web application. By checking for a high
    volume of requests to one path with a rotating list of common administrative
    or debug parameters, this rule can catch attackers trying to discover vulnerabilities
    like insecure direct object references or hidden admin interfaces.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Web applications with complex user inputs
  - API endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http.log, iis.log
      FILTER query_parameter_name IN ('debug', 'test', 'admin', 'show', 'id', ...)
      AGGREGATE distinct_param_count by source_ip, uri_path over 5_minute_window
      RETURN source_ip, uri_path WHERE distinct_param_count > 50
- question: Are we observing an unusually high variety (Shannon entropy) of query
    parameter keys from a single IP for a specific URI, compared to its normal baseline?
  context: This question provides a statistical method to detect parameter fuzzing
    without relying on a static wordlist. Shannon entropy measures the randomness
    or unpredictability of a set of data. A high entropy score for the set of query
    parameters used by a single IP indicates that the IP is trying a wide and varied
    set of parameters, which is abnormal for legitimate users and highly indicative
    of automated scanning.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Web applications with complex user inputs
  - API endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each uri_path
        CALCULATE baseline_entropy for query_parameter_keys
      FOR each source_ip, uri_path in a 5_minute_window
        CALCULATE current_entropy of query_parameter_keys
        RETURN source_ip, uri_path WHERE current_entropy > percentile(baseline_entropy, 99)
- question: Can an autoencoder model detect anomalous URLs by identifying requests
    that don't match the learned normal structure for an application?
  context: This question describes a sophisticated machine learning technique for
    detecting novel or malformed requests. An autoencoder is trained to compress
    and decompress normal, legitimate URLs. When it encounters an anomalous URL, such
    as one with a fuzzed parameter, it will be unable to reconstruct it accurately,
    resulting in a high 'reconstruction error'. This allows the model to flag suspicious
    requests that deviate from learned patterns, even if they don't trigger other
    statistical or signature-based rules.
  answer_sources:
  - Zeek http.log
  - Microsoft-IIS-Logging
  - Web applications with complex user inputs
  - API endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT all URLs (path + parameters)
      APPLY autoencoder_model
      RETURN url, source_ip WHERE reconstruction_error > threshold