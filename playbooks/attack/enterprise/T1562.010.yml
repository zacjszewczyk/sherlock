name: T1562.010: Downgrade Attack
id: 8e29a3b1-4835-4f4d-8b01-5b2b24d7751c
description: This playbook addresses the adversary tactic of downgrading system features to evade defenses. It covers indicators such as the execution of processes or services using known vulnerable drivers (e.g., LOLDrivers), the explicit invocation of PowerShell version 2 to bypass modern security controls, registry modifications that disable features like Windows Defender or Hypervisor-Enforced Code Integrity (HVCI), network traffic using deprecated protocols like SSLv3 or TLS 1.0/1.1, a rapid sequence of distinct defense evasion activities on a single host, and the use of tools like bcdedit or manage-bde to disable boot integrity checks or BitLocker encryption.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process or service being created using a known vulnerable or outdated driver?
    context: This question aims to identify the use of known-bad drivers or tools (e.g., from the LOLDrivers project) that adversaries can abuse to gain kernel-level access or bypass security controls. Matching file hashes from process creation (Event ID 4688) or service creation (Event ID 7045) against a threat intelligence feed of vulnerable driver hashes provides a high-fidelity signal of a defense evasion attempt.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 7045
      - NAI: Domain Controllers, Critical Application Servers, Endpoint Workstations of privileged users, Systems with EDR/AV agents
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (EID 4688) OR service_creation_events (EID 7045) | JOIN file_hash with known_vulnerable_driver_hash_list | RETURN hostname, process_name, file_hash, user
  - question: Has a process or service been created with an executable or driver that is statistically rare in the environment?
    context: This question helps uncover potentially malicious drivers or tools that are not yet on a known-bad list. By calculating the enterprise-wide prevalence of file hashes associated with new processes and services, analysts can flag executables that are extremely rare (e.g., below the 5th percentile). Such rarity is a strong indicator of a non-standard, and possibly malicious, tool being introduced into the environment.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 7045
      - NAI: Domain Controllers, Critical Application Servers, Endpoint Workstations of privileged users, Systems with EDR/AV agents
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (EID 4688) OR service_creation_events (EID 7045) | CALCULATE prevalence of file_hash across enterprise over last 90 days | FILTER prevalence < 5th_percentile | RETURN hostname, process_name, file_hash, prevalence_score
  - question: Can a machine learning model identify a process or service creation event as malicious based on its characteristics?
    context: This question leverages a machine learning model to score the 'maliciousness' of new process and service creation events. By training a model on features like command-line arguments, parent process, user context, and hash prevalence, it can learn complex patterns indicative of an attack that might be missed by simple symbolic or statistical checks. An alert is triggered when an event's score exceeds a defined threshold, suggesting a high probability of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 7045
      - NAI: Domain Controllers, Critical Application Servers, Endpoint Workstations of privileged users, Systems with EDR/AV agents
    range: last 90 days
    queries:
      - language: pseudocode
        query: INPUT new process_creation_event (EID 4688) OR service_creation_event (EID 7045) | EXTRACT features (command_line, parent_process, user, file_path, hash_prevalence) | APPLY classification_model | IF malicious_score > threshold THEN ALERT
  - question: Is PowerShell being explicitly launched in version 2 mode?
    context: This question looks for a highly specific indicator of a downgrade attack. Adversaries intentionally invoke PowerShell version 2 (e.g., using '-v 2') because it lacks modern security features like Script Block Logging and the Antimalware Scan Interface (AMSI). Detecting this specific command-line argument is a high-confidence way to identify an attempt to operate under the radar of security monitoring.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 400
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (EID 4688) | FILTER process_name == 'powershell.exe' AND command_line CONTAINS '-v 2' OR '-version 2' | RETURN hostname, user, full_command_line
  - question: Is a user or host initiating a PowerShell v2 session when their historical usage is predominantly or exclusively newer versions?
    context: This question identifies anomalous behavior by baselining PowerShell version usage for each user and host. An alert is triggered if a PowerShell v2 session is started by an entity that has never, or very rarely, used it before. This statistical deviation from normal behavior can uncover a downgrade attack even if the activity is performed by a legitimate user account that has been compromised.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 400
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH powershell_engine_start_logs (EID 400) | BASELINE EngineVersion usage per user/host over 30 days | DETECT if current session is v2 AND historical v2 usage is rare (e.g., 99th percentile of rarity) | ALERT on anomaly
  - question: Does PowerShell v2 execution correlate with a sudden drop in expected script block logging volume?
    context: This question uses a time-series model to detect the effect of a PowerShell downgrade. The model predicts the expected volume of PowerShell Script Block logs (Event ID 4104) for a host. If a PowerShell v2 execution is observed and is immediately followed by a significant negative anomaly (i.e., logging stops when it shouldn't), it strongly implies the downgrade was successful in evading logging capabilities.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 400
      - NAI: All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - language: pseudocode
        query: MODEL time_series of script_block_log_volume (EID 4104) per host | DETECT PowerShell v2 execution (EID 4688) | IF v2_execution is followed by negative_anomaly in log_volume THEN ALERT
  - question: Has a registry key corresponding to a critical security feature been modified to an insecure state?
    context: This question targets direct attempts to disable security controls via the registry. It involves monitoring a specific watchlist of critical security keys (e.g., disabling Windows Defender or HVCI). Any modification (Event ID 4657) that sets these keys to a disabled or insecure value is a critical, high-fidelity indicator of a defense evasion attempt.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - NAI: Domain Controllers, Hyper-V Hosts, and Windows 10/11 Endpoints with Virtualization-Based Security (VBS) enabled
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH registry_modification_events (EID 4657) | FILTER registry_key IN critical_security_key_watchlist AND value_is_insecure (e.g., '1' for DisableAntiSpyware) | ALERT on match
  - question: Is a security-related registry key being modified by a statistically uncommon process?
    context: This question seeks to identify anomalous processes modifying sensitive registry keys. By baselining the typical processes that alter security settings (e.g., TrustedInstaller.exe), any modification made by a rare or unexpected process (like powershell.exe or a custom tool) can be flagged. This helps detect when a legitimate-looking process is being abused for malicious purposes.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - NAI: Domain Controllers, Hyper-V Hosts, and Windows 10/11 Endpoints with Virtualization-Based Security (VBS) enabled
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH registry_modification_events (EID 4657) targeting security_keys | CORRELATE with parent_process (EID 4688) | CALCULATE frequency of modifying processes | FILTER process not in top 95th percentile of legitimate modifiers | ALERT on anomaly
  - question: Does a machine learning model classify a specific registry modification event as malicious?
    context: This question uses a classification model to assess the likelihood that a registry modification is part of an attack. By analyzing features like the process name, user context, time of day, and the specific key path, the model can identify subtle patterns of malicious behavior that might not be caught by simple rules. A high probability score for a change affecting a security key is a strong indicator of a downgrade attack.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - NAI: Domain Controllers, Hyper-V Hosts, and Windows 10/11 Endpoints with Virtualization-Based Security (VBS) enabled
    range: last 90 days
    queries:
      - language: pseudocode
        query: INPUT registry_modification_event (EID 4657) | EXTRACT features (process_name, user, time_of_day, key_path) | APPLY classification_model | IF malicious_probability > threshold THEN ALERT
  - question: Is network traffic being observed that uses deprecated cryptographic protocols or cleartext over an encrypted port?
    context: This question aims to detect network-based downgrade attacks. It specifically looks for connections using outdated and insecure protocols like SSLv3, TLS 1.0, or TLS 1.1, which are vulnerable to interception. It also checks for the highly suspicious case of unencrypted HTTP traffic being sent over the standard HTTPS port (TCP/443), which indicates a protocol downgrade has occurred.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - NAI: Network Egress Points, Internal Network Segments (East-West traffic), VPN Concentrators, Reverse Proxies and Load Balancers
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH ssl.log | FILTER version IN ('SSLv3', 'TLSv10', 'TLSv11') | OR | SEARCH conn.log | FILTER dest_port == 443 AND service == 'http' | ALERT on match
  - question: Is there a statistically significant increase in the use of weak cryptographic protocols for any internal server?
    context: This question helps detect a targeted downgrade campaign against a specific internal asset. By establishing a rolling average of the ratio of weak (TLS < 1.2) to strong (TLS >= 1.2) protocols for each server, a sudden spike in this ratio (e.g., exceeding three standard deviations from the norm) can indicate that an adversary is forcing clients to connect to that server using weaker, more vulnerable encryption.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - NAI: Network Egress Points, Internal Network Segments (East-West traffic), VPN Concentrators, Reverse Proxies and Load Balancers
    range: last 90 days
    queries:
      - language: pseudocode
        query: ANALYZE ssl.log per server_ip | CALCULATE 30-day rolling average of (weak_tls_connections / strong_tls_connections) | ALERT if daily_ratio > 3 * standard_deviation_from_average
  - question: Can an unsupervised machine learning model identify anomalous TLS connections that might represent a downgrade attack?
    context: This question uses an anomaly detection model (like Isolation Forest) to find outlier TLS sessions that don't conform to normal patterns. The model analyzes a combination of features, including TLS version, cipher suite, JA3/JA3S hash, and validation status. Connections that are flagged as outliers deviate from established baselines and could represent sophisticated or novel downgrade attacks that symbolic rules might miss.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - NAI: Network Egress Points, Internal Network Segments (East-West traffic), VPN Concentrators, Reverse Proxies and Load Balancers
    range: last 90 days
    queries:
      - language: pseudocode
        query: INPUT ssl.log data | EXTRACT features (tls_version, cipher, ja3, ja3s, validation_status) | APPLY isolation_forest_model | ALERT on outlier_connections
  - question: Has a sequence of multiple distinct defense evasion activities occurred on a single host from the same parent process within a short time window?
    context: This question looks for a chain of related malicious activities, which is a strong indicator of an automated attack script. By creating a correlation rule that triggers when multiple high-risk events (like stopping a security service, modifying a security registry key, and running a defense evasion tool) are linked to the same parent process in a short timeframe (e.g., 5 minutes), analysts can detect a coordinated attack rather than isolated, potentially coincidental events.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - NAI: All Windows Endpoints and Servers, Privileged Access Workstations (PAWs), Critical Service Hosts
    range: last 90 days
    queries:
      - language: pseudocode
        query: CORRELATE events by ParentProcessID over 5-minute window | TRIGGER if (service_stop EID 7040) AND (security_registry_mod EID 4657) AND (defense_evasion_tool_exec EID 4688) | ALERT on correlation
  - question: Is a parent process spawning an unusually diverse set of commands within a short time window?
    context: This question uses information theory to detect complex malicious scripts. The Shannon entropy of the set of commands spawned by a parent process is calculated. A high entropy score indicates a wide variety of different commands, which is atypical for most benign processes but common for malicious scripts that perform reconnaissance, disable defenses, and execute a payload. An entropy score exceeding a historical baseline for that process or user suggests suspicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - NAI: All Windows Endpoints and Servers, Privileged Access Workstations (PAWs), Critical Service Hosts
    range: last 90 days
    queries:
      - language: pseudocode
        query: GROUP child_process_commands by ParentProcessID over 10-minute window | CALCULATE shannon_entropy of command set | COMPARE to historical baseline | ALERT if entropy > 98th percentile
  - question: Does a sequence analysis model classify a series of host events as a known malicious attack pattern?
    context: This question leverages a sequence analysis model (like an LSTM) that has been trained to recognize the chronological patterns of known attacks. The model takes a timed sequence of events from a host (e.g., process creation, registry modification, service change) as input. If the sequence matches a pattern learned from prior malicious activity, it is flagged as suspicious, allowing for the detection of complex, multi-step attacks as a single, cohesive incident.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - NAI: All Windows Endpoints and Servers, Privileged Access Workstations (PAWs), Critical Service Hosts
    range: last 90 days
    queries:
      - language: pseudocode
        query: INPUT timed sequence of events (EID 4688, 4657, 7040) for a host | APPLY LSTM_sequence_model | IF sequence_classified_as 'suspicious' THEN ALERT
  - question: Is a utility like bcdedit.exe or manage-bde.exe being used to disable boot integrity checks or BitLocker?
    context: This question targets specific, high-impact commands used to undermine foundational system security. It alerts on any use of bcdedit.exe to enable test signing or disable integrity checks, which allows unsigned drivers to load. It also alerts on the use of manage-bde.exe to disable BitLocker protectors, effectively decrypting the drive and removing a critical data protection layer. These actions are almost always malicious unless part of a sanctioned, documented administrative task.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 4663
      - NAI: UEFI-based systems, Domain Controllers, and BitLocker-encrypted endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH process_creation_events (EID 4688) | FILTER (process_name == 'bcdedit.exe' AND command_line CONTAINS ('/set testsigning on', '/set nointegritychecks on')) OR (process_name == 'manage-bde.exe' AND command_line CONTAINS '-protectors -disable') | ALERT on match
  - question: Are boot configuration or disk encryption utilities being executed by an unauthorized user or process?
    context: This question identifies anomalous use of powerful system utilities. By creating a baseline of which user accounts and parent processes normally execute bcdedit.exe and manage-bde.exe (typically system accounts or specific admin tools), any execution by an entity not on this baseline is flagged. This detects when an adversary uses a compromised account to run these tools outside of normal administrative workflows.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 4663
      - NAI: UEFI-based systems, Domain Controllers, and BitLocker-encrypted endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: SEARCH executions of 'bcdedit.exe' or 'manage-bde.exe' (EID 4688) | BASELINE legitimate user_accounts and parent_processes over 60 days | ALERT if current execution is by a user or parent_process not in the baseline
  - question: Can a machine learning model distinguish a malicious bcdedit.exe execution from a benign one?
    context: This question applies a one-class SVM or similar anomaly detection model trained exclusively on known benign executions of bcdedit.exe. The model learns the normal patterns of administrative usage, including typical command-line arguments, user contexts, and parent processes. Any new execution that the model flags as an outlier represents a significant deviation from established safe behavior and is a strong candidate for a malicious downgrade attack.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 4663
      - NAI: UEFI-based systems, Domain Controllers, and BitLocker-encrypted endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: INPUT new 'bcdedit.exe' execution (EID 4688) | EXTRACT features (command_line, parent_process, user) | APPLY one-class_SVM_model | IF execution is flagged as outlier THEN ALERT