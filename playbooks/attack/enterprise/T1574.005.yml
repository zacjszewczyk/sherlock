name: T1574.005: Executable Installer File Permissions Weakness
id: c1e9e2a0-4f8a-4b7c-8d6e-1f2a3b4c5d6e
description: This playbook focuses on detecting adversaries exploiting weak file permissions on executables, particularly those associated with installers and services. Adversaries can replace or modify these executables with malicious payloads. When the legitimate service or application is started, the malicious code is executed, often with elevated privileges. This technique can be used for persistence, by ensuring the malicious code runs automatically on system startup; for privilege escalation, by tricking a high-privilege process into running code placed by a low-privilege user; and for defense evasion, by hijacking trusted, signed executables to bypass security controls. The playbook provides questions to investigate suspicious file modifications, anomalous process executions from services, and unexpected process integrity level changes.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known service's executable been modified and then quickly started, resulting in the service spawning a command interpreter?
    context: This question looks for a classic service hijack pattern. An adversary replaces a legitimate service executable with a malicious payload. When the service is started (either by the system or the adversary), the malicious code runs with the service's privileges and often launches a command shell (like cmd.exe or powershell.exe) to execute further commands. Correlating a file write, a service start, and a suspicious child process in a short timeframe is a high-fidelity indicator of this persistence technique.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event 1
      - Sysmon Event 11
      - Zeek conn.log
      - Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_writes(Sysmon 11, Win 4663) on service_exe_paths | JOIN (within 60s) service_starts(Win 7036) for same service | JOIN process_creates(Sysmon 1, Win 4688) where parent is service and child is (cmd.exe, powershell.exe)
  - question: Is a service process spawning a child process with an unusually complex or obfuscated command line?
    context: Adversaries often use obfuscation to hide their commands from simple signature-based detections. High command-line entropy (a measure of randomness or complexity) can indicate the presence of encoded scripts (e.g., Base64 PowerShell) or other obfuscation techniques. By baselining the normal command-line entropy for child processes of each service, we can detect significant deviations that suggest malicious activity.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event 1
      - Sysmon Event 11
      - Zeek conn.log
      - Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each service_process: | BASELINE child_process command_line_entropy | ALERT if new child_process command_line_entropy > 95th_percentile_of_baseline
  - question: Has a sequence of file write, service start, and process creation events occurred that deviates from the normal, learned behavior for a specific host?
    context: This question uses machine learning to identify novel attack patterns that may not match predefined rules. By training a model on typical sequences of events related to services, the system can learn what "normal" looks like for each host. A sequence that the model struggles to "reconstruct" (i.e., has a high reconstruction error) is anomalous and could represent a new or unseen variation of a service hijack.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event 1
      - Sysmon Event 11
      - Zeek conn.log
      - Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL LSTM_Autoencoder on (file_write, service_start, process_create) triplets per host | ALERT on sequences with high reconstruction_error
  - question: Has a Windows service process spawned a command shell or connected to a known malicious IP address or domain?
    context: Legitimate Windows services rarely need to spawn interactive command shells or connect to external indicators of compromise (IOCs). This action directly checks for these high-confidence malicious behaviors. A service process making an outbound connection to an IP on a threat intel feed is a strong sign of command-and-control (C2) communication or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event 1
      - Sysmon Event 3
      - Zeek conn.log
      - Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creates(Sysmon 1, Win 4688) where parent is service_process and child is (cmd.exe, powershell.exe) | OR | SEARCH network_connections(Sysmon 3) where process is service_process and destination_ip/domain in threat_intel_feed
  - question: Is a service process exhibiting anomalous network behavior, such as connecting to rare ports or sending unusually large amounts of data?
    context: This question aims to detect C2 activity by looking for statistical outliers in a service's network patterns. Adversaries might use non-standard ports to bypass firewall rules or exfiltrate large volumes of data. By establishing a baseline of normal behavior (ports, data volume, frequency), we can flag significant deviations that might indicate a compromised service.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event 1
      - Sysmon Event 3
      - Zeek conn.log
      - Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each service_process: | BASELINE network_behavior(dest_port, data_volume, frequency) | ALERT if new activity has port in 99th_percentile_rarity OR data_volume > 3_std_dev_from_average
  - question: Has the volume of network traffic from a critical service process unexpectedly spiked beyond its predicted range?
    context: This question uses time-series forecasting to predict the expected network data volume for a service and alerts on significant positive anomalies. A sudden, unexplained increase in outbound traffic from a service could indicate data staging or exfiltration by an adversary who has hijacked the service process. This is more sophisticated than a simple threshold and can adapt to cyclical business patterns.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event 1
      - Sysmon Event 3
      - Zeek conn.log
      - Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL Time_Series_Forecast (e.g., ARIMA) on network_data_volume for each service | ALERT if observed_volume > forecasted_confidence_interval
  - question: Was an executable file written by a low-privilege process and then shortly after executed by a high-privilege process?
    context: This is a direct hunt for a privilege escalation pathway. An adversary with low or medium integrity access writes a malicious executable to a location where a higher-privilege process is expected to run it. This could be due to a misconfigured installer path or a DLL search order hijack. Correlating the write by a low-privilege user with the execution by a high-privilege account is a strong indicator of this technique.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event 1
      - Sysmon Event 11
      - File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_creates(Sysmon 11) where IntegrityLevel is (Low, Medium) | JOIN (within 5 min) process_creates(Sysmon 1) on same file_path where IntegrityLevel is (High, System)
  - question: Has a process with SYSTEM integrity been launched from a statistically rare, user-writable location?
    context: Processes running with SYSTEM-level privileges are the most powerful on a Windows host and should almost always execute from protected system directories (like C:\Windows\System32). An executable running as SYSTEM from a user's profile or a temp directory is highly suspicious. This question focuses on finding these outliers by baselining execution paths and alerting on rare occurrences, which helps filter out noise from legitimate but uncommon installers.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event 1
      - Sysmon Event 11
      - File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creates(Sysmon 1) where IntegrityLevel is System and ImagePath in user_writable_dirs | CALCULATE frequency of ImagePath over 90 days | ALERT if frequency < 5 occurrences
  - question: Does a graph-based analysis of process and file interactions reveal a path where a low-privilege process writes a file that is later executed by a high-privilege process?
    context: This question models system activity as a graph to uncover complex relationships that simple correlation rules might miss. It specifically looks for the chain of events that defines this privilege escalation technique. By representing processes and files as nodes and actions (like 'write' or 'execute') as edges, a graph model can identify and flag this entire malicious sequence, especially if the sequence is novel in the environment.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event 1
      - Sysmon Event 11
      - File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL system activity as a graph (nodes=processes/files, edges=actions) | SEARCH for path: Process(Low/Medium Integrity) -> Writes -> File -> Executed By -> Process(High/System Integrity) | ALERT on new/rare paths
  - question: Is the SYSTEM account running an executable from a non-standard, user-writable directory?
    context: This is a high-confidence rule designed to catch blatant privilege escalation attempts. The 'NT AUTHORITY\SYSTEM' account should not be executing programs from user-specific or temporary directories. Such an event strongly suggests that an adversary has found a way to trick a privileged service into running a payload from an unsecured location. An allowlist for known good installers is crucial to reduce false positives.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\Users, C:\ProgramData, and C:\Windows\Temp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creates(Sysmon 1) where User is 'NT AUTHORITY\\SYSTEM' AND (ImagePath starts with ('C:\\Users\\', 'C:\\ProgramData', 'C:\\PerfLogs') OR ImagePath contains '\\AppData\\') | EXCLUDE known_good_installers
  - question: Has a SYSTEM process executed from a path that is extremely rare across the entire enterprise?
    context: This question uses enterprise-wide statistical analysis to find anomalous SYSTEM process executions. Instead of relying on a static list of "bad" directories, it dynamically identifies unusual behavior. An execution path that is exceedingly rare (bottom 1st percentile) is suspicious by definition and warrants investigation, as it deviates from the established norm of all other systems.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\Users, C:\ProgramData, and C:\Windows\Temp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE all execution paths for SYSTEM processes across enterprise over 30 days | CALCULATE frequency percentile for each path | ALERT when new SYSTEM process executes from a path in bottom 1st percentile
  - question: Does a machine learning clustering model identify a new SYSTEM-level process execution as an outlier compared to established normal behavior?
    context: This question applies unsupervised machine learning to detect anomalous SYSTEM processes. By grouping similar, legitimate executions into clusters based on features like executable path, parent process, and command line arguments, the model can identify any new event that doesn't fit into any existing cluster. These outliers, or "noise" points, are by definition anomalous and are strong candidates for malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\Users, C:\ProgramData, and C:\Windows\Temp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL DBSCAN on (image_path, parent_path, cmd_args) for SYSTEM processes | IDENTIFY clusters of normal behavior | ALERT on any new execution classified as an outlier (noise)
  - question: Has a digitally signed executable in a protected system directory been replaced with an unsigned or improperly signed version?
    context: This question targets a defense evasion technique known as file modification or masquerading. Adversaries may replace a legitimate, trusted executable (which security tools might ignore) with a malicious one. A key indicator of this is a change in the file's digital signature. This rule checks for modifications to executables in critical directories and then verifies if the new version's signature status has degraded, indicating a potential hijack.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event 7
      - Sysmon Event 11
      - File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\System32') on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_creates(Sysmon 11) on executables in protected_paths | JOIN image_loads(Sysmon 7) for same executable | ALERT if SignatureStatus is ('Invalid', 'Unsigned') OR Signature not in trusted_publisher_list
  - question: Has a trusted executable been modified and signed by a publisher that is extremely rare within the organization?
    context: Adversaries might sign their malicious payloads with self-signed certificates or certificates from obscure, newly created entities. This question aims to detect such activity by baselining all software publishers seen in the environment. A file modification where the new publisher is statistically rare (e.g., present on only a tiny fraction of endpoints) is suspicious and could indicate an attempt to smuggle malicious code under the guise of a signed executable.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event 7
      - Sysmon Event 11
      - File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\System32') on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE all software publishers from Sysmon logs | FOR each file_modification on signed_exe: | CALCULATE prevalence of new_publisher | ALERT if prevalence < 0.1% of endpoints
  - question: Does a machine learning model classify a modification to a critical system file as suspicious rather than a legitimate software update?
    context: This question uses a supervised machine learning model to bring more intelligence to the detection of file modifications. The model can learn the nuanced characteristics that differentiate legitimate updates (e.g., initiated by 'trustedinstaller.exe', occurring during patch windows) from malicious changes. A classification of 'suspicious' provides a higher-confidence alert than a simple rule, reducing false positives from benign administrative actions.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event 7
      - Sysmon Event 11
      - File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\System32') on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL Random_Forest to classify file modifications (legit_update vs. suspicious) using features (source_process, time, path, signature_change) | ALERT on 'suspicious' classification for critical files
  - question: Have core service host processes like 'services.exe' or 'svchost.exe' spawned a command-line interpreter or scripting engine?
    context: The primary service host processes in Windows ('services.exe' and 'svchost.exe') have a very predictable set of child processes they are expected to launch. The spawning of command shells or script interpreters from these parents is highly anomalous and a strong indicator that a service has been compromised and is being used to execute arbitrary commands for defense evasion.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creates(Sysmon 1) where ParentImage is ('services.exe', 'svchost.exe') AND ChildImage is ('cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'rundll32.exe')
  - question: Has a critical service host process spawned a child process that is rare or has never been seen before?
    context: This question moves beyond a static list of "bad" child processes and instead uses historical data to define what is normal for a given parent process. By creating a baseline of all legitimate child processes for parents like 'svchost.exe', we can alert on any new child process that is statistically rare or has never appeared before. This helps detect novel tools or techniques used by an adversary.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each critical_parent_process: | BASELINE frequency of all child_process_names | ALERT when new child_process is spawned that is new OR in lowest 1st percentile of frequency
  - question: Does a graph-based machine learning model detect an anomalous new parent-child process relationship involving a trusted service host?
    context: This question applies advanced machine learning to model the entire process graph of the operating system. A Graph Neural Network (GNN) can learn the complex, legitimate relationships between all processes. When an adversary compromises a service and uses it to launch a malicious tool, this creates a new "edge" in the process graph (e.g., 'svchost.exe' -> 'malware.exe'). The model, not having seen this relationship before, would flag it as a high-probability anomaly, providing a powerful detection mechanism.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL Graph_Neural_Network on parent-child process relationships | ALERT when a new relationship (edge) is created that is flagged as a high-probability anomaly, especially if parent is a service host