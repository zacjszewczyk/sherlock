name: T1059.009: Cloud API
id: 9a8b7c6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d
description: >
  This playbook helps investigate whether an adversary has executed commands using cloud APIs. It focuses on identifying malicious activity by analyzing several indicators: the use of cloud CLI tools with command-line arguments matching known malicious IPs or domains; specific sequences of API calls that align with known attack patterns (e.g., reconnaissance followed by credential access); anomalous execution contexts such as invocation by non-admin users or from unusual parent processes; statistically significant increases in API calls or network traffic from a host; and host-based event patterns that suggest a 'download-execute-API call' sequence.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any cloud CLI tools been executed with command-line arguments containing known malicious indicators from our threat intelligence feeds?
    context: >
      This question aims to detect the most direct form of malicious cloud API usage, where an adversary uses a known-malicious IP address, domain, or resource name as a parameter in a CLI command. Monitoring for these atomic indicators in real-time allows for rapid detection of command-and-control (C2) activity, data exfiltration to known-bad destinations, or interaction with malicious infrastructure.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Developer workstations, administrator jump boxes, CI/CD servers, cloud control plane.
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          SEARCH process_creation_events OR cloud_audit_logs
          WHERE (process_name IN ('aws.exe', 'az.exe', 'gcloud.exe') OR event_type='api_call')
          AND command_line_args CONTAINS_ANY (threat_intel_feed_ips, threat_intel_feed_domains)

  - question: Have any cloud CLI tools been executed with statistically rare command-line arguments?
    context: >
      Adversaries often use unique, one-off arguments for custom scripts, target resource names, or C2 instructions that will not appear in legitimate, day-to-day operations. By establishing a baseline of common arguments and alerting on rare ones, we can uncover these non-standard executions that may indicate a targeted attack, even without a pre-existing threat intelligence match.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Developer workstations, administrator jump boxes, CI/CD servers, cloud control plane.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: >
          FOR each cloud_cli_execution:
            PARSE command_line_arguments
            FOR each argument:
              CALCULATE frequency_count over last 30 days
              IF frequency_count < threshold (e.g., 5):
                ALERT

  - question: Have any cloud CLI commands been executed that a machine learning model classifies as likely malicious?
    context: >
      This question leverages machine learning to move beyond simple rule-based detection. A model can learn the subtle, complex characteristics of malicious commands (e.g., high entropy, presence of sensitive keywords like 'delete' or 'secret', unusual length) that are difficult to define with static rules. This provides a more robust and adaptive detection mechanism for novel or obfuscated attack techniques.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Developer workstations, administrator jump boxes, CI/CD servers, cloud control plane.
    range: last 90 days
    queries:
      - technology: Pseudocode/ML
        query: >
          FOR each cloud_cli_command:
            EXTRACT_FEATURES (length, entropy, keyword_counts, etc.)
            SCORE with pre-trained classification model
            IF score > confidence_threshold:
              ALERT

  - question: Has any user executed a sequence of API calls that matches a known attack pattern (e.g., reconnaissance, credential access, defense evasion) within a short time frame?
    context: >
      Individual API calls may appear benign in isolation, but a specific sequence can reveal an adversary's intent. This question looks for chains of activity that mirror common attack phases, such as discovering resources, accessing secrets to escalate privileges, and then covering tracks by deleting logs. Detecting these sequences is critical for identifying an active intrusion.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider control plane (e.g., AWS Management Console, Azure Portal), CI/CD pipeline runners, administrator workstations.
    range: last 90 days
    queries:
      - technology: SIEM Correlation Rule
        query: >
          GROUP events by user_identity over 15_minute_window
          MATCH sequence: (event_name LIKE 'List*' OR 'Describe*')
            THEN (event_name LIKE 'GetSecret*' OR 'GetObject*')
            THEN (event_name LIKE 'DeleteTrail*' OR 'StopLogging*')
          ALERT on match

  - question: Has any user's pattern of API call types (e.g., Read, Write, List) significantly deviated from their historical baseline?
    context: >
      Users typically have predictable patterns of behavior. A developer might perform many 'Read' and 'Write' actions, while an auditor performs mostly 'List' and 'Read' actions. A sudden, statistically significant shift in this behavior—for instance, a developer's account suddenly performing many 'Permissions' changes—can indicate account compromise or insider threat. This method detects anomalous intent without needing to know the specific attack sequence.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider control plane (e.g., AWS Management Console, Azure Portal), CI/CD pipeline runners, administrator workstations.
    range: last 90 days
    queries:
      - technology: Pseudocode/Stats
        query: >
          FOR each user:
            BUILD baseline_profile of API call category distribution (Read, Write, List, etc.) over 30 days
            FOR each 1-hour window:
              CALCULATE current_distribution
              COMPARE current_distribution to baseline_profile using Chi-Squared test
              IF deviation is statistically significant:
                ALERT

  - question: Has any user executed a sequence of API calls that is highly improbable based on a model trained on their historical behavior?
    context: >
      This question uses advanced modeling to learn the 'normal' grammar of a user's API interactions. An RNN or Markov model can understand typical transitions (e.g., 'ListInstances' is often followed by 'DescribeInstance'). When a user executes a sequence that violates this learned grammar (e.g., 'CreateUser' followed immediately by 'DeleteTrail'), the model flags it as a low-probability, anomalous event, indicating a potential compromise or misuse.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider control plane (e.g., AWS Management Console, Azure Portal), CI/CD pipeline runners, administrator workstations.
    range: last 90 days
    queries:
      - technology: Pseudocode/ML
        query: >
          FOR each user:
            TRAIN sequence model (RNN, Markov) on historical API call sequences
            FOR each new API call sequence:
              CALCULATE probability of sequence from model
              IF probability < anomaly_threshold:
                ALERT

  - question: Have any cloud CLI tools been executed by unauthorized users or spawned from an unusual parent process?
    context: >
      Cloud CLI tools are powerful and should typically only be run by authorized administrators or specific service accounts, and usually from predictable parent processes like a shell or an IDE. An execution by a standard user account or one spawned by an application like Microsoft Word is highly suspicious and could indicate a phishing-based attack, where a malicious document is used to gain initial execution.
    answer_sources:
      - Windows Event ID 4688
      - Active Directory security logs
      - All corporate endpoints, application servers, developer workstations, Domain Controllers.
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          SEARCH process_creation_events
          WHERE process_name IN ('aws.exe', 'az.exe', 'gcloud.exe')
          AND (user NOT_IN 'Cloud Admins Group' OR parent_process_name NOT_IN ('powershell.exe', 'cmd.exe', 'explorer.exe'))
          ALERT

  - question: Has a cloud CLI tool been launched by a parent process that has rarely or never launched it before across the enterprise?
    context: >
      This question operationalizes the concept of 'unusual parent processes' by using historical data to define what's normal for the entire organization. While a static allowlist is a good start, this data-driven approach can uncover novel abuse patterns. For example, if a newly installed CI/CD tool legitimately starts using a CLI, this method might initially flag it, but it's more effective at catching a truly anomalous parent like a compromised web server process.
    answer_sources:
      - Windows Event ID 4688
      - Active Directory security logs
      - All corporate endpoints, application servers, developer workstations, Domain Controllers.
    range: last 90 days
    queries:
      - technology: Pseudocode/Analytics
        query: >
          BUILD frequency table of all (parent_process, child_process) pairs over 90 days
          FOR each new cloud_cli_execution:
            GET (parent_process, child_process) pair
            IF pair_frequency < threshold (e.g., 5th percentile) OR is_new:
              ALERT

  - question: Has any cloud CLI execution occurred in a context (user, parent process, file path) that a machine learning model deems anomalous?
    context: >
      This question uses a machine learning model to create a holistic profile of 'normal' CLI execution context, considering multiple features simultaneously (user, parent, path, etc.). A One-Class SVM is particularly well-suited for this as it learns a boundary around normal activity without needing examples of malicious behavior. Any execution that falls outside this boundary is flagged as an outlier, providing a powerful way to detect novel attacks that abuse execution context.
    answer_sources:
      - Windows Event ID 4688
      - Active Directory security logs
      - All corporate endpoints, application servers, developer workstations, Domain Controllers.
    range: last 90 days
    queries:
      - technology: Pseudocode/ML
        query: >
          TRAIN One-Class SVM model on historical execution context features (user_groups, parent_process, file_path, etc.)
          FOR each new cloud_cli_execution:
            EXTRACT context features
            IF model.predict(features) == 'outlier':
              ALERT

  - question: Has any single host exhibited a high-volume burst of cloud CLI executions or network connections to cloud API endpoints?
    context: >
      This question is designed to catch brute-force or high-volume automated activity. A script used for rapid data exfiltration, resource enumeration, or credential stuffing will generate a large number of API calls in a short period. By setting a simple, high-watermark threshold, we can quickly detect this type of unsophisticated but potentially damaging activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Network egress points, VPN concentrators, individual host network interfaces, and host-level process monitoring.
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          SEARCH (process_creations WHERE process_name IN ('aws.exe', 'az.exe', 'gcloud.exe')) OR (network_connections WHERE dest_ip IN cloud_api_endpoints)
          AGGREGATE count by host over 10_minute_windows
          WHERE process_count > 50 OR connection_count > 1000
          ALERT

  - question: Has any host's hourly cloud API activity significantly exceeded its own historical, time-of-day baseline?
    context: >
      Different hosts have different normal activity levels. A CI/CD server will naturally have more API activity than a user workstation. This question creates a personalized baseline for each host, accounting for normal fluctuations like time of day and day of week. An alert is triggered only when a host's activity is abnormal *for that specific host at that specific time*, which is a much higher fidelity signal than a simple global threshold.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Network egress points, VPN concentrators, individual host network interfaces, and host-level process monitoring.
    range: last 90 days
    queries:
      - technology: Pseudocode/Stats
        query: >
          FOR each host:
            BUILD baseline of hourly API call volume (mean, stddev) for each time_slot (e.g., Monday 9am)
            FOR each current hour:
              GET current_volume
              GET baseline_mean, baseline_stddev for current_time_slot
              IF current_volume > (baseline_mean + 3 * baseline_stddev):
                ALERT

  - question: Has any high-value host's API call volume exceeded the level predicted by a time-series forecasting model?
    context: >
      This question applies a more sophisticated forecasting approach for critical assets. A model like Prophet or LSTM can learn complex patterns, including seasonality and trends, to predict an expected range for future activity. When the actual activity breaks out of this predicted range, it signals a significant and unexpected change in behavior that warrants investigation, providing a more sensitive detection capability than simpler statistical methods.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Network egress points, VPN concentrators, individual host network interfaces, and host-level process monitoring.
    range: last 90 days
    queries:
      - technology: Pseudocode/ML
        query: >
          FOR each high_value_host:
            TRAIN time-series model (e.g., Prophet) on historical API call volume
            PREDICT expected volume and confidence_interval for next 15 mins
            GET actual_volume for next 15 mins
            IF actual_volume > upper_bound_of_confidence_interval:
              ALERT

  - question: Has any host exhibited a 'download-execute-API call' sequence of events within a short time window?
    context: >
      This question looks for a classic attack chain where an adversary stages their tooling. A malicious script is first downloaded to the victim machine, then executed using a scripting engine (like PowerShell), which in turn makes malicious calls using a cloud CLI. Correlating these three distinct event types (download, script execution, CLI execution) from a single host in a short time frame provides strong evidence of a malware staging and execution.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - User workstations, public-facing web servers, CI/CD servers, network file transfer analysis points.
    range: last 90 days
    queries:
      - technology: SIEM Correlation Rule
        query: >
          GROUP events by host over 5_minute_window
          MATCH sequence: (event_type='file_download' OR process_name IN ('curl.exe', 'bitsadmin.exe'))
            THEN (process_name IN ('powershell.exe', 'python.exe'))
            THEN (process_name IN ('aws.exe', 'az.exe', 'gcloud.exe'))
          ALERT on match

  - question: Has any host shown a sudden spike in the variety of processes being executed?
    context: >
      Normal host activity often involves a repetitive, low-variety set of processes. An attack, however, might involve a rapid succession of different, unusual tools for reconnaissance, privilege escalation, and execution (e.g., `whoami.exe`, `net.exe`, `powershell.exe`, `curl.exe`). A sudden increase in the variety (entropy) of process names within a short window can be a strong indicator that such a multi-stage attack script is running.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - User workstations, public-facing web servers, CI/CD servers, network file transfer analysis points.
    range: last 90 days
    queries:
      - technology: Pseudocode/Stats
        query: >
          FOR each host:
            BUILD baseline of process name entropy over 5-minute windows
            FOR each current 5-minute window:
              CALCULATE current_entropy
              IF current_entropy > 95th_percentile_of_baseline:
                ALERT

  - question: Has any host produced a sequence of activities (e.g., file download, PowerShell execution) that is anomalous according to a machine learning model?
    context: >
      This question uses an advanced anomaly detection model (like an LSTM autoencoder) to learn the 'normal' sequences of events on a host. The model is trained on benign activity and learns to reconstruct it accurately. When it encounters a novel or malicious sequence (like the 'download-execute-API call' pattern), it will fail to reconstruct it well, resulting in a high 'reconstruction error'. This error is a powerful signal for detecting previously unseen attack patterns.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - User workstations, public-facing web servers, CI/CD servers, network file transfer analysis points.
    range: last 90 days
    queries:
      - technology: Pseudocode/ML
        query: >
          TRAIN LSTM autoencoder on benign sequences of host event types
          FOR each new host event sequence:
            CALCULATE reconstruction_error from autoencoder
            IF reconstruction_error > anomaly_threshold:
              ALERT