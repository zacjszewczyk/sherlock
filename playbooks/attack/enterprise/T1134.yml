name: T1134: Access Token Manipulation
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary has escalated privileges or evaded defenses using access token manipulation (T1134). This technique involves an attacker creating a new process with a stolen token from another, more privileged process. Indicators include the execution of known token manipulation tools (e.g., JuicyPotato, PrintSpoofer), unusual parent-child process relationships (e.g., services.exe spawning cmd.exe), the use of specific tools like `psexec -s` or `runas /netonly`, system processes making anomalous network connections, high-entropy lateral movement using multiple accounts from one host, and Parent Process ID (PPID) spoofing.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events that match the names or command-line arguments of known token manipulation tools?
    context: This question aims to detect the direct use of publicly known and commodity token manipulation tools like JuicyPotato, RottenPotato, and PrintSpoofer. Adversaries often use these tools as-is, and searching for their specific process names or unique command-line flags is a high-confidence method for identifying privilege escalation attempts.
    answer_sources:
      - Windows Event ID 4688 from Domain Controllers, Application Servers, User Workstations, Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events(event_id=4688) WHERE process_name IN (watchlist_of_token_tools) OR command_line CONTAINS (watchlist_of_tool_arguments)
  - question: Have any privileged parent processes spawned child processes with unusually rare command-line arguments?
    context: Adversaries may use custom or obfuscated tools that won't be caught by name-based watchlists. This question focuses on identifying anomalous behavior by flagging processes that have statistically rare command-line arguments, especially when launched by a high-privilege parent process. This approach helps uncover novel or modified token manipulation techniques.
    answer_sources:
      - Windows Event ID 4688 from Domain Controllers, Application Servers, User Workstations, Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events(event_id=4688) WHERE parent_process_is_privileged AND command_line_rarity_score < 1st_percentile
  - question: Has a machine learning model identified any process creation events as being characteristic of a token-stealing exploit?
    context: This question leverages a machine learning model to move beyond simple rules and identify complex patterns indicative of token manipulation. By analyzing a combination of features like process lineage, command-line structure, and entropy, the model can detect sophisticated attacks that might otherwise appear benign when looking at individual indicators in isolation.
    answer_sources:
      - Windows Event ID 4688 from Domain Controllers, Application Servers, User Workstations, Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: QUERY ml_model_for_token_stealing_exploits ON process_creation_events(event_id=4688) AND RETURN events where prediction=malicious
  - question: Have any sensitive system services spawned a child process that is not on an established allow-list?
    context: Critical system services like services.exe or lsass.exe have predictable behavior and should not be spawning interactive shells or other unexpected processes. This question seeks to identify such anomalous parent-child relationships, which are a strong indicator that an adversary has compromised a service to escalate privileges.
    answer_sources:
      - Windows Event ID 4688 from Domain Controllers, Critical Infrastructure Servers, Privileged Access Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events(event_id=4688) WHERE parent_process IN (sensitive_services_list) AND child_process NOT IN (parent_specific_allow_list)
  - question: Have any statistically rare parent-child process relationships been observed?
    context: Beyond a fixed allow-list, this question aims to find any new or highly unusual parent-child process pairings across the entire environment. By baselining all normal process relationships, any deviation that falls below a probability threshold can be flagged as suspicious, potentially uncovering a novel attack path.
    answer_sources:
      - Windows Event ID 4688 from Domain Controllers, Critical Infrastructure Servers, Privileged Access Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events(event_id=4688) WHERE probability(child_process | parent_process) < 0.01%
  - question: Have any anomalous clusters of process creation activity been identified that could indicate token manipulation?
    context: This question uses unsupervised machine learning to group process creation events based on their properties. Malicious activity, such as a service spawning a shell, will often form a small, distinct cluster separate from the large clusters of normal, benign activity. Investigating these outlier clusters can reveal hidden threats.
    answer_sources:
      - Windows Event ID 4688 from Domain Controllers, Critical Infrastructure Servers, Privileged Access Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: RUN clustering_algorithm ON process_creation_events AND IDENTIFY outlier_clusters for investigation
  - question: Has a process created by a non-privileged user been immediately followed by a SYSTEM-level service logon from that same process?
    context: This is a classic pattern for "Potato" family exploits, where a user-level process tricks a privileged service into authenticating, capturing the token. This question uses a correlation rule to look for the specific sequence of a non-privileged process creation followed by a Logon Type 5 (Service) event for the SYSTEM account, linked by the same Process ID.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 4624 from Authentication Servers, Application Servers, User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_events(4688) with logon_events(4624) ON process_id WHERE user IS non-privileged AND logon_type=5 AND target_user=SYSTEM AND time_diff < 5s
  - question: Have any processes been observed elevating from a limited token to a full token in an unusual manner?
    context: Windows tracks token elevation types. An elevation to a full token (Type 1) is suspicious if it doesn't originate from a standard consent/UAC prompt. This question baselines normal elevation behavior and looks for statistical outliers, which could indicate an exploit that circumvents standard elevation mechanisms to gain full privileges.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 4624 from Authentication Servers, Application Servers, User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_events(4688) WHERE token_elevation_type=1 AND parent_process_token IS limited AND parent_process IS NOT consent.exe AND frequency > user_baseline
  - question: Has a time-series model detected an anomalous spike in SYSTEM-level service logons on any host?
    context: A surge in service logons (Logon Type 5) for the SYSTEM account on a host can indicate that a token manipulation exploit is being used repeatedly. This question uses time-series analysis to monitor the rate of these events, flagging any statistically significant spikes that could correspond to an active attack.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 4624 from Authentication Servers, Application Servers, User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY time_series_analysis ON logon_events(4624, logon_type=5, user=SYSTEM) per host AND ALERT on anomalous spikes
  - question: Has a high-privilege localhost network logon occurred from a non-standard process?
    context: "Potato" attacks often manifest as a network logon (Logon Type 3) to the local machine (127.0.0.1) as the SYSTEM user. This activity is highly suspicious if the process initiating the logon is not a legitimate local authenticator. This question looks for this specific, high-confidence indicator of an attack.
    answer_sources:
      - Windows Event ID 4624, Windows Event ID 4688 from Domain Controllers, Member Servers, User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH logon_events(4624) WHERE logon_type=3 AND ip_address=localhost AND target_user=SYSTEM AND process_name NOT IN (allow_list)
  - question: Has any user or process generated an unusually high frequency of localhost network logons?
    context: While some localhost logons may be normal, a sudden increase in their frequency for a specific user or process can be an indicator of a tool or script repeatedly attempting a token manipulation exploit. This question establishes a baseline for this behavior and alerts on deviations.
    answer_sources:
      - Windows Event ID 4624, Windows Event ID 4688 from Domain Controllers, Member Servers, User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT localhost_logons(logon_type=3) by user, process and ALERT if frequency > 3_std_dev_from_baseline
  - question: Has a machine learning model classified any logon events as being indicative of a "Potato" family attack?
    context: This question uses a supervised model trained specifically to recognize the combination of features associated with "Potato" attacks (Logon Type 3, localhost IP, SYSTEM user, non-system process). A decision tree is particularly effective at learning these explicit rules and providing high-confidence alerts.
    answer_sources:
      - Windows Event ID 4624, Windows Event ID 4688 from Domain Controllers, Member Servers, User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY decision_tree_classifier ON logon_events(4624) AND RETURN events where prediction=potato_attack
  - question: Has PsExec or a known variant been used with the '-s' flag to run a process as the SYSTEM account?
    context: The '-s' flag in PsExec is a clear instruction to execute a command with the SYSTEM account's token. While legitimate administrators may use this, it is also a common technique for adversaries to escalate privileges and evade defenses. Any use of this flag warrants investigation.
    answer_sources:
      - Windows Event ID 4688 from User Workstations, IT Administrator Systems, Jump Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events(4688) WHERE process_name IN (psexec.exe, paexec.exe) AND command_line CONTAINS '-s'
  - question: Has there been risky or anomalous usage of PsExec, even if for legitimate purposes?
    context: Beyond just the '-s' flag, the context of PsExec's use can be revealing. This question seeks to identify risky behavior, such as a non-administrator using the tool or usage from an unusual source/destination pair, which could indicate a compromised account being used for lateral movement or defense evasion.
    answer_sources:
      - Windows Event ID 4688 from User Workstations, IT Administrator Systems, Jump Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE risk_score for psexec_events based on user_role, time_of_day, source_dest_rarity and ALERT on high_score
  - question: Has a sequence analysis model detected a chain of events consistent with malicious PsExec usage?
    context: Malicious PsExec usage is often part of a larger sequence; the tool is introduced, executed with specific flags, and then used to spawn a suspicious child process. This question uses a model (like an HMM) to recognize this entire attack chain, providing a higher-confidence alert than looking at any single event in isolation.
    answer_sources:
      - Windows Event ID 4688 from User Workstations, IT Administrator Systems, Jump Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY sequence_analysis_model to process_events AND IDENTIFY sequence (psexec_write -> psexec_run_with_s -> suspicious_child)
  - question: Has `runas.exe` with the `/netonly` flag been used to initiate a new SMB or WinRM connection?
    context: The `runas /netonly` command allows a process to authenticate to remote systems with different credentials, while the local process runs in the original user's context. Adversaries use this to pivot using stolen credentials without needing an interactive logon. This question correlates the command's use with subsequent network connections to detect this lateral movement technique.
    answer_sources:
      - Windows Event ID 4688, Zeek conn.log from User Workstations, Network Egress/Ingress Points, Authentication Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_events(4688, process=runas.exe, args='/netonly') with network_connections ON host WHERE conn_protocol IN (SMB, WinRM) AND dest_ip is new
  - question: Has a user running `runas /netonly` connected to a destination host they have not previously accessed in this manner?
    context: This question aims to separate legitimate administrative use of `runas /netonly` from malicious use by baselining behavior. An administrator may regularly use the command to connect to a specific set of servers. A connection to a completely new or unrelated host is anomalous and could indicate an adversary exploring the network.
    answer_sources:
      - Windows Event ID 4688, Zeek conn.log from User Workstations, Network Egress/Ingress Points, Authentication Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR user, CHECK runas_netonly_events AND CALCULATE similarity of destination_ip to historical_set; ALERT on low_similarity
  - question: Has a graph-based model detected an anomalous process and network connection sequence involving `runas /netonly`?
    context: This question models user, process, and host interactions as a graph. The specific pattern of a user running `runas /netonly` on one host and connecting to another forms a subgraph. By identifying rare or previously unseen subgraphs of this type, the model can detect novel instances of lateral movement.
    answer_sources:
      - Windows Event ID 4688, Zeek conn.log from User Workstations, Network Egress/Ingress Points, Authentication Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD interaction_graph from process and network logs; SEARCH for rare subgraphs matching (user -> runas -> host -> remote_host) pattern
  - question: Has a critical system process, such as lsass.exe, initiated any outbound network connections?
    context: Core system processes like lsass.exe, winlogon.exe, and csrss.exe should never initiate outbound network connections. Any such activity is a very strong indicator that the process's token has been stolen and is being used by malware for C2 communications or data exfiltration.
    answer_sources:
      - Zeek conn.log, Windows Event ID 4688 from Network Egress Points (Firewall, Proxy), Domain Controllers, Endpoint Security Agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections WHERE source_process IN (critical_system_process_list) AND direction=outbound
  - question: Has a system process like svchost.exe exhibited anomalous network behavior?
    context: While some system processes like svchost.exe are expected to make network connections, their behavior is often predictable (e.g., connecting to Windows Update servers). This question baselines the normal network activity (destination IPs, ports, data volume) for these processes and alerts on statistical deviations, which could indicate a compromised process.
    answer_sources:
      - Zeek conn.log, Windows Event ID 4688 from Network Egress Points (Firewall, Proxy), Domain Controllers, Endpoint Security Agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR svchost_connections, ALERT if destination_ip_rarity < 1st_percentile OR data_volume > 99th_percentile_of_baseline
  - question: Has a time-series model detected an anomalous residual spike in network traffic from a system process?
    context: Adversaries may use a compromised process for C2 communications, which can create subtle changes in network traffic volume. This question uses time-series decomposition to strip out normal trends and seasonality from the process's traffic, allowing for the detection of small, anomalous spikes in the residual data that could indicate malicious activity.
    answer_sources:
      - Zeek conn.log, Windows Event ID 4688 from Network Egress Points (Firewall, Proxy), Domain Controllers, Endpoint Security Agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY time_series_decomposition to process_network_traffic; ALERT if residual_component > 3_std_dev
  - question: Has a single host attempted to log on to an excessive number of unique accounts on other systems?
    context: This question looks for a "fan-out" pattern of lateral movement where an adversary, having compromised one host, uses a collection of stolen tokens to try and access many different accounts on other systems. A hard threshold can be set to detect this brute-force style of movement.
    answer_sources:
      - Windows Event ID 4624 from Domain Controllers, Centralized Log Aggregator (SIEM), Member Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FROM logon_events(logon_type=3), COUNT unique(target_user) per source_host in 1hr_window; ALERT if count > 10
  - question: Has the set of accounts used for network logons from a single host become statistically more random?
    context: Instead of a hard threshold, this question uses Shannon entropy to measure the randomness of target usernames originating from a single source host. A sudden spike in entropy indicates that the host is no longer accessing a predictable set of accounts, but rather a wide and varied set, which is characteristic of an adversary using multiple stolen tokens.
    answer_sources:
      - Windows Event ID 4624 from Domain Controllers, Centralized Log Aggregator (SIEM), Member Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE shannon_entropy of target_usernames per source_host in 30min_window; ALERT if entropy > 3_std_dev_from_baseline
  - question: Has any host exhibited lateral movement behavior that is anomalous compared to its peers?
    context: This question uses peer group analysis to establish a baseline for normal lateral movement. For example, domain controllers may talk to many machines, but a workstation in the HR department should not. By comparing a host's "fan-out" logon behavior to that of its peers (e.g., other HR workstations), this method can identify significant deviations that indicate compromise.
    answer_sources:
      - Windows Event ID 4624 from Domain Controllers, Centralized Log Aggregator (SIEM), Member Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: GROUP hosts by role; for each host, COMPARE logon_fanout_behavior to peer_group_baseline; ALERT on significant_deviation
  - question: Has an illogical or unapproved parent-child process relationship been observed?
    context: Parent Process ID (PPID) spoofing is a technique to make a malicious process appear as if it were launched by a legitimate one (e.g., explorer.exe). This question looks for process relationships that are either explicitly forbidden (e.g., services.exe should not spawn cmd.exe) or where the parent process listed in the event doesn't actually exist, indicating a spoof.
    answer_sources:
      - Windows Event ID 4688 from User Workstations, Application Servers, Developer Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_events(4688) WHERE (parent, child) in illogical_pairs_list OR parent_pid_is_terminated
  - question: Has any host shown a spike in the rate of "orphaned" processes?
    context: An "orphaned" process is one whose parent process ID (PPID) recorded at creation time no longer corresponds to a running process. A high rate of these events on a single host can indicate an adversary is repeatedly using a PPID spoofing technique that leverages recently terminated processes.
    answer_sources:
      - Windows Event ID 4688 from User Workstations, Application Servers, Developer Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MAINTAIN running_process_table; for new_process_events, CHECK if parent_pid exists; ALERT if rate_of_orphaned_processes spikes
  - question: Has a graph neural network model identified any process trees with anomalous structures indicative of PPID spoofing?
    context: This question uses an advanced machine learning approach to learn what normal process lineage looks like. A Graph Neural Network (GNN) can analyze the structure of the entire process tree and identify subtle anomalies, such as unusual depth or illogical branching, that are hallmarks of PPID spoofing techniques.
    answer_sources:
      - Windows Event ID 4688 from User Workstations, Application Servers, Developer Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY gnn_model to process_lineage_graphs; ALERT on anomalous_graph_structures