name: "T1564.009: Resource Forking"
id: "a7b3c9d1-e8f6-4a2b-9c8d-0e1f2a3b4c5d"
description: "This playbook helps investigate whether an adversary is using macOS resource forks to hide malicious payloads or executables for defense evasion. It looks for indicators such as resource forks matching known malicious hashes or having high entropy, writes to resource forks by unusual processes, executable files with non-zero resource forks, and suspicious event sequences like download-fork-execute."
type: "technique"
related: 
  - "TA0005: Defense Evasion"
contributors: 
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a file's resource fork been written with content matching a known malicious hash?"
    context: "This question aims to identify the direct use of resource forks to store known malware. By hashing the content of a resource fork during file write or creation events and comparing it against threat intelligence feeds, analysts can detect if a malicious payload has been hidden using this technique. A match is a strong indicator of compromise."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_CREATE file creation events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "File system audit logs"
      - "User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/"
    range: "Last 90 days"
    queries:
      - "pseudocode: FOR file_event IN (creation, write) | WHERE file_event has resource_fork | CALCULATE sha256 of resource_fork | LOOKUP hash in threat_intel_feed | IF match, ALERT."
  - question: "Does a file's resource fork have an unusually high entropy, suggesting it is packed or encrypted?"
    context: "Adversaries often pack or encrypt payloads to evade signature-based detection. High entropy is a mathematical indicator of randomness, which is characteristic of compressed or encrypted data. This question focuses on flagging files where the resource fork's content deviates from the normal entropy baseline of legitimate applications, pointing to potentially obfuscated malicious code."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_CREATE file creation events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "File system audit logs"
      - "User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/"
    range: "Last 90 days"
    queries:
      - "pseudocode: FOR file IN filesystem | WHERE file has non-zero resource_fork | CALCULATE entropy of resource_fork | IF entropy > baseline_95th_percentile, ALERT."
  - question: "Can a machine learning model identify file modification events that are likely associated with malicious resource fork usage?"
    context: "This question proposes a proactive, behavioral detection method. Instead of relying on single indicators, a machine learning model can analyze multiple features in concert (e.g., fork size, entropy, parent process, file permissions) to determine the likelihood of malicious activity. This helps identify novel or complex variations of the resource forking technique that might evade simpler rules."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_CREATE file creation events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "File system audit logs"
      - "User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/"
    range: "Last 90 days"
    queries:
      - "pseudocode: ON file_modification_event | EXTRACT features (fork_size, entropy, parent_process, etc.) | SCORE event with ML_model | IF score > threshold, ALERT."
  - question: "Is a suspicious process, such as a command-line utility or office application, writing to a file's resource fork?"
    context: "Typically, only specific system utilities like Finder should be modifying resource forks. This question aims to detect when processes not designed for this purpose, such as download tools (curl, wget), interpreters (python, bash), or document editors, write to a resource fork. Such behavior is highly anomalous and may indicate an adversary is staging a payload."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_FORK process fork events"
      - "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "User workstations (macOS), macOS-based servers, Development environments"
    range: "Last 90 days"
    queries:
      - "pseudocode: FOR file_write_event | WHERE target is resource_fork AND process_name IN (curl, wget, python, etc.), ALERT."
  - question: "Has a rare or never-before-seen process written to a resource fork?"
    context: "This question uses statistical analysis to find the 'needle in the haystack.' By baselining which processes normally write to resource forks and how often, analysts can spot outliers. A process that rarely or never performs this action but suddenly does is suspicious, as it could represent a custom malicious tool or a legitimate tool being used in an unusual, malicious way."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_FORK process fork events"
      - "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "User workstations (macOS), macOS-based servers, Development environments"
    range: "Last 90 days"
    queries:
      - "pseudocode: AGGREGATE process_names from resource_fork_writes over 30 days | CALCULATE frequency | IF process_name NOT IN allowlist AND frequency < 5th_percentile, ALERT."
  - question: "Does a process chain leading to a resource fork write deviate from normal, established patterns of behavior?"
    context: "This question focuses on the context of the action, not just the action itself. Malicious activity often has an anomalous process lineage (e.g., a browser spawns a shell, which downloads a file and writes to its resource fork). By modeling normal process chains, a clustering algorithm can identify and flag these abnormal sequences as outliers, indicating a potential compromise."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_FORK process fork events"
      - "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "User workstations (macOS), macOS-based servers, Development environments"
    range: "Last 90 days"
    queries:
      - "pseudocode: MODEL process_lineage_graphs for resource_fork_writes | USE clustering (DBSCAN) to find normal clusters | IF new_process_chain is an outlier, ALERT."
  - question: "Has an executable file been created or modified to contain a non-empty resource fork?"
    context: "While some legacy macOS applications used resource forks, it is highly unusual for modern executables. This question seeks to identify files that are both executable and have data stored in their resource fork. This combination is suspicious because it's a known method for smuggling malicious code or data alongside a seemingly legitimate executable."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events"
      - "ES_EVENT_TYPE_NOTIFY_CREATE file creation events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)"
    range: "Last 90 days"
    queries:
      - "pseudocode: FOR file_event IN (creation, attribute_modification) | IF file is executable AND resource_fork_size > 0, ALERT."
  - question: "Does an executable file have a resource fork that is statistically anomalous in size compared to its peers?"
    context: "This question uses statistical outlier detection to find suspicious executables. By establishing a baseline for the typical size of resource forks in executables (which is often zero), a file with a resource fork significantly larger than the average can be flagged. This points to an executable that is likely carrying an unusual, and potentially malicious, data payload in its fork."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events"
      - "ES_EVENT_TYPE_NOTIFY_CREATE file creation events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)"
    range: "Last 90 days"
    queries:
      - "pseudocode: MONITOR resource_fork_size for all executables | CALCULATE moving_average and std_dev | IF executable.resource_fork_size > (moving_average + 3*std_dev), ALERT."
  - question: "Has there been a sudden spike in the creation of executable files with non-empty resource forks on a host?"
    context: "This question aims to detect large-scale or automated malicious activity. A single executable with a resource fork might be an isolated event, but a sudden increase in the number of such files on a single host within a short period is a strong indicator of a malware dropper or automated script. Time-series analysis can distinguish this spike from normal system activity."
    answer_sources:
      - "ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events"
      - "ES_EVENT_TYPE_NOTIFY_CREATE file creation events"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)"
    range: "Last 90 days"
    queries:
      - "pseudocode: AGGREGATE count of new executables with non-zero resource_forks per host per hour | APPLY time-series anomaly detection (SARIMA) | IF count is an anomaly, ALERT."
  - question: "Has a file been downloaded, had its resource fork modified, and then been executed in a short time frame?"
    context: "This question reconstructs a common attack chain. Adversaries often download a file, inject a payload into its resource fork, and then execute it. By correlating network download events with endpoint file modification and process execution events, analysts can detect this entire 'download-fork-execute' sequence, providing high-fidelity evidence of a compromise."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
      - "Network egress points, User workstations (macOS), User download folders"
    range: "Last 90 days"
    queries:
      - "pseudocode: CORRELATE network_download, resource_fork_write, and process_execution for same file_path on same host within 5 minutes | IF sequence exists, ALERT."
  - question: "Did a 'download-fork-execute' sequence occur faster than typical user-initiated actions?"
    context: "This question adds a behavioral heuristic to increase confidence. Automated malicious scripts execute their steps extremely quickly. A human user typically takes longer to download, interact with, and run a file. By flagging sequences that happen almost instantaneously, analysts can prioritize alerts that are more likely to be automated and malicious."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
      - "Network egress points, User workstations (macOS), User download folders"
    range: "Last 90 days"
    queries:
      - "pseudocode: FOR each 'download-fork-execute' sequence | CALCULATE time_delta(execution - download) | IF time_delta < 15 seconds (or 5th percentile), RAISE_ALERT_PRIORITY."
  - question: "Can a machine learning model trained on normal event sequences identify a 'download-fork-execute' chain as a high-risk anomaly?"
    context: "This question proposes a sophisticated, data-driven approach to detect complex attack patterns. A sequence analysis model learns the 'grammar' of normal system and user behavior. The specific, ordered sequence of a download, followed by a resource fork write, followed by an execution is highly abnormal and would be assigned a very low probability by a trained model, allowing for its detection."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
      - "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
      - "Network egress points, User workstations (macOS), User download folders"
    range: "Last 90 days"
    queries:
      - "pseudocode: FEED event_stream (network, file, process) to sequence_model (LSTM) | IF model flags 'download->fork_write->exec' sequence as low_probability_anomaly, ALERT."