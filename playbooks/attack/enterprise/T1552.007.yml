name: T1552.007: Container API
id: 2a9e5b1f-7e8d-4c3a-9f6b-0d1e2f3a4b5c
description: This playbook helps investigate whether an adversary has gained access to credentials by exploiting container APIs, such as those for Docker or Kubernetes. The investigation focuses on identifying suspicious interactions with these APIs, including requests from known malicious IP addresses or using common scanning tools, direct access to sensitive endpoints that expose secrets or allow command execution, and behavioral patterns like 'scan-then-exploit' activity. It also looks for anomalies in data volume, such as unusually large log downloads, and credential misuse, like Kubernetes service account tokens being used from outside the cluster network.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
- none
questions:
- question: Has a known malicious IP address attempted to access our container APIs?
  context: This question aims to detect initial reconnaissance or exploitation attempts from sources already identified as malicious by threat intelligence. A match indicates a high-confidence threat actor is interacting with critical container infrastructure, which could be a precursor to credential theft or container escape.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Search Zeek logs for traffic to container API ports (2375, 2376, 6443, 10250) where the source IP is present in the threat intelligence list.
- question: Are there any unusual or rare User-Agent strings associated with scanning tools making requests to our container APIs?
  context: Adversaries often use common command-line tools or custom scripts for scanning and exploitation, which result in User-Agent strings that are rare in a typical enterprise environment. Identifying low-frequency User-Agents matching scanning tools helps uncover automated discovery or attack attempts that might otherwise be lost in noise.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Calculate frequency of User-Agent strings in http.log for traffic to container API ports. Flag User-Agents with low frequency (<0.1%) that match patterns of scanning tools (e.g., 'curl', 'Nmap').
- question: Can we classify incoming container API requests as malicious based on a combination of features like IP reputation, ASN, and header information?
  context: This question moves beyond simple indicators to a more sophisticated, model-based detection. By combining multiple weak signals (IP reputation, ASN, User-Agent entropy, unusual headers), a machine learning model can identify complex or novel attack patterns that individual rules might miss, providing a more robust defense against evolving threats.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Score incoming API requests in real-time using a classification model with features like IP reputation, ASN, User-Agent entropy, and HTTP headers.
- question: Has any unauthorized user or tool attempted to access sensitive container API endpoints known to expose credentials or grant execution?
  context: Direct access to sensitive API endpoints like `/api/v1/secrets` or `/containers/{id}/exec` is a critical security event. This question focuses on detecting blatant attempts to steal secrets or execute commands within containers, which are high-impact actions. Alerting on any access from non-whitelisted sources provides a clear signal of potential compromise.
  answer_sources:
  - Zeek http.log
  - Kubernetes Audit Logs
  - Docker Daemon Logs
  - Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Search http.log and Kubernetes Audit Logs for requests to sensitive paths (e.g., '/secrets', '/exec') from sources not on the administrative whitelist.
- question: Is any user or source IP accessing a set of API endpoints that significantly deviates from their established baseline behavior?
  context: Users and automated systems typically exhibit predictable patterns of API interaction. A significant deviation from this historical baseline, measured by metrics like the Jaccard distance, can indicate that an account has been compromised or is being used for an unauthorized purpose, such as exploring the API surface to find weaknesses.
  answer_sources:
  - Zeek http.log
  - Kubernetes Audit Logs
  - Docker Daemon Logs
  - Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For each user session, compare the set of accessed API paths against their 30-day historical baseline. Flag sessions with a high Jaccard distance.
- question: Are there any sequences of API calls from a user that are anomalous compared to their normal, learned workflow?
  context: Beyond just *what* endpoints are accessed, the *order* in which they are accessed is also meaningful. This question uses sequence analysis to detect deviations in a user's workflow. An attacker using a compromised account is unlikely to replicate the legitimate user's exact sequence of operations, leading to a high reconstruction error from the model, especially if the anomalous sequence involves sensitive endpoints.
  answer_sources:
  - Zeek http.log
  - Kubernetes Audit Logs
  - Docker Daemon Logs
  - Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Analyze real-time API call sequences using an LSTM autoencoder. Flag user sessions that produce a high reconstruction error, indicating deviation from normal workflows.
- question: Has any source IP exhibited a 'scan-then-exploit' pattern by first performing API discovery and then immediately targeting sensitive resources?
  context: This question aims to identify a classic attack pattern where an adversary first enumerates the available API surface (e.g., by querying `/api`, `/apis`) to understand the environment, and then uses that knowledge to target a high-value resource (e.g., `/secrets`, `/exec`). Correlating these two distinct phases of activity within a short time window is a strong indicator of a targeted attack.
  answer_sources:
  - Zeek http.log
  - Kubernetes Audit Logs
  - Kubernetes API Server, container orchestration plane, API gateway logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Correlate requests from a single source IP to discovery endpoints ('/api', '/apis') followed by requests to sensitive endpoints ('/secrets', '/exec') within a 10-minute window.
- question: Is there evidence of an IP shifting from high-entropy API requests (discovery) to low-entropy, targeted requests (exploitation) in consecutive time windows?
  context: This question operationalizes the 'scan-then-exploit' concept mathematically. A high entropy of requested URIs suggests broad, non-specific scanning. A subsequent drop to low entropy indicates a shift to repeatedly accessing a few specific, targeted endpoints. This change in the statistical properties of API requests can be a powerful signal of malicious intent.
  answer_sources:
  - Zeek http.log
  - Kubernetes Audit Logs
  - Kubernetes API Server, container orchestration plane, API gateway logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Calculate Shannon entropy of API URI paths per source IP in 5-minute windows. Alert on patterns of high entropy (>3.0) followed by low entropy (<1.0) with access to sensitive paths.
- question: Can we identify anomalous 'scan-then-exploit' sessions by clustering them based on features like API path count, request type ratios, and sensitive endpoint access?
  context: This question uses unsupervised machine learning to find outliers without pre-defined rules. By clustering normal user sessions, anomalous activities like 'scan-then-exploit' will either form their own small, distinct clusters or be flagged as noise by the algorithm (like DBSCAN). This approach can uncover novel attack patterns that don't fit existing heuristics.
  answer_sources:
  - Zeek http.log
  - Kubernetes Audit Logs
  - Kubernetes API Server, container orchestration plane, API gateway logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Cluster sessionized API requests using DBSCAN. Investigate sessions labeled as noise or forming small, distinct clusters, as these may represent anomalous behavior.
- question: Has any non-whitelisted source IP downloaded an abnormally large amount of data from a container log endpoint in a single session?
  context: This question sets a simple, high-confidence trap for data exfiltration. While legitimate administrators may access logs, downloading a very large volume (e.g., >100MB) from an untrusted source is highly suspicious and could indicate an adversary is bulk-exporting logs to find sensitive information like credentials, tokens, or configuration details.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Kubernetes Audit Logs
  - Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Alert if a non-whitelisted source IP's response bytes from a container API log endpoint exceed 100MB in a single session.
- question: Has any user or source IP's API activity (request count or data volume) significantly exceeded their own historical baseline?
  context: This question moves from a static, global threshold to a dynamic, per-entity baseline. This is more effective at detecting sophisticated attackers who might stay below a global limit but still operate far outside their own normal patterns. A sudden spike in activity for a specific user, even if not massive overall, is a strong indicator of a compromised account being used for data gathering.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Kubernetes Audit Logs
  - Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For each user/IP, calculate a 30-day rolling baseline of API requests and bytes transferred per hour. Alert if activity exceeds 3 standard deviations above the mean.
- question: Has the overall API traffic volume for the entire container environment significantly deviated from its forecasted trend?
  context: This question provides a macro-level view to detect large-scale or distributed data exfiltration that might not trigger per-entity alerts. By forecasting the expected system-wide traffic, a significant deviation can signal a widespread incident, such as an attacker using multiple compromised accounts or IPs to exfiltrate data in parallel.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Kubernetes Audit Logs
  - Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Use a time-series model (e.g., ARIMA) to forecast total API requests and bytes transferred. Alert when observed values significantly exceed the forecasted confidence interval.
- question: Has an external IP or a non-administrative user attempted to access container logs?
  context: Access to container logs should be restricted to a small set of administrative users and internal systems. This question establishes a clear boundary - any attempt to retrieve logs from an external, untrusted source or by a user without a legitimate need is inherently suspicious and warrants immediate investigation, as it may be an attempt to find sensitive data.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Kubernetes Audit Logs
  - Kubernetes API Server, container log aggregation service, Docker Daemon hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Alert on any request to a log retrieval endpoint where the source IP is external or the user is not on the administrative whitelist.
- question: Is any user accessing logs from an unusually high number of distinct containers or downloading a volume of log data that puts them in the top percentile of activity?
  context: This question refines volumetric analysis by focusing on two key behaviors of an attacker searching for credentials in logs - breadth (accessing many different containers' logs) and depth (downloading large amounts of log data). A user exceeding their own or their peers' 95th percentile on either metric is a strong indicator of abnormal, potentially malicious log harvesting.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Kubernetes Audit Logs
  - Kubernetes API Server, container log aggregation service, Docker Daemon hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For each user, calculate the 95th percentile for log data volume and unique containers accessed per hour. Alert when a user exceeds either threshold.
- question: Is a user's log access behavior (volume, frequency, container count) a significant outlier compared to other users with similar roles and permissions?
  context: Different roles have different legitimate needs for log access. This question avoids false positives by comparing a user's behavior not to the entire population, but to a curated peer group of users with similar roles. A developer accessing an unusual number of logs might be normal for their team, but an HR application's service account doing the same is highly anomalous. This contextualizes the analysis for higher fidelity alerts.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Kubernetes Audit Logs
  - Kubernetes API Server, container log aggregation service, Docker Daemon hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Cluster users into peer groups based on role. Within each group, alert when a user's log access behavior deviates significantly (>3 std dev) from the group's centroid.
- question: Has a Kubernetes service account token been used to authenticate from an IP address outside of the internal cluster network?
  context: Service account tokens are intended for intra-cluster communication (pod-to-API-server). Their use from an external IP address is a major red flag, strongly suggesting the token has been stolen from a compromised pod or misconfigured application and is now being used by an attacker to gain access to the cluster from the outside. This is a high-confidence indicator of compromise.
  answer_sources:
  - Kubernetes Audit Logs
  - Zeek conn.log
  - Cloud Provider Authentication Logs
  - Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Search Kubernetes Audit Logs for authentication events by a service account where the sourceIP is outside the defined internal cluster CIDR ranges.
- question: Has a service account authenticated from a new or statistically rare source IP subnet, ASN, or with an unusual User-Agent?
  context: Even if an external IP is not used, a compromised service account token might be used from an unusual *internal* location (e.g., a different namespace, a compromised developer workstation). This question baselines the normal network location and client software for each service account, allowing detection of anomalous usage patterns that could indicate lateral movement or misuse within the network.
  answer_sources:
  - Kubernetes Audit Logs
  - Zeek conn.log
  - Cloud Provider Authentication Logs
  - Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Baseline the source IP subnets and User-Agents for each service account. Alert on authentications from a source IP in a new/rare ASN or with a new/rare User-Agent.
- question: Can we identify anomalous service account authentications by clustering them based on features like source location, User-Agent, and time of day?
  context: This question applies unsupervised learning to detect subtle anomalies in authentication patterns. By clustering all authentication events, a legitimate service account's activity should form a dense, predictable cluster. An attacker's use of a stolen token—perhaps from a different location, at an unusual time, or with a different tool—will likely fall into a small, separate cluster or be an outlier, making it easy to spot without pre-defined rules.
  answer_sources:
  - Kubernetes Audit Logs
  - Zeek conn.log
  - Cloud Provider Authentication Logs
  - Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Cluster authentication events using features like identity type, source location (internal/external), User-Agent, and time of day. Investigate authentications in small, distant clusters.