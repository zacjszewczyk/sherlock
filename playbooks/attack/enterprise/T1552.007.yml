name: T1552.007: Container API
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has gained access to credentials by exploiting container APIs. It covers indicators such as HTTP requests from known malicious IPs or scanners to container API ports (2375, 2376, 6443, 10250), direct access to sensitive endpoints like /api/v1/secrets or /containers/{id}/exec, and "scan-then-exploit" behavior where discovery is followed by targeted access. The playbook also addresses volumetric anomalies, such as unusually high data transfers from log endpoints, extensive log retrieval from numerous distinct containers, and the use of internal Kubernetes service account tokens from external IP addresses.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any connections to container API ports originated from IP addresses on our threat intelligence lists?
    context: This question aims to detect initial access attempts or reconnaissance from known malicious actors. By cross-referencing source IPs connecting to critical container API ports (e.g., 2375, 2376, 6443, 10250) against a feed of malicious IPs, analysts can quickly identify and prioritize high-risk connections that may indicate an ongoing or impending attack. A match is a strong indicator of compromise.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.
      - Threat intelligence feed of known malicious IPs.
    range: last 90 days
    queries:
      - query: SEARCH Zeek logs (conn.log, http.log) WHERE destination_port IN (2375, 2376, 6443, 10250) | JOIN source_ip with threat_intelligence_feed ON ip_address | IF match, ALERT.
  - question: Are there any rare or suspicious User-Agent strings being used to access container API ports that might indicate a scanning tool?
    context: Adversaries often use custom scripts or common command-line tools (like curl, Nmap) for reconnaissance, which generate User-Agent strings different from legitimate clients. This question helps identify anomalous User-Agents by looking for those that appear infrequently and match patterns of known scanning or scripting tools. This can reveal automated probing of the container environment.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.
    range: last 90 days
    queries:
      - query: SEARCH Zeek http.log WHERE destination_port IN (2375, 2376, 6443, 10250) | CALCULATE frequency of user_agent over 24h | IF frequency < 0.1% AND user_agent matches ('Docker-Client', 'Go-http-client', 'curl', 'Nmap'), ALERT.
  - question: Can we use a machine learning model to classify incoming container API requests as benign or malicious in real-time?
    context: This question proposes a proactive, automated detection method. By training a model on features like IP reputation, ASN, User-Agent entropy, and HTTP headers, the system can score requests and automatically flag suspicious activity that might be missed by rule-based detections. This is useful for identifying novel or sophisticated attacks that don't match known patterns.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.
      - Machine learning model output.
    range: last 90 days
    queries:
      - query: INPUT Zeek log features (ip_reputation, asn, user_agent_entropy, http_headers) into classification_model | IF model_output is 'malicious', ALERT.
  - question: Have any unauthorized users or tools attempted to access sensitive container API endpoints?
    context: Certain API paths, like those for accessing secrets, executing commands in containers, or viewing logs, are extremely powerful and should only be accessed by authorized personnel. This question focuses on creating high-fidelity alerts whenever these critical endpoints are touched, while whitelisting known administrative accounts to reduce noise. A hit on this rule from an unauthorized source is a major security event.
    answer_sources:
      - Zeek http.log
      - Kubernetes Audit Logs
      - Docker Daemon Logs
      - Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.
    range: last 90 days
    queries:
      - query: SEARCH (Zeek http.log, K8s Audit Logs) WHERE api_path IN ('/api/v1/secrets', '*/pods/.*/exec', '*/containers/.*/exec', '*/containers/.*/logs') AND user NOT IN (authorized_admin_whitelist) | ALERT.
  - question: Have any users or source IPs deviated significantly from their normal baseline of API access patterns?
    context: Users and automated systems typically have predictable patterns of API interaction. This question aims to detect anomalous behavior by establishing a baseline of normal API path access for each user/IP and then flagging sessions that deviate significantly from that baseline. A high deviation, especially when it involves access to sensitive paths not previously seen for that user, could indicate a compromised account or insider threat.
    answer_sources:
      - Zeek http.log
      - Kubernetes Audit Logs
      - Docker Daemon Logs
      - Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.
    range: last 90 days
    queries:
      - query: FOR each user/ip GET historical_api_paths (last 30d) | GET current_session_paths | CALCULATE Jaccard distance between sets | IF distance > threshold AND current_session contains sensitive_path, ALERT.
  - question: Are there user sessions with API call sequences that are anomalous compared to the typical workflows for their role?
    context: Beyond just what endpoints are accessed, the order in which they are accessed can reveal malicious intent. This question uses a sequence analysis model (like an LSTM autoencoder) to learn normal API call sequences for different user roles. Sessions that don't conform to these learned sequences (i.e., have a high reconstruction error) are flagged as anomalous, indicating a potential deviation from normal workflow, such as an attacker exploring the environment.
    answer_sources:
      - Zeek http.log
      - Kubernetes Audit Logs
      - Docker Daemon Logs
      - Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.
    range: last 90 days
    queries:
      - query: INPUT real-time API call sequence for user into LSTM_autoencoder_model (trained on user's role) | CALCULATE reconstruction_error | IF error > threshold, ALERT.
  - question: Has any single source IP exhibited a "scan-then-exploit" pattern by performing discovery followed by access to a sensitive resource?
    context: A common attack pattern involves first enumerating the environment to understand what is available (e.g., hitting /api, /apis) and then using that information to target a specific sensitive resource (e.g., /secrets, /exec). This question uses a time-bound correlation rule to specifically detect this two-stage behavior from a single IP, providing a strong signal of targeted malicious activity.
    answer_sources:
      - Zeek http.log
      - Kubernetes Audit Logs
      - Kubernetes API Server, container orchestration plane, API gateway logs.
    range: last 90 days
    queries:
      - query: CORRELATE events from source_ip IF event1 is request to discovery_endpoint (e.g. /api, /apis) AND event2 is request to sensitive_endpoint (e.g. /secrets, /exec) AND timestamp(event2) - timestamp(event1) < 10 minutes, ALERT.
  - question: Are there source IPs showing a pattern of high entropy (discovery) in API requests followed by low entropy (targeted access)?
    context: This question operationalizes the "scan-then-exploit" concept using information theory. A high entropy of API paths requested in a short time suggests broad scanning or discovery. A subsequent drop to low entropy with requests to a few specific, sensitive paths suggests the attacker has found a target. This method can detect the pattern without needing to pre-define every discovery or sensitive endpoint.
    answer_sources:
      - Zeek http.log
      - Kubernetes Audit Logs
      - Kubernetes API Server, container orchestration plane, API gateway logs.
    range: last 90 days
    queries:
      - query: FOR each source_ip in 5-min windows CALCULATE shannon_entropy of api_paths | IF entropy(window_N) > 3.0 AND entropy(window_N+1) < 1.0 AND window_N+1 contains sensitive_paths, ALERT.
  - question: Can we identify anomalous "scan-then-exploit" sessions by clustering API request behavior?
    context: This question uses unsupervised machine learning to find outliers. By clustering sessions based on features like the number of unique paths, request types, and access to sensitive endpoints, normal administrative and user activities will form large, dense clusters. Anomalous sessions, such as the "scan-then-exploit" pattern, will not fit into these clusters and will either form their own small clusters or be labeled as noise by the algorithm (e.g., DBSCAN), making them easy to identify for investigation.
    answer_sources:
      - Zeek http.log
      - Kubernetes Audit Logs
      - Kubernetes API Server, container orchestration plane, API gateway logs.
    range: last 90 days
    queries:
      - query: SESSIONIZE API logs by source_ip | CREATE features (unique_path_count, get_post_ratio, sensitive_access_flag) | APPLY DBSCAN clustering | INVESTIGATE sessions in small clusters or labeled as noise.
  - question: Has any non-whitelisted IP address downloaded an excessive amount of data from a container log endpoint?
    context: Exfiltrating large volumes of log data can be a way for an attacker to gather sensitive information. This question sets a simple, static threshold (e.g., 100MB) for data downloaded from log endpoints. While potentially noisy, it provides a basic safety net to catch egregious data exfiltration attempts from unknown or untrusted sources.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Kubernetes Audit Logs
      - Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.
    range: last 90 days
    queries:
      - query: SEARCH Zeek conn.log WHERE destination_endpoint is 'log_endpoint' AND source_ip NOT IN (whitelist) | AGGREGATE sum(resp_bytes) by session | IF sum(resp_bytes) > 100MB, ALERT.
  - question: Have any users or source IPs exhibited a statistically significant spike in API request count or data transfer volume?
    context: Static thresholds can be inflexible. This question uses a more sophisticated dynamic baseline, tailored to each user or IP. By calculating the historical average and standard deviation of activity, the system can detect when a user's behavior significantly changes (e.g., a 3-sigma event). This is more effective at catching anomalies relative to that user's own normal activity, reducing false positives from accounts that are normally busy.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Kubernetes Audit Logs
      - Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.
    range: last 90 days
    queries:
      - query: FOR each user/ip CALCULATE 30-day rolling_avg and std_dev of (request_count, bytes_transferred) per hour | IF current_hour_activity > (rolling_avg + 3 * std_dev), ALERT.
  - question: Has the overall volume of API requests or data transfer for the entire container environment deviated significantly from forecasted norms?
    context: This question looks for system-wide anomalies rather than focusing on a single user. A time-series model (like ARIMA) can predict the expected overall traffic volume based on historical patterns (e.g., time of day, day of week). If the actual observed traffic suddenly spikes far beyond the model's prediction and its confidence interval, it could indicate a large-scale event like a coordinated attack or widespread data exfiltration affecting multiple systems.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Kubernetes Audit Logs
      - Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.
    range: last 90 days
    queries:
      - query: INPUT system-wide metrics (total_requests, total_bytes) into ARIMA_model | IF observed_value > forecasted_value + confidence_interval, ALERT.
  - question: Have any non-administrative or external entities attempted to access container logs?
    context: Access to container logs should typically be restricted to internal administrative users or systems. This question implements a strict access control check, alerting on any attempt by an external IP or a non-admin user to retrieve logs. This acts as a high-fidelity tripwire for unauthorized log access, which is often a precursor to finding sensitive information.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Kubernetes Audit Logs
      - Kubernetes API Server, container log aggregation service, Docker Daemon hosts.
    range: last 90 days
    queries:
      - query: SEARCH logs for log_retrieval_endpoint access | IF (user NOT IN admin_list) OR (source_ip NOT IN internal_ranges), ALERT.
  - question: Has any user accessed logs from an unusually high number of containers or downloaded an unusually large volume of log data?
    context: Even for authorized admins, certain behaviors are anomalous. An administrator might check the logs for a few problematic pods, but an attacker might try to scrape logs from all pods. This question establishes a user-specific baseline using the 95th percentile for log access volume and breadth (number of containers). It then alerts when a user's activity exceeds this high-water mark, indicating behavior that is extreme even for them.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Kubernetes Audit Logs
      - Kubernetes API Server, container log aggregation service, Docker Daemon hosts.
    range: last 90 days
    queries:
      - query: FOR each user CALCULATE 95th_percentile of (log_volume_per_hour, unique_containers_accessed_per_hour) | IF current_hour_activity > 95th_percentile_threshold, ALERT.
  - question: Is any user's log access behavior a significant outlier compared to their peers with similar roles?
    context: This question refines anomaly detection by comparing a user not just to their own history, but to the behavior of their peers. Users are first grouped by role or permissions (e.g., 'DB Admins', 'App Developers'). Within each group, the system identifies users whose log access patterns (volume, frequency, etc.) are statistical outliers compared to the group's norm. This helps catch a compromised account that is being used in a way that is inconsistent with its intended role.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Kubernetes Audit Logs
      - Kubernetes API Server, container log aggregation service, Docker Daemon hosts.
    range: last 90 days
    queries:
      - query: CLUSTER users into peer_groups by role | FOR each group CALCULATE behavior_centroid (avg_log_volume, avg_frequency) | FOR each user in group CALCULATE deviation from centroid | IF deviation > 3 * std_dev_of_group, ALERT.
  - question: Has a Kubernetes service account token been used from an IP address outside the internal cluster network?
    context: Service account tokens are intended for intra-cluster communication (e.g., pod-to-API-server). Their use from an external IP address is a massive red flag, strongly suggesting the token has been stolen and is being used by an attacker to access the cluster from the outside. This question creates a high-priority, high-fidelity alert for this specific scenario.
    answer_sources:
      - Kubernetes Audit Logs
      - Zeek conn.log
      - Cloud Provider Authentication Logs
      - Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.
    range: last 90 days
    queries:
      - query: SEARCH K8s Audit Logs WHERE username starts with 'system:serviceaccount:' AND sourceIP NOT IN (internal_cluster_CIDRs) | ALERT.
  - question: Has a service account authenticated from an unusual IP subnet, ASN, or with an atypical User-Agent?
    context: Even if an IP is not strictly "external," it might still be anomalous for a specific service account. This question builds a profile for each service account, learning its typical source IPs and User-Agents. It then flags any authentication event that deviates from this learned profile, such as a request from a public cloud ASN when it normally comes from an internal subnet. This can detect more subtle misuses of a compromised token.
    answer_sources:
      - Kubernetes Audit Logs
      - Zeek conn.log
      - Cloud Provider Authentication Logs
      - Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.
    range: last 90 days
    queries:
      - query: FOR each service_account BUILD baseline of (source_subnets, user_agents) | ON new auth event IF source_subnet or user_agent is not in baseline, ALERT.
  - question: Can we use clustering to identify anomalous authentication events for both users and service accounts?
    context: This question applies unsupervised learning to the general problem of authentication analysis. By creating features for each authentication event (e.g., identity type, source location, time of day) and clustering them, normal, high-volume activities will form large clusters. Any anomalous authentications, such as a service account used from an external location at an odd time, will fail to fit into these main clusters and will be grouped into small, outlying clusters, making them easy to spot for an analyst.
    answer_sources:
      - Kubernetes Audit Logs
      - Zeek conn.log
      - Cloud Provider Authentication Logs
      - Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.
    range: last 90 days
    queries:
      - query: FOR all auth events CREATE features (identity_type, source_location, user_agent, time_of_day) | APPLY K-Means clustering | INVESTIGATE events in small, distant clusters.