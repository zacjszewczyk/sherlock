name: T1218.015: Electron Applications
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the adversary technique of using Electron applications for defense evasion. It provides investigative steps to detect malicious activity, such as Electron apps connecting to known malicious IPs or rare domains, being launched with dangerous command-line arguments (e.g., to disable sandboxing), spawning command-line interpreters like cmd.exe or powershell.exe, generating anomalous network traffic (e.g., non-standard ports, large data transfers), or having child processes that interact with the parent application's core resource files (like app.asar).
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a known Electron application making a network connection to a destination IP or domain that is a known malicious indicator?
    context: This question aims to identify high-confidence threats by correlating process activity with network logs and threat intelligence. An Electron application connecting to a known command-and-control (C2) server or malware distribution point is a strong indicator of compromise. This action provides a direct way to detect such activity by joining process creation events with network connection data and checking against a threat intelligence feed.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process events (EventID=4688) for Electron apps AND network connection logs (Zeek conn.log/dns.log) | JOIN on source IP and timestamp | LOOKUP destination IP/domain in threat intelligence feed | WHERE threat_match=true | ALERT
  - question: Has an Electron application connected to a statistically rare destination domain or IP address within the enterprise?
    context: Adversaries often use unique or new infrastructure for their operations. A connection to a domain or IP that has been contacted by very few other endpoints in the organization is statistically anomalous and suspicious. This question helps uncover potentially malicious connections that are not yet on threat intelligence feeds by focusing on rarity and statistical outliers.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE prevalence of all destination IPs/domains over 30 days | SEARCH network connections from Electron apps | JOIN with prevalence data | WHERE prevalence < 0.1% | ALERT
  - question: Can machine learning classify a network connection from an Electron application as malicious based on its characteristics?
    context: This question leverages machine learning to detect malicious network activity that might not be caught by simple rules or threat feeds. By training a model on features like port, protocol, data volume, and domain characteristics, it's possible to identify complex patterns indicative of malicious behavior. This is useful for finding novel threats or evasive C2 channels.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: EXTRACT features from new Electron app network connections | INPUT features into pre-trained classification model | WHERE prediction_score > 0.9 | ALERT
  - question: Was an Electron application launched with known high-risk command-line arguments that could disable security features or enable debugging?
    context: Adversaries may launch Electron applications with specific command-line flags like '--no-sandbox' or '--remote-debugging-port' to bypass security controls or inject malicious code. This question directly checks for the use of these dangerous arguments in process creation events, providing a clear indicator of potential misuse or compromise.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Developer workstations, Production servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process creation events (EventID=4688) for Electron apps | PARSE command line | WHERE command_line contains '--inspect', '--remote-debugging-port', '--no-sandbox', etc. | ALERT
  - question: Has an Electron application been executed with a statistically rare or previously unseen command-line argument?
    context: This question helps detect anomalous process executions by focusing on the rarity of command-line arguments. Legitimate usage often involves a consistent set of arguments. An adversary introducing a new or unusual argument for exploitation or persistence would be flagged as a statistical outlier, even if the argument itself is not on a known-bad list.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Developer workstations, Production servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE frequency of command-line arguments for Electron apps over 30 days | SEARCH new process creation events | CALCULATE rarity score for arguments | WHERE rarity_score in bottom 1% | ALERT
  - question: Does the full command line of an Electron application process execution appear anomalous when compared to a historical baseline using machine learning?
    context: This question applies unsupervised machine learning to detect unusual command lines as a whole, rather than just individual arguments. Models like Isolation Forest can learn the structure of normal command lines and identify outliers that deviate significantly. This is effective for catching complex or obfuscated commands that might evade simple pattern matching.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Developer workstations, Production servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: VECTORIZE new Electron app command lines using TF-IDF | INPUT vectors into pre-trained anomaly detection model (Isolation Forest) | WHERE model identifies as outlier | ALERT
  - question: Did a known Electron application spawn a command-line interpreter or scripting engine as a direct child process?
    context: It is highly suspicious for a typical Electron application (like a chat client) to spawn a shell like 'cmd.exe' or 'powershell.exe'. This behavior is a common pattern for code execution, where an initial compromise in the application is used to gain a shell on the system. This question provides a high-fidelity alert for this specific, well-known malicious TTP.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process creation events (EventID=4688) | WHERE parent_process is in Electron_app_list AND child_process is in interpreter_list (cmd.exe, powershell.exe, etc.) | ALERT
  - question: Has an Electron application spawned a child process that has never been seen in that parent-child combination before?
    context: This question aims to detect novel malicious activity by baselining normal parent-child process relationships. While some Electron apps may legitimately spawn helper processes, an adversary will likely create a new, unseen relationship (e.g., 'teams.exe' -> 'malicious.exe'). Alerting on the first occurrence of a new pair provides an early warning of potential deviation.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MAINTAIN baseline of all parent-child process pairs | ON new process creation event | IF parent is Electron app AND parent-child pair is new | ALERT
  - question: Is the spawning of a shell by an Electron application a statistically improbable event based on a graph model of process relationships?
    context: This question uses a more advanced analytical technique, graph analysis, to model all process relationships in the environment. Legitimate and frequent parent-child events will form strong, high-weight connections in the graph. A malicious event, like an Electron app spawning a shell, would likely be a very rare or new connection, represented by a low-weight edge, making it stand out as a graph anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL process lineage as a weighted directed graph | IDENTIFY edges between 'Electron App' nodes and 'Shell' nodes | WHERE edge_weight is below anomaly threshold | ALERT
  - question: Is an Electron application communicating over a non-standard network port for its expected protocol?
    context: This question seeks to identify C2 communications or other malicious activity that attempts to hide on non-standard ports. For example, an application that normally only uses port 443 for HTTPS traffic suddenly making a connection on port 8080 is suspicious. By defining and enforcing an allowlist of expected ports per application, deviations can be easily detected.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, Domain Name System (DNS) resolvers, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE process events with network logs | FOR each Electron app | IF destination_port NOT IN application_port_allowlist | ALERT
  - question: Did a network connection from an Electron application involve an anomalously large amount of data transfer or connect to a domain rarely seen by other devices?
    context: This question targets two common indicators of malicious activity data exfiltration and communication with rare domains. A sudden, unusually large data transfer from an application could signify data being stolen. Similarly, connecting to a domain that very few other hosts in the organization have ever contacted is suspicious. This approach uses historical baselines to define what is 'normal' and alerts on deviations.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, Domain Name System (DNS) resolvers, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE network metrics (bytes_sent, bytes_received, duration) per Electron app | ALERT if new connection metric > 99th percentile | AND/OR | BASELINE domain prevalence across all devices | ALERT if Electron app connects to domain with prevalence < 1%
  - question: Has the volume of outbound data from an Electron application on a specific host significantly exceeded the amount predicted by a time-series forecasting model?
    context: This question uses time-series analysis to detect data exfiltration. Unlike simple thresholding, a forecasting model like Prophet or SARIMA can account for seasonality and trends (e.g., higher traffic during business hours). An alert is triggered only when the observed data volume is a statistical anomaly compared to the *expected* volume for that specific time, reducing false positives and more accurately identifying potential exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, Domain Name System (DNS) resolvers, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL outbound data volume per host/app as a time series | FORECAST expected data volume for next interval | IF actual_volume > forecast_prediction_interval | ALERT
  - question: Did a child process of an Electron application execute with a command line that references the parent application's core resource files like 'app.asar'?
    context: This question targets a specific technique where an adversary manipulates an Electron application by causing it to execute a command that interacts with its own source or resource files (e.g., 'app.asar'). This is often a precursor to modifying the application for persistence or injecting malicious code. This is unusual behavior for a legitimate child process and can be detected with specific pattern matching on the command line.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices with installed Electron applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process creation events | WHERE parent is Electron app | PARSE child process command line | IF command line contains path to parent_process_name and ('app.asar' or '.js') | ALERT
  - question: Does the command line of a child process spawned by an Electron application have an unusually high entropy score, suggesting obfuscation?
    context: Adversaries often use obfuscation or encoding (like Base64) to hide malicious commands or payloads within command-line arguments. These obfuscated strings typically have a much higher Shannon entropy (a measure of randomness) than normal text-based commands. This question helps detect such obfuscation by flagging command lines that are statistical outliers in terms of their entropy.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices with installed Electron applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR child processes of Electron apps | CALCULATE Shannon entropy of command line | BASELINE normal entropy values | IF new entropy_score > 98th percentile | ALERT
  - question: Is the sequence of arguments in the command line of a child process from an Electron app anomalous according to a sequence-based machine learning model?
    context: This question applies advanced machine learning to analyze not just the arguments themselves, but their order and structure. A model like an LSTM autoencoder can learn the normal sequences of commands and arguments. An adversary attempting to inject a malicious command will likely create a sequence that the model has not seen and cannot reconstruct well, resulting in a high reconstruction error and triggering an alert. This can catch novel or complex injection attacks.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices with installed Electron applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT command line argument sequence into pre-trained LSTM autoencoder | CALCULATE reconstruction error | IF error > anomaly_threshold | ALERT