name: T1218.015: Electron Applications
id: c3d9a8f0-5b1e-4f7a-8d6c-9e0b1a2f3d4e
description: >
  Investigates whether adversaries are leveraging Electron applications for defense evasion. This involves checking if Electron apps are making network connections to known malicious destinations, are launched with suspicious command-line arguments to disable security features, are spawning unexpected child processes like command interpreters, are generating anomalous network traffic patterns (e.g., unusual ports, data volumes), or have their child processes executing commands that reference the parent application's core resource files (e.g., app.asar).
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are Electron applications connecting to IP addresses or domains on a threat intelligence feed?
    context: This question seeks to identify high-confidence indicators of compromise by checking if a legitimate Electron application is communicating with known malicious infrastructure. Correlating process execution data with network logs and comparing destinations against a threat intelligence feed allows for the rapid detection of an application being used for C2 or other malicious activities.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROCESS_EVENTS = filter process events for known Electron apps (e.g., teams.exe)
          NETWORK_EVENTS = filter network connection or DNS logs
          JOIN PROCESS_EVENTS and NETWORK_EVENTS on source IP and timestamp
          LOOKUP destination IP/domain from JOINED_EVENTS against threat intelligence database
          ALERT if a match is found
  - question: Are Electron applications connecting to statistically rare domains or IP addresses within the enterprise?
    context: This question helps uncover potentially malicious or unauthorized activity by identifying network connections to destinations that are not commonly visited by other systems in the environment. A low prevalence rate suggests the connection might be specific to a targeted attack or an unauthorized tool, rather than routine application behavior.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          For each destination contacted by an Electron app:
            CALCULATE prevalence = (count of distinct endpoints contacting destination) / (total endpoints)
          ALERT if prevalence < 0.1%
  - question: Can a machine learning model identify malicious network connections originating from Electron applications?
    context: This question explores a more advanced, behavioral approach to detection. By training a classification model on features derived from network logs (e.g., port, protocol, data volume, domain age), it's possible to identify subtle patterns indicative of malicious activity that might be missed by rule-based methods. This helps detect novel threats and sophisticated evasion techniques.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FEATURES = extract from Zeek logs (port, protocol, duration, bytes, domain entropy, domain age)
          MODEL = train XGBoost or Logistic Regression on labeled (malicious/benign) data
          SCORE new connections from Electron apps with MODEL
          ALERT if score > 0.9
  - question: Are Electron applications being launched with risky command-line arguments that could disable security features?
    context: This question focuses on detecting attempts to weaken an application's security posture from the command line. Arguments like '--no-sandbox' or '--remote-debugging-port' can be abused by adversaries to inject code, bypass security controls, or manipulate the application's behavior for malicious purposes. Monitoring for these specific arguments is a direct way to spot this abuse.
    answer_sources: Windows Event ID 4688, Endpoint devices, Developer workstations, Production servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FILTER process creation events for known Electron apps
          SEARCH command line for risky arguments (e.g., '--inspect', '--no-sandbox', '--gpu-launcher')
          ALERT if a risky argument is found
  - question: Are Electron applications being launched with statistically rare or unusual command-line arguments?
    context: This question helps identify anomalous process executions by baselining normal command-line usage. Adversaries may use unique or seldom-seen arguments to execute malicious code or configure an application in a non-standard way. Flagging executions with low-frequency arguments provides a powerful method for detecting outliers that could indicate malicious activity.
    answer_sources: Windows Event ID 4688, Endpoint devices, Developer workstations, Production servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = build frequency distribution of all command-line arguments for each Electron app over 30 days
          For each new process execution:
            CALCULATE rarity score for its arguments based on BASELINE
          ALERT if rarity score is in the bottom 1st percentile
  - question: Can an anomaly detection model identify malicious command lines used to launch Electron applications?
    context: This question leverages machine learning to detect novel or complex malicious command lines that might not be caught by simple signature-based rules. By modeling the structure and content of legitimate command lines (e.g., with TF-IDF and Isolation Forest), this approach can identify outliers that deviate from established patterns, indicating potential manipulation or abuse.
    answer_sources: Windows Event ID 4688, Endpoint devices, Developer workstations, Production servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          VECTORS = represent command lines as TF-IDF vectors
          MODEL = train Isolation Forest or One-Class SVM on baseline VECTORS
          SCORE new process command lines with MODEL
          ALERT if a command line is identified as an outlier
  - question: Are known Electron applications spawning command-line interpreters or scripting engines as direct child processes?
    context: This question targets a common adversary technique where a trusted application is used to launch a shell (e.g., cmd.exe, powershell.exe). This behavior is highly suspicious because applications like Slack or Teams typically do not need to spawn command interpreters. Detecting this parent-child relationship is a strong indicator of code execution and potential lateral movement.
    answer_sources: Windows Event ID 4688, Endpoint devices, Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR process creation events
          ALERT if parent process is a known Electron app (e.g., slack.exe) AND child process is an interpreter (e.g., cmd.exe, powershell.exe)
  - question: Are there new or infrequent parent-child process relationships involving an Electron application?
    context: This question helps identify anomalous process chains by baselining legitimate parent-child relationships across the environment. An Electron application spawning a process it has never spawned before, or spawning a known child process with unusually low frequency, can indicate that a new, potentially malicious functionality has been introduced or triggered.
    answer_sources: Windows Event ID 4688, Endpoint devices, Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE = build frequency table of all parent-child pairs over 30 days
          ALERT if a new pair with an Electron app parent is observed
          ALERT if an existing pair's frequency drops into the <1st percentile of its historical norm
  - question: Can a graph-based anomaly detection model identify suspicious process chains originating from an Electron application?
    context: This question applies graph analysis to model and detect unusual process execution flows. By representing process lineage as a weighted graph, algorithms can identify statistically improbable connections, such as a low-frequency edge between an Electron app and a shell. This provides a robust, system-wide view for detecting sophisticated execution chains.
    answer_sources: Windows Event ID 4688, Endpoint devices, Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GRAPH = model process lineage, with nodes as processes and edges weighted by frequency
          USE graph anomaly detection algorithm (e.g., community detection)
          ALERT on low-weight edge connecting an 'Electron App' node to a 'Shell/Interpreter' node
  - question: Are Electron applications connecting to non-standard ports for their protocol?
    context: This question aims to detect C2 channels or other malicious traffic disguised on unusual ports. Legitimate applications typically communicate over standard, predictable ports (e.g., 80, 443). An Electron app connecting to a non-standard port could indicate an attempt to bypass firewall rules or hide its activity from network monitoring.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Network egress points, Domain Name System (DNS) resolvers, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE allowlist of standard ports (e.g., 80, 443) for each Electron app
          CORRELATE process and network logs
          ALERT when an app connects to a port not on its allowlist
  - question: Are Electron applications exhibiting anomalous network behavior, such as unusually large data transfers or connections to rarely seen domains?
    context: This question focuses on detecting data exfiltration or C2 activity by baselining normal network behavior. A sudden spike in data sent, or a connection to a domain seen by very few other devices, are strong statistical indicators that the application's network activity has deviated from the norm and may be malicious.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Network egress points, Domain Name System (DNS) resolvers, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE network metrics (bytes sent/received, duration) per app
          ALERT if a new connection exceeds the 99th percentile of the baseline
          BASELINE domain prevalence (percentage of devices querying a domain)
          ALERT if an app resolves a domain with prevalence < 1%
  - question: Is the volume of outbound data from an Electron application significantly exceeding its predicted forecast?
    context: This question uses time-series forecasting to detect potential data exfiltration. By modeling the expected rhythm of an application's outbound data flow, it is possible to identify significant, unexpected spikes in traffic. An alert on such an anomaly could be an early warning of an adversary stealing large quantities of data.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Network egress points, Domain Name System (DNS) resolvers, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL outbound data volume per host as a time series using SARIMA or Prophet
          FORECAST expected data volume range for the next hour
          ALERT if observed volume significantly exceeds the prediction interval
  - question: Are child processes of Electron applications executing commands that reference the parent's core resource files like 'app.asar'?
    context: This question looks for evidence of an adversary attempting to tamper with or extract logic from the Electron application itself. A child process accessing core application files (e.g., 'app.asar', which is an application archive) is highly irregular and could indicate an attempt to unpack the application, steal source code, or inject malicious JavaScript.
    answer_sources: Windows Event ID 4688, Endpoint devices with installed Electron applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INSPECT command line of child processes spawned by Electron apps
          USE regex to detect file paths referencing parent app name and sensitive files (e.g., 'app.asar', '.js')
          ALERT on match
  - question: Do command lines of child processes spawned by Electron applications have unusually high entropy?
    context: This question uses information theory to detect obfuscated or injected code within command-line arguments. Legitimate commands tend to have lower, more predictable entropy, while long, randomized strings—often used in obfuscated payloads—will have high entropy. This makes entropy calculation a useful heuristic for spotting suspicious commands.
    answer_sources: Windows Event ID 4688, Endpoint devices with installed Electron applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          For child processes of Electron apps:
            CALCULATE Shannon entropy of the command line
          BASELINE the entropy distribution
          ALERT if a command's entropy exceeds the 98th percentile of the baseline
  - question: Can a sequence-based machine learning model detect anomalous command-line arguments in child processes of Electron apps?
    context: This question applies deep learning to understand the normal sequence and structure of command-line arguments. A model like an LSTM autoencoder can learn legitimate patterns and will fail to accurately reconstruct novel or malicious sequences, resulting in a high reconstruction error. This allows for the detection of sophisticated injection or manipulation techniques that might appear legitimate at a surface level.
    answer_sources: Windows Event ID 4688, Endpoint devices with installed Electron applications
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train an LSTM autoencoder on sequences of legitimate command-line arguments
          For new child process commands:
            CALCULATE reconstruction error using the MODEL
          ALERT if error is anomalously high