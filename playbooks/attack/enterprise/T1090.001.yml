name: T1090.001: Internal Proxy
id: 4a8e3d2f-1b9c-4d6a-8f7b-9c1d2e3f4a5b
description: This playbook helps determine if an adversary is using an internal system as a proxy for Command and Control (C2) communications. This technique involves routing C2 traffic through a compromised internal host to obscure the true destination of the traffic and evade network egress controls. Evidence may include the execution of known proxy tools followed by connections to malicious endpoints, the use of legitimate utilities like netsh.exe or ssh.exe for port forwarding, network traffic anomalies such as protocol mismatches or high entropy on non-standard ports, an internal host acting as a network aggregator by funneling traffic from many internal systems to few external ones, or the appearance of new, long-duration connections between internal hosts that do not typically communicate.
type: technique
related:
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Was a known proxy tool executed on a host, which then connected to a known malicious C2 endpoint within 5 minutes?
  context: This question aims to identify the most direct evidence of a malicious proxy, which is the execution of a tool designed for that purpose, immediately followed by communication with a command-and-control server. Correlating process execution with network logs in a short time window is a high-fidelity way to detect this specific TTP.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feeds
  - Workstations
  - Application Servers
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process creation logs (EID 4688) for file hashes matching known proxy tools.
      FOR each matching event,
        GET hostname and timestamp.
        SEARCH network connection logs (Zeek) for connections from that hostname within 5 minutes of the process event.
        CHECK if the destination IP or domain is in the C2 threat intelligence feed.
        IF true, ALERT.
- question: Did a host that executed a potential proxy tool exhibit an anomalous spike in outbound data volume or connection count?
  context: Adversaries using a host as a proxy will likely cause a significant increase in its network traffic. By establishing a baseline of normal behavior for a host, we can detect deviations that occur shortly after a suspicious process is launched. This is useful for finding unknown or custom proxy tools that are not caught by signature-based methods.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Workstations
  - Application Servers
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host,
        CALCULATE baseline 95th percentile of hourly outbound bytes and connection counts from network logs.
      SEARCH for process creation events of potential proxy tools.
      FOR each matching event,
        GET hostname and timestamp.
        CALCULATE outbound bytes and connection count for that host in the next hour.
        IF traffic exceeds the host's established baseline, ALERT.
- question: Can we use a machine learning model to predict if a new process execution is a malicious proxy based on its characteristics and subsequent network activity?
  context: This question explores a proactive, machine learning-based approach. By training a model on features of known benign and malicious proxy executions, the system can learn to identify subtle patterns that indicate malicious activity. This allows for the detection of novel threats and reduces reliance on static indicators.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Workstations
  - Application Servers
  - Domain Controllers
  - Network Egress Points
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      GATHER features for process events: parent process, command-line entropy, user.
      GATHER network features for 10 minutes post-execution: connection count, data volume, unique ports.
      INPUT features into a pre-trained classification model.
      IF the model predicts a high probability of being a malicious proxy, ALERT.
- question: Was a legitimate system utility executed with command-line arguments that configure port forwarding or a proxy?
  context: Adversaries often abuse legitimate tools ("living off the land") to avoid deploying custom malware. Utilities like `netsh.exe` and `ssh.exe` have built-in capabilities for redirecting network traffic. Searching for specific command-line patterns associated with these features is a direct way to find this activity.
  answer_sources:
  - Windows Event ID 4688
  - Jump Servers
  - Bastion Hosts
  - Domain Controllers
  - Developer Workstations
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process creation logs (EID 4688) for process names like 'netsh.exe', 'ssh.exe', 'plink.exe'.
      FOR each matching event,
        SCAN command-line arguments for regex patterns like 'portproxy add', 'ssh -L', 'ssh -R'.
        IF a pattern is found, ALERT.
- question: Was a common utility executed with a command-line structure that is statistically unusual for that host?
  context: System administrators and legitimate applications tend to use utilities in repetitive, predictable ways. An adversary's use of a tool for port forwarding will likely involve command-line arguments that have never been seen before on that system. By baselining normal command structures and looking for novel ones (low Jaccard similarity), we can detect anomalous usage.
  answer_sources:
  - Windows Event ID 4688
  - Jump Servers
  - Bastion Hosts
  - Domain Controllers
  - Developer Workstations
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host and utility,
        CREATE a historical set of unique command-line tokens.
      FOR each new execution of that utility on the host,
        TOKENIZE its command line.
        CALCULATE Jaccard similarity with the historical set.
        IF similarity is below a threshold (e.g., 0.2), ALERT.
- question: Can a machine learning model detect anomalous command-line arguments for high-risk utilities?
  context: This question proposes using an autoencoder, a type of neural network, to learn the "normal" structure of command lines for specific tools. When a new command is executed, the model attempts to reconstruct it. If the new command is structurally different from what the model has learned (e.g., has unusual arguments for port forwarding), it will result in a high reconstruction error, signaling an anomaly.
  answer_sources:
  - Windows Event ID 4688
  - Jump Servers
  - Bastion Hosts
  - Domain Controllers
  - Developer Workstations
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      INPUT new command-line string into a pre-trained autoencoder for that utility.
      CALCULATE the reconstruction error.
      IF the error is above a learned threshold, ALERT.
- question: Is there network traffic using an unexpected protocol for a given destination port?
  context: Adversaries often tunnel C2 protocols like HTTPS over non-standard ports to bypass firewalls that filter based on port numbers. This question aims to detect this by comparing the observed protocol (dynamically identified by Zeek) with the standard, expected protocol for that port. For example, finding SSL traffic on the RDP port (3389) is highly suspicious.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Internal Network Segments (East-West Traffic)
  - Network Egress Points
  - Server VLANs
  - DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH network connection logs (Zeek conn.log).
      FILTER for connections where the destination port is for a specific protocol (e.g., 135, 445, 3389).
      CHECK if the 'service' field identified by Zeek is different (e.g., 'ssl', 'http', 'unknown').
      IF a mismatch is found, ALERT.
- question: Does a network connection on a standard port show unusually high data entropy?
  context: Many standard protocols use plain text or have predictable data structures, resulting in low entropy. Encrypted or compressed C2 traffic, even when tunneled over a standard port (like DNS on port 53), will have a much higher, more random-looking entropy. By baselining the normal entropy for a given port, we can flag connections with anomalously high entropy as potential C2 channels.
  answer_sources:
  - Zeek conn.log
  - Internal Network Segments (East-West Traffic)
  - Network Egress Points
  - Server VLANs
  - DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each common destination port,
        CALCULATE a baseline distribution of payload entropy from historical data.
      FOR each new connection,
        CALCULATE payload entropy.
        IF entropy exceeds the 99th percentile for that port, ALERT.
- question: Has the mix of network protocols in a key network segment significantly deviated from the predicted norm?
  context: The overall traffic profile of a network segment is often rhythmic and predictable. This question uses a forecasting model to predict the expected volume of different protocols. A sudden, unexplained spike in 'unknown' or 'ssl' traffic, especially on unusual ports, that deviates from the forecast can indicate the activation of a C2 channel or data exfiltration through a proxy.
  answer_sources:
  - Zeek conn.log
  - Internal Network Segments (East-West Traffic)
  - Network Egress Points
  - Server VLANs
  - DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      USING a time-series model (e.g., LSTM), forecast the expected traffic volume for each protocol in 15-minute intervals.
      MEASURE the actual observed traffic mix.
      IF the observed mix (especially 'unknown' or 'ssl' on non-standard ports) significantly deviates from the forecast, ALERT.
- question: Is a non-gateway host receiving traffic from many internal systems and forwarding it to a few external destinations?
  context: A host acting as an internal C2 proxy will exhibit a specific traffic pattern where many internal "clients" connect to it, and it consolidates this traffic into one or two connections to an external C2 server. This question aims to find this "funneling" behavior on hosts that are not supposed to be acting as proxies or gateways.
  answer_sources:
  - Zeek conn.log
  - Internal Network Segments (East-West Traffic)
  - Workstation VLANs
  - DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      DEFINE an allowlist of approved gateways/proxies.
      SEARCH network logs for hosts NOT on the allowlist.
      FOR each host, in a 1-hour window,
        COUNT unique internal source IPs connecting to it.
        COUNT unique external destination IPs it connects to.
        IF internal_sources > 15 AND external_destinations <= 2, ALERT.
- question: Does any host exhibit a statistically anomalous "funnel ratio" compared to its peers?
  context: This question refines the previous one by applying statistical analysis. Instead of using a fixed threshold, it calculates a "funnel ratio" and compares it to a baseline for similar hosts (e.g., all developer workstations). A host whose ratio suddenly becomes a statistical outlier is a strong candidate for a compromised internal proxy, as its network behavior has fundamentally changed relative to its peers.
  answer_sources:
  - Zeek conn.log
  - Internal Network Segments (East-West Traffic)
  - Workstation VLANs
  - DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each host role,
        CALCULATE baseline mean and standard deviation of the 'funnel ratio'.
      FOR each host, over a 24-hour window,
        CALCULATE current 'funnel ratio' = (unique internal sources / unique external destinations).
        IF current ratio > (baseline_mean + 3 * baseline_std_dev), ALERT.
- question: Has any host suddenly become a critical bridge or central hub in the network communication graph?
  context: In graph theory, "betweenness centrality" measures how often a node lies on the shortest path between other nodes. A host turned into a proxy will become a bridge for many communication paths, causing its centrality score to spike. This question applies graph analysis to network logs to detect hosts that suddenly become structurally important, which is a key indicator of this technique.
  answer_sources:
  - Zeek conn.log
  - Internal Network Segments (East-West Traffic)
  - Workstation VLANs
  - DMZ
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MODEL network connections as a directed graph.
      PERIODICALLY calculate the 'betweenness centrality' score for each host (node).
      APPLY a change point detection algorithm to the time series of centrality scores for each host.
      IF an abrupt, significant increase is detected, ALERT.
- question: Has a new, long-lasting connection appeared between two internal endpoints that have never communicated before?
  context: Internal C2 often involves establishing a persistent connection between a compromised host and an internal proxy/pivot point. This activity stands out because most legitimate internal communication is either short-lived or follows established patterns. This question aims to detect these new, long-duration connections, especially between workstations, which are highly anomalous.
  answer_sources:
  - Zeek conn.log
  - Workstation VLANs
  - Server VLANs
  - Interfaces between security zones
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      MAINTAIN a 30-day baseline set of unique (src_ip, dst_ip, dst_port) connection tuples.
      FOR each new connection,
        CHECK if it is between two non-server endpoints.
        CHECK if its tuple exists in the baseline set.
        CHECK if its duration > 1 hour.
        IF all are true, ALERT.
- question: Has a pair of internal hosts, which never communicated before, suddenly established a connection with a duration that is in the top percentile of all connections?
  context: This question builds on the previous one by focusing on the statistical significance of the connection's duration. It looks for a "zero to one" transition, where a pair of hosts with no communication history suddenly connects. By alerting only when the duration of this new connection is exceptionally long compared to all other network activity, it filters for the most anomalous and likely malicious persistent channels.
  answer_sources:
  - Zeek conn.log
  - Workstation VLANs
  - Server VLANs
  - Interfaces between security zones
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each internal IP pair, baseline daily connection count (norm is zero for most).
      CALCULATE the 95th percentile for connection duration across the entire network for the day.
      FOR each new connection between a pair with a zero-count baseline,
        CHECK if its duration exceeds the daily 95th percentile duration.
        IF true, ALERT.
- question: Can a machine learning model predict which new internal connections are highly improbable and therefore suspicious?
  context: This question applies a sophisticated graph-based machine learning technique called link prediction. The model learns the underlying structure and rules of "normal" network communication (e.g., 'workstations in finance talk to the finance server'). When a new connection occurs (e.g., a finance workstation connects to an HR workstation), the model assesses the probability of such a link. A very low probability indicates a severe deviation from the learned norm, making it a strong candidate for a malicious C2 channel.
  answer_sources:
  - Zeek conn.log
  - Workstation VLANs
  - Server VLANs
  - Interfaces between security zones
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN a link prediction model on a graph of the last 30 days of network connections.
      FOR each new connection,
        USE the model to predict the probability of that link existing.
        IF the probability is below a defined threshold, ALERT.