name: T1090.001: Internal Proxy
id: f8a1b2c3-d4e5-4f6a-7b8c-9d0e1f2a3b4c
description: This playbook helps determine if an adversary is using a compromised internal system to proxy command and control (C2) traffic, a technique used to obscure the C2 server and pivot within a network. This involves detecting the execution of known or custom proxy tools, the abuse of legitimate utilities for port forwarding, anomalous network traffic patterns such as protocol-on-wrong-port or high entropy data, hosts acting as traffic funnels, and new, long-lived connections between internal endpoints that have no history of communication.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Was a known proxy tool executed on a host, followed by a connection to a known malicious endpoint within 5 minutes?
    context: This question seeks to identify the most direct evidence of malicious proxying: the execution of a known proxy tool followed immediately by command and control (C2) communication. Correlating process execution with network traffic within a short time window is a high-fidelity method for detecting this behavior.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Relevant assets include Workstations, Application Servers, Domain Controllers, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: JOIN process_events (where file_hash in proxy_tool_iocs) WITH network_connections (where destination_ip in c2_feed) ON hostname WHERE network_time is within 5 minutes of process_time.
  - question: Did a host exhibit anomalous network behavior, such as unusually high data volume or connection counts, after executing a potential proxy tool?
    context: Adversaries may use custom or unknown proxy tools. This question aims to detect such tools by looking for behavioral anomalies. A sudden spike in outbound traffic volume or the number of connections after a suspicious process starts can indicate that the host is being used as a proxy, even if the tool itself is not recognized.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Relevant assets include Workstations, Application Servers, Domain Controllers, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: For each host running a potential proxy, CALCULATE baseline 95th percentile of hourly outbound_bytes and connection_count. IF post-execution hourly metrics > baseline, ALERT.
  - question: Can a machine learning model identify process executions that are likely to be malicious proxies based on process and network features?
    context: This advanced question uses machine learning to proactively identify malicious proxy behavior. By training a model on features from both process creation and subsequent network activity, it can learn subtle patterns that distinguish malicious proxying from benign activity, providing a probabilistic assessment of risk.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Relevant assets include Workstations, Application Servers, Domain Controllers, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features (parent process, cmdline entropy, user, conn_count, data_volume) for process events. INPUT features into trained classification model. ALERT on high probability of malicious proxy.
  - question: Was a legitimate utility like 'netsh.exe' or 'ssh.exe' executed with command-line arguments indicative of port forwarding?
    context: Adversaries often abuse legitimate system utilities ('living off the land') to create proxies. This question looks for specific command-line patterns used with tools like 'netsh' or 'ssh' to configure port forwarding, which is a direct indicator of this technique.
    answer_sources:
      - Windows Event ID 4688
      - Relevant assets include Jump Servers, Bastion Hosts, Domain Controllers, Developer Workstations
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events for process_name in ('netsh.exe', 'ssh.exe', 'plink.exe') AND command_line matches regex ('interface portproxy add', 'ssh -L', 'ssh -R').
  - question: Has a common utility been executed with a novel or unusual set of command-line arguments compared to its historical usage?
    context: This question aims to detect anomalous usage of legitimate tools. By comparing the arguments of a new command to the historical set of arguments used for that tool on that host, a low similarity score can highlight a completely new and potentially malicious usage pattern that warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Relevant assets include Jump Servers, Bastion Hosts, Domain Controllers, Developer Workstations
    range: last 90 days
    queries:
      - pseudocode: For each new command, CALCULATE Jaccard similarity of its arguments against the historical argument set for that utility. IF similarity < 0.2, ALERT.
  - question: Can an autoencoder model detect structurally anomalous command lines for high-risk utilities?
    context: This is a machine learning-based approach to find unusual command-line usage. An autoencoder is trained on normal, historical command lines. When a new, malicious command line is processed, the model will struggle to reconstruct it, resulting in a high 'reconstruction error' and flagging it as an anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Relevant assets include Jump Servers, Bastion Hosts, Domain Controllers, Developer Workstations
    range: last 90 days
    queries:
      - pseudocode: INPUT new command line into trained autoencoder. IF reconstruction_error > anomaly_threshold, ALERT.
  - question: Is there network traffic using a protocol (like SSL/HTTP) on a port where it is not normally expected?
    context: Adversaries often tunnel their C2 traffic over common protocols like HTTP or SSL, but on non-standard ports to evade simple port-based firewalls. This question identifies these protocol-port mismatches, which are a strong indicator of tunneling or proxying activity.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Relevant assets include Internal Network Segments (East-West Traffic), Network Egress Points, Server VLANs, DMZ
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_connections where (dest_port=135 AND service='ssl') OR (dest_port=445 AND service='http') OR (dest_port=3389 AND service='unknown').
  - question: Is there a connection on a common port with unusually high data entropy, suggesting encrypted or packed traffic?
    context: Normal traffic on many ports has low entropy. Encrypted or compressed C2 traffic will have high entropy. This question seeks to find outliers by baselining the normal entropy for a given port and alerting when a new connection's entropy is significantly higher, indicating it may be tunneled malicious traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Relevant assets include Internal Network Segments (East-West Traffic), Network Egress Points, Server VLANs, DMZ
    range: last 90 days
    queries:
      - pseudocode: For each port, CALCULATE baseline 99th percentile of payload_entropy. IF new_connection_entropy > baseline, ALERT.
  - question: Has the mix of network protocols on a key network segment significantly deviated from the forecasted norm?
    context: This question uses time-series forecasting to model the normal rhythm of network traffic. A sudden, unexplained increase in 'unknown' or 'SSL' traffic on non-standard ports, which deviates from the predicted model, can indicate the introduction of a new C2 channel or internal proxy.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Relevant assets include Internal Network Segments (East-West Traffic), Network Egress Points, Server VLANs, DMZ
    range: last 90 days
    queries:
      - pseudocode: FORECAST expected traffic volume per protocol. IF observed_volume deviates significantly from forecast (e.g., for 'unknown' or 'ssl' traffic), ALERT.
  - question: Is a non-gateway host receiving connections from many internal systems and funneling them to a few external destinations?
    context: This question identifies the classic 'funneling' pattern of an internal proxy. A compromised host will receive C2 instructions or data from many internal peers and forward it to a single external C2 server. This behavior is highly abnormal for a typical workstation or server.
    answer_sources:
      - Zeek conn.log
      - Relevant assets include Internal Network Segments (East-West Traffic), Workstation VLANs, DMZ
    range: last 90 days
    queries:
      - pseudocode: For hosts not in proxy_allowlist, GROUP connections by hour. IF COUNT(DISTINCT internal_sources) > 15 AND COUNT(DISTINCT external_destinations) <= 2, ALERT.
  - question: Does any host exhibit an anomalously high 'funnel ratio' (many internal sources to few external destinations) compared to its historical baseline?
    context: This question refines the 'funneling' detection by using statistical baselining. Instead of a static threshold, it calculates a normal funnel ratio for each host (or host role) and alerts on significant deviations (e.g., 3 standard deviations). This makes the detection more robust.
    answer_sources:
      - Zeek conn.log
      - Relevant assets include Internal Network Segments (East-West Traffic), Workstation VLANs, DMZ
    range: last 90 days
    queries:
      - pseudocode: For each host, CALCULATE baseline mean and stddev of funnel_ratio. IF current_ratio > (mean + 3*stddev), ALERT.
  - question: Has a host's 'betweenness centrality' in the network graph abruptly increased, indicating it has become a critical traffic bridge?
    context: This question applies graph theory to network analysis. 'Betweenness centrality' measures how often a host lies on the shortest path between other hosts. A host turned into a proxy will suddenly bridge many new communication paths, causing its centrality score to spike.
    answer_sources:
      - Zeek conn.log
      - Relevant assets include Internal Network Segments (East-West Traffic), Workstation VLANs, DMZ
    range: last 90 days
    queries:
      - pseudocode: BUILD network graph from conn logs. CALCULATE betweenness centrality for all hosts. USE change point detection to find abrupt increases in centrality score. ALERT on change.
  - question: Is there a new, long-duration connection between two internal endpoints that have never communicated before?
    context: Adversaries may establish persistent peer-to-peer C2 channels inside the network. This question aims to find these by identifying new, long-lived connections between hosts (especially workstation-to-workstation) that have no legitimate reason to be communicating directly.
    answer_sources:
      - Zeek conn.log
      - Relevant assets include Workstation VLANs, Server VLANs, Interfaces between security zones
    range: last 90 days
    queries:
      - pseudocode: MAINTAIN 30-day baseline of (src, dst, dport) tuples. IF new_connection not in baseline AND duration > 1 hour AND endpoints are workstations, ALERT.
  - question: Has a pair of internal hosts, which previously had no communication, suddenly established a connection with a duration in the top 5% of all connections?
    context: This question focuses on the statistical significance of a new connection. It specifically looks for host pairs that go from zero communication to establishing a connection that is unusually long compared to all other network activity, highlighting a significant change in communication patterns.
    answer_sources:
      - Zeek conn.log
      - Relevant assets include Workstation VLANs, Server VLANs, Interfaces between security zones
    range: last 90 days
    queries:
      - pseudocode: For src-dst pairs with 0 baseline connections, IF new_connection_duration > 95th_percentile_duration for the day, ALERT.
  - question: Can a link prediction model identify new connections that are highly improbable based on the established network communication graph?
    context: This advanced graph-based question uses a machine learning model to understand 'what talks to what' in the network. When a new connection is made, the model predicts how likely that connection was. A highly unlikely connection is flagged as a potential malicious C2 link.
    answer_sources:
      - Zeek conn.log
      - Relevant assets include Workstation VLANs, Server VLANs, Interfaces between security zones
    range: last 90 days
    queries:
      - pseudocode: TRAIN link prediction model on 30-day network graph. For new connections, PREDICT probability of link. IF probability < anomaly_threshold, ALERT.