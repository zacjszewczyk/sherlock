name: T1546.014: Emond
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversaries using the macOS Event Monitor Daemon (Emond) for persistence and privilege escalation. Adversaries create or modify Emond rule files (.plist) in `/etc/emond.d/rules/` to trigger malicious commands or scripts with root privileges. Detections should focus on identifying the creation of suspicious rule files, anomalous process behavior from the `/sbin/emond` daemon, malicious command-line arguments in child processes, and specific command patterns within the rule files that indicate privilege escalation attempts.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a newly created Emond rule file or a process spawned by Emond associated with known malicious indicators?
  context: This question checks for direct matches to known threats. Adversaries might reuse malware or tools. By comparing file hashes of new Emond rules (`/etc/emond.d/rules/`) and command lines of processes spawned by `/sbin/emond` against threat intelligence feeds, we can quickly identify known malicious activity. A match provides a high-confidence signal of a compromise.
  answer_sources:
  - macOS ESF file creation event logs
  - macOS process execution logs (including command line arguments)
  - Threat Intelligence Platform hash and signature feeds
  - EDR logs from all macOS endpoints; Threat Intelligence Platform API; SIEM correlation engine
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FOR file_creation in /etc/emond.d/rules/ | HASH file | CHECK hash against threat_intel | ALERT on match
  - technology: Pseudocode
    query: FOR process where parent is /sbin/emond | CHECK command_line against threat_intel_signatures | ALERT on match
- question: Are command-line arguments for processes spawned by Emond obfuscated?
  context: Adversaries often obfuscate commands to evade simple signature-based detection. High Shannon entropy in command-line arguments can indicate the presence of encoded or encrypted payloads. This question aims to detect this obfuscation by baselining normal command entropy and alerting on significant deviations, which could reveal attempts to hide malicious activity.
  answer_sources:
  - macOS process execution logs (including command line arguments)
  - EDR logs from all macOS endpoints; SIEM correlation engine
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE entropy of command_lines for processes where parent is /sbin/emond over 30 days | FOR new process where parent is /sbin/emond | CALCULATE entropy of command_line | IF entropy > 99th_percentile_of_baseline | ALERT
- question: Does a machine learning model classify a process spawned by Emond as malicious based on its command-line features?
  context: This question uses a machine learning approach to move beyond simple signatures and heuristics. By training a model on features like command length, argument count, special characters, and n-grams, it can learn the subtle characteristics that distinguish malicious commands from benign ones. This allows for the detection of novel or previously unseen malicious command patterns executed via Emond.
  answer_sources:
  - macOS process execution logs (including command line arguments)
  - EDR logs from all macOS endpoints; SIEM correlation engine
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FOR process where parent is /sbin/emond | EXTRACT features from command_line (length, arg_count, etc.) | PREDICT with trained_model | IF prediction is 'malicious' and confidence > 0.9 | ALERT
- question: Does a new or modified Emond rule file contain a command that executes a script interpreter or a binary from a world-writable directory?
  context: Adversaries often configure Emond rules to execute scripts or payloads stored in common, non-standard locations like `/tmp/` or `/Users/Shared/`. This question looks for `.plist` rule files that use `RunCommand` or `RunExecutable` to launch common interpreters (`python`, `bash`, etc.) or binaries from these suspicious, world-writable locations, which is a strong indicator of persistence.
  answer_sources:
  - macOS file integrity monitoring logs for `/etc/emond.d/rules/`
  - EDR file content inspection logs
  - File Integrity Monitoring (FIM) solution; EDR agent logs on all macOS endpoints; SIEM for content parsing and alerting
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON file_write to /etc/emond.d/rules/ | PARSE plist_content | IF key is 'RunCommand' or 'RunExecutable' AND value matches 'python' or '/tmp/.*' | ALERT
- question: Is a command specified in a new Emond rule statistically rare or unseen across the environment?
  context: Legitimate use of Emond for system administration typically involves a consistent and limited set of commands. This question aims to identify anomalies by treating the set of known-good commands as an allowlist. A new Emond rule executing a command never seen before across the enterprise is a high-confidence indicator of novel or unauthorized activity.
  answer_sources:
  - macOS file integrity monitoring logs for `/etc/emond.d/rules/`
  - EDR file content inspection logs
  - File Integrity Monitoring (FIM) solution; EDR agent logs on all macOS endpoints; SIEM for content parsing and alerting
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: BUILD allowlist of commands from emond rules over 30 days | ON new file_write to /etc/emond.d/rules/ | PARSE command from plist | IF command NOT IN allowlist | ALERT
- question: Does the command in a new Emond rule belong to an anomalous topic cluster?
  context: This question uses Natural Language Processing (NLP) to categorize Emond commands based on their semantic content. Benign commands should fall into predictable topics like 'system maintenance' or 'software updates'. A command that doesn't fit these topics or forms its own unique cluster is likely anomalous and potentially malicious, indicating a new type of activity.
  answer_sources:
  - macOS file integrity monitoring logs for `/etc/emond.d/rules/`
  - EDR file content inspection logs
  - File Integrity Monitoring (FIM) solution; EDR agent logs on all macOS endpoints; SIEM for content parsing and alerting
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN LDA_model on corpus of emond rule commands | ON new file_write to /etc/emond.d/rules/ | PARSE command from plist | CLASSIFY command into topic | IF topic is anomalous or unclassified | ALERT
- question: Has the Emond daemon spawned any child processes, or was an Emond rule file created by an unauthorized process?
  context: The `/sbin/emond` daemon should not normally spawn child processes. Any child process is highly suspicious. Similarly, Emond rules in `/etc/emond.d/rules/` should only be created by legitimate system administration or configuration tools. This question establishes a baseline of expected behavior and alerts on two key deviations: unexpected process lineage and unauthorized file creation, both of which are strong indicators of tampering.
  answer_sources:
  - macOS process execution logs (with parent process name and path)
  - macOS ESF file creation event logs (with parent process context)
  - Process execution logs from all macOS endpoints aggregated in a SIEM/data lake
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FOR process_creation | IF parent_process is '/sbin/emond' | ALERT
  - technology: Pseudocode
    query: FOR file_creation in /etc/emond.d/rules/ | IF creating_process NOT IN allowlist (e.g., ansible, jamf) | ALERT
- question: Was an Emond rule file created by a process that has not previously been observed creating such files?
  context: This question focuses on identifying anomalous file creation activity by baselining the parent processes that legitimately write to the Emond rules directory. A new rule file created by a process seen for the first time (e.g., a user's terminal session instead of a configuration management tool) is a statistical anomaly that warrants investigation.
  answer_sources:
  - macOS process execution logs (with parent process name and path)
  - macOS ESF file creation event logs (with parent process context)
  - Process execution logs from all macOS endpoints aggregated in a SIEM/data lake
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE parent processes creating files in /etc/emond.d/rules/ over 30 days | FOR new file_creation in /etc/emond.d/rules/ | IF creating_process NOT IN baseline | ALERT
- question: Has the Emond daemon spawned any child processes, detected as a time-series anomaly?
  context: Since the expected number of child processes for `/sbin/emond` is zero, any deviation from this baseline is, by definition, an anomaly. This question applies a time-series model to formalize this expectation. Any non-zero count of child processes will break the model's forecast and trigger an immediate alert, providing a very high-fidelity signal of potentially malicious activity.
  answer_sources:
  - macOS process execution logs (with parent process name and path)
  - Process execution logs from all macOS endpoints aggregated in a SIEM/data lake
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: MONITOR count of child processes for /sbin/emond per host per hour | IF count > 0 | ALERT
- question: Is a root process spawned by Emond executing commands associated with reconnaissance, user manipulation, or reverse shells?
  context: Since Emond runs as root, any command it executes also runs with root privileges. This makes it a prime target for privilege escalation. This question looks for specific post-exploitation commands (`whoami`, `dscl`, reverse shells) being executed by Emond's child processes. Correlating this with network activity can confirm if a successful compromise is being leveraged to establish external command and control.
  answer_sources:
  - macOS process execution logs (with UID, command line arguments, parent process)
  - Zeek conn.log
  - EDR process logs from all macOS endpoints; Network gateway Zeek sensors
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FOR process where parent is /sbin/emond AND UID is 0 | IF command_line matches regex for ('dscl', 'nc -e', etc.) | ALERT
  - technology: Pseudocode
    query: CORRELATE alert with outbound network connections from host
- question: Is the command-line length for a root process spawned by Emond anomalously long compared to a system-wide baseline?
  context: Adversaries often pass encoded payloads or complex, multi-stage commands as command-line arguments. This frequently results in unusually long command lines. This question aims to detect such activity by comparing the argument length of Emond-spawned processes against the baseline for all root processes on the system. A significant deviation suggests a complex, and likely malicious, payload.
  answer_sources:
  - macOS process execution logs (with UID, command line arguments, parent process)
  - EDR process logs from all macOS endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE argument_length for all root processes | FOR process where parent is /sbin/emond AND UID is 0 | IF argument_length > 98th_percentile_of_baseline | ALERT
- question: Does a machine learning model classify a root process spawned by Emond as an outlier compared to normal root-level activity?
  context: This question uses an unsupervised machine learning model (One-Class SVM) to define a boundary around "normal" root process behavior. Any new process spawned by Emond that falls outside this boundary is flagged as an outlier. This is effective for detecting novel or unknown privilege escalation techniques that don't match predefined signatures or simple heuristics.
  answer_sources:
  - macOS process execution logs (with UID, command line arguments, parent process)
  - EDR process logs from all macOS endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: TRAIN one_class_svm_model on features from benign root processes | FOR new process where parent is /sbin/emond and UID is 0 | EXTRACT features | IF model classifies as 'outlier' | ALERT
- question: Does a new Emond rule contain commands intended to create new privileged accounts or establish further persistence?
  context: Adversaries may use a malicious Emond rule as a foothold to achieve further privilege escalation or persistence. This question inspects the content of new `.plist` rules for commands that are explicitly used for these purposes, such as creating new users with `dscl`, modifying `sudoers` with `visudo`, or dropping new LaunchDaemons for persistence.
  answer_sources:
  - macOS file integrity monitoring logs
  - EDR file content inspection logs for `/etc/emond.d/rules/`
  - File content logs from all macOS endpoints, specifically monitoring `/etc/emond.d/rules/`; SIEM for content analysis and correlation
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON file_write to /etc/emond.d/rules/ | PARSE plist_content | IF command_string matches regex for ('dscl', 'visudo', '/Library/LaunchDaemons/') | ALERT
- question: Does a new Emond rule have a high risk score based on a combination of statistically rare characteristics?
  context: Instead of relying on a single indicator, this question uses a scoring model to evaluate the overall risk of a new Emond rule. It combines multiple weak signals—such as a rare command, targeting a sensitive file path, or having an unusual number of arguments—into a single, more robust risk score. A high score indicates a high probability of malicious intent.
  answer_sources:
  - macOS file integrity monitoring logs
  - EDR file content inspection logs for `/etc/emond.d/rules/`
  - File content logs from all macOS endpoints, specifically monitoring `/etc/emond.d/rules/`; SIEM for content analysis and correlation
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: ON new emond_rule | CALCULATE risk_score (is_command_rare? + is_path_sensitive? + is_arg_count_high?) | IF risk_score > threshold | ALERT
- question: Can a graph-based analysis reveal a privilege escalation path originating from an Emond rule creation?
  context: This question models system activity as a causal graph to trace the full impact of an action. It can identify complex attack chains where a low-privilege process creates an Emond rule, which in turn executes a command as root to modify a critical system file or user. By analyzing these paths, a graph-based detection algorithm can flag the entire sequence as a privilege escalation event.
  answer_sources:
  - macOS file integrity monitoring logs
  - EDR file content inspection logs for `/etc/emond.d/rules/`
  - File content logs from all macOS endpoints, specifically monitoring `/etc/emond.d/rules/`; SIEM for content analysis and correlation
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL system events as a graph | DETECT path: (low_priv_process) -> [writes] -> (emond_rule) -> [executes] -> (high_priv_resource) | ALERT on path detection
- question: Has a sequence of events corresponding to a known Emond-based privilege escalation pattern occurred on a host within a short time frame?
  context: This question looks for a specific, high-confidence attack chain: the creation of an Emond rule, followed shortly by Emond spawning a process, which in turn performs a known privilege escalation action (like adding a user to the admin group or creating a new LaunchDaemon). Correlating these distinct events in a required sequence provides a very strong signal of a successful attack.
  answer_sources:
  - macOS ESF file creation event logs
  - macOS process execution logs (with process lineage)
  - macOS Unified Logs for user/group management events
  - Centralized SIEM platform capable of stateful, cross-source event correlation; EDR logs from all macOS endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE within 5 mins on same host: (A: file_write to /etc/emond.d/rules/) FOLLOWED BY (B: process_creation with parent /sbin/emond) FOLLOWED BY (C: child of B does priv_esc_action) | ALERT
- question: Did a process spawned by Emond generate an anomalously high number of security-relevant follow-on events?
  context: Malicious processes often perform a flurry of activity after execution, such as writing files, making network connections, or querying system information. This question aims to detect this by baselining the normal number of "security-relevant" follow-on actions for system processes. An Emond-spawned process that generates a statistically significant spike in such activity is likely malicious.
  answer_sources:
  - macOS ESF file creation event logs
  - macOS process execution logs (with process lineage)
  - macOS Unified Logs for user/group management events
  - Centralized SIEM platform capable of stateful, cross-source event correlation; EDR logs from all macOS endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: BASELINE count of security_events per process | FOR process spawned by /sbin/emond | COUNT subsequent security_events (file_writes, net_conn) within 10 mins | IF count > 3_std_dev_above_baseline | ALERT
- question: Does a sequence analysis model identify the chain of events following an Emond rule creation as anomalous?
  context: This question uses a sophisticated machine learning model (RNN) to learn the patterns of normal sequences of system events. It can detect malicious activity by identifying event sequences that deviate from these learned patterns. An attack chain involving Emond would create a sequence of system calls and process events that the model has not seen in benign activity, resulting in a high anomaly score and an alert.
  answer_sources:
  - macOS ESF file creation event logs
  - macOS process execution logs (with process lineage)
  - macOS Unified Logs for user/group management events
  - Centralized SIEM platform capable of stateful, cross-source event correlation; EDR logs from all macOS endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: FEED real-time event sequences into trained_RNN_model | IF model outputs high anomaly_score for a sequence starting with emond_rule_write | ALERT