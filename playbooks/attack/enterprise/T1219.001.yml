name: T1219.001: IDE Tunneling
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses the threat of adversaries abusing remote development features within Integrated Development Environments (IDEs) to establish command and control, a technique known as IDE Tunneling. Investigations should focus on identifying several key indicators: (1) outbound network connections from IDE processes to known malicious domains or IPs from threat intelligence feeds; (2) the execution of IDE command-line tunneling tools with arguments suggesting persistence or non-interactive use, or TLS connections with anomalous JA3/S hashes or SNIs; (3) the execution or installation of IDEs on non-developer workstations, especially critical servers; and (4) network connections from IDEs exhibiting behavioral anomalies such as unusually long durations, high data volumes, or periodic beaconing patterns.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I detect if an IDE process is connecting to a known malicious command and control (C2) or malware domain?
    context: Adversaries can use legitimate IDE processes (e.g., code.exe, pycharm64.exe) to tunnel C2 traffic, which may bypass simple process-based egress controls. This question helps an analyst identify this specific behavior by correlating process execution events with network connection logs. By checking the destination against a high-confidence threat intelligence feed, an analyst can find strong evidence of a compromised development environment being used for C2.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Developer Workstations
      - Egress Network Points (e.g., Firewalls, Proxies)
      - DNS Resolvers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation
          WHERE process_name IN (ide_executables)
          | JOIN network_connection ON host, process_id
          | JOIN dns_logs ON destination_ip
          | LOOKUP threat_intel ON destination_domain OR destination_ip
          WHERE threat_category IN ('C2', 'malware')
          | RETURN host, user, process_name, destination_domain, threat_category
  - question: How can I identify statistically rare domains being contacted by IDE processes across the enterprise?
    context: C2 domains used by adversaries are often unique to a specific campaign and thus appear infrequently across an organization's network traffic. This question helps an analyst perform anomaly detection by identifying domains that are statistical outliers. By calculating the prevalence of all domains contacted by IDEs, any domain falling into a low percentile (e.g., bottom 5%) can be flagged for investigation as potentially suspicious, even if it is not on a threat intelligence list.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Developer Workstations
      - Egress Network Points (e.g., Firewalls, Proxies)
      - DNS Resolvers
      - SIEM/Log Aggregator
    range: last 30 days
    queries:
      - pseudocode: |
          SEARCH dns_logs
          WHERE source_process_name IN (ide_executables)
          | AGGREGATE count by query_domain over last 30 days
          | CALCULATE enterprise_prevalence_percentile(query_domain)
          | FILTER prevalence_percentile < 5
          | RETURN query_domain, prevalence_percentile
  - question: Can a machine learning model be used to proactively classify domains contacted by IDEs as malicious?
    context: This question provides a proactive, machine-learning-based approach to detection. Instead of relying on known-bad indicators, this method involves training a supervised classification model on features derived from DNS and TLS data (e.g., domain name length, character entropy, TTL value, JA3 hash). This allows an analyst to score new, previously unseen domains for their likelihood of being malicious, enabling the detection of novel C2 infrastructure that has not yet been added to threat intelligence feeds.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Developer Workstations
      - Egress Network Points (e.g., Firewalls, Proxies)
      - DNS Resolvers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          STREAM dns_logs, ssl_logs
          WHERE source_process_name IN (ide_executables)
          | EXTRACT features (domain_length, entropy, ttl, ja3_hash)
          | APPLY ML_model(features)
          | RETURN domain, score
          WHERE score > 0.85
  - question: How can I detect if an IDE's command-line tunneling tool is being used for persistence or by an unauthorized user?
    context: IDEs like VS Code include command-line tools ('code tunnel') for remote access. Adversaries can abuse these tools. This question helps an analyst hunt for this abuse by inspecting process command-line arguments for suspicious flags (e.g., '--no-sleep' for persistence) or by cross-referencing the executing user against an 'Authorized Developers' group. An alert here could indicate either a compromised developer account or an insider threat.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek ssl.log
      - Zeek conn.log
      - Developer Workstations
      - Virtual Development Environments (VDEs)
      - Egress Network Points
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation
          WHERE process_command_line CONTAINS ('code tunnel', 'gh cs tunnel', 'jetbrains_client')
          | FILTER (process_command_line CONTAINS '--no-sleep') OR (user NOT IN 'Authorized Developers')
          | RETURN host, user, process_command_line
  - question: How can I detect anomalous TLS sessions from IDE processes that deviate from a known good baseline?
    context: Legitimate remote development features establish TLS sessions with predictable characteristics (e.g., JA3/S client/server fingerprints and Server Name Indication). This question helps an analyst build a baseline of these normal characteristics over a rolling window. By alerting on new TLS connections from IDEs that use a JA3/S hash or SNI not present in the baseline, or one that is statistically rare, an analyst can effectively spot connections to non-standard or malicious C2 servers.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek ssl.log
      - Zeek conn.log
      - Developer Workstations
      - Virtual Development Environments (VDEs)
      - Egress Network Points
      - SIEM/Log Aggregator
    range: last 30 days
    queries:
      - pseudocode: |
          // Step 1: Build baseline
          SEARCH ssl_logs WHERE source_process_name IN (ide_executables) over last 30 days | BASELINE frequency of ja3s_hash, sni_domain
          // Step 2: Detect deviations
          SEARCH ssl_logs WHERE source_process_name IN (ide_executables)
          | LOOKUP baseline on ja3s_hash, sni_domain
          | FILTER is_not_in_baseline OR frequency < 1st_percentile
          | RETURN host, source_process_name, ja3s_hash, sni_domain
  - question: Can unsupervised clustering identify malicious C2 traffic from IDEs without prior labeling?
    context: This question proposes using an unsupervised machine learning model (e.g., DBSCAN) to find outliers in IDE network traffic. By creating feature vectors from TLS logs (using JA3/S hash, SNI characteristics, cipher suites), an analyst can automatically group connections into clusters. Legitimate services will form large, stable clusters. Any new connection that forms a new micro-cluster or is classified as a noise point by the algorithm is an anomaly worth investigating as potential C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek ssl.log
      - Zeek conn.log
      - Developer Workstations
      - Virtual Development Environments (VDEs)
      - Egress Network Points
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          STREAM ssl_logs
          WHERE source_process_name IN (ide_executables)
          | EXTRACT features (ja3s_hash, sni_length, sni_entropy, ciphers)
          | APPLY clustering_model(features)
          | RETURN host, destination, cluster_id
          WHERE cluster_id = 'outlier' OR is_new_micro_cluster
  - question: How can I detect if an IDE has been installed or executed on a non-developer machine, such as a critical server?
    context: IDEs have no legitimate business purpose on servers like domain controllers, database servers, or on workstations in non-technical departments. Their presence is a strong indicator of compromise or misconfiguration. This question helps an analyst enforce this policy by creating a detection rule that cross-references process creation or service installation events with a host's role from an asset inventory. An alert immediately flags a high-priority security violation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7045
      - Critical Infrastructure (e.g., Domain Controllers, Database Servers, Application Servers)
      - Workstations of non-technical departments (e.g., Finance, HR)
      - Asset Management Database
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation, service_installation
          | LOOKUP asset_inventory ON host
          | FILTER (process_name IN (ide_executables) OR service_name CONTAINS 'IDE') AND (asset_role NOT IN ('Developer Workstation'))
          | RETURN host, asset_role, process_name, service_name
  - question: How can I identify if an IDE process runs on a server where it has never been seen before?
    context: This question provides an alternative to a strict asset inventory by using historical data to create software baselines for different server roles. By analyzing process execution logs over a long period (e.g., 90 days), an analyst can determine the set of normal processes for each server. A scheduled query can then check for executions of IDE processes on servers where their historical execution frequency is zero, flagging a significant deviation from the established baseline.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7045
      - Critical Infrastructure (e.g., Domain Controllers, Database Servers, Application Servers)
      - Workstations of non-technical departments (e.g., Finance, HR)
      - Asset Management Database
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          // Step 1: Build baseline
          SEARCH process_creation on servers over last 90 days | BASELINE process_frequency per server_role
          // Step 2: Detect deviations
          SEARCH process_creation
          WHERE process_name IN (ide_executables) AND server_role IS NOT NULL
          | LOOKUP baseline on server_role, process_name
          | FILTER process_frequency = 0
          | RETURN host, server_role, process_name
  - question: Can a one-class anomaly detection model identify critical servers with anomalous process activity related to IDEs?
    context: For highly sensitive assets like domain controllers, any deviation can be critical. This question describes a sophisticated anomaly detection approach using a one-class model (e.g., One-Class SVM). The model is trained exclusively on the normal process activity of a critical server group. It can then detect any new, anomalous state—such as the sudden appearance of an IDE process—flagging it for immediate investigation without needing to know what "bad" looks like beforehand.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7045
      - Critical Infrastructure (e.g., Domain Controllers, Database Servers, Application Servers)
      - Workstations of non-technical departments (e.g., Finance, HR)
      - Asset Management Database
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          STREAM process_creation
          WHERE host_group = 'Domain Controllers'
          | CREATE process_vector over time_window
          | APPLY one_class_model(process_vector)
          | RETURN host, anomalous_process
          WHERE is_anomalous AND anomalous_process IN (ide_executables)
  - question: How can I detect IDE network connections that have an unusually long duration or high data volume?
    context: Interactive remote development sessions have typical patterns of usage. A C2 channel, however, might hold a connection open for extremely long periods or be used to exfiltrate large volumes of data. This question helps an analyst set up simple, high-value thresholding rules. By alerting on any IDE-initiated connection that exceeds a generous threshold (e.g., 12 hours duration or 5 GB of data), an analyst can effectively catch significant outliers indicative of malicious use.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Developer Workstations
      - Egress Network Points (e.g., Firewalls, Proxies)
      - Cloud Development Environments (CDEs)
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH network_flows
          WHERE source_process_name IN (ide_executables)
          | FILTER duration > 12_hours OR total_bytes > 5_GB
          | RETURN host, source_process_name, destination_ip, duration, total_bytes
  - question: How can I detect user-specific network anomalies or periodic beaconing from IDE processes?
    context: This question refines anomaly detection by personalizing it. First, it establishes a per-user baseline for normal IDE network behavior (connection duration, data volume). This is more precise than a global threshold. Second, for long-lived connections, it analyzes the timing of network packets. A low entropy in packet arrival times suggests a highly periodic, machine-generated heartbeat, a classic sign of C2 beaconing, as opposed to the irregular traffic of human interaction.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Developer Workstations
      - Egress Network Points (e.g., Firewalls, Proxies)
      - Cloud Development Environments (CDEs)
      - SIEM/Log Aggregator
    range: last 30 days
    queries:
      - pseudocode: |
          // Per-user thresholding
          SEARCH network_flows | BASELINE per_user_95th_percentile(duration, bytes)
          SEARCH network_flows WHERE source_process_name IN (ide_executables) | FILTER bytes > user_baseline
          // Beaconing detection
          SEARCH network_flows WHERE duration > 1_hour | CALCULATE shannon_entropy(inter_packet_arrival_times) | FILTER entropy < low_threshold
  - question: Can a time-series model detect anomalous spikes in network traffic volume from IDEs?
    context: Adversary actions like data exfiltration can cause sudden, massive spikes in outbound traffic that deviate from normal development activity patterns. This question describes using a time-series anomaly detection model (e.g., ARIMA, LSTM) to learn the normal daily and weekly rhythms of aggregate IDE network traffic. By applying this model to live data, an analyst can be alerted to any time window where traffic volume is a significant statistical anomaly, pointing to potential bulk data transfer.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Developer Workstations
      - Egress Network Points (e.g., Firewalls, Proxies)
      - Cloud Development Environments (CDEs)
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: |
          STREAM network_flows
          WHERE source_process_name IN (ide_executables)
          | AGGREGATE sum(bytes) into 10_minute_windows
          | APPLY time_series_model(sum_bytes)
          | RETURN time_window, sum_bytes, anomaly_score
          WHERE is_anomaly