name: T1204.003: Malicious Image
id: d8b3a7f1-4c1d-4f8e-8a2b-9e6f0c7d1b5a
description: This playbook helps investigate whether an adversary has achieved execution through a malicious container or virtual machine image. It focuses on identifying several key indicators of compromise: containers created from known-malicious images, containers exhibiting anomalous behavior such as spawning unexpected processes (e.g., reverse shells, cryptominers), containers deployed with excessive or dangerous runtime permissions, containers making suspicious network connections to C2 servers or exhibiting beaconing, and containers pulled from unapproved or typosquatted image registries.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Has a container been created from an image known to be malicious based on threat intelligence?
    context: This question aims to detect the direct use of known-malicious container images. Adversaries may use public images pre-loaded with malware or backdoors. By comparing the image identifiers (name, tag, or digest) from container creation events against a threat intelligence feed, we can quickly identify and alert on high-confidence threats, indicating a potential compromise at the deployment stage.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS)
      - Corporate image registries
      - Threat intelligence feeds
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation logs (WinEvent 4688) for container runtime commands. EXTRACT image identifiers. JOIN with threat intelligence feed on image identifier. ALERT on match.
  - question: Has a new or rarely used container image been deployed in the environment?
    context: This question seeks to identify potentially malicious images that are not yet on a threat intelligence feed by focusing on rarity. Adversaries often introduce new or custom-built images for their attacks. By baselining image deployment frequency, we can flag images that are statistical outliers (e.g., deployed for the first time or very rarely). An alert on a rare image from an untrusted source warrants investigation as a potential initial intrusion.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS)
      - Corporate image registries
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation logs for container creation events. GROUP BY image name. CALCULATE deployment frequency over 90 days. ALERT if frequency is in the bottom 5th percentile and image is not from a trusted registry.
  - question: Does a container image exhibit metadata characteristics associated with malicious images?
    context: This question uses machine learning to proactively identify suspicious images based on their metadata, even without prior knowledge of the image. Malicious images might have unusually long or random-looking names, originate from untrusted registries, or have a suspicious layer structure. By training a model on these features, we can assign a risk score to new images and flag those that fit a malicious profile for further review.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS)
      - Corporate image registries
    range: last 90 days
    queries:
      - pseudocode: FOR each new image, EXTRACT metadata features (name, registry, layers). APPLY classification model to generate a risk score. ALERT if score exceeds a predefined threshold.
  - question: Is a running container spawning child processes associated with known malicious tools or activities?
    context: This question focuses on detecting malicious activity *within* a running container. A compromised or malicious container may execute unexpected processes like reverse shells, credential dumpers, or cryptominers. By monitoring child processes spawned by containers and matching them against a list of known malicious tool names or command-line patterns, we can detect post-exploitation behavior with high confidence.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Critical application servers
      - Application servers running containerized workloads
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation logs (WinEvent 4688) where parent is a container runtime. SCAN child process command line for malicious keywords/regex. ALERT on match.
  - question: Is a container executing processes that deviate from its established baseline of normal behavior?
    context: This question aims to detect anomalous process activity by first understanding what is normal for a given container image. Applications typically have a predictable set of child processes. By creating a baseline and then alerting on significant deviations, we can uncover novel or obfuscated malicious activity that signature-based methods might miss. A high deviation score suggests a container is behaving in an unexpected and potentially malicious way.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Critical application servers
      - Application servers running containerized workloads
    range: last 90 days
    queries:
      - pseudocode: FOR each container image, CREATE baseline of normal child processes over 30 days. FOR new process events, CALCULATE deviation from baseline (e.g., Jaccard distance). ALERT if deviation exceeds threshold.
  - question: Is a container exhibiting an anomalous rate of process creation?
    context: This question focuses on the tempo of process execution rather than the specific processes themselves. Malicious scripts, process injection loops, or fork bombs can cause a sudden and dramatic increase in the rate of process creation within a container. By using a time-series model to learn the normal 'heartbeat' of a container's process activity, we can detect these sudden spikes as anomalies, which could be indicative of a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Critical application servers
      - Application servers running containerized workloads
    range: last 90 days
    queries:
      - pseudocode: MODEL the rate of process creation per container over time using a time-series algorithm. FORECAST expected rate. ALERT if the observed rate significantly deviates from the forecast.
  - question: Has a container been deployed with unauthorized high-risk runtime permissions?
    context: This question aims to identify containers configured with excessive and dangerous privileges. Flags like `--privileged` or mounting the host's root directory effectively break container isolation, giving an adversary a direct path to compromise the underlying host. By parsing container creation commands for these high-risk flags and checking them against an allow-list of justified use cases, we can detect policy violations and potential attempts at privilege escalation or host takeover.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - CI/CD pipeline runners
      - Kubernetes API servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation logs for container runtime commands. PARSE command line for high-risk flags. CHECK against an allow-list. ALERT on any unauthorized flag.
  - question: Does the combination of runtime flags for a container deployment represent an anomalously high risk?
    context: This question provides a nuanced approach to risk assessment by scoring the cumulative risk of all runtime flags used in a deployment. Rather than just looking for specific 'bad' flags, this method can identify risky combinations. By baselining the typical risk score for an application or user and alerting on significant increases, we can detect when a deployment is configured with an unusually dangerous set of permissions, which may indicate a misconfiguration or malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - CI/CD pipeline runners
      - Kubernetes API servers
    range: last 90 days
    queries:
      - pseudocode: FOR each container deployment, CALCULATE a total risk score based on the weights of its runtime flags. BASELINE risk scores per application. ALERT if a new deployment's score exceeds the 99th percentile of its baseline.
  - question: Has a container been deployed with an unusual or unprecedented combination of runtime flags?
    context: This question uses unsupervised machine learning to find novel and potentially dangerous combinations of runtime flags that may not be individually risky but are suspicious when used together. An Isolation Forest model can learn the patterns of normal flag combinations within the environment. Any deployment that is identified as an 'outlier' represents a configuration that has never or rarely been seen before, warranting investigation as a potential security risk or misconfiguration.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - CI/CD pipeline runners
      - Kubernetes API servers
    range: last 90 days
    queries:
      - pseudocode: TRAIN an Isolation Forest model on feature vectors of container runtime flags. FOR new deployments, use the model to identify outliers. ALERT on deployments flagged as outliers.
  - question: Is a container communicating with a known malicious IP address or domain?
    context: This question seeks to detect container network activity that directly points to a compromise. If a container establishes a connection to a destination present on a threat intelligence feed (such as a known command-and-control server, malware distribution point, or cryptomining pool), it is a strong indicator that the container is malicious or has been compromised. This provides a high-fidelity alert for immediate incident response.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network egress points
      - Container overlay network segments
      - DNS resolvers
      - Cloud VPCs
      - Threat intelligence feeds
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek logs for network connections from container IPs. EXTRACT destination IP/domain. JOIN with threat intelligence feeds. ALERT on any match.
  - question: Is a container exhibiting network behavior indicative of C2 beaconing or DGA activity?
    context: This question looks for subtle, behavioral indicators of command-and-control communication. Adversaries use techniques like DGA (Domain Generation Algorithms) to create random-looking domains to evade blocklists, resulting in high DNS entropy. They also use 'beaconing'—regular, small connections back to a C2 server. By analyzing DNS request entropy and profiling network connection patterns for periodicity and size, we can detect these covert communication channels even if the destination is not on a known threat feed.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network egress points
      - Container overlay network segments
      - DNS resolvers
      - Cloud VPCs
    range: last 90 days
    queries:
      - pseudocode: FOR each container, ANALYZE DNS logs for domain name entropy and ANALYZE connection logs for periodic, low-volume patterns. ALERT if entropy or beaconing behavior exceeds established baselines.
  - question: Is a container generating network traffic that is anomalous compared to its normal activity profile?
    context: This question aims to identify any anomalous network flow, even if it doesn't match a specific malicious signature. By using a clustering algorithm like DBSCAN, we can group all the 'normal' network connections for a containerized application into distinct clusters. Any network connection that doesn't fit into these clusters is flagged as noise or an anomaly. This could represent data exfiltration, lateral movement, or other unexpected activity that warrants investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network egress points
      - Container overlay network segments
      - DNS resolvers
      - Cloud VPCs
    range: last 90 days
    queries:
      - pseudocode: FOR each application, CLUSTER network flows from Zeek conn.log using DBSCAN to define normal behavior. IDENTIFY and ALERT on any new flows that are classified as noise points (anomalies).
  - question: Is the environment pulling container images from unapproved or untrusted public registries?
    context: This question enforces a policy of using only trusted sources for container images. Public registries can host malicious or vulnerable images. By creating an allow-list of approved corporate and public registries and monitoring network logs for connections to any other registry domain, we can detect and block attempts to introduce potentially insecure images into the environment, reducing the attack surface.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Container host servers
      - Corporate image registries
      - DNS resolvers
      - Developer workstations
    range: last 90 days
    queries:
      - pseudocode: MAINTAIN allow-list of registry domains. MONITOR DNS and connection logs for image pull activity to domains NOT on the list. ALERT on any such activity.
  - question: Has a container been deployed using an image name that appears to be a typosquatted version of a legitimate image?
    context: This question addresses the threat of typosquatting, where adversaries upload malicious images with names very similar to popular, legitimate ones (e.g., 'rediss' instead of 'redis'). By calculating the string similarity (Levenshtein distance) between deployed image names and a list of approved image names, we can automatically flag potential typosquatting attempts for review. This helps prevent accidental deployment of malicious images due to simple typing errors.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Container host servers
      - Corporate image registries
      - DNS resolvers
      - Developer workstations
    range: last 90 days
    queries:
      - pseudocode: EXTRACT deployed image names from process logs. CALCULATE Levenshtein distance against a list of known-good image names. ALERT if distance is 1 or 2.
  - question: Is an image being pulled from a registry that has characteristics of being suspicious or illegitimate?
    context: This question uses machine learning to assess the trustworthiness of container image registries themselves. New, malicious registries may have certain tell-tale signs, such as a very recent domain registration date, a self-signed or unusual SSL certificate, or no prior history of use in the organization. By training a model on these features, we can score registries and flag image pulls from sources that are predicted to be suspicious, even if they are not explicitly on a blocklist.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Container host servers
      - Corporate image registries
      - DNS resolvers
      - Developer workstations
    range: last 90 days
    queries:
      - pseudocode: FOR each registry, EXTRACT features (domain age, SSL cert info, reputation). APPLY classification model to generate a trust score. ALERT if an image is pulled from a registry with a low trust score.