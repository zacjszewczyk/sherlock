name: T1055.003: Thread Execution Hijacking
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate potential adversary activity involving Thread Execution Hijacking (T1055.003) for privilege escalation and defense evasion. It focuses on detecting suspicious process access events, particularly when a lower-integrity process attempts to write to the memory of a higher-integrity process, or when a trusted process is targeted for injection to bypass security controls. Indicators include known malicious processes accessing system processes, rapid sequences of access requests (suspension, writing, context setting), trusted processes initiating unusual network connections or spawning uncharacteristic child processes after being targeted, and communication over non-standard ports. The goal is to identify when an adversary has injected malicious code into a legitimate process to elevate privileges or evade defenses.
type: technique
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: "How can I create a SIEM rule to detect known malicious processes attempting to hijack higher-privilege processes?"
    context: "This question aims to identify direct evidence of thread hijacking by correlating process access logs with a threat intelligence feed of known malicious file hashes. An alert is triggered when a process with a malicious hash requests memory write access to a target process with a higher integrity level, a key indicator of an attempt to escalate privileges by injecting code."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Critical Application Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          SEARCH process access logs (Sysmon EID 10)
          JOIN with threat intelligence feed on SourceImage hash
          WHERE SourceImage hash is malicious
          AND TargetIntegrityLevel > SourceIntegrityLevel
          AND GrantedAccess includes memory write permissions (e.g., 0x0020, 0x1F0FFF)
          TRIGGER high-severity alert
  - question: "How can I use statistical modeling to find rare and potentially malicious process access events indicative of privilege escalation?"
    context: "This question focuses on uncovering unknown threats by using anomaly detection. By building a historical frequency model of normal process interactions (SourceImage, TargetImage, GrantedAccess), this approach can flag statistically rare events. An access attempt from a lower-integrity to a higher-integrity process with write permissions that falls below a low percentile threshold is highly suspicious and could indicate a novel thread hijacking attack."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Critical Application Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          PROFILE historical frequency of (SourceImage, TargetImage, GrantedAccess) tuples from Sysmon EID 10.
          FOR each new EID 10 event:
            IF frequency of tuple < 1st percentile
            AND TargetIntegrityLevel > SourceIntegrityLevel
            AND GrantedAccess includes write permissions
            FLAG as statistically rare and suspicious access.
  - question: "How can I use a machine learning model to classify process access events as malicious?"
    context: "This question proposes using a supervised classification model to proactively score process access events. By training a model on features like process names, integrity levels, access rights, and threat intelligence data, the system can learn to distinguish between benign and malicious access patterns. This allows for real-time detection of potential thread hijacking attempts with a high degree of confidence, even for complex or subtle attacks."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Critical Application Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          TRAIN a classifier (e.g., Random Forest) on labeled Sysmon EID 10 data.
          FEATURES: SourceImage, TargetImage, IntegrityLevels, GrantedAccess, parent process, TI lookup result.
          DEPLOY model to score new EID 10 events in real-time.
          IF classification is 'malicious' AND confidence > 0.9
          TRIGGER alert.
  - question: "How can I detect a rapid sequence of suspicious process access requests against a single target?"
    context: "This question addresses the specific sequence of actions required for thread hijacking: suspending a thread, writing to its memory, and setting its context to execute the injected code. A correlation rule can detect this pattern by looking for multiple Sysmon Event ID 10 events from a single source to a single target within a very short time frame, with the specific access rights for suspension, writing, and context setting. Excluding known debuggers helps reduce false positives."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 8"
      - "All Windows Endpoints and Servers, especially those running critical services."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          SEARCH for multiple Sysmon EID 10 events from a unique SourceProcessGUID to a single TargetProcessGUID within 2 seconds.
          WHERE SourceImage is NOT in (procexp.exe, windbg.exe, etc.)
          AND the sequence of GrantedAccess masks includes (0x0002, 0x0020, 0x0100)
          TRIGGER alert.
  - question: "How can I use entropy analysis to identify processes making anomalous access requests?"
    context: "This question suggests an unsupervised method to detect abnormal process behavior. Most processes have a predictable set of interactions. A sudden increase in the variety (Shannon entropy) of access rights a process requests can indicate that it has been compromised and is now being used for malicious purposes, such as preparing for thread hijacking. This is especially suspicious if the process is not a known administrative or development tool."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 8"
      - "All Windows Endpoints and Servers, especially those running critical services."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          FOR each running process:
            CALCULATE baseline Shannon entropy of GrantedAccess codes from EID 10 over a 5-min window.
            MONITOR for entropy spikes.
            IF current entropy > (baseline_mean + 3 * baseline_std_dev)
            AND process is not an admin/dev tool
            TRIGGER alert for anomalous access pattern.
  - question: "How can a sequence-based anomaly detection model identify thread hijacking attempts?"
    context: "This question proposes using a sophisticated model like an LSTM autoencoder to learn the normal sequence of actions for benign processes. A thread hijacking attempt involves an abnormal sequence of events (e.g., process access, memory write, thread resume). When a process's live event sequence is fed into the trained model, a high reconstruction error indicates that the sequence is anomalous and does not match learned benign behavior, flagging a potential compromise."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 8"
      - "All Windows Endpoints and Servers, especially those running critical services."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          TRAIN LSTM autoencoder on sequences of (EventID, GrantedAccess, TargetImage) from benign processes.
          IN production, feed live event sequences for each process into the model.
          IF reconstruction error is high
          TRIGGER alert for anomalous action sequence.
  - question: "How can I create a high-severity alert for any low-to-high integrity process access with risky permissions?"
    context: "This question focuses on creating a very specific, high-fidelity rule that targets the core of privilege escalation via process injection. Any instance where a process running at a 'Low' or 'Medium' integrity level is granted access to write to the memory or set the thread context of a 'High' or 'System' integrity process is inherently suspicious and a strong indicator of a malicious attempt to hijack a privileged process."
    answer_sources:
      - "Sysmon Event ID 10"
      - "All Windows Endpoints and Servers, with a focus on systems processing sensitive data."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          SEARCH Sysmon Event ID 10
          WHERE SourceIntegrityLevel is in ('Low', 'Medium')
          AND TargetIntegrityLevel is in ('High', 'System')
          AND GrantedAccess includes (0x0020 OR 0x0100)
          TRIGGER high-severity alert.
  - question: "How can I use a probability distribution to find extremely rare and high-risk integrity-level transitions?"
    context: "This question proposes a data-driven approach to quantify the risk of process interactions. By establishing a baseline probability for all observed combinations of source integrity, target integrity, and access rights, the system can flag events that are exceptionally rare (e.g., <0.01% probability). A low-to-high integrity transition with write permissions that is also historically unprecedented in the environment is a powerful signal of a potential attack."
    answer_sources:
      - "Sysmon Event ID 10"
      - "All Windows Endpoints and Servers, with a focus on systems processing sensitive data."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          CALCULATE historical probability distribution for all (SourceIntegrityLevel, TargetIntegrityLevel, GrantedAccess) combinations from Sysmon EID 10.
          FOR each new EID 10 event:
            IF historical probability < 0.0001
            AND it represents a low-to-high integrity transition with write access
            FLAG as high-risk anomaly.
  - question: "How can clustering algorithms help identify outlier process access patterns?"
    context: "This question suggests using a density-based clustering algorithm like DBSCAN to find anomalous process interactions. Normal, frequent activities will form large, dense clusters. Malicious activities, like a unique thread hijacking attempt, will be rare and different from the norm, causing them to be classified as outliers or 'noise' points by the algorithm. Investigating these noise points can reveal novel attack patterns."
    answer_sources:
      - "Sysmon Event ID 10"
      - "All Windows Endpoints and Servers, with a focus on systems processing sensitive data."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          APPLY DBSCAN clustering on Sysmon EID 10 data.
          FEATURES: numerical representation of SourceIntegrityLevel, TargetIntegrityLevel, GrantedAccess.
          IDENTIFY data points classified as 'noise' or outliers.
          INVESTIGATE these outliers as potentially malicious access patterns.
  - question: "How can I correlate a suspicious process access event with subsequent access to sensitive system resources?"
    context: "This question aims to confirm a successful compromise by linking a potential hijacking event with its malicious payload's actions. A stateful rule first identifies a high-risk process access event. It then monitors the *target* process to see if it subsequently attempts to access critical resources like the SAM database or LSA secrets. This two-stage detection provides strong evidence that the target process was successfully hijacked and is now executing the adversary's commands."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Domain Controllers"
      - "Certificate Authorities"
      - "Servers hosting LSA secrets"
      - "File Servers with sensitive data"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          ON suspicious Sysmon EID 10 event (low-to-high integrity write):
            STORE TargetProcessGUID for 10 minutes.
            IF that TargetProcessGUID is seen accessing '\\SAM' (EID 4663) or 'HKLM\\SECURITY\\Policy\\Secrets' (EID 4657)
            TRIGGER critical alert for confirmed compromise.
  - question: "How can I score the rarity of a process's actions after it has been targeted for hijacking?"
    context: "This question proposes a behavioral analysis approach to confirm a hijack. After a process is targeted by a suspicious access event, its subsequent actions (e.g., child processes, registry access, network connections) are monitored. By comparing these actions against a historical baseline of that process's normal behavior, we can score the rarity of each action. A high cumulative rarity score indicates a significant deviation from the norm, suggesting the process is compromised."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Domain Controllers"
      - "Certificate Authorities"
      - "Servers hosting LSA secrets"
      - "File Servers with sensitive data"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          ON high-risk Sysmon EID 10 event:
            MONITOR TargetProcess for 10 minutes.
            FOR each subsequent action (child process, network connection):
              CALCULATE rarity score based on historical baseline.
            IF cumulative rarity score > 99th percentile threshold
            FLAG process for investigation.
  - question: "How can a time series anomaly detection model confirm the compromise of a critical system process?"
    context: "This question focuses on protecting critical processes like lsass.exe. These processes have very stable and predictable behavior (CPU, network, I/O). A time series model can be trained on these normal behavioral metrics. If a high-risk process access event targets one of these critical processes, its subsequent metrics are fed to the model. An 'anomaly' classification provides strong corroborating evidence that the process's execution flow has been hijacked."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Domain Controllers"
      - "Certificate Authorities"
      - "Servers hosting LSA secrets"
      - "File Servers with sensitive data"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          TRAIN time series anomaly model (e.g., Isolation Forest) on metrics for lsass.exe (CPU, network, I/O).
          ON high-risk Sysmon EID 10 targeting lsass.exe:
            FEED subsequent behavioral metrics into the model.
            IF model classifies as 'anomaly'
            TRIGGER critical alert for likely hijack.
  - question: "How can I detect if a trusted process makes a malicious network connection after being targeted for injection?"
    context: "This question addresses a common defense evasion tactic: injecting malicious code into a trusted, whitelisted process (like svchost.exe) to make network connections. A SIEM rule can correlate a suspicious process access event with a subsequent network connection from the *target* process to a destination on a threat intelligence feed. This links the injection attempt to malicious C2 communication, bypassing application whitelisting."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 3"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
      - "Web Proxies"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          SEARCH for a network connection (Sysmon EID 3, Zeek) where destination IP is on a TI feed.
          IF initiating process is a trusted OS process (e.g., svchost.exe):
            SEARCH for a Sysmon EID 10 in the last 5 minutes where this process was the Target.
            IF correlation found, TRIGGER alert.
  - question: "How can I use baselining of network destinations to detect anomalous connections from a hijacked process?"
    context: "This question focuses on detecting anomalous network behavior as a sign of compromise. For common processes, a baseline of normal destination countries and ASNs is established. If a process is targeted for injection and then connects to a geographically or logically rare destination (one not in its typical set), it's a strong indicator that the connection is not legitimate and is likely the result of a code injection."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 3"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
      - "Web Proxies"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          BASELINE destination countries/ASNs for each common process from Zeek conn.log.
          AFTER a process is a target in a suspicious Sysmon EID 10:
            MONITOR its subsequent network connections.
            IF a connection's destination is not in the top 95% of its historical destinations
            FLAG connection as anomalous.
  - question: "How can a machine learning model be used to classify network connections as malicious post-injection?"
    context: "This question proposes using a trained model to analyze the nature of network traffic itself. After a trusted process is targeted for injection, its subsequent network connections can be fed into a classifier. The model, using features like destination port, data volume, and TLS fingerprints (JA3/S), can determine if the traffic pattern matches known malicious C2 channels, even if the destination IP is not on a threat list."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 3"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
      - "Web Proxies"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          TRAIN a classifier on Zeek logs to label connections as benign/malicious.
          FEATURES: dest port, duration, data volume, JA3/JA3S hash, IP reputation.
          AFTER a whitelisted process is targeted in a Sysmon EID 10:
            SCORE its subsequent network connections with the model.
            IF classification is 'malicious' with high confidence, TRIGGER alert.
  - question: "How can I create a rule to monitor for suspicious access to commonly abused processes?"
    context: "This question focuses on creating a watchlist of processes that are frequent targets for hijacking due to their network capabilities and trusted status (e.g., browsers, explorer.exe, svchost.exe). A SIEM rule can generate a medium-severity alert whenever any process attempts to gain memory write or thread context setting permissions to one of these watchlist processes, providing an early warning of a potential evasion attempt."
    answer_sources:
      - "Sysmon Event ID 10"
      - "User Workstations"
      - "Application Servers"
      - "any system with internet access."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          DEFINE watchlist of process names ('explorer.exe', 'svchost.exe', 'chrome.exe', etc.).
          SEARCH Sysmon Event ID 10.
          WHERE TargetImage is in watchlist
          AND GrantedAccess includes (0x0020 OR 0x0100)
          TRIGGER medium-severity alert.
  - question: "How can I detect a targeted campaign against a specific whitelisted application?"
    context: "This question aims to identify a broader attack pattern beyond a single event. By tracking the daily count of suspicious access attempts (write permissions) against key whitelisted processes, we can establish a historical baseline. A statistically significant spike in these attempts against a single application (e.g., the count exceeds 3 standard deviations above the mean) suggests a coordinated campaign to exploit that specific application for evasion."
    answer_sources:
      - "Sysmon Event ID 10"
      - "User Workstations"
      - "Application Servers"
      - "any system with internet access."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          FOR each process on the evasion watchlist:
            TRACK daily count of suspicious access attempts (Sysmon EID 10 with write perms).
            CALCULATE historical mean and standard deviation of counts.
            IF today's count > (mean + 3 * std_dev)
            TRIGGER alert for abnormal targeting activity.
  - question: "How can graph analysis reveal anomalous process interactions indicative of evasion?"
    context: "This question proposes visualizing process interactions as a graph, where processes are nodes and access events are edges. Community detection algorithms can identify clusters of normally interacting processes. A thread hijacking attempt for evasion would likely create an anomalous edge between two otherwise unrelated communities (e.g., Microsoft Word accessing svchost.exe). Flagging these 'bridge' edges can uncover sophisticated evasion techniques."
    answer_sources:
      - "Sysmon Event ID 10"
      - "User Workstations"
      - "Application Servers"
      - "any system with internet access."
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          MODEL Sysmon EID 10 data as a graph (nodes=processes, edges=access events).
          APPLY community detection algorithm (e.g., Louvain).
          IDENTIFY and alert on edges that connect two distinct and normally separate communities.
  - question: "How can I detect if a hijacked process spawns an uncharacteristic child process?"
    context: "This question provides a method to confirm a successful hijack by observing its immediate effects. A correlation rule can first identify a suspicious process access event targeting a legitimate process (e.g., svchost.exe). It then monitors that specific process to see if it spawns a child process it normally wouldn't, like cmd.exe or powershell.exe. This sequence is a strong indicator that the parent process was compromised and is being used to launch further malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "All Windows Endpoints"
      - "Domain Controllers"
      - "DNS Servers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          ON suspicious Sysmon EID 10 event:
            STORE TargetProcessGUID.
            WITHIN 5 minutes, if the same process GUID is the ParentProcessGUID for a child process like 'cmd.exe' or 'powershell.exe' (Sysmon EID 1)
            TRIGGER alert.
  - question: "How can I use behavioral baselining and DNS analysis to detect post-hijack activity?"
    context: "This question combines two forms of anomaly detection. First, it establishes a baseline of normal child processes for each parent. After a parent is targeted for hijacking, any rare child it spawns is flagged. Concurrently, it analyzes DNS queries from the host, looking for high-entropy domains indicative of Domain Generation Algorithms (DGA). Combining these two anomalies—an unusual child process and a suspicious DNS query—provides strong evidence of a successful compromise."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "All Windows Endpoints"
      - "Domain Controllers"
      - "DNS Servers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          BASELINE normal child processes for each parent from Sysmon EID 1.
          AFTER a parent is targeted in a suspicious EID 10:
            FLAG subsequent child processes that are in the bottom 1% of frequency.
            AND/OR
            FLAG DNS queries from the host with Shannon entropy in the 99th percentile.
            CORRELATE to trigger alert.
  - question: "How can a multivariate time series model detect behavioral changes in a hijacked process?"
    context: "This question proposes a holistic behavioral model for key whitelisted processes. By modeling multiple metrics over time (like child process rate, network connection rate, DNS query entropy), we can create a comprehensive picture of 'normal.' After a process is targeted by a suspicious access event, its subsequent behavior is fed into an anomaly detection algorithm. A significant anomaly score across multiple metrics indicates a definite deviation from normal, likely caused by hijacking."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 10"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "All Windows Endpoints"
      - "Domain Controllers"
      - "DNS Servers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          MODEL normal behavior for key processes using time series of (child process rate, network rate, DNS entropy).
          AFTER a process is targeted in a suspicious EID 10:
            FEED its subsequent behavioral time series to an anomaly detection algorithm (e.g., Isolation Forest).
            IF anomaly score is high, TRIGGER alert.
  - question: "How can I detect when a hijacked process communicates over non-standard ports or protocols?"
    context: "This question focuses on network-based indicators of compromise. Many legitimate applications are predictable in their network behavior (e.g., a browser uses ports 80/443). A rule can define these expected behaviors. If a process, especially after being targeted for injection, is observed initiating a connection on a port or protocol not on its allowlist, it strongly suggests its communication is being controlled by an adversary for C2 or data exfiltration."
    answer_sources:
      - "Zeek conn.log"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 10"
      - "Network Egress Points"
      - "Internal Network Segments"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          DEFINE process-to-port allowlist (e.g., 'chrome.exe' -> TCP/80, 443).
          SEARCH for network connections (Sysmon EID 3, Zeek).
          IF process is on allowlist but destination port is NOT
          AND process was recently a target in a suspicious Sysmon EID 10
          TRIGGER alert.
  - question: "How can I use statistical frequency of network connections to find anomalous behavior?"
    context: "This question uses historical data to define normal network behavior for each process. By building a frequency distribution of (protocol, destination port) pairs, we can identify what is typical. After a process is targeted for potential hijacking, any subsequent network connection it makes using a very rare port/protocol pair (e.g., appearing in <1% of its history) is flagged as anomalous and potentially malicious, indicating a deviation from its intended function."
    answer_sources:
      - "Zeek conn.log"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 10"
      - "Network Egress Points"
      - "Internal Network Segments"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          FOR each process, build frequency distribution of (protocol, dest_port) pairs from historical data.
          AFTER a process is targeted for injection:
            MONITOR its subsequent network connections.
            IF a connection's (protocol, port) pair has a frequency < 1%
            FLAG as anomalous connection.
  - question: "How can a machine learning model detect any network connection from a process that should never make one?"
    context: "This question describes a high-fidelity detection method for critical system processes (e.g., lsass.exe, winlogon.exe) that should never initiate outbound network connections. A One-Class SVM model can be trained on their normal, non-network behavior. Any network connection event (Sysmon EID 3) from one of these processes would be a massive deviation from the learned norm, and the model would classify it as a high-confidence anomaly, strongly indicating a system compromise."
    answer_sources:
      - "Zeek conn.log"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 10"
      - "Network Egress Points"
      - "Internal Network Segments"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - query_language: "pseudocode"
        query: |
          TRAIN One-Class SVM model on benign behavioral data for non-networked system processes (e.g., 'lsass.exe').
          IF a network connection event (Sysmon EID 3) is initiated by one of these processes
          TREAT as a high-confidence anomaly and TRIGGER critical alert.