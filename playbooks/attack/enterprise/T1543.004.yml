name: T1543.004: Launch Daemon
id: 5a8e31f0-4d7a-4b9e-8c6f-22a1b7d5c3f9
description: This playbook helps investigate whether an adversary is using macOS Launch Daemons for persistence or privilege escalation. It focuses on detecting the creation or modification of malicious property list (.plist) files in the `/Library/LaunchDaemons/` directory. Investigative actions include checking for known-malicious file hashes, identifying suspicious file paths, names, and content (like obfuscated arguments), analyzing network connections initiated by daemon-spawned processes for C2 beaconing, and detecting the hijacking of legitimate daemons. The playbook also addresses privilege escalation by looking for known exploit tools, unauthorized loading of daemons via `sudo launchctl`, permission bypasses when writing to the daemons directory, and post-escalation activity performed by processes running with root privileges.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are newly created or modified Launch Daemons or their associated executables known to be malicious based on threat intelligence feeds?
  context: This question aims to detect known malware using Launch Daemons for persistence. Adversaries often reuse malware, and its file hash (SHA256) can be a high-fidelity indicator. By monitoring the `/Library/LaunchDaemons/` directory for new or changed files, parsing the plist to find the executable, and comparing both file hashes against threat intelligence, we can quickly identify known threats.
  answer_sources:
  - File Creation Events
  - File Modification Events
  - Threat Intelligence Feeds
  - File system logs from all company-managed macOS endpoints, specifically monitoring
    the `/Library/LaunchDaemons/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_events WHERE (event_type='creation' OR event_type='modification')
      AND file_path='/Library/LaunchDaemons/*' | HASH file | LOOKUP file_hash in
      threat_intelligence_feed | ALERT on match
- question: Are any executables referenced by Launch Daemons statistically rare across
    the environment?
  context: This question helps identify potentially novel malware by flagging outliers.
    Legitimate software is typically widespread, while custom malware may only exist
    on a few endpoints. By calculating the prevalence of each executable's file hash
    across all macOS systems, we can identify and investigate those that are unusually
    rare (e.g., below the 1st percentile), as they are more likely to be malicious.
  answer_sources:
  - File Creation Events
  - File Modification Events
  - Threat Intelligence Feeds
  - File system logs from all company-managed macOS endpoints, specifically monitoring
    the `/Library/LaunchDaemons/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: 'QUERY endpoint_logs for all executable_hashes referenced in ''/Library/LaunchDaemons/''.
      GROUP by executable_hash and COUNT hosts. CALCULATE prevalence percentiles.
      ALERT on hashes with prevalence < 1st percentile.'
- question: Can a machine learning model classify new or modified Launch Daemons as
    malicious based on their features?
  context: This question leverages machine learning to automate the detection of malicious
    Launch Daemons. By training a model on features like file sizes, hash prevalence,
    code signing status, and binary entropy, we can create a system that classifies
    new daemons in near real-time. This approach can detect novel threats that signature-based
    methods might miss.
  answer_sources:
  - File Creation Events
  - File Modification Events
  - Threat Intelligence Feeds
  - File system logs from all company-managed macOS endpoints, specifically monitoring
    the `/Library/LaunchDaemons/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR new_or_modified_launch_daemon | EXTRACT features (file_size, hash_prevalence,
      signing_status, entropy) | PREDICT classification using trained_model | ALERT
      if prediction is 'malicious'
- question: Do any Launch Daemon plists contain suspicious patterns, such as execution
    from unusual directories or obfuscated arguments?
  context: This question aims to identify malicious plists by their content. Adversaries
    often place executables in user-writable locations like `/tmp/` or `/Users/Shared/`
    and may obfuscate commands in the `ProgramArguments`. A YARA rule can efficiently
    scan for these and other suspicious patterns, such as names that mimic legitimate
    daemons, to flag potentially malicious persistence attempts.
  answer_sources:
  - File Creation Events
  - File Modification Events
  - File Content
  - The `/Library/LaunchDaemons/` directory on all macOS endpoints and the content
    of all plist files within it.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON file_creation_or_modification in '/Library/LaunchDaemons/' | SCAN file_content
      with yara_rule_set | ALERT on match for suspicious_paths, encoded_strings, or
      mimicked_names
- question: Are there any new Launch Daemon plists that exhibit high entropy arguments
    or names that mimic legitimate daemons?
  context: Adversaries may try to hide their persistence mechanism by obfuscating
    commands or by giving the plist a name that is very similar to a legitimate system
    daemon (typosquatting). High Shannon entropy in arguments can indicate encoded
    data, while a small Levenshtein distance to a known-good name suggests masquerading.
    This question helps detect these subtle evasion techniques through statistical
    analysis.
  answer_sources:
  - File Creation Events
  - File Modification Events
  - File Content
  - The `/Library/LaunchDaemons/` directory on all macOS endpoints and the content
    of all plist files within it.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_events WHERE file_path='/Library/LaunchDaemons/*.plist' | PARSE
      plist_content | CALCULATE entropy(ProgramArguments) as arg_entropy, levenshtein_distance(file_name,
      known_good_daemons) as name_distance | ALERT where arg_entropy > baseline_95th_percentile
      OR name_distance in [1, 2]
- question: Do any new Launch Daemon plists form anomalous clusters based on their
    structural features?
  context: This question uses unsupervised machine learning to find outliers. By clustering
    Launch Daemons based on features like executable path depth, argument count, and
    the presence of scripting keywords, we can identify plists that do not fit with
    normal, established patterns. Plists that are marked as noise or form new, small
    clusters by a DBSCAN algorithm warrant investigation as they may represent novel
    adversary techniques.
  answer_sources:
  - File Creation Events
  - File Modification Events
  - File Content
  - The `/Library/LaunchDaemons/` directory on all macOS endpoints and the content
    of all plist files within it.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR all_launch_daemons | EXTRACT features (path_depth, arg_count, keyword_presence)
      | APPLY DBSCAN clustering | ALERT on plists classified as noise or belonging
      to new, small clusters
- question: Is a process spawned by a new Launch Daemon connecting to known malicious
    infrastructure or newly registered domains?
  context: This question links persistence establishment to network activity. A common
    next step for malware is to connect to a Command and Control (C2) server. By
    correlating a new Launch Daemon with its subsequent process and network connections,
    and enriching this data with threat intelligence, we can detect connections to
    known malicious IPs/domains or high-risk newly registered domains (NRDs).
  answer_sources:
  - File Creation Events
  - Process Execution Events
  - Zeek conn.log
  - Zeek dns.log
  - Network gateways, DNS resolvers, and process-level network logs on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE file_creation in '/Library/LaunchDaemons/' with subsequent process_execution
      and network_connection | ENRICH destination_ip/domain with threat_intel and
      whois_data | ALERT if destination is known_malicious or domain_age < 30_days
- question: Does a process spawned by a Launch Daemon exhibit network beaconing behavior?
  context: This question aims to detect C2 communications through traffic analysis.
    Malware often uses periodic, low-volume connections (beaconing) to communicate
    with its C2 server. By analyzing the timing (jitter) and data volume of a daemon-spawned
    process's outbound connections, we can identify patterns that are too regular
    to be human-driven and are characteristic of automated C2 beaconing.
  answer_sources:
  - File Creation Events
  - Process Execution Events
  - Zeek conn.log
  - Zeek dns.log
  - Network gateways, DNS resolvers, and process-level network logs on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process_spawned_by_launch_daemon | ANALYZE network_connections
      | CALCULATE std_dev(time_between_connections) as jitter, std_dev(bytes_out)
      as volume_variance | ALERT if jitter < 5th_percentile AND volume_variance <
      5th_percentile
- question: Does the network activity of a daemon-spawned process deviate from normal
    behavior?
  context: This question applies anomaly detection to network traffic to find malicious
    activity. An LSTM autoencoder, trained on the normal network behavior of legitimate
    daemons, can identify when a new daemon-spawned process behaves differently. A
    high anomaly score could indicate C2 communications, data exfiltration, or other
    malicious network patterns that don't fit a simple beaconing signature.
  answer_sources:
  - File Creation Events
  - Process Execution Events
  - Zeek conn.log
  - Zeek dns.log
  - Network gateways, DNS resolvers, and process-level network logs on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR process_from_launch_daemon | CAPTURE time_series_network_data (bytes,
      packets, frequency) | APPLY trained_LSTM_autoencoder | CALCULATE anomaly_score
      | ALERT if score > threshold
- question: Has a legitimate Launch Daemon's executable been replaced with a malicious
    one?
  context: This question targets a specific persistence technique known as executable
    hijacking. Adversaries may modify a pre-existing, legitimate Launch Daemon's executable
    to gain persistence with the privileges of the original daemon. By maintaining
    a manifest of known-good file hashes and monitoring for unauthorized changes,
    we can detect this type of file replacement.
  answer_sources:
  - File Modification Events
  - File Hash Database
  - Directories containing executables referenced by plists in `/Library/LaunchDaemons/`
    across all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_modification_events for executables_in_launch_daemons | HASH
      modified_file | COMPARE new_hash with golden_manifest_hash | ALERT on mismatch
- question: Has a Launch Daemon's executable been modified with an unusual frequency?
  context: While legitimate software updates cause executables to change, these changes
    are typically infrequent. An adversary repeatedly modifying a binary might indicate
    tool updates or attempts to evade detection. This question establishes a historical
    baseline of modification frequency for each executable and alerts when a file
    is changed more often than expected (e.g., more than two standard deviations
    above its historical mean).
  answer_sources:
  - File Modification Events
  - File Hash Database
  - Directories containing executables referenced by plists in `/Library/LaunchDaemons/`
    across all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each launch_daemon_executable | CALCULATE historical_monthly_modification_frequency_mean
      and std_dev | MONITOR current_modification_frequency | ALERT if current_freq
      > (mean + 2*std_dev)
- question: Did a file modification to a Launch Daemon's executable occur outside
    of a normal software update profile?
  context: Legitimate modifications to system files often follow predictable patterns,
    such as being performed by a known installer process, as the root user, and during
    maintenance windows. This question uses a one-class SVM model to learn this 'normal
    update' profile. Any modification that does not fit this profile is flagged as
    anomalous and potentially malicious.
  answer_sources:
  - File Modification Events
  - File Hash Database
  - Directories containing executables referenced by plists in `/Library/LaunchDaemons/`
    across all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR file_modification_event on launch_daemon_executable | EXTRACT features
      (parent_process, user_context, time_of_day) | APPLY one_class_SVM_model | ALERT
      if event is classified as anomaly
- question: Is a new Launch Daemon a known privilege escalation tool?
  context: This question aims to detect the installation of known malicious tools
    that use Launch Daemons for privilege escalation. By hashing the new plist and
    its executable and checking them against threat intelligence feeds and YARA rules
    specifically designed to find privilege escalation malware, we can quickly identify
    the use of off-the-shelf adversary tools.
  answer_sources:
  - File Creation Events
  - Threat Intelligence Feeds
  - YARA rule sets
  - File system and process logs on all macOS endpoints, with specific focus on monitoring
    `/Library/LaunchDaemons/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON file_creation in '/Library/LaunchDaemons/' | HASH file and SCAN with
      YARA | LOOKUP hash in privesc_tool_threat_feed | ALERT on any match
- question: Does the content of a new Launch Daemon contain keywords associated with
    privilege escalation?
  context: This question analyzes the text content of plists and their binaries to
    find suspicious commands. The presence and frequency of keywords related to privilege
    escalation (e.g., `dscl`, `AuthorizationExecuteWithPrivileges`, `setuid`) can
    be a strong indicator of malicious intent. Using TF-IDF scoring helps to highlight
    files where these terms are unusually prominent compared to a baseline of benign
    daemons.
  answer_sources:
  - File Creation Events
  - Threat Intelligence Feeds
  - YARA rule sets
  - File system and process logs on all macOS endpoints, with specific focus on monitoring
    `/Library/LaunchDaemons/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR new_plist_and_executable | EXTRACT text_content | CALCULATE TF-IDF
      score for privesc_keywords | ALERT if score > 98th_percentile_of_baseline
- question: Can a machine learning model classify a new Launch Daemon as a privilege
    escalation tool based on its text content?
  context: This question uses a supervised learning approach to automate the detection
    of privilege escalation malware. By training a Naive Bayes classifier on the text
    from a labeled dataset of benign and malicious daemons, the model learns to identify
    the linguistic patterns associated with malicious files. This allows for automated
    classification of all new daemons.
  answer_sources:
  - File Creation Events
  - Threat Intelligence Feeds
  - YARA rule sets
  - File system and process logs on all macOS endpoints, with specific focus on monitoring
    `/Library/LaunchDaemons/`.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR new_daemon | EXTRACT text_features | PREDICT classification using trained_Naive_Bayes_model
      | ALERT if prediction is 'malicious'
- question: Has a user loaded a Launch Daemon from a non-standard path using `sudo
    launchctl`?
  context: This is a high-fidelity detection for an adversary attempting to load a
    malicious daemon with root privileges. Legitimate daemons are loaded from system
    directories like `/System/Library/` or `/Library/`. An attempt to load a plist
    from a user-writable directory like `/tmp/` or `/Users/Shared/` using `sudo launchctl
    load` is highly indicative of malicious activity.
  answer_sources:
  - Process Execution Events
  - Process execution logs, including full command-line arguments, from all company-managed
    macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_execution_logs WHERE command_line contains 'sudo launchctl
      load' AND file_path_argument is NOT in ['/System/Library/*', '/Library/*']
- question: Is `sudo launchctl` being executed by an unusual user or parent process?
  context: Beyond the file path, the context of the `sudo launchctl` execution can
    reveal malicious activity. This command is typically run by system administrators
    or software installers. If it is executed by a regular user account for the first
    time, or spawned by an unexpected parent process (like a web browser or document
    editor), it suggests a compromised session is being used to escalate privileges.
  answer_sources:
  - Process Execution Events
  - Process execution logs, including full command-line arguments, from all company-managed
    macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_execution_logs for 'sudo launchctl' | BASELINE normal user
      and parent_process | ALERT if current_user or current_parent_process is anomalous
- question: Is the execution of `sudo launchctl` part of a suspicious sequence of
    commands?
  context: Adversaries often follow a sequence of actions: download a malicious file,
    make it executable, and then load it. A Hidden Markov Model (HMM) can be trained
    to recognize normal command sequences. A sequence like downloading a file with
    `curl` into `/tmp/` followed immediately by `sudo launchctl load` on that file
    would be identified by the model as a highly improbable and suspicious chain of
    events.
  answer_sources:
  - Process Execution Events
  - Process execution logs, including full command-line arguments, from all company-managed
    macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL user_command_sequences with HMM | FOR new_command_sequence containing
      'sudo launchctl load' | CALCULATE probability_score | ALERT if score is below
      anomaly_threshold
- question: Has a file been created in the root-only `/Library/LaunchDaemons/` directory
    by a non-root process?
  context: The `/Library/LaunchDaemons/` directory should only be writable by the
    root user (UID 0). A file creation event in this directory initiated by a process
    with an effective user ID (EUID) other than 0 is a strong indicator of a successful
    privilege escalation exploit. This question directly targets the detection of
    a permission bypass vulnerability.
  answer_sources:
  - File Creation Events
  - File creation logs for the `/Library/LaunchDaemons/` directory on all macOS endpoints,
    ensuring logs contain the user context of the writing process.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_creation_events WHERE file_path='/Library/LaunchDaemons/*'
      AND process_euid != 0
- question: Was a file in `/Library/LaunchDaemons/` written by an unusual parent process?
  context: Legitimate writes to `/Library/LaunchDaemons/` are typically performed
    by a small set of known parent processes, such as `installer` or `system_installd`.
    If a file is written to this directory by a process that is statistically rare
    or has never been seen before (e.g., `bash`, `python`, or a user application),
    it suggests an exploit or unauthorized administrative action.
  answer_sources:
  - File Creation Events
  - File creation logs for the `/Library/LaunchDaemons/` directory on all macOS endpoints,
    ensuring logs contain the user context of the writing process.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_creation_events WHERE file_path='/Library/LaunchDaemons/*'
      | BASELINE parent_process_name | ALERT if current_parent_process_name is anomalous
      or has low prevalence
- question: Does the process lineage leading to a write in `/Library/LaunchDaemons/`
    appear anomalous?
  context: This question uses graph-based analysis to detect exploit chains. A legitimate
    write to `/Library/LaunchDaemons/` will have a predictable process ancestry. A
    malicious write, however, might originate from an unusual source, like a process
    spawned from a web browser or email client. By modeling normal process graphs,
    we can detect these anomalous chains that indicate a likely exploit.
  answer_sources:
  - File Creation Events
  - File creation logs for the `/Library/LaunchDaemons/` directory on all macOS endpoints,
    ensuring logs contain the user context of the writing process.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL normal_process_lineage_graphs ending in write_to_launchdaemons |
      FOR new_write_event | CONSTRUCT its process_lineage_graph | COMPARE to model
      | ALERT if graph is a structural anomaly
- question: Is a process launched by `launchd` with root privileges performing suspicious
    post-escalation activities?
  context: After gaining root via a Launch Daemon, an adversary will often perform
    actions to solidify their access, such as creating new admin users or disabling
    security controls. This question creates a correlation rule to detect when a root
    process spawned by `launchd` (PID 1) quickly executes sensitive commands like
    `dscl` (to manage users) or `spctl` (to manage Gatekeeper).
  answer_sources:
  - Process Execution Events
  - Process execution logs, including parent process and user context, on all company-managed
    macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: 'SEARCH for process (P1) WHERE parent_process=''launchd'' AND user_id=0.
      CORRELATE with child process (P2) of P1 within 5 minutes executing commands
      like ''dscl . -create'', ''spctl --master-disable''. ALERT on correlation.'
- question: Is a root process spawned by `launchd` executing administrative commands
    that are statistical outliers?
  context: While legitimate daemons may run administrative commands, their usage patterns
    are often predictable. This question establishes a baseline for the normal frequency
    and argument patterns of commands like `dscl` and `sysadminctl`. An execution
    of one of these commands by a `launchd`-spawned process that deviates significantly
    from this baseline should be investigated as a potential sign of malicious post-escalation
    behavior.
  answer_sources:
  - Process Execution Events
  - Process execution logs, including parent process and user context, on all company-managed
    macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH for admin_commands (`dscl`, `sysadminctl`) executed by process with
      parent='launchd' | BASELINE frequency and argument_patterns | ALERT if current
      execution is a statistical outlier
- question: Can a sequence of commands executed by a `launchd`-spawned root process
    be classified as malicious?
  context: This question uses a supervised learning model to distinguish between
    benign and malicious sequences of actions performed by a daemon. By training
    a sequence-aware model on labeled data, we can automatically classify new command
    sequences. A sequence that involves, for example, modifying system files and then
    creating a new user account would be flagged as malicious, even if the individual
    commands are legitimate.
  answer_sources:
  - Process Execution Events
  - Process execution logs, including parent process and user context, on all company-managed
    macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR root_process from 'launchd' | CAPTURE sequence_of_executed_commands
      | PREDICT classification using trained_sequence_model | ALERT if prediction
      is 'malicious'