name: T1027.003: Steganography
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: >
  This playbook helps identify if an adversary is using steganography to hide malicious data within benign-looking files (like images, audio, or video) to evade detection. It focuses on detecting the tools, artifacts, and behaviors associated with this technique. This includes looking for known steganography tool file hashes, suspicious command-line arguments, anomalous process execution chains involving media files, statistical abnormalities in file properties (like high entropy or unusual file sizes), and unusual network traffic patterns related to media file transfers.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known steganography tool hashes or campaign-specific file hashes present in process creation events or network file transfers?
    context: >
      Matching file hashes against a known-bad list is a high-fidelity method for detecting the presence of specific steganography tools or file artifacts from confirmed threat campaigns. An alert on a hash match provides a strong signal that steganographic activity is occurring or being staged.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Endpoints (workstations, servers)
      - Network egress/ingress points
      - Internal file shares
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          hashes_to_check = threat_intel_feed("steganography_tools", "campaign_iocs")
          process_events = search(source="WinEventLog:Security", EventID=4688) OR search(source="Sysmon", EventID=1)
          network_files = search(source="zeek:files.log")
          all_file_hashes = extract_hashes(process_events, network_files)
          matched_hashes = all_file_hashes INTERSECT hashes_to_check
          IF matched_hashes IS NOT EMPTY:
            CREATE_ALERT(severity="high", reason="Known steganography tool hash detected")
  - question: Are there any files with names matching known steganography tools but with unknown, low-prevalence hashes in the environment?
    context: >
      Adversaries may modify or recompile known open-source steganography tools to evade basic hash-based detection. This question helps identify such potentially customized tools by looking for files that have the name of a steganography tool (e.g., 'steghide.exe') but a hash that is not on a known-good or known-bad list and is present on only a very small number of systems.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Endpoints (workstations, servers)
      - Network egress/ingress points
      - Internal file shares
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          known_tool_names = ["steghide.exe", "openstego.jar", ...]
          all_files = search_files(filenames=known_tool_names)
          FOR file in all_files:
            IF file.hash is NOT in threat_intel_feed:
              prevalence = count_hosts_with_hash(file.hash)
              IF prevalence < 5:
                FLAG_FOR_INVESTIGATION(file, reason="Low prevalence steganography tool name with unknown hash")
  - question: Can a machine learning model identify new executables or media files that are likely related to steganography based on their metadata?
    context: >
      This question explores a proactive, predictive approach to detection. By training a classification model on features like file size, entropy, PE header data, and MIME types, it's possible to score new files for their likelihood of being a steganography tool or a carrier file. This helps uncover novel or unknown tools that other signature-based methods would miss.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek files.log
      - Endpoints (workstations, servers)
      - Network egress/ingress points
      - Internal file shares
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          model = load_ml_model("steganography_classifier")
          FOR each new_file in (process_events, network_transfers):
            features = extract_features(file_metadata, entropy, PE_headers, MIME_type)
            probability_score = model.predict(features)
            IF probability_score > 0.9:
              FLAG_FOR_ANALYSIS(new_file, score=probability_score)
  - question: Do any process command-line arguments contain suspicious combinations of keywords, flags, and media file extensions indicative of steganography tools?
    context: >
      Steganography tools are often executed via the command line with specific arguments to embed or extract data. This question aims to find these executions by searching for command lines that combine steganography-related keywords (like 'embed', 'hide'), tool-specific flags (like '-cf', '-ef'), and media file types (.png, .jpg), which together form a strong indicator of steganography in use.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Application servers
      - Developer workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          process_events = search(source="WinEventLog:Security", EventID=4688) OR search(source="Sysmon", EventID=1)
          FOR event in process_events:
            command_line = event.CommandLine
            IF regex_match(command_line, pattern="keywords AND flags AND media_extensions"):
              CREATE_ALERT(event, reason="Suspicious command line indicative of steganography tool")
  - question: Are there any process command-line executions with unusually high entropy, especially those involving media files?
    context: >
      Adversaries may obfuscate or encode commands passed to steganography tools to hide their intent. High entropy in a command line can indicate the presence of such encoded data. By baselining the normal entropy for common processes (like powershell.exe) and flagging significant deviations, we can detect potentially malicious and obfuscated commands that might otherwise be missed.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Application servers
      - Developer workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each process_name in (powershell.exe, cmd.exe, ...):
            baseline_entropy = calculate_baseline_entropy(process_name)
          FOR each new_process_event:
            command_entropy = calculate_shannon_entropy(event.CommandLine)
            IF command_entropy > baseline_entropy[event.ProcessName].percentile(99):
              IF contains_media_file_extension(event.CommandLine):
                FLAG_FOR_INVESTIGATION(event, reason="High entropy command line with media file")
  - question: Can an NLP model detect anomalous command-line structures that might indicate obfuscated steganography tool usage?
    context: >
      This question proposes using a more advanced machine learning approach (NLP) to understand the 'normal' grammar of command lines within an environment. By training a model on a large corpus of benign commands, it can identify new commands that are structurally anomalous or outliers, even if they don't contain specific known-bad keywords. This is effective against novel or highly obfuscated command-line techniques.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Application servers
      - Developer workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          model = load_nlp_model("commandline_anomaly_detector")
          FOR each new_process_event:
            command_line = event.CommandLine
            anomaly_score = model.score(command_line)
            IF anomaly_score is high AND contains_media_file_path(command_line):
              FLAG_FOR_INVESTIGATION(event, reason="Anomalous command line structure involving media file")
  - question: Have any high-risk process chains, such as an Office application spawning a script that accesses a media file and then makes a network connection, been observed?
    context: >
      Adversaries often chain processes together to execute their attacks, for example, using a malicious macro in a Word document to launch PowerShell, which then performs the malicious action. This question focuses on detecting specific, predefined high-risk sequences where a non-standard parent process (like an Office app or script engine) accesses a media file and then initiates a network connection, a strong indicator of data exfiltration via steganography.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations
      - Internal web servers hosting user-generated content
      - Developer environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          process_events = search(source="Sysmon", EventID=1)
          file_events = search(source="Sysmon", EventID=11)
          network_events = search(source="Sysmon", EventID=3) OR search(source="zeek:conn.log")
          CORRELATE process_events, file_events, network_events by host and time window (<60s)
          IF chain_matches("OfficeApp -> ScriptingEngine -> MediaFileAccess -> NetworkTool -> ExternalIP"):
            CREATE_ALERT(chain_events, reason="High-risk process chain for steganography detected")
  - question: Are there any rare or statistically improbable process parent-child relationships involving media file access and subsequent network activity?
    context: >
      Beyond predefined chains, this question seeks to find any anomalous process lineage by establishing a baseline of all normal parent-child process relationships in the environment. Any new process chain that has a very low probability of occurring naturally, especially if it involves media file access followed by a network connection, is flagged as suspicious. This helps find novel attack paths.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations
      - Internal web servers hosting user-generated content
      - Developer environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          baseline = build_markov_chain_model("parent_child_process_relationships")
          FOR each new_process_chain:
            IF chain involves media_file_access AND network_connection:
              chain_probability = baseline.calculate_probability(chain)
              IF chain_probability < 0.01:
                FLAG_FOR_INVESTIGATION(chain, reason="Statistically rare process chain detected")
  - question: Does graph-based analysis of process, file, and network events reveal anomalous subgraphs indicative of steganography-related activity?
    context: >
      This question involves modeling endpoint and network activity as a large graph, where entities like processes, files, and IPs are nodes and their interactions are edges. By training a model to recognize normal patterns (subgraphs), it can then identify new, anomalous structures as they appear, such as a scripting engine node suddenly connecting to a media file node and then to a new external IP node. This provides a holistic view of suspicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 3
      - Zeek conn.log
      - User workstations
      - Internal web servers hosting user-generated content
      - Developer environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          graph_model = load_graph_anomaly_model()
          STREAM events (process, file, network) into graph_model
          anomalous_subgraphs = graph_model.detect_anomalies()
          FOR subgraph in anomalous_subgraphs:
            IF subgraph matches pattern("script -> media_file -> external_ip"):
              FLAG_FOR_INVESTIGATION(subgraph, reason="Anomalous activity graph detected")
  - question: Do any files at rest or in transit trigger YARA rules designed to detect specific steganographic signatures or artifacts?
    context: >
      YARA is a powerful tool for creating signatures to identify malware and other malicious files. This question focuses on applying YARA rules specifically crafted to find steganographic artifacts, such as data hidden after the end of an image file (e.g., after a PNG IEND chunk) or the magic bytes of steganography tools embedded within other files. A YARA match is a strong indicator of steganography.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress/ingress points
      - Critical file shares (e.g., SharePoint, network drives)
      - Web application servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          files = get_files_from("Zeek:files.log") AND get_files_from("Sysmon:EventID=11")
          FOR file in files:
            yara_matches = scan_with_yara(file, ruleset="steganography")
            IF yara_matches IS NOT EMPTY:
              CREATE_ALERT(file, matches=yara_matches)
  - question: Are there any media files with byte entropy values that are statistical outliers for their specific file type?
    context: >
      Embedding data into a media file often increases its randomness, or entropy. Compressed file formats (like JPG) already have high entropy, but uncompressed or losslessly compressed formats do not. By calculating the entropy of all media files and comparing it to the normal baseline for that file type (e.g., all PNGs), we can identify files with abnormally high entropy, which may indicate they contain hidden data.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress/ingress points
      - Critical file shares (e.g., SharePoint, network drives)
      - Web application servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each file_type in (png, bmp, wav, ...):
            baseline = calculate_entropy_baseline(file_type)
          FOR each new_media_file:
            entropy = calculate_byte_entropy(file)
            threshold = baseline[file.type].mean + 3 * baseline[file.type].stddev
            IF entropy > threshold:
              FLAG_FOR_REVIEW(file, reason="Anomalously high byte entropy for file type")
  - question: Can a multi-feature anomaly detection model identify media files that are anomalous in terms of both file size (relative to metadata) and byte entropy?
    context: >
      This question combines multiple statistical properties to create a more robust detection method. A file used for steganography might have both a slightly larger size than expected for its dimensions/bitrate and a higher entropy. An anomaly detection model like Isolation Forest can consider these features together to find files that are outliers across multiple dimensions, reducing false positives from single-feature analysis.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress/ingress points
      - Critical file shares (e.g., SharePoint, network drives)
      - Web application servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          model = load_ml_model("media_file_anomaly_detector")
          FOR each new_media_file:
            metadata = extract_structural_metadata(file)
            predicted_size = predict_file_size(metadata)
            size_error = file.size - predicted_size
            entropy = calculate_byte_entropy(file)
            features = [size_error, entropy]
            IF model.predict(features) == "anomaly":
              FLAG_FOR_INVESTIGATION(file, reason="Multi-feature anomaly detected")
  - question: Are there any media file transfers occurring to or from destinations listed on threat intelligence feeds or known to be newly registered domains?
    context: >
      Adversaries often use newly registered domains (NRDs) or infrastructure known to be malicious for command and control or data exfiltration. This question provides a high-fidelity detection method by correlating network logs of media file transfers with threat intelligence feeds. A match indicates that a potentially sensitive file is being sent to or received from a suspicious destination.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek files.log
      - Network egress/ingress points (firewalls, proxies)
      - VPN concentrators
      - DNS servers
      - User subnets
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          bad_destinations = threat_intel_feed("bad_ips", "bad_domains", "NRDs")
          media_transfers = search(source="zeek:http.log" OR source="zeek:files.log")
          FOR transfer in media_transfers:
            IF transfer.destination in bad_destinations:
              CREATE_ALERT(severity="high", transfer, reason="Media file transfer to known bad destination")
  - question: Has any user or host exhibited a sudden spike in the volume or frequency of media file transfers, or transferred files to geographically rare destinations?
    context: >
      This question focuses on behavioral anomaly detection at the user/host level. By establishing a baseline of what is normal for each entity, we can detect significant deviations. A sudden, large increase in the amount of media files being transferred, or a transfer to a country that the user has never interacted with before, could be a sign of data exfiltration using steganography.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek files.log
      - Network egress/ingress points (firewalls, proxies)
      - VPN concentrators
      - DNS servers
      - User subnets
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user/host:
            baseline = build_30day_baseline(user, metrics=["bytes_per_hour", "frequency", "dest_countries"])
          FOR each new_media_transfer:
            IF transfer.bytes > baseline.bytes_per_hour.percentile(95):
              CREATE_ALERT(transfer, reason="Volume spike in media file transfer")
            IF transfer.dest_country NOT IN baseline.dest_countries:
              CREATE_ALERT(transfer, reason="Media file transfer to rare destination")
  - question: Does a time-series analysis of network traffic show any uncharacteristic bursts in media file data volume for any user, suggesting potential data exfiltration?
    context: >
      This question applies more advanced time-series modeling (like ARIMA or LSTM) to network traffic data. These models can learn complex temporal patterns, including seasonality (e.g., daily/weekly cycles), and can forecast expected traffic volume. An alert is generated when the actual observed traffic significantly exceeds the model's prediction, indicating a burst of activity that is anomalous even when accounting for normal fluctuations.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek files.log
      - Network egress/ingress points (firewalls, proxies)
      - VPN concentrators
      - DNS servers
      - User subnets
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user:
            model = train_timeseries_model(user, metric="media_bytes_per_hour")
          FOR each hour:
            FOR each user:
              actual_volume = get_actual_volume(user, current_hour)
              predicted_volume, confidence_interval = model.predict(current_hour)
              IF actual_volume > confidence_interval.upper_bound:
                CREATE_ALERT(user, reason="Time-series anomaly in media file volume detected")