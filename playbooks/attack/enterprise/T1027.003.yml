name: T1027.003: Steganography
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting the use of steganography, a defense evasion
  technique where an adversary hides malicious data within legitimate-looking files
  like images, audio, or video. The goal is to answer the primary investigative requirement:
  "Is the adversary using steganography to evade defenses?". Detection strategies
  include matching file hashes against known steganography tools, analyzing command-line
  arguments for suspicious patterns, identifying anomalous process chains involving
  media files and network connections, examining statistical properties of files (like
  entropy and size) for deviations, and monitoring network traffic for unusual patterns
  of media file transfers.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are file hashes observed on endpoints or the network associated with
    known steganography tools or threat campaigns?
  context: Adversaries often use publicly available or known steganography tools.
    Matching the hash (MD5, SHA256) of a file seen in process execution or a network
    transfer against a threat intelligence database of known tool hashes is a direct
    and high-confidence method to detect their presence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Endpoints (workstations, servers)
  - Network egress/ingress points
  - Internal file shares
  range: last 90 days
  queries:
  - 'Query: Search process and file transfer logs for file hashes. Compare these
    hashes against a curated list of known steganography tool hashes and campaign-specific
    IOCs.'
- question: Are there any rare or low-prevalence files on the network with filenames
    matching known steganography tools?
  context: To evade simple hash-based detection, adversaries may slightly modify
    known tools, which changes the file hash. This question aims to find these modified
    tools by first identifying files by suspicious names (e.g., 'steghide.exe') and
    then determining if their hash is rare within the enterprise, suggesting it's
    not a standard, sanctioned binary.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoints (workstations, servers)
  - Network egress/ingress points
  - Internal file shares
  range: last 90 days
  queries:
  - 'Query: Identify all files with names matching known steganography tools. For
    those with unknown hashes, calculate the prevalence of each hash across all hosts.
    Flag hashes found on a very small number of systems for review.'
- question: Can we use machine learning to predict which files are likely steganography
    tools based on their metadata?
  context: This question explores a proactive, ML-based approach to detection. By
    training a classification model on various file features (size, entropy, PE header
    data, MIME type, filename characteristics), the model can score new and unknown
e-    files for their likelihood of being a steganography tool, helping to surface
    suspicious files that do not match any known signatures.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek files.log
  - Endpoints (workstations, servers)
  - Network egress/ingress points
  - Internal file shares
  range: last 90 days
  queries:
  - 'Query: Extract metadata features from newly observed executable and media files.
    Input these features into a trained classification model to generate a probability
    score. Flag files with high scores for analysis.'
- question: Are there any command-line executions that contain keywords, flags, and
    file types characteristic of steganography tools?
  context: Steganography tools are typically executed from the command line with
    specific arguments to embed or extract data (e.g., 'embed', 'extract', '-cf',
    '-ef') and a target media file (e.g., '.png', '.jpg'). Searching process command-line
    logs for combinations of these indicators is a direct method for detecting the
    active use of such tools.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoints (workstations, servers)
  - Application servers
  - Developer workstations
  range: last 90 days
  queries:
  - 'Query: Search all process command-line argument logs using regular expressions
    to find patterns that combine steganography keywords, tool-specific flags, and
    media file extensions in a single command.'
- question: Are there any command-line executions with unusually high entropy, which
    might indicate obfuscation or encoded commands related to steganography?
  context: To evade detection, adversaries may obfuscate or encode the commands passed
    to scripting engines or steganography tools. This often results in command-line
    strings with higher-than-normal character randomness (entropy). By establishing
    a baseline entropy for each legitimate process, we can flag executions with abnormally
    high entropy as potentially malicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoints (workstations, servers)
  - Application servers
  - Developer workstations
  range: last 90 days
  queries:
  - 'Query: For each process execution, calculate the Shannon entropy of the command-line
    arguments. Compare this value to a pre-calculated baseline for that specific
    process name. Flag any execution where entropy exceeds a high-percentile threshold.'
- question: Can an NLP model identify anomalous command-line structures that might
    represent the execution of steganography tools?
  context: This question proposes using an advanced anomaly detection method to find
    novel threats. By training a model (like a one-class SVM or autoencoder) on the
    "normal" grammar and structure of millions of benign command lines from the environment,
    it can identify new commands that are statistical outliers, which could represent
    unusual steganography tool usage.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoints (workstations, servers)
  - Application servers
  - Developer workstations
  range: last 90 days
  queries:
  - 'Query: Feed all new command-line strings into a trained NLP outlier detection
    model. Flag any command that the model identifies as anomalous or having a high
    reconstruction error for further investigation.'
- question: Are there suspicious process chains where a non-media process accesses
    a media file and then spawns a process that makes a network connection?
  context: Adversaries often chain processes to execute their attack. A common steganography
    pattern is an Office application spawning a script (e.g., powershell.exe), which
    accesses a media file and then spawns a tool (e.g., curl.exe) to exfiltrate it.
    Monitoring for these specific, high-risk sequences of events is key to detection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - User workstations
  - Internal web servers hosting user-generated content
  - Developer environments
  range: last 90 days
  queries:
  - 'Query: Correlate process creation, file access, and network connection logs
    by joining on hostname and a tight time window (<60s) to identify and alert on
    predefined malicious process chains (e.g., Office -> Script -> Media File Access
    -> Network Tool).'
- question: Are there any rare or statistically improbable process parent-child relationships
    involving media file access and network activity?
  context: Beyond looking for predefined malicious chains, we can statistically
    model all parent-child process relationships to establish a baseline of normal
    activity. A process chain that is extremely rare according to this model (e.g.,
    has a very low transition probability) is highly suspicious and could indicate
    steganography or other malicious TTPs.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - User workstations
  - Internal web servers hosting user-generated content
  - Developer environments
  range: last 90 days
  queries:
  - 'Query: Build a probability model (e.g., Markov chain) of all parent-child process
    transitions. Score new process chains involving media file access and network
    connections. Flag chains with an overall probability score below a low-percentile
    threshold.'
- question: Can graph-based analysis reveal anomalous relationships between processes,
    files, and network destinations that indicate steganographic activity?
  context: This question involves modeling system activity as a graph, where hosts,
    processes, and files are nodes, and events (like process creation or file access)
    are edges. Graph-based anomaly detection algorithms can then find unusual subgraphs,
    such as a scripting engine node connecting to a media file node which then connects
    to a new external IP node, a strong indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 3
  - Zeek conn.log
  - User workstations
  - Internal web servers hosting user-generated content
  - Developer environments
  range: last 90 days
  queries:
  - 'Query: Represent system events as a temporal graph. Use a graph anomaly detection
    model to identify new event sequences that form anomalous subgraphs, and flag
    them for review.'
- question: Do any media files on the network or endpoints contain specific signatures
    or artifacts associated with known steganography techniques?
  context: Some steganography methods leave tell-tale signs, like data appended after
    a file's logical end-of-file marker (e.g., after a PNG IEND chunk) or embedded
    magic bytes of known tools. YARA rules are an excellent way to scan files at rest
    and in transit to find these low-level technical signatures.
  answer_sources:
  - Zeek files.log
  - Sysmon Event ID 11
  - Network egress/ingress points
  - Critical file shares (e.g., SharePoint, network drives)
  - Web application servers
  range: last 90 days
  queries:
  - 'Query: Scan all files extracted from network traffic and files created on disk
    with a comprehensive YARA ruleset designed to detect steganographic artifacts
    and tool signatures. Alert on any match.'
- question: Are there any media files with unusually high byte entropy compared to
    a baseline for their file type?
  context: Embedding encrypted or compressed data within a media file typically increases
    its overall byte randomness (entropy). By establishing a normal entropy baseline
    (mean and standard deviation) for each legitimate file type (e.g., PNG, JPG, WAV),
    we can flag any file with a statistically significant high entropy as a potential
    carrier of hidden data.
  answer_sources:
  - Zeek files.log
  - Sysmon Event ID 11
  - Network egress/ingress points
  - Critical file shares (e.g., SharePoint, network drives)
  - Web application servers
  range: last 90 days
  queries:
  - 'Query: For all media files, calculate the byte entropy. Compare the entropy
    to a running baseline for that file''s MIME type. Flag files with entropy exceeding
    a dynamic threshold (e.g., mean + 3 standard deviations).'
- question: Can a multi-feature machine learning model identify media files that
    are anomalous in terms of both file size and other properties?
  context: This question proposes a more robust detection method. A file with hidden
    data might have high entropy and an unusual size for its given metadata (e.g.,
    an image that is too large for its dimensions). A model that uses multiple features,
    such as the error from a predicted file size and the byte entropy, can more accurately
    identify suspicious media files.
  answer_sources:
  - Zeek files.log
  - Sysmon Event ID 11
  - Network egress/ingress points
  - Critical file shares (e.g., SharePoint, network drives)
  - Web application servers
  range: last 90 days
  queries:
  - 'Query: For media files, predict the expected file size based on metadata (e.g.,
    image dimensions). Use the prediction error (residual) and other features like
    entropy as inputs to an unsupervised anomaly detection model (e.g., Isolation
    Forest) to flag outliers.'
- question: Are media files being transferred to or from destinations known to be
    malicious or suspicious?
  context: A simple and effective check is to monitor for media file transfers to
    or from destinations on threat intelligence feeds, such as known C2 servers, or
    to newly registered domains (NRDs), which are frequently used in attacks. A match
    provides a strong signal of potential data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Zeek files.log
  - Network egress/ingress points (firewalls, proxies)
  - VPN concentrators
  - DNS servers
  - User subnets
  range: last 90 days
  queries:
  - 'Query: Monitor network logs for media file transfers. Correlate the destination
    IP, domain, and ASN against threat intelligence blocklists and lists of newly
    registered domains. Alert on any match.'
- question: Has any user or host exhibited a sudden, anomalous spike in the volume
    of media file transfers or transfers to unusual geographic locations?
  context: Adversaries exfiltrating data via steganography can cause a noticeable change
    in a user's or host's normal network behavior. By baselining activity (e.g., volume/frequency
    of media files transferred, destination countries), we can detect significant
    deviations, such as a sudden surge in transfers or communication with a country
    the user has never sent files to before.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Zeek files.log
  - Network egress/ingress points (firewalls, proxies)
  - VPN concentrators
  - DNS servers
  - User subnets
  range: last 90 days
  queries:
  - 'Query: For each user/host, create a 30-day rolling baseline of media file transfer
    metrics (bytes/hour, frequency, destination countries/ASNs). Alert when current
    activity exceeds a high percentile of the baseline.'
- question: Can a time-series model forecast a user's expected media file transfer
    volume and detect significant deviations that might indicate data exfiltration?
  context: This question applies time-series analysis to network traffic. By modeling
    the historical, cyclical patterns of a user's media file transfer volume, we can
    predict their expected traffic for a given time period. If the actual observed
    traffic significantly exceeds the model's prediction, it could signify a large-scale
    data exfiltration event disguised as normal activity.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Zeek files.log
  - Network egress/ingress points (firewalls, proxies)
  - VPN concentrators
  - DNS servers
  - User subnets
  range: last 90 days
  queries:
  - 'Query: For each user, train a time-series model (e.g., ARIMA, LSTM) on their
    media file transfer volume. Alert if the actual observed volume significantly
    exceeds the model''s forecast confidence interval.'