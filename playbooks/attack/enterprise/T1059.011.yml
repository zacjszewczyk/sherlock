name: T1059.011: Lua
id: a8f5e1b2-9c7d-4a3e-8b6f-0d9c8e7b6a5a
description: This playbook helps investigate whether an adversary has executed commands or scripts using a Lua interpreter. It focuses on detecting suspicious process behavior, such as Lua executions followed by outbound network connections to malicious destinations, command-line arguments with high entropy or suspicious function calls, spawning from unusual parent processes like Microsoft Office applications, execution from temporary or non-standard directories, and the subsequent spawning of command shells or system discovery tools.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a Lua process execution followed by a network connection to a known malicious indicator?
    context: This question aims to detect when a Lua script, potentially malicious, establishes a connection to a command-and-control (C2) server. Correlating process execution with outbound network traffic to known threat intelligence indicators is a high-fidelity method for identifying compromised hosts.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Application servers (e.g., those running web applications with Lua components)
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events WHERE process_name IN ('lua.exe', 'lua5.1.exe') | JOIN network_connection_logs ON hostname WITHIN 5 minutes | LOOKUP threat_intel_feed ON destination_ip OR destination_domain
  - question: Following a Lua execution, did the host connect to a new or rarely accessed destination?
    context: Adversaries often use new domains or IPs for C2 infrastructure. This question helps identify anomalous network behavior by comparing post-execution connections against a historical baseline of normal activity for the host. A connection to a destination that is statistically rare for that specific host is a strong indicator of potential C2 communication.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Application servers (e.g., those running web applications with Lua components)
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events WHERE process_name IN ('lua.exe', 'lua5.1.exe') | FOR EACH event, GET hostname | SEARCH network_connections FROM hostname in last 30 days, CREATE baseline of destination frequencies | COMPARE recent connections post-Lua-exec against baseline | ALERT if destination frequency < 1st percentile
  - question: Did the network traffic from a host after a Lua execution deviate from its normal beaconing behavior?
    context: C2 channels often exhibit regular, 'heartbeat'-like beaconing patterns that differ from normal user or system traffic. This question uses time-series analysis and anomaly detection to identify subtle changes in connection frequency, data volume, or destination port usage that could signify the activation of a malicious implant executed via Lua.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Application servers (e.g., those running web applications with Lua components)
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: FOR EACH host, MODEL normal network traffic patterns (frequency, volume, port entropy) | AFTER Lua execution event on a host, MONITOR subsequent traffic | APPLY anomaly detection model (e.g., Isolation Forest) | ALERT on significant deviation from baseline
  - question: Was a Lua interpreter executed with suspicious command-line arguments, such as remote execution functions or Base64 patterns?
    context: Adversaries frequently embed malicious commands directly into the command line, often using specific functions for execution ('os.execute'), networking ('require("socket")'), or obfuscation (Base64). This question uses pattern matching to find these high-confidence indicators of malicious Lua usage directly in process creation events.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices and Application servers where Lua interpreters are installed.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events WHERE process_name IN ('lua.exe', 'luac.exe', 'lua5.1.exe') | FILTER command_line CONTAINS regex patterns ('-e', 'os.execute', 'io.popen', 'http://', base64_pattern) | ALERT on match
  - question: Did a Lua execution involve command-line arguments with unusually high entropy?
    context: High Shannon entropy in command-line arguments is a strong indicator of obfuscation, such as packed or encrypted scripts passed directly to the interpreter. This question helps detect these obfuscated payloads by establishing a baseline of normal command-line complexity and flagging statistical outliers that exceed it.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices and Application servers where Lua interpreters are installed.
    range: last 90 days
    queries:
      - pseudocode: SEARCH Lua execution events | CALCULATE Shannon entropy of command_line | COMPARE entropy to 30-day baseline for all Lua executions | ALERT if entropy > 95th percentile
  - question: Can a machine learning model classify a given Lua execution as malicious based on its command-line features?
    context: This question operationalizes threat detection by using a trained machine learning model to automatically classify Lua command lines. By engineering features like argument length, character frequency, and entropy, the model can learn to distinguish between benign and malicious usage patterns in real-time, enabling faster and more scalable detection.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices and Application servers where Lua interpreters are installed.
    range: last 90 days
    queries:
      - pseudocode: ON new Lua execution event | EXTRACT features from command_line (length, char_frequency, n-grams, entropy) | APPLY pre-trained classification model (e.g., Random Forest) | ALERT if classified as malicious
  - question: Was a Lua interpreter spawned by an unusual or unauthorized parent process?
    context: Legitimate Lua usage is often predictable, with the interpreter being launched by specific applications or services. This question aims to detect when Lua is launched by an unexpected parent, such as a Microsoft Office application or web browser, which is a common pattern in phishing attacks where a malicious document or script triggers the execution.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - servers running Microsoft Office or web browsers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH Lua process creation events | EXTRACT parent_process_name | COMPARE parent_process_name against allowlist | ALERT if parent_process_name is NOT in allowlist OR is in a denylist (e.g., 'winword.exe', 'excel.exe')
  - question: Did a statistically rare parent-child process relationship involving a Lua interpreter occur?
    context: Instead of a static allowlist, this question uses historical data to statistically determine what constitutes a "normal" parent for a Lua process in the environment. It flags executions where the parent-child pairing is novel or extremely infrequent, which can uncover sophisticated or targeted attacks that use new execution chains.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - servers running Microsoft Office or web browsers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH all parent-child process relationships involving Lua over 30 days, CREATE frequency table | FOR new Lua execution, CHECK frequency of its parent-child pair | ALERT if pair is new or frequency < 0.1%
  - question: Using a graph-based model of process relationships, was a Lua execution identified as a topological anomaly?
    context: This question advances the parent-child analysis by modeling the entire ecosystem of process creations as a graph. This allows for more sophisticated anomaly detection, identifying not just rare direct parents but also unusual chains of execution leading to a Lua process. It can uncover complex attack paths that might be missed by simple frequency analysis.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - VDI instances
      - servers running Microsoft Office or web browsers.
    range: last 90 days
    queries:
      - pseudocode: MODEL all process relationships as a directed graph | FOR new Lua execution event, ANALYZE its edge in the graph | USE graph anomaly detection to score the edge (e.g., low betweenness centrality) | ALERT on anomalous scores
  - question: Was a Lua script executed from a non-standard or temporary directory?
    context: Adversaries often drop malicious scripts into world-writable or temporary directories (%TEMP%, %APPDATA%, C:\Users\Public) to ensure execution permissions and evade detection. This question focuses on identifying Lua script executions originating from these high-risk locations, which are rarely used for legitimate application scripts.
    answer_sources:
      - Windows Event ID 4688
      - User-writable directories on endpoints and servers (e.g., C:\Users\, C:\ProgramData\, C:\Perflogs\, %TEMP%).
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation events WHERE command_line contains '.lua' | EXTRACT file_path from command_line | USE regex to check if path is in a high-risk directory ('%TEMP%', '%APPDATA%', etc.) | ALERT on match
  - question: Was a Lua script executed from a statistically rare directory path?
    context: This question moves beyond a static list of "bad" directories to a data-driven approach. By baselining all directory locations from which Lua scripts are normally executed, it can flag executions from any location that is statistically an outlier, providing a more comprehensive and environment-specific detection method.
    answer_sources:
      - Windows Event ID 4688
      - User-writable directories on endpoints and servers (e.g., C:\Users\, C:\ProgramData\, C:\Perflogs\, %TEMP%).
    range: last 90 days
    queries:
      - pseudocode: BASELINE all Lua script execution paths over 30 days and calculate frequency for each directory | FOR new Lua script execution, CHECK frequency of its directory path | ALERT if path frequency < 5th percentile
  - question: Did a Lua script execution path fall into an anomalous cluster of directory locations?
    context: This question uses unsupervised machine learning to group similar execution paths together. Legitimate scripts tend to form large, dense clusters (e.g., C:\Program Files\...). Malicious scripts dropped in unusual or randomized paths will form small, sparse, or distant clusters, which can be automatically identified by algorithms like DBSCAN.
    answer_sources:
      - Windows Event ID 4688
      - User-writable directories on endpoints and servers (e.g., C:\Users\, C:\ProgramData\, C:\Perflogs\, %TEMP%).
    range: last 90 days
    queries:
      - pseudocode: EXTRACT all Lua script execution paths | ENGINEER features from paths (depth, entropy, keywords) | APPLY clustering algorithm (e.g., DBSCAN) | ALERT on paths belonging to small, sparse, or distant clusters
  - question: Did a process spawned by a Lua interpreter execute a shell or a system discovery command?
    context: A common next step after initial execution via a script is to open an interactive shell (cmd.exe, powershell.exe) or run discovery commands (whoami, ipconfig) to gather information about the compromised system. This question looks for this specific post-exploitation behavior by tracking the children of Lua processes.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, including workstations and servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH for child processes whose parent_process is a Lua interpreter | CHECK if child_process_name is in denylist ('cmd.exe', 'powershell.exe', 'whoami.exe', 'net.exe', etc.) | ALERT on match
  - question: Did a Lua process spawn a set of child processes that is anomalous compared to its historical behavior?
    context: Legitimate applications using Lua will typically spawn a predictable set of child processes. This question establishes a baseline of this normal "downstream" activity for each Lua process. It then flags any new execution that spawns a set of children that significantly differs from this baseline, indicating a potential hijacking or malicious use of the legitimate process.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, including workstations and servers.
    range: last 90 days
    queries:
      - pseudocode: FOR each Lua process, BASELINE its typical child processes over 30 days | FOR new Lua process instance, get its child processes | CALCULATE Jaccard similarity between new set and baseline set | ALERT if similarity < 0.5
  - question: Did a process execution chain originating from a Lua process have a low probability of occurring based on a historical model?
    context: This question models entire sequences of process creations as a probabilistic chain (a hidden Markov model). It learns the normal transition probabilities between processes based on historical data. This allows it to flag not just a single anomalous parent-child relationship, but an entire sequence of executions that is statistically unlikely, such as lua.exe -> cmd.exe -> whoami.exe, even if individual parts of the chain have been seen before in different contexts.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices, including workstations and servers.
    range: last 90 days
    queries:
      - pseudocode: TRAIN a hidden Markov model on process execution sequences from historical data | FOR a new sequence starting with a Lua process, CALCULATE its probability under the model | ALERT if probability is below a low threshold