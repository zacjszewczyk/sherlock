name: T1621: Multi-Factor Authentication Request Generation
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: "This playbook helps investigate whether an adversary is attempting to bypass multi-factor authentication by generating excessive requests to fatigue the user. Adversaries may use this technique by sending a high volume of MFA push notifications to a target's mobile device, hoping the user will eventually accept one by mistake or out of annoyance. Indicators of this activity include login attempts from malicious or unusual IP addresses, the use of non-standard client User-Agent strings suggesting scripted access, an anomalously high volume of failed login or MFA requests for a single user, successful logins after a series of failures with an unusually fast MFA response time, and 'impossible travel' scenarios where sequential logins occur from geographically distant locations in an impossibly short time frame."
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are authentication attempts originating from IP addresses known to be malicious?
    context: This question aims to identify login attempts, whether successful or failed, that come from IP addresses flagged by threat intelligence services. Such sources include known command and control (C2) servers, botnets, TOR exit nodes, or anonymous proxies, which are common tools for attackers to obscure their origin and conduct credential-based attacks like MFA fatigue. A match indicates a high probability of malicious intent.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - "Authentication servers (e.g., ADFS, RADIUS), VPN concentrators, Cloud identity provider platforms (e.g., Azure AD, Okta), Internet gateway/firewall, SIEM"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each auth_log in (EventID 4624, 4625, AzureAD_Signin_Logs)
          JOIN source_ip with threat_intel_feed
          WHERE threat_intel_feed.ip exists
          ALERT on match
  - question: Are users logging in from Autonomous Systems (ASNs) that are historically rare for them?
    context: Attackers often operate from infrastructure that is not typically used by the target user. By analyzing the Autonomous System Number (ASN) of the source IP, we can identify logins from network blocks that are statistically unusual for a specific user. Flagging logins from the rarest ASNs helps detect potential account takeovers or access attempts from attacker-controlled infrastructure.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - "Authentication servers (e.g., ADFS, RADIUS), VPN concentrators, Cloud identity provider platforms (e.g., Azure AD, Okta), Internet gateway/firewall, SIEM"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each user
            CALCULATE historical login frequency per ASN over last 90 days
          FOR each new login
            GET source_ip_asn
            IF login_asn_frequency < 5th_percentile for user
            ALERT on rare ASN
  - question: Can a machine learning model classify login attempts as suspicious based on contextual features?
    context: This question moves beyond simple rules to a more sophisticated, model-based detection. By training a logistic regression model on various features (IP reputation, ASN rarity, geolocation, time), the system can learn the complex patterns of normal vs. malicious logins. This allows for the detection of suspicious activities that might not trigger individual rules but are anomalous when considered together.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - "Authentication servers (e.g., ADFS, RADIUS), VPN concentrators, Cloud identity provider platforms (e.g., Azure AD, Okta), Internet gateway/firewall, SIEM"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          MODEL = train_logistic_regression(features=[ip_score, asn_rarity, country, time_of_day])
          FOR each new login
            features = extract_features(login)
            prediction = MODEL.predict(features)
            IF prediction == 'suspicious' with high probability
            ALERT on model detection
  - question: Are authentication requests being made with User-Agents associated with scripting libraries or hacking tools?
    context: Legitimate user logins typically originate from standard web browsers or approved mobile applications, which have predictable User-Agent strings. Attackers often script their attacks using common libraries (like Python Requests, cURL) or specific hacking tools. Detecting these non-standard User-Agents in requests to authentication endpoints is a strong indicator of an automated, and likely malicious, attack attempt.
    answer_sources:
      - Zeek http.log
      - WAF Logs
      - Azure AD Sign-in Logs
      - "Web proxies, Application servers hosting MFA endpoints, Cloud identity provider platforms, WAF"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          WATCHLIST = ['python-requests', 'curl', 'Go-http-client', ...]
          FOR each http_request to auth_endpoint
          IF http_request.user_agent in WATCHLIST
          ALERT on suspicious User-Agent
  - question: Are there authentication requests with abnormally simple or low-entropy User-Agent strings?
    context: Standard browser User-Agent strings are typically long and complex, containing information about the browser version, operating system, and rendering engine, resulting in high Shannon entropy (a measure of randomness/complexity). Programmatically generated User-Agents are often very simple (e.g., 'my-script/1.0'), leading to low entropy. A User-Agent with an entropy score significantly below the established baseline for legitimate clients suggests it was likely generated by a simple script rather than a standard browser.
    answer_sources:
      - Zeek http.log
      - WAF Logs
      - Azure AD Sign-in Logs
      - "Web proxies, Application servers hosting MFA endpoints, Cloud identity provider platforms, WAF"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          BASELINE_ENTROPY = calculate_mean_std_dev(legitimate_user_agents over 30 days)
          FOR each new http_request to auth_endpoint
            current_entropy = shannon_entropy(http_request.user_agent)
            IF current_entropy < (BASELINE_ENTROPY.mean - 2 * BASELINE_ENTROPY.std_dev)
            ALERT on low entropy User-Agent
  - question: Can a machine learning model detect anomalous User-Agent strings that deviate from the established norm for the enterprise?
    context: This question uses an anomaly detection model (One-Class SVM) to establish a profile of 'normal' User-Agent strings based on historical data from legitimate applications. Any new User-Agent that does not fit this profile is flagged as an outlier. This approach is powerful because it does not require a pre-defined list of bad User-Agents and can adapt to find novel or unknown malicious tools simply by identifying them as 'not normal'.
    answer_sources:
      - Zeek http.log
      - WAF Logs
      - Azure AD Sign-in Logs
      - "Web proxies, Application servers hosting MFA endpoints, Cloud identity provider platforms, WAF"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          MODEL = train_one_class_svm(legitimate_user_agents)
          FOR each new http_request to auth_endpoint
            prediction = MODEL.predict(http_request.user_agent)
            IF prediction == 'anomaly'
            ALERT on anomalous User-Agent
  - question: Is any single user account generating more than 10 failed authentications from one IP address in a 5-minute window?
    context: This is a simple, threshold-based rule to detect brute-force or MFA spamming attempts. A high concentration of failed logins or MFA requests from a single source IP against a single user account is a classic indicator of an adversary trying to guess a password or fatigue a user into making a mistake. The threshold (10 events in 5 minutes) provides a concrete starting point for detection.
    answer_sources:
      - Windows Event ID 4625
      - Azure AD Sign-in Logs
      - "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each 5_minute_window
            COUNT failed_logins (EventID 4625 or MFA_Fail) by user, source_ip
            IF count > 10
            ALERT on high frequency failure
  - question: Is a user experiencing a volume of authentication requests that is statistically abnormal for them?
    context: This question moves from a fixed threshold to a dynamic one tailored to each user's normal behavior. By using a 30-day exponential moving average, the system establishes a personalized baseline of activity for each user. An alert is triggered only when a burst of requests significantly deviates (e.g., by 3 standard deviations) from this personal norm, reducing false positives for users who naturally have more volatile login patterns while effectively flagging unusual spikes for any user.
    answer_sources:
      - Windows Event ID 4625
      - Azure AD Sign-in Logs
      - "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each user
            CALCULATE baseline_ema_std_dev(auth_requests over 30 days)
          FOR each 5_minute_window
            COUNT current_requests for user
            IF current_requests > (baseline.ema + 3 * baseline.std_dev)
            ALERT on dynamic baseline deviation
  - question: Is a time-series model detecting anomalous bursts of authentication activity for any user?
    context: This is the most advanced form of volume-based anomaly detection. A time-series algorithm like S-H-ESD can learn complex, multi-layered patterns in a user's activity, including time of day, day of week, and seasonal trends. It can then identify bursts of authentication requests that are statistically inconsistent with the user's established, nuanced routine, providing a highly accurate method for detecting MFA fatigue attacks.
    answer_sources:
      - Windows Event ID 4625
      - Azure AD Sign-in Logs
      - "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each user
            MODEL = train_s_h_esd(user_auth_event_stream)
            INPUT new_auth_events to MODEL
            IF MODEL flags event as anomalous
            ALERT on time-series anomaly
  - question: Is a successful login immediately preceded by a series of failed logins from the same IP address?
    context: This correlation rule looks for a specific pattern indicative of MFA fatigue: a burst of failed attempts followed by a sudden success. This scenario suggests the attacker was spamming requests until the user finally approved one. Triggering an alert when this sequence occurs within a short time window (e.g., 1 minute) can directly pinpoint a successful MFA fatigue attack.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM/Log aggregator"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          WHEN EventID 4624 (success) is detected for a user/IP
          LOOKBACK 1 minute for same user/IP
          COUNT EventID 4625 (failure)
          IF count >= 5
          ALERT on fail-then-succeed pattern
  - question: After a series of failed logins, was the successful MFA approval time abnormally fast for that user?
    context: Users under a fatigue attack may approve a notification without scrutiny just to stop the spam. This often results in a very fast, almost reflexive, response time. By baselining each user's historical MFA approval times, we can detect a successful login where the response time is statistically much faster than their personal average (e.g., more than 2 standard deviations below the mean), especially when it follows a cluster of failures.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM/Log aggregator"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each user
            CALCULATE historical_mfa_response_time_baseline (mean, std_dev)
          WHEN a successful login follows >=5 failures
            GET mfa_response_time
            IF mfa_response_time < (baseline.mean - 2 * baseline.std_dev) OR mfa_response_time < 1 second
            ALERT on unusually fast approval
  - question: Can a machine learning model predict a 'fatigue approval' based on login context?
    context: This question leverages a decision tree to formalize the logic of a fatigue attack. By using features like the number of recent failed logins, the time since the last success, and the current MFA response time, the model can learn to predict whether a successful approval is likely the result of user fatigue. This provides a score-based assessment rather than a simple rule, allowing for more nuanced and confident alerting.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - "Authentication servers, Domain controllers, Cloud identity provider platforms, SIEM/Log aggregator"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          MODEL = train_decision_tree(features=[failed_login_count, time_since_last_success, mfa_response_time])
          FOR each successful login that follows failed attempts
            features = extract_features(login_context)
            prediction = MODEL.predict(features)
            IF prediction == 'fatigue_approval'
            ALERT on predicted fatigue approval
  - question: Did a user's successful login imply travel at a physically impossible speed?
    context: This is a classic 'impossible travel' or 'Superman' detection. By geolocating a user's successful logins and comparing the location and time to their previous login, we can calculate the required travel speed. If this speed exceeds a non-physical threshold (e.g., 1000 km/h), it's a very strong indication that the same user could not have performed both logins, suggesting at least one of them is from a compromised session.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - "VPN concentrators, Internet gateway/firewall, Cloud identity provider platforms, SIEM/Log aggregator with geolocation enrichment"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each successful login (EventID 4624)
            GET user, timestamp, source_ip_geolocation
            GET last_login for user (timestamp, geolocation)
            CALCULATE implied_velocity(current_login, last_login)
            IF implied_velocity > 1000 km/h
            ALERT on impossible travel
  - question: Did a user log in from a location that required a travel speed in the top percentile for the organization?
    context: This refines the basic impossible travel logic by creating a data-driven threshold. Instead of a fixed speed, it compares the calculated velocity for a user's login against the distribution of all inter-login speeds across the entire organization. Flagging any login that requires a speed in the 99th percentile or higher helps to dynamically define 'improbable' travel based on the organization's actual patterns, making the detection more robust.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - "VPN concentrators, Internet gateway/firewall, Cloud identity provider platforms, SIEM/Log aggregator with geolocation enrichment"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          CALCULATE 99th percentile of all inter-login speeds across org
          FOR each new successful login
            CALCULATE implied_velocity from previous login
            IF implied_velocity > 99th_percentile_speed
            ALERT on improbable travel
  - question: Did a user log in from a location that is a geographic outlier compared to their normal activity clusters?
    context: This approach uses clustering algorithms like DBSCAN to learn a user's normal geographic behavior (e.g., 'home', 'office', 'common travel city'). A new login from a location that does not fall into any of these established clusters is flagged as a geographic anomaly. This is effective for detecting account use from an entirely new and unexpected country or region, even if the travel time itself is not technically impossible.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - "VPN concentrators, Internet gateway/firewall, Cloud identity provider platforms, SIEM/Log aggregator with geolocation enrichment"
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each user
            MODEL = train_dbscan(historical_login_geolocations)
            clusters = MODEL.get_clusters()
          FOR each new successful login
            geolocation = get_geolocation(login)
            IF geolocation is not in any user cluster
            ALERT on geographic outlier