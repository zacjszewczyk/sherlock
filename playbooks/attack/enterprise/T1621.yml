name: T1621: Multi-Factor Authentication Request Generation
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is attempting to bypass multi-factor authentication (MFA) by generating an excessive number of requests to fatigue a user into approving a malicious login. Indicators of this activity include login attempts from known malicious IP addresses, the use of non-standard User-Agent strings suggesting automation, an anomalously high volume of failed login or MFA requests for a single user, successful logins that are immediately preceded by a series of failures (MFA fatigue), and successful logins from geographically impossible locations (impossible travel).
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a login attempt originating from a known malicious IP address, TOR exit node, or anonymous proxy?
    context: This question aims to identify high-confidence malicious activity by checking if the source IP of a login attempt is present on threat intelligence lists. A match strongly suggests an external adversary is targeting user credentials, as legitimate users rarely connect from such infrastructure.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - Authentication servers (e.g., ADFS, RADIUS)
      - VPN concentrators
      - Cloud identity provider platforms (e.g., Azure AD, Okta)
      - Internet gateway/firewall
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH authentication_logs | JOIN source_ip WITH threat_intelligence_feed | WHERE threat_ip IS NOT NULL | ALERT
  - question: Is a user logging in from an Autonomous System Number (ASN) that is historically rare for them?
    context: This identifies logins from unusual network locations. Adversaries often use infrastructure that their targets have never connected from before. By baselining normal ASN activity for each user, we can flag logins from networks that are statistically anomalous, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - Authentication servers (e.g., ADFS, RADIUS)
      - VPN concentrators
      - Cloud identity provider platforms (e.g., Azure AD, Okta)
      - Internet gateway/firewall
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH user_login | GET source_ip_asn | CALCULATE historical_asn_frequency FOR user | IF current_asn_frequency < 5th_percentile THEN ALERT
  - question: Does a login attempt exhibit a combination of characteristics (IP threat score, ASN rarity, country, time) that a machine learning model classifies as suspicious?
    context: This question uses a predictive model to score the risk of a login attempt. By combining multiple weak signals into a single model, it can detect sophisticated attacks that might evade simpler rule-based checks, providing a more holistic risk assessment.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - Authentication servers (e.g., ADFS, RADIUS)
      - VPN concentrators
      - Cloud identity provider platforms (e.g., Azure AD, Okta)
      - Internet gateway/firewall
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH user_login | EXTRACT features (ip_score, asn_rarity, country, time_of_day) | APPLY logistic_regression_model | IF prediction_score > threshold THEN ALERT
  - question: Is an authentication request being made with a User-Agent string associated with non-standard libraries or known hacking tools?
    context: This question helps detect programmatic or automated authentication attempts. Legitimate user logins typically come from standard web browsers. The presence of User-Agents like 'python-requests' or 'curl' suggests a script or tool is being used, a common TTP for MFA fatigue attacks.
    answer_sources:
      - Zeek http.log
      - WAF Logs
      - Azure AD Sign-in Logs
      - Web proxies
      - Application servers hosting MFA endpoints
      - Cloud identity provider platforms
      - WAF
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH http_logs | FILTER user_agent IN (watchlist_of_tools) AND url_path CONTAINS 'auth' | ALERT
  - question: Is an authentication request being made with a User-Agent string that has an abnormally low complexity (Shannon entropy)?
    context: This question aims to identify programmatically generated or randomized User-Agent strings. Adversaries may use simple or non-standard strings that have lower entropy than legitimate browsers. A significant deviation from the baseline entropy suggests an automated tool is at play.
    answer_sources:
      - Zeek http.log
      - WAF Logs
      - Azure AD Sign-in Logs
      - Web proxies
      - Application servers hosting MFA endpoints
      - Cloud identity provider platforms
      - WAF
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH auth_request | CALCULATE shannon_entropy(user_agent) | IF entropy < (baseline_mean - 2 * stddev) THEN ALERT
  - question: Does the User-Agent in an authentication request deviate significantly from the profile of legitimate enterprise application User-Agents?
    context: This uses machine learning to create a model of what 'normal' User-Agents look like for the organization. Any User-Agent that doesn't fit this model is flagged as an anomaly. This can catch novel or previously unseen malicious tools that aren't on a static watchlist.
    answer_sources:
      - Zeek http.log
      - WAF Logs
      - Azure AD Sign-in Logs
      - Web proxies
      - Application servers hosting MFA endpoints
      - Cloud identity provider platforms
      - WAF
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH auth_request | APPLY one_class_svm_model(user_agent) | IF model_predicts_anomaly THEN ALERT
  - question: Has a single user account generated an excessive number of failed login or MFA failure events from one IP in a short time frame?
    context: This is a classic brute-force and MFA fatigue detection method. A high volume of failures from a single source against a single account is a strong indicator of an adversary spamming the user with MFA prompts. A fixed threshold provides a simple, high-confidence alert.
    answer_sources:
      - Windows Event ID 4625
      - Azure AD Sign-in Logs
      - Authentication servers
      - Domain controllers
      - Cloud identity provider platforms
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH failed_auth_logs | GROUPBY user, source_ip, 5_minute_window | WHERE event_count > 10 | ALERT
  - question: Is a user experiencing a burst of authentication requests that is statistically anomalous compared to their own historical activity?
    context: This question improves upon a fixed threshold by creating a personalized baseline for each user. This dynamic approach reduces false positives by tailoring detection to an individual's normal behavior and is better at detecting attacks against users with low activity.
    answer_sources:
      - Windows Event ID 4625
      - Azure AD Sign-in Logs
      - Authentication servers
      - Domain controllers
      - Cloud identity provider platforms
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH user | CALCULATE exponential_moving_average(auth_requests) | IF current_5min_count > (ema + 3 * stddev) THEN ALERT
  - question: Does the pattern of authentication requests for a user deviate from their normal hourly, daily, and weekly cycles?
    context: This advanced detection method learns the typical rhythm of a user's activity. An attack launched at an unusual time, like 3 AM on a weekend, would be flagged as a strong anomaly even if the volume isn't extreme, because it breaks the user's established temporal pattern.
    answer_sources:
      - Windows Event ID 4625
      - Azure AD Sign-in Logs
      - Authentication servers
      - Domain controllers
      - Cloud identity provider platforms
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH user | APPLY S-H-ESD_algorithm(auth_event_timeseries) | IF anomaly_detected THEN ALERT
  - question: Was a successful login immediately preceded by a series of failed login attempts from the same source IP?
    context: This question directly targets the MFA fatigue scenario. An adversary spams login attempts, causing multiple MFA notifications, and the user, annoyed or confused, finally approves one. Correlating the final success with the preceding failures provides strong evidence of this tactic.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - Authentication servers
      - Domain controllers
      - Cloud identity provider platforms
      - SIEM/Log aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH auth_logs FOR ((event_id=4625)x5 THEN (event_id=4624)) FROM same_ip FOR same_user WITHIN 1_minute | ALERT
  - question: Following a cluster of failed logins, did the user approve the successful MFA request unusually quickly compared to their historical average?
    context: This adds another layer to the fatigue scenario. A user trying to dismiss annoying notifications may approve a prompt much faster than they normally would. A statistically fast approval time, especially after a series of failures, is a strong indicator of a fatigue-based compromise.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - Authentication servers
      - Domain controllers
      - Cloud identity provider platforms
      - SIEM/Log aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON successful_login_after_failures | GET mfa_response_time | CALCULATE historical_response_baseline(user) | IF response_time < (mean - 2 * stddev) THEN ALERT
  - question: Does a machine learning model, considering factors like preceding failures and response time, classify a successful login as a likely 'fatigue approval'?
    context: This combines multiple signals—the count of prior failures, time since last success, MFA response speed—into a predictive model. This approach can identify complex patterns of fatigue that simpler rules might miss, providing a scored likelihood of compromise.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - Authentication servers
      - Domain controllers
      - Cloud identity provider platforms
      - SIEM/Log aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON successful_login | EXTRACT features(failed_login_count, time_since_last, response_time) | APPLY decision_tree_model | IF prediction IS 'fatigue_approval' THEN ALERT
  - question: Did a user's successful login imply travel at a physically impossible speed since their last login?
    context: This is a classic "impossible travel" detection. If a user logs in from New York and then, five minutes later, from London, it is a clear sign that two different entities are using the same credentials. This is a high-confidence indicator of account compromise.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - VPN concentrators
      - Internet gateway/firewall
      - Cloud identity provider platforms
      - SIEM/Log aggregator with geolocation enrichment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON successful_login | GET current_location, current_time | GET last_location, last_time | CALCULATE velocity | IF velocity > 1000 km/h THEN ALERT
  - question: Did a user's login sequence require a travel speed that is highly improbable when compared to the typical travel speeds observed across the entire organization?
    context: This refines the basic impossible travel rule by using a statistical baseline derived from all users' travel patterns. This can detect travel that is not strictly impossible but is extremely unlikely (e.g., faster than any commercial flight), making it more sensitive.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - VPN concentrators
      - Internet gateway/firewall
      - Cloud identity provider platforms
      - SIEM/Log aggregator with geolocation enrichment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON successful_login | CALCULATE velocity | GET 99th_percentile_velocity(all_users) | IF velocity > 99th_percentile_velocity THEN ALERT
  - question: Is a user logging in from a geographic location that is not part of their historically established clusters of activity?
    context: This method learns a user's normal locations (home, office, frequent travel cities). A login from a completely new and unexpected location that doesn't fit their established pattern is flagged as a geographic anomaly, suggesting someone else is using the account.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Azure AD Sign-in Logs
      - VPN concentrators
      - Internet gateway/firewall
      - Cloud identity provider platforms
      - SIEM/Log aggregator with geolocation enrichment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOREACH user | APPLY DBSCAN(historical_login_locations) to find clusters | ON new_login | IF new_location NOT IN any_cluster THEN ALERT