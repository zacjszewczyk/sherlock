name: T1546.008: Accessibility Features
id: f3b1e9c2-8a7d-4f6e-9b0c-1a2d3e4f5a6b
description: This playbook focuses on detecting adversaries who hijack Windows Accessibility Features for persistence and privilege escalation. Adversaries replace legitimate accessibility binaries (e.g., sethc.exe, utilman.exe) with malware or modify their Image File Execution Options (IFEO) registry keys to redirect execution. This allows them to execute malicious code with SYSTEM privileges, often from the logon screen. The playbook provides questions to investigate both the initial hijacking (persistence) and the subsequent execution of malicious commands (privilege escalation), such as creating users, establishing C2 channels, or dumping credentials.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an accessibility feature binary been replaced by a known malicious file, or has its Image File Execution Options (IFEO) registry key been modified to point to a malicious debugger?
  context: Adversaries replace legitimate accessibility binaries (like sethc.exe or utilman.exe) with malware or use the IFEO 'Debugger' registry key to redirect execution to their own payload. This provides persistence and privilege escalation, as these binaries can be run from the logon screen with SYSTEM privileges. This question aims to detect these direct replacement or redirection methods using threat intelligence.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search file_creation where file_path contains 'C:\Windows\System32\' and file_name in ('sethc.exe', 'utilman.exe', ...) | compare file_hash against threat_intel_feed
      search registry_set where registry_key contains 'Image File Execution Options' and registry_value_name is 'Debugger' | compare new_value against known_malware_paths
- question: Has the IFEO 'Debugger' value for an accessibility feature been set to a statistically rare or previously unseen executable path across the enterprise?
  context: While direct matches to known malware are high-fidelity, attackers may use novel or custom tools. By establishing a baseline of legitimate debuggers (e.g., procdump.exe) and analyzing the frequency of debugger paths across all systems, we can identify outliers. A path that is extremely uncommon in the environment is suspicious and warrants investigation.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search registry_set where registry_key contains 'Image File Execution Options' and registry_value_name is 'Debugger' | calculate frequency of new_value across all endpoints | alert if frequency < threshold
- question: Can machine learning models, trained on features from file and registry modification events, identify malicious tampering with accessibility features?
  context: This question moves beyond simple rules to a predictive approach. By training a model on features like the parent process, file signature status, hash entropy, and user context, we can create a more robust detection that can identify novel attacks. The model learns the complex patterns of both legitimate system patching and malicious activity to classify new events with a probability score.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: collect file_create and registry_set events for accessibility features | extract features (parent_process, signature_status, hash_entropy, user_context) | apply trained_classification_model | alert if prediction is 'malicious'
- question: Has an accessibility feature binary been modified shortly after its ownership or permissions were changed?
  context: To replace a protected system file like sethc.exe, an adversary must first take ownership (e.g., using takeown.exe) and then grant themselves write permissions (e.g., using icacls.exe). Observing this specific sequence of events—taking ownership, changing permissions, and then writing to the file—within a short time window is a very strong indicator of malicious tampering.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Windows Event ID 4670
  - Windows Event ID 4663
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: correlate process_creation (takeown.exe, icacls.exe) with target_file (accessibility_binary) and file_write on same target_file from same host and session within 5 minutes | alert
- question: Is there an anomalous spike in permission changes on accessibility feature binaries on a given host?
  context: Legitimate system file permission changes are infrequent. A sudden burst of permission modifications on protected accessibility binaries is highly unusual. By modeling the normal rate of these events for each host, we can use statistical methods to detect significant deviations from the baseline, which could indicate an attacker is preparing to replace the file.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4670
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for each host, monitor count of permission_change_events on accessibility_binaries over time | calculate moving_average and standard_deviation | alert if count in a 5-minute window > (mean + 3 * std_dev)
- question: Does the sequence of file system operations performed on an accessibility binary deviate from learned patterns of legitimate activity like system patching?
  context: This approach uses a more advanced model to understand the order of events. Legitimate patching might follow a specific, predictable sequence. An attack sequence, such as takeown -> icacls -> write initiated from a user shell outside a maintenance window, would be recognized by a sequence analysis model (like an LSTM) as a deviation from the learned normal behavior.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Windows Event ID 4670
  - Windows Event ID 4663
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream file_system_events (process_create, permission_change, file_write) for system binaries into sequence_analysis_model | alert if model flags an anomalous sequence involving an accessibility_binary
- question: Was an accessibility feature binary or its IFEO registry key modified by an unauthorized parent process?
  context: Modifications to critical system files and registry keys are typically performed by a small, predictable set of trusted system processes (e.g., TrustedInstaller.exe, svchost.exe). An alert that triggers when a non-standard process, such as a command shell or a user application, modifies these artifacts is a high-fidelity indicator of malicious activity.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search file_write or registry_set on accessibility_feature_artifacts | check parent_process_name | alert if parent_process_name not in ('TrustedInstaller.exe', 'msiexec.exe', 'svchost.exe', ...)
- question: Was the modification of an accessibility feature performed by a parent process that is statistically rare for this type of activity across the enterprise?
  context: This is a data-driven alternative to a static allowlist. By analyzing all parent processes that modify system files across the entire environment, we can identify those that are exceptionally rare. A process that has never, or very rarely, been seen modifying system files but suddenly modifies an accessibility feature is highly suspicious.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for all system_file_modifications, aggregate parent_process_names | calculate frequency of each parent_process | for new accessibility_feature_modification, alert if parent_process_frequency is below a threshold
- question: Can a machine learning classifier, based on process context, distinguish between benign system maintenance and suspicious, user-driven modifications to accessibility features?
  context: This question aims to use machine learning to automate the analysis of contextual features surrounding a modification event. A model can be trained to recognize the patterns of benign activity versus suspicious activity based on user context, process lineage, and command-line arguments.
  answer_sources:
  - Sysmon Event ID 1
  - Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for process_creation events leading to system_modification, extract features (parent_process, command_line, user_context, integrity_level) | apply trained_classifier_model | alert if classification is 'suspicious-user-driven-modification'
- question: Is a shell spawned from an accessibility feature executing commands with known malicious patterns or keywords?
  context: Once an adversary has hijacked an accessibility feature, they will use it to execute commands, often from the logon screen to gain SYSTEM-level access. This question looks for the direct execution of malicious commands by searching the command line of processes spawned by accessibility binaries for keywords and patterns associated with credential dumping, remote code execution, or user manipulation.
  answer_sources:
  - Sysmon Event ID 1
  - All Windows Endpoints (Workstations and Servers), especially Domain Controllers and Remote Desktop Gateway Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where parent_image in ('sethc.exe', 'utilman.exe', ...) | filter child_process_command_line using regex for ('mimikatz', 'iex(new-object net.webclient)', 'net user /add', ...) | alert on match
- question: Is a process spawned from an accessibility feature executing a command line with unusually high entropy, suggesting obfuscation?
  context: To evade simple keyword-based detection, attackers often encode or obfuscate their payloads (e.g., using Base64). This results in command line strings that are random-looking and have high entropy. By calculating the entropy of command lines and comparing it to a baseline, we can detect obfuscated commands even if we don't know the specific malicious keywords being used.
  answer_sources:
  - Sysmon Event ID 1
  - All Windows Endpoints (Workstations and Servers), especially Domain Controllers and Remote Desktop Gateway Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where parent_image in ('sethc.exe', 'utilman.exe', ...) | calculate shannon_entropy of child_process_command_line | alert if entropy > baseline_threshold
- question: Can an NLP model classify the command lines executed by processes spawned from accessibility features as malicious, even for novel attack syntax?
  context: This approach treats command lines as a form of language. By fine-tuning a powerful NLP model on a large dataset of known good and bad commands, the model can learn the linguistic structure and syntax of malicious commands. This allows it to identify new and previously unseen malicious command variations that might evade regex or entropy-based detection.
  answer_sources:
  - Sysmon Event ID 1
  - All Windows Endpoints (Workstations and Servers), especially Domain Controllers and Remote Desktop Gateway Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for process_creation where parent_image is an accessibility_binary, extract child_command_line | input command_line to trained_nlp_model | alert if model_classification is 'malicious'
- question: Has a shell spawned from an accessibility feature been used to create a new user and immediately add it to a privileged group?
  context: A common post-exploitation goal is to create a persistent backdoor account. A classic pattern is to use SYSTEM-level access to create a new user account and add it to a powerful group like local Administrators or Domain Admins. Correlating these events in a tight time window provides a high-confidence alert for this specific attack chain.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Windows Event ID 4756
  - Logon screens of all Windows systems, Domain Controllers, Active Directory databases
  range: last 90 days
  queries:
  - technology: pseudocode
    query: correlate process_creation (parent_image=accessibility_binary) with user_creation_event and group_addition_event on same host and session within 2 minutes | alert
- question: Is the time between an accessibility feature spawning a shell and subsequent user/group manipulation suspiciously short, indicating an automated script?
  context: Manual administrative actions have natural delays as a human types commands. Automated attack scripts execute commands almost instantaneously. By measuring the time difference between the shell creation and the follow-on administrative actions, we can identify activity that is too fast to be human-generated.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Logon screens of all Windows systems, Domain Controllers, Active Directory databases
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for events where accessibility_binary spawns shell, measure time_delta to subsequent user_creation or group_addition on same host | alert if time_delta < threshold
- question: Does the chain of events originating from an accessibility feature—spawning a process, creating a user, adding to a group—form an anomalous graph pattern compared to normal administrative activity?
  context: This approach models system activity as a graph of interconnected entities. Normal administrative workflows create typical graph patterns. An attack, such as utilman.exe -> cmd.exe -> creates user 'backdoor' -> adds 'backdoor' to 'Domain Admins', forms a very distinct and unusual subgraph that can be identified with graph-based anomaly detection.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4728
  - Windows Event ID 4756
  - Logon screens of all Windows systems, Domain Controllers, Active Directory databases
  range: last 90 days
  queries:
  - technology: pseudocode
    query: model system events as a graph (nodes=entities, edges=actions) | feed new events into graph_anomaly_detection_model | alert if model identifies an anomalous subgraph originating from an accessibility_binary
- question: Has an accessibility feature process directly spawned a command shell, scripting interpreter, or remote access tool?
  context: There is virtually no legitimate reason for an accessibility program like the on-screen keyboard (osk.exe) or sticky keys (sethc.exe) to launch a command prompt (cmd.exe) or PowerShell. This parent-child process relationship is a classic and high-fidelity indicator of this technique being abused for code execution.
  answer_sources:
  - Sysmon Event ID 1
  - All Windows Endpoints (Workstations and Servers), Remote Desktop Gateway Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation where parent_image in ('sethc.exe', 'utilman.exe', ...) and child_image in ('cmd.exe', 'powershell.exe', 'wscript.exe', ...) | alert
- question: Has an accessibility feature spawned a child process that is statistically rare or has never been seen before in the environment?
  context: While we can create a static list of suspicious child processes (like cmd.exe), adversaries may use custom or renamed tools. This question uses frequency analysis to detect any unusual child process. By baselining all parent-child relationships, a pairing like sethc.exe -> my_implant.exe would be flagged as extremely rare and therefore highly suspicious.
  answer_sources:
  - Sysmon Event ID 1
  - All Windows Endpoints (Workstations and Servers), Remote Desktop Gateway Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: baseline all parent-child process pairs across enterprise | for new process_creation where parent is accessibility_binary, check frequency of the pair | alert if frequency is very low
- question: Can an autoencoder model, trained on normal parent-child process relationships, detect the spawning of a shell from an accessibility feature as a novel anomaly?
  context: An autoencoder is a neural network trained to reconstruct its input. When trained only on benign data, it performs poorly on inputs that deviate from the training data. A malicious event like utilman.exe -> cmd.exe is so different from the norm that the model's attempt to reconstruct it will result in a high "reconstruction error," which serves as a powerful signal for anomaly detection.
  answer_sources:
  - Sysmon Event ID 1
  - All Windows Endpoints (Workstations and Servers), Remote Desktop Gateway Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: train autoencoder_model on vector representations of normal parent-child process events | for new events, calculate reconstruction_error | alert if parent is accessibility_binary and reconstruction_error is high
- question: Is a process spawned by an accessibility feature making outbound network connections to known malicious infrastructure or using common C2 ports?
  context: After gaining execution, attackers often establish a command and control (C2) channel. This question aims to detect this by correlating the process activity with network logs. If a process spawned by a hijacked accessibility feature is observed connecting to an IP address on a threat intelligence list or to a non-standard port often used for C2, it is a strong indication of a compromise.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points, Firewall and proxy servers, Remote Desktop Gateway Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: correlate process_creation (parent=accessibility_binary) with network_connection from child_pid | check destination_ip against threat_intel_feed | check destination_port against common_c2_ports | alert on match
- question: Is a process spawned by an accessibility feature making outbound network connections to a statistically rare destination or using a rare TLS fingerprint (JA3/JA3S)?
  context: Attackers often use newly registered domains or unique IP addresses for C2 that are not yet in threat intelligence feeds. This question uses statistical analysis to find these outliers. A destination IP, domain, port, or TLS client fingerprint (JA3/JA3S) that is rare or has never been seen before in the environment is a strong signal of potential C2 activity.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network egress points, Firewall and proxy servers, Remote Desktop Gateway Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for network_connections from processes spawned by accessibility_binaries | analyze frequency of destination_ip, destination_domain, destination_port, ja3_hash | alert if frequency is below a rarity threshold
- question: Is there an anomalous volume or pattern of outbound network traffic associated with a process spawned from an accessibility feature?
  context: C2 channels and data exfiltration often create distinct network traffic patterns, such as regular "heartbeats" or large, sustained data transfers. By applying time-series analysis to the volume of outbound data from the source host during the time of the suspicious activity, we can detect deviations from the normal network behavior baseline for that host.
  answer_sources:
  - Zeek conn.log
  - Network egress points, Firewall and proxy servers, Remote Desktop Gateway Servers, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for source_ip associated with suspicious accessibility_binary activity | model historical outbound_data_volume using time-series_analysis (ARIMA) | alert if current traffic volume significantly deviates from the predicted baseline