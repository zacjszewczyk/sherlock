name: T1548.002: Bypass User Account Control
id: a3e5e4f1-5b7c-4e8d-8a9b-2c3d4e5f6a7b
description: This playbook focuses on detecting privilege escalation and defense evasion through User Account Control (UAC) bypass techniques (T1548.002). Adversaries exploit UAC to execute code with elevated privileges without user consent. This is often achieved by hijacking registry keys associated with auto-elevating processes, executing legitimate Windows binaries with anomalous parents or arguments, or chaining processes to inherit high integrity levels. Investigations should also look for post-bypass activity, such as disabling security tools, process injection, anomalous file system operations, or establishing command and control communications, often following remote administrative logons.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any modifications been made to registry keys commonly abused for UAC bypass, such as those associated with auto-elevating processes?
  context: Adversaries modify specific HKEY_CURRENT_USER (HKCU) registry keys that are read by trusted, auto-elevating executables (like fodhelper.exe or eventvwr.exe). By altering the command associated with these keys, an attacker can trick the system into executing their malicious code with high integrity privileges, effectively bypassing the UAC prompt. This question aims to find direct evidence of this command hijacking technique by monitoring a watchlist of known vulnerable registry keys for suspicious new values, such as paths to cmd.exe, powershell.exe, or executables in temporary user directories.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 13 OR Windows Event ID 4657) WHERE registry_key IN (uac_bypass_watchlist) AND new_value CONTAINS (suspicious_paths OR suspicious_executables)
- question: Has any user exhibited anomalous registry modification behavior for sensitive HKCU keys associated with UAC bypass?
  context: Beyond looking for known bad patterns, this question seeks to identify UAC bypass attempts by finding statistical outliers in user behavior. Adversaries may use obfuscated commands or novel techniques not on a watchlist. By baselining normal registry modification frequency and value complexity (entropy) for each user, we can detect suspicious deviations. A sudden spike in modifications to a sensitive key or an unusually complex (high entropy) value could indicate an obfuscated payload or automated script attempting to hijack a key.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 13) | GROUP BY user, registry_key | CALCULATE baseline_entropy, baseline_frequency | ALERT WHERE current_entropy > 95th_percentile OR current_frequency > (mean + 2*stdev_of_30_day_average)
- question: Can machine learning models classify registry modifications to sensitive HKCU paths as potential UAC bypass attempts?
  context: This question leverages a machine learning model to proactively identify sophisticated UAC bypass attempts that may evade symbolic and statistical methods. The model analyzes a rich set of features from each registry modification event—such as the process making the change, its lineage, and the characteristics of the new value—to learn the subtle patterns of malicious behavior. This allows for the detection of novel techniques and provides a prioritized score for analysts, focusing attention on the most likely threats.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT (registry_modification_events) | EXTRACT_FEATURES (key_path, process_name, parent_process, value_entropy) | APPLY_CLASSIFICATION_MODEL | ALERT WHERE prediction_score > threshold
- question: Has a known auto-elevating Windows binary been launched by an unusual parent process or with suspicious command-line arguments?
  context: Adversaries often abuse legitimate Windows executables that can auto-elevate privileges (e.g., fodhelper.exe, sdclt.exe) to run their own code. This technique involves a non-standard parent process (like Microsoft Word or PowerShell) launching one of these trusted binaries. This question uses a rule-based approach to detect these anomalous parent-child relationships and to check command-line arguments against known UAC bypass patterns, such as those found in the UACME project, providing a strong indicator of a hijack attempt.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 1) WHERE child_process IN (auto_elevator_watchlist) AND parent_process NOT IN (approved_parents_list) OR command_line MATCHES (known_uac_bypass_patterns)
- question: Are there statistically rare parent-child process relationships involving auto-elevating binaries?
  context: This question aims to find novel UAC bypass techniques by identifying statistically improbable process execution events. By profiling all parent-child process relationships across the environment, we can assign a rarity score to each one. A typically non-interactive process like winword.exe spawning a system utility like eventvwr.exe is extremely rare and thus suspicious. Additionally, analyzing the complexity and length of command-line arguments can reveal obfuscated commands or payloads passed to the auto-elevating binary, flagging outliers for investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 1) WHERE child_process IN (auto_elevator_watchlist) | CALCULATE rarity_score(parent_process, child_process) | ALERT WHERE rarity_score < threshold OR command_line_length > 98th_percentile OR command_line_entropy > 98th_percentile
- question: Can clustering algorithms identify outlier groups of process creation events that represent novel UAC bypass techniques?
  context: This question uses unsupervised machine learning to discover new UAC bypass methods without relying on predefined rules or signatures. By clustering process creation events based on features like parent/child names, command lines, and user context, the algorithm can group normal, legitimate behaviors together. Any small, distinct clusters that form are considered outliers. These outlier clusters often represent anomalous activity, such as a new exploit that causes an auto-elevating process to be spawned in a way never before seen in the environment.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT (process_creation_events) | VECTORIZE_FEATURES (parent, child, command_line, user) | APPLY_CLUSTERING_MODEL (DBSCAN) | ALERT ON outlier_clusters
- question: Has a non-elevated process spawned an auto-elevating process which in turn launched a high-integrity command shell?
  context: This question looks for a specific, high-fidelity attack chain indicative of a successful UAC bypass. The pattern involves a process running with standard user privileges (medium integrity) that launches a trusted, auto-elevating Windows process, which is then used as a vehicle to spawn a command shell (cmd.exe, powershell.exe) that now possesses high-integrity (administrator) privileges. Correlating these events in a short time window provides strong evidence that an attacker has successfully escalated their privileges.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE (Process A where integrity != High) -> (Process B in auto_elevator_watchlist) -> (Process C is shell AND integrity == High) WITHIN 10 seconds
- question: Have any statistically improbable three-process chains (grandparent-parent-child) been observed that could indicate a UAC bypass?
  context: This question seeks to identify UAC bypasses by analyzing the statistical likelihood of entire process chains. While a single parent-child relationship might seem plausible in isolation, the full sequence of three or more processes can be extremely rare. For example, the probability of winword.exe spawning eventvwr.exe which then spawns cmd.exe is exceptionally low in a normal environment. By calculating these conditional probabilities, we can flag highly suspicious chains that deviate from established norms.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE process_chains(A, B, C) | CALCULATE conditional_probability(C | B, A) | ALERT WHERE probability < threshold
- question: Can a sequence analysis model detect anomalous process creation sequences indicative of a UAC bypass?
  context: This question applies advanced machine learning models, like Recurrent Neural Networks (RNNs), to understand the 'grammar' of normal process execution sequences. The model is trained on millions of benign sequences to learn what constitutes legitimate system behavior. When a new sequence of process creations occurs, the model assigns it a likelihood score. Sequences that are highly improbable according to the model—such as those involved in a novel UAC bypass—receive a very low score and are flagged as anomalous for analyst review.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT (process_creation_sequences) | APPLY_SEQUENCE_ANALYSIS_MODEL (RNN/HMM) | ALERT WHERE sequence_likelihood_score < threshold
- question: Did a remote network logon by an administrator immediately precede the creation of a high-integrity interactive shell on the target system?
  context: UAC prompts are a feature of the interactive desktop and do not apply to non-interactive sessions like remote logons (Logon Type 3). Adversaries exploit this by using compromised administrative credentials to log on to a machine remotely and immediately launch a high-integrity shell, bypassing local UAC protections entirely. This question seeks to detect this specific lateral movement technique by correlating a remote administrative logon event with the subsequent, near-instantaneous creation of a privileged shell.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Domain Controllers
  - Member Servers
  - Administrative Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE (Logon Event 4624 where type==3 and user is admin) with (Process Event 4688/1 where process is shell and integrity==High) on same host WITHIN 5 seconds
- question: Has an administrative user launched unusual processes or logged in from a rare source subnet immediately following a remote logon?
  context: This question aims to detect anomalous administrative activity by baselining behavior associated with remote logons. Every administrator has a typical set of tools they run and subnets they log in from. An alert is triggered if an administrator, after a remote logon, launches a process they have rarely or never used before, or if the logon itself originates from a statistically unusual location for that user. This helps identify compromised administrative accounts being used for lateral movement in ways that deviate from the legitimate user's normal patterns.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Domain Controllers
  - Member Servers
  - Administrative Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH remote_logon_events | GROUP BY user | CALCULATE baseline_processes, baseline_subnets | ALERT WHERE launched_process NOT IN baseline OR source_subnet IS RARE
- question: Can a time-series model detect a coordinated spike in remote logons followed by shell creation, originating from a single source?
  context: This question focuses on identifying large-scale, automated lateral movement campaigns. A single instance of a remote logon followed by a shell might be legitimate, but a sudden burst of this activity across many hosts from one source IP is highly indicative of an attack. A time-series anomaly detection model can monitor the frequency of this specific behavior pattern, aggregated by source IP, and automatically flag any sudden, statistically significant spikes that suggest a widespread compromise.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Domain Controllers
  - Member Servers
  - Administrative Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: AGGREGATE (remote_admin_logon_followed_by_shell) events by source_ip over time | APPLY_TIMESERIES_ANOMALY_DETECTION | ALERT ON significant_spikes
- question: Following a suspected UAC bypass, did a high-integrity process execute commands known to disable security tools or clear logs?
  context: A primary goal for an adversary after successfully escalating privileges is to disable defenses to avoid detection. This question directly links a UAC bypass event with subsequent defense evasion activity. It uses a stateful rule to look for a high-integrity process, spawned shortly after a UAC bypass alert, executing specific commands to turn off antivirus (Set-MpPreference), disable the firewall (netsh advfirewall), or clear event logs (wevtutil.exe cl). This correlation significantly increases the confidence and severity of the alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE (UAC_Bypass_Alert) with (Process_Creation_Event with defense_evasion_command) on same host WITHIN 5 minutes
- question: Did a command executed by a high-integrity process have a statistically anomalous 'Defense Evasion Score'?
  context: Adversaries often obfuscate their commands to evade simple signature-based detection. This question uses a statistical approach to score command lines based on the presence and weight of keywords associated with defense evasion (e.g., 'disable', 'stop', 'cl'). By comparing a command's score to the historical distribution of scores for that specific process, we can identify outliers. A typically benign process executing a command with an unusually high evasion score is a strong indicator of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each command_line by high_integrity_process | CALCULATE defense_evasion_score | COMPARE to historical_distribution_for_process | ALERT WHERE score > 99th_percentile
- question: Can a text classification model identify novel or obfuscated defense evasion commands executed by high-integrity processes?
  context: This question leverages natural language processing (NLP) to detect malicious commands that don't match known patterns. A machine learning model is trained on a large dataset of both benign and malicious command lines to learn the linguistic features of defense evasion. It can then classify new, unseen commands in real-time. This is particularly effective against obfuscated PowerShell commands or novel techniques for which no signatures exist yet.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT (command_lines_from_high_integrity_processes) | APPLY_TEXT_CLASSIFICATION_MODEL | ALERT WHERE prediction == 'defense_evasion'
- question: Following a UAC bypass, did a process inject code into a critical system process or load an unsigned/unusually located DLL?
  context: After gaining high-integrity access, adversaries may inject malicious code into other trusted processes (e.g., lsass.exe) to hide their activity or access credentials. Another technique is to force an elevated process to load a malicious DLL. This question uses rules to detect these specific actions: a CreateRemoteThread event targeting a system process, or an ImageLoad event for a DLL that is either unsigned or located in a suspicious, user-writable directory like %TEMP%, when the action is initiated by a process recently involved in a UAC bypass.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 8) WHERE SourceProcess linked to UAC_bypass AND TargetProcess is critical_system_process OR SEARCH (Sysmon Event ID 7) WHERE loading_process_integrity is high AND (ImageLoaded is unsigned OR ImageLoaded_path is user_writable)
- question: Has a high-integrity process loaded a statistically rare DLL or a DLL from a high-entropy file path?
  context: This question seeks to identify malicious DLL loading by finding statistical anomalies. System processes have a predictable set of DLLs they normally load. By baselining this behavior across the enterprise, we can flag any instance where a process loads a DLL that is rarely associated with it or is uncommon in the environment overall. Additionally, calculating the character entropy of the DLL's file path can detect randomization techniques used by attackers to evade signature-based detections.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each DLL_load by high_integrity_process | CALCULATE DLL_rarity_score, path_entropy | ALERT WHERE rarity_score < threshold OR path_entropy > threshold
- question: Can a graph-based anomaly detection model identify suspicious process injection or DLL loading activity following a UAC bypass?
  context: This question models system activity as a graph, where processes and DLLs are nodes and actions like 'loads' or 'injects' are edges. A machine learning model trained on this graph structure learns what normal relationships look like. When a UAC bypass is suspected, the model analyzes the subgraph of subsequent activity. It can identify anomalous structures, such as a process loading a strange combination of DLLs or injecting into an unusual target, that would be missed by rules-based or simple statistical methods.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL system_activity as graph(nodes=processes/DLLs, edges=loads/injects) | TRAIN on normal behavior | ANALYZE subgraph post-UAC_bypass | ALERT on anomalous_structures
- question: Following a UAC bypass, did a high-integrity process write an executable file to a non-standard or user-writable directory?
  context: After escalating privileges, adversaries often drop additional tools or malware onto the system. This question looks for the specific action of a newly-elevated process creating an executable file (.exe, .dll, .ps1, etc.) in a location where executables are not normally stored, such as temporary user directories (%APPDATA%, %TEMP%) or public folders. This is a common staging technique and a strong indicator of malicious follow-on activity.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File Servers
  - User Workstations
  - Administrative Workstations
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 11) WHERE process linked to UAC_bypass AND process_integrity is high AND TargetFilename has executable_extension AND TargetFilename_path is user_writable
- question: Did a high-integrity process exhibit an anomalously high volume of file operations compared to its baseline?
  context: This question aims to detect malicious file system activity, such as data collection or staging, by looking for unusual volumes of operations. Legitimate high-integrity processes typically have predictable file access patterns. By establishing a baseline for the number of file reads/writes per hour for each process, we can use statistical methods to detect significant deviations. A sudden, massive spike in file activity by a system process could indicate it has been compromised and is being used to search for and stage data for exfiltration.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File Servers
  - User Workstations
  - Administrative Workstations
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE file_operation_volume per hour for each high_integrity_process | ALERT WHERE current_volume > (Q3 + 1.5*IQR)
- question: Can an Isolation Forest model identify anomalous file system operations performed by high-integrity processes?
  context: This question uses an unsupervised machine learning model, Isolation Forest, which is particularly good at identifying outliers. The model is trained on benign file system activity, learning the normal combination of features like which process is acting, what file path is being accessed, the type of access, and the file extension. It can then quickly score new file operations. Any operation that the model identifies as a significant outlier (i.e., it is easily 'isolated' from normal data points) is flagged as suspicious, enabling the detection of novel malicious file activities.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File Servers
  - User Workstations
  - Administrative Workstations
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT (file_system_events) | APPLY_ISOLATION_FOREST_MODEL | ALERT WHERE anomaly_score > threshold
- question: Following a UAC bypass, did a high-integrity process initiate suspicious outbound network connections?
  context: A critical step for an attacker after compromising a host is to establish command and control (C2). This question looks for newly elevated processes making suspicious network connections. The rule flags connections from high-integrity processes that are unsigned or run from odd locations, especially when they connect to external IPs on non-standard web ports. Correlating the destination domain with threat intelligence feeds for known C2 servers or newly registered domains further increases the fidelity of the alert.
  answer_sources:
  - Sysmon Event ID 3
  - Windows Event ID 5156
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Sysmon Event ID 3) WHERE process_integrity is high AND (process is unsigned OR process_path is non-standard) AND DestinationIp is external AND DestinationPort NOT IN (80, 443) AND DestinationHostname IN (threat_intel_feed)
- question: Did a high-integrity process exhibit network behavior indicative of DGA activity or anomalous data transfer volumes?
  context: This question uses statistical methods to find subtle C2 indicators. One method is to analyze the entropy of destination domain names; a sudden spike in entropy can indicate the use of a Domain Generation Algorithm (DGA) for C2 communication. Another method is to baseline the normal amount of outbound data for each process. A typically non-networked process that suddenly sends a large amount of data is highly suspicious and could be exfiltrating stolen information.
  answer_sources:
  - Sysmon Event ID 3
  - Windows Event ID 5156
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE network_connections | CALCULATE shannon_entropy of destination_domains per process | ALERT on entropy_spike OR ANALYZE traffic_volume | ALERT where outbound_volume > 99th_percentile_for_process
- question: Can machine learning models detect anomalous network traffic patterns, such as C2 beaconing, from high-integrity processes?
  context: This question applies machine learning to identify complex C2 patterns. A time-series forecasting model can predict the expected volume of outbound traffic for a process and alert when the actual volume significantly exceeds the prediction. Furthermore, unsupervised clustering algorithms can analyze connection metadata (port, protocol, frequency, data size) to find groups of connections that exhibit the regular, 'heartbeat' pattern of C2 beaconing, which is distinct from normal, bursty user-driven traffic.
  answer_sources:
  - Sysmon Event ID 3
  - Windows Event ID 5156
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FORECAST outbound_traffic_volume per process | ALERT on deviation from prediction OR CLUSTER connection_metadata | ALERT on clusters exhibiting beaconing_characteristics