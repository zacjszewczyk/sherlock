name: T1548.002: Bypass User Account Control
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify adversaries attempting to escalate privileges or evade defenses by bypassing User Account Control (UAC). It focuses on detecting techniques such as hijacking registry keys of auto-elevating processes, executing legitimate Windows binaries from anomalous parent processes, creating suspicious process chains that result in a high-integrity shell, and leveraging remote logons to bypass local UAC prompts. The playbook also covers post-bypass activities, including disabling security tools, injecting code into system processes, performing anomalous file system activity, and establishing command and control communications.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any monitored HKCU registry keys, known to be abused for UAC bypass, been modified to contain a suspicious command or file path?
  context: Adversaries may hijack registry keys, such as `HKCU\Software\Classes\mscfile\shell\open\command`, that are used by auto-elevating processes. When a user runs the associated program (e.g., eventvwr.exe), the compromised command is executed with elevated privileges, bypassing UAC. This question searches for direct evidence of these modifications using a predefined watchlist of vulnerable keys and suspicious command values.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events (event_id=4657 OR sysmon_event_id=13)
      WHERE registry_key IN (uac_bypass_watchlist)
      AND new_value CONTAINS ('powershell.exe', 'cmd.exe', '%APPDATA%', '.bat', '.vbs')
      RETURN hostname, user, process_name, registry_key, new_value
- question: Has there been a statistically anomalous modification to a sensitive HKCU registry key, such as an unusually high entropy value or a sudden spike in modification frequency?
  context: Benign registry modifications typically have predictable patterns. Adversaries using obfuscated commands or performing rapid, repeated modifications can deviate from these norms. This question uses statistical analysis to find such outliers, which may indicate a UAC bypass attempt, even if the specific command isn't on a known-bad list.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Establish baseline of normal modification frequency and value entropy per user/key.
      // Step 2: For each new registry modification event to a sensitive HKCU key:
      CALCULATE shannon_entropy(new_value)
      COMPARE event_frequency_per_user_host to (30_day_avg + 2 * stdev)
      IF shannon_entropy > 95th_percentile_for_user_key OR event_frequency is anomalous
      THEN ALERT
- question: Does a machine learning model classify a recent modification to a sensitive HKCU registry path as a suspicious UAC bypass attempt?
  context: A machine learning model can learn the complex, subtle characteristics of malicious registry modifications versus benign ones. By analyzing features like the modifying process, its parent process, and the entropy of the new value, the model can identify novel or sophisticated bypass attempts that might be missed by static rules or simple statistical checks.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each registry modification to a sensitive HKCU path:
      EXTRACT features (key_path, process_name, parent_process_name, value_entropy, value_contains_executable)
      PREDICT classification USING random_forest_model(features)
      IF classification_score > threshold
      THEN ALERT with classification and score
- question: Has a known auto-elevating Windows binary been executed by an unapproved parent process or with command-line arguments matching known UAC bypass patterns?
  context: Adversaries often trigger UAC bypasses by having a non-standard process (like an Office application or a script interpreter) launch a legitimate, auto-elevating binary (e.g., fodhelper.exe). This question looks for these tell-tale parent-child relationships and known malicious command-line patterns catalogued in projects like UACME.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (event_id=4688 OR sysmon_event_id=1)
      WHERE child_process IN (auto_elevator_watchlist)
      AND (parent_process NOT IN (approved_parents_list) OR command_line MATCHES (uacme_patterns))
      RETURN hostname, user, parent_process, child_process, command_line
- question: Has an auto-elevating binary been executed in a statistically rare manner, such as having an uncommon parent process or unusually long/complex command-line arguments?
  context: By profiling all parent-child process relationships across the environment, we can identify pairs that are exceptionally rare. A rare pairing involving an auto-elevating binary is highly suspicious. Similarly, unusually long or high-entropy command lines can indicate obfuscated payloads being passed to the process.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Establish baseline of parent-child rarity and command-line length/entropy for auto-elevating binaries.
      // Step 2: For each new execution of an auto-elevating binary:
      CALCULATE parent_child_rarity_score
      CALCULATE command_line_entropy
      CALCULATE command_line_length
      IF rarity_score < 1% OR command_line_entropy > 98th_percentile OR command_line_length > 98th_percentile
      THEN ALERT
- question: Has a machine learning clustering algorithm identified an anomalous group of process creation events involving an auto-elevating binary?
  context: Clustering algorithms like DBSCAN can group similar process creation events together based on features like parent, child, and command line. Events that do not fit into any large, common cluster are flagged as outliers. This approach is effective for discovering novel UAC bypass techniques that don't match any pre-defined rules or patterns.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For process creation events involving auto-elevating binaries:
      VECTORIZE features (parent_process_name, child_process_name, command_line_args)
      APPLY DBSCAN clustering algorithm
      IF event is labeled as 'outlier'
      THEN ALERT
- question: Has a process chain been observed where a non-elevated process spawns an auto-elevating process, which in turn launches a high-integrity command shell?
  context: This is the classic UAC bypass execution chain. A low-privilege process triggers an auto-elevating process, which then, through a hijack, spawns a command shell (cmd.exe, powershell.exe) that inherits its high integrity level. This question uses stateful correlation to detect this specific sequence of events in a short time window.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE process_creation_events within a 10-second window on the same host
      WHERE (ProcessA.IntegrityLevel != High) creates (ProcessB IN auto_elevator_watchlist)
      AND (ProcessB creates ProcessC)
      AND (ProcessC.name IN ('cmd.exe', 'powershell.exe') OR ProcessC.path is non-standard)
      AND (ProcessC.IntegrityLevel == High)
      THEN ALERT on the full chain
- question: Has a statistically improbable three-process execution chain occurred, ending in a command shell spawned from an auto-elevating process?
  context: While some legitimate process chains exist, the sequence of '[Benign App] -> [Auto-Elevator] -> [Shell]' is almost always malicious and therefore statistically rare. By calculating the conditional probability of process chains across the environment, we can flag those with extremely low likelihood as highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Analyze all 3-process chains (A->B->C) to calculate conditional probabilities P(C | A, B).
      // Step 2: For each new chain where B is an auto-elevator and C is a shell:
      LOOKUP P(C | A, B)
      IF P < 0.001 (or other low threshold)
      THEN ALERT
- question: Has a sequence analysis model flagged a recent process creation sequence as anomalous or having a very low likelihood of being benign?
  context: Sequence analysis models like RNNs or HMMs can learn the 'grammar' of normal process execution sequences. They can then evaluate new sequences in real-time and assign a likelihood score. Malicious UAC bypass chains, which deviate from normal system behavior, will receive a low score and be flagged as anomalous, even if the specific chain has never been seen before.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each new process creation sequence:
      INPUT sequence (process_names, integrity_levels) into trained RNN/HMM model
      CALCULATE likelihood_score
      IF likelihood_score < anomaly_threshold
      THEN ALERT
- question: Following a remote administrative logon, was a high-integrity interactive shell immediately created on the target system?
  context: UAC prompts are a feature of the interactive desktop and do not apply to non-interactive sessions like a remote logon (Logon Type 3). Adversaries exploit this by logging in remotely with compromised administrative credentials to get an immediate high-integrity shell. This question correlates remote logons with subsequent shell creation.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Domain Controllers
  - Member Servers
  - Administrative Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events on the same host within a 5-second window
      WHERE (LogonEvent.event_id=4624 AND LogonEvent.type=3 AND LogonEvent.user IN Administrators)
      IS FOLLOWED BY (ProcessEvent.event_id=4688 AND ProcessEvent.name IN ('cmd.exe', 'powershell.exe') AND ProcessEvent.IntegrityLevel=High)
      ENRICH with network data for source_ip
      THEN ALERT
- question: Has an administrative user launched an uncommon process or logged in from a statistically rare source subnet immediately following a remote logon?
  context: Administrators typically have predictable post-logon behavior and log in from specific management subnets. A deviation from this, such as launching an unusual tool or logging in from a user VLAN or an external IP, is anomalous. This question uses frequency analysis and baselining to detect such behavioral outliers.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Domain Controllers
  - Member Servers
  - Administrative Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: For each admin user, baseline common processes launched after remote logon and common source subnets.
      // Step 2: For each new remote admin logon:
      IF process_launched NOT IN user_baseline OR source_subnet NOT IN user_baseline
      THEN ALERT
- question: Has a time-series anomaly detection model detected a coordinated spike in remote administrative logons followed by shell creation, originating from a single source?
  context: A widespread lateral movement campaign might use this UAC bypass technique across many machines in a short period, originating from a single compromised host. A time-series model can detect this sudden, anomalous increase in activity from one source IP, which would be a strong indicator of a coordinated attack.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - Domain Controllers
  - Member Servers
  - Administrative Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Aggregate remote-logon-plus-shell events by source IP over time.
      APPLY Seasonal-Hybrid ESD model to the time-series for each source IP.
      IF model detects a significant anomaly (spike)
      THEN ALERT on the source IP and affected hosts.
- question: Following a suspected UAC bypass, was a command executed to disable security tools, clear event logs, or otherwise degrade defenses?
  context: A primary goal after gaining elevated privileges is to disable security controls to operate undetected. This question uses stateful correlation to link a UAC bypass event with a subsequent, known defense evasion command (e.g., stopping antivirus, clearing logs, disabling the firewall) to increase alert severity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events on the same host within a 5-minute window
      IF (UAC_Bypass_Alert)
      IS FOLLOWED BY (Process creation where command_line MATCHES ('wevtutil.exe cl', 'netsh advfirewall set', 'Set-MpPreference -Disable'))
      THEN ESCALATE alert priority
- question: Did a high-integrity process execute a command with a statistically high 'Defense Evasion Score' based on its keywords?
  context: Defense evasion commands often contain specific keywords like 'disable', 'stop', or 'clear'. By assigning a weighted score to command lines based on these keywords, we can statistically identify commands that are outliers for a given process, indicating a likely evasion attempt even if the exact command is novel.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each command executed by a high-integrity process:
      CALCULATE defense_evasion_score based on weighted keywords.
      COMPARE score to historical distribution for that process name.
      IF score > 99th_percentile
      THEN ALERT
- question: Has a text classification model identified a command line, executed by a high-integrity process, as a likely defense evasion attempt?
  context: A machine learning model trained on labeled command lines can learn to recognize the patterns of defense evasion, including obfuscated or complex commands. This allows for the real-time scoring of all commands executed by elevated processes to find malicious activity that static signatures would miss.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each command executed by a high-integrity process:
      VECTORIZE command_line using TF-IDF.
      PREDICT classification using Naive Bayes model.
      IF classification == 'defense-evasion'
      THEN ALERT with prediction score.
- question: Did a process from a UAC bypass chain inject code into a high-integrity system process or cause an elevated process to load an unsigned or unusually located DLL?
  context: To hide their malware, adversaries often inject its code into a legitimate, trusted system process. Another technique is to have an elevated process load a malicious DLL. This question looks for direct evidence of these actions (e.g., Sysmon Event ID 8 or 7) originating from a process associated with a recent UAC bypass.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for CreateRemoteThread (Sysmon ID 8) OR ImageLoad (Sysmon ID 7) events
      WHERE (SourceProcess was involved in recent UAC_Bypass_Alert AND TargetProcess is system_critical)
      OR (LoadingProcess has high integrity AND LoadedImage is unsigned OR LoadedImage path is in '%TEMP%' or '%APPDATA%')
      THEN ALERT
- question: Has a high-integrity process loaded a DLL that is statistically rare for that process or has a file path with unusually high entropy?
  context: Legitimate processes typically load a predictable set of DLLs from standard system locations. A process loading a DLL that is rarely seen with it, or is loaded from a path with high character entropy (suggesting randomization), is a strong anomaly indicator for process hijacking or malicious DLL loading.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Baseline normal DLLs loaded per process and their prevalence.
      // Step 2: For each ImageLoad event by a high-integrity process:
      CALCULATE dll_prevalence_score
      CALCULATE dll_path_entropy
      IF dll_prevalence_score < 0.1% OR dll_path_entropy is high
      THEN ALERT
- question: Has a graph-based anomaly detection model identified an anomalous process/DLL interaction following a suspected UAC bypass?
  context: System activity can be modeled as a graph where processes and DLLs are nodes. A model trained on this graph can learn normal structures. After a UAC bypass, analyzing the subgraph of subsequent activity can reveal anomalous structures, such as a process loading an unusual combination of DLLs, which might indicate a sophisticated evasion technique.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 8
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Administrative Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // After a UAC bypass alert:
      CONSTRUCT subgraph of subsequent process/DLL interactions (loads, injections).
      APPLY graph anomaly detection model.
      IF model flags the subgraph structure as anomalous
      THEN ALERT
- question: Did a high-integrity process, spawned from a UAC bypass, write an executable file to a non-standard or user-writable directory?
  context: After gaining elevated privileges, adversaries often drop their next-stage tools or payloads onto the file system. Writing an executable file to a temporary or user-specific directory (like %APPDATA% or C:\Users\Public) from a high-integrity process is highly suspicious and a common indicator of malware staging.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File Servers
  - User Workstations
  - Administrative Workstations
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for FileCreate events (Sysmon ID 11)
      WHERE process was involved in recent UAC_Bypass_Alert
      AND process_integrity_level == High
      AND target_filename ends with ('.exe', '.dll', '.ps1', '.bat')
      AND target_filepath is in ('%APPDATA%', '%TEMP%', 'C:\Users\Public\')
      THEN ALERT
- question: Has a high-integrity process exhibited a statistically anomalous volume of file operations, exceeding its normal baseline?
  context: Processes like data staging tools or ransomware, running with elevated privileges, will access a much higher volume of files than the benign version of the process would. By baselining the normal file activity for each process, we can use statistical methods (like IQR) to detect a sudden, anomalous spike in file reads or writes.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File Servers
  - User Workstations
  - Administrative Workstations
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Step 1: Baseline file operation volume (count, bytes) per hour for each high-integrity process.
      // Step 2: For each process, monitor file operation volume.
      IF volume > (Q3 + 1.5 * IQR) of historical baseline
      THEN ALERT
- question: Has an Isolation Forest model flagged a file system operation by a high-integrity process as a significant outlier?
  context: An Isolation Forest is an effective machine learning model for anomaly detection. By training it on features of benign file system activity (process name, path, access type), it can learn to isolate and score anomalous operations. This can detect novel malicious file activity that doesn't fit pre-defined rules.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File Servers
  - User Workstations
  - Administrative Workstations
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each file operation by a high-integrity process:
      EXTRACT features (process_name, file_path_tokens, access_type, file_extension)
      APPLY trained Isolation Forest model.
      IF anomaly_score is high
      THEN ALERT
- question: Did a high-integrity process, especially one that is unsigned or running from an unusual path, initiate an outbound network connection to a non-standard port or a known malicious domain?
  context: Once an adversary has elevated privileges, they often establish a command and control (C2) channel. This question looks for suspicious network connections from an elevated process, such as one that is unsigned, running from a temp folder, connecting to a non-web port, or contacting a domain on a threat intelligence list.
  answer_sources:
  - Sysmon Event ID 3
  - Windows Event ID 5156
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for Network Connection events (Sysmon ID 3)
      WHERE process_integrity_level == High
      AND (process_is_unsigned OR process_path is non-standard)
      AND (destination_port NOT IN (80, 443) OR destination_ip IN (threat_intel_feed))
      THEN ALERT
- question: Did a high-integrity process exhibit statistically anomalous network behavior, such as a sudden spike in destination domain entropy or an unusually high volume of outbound data?
  context: Malicious C2 activity can be identified statistically. Domain Generation Algorithms (DGAs) result in high-entropy domain names. Data exfiltration results in an anomalously high volume of outbound data for a process that normally sends little. This question applies statistical measures to find these C2 and exfiltration indicators.
  answer_sources:
  - Sysmon Event ID 3
  - Windows Event ID 5156
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For each high-integrity process:
      CALCULATE shannon_entropy of destination domains over a rolling window.
      MEASURE outbound data volume.
      IF entropy spikes OR data_volume > 99th_percentile of historical baseline
      THEN ALERT
- question: Has a machine learning model detected an anomalous network traffic pattern, such as C2-like beaconing or a significant deviation in traffic volume, from a high-integrity process?
  context: Machine learning can identify complex patterns of malicious network activity. A time-series model can flag sudden spikes in data volume that indicate exfiltration. A clustering algorithm can group connection metadata to find small, distinct clusters that represent beaconing behavior, which is characteristic of C2 channels.
  answer_sources:
  - Sysmon Event ID 3
  - Windows Event ID 5156
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Network Egress Points
  - DNS Servers
  - User Workstations
  - Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Time-series approach:
      APPLY ARIMA model to outbound traffic volume per process. Alert on significant deviation.
      // Clustering approach:
      CLUSTER connection metadata (port, protocol, volume, frequency). Alert on small, outlier clusters indicating beaconing.