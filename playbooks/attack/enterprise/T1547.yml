name: T1547: Boot or Logon Autostart Execution
id: c8f9b9a8-7f6e-4b5a-9c3d-1e2f3a4b5c6d
description: This playbook helps identify adversaries using Boot or Logon Autostart
  Execution (T1547) for persistence and privilege escalation. It focuses on detecting
  the creation of malicious files or registry keys in autostart locations, the execution
  of obfuscated scripts, modifications occurring outside of authorized change windows,
  and autostarted processes beaconing to command-and-control servers. It also addresses
  privilege escalation attempts, such as the creation of malicious services running
  as LocalSystem, the abuse of administrative command-line tools to create privileged
  autostart entries, the loading of unauthorized DLLs by system processes, and the
  execution of SYSTEM-level processes from unusual, user-writable locations.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a new autostart entry, such as a file in a startup folder or a registry
    autorun value, associated with a known malicious hash, filename, or value from
    threat intelligence feeds?
  context: Adversaries often use known malware or tools for persistence. This question
    aims to detect these high-confidence indicators by monitoring common autostart
    locations for new entries and comparing their file hashes or registry values
    against a high-fidelity threat intelligence feed. A match is a strong indicator
    of compromise.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows workstations and servers; specifically, user profile startup directories
    (e.g., %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup), system-wide startup
    folders, and the HKLM/HKCU hives of the Windows Registry.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH file_creation OR registry_set_events WHERE location IN (autostart_locations)
      | LOOKUP threat_intel ON file_hash OR registry_value | WHERE threat_intel_match
      = true | ALERT
- question: Is a new executable or registry value in an autostart location statistically
    rare or uncommon across the enterprise?
  context: Legitimate software installations often result in common executable names
    and registry values appearing across many systems. Adversary tools are often
    unique or randomly named. This question seeks to identify outliers by establishing
    a baseline of all autostart entries and alerting on new entries whose names or
    values are highly infrequent (e.g., in the bottom 5th percentile), suggesting
    they are not part of a standard software deployment.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows workstations and servers; specifically, user profile startup directories
    (e.g., %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup), system-wide startup
    folders, and the HKLM/HKCU hives of the Windows Registry.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH autostart_modification_events | STATS frequency(executable_name,
      registry_value) over 90d | IDENTIFY entries with frequency < 5th_percentile
      | ALERT
- question: Does a new autostart entry exhibit features (e.g., high entropy, unsigned,
    unusual path) that a machine learning model classifies as likely malicious?
  context: This question leverages a machine learning model to move beyond simple
    IOC matching or rarity analysis. By training a model on features like file path,
    filename entropy, PE header data, and digital signature status, it can predict
    the probability that a new autostart entry is malicious. This approach can detect
    novel threats that might evade other detection methods.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Windows workstations and servers; specifically, user profile startup directories
    (e.g., %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup), system-wide startup
    folders, and the HKLM/HKCU hives of the Windows Registry.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM autostart_modification_events | EXTRACT features (path, entropy,
      signature) | PREDICT malicious_probability with ML_model | WHERE probability
      > 0.85 | ALERT
- question: Has a scripting engine been executed from an autostart entry with suspicious
    or obfuscated command-line arguments?
  context: Adversaries frequently use scripting engines like PowerShell with obfuscated
    commands to hide their activity. This question looks for process creation events
    originating from autostart mechanisms that invoke scripting engines with tell-tale
    signs of malicious intent, such as Base64 encoding flags ('-enc'), hidden window
    styles ('-w hidden'), or commands that bypass execution policies ('-nop').
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - All Windows endpoints and servers, especially those with advanced PowerShell
    logging enabled; Windows Registry HKLM/HKCU hives.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation WHERE process_name IN (powershell.exe, cscript.exe)
      AND command_line MATCHES ('-enc', '-w hidden') | TRACE process_ancestry to
      autostart_mechanism | ALERT
- question: Does the command line of an autostarted script have an unusually high
    entropy score compared to a baseline of legitimate scripts?
  context: Obfuscation techniques, such as character substitution, encoding, and
    encryption, significantly increase the randomness or entropy of a command line.
    This question aims to detect such techniques by calculating the entropy of command-line
    arguments for all autostarted scripts, comparing it to a learned baseline, and
    flagging executions with abnormally high entropy as suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - All Windows endpoints and servers, especially those with advanced PowerShell
    logging enabled; Windows Registry HKLM/HKCU hives.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation WHERE parent is autostart_mechanism | CALCULATE
      entropy(command_line) | WHERE entropy > 95th_percentile_baseline | ALERT
- question: Does an NLP model classify the command line of an autostarted script
    as malicious?
  context: This question applies Natural Language Processing (NLP) to analyze the
    structure, syntax, and components of a command line. By training a model on known
    benign and malicious script commands, it can learn to identify complex malicious
    patterns that regex or entropy analysis might miss, providing a more sophisticated
    layer of detection for script-based persistence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - All Windows endpoints and servers, especially those with advanced PowerShell
    logging enabled; Windows Registry HKLM/HKCU hives.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM autostart_script_process_events | ANALYZE command_line with NLP_model
      | PREDICT risk_score | WHERE risk_score > threshold | ALERT
- question: Was a modification made to an autostart location that does not correlate
    with an approved change management ticket or software deployment?
  context: Legitimate changes to autostart locations typically happen during software
    installation or system patching, which should be documented. This question seeks
    to identify unauthorized changes by correlating autostart modifications with a
    time-bound allowlist of expected activities derived from change management and
    software deployment logs. Any modification outside of this allowlist is highly
    suspect.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Change management database, software deployment servers, all Windows endpoints
    and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH autostart_modification_events | LOOKUP change_management_logs on
      (timestamp, hostname) | WHERE NOT correlated_change_ticket | ALERT
- question: Has a host experienced an anomalous spike in the rate of autostart modifications
    compared to its own historical baseline?
  context: While some autostart modifications are normal, a sudden burst of changes
    on a single machine can indicate malicious activity, such as an adversary establishing
    multiple persistence mechanisms. This question uses time-series analysis to model
    the normal rate of change for each host and alerts when a statistically significant
    deviation (e.g., >3 standard deviations) occurs.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Change management database, software deployment servers, all Windows endpoints
    and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: TIMESERIES count(autostart_modification_events) by host | DETECT anomalous_spike
      where count > 3_std_dev from baseline | ALERT
- question: Is an autostart modification event a statistical outlier when clustered
    with other similar events?
  context: Legitimate modifications, especially from software installers, tend to
    be similar in terms of the process making the change, time of day, and user context,
    forming dense clusters of activity. This question uses a clustering algorithm
    (like DBSCAN) to group these normal events and identify modifications that do
    not fit into any cluster, flagging them as anomalous outliers likely representing
    non-standard or malicious behavior.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Change management database, software deployment servers, all Windows endpoints
    and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH autostart_modification_events | CLUSTER by (process_name, user,
      hour_of_day) | IDENTIFY events classified as noise/outlier | ALERT
- question: Is an autostarted process making network connections to a known malicious
    IP/domain or a newly registered domain?
  context: A common goal for persistence is to establish a command-and-control (C2)
    channel. This question aims to detect this by correlating processes launched
    from autostart locations with their subsequent outbound network connections. It
    enriches the destination IP/domain with threat intelligence and flags any connection
    to a known C2 server or a domain registered too recently to be trustworthy.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Network egress points (Firewalls, Proxies), DNS servers, all Windows endpoints
    and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation from autostart | JOIN network_connection on process_guid
      | LOOKUP threat_intel on destination_ip | WHERE intel_category = C2 OR domain_age
      < 30d | ALERT
- question: Is an autostarted process exhibiting beaconing behavior to a destination
    that is rare across the enterprise?
  context: C2 communication is often automated, resulting in highly regular, periodic
    network connections (beaconing). This question seeks to identify this pattern
    by analyzing the time intervals between connections from an autostarted process.
    A very low standard deviation in these intervals suggests machine-generated traffic.
    When this beaconing is directed to a destination contacted by very few other hosts,
    it is a strong indicator of C2 activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Network egress points (Firewalls, Proxies), DNS servers, all Windows endpoints
    and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_connections | GROUPBY src_ip, dst_ip | CALCULATE std_dev(inter_arrival_time)
      | WHERE std_dev is very_low AND dst_ip_rarity > 99th_percentile | ALERT
- question: Can future network connections from an autostarted process be predicted
    with high accuracy by a time-series model?
  context: This question provides another method for detecting automated C2 beaconing.
    It applies a time-series forecasting model to the connection history of a process.
    If the model can accurately predict when the next connection will occur, it implies
    a programmatic, non-human pattern. Combining a high-confidence forecast with
    a rare or low-reputation destination creates a high-fidelity alert for C2 communications.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Network egress points (Firewalls, Proxies), DNS servers, all Windows endpoints
    and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM network_connections for autostart_process | FORECAST next_connection_time
      with ARIMA_model | WHERE forecast_confidence > 0.95 AND destination_reputation
      is low | ALERT
- question: Has a new Windows service been created to run as 'LocalSystem' with an
    executable that is a known malicious hash?
  context: Adversaries create or modify services to run with the highest privileges
    (LocalSystem) for persistence and escalation. This question targets this behavior
    by monitoring for new service creation or modification events. It specifically
    checks if the service is configured to run as LocalSystem and if the associated
    executable's hash matches a known indicator of compromise from a threat intelligence
    feed.
  answer_sources:
  - Windows Event ID 7045
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Domain Controllers, critical application servers, administrator workstations,
    and the Windows Registry HKLM\SYSTEM hive.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation OR service_registry_mod | WHERE account = 'LocalSystem'
      | LOOKUP threat_intel on file_hash | WHERE threat_intel_match = true | ALERT
- question: Has a new service been created to run as SYSTEM where its executable
    path is statistically rare or has high entropy?
  context: Legitimate system services are typically located in standard, protected
    directories like System32. Adversaries often place their malicious service executables
    in non-standard, user-writable locations (e.g., C:\Temp). This question identifies
    suspicious services by baselining common service paths and flagging any new service
    running as SYSTEM whose path is statistically uncommon or has a randomly generated,
    high-entropy name.
  answer_sources:
  - Windows Event ID 7045
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Domain Controllers, critical application servers, administrator workstations,
    and the Windows Registry HKLM\SYSTEM hive.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation WHERE account = 'LocalSystem' | STATS frequency(ImagePath)
      | WHERE ImagePath_frequency < 1st_percentile OR ImagePath IN ('C:\Users\*',
      'C:\Temp\*') | ALERT
- question: Does a machine learning model classify a new service creation event as
    high-risk based on its attributes?
  context: This question uses a machine learning classifier to assess the risk of
    newly created services. The model considers a combination of features, such as
    the service's executable path, the account it runs as, the parent process that
    created it, and the executable's signature status. This holistic approach can
    detect suspicious services that may not trigger simpler, single-indicator rules.
  answer_sources:
  - Windows Event ID 7045
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Domain Controllers, critical application servers, administrator workstations,
    and the Windows Registry HKLM\SYSTEM hive.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM service_creation_events | EXTRACT features (ImagePath, ServiceAccount,
      ParentProcess, Signature) | PREDICT risk_score with ML_model | WHERE risk_score
      > high_threshold | ALERT
- question: Has an administrative utility (sc.exe, schtasks.exe, reg.exe) been used
    to create a privileged autostart entry from an unusual parent process like an
    Office application?
  context: Adversaries can abuse legitimate command-line tools to create persistence
    mechanisms. While an administrator might use these tools, it's highly suspicious
    if they are spawned by a non-administrative parent process, such as Microsoft
    Word or Outlook, which could indicate a successful phishing attack. This question
    looks for these anomalous parent-child relationships.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; command-line audit logs.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation WHERE process_name IN ('sc.exe', 'schtasks.exe',
      'reg.exe') AND command_line contains ('create', '/ru SYSTEM') | WHERE parent_process_name
      IN ('winword.exe', 'outlook.exe') | ALERT
- question: Is an administrative utility like sc.exe or schtasks.exe being executed
    by a parent process that is statistically anomalous compared to a baseline of
    normal administrative activity?
  context: Beyond just looking for Office applications, this question builds a comprehensive
    baseline of all normal parent processes for key administrative utilities. It then
    flags any execution of these utilities where the parent process is a statistical
    outlier, helping to identify abuse from any unexpected source, not just a predefined
    list.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; command-line audit logs.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: BUILD baseline of parent_process for ('sc.exe', 'schtasks.exe') | SEARCH
      process_creation of admin_utility | WHERE parent_process is not in baseline
      | ALERT
- question: Is the command-line invocation of an administrative utility identified
    as an outlier by an anomaly detection model?
  context: Adversaries may use legitimate parent processes but construct unusual
    or complex command lines to achieve their goals. This question uses an anomaly
    detection model (like a one-class SVM) on the vectorized command-line arguments.
    It learns what normal administrative commands look like and flags any new command
    that deviates significantly from that learned pattern.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; command-line audit logs.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM command_lines for admin_utilities | VECTORIZE arguments | PREDICT
      is_outlier with one-class_SVM_model | WHERE is_outlier = true | ALERT
- question: Has a privileged system process loaded a DLL that is unsigned or not
    on its established allowlist of known-good modules?
  context: A technique known as DLL hijacking involves tricking a privileged process
    into loading a malicious DLL at startup. This question aims to detect this by
    monitoring DLL load events for critical system processes (e.g., winlogon.exe,
    services.exe). It maintains a strict allowlist of expected DLLs for each process
    and alerts on any deviation, especially the loading of an unsigned DLL.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; System32/SysWOW64 directories for baseline
    comparison.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH dll_load_events WHERE process_name IN (privileged_processes) |
      WHERE (dll_path NOT IN process_allowlist) OR (dll_is_signed = false) | ALERT
- question: Has a privileged system process loaded a DLL from a statistically unusual
    path or a path with high entropy?
  context: Similar to service executables, legitimate DLLs for system processes reside
    in standard, protected locations. Adversaries may place malicious DLLs in user-writable
    or obscure directories. This question establishes a baseline of normal DLL load
    paths for each privileged process and flags any load event from a statistically
    rare path (e.g., C:\ProgramData) or a path that appears randomly generated.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; System32/SysWOW64 directories for baseline
    comparison.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH dll_load_events WHERE process_name IN (privileged_processes) |
      STATS frequency(dll_path) | WHERE dll_path_frequency < 1st_percentile OR path_entropy
      > high_threshold | ALERT
- question: Does the sequence of DLLs loaded by a privileged process at boot time
    deviate significantly from its normal, learned sequence?
  context: This question uses a more advanced, sequence-aware approach to detect
    DLL hijacking. It trains a model (like an LSTM autoencoder) on the normal order
    and combination of DLLs loaded by a process during a healthy boot. It then flags
    any boot sequence that the model cannot reconstruct accurately, indicating an
    anomalous deviation, such as an extra DLL being loaded out of order.
  answer_sources:
  - Sysmon Event ID 7
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; System32/SysWOW64 directories for baseline
    comparison.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM dll_load_sequence per process per boot | PREDICT reconstruction_error
      with LSTM_autoencoder | WHERE reconstruction_error > high_threshold | ALERT
- question: Is a process running as 'NT AUTHORITY\SYSTEM' from an unsigned executable
    located in a user-writable directory?
  context: It is highly irregular for a process with the highest system privileges
    to execute from a common user-writable location like C:\Users or C:\Temp. This
    is a classic indicator of privilege escalation. This question creates a high-confidence
    rule to detect this specific combination of attributes: SYSTEM-level user, a
    path in a user-writable directory, and an unsigned executable.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; User profile directories and temporary folders.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation | WHERE user = 'NT AUTHORITY\SYSTEM' AND image_path
      IN ('C:\Users\*', 'C:\Temp\*', 'C:\ProgramData\*') AND is_signed = false | ALERT
- question: Is a process running as SYSTEM from an executable path that is extremely
    rare across the entire enterprise?
  context: Legitimate SYSTEM processes typically run from a limited set of common,
    well-known paths. This question leverages the power of enterprise-wide visibility
    by creating a frequency table of all paths for SYSTEM processes. It then alerts
    when a new SYSTEM process executes from a path that has been seen on very few
    (or no) other hosts, indicating it is not part of any standard software or OS
    function.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; User profile directories and temporary folders.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation WHERE user = 'NT AUTHORITY\SYSTEM' | STATS enterprise_frequency(image_path)
      | WHERE frequency < 1st_percentile | ALERT
- question: Is a new process running as SYSTEM identified as a novelty or outlier
    by a machine learning model?
  context: This question employs a novelty detection algorithm to build a comprehensive
    profile of what legitimate SYSTEM processes look like, based on features like
    image path, parent process, and file signature. The model then identifies any
    new SYSTEM process that does not conform to this established baseline, allowing
    it to catch novel or previously unseen privilege escalation techniques.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers; User profile directories and temporary folders.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM process_creation WHERE user = 'NT AUTHORITY\SYSTEM' | EXTRACT features
      (path, parent, signature) | PREDICT is_novelty with one-class_SVM_model | WHERE
      is_novelty = true | ALERT