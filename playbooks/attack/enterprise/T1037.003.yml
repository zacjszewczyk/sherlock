name: "T1037.003: Network Logon Script"
id: "7d3a8f9c-1b0e-4a6f-8d2c-9e5b7a1c0f4d"
description: "This playbook helps investigate whether an adversary is using network logon scripts for persistence or privilege escalation. Key investigative areas include detecting logon scripts that spawn processes matching known malicious indicators, execute commands with obfuscated or suspicious content (like high-entropy strings or LOLBins), establish C2-like network connections, or execute commands associated with privilege escalation exploits. The playbook also focuses on identifying unauthorized or anomalous modifications to logon script files in SYSVOL/Netlogon shares and detecting when scripts execute with unexpectedly elevated privileges."
type: "technique"
related:
  - "TA0003: Persistence"
  - "TA0004: Privilege Escalation"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
investigative_questions:
  - question: "Are there any process creation events where a logon script interpreter spawns a child process whose hash or command line matches known malicious indicators?"
    context: "This question aims to directly detect the execution of known malware or malicious tools via logon scripts. Adversaries often use this persistence mechanism to launch their payloads. By cross-referencing process hashes and command-line arguments against threat intelligence, analysts can quickly identify confirmed malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Domain Controllers, Member Servers, User Workstations, DNS Servers"
    range: "last 90 days"
    queries:
      - query: |
          SEARCH process_creation_events (WinEventID:4688)
          WHERE parent_process_name IN ('cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe')
          JOIN child_process_hash, command_line_arguments WITH threat_intelligence_feed
          RETURN events with matches
  - question: "Has a logon script spawned a child process or used command-line arguments that are statistically rare compared to its historical behavior?"
    context: "This question seeks to identify anomalous behavior that might not be caught by signature-based detection. A logon script that normally only spawns a few specific processes suddenly spawning a new, unseen process is highly suspicious. This statistical approach helps detect novel or customized malware by baselining normal activity and flagging deviations."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Domain Controllers, Member Servers, User Workstations, DNS Servers"
    range: "last 90 days"
    queries:
      - query: |
          FOREACH unique_logon_script:
            PROFILE historical child_processes and arguments
            CALCULATE frequency of each
          SEARCH new process_creation_events from logon_script
          ALERT IF new child_process or arguments are statistically rare (<1% historical frequency)
  - question: "Can machine learning classify a logon script's process execution as malicious based on features like command-line structure and user context?"
    context: "This question leverages machine learning to automate the detection of malicious script executions. By training a model on various features of known benign and malicious processes, it can learn to identify suspicious patterns that are too complex for simple rules. This provides a scalable way to assign a risk score to every logon script execution, prioritizing the most likely threats for analyst review."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Domain Controllers, Member Servers, User Workstations, DNS Servers"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = train_classifier(features=[cmd_length, entropy, keywords, parent_process, user])
          FOREACH new process_creation_event from logon_script:
            EXTRACT features
            SCORE = MODEL.predict(features)
            ALERT IF SCORE is malicious
  - question: "Are logon scripts executing commands containing common obfuscation patterns or invoking LOLBins for malicious purposes?"
    context: "This question focuses on detecting malicious intent within command lines, even if the executed binary is legitimate. Adversaries use obfuscation (e.g., Base64 encoding in PowerShell) and LOLBins (Living Off the Land Binaries) to hide their actions. Searching for these patterns helps uncover the true purpose of a script's execution."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers, Member Servers, User Workstations"
    range: "last 90 days"
    queries:
      - query: |
          SEARCH process_creation_events (WinEventID:4688)
          WHERE parent_is_logon_script_interpreter
          AND command_line MATCHES REGEX for ('-enc', 'FromBase64String', 'certutil -urlcache', 'bitsadmin /transfer')
          RETURN matching events
  - question: "Is a logon script executing a command line with abnormally high character entropy or a high ratio of non-alphanumeric characters?"
    context: "This question uses statistical metrics to find obfuscated commands. Malicious scripts, especially those that are encoded or encrypted, often have higher character entropy and a different character distribution than benign text-based commands. Baselining normal script commands and alerting on outliers can effectively detect hidden malicious code."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers, Member Servers, User Workstations"
    range: "last 90 days"
    queries:
      - query: |
          BASELINE entropy and non_alphanumeric_ratio for all logon script commands
          FOREACH new process_creation_event from logon_script:
            CALCULATE entropy, non_alphanumeric_ratio of command_line
            ALERT IF metrics > 99th_percentile_of_baseline
  - question: "Is an autoencoder model flagging any logon script command lines as anomalous based on their structure?"
    context: "This question applies unsupervised machine learning to detect novel malicious commands. An autoencoder trained on benign command lines learns to reconstruct 'normal' inputs accurately. When a malicious, structurally different command is provided, the model will have a high reconstruction error, flagging it as an anomaly without prior knowledge of the specific threat."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers, Member Servers, User Workstations"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = train_autoencoder(benign_logon_script_commands)
          FOREACH new command_line from logon_script:
            RECONSTRUCTION_ERROR = MODEL.evaluate(command_line)
            ALERT IF RECONSTRUCTION_ERROR is high
  - question: "Have any logon script files in SYSVOL or Netlogon been modified by an unauthorized user account?"
    context: "This question aims to detect a key persistence technique where an adversary modifies a central logon script to affect many users. By monitoring file write events on these critical shares and comparing the modifying user against an allowlist of administrators, organizations can immediately detect unauthorized changes."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 5145"
      - "Domain Controllers (hosting SYSVOL/Netlogon shares)"
    range: "last 90 days"
    queries:
      - query: |
          SEARCH file_system_audit_logs (WinEventID:4663, 5145)
          WHERE file_path IN ('\\\\<DOMAIN>\\SYSVOL\\...', '\\\\<DOMAIN>\\NETLOGON\\...')
          AND access_type IS 'Write'
          AND user NOT IN (approved_admin_list)
          RETURN alert
  - question: "Have logon scripts been modified outside of normal business hours or established maintenance windows?"
    context: "This question uses time-based analysis to detect suspicious modifications. Legitimate changes to logon scripts typically happen during standard work hours. A modification occurring late at night or on a weekend is a strong indicator of malicious activity, as adversaries often operate off-hours to avoid detection."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 5145"
      - "Domain Controllers (hosting SYSVOL/Netlogon shares)"
    range: "last 90 days"
    queries:
      - query: |
          PROFILE timestamps of logon script modifications to create baseline of normal change windows
          SEARCH new file_modification_events
          ALERT IF event_timestamp is outside of baseline (e.g., >2 std dev from mean, or on weekend)
  - question: "Is a time-series anomaly detection algorithm detecting a statistically significant spike in logon script modification events?"
    context: "This question provides a more advanced method for detecting anomalous change activity. A time-series model can learn the normal rhythm of script modifications (e.g., a few changes on Tuesday mornings). It can then automatically flag any significant deviation from this learned pattern, such as a single unexpected change at 3 AM or a burst of changes, which could indicate an attack."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 5145"
      - "Domain Controllers (hosting SYSVOL/Netlogon shares)"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = train_timeseries_model(historical_count_of_script_modifications_per_hour)
          FOREACH new_hour:
            CURRENT_COUNT = count of modifications
            ALERT IF CURRENT_COUNT is a statistically significant anomaly based on MODEL forecast
  - question: "Is a process spawned by a logon script making a network connection to a known malicious IP or domain?"
    context: "This question directly links a persistence mechanism (logon script) to C2 activity. By correlating the process started by the script with its subsequent network traffic and checking the destination against threat intelligence, analysts can confirm a compromised host is communicating with an adversary's infrastructure."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points, DNS Servers, User Workstations"
    range: "last 90 days"
    queries:
      - query: |
          CORRELATE process_creation (WinEventID:4688) from logon_script with network_connections (Zeek) by process_id
          JOIN destination_ip, destination_domain with threat_intelligence_feed
          RETURN connections to malicious destinations
  - question: "Are network connections from logon script processes exhibiting signs of C2 beaconing or connections to DGA domains?"
    context: "This question looks for behavioral indicators of C2 communication in network traffic. Automated malware often beacons back to its C2 server at regular intervals (low variance in inter-arrival time) and may use Domain Generation Algorithms (DGA) to find its C2, resulting in high-entropy domain names. Detecting these patterns can uncover C2 channels that are not yet on threat intelligence blocklists."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points, DNS Servers, User Workstations"
    range: "last 90 days"
    queries:
      - query: |
          FILTER network_connections from logon_script_processes
          CALCULATE shannon_entropy of queried_domains to find DGA
          CALCULATE variance of inter-arrival_time to find beaconing
          ALERT on high entropy or low variance
  - question: "Is an Isolation Forest model flagging network connections from logon script processes as anomalous?"
    context: "This question uses unsupervised machine learning to find unusual network behavior. An Isolation Forest model can be trained on features of normal network traffic (port, protocol, duration, etc.) originating from logon scripts. It can then quickly identify and flag connections that are outliers, such as a script that normally makes no connections suddenly connecting to a rare port, indicating potential C2 activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points, DNS Servers, User Workstations"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = train_isolation_forest(features of benign network connections from logon scripts)
          FOREACH new_connection from logon_script_process:
            ANOMALY_SCORE = MODEL.predict(connection_features)
            ALERT IF ANOMALY_SCORE is high
  - question: "Are logon scripts executing commands containing strings or patterns associated with known Local Privilege Escalation (LPE) exploits or tools?"
    context: "This question aims to detect if an adversary is using a logon script to execute a known privilege escalation exploit. By searching command lines for specific keywords, tool names (e.g., 'JuicyPotato'), or artifacts (e.g., CLSIDs) associated with LPE techniques, analysts can find direct evidence of an attempt to escalate privileges on a host."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          SEARCH process_creation_events (WinEventID:4688)
          WHERE parent_is_logon_script_interpreter
          AND command_line MATCHES REGEX for ('JuicyPotato', 'PrintNightmare', 'efspotato.exe', 'PetitPotam')
          RETURN matching events
  - question: "Is a logon script executing a command that is extremely rare across the enterprise, even if common for that one script?"
    context: "This question helps identify a targeted exploit script that may have been deployed on a small number of machines. A command might appear 'normal' on a single machine if it runs frequently, but if it's virtually non-existent anywhere else in the organization, it is highly anomalous. Using a TF-IDF-like approach can highlight these suspicious, isolated commands."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          CALCULATE TF-IDF score for all command_strings executed by logon_scripts across the enterprise
          ALERT on commands with high TF-IDF scores, indicating high local frequency but low global frequency
  - question: "Can an NLP model identify clusters of anomalous commands executed by logon scripts that are semantically different from benign commands?"
    context: "This question uses advanced NLP to understand the 'meaning' of commands beyond simple keyword matching. By converting command lines into vector embeddings, a model can group them based on semantic similarity. Malicious commands, even if obfuscated or novel, will likely form distinct clusters away from the large groups of benign commands, allowing for their discovery."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = fine_tune_NLP_transformer(command_line_dataset)
          GENERATE embeddings for all new logon script commands
          CLUSTER embeddings using DBSCAN
          INVESTIGATE commands in outlier clusters
  - question: "Are logon scripts executing system utilities like 'net.exe' or 'sc.exe' with arguments that create or modify privileged users or services?"
    context: "This question looks for direct evidence of privilege escalation using standard Windows tools. While utilities like 'net.exe' are legitimate, their use within a logon script to add a user to the Administrators group or create a new system service is a classic, high-fidelity indicator of malicious activity."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers, Domain Controllers"
    range: "last 90 days"
    queries:
      - query: |
          SEARCH process_creation_events (WinEventID:4688) from logon_scripts
          WHERE command_line MATCHES ('net localgroup Administrators * /add', 'sc create * binPath=...', 'schtasks /create * /ru SYSTEM')
          RETURN high-fidelity alert
  - question: "Is a logon script using an administrative utility with a statistically rare combination of arguments?"
    context: "This question moves beyond fixed rules to find anomalous usage of legitimate tools. An administrative script might always use 'net user /active:yes', but an adversary might use 'net user newadmin password /add'. By baselining the common argument patterns for each utility, this method can flag the rare, malicious usage without needing a predefined signature."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers, Domain Controllers"
    range: "last 90 days"
    queries:
      - query: |
          PROFILE argument patterns for utilities (net.exe, sc.exe) used by logon scripts
          BASELINE frequency of each pattern
          ALERT on execution of a statistically rare argument pattern
  - question: "Is an RNN/LSTM model detecting an anomalous sequence of process executions following a user logon?"
    context: "This question models the entire logon session as a sequence of events. A machine learning model can learn the normal process flow for different users (e.g., logon -> script -> outlook.exe). If it suddenly observes an unexpected sequence, like a logon script spawning the service control manager ('sc.exe'), it can flag this break in the expected pattern as a potential privilege escalation attempt."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers, Domain Controllers"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = train_RNN_on_logon_process_sequences
          FOREACH new_logon_session:
            OBSERVE sequence of process creations
            ALERT IF sequence has high anomaly score from MODEL
  - question: "Did a suspicious command execute from a logon script shortly after that script was modified and a privileged user logged on?"
    context: "This question correlates multiple events to build a high-confidence alert for a specific attack chain: an adversary modifies a script, waits for a privileged user to log on, and the script then executes a malicious command with elevated rights. Tying together file modification, privileged logon, and suspicious process execution in a short time window is a powerful detection strategy."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "Domain Controllers, User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          CORRELATE_RULE:
          TRIGGER if (file_write on logon_script)
          AND (privileged_user_logon within 5 mins)
          AND (suspicious_command_execution from that script)
  - question: "Following a script modification, did a privileged user's logon script execute a command that is significantly different from their personal baseline?"
    context: "This question personalizes anomaly detection to the user level. Each user has a unique 'normal' for their logon script activity. After a script is modified, this method checks if the new commands are inconsistent with that specific user's history. A command that is a major departure (e.g., low string similarity) from the user's past activity is a strong signal of a targeted attack."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "Domain Controllers, User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          MAINTAIN baseline of commands per privileged user's logon script
          ON script_modification_event:
            COMPARE new commands to user's baseline using string_similarity
            ALERT on low similarity score
  - question: "Does a user activity graph show an anomalous path where a low-privilege user modifies a script that is later executed by a high-privilege user to run a novel command?"
    context: "This question uses graph analytics to visualize and detect complex attack paths. By modeling relationships between users, scripts, and commands, algorithms can identify and score risky chains of events that would be difficult to see with log-based queries alone. This is effective for spotting scenarios where one user's action enables a privilege escalation by another."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "Domain Controllers, User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          CONSTRUCT user-activity graph (nodes: users, scripts, commands)
          USE graph algorithms to find and score paths like:
          (low_priv_user) -> [modifies] -> (script) -> [executed_by] -> (high_priv_user) -> [runs] -> (anomalous_command)
  - question: "Did a logon script running under a standard user context spawn a process with a full, elevated administrative token?"
    context: "This question looks for direct evidence of a successful privilege escalation, such as a UAC bypass. In Windows, the 'TokenElevationType' field indicates the privilege level of a process. A value of 'Full' (%%1936) for a process spawned by a standard user's script is a definitive indicator that the process is running with elevated rights when it shouldn't be."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          SEARCH process_creation_events (WinEventID:4688) from logon_scripts
          WHERE SubjectUserName is non-administrative
          AND TokenElevationType IS '%%1936' (Full)
          RETURN high-confidence alert
  - question: "Has a user's logon script suddenly spawned a process with a higher-than-normal token elevation type compared to its baseline?"
    context: "This question establishes a behavioral baseline for privilege levels on a per-user basis. Most users' scripts will always spawn processes with a 'Default' or 'Limited' token. A sudden deviation where a script spawns a process with a 'Full' token is a strong statistical anomaly indicating a potential privilege escalation event for that specific user."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          BASELINE TokenElevationType for each user's logon script processes
          SEARCH new process_creation_events from logon_scripts
          ALERT IF TokenElevationType deviates from user's established baseline (e.g., changes from Limited to Full)
  - question: "Is a decision tree classifier flagging a logon script's process as a malicious elevation that violates learned legitimate elevation rules?"
    context: "This question uses a supervised machine learning model to distinguish between legitimate and malicious privilege escalations. A decision tree can learn the specific, approved conditions under which elevation is allowed (e.g., a specific admin running a specific tool). It can then flag any elevation event that does not match these learned rules, effectively identifying unauthorized privilege escalation."
    answer_sources:
      - "Windows Event ID 4688"
      - "User Workstations, Member Servers"
    range: "last 90 days"
    queries:
      - query: |
          MODEL = train_decision_tree(features=[Parent, User, TokenElevationType, CommandLine])
          FOREACH new process_creation_event from logon_script:
            ALERT IF MODEL classifies event as malicious_elevation