name: T1037.003: Network Logon Script
id: 5a8e0f9c-7d9b-4c2f-8a1e-6b0c3d4f5a6b
description: |
  This playbook helps investigate whether an adversary is leveraging network logon scripts for persistence or privilege escalation. It addresses the primary concerns of an adversary maintaining a foothold by executing malicious code upon user logon, or escalating their privileges by manipulating scripts executed by high-privilege accounts. The investigation focuses on detecting several key indicators: the execution of malicious processes identified by hash or command-line arguments; the use of obfuscated commands, high-entropy strings, or LOLBins; unauthorized or anomalously-timed modifications to logon script files in SYSVOL or Netlogon shares; network connections from script-spawned processes that exhibit Command and Control (C2) characteristics like beaconing or DGA; the execution of commands associated with known Local Privilege Escalation (LPE) exploits; the use of system utilities to create or modify privileged accounts and services; and the direct observation of a process spawned by a logon script running with an elevated integrity level.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are network logon scripts spawning processes whose hash or command line matches known malicious indicators?
  context: |
    This question aims to detect the most direct form of malicious execution via logon scripts. By comparing child processes against threat intelligence, analysts can quickly identify known malware or tools being deployed for persistence.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Threat Intelligence Feed
  - Domain Controllers, Member Servers, User Workstations, DNS Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH process creation events WHERE parent_process is logon_script_interpreter AND creator_process is logon_process.
      JOIN child_process_hash, child_process_commandline WITH threat_intelligence_feed.
- question: Are network logon scripts executing statistically rare or anomalous child processes and command-line arguments compared to their historical behavior?
  context: |
    Adversaries may use legitimate-looking processes with unusual arguments. This question helps detect novel or infrequent activity by baselining normal script behavior and flagging deviations, which can uncover previously unknown malicious techniques.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Workstations, DNS Servers
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each logon_script_path, GROUP BY child_process, command_line_arguments.
      CALCULATE frequency.
      ALERT if frequency < 1% of historical executions for that script.
- question: Can machine learning classify logon script executions as malicious based on features like command-line length, entropy, and keywords?
  context: |
    This question leverages a supervised machine learning model to automate the detection of malicious script executions. By training on a variety of features, the model can identify complex patterns that are difficult to capture with simple rules, providing a risk score for prioritization.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Workstations, DNS Servers
  range: last 90 days
  queries:
  - pseudocode: |
      EXTRACT features (command_line_length, entropy, keywords) from process_creation_events.
      INPUT features into trained classification model.
      ALERT on high malicious_risk_score.
- question: Are logon scripts executing commands that contain common obfuscation patterns or leverage Living Off the Land Binaries (LOLBins) for malicious activity?
  context: |
    Adversaries often use obfuscation (e.g., Base64 encoding in PowerShell) or LOLBins (e.g., certutil.exe) to hide their actions. This question uses pattern matching to find these well-known evasion techniques within command lines executed by logon scripts.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Workstations
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH process_creation_events WHERE parent_process is logon_script_interpreter.
      APPLY regex for obfuscation_patterns (e.g., '-enc', 'FromBase64String') OR LOLBin_usage (e.g., 'certutil -urlcache').
- question: Are there command lines executed by logon scripts with unusually high character entropy or a high ratio of non-alphanumeric characters?
  context: |
    Obfuscated or encoded payloads often have higher entropy than plain text commands. This question aims to identify potential obfuscation by establishing a baseline for command-line complexity and alerting on outliers that exceed a statistical threshold.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Workstations
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each command_line from logon_script_process, CALCULATE entropy and non_alphanumeric_ratio.
      ESTABLISH baseline distribution.
      ALERT if value > 99th_percentile.
- question: Can an autoencoder model detect anomalous command-line structures executed by logon scripts that deviate from learned benign patterns?
  context: |
    This question applies unsupervised machine learning to detect novel or unusual command-line arguments. By training an autoencoder on known-good data, any command that the model cannot accurately reconstruct is flagged as an anomaly, indicating it doesn't conform to normal patterns.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Workstations
  range: last 90 days
  queries:
  - pseudocode: |
      TOKENIZE command_line_arguments from logon_scripts.
      INPUT into trained autoencoder.
      ALERT on high reconstruction_error.
- question: Are logon script files in SYSVOL or Netlogon shares being modified by unauthorized user accounts?
  context: |
    Logon scripts are critical infrastructure and should only be modified by a small, authorized group of administrators. This question seeks to detect potential tampering by alerting on any write access to these scripts by an account not on a predefined allowlist.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 5145
  - Domain Controllers (hosting SYSVOL/Netlogon shares)
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH file_system_audit_logs for write_access on SYSVOL/NETLOGON script_paths.
      ALERT if modifying_user NOT IN admin_allowlist.
- question: Are logon scripts being modified outside of normal business hours or established maintenance windows?
  context: |
    Legitimate administrative changes typically occur during specific time windows. Adversaries may modify scripts at odd hours to avoid detection. This question establishes a baseline of normal modification times and flags any changes that occur at statistically unusual times.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 5145
  - Domain Controllers (hosting SYSVOL/Netlogon shares)
  range: last 90 days
  queries:
  - pseudocode: |
      PROFILE timestamps of logon_script_modifications.
      ESTABLISH baseline of normal_change_windows.
      ALERT if modification_time is > 2_std_dev from mean or on unusual_day.
- question: Is there a statistically significant spike in the frequency of logon script modifications, as detected by a time-series anomaly detection model?
  context: |
    This question uses a time-series model to learn the regular rhythm of logon script updates. It can detect subtle anomalies in the volume of changes, such as a single, unexpected modification at an odd hour or a flurry of changes, which might be missed by simple time-of-day rules.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 5145
  - Domain Controllers (hosting SYSVOL/Netlogon shares)
  range: last 90 days
  queries:
  - pseudocode: |
      APPLY time-series_anomaly_detection to hourly/daily count of script_modification_events.
      ALERT on statistically_significant_deviations from forecast.
- question: Are processes spawned by logon scripts making network connections to known malicious IP addresses or domains?
  context: |
    A common objective for malware deployed via logon script is to establish a command and control (C2) channel. This question correlates process and network data to check if any network destinations are present on threat intelligence blocklists, providing a high-fidelity indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network Egress Points, DNS Servers, User Workstations
  range: last 90 days
  queries:
  - pseudocode: |
      CORRELATE process_creation from logon_scripts WITH network_connections by process_id.
      JOIN destination_ip/domain WITH threat_intel_blocklist.
      ALERT on match.
- question: Do network connections from logon script processes exhibit C2 characteristics like high-entropy domains (DGA) or periodic beaconing?
  context: |
    Adversaries use techniques like Domain Generation Algorithms (DGA) and regular beaconing to maintain resilient C2 channels. This question analyzes network metadata to detect these behavioral indicators: high-entropy domains suggesting DGA, and low-variance time intervals between connections suggesting automated beaconing.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points, DNS Servers, User Workstations
  range: last 90 days
  queries:
  - pseudocode: |
      ANALYZE network_connections from logon_script_processes.
      CALCULATE domain_entropy and inter_arrival_time_variance.
      ALERT on high_entropy OR low_variance.
- question: Can an Isolation Forest model identify anomalous network connections from logon script processes based on features like port, protocol, and data volume?
  context: |
    This question uses an unsupervised anomaly detection model (Isolation Forest) to identify network connections that deviate from the norm. By learning the characteristics of benign traffic, the model can flag connections with unusual ports, protocols, or data transfer patterns as potentially malicious.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points, DNS Servers, User Workstations
  range: last 90 days
  queries:
  - pseudocode: |
      EXTRACT features (port, protocol, duration, bytes_sent) from network_connections.
      INPUT to trained Isolation_Forest_model.
      ALERT on high anomaly_score.
- question: Are logon scripts executing commands containing strings or patterns associated with known Local Privilege Escalation (LPE) tools or exploits?
  context: |
    Adversaries may use logon scripts to trigger exploits that escalate privileges on the local machine. This question uses specific, targeted regular expressions to search for the names and artifacts of known LPE tools and vulnerabilities (e.g., 'JuicyPotato', 'PrintNightmare') in command lines.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH process_creation_events where parent is logon_script_interpreter.
      APPLY regex for LPE_tool_strings (e.g., 'JuicyPotato', 'PetitPotam') in command_line.
- question: Are logon scripts executing commands that are extremely rare across the entire organization, suggesting a targeted exploit script?
  context: |
    An LPE exploit command might be used repeatedly by a single compromised script but would be highly unusual in the context of the entire enterprise. This question uses a TF-IDF-like approach to identify commands that are locally common but globally rare, highlighting potentially targeted attacks.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each command_line from logon_scripts, CALCULATE rarity_score (TF-IDF).
      ALERT on commands with high local frequency but low global frequency.
- question: Can NLP models and clustering identify semantically anomalous commands executed by logon scripts that may indicate novel LPE techniques?
  context: |
    This question uses advanced NLP to understand the 'meaning' of command lines, rather than just matching keywords. By converting commands to vector embeddings and clustering them, it can identify groups of unusual commands that are structurally different from all known benign commands, potentially revealing new or unknown exploits.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      GENERATE embeddings for command_lines using NLP_model.
      PERFORM clustering on embeddings.
      INVESTIGATE anomalous clusters.
- question: Are logon scripts using administrative utilities like 'net.exe' or 'sc.exe' to create or modify privileged accounts, services, or tasks?
  context: |
    While logon scripts may use system utilities, their use for creating new admin accounts or services is highly suspicious. This question uses high-fidelity rules to detect specific, dangerous command-line patterns that directly indicate a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers, Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH command_line_logs for sensitive_commands from logon_scripts, e.g., 'net localgroup Administrators ... /add' OR 'sc create ... binPath=...'
- question: Are logon scripts using administrative utilities with statistically rare argument patterns not seen in legitimate scripts?
  context: |
    Adversaries might use legitimate utilities in unusual ways. This question establishes a baseline of how administrative tools are normally used by logon scripts and flags any execution with a rare combination of arguments, which could indicate malicious use.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers, Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      BASELINE argument_patterns for admin_utilities used by logon_scripts.
      ALERT on execution of a statistically_rare_pattern.
- question: Does the sequence of processes executed during a logon session deviate from the learned normal pattern, such as a logon script being followed by an administrative tool?
  context: |
    This question models the entire logon process as a sequence of events. An RNN can learn the normal order of operations for different users. A deviation, such as a script suddenly spawning 'sc.exe', breaks the learned sequence and is flagged as anomalous, indicating a potential privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers, Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      MODEL sequence of process_executions during logon.
      INPUT new logon_session_sequence to RNN.
      ALERT on significant_deviation from learned_patterns.
- question: Is a suspicious command being executed from a recently modified logon script during a privileged user's logon session?
  context: |
    This is a classic attack chain: modify a script, wait for a privileged user to log on, and capture their privileges. This question uses a correlation rule to connect these three events—script modification, privileged logon, and suspicious command execution—within a short time window.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Domain Controllers, User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      CORRELATE: (1) script_write_event, (2) privileged_user_logon_event within 5 mins, AND (3) subsequent_suspicious_command_execution from that script.
- question: Following a script modification, is a privileged user's logon script executing commands that are significantly different from their personal historical baseline?
  context: |
    Privileged user logon scripts are often stable. This question detects targeted attacks by creating a personalized baseline for each privileged user's script activity. After a modification, any new command that is textually dissimilar to the user's past commands is flagged.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Domain Controllers, User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      ON script_modification_event, CAPTURE next logon_script_command for affected_user.
      CALCULATE string_similarity (e.g., Levenshtein) against user's command_history.
      ALERT on low_similarity_score.
- question: Can a graph-based analysis detect anomalous activity paths, such as a low-privilege user modifying a script that is later executed by a high-privilege user to run a novel command?
  context: |
    Privilege escalation can be a multi-step process. This question models the relationships between users, scripts, and commands as a graph. Machine learning algorithms can then identify and score risky paths that represent an entire attack chain, providing context that isolated alerts cannot.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Domain Controllers, User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      BUILD graph of (user)-[modifies]->(script)-[executes]->(command) with user_privilege attributes.
      USE graph ML to score risk of paths, e.g., low_priv_user -> modify -> script -> high_priv_user -> execute -> new_command.
- question: Is a logon script running under a standard user context spawning a process with a full, elevated administrator token, indicating a UAC bypass?
  context: |
    The 'TokenElevationType' field in Windows event logs explicitly states the privilege level of a new process. A standard user's script spawning a process with a 'Full' token (%%1936) is a direct and high-fidelity indicator of a successful User Account Control (UAC) bypass or similar exploit.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH process_creation_events WHERE parent is logon_script_interpreter AND user is non-admin AND TokenElevationType is 'Full' (%%1936).
- question: Is a user's logon script suddenly spawning processes with a higher privilege level than historically observed for that user?
  context: |
    This question detects changes in behavior by baselining the normal token elevation types for each user's logon script processes. A sudden shift from a 'Limited' or 'Default' token to a 'Full' token is a strong statistical anomaly indicating that an escalation has occurred.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each user, BASELINE TokenElevationType from logon_script_processes.
      ALERT if new process has 'Full' token when historical baseline is 'Limited' or 'Default'.
- question: Can a decision tree model distinguish between legitimate and malicious privilege elevations originating from logon scripts?
  context: |
    Not all elevations are malicious; some are expected. This question proposes training a decision tree to learn the specific, legitimate 'rules' for elevation (e.g., a specific admin running a specific tool). Any elevation that does not match these learned legitimate patterns is flagged as suspicious.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Member Servers
  range: last 90 days
  queries:
  - pseudocode: |
      TRAIN decision_tree on {user, parent_process, command_line, TokenElevationType}.
      PREDICT legitimacy of new elevations.
      ALERT on elevations that violate learned rules.