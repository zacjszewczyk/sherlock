name: T1547.008: LSASS Driver
id: 8c5a2b1f-7d9e-4a3b-8c6d-1f2a3b4c5d6e
description: This playbook focuses on detecting adversaries who are attempting to maintain persistence or escalate privileges by manipulating the Local Security Authority Subsystem Service (LSASS) process. Adversaries can achieve this by registering a malicious DLL as an LSA Security Package or Authentication Package. This allows their code to be loaded and executed by the high-privilege lsass.exe process. The playbook provides questions to help identify this activity by monitoring for modifications to the LSA Security Packages registry key, analyzing the properties of newly added DLLs (e.g., signature status, file path, enterprise prevalence), baselining normal module loads by lsass.exe, and detecting the specific command-line or script-based actions used to install these malicious drivers.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Has the LSA 'Security Packages' registry key been modified to include a DLL that matches a known malicious driver from threat intelligence feeds?
  context: Adversaries can achieve persistence by registering a malicious DLL as a Local Security Authority (LSA) driver. This question aims to detect this specific technique by monitoring the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages' registry key for modifications. It cross-references any newly added DLL names or their corresponding file hashes (from file creation events) against a threat intelligence database of known malicious LSA drivers. A match is a high-confidence indicator of a persistence attempt.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Domain Controllers
  - Tier 0 Servers (e.g., AD CS, ADFS)
  - Standard Enterprise Workstations
  - Threat Intelligence Platforms
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events WHERE registry_key = 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages'
      FOR EACH new_dll_name
        JOIN file_creation_events ON file_name = new_dll_name
        LOOKUP file_hash in threat_intelligence_feed
        IF match FOUND, ALERT
- question: Has a statistically rare or anomalous DLL been added to the LSA 'Security Packages' registry key, or is the modification rate for this key on a specific host unusually high?
  context: This question focuses on identifying malicious LSA drivers that are not yet known to threat intelligence. It operates on the principle that legitimate LSA drivers are common across an enterprise, while malicious ones are rare. By calculating the prevalence of each newly added DLL, we can flag those appearing on a very small percentage of endpoints. Additionally, an unusual frequency of modifications to this sensitive registry key on a single host can indicate attacker activity, such as trial and error or tool execution.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Domain Controllers
  - Tier 0 Servers (e.g., AD CS, ADFS)
  - Standard Enterprise Workstations
  - Threat Intelligence Platforms
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events WHERE registry_key = 'HKLM\...\Lsa\Security Packages'
      CALCULATE prevalence of new_dll_name across all hosts
      IF prevalence < 1%, ALERT

      MONITOR rate of modifications to 'HKLM\...\Lsa\Security Packages' per host
      IF rate > (3 * stdev(baseline)), ALERT
- question: Does a machine learning model classify a newly added LSA driver DLL as suspicious or malicious based on its intrinsic file properties?
  context: This question leverages a machine learning model to move beyond simple prevalence or signature matching. The model analyzes various features of a DLL file—such as its entropy (indicating packing or encryption), imported/exported functions, digital signature validity, and file size—to make a sophisticated judgment. This approach can detect novel or bespoke malicious LSA drivers that evade other detection methods by identifying characteristics commonly associated with malware.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Domain Controllers
  - Tier 0 Servers (e.g., AD CS, ADFS)
  - Standard Enterprise Workstations
  - Threat Intelligence Platforms
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON new DLL added to LSA registry path
      EXTRACT features (entropy, imports, signature, size, prevalence)
      INPUT features into classification_model
      IF model_output = 'suspicious' or 'malicious', ALERT
- question: Has a new LSA driver been registered from a non-standard file path (outside of C:\Windows\System32) or is the associated DLL unsigned or invalidly signed?
  context: Legitimate LSA drivers are almost always located in the 'C:\Windows\System32' directory and are digitally signed by Microsoft or a trusted vendor. Adversaries often place their malicious DLLs in other locations (like temporary or user-writable directories) to evade detection and avoid modifying system-protected files. This question checks for these tell-tale signs: a non-standard file path or a missing/invalid digital signature, which are strong indicators of a malicious LSA driver.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Sysmon Event ID 13
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - File Systems on Endpoints and Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events WHERE registry_key = 'HKLM\...\Lsa\Security Packages' AND dll_path NOT LIKE 'C:\Windows\System32\%'
      JOIN image_load_events ON dll_path
      IF loaded_dll_is_unsigned OR signature_is_invalid, ALERT
- question: Has a new LSA driver DLL been registered that is statistically rare across the enterprise, or does its file path have an unusually high string entropy?
  context: This question seeks to identify unusual LSA drivers by analyzing their prevalence and path characteristics. A DLL that is present on only a handful of systems is anomalous and warrants investigation. Furthermore, adversaries may use randomized directory or file names to evade signature-based detections. Calculating the string entropy of the file path can detect this randomness, as legitimate system paths typically have low entropy. A combination of low prevalence and high path entropy is highly suspicious.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Sysmon Event ID 13
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - File Systems on Endpoints and Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH new DLL in LSA registry key
        CALCULATE enterprise_prevalence(dll_name, dll_path)
        IF enterprise_prevalence < 5th_percentile, ALERT

        CALCULATE string_entropy(dll_path)
        IF entropy > threshold, ALERT
- question: Does a machine learning clustering model identify a newly registered LSA driver as an outlier compared to the population of known legitimate drivers?
  context: This question uses an unsupervised machine learning approach to find anomalous LSA drivers without prior labeling. By clustering all observed LSA drivers based on features like prevalence, location (System32 or not), signature status, and path entropy, the algorithm can group normal, legitimate packages together. Any driver that does not fit into a cluster (a "noise point") or forms a very small, isolated cluster is considered an anomaly and should be investigated as potentially malicious.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 7
  - Sysmon Event ID 13
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - File Systems on Endpoints and Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH new LSA package
        CREATE feature_vector (prevalence, in_system32, is_signed, path_entropy)
        INPUT vector into clustering_model
        IF model_classifies as 'noise' or 'small_cluster', ALERT
- question: Has the lsass.exe process loaded a DLL module whose hash is not on the pre-approved 'golden baseline' for that specific host's OS and role?
  context: The set of DLLs loaded by the critical LSASS process is typically stable and predictable for a given operating system version, patch level, and server role. This question involves creating a "golden baseline" or allow-list of known-good DLL hashes for different system configurations. Any deviation from this baseline—meaning lsass.exe loads a DLL not on the list—is a high-fidelity indicator of potential tampering, such as the loading of a malicious LSA driver.
  answer_sources:
  - Sysmon Event ID 7
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - Golden Images/Configuration Management Database (CMDB)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH image_load_events WHERE process_name = 'lsass.exe'
      LOOKUP loaded_module_hash in golden_baseline
      IF hash NOT FOUND in baseline, ALERT
- question: Has the number of DLLs loaded by lsass.exe deviated significantly from its historical baseline, or is the set of loaded modules substantially different from the expected 'golden' set?
  context: This question uses statistical baselining to detect anomalies in LSASS module loading behavior. A sudden increase in the number of loaded modules can indicate that an extra, malicious DLL has been loaded. This is compared against the host's own history and against its peer group. Additionally, the Jaccard similarity score provides a quantitative measure of how much the current set of loaded modules overlaps with the expected baseline. A low score signifies a significant and suspicious deviation.
  answer_sources:
  - Sysmon Event ID 7
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - Golden Images/Configuration Management Database (CMDB)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR count of DLLs loaded by lsass.exe per host
      IF count > (2 * stdev(baseline)), ALERT

      CALCULATE jaccard_similarity(current_modules, golden_baseline_modules)
      IF score < 0.98, ALERT
- question: Has a time-series anomaly detection model detected an abnormal sequence or timing of DLLs being loaded by the lsass.exe process?
  context: Beyond just *what* modules are loaded, the *order* and *timing* of their loading can be a stable pattern. This question applies a sophisticated time-series model (like an LSTM autoencoder) to learn this normal sequence. The model can then detect subtle anomalies, such as a malicious DLL being loaded out of order or at an unusual time relative to the boot process. A high reconstruction error from the model indicates that the observed sequence is not normal and warrants investigation.
  answer_sources:
  - Sysmon Event ID 7
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - Golden Images/Configuration Management Database (CMDB)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      STREAM lsass.exe module load events into time_series_model
      CALCULATE reconstruction_error for the event sequence
      IF reconstruction_error > dynamic_threshold, ALERT
- question: Have any command-line arguments or PowerShell script blocks been observed containing strings or patterns known to be used for manipulating LSA Security Packages?
  context: Adversaries often use command-line tools like 'reg.exe' or PowerShell cmdlets to modify the registry and install their malicious LSA driver. This question aims to detect the execution of these commands directly. By monitoring for specific keywords ('Lsa', 'Security Packages'), registry paths, and tool names ('Install-Mimikatz') in process command lines and PowerShell logs, we can catch the attempt to install the persistence mechanism as it happens.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - PowerShell Script Log Aggregators
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events, powershell_script_block_logs
      WHERE command_line MATCHES regex('reg add HKLM\\SYSTEM\\.*\\Lsa\\Security Packages', 'Install-Mimikatz', etc.)
      IF match FOUND, ALERT
- question: Has a statistically rare command-line or a high-entropy (obfuscated) PowerShell script been executed that also contains keywords related to LSA manipulation?
  context: Attackers frequently obfuscate their scripts and commands to evade simple signature-based detection. This question looks for two statistical indicators of malicious activity: high entropy in PowerShell scripts, which suggests obfuscation, and statistically rare command-line executions. When these statistical anomalies are correlated with the presence of LSA-related keywords, the confidence of a malicious attempt increases significantly, allowing for the detection of novel or hidden attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - PowerShell Script Log Aggregators
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH powershell_script_block
        CALCULATE script_entropy
        IF script_entropy > 95th_percentile AND script_content CONTAINS 'Lsa'
          ALERT

      FOR EACH command_line
        CALCULATE enterprise_rarity
        IF rarity > 99th_percentile AND command_line CONTAINS 'Lsa'
          ALERT
- question: Does a Natural Language Processing (NLP) model classify a command-line or PowerShell script as malicious or suspicious?
  context: This question applies advanced machine learning, specifically NLP, to understand the intent behind a command or script, rather than just matching keywords. By training a model on a vast dataset of benign and malicious scripts, it can learn the syntactic and semantic patterns of attacks. This allows it to identify malicious activity even when it uses novel syntax or obfuscation techniques that would fool regex or statistical methods, providing a more robust and context-aware detection capability.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  - PowerShell Script Log Aggregators
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      STREAM command_lines, powershell_script_blocks into NLP_model
      IF model_classification = 'malicious' or 'suspicious'
        ALERT
- question: Has a rapid, correlated sequence of events—DLL file creation, LSA registry modification, and lsass.exe module load—occurred on a single host?
  context: The installation and loading of a malicious LSA driver typically involves a distinct chain of events: the malicious DLL is written to disk, the registry is updated to point to it, and then LSASS loads it. This question seeks to detect this entire attack chain as a single, high-confidence event. By correlating these specific Sysmon events (File Create, Registry Set, Image Load) occurring in a tight time window on the same host, we can detect the technique with very few false positives.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH FOR sequence on same host within 60s:
        1. file_creation_event (event_id=11, file_extension='dll')
        2. registry_set_event (event_id=13, key='HKLM\...\Lsa\Security Packages', value CONTAINS file_name from 1)
        3. image_load_event (event_id=7, process='lsass.exe', module CONTAINS file_name from 1)
      IF sequence is complete, ALERT
- question: Has a host exhibited a correlated statistical spike in the rates of file creations, LSA registry modifications, and lsass.exe module loads within a short time frame?
  context: This question provides a statistical alternative to the rigid sequence-based rule. Instead of looking for a specific order of events, it monitors the baseline rate of each relevant event type. A sudden, simultaneous burst of activity across all three event streams (file creation, registry modification, module load) on a single host is highly anomalous. This method can detect the attack pattern even if the events are slightly out of order or interspersed with other noise, providing a more flexible detection mechanism.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR time-series of event counts per host for (EID 11, EID 13, EID 7)
      IF correlated spike across all 3 series > (3 * stdev(moving_average))
        ALERT
- question: Does a machine learning model, such as a Hidden Markov Model, determine that the system has transitioned into a hidden 'LSASS Hijack in Progress' state based on the observed event stream?
  context: This question uses a sophisticated probabilistic model to infer the underlying state of a system. A Hidden Markov Model (HMM) can be trained on normal sequences of system events. It can then analyze a real-time event stream and calculate the probability that the system is in a "benign" state versus a "hijack" state. An alert is triggered when the probability of the malicious state becomes high, allowing for the detection of complex and subtle attack patterns that may not follow a simple, fixed sequence.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Domain Controllers
  - Tier 0 Servers
  - Standard Enterprise Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      STREAM Sysmon events (1, 7, 11, 13) into HMM
      CALCULATE probability of 'LSASS Hijack' state
      IF probability > 0.85, ALERT
- question: Has a failed LSA plugin load event occurred shortly after the execution of a suspicious process (e.g., unsigned, running from a user directory)?
  context: An attacker's attempt to load a malicious LSA driver might fail due to misconfiguration, permissions issues, or security controls. These failures often generate specific error events (Windows Event IDs 3033, 3063). This question aims to capture these failed attempts by correlating the error event with preceding process activity. A failure event immediately following the launch of an unsigned process or a process running from an unusual location is a strong indicator of a foiled attack attempt that still warrants investigation.
  answer_sources:
  - Windows Event ID 3033
  - Windows Event ID 3063
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Domain Controllers
  - Tier 0 Servers
  - System Event Log Aggregators
  - Endpoint Process Execution Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON Windows Event ID 3033 or 3063
        SEARCH for process_creation_events on same host in previous 60 seconds
        IF preceding_process is unsigned OR runs_from_user_path
          ALERT
- question: Is there a statistical anomaly in the rate of LSA plugin load failure events (Windows Event ID 3033, 3063) on a specific host?
  context: While occasional LSA errors can be benign, a sudden spike in their frequency on a single host is abnormal. This question uses time-series analysis to establish a normal baseline for these errors. An alert is triggered if the rate of errors on a host dramatically exceeds its own historical norm. This can indicate an adversary repeatedly attempting to load a faulty or blocked malicious driver, providing a valuable signal for investigation.
  answer_sources:
  - Windows Event ID 3033
  - Windows Event ID 3063
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Domain Controllers
  - Tier 0 Servers
  - System Event Log Aggregators
  - Endpoint Process Execution Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR rate of events 3033, 3063 per host
      IF hourly_rate > 99th_percentile of historical_hourly_rate
        ALERT
- question: Does a machine learning model identify the system state immediately prior to an LSA load failure event as anomalous?
  context: This question aims to differentiate between benign system issues causing LSA errors and malicious attempts. An anomaly detection model is trained on the features of the system state (e.g., last process created, parent process, user context) that precedes *benign* LSA errors. When a new LSA error occurs, the model evaluates the preceding state. If the model flags this state as an anomaly, it suggests that the context of the error is unusual and likely tied to a malicious action rather than a routine system problem.
  answer_sources:
  - Windows Event ID 3033
  - Windows Event ID 3063
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Domain Controllers
  - Tier 0 Servers
  - System Event Log Aggregators
  - Endpoint Process Execution Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON LSA error event (3033 or 3063)
        CREATE feature_vector from system state in preceding 60s (last_process, parent, user, etc.)
        INPUT vector into anomaly_detection_model
        IF model_classifies as 'anomaly', ALERT