name: T1588.001: Malware
id: f5e1b3a2-c9d8-4f6a-b8e7-1c3d0a9b6f5d
description: This playbook helps determine if an adversary has deployed acquired malware within the environment. It provides investigative questions to detect malware through various means, including matching file hashes against threat intelligence, identifying network connections to known malicious infrastructure, recognizing known malware execution patterns, flagging anomalous process behaviors and network C2 beaconing, and identifying files with evasive characteristics like high entropy or double extensions.
type: technique
related:
  - TA0042: Resource Development
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any files written to disk or transferred over the network matched a known malicious hash from our threat intelligence feeds?
    context: This question seeks to identify malware with a high degree of confidence. By joining file hashes observed in logs against a curated watchlist of known malicious indicators, analysts can quickly find "known-bad" files that adversaries may have acquired and deployed. A match is a strong signal of a compromise.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Network egress points
      - Internal file servers
      - Web content filters
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (file_creation_logs OR process_creation_logs OR network_file_logs) | JOIN file_hash WITH malicious_hash_watchlist | RETURN events WHERE match_is_found
  - question: Are there any file hashes that have a suspiciously low prevalence across the enterprise?
    context: This question helps uncover potentially unique or targeted malware that may not yet be in threat intelligence feeds. Adversary tools are often not widespread. By calculating the prevalence of every file hash observed and flagging those seen on a very small number of endpoints, analysts can surface rare files that warrant deeper inspection.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Network egress points
      - Internal file servers
      - Web content filters
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (all_file_or_process_logs) in last 24h | COUNT unique endpoints by file_hash | RETURN file_hash WHERE endpoint_count < 5
  - question: Has a machine learning model identified any newly observed files as likely to be malicious?
    context: This question leverages a predictive model to proactively identify potential malware based on its intrinsic characteristics, even if the specific file has never been seen before. By analyzing features like file metadata and hash prevalence, a classification model can score new files, allowing analysts to focus on high-probability threats that might be missed by signature-based methods.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Network egress points
      - Internal file servers
      - Web content filters
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new_file | EXTRACT features (MIME_type, size, entropy, prevalence) | APPLY classification_model | RETURN file WHERE malicious_score > threshold
  - question: Has any endpoint initiated a network connection to a domain, IP, or URL known to be malicious?
    context: This question aims to detect malware communicating with its Command and Control (C2) infrastructure or being downloaded from a known distribution point. By querying various network logs (DNS, connection, HTTP/SSL) for indicators from a threat intelligence watchlist, analysts can identify compromised hosts based on their network traffic destinations.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network egress points
      - DNS resolvers
      - Web proxies
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (dns_logs OR connection_logs OR http_logs) | JOIN (destination_domain OR destination_ip) WITH malicious_indicator_watchlist | RETURN events WHERE match_is_found
  - question: Are any hosts communicating with newly registered domains that have a low query prevalence in the organization?
    context: This question helps identify potential C2 infrastructure that is not yet on any watchlist. Adversaries often use newly registered domains for their operations. This combination of "newness" and "rarity" (low query count across the enterprise) is a strong statistical indicator of suspicious activity that warrants investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network egress points
      - DNS resolvers
      - Web proxies
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH dns_logs | CALCULATE domain_age and query_prevalence | RETURN domain WHERE domain_age < 30_days AND query_prevalence < 0.1%
  - question: Has a machine learning model detected any DNS queries for domains that appear to be algorithmically generated (DGA)?
    context: This question aims to uncover malware that uses Domain Generation Algorithms (DGAs) to dynamically create a large number of C2 domains, making blocklisting ineffective. A DGA detection model analyzes linguistic and structural features of a domain name (entropy, length, character patterns) to identify those that are not human-readable and are likely machine-generated.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network egress points
      - DNS resolvers
      - Web proxies
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each dns_query in dns_logs | EXTRACT features (length, entropy, n-grams) from domain | APPLY DGA_detection_model | RETURN domain WHERE dga_score > threshold
  - question: Has a process been created using a command line that matches a known malware or offensive tool signature?
    context: This question looks for specific, known-bad execution patterns. By applying detection rules (like Sigma or YARA-L) to process creation logs, analysts can find exact command-line arguments or process relationships associated with tools like Cobalt Strike, Mimikatz, or PowerShell Empire, providing a high-fidelity alert for malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (e.g., Domain Controllers, database servers)
      - User endpoints
      - Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | APPLY Sigma_or_YARA-L_rules for known malicious command_lines | RETURN events WHERE rule_match_is_found
  - question: Has a parent process spawned a child process that is statistically rare or unusual for it?
    context: This question aims to detect anomalous process relationships that could indicate code injection or unexpected execution. For example, Microsoft Word does not typically spawn PowerShell. By baselining normal parent-child process relationships and alerting on infrequent or novel pairings, analysts can uncover suspicious execution chains.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (e.g., Domain Controllers, database servers)
      - User endpoints
      - Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each parent_process_name | BASELINE normal child_processes and their frequencies | SEARCH process_creation_logs | RETURN event WHERE child_process is rare_for_parent (e.g., < 5th percentile)
  - question: Has a machine learning model identified any process command lines as anomalous?
    context: This question uses an anomaly detection model to find malicious command-line activity without relying on specific signatures. By training a model on legitimate command-line argument sequences for common processes (like PowerShell), it can identify new, unseen command lines that deviate significantly from the norm, flagging them as potentially malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (e.g., Domain Controllers, database servers)
      - User endpoints
      - Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new command_line | TOKENIZE arguments | APPLY sequence_anomaly_model | RETURN command_line WHERE reconstruction_error > threshold
  - question: Is there an unsigned process or a process masquerading as a system binary making external network connections?
    context: This question seeks to identify suspicious processes that try to hide and communicate externally. Legitimate system processes are typically digitally signed and run from protected directories. An unsigned process, or one running from an unusual location (like a user's temporary folder) while using a system name (`svchost.exe`), that also makes a network connection is highly indicative of malware.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User endpoints
      - Public-facing web servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connection_logs | FILTER for processes WHERE (is_signed = false OR path is suspicious) AND destination_is_external | RETURN suspicious_connections
  - question: Has a process been executed from a file path with an unusually high character entropy?
    context: This question helps detect malware that uses randomized file paths to evade detection. Legitimate software is typically installed in predictable, human-readable paths. By calculating the entropy of the file path for each new process and comparing it to a baseline, analysts can flag processes running from paths that appear random (e.g., `C:\Windows\Temp\asdfwernxcv.exe`), as this is a common malware characteristic.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User endpoints
      - Public-facing web servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process_creation_event | CALCULATE entropy of file_path | COMPARE to baseline_entropy for that process_name | RETURN event WHERE entropy > (mean + 3 * std_dev)
  - question: Has a machine learning clustering model identified any small, outlier groups of correlated process and network activity?
    context: This question uses unsupervised learning to find novel attack patterns. By grouping events based on a combination of process and network features (path entropy, signature status, parent process, destination IP prevalence), a clustering model can separate large clusters of normal behavior from small, isolated clusters that represent anomalous and potentially malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User endpoints
      - Public-facing web servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process/network event | CREATE feature_vector (path_entropy, is_signed, parent_name, etc.) | APPLY clustering_model (DBSCAN) | RETURN events in small, non-dense clusters
  - question: Has any host made an SSL connection over a non-standard port, especially with a self-signed certificate?
    context: This question aims to find C2 channels disguised as legitimate encrypted traffic. While SSL/TLS is standard for port 443, malware often uses it on other ports to evade simple port-based filtering. Alerting on SSL occurring on a non-standard port, particularly when the certificate is self-signed (not trusted), is a strong indicator of a malicious C2 connection.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Network egress points
      - VPN concentrators
      - Server subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH connection_logs WHERE protocol is 'ssl' AND destination_port is NOT 443 | JOIN with ssl_logs | RETURN connection WHERE certificate_is_self_signed
  - question: Are any internal hosts exhibiting highly regular, periodic network connections (beaconing) to an external destination?
    context: This question seeks to identify the "heartbeat" of malware C2 communications. Automated malware often beacons out at a fixed interval (e.g., every 60 seconds). By calculating the time between connections for each source-destination pair, analysts can detect this machine-like regularity (a low standard deviation in time deltas), which is distinct from typical, bursty user traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Network egress points
      - VPN concentrators
      - Server subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each source-destination_pair in connection_logs | CALCULATE time_deltas between connections | RETURN pair WHERE std_dev(time_deltas) is very low AND connection_count > 10
  - question: Has a time-series analysis model detected a strong, short-period seasonal component in any host's outbound traffic volume?
    context: This question provides a more advanced method for detecting C2 beaconing. By decomposing a host's outbound traffic volume over time, a model can separate trends from seasonality. A strong, repeating pattern (seasonality) with a short period (e.g., every 5 minutes) that doesn't align with normal business rhythms can reveal automated C2 activity that might be missed by simpler statistical methods.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Network egress points
      - VPN concentrators
      - Server subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each host | CREATE time_series of outbound_data_volume | APPLY time_series_decomposition | RETURN host WHERE a_strong_short_period_seasonal_component_exists
  - question: Have any files been observed with a double extension (e.g., .pdf.exe) or a mismatch between their file extension and actual file type?
    context: This question looks for common file-based tricks used by adversaries to deceive users. A file named 'report.pdf.exe' appears as 'report.pdf' on some systems, tricking a user into running an executable. Similarly, an executable file with a '.txt' extension is suspicious. Alerting on these mismatches helps catch malware delivery attempts.
    answer_sources:
      - Zeek file.log
      - Sysmon Event ID 11
      - Email gateways
      - Web proxies
      - Internal file servers
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_logs WHERE (filename matches regex for double_extension) OR (MIME_type is executable AND extension is not .exe/.dll/.scr)
  - question: Have any files been observed with a filename that has an extremely high character entropy?
    context: This question helps find malware that uses randomized filenames to avoid signature-based detection. Legitimate files usually have meaningful, human-readable names. A filename with high entropy (a high degree of randomness) is often an indicator of an automatically generated name used by a malware dropper or payload, and such files should be investigated.
    answer_sources:
      - Zeek file.log
      - Sysmon Event ID 11
      - Email gateways
      - Web proxies
      - Internal file servers
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_logs | CALCULATE shannon_entropy of filename | RETURN file WHERE entropy_score > 99th_percentile
  - question: Has an unsupervised machine learning model flagged any file transfers as anomalous based on their combined characteristics?
    context: This question uses a holistic approach to find suspicious files. Instead of looking at a single attribute, an anomaly detection model (like Isolation Forest) considers multiple features at once (filename entropy, file size, MIME type, rarity of the transfer source/destination). This allows it to identify events that are outliers from normal file activity, even if no single feature is suspicious on its own.
    answer_sources:
      - Zeek file.log
      - Sysmon Event ID 11
      - Email gateways
      - Web proxies
      - Internal file servers
      - User endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each file_event | CREATE feature_vector (entropy, size, MIME_type, prevalence) | APPLY Isolation_Forest_model | RETURN event WHERE anomaly_score is high