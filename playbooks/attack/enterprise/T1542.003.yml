name: T1542.003: Bootkit
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is maintaining persistence or evading defenses by modifying the system boot process through a bootkit. It focuses on detecting evidence such as the presence of known bootkit files, command-line modifications to boot records (MBR, VBR, UEFI), unauthorized raw disk access, suspicious modifications to the EFI System Partition (ESP), and anomalous network activity indicative of a compromised boot process, such as pre-logon C2 communication or connections not attributable to any running process.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any files with hashes matching known bootkit installers or components been observed on the network or created on endpoints?
  context: This question uses a high-confidence, signature-based approach to detect the presence of known bootkit components. By matching file hashes from network transfers and endpoint file creation events against a threat intelligence feed, analysts can quickly identify the staging of malicious tools. A positive match is a strong indicator of a compromise attempt.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Internet Gateway
  - Email Gateway
  - Endpoint File Systems
  - Server File Systems
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT timestamp, hostname, file_hash, source_ip
      FROM (network_file_logs UNION endpoint_file_create_logs)
      WHERE file_hash IN known_bootkit_hashes_threat_feed
- question: Are there any newly created executable files exhibiting unusually high entropy, suggesting they may be packed or encrypted?
  context: This question aims to detect potential malware droppers or loaders that may not yet have known hashes. Malware is often packed or encrypted to evade signature-based detection, which typically results in high Shannon entropy. By establishing a baseline of entropy for normal executables, analysts can flag outliers that warrant further investigation as potential bootkit installers.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Internet Gateway
  - Email Gateway
  - Endpoint File Systems
  - Server File Systems
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, file_name, file_entropy
      FROM endpoint_file_create_logs
      WHERE file_type = 'executable'
      AND file_entropy > 98th_percentile_baseline_entropy
- question: Can any newly observed executables be classified as malicious based on their file features and contextual data?
  context: This question leverages machine learning to provide a more sophisticated and resilient detection capability. By training a model on features from PE headers, file metadata, and network context (like source IP reputation), this approach can identify novel or polymorphic bootkit components that might evade both signature and simple statistical methods.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Internet Gateway
  - Email Gateway
  - Endpoint File Systems
  - Server File Systems
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each new_executable_event:
        features = extract_pe_header_features(event) + extract_metadata(event) + get_network_context(event)
        score = classification_model.predict(features)
        IF score > alert_threshold:
          TRIGGER_ALERT
- question: Has an adversary attempted to modify the Master Boot Record (MBR) or Volume Boot Record (VBR) using common system utilities?
  context: This question looks for direct, symbolic evidence of boot record modification attempts. Utilities like `bootsect.exe`, `bcdedit.exe`, and `debug.exe` can be abused by adversaries to install a bootkit. Monitoring for specific command-line arguments associated with this activity provides a high-fidelity alert for a critical persistence technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Standard User Endpoints
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, process_name, command_line
      FROM process_creation_logs
      WHERE process_name IN ('bootsect.exe', 'bcdedit.exe', 'debug.exe')
      AND command_line MATCHES REGEX '(/nt60 SYS /mbr|/set .* nointegritychecks Yes|/set testsigning on)'
- question: Have there been any statistically rare executions of `bcdedit.exe`, particularly from unusual parent processes?
  context: This question helps identify anomalous usage of the `bcdedit.exe` utility. Legitimate use is rare and typically performed by system administrators or automated processes. Execution by an unusual parent process (e.g., a Microsoft Office application) or with a command-line combination never seen before is highly suspicious and could indicate a process injection or living-off-the-land attack to modify boot settings.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Standard User Endpoints
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, parent_process, command_line
      FROM process_creation_logs
      WHERE process_name = 'bcdedit.exe'
      AND historical_frequency(parent_process, command_line) < 0.001
- question: Do any `bcdedit.exe` command-line executions appear malicious based on a machine learning classification model?
  context: This question uses machine learning to detect novel or obfuscated malicious `bcdedit.exe` commands. By vectorizing command-line arguments and training a classifier on known good and bad examples, this approach can identify suspicious patterns that may not be caught by rigid symbolic rules, providing a more adaptable detection method.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Standard User Endpoints
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each bcdedit_execution_event:
        features = tfidf_vectorize(event.command_line)
        prediction = logistic_regression_model.predict(features)
        IF prediction == 'malicious':
          TRIGGER_ALERT
- question: Has any process gained raw write access to a physical disk and then immediately initiated a system restart?
  context: This question identifies a common bootkit installation pattern. A malicious process writes directly to the boot sectors of a disk and then forces a restart to activate the bootkit. Correlating these two events in a short time window for the same process provides strong evidence of an attempt to install a bootkit for persistence.
  answer_sources:
  - Sysmon Event ID 9
  - Sysmon Event ID 1
  - Windows Event ID 1074
  - Endpoint Devices
  - Physical Servers
  - Virtualization Hosts
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT a.hostname, a.process_guid, a.timestamp
      FROM raw_disk_access_logs AS a
      JOIN process_creation_logs AS b ON a.process_guid = b.parent_process_guid
      WHERE a.device = '\\.\PhysicalDrive0'
      AND b.process_name IN ('shutdown.exe', 'restart.exe')
      AND (b.timestamp - a.timestamp) < 5_minutes
- question: Is any process not on an established allowlist performing raw disk access?
  context: This question focuses on identifying anomalous processes interacting directly with physical disks. Raw disk access is a privileged and rare operation, typically performed only by a small set of legitimate tools like backup or imaging software. Any process outside of this known-good set performing this action is a high-confidence indicator of malicious activity.
  answer_sources:
  - Sysmon Event ID 9
  - Sysmon Event ID 1
  - Windows Event ID 1074
  - Endpoint Devices
  - Physical Servers
  - Virtualization Hosts
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, process_name, device
      FROM raw_disk_access_logs
      WHERE process_name NOT IN (allowlist_of_disk_utilities)
- question: Has a low-probability sequence of system events, such as a non-system process launching, accessing a physical disk, and then shutting down the system, been observed?
  context: This question uses a machine learning model to detect behavioral anomalies indicative of a bootkit installation. By modeling normal sequences of system events, a Hidden Markov Model can identify when a host deviates from its expected behavior. This sequence of events is a classic bootkit pattern that would be flagged as a low-probability, and therefore suspicious, state transition.
  answer_sources:
  - Sysmon Event ID 9
  - Sysmon Event ID 1
  - Windows Event ID 1074
  - Endpoint Devices
  - Physical Servers
  - Virtualization Hosts
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each host_event_sequence:
        probability = hmm_model.score(host_event_sequence)
        IF probability < anomaly_threshold:
          TRIGGER_ALERT on sequence (process_launch -> raw_disk_access -> shutdown)
- question: Has any unauthorized process created or modified files within the EFI System Partition (ESP)?
  context: This question aims to detect direct manipulation of UEFI boot components. The ESP contains the boot loaders and drivers executed by the UEFI firmware. Modification of these files is a critical step in installing a UEFI bootkit. By allowlisting known-good processes (like OS installers), any other process writing to this protected location can be flagged as malicious.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 23
  - Sysmon Event ID 1
  - UEFI-based Endpoints
  - UEFI-based Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, process_name, target_filename
      FROM file_create_logs
      WHERE target_filename CONTAINS 'C:\EFI\' OR target_filename CONTAINS 'C:\Boot\'
      AND process_hash NOT IN (allowlist_of_boot_related_processes)
- question: Is there a statistical anomaly in the number of file modifications within the EFI System Partition on any given host?
  context: This question provides a way to detect suspicious activity in the ESP without relying on a predefined allowlist. Legitimate modifications to the ESP are infrequent and often tied to system-wide patching cycles. A sudden spike in modifications on a single host, outside of a known maintenance window, is a strong statistical indicator that an adversary may be manipulating boot files.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 23
  - Sysmon Event ID 1
  - UEFI-based Endpoints
  - UEFI-based Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, date, daily_esp_modification_count
      FROM file_modification_logs
      WHERE daily_esp_modification_count > (mean_daily_count + 3 * std_dev)
      AND is_outside_patch_window = TRUE
- question: Have any anomalous EFI System Partition modification events been detected by a machine learning model?
  context: This question uses a one-class SVM model to learn the boundary of normal ESP modification activity. This approach can identify subtle anomalies that symbolic or simple statistical methods might miss. By considering features like the parent process, file extension, and time of day, the model can flag any modification that falls outside the learned profile of legitimate behavior.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 23
  - Sysmon Event ID 1
  - UEFI-based Endpoints
  - UEFI-based Servers
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each esp_modification_event:
        features = extract_features(event.process_name, event.parent_process, event.filename, event.hour)
        prediction = one_class_svm_model.predict(features)
        IF prediction == 'anomaly':
          TRIGGER_ALERT
- question: Are there any outbound network connections to destinations (IPs, domains) or using TLS fingerprints (JA3/S) associated with known bootkit C2 infrastructure?
  context: This question seeks to identify command and control (C2) communications from a compromised host. A bootkit, once active, will often establish a connection to an adversary's server. Matching network logs against threat intelligence feeds of known malicious indicators is a highly effective way to detect this C2 activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet Gateway
  - DNS Resolvers
  - Network Traffic Taps
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT timestamp, src_ip, dest_ip, domain, ja3, ja3s
      FROM (dns_logs UNION connection_logs UNION ssl_logs)
      WHERE dest_ip IN known_c2_ips
      OR domain IN known_c2_domains
      OR ja3 IN known_malicious_ja3
- question: Are hosts making connections to statistically rare or newly observed domains?
  context: This question helps uncover C2 infrastructure that is not yet present in threat intelligence feeds. Adversaries often use newly registered or obscure domains for C2. Identifying connections to domains that are extremely uncommon across the enterprise and have no history of being accessed is a strong statistical indicator of potential C2 communication.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet Gateway
  - DNS Resolvers
  - Network Traffic Taps
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT src_ip, query_domain
      FROM dns_logs
      WHERE domain_prevalence < 1st_percentile
      AND first_seen_in_environment(query_domain) < 30_days_ago
- question: Does any host exhibit network traffic patterns indicative of C2 beaconing, such as fixed-interval, low-volume connections?
  context: This question uses a machine learning model to detect the characteristic 'heartbeat' of C2 beaconing. An LSTM autoencoder learns the normal, often bursty, patterns of a host's network traffic. C2 traffic, with its regular, machine-generated rhythm, will not conform to this learned pattern and will result in a high reconstruction error, flagging it as an anomaly.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet Gateway
  - DNS Resolvers
  - Network Traffic Taps
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each host:
        connection_timeseries = get_connection_events(host)
        reconstruction_error = lstm_autoencoder_model.score(connection_timeseries)
        IF reconstruction_error > anomaly_threshold:
          TRIGGER_ALERT
- question: Have core system security features like Secure Boot, driver signature enforcement, or PatchGuard been disabled via command-line?
  context: This question looks for explicit attempts to weaken a system's defenses, a common precursor to installing a bootkit or rootkit. The `bcdedit.exe` utility can be used to disable these critical protections. Detecting the specific commands to turn off integrity checks or enable test signing is a critical alert that an adversary is preparing the system for compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Administrator Workstations
  - Endpoint Devices
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT hostname, user, command_line
      FROM process_creation_logs
      WHERE process_name = 'bcdedit.exe'
      AND command_line CONTAINS ('/set nointegritychecks Yes', '/set testsigning on')
- question: Has the `bcdedit.exe` utility been executed by a non-administrative user or with anomalous frequency by an administrator?
  context: This question identifies statistically unusual usage of `bcdedit.exe`. This tool should only be used by privileged administrators and even then, very rarely. Any execution by a standard user is highly suspicious. Likewise, a sudden spike in usage by an administrator could indicate that their account has been compromised and is being used to disable security controls across multiple systems.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Administrator Workstations
  - Endpoint Devices
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT user, hostname
      FROM process_creation_logs
      WHERE process_name = 'bcdedit.exe'
      AND user_privilege_level != 'Administrator'
- question: Has a UEBA platform detected an execution of `bcdedit.exe` that deviates from the user's established behavioral baseline?
  context: This question leverages a UEBA system to provide user-specific context to the execution of a sensitive command. Even if an administrator runs `bcdedit.exe`, it may be anomalous for that specific administrator. A UEBA model learns each user's normal command-line activity and can flag a rare and powerful command like `bcdedit.exe` as a severe deviation from their profile, indicating a potential compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Administrator Workstations
  - Endpoint Devices
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT user, risk_score, reason
      FROM ueba_alerts
      WHERE event_type = 'Process Execution'
      AND process_name = 'bcdedit.exe'
      AND reason CONTAINS 'Deviation from user baseline'
- question: Are there any outbound network connections from a host occurring between system boot and the first interactive user logon that are not on an approved allowlist?
  context: This question aims to detect network activity from a bootkit before the operating system's user-level security controls are fully active. By defining a time window between system start (Event ID 6005) and the first user logon (Event ID 4624), any network traffic to non-essential services (like DHCP/DNS) within this window is highly suspect and could be C2 communication from a boot-level implant.
  answer_sources:
  - Zeek conn.log
  - Windows System Log Event ID 6005
  - Windows Security Log Event ID 4624
  - Network Traffic Taps
  - Endpoint System Logs
  - Endpoint Security Logs
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each host:
        boot_time = get_event_timestamp(EventID=6005, host)
        logon_time = get_first_event_timestamp(EventID=4624, LogonType IN (2,10), host, after=boot_time)
        SELECT dest_ip, dest_port FROM network_logs
        WHERE src_ip = host.ip AND timestamp BETWEEN boot_time AND logon_time
        AND dest_ip:dest_port NOT IN (boot_time_allowlist)
- question: Does any host exhibit an anomalous amount of network traffic or connect to an unusual number of destinations during the boot-to-logon window?
  context: This question provides a statistical method for detecting suspicious pre-logon network activity. By baselining metrics like bytes sent and unique destinations for each host during its normal boot-to-logon window, analysts can detect significant deviations. A sudden increase in this activity could indicate a bootkit attempting to exfiltrate data or download a next-stage payload.
  answer_sources:
  - Zeek conn.log
  - Windows System Log Event ID 6005
  - Windows Security Log Event ID 4624
  - Network Traffic Taps
  - Endpoint System Logs
  - Endpoint Security Logs
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each boot_sequence on a host:
        metrics = calculate_network_metrics(boot_time, logon_time)
        IF metrics.bytes_sent > (host_baseline.mean_bytes + 3 * host_baseline.std_dev_bytes):
          TRIGGER_ALERT
- question: Are there any outlier network connections during the boot-to-logon window when analyzed across the entire enterprise?
  context: This question uses clustering to identify rare and suspicious boot-time communications. Legitimate boot-time traffic (e.g., to a domain controller) will be common to many hosts and form dense clusters. A connection from a single host to a unique destination port or with a unique TLS fingerprint will be classified as a noise point or outlier by the algorithm, making it a high-priority candidate for investigation.
  answer_sources:
  - Zeek conn.log
  - Windows System Log Event ID 6005
  - Windows Security Log Event ID 4624
  - Network Traffic Taps
  - Endpoint System Logs
  - Endpoint Security Logs
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      connections = get_all_boot_to_logon_connections()
      features = extract_features(connections.dest_port, connections.protocol, connections.ja3)
      clusters = dbscan_cluster(features)
      outliers = get_noise_points(clusters)
      RETURN outliers
- question: Are there any 'ghost' network connections that appear in network logs but cannot be attributed to a running process on the host?
  context: This question is designed to find evidence of a rootkit or bootkit hiding its network activity from the host operating system. By joining network-level connection logs (from Zeek) with host-level connection logs (from Sysmon), any connection that exists in the former but not the latter is a 'ghost' connection. This discrepancy is a strong indicator of a low-level implant that is bypassing OS telemetry.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Suspect Endpoint Devices
  - Network Egress Points
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT zeek.*
      FROM zeek_connection_logs AS zeek
      LEFT JOIN sysmon_network_logs AS sysmon
      ON zeek.conn_tuple = sysmon.conn_tuple
      WHERE sysmon.conn_tuple IS NULL
- question: Does any host have a statistically significant number of unattributed network connections compared to its peers?
  context: This question automates and scales the 'ghost connection' hunt. By periodically calculating a 'discrepancy score' for each host (the ratio of unattributed to total connections), analysts can establish a baseline. A host whose score is a statistical outlier suggests a persistent problem, possibly due to a rootkit, that warrants a deeper forensic investigation.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Suspect Endpoint Devices
  - Network Egress Points
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each host:
        host.discrepancy_score = count(unattributed_connections) / count(total_connections)
      RETURN hosts WHERE discrepancy_score is a statistical_outlier
- question: Does a machine learning model identify any hosts as anomalous based on the discrepancy between network-level and host-level telemetry?
  context: This question uses an anomaly detection model to identify hosts where network and endpoint telemetry do not align. The model learns the normal relationship between connection counts from different sources for healthy hosts. A host compromised by a rootkit will have a vector of features (e.g., high Zeek count, low Sysmon count) that the model will flag as anomalous, providing a robust detection method for hidden activity.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Suspect Endpoint Devices
  - Network Egress Points
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each host:
        features = [count(zeek_conns), count(sysmon_conns), count(unattributed_conns)]
        prediction = anomaly_detection_model.predict(features)
        IF prediction == 'anomaly':
          TRIGGER_ALERT