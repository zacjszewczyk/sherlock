name: T1596.004: CDNs
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: "This playbook helps determine if an adversary is gathering information about an organization via its Content Delivery Networks (CDNs). It covers multiple investigative angles, including detecting HTTP requests from malicious IPs or known reconnaissance tools, identifying probes for sensitive or non-public URL paths, spotting scanning behaviors like subdomain enumeration or directory brute-forcing, uncovering attempts to bypass the CDN and connect directly to origin servers, and finding evidence of internal reconnaissance for CDN-related secrets on compromised hosts."
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are there any HTTP requests to our CDN assets originating from IP addresses or using User-Agents known to be malicious or associated with reconnaissance tools?
    context: This question aims to identify low-hanging fruitâ€”reconnaissance attempts from known bad actors or tools. By correlating network logs with threat intelligence feeds (such as blocklists for malicious scanners or TOR exit nodes) and signatures for common recon tools (like Nuclei, Nmap, Zgrab), we can quickly detect and potentially block obvious scanning activities.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet gateway
      - Web application firewalls (WAFs)
      - CDN management consoles
      - Network Security Monitoring (NSM) sensors
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH Zeek conn.log AND http.log FOR source_ip IN threat_intel_blocklist OR user_agent MATCHES recon_tool_signatures
  - question: Are any external IP addresses exhibiting an unusually high request rate to our CDN assets, suggesting automated scanning?
    context: This question helps detect scanners that are not on known blocklists. By establishing a baseline for normal request rates from external IPs, we can use statistical analysis to spot outliers. An IP making significantly more requests per minute than the vast majority (e.g., the 95th percentile) of other IPs is a strong indicator of automated scanning or enumeration.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet gateway
      - Web application firewalls (WAFs)
      - CDN management consoles
      - Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - search: pseudocode
        query: CALCULATE request_rate_per_minute per source_ip from network logs. CALCULATE 95th_percentile_rate for all external IPs over last 24 hours. FIND source_ip WHERE request_rate_per_minute > 95th_percentile_rate
  - question: Can we use a machine learning model to score and identify individual HTTP requests that are likely part of a reconnaissance attempt based on multiple features?
    context: This question moves beyond simple rate limiting or signature matching. By using a machine learning model, we can analyze a combination of factors (IP reputation, ASN, User-Agent rarity, header anomalies) in a holistic way. This allows for the detection of more sophisticated or slow-and-low reconnaissance attempts that might evade simpler symbolic or statistical checks. A high probability score from the model serves as a high-fidelity alert for analyst review.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet gateway
      - Web application firewalls (WAFs)
      - CDN management consoles
      - Network Security Monitoring (NSM) sensors
      - IP Reputation Data
      - ASN Information
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each HTTP request, GATHER features (ip_reputation, asn, user_agent_rarity, header_count, etc.). SCORE request using ML classification model. ALERT if score > 0.9
  - question: Are external IPs attempting to access sensitive or non-public files and directories on our CDN-hosted assets?
    context: This question focuses on detecting attempts to find exposed configuration files, environment variables, or administrative endpoints. Attackers frequently scan for common sensitive paths like '/.git/config' or '/.env'. By maintaining a watchlist of these URIs and alerting on any access attempts from external sources, we can identify targeted probing for information leakage or vulnerabilities.
    answer_sources:
      - Zeek http.log
      - Web servers hosting CDN content
      - Application log aggregators
      - SIEM
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH Zeek http.log WHERE uri MATCHES sensitive_uri_watchlist AND source_ip is external. ALERT on match.
  - question: Are any external IPs generating an abnormally high rate of HTTP errors (4xx/5xx), which could indicate they are guessing or enumerating URL paths?
    context: Attackers performing directory or file enumeration will naturally generate many "Not Found" (404) errors. This question uses statistical analysis to find IPs with a significantly higher error rate compared to normal users. A high ratio of client-side or server-side errors is a strong indicator that the source is not a legitimate user but an automated tool probing for content.
    answer_sources:
      - Zeek http.log
      - Web servers hosting CDN content
      - Application log aggregators
      - SIEM
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each source_ip with > 10 requests in 5 minutes, CALCULATE error_rate (4xx+5xx / total_requests). CALCULATE mean and std_dev of error_rates for all IPs. FLAG source_ip WHERE error_rate > (mean + 3 * std_dev)
  - question: Can we use machine learning to distinguish between normal user browsing patterns and automated URI probing sequences?
    context: This question seeks to identify attackers by analyzing the *pattern* of their requests, not just the individual requests themselves. Legitimate users follow logical paths through a website, whereas automated tools often request URIs in an illogical, alphabetical, or randomized order. A sequence analysis model like an LSTM can learn what normal browsing looks like and flag IP sessions whose request sequence is highly improbable, indicating automated scanning.
    answer_sources:
      - Zeek http.log
      - Web servers hosting CDN content
      - Application log aggregators
      - SIEM
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each source_ip session, CREATE a sequence of requested URIs. FEED sequence to trained LSTM model. ALERT if model flags sequence probability as low.
  - question: Is any single external IP generating a high volume of DNS queries for non-existent subdomains, suggesting a subdomain enumeration attempt?
    context: Subdomain enumeration is a common reconnaissance technique where attackers try to guess the names of an organization's subdomains. This often results in a large number of DNS queries for names that do not exist, which return an NXDOMAIN (Non-Existent Domain) response. This question sets a simple threshold to detect this brute-force activity by alerting when a single IP triggers an excessive number of NXDOMAIN responses in a short period.
    answer_sources:
      - Zeek dns.log
      - Authoritative and recursive DNS servers
      - Internet gateway
      - Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - search: pseudocode
        query: FROM Zeek dns.log, COUNT NXDOMAIN responses per source_ip per minute. ALERT if count > 50.
  - question: Are any source IPs requesting URLs with unusually high character randomness, which could indicate directory or parameter brute-forcing?
    context: This question aims to detect scanning tools that use randomized strings to guess file or directory names. The randomness (or entropy) of the characters in the requested URIs from such a tool will be much higher than that of a normal user browsing predictable links. By calculating the Shannon entropy for URIs requested by each IP and comparing it to a normal baseline, we can identify IPs engaging in this type of brute-force scanning.
    answer_sources:
      - Zeek http.log
      - Authoritative and recursive DNS servers
      - Internet gateway
      - Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each source_ip, CALCULATE shannon_entropy of all requested URIs in a 10-minute window. CALCULATE 98th percentile for entropy baseline. FLAG source_ip WHERE entropy > 98th_percentile.
  - question: Can we use machine learning to automatically cluster and identify outlier IP addresses based on their web traffic behavior?
    context: This question proposes an unsupervised learning approach to find anomalous behavior. Most users will exhibit similar traffic patterns (request counts, browsing speed, etc.), forming a dense cluster in a multi-dimensional feature space. Automated scanners and other malicious actors will have different patterns, causing them to appear as outliers or in smaller, separate clusters. A clustering algorithm like DBSCAN can automatically identify these outliers without pre-existing labels or signatures.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Authoritative and recursive DNS servers
      - Internet gateway
      - Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - search: pseudocode
        query: AGGREGATE web traffic features (request_count, unique_uri_ratio, avg_time_between_requests) per source_ip. APPLY DBSCAN clustering algorithm to the aggregated data. ALERT on IPs identified as outliers/noise.
  - question: Are external IPs that are not part of a known CDN provider connecting directly to our origin servers?
    context: This question aims to detect attempts to bypass CDN protections by connecting directly to the origin infrastructure. In a proper configuration, all public traffic should be routed through the CDN. A direct connection from an unknown external IP to an origin server, confirmed by matching the public TLS certificate, is a strong indicator of an adversary trying to find vulnerabilities or misconfigurations in the backend systems.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Origin web servers
      - Network perimeter firewalls
      - Network taps monitoring server-to-internet traffic
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH Zeek ssl.log for connections WHERE destination_ip IN origin_server_list AND certificate_serial IN public_cert_list AND source_ip NOT IN cdn_ip_list. ALERT on match.
  - question: Are our origin servers receiving traffic from unexpected Autonomous Systems (ASNs) that do not typically connect to them?
    context: This question provides a broader, network-level view of direct-to-origin traffic. Legitimate traffic to origin servers should only come from a small, predictable set of ASNs (e.g., your CDN provider's ASN, your corporate ASN). By baselining these expected source ASNs, we can statistically identify and flag connections from new or rare ASNs, which may indicate reconnaissance or an attempted attack from an unusual network location.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Origin web servers
      - Network perimeter firewalls
      - Network taps monitoring server-to-internet traffic
    range: last 90 days
    queries:
      - search: pseudocode
        query: CREATE baseline of expected source_asns for origin_server_ips. MONITOR Zeek conn.log for new connections. ALERT if source_asn is not in baseline and has near-zero historical connection count.
  - question: Is there a statistically significant and anomalous spike in the volume of direct-to-origin server traffic?
    context: This question uses time-series analysis to detect anomalies in the volume of traffic that bypasses the CDN. Even with some expected non-CDN traffic (e.g., from admin access), the volume should be relatively stable or predictable. A time-series model can learn this pattern and forecast expected traffic volumes. An alert is generated when the actual traffic volume dramatically exceeds the forecast, indicating a potential large-scale scanning event or misconfiguration being actively exploited.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Origin web servers
      - Network perimeter firewalls
      - Network taps monitoring server-to-internet traffic
    range: last 90 days
    queries:
      - search: pseudocode
        query: TRAIN time-series model on historical daily non-CDN traffic volume to origin servers. FORECAST expected volume and confidence interval for today. ALERT if current_volume > forecasted_upper_bound.
  - question: Are non-administrative or non-developer users running commands on internal systems to search for CDN-related secrets or configuration details?
    context: This question focuses on detecting internal reconnaissance, where an attacker who has already gained a foothold is searching for sensitive information. By monitoring for the creation of search-related processes (like `grep` or `findstr`) that include keywords related to CDN configuration (`cdn_api_key`, `origin_server`), we can catch attempts to escalate access or discover infrastructure details. The context of who is running the command (e.g., a non-developer) is crucial for reducing false positives.
    answer_sources:
      - Windows Event ID 4688
      - Developer workstations
      - CI/CD pipeline servers
      - Internal DNS servers
      - Version control systems
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH Windows Event ID 4688 for process_name IN ('grep.exe', 'findstr.exe', etc.) AND command_line CONTAINS ('cdn_api_key', 'origin_server', etc.) AND user NOT IN developer_group. ALERT on match.
  - question: Are internal hosts making DNS queries for domains (like CDN management portals) that are unusual for their role or function?
    context: This question aims to detect internal reconnaissance or policy violations by analyzing DNS traffic. An attacker on a compromised machine, or a malicious insider, might query CDN provider portals or API endpoints. By establishing a baseline of normal DNS activity for different types of hosts (e.g., a finance workstation vs. a developer machine), we can use statistical analysis to flag rare and out-of-place queries that warrant investigation.
    answer_sources:
      - Zeek dns.log
      - Developer workstations
      - CI/CD pipeline servers
      - Internal DNS servers
      - Version control systems
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - search: pseudocode
        query: PROFILE normal DNS queries per host_role. FOR each new DNS query, CALCULATE rarity based on host_role profile. ALERT if query is statistically rare (e.g., in bottom 1% frequency) for its host_role.
  - question: Can we use machine learning to identify users whose file access and process execution patterns deviate significantly from their peers?
    context: This question uses peer group analysis (a form of unsupervised learning) to spot anomalous insider behavior. Users in the same role (e.g., marketing) tend to access similar files and run similar programs. A model can learn this collective baseline. An alert is triggered if a user's activityâ€”such as accessing sensitive network configuration files or running unusual command-line toolsâ€”makes them a statistical outlier compared to their peers, indicating a potential compromise or insider threat.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Developer workstations
      - CI/CD pipeline servers
      - Internal DNS servers
      - Version control systems
      - Endpoint Detection and Response (EDR) agents
    range: last 90 days
    queries:
      - search: pseudocode
        query: ESTABLISH baseline of file_access and process_execution patterns for each user_role (peer group). FOR each user, COMPARE their activity to their peer group baseline. ALERT if user activity deviates > 2 standard deviations from the group profile.