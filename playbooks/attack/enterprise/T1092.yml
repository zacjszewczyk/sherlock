name: 'T1092: Communication Through Removable Media'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: >-
  This playbook helps investigate whether an adversary is using removable media for command and control (C2).
  This involves detecting files written to removable media that match known-bad indicators; identifying executable or hidden files written by non-standard processes; observing a process reading from removable media and then making an outbound network connection; detecting mass file reads from local directories followed by a single compressed or high-entropy write to a removable drive; and identifying processes being executed directly from a removable drive, especially if they are unsigned or spawned by an unusual parent process.
type: 'technique'
related:
  - 'TA0011: Command and Control'
contributors:
  - 'Zachary Szewczyk'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: 'Are files being written to removable media that match known-bad indicators from threat intelligence?'
    context: >-
      This question aims to detect the most direct evidence of C2 via removable media by identifying files with filenames or hashes that are explicitly listed in threat intelligence feeds as being associated with such activity. For example, some C2 frameworks use specific staging filenames like 'tasks.dat'. Matching against these known indicators provides a high-confidence signal that an adversary is attempting to use a removable drive for command and control.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 11'
      - 'User workstations, servers with USB ports, air-gapped systems, and high-security network segments.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: SEARCH file_creation_events WHERE (device_type = ''removable_media'') | JOIN threat_intel_feed ON (file_hash OR file_name) | IF match THEN ALERT'
  - question: 'Are files with unusually rare filenames being written to removable media?'
    context: >-
      This question seeks to identify potentially malicious files by focusing on statistical anomalies. Adversaries may use randomized or unique filenames to evade signature-based detection. By establishing a baseline of common filenames written to removable media across the enterprise, we can flag files with names that are statistical outliers (e.g., in the bottom 1st percentile of frequency). This approach can uncover novel or obfuscated staging files that are not yet in threat intelligence feeds.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 11'
      - 'User workstations, servers with USB ports, air-gapped systems, and high-security network segments.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: 1. BUILD baseline_model of filename frequencies from file_creation_events on removable_media over 30 days. 2. FOR each new file_creation_event: CALCULATE filename_frequency in baseline_model. 3. IF frequency < 1st_percentile THEN ALERT.'
  - question: 'Can a machine learning model identify file write events to removable media that are likely malicious?'
    context: >-
      This question leverages a supervised machine learning model to provide a more sophisticated and context-aware detection method. By training a model on features like filename entropy, length, extension, the parent process, and whether the hash is known, it can learn complex patterns that distinguish malicious activity from benign. This allows for the detection of suspicious events that might not trigger simpler symbolic or statistical rules, providing a probabilistic score of maliciousness for analysts to prioritize.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 11'
      - 'User workstations, servers with USB ports, air-gapped systems, and high-security network segments.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: FOR each new file_creation_event on removable_media: EXTRACT features (entropy, length, extension, parent_process, etc.). | SCORE event with trained_classification_model. | IF score > 0.90 THEN ALERT.'
  - question: 'Are high-risk executable or script files being written to removable media by unusual programs?'
    context: >-
      This question focuses on identifying suspicious file drops onto removable drives. Standard user activity rarely involves programs like web browsers or office applications writing executable files (.exe, .dll, .ps1) directly to a USB stick. This rule-based approach whitelists common, legitimate processes (like ''explorer.exe'') and alerts on any other process creating high-risk file types, which is a strong indicator of a malware dropper or a user inadvertently saving a malicious payload.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 1'
      - 'All endpoint devices with removable media access, administrative jump boxes, and developer workstations.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: SEARCH file_creation_events ON removable_media | IF file_extension IN high_risk_list AND parent_process NOT IN whitelist THEN ALERT.'
  - question: 'Are we observing statistically rare combinations of processes writing specific file types to removable media?'
    context: >-
      This question moves beyond a static whitelist to a dynamic, data-driven approach. It statistically models the relationship between every process and the file extensions it writes to removable media across the organization. An alert is triggered when a process writes a file type it has rarely or never written before (e.g., a PDF reader writing a .bat file). This can detect novel or targeted attacks where an adversary uses a compromised but legitimate process for a malicious purpose.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 1'
      - 'All endpoint devices with removable media access, administrative jump boxes, and developer workstations.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: 1. BUILD baseline_model of P(extension|process) for file writes to removable media. 2. FOR each new file_write_event: CALCULATE P(event_extension|event_process). 3. IF probability < 0.01 THEN ALERT.'
  - question: 'Can an unsupervised machine learning model detect anomalous file creation events on removable media based on process, file type, and attributes?'
    context: >-
      This question uses unsupervised learning (clustering) to find outliers without pre-labeled data. By grouping similar events based on the parent process, file extension, and file attributes (like ''hidden''), the algorithm can identify events that do not fit into any normal cluster. These ''noise'' points or members of very small clusters represent rare and potentially suspicious activities that deviate from established patterns of behavior, warranting analyst investigation.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 1'
      - 'All endpoint devices with removable media access, administrative jump boxes, and developer workstations.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: FOR each new file_creation_event on removable_media: CREATE feature_vector (parent_process, extension, is_hidden). | APPLY clustering_algorithm (DBSCAN). | IF event is classified as noise/outlier THEN ALERT.'
  - question: 'Is a process reading from a removable drive and then immediately communicating with a known-malicious C2 server?'
    context: >-
      This is a high-fidelity question that directly links an action on a removable drive (reading a file) with subsequent suspicious network activity. By correlating file access with network connections from the same process within a short time frame and checking the destination against C2 threat intelligence, we can detect payloads that execute from a USB drive and ''call home'' for instructions or to exfiltrate data.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 3'
      - 'Zeek conn.log'
      - 'Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: ON file_read_event from removable_media: MONITOR process for network_connection within 5 minutes. | IF network_destination IN C2_threat_intel_feed THEN ALERT.'
  - question: 'After reading from a removable drive, is a process exhibiting anomalous network behavior, such as sending an unusually large amount of data or connecting to a rare port?'
    context: >-
      This question looks for behavioral changes in a process after it interacts with a removable drive. Even if the destination isn''t on a threat list, the behavior itself can be suspicious. For example, a process that normally sends very little data suddenly sending megabytes after reading a USB file could indicate data exfiltration. Similarly, connecting to a non-standard port could be a sign of a C2 channel. This method helps detect unknown or custom C2 protocols.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 3'
      - 'Zeek conn.log'
      - 'Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: 1. BUILD baseline of process network behavior (avg_bytes_sent, common_ports). 2. ON file_read from removable_media: MONITOR subsequent network connections from process. 3. IF bytes_sent > 95th_percentile_baseline OR destination_port is rare THEN ALERT.'
  - question: 'Is a process exhibiting periodic, ''heartbeat''-like network traffic (beaconing) after reading from a removable drive?'
    context: >-
      This question uses signal processing techniques to detect C2 beaconing, which is a common characteristic of malware. Malware often communicates with its C2 server at regular intervals. By analyzing the time between a process''s network connections after it has read from a removable drive, we can use algorithms like FFT to identify these regular, machine-like patterns that are distinct from normal, sporadic user-driven traffic.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 3'
      - 'Zeek conn.log'
      - 'Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: ON file_read from removable_media: COLLECT timestamps of subsequent network connections from process. | CALCULATE time_deltas between connections. | APPLY FFT or autocorrelation to time_delta_series. | IF strong periodic signal detected THEN ALERT.'
  - question: 'Is a single process reading a large number of local files and then writing a compressed archive file to a removable drive?'
    context: >-
      This question targets the classic ''smash and grab'' data theft pattern. An adversary''s script or tool will often collect many files of interest from a local disk, package them into a single archive (like a .zip or .rar) for easier exfiltration, and then write that archive to a removable drive. This rule looks for this specific sequence of events: mass file reads followed by a single archive write to a USB device by the same process, which is a strong indication of data staging.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 11'
      - 'File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: MONITOR for process with >500 file_read_events in 5 mins. | IF same process then writes file with archive_extension to removable_media in same window THEN ALERT.'
  - question: 'Are files with unusually high-entropy (random-looking) filenames being written to removable media?'
    context: >-
      This question seeks to identify staged files that have been given randomized names to avoid detection. Malware often generates random strings for filenames to evade simple keyword or name-based blocklists. By calculating the Shannon entropy of filenames being written to removable media and comparing it to a baseline, we can flag those that are statistically likely to be machine-generated and potentially malicious.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 11'
      - 'File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: 1. BUILD baseline distribution of filename_entropy for files written to removable media. 2. FOR each new file_write_event: CALCULATE filename_entropy. 3. IF entropy > 98th_percentile_baseline THEN ALERT.'
  - question: 'Can an autoencoder model detect anomalous process behavior indicative of data staging for exfiltration via removable media?'
    context: >-
      This question uses an autoencoder, a type of neural network, to learn what ''normal'' process behavior looks like in terms of file and network activity. The model is trained on vectors representing normal activity (e.g., counts of file reads, writes, network connections). When a process exhibits an unusual pattern, like a huge number of file reads followed by a single write to a removable drive and no other activity, the autoencoder will have a high ''reconstruction error'' because it has never seen this pattern before. This high error score flags the process as anomalous for investigation.
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 11'
      - 'File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: 1. TRAIN autoencoder on feature vectors of normal process activity (local_reads, removable_writes, net_conns). 2. IN PRODUCTION: for each process, feed activity vector to autoencoder. 3. MEASURE reconstruction_error. | IF error is anomalously high THEN ALERT.'
  - question: 'Are any unsigned executables being run directly from a removable drive?'
    context: >-
      This question addresses a very common malware execution vector. Legitimate software is almost always digitally signed by its publisher. An adversary, however, will often place an unsigned malicious executable on a USB drive to be run on a target system. This rule provides a straightforward, high-confidence alert by triggering on any process creation event where the executable file is on a removable drive and lacks a valid digital signature.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4663'
      - 'All endpoint devices, particularly those used by privileged users or in physically unsecured areas.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: SEARCH process_creation_events | IF process_image_path is on removable_drive AND process_is_signed = ''false'' THEN ALERT.'
  - question: 'Are we observing rare or never-before-seen parent-child process relationships where the child process is executing from a removable drive?'
    context: >-
      This question looks for anomalous execution chains. While a user running an executable from a USB drive via ''explorer.exe'' might be normal, a system service like ''svchost.exe'' or a web server process spawning a process from a removable drive is highly irregular. By baselining all parent-child process relationships across the environment, we can flag new or extremely infrequent relationships involving execution from removable media as suspicious.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4663'
      - 'All endpoint devices, particularly those used by privileged users or in physically unsecured areas.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: 1. BUILD baseline of parent-child process relationship frequencies where child is on removable_drive. 2. FOR each new process_creation_event from removable_drive: CHECK frequency of parent-child pair in baseline. 3. IF pair is new or frequency is below threshold THEN ALERT.'
  - question: 'Can a machine learning model predict whether a process executed from removable media is malicious based on its execution context?'
    context: >-
      This question uses a supervised model to make a holistic judgment about the legitimacy of a process executed from a removable drive. It considers multiple features at once—such as the parent process, whether the file is signed, the command-line arguments used, and the file''s name entropy—to calculate a probability of maliciousness. This approach is more robust than a single rule and can catch sophisticated threats that might evade simpler checks by, for example, using a signed but vulnerable application.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4663'
      - 'All endpoint devices, particularly those used by privileged users or in physically unsecured areas.'
    range: 'last 90 days'
    queries:
      - 'pseudocode: FOR each process_creation_event from removable_media: EXTRACT features (parent_process, is_signed, cmd_line, etc.). | SCORE event with trained_classification_model. | IF score > 0.85 THEN ALERT.'