name: T1092: Communication Through Removable Media
id: 3c5e06a8-a329-4c8a-939e-28f0970a9b8f
description: This playbook helps determine if an adversary is using removable media for command and control, as outlined in MITRE ATT&CK T1092. It provides investigative questions to detect this technique through various means, including: identifying files written to removable media that match known-bad threat intelligence; detecting executable or hidden files written by non-standard processes; correlating file reads from removable media with subsequent outbound network connections; identifying mass data collection and staging behavior; and detecting the direct execution of unsigned or anomalously-spawned processes from a removable drive.
type: technique
related:
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are files being written to removable media that match known-bad indicators from threat intelligence feeds?
  context: This question aims to detect the use of removable media for command and control by identifying files with names or hashes that are known to be associated with C2 frameworks. Adversaries may drop staging files (e.g., 'tasks.dat') onto removable media to issue commands or receive data. Matching these against a curated threat intelligence feed provides a high-fidelity signal of malicious activity.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User workstations, servers with USB ports, air-gapped systems, and high-security network segments.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      threat_intel = get_c2_removable_media_indicators()
      file_writes = search file_creation_events on removable_media
      FOR each write in file_writes:
        IF write.filename in threat_intel.filenames OR write.hash in threat_intel.hashes:
          ALERT(high, "Known-bad file written to removable media")
- question: Are files with exceptionally rare filenames being written to removable media?
  context: This question seeks to identify outlier activity that might indicate malware. Adversaries often use randomized or unique filenames to evade simple signature-based detections. By establishing a baseline of common filenames written to removable media within the enterprise, we can flag files with names that are statistically rare (e.g., in the bottom 1st percentile of frequency), which warrants further investigation.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User workstations, servers with USB ports, air-gapped systems, and high-security network segments.
  range: last 30 days for baseline, last 90 days for investigation
  queries:
  - search_technology: pseudocode
    query: |
      baseline = build_filename_frequency_model(time_window='30d')
      new_writes = search file_creation_events on removable_media
      FOR each write in new_writes:
        frequency = calculate_frequency(write.filename, baseline)
        IF frequency < 1st_percentile:
          ALERT(medium, "Anomalously rare filename on removable media")
- question: Can we predict if a file written to removable media is malicious based on its characteristics?
  context: This question uses a machine learning model to proactively identify malicious file-write activity. By training a classifier on features like filename entropy, length, file extension, and the parent process, the model can learn the complex patterns that distinguish malicious writes from benign ones. This approach can detect novel threats that don't match known indicators.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - User workstations, servers with USB ports, air-gapped systems, and high-security network segments.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      model = load_trained_classifier('removable_media_file_writes')
      new_writes = search file_creation_events on removable_media
      FOR each write in new_writes:
        features = extract_features(write)
        prediction = model.predict_proba(features)
        IF prediction > 0.90:
          ALERT(high, "ML model predicted malicious file write to removable media")
- question: Are executable or high-risk files being written to removable media by unusual parent processes?
  context: This question focuses on detecting suspicious file creation on removable media. Legitimate processes that write to USB drives (like 'explorer.exe') are generally predictable. When a non-standard process, such as a web browser or office application, writes an executable or script file (e.g., .exe, .ps1) to a removable drive, it's a strong indicator of a potential threat, such as a user being tricked into downloading and saving malware.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - All endpoint devices with removable media access, administrative jump boxes, and developer workstations.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      high_risk_ext = ['.exe', '.dll', '.ps1', '.vbs', '.bat', '.lnk']
      process_whitelist = ['explorer.exe', 'robocopy.exe']
      file_writes = search file_creation_events on removable_media
      FOR each write in file_writes:
        IF write.extension in high_risk_ext AND write.parent_process not in process_whitelist:
          ALERT(high, "High-risk file written by non-standard process")
- question: Are processes writing files with extensions to removable media that are statistically anomalous for that process?
  context: This question identifies unusual behavior by baselining the types of files each process typically writes to removable media. For example, 'WINWORD.EXE' might commonly write '.docx' or '.pdf' files, but it would be extremely rare for it to write a '.dll' or '.ps1' file. Detecting such low-probability combinations of process and file extension can uncover sophisticated attacks that use legitimate processes for malicious purposes.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - All endpoint devices with removable media access, administrative jump boxes, and developer workstations.
  range: last 30 days for baseline, last 90 days for investigation
  queries:
  - search_technology: pseudocode
    query: |
      baseline = build_process_extension_probability_model(time_window='30d')
      new_writes = search file_creation_events on removable_media
      FOR each write in new_writes:
        probability = P(write.extension | write.parent_process) from baseline
        IF probability < 0.01:
          ALERT(medium, "Anomalous process-to-file-extension interaction")
- question: Can we detect anomalous combinations of processes, file types, and file attributes for writes to removable media?
  context: This question uses an unsupervised machine learning approach (clustering) to find outliers without pre-existing labels. By grouping similar file-write events based on features like the parent process, file extension, and attributes (e.g., hidden), the algorithm can identify events that do not fit into any normal cluster. These 'noise' points or members of very small clusters represent rare and suspicious activities that merit investigation.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - Sysmon Event ID 1
  - All endpoint devices with removable media access, administrative jump boxes, and developer workstations.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      events = get_removable_media_file_writes()
      features = create_feature_vectors(events)
      clusters = dbscan_cluster(features)
      FOR each event in events:
        IF event is marked as noise by clustering:
          ALERT(medium, "Anomalous file write detected by clustering")
- question: Are processes that read from removable media subsequently connecting to known-malicious C2 servers?
  context: This question aims to link activity on a removable drive directly to command and control communication. An adversary might use a file on a removable drive to trigger an agent that then 'calls home.' By monitoring for a process that reads from removable media and then, within a short time frame, makes a network connection to an IP or domain on a C2 threat intelligence list, we can detect this entire attack chain.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 3
  - Zeek conn.log
  - Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      c2_intel = get_c2_network_indicators()
      file_reads = search file_read_events from removable_media
      FOR each read in file_reads:
        net_conns = search network_connections by read.process_id within 5_minutes
        FOR each conn in net_conns:
          IF conn.destination in c2_intel:
            ALERT(high, "Process read from USB then connected to known C2")
- question: Are processes exhibiting anomalous network behavior after reading from a removable drive?
  context: This question seeks to identify suspicious network activity that follows interaction with removable media, even if the destination is not on a threat list. By baselining the normal network behavior (e.g., data volume, destination ports) for each process, we can detect deviations. For instance, a process that reads a file and then exfiltrates an unusually large amount of data or connects to a port it has never used before is highly suspicious.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 3
  - Zeek conn.log
  - Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      file_reads = search file_read_events from removable_media
      FOR each read in file_reads:
        baseline = get_network_baseline(read.process_id)
        net_activity = monitor_network(read.process_id, duration='10m')
        IF net_activity.bytes_sent > baseline.95th_percentile OR net_activity.port is rare:
          ALERT(medium, "Anomalous network traffic after removable media read")
- question: Are processes exhibiting periodic network beaconing after reading from a removable drive?
  context: This question uses signal processing techniques to detect C2 beaconing. Malware often communicates with its C2 server at regular intervals. After a process is triggered by a file on a removable drive, we can analyze the time intervals between its subsequent network connections. Applying techniques like Fast Fourier Transform (FFT) can reveal strong, periodic signals characteristic of automated beaconing, even if the traffic is encrypted or goes to an unknown destination.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 3
  - Zeek conn.log
  - Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      file_reads = search file_read_events from removable_media
      FOR each read in file_reads:
        connections = get_network_connections(read.process_id)
        time_deltas = calculate_time_diffs(connections)
        is_periodic = fft_analysis(time_deltas)
        IF is_periodic:
          ALERT(high, "Periodic network beaconing detected after removable media read")
- question: Are processes reading a large number of local files and then writing a single archive file to a removable drive?
  context: This question is designed to detect data staging and collection for exfiltration. Adversaries often collect numerous files of interest from a system, compress them into a single archive (e.g., .zip, .rar), and then write that archive to a removable drive for physical transport. This rule looks for the distinct pattern of mass file reads followed closely by a single archive write to removable media by the same process.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      process_activity = aggregate process_events over 5_min_windows
      FOR each process in process_activity:
        IF process.local_file_reads > 500 AND process.removable_archive_writes > 0:
          ALERT(high, "Mass file read followed by archive write to removable media")
- question: Are files with high-entropy (random-looking) filenames being written to removable media?
  context: This question aims to identify malware that uses randomization to evade detection. Instead of using predictable names, some malware generates random character strings for filenames to avoid signature-based blacklists. By calculating the Shannon entropy of filenames written to removable media and comparing it to an enterprise baseline, we can flag files with unusually high entropy scores, which may indicate malicious staging activity.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      baseline_entropy = get_filename_entropy_distribution()
      file_writes = search file_creation_events on removable_media
      FOR each write in file_writes:
        entropy = calculate_shannon_entropy(write.filename)
        IF entropy > baseline_entropy.98th_percentile:
          ALERT(medium, "High entropy filename written to removable media")
- question: Can we detect anomalous process behavior sequences, such as mass-read followed by single-write, using an autoencoder?
  context: This question uses an autoencoder, a type of neural network, to learn what 'normal' process activity looks like. The model is trained on vectors representing normal behavior (e.g., counts of file reads, writes, network connections). When a new activity sequence is fed to the model, it attempts to reconstruct it. A high reconstruction error signifies that the activity is anomalous and does not conform to learned normal patterns, such as the data staging behavior of mass-reading local files and then writing to a removable drive.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      autoencoder = load_trained_process_activity_autoencoder()
      process_vectors = get_process_activity_vectors_per_minute()
      FOR each vector in process_vectors:
        reconstruction_error = autoencoder.get_reconstruction_error(vector)
        IF reconstruction_error is anomalously_high:
          ALERT(high, "Anomalous process activity sequence detected")
- question: Are unsigned executables being run directly from a removable drive?
  context: This question targets the direct execution of malware from removable media. While some legitimate portable applications run from USB drives, they are typically digitally signed by a trusted publisher. An adversary, however, is likely to use an unsigned executable. This rule triggers an alert when any process is created from an image located on a removable drive, with an escalated severity if the executable is not signed, indicating a high probability of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4663
  - All endpoint devices, particularly those used by privileged users or in physically unsecured areas.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      process_creations = search process_creation_events
      FOR each event in process_creations:
        IF event.image_path on removable_drive:
          IF event.signed == 'false':
            ALERT(high, "Unsigned process executed from removable media")
          ELSE:
            ALERT(low, "Signed process executed from removable media")
- question: Are we observing rare or novel parent-child process relationships where the child process is executed from a removable drive?
  context: This question identifies suspicious process execution by analyzing parent-child relationships. Over time, an enterprise develops a predictable baseline of which processes spawn others (e.g., 'explorer.exe' launching 'cmd.exe'). When a process on a removable drive is launched by an unusual parent, or if the specific parent-child combination is extremely rare across the organization, it suggests an anomalous execution chain that could be malicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4663
  - All endpoint devices, particularly those used by privileged users or in physically unsecured areas.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      baseline = build_parent_child_frequency_model(time_window='90d')
      process_creations = search process_creation_events where child is on removable_drive
      FOR each event in process_creations:
        frequency = get_frequency(event.parent_process, event.child_process) from baseline
        IF frequency is novel or very_low:
          ALERT(medium, "Rare parent-child process execution from removable media")
- question: Can we predict if a process executed from removable media is malicious based on its execution context?
  context: This question uses a supervised machine learning model to score the risk of a process being executed from removable media. By incorporating a rich set of features—such as the parent process, whether the file is signed, command-line arguments, and filename entropy—the model can make a more nuanced determination than a simple rule. This allows it to identify sophisticated threats that might otherwise appear benign.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4663
  - All endpoint devices, particularly those used by privileged users or in physically unsecured areas.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      model = load_trained_classifier('removable_media_process_execution')
      process_creations = search process_creation_events from removable_media
      FOR each event in process_creations:
        features = extract_features(event)
        prediction = model.predict_proba(features)
        IF prediction > 0.85:
          ALERT(high, "ML model predicted malicious process execution from removable media")