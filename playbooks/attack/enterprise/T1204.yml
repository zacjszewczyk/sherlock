name: T1204: User Execution
id: a2b1c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps to determine if an adversary has achieved execution through user interaction. This can manifest in several ways, such as a user-facing application (e.g., Outlook, Chrome) spawning a child process that connects to a malicious destination; the execution of command-line interpreters (e.g., PowerShell) with obfuscated commands or bypasses; user applications spawning suspicious child processes like scripting engines; network traffic from user endpoints to anomalous destinations (e.g., rare geolocations, newly registered domains); an archive utility (e.g., 7z.exe) being run followed immediately by the execution of an extracted file; or a browser spawning a command interpreter or connecting to a suspicious domain.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a user-facing application (e.g., OUTLOOK.EXE) spawning a child process that connects to a known-bad IP or domain?
  context: This question seeks to identify classic spearphishing or malicious attachment scenarios where a user opens a document or link, leading to a process that establishes a connection to a command-and-control (C2) server or malware staging site. By joining process creation events with network logs and correlating them against threat intelligence, analysts can quickly spot high-fidelity indicators of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Email gateways
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events (event_id=4688) | JOIN network_connection_events (conn.log) on process_id, timestamp | LOOKUP dns_events (dns.log) to get domain | LOOKUP threat_intel_feed on destination_ip OR destination_domain | WHERE threat_intel_match=true | RETURN parent_process, child_process, destination_ip, destination_domain
- question: Has a common user application (e.g., WINWORD.EXE) spawned a process that connected to a statistically rare domain for that application?
  context: Adversaries often use novel domains for their infrastructure. This question helps detect such activity by baselining normal network behavior for common applications. An application connecting to a domain it rarely or has never connected to before is a strong anomaly indicator, even if the destination is not on any threat intelligence list.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Email gateways
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events AND network_events over last 30 days | STATS frequency of destination_domain by parent_process | JOIN with current events | WHERE current_domain_frequency < 1st_percentile for parent_process | RETURN alert
- question: Can we use a machine learning model to classify a process creation and subsequent network connection as malicious?
  context: This proactive question aims to build a predictive model to identify malicious process-network chains. By training a classifier on features like process names, destination geolocation/ASN, and threat intelligence scores, analysts can automate the detection of complex malicious behaviors that might evade simpler rule-based alerts.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Email gateways
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: COLLECT features (parent_process, child_process, dest_geo, dest_asn, dest_port, intel_score) | TRAIN decision_tree_model on labeled data | DEPLOY model on new process-network events | ALERT on events classified as 'malicious' with high confidence
- question: Is a command-line interpreter being executed with arguments containing known malicious patterns, obfuscation, or bypass techniques?
  context: Adversaries frequently use command-line interpreters like PowerShell and cmd.exe to execute malicious code. This question focuses on detecting specific, high-confidence indicators of malicious activity within the command-line arguments themselves, such as commands to download and execute remote files (IEX DownloadString), encoded commands, or execution policy bypasses. These patterns are often hallmarks of fileless malware and living-off-the-land techniques.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events (event_id=4688) | REGEX command_line for patterns like 'IEX.*DownloadString', '-enc', '-w hidden', 'Bypass', 'FromBase64String' | ALERT on match
- question: Has a command-line interpreter been executed with an unusually high-entropy command line, suggesting obfuscation?
  context: To evade signature-based detection, adversaries often obfuscate their command-line payloads, for example, by using Base64 encoding. This obfuscation significantly increases the character randomness, or entropy, of the command string. This question helps identify such attempts by baselining normal entropy levels for command-line interpreters and alerting on significant deviations, providing a way to detect unknown or heavily obfuscated malicious commands.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events for interpreters over 30 days | CALCULATE entropy baseline for each interpreter's command_line | MONITOR new events | ALERT when command_line_entropy > 99th_percentile of baseline
- question: Can we use a machine learning model to classify command-line arguments as suspicious or malicious?
  context: This question proposes a more advanced, semantic approach to command-line analysis. Instead of relying on fixed signatures (regex) or simple statistical measures (entropy), an NLP model can learn the structure and 'language' of malicious commands. This allows for the detection of novel malicious command variations that may not match known patterns but share underlying semantic similarities with previously seen attacks.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Domain Controllers
  - Application servers
  range: last 90 days
  queries:
  - pseudocode: VECTORIZE command_line using TF-IDF | TRAIN NLP model on labeled (benign/malicious) data | DEPLOY model on new command_line events (event_id=4688) | ALERT on commands classified as 'suspicious'
- question: Has a high-risk user application (e.g., WINWORD.EXE) spawned a child process that is not on its approved list of children?
  context: Certain parent-child process relationships are highly indicative of malicious activity, such as Microsoft Word spawning PowerShell. This question aims to implement a strict, high-fidelity detection method by defining what is 'normal' (an allow-list) for high-risk applications and alerting on any deviation. This is effective for catching common exploitation techniques following the opening of a malicious document.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Terminal servers
  - Virtual Desktop Infrastructure (VDI)
  range: last 90 days
  queries:
  - pseudocode: DEFINE allow_list (e.g., {parent 'WINWORD.EXE', child 'splwow64.exe'}) | SEARCH process_creation_events (event_id=4688) | WHERE parent_process in high_risk_list AND {parent, child} NOT IN allow_list | ALERT
- question: Has any application spawned a child process that is statistically rare or has never been seen before in the environment?
  context: This question provides a broader, more dynamic approach to detecting anomalous process creation. Instead of a static allow-list, it uses the organization's own activity as a baseline. This helps uncover not only known-bad patterns but also 'unknown-unknowns' where an application behaves in a way that is abnormal for the specific environment, which could indicate a novel attack or misuse.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Terminal servers
  - Virtual Desktop Infrastructure (VDI)
  range: last 90 days
  queries:
  - pseudocode: BASELINE parent-child relationships and frequencies over last 30 days | SEARCH new process_creation_events | ALERT if {parent, child} is new OR its frequency < 1st_percentile
- question: Can graph analysis and machine learning identify anomalous parent-child process creation events?
  context: This question frames process activity as a large-scale graph, allowing for the application of powerful anomaly detection algorithms. Techniques like Local Outlier Factor (LOF) can identify unusual connections (process spawns) in the context of the entire system's behavior. This method can find sophisticated attackers who might try to blend in by using legitimate-looking processes in unusual sequences.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Terminal servers
  - Virtual Desktop Infrastructure (VDI)
  range: last 90 days
  queries:
  - pseudocode: BUILD process creation graph (nodes=processes, edges=spawns) | APPLY Isolation Forest or LOF algorithm to graph edges | INVESTIGATE edges identified as outliers/anomalies
- question: Has a user endpoint connected to a domain that was registered very recently (e.g., within the last 30 days)?
  context: Adversaries frequently use newly registered domains (NRDs) for phishing and C2 infrastructure because they have not yet been categorized or blacklisted. This question aims to detect this TTP by checking the registration date of domains being accessed. Connections to NRDs are a high-risk indicator and warrant immediate investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Zeek x509.log
  - Network egress points
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: SEARCH dns_logs (dns.log) | LOOKUP domain_registration_date from WHOIS/NRD_feed | IF registration_date < 30 days ago | CORRELATE with connection_logs (conn.log) | ALERT
- question: Is a user making a network connection that is anomalous for their personal profile, such as to a new country or using a rare client fingerprint (JA3/JA4S)?
  context: This question focuses on user-level behavioral anomalies. Every user has a typical pattern of network activity. A sudden deviation, like a connection to a country they've never accessed before or the use of a TLS/SSL client fingerprint (JA3/JA4S) that is rare in the organization, can indicate a compromised account or device communicating with adversary infrastructure.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Zeek x509.log
  - Network egress points
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: BASELINE user activity (destination_countries, ASNs, JA3_hashes) | MONITOR new connections | ALERT if new_connection.country not in user_baseline OR new_connection.ja3_hash is rare (<1% org-wide)
- question: Does a user's network traffic volume or connection count show a significant, unpredicted spike, potentially indicating a C2 channel?
  context: Command-and-control channels often exhibit regular 'heartbeat' traffic or sudden bursts of data transfer for exfiltration. This question proposes using time series analysis to model a user's normal network metrics (bytes sent/received, connection counts). An alert is generated when the actual traffic significantly deviates from the model's forecast, which could signal automated C2 communication.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Zeek x509.log
  - Network egress points
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: TRAIN ARIMA model on user's historical network metrics (bytes_sent, conn_count) | FORECAST expected range (95% confidence interval) | ALERT if current_activity is outside of forecasted range
- question: Has an archive utility (e.g., 7z.exe) been run, immediately followed by the execution of a file from a temporary or download directory?
  context: This sequence is a common pattern for malware delivery. A user downloads and opens a malicious archive (ZIP, RAR, etc.), which then extracts and runs a payload. This question aims to detect this specific, timed sequence of events archive utility execution followed by process execution from a typical extraction location like Downloads or AppData/Temp. It's a strong indicator of user-triggered malware execution.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Download directories on shared servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH for process_creation (process_name in [7z.exe, winrar.exe]) | WITHIN 60s, SEARCH for second process_creation where executable_path in [%TEMP%, %APPDATA%, *Downloads*] | ALERT on sequence match
- question: Has a file been executed from a temporary directory with an unusually short time delay after an archive utility was run by the same user?
  context: This question uses statistical analysis to find automated 'unpack-and-run' behavior. While a user might manually extract a file and run it later, malicious scripts often do this programmatically and very quickly. By identifying executions from temp/download directories that happen an anomalously short time after an archive utility ran, we can pinpoint likely scripted malware execution.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Download directories on shared servers
  range: last 90 days
  queries:
  - pseudocode: FIND process_creations where parent is archive_utility AND child_path is temp/download | CALCULATE time_delta from parent_creation | ALERT if time_delta is an outlier (e.g., < 10th percentile)
- question: Can a sequence analysis model (e.g., RNN, HMM) be used to detect high-risk chains of process execution, such as 'outlook.exe -> 7z.exe -> powershell.exe'?
  context: Adversary actions are often a sequence of events. This question proposes using advanced models capable of understanding sequential data, like RNNs. By training a model on known malicious and benign process sequences, it can learn to identify complex attack chains, even if they have variations in timing or include intermediate, benign-looking steps. This moves beyond simple two-event correlation to holistic sequence analysis.
  answer_sources:
  - Windows Event ID 4688
  - User workstations
  - Download directories on shared servers
  range: last 90 days
  queries:
  - pseudocode: TRAIN RNN/HMM model on labeled sequences of process_creation_events | DEPLOY model to analyze new event sequences in real-time | ALERT on sequences classified as high-risk
- question: Has a web browser process (e.g., chrome.exe) spawned a command-line interpreter like PowerShell or cmd.exe?
  context: This is a highly anomalous and suspicious event. A web browser should not, under normal circumstances, directly launch a command shell. This behavior is a strong indicator of a drive-by download attack or the execution of malicious code via a browser vulnerability or malicious extension, which then attempts to run commands on the host system.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_events (event_id=4688) | WHERE parent_process in [chrome.exe, msedge.exe] AND child_process in [cmd.exe, powershell.exe, wscript.exe] | ALERT
- question: Is a browser connecting to a domain with a statistically rare or suspicious Top-Level Domain (TLD)?
  context: Adversaries often use cheap, obscure, or country-specific TLDs (e.g., .xyz, .club, .top) for their malicious infrastructure to avoid scrutiny. This question involves baselining the TLDs commonly accessed within the organization and alerting on requests to rare TLDs. This provides a simple but effective heuristic for spotting potential connections to malicious sites.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: BASELINE TLD frequency from dns.log over 30 days | MONITOR new DNS requests | ALERT if requested TLD frequency < 5th percentile
- question: Can we use clustering algorithms to find anomalous network connections originating from browser processes?
  context: This question suggests using unsupervised machine learning to find 'needles in a haystack'. Most browser traffic will form large clusters of normal behavior (e.g., connections to popular websites on port 443). Malicious activity, such as C2 communication or data exfiltration from a browser script, will likely have different characteristics (destination, port, data volume) and form small, distinct clusters or be outliers. Investigating these outliers can reveal covert malicious traffic.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Web proxies
  - DNS resolvers
  range: last 90 days
  queries:
  - pseudocode: COLLECT network connection features from browser processes (dest_ip, port, volume) | APPLY K-Means or other clustering algorithm | INVESTIGATE small clusters and outliers