name: T1574.011: Services Registry Permissions Weakness
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversaries who are manipulating Windows service registry entries by exploiting weak permissions. It addresses techniques used for maintaining persistence, escalating privileges, and evading defenses. Investigations will focus on identifying anomalous modifications to service registry keys like 'ImagePath', 'binPath', and 'FailureCommand', the creation of suspicious new services, the disabling of security services, and the use of LOLBAS for payload execution via services.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I symbolically detect modifications to a service's 'ImagePath' or 'binPath' to identify executables matching threat intelligence?
    context: Adversaries may alter the 'ImagePath' or 'binPath' of a service to point to their own malicious executable, ensuring it runs with the service's privileges. This question aims to find these direct modifications by monitoring registry change events and comparing the new executable path and hash against known threat intelligence feeds.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Threat Intelligence Feeds
      - Domain Controllers
      - Application Servers
      - Critical Workstations
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName ENDS WITH ('\\ImagePath', '\\binPath') | EXTRACT NewPath | ENRICH Hash(NewPath) | LOOKUP ThreatIntelligence(Hash, NewPath)
  - question: How can I statistically identify anomalous modifications to service ImagePath values or detect unusual processes making these changes?
    context: Legitimate service path modifications are often performed by specific administrative processes. This question focuses on finding outliers. It identifies modifications made by processes that rarely alter service keys and detects when a service's 'ImagePath' is changed to a value never seen before for that specific service, indicating a potential hijack.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 | STATS frequency(ProcessName) by ObjectName | WHERE frequency < 5th_percentile | or | SEARCH EventID=4657 AND ObjectName ENDS WITH 'ImagePath' | BASELINE historical ImagePath_values per service | ALERT on new values
  - question: Can a machine learning model predict if a service registry modification is malicious?
    context: This question explores using a classification model to proactively identify malicious service registry changes. By training a model on features like the executable path's characteristics, the parent process, time of day, and user context, we can score the likelihood of a modification being malicious, allowing analysts to focus on high-probability events.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE EventID=4657 data | EXTRACT features(path_string, parent_process, time_of_day, service_name, user) | INVOKE ML_Model_Classifier | WHERE prediction == 'malicious'
  - question: How can I use symbolic analysis to detect the installation of malicious new services?
    context: Adversaries often install new services as a persistence mechanism. This question focuses on detecting them by monitoring new service creation events and comparing the service name and its executable path against regular expressions (regex) known to be associated with malware families and common persistence tools.
    answer_sources:
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4697 | EXTRACT ServiceName, ImagePath | MATCH regex(ServiceName, ImagePath) against KnownMalwarePatterns
  - question: How can statistical analysis help identify suspicious new services based on name entropy or path rarity?
    context: Malicious services may use randomly generated names (high entropy) or be placed in unusual file locations. This question aims to find these statistical outliers by calculating the entropy of new service names and the prevalence of their executable paths, flagging those that deviate significantly from established environmental baselines.
    answer_sources:
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4697 | CALCULATE entropy(ServiceName) | WHERE entropy > 95th_percentile_baseline | or | CALCULATE rarity(ImagePath_directory) | WHERE rarity < 5th_percentile
  - question: Can a machine learning clustering algorithm identify groups of anomalous new services?
    context: Legitimate software often installs services with similar naming conventions and path structures. This question explores using a clustering algorithm like DBSCAN to group new services by features like name length, entropy, and ImagePath. Services that do not fit into large, established clusters (i.e., are outliers or form small, distinct clusters) are suspicious and warrant investigation.
    answer_sources:
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE EventID=4697 data | EXTRACT features(name_length, entropy, ImagePath_dir) | INVOKE ML_Model_DBSCAN | WHERE cluster == 'noise' or cluster_size < threshold
  - question: How can I symbolically detect when a service's ImagePath is modified to a non-standard or user-writable directory?
    context: Adversaries may place their payloads in user-writable directories like C:\Users or C:\Temp to bypass stricter permissions on system folders. This question focuses on creating a rule to detect when a service's ImagePath is changed to a directory outside of an established allow-list of standard executable locations (e.g., System32, Program Files).
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User Workstations
      - Multi-user Servers (e.g., Terminal Servers)
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName ENDS WITH 'ImagePath' | EXTRACT NewPathDir | WHERE NewPathDir NOT IN (AllowList_Dirs) AND NewPathDir MATCHES (User_Writable_Paths)
  - question: How can I statistically identify a service's ImagePath being changed to an outlier directory?
    context: For any given service, it is expected to run from a small, predictable set of directories. This question aims to build a historical baseline of legitimate directories for each service and alert when a modification points the ImagePath to a directory that is a statistical outlier (i.e., has a very low probability of being associated with that service).
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User Workstations
      - Multi-user Servers (e.g., Terminal Servers)
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName ENDS WITH 'ImagePath' | BASELINE historical_dirs by ServiceName | ALERT if NewPathDir for ServiceName has probability < 1%
  - question: Can a machine learning model detect anomalous service and ImagePath directory pairings?
    context: This question proposes using a one-class anomaly detection model (like a One-Class SVM or Isolation Forest) to learn the normal pairings of service names and their associated ImagePath directories. The model can then be used to identify and alert on new or modified services that create a pairing that deviates from the learned norm, indicating a potential hijack or malicious installation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User Workstations
      - Multi-user Servers (e.g., Terminal Servers)
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE service_and_path_data | TRAIN ML_Model_IsolationForest on (service_name, image_path_dir) pairs | PREDICT on new pairs | WHERE prediction == 'anomaly'
  - question: How can I symbolically detect the malicious use of 'Performance' or 'Parameters' subkeys or the 'ServiceDll' value for persistence?
    context: Some services can be configured to load a DLL for performance monitoring or other functions. Adversaries abuse this by adding a 'ServiceDll' value or related keys to services that do not normally use them, pointing to a malicious DLL. This question focuses on monitoring the creation or modification of these specific keys and values and checking the referenced DLL against threat intelligence.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName MATCHES ('\\Performance', '\\Parameters', '\\ServiceDll') | IF ObjectName == 'ServiceDll' THEN ENRICH Hash(Value) | LOOKUP ThreatIntelligence(Hash)
  - question: How can I statistically identify the anomalous creation of 'Performance' keys or rare 'ServiceDll' paths?
    context: The legitimate use of 'Performance' subkeys or 'ServiceDll' values is limited to a specific set of services. This question aims to baseline which services normally use these keys and alert when they are created for any service not on the baseline. Additionally, it flags the use of 'ServiceDll' paths that are statistically rare across the entire enterprise.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName MATCHES ('\\Performance', '\\Parameters') | WHERE ServiceName NOT IN (Baseline_Services) | or | SEARCH EventID=4657 AND ObjectName == 'ServiceDll' | CALCULATE rarity(DllPath) | WHERE rarity < 5th_percentile
  - question: Can a machine learning model assess the risk of a modification to a service's 'Performance' or 'Parameters' keys?
    context: This question explores using a classification model to score the risk of modifications to these specific service subkeys. By analyzing features like the service's historical usage of these keys, the rarity and entropy of the DLL path, and the reputation of the modifying process, the model can predict if the change is malicious, helping to prioritize alerts.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers
      - Application Servers
      - Critical Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE EventID=4657 data | EXTRACT features(service_history, path_rarity, path_entropy, process_reputation) | INVOKE ML_Model_RiskScorer | WHERE score > threshold
  - question: How can I symbolically detect network beaconing from a process spawned by services.exe?
    context: A compromised service may launch a process that communicates with an adversary's Command and Control (C2) server. This question focuses on correlating service-spawned processes with network connection logs to find communications with destinations listed in threat intelligence feeds.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4688 AND ParentProcessName='services.exe' | JOIN on HostIP, Timestamp with (SEARCH source=zeek_conn) | LOOKUP ThreatIntelligence(destination_ip) | ALERT on match
  - question: How can I statistically detect C2 beaconing from processes spawned by services.exe?
    context: Adversary C2 communication is often periodic and machine-like, resulting in connections with a very regular time interval (low jitter). This question aims to identify this behavior by analyzing the network connections of service-spawned processes and calculating the standard deviation of the time between connections. A very low deviation suggests automated beaconing.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4688 AND ParentProcessName='services.exe' | CORRELATE with conn_logs | For each process, CALCULATE stdev(time_delta) between connections to same destination | WHERE stdev < 5th_percentile_variance
  - question: Can a machine learning model detect anomalous network traffic from service-spawned processes?
    context: This question explores using a time-series forecasting model (like LSTM or ARIMA) to learn the normal network behavior (e.g., bytes out, connection count) for each legitimate service. The model can then be used to detect significant deviations from the forecasted traffic patterns, which could indicate malicious activity like C2 communications or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For each service, TRAIN ML_Model_TimeSeries on historical network traffic | PREDICT expected traffic | COMPARE observed traffic to prediction | ALERT on significant deviation
  - question: How can I symbolically detect the modification of a service's 'FailureCommand' for privilege escalation?
    context: Adversaries can set a service's 'FailureCommand' to execute a malicious payload. If the service is configured to run as SYSTEM and made to fail, the command will execute with SYSTEM privileges. This question aims to detect modifications to this registry value and compare the command against known privilege escalation tools.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Standard User Workstations
      - Multi-user Servers
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName ENDS WITH '\\FailureCommand' | EXTRACT command | LOOKUP ThreatIntelligence(command, hash(command_executable)) for privesc tools
  - question: How can I statistically detect the modification of a service's 'FailureCommand'?
    context: Legitimate modification of the 'FailureCommand' registry value is exceptionally rare in most environments. Therefore, any modification to this value can be treated as a high-confidence statistical anomaly. This question focuses on creating a high-severity alert for any observed change to this value, as it is a strong indicator of a privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Standard User Workstations
      - Multi-user Servers
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName ENDS WITH '\\FailureCommand' | ALERT severity=high
  - question: Can a machine learning model distinguish malicious 'FailureCommand' values from benign ones?
    context: While any change to 'FailureCommand' is suspicious, a machine learning model can help automate the analysis. This question explores training a text classification model on the command string itself. By analyzing features like command length and keywords (e.g., 'powershell', 'net user'), the model can classify the command's intent and flag likely privilege escalation attempts.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Standard User Workstations
      - Multi-user Servers
      - All Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE EventID=4657 AND ObjectName ENDS WITH '\\FailureCommand' data | EXTRACT features from command string | INVOKE ML_Model_TextClassifier | WHERE prediction == 'privesc'
  - question: How can I symbolically detect a non-administrative user or unusual process modifying a service?
    context: Service configurations should typically only be modified by administrators or dedicated system management tools. This question aims to detect when tools like 'sc.exe', 'reg.exe', or PowerShell are used to modify a service by a non-privileged user or are spawned by an unusual parent process like an Office application or web browser.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4688 AND ProcessName IN ('sc.exe', 'reg.exe', 'powershell.exe') AND CommandLine MATCHES ('config * binPath=', 'add HKLM\\SYSTEM\\CurrentControlSet\\Services') | WHERE UserName NOT IN (Admin_Groups)
  - question: How can I statistically identify unusual users or parent processes modifying services?
    context: This question focuses on baselining the users and parent processes that legitimately modify services. By profiling normal administrative activity, we can use statistical analysis to flag any execution of a service-modification command (like sc.exe) by a user or parent process that is a statistical outlier, indicating a potential exploit.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4688 AND ProcessName IN ('sc.exe', 'reg.exe', 'powershell.exe') | BASELINE user and parent_process behavior | ALERT on outlier users or parents
  - question: Can a machine learning model detect anomalous event sequences related to service modification?
    context: Adversaries often follow a sequence of actions, such as a browser spawning PowerShell which then modifies a service. This question explores using a sequence analysis model to learn legitimate chains of events and flag any anomalous sequence, providing a higher-fidelity alert for complex attack patterns.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE process and registry events | TRAIN ML_Model_SequenceAnalyzer on benign event chains | PREDICT on new event chains | WHERE prediction == 'anomalous'
  - question: How can I symbolically detect a sequence of events indicating a service permission hijack for privilege escalation?
    context: A common privilege escalation pattern involves an adversary changing a service's registry key permissions, modifying the service's configuration (e.g., 'ImagePath'), and then starting the service. This question focuses on creating a correlation rule to detect this specific sequence of events (Event 4670 -> 4657 -> 7036/4688) occurring in a short time window on the same host.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Domain Controllers
      - Member Servers
      - Administrative Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEQUENCE [SEARCH EventID=4670 AND ObjectName contains 'Services\\'] then [SEARCH EventID=4657 on same ObjectName by same User] within 10 minutes
  - question: How can I statistically detect an automated service permission hijack?
    context: Automated exploits that perform a service permission hijack will execute the required steps very quickly. This question aims to measure the time delta between the permission change event (4670) and the service configuration change event (4657). A very short time delta is a strong statistical indicator of an automated tool rather than manual administrative action.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Domain Controllers
      - Member Servers
      - Administrative Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE EventID=4670 and EventID=4657 on same object | CALCULATE time_delta | WHERE time_delta < 5 minutes
  - question: Can a machine learning or graph analysis model identify illegitimate service modification workflows?
    context: This question proposes modeling sequences of user, process, and registry events as paths in a graph. By training a model to recognize the paths corresponding to legitimate administrative workflows (like software deployment), it can then detect and alert on new, anomalous paths that represent potential exploit chains.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Domain Controllers
      - Member Servers
      - Administrative Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE event data into GraphDB | MODEL legitimate workflow paths | ALERT on paths that deviate from the model
  - question: How can I symbolically detect a service's ImagePath being modified to a LOLBAS with malicious arguments?
    context: Adversaries use Living Off the Land Binaries (LOLBAS) like 'rundll32.exe' or 'powershell.exe' to execute malicious code, evading simple executable-based detections. This question focuses on detecting when a service's ImagePath is set to a LOLBAS and then inspecting the command-line arguments for suspicious patterns like encoded commands, download cradles, or script file references.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4688 where ProcessName is in LOLBAS_list and ParentProcess is 'services.exe' | MATCH regex(CommandLine) for ('-enc', 'IEX', '.ps1', '.sct')
  - question: How can I statistically identify a LOLBAS being used maliciously by a service?
    context: Malicious use of LOLBAS often involves long, complex, or obfuscated command-line arguments. This question aims to baseline the normal command-line length and entropy for each LOLBAS when spawned by services. Executions where these values are statistical outliers (e.g., in the 98th percentile) are highly suspicious and warrant investigation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4688 where ProcessName is in LOLBAS_list | BASELINE length and entropy of CommandLine | ALERT where length or entropy > 98th percentile
  - question: Can a machine learning model distinguish between benign and malicious LOLBAS usage by services?
    context: This question explores training a classifier on LOLBAS command lines to automatically distinguish malicious use from benign administrative use. By using features like argument count, presence of URLs, Base64 strings, and specific flags, the model can detect novel evasion techniques that may not match predefined symbolic patterns.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE LOLBAS command-line data | EXTRACT features(arg_count, has_url, has_base64) | INVOKE ML_Model_Classifier | WHERE prediction == 'malicious'
  - question: How can I symbolically detect a service masquerading as a legitimate service through name misspelling?
    context: To evade detection by analysts, adversaries may create a malicious service with a 'DisplayName' that is a subtle misspelling of a legitimate one (e.g., 'WinDefend' vs. 'WinDefend'). This question focuses on using string similarity (Levenshtein distance) to find misspelled service names, and then checking if the associated 'ImagePath' is incorrect for that service.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4697
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4697 | CALCULATE Levenshtein_distance(DisplayName, Legitimate_Service_Names) | WHERE distance IN (1,2) AND ImagePath != Legitimate_Path
  - question: How can I statistically detect a service masquerading via a mismatched DisplayName and ImagePath?
    context: In a healthy environment, there is a predictable relationship between a service's 'DisplayName' and its 'ImagePath'. This question aims to create a baseline map of all legitimate (DisplayName, ImagePath) pairs and alert on any new or modified service that pairs a known 'DisplayName' with a statistically rare or never-before-seen 'ImagePath'.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4697
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4697 or 4657 | BASELINE legitimate (DisplayName, ImagePath) pairs | ALERT on known DisplayName with new or rare ImagePath
  - question: Can a machine learning clustering algorithm identify masquerading services?
    context: This question explores using a clustering algorithm on service properties to find masquerading attempts. By grouping services based on features derived from their names (like character n-grams) and paths, a malicious, misspelled service will likely fail to group with its legitimate counterparts and instead form a small, distinct cluster that can be flagged for investigation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4697
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE all service data | EXTRACT features from name and path | INVOKE ML_Model_Clustering | INVESTIGATE small or outlier clusters
  - question: How can I symbolically detect the tampering or disabling of critical security services via the registry?
    context: A primary goal for adversaries is to disable security tools like antivirus or EDR. This question focuses on creating a high-priority alert that monitors the specific registry keys of critical security services and triggers if the 'Start' type is changed to disabled (value 4) or if the 'ImagePath' is altered.
    answer_sources:
      - Windows Event ID 4657
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName IN (Critical_Security_Service_Keys) | WHERE (ValueName=='Start' AND NewValue=='4') OR (ValueName=='ImagePath' AND NewValue!=KnownGoodPath) | ALERT severity=critical
  - question: How can I statistically detect a coordinated campaign to disable security services?
    context: While a single security service modification is a critical event, a sudden increase in such modifications across many endpoints could indicate a large-scale, automated attack. This question aims to monitor the environment-wide rate of modifications to critical security service keys and alert on any statistically significant spike in this activity.
    answer_sources:
      - Windows Event ID 4657
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName IN (Critical_Security_Service_Keys) | TIMESERIES count | ALERT on statistical spike in modification rate
  - question: Can an anomaly detection model identify illegitimate modifications to security services?
    context: Even security services are sometimes legitimately modified during approved software updates. This question explores using an anomaly detection model (like Isolation Forest) trained on legitimate modification events. The model can learn the context of normal changes (e.g., time of day, modifying process) and alert on any modification that is an outlier.
    answer_sources:
      - Windows Event ID 4657
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE security service modification events | TRAIN ML_Model_IsolationForest on legitimate event context | PREDICT on new events | WHERE prediction == 'anomaly'
  - question: How can I symbolically detect service registry modifications by unauthorized processes?
    context: Service registry keys should only be modified by a small set of system administration and installer processes. This question focuses on creating an allow-list of these authorized processes and alerting any time a process not on the list (e.g., winword.exe, chrome.exe) is observed modifying a key under the HKLM\SYSTEM\CurrentControlSet\Services\ branch.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName contains 'Services\\' | GET ProcessName for ProcessID | WHERE ProcessName NOT IN (Authorized_Process_List)
  - question: How can I statistically identify rare processes modifying service registry keys?
    context: Beyond a strict allow-list, we can statistically identify unusual processes. This question aims to calculate the prevalence of every process that modifies service registry keys across the enterprise. Modifications made by processes that are in the bottom percentile of frequency are statistically rare and should be investigated as potential threats.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH EventID=4657 AND ObjectName contains 'Services\\' | GET ProcessName | CALCULATE frequency(ProcessName) across enterprise | WHERE frequency < 5th_percentile
  - question: Can a machine learning model predict if a process is maliciously modifying a service?
    context: This question explores using a classification model to determine if a (Modifying_Process, Target_Service) pair is malicious. By training on features like the process's signature status, the user context, and the time of day, the model can learn to detect suspicious modifications even when they are performed by otherwise legitimate-looking processes.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE service modification event data | EXTRACT features(process_signature, user_context, time_of_day) | INVOKE ML_Model_Classifier | WHERE prediction == 'malicious'