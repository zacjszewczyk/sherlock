name: T1027.008: Stripped Payloads
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is using stripped payloads to evade defenses. This involves checking for executable files that match known stripped malware hashes, possess static properties indicative of stripping (such as a low symbol count or missing resources), exhibit anomalous section entropy suggesting packing and stripping, engage in suspicious post-execution behavior like C2 beaconing, or masquerade as legitimate system binaries while running from non-standard locations.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are new executables matching known stripped malware IOCs based on their hash?
  context: Adversaries often reuse stripped malware payloads. Matching the hash of a newly observed executable against a threat intelligence feed of known stripped malware Indicators of Compromise (IOCs) is a direct and high-fidelity method for detecting their presence on the network or an endpoint.
  answer_sources:
  - Zeek file.log
  - Windows Event ID 4688
  - Network egress/ingress points
  - User workstations
  - Critical application servers
  - File shares
  - Email gateways
  range: last 90 days
  queries:
  - symbolic: "SEARCH (Zeek file.log OR WEVT 4688) -> CALCULATE sha256 -> JOIN with threat_intel_hashes -> ALERT on match"
- question: Is there an anomalous influx of new, previously unseen executable files?
  context: A sudden, statistically significant increase in the number of unique, previously unseen executables within a short time frame can indicate a large-scale malware deployment campaign. Adversaries may use stripped payloads in such campaigns to bypass signature-based detection, making anomaly detection on file counts a valuable investigative tool.
  answer_sources:
  - Zeek file.log
  - Windows Event ID 4688
  - Network egress/ingress points
  - User workstations
  - Critical application servers
  - File shares
  - Email gateways
  range: last 90 days
  queries:
  - statistical: "SEARCH new_executable_hashes in 1hr_window -> COUNT unique hashes -> COMPARE to 30day_rolling_average + 3*std_dev -> ALERT if greater"
- question: Are new executables being classified as malicious by a machine learning model based on their metadata?
  context: Machine learning models can identify malicious files by learning complex patterns from metadata (e.g., file size, source IP reputation, hash reputation) that are not captured by simple signatures. This approach is effective for detecting novel or obfuscated stripped payloads that have no known hash. A high-confidence 'malicious' classification warrants immediate investigation.
  answer_sources:
  - Zeek file.log
  - Windows Event ID 4688
  - Network egress/ingress points
  - User workstations
  - Critical application servers
  - File shares
  - Email gateways
  range: last 90 days
  queries:
  - machine_learning: "INPUT new_executable_metadata -> to RandomForestClassifier -> ALERT if classification == 'malicious' AND confidence > 0.8"
- question: Are new executables found to be missing critical resources like the .rsrc section or VersionInfo?
  context: Legitimate software almost always includes a resource (.rsrc) section containing metadata like icons, version information (VersionInfo), and language strings. Adversaries often strip these resources to reduce file size and remove identifying information. Detecting an executable that is missing these common resources is a strong indicator of a stripped payload.
  answer_sources:
  - Static analysis tool output
  - Zeek file.log
  - Windows Event ID 4688
  - File sandboxes
  - User workstations
  - Application servers
  - Network file shares
  range: last 90 days
  queries:
  - symbolic: "SEARCH new_executables -> SUBMIT to static_analysis_tool -> ALERT if rsrc_section == missing OR version_info_size == 0"
- question: Do new executables exhibit unusually low symbol counts or string density compared to baselines of legitimate software?
  context: Stripping a payload often involves removing debugging symbols, export/import function names, and other descriptive strings to hinder reverse engineering and evade content-based detection. A file with a statistically low count of symbols or printable strings compared to a baseline of similar legitimate files is highly suspect and may be a stripped payload.
  answer_sources:
  - Static analysis tool output
  - Zeek file.log
  - Windows Event ID 4688
  - File sandboxes
  - User workstations
  - Application servers
  - Network file shares
  range: last 90 days
  queries:
  - statistical: "SEARCH new_executables -> EXTRACT symbol_count, string_density -> COMPARE to baseline_percentiles -> ALERT if count < 5th_percentile"
- question: Are new executables being identified as outliers by a clustering algorithm based on their static file properties?
  context: Clustering algorithms can group files based on similarities in their static properties (e.g., section counts, symbol density). Legitimate software tends to form dense clusters. A file that does not fit into any known cluster of goodware is an outlier and potentially a stripped or malicious payload that warrants further analysis.
  answer_sources:
  - Static analysis tool output
  - Zeek file.log
  - Windows Event ID 4688
  - File sandboxes
  - User workstations
  - Application servers
  - Network file shares
  range: last 90 days
  queries:
  - machine_learning: "INPUT static_file_properties -> to DBSCAN_model -> ALERT if classification == outlier"
- question: Are executables being detected with high-entropy code sections and missing or empty resource sections?
  context: High entropy (e.g., >7.2) in a code section (.text) is a classic sign of packing or encryption, used to obfuscate the true payload. When this is combined with a missing or zero-size resource section (.rsrc), it strongly suggests an adversary has packed their malware and stripped it of non-essential data to evade both static analysis and signature-based detection.
  answer_sources:
  - Static analysis tool output
  - Zeek file.log
  - Windows Event ID 4688
  - File sandboxes
  - Network egress/ingress points
  - User workstations
  - Endpoint Detection and Response (EDR) platforms
  range: last 90 days
  queries:
  - symbolic: "SEARCH new_executables -> from static_analysis_tool -> ALERT if .text_entropy > 7.2 AND .rsrc_size == 0"
- question: Do new executables show statistically anomalous entropy values in their PE sections compared to baselines?
  context: Legitimate executables have predictable entropy levels for their different sections (e.g., low for resources, moderate for code). A file with a code section (.text) entropy that is a statistical upper outlier and a resource section (.rsrc) size that is a lower outlier deviates significantly from the norm, indicating it has likely been packed (increasing code entropy) and stripped (decreasing resource size).
  answer_sources:
  - Static analysis tool output
  - Zeek file.log
  - Windows Event ID 4688
  - File sandboxes
  - Network egress/ingress points
  - User workstations
  - Endpoint Detection and Response (EDR) platforms
  range: last 90 days
  queries:
  - statistical: "SEARCH new_executables -> CALCULATE section_entropy -> COMPARE to baseline_IQR -> ALERT if .text_entropy > Q3+1.5*IQR AND .rsrc_size < Q1-1.5*IQR"
- question: Are executables causing high reconstruction errors in an autoencoder model trained on legitimate PE section entropy profiles?
  context: An autoencoder trained on the entropy patterns of legitimate software learns to accurately reconstruct "normal" entropy profiles. When a stripped and packed file is processed, its anomalous entropy vector (high code entropy, low/no resource entropy) cannot be reconstructed accurately, resulting in a high reconstruction error. This flags the file as anomalous and potentially malicious.
  answer_sources:
  - Static analysis tool output
  - Zeek file.log
  - Windows Event ID 4688
  - File sandboxes
  - Network egress/ingress points
  - User workstations
  - Endpoint Detection and Response (EDR) platforms
  range: last 90 days
  queries:
  - machine_learning: "INPUT pe_section_entropy_vector -> to Autoencoder_model -> CALCULATE reconstruction_error -> ALERT if error > threshold"
- question: Are processes from previously identified stripped executables making network connections to known malicious IP addresses?
  context: A key goal of malware is to establish command and control (C2). Correlating a process execution from a binary already flagged as 'stripped' with a subsequent outbound network connection to an IP address on a threat intelligence blocklist provides strong evidence that the stripped payload is active and malicious.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Domain Controllers
  - Network egress/ingress points
  - DNS servers
  range: last 90 days
  queries:
  - symbolic: "SEARCH WEVT 4688 for process_from_stripped_exe -> CORRELATE with Zeek conn.log within 60s -> WHERE dest_ip in threat_intel_blocklist -> ALERT on match"
- question: Are processes from stripped executables exhibiting machine-like network beaconing with highly regular intervals?
  context: Automated C2 communication often occurs at regular, machine-like intervals (beaconing). Human-generated traffic is typically more random. A process spawned from a stripped executable that makes outbound connections with a very low standard deviation in its timing (e.g., every 60 seconds exactly) is likely an implant beaconing to its C2 server.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Domain Controllers
  - Network egress/ingress points
  - DNS servers
  range: last 90 days
  queries:
  - statistical: "SEARCH Zeek conn.log for process_from_stripped_exe -> GROUP by 10min_window -> CALCULATE std_dev of inter-arrival_time -> ALERT if std_dev < 1s"
- question: Does the network traffic from a new process exhibit highly predictable, non-human patterns indicative of C2 communication?
  context: Malware C2 traffic is often automated and therefore highly predictable. A time series forecasting model can learn the pattern of this traffic. If the model can predict future traffic volume and timing with a very low error rate, it suggests the traffic is not generated by a human and is likely automated C2 activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User workstations
  - Domain Controllers
  - Network egress/ingress points
  - DNS servers
  range: last 90 days
  queries:
  - machine_learning: "INPUT outbound_traffic_timeseries -> to ARIMA_model -> CALCULATE forecast_error -> ALERT if error < threshold for multiple intervals"
- question: Are critical system processes running from non-standard directories or with hashes that don't match a known-good manifest?
  context: Adversaries masquerade their malware by naming it after legitimate system processes like 'svchost.exe'. However, they often place it in a non-standard directory (e.g., C:\Users\Public instead of C:\Windows\System32). Alerting when a critical process name runs from an incorrect path or has an incorrect file hash is a key way to detect this masquerading technique, especially if the binary also shows signs of being stripped.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - User workstations
  - Critical application servers
  - System Registry
  range: last 90 days
  queries:
  - symbolic: "SEARCH WEVT 4688 WHERE process_name in [lsass.exe, svchost.exe] -> ALERT if process_path != 'C:\\Windows\\System32\\' OR file_hash NOT in known_good_manifest"
- question: Are legitimate system processes being spawned by unusual parent processes?
  context: Legitimate system processes have expected parent-child relationships (e.g., services.exe is the parent of svchost.exe). An adversary might inject into a process like explorer.exe and use it to launch a masquerading 'svchost.exe'. This creates a statistically rare parent-child relationship that can be detected as an anomaly and indicates potential compromise.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - User workstations
  - Critical application servers
  - System Registry
  range: last 90 days
  queries:
  - statistical: "SEARCH WEVT 4688 for svchost.exe -> CALCULATE frequency of parent_process_name -> ALERT if parent_process_name is statistical outlier (e.g., explorer.exe)"
- question: Are system process executions being flagged as anomalous by a one-class SVM model?
  context: A One-Class SVM can learn a profile of what constitutes 'normal' behavior for system processes, based on features like file path, parent process, and user context. Any process execution that deviates from this learned profile is flagged as an anomaly. This is a powerful method for detecting masquerading, as the malicious process will likely have anomalous characteristics that fall outside the normal boundary.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - User workstations
  - Critical application servers
  - System Registry
  range: last 90 days
  queries:
  - machine_learning: "INPUT process_execution_features -> to OneClassSVM_model -> ALERT if classification == anomaly"