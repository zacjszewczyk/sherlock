name: "T1398: Boot or Logon Initialization Scripts"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: |
  This playbook helps determine if an adversary has established persistence on corporate mobile devices by modifying boot or logon initialization scripts. It focuses on detecting evidence of tampering through several key indicators. The first is MDM attestation failures, specifically from Google's SafetyNet API, where a `ctsProfileMatch` flag of `false` indicates device tampering or a `basicIntegrity` flag of `false` suggests a potential rootkit. The second indicator is a failure in Android's Verified Boot process, where a 'Red' status points to a corrupt system partition and a 'Yellow' status indicates modification of other verified partitions. The third indicator involves forensic analysis of a device's file system, looking for mismatches between the hashes of critical boot files and a known-good baseline, or the presence of unauthorized files in boot directories.
type: "technique"
related:
  - "TA0028: Persistence"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a device failed a Google SafetyNet attestation check, indicating potential tampering?"
    context: |
      Google SafetyNet is an API that helps verify the integrity of an Android device. A failure, indicated by `ctsProfileMatch` being `false` or `basicIntegrity` being `false`, is a strong signal that the device has been tampered with, rooted, or is running an unofficial ROM. This question aims to create a high-priority alert for individual device integrity failures, enabling a rapid response such as moving the device to a restricted network to contain any potential threat.
    answer_sources:
      - "MDM attestation event logs"
      - "Google SafetyNet API result logs"
      - "Samsung Knox attestation logs"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Centralized logging platform (e.g., SIEM), Mobile Device Management (MDM) console, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - "pseudocode": "SEARCH SIEM logs WHERE (source='MDM' AND google_safetynet_result.ctsProfileMatch='false') OR (google_safetynet_result.basicIntegrity='false')"
  - question: "Has there been an anomalous spike in SafetyNet attestation failures across the device fleet?"
    context: |
      While single attestation failures are important, a sudden increase in failures across many devices can indicate a large-scale, coordinated attack. This question focuses on establishing a historical baseline of normal failure rates and alerting when the current rate significantly exceeds that baseline (e.g., surpasses the 99th percentile). This allows security teams to detect widespread campaigns that might otherwise be lost in the noise of individual alerts.
    answer_sources:
      - "MDM attestation event logs"
      - "Google SafetyNet API result logs"
      - "Samsung Knox attestation logs"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Centralized logging platform (e.g., SIEM), Mobile Device Management (MDM) console, and network egress points instrumented with Zeek sensors."
    range: "last 90 days"
    queries:
      - "pseudocode": "CALCULATE hourly count of SafetyNet failures over 30 days. CALCULATE 99th percentile baseline. ALERT if current hour count > baseline."
  - question: "Does a device that failed attestation exhibit suspicious network behavior?"
    context: |
      An attestation failure confirms a device is non-compliant, but it doesn't confirm active malicious behavior. This follow-up question aims to automatically assess the risk posed by a non-compliant device. By analyzing its recent network traffic (e.g., DNS query entropy, connection failures, connections to low-reputation IPs) with a machine learning classifier, an incident can be automatically escalated to critical if the device's network activity is classified as malicious with high confidence.
    answer_sources:
      - "MDM attestation event logs"
      - "Google SafetyNet API result logs"
      - "Samsung Knox attestation logs"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Centralized logging platform (e.g., SIEM), Mobile Device Management (MDM) console, and network egress points instrumented with Zeek sensors."
    range: "last 24 hours"
    queries:
      - "pseudocode": "GET IP for device from alert. QUERY Zeek logs for IP over last 24 hours. EXTRACT features (DNS entropy, connection ratios, etc.). APPLY logistic regression model. IF score > 0.85, ESCALATE."
  - question: "Has a device reported a 'Red' Android Verified Boot status, indicating a corrupt system partition?"
    context: |
      Android Verified Boot ensures all executed code comes from a trusted source. A 'Red' status is the most severe warning, indicating that the device's system partition is corrupt or has been modified. This is a high-confidence indicator of compromise. The purpose of this question is to trigger an immediate, automated response, such as isolating the device from the network and initiating a remote wipe to prevent further damage.
    answer_sources:
      - "MDM device health telemetry logs"
      - "MDM policy compliance status logs"
      - "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform."
    range: "last 90 days"
    queries:
      - "pseudocode": "SEARCH SIEM logs WHERE source='MDM' AND device_health.verified_boot_state='Red'"
  - question: "Is there a rising trend of devices reporting a 'Yellow' Android Verified Boot status?"
    context: |
      A 'Yellow' Verified Boot status indicates that a non-system partition (like `vbmeta`) has been modified. While less severe than a 'Red' state, it still represents a deviation from a known-good state. This question seeks to identify slow-moving attack campaigns by monitoring for a statistically significant increase in the trend of 'Yellow' state devices over time. Using time-series analysis like STL decomposition helps distinguish a genuine upward trend from normal fluctuations.
    answer_sources:
      - "MDM device health telemetry logs"
      - "MDM policy compliance status logs"
      - "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform."
    range: "last 90 days"
    queries:
      - "pseudocode": "CALCULATE daily count of 'Yellow' state devices over 90 days. APPLY STL decomposition. IF trend component has positive slope over 7 days, ALERT."
  - question: "Does a device exhibit an anomalous combination of health and configuration attributes?"
    context: |
      Adversaries may use techniques that do not trigger a single, specific alert but create a profile that deviates from the norm. This question uses an anomaly detection model (Isolation Forest) to find outliers based on a combination of device telemetry features (e.g., boot state, OS patch level, app sideloading, developer mode). Flagging devices with the highest anomaly scores allows analysts to investigate suspicious devices that might otherwise be missed by rule-based detections.
    answer_sources:
      - "MDM device health telemetry logs"
      - "MDM policy compliance status logs"
      - "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform."
    range: "last 90 days"
    queries:
      - "pseudocode": "GATHER MDM telemetry for all devices (boot state, OS update age, etc.). APPLY Isolation Forest model. FLAG devices in top 1% of anomaly scores for investigation."
  - question: "Are there any modified or known-malicious files in the boot directories of a device's forensic image?"
    context: |
      This question is part of a deep-dive forensic analysis performed on a device image. Its purpose is to definitively confirm a compromise by verifying the integrity of files in critical boot directories (e.g., `/system/etc/init/`, `init.rc`). By computing SHA-256 hashes of these files and comparing them against an internal known-good baseline and external threat intelligence feeds, an analyst can confirm a finding and escalate the incident.
    answer_sources:
      - "Mobile device file system image"
      - "File system metadata from image"
      - "Internal known-good file hash database"
      - "Threat intelligence hash feeds"
      - "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage."
    range: "last 90 days"
    queries:
      - "pseudocode": "FOR each file in boot directories of image: CALCULATE SHA-256 hash. QUERY hash against internal baseline DB. QUERY hash against threat intel feed. IF mismatch or malicious hit, ESCALATE."
  - question: "Are there any files in the boot directories with unusually high entropy, suggesting obfuscation or encryption?"
    context: |
      Malware authors often use packing or encryption to hide their code from signature-based antivirus scanners. This process increases the file's Shannon entropy, a measure of randomness. This question aims to detect potentially malicious files that are not yet known (i.e., not in hash databases) by identifying files with an entropy score that is a statistical outlier compared to the baseline for that file type.
    answer_sources:
      - "Mobile device file system image"
      - "File system metadata from image"
      - "Internal known-good file hash database"
      - "Threat intelligence hash feeds"
      - "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage."
    range: "last 90 days"
    queries:
      - "pseudocode": "FOR each file in boot directories: CALCULATE Shannon entropy. COMPARE to baseline entropy for file type. IF entropy > (mean + 3 * stdev), FLAG for analysis."
  - question: "Does a modified or unknown script in the boot directories exhibit features characteristic of malware?"
    context: |
      For scripts that have been identified as suspicious (modified, unknown, or high entropy), this question provides a method for more advanced analysis. A machine learning model (Random Forest) can be used to classify the script's maliciousness based on a set of features, such as the frequency of suspicious commands (`setenforce 0`), the presence of encoded strings, or unusual file permissions. A high-confidence 'malicious' classification prioritizes the file for manual reverse engineering.
    answer_sources:
      - "Mobile device file system image"
      - "File system metadata from image"
      - "Internal known-good file hash database"
      - "Threat intelligence hash feeds"
      - "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage."
    range: "last 90 days"
    queries:
      - "pseudocode": "FOR each suspicious script: EXTRACT features (n-grams, encoded strings, permissions). APPLY Random Forest model. IF score > 0.90, PRIORITIZE for reverse engineering."