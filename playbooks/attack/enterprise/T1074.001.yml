name: T1074.001: Local Data Staging
id: a0c6b1d8-f3e4-4a9b-8c1d-0e2f1a3b4c5d
description: This playbook focuses on detecting Local Data Staging (T1074.001) by looking for several key indicators to determine if an adversary is collecting and preparing data on local systems prior to exfiltration. These indicators include the execution of known staging tools (like 7z.exe, rar.exe) or the creation of suspicious archive files in common temporary directories. It also watches for command-line or PowerShell scripts that recursively find and archive files, especially from sensitive locations. Another indicator is a process reading an anomalously high number of unique files from diverse paths followed by a large file write, which suggests data collection and aggregation. Finally, it monitors for a burst of network file access (SMB reads) from multiple shares to a single host, correlated with the creation of a large local archive on that host.
type: technique
related:
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Has a known malicious staging tool been executed or a known malicious archive file been created?
    context: This question aims to detect the most straightforward staging attempts where the adversary uses known tools or generates files with known indicators of compromise (IOCs). By comparing process and file hashes against a threat intelligence feed, analysts can quickly identify common staging utilities (e.g., 7z.exe, rar.exe) or malware-generated archives, especially when they appear in unusual or temporary locations like C:\Windows\Temp or user Recycle Bins.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Threat intelligence watchlist of known malicious staging tools and archive file IOCs
      - User workstations, application servers, and domain controllers, focusing on common staging directories (e.g., C:\Windows\Temp, C:\Perflogs, C:\Users\Public, %APPDATA%\Temp, and user Recycle Bins).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (EID 4688) OR file_creation_events (EID 4663)
          WHERE (process_hash IN threat_intel_watchlist OR file_hash IN threat_intel_watchlist)
          AND (file_path IN common_staging_dirs)
          ALERT on match
  - question: Has an unusually large archive file been created on a host, especially by a non-standard process?
    context: Adversaries often compress large volumes of stolen data into a single archive, resulting in an unusually large file. This question focuses on detecting anomalous file sizes by baselining normal archive creation activity on a per-host basis. An alert for an archive exceeding the 95th percentile of historical sizes is a strong indicator. The suspicion is heightened if the process creating the archive is not a typical compression utility, but rather a system process like 'svchost.exe' or a script interpreter like 'powershell.exe', which could be hijacked for malicious purposes.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations, application servers, and domain controllers, focusing on common staging directories (e.g., C:\Windows\Temp, C:\Perflogs, C:\Users\Public, %APPDATA%\Temp, and user Recycle Bins).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOREACH host:
            BASELINE normal_archive_size_95th_percentile
          SEARCH file_creation_events (EID 4663) for archive_files
          IF file_size > baseline_size:
            GET parent_process (EID 4688)
            IF parent_process is not a standard_archiver:
              ALERT
  - question: Is there evidence of an unknown or disguised staging tool executing, based on its behavioral characteristics?
    context: Adversaries may use custom or obfuscated tools to avoid hash-based detection. This question uses a machine learning approach to identify suspicious processes based on their execution context rather than a known signature. By training a model on features like the parent process, user context, and command-line arguments, it's possible to score the likelihood that a process is a malicious staging tool, even if it's a novel threat. A high probability score warrants immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, application servers, and domain controllers, focusing on common staging directories (e.g., C:\Windows\Temp, C:\Perflogs, C:\Users\Public, %APPDATA%\Temp, and user Recycle Bins).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM process_creation_events (EID 4688) to ML_model
          MODEL extracts_features (parent_process, user, cmd_line_length, etc.)
          SCORE probability_of_malicious_staging
          IF score > 0.90:
            ALERT for review
  - question: Have any command-line or PowerShell commands been executed that combine file discovery, copying, and archiving in a single sequence?
    context: Adversaries often use a sequence of commands to find, gather, and compress data. This question aims to detect this pattern by searching for the co-occurrence of specific commands and keywords within a single command line or PowerShell script. For example, a command that uses 'dir /s' to find files and pipes them to '7z.exe' with a password flag '-p' is highly suspicious. This method is effective at catching "living off the land" techniques where adversaries use built-in system tools for staging.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Command-line and PowerShell execution logs from all endpoints and servers, with heightened monitoring on systems hosting sensitive data (e.g., file servers, developer workstations) or belonging to privileged users.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH command_line_logs (EID 4688) OR powershell_logs (EID 4104)
          WHERE command MATCHES REGEX for (discovery_cmd AND copy_cmd AND archive_cmd)
          OR command MATCHES REGEX for (archive_cmd AND password_flag)
          ALERT on match
  - question: Has a potentially obfuscated PowerShell script containing archiving commands been executed?
    context: To evade detection, adversaries often obfuscate or encode their PowerShell scripts. This makes the script text appear more random, which can be measured by calculating its Shannon entropy. This question focuses on finding malicious scripts by looking for two conditions: high entropy (indicating obfuscation) and the presence of archiving cmdlets (like 'Compress-Archive'). An alert is triggered when a script's entropy is statistically anomalous compared to the baseline for that host or user, suggesting it is not a typical, legitimate script.
    answer_sources:
      - Windows Event ID 4104
      - Command-line and PowerShell execution logs from all endpoints and servers, with heightened monitoring on systems hosting sensitive data (e.g., file servers, developer workstations) or belonging to privileged users.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOREACH host/user:
            BASELINE normal_powershell_script_entropy
          SEARCH powershell_logs (EID 4104)
          CALCULATE script_entropy
          IF script_entropy > baseline_entropy_threshold AND script_content CONTAINS 'Compress-Archive':
            ALERT
  - question: Does the semantic structure of a command line or PowerShell script indicate malicious staging activity, even without specific keywords?
    context: Sophisticated adversaries may craft commands that avoid obvious keywords. This question leverages a Natural Language Processing (NLP) model to understand the intent and semantic meaning behind a command, rather than just matching simple patterns. By training a model on a large dataset of both malicious and benign scripts, it can learn to identify the subtle characteristics of staging commands, providing a more robust detection method against novel or advanced techniques.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Command-line and PowerShell execution logs from all endpoints and servers, with heightened monitoring on systems hosting sensitive data (e.g., file servers, developer workstations) or belonging to privileged users.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM command_line_logs (EID 4688) OR powershell_logs (EID 4104) to NLP_model
          MODEL classifies command/script as 'benign' or 'malicious_staging'
          IF classification is 'malicious_staging':
            ALERT for review
  - question: Has a single process read a high number of files from diverse locations and then created an archive file?
    context: A key behavior of data staging is the collection of many files from different directories into a single compressed archive. This question aims to detect this specific sequence of events. It correlates events to a single Process ID, looking for a burst of file read operations across many unique directories, followed shortly by a single file write operation creating an archive. This stateful, time-bound correlation helps distinguish malicious collection from benign activity.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File system audit logs on high-value assets such as file servers, database servers, and endpoints of privileged users. Focus monitoring on directories containing intellectual property, PII, financial data, user profiles, and system configuration files.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WITHIN 5_minutes, FOR each ProcessID:
            COUNT unique_directory_paths from file_read_events (EID 4663)
            IF count > 10 AND (FOLLOWED_BY file_write_event (EID 4663) for archive_file in staging_location):
              ALERT
  - question: Is a process accessing files from an unusually diverse and random set of directory paths?
    context: Legitimate processes typically access files from predictable locations. A malicious staging script, however, will often traverse the file system to find valuable data, resulting in file reads from a wide and seemingly random assortment of directories. This question applies information theory to detect this behavior. By calculating the entropy of the directory paths accessed by a process and comparing it to a historical baseline, we can spot when a process suddenly begins accessing files in an anomalously diverse pattern, which is a strong indicator of data collection.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File system audit logs on high-value assets such as file servers, database servers, and endpoints of privileged users. Focus monitoring on directories containing intellectual property, PII, financial data, user profiles, and system configuration files.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOREACH process:
            BASELINE normal_path_entropy
          OVER 10_minute_window, for each process:
            CALCULATE path_entropy from file_read_events (EID 4663)
            IF path_entropy > baseline_99th_percentile:
              ALERT
  - question: Does the time-series pattern of file I/O for a process show a sudden spike in reads followed by a large write, indicative of staging?
    context: Data staging has a distinct temporal signature: a period of intense file reading followed by a single, large write operation. This question uses a time-series anomaly detection model (like an LSTM) to learn the normal rhythm of file I/O for processes on a host. When the model detects a deviation from this learned pattern that matches the "spike of reads, single large write" signature, it flags a potential staging event. This is a sophisticated method for detecting the behavior without relying on specific file names or paths.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File system audit logs on high-value assets such as file servers, database servers, and endpoints of privileged users. Focus monitoring on directories containing intellectual property, PII, financial data, user profiles, and system configuration files.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM file_IO_counts_per_process to time_series_model
          MODEL learns normal_IO_patterns
          IF model detects anomaly matching (spike_in_reads AND large_single_write):
            ALERT
  - question: Has a host rapidly accessed multiple network shares and then created a large local archive file?
    context: Adversaries may stage data by first pulling it from multiple network shares onto a single compromised host before exfiltration. This question correlates network activity with local file system events to detect this TTP. It looks for a host that reads files from an unusually high number of distinct network shares in a short period, and then confirms the staging suspicion by checking if that same host subsequently creates a large archive file locally. This cross-source correlation is crucial for connecting the network collection phase to the local staging phase.
    answer_sources:
      - Windows Event ID 4663
      - Zeek smb_files.log
      - Zeek conn.log
      - Network traffic logs at key network chokepoints and local file system logs on endpoints and file servers that access network shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WITHIN 15_minutes:
            SEARCH Zeek_logs for source_IP reading from > 5 unique_network_shares
            IF found:
              CORRELATE source_IP to hostname
              SEARCH file_creation_events (EID 4663) on hostname
              IF archive_file created AND size > 100MB:
                ALERT
  - question: Is a host exhibiting anomalous SMB activity, such as accessing an unusually high number of shares or downloading an unusually large volume of data?
    context: This question focuses on identifying the network collection phase of data staging by baselining normal SMB traffic for each host. An adversary pulling data from multiple shares will cause a statistical anomaly. The query triggers an alert when two conditions are met simultaneously: the volume of data read via SMB is abnormally high (exceeding the 95th percentile), and the number of distinct shares accessed is also statistically significant (more than 3 standard deviations above the mean). This dual-condition approach reduces false positives from legitimate large file transfers from a single source.
    answer_sources:
      - Zeek smb_files.log
      - Zeek conn.log
      - Network traffic logs at key network chokepoints and local file system logs on endpoints and file servers that access network shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOREACH host:
            BASELINE daily_SMB_read_bytes_95th_percentile
            BASELINE daily_unique_shares_mean_and_stddev
          SEARCH Zeek_logs per hour, per host:
            IF total_SMB_read_bytes > baseline_percentile AND unique_shares_accessed > (baseline_mean + 3*baseline_stddev):
              ALERT
  - question: Does the network connection graph show a pattern where one host is suddenly pulling data from many different shares, consistent with data collection?
    context: This question models the network as a graph, where hosts and file shares are nodes and connections are edges. In this model, data collection for staging appears as a "fan-in" pattern: many share nodes suddenly forming connections to a single host node. Graph-based anomaly detection can identify the emergence of this structure. To confirm that this network activity is for staging, the alert is correlated with local file creation events on the "fan-in" host, linking the network behavior to the creation of a potential staged archive.
    answer_sources:
      - Windows Event ID 4663
      - Zeek smb_files.log
      - Zeek conn.log
      - Network traffic logs at key network chokepoints and local file system logs on endpoints and file servers that access network shares.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL network traffic as a graph (nodes=hosts/shares, edges=SMB_reads)
          DETECT graph anomaly: sudden high fan-in of edges to a single host_node
          IF anomaly detected:
            GET timestamp and anomalous_host
            SEARCH file_creation_events (EID 4663) on anomalous_host around timestamp
            IF archive file created:
              ALERT