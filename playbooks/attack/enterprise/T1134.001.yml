name: T1134.001: Token Impersonation-Theft
id: 4a2b1cde-3f4a-4b5c-8d6e-1f2a3b4c5d6e
description: This playbook helps investigate adversary activity related to privilege escalation and defense evasion using token impersonation or theft (T1134.001). It focuses on identifying suspicious process command lines containing tool-specific keywords (e.g., 'incognito', 'sekurlsa::pth'), unusual parent-child process relationships (e.g., lsass.exe spawning cmd.exe), unauthorized requests for process handle duplication rights, and anomalous process or network activity immediately following the assignment of a new token to a process.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process command lines that contain substrings associated with known token manipulation tools?
    context: Adversaries often use well-known tools or scripts for token manipulation which contain unique, identifiable strings in their command-line arguments (e.g., 'incognito', 'steal_token'). This question aims to find direct evidence of these tools by scanning process creation logs for these specific keywords, providing a high-fidelity signal of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Critical application servers, Windows Server fleet
    range: last 90 days
    queries:
      - siem: SEARCH EventID=4688 AND (CommandLine CONTAINS 'incognito' OR CommandLine CONTAINS 'steal_token' OR CommandLine CONTAINS 'make_token' OR (ProcessName = 'runas.exe' AND CommandLine CONTAINS '/savecred'))
  - question: Have any processes been executed with unusually complex or obfuscated command line arguments?
    context: To evade simple keyword-based detection, attackers often obfuscate commands, which increases the character randomness or entropy of the command-line string. This question seeks to identify these statistical outliers by calculating the Shannon entropy of a command line and comparing it against an established baseline for that specific process, flagging potentially hidden malicious commands.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Critical application servers, Windows Server fleet
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | CALCULATE entropy of event.CommandLine | IF entropy > 99th_percentile_baseline[event.ProcessName] THEN ALERT
  - question: Can machine learning models identify command lines that are likely to be malicious based on learned patterns?
    context: This question explores a proactive detection method beyond simple keywords or entropy. By training a classification model on known malicious and benign command lines, the system can learn subtle characteristics (like character patterns, length, and keyword combinations) to score new, unseen command lines for their probability of being malicious, potentially catching novel or slightly modified attack tools.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Critical application servers, Windows Server fleet
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | CALCULATE score = ml_model.predict(event.CommandLine) | IF score > threshold THEN ALERT
  - question: Has a high-privilege system process spawned an interactive shell or scripting engine?
    context: Core system processes like 'lsass.exe', 'services.exe', or 'winlogon.exe' manage critical OS functions and should not normally create interactive shells like 'cmd.exe' or 'powershell.exe'. Such an event is a strong indicator that an adversary has compromised the parent process and is leveraging its elevated token to execute commands or scripts.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Windows Server fleet, Endpoint devices (workstations)
    range: last 90 days
    queries:
      - siem: SEARCH EventID=4688 AND ParentProcessName IN ('lsass.exe', 'services.exe', 'winlogon.exe', 'csrss.exe') AND NewProcessName IN ('cmd.exe', 'powershell.exe', 'pwsh.exe', 'rundll32.exe')
  - question: Have any statistically rare or previously unseen parent-child process relationships occurred?
    context: Normal system and user activities create predictable and repetitive process execution chains. This question aims to find anomalies by baselining all observed parent-child process pairs over time and then alerting on any new pairs that are extremely rare or have never been seen before. This can signify an attacker's novel execution pathway.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Windows Server fleet, Endpoint devices (workstations)
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | CALCULATE rarity_score for (event.ParentProcessName, event.NewProcessName) | IF rarity_score > threshold THEN ALERT
  - question: Can unsupervised machine learning identify anomalous clusters of process creation events?
    context: Instead of relying on predefined rules, this question uses clustering algorithms to group all process creation events based on features like parent process, child process, and user context. Malicious activity often forms small, distinct clusters separate from the large, dense clusters of normal behavior, allowing for the discovery of unknown or unexpected attack patterns.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Windows Server fleet, Endpoint devices (workstations)
    range: last 90 days
    queries:
      - pseudocode: CLUSTER data from EventID=4688 using features (ParentProcessName, NewProcessName, SubjectUserName) | INVESTIGATE small, outlier clusters
  - question: Has a non-allowlisted process requested duplication rights for a critical system process?
    context: An adversary may attempt to duplicate the token of a high-privilege process like 'lsass.exe' to escalate their own privileges. This requires requesting a handle to the target process with duplication rights (access mask 0x40). This question seeks to detect such attempts by alerting when any process not on a pre-approved list of legitimate tools (e.g., security software) makes such a request.
    answer_sources:
      - Windows Event ID 4656
      - Domain Controllers, Critical application servers, High-value user workstations
    range: last 90 days
    queries:
      - siem: SEARCH EventID=4656 AND ObjectName CONTAINS 'lsass.exe' AND Accesses CONTAINS 'ProcessDupHandle' AND ProcessName NOT IN (allowlist)
  - question: Has a statistically rare process requested a handle to a critical system process like lsass.exe?
    context: Legitimate access to critical processes like 'lsass.exe' is typically performed by a small, predictable set of system and security tools. This question aims to identify anomalous access by profiling the frequency of all source processes that request handles and alerting when a request comes from a process that is statistically rare (e.g., a web browser or document editor), which is highly suspicious.
    answer_sources:
      - Windows Event ID 4656
      - Domain Controllers, Critical application servers, High-value user workstations
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4656 where ObjectName CONTAINS 'lsass.exe' | LOOKUP frequency of event.ProcessName in baseline | IF frequency < 0.005 THEN ALERT
  - question: Can a machine learning model detect anomalous handle requests for critical system processes?
    context: To detect novel threats, this question proposes using a One-Class SVM model trained exclusively on benign handle request events for 'lsass.exe'. The model learns the complex patterns of normal behavior (e.g., which process, under which user, requests which rights). Any new handle request that deviates significantly from this learned norm is flagged as an anomaly for investigation.
    answer_sources:
      - Windows Event ID 4656
      - Domain Controllers, Critical application servers, High-value user workstations
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4656 where ObjectName CONTAINS 'lsass.exe' | IF one_class_svm_model.predict(event) == 'anomaly' THEN ALERT
  - question: Did a process access a sensitive object shortly after receiving a new primary token?
    context: A key indicator of token impersonation is when a process, immediately after having a new token assigned to it, uses that token to perform a privileged action it couldn't before. This question uses a correlation rule to detect when a new token assignment (Event 4696) is followed within a short time window by a successful access to a sensitive object like the SAM hive (Event 4663) by the same process.
    answer_sources:
      - Windows Event ID 4696
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Domain Controllers, Windows Server fleet, High-value user workstations
    range: last 90 days
    queries:
      - siem: CORRELATE (EventID=4696 as A) with (EventID=4663 as B) where A.ProcessID == B.ProcessID AND B.ObjectName IN (sensitive_files) AND timestamp(B) - timestamp(A) < 60s
  - question: Did a process exhibit an unusually high number of privileged object accesses after receiving a new token?
    context: After impersonating a token, an adversary may perform a flurry of privileged actions. This question aims to detect this by tracking the number of privileged object accesses (e.g., writing to System32) a process makes within a 5-minute window after receiving a new token. If this count is a statistical outlier compared to the normal behavior for that process type, it is flagged as suspicious.
    answer_sources:
      - Windows Event ID 4696
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Domain Controllers, Windows Server fleet, High-value user workstations
    range: last 90 days
    queries:
      - pseudocode: ON EventID=4696, START monitoring ProcessID | COUNT privileged accesses in next 5 mins | IF count > 98th_percentile_baseline[ProcessName] THEN ALERT
  - question: Did a process exhibit an anomalous sequence of system calls or object accesses after receiving a new token?
    context: Malicious activity often follows a different logical sequence than benign activity. This question proposes using a time-series model (like an HMM) to learn the normal sequence of actions (e.g., file reads, registry queries) a process performs after a token assignment. The model can then detect a sequence that deviates from this norm, such as a process suddenly attempting to access sensitive system files.
    answer_sources:
      - Windows Event ID 4696
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Domain Controllers, Windows Server fleet, High-value user workstations
    range: last 90 days
    queries:
      - pseudocode: ON EventID=4696, CAPTURE sequence of subsequent object accesses | IF hmm_model.score(sequence) < anomaly_threshold THEN ALERT
  - question: Is there command-line evidence of the Mimikatz 'sekurlsa::pth' module being used?
    context: The Mimikatz 'sekurlsa::pth' (pass-the-hash) module is a common tool for leveraging stolen credentials. It has a very distinct command-line signature. This question aims to create a high-fidelity alert by specifically looking for the 'sekurlsa::pth' string in combination with its typical arguments like '/ntlm:' or '/run:', which strongly indicates a pass-the-hash attack.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Windows Server fleet, Domain Controllers
    range: last 90 days
    queries:
      - siem: SEARCH EventID=4688 AND CommandLine CONTAINS 'sekurlsa::pth' AND (CommandLine CONTAINS '/ntlm:' OR CommandLine CONTAINS '/run:')
  - question: Are there command lines that, while not an exact match, are highly similar to known Mimikatz pass-the-hash commands?
    context: Attackers may slightly alter commands to evade exact-match signatures. This question addresses this by calculating the Jaccard similarity between the set of arguments in a new command line and a known set of Mimikatz command variations. A high similarity score indicates a likely match, even with minor obfuscation or changes.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Windows Server fleet, Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | CALCULATE similarity = jaccard_similarity(event.arguments, known_mimikatz_args) | IF similarity > 0.9 THEN ALERT
  - question: Can an NLP model semantically identify command lines related to pass-the-hash techniques?
    context: This question explores using advanced NLP models that understand the meaning and context of commands, not just the literal strings. A fine-tuned model can identify semantic similarities to known malicious commands like 'sekurlsa::pth' even if the attacker uses different words, syntax, or significant obfuscation, providing a more resilient detection method.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Windows Server fleet, Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | CLASSIFY event.CommandLine using fine_tuned_nlp_model | IF classification == 'pass-the-hash' THEN ALERT
  - question: Has 'runas.exe' been used with the '/savecred' switch or been spawned by a non-interactive service?
    context: The 'runas.exe' command with '/savecred' is a known technique for attackers to execute processes with cached credentials. It's also highly suspicious for 'runas.exe' to be started by a non-interactive process like a web server (w3wp.exe) or database service. This question seeks to create alerts for these two distinct, high-confidence indicators of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Windows Server fleet, Web servers, Database servers
    range: last 90 days
    queries:
      - siem: SEARCH EventID=4688 AND NewProcessName = 'runas.exe' AND (CommandLine CONTAINS '/savecred' OR ParentProcessName IN (non_interactive_services_list))
  - question: Has there been a statistical anomaly in the execution of 'runas.exe' for a specific user or host?
    context: While 'runas.exe' can be used for legitimate administration, its usage patterns are often predictable. This question aims to find abuse by baselining the frequency of 'runas.exe' executions per user and host. An alert is triggered if the daily count suddenly spikes (e.g., exceeds 3 standard deviations of the norm) or if it's spawned by a parent process never before seen in that context for that user/host.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Windows Server fleet, Web servers, Database servers
    range: last 90 days
    queries:
      - pseudocode: FOREACH host, user | CALCULATE daily 'runas.exe' count | IF count > (30_day_avg + 3 * 30_day_stddev) THEN ALERT
  - question: Can a machine learning model predict whether a 'runas.exe' execution is suspicious?
    context: To differentiate between benign and malicious 'runas' usage, this question proposes training a classification model. By using features like the parent process, user account, time of day, and command-line arguments, the model can learn the context of normal usage and flag executions that are highly suspicious, such as a service account running 'runas' outside of business hours.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Windows Server fleet, Web servers, Database servers
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 where NewProcessName = 'runas.exe' | CALCULATE score = ml_model.predict(features) | IF score > threshold THEN ALERT
  - question: Has a user-facing application like a browser or office program been launched under a high-privilege system account?
    context: Applications like 'explorer.exe', 'chrome.exe', or 'winword.exe' are designed for interactive user sessions and should never run as 'NT AUTHORITY\\SYSTEM' (Security ID S-1-5-18). This activity is a classic sign of an adversary using an impersonated SYSTEM token to launch a process for further interaction or command execution, making it a high-fidelity indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Critical application servers, Terminal servers
    range: last 90 days
    queries:
      - siem: SEARCH EventID=4688 AND NewProcessName IN ('explorer.exe', 'chrome.exe', 'winword.exe', ...) AND (SubjectUserName = 'SYSTEM' OR SubjectLogonId = '0x3e7')
  - question: Has any process been created with a statistically rare user context?
    context: Most processes are consistently run by a predictable set of users (e.g., 'svchost.exe' by 'SYSTEM', 'explorer.exe' by interactive users). This question aims to find anomalies by baselining the common user contexts for each process name and alerting when a process is created by a user that falls outside this established norm, indicating a rare and potentially suspicious combination.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Critical application servers, Terminal servers
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | IF event.SubjectUserName NOT IN baseline_users_for[event.NewProcessName] THEN ALERT
  - question: Can an unsupervised machine learning model identify anomalous process-user combinations?
    context: This question uses an Isolation Forest algorithm to automatically find the "needles in the haystack." The model is trained on process creation events, using features like process name, parent process, and user context. It learns to isolate events that are different from the norm, such as a user-facing application running as SYSTEM, without needing pre-defined rules about what is good or bad.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices (workstations), Critical application servers, Terminal servers
    range: last 90 days
    queries:
      - pseudocode: FOREACH event IN EventID=4688 | IF isolation_forest_model.predict(event_features) == 'anomaly' THEN ALERT
  - question: Did a process initiate network connections to internal administrative services shortly after receiving a new token?
    context: After impersonating a privileged token, an adversary's next step is often lateral movement. This question seeks to detect this by correlating a token assignment event (Event 4696) with subsequent network connections (from Zeek logs or Event 5156) from the same process to sensitive internal ports like SMB (445), RDP (3389), or WinRM (5985) on other systems.
    answer_sources:
      - Windows Event ID 4696
      - Windows Event ID 5156
      - Zeek conn.log
      - Network perimeter (e.g., firewall, IDS/IPS), Internal network sensors, Domain Controllers, Endpoint devices (workstations)
    range: last 90 days
    queries:
      - siem: CORRELATE (EventID=4696 as A) with (Zeek conn.log as B) where A.ProcessID == B.ProcessID AND B.dest_port IN (445, 3389, 5985, 5986) AND timestamp(B) - timestamp(A) < 300s
  - question: Did a process exhibit anomalous network behavior (high entropy of ports/IPs) after receiving a new token?
    context: A compromised process may begin scanning the network or connecting to many different services, a behavior that is uncharacteristic of its normal function. This question aims to detect this by monitoring a process's network activity after a token assignment and calculating the entropy of the destination ports and IPs it connects to. A high entropy value compared to its baseline suggests scanning or broad lateral movement.
    answer_sources:
      - Windows Event ID 4696
      - Windows Event ID 5156
      - Zeek conn.log
      - Network perimeter (e.g., firewall, IDS/IPS), Internal network sensors, Domain Controllers, Endpoint devices (workstations)
    range: last 90 days
    queries:
      - pseudocode: ON EventID=4696, START monitoring ProcessID | CALCULATE entropy of dest_ports and dest_ips in next 10 mins | IF entropy > baseline_entropy[ProcessName] THEN ALERT
  - question: Can a time-series model detect an anomalous sequence of network connections from a process after it receives a new token?
    context: This question proposes a sophisticated detection method that learns the normal *sequence* of network connections for a process after token assignment. A time-series model (like an LSTM) can flag a process whose behavior deviates from this learned sequence, such as a process that normally only uses HTTPS suddenly making SMB and RDP connections, indicating a change in intent.
    answer_sources:
      - Windows Event ID 4696
      - Windows Event ID 5156
      - Zeek conn.log
      - Network perimeter (e.g., firewall, IDS/IPS), Internal network sensors, Domain Controllers, Endpoint devices (workstations)
    range: last 90 days
    queries:
      - pseudocode: ON EventID=4696, CAPTURE sequence of network connections (protocol, port) | IF lstm_model.score(sequence) < anomaly_threshold THEN ALERT