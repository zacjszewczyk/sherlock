name: "T1134.001: Token Impersonation-Theft"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps investigate whether an adversary has escalated privileges or evaded defenses using token impersonation or theft (T1134.001). Adversaries may duplicate or steal access tokens from existing logged-on users to operate under their security context, bypassing access controls and gaining higher privileges. Investigative focus is on identifying evidence of this activity, such as the use of specific token manipulation tools observed in command-line arguments, unusual parent-child process relationships (e.g., a system service spawning an interactive shell), unauthorized processes requesting handle duplication rights for high-privilege processes like lsass.exe, or suspicious file and network activity occurring immediately after a process is assigned a new token."
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there command-line arguments indicative of known malicious token manipulation tools?"
    context: "This question aims to identify direct evidence of token theft attempts using well-known offensive security tools. Adversaries often use tools like Mimikatz (which includes the 'incognito' module) or custom scripts that use functions like 'steal_token' or 'make_token'. Detecting these specific strings in process command lines provides a high-confidence signal that an attacker is attempting to impersonate another user's security context."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Critical application servers"
      - "Windows Server fleet"
    range: "last 90 days"
    queries:
      - "Search process creation logs (EID 4688) for command lines containing case-insensitive keywords like 'incognito', 'steal_token', 'make_token', or 'runas /savecred'."
  - question: "Are there any command-line arguments with unusually high entropy, suggesting obfuscation?"
    context: "Adversaries often obfuscate their commands to evade simple keyword-based detection. High entropy (randomness) in a command line can be a strong indicator of encoded or encrypted payloads. By baselining normal entropy levels for common processes (e.g., powershell.exe), we can spot statistical outliers that warrant investigation for malicious activity like token manipulation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Critical application servers"
      - "Windows Server fleet"
    range: "last 90 days"
    queries:
      - "Calculate Shannon entropy for command lines in process creation logs. Compare against a pre-computed baseline for each process name. Alert on values exceeding the 99th percentile."
  - question: "Do any command lines score as highly probable for being malicious based on a classification model?"
    context: "This question uses machine learning to move beyond simple string matching and identify novel or heavily obfuscated malicious commands. By training a model on features like character patterns (n-grams) and string length from a known dataset of malicious and benign commands, it can score new, unseen command lines for their likelihood of being malicious, providing a more robust and adaptive detection method."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Critical application servers"
      - "Windows Server fleet"
    range: "last 90 days"
    queries:
      - "Input command-line strings from process creation logs into a trained classification model. Investigate commands that receive a high probability score for being malicious."
  - question: "Have any high-privilege system processes spawned an interactive shell?"
    context: "System processes like lsass.exe (Local Security Authority Subsystem Service) or services.exe should never spawn interactive user shells like cmd.exe or powershell.exe. Such an event is a very strong indicator of compromise, often occurring after an adversary has injected code into the system process and is using its high-privilege token to gain an interactive command prompt."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Windows Server fleet"
      - "Endpoint devices (workstations)"
    range: "last 90 days"
    queries:
      - "Search process creation logs (EID 4688) where ParentProcessName is in ['lsass.exe', 'services.exe', 'winlogon.exe', 'csrss.exe'] and NewProcessName is in ['cmd.exe', 'powershell.exe', 'pwsh.exe', 'rundll32.exe']."
  - question: "Are there any statistically rare parent-child process relationships?"
    context: "Normal system and user activity creates predictable patterns of parent-child process relationships. Adversaries often create anomalous relationships, such as Microsoft Word spawning PowerShell. By baselining all process pairs in the environment and calculating their frequency, we can identify and alert on new or extremely rare pairs, which are highly likely to be suspicious."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Windows Server fleet"
      - "Endpoint devices (workstations)"
    range: "last 90 days"
    queries:
      - "Generate a baseline of all parent-child process pairs. For each new process creation event, calculate a rarity score. Alert on pairs that exceed a high percentile threshold (e.g., 99.5th)."
  - question: "Do process creation events form anomalous clusters indicating unusual activity?"
    context: "This question uses unsupervised machine learning to find outliers without pre-defined rules. By grouping process creation events based on features like the parent process, child process, and user context, normal activity will form large, dense clusters. Small, isolated clusters often represent anomalous behavior, such as a specific user account running a rare process combination, which could indicate a compromised account or privilege escalation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "Windows Server fleet"
      - "Endpoint devices (workstations)"
    range: "last 90 days"
    queries:
      - "Apply a clustering algorithm (e.g., DBSCAN) to process creation events using features like ParentProcessName, NewProcessName, and SubjectUserName. Investigate small, isolated clusters."
  - question: "Has an unauthorized process requested handle duplication rights for a critical system process?"
    context: "To steal a token, an adversary must first get a handle to the target process (e.g., lsass.exe) with specific rights to duplicate objects (access mask 0x40). Legitimate access is typically limited to a small set of security and system management tools. An alert on an unapproved process, like a web browser or document editor, requesting these rights is a high-fidelity indicator of a token theft attempt."
    answer_sources:
      - "Windows Event ID 4656"
      - "Domain Controllers"
      - "Critical application servers"
      - "High-value user workstations"
    range: "last 90 days"
    queries:
      - "Monitor object access logs (EID 4656) for events where the target process is critical (e.g., lsass.exe), the access mask is 0x40 ('ProcessDupHandle'), and the source process is not on an approved allowlist."
  - question: "Are there statistically rare processes requesting handles to critical system processes like lsass.exe?"
    context: "This question aims to detect unauthorized handle requests by focusing on rarity. By profiling which processes normally request handles to critical system processes, we can establish a frequency distribution. A process that rarely or has never been seen making such a request (e.g., a browser) would fall below a frequency threshold and trigger an alert, indicating a potential token theft attempt."
    answer_sources:
      - "Windows Event ID 4656"
      - "Domain Controllers"
      - "Critical application servers"
      - "High-value user workstations"
    range: "last 90 days"
    queries:
      - "Profile the frequency distribution of source processes requesting handles to critical processes (e.g., lsass.exe). Alert when a request comes from a source process that falls below a low frequency threshold (e.g., < 0.5%)."
  - question: "Have any anomalous handle requests for critical processes been detected by an anomaly detection model?"
    context: "This question uses a machine learning model to learn the complex patterns of normal handle requests to critical processes like lsass.exe. The model considers features like the source process, the user, and the access rights requested. It can then identify new requests that do not conform to these learned patterns, flagging them as anomalous even if they don't violate a simple rule. This is effective against novel or stealthy attack techniques."
    answer_sources:
      - "Windows Event ID 4656"
      - "Domain Controllers"
      - "Critical application servers"
      - "High-value user workstations"
    range: "last 90 days"
    queries:
      - "Feed handle request event data (EID 4656) into a trained One-Class SVM or similar anomaly detection model. Investigate all events flagged as anomalous by the model."
  - question: "Has a process accessed a sensitive object shortly after receiving a new primary token?"
    context: "The purpose of token impersonation is to gain access to resources that were previously inaccessible. This question looks for that behavior by correlating a token assignment event with a subsequent successful access to a sensitive object, like the SAM hive. This two-event sequence, happening in a short time frame for the same process, is a strong indicator of successful privilege escalation."
    answer_sources:
      - "Windows Event ID 4696"
      - "Windows Event ID 4663"
      - "Windows Event ID 4656"
      - "Domain Controllers"
      - "Windows Server fleet"
      - "High-value user workstations"
    range: "last 90 days"
    queries:
      - "Correlate logs to find where a token assignment (EID 4696) for a Process ID is followed within 60 seconds by a successful object access (EID 4663) from the same Process ID to a sensitive object (e.g., SAM hive)."
  - question: "Is there an unusually high number of privileged object accesses by a process after it receives a new token?"
    context: "After gaining a privileged token, an adversary's process may perform a flurry of activity that is uncharacteristic for that process. This question establishes a baseline for how many privileged object accesses a normal process makes after a token assignment. An instance of that process showing a statistically significant spike in such activity indicates it may be operating under a stolen, high-privilege token."
    answer_sources:
      - "Windows Event ID 4696"
      - "Windows Event ID 4663"
      - "Windows Event ID 4656"
      - "Domain Controllers"
      - "Windows Server fleet"
      - "High-value user workstations"
    range: "last 90 days"
    queries:
      - "After a token assignment (EID 4696), count the number of subsequent privileged object accesses from that process in a 5-minute window. Compare this count to a baseline for that process name and alert on outliers."
  - question: "Does the sequence of system calls or object accesses after a token assignment deviate from normal behavior?"
    context: "This question uses a more advanced time-series analysis to model the *sequence* of actions a process takes after receiving a new token. A legitimate process has a predictable workflow. An anomalous sequence, such as a process that normally performs read-only operations suddenly writing to system files after a token change, would be flagged by the model as a deviation indicative of malicious intent."
    answer_sources:
      - "Windows Event ID 4696"
      - "Windows Event ID 4663"
      - "Windows Event ID 4656"
      - "Domain Controllers"
      - "Windows Server fleet"
      - "High-value user workstations"
    range: "last 90 days"
    queries:
      - "Use a time-series model (e.g., HMM) to analyze the sequence of object accesses by a process following a token assignment event (EID 4696). Alert on sequences that deviate significantly from the learned model of normal behavior."
  - question: "Are there command lines indicating the use of Mimikatz 'pass-the-hash' (sekurlsa::pth)?"
    context: "This question looks for a very specific and high-confidence indicator of credential theft and lateral movement. The Mimikatz command 'sekurlsa::pth' is used to create a new process using a stolen NTLM hash, effectively impersonating a user without needing their plaintext password. Detecting this string and its associated arguments ('/user:', '/ntlm:') in a command line is a strong sign of an active, sophisticated attacker."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Windows Server fleet"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Search process creation logs (EID 4688) for command lines containing the string 'sekurlsa::pth' along with arguments like '/ntlm:' or '/run:'."
  - question: "Do any command lines show a high similarity to known Mimikatz command variations?"
    context: "Adversaries may slightly alter commands to evade exact string matching. This question addresses that by calculating a similarity score (like Jaccard similarity) between the arguments of a new command and a known set of Mimikatz command variations. A high score indicates that even with minor changes or reordering, the command is functionally identical to a known malicious one."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Windows Server fleet"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "For command-line arguments in process creation logs, calculate the Jaccard similarity against a known set of Mimikatz command templates. Alert on similarity scores greater than 0.9."
  - question: "Has an NLP model classified any command lines as semantically similar to known malicious commands?"
    context: "This question leverages Natural Language Processing (NLP) to understand the *intent* of a command, rather than just its syntax. By training a model on a large corpus of security data, it can recognize that a command is semantically similar to 'sekurlsa::pth' even if the strings are completely different but achieve the same goal. This provides a powerful defense against heavily obfuscated or brand-new attack tools."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Windows Server fleet"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Feed command-line strings from process creation events into a fine-tuned NLP model. Investigate commands classified as having a high semantic similarity to known malicious commands."
  - question: "Is 'runas.exe' being used suspiciously, either with '/savecred' or spawned by a non-interactive service?"
    context: "The 'runas.exe' command is a legitimate Windows utility, but it can be abused. Using the '/savecred' switch is dangerous as it caches credentials, allowing future use without a password. Additionally, 'runas.exe' should be initiated by a user, not a background service (like a web server). Either of these conditions is anomalous and suggests an adversary is attempting to escalate privileges or establish persistence."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Windows Server fleet"
      - "Web servers"
      - "Database servers"
    range: "last 90 days"
    queries:
      - "Search process creation logs (EID 4688) for 'runas.exe' where the command line contains '/savecred' OR where the parent process is a known service (e.g., w3wp.exe, sqlservr.exe)."
  - question: "Has there been an anomalous spike in 'runas.exe' executions or executions from a new parent process?"
    context: "This question uses statistical baselining to detect abuse of 'runas.exe'. For a given user or host, a sudden, sharp increase in 'runas' usage compared to their normal 30-day activity is suspicious. Likewise, if 'runas.exe' is suddenly spawned by a parent process that has never spawned it before, it breaks a behavioral baseline and warrants investigation for misuse."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Windows Server fleet"
      - "Web servers"
      - "Database servers"
    range: "last 90 days"
    queries:
      - "Baseline the daily count and parent processes of 'runas.exe' executions per user/host. Alert if the count exceeds 3 standard deviations from the moving average or if a new parent process is observed."
  - question: "Has a classification model flagged any 'runas.exe' executions as suspicious?"
    context: "This question uses machine learning to assess the full context of a 'runas.exe' execution. A model can be trained to distinguish between benign and malicious use by considering features like the parent process, the user account (e.g., service account vs. interactive user), the time of day, and arguments. An execution by a service account outside of business hours, for example, would be flagged as highly suspicious."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Windows Server fleet"
      - "Web servers"
      - "Database servers"
    range: "last 90 days"
    queries:
      - "Score 'runas.exe' execution events using a trained classification model. Investigate events that are classified as suspicious based on features like parent process, user context, and time of day."
  - question: "Is an interactive, user-facing process running under a high-privilege system account like SYSTEM?"
    context: "Processes like 'explorer.exe' (the Windows shell), 'chrome.exe', or 'winword.exe' are designed to run in an interactive user's session. Seeing one of these processes running under the 'SYSTEM' account (Security ID S-1-5-18 or Logon ID 0x3e7) is a massive red flag. It indicates an adversary has likely used token manipulation to inject a process or spawn a new one with the highest level of local privilege."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Critical application servers"
      - "Terminal servers"
    range: "last 90 days"
    queries:
      - "Search process creation logs (EID 4688) where NewProcessName is on a watchlist (e.g., 'explorer.exe', 'chrome.exe') and the SubjectUserName is 'SYSTEM' or SubjectLogonId is '0x3e7'."
  - question: "Has any process been created with a user context that is rare for that process type?"
    context: "Every process in an enterprise typically runs under a predictable set of user accounts. For example, 'winword.exe' runs as interactive users, while 'sqlservr.exe' runs as a service account. This question identifies anomalies by baselining the common user accounts for each process and alerting when a process is created by a user context that falls outside this normal pattern, indicating a potential impersonation attempt."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Critical application servers"
      - "Terminal servers"
    range: "last 90 days"
    queries:
      - "Maintain a baseline of the top 95% of user contexts (SubjectUserName) for each process name. Alert when a process is created with a user context outside of its established baseline."
  - question: "Has an unsupervised anomaly detection model identified any unusual combinations of process, parent process, and user context?"
    context: "This question applies machine learning to find 'needle in a haystack' anomalies without pre-defined rules. An Isolation Forest algorithm is particularly good at this, as it 'isolates' data points that are different from the norm. An event like a user-facing application (e.g., 'outlook.exe') running as SYSTEM would be easily isolated from the dense clusters of normal activity and flagged as an anomaly worthy of investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Endpoint devices (workstations)"
      - "Critical application servers"
      - "Terminal servers"
    range: "last 90 days"
    queries:
      - "Use an Isolation Forest model on process creation events, with features for process name, parent process, and user context. Investigate the events that the model identifies as anomalies."
  - question: "Has a process initiated network connections to internal administrative services shortly after receiving a new token?"
    context: "After an adversary escalates privilege by obtaining a new token, a common next step is lateral movement. This question looks for that behavior by correlating a token assignment event with subsequent network connections to sensitive administrative ports (like SMB/445, RDP/3389, WinRM/5985) on other internal machines. This sequence is highly indicative of an attacker using their newly acquired privileges."
    answer_sources:
      - "Windows Event ID 4696"
      - "Windows Event ID 5156"
      - "Zeek conn.log"
      - "Network perimeter (e.g., firewall, IDS/IPS)"
      - "Internal network sensors"
      - "Domain Controllers"
      - "Endpoint devices (workstations)"
    range: "last 90 days"
    queries:
      - "Correlate logs to find where a process receives a new token (EID 4696) and then, within 5 minutes, initiates a network connection (Zeek conn.log or EID 5156) to ports 445, 3389, 5985, or 5986 on another internal system."
  - question: "Is a process exhibiting unusually random network behavior (high entropy of ports/IPs) after receiving a new token?"
    context: "After gaining new privileges via token impersonation, an attacker may not know where to move next and may begin scanning the network. This scanning behavior appears as connections to many different IP addresses or ports, resulting in high entropy (randomness). This question detects such scanning by measuring the entropy of network destinations for a process after it gets a new token and comparing it to the process's normal behavior."
    answer_sources:
      - "Windows Event ID 4696"
      - "Windows Event ID 5156"
      - "Zeek conn.log"
      - "Network perimeter (e.g., firewall, IDS/IPS)"
      - "Internal network sensors"
      - "Domain Controllers"
      - "Endpoint devices (workstations)"
    range: "last 90 days"
    queries:
      - "After a token assignment (EID 4696), calculate the Shannon entropy of destination IPs and ports the process connects to in a 10-minute window. Alert if the entropy is a statistical outlier compared to that process's baseline."
  - question: "Does the sequence of network connections from a process after receiving a new token deviate from its normal learned behavior?"
    context: "This question uses a time-series model to learn the normal *sequence* of network activity for a process after a token change. A legitimate process might always connect to port 443, then 80. A compromised process might suddenly connect to port 443, then 445 (SMB), then 3389 (RDP). The model would detect this abnormal sequence and flag it, providing a powerful way to detect lateral movement even if the individual connections aren't inherently malicious."
    answer_sources:
      - "Windows Event ID 4696"
      - "Windows Event ID 5156"
      - "Zeek conn.log"
      - "Network perimeter (e.g., firewall, IDS/IPS)"
      - "Internal network sensors"
      - "Domain Controllers"
      - "Endpoint devices (workstations)"
    range: "last 90 days"
    queries:
      - "Use a time-series model (e.g., LSTM) to learn the normal sequence of network connections (protocol, port) for a process after a token assignment. Flag any sequences that deviate significantly from the learned model."