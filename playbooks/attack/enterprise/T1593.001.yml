name: T1593.001: Social Media
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is conducting reconnaissance by gathering information from social media. Adversaries may search for information about victims, such as their organizational structure, key employees, and physical locations, or they may use it to identify targets for social engineering. The playbook identifies this activity by detecting correlations between connections to malicious infrastructure and subsequent visits to social media, the use of scripting tools and programmatic access methods to scrape data from social media platforms, unusually high volumes of requests that indicate automated collection, and policy violations where critical servers initiate outbound connections to social media sites.
type: technique
related: TA0043: Reconnaissance
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has an internal host connected to a known malicious IP and then subsequently connected to a social media domain within 60 minutes?
  context: This question seeks to identify 'stage-setting' behavior. An adversary might first connect to their C2 infrastructure (a known malicious IP) and then immediately pivot to scraping social media for reconnaissance. Correlating these two events in a short time window significantly increases the confidence that the social media activity is malicious, rather than benign user browsing.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (e.g., perimeter firewalls, web proxies) and internal DNS resolvers where traffic is monitored.
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH threat_intel_feed.
      FOR EACH malicious_ip, SEARCH conn_logs where dest_ip=malicious_ip.
      IF found, ADD src_ip to watchlist with a 60-minute TTL.
      ALERT if watchlist_src_ip connects to a domain on the 'social media' domain set.
- question: After connecting to a known malicious IP, did an internal host connect to a social media domain hosted in an ASN or country that is anomalous for that host?
  context: This question adds a layer of behavioral analysis to the initial correlation. Even if a host browses social media, doing so via an unusual network path (a rare ASN or country for that specific host) after communicating with a malicious IP is highly suspicious. It could indicate the use of adversary-controlled proxies or VPNs for the reconnaissance phase.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (e.g., perimeter firewalls, web proxies) and internal DNS resolvers where traffic is monitored.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR EACH host, baseline destination_ASNs and destination_countries (30-day history).
      IF host connects to malicious_ip, THEN monitor subsequent connections.
      ALERT if host connects to social_media_domain AND destination_ASN or destination_country is not in host's baseline.
- question: Can we predict which internal hosts, already associated with malicious activity, are most likely to connect to social media domains for reconnaissance?
  context: This is a proactive, predictive question. By modeling network connections as a graph, we can use machine learning to identify hosts that are 'at-risk' of performing social media reconnaissance. A high prediction score acts as an early warning, allowing analysts to investigate a host before the reconnaissance activity is even observed, based on its relationship to other known-bad entities in the network.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (e.g., perimeter firewalls, web proxies) and internal DNS resolvers where traffic is monitored.
  range: last 90 days
  queries:
  - pseudocode: |
      BUILD network_graph(nodes=[hosts, IPs, domains], edges=[connections, DNS lookups]).
      APPLY link_prediction_model.
      ALERT if model predicts high probability of new edge between 'tainted_host' and 'social_media_domain'.
- question: Is a script interpreter process being used to access social media sites, either via command-line arguments or by using programmatic User-Agent strings?
  context: This question targets the direct execution of scripts for reconnaissance. Legitimate users typically access social media through a web browser, not by running Python or PowerShell scripts with the site's URL as an argument. Detecting this, or identifying network requests with User-Agents of common scraping libraries (like 'python-requests' or 'Scrapy'), is a strong indicator of automated data collection.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek ssl.log
  - Endpoint devices (workstations, servers) and network inspection points (e.g., web proxies, NG-firewalls with SSL/TLS inspection).
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH process_creation_events (EID 4688) WHERE process_name in [script_interpreters] AND command_line contains [social_media_domains].
      OR SEARCH network_logs (http.log, ssl.log) WHERE destination in [social_media_domains] AND (user_agent in [scraping_tools] OR ja3_hash in [known_script_hashes]).
      ALERT on match.
- question: Are there script execution command lines with unusually high complexity (entropy) that also reference social media domains?
  context: This question looks for signs of obfuscation or complex, programmatically generated commands. A simple command like 'python scrape.py' has low entropy. A command with long, randomized arguments, session tokens, or encoded data, often used by malware or advanced scraping tools, will have high entropy. Combining high entropy with a social media domain reference points to sophisticated, non-interactive scripting.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek ssl.log
  - Endpoint devices (workstations, servers) and network inspection points (e.g., web proxies, NG-firewalls with SSL/TLS inspection).
  range: last 90 days
  queries:
  - pseudocode: |
      FOR EACH process_creation_event with script_interpreter, CALCULATE shannon_entropy(command_line).
      BASELINE entropy per interpreter.
      ALERT if entropy > 98th_percentile_for_interpreter AND command_line contains [social_media_domain].
- question: Can we use machine learning to automatically classify a session involving a social media domain as benign browsing, benign automation, or suspicious reconnaissance?
  context: This question aims to automate the triage process. By training a model on various features from both the host (process name, command line) and the network (User-Agent, JA3 hash), it can learn the subtle patterns that differentiate normal user activity from malicious scraping. This allows analysts to focus only on sessions the model flags as 'suspicious', greatly reducing alert fatigue.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek ssl.log
  - Endpoint devices (workstations, servers) and network inspection points (e.g., web proxies, NG-firewalls with SSL/TLS inspection).
  range: last 90 days
  queries:
  - pseudocode: |
      EXTRACT features (process_name, cmd_entropy, parent_process, dest_domain, user_agent, ja3) for sessions.
      APPLY pre-trained classification_model.
      ALERT if session is classified as 'suspicious reconnaissance/scraping'.
- question: Has any single internal host requested an abnormally high number of unique pages from a social media site in a short time frame?
  context: This question seeks to identify rapid enumeration of a website. A human user might visit a few dozen pages in five minutes, but a script can request hundreds. Setting a hard threshold for unique URI requests (e.g., >75 in 5 minutes) is a simple but effective way to detect this kind of automated scraping behavior, such as a script iterating through user profiles.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Network flow and HTTP/S inspection points, typically at the network perimeter or in a cloud access security broker (CASB).
  range: last 90 days
  queries:
  - pseudocode: |
      USE 5-minute sliding window.
      FOR EACH src_ip, COUNT unique_URIs per social_media_host.
      ALERT if count > 75.
- question: Are there connections to social media sites that exhibit both a high volume of page requests and unnaturally consistent timing between requests?
  context: This question refines the previous one by adding a behavioral timing component. Human browsing is erratic, with varying pauses between clicks. A script, however, often makes requests with near-perfect, machine-like regularity, resulting in a very low standard deviation in the time between requests. Combining this 'robotic timing' with a high URI count creates a very high-confidence indicator of automated scraping.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Network flow and HTTP/S inspection points, typically at the network perimeter or in a cloud access security broker (CASB).
  range: last 90 days
  queries:
  - pseudocode: |
      GROUP http_logs by session (src_ip, dest_host, 30m_timeout).
      FOR EACH session to social_media_host, CALCULATE stdev(time_between_requests) and count(unique_URIs).
      ALERT if stdev < 5th_percentile AND unique_URI_count > 98th_percentile.
- question: Has a host's pattern of accessing social media domains significantly deviated from its own historical norm?
  context: This question uses anomaly detection to find suspicious behavior without fixed thresholds. Every host has a unique browsing rhythm (e.g., more activity during the day, less at night). By modeling this normal pattern, we can detect significant deviations. A sudden, sustained spike in requests to social media that doesn't fit the host's established 'seasonality' or 'trend' can indicate that the host has been compromised and is being used for reconnaissance.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Network flow and HTTP/S inspection points, typically at the network perimeter or in a cloud access security broker (CASB).
  range: last 90 days
  queries:
  - pseudocode: |
      FOR EACH host, CREATE time_series of request_rate_to_social_media.
      APPLY seasonal_decomposition_model.
      APPLY anomaly_detection_algorithm to residuals.
      ALERT on significant anomalies.
- question: Has a host classified as a server initiated any connection to a known social media domain?
  context: This is a policy-based question that relies on asset classification. Servers (like domain controllers, database servers) typically have a very specific, limited function and should never be used for general web browsing. Any connection from a designated server to a social media site is a major policy violation and a strong indicator of compromise or misconfiguration.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Log sources monitoring traffic from dedicated server VLANs, data center subnets, and critical infrastructure zones.
  range: last 90 days
  queries:
  - pseudocode: |
      MAINTAIN server_ip_list and social_media_domain_list.
      SEARCH network_logs.
      ALERT if src_ip in server_ip_list AND dest_domain in social_media_domain_list.
- question: Has a server connected to a social media domain that it has never connected to before?
  context: This question uses frequency analysis for high-fidelity alerting. It assumes that a server's legitimate outbound connections are stable and predictable. By baselining all destinations a server talks to over a period (e.g., 30 days), any new connection is inherently anomalous. If that new, never-before-seen destination is a social media site, it is a high-confidence alert for malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Log sources monitoring traffic from dedicated server VLANs, data center subnets, and critical infrastructure zones.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR EACH server_ip, BASELINE destination_domains (30-day history).
      ONCE per day, CHECK for new destinations.
      ALERT if new_destination in social_media_domain_list.
- question: Has a server's overall network behavior profile changed in a way that makes it an outlier compared to its peers, specifically after connecting to a social media site?
  context: This question applies unsupervised machine learning to detect anomalous servers. Servers with similar roles (e.g., all front-end web servers) should have similar network traffic profiles. If one server suddenly starts connecting to social media, its profile (destination ports, ASNs, data volume) will change, causing a clustering algorithm to flag it as an anomaly or 'noise' relative to its peers. This detects deviations without needing to pre-define what 'bad' looks like.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Log sources monitoring traffic from dedicated server VLANs, data center subnets, and critical infrastructure zones.
  range: last 90 days
  queries:
  - pseudocode: |
      WEEKLY, FOR EACH server, generate network_profile (dest_ports, dest_asns, protocols, data_volume).
      APPLY clustering_algorithm (DBSCAN) to group servers.
      ALERT if a server becomes a noise_point or shifts clusters, especially after connecting to social media.