name: 'T1036.006: Space after Filename'
id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
description: An adversary may attempt to evade defenses by executing a payload from a file with a trailing space in its name. This technique can bypass security controls that do not properly handle or normalize filenames with trailing whitespace. This playbook helps investigate such activity by looking for process creation events where the executable filename contains a trailing space, especially when the file's hash is known malware, the process mimics a legitimate system binary, or it originates from a non-standard path. It also covers the creation of files with trailing spaces in common staging directories, outbound network connections from these processes to suspicious destinations, and anomalous parent-child process relationships.
type: technique
related:
  - 'TA0005: Defense Evasion'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: none
questions:
  - question: Has a process been executed from a file with a trailing space whose hash is associated with known malware?
    context: |
      This question aims to identify high-confidence threats. An adversary might use a file with a trailing space (e.g., "malware.exe ") to evade simple filename-based blocklists. By cross-referencing the file's hash against threat intelligence feeds, we can confirm if this unusually named file is a known malicious payload, allowing for a swift and decisive response.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Centralized SIEM/log aggregator containing process creation logs
      - Threat intelligence feeds
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE process_name ENDS WITH " "
          EXTRACT file_hash
          LOOKUP file_hash in threat_intelligence_feeds
          RETURN events where lookup is successful
  - question: Are there processes running from files with trailing spaces that are rare or unique within the environment?
    context: |
      This question helps uncover targeted or newly introduced threats that may not yet be in threat intelligence feeds. Legitimate software is typically widespread, whereas malicious tools are often found on a small number of compromised hosts. By "stack counting" the file hashes of executables with trailing spaces, we can prioritize the rarest ones for investigation, as they are statistically more likely to be malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Centralized SIEM/log aggregator containing process creation logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE process_name ENDS WITH " "
          GROUP BY file_hash
          COUNT distinct hosts per hash
          RETURN hashes with host_count < 5
  - question: Can a machine learning model identify high-risk process executions involving trailing spaces based on contextual features?
    context: |
      This question explores a proactive, automated approach to threat detection. Instead of relying on single indicators, a classification model can analyze a combination of features (filename properties, file hash prevalence, parent process details) to calculate a risk score. This helps analysts differentiate between benign anomalies and genuinely malicious activity, reducing false positives and focusing efforts on the most significant threats.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Centralized SIEM/log aggregator containing process creation logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Model Training Phase
          COLLECT features from historical process_creation_logs
          (has_trailing_space, file_hash_prevalence, parent_process_info, etc.)
          LABEL data as benign or malicious
          TRAIN classification model (e.g., Random Forest)

          // Inference Phase
          FOR new process_creation_events with trailing space
            EXTRACT features
            PREDICT risk_score using trained model
            ALERT if risk_score > threshold
  - question: Is a process with a trailing space masquerading as a critical system process?
    context: |
      Adversaries often try to blend in by naming their malware after legitimate Windows processes (e.g., "svchost.exe", "lsass.exe"). Adding a trailing space is a subtle way to create a distinct file that visually resembles the real one. This question helps detect this specific masquerading technique by searching for executions of critical process names appended with a space, especially when they run from an unexpected directory like C:\Users instead of C:\Windows\System32.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - SIEM containing process creation logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          DEFINE watchlist = ["svchost.exe", "lsass.exe", "wininit.exe"]
          SEARCH process_creation_logs
          WHERE process_name IN (watchlist with " " appended)
          AND file_path NOT IN ("C:\Windows\System32\")
          ALERT on any match
  - question: Is a process with a trailing space, which mimics a legitimate system process, executing from an unusual file path or spawned by an anomalous parent process?
    context: |
      Legitimate system processes have predictable execution patterns, such as always running from C:\Windows\System32 and being spawned by specific parent processes. This question aims to identify masquerading attacks by baselining these normal patterns and then detecting deviations. An execution of "svchost.exe " from C:\Users\Public or being spawned by "winword.exe" is a statistical rarity and a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - SIEM containing process creation logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Baselining Phase
          CREATE baseline of (process_name, file_path, parent_process) combinations for legitimate processes

          // Detection Phase
          SEARCH process_creation_logs
          WHERE process_name ENDS WITH " "
          AND (process_name, file_path, parent_process) combination is statistically rare compared to baseline
          FLAG event for investigation
  - question: Can unsupervised machine learning (clustering) automatically identify a masquerading process with a trailing space as an outlier?
    context: |
      This question proposes using clustering algorithms like DBSCAN to automatically group similar process execution events based on features like process name, command line, and parent process. Legitimate system processes will form large, dense clusters. A malicious process masquerading with a trailing space will likely have a unique combination of features, causing it to fall outside these normal clusters and be flagged as a noise point or an anomaly, enabling automated detection without predefined rules.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - SIEM containing process creation logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Model Training/Clustering Phase
          COLLECT features from process_creation_events (process_name, command_line, parent_process, file_path)
          APPLY clustering algorithm (e.g., DBSCAN) to group events

          // Detection Phase
          FOR new process_creation_events with trailing space
            EXTRACT features
            CHECK if event falls into an existing cluster
            IDENTIFY event as an outlier/noise if it does not belong to a cluster
  - question: Has a file with a trailing space been created in a common staging directory?
    context: |
      Adversaries often drop or create their tools and payloads in temporary or user-writable locations ('C:\Windows\Temp\', user 'AppData' folders, etc.) before execution. This question focuses on the initial staging phase of an attack by monitoring for the creation of any file with a trailing space in these high-risk directories. Detecting the file at creation time can provide an early warning before the payload is executed.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Centralized log aggregator containing file system audit logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          DEFINE high_risk_dirs = ["C:\Users\*\AppData\", "C:\Windows\Temp\", "C:\ProgramData\"]
          SEARCH file_creation_logs
          WHERE filename ENDS WITH " "
          AND file_path IN high_risk_dirs
          ALERT on any match
  - question: Is there a statistical anomaly in filename patterns or creation rates related to files with trailing spaces?
    context: |
      This question seeks to identify suspicious staging activity by analyzing metadata rather than just the event itself. Adversaries may use randomized filenames to avoid simple signature-based detection, which increases filename entropy. A sudden spike in the average filename entropy for a user, or a user creating an unusually high number of files with trailing spaces compared to their peers, are statistical indicators of potential malicious activity.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Centralized log aggregator containing file system audit logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Entropy Anomaly
          FOR each user
            CALCULATE daily average filename entropy
            COMPARE to user's historical baseline (e.g., past 30 days)
            ALERT if current average > (baseline + 2 * standard_deviation)

          // Rate Anomaly
          FOR each user
            COUNT file creations with trailing spaces per day
            COMPARE to all users' counts
            ALERT if user's count is in top 95th percentile
  - question: Can a one-class machine learning model detect file creation events with trailing spaces as anomalous behavior?
    context: |
      This question proposes using a model trained exclusively on "normal" data. A One-Class SVM learns the boundary of legitimate file creation activity in temp directories based on features like filename entropy, creating process, and file size. Any new file creation event, such as one involving a file with a trailing space, that falls outside this learned boundary is flagged as an outlier. This is useful for detecting novel threats without needing examples of malicious activity for training.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Centralized log aggregator containing file system audit logs
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Model Training Phase
          COLLECT features from legitimate file_creation_events in temp directories
          TRAIN One-Class SVM model on this normal data

          // Inference Phase
          FOR new file_creation_events (including those with trailing spaces)
            EXTRACT features
            PREDICT if event is an outlier using the trained model
            ALERT if flagged as an outlier
  - question: Has a process launched from a file with a trailing space initiated a network connection to a known malicious IP or domain?
    context: |
      This is a high-confidence indicator of compromise. After an adversary executes a payload (using a file with a trailing space), it will often establish a command-and-control (C2) channel. This question aims to detect this C2 activity by correlating the process execution event with subsequent network connections and checking the destination against threat intelligence feeds. A match confirms that the suspicious process is communicating with known malicious infrastructure.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - SIEM
      - Threat intelligence feeds
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH process_creation_logs for process_name ENDING WITH " "
          WITHIN 60 seconds, on the same host,
          SEARCH network_connection_logs for destination_ip or destination_domain
          LOOKUP destination in threat_intelligence_feeds
          ALERT on any match
  - question: Is a process with a trailing space connecting to a statistically rare or suspicious domain?
    context: |
      This question helps identify potential C2 infrastructure that is not yet on a threat intelligence list. Adversaries often use newly registered domains (NRDs) that have no reputation and are not widely visited. By analyzing properties like domain age (e.g., < 30 days old) and internal prevalence (e.g., visited by < 0.1% of hosts), we can identify connections from a process with a trailing space that are statistical outliers and therefore highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - SIEM
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH process_creation_logs for process_name ENDING WITH " "
          CORRELATE with network_connection_logs on the same host
          EXTRACT destination_domain
          ENRICH domain with age and internal_prevalence
          ALERT if (domain_age < 30 days) AND (internal_prevalence < 0.1%)
  - question: Following the execution of a process with a trailing space, is there an anomalous spike in outbound network traffic from the host?
    context: |
      This question aims to detect data exfiltration or heavy C2 communication by baselining a host's normal network behavior. A time series model can forecast the expected volume of outbound data for a given time. If a process with a trailing space runs and the actual outbound traffic significantly exceeds the forecasted amount (e.g., falls outside a 99% confidence interval), it signals an anomaly that could be related to the suspicious process's activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - SIEM
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Model Training/Forecasting Phase
          FOR each host
            TRAIN time series model (e.g., Prophet) on historical outbound_data_volume
            FORECAST expected volume and confidence interval

          // Detection Phase
          SEARCH for process_creation_events with trailing spaces
          MONITOR subsequent outbound_data_volume on the same host
          ALERT if actual_volume exceeds forecasted confidence interval
  - question: Was a process with a trailing space spawned by an unexpected parent process according to predefined rules?
    context: |
      This question uses a rule-based approach to detect anomalous process lineage. Certain parent-child relationships are almost always legitimate (e.g., 'services.exe' spawning 'svchost.exe'), while others are highly irregular (e.g., 'winword.exe' spawning 'svchost.exe '). By creating a list of allowed or expected relationships, we can quickly flag any process with a trailing space that violates these rules, indicating a likely attempt to inject or launch a process from a compromised application.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - SIEM
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          DEFINE rule_set = { "svchost.exe": "services.exe", "cmd.exe": "explorer.exe" }
          SEARCH process_creation_logs
          WHERE child_process_name ENDS WITH " "
          AND parent_process_name IS NOT the expected parent for child_process_name in rule_set
          ALERT on any violation
  - question: Does the parent-child relationship of a process with a trailing space represent a statistically rare occurrence in the environment?
    context: |
      This question moves beyond static rules to a data-driven approach. By analyzing all parent-child process relationships across the enterprise, we can establish a baseline of what's common. When a process with a trailing space is executed, we can check how frequently its parent-child pair has been seen before. If the pair is extremely rare (e.g., in the bottom 1st percentile), it is a statistical anomaly that warrants investigation, even if it doesn't violate a predefined rule.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - SIEM
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Baselining Phase
          CREATE frequency table of all (parent_process, child_process) pairs over 30 days

          // Detection Phase
          SEARCH process_creation_logs for child_process_name ENDING WITH " "
          LOOKUP its (parent_process, child_process) pair in the frequency table
          ALERT if the pair's frequency is in the bottom 1st percentile
  - question: Can a process with a trailing space be identified as a structural anomaly within a graph of all process relationships?
    context: |
      This question applies graph analysis to detect sophisticated attacks. By modeling all process executions as a large graph, we can use algorithms to find "communities" of normal, related activity. A malicious process, even one masquerading with a trailing space, will often create an unusual link in this graph—either by being isolated from all communities or by bridging two otherwise unrelated groups of processes. Identifying these structural anomalies provides a powerful way to find malicious execution chains.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - SIEM
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Graph Building & Analysis Phase
          CREATE a graph of all process parent-child relationships
          RUN a community detection algorithm (e.g., Louvain) on the graph

          // Detection Phase
          FOR new process_creation_events with a trailing space
            ADD the new process (node) and its relationship (edge) to the graph
            CHECK if the new node is part of a known community
            ALERT if the node is an outlier or an anomalous bridge between communities