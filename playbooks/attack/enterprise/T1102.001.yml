name: T1102.001: Dead Drop Resolver
id: f8a5a4b2-3e7c-4d1a-8f9b-6c0e5d4a3b2c
description: This playbook helps identify adversaries leveraging legitimate external web services, known as dead drop resolvers (e.g., GitHub, Pastebin), for command and control (C2) communications. Detections focus on identifying patterns indicative of this activity, such as an internal host connecting to a resolver platform and then immediately connecting to a malicious or suspicious destination (newly registered, low reputation). It also looks for anomalous indicators like non-standard User-Agent strings, periodic 'heartbeat' connections with low jitter, connections originating from non-browser processes, and the use of high-entropy or raw content URIs to fetch C2 instructions.
type: technique
related:
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is an internal host connecting to a known dead drop resolver and then immediately connecting to a known malicious C2 server?
  context: This question aims to detect the classic dead drop resolver pattern where an implant retrieves a C2 address from a legitimate service (like Pastebin) and then connects to it. Correlating the visit to the resolver with a subsequent connection to a threat-listed destination within a short time window is a high-fidelity indicator of this C2 technique.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Threat Intelligence Feeds
  - Internet Gateway/Egress Points
  - Corporate DNS Servers
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: SIEM/Log Analytics Platform
      FOR each http_event to resolver_platform
        LET source_ip = http_event.source_ip
        LET event_time = http_event.timestamp
        SEARCH conn_log for events
        WHERE conn_event.source_ip == source_ip
          AND conn_event.timestamp > event_time
          AND conn_event.timestamp < (event_time + 5 minutes)
          AND conn_event.destination_ip IN malicious_ip_feed
        IF match_found, ALERT
- question: Is a host visiting a dead drop resolver and then connecting to a newly registered or low-reputation domain at an anomalous rate?
  context: Adversaries often use newly registered or obscure domains for C2 infrastructure to evade blocklists. This question looks for hosts that first visit a resolver service and then quickly connect to a domain that is statistically suspicious (e.g., very young, low reputation, or rarely seen). An unusual frequency of this pattern for a specific host compared to the rest of the organization can indicate automated C2 activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - WHOIS Data
  - Domain Reputation Feeds
  - Internet Gateway/Egress Points
  - Corporate DNS Servers
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Data Analytics Platform
      ENRICH dns_logs with whois_data and reputation_scores
      FOR each host
        IDENTIFY sequences: (connection to resolver) -> (connection to anomalous_domain) within 5 minutes
        CALCULATE frequency of this sequence for the host
        COMPARE host_frequency to organizational_baseline_mean and std_dev
        IF host_frequency > (mean + 2 * std_dev), ALERT
- question: Is a host exhibiting a rare sequence of network events that matches the dead drop resolver-to-C2 pattern?
  context: This question uses machine learning to find the "needle in the haystack." By modeling all host network activity as sequences of events, we can learn what is normal. A rare sequence, such as 'connect to pastebin.com' followed by 'connect to a high-entropy domain,' stands out from common browsing patterns and is a strong indicator of potentially malicious, automated behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Corporate DNS Servers
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Machine Learning/Sequence Mining
      MODEL all network events as sequences per host (e.g., 'CONN_github', 'DNS_xyz.com')
      MINE for frequent sequences in historical data to establish a baseline of normal activity.
      FLAG any observed sequence that is rare and matches the pattern: (resolver_event -> C2_candidate_event).
      SCORE and ALERT on flagged sequences, especially if C2_candidate has malicious features.
- question: Are any internal hosts using known malicious or non-standard User-Agent strings when communicating with dead drop resolver platforms?
  context: Malware and scripting tools often use hardcoded or default User-Agent strings (e.g., 'curl', 'python-requests') that differ from those of standard web browsers. This question seeks to identify connections to resolver services that use these suspicious User-Agents, which is a strong sign that the connection is programmatic and potentially part of a C2 channel rather than user-driven browsing.
  answer_sources:
  - Zeek http.log
  - Malicious/Non-standard User-Agent Watchlist
  - Internet Gateway/Egress Points
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: SIEM/Log Analytics Platform
      SEARCH http_logs
      WHERE destination_host IN resolver_platform_list
        AND user_agent IN suspicious_user_agent_watchlist
      ALERT on any matches.
- question: Are there any statistically rare User-Agent strings being used to connect to popular dead drop resolver services?
  context: Beyond a static watchlist, this question aims to find unknown or unique malicious tools by identifying statistical outliers. If 99.9% of connections to a service use common browser User-Agents, a connection using a User-Agent seen less than 1% of the time is highly anomalous and warrants investigation. This can uncover custom C2 implants or less common attack tools.
  answer_sources:
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Data Analytics Platform
      FOR each resolver_service
        CALCULATE frequency distribution of all user_agents over the last 30 days.
        IDENTIFY user_agents with prevalence < 1%.
      SEARCH current http_logs for these rare user_agents connecting to the service.
      ALERT on any matches.
- question: Are there any User-Agent strings connecting to resolver services that are structurally different from common, legitimate User-Agents?
  context: This question applies machine learning to detect malformed or algorithmically generated User-Agent strings that might evade simple statistical or list-based checks. By analyzing the structure (length, character types, entropy) of User-Agents, we can cluster them. Small, isolated clusters or outliers distant from the large clusters of legitimate browsers often represent custom-crafted C2 tools.
  answer_sources:
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Machine Learning Platform
      EXTRACT features (length, entropy, token count) from all user_agent strings.
      APPLY clustering algorithm (e.g., DBSCAN) to the feature set.
      INVESTIGATE hosts that generate user_agents belonging to small outlier clusters.
- question: Are there any small, off-hours connections to dead drop resolver services?
  context: C2 beaconing often involves small data transfers to retrieve commands or exfiltrate data. When these small connections happen during non-business hours (e.g., overnight), they are less likely to be user activity. This question looks for this specific combination of small response size and off-hours timing to detect potential C2 heartbeats.
  answer_sources:
  - Zeek conn.log
  - Egress Network Traffic Sensors
  - Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: SIEM/Log Analytics Platform
      SEARCH conn_logs
      WHERE destination_host IN resolver_platform_list
        AND response_bytes BETWEEN 50 and 500
        AND event_hour BETWEEN 22:00 and 05:00
      ALERT on any matches.
- question: Is a host connecting to a dead drop resolver with an unusually high frequency, data volume, or regular, machine-like timing (low jitter)?
  context: Automated C2 beaconing is often periodic, with very little variation in the time between connections (low jitter). It can also involve data transfers that are anomalous compared to that host's normal activity to that service. This question establishes a dynamic baseline for each host's behavior and flags significant deviations, which can effectively detect automated, non-human communication patterns.
  answer_sources:
  - Zeek conn.log
  - Egress Network Traffic Sensors
  - Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Data Analytics/UEBA Platform
      FOR each host-destination_service pair
        CALCULATE 30-day rolling baseline (mean, std_dev) for frequency, data_volume, and jitter.
      FOR each new connection
        IF new_metric > (mean + 3 * std_dev) OR jitter is abnormally low (< 1s)
          ALERT.
- question: Does a host's pattern of communication with a dead drop resolver deviate from its own historically normal "rhythm"?
  context: This question uses advanced time-series analysis to learn the normal communication patterns (e.g., daily and weekly cycles) for each host to a given service. An anomaly detection model can then identify when the host's activity—like a sudden burst of connections or a change in data volume—breaks this learned rhythm. This is a powerful way to detect new C2 activity that doesn't fit the host's established profile.
  answer_sources:
  - Zeek conn.log
  - Egress Network Traffic Sensors
  - Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Machine Learning/Time-Series Analysis Platform
      FOR each host-destination_service pair
        TRAIN a time-series model (e.g., ARIMA, LSTM) on historical connection frequency and volume.
      APPLY model to live traffic.
      ALERT if observed traffic falls outside the model's predicted confidence interval.
- question: Is a non-browser process making a network connection to a known dead drop resolver platform?
  context: Legitimate connections to web services are typically made by approved web browsers. This question aims to find connections to resolver platforms that are initiated by other processes (e.g., powershell.exe, rundll32.exe, or an unknown executable). Correlating endpoint process data with network data provides direct evidence of a potentially malicious program using the service for C2.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - All Windows Workstations and Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: SIEM/EDR Platform
      JOIN network_logs (Zeek, EventID 5156) with process_creation_logs (EventID 4688) on source_ip and timestamp.
      FOR each joined event
        IF network_destination is a resolver_platform
          AND process_name NOT IN browser_allowlist
          ALERT.
- question: Is a statistically rare process, or a process with a rare parent (e.g., services.exe spawning powershell.exe), making a connection to a dead drop resolver?
  context: This question moves beyond a static allowlist to find anomalous processes based on their prevalence across the enterprise. A process that rarely makes network connections, or one spawned by an unusual parent process, is suspicious. When such a process connects to a resolver service, it strongly suggests an attempt to hide C2 activity under the guise of a legitimate connection.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - All Windows Workstations and Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: UEBA/Data Analytics Platform
      CALCULATE enterprise-wide prevalence of all network-connecting processes and parent-child process relationships.
      IDENTIFY rare processes and relationships (e.g., bottom 5% prevalence).
      ALERT if a rare process or a process from a rare relationship connects to a resolver platform.
- question: Can a machine learning model identify a process connecting to a dead drop resolver as likely malicious based on its characteristics?
  context: This question leverages a predictive model to automatically score the risk of a process. By training a model on features like file path, signature status, command-line arguments, and parent process, it can learn to distinguish malicious from benign processes. When a process that receives a high maliciousness score is seen connecting to a resolver platform, it generates a high-confidence alert.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - All Windows Workstations and Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Machine Learning/EDR Platform
      TRAIN a classification model on process features to predict maliciousness.
      CORRELATE network connections to resolver platforms with the initiating process.
      SCORE the initiating process using the trained model.
      ALERT if the process score exceeds a defined threshold.
- question: Are there any direct connections to raw content URLs on platforms like GitHub or Pastebin?
  context: Adversaries often use the "raw" version of content on platforms like GitHub and Pastebin to serve C2 instructions or malware payloads directly, without the site's normal UI. This question creates a simple but effective rule to detect any traffic going directly to these 'raw' content endpoints, which is highly indicative of automated access for C2 purposes.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers with SSL/TLS Inspection
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: SIEM/IDS
      SEARCH http_logs WHERE http.host == 'raw.githubusercontent.com' OR http.uri CONTAINS '/raw/'.
      SEARCH ssl_logs WHERE ssl.server_name CONTAINS 'raw.githubusercontent.com'.
      ALERT on any matches.
- question: Are there any requests to dead drop resolver services that contain unusually random-looking (high entropy) URIs?
  context: To hide C2 data in transit, adversaries may encode or encrypt it within the URL itself. This results in a URI that looks like a random string of characters, giving it a high Shannon entropy score. This question establishes a baseline for normal URI entropy for a given service and flags requests with abnormally high entropy, which can reveal C2 communications hidden in plain sight.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers with SSL/TLS Inspection
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Data Analytics Platform
      FOR each resolver_service
        CALCULATE 30-day baseline distribution of URI entropy.
        DETERMINE 99th percentile threshold.
      FOR each new request
        CALCULATE entropy of the URI.
        IF entropy > threshold, ALERT.
- question: Are there any URIs used in requests to dead drop resolvers that have a structure that is anomalous compared to legitimate, learned URI patterns?
  context: This question uses deep learning to understand the grammatical structure of normal URIs for a service. An RNN model can learn these patterns (e.g., '/user/repository/blob/main/file.txt'). When presented with an adversary's machine-generated URI (e.g., '/aBc123XyZ/dEf456wVu/'), the model will struggle to 'reconstruct' it, resulting in a high error score. This signals a structural anomaly indicative of C2.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers with SSL/TLS Inspection
  range: last 90 days
  queries:
  - pseudocode: |
      # Technology: Machine Learning/Deep Learning Platform
      TRAIN a character-level RNN on legitimate URIs for a specific service.
      FOR each new URI to that service
        CALCULATE reconstruction error using the trained RNN.
      IF error is high (exceeds a threshold), ALERT.