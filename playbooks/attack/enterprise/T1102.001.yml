name: T1102.001: Dead Drop Resolver
id: 5c9f8b0a-7e1d-4f6c-8a9b-3d2e1c0f4a5b
description: This playbook focuses on detecting adversaries leveraging legitimate external web services (e.g., GitHub, Pastebin) as "dead drop resolvers" for command and control. The core threat is that malware on a compromised host contacts a legitimate service to retrieve the actual C2 server address, which can change frequently. Detections are based on identifying suspicious network patterns, such as an internal host connecting to a resolver platform and then immediately to a malicious or newly registered domain; the use of non-standard or rare User-Agent strings; periodic "heartbeat" beaconing with low jitter; connections originating from non-browser processes; and the use of high-entropy or raw content URIs.
type: technique
related:
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Is an internal host connecting to a known dead drop resolver and then immediately connecting to a known malicious C2 domain or IP address?
  context: This identifies a classic two-step C2 pattern where an implant first retrieves the real C2 address from a benign-looking service before connecting to it. This technique helps the adversary bypass static blocklists that only contain the final C2 destination, as the initial connection appears legitimate.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Corporate DNS Servers
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: JOIN http_logs, conn_logs, and threat_intel_feed ON source_ip. FIND source_ip WHERE (http_log.destination IN resolver_list) AND (conn_log.destination IN threat_intel_feed) AND (time_diff < 5_minutes).
- question: Is a host connecting to a dead drop resolver and then quickly connecting to a statistically unusual domain (e.g., newly registered, low reputation)?
  context: This question helps uncover C2 infrastructure that is not yet present on a threat intelligence list. Adversaries frequently use newly registered domains (NRDs) for their operations. Correlating a connection to a resolver with a subsequent connection to an NRD or a domain with a poor reputation is a strong indicator of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Corporate DNS Servers
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: JOIN http_logs, dns_logs, and conn_logs ON source_ip. ENRICH dns_logs with whois_data and reputation_scores. FIND source_ip WHERE (http_log.destination IN resolver_list) AND ((dns_log.domain_age < 30_days) OR (dns_log.reputation < threshold)) AND (time_diff < 5_minutes).
- question: Are there rare sequences of network activity on any host that match the pattern of connecting to a resolver followed by connecting to a suspicious destination?
  context: This moves beyond simple time-window correlation to a more advanced behavioral analysis. By understanding what "normal" network sequences look like for the enterprise, analysts can more accurately identify a rare, multi-step attack chain like a dead drop resolution, even if the individual steps appear benign in isolation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Corporate DNS Servers
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: SEQUENCE_MINE network_logs for patterns '(event_type=CONN, destination=resolver) -> (event_type=DNS, destination=suspicious_domain) -> (event_type=CONN, destination=suspicious_domain)'. FLAG rare sequences.
- question: Are any hosts using known malicious or non-standard User-Agent strings (e.g., 'curl', 'python-requests') when communicating with dead drop resolver platforms?
  context: Malware often uses hardcoded or programmatic User-Agent strings instead of common browser strings. Identifying these non-standard agents communicating with services like Pastebin or GitHub is a strong indicator that a script or tool, rather than a user in a browser, is making the connection, which is a common characteristic of C2 communication.
  answer_sources:
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH http_logs WHERE (destination IN resolver_list) AND (user_agent IN non_standard_ua_list).
- question: Are there any rarely seen User-Agent strings being used to communicate with specific dead drop resolver services?
  context: This question aims to find unknown or unique malicious tools. Instead of relying on a pre-defined list of bad User-Agents, this method baselines what is "normal" for the organization and flags outliers. A User-Agent used by only one or two hosts to access a popular service is highly suspicious and could indicate a custom C2 implant.
  answer_sources:
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: GROUP http_logs by user_agent, destination. COUNT occurrences over 30 days. ALERT where (destination IN resolver_list) and (count < threshold).
- question: Can we identify structurally anomalous User-Agent strings used in communications with dead drop resolvers?
  context: This question applies machine learning to detect algorithmically generated or unusual User-Agent strings that might not be caught by simple prevalence counts. It looks for subtle differences in the string's structure (length, character types, entropy) that distinguish it from legitimate browser agents.
  answer_sources:
  - Zeek http.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers
  range: last 90 days
  queries:
  - pseudocode: EXTRACT features from user_agent strings. CLUSTER features using DBSCAN. INVESTIGATE outlier clusters for connections to resolver_list.
- question: Are any hosts making small, off-hours connections to dead drop resolver services?
  context: This is a heuristic to detect C2 beaconing. Malware often checks in during non-business hours to avoid disrupting users and to blend in with backup or maintenance traffic. The small response size is characteristic of a simple "no new commands" reply from the C2 infrastructure hosted on the resolver platform.
  answer_sources:
  - Zeek conn.log
  - Egress Network Traffic Sensors
  - Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: SEARCH conn_logs WHERE (destination IN resolver_list) AND (response_bytes BETWEEN 50 AND 500) AND (time BETWEEN 22:00 AND 05:00).
- question: Is any host's connection pattern to a dead drop resolver service showing signs of automated beaconing, such as unusually regular intervals (low jitter) or anomalous data transfer volumes?
  context: This question looks for the robotic regularity of C2 communications. Human-generated traffic is variable, while malware beacons are often programmed to connect at precise intervals (e.g., every 60 seconds), resulting in very low jitter. A sudden spike in data transfer could also indicate the download of a new payload.
  answer_sources:
  - Zeek conn.log
  - Egress Network Traffic Sensors
  - Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: For each (source_ip, destination) pair, CALCULATE baseline stats (mean_jitter, mean_volume). ALERT if new connection shows (jitter < threshold) or (volume > 3*std_dev).
- question: Does the time-series data of a host's connection to a dead drop resolver service show anomalous behavior when compared to its own learned 'normal' rhythm?
  context: This is a more sophisticated version of the previous question. A time-series model can learn complex patterns, including seasonality (e.g., less traffic on weekends), and can therefore detect subtle deviations that a simple standard deviation rule might miss. It is effective at finding new, unknown beaconing behavior.
  answer_sources:
  - Zeek conn.log
  - Egress Network Traffic Sensors
  - Internet Gateway/Egress Points
  range: last 90 days
  queries:
  - pseudocode: For each host, TRAIN time-series model (e.g., ARIMA) on historical connection data to resolvers. PREDICT expected traffic. ALERT if actual traffic deviates significantly from prediction.
- question: Is a non-browser process initiating network connections to a known dead drop resolver platform?
  context: This is a fundamental question for host-based detection. Legitimate user activity to services like GitHub or Pastebin should originate from a web browser. A connection from a process like 'powershell.exe' or a randomly named executable is a major red flag for C2 activity originating from a script or implant.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - All Windows Workstations and Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: JOIN network_events (WinID 5156) with process_events (WinID 4688) on process_id. ALERT if (network_event.destination IN resolver_list) AND (process_event.name NOT IN browser_allowlist).
- question: Are statistically rare processes or processes with unusual parent-child relationships making network connections to dead drop resolvers?
  context: This question helps find malicious activity by baselining normal process behavior. For example, 'svchost.exe' spawning 'cmd.exe' which then connects to the internet is abnormal. Identifying these rare process chains that connect to resolver platforms can uncover sophisticated malware hiding in plain sight.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - All Windows Workstations and Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: PROFILE process network activity and parent-child relationships. ALERT on connections to resolvers from (rare_process) OR (rare_parent_child_combo).
- question: Can a machine learning model identify high-risk processes that are connecting to dead drop resolver platforms?
  context: This approach automates the analysis of process characteristics. By training a model on features like file path, signature status, and command-line arguments, we can assign a risk score to every process. Alerting when a high-risk process connects to a resolver platform provides a high-fidelity signal.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - All Windows Workstations and Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: SCORE running processes with ML model based on features. JOIN scores with network connection data. ALERT if (high_score_process) connects to (resolver_platform).
- question: Are any hosts making direct requests to raw content URLs on services like GitHub or Pastebin?
  context: Adversaries use raw content links (e.g., 'pastebin.com/raw/...') to directly fetch C2 instructions or payloads without the surrounding webpage HTML. While sometimes legitimate for developers, frequent or widespread access to these raw links, especially from non-developer machines, is suspicious and warrants investigation.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers with SSL/TLS Inspection
  range: last 90 days
  queries:
  - pseudocode: SEARCH http_logs OR ssl_logs WHERE (host CONTAINS 'raw.githubusercontent.com') OR (uri_path CONTAINS '/raw/').
- question: Are there any requests to dead drop resolver services that contain unusually random or complex-looking URIs?
  context: To hide C2 data in transit, adversaries often encode or encrypt it within the URI path or query parameters. This results in high-entropy strings (e.g., long, random-looking text). Flagging URIs with abnormally high entropy is an effective way to detect this data exfiltration or C2 communication channel.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers with SSL/TLS Inspection
  range: last 90 days
  queries:
  - pseudocode: For each http_request to resolver_list, CALCULATE entropy of URI. ESTABLISH baseline entropy. ALERT if entropy > 99th_percentile.
- question: Can we detect algorithmically generated URIs used in requests to dead drop resolver services?
  context: This question leverages deep learning to understand the "grammar" of legitimate URIs for a given service. An RNN model trained on millions of normal URIs can spot a machine-generated one that, while perhaps not having high entropy, violates the expected structure. This can catch more subtle C2 channels.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway/Egress Points
  - Web Proxy Servers with SSL/TLS Inspection
  range: last 90 days
  queries:
  - pseudocode: TRAIN RNN model on legitimate URIs for popular services. For new requests to resolvers, CALCULATE reconstruction error. ALERT if error is high.