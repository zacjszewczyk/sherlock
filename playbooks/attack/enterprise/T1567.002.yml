name: T1567.002: Exfiltration to Cloud Storage
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary has exfiltrated sensitive data using cloud storage services. It provides investigative steps to detect this activity by identifying network connections to unsanctioned or malicious cloud storage providers, the execution of command-line utilities known for data uploads, the staging of large compressed files immediately prior to exfiltration, anomalously large or asymmetric data uploads, and uploads initiated by non-interactive or system-level accounts.
type: technique
related:
- TA0010: Exfiltration
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are internal hosts connecting to unsanctioned or known-malicious cloud storage providers?
  context: This question aims to identify policy violations or connections to malicious infrastructure by continuously monitoring network traffic. By comparing destination IPs and Server Name Indications (SNIs) from network logs against an allow-list of sanctioned cloud providers and a deny-list from threat intelligence, analysts can quickly spot connections to unapproved services or known adversary command-and-control servers disguised as cloud storage.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway / Egress Points
  - Enterprise DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Search Zeek conn.log and ssl.log
      For each destination_ip and server_name:
        If server_name is in CTI deny-list OR server_name is not in sanctioned allow-list:
          Generate Alert(destination_ip, server_name)
- question: Have there been connections to statistically rare or previously unseen cloud storage domains?
  context: This question helps uncover new or low-and-slow exfiltration channels that might not be on any deny-list. By establishing a baseline of connection frequencies to all cloud domains over a 30-day period, analysts can flag domains that are rarely accessed (e.g., in the bottom 1st percentile) or have not been seen in the last 90 days. Such domains could represent newly stood-up adversary infrastructure or unsanctioned services used for covert exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway / Egress Points
  - Enterprise DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Calculate frequency of all cloud domains over last 30 days
      Identify domains in bottom 1% of frequency
      Identify domains not seen in last 90 days
      Flag these domains for review
- question: Can a machine learning model identify new connections to cloud storage domains that exhibit malicious characteristics?
  context: This question leverages a predictive model to find malicious activity that evades simpler detection methods. A Random Forest classification model can be trained on a rich set of features from network logs (like SNI, JA3/JA3S hashes, destination ASN, and connection statistics) using a labeled dataset of known benign and malicious connections. The trained model can then score new, unseen connections and alert on those classified as malicious with high confidence, providing a proactive defense against evolving threats.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Internet Gateway / Egress Points
  - Enterprise DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      For each new connection to a cloud domain:
        Extract features (SNI, JA3, ASN, duration, bytes_sent, etc.)
        Apply trained Random Forest model
        If model_prediction is "malicious" with confidence > 0.9:
          Generate Alert
- question: Are command-line utilities being executed with syntax known for uploading data to cloud storage services?
  context: This question focuses on detecting the adversary's tools and actions directly on the endpoint. By applying regular expression matching to command-line process creation logs (like Windows Event ID 4688), analysts can search for specific syntax patterns (e.g., 'rclone copy', 'aws s3 cp', 'curl -T') that are strong indicators of an adversary using legitimate tools to exfiltrate data.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek http.log
  - User Workstations
  - Production Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Search command-line logs for regex patterns like 'rclone copy', 'aws s3 cp', 'az storage blob upload', 'curl -T', 'Write-S3Object'
      If a match is found:
        Generate Alert(hostname, command_line)
- question: Are there command-line executions with unusually high entropy, potentially indicating obfuscation?
  context: Adversaries often obfuscate their commands to hide malicious activity from signature-based detection. This question seeks to uncover such attempts by measuring the complexity of command-line strings. By calculating the Shannon entropy for each command and comparing it to a baseline established for its specific process (e.g., 'powershell.exe'), analysts can flag commands that are statistically unusual. A significant deviation (e.g., >3 standard deviations) can indicate obfuscated scripts, embedded payloads, or long, complex credential strings.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek http.log
  - User Workstations
  - Production Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      For each command_line event:
        Calculate Shannon entropy of the command string
        Retrieve baseline entropy and stdev for the associated process_name
        If entropy > (baseline + 3 * stdev):
          Generate Alert(hostname, command_line, entropy_score)
- question: Can a machine learning model detect anomalous or novel command-line strings indicative of exfiltration activity?
  context: To detect novel or highly obfuscated exfiltration commands that don't match known patterns or simple statistical measures, this question proposes an anomaly detection model. A one-class SVM model can be trained on TF-IDF vectors (a representation of text data) from a large set of known-good command lines in the environment. This model learns what "normal" looks like and can then classify any new command lines that deviate significantly from this norm as outliers, flagging them for investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek http.log
  - User Workstations
  - Production Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      For each new command_line event:
        Generate TF-IDF vector from the command string
        Apply trained one-class SVM model
        If model classifies as an outlier:
          Generate Alert(hostname, command_line)
- question: Has a large compressed file been created on a host shortly before a high-volume data upload to a cloud provider from the same host?
  context: This question targets the common adversary tactic of "smash and grab," where they collect, compress, and exfiltrate data in a rapid sequence. This is detected using a stateful rule that correlates endpoint and network events. It specifically looks for the execution of an archiving utility (like 7z.exe or WinRAR.exe), followed within a short window (e.g., 15 minutes) by a large data upload (e.g., >100MB) from the same host to a cloud provider. This sequence is a strong indicator of data staging followed by exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Critical Asset Subnets
  - File Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      On process creation event for archiving tool (e.g., 7z.exe):
        Start 15-minute timer for host
      Within timer window, on network connection from same host to cloud provider:
        If sent_bytes > 100MB:
          Generate Alert(hostname, process_name, destination_ip, sent_bytes)
- question: Are hosts exhibiting an unusually short time delay between file archiving and large data uploads compared to the organizational baseline?
  context: To refine the detection of "smash and grab" activity and reduce false positives, this question introduces statistical baselining. It measures the typical time delta between file archiving and large cloud uploads across the entire organization. An alert is triggered for any host that performs this sequence significantly faster than the established 95th percentile baseline, especially if the upload size is also anomalously large (e.g., in the top 5%) for that specific host. This focuses attention on behavior that is abnormal both in timing and volume.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Critical Asset Subnets
  - File Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Calculate 95th percentile time_delta for (archive_event -> large_upload_event) across org
      For each host's sequence:
        If host_time_delta < org_95th_percentile_delta:
          Generate Alert(hostname, host_time_delta)
- question: Can a sequence analysis model identify anomalous event sequences corresponding to data staging and exfiltration?
  context: This question proposes using a more advanced machine learning model to understand the context of events. A sequence analysis model, such as a Hidden Markov Model (HMM) or LSTM, can be trained on streams of endpoint and network logs to learn normal sequences of activity. The model can then identify and flag event sequences that have a very low probability of occurring based on its training, such as the specific chain of '7z.exe execution -> outbound connection to a rare cloud provider with >100MB upload' within a short time frame.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Critical Asset Subnets
  - File Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Feed sequence of events (process_creation, network_connection) into trained LSTM model
      If model assigns a low probability score to the sequence:
        Generate Alert(hostname, event_sequence, probability_score)
- question: Has any single connection to a cloud storage provider exceeded a defined data upload threshold?
  context: This question provides a simple yet effective method for catching bulk data exfiltration. It involves a straightforward rule that alerts whenever a single network connection from an internal host to a known cloud storage provider sends an amount of data exceeding a high, pre-defined threshold (e.g., 1 GB) within a relatively short period (e.g., less than one hour). While it may have false positives, it is a valuable tripwire for large-scale data theft.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway / Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Search Zeek conn.log for connections to cloud storage providers
      If sent_bytes > 1GB AND duration < 3600s:
        Generate Alert(source_ip, destination_ip, sent_bytes)
- question: Are any hosts exhibiting anomalously high daily upload volumes or highly asymmetric traffic ratios (sent >> received) to cloud storage providers?
  context: This question uses statistical baselining to find abnormal data flow patterns. It involves two complementary checks. First, it monitors each host's total daily data upload volume to cloud services, alerting when this volume significantly exceeds the host's own historical 30-day baseline (e.g., >99th percentile). Second, it calculates the ratio of sent-to-received bytes for individual connections, alerting if the ratio is extremely high (e.g., >100:1) and involves a non-trivial amount of data. This combination effectively detects hosts that are suddenly sending out far more data than usual.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway / Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      For each host, calculate 30-day baseline of daily_bytes_sent to cloud
      If today's_bytes_sent > 99th_percentile_of_baseline:
        Generate Alert(host, today's_bytes_sent)
      For each connection, if (sent_bytes / received_bytes) > 100 AND sent_bytes > 50MB:
        Generate Alert(host, sent_bytes, received_bytes)
- question: Can a time-series forecasting model predict and detect anomalous spikes in a host's data upload volume to cloud storage?
  context: This question applies a more sophisticated statistical method to detect anomalies in data upload patterns over time. A time-series forecasting model, like SARIMA, is used to learn the normal rhythm (e.g., daily or weekly seasonality) of a host's upload behavior. The model then predicts the expected upload volume for future time intervals (e.g., each hour). An alert is generated if the actual observed volume significantly exceeds the model's prediction (e.g., upper 99% confidence interval) for a sustained period, indicating a clear break from normal behavior.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway / Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      For each host, train a SARIMA model on historical hourly upload volume
      For each new hour:
        Predict expected_volume and confidence_interval
        If actual_volume > upper_confidence_bound for 2 consecutive hours:
          Generate Alert(host, actual_volume)
- question: Has a data upload to a cloud storage service been initiated by a non-interactive process or a system-level account?
  context: This question seeks to identify highly suspicious activity that is almost never legitimate. By correlating process creation events, user logon events, and network traffic, analysts can determine the user and session context behind a data upload. An alert should be generated if a process running under a high-privilege system account (like 'NT AUTHORITY\SYSTEM') or within a non-interactive session (like a service or scheduled task) initiates a connection to a cloud storage provider. This is a strong indicator of a compromised system or persistent malware.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Zeek conn.log
  - Domain Controllers
  - Production Servers
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Correlate process_event (4688), logon_event (4624), and network_event (conn.log)
      If process_user is 'SYSTEM' OR logon_type is non-interactive (3,4,5):
        And if destination is a cloud provider:
          Generate Alert(hostname, process_name, user, logon_type)
- question: Have any rare or never-before-seen combinations of process, user, and cloud destination been observed?
  context: This question aims to find anomalies by looking for rarity in the relationships between processes, users, and destinations. By building a frequency table of all (process_name, user_name, destination_cloud_domain) tuples observed over a 30-day period, the system can flag the very first occurrence of a new combination or combinations that are extremely rare. For example, seeing 'sqlserver.exe' under the 'NETWORK SERVICE' account connecting to 'onedrive.live.com' for the first time is highly anomalous and warrants immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Zeek conn.log
  - Domain Controllers
  - Production Servers
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      Maintain a frequency table of (process, user, destination) tuples for last 30 days
      On a new event:
        If tuple has never been seen OR its frequency is < 5:
          Generate Alert(tuple)
- question: Can a clustering algorithm identify anomalous user and process activity related to cloud storage connections?
  context: This question uses unsupervised machine learning to find outliers without pre-defined rules. A density-based clustering algorithm like DBSCAN can group correlated event data—including features like process name, parent process, username, logon type, and destination ASN—into clusters of "normal" behavior. Any data points that do not belong to a cluster are labeled as noise or outliers. These outliers represent activity that does not conform to any established pattern and are therefore highly suspicious and worthy of investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Zeek conn.log
  - Domain Controllers
  - Production Servers
  - Application Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      From correlated event data, create feature vectors (process, user, logon_type, dest_asn, etc.)
      Apply DBSCAN clustering model to the vectors
      For any data point classified as an outlier/noise:
        Generate Alert(event_details)