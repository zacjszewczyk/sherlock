name: T1056.003: Web Portal Capture
id: f7d1b8e0-5a3c-4b9f-8e2d-9c0a1b3c4d5e
description: This playbook focuses on detecting Web Portal Capture (T1056.003), an adversary technique for stealing credentials. The core of this technique involves modifying legitimate web login portals to capture user credentials, often by injecting malicious scripts or altering form submission targets. The playbook provides investigative questions to help identify these activities by analyzing file modifications on web servers, monitoring for anomalous outbound network traffic containing credential patterns, detecting unusual process executions spawned by web services, and identifying the staging of collected data. It covers two main goals: determining if an adversary has accessed credentials and if they are actively collecting data through a compromised web portal.
type: technique
related:
  - TA0006: Credential Access
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Have any monitored web portal login pages been modified to include script or form actions pointing to malicious or non-allowlisted external domains?
    context: This question aims to detect the primary mechanism of web portal capture, which is the injection of malicious code. Adversaries modify login pages to redirect submitted credentials or load scripts from attacker-controlled servers. By monitoring these critical files for changes and validating all embedded domains against threat intelligence feeds and internal allowlists, analysts can detect the initial compromise.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Externally-facing web servers hosting login portals (VPN, OWA, SharePoint)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file modification events (WinEvent 4663) for target login page files
          FOR EACH event:
            PARSE file content
            EXTRACT domains from <script src> and <form action> attributes
            FOR EACH domain:
              IF domain in malicious_feed OR domain NOT in allowlist:
                ALERT "Suspicious domain found in login page"
  - question: Can we identify high-risk domains being added to login pages based on characteristics like age, popularity, and name entropy?
    context: This question provides a heuristic-based detection method for identifying malicious domains that may not yet be on a threat intelligence feed. Attackers often use newly registered, unpopular, or algorithmically generated domains. By scoring domains based on these suspicious attributes, we can flag potential threats proactively.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Externally-facing web servers hosting login portals (VPN, OWA, SharePoint)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new external domain found in login page modification:
            ENRICH domain with metadata (age, popularity, registration)
            CALCULATE risk_score = 0
            IF domain_age < 30 days: risk_score += high_weight
            IF domain_popularity < 10th_percentile: risk_score += high_weight
            IF shannon_entropy(domain_name) > 3.5: risk_score += medium_weight
            IF risk_score > threshold:
              ALERT "High-risk domain identified in login page"
  - question: Have any web portal files been modified outside of established maintenance windows or legitimate update cycles?
    context: Legitimate updates to web applications typically occur on a predictable schedule. This question aims to identify unauthorized modifications by modeling the normal rhythm of file changes. A modification that occurs at an anomalous time, outside of a predicted maintenance window, is highly suspicious and could indicate adversary activity.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Externally-facing web servers hosting login portals (VPN, OWA, SharePoint)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL historical file modification events (WinEvent 4663) to establish baseline update cycles
          FOR EACH new file modification event:
            IF event_time is outside predicted maintenance window:
              CORRELATE with parent process (WinEvent 4688)
              ALERT "Anomalous modification to web portal file outside maintenance window"
  - question: Is a web portal server sending outbound traffic containing credential-like patterns to a non-allowlisted destination?
    context: After capturing credentials, an adversary must exfiltrate them. This question looks for the exfiltration traffic itself. By inspecting outbound HTTP/S requests from web portal servers for common credential keywords (e.g., 'username=', 'password=') and checking the destination against an allowlist, we can directly detect potential credential theft.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points for the DMZ hosting the web portal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek http.log where source_ip is a web_portal_server and destination_ip is external
          IF uri OR post_body contains regex /(user(name)?|pass(word)?|token|cred(ential)?)=[^&]+/i:
            IF destination_ip OR destination_domain NOT in allowlist:
              ALERT "Potential credential exfiltration detected from web portal"
  - question: Is a web portal server connecting to a rare destination IP or exhibiting anomalous payload sizes?
    context: Adversary C2 and exfiltration infrastructure is often distinct from the normal servers a web portal communicates with. This question aims to identify these anomalous connections by baselining normal outbound traffic. A connection to a historically rare destination, or a connection with an unusually large or small payload, can indicate exfiltration or C2 activity.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points for the DMZ hosting the web portal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN 90-day baseline of destination IPs and connection stats for each web_portal_server
          FOR EACH new outbound connection:
            IF destination_ip_frequency < 5th_percentile:
              ALERT "Web portal connected to a rare destination"
            IF abs(payload_size - baseline_avg_payload_size) > 2 * std_dev:
              ALERT "Web portal connection has anomalous payload size"
  - question: Can we detect anomalous outbound network connections from web portal servers using a machine learning model?
    context: This question proposes using a more advanced, model-driven approach to detect suspicious network connections. A one-class SVM or other anomaly detection model can learn the characteristics of legitimate traffic and flag any connection that deviates significantly, even if it doesn't trigger simpler rule-based logic. This is effective at finding novel or evasive exfiltration techniques.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points for the DMZ hosting the web portal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN one-class SVM on features of legitimate outbound connections (port, duration, bytes)
          FOR EACH new outbound connection from a web_portal_server:
            SCORE connection with the model
            IF score is 'anomaly':
              IF connection contains credential patterns:
                ALERT "ML model flagged anomalous connection with potential credential data"
  - question: Did an unauthorized process modify a login page, followed by a connection to a new external IP address?
    context: This question correlates host-based and network-based events to build a high-confidence indicator of compromise. A legitimate update is done by an authorized process. If an unauthorized process modifies a critical login file and the server then immediately makes a connection to a never-before-seen IP, it strongly suggests a compromise and subsequent C2 communication or data exfiltration.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Web portal application servers and their associated host-based monitoring agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file modification (WinEvent 4663) of login page:
            GET modifying process name (from WinEvent 4688)
            IF process_name NOT in authorized_process_allowlist:
              MONITOR outbound connections from host for 5 minutes
              IF connection to new_external_ip (not seen in 30 days):
                ALERT "Unauthorized process modified login page and connected to new IP"
  - question: Did a process with a highly entropic or obfuscated command line modify a login page?
    context: Adversaries often use obfuscation to hide their commands from basic keyword-based detection. Shannon entropy can be used to measure the randomness or complexity of a string. A command line with unusually high entropy can indicate the use of obfuscation or encoding. This question helps detect malicious activity by flagging processes that use such techniques to modify sensitive files.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Web portal application servers and their associated host-based monitoring agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process creation (WinEvent 4688) that modifies a login page:
            CALCULATE shannon_entropy of command_line_arguments
            IF entropy_score > 99th_percentile_of_baseline:
              ALERT "High-entropy command line used to modify login page"
  - question: Has an anomalous sequence of events related to a software update occurred on a web server?
    context: Legitimate software updates follow a predictable sequence of events. This question leverages sequence analysis models (like HMM or LSTM) to learn these normal patterns. The model can then detect when an observed sequence of events (e.g., an unexpected process modifying a file, followed by a connection to a rare IP) deviates from the learned norm, indicating a potential attack.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - Web portal application servers and their associated host-based monitoring agents
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN sequence model (HMM/LSTM) on normal update event sequences
          FEED real-time event sequences into the model
          IF sequence_probability_score is low:
            ALERT "Anomalous sequence of events detected on web server"
  - question: Is a web portal server communicating with a destination in a country or ASN that is not on its allowlist?
    context: Business-critical servers often have a predictable and limited set of external communication partners. This question involves creating a strict allowlist of approved destination countries and Autonomous System Numbers (ASNs). Any connection outside this explicit allowlist is highly suspicious and warrants immediate investigation, as it could be C2 traffic or data exfiltration to an adversary-controlled location.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network sensor data at the DMZ egress point
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN allowlist of destination countries and ASNs for each web_portal_server
          FOR EACH successful outbound connection:
            ENRICH connection with GeoIP and ASN data
            IF destination_country OR destination_ASN NOT in server's allowlist:
              ALERT "Web portal connected to non-allowlisted country/ASN"
  - question: Is a web portal server exhibiting signs of 'heartbeat'-like beaconing or unusual traffic patterns?
    context: Malware and C2 implants often use periodic, 'heartbeat' connections to communicate with their controllers. This question aims to detect such behavior by baselining normal traffic patterns. A sudden increase in connection frequency paired with a drop in data volume, or a shift to highly regular, fixed-interval connections, are strong indicators of C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network sensor data at the DMZ egress point
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE hourly outbound traffic profile (bytes, connection interval) for each server
          MONITOR 1-hour windows for deviations:
          IF connection_count > 3*std_dev_baseline AND avg_bytes < 50th_percentile_baseline:
            ALERT "Possible low-and-slow exfiltration detected"
          IF std_dev(time_delta_between_connections) drops significantly:
            ALERT "Possible fixed-interval C2 beaconing detected"
  - question: Are there unexplained spikes in a web portal server's outbound traffic volume?
    context: This question uses time-series analysis to find anomalous bursts of data exfiltration that might be missed by simple thresholding. By decomposing the traffic data into trend, seasonality, and residual components, we can isolate the 'noise' or unexplained variation. Sudden, sharp peaks in this residual data can represent anomalous events like bulk data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network sensor data at the DMZ egress point
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          APPLY time-series decomposition (STL) to total outbound data volume per minute
          ISOLATE the residual component
          USE peak-finding algorithm on the residual series
          FOR EACH detected peak:
            CORRELATE with connection clustering (DBSCAN) to identify the anomalous traffic flow
            ALERT "Anomalous spike in outbound traffic detected"
  - question: Has a known malicious file, such as a web shell, been created in a web-accessible directory?
    context: A common objective after gaining access is to place a web shell for persistent access and command execution. This question focuses on detecting the creation of these malicious files. By monitoring new files in web directories, checking their hashes against threat intelligence, and scanning their content with YARA rules, we can identify known web shells and credential harvesters.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of externally-facing web servers, particularly web root and temporary directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR file creation events in web directories
          FOR EACH new file:
            COMPUTE file_hash
            QUERY threat_intelligence_feed with file_hash
            SCAN file_content with web_shell_YARA_rules
            IF hash_match OR yara_match:
              ALERT "Malicious file (web shell) detected on web server"
  - question: Has a new file with unusually high entropy been created in a web directory?
    context: This question provides a way to detect new or unknown malicious code. Packed or encrypted code, which adversaries use to evade signature-based detection, has a much higher entropy (randomness) than normal text or script files. By baselining the typical entropy for different file types (.js, .html, etc.) and alerting on significant outliers, we can flag potentially obfuscated malicious files.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of externally-facing web servers, particularly web root and temporary directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ESTABLISH baseline entropy distribution for each file type in web directories
          ON new file creation:
            CALCULATE file's shannon_entropy
            IF file_entropy > (mean_for_file_type + 3 * std_dev_for_file_type):
              ALERT "High-entropy file created in web directory, potential obfuscated code"
  - question: Can we use a machine learning model to classify newly created files in web directories as malicious or benign?
    context: This question proposes a sophisticated, feature-based approach to file analysis. By training a classification model on a labeled dataset of good and bad files, the system can learn to identify maliciousness based on a combination of features like file size, entropy, suspicious function calls, and string characteristics. This can detect a broader range of threats than signature-based methods alone.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of externally-facing web servers, particularly web root and temporary directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN classifier (e.g., Random Forest) on features from benign/malicious web files
          DEPLOY model to score new files written to web directories
          IF file is classified as 'malicious' with confidence > 0.90:
            ALERT "ML model classified new file as malicious"
  - question: Has a web server process spawned a command-line interpreter or other suspicious child process?
    context: Web server processes (like w3wp.exe, httpd) should not be spawning shells (cmd.exe, powershell.exe) or system utilities. This behavior is a classic indicator of a web shell being used to execute commands on the server. This question creates a high-severity alert for this specific, highly anomalous parent-child process relationship.
    answer_sources:
      - Windows Event ID 4688
      - Process execution logs on web portal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (WinEvent 4688)
          WHERE ParentProcessName is in [w3wp.exe, httpd.exe, nginx.exe]
          AND NewProcessName is in [cmd.exe, powershell.exe, bash, whoami.exe, net.exe]
          CREATE high-severity ALERT "Web server process spawned a shell or recon tool"
  - question: Has a rare parent-child process relationship occurred on a web server?
    context: Beyond just looking for shells, this question aims to find any anomalous process execution. By profiling all parent-child process relationships over time, we can establish a baseline of normal behavior. Any new or extremely rare combination (e.g., a web server process spawning an FTP client) is flagged as an anomaly, indicating a potential deviation caused by an attacker.
    answer_sources:
      - Windows Event ID 4688
      - Process execution logs on web portal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROFILE frequency of all parent-child process relationships over a 30-day window
          FOR EACH new process creation event:
            IF its_parent_child_frequency < 1st_percentile:
              ALERT "Extremely rare parent-child process relationship observed"
  - question: Has a web server process executed a command with suspicious or anomalous arguments?
    context: Adversaries may use legitimate processes with malicious command-line arguments. This question uses NLP and machine learning techniques to analyze the command-line arguments themselves. By converting arguments into numerical vectors, a model can learn to distinguish between benign and malicious commands or flag commands that are semantically different from anything seen before.
    answer_sources:
      - Windows Event ID 4688
      - Process execution logs on web portal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          VECTORIZE command line arguments from web server child processes using TF-IDF or Word2Vec
          TRAIN a classifier to distinguish benign vs. malicious command lines
          AND/OR
          USE an anomaly detection algorithm on the vectors
          ALERT on commands flagged as malicious or anomalous
  - question: Is a web server process writing data to a file that is not a standard log file?
    context: Adversaries may try to hide the data they've collected by writing it to a file with an innocuous name or extension, such as an image file (.jpg) or a hidden config file. This question looks for file write events from a web process to files that are not typical log files, especially if the content appears to be text-based, suggesting it's a masquerading log.
    answer_sources:
      - Windows Event ID 4663
      - Zeek http.log
      - File system audit logs for web server directories, including temporary, image, and document root folders
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file write events (WinEvent 4663) from web server process
          IF file_extension is not a log type (e.g., .jpg, .png, .css)
            AND file_content_type is text:
            ALERT "Web process is writing text data to a non-log file"
  - question: Is there a correlation between inbound login requests and write events to a specific file?
    context: This question seeks to directly link credential capture with data storage. If an adversary is logging captured credentials to a file, the file's size will grow each time a user logs in. By calculating the cross-correlation between the timing of inbound POST requests to a login page and the timing of write events to a suspect file, a strong positive correlation can prove the file is being used for credential harvesting.
    answer_sources:
      - Windows Event ID 4663
      - Zeek http.log
      - File system audit logs for web server directories, including temporary, image, and document root folders
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CREATE time series of inbound POST requests to login_page.aspx
          CREATE time series of file write events to a suspect_file
          CALCULATE cross-correlation between the two series
          IF correlation_coefficient > 0.7:
            ALERT "File writes are highly correlated with user logins; likely credential harvesting"
  - question: Are there anomalous file write events that do not fit into normal logging behavior patterns?
    context: This question uses unsupervised machine learning to find unusual file write activity without pre-defined rules. By clustering all file write events based on features like file path, process name, and write frequency, we can automatically group normal application logging behaviors. Any event that doesn't fit into a cluster is an outlier and should be investigated as potentially malicious.
    answer_sources:
      - Windows Event ID 4663
      - Zeek http.log
      - File system audit logs for web server directories, including temporary, image, and document root folders
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTER file write events using DBSCAN with features (file path, process name, etc.)
          IDENTIFY events classified as 'noise' (not belonging to any cluster)
          FOR EACH noise_event:
            ALERT "Anomalous file write event detected as outlier"
  - question: Has a web server process read a sensitive system file and then immediately written to a temporary file?
    context: This question detects a common pattern for data staging. An adversary uses a compromised web process to read a sensitive file (like web.config or the SAM hive) and then writes that data to a new file in a temporary, world-writable directory before exfiltrating it. By enabling auditing on sensitive files (using SACLs) and correlating reads with subsequent writes, we can catch this staging behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - System-level audit logs on web servers, with SACLs configured for sensitive configuration files and registry hives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON read access (WinEvent 4656/4663) by web_process to SACL-protected sensitive_file:
            MONITOR for write events from the same process_id within 60 seconds
            IF write event to a file in a temp_directory:
              ALERT "Sensitive file read, followed by write to temp dir; potential data staging"
  - question: Has a web server process accessed files in an unusual or low-probability sequence of directories?
    context: Processes tend to access files and directories in predictable patterns. This question models these patterns as a Markov chain, which calculates the probability of transitioning from one state (directory) to another. An alert is generated if the web process makes a very low-probability transition, such as moving from the web root directory to the Windows System32 directory, as this deviates from normal behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - System-level audit logs on web servers, with SACLs configured for sensitive configuration files and registry hives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD Markov chain model of directory access paths for web_server_process
          FOR EACH new file access:
            CALCULATE the probability of the directory transition
            IF transition_probability is below baseline threshold (e.g., never seen before):
              ALERT "Web process executed a low-probability directory access sequence"
  - question: Can we detect anomalous process-to-file interaction paths using graph-based analysis?
    context: This is an advanced technique that models the entire system's activity as a graph, where processes and files are nodes and access events are edges. A graph-based anomaly detection model can learn the structure of normal interactions. It can then detect the formation of anomalous paths or subgraphs in real-time, such as a web process node connecting to a sensitive file node and then to a new temp file node, indicating a potential attack path.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - System-level audit logs on web servers, with SACLs configured for sensitive configuration files and registry hives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL process-file interactions as a graph
          TRAIN a graph-based anomaly detection model on the graph of normal activity
          FEED real-time access events into the model
          IF model detects an anomalous subgraph or path (e.g., web_process -> sensitive_file -> temp_file):
            ALERT "Graph anomaly detection flagged a suspicious process-file interaction path"