name: T1078: Valid Accounts
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries using valid accounts (T1078) across various stages of an attack, including initial access, persistence, privilege escalation, and defense evasion. It provides investigative questions and queries to identify activities such as the use of breached credentials, password spraying attacks, impossible travel, anomalous access to critical systems, misuse of service accounts for interactive logins, C2 beaconing, and defense evasion through living-off-the-land binaries (LOLBAS).
type: technique
related:
  - TA0001: Initial Access
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any successful remote logins been made using usernames from known credential breach lists?
  context: This question aims to detect the most direct form of valid account compromise: credential reuse. Adversaries frequently leverage credentials leaked in public or private data breaches. A successful login using a known-breached credential is a high-confidence indicator of compromise, suggesting the user's password was reused and has been compromised.
  answer_sources:
    - Windows Event ID 4624
    - Windows Event ID 4625
    - Zeek conn.log
    - Externally-facing authentication services (e.g., VPN gateways, OWA, RDP gateways)
    - Domain Controllers
    - Cloud identity providers
    - Breached credential database/API
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each event WHERE EventID is 4624 AND LogonType is (3 or 10)
        CHECK event.username against breached_credential_database
        IF match found
          ALERT "High-Severity: Successful remote login with known breached credentials"
- question: Has a user on a known breach list, who previously had a high login failure rate, suddenly logged in successfully from a new location?
  context: This identifies successful credential stuffing attacks. Adversaries try many passwords against a username (high failure rate), and once they find the correct one, the failure rate drops to zero. A successful login from a new location for an account that was previously being "stuffed" is a strong signal that the attack has succeeded.
  answer_sources:
    - Windows Event ID 4624
    - Windows Event ID 4625
    - Zeek conn.log
    - Externally-facing authentication services (e.g., VPN gateways, OWA, RDP gateways)
    - Domain Controllers
    - Cloud identity providers
    - Geolocation/ASN database
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each user on breach_list
          CALCULATE baseline_failure_rate = (count 4625) / (count 4624 + 4625) over last 30 days
          FOR each new successful login (4624) from new_asn or new_geo
            CALCULATE short_term_failure_rate over last hour
            IF short_term_failure_rate == 0 AND baseline_failure_rate was high
              ALERT "Statistical Indicator: Credential stuffing success suspected"
- question: Can we use a machine learning model to score the risk of remote logins based on multiple factors like breach status, location, and time?
  context: This moves beyond single indicators to a holistic risk assessment. A single anomaly might be benign, but multiple concurrent anomalies (e.g., breached user, new country, unusual time) are much more likely to be malicious. A classification model can weigh these features to produce a probabilistic score of maliciousness, allowing for more nuanced and accurate alerting.
  answer_sources:
    - Windows Event ID 4624
    - Windows Event ID 4625
    - Zeek conn.log
    - Externally-facing authentication services (e.g., VPN gateways, OWA, RDP gateways)
    - Domain Controllers
    - Cloud identity providers
    - Breached credential database
    - Geolocation/ASN database
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each remote login event
          EXTRACT features (is_breached, is_new_geo, is_new_asn, time_anomaly_score)
          SCORE event with classification_model
          IF score > 0.85
            ALERT "ML Detection: High-risk remote login detected"
- question: Has any single IP address generated a high number of failed logins for many different users in a short time?
  context: This is a classic signature for a password spraying attack, where an adversary tries one or a few common passwords against a large list of usernames. By centralizing the failures on a single source IP across many accounts, this pattern becomes distinct from normal user behavior where failures are typically tied to a single account.
  answer_sources:
    - Windows Event ID 4625
    - Zeek conn.log
    - Externally-facing authentication services (e.g., VPN gateways, OWA, RDP gateways)
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        AGGREGATE failed logins (EventID 4625) by source_ip over 5-minute windows
        COUNT distinct usernames per source_ip
        IF distinct_username_count > 20
          ALERT "Rule-based: Password spraying attack suspected from IP"
- question: Is the ratio of unique failed accounts to unique source IPs statistically anomalous?
  context: This provides a more robust, statistical method for detecting password spraying. Normal activity might have a low ratio (many users from many IPs, or one user from one IP). A password spray attack creates a high ratio (many users from one IP). Comparing this ratio to a long-term baseline helps detect deviations from normal patterns, making the detection more resilient to benign fluctuations.
  answer_sources:
    - Windows Event ID 4625
    - Zeek conn.log
    - Externally-facing authentication services (e.g., VPN gateways, OWA, RDP gateways)
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        CALCULATE long_term_baseline_ratio = (distinct_failed_users / distinct_source_ips)
        OVER rolling 10-minute window
          CALCULATE current_ratio
          IF current_ratio > (baseline_mean + 3 * baseline_stdev)
            ALERT "Statistical Anomaly: Password spraying pattern detected"
- question: Can we use clustering algorithms to identify dense groups of failed logins that indicate a password spraying attack?
  context: This question applies unsupervised machine learning to find attacks without pre-defined rules. A password spraying attack will naturally form a dense cluster in a feature space defined by source IP, time, and usernames. DBSCAN is well-suited to find these dense clusters and label them as anomalies (attacks), while scattered, normal login failures are treated as noise.
  answer_sources:
    - Windows Event ID 4625
    - Zeek conn.log
    - Externally-facing authentication services (e.g., VPN gateways, OWA, RDP gateways)
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR all failed login events
          CREATE feature vectors (source_ip, timestamp, username_numeric)
          APPLY DBSCAN clustering model
          IF a dense cluster is found with a single source_ip and many usernames
            ALERT "ML Detection: Anomalous login cluster indicates password spraying"
- question: Has a user account logged in from two locations in a time frame that would require impossible travel speeds?
  context: This is a high-fidelity indicator that an account has been compromised and is being used by at least two separate entities in different geographic locations. By tracking the last known login location and time, we can calculate the required travel speed for the next login. Speeds exceeding that of commercial aircraft are physically impossible and strongly suggest credential abuse.
  answer_sources:
    - Windows Event ID 4624
    - Zeek conn.log
    - Domain Controllers
    - VPN Concentrators
    - Cloud identity providers
    - User workstations
    - Geolocation database
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each successful login
          GET last_login_location, last_login_time for user
          CALCULATE distance and time_delta from current login
          CALCULATE speed = distance / time_delta
          IF speed > 600 mph
            ALERT "Critical: Impossible travel detected for user"
- question: Has a successful login occurred that deviates from the user's established baseline across multiple behavioral dimensions (e.g., location, time, day)?
  context: This question seeks to identify high-risk logins by aggregating multiple weak signals into a stronger one. A user logging in from a new country is one signal. Doing so outside of their normal hours is another. Coming from a new ASN is a third. While each alone may be benign, their combination points to a login that is highly uncharacteristic for the user and warrants investigation.
  answer_sources:
    - Windows Event ID 4624
    - Zeek conn.log
    - Domain Controllers
    - VPN Concentrators
    - Cloud identity providers
    - User workstations
    - Geolocation/ASN database
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each user, establish baseline (ASNs, countries, hours, days)
        FOR each new login
          CALCULATE risk_score = 0
          IF source_asn is new, risk_score++
          IF source_country is new, risk_score++
          IF hour_of_day is anomalous, risk_score++
          IF day_of_week is anomalous, risk_score++
          IF risk_score >= 3
            ALERT "High-Risk Login: Multiple behavioral anomalies detected"
- question: Can an unsupervised machine learning model, trained on a user's historical login patterns, identify a new login as a significant outlier?
  context: This leverages machine learning to automatically learn a complex, multi-dimensional profile of a user's normal login behavior. Models like Isolation Forest are effective at this because they don't require pre-defined rules or thresholds. They learn what is 'normal' for a user and can flag any new login that deviates significantly from that learned profile across all features simultaneously, catching novel or subtle anomalies.
  answer_sources:
    - Windows Event ID 4624
    - Zeek conn.log
    - Domain Controllers
    - VPN Concentrators
    - Cloud identity providers
    - User workstations
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each user
          TRAIN Isolation Forest model on historical login feature vectors
        FOR each new login
          SCORE login with user's model
          IF score indicates significant anomaly
            ALERT "ML Detection: Anomalous login outlier detected for user"
- question: Has a user successfully logged into a critical system that their role is not authorized to access?
  context: This is a policy-based detection that checks for clear violations of defined access control policies. Unauthorized access to a critical asset (like a domain controller or finance server) by a non-administrative user is a serious security event. It could indicate privilege escalation, misconfiguration, or an insider threat. This requires maintaining an explicit mapping of roles to authorized assets.
  answer_sources:
    - Windows Event ID 4624
    - Critical application servers (e.g., HR, Finance)
    - Domain Controllers
    - Code repositories
    - Infrastructure management consoles
    - Asset inventory/CMDB
    - Identity and Access Management (IAM) system
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN critical_asset_list and role_based_ACLs
        FOR each successful login (EventID 4624) to host in critical_asset_list
          GET user_role
          IF user_role not in ACL for host
            ALERT "Critical: Unauthorized access to critical asset by user"
- question: Has a user logged into a critical asset for the very first time?
  context: This question uses historical behavior as an implicit access policy. Even if not explicitly forbidden, a user's first-ever access to a critical system is a statistically unusual event that warrants scrutiny. It could be a legitimate, newly-required access, but it could also be the first step of lateral movement or data exploration by a compromised account.
  answer_sources:
    - Windows Event ID 4624
    - Critical application servers (e.g., HR, Finance)
    - Domain Controllers
    - Code repositories
    - Infrastructure management consoles
    - Asset inventory/CMDB
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN historical_host_access list per user
        FOR each successful login (EventID 4624) to a critical_host
          IF critical_host not in user's historical_host_access list
            ALERT "Statistical Alert: First-time access to critical asset by user"
            ADD host to user's list
- question: Can a graph-based link prediction model identify a user-to-asset login as an improbable or anomalous connection?
  context: This approach models the entire network of user-to-asset connections as a graph. Link prediction algorithms learn which connections are "likely" based on the existing graph structure (e.g., users who access server A often also access server B). A new login that creates a connection the model deems highly improbable is a strong anomaly, suggesting the access pattern does not fit established workflows and may be malicious.
  answer_sources:
    - Windows Event ID 4624
    - Critical application servers (e.g., HR, Finance)
    - Domain Controllers
    - Code repositories
    - Infrastructure management consoles
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        CREATE user-asset graph from historical login data
        TRAIN link prediction model on graph
        FOR each new login (a new user-asset link)
          SCORE the link with the prediction model
          IF score is very low
            ALERT "ML Detection: Improbable user-to-asset access detected"
- question: Has a successful remote login originated from an IP address known to be malicious from a threat intelligence feed?
  context: This is a straightforward and high-confidence check. If a user successfully authenticates from an IP address that a reliable threat intelligence feed has identified as a known command-and-control (C2) server, TOR exit node, or malicious proxy, it is a strong indicator that the account is compromised and being used for malicious persistence.
  answer_sources:
    - Windows Event ID 4624
    - Zeek conn.log
    - VPN Concentrators
    - RDP Gateways
    - Firewall and proxy servers
    - Network egress points
    - Threat intelligence feed
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each successful remote login (EventID 4624, Logon Type 3 or 10)
        QUERY source_ip against threat_intelligence_feed
        IF match is found
          ALERT "High-Severity: Login from known malicious IP address"
- question: Did a successful login originate from an Autonomous System (ASN) that has a historically very low login success rate?
  context: This statistical approach identifies suspicious origins. Some ASNs, particularly those associated with bulletproof hosting or cloud providers with lax abuse policies, will have a history of generating far more failed login attempts (password spraying, etc.) than successful ones. A successful login from such an ASN is anomalous and suggests a compromised account is now being accessed from a malicious actor's infrastructure.
  answer_sources:
    - Windows Event ID 4624
    - Zeek conn.log
    - VPN Concentrators
    - RDP Gateways
    - Firewall and proxy servers
    - Network egress points
    - ASN database
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        CALCULATE historical success_rate per ASN
        IDENTIFY ASNs in bottom 5th percentile for success_rate
        FOR each successful login
          ENRICH source_ip with ASN data
          IF ASN is in low_success_rate_list
            ALERT "Statistical Anomaly: Successful login from low-reputation ASN"
- question: Has a successful remote login originated from an IP address that receives a high maliciousness score from a reputation model?
  context: This leverages machine learning-based IP reputation services, which go beyond static blocklists. These models score IPs based on a wide range of features (hosting provider, past behavior, domain associations, etc.). A login from an IP with a high maliciousness score provides a dynamic and probabilistic indicator of risk that can catch newer malicious infrastructure not yet on static lists.
  answer_sources:
    - Windows Event ID 4624
    - Zeek conn.log
    - VPN Concentrators
    - RDP Gateways
    - Firewall and proxy servers
    - Network egress points
    - IP reputation model/service
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each successful remote login
          SCORE source_ip with IP_reputation_model
          IF score > 90/100
            ALERT "ML Detection: Login from IP with high maliciousness score"
- question: Has a new scheduled task or service been created with a command-line that matches known malicious patterns?
  context: Adversaries frequently create new services or scheduled tasks to ensure their malware or tools run automatically, achieving persistence. This question looks for the tell-tale command-line arguments associated with this activity, such as encoded PowerShell commands, execution of scripts from unusual locations, or the use of living-off-the-land binaries for malicious purposes.
  answer_sources:
    - Windows Event ID 4698
    - Windows Event ID 7045
    - Windows Event ID 4688
    - Zeek dns.log
    - User workstations
    - Application servers
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each new service (7045) or task (4698) creation event
        APPLY regex library for malicious patterns to command_line
        IF match is found
          ALERT "Rule-based: Malicious persistence pattern detected in new service/task"
- question: Does the command-line of a newly created service or scheduled task have statistically high entropy, suggesting obfuscation?
  context: Adversaries often obfuscate or encode their commands to evade simple signature-based detection. This encoding frequently results in a command-line string with high character randomness, or entropy. Calculating the entropy of a command and flagging values that are statistically unusual compared to a baseline of normal administrative commands can effectively uncover hidden malicious commands.
  answer_sources:
    - Windows Event ID 4698
    - Windows Event ID 7045
    - Windows Event ID 4688
    - Zeek dns.log
    - User workstations
    - Application servers
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        CALCULATE baseline entropy for command-lines
        FOR each new service (7045) or task (4698) creation event
          CALCULATE entropy of command_line
          IF entropy > 98th percentile of baseline
            ALERT "Statistical Anomaly: High entropy in command suggests obfuscation"
- question: Can an NLP model classify the command-line of a new persistence mechanism as malicious?
  context: This question applies advanced machine learning to command-line analysis. An NLP (Natural Language Processing) model, trained on vast datasets of both benign and malicious commands, can learn the subtle grammatical and structural patterns that differentiate them. This allows it to classify novel or unknown malicious commands that might evade both regex and simple entropy checks.
  answer_sources:
    - Windows Event ID 4698
    - Windows Event ID 7045
    - Windows Event ID 4688
    - Zeek dns.log
    - User workstations
    - Application servers
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each new service (7045) or task (4698) creation event
        CLASSIFY command_line with fine-tuned NLP model
        IF classification is "malicious" with high confidence
          ALERT "ML Detection: Malicious command-line detected in new persistence mechanism"
- question: Has an account that has been inactive for more than 90 days suddenly been used to log in?
  context: Dormant accounts (e.g., for former employees, old service accounts) are prime targets for adversaries. They are less likely to be monitored, and their legitimate use is non-existent, meaning any activity is inherently suspicious. A sudden login from an account that has been inactive for an extended period is a high-confidence indicator of compromise.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Legacy application servers
    - HR systems
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN watchlist of accounts with lastLogonTimestamp > 90 days ago
        FOR each successful login (EventID 4624)
        IF username is on watchlist
          ALERT "High-Severity: Dormant account activity detected"
- question: After a dormant account becomes active, are its subsequent logins occurring at regular, machine-like intervals indicative of beaconing?
  context: This question looks for the behavior immediately following the compromise of a dormant account. Adversarial implants often use automated C2 beaconing for persistence, which manifests as logins or network connections at highly regular intervals (e.g., every 60 minutes +/- a few seconds). A very low standard deviation in the time between logins is a strong statistical sign of automation.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Legacy application servers
    - HR systems
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        ON dormant account alert
        CAPTURE timestamps of next 10 logins for that account
        CALCULATE standard deviation of time deltas between logins
        IF stdev < 5 seconds
          ALERT "Statistical Indicator: Automated beaconing suspected from reactivated dormant account"
- question: Can a time-series change point detection algorithm identify a sudden shift from inactivity to activity for a user account?
  context: This provides a formal, model-based approach to detecting the reactivation of a dormant account. By treating a user's login history as a time series (e.g., logins per day), a change point detection algorithm can mathematically identify the precise point where the account's behavior shifts from a state of zero activity to a new state of non-zero activity. This is a robust way to flag dormant account abuse.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Legacy application servers
    - HR systems
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each user account
        MODEL daily login count as a time series
        APPLY change point detection algorithm
        IF a change from a long period of zero to non-zero is detected
          ALERT "ML Detection: State change from dormant to active detected"
- question: Is a single non-administrative user account making remote connections from one workstation to an unusually high number of other hosts?
  context: This behavior is a classic indicator of lateral movement. Once an adversary compromises an initial endpoint, they use the compromised user's account to try and access other systems on the network. A single user account, especially a non-administrative one, initiating connections to many other distinct hosts in a short period (a hub-and-spoke pattern) is highly abnormal and suggests active exploration of the network.
  answer_sources:
    - Windows Event ID 4624
    - Windows Event ID 4648
    - User workstations
    - Jump servers
    - Internal network segments
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        GROUP remote logins (Type 3/10) by source_workstation and user over 1 hour
        COUNT distinct destination_hosts
        IF distinct_destination_count > 10 AND source_workstation is not a management server
          ALERT "Rule-based: Lateral movement hub-and-spoke pattern detected"
- question: Has a user connected to a number of distinct hosts that significantly exceeds their own historical daily baseline?
  context: This question refines the previous one by personalizing the detection threshold. Some users (like system administrators) may normally connect to many hosts, while a typical user may only connect to one or two. By establishing a baseline for each individual user, we can detect when *that specific user* is exhibiting unusual lateral movement behavior, leading to fewer false positives and more targeted alerts.
  answer_sources:
    - Windows Event ID 4624
    - Windows Event ID 4648
    - User workstations
    - Jump servers
    - Internal network segments
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each user, CALCULATE baseline 99th percentile of distinct daily host connections
        FOR each day
          COUNT distinct hosts connected to by user
          IF count > user's personal baseline
            ALERT "Statistical Anomaly: User exceeded personal baseline for lateral movement"
- question: Does a user's 'out-degree' centrality in a user-to-host connection graph show a sharp, anomalous increase?
  context: This applies graph theory to detect lateral movement. In a graph where users and hosts are nodes and logins are edges, a user's 'out-degree' is the number of hosts they connect to. A sudden, sharp increase in this metric for a user, compared to their own history, means they are suddenly connecting to many new hosts. This is a powerful, visual, and mathematically sound way to represent and detect lateral movement.
  answer_sources:
    - Windows Event ID 4624
    - Windows Event ID 4648
    - User workstations
    - Jump servers
    - Internal network segments
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MODEL user-to-host logins as a directed graph
        CALCULATE historical baseline for each user's out-degree centrality
        ON new login events, update out-degree
        IF user's out-degree shows sharp increase from baseline
          ALERT "ML Detection: Anomalous increase in graph out-degree suggests lateral movement"
- question: Has a default vendor account or a designated service account been used for an interactive login?
  context: Service accounts and default vendor accounts are designed for automated, non-interactive processes (Logon Type 5). An adversary who obtains credentials for one of these accounts may use it for an interactive login (Logon Type 2 or 10) to a system to gain privileged access while masquerading as a legitimate system process. This is a direct violation of the account's intended purpose and a strong indicator of abuse.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Application servers
    - Network appliances
    - Virtualization infrastructure
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN watchlist of service and default account names
        FOR each successful login (EventID 4624)
        IF username is on watchlist AND LogonType is (2 or 10)
          ALERT "Critical: Interactive logon by non-interactive account"
- question: Has an account that almost exclusively uses non-interactive logon types (e.g., Service) suddenly performed an interactive logon?
  context: This is a statistical approach to the previous question that doesn't require maintaining a manual list of service accounts. By profiling the historical logon types for every account, the system can learn which accounts are used for services (almost always Type 5). For such an account, any occurrence of an interactive logon (Type 2 or 10) is a zero-frequency event, making it a high-confidence statistical anomaly that signals potential misuse for privilege escalation.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Application servers
    - Network appliances
    - Virtualization infrastructure
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each account, PROFILE historical logon type distribution
        FOR each new login
        IF account's profile is >99% Type 5 AND current login is Type 2 or 10
          ALERT "Statistical Anomaly: Interactive logon by a service-like account"
- question: Has an account automatically classified as a 'service account' by a model been used for an interactive login?
  context: This automates the process of identifying service accounts through machine learning. A model can be trained to classify accounts as 'user' or 'service' based on features like naming conventions, OU, group memberships, and description fields. Once an account is automatically tagged as a 'service account', a simple, strict rule can be applied to alert on any interactive logon, combining the power of ML classification with the certainty of rule-based logic.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Application servers
    - Network appliances
    - Virtualization infrastructure
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        USE ML model to classify all accounts as 'user' or 'service'
        FOR each successful login (EventID 4624)
        IF account_class is 'service' AND LogonType is (2 or 10)
          ALERT "ML Detection: Interactive logon by an auto-classified service account"
- question: Was a user's addition to a privileged group immediately followed by a login from that same user?
  context: This correlation detects the immediate abuse of newly granted privileges. Adversaries, after finding a way to add an account to a group like Domain Admins, will almost immediately use that new privilege. A stateful rule that links the 'group add' event (4728/4732) to a 'logon' event (4624) for the same user within a short time window (e.g., 10 minutes) is a very strong indicator of privilege escalation in action.
  answer_sources:
    - Windows Event ID 4728
    - Windows Event ID 4732
    - Windows Event ID 4624
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        ON event (4728 or 4732 adding User 'X' to privileged group)
        START a 10-minute timer for User 'X'
        IF event (4624 for User 'X') occurs within timer
          ALERT "Critical: Immediate use of newly granted privileges detected"
- question: Is the time between a user being added to a privileged group and their next login a statistical outlier on the low end?
  context: This question provides a statistical lens for the previous rule. While immediate use of privileges is suspicious, this method looks for any use that is 'unusually fast' compared to normal administrative processes. During legitimate change windows, there might be a natural delay. An automated attack, however, will be nearly instantaneous. An event where this time delta is in the 1st percentile (i.e., faster than 99% of all historical instances) suggests automation and potential abuse.
  answer_sources:
    - Windows Event ID 4728
    - Windows Event ID 4732
    - Windows Event ID 4624
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MEASURE historical time delta between group_add and next_login events
        FOR each new instance of group_add -> login
          CALCULATE time_delta
          IF time_delta is in the bottom 1st percentile
            ALERT "Statistical Anomaly: Unusually fast use of new privileges"
- question: Has a sequence mining algorithm detected a rare or known-malicious chain of administrative events, such as a non-admin adding a new admin who then immediately logs in?
  context: This question moves beyond two-event correlation to analyzing entire chains of activity. An adversary's actions might involve a sequence of steps. A sequence mining algorithm can learn common, benign administrative sequences and flag any sequence that is either historically rare or matches a known attack pattern (e.g., [User A, not an admin, runs a script] -> [User B is added to Domain Admins] -> [User B logs into a DC]). This provides a more holistic view of administrative activity.
  answer_sources:
    - Windows Event ID 4728
    - Windows Event ID 4732
    - Windows Event ID 4624
    - Domain Controllers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MODEL chains of administrative events using a sequence mining algorithm
        FLAG sequences that are historically rare or match known attack patterns
        IF a malicious sequence is detected
          ALERT "ML Detection: Malicious administrative event sequence detected"
- question: Following a credential dumping alert on a host, did the associated user account then log in to other systems?
  context: This query directly links a credential theft action to its subsequent abuse. EDRs are good at detecting credential dumping (e.g., a non-system process accessing lsass.exe). The logical next step for an adversary is to use the harvested credentials. This correlated rule operationalizes that logic: if a credential dump alert fires for User X on Host A, any subsequent remote login by User X to a *different* host is highly suspect and likely represents lateral movement using the stolen credentials.
  answer_sources:
    - Windows Event ID 4688
    - Windows Event ID 4624
    - Windows Event ID 4648
    - User workstations
    - Domain Controllers
    - Member servers
    - EDR alerts
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        ON EDR alert for credential dumping by User 'X' on Host 'A'
        MONITOR remote logins by User 'X' for the next 24 hours
        IF User 'X' logs into any host other than 'A'
          ALERT "High-Severity: Lateral movement detected following credential dumping"
- question: After a credential dumping alert, did the user's rate of 'first-time' logins to new hosts statistically increase?
  context: This provides a statistical method to confirm the impact of a credential dumping event. A compromised account is often used to explore the network. Therefore, after a credential dump, we can expect the rate at which the user's account accesses new, previously unvisited hosts to increase. If this rate spikes above the user's normal baseline, it's a strong statistical confirmation that the stolen credentials are being actively used for lateral movement.
  answer_sources:
    - Windows Event ID 4688
    - Windows Event ID 4624
    - Windows Event ID 4648
    - User workstations
    - Domain Controllers
    - Member servers
    - EDR alerts
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        ON EDR alert for credential dumping by User 'X'
        CALCULATE baseline rate of 'first-time' remote logins for User 'X'
        MONITOR rate in the hour following the alert
        IF rate > 99th percentile of baseline
          ALERT "Statistical Indicator: Credential abuse confirmed by spike in new host access"
- question: Does a Bayesian model show that a credential dumping event significantly raised the posterior probability of a malicious lateral movement event?
  context: This question frames the detection problem in probabilistic terms. A Bayesian network can be constructed where events like 'credential dumping' are parent nodes to 'lateral movement'. Observing the 'credential dumping' evidence will update the model and increase the probability of the 'lateral movement' event. This allows an analyst to quantify their confidence that lateral movement is occurring, moving from "we saw A, then B" to "because we saw A, the probability of B being malicious is now 95%."
  answer_sources:
    - Windows Event ID 4688
    - Windows Event ID 4624
    - Windows Event ID 4648
    - User workstations
    - Domain Controllers
    - Member servers
    - EDR alerts
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        DEFINE Bayesian network where P(LateralMovement | CredentialDump) is high
        ON EDR alert for 'CredentialDump'
        UPDATE model with this evidence
        IF posterior probability of 'LateralMovement' crosses a threshold
          ALERT "ML Detection: High probability of lateral movement post-credential dump"
- question: Have an unusually high number of distinct users logged into a single host that is not a designated multi-user server (e.g., a standard workstation)?
  context: A standard user workstation should typically only see logins from one or two users. When an adversary compromises a machine, they may use it as a staging point or jump box, causing multiple compromised accounts to log into it. Seeing a high number of distinct user logins on a machine not designated as a terminal or jump server is a strong anomaly indicating the host may be a compromised pivot point.
  answer_sources:
    - Windows Event ID 4624
    - User workstations
    - Member servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN list of designated multi-user hosts
        FOR each host NOT on the list
          COUNT distinct users with successful logins in a 24-hour window
          IF count > 3
            ALERT "Rule-based: Multiple users logged into a single-user workstation"
- question: Is the number of distinct users logging into a specific host on a given day a statistical anomaly compared to its own baseline?
  context: This question personalizes the previous rule for each host. Instead of a single static threshold for all hosts, this method establishes a baseline for each machine. A server that normally has 50 users logging in won't trigger an alert for 55, but a workstation that normally has 1 user will trigger an alert if 3 users log in. Using a modified Z-score or Median Absolute Deviation is robust against non-normal distributions and makes the detection more accurate.
  answer_sources:
    - Windows Event ID 4624
    - User workstations
    - Member servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each host, establish a baseline of daily distinct user counts
        FOR each day and each host
          CALCULATE modified Z-score of the distinct user count for that day
          IF score > 3.5
            ALERT "Statistical Anomaly: Anomalous number of users on host"
- question: Has a host, previously clustered with single-user workstations, suddenly moved into a cluster of multi-user servers based on login activity?
  context: This applies unsupervised machine learning to group hosts by their usage patterns. A clustering algorithm like K-Means can automatically create groups of 'single-user workstations' and 'multi-user servers' based on features like login counts. The powerful part of this detection is identifying a *state change*—when a host that has always been in the workstation cluster suddenly exhibits behavior that causes it to move to the server cluster. This change is a high-confidence anomaly.
  answer_sources:
    - Windows Event ID 4624
    - User workstations
    - Member servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        PERIODICALLY run K-Means clustering on hosts using login count features
        TRACK the cluster assignment for each host over time
        IF a host moves from 'single-user' cluster to 'multi-user' cluster
          ALERT "ML Detection: Host usage profile changed anomalously"
- question: Has a process been created under a valid user's context whose executable hash matches a known malware signature?
  context: This is a fundamental defense evasion check. An adversary may use a valid account to run their malicious payload. While the account is legitimate, the executable is not. By hashing every new process executable and checking it against a threat intelligence database of known malware hashes, we can detect the execution of malicious code, regardless of which user account initiated it.
  answer_sources:
    - Windows Event ID 4688
    - User workstations
    - Servers
    - Threat intelligence feed
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each process creation event (4688) with an executable hash
        LOOKUP hash in malware threat intelligence database
        IF match is found
          ALERT "Critical: Known malware hash executed under valid user account"
- question: Has a process been executed from a file that is statistically rare across the environment and is not signed by a trusted publisher?
  context: This question helps find unknown or custom malware. Instead of looking for known-bad hashes, it looks for statistically suspicious ones. An executable that has never or rarely been seen across the entire enterprise (low prevalence) and lacks a valid digital signature from a trusted software publisher is highly suspect. This combination effectively flags executables that are not standard software and warrant further investigation or sandboxing.
  answer_sources:
    - Windows Event ID 4688
    - User workstations
    - Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN frequency count of all executable hashes seen in the environment
        FOR each new process creation event (4688)
        IF hash_prevalence < 0.01% AND executable is not signed by a trusted publisher
          ALERT "Statistical Anomaly: Rare, unsigned executable detected"
- question: Does a static analysis machine learning model score a newly seen executable hash as likely malicious?
  context: This leverages machine learning to predict the maliciousness of unknown files without even running them. Static analysis models are trained on the features of PE files (e.g., sections, imports, entropy) to distinguish malware from benign software. When a new or rare hash is observed, it can be submitted to this model for a score, allowing for the proactive detection of brand-new malware families or variants.
  answer_sources:
    - Windows Event ID 4688
    - User workstations
    - Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR new or rare process hashes
        SUBMIT hash to static analysis ML model
        IF maliciousness_score > threshold
          ALERT "ML Detection: Static analysis model flagged new executable as malicious"
- question: Has a legitimate, signed Windows binary been executed with command-line arguments that match known LOLBAS abuse patterns?
  context: Adversaries love to use legitimate system tools ("Living-Off-the-Land Binaries and Scripts" or LOLBAS) to evade defenses, as blocking the tools themselves would break the OS. The key is to detect how they are *used*. This question focuses on matching the command-line arguments of tools like certutil.exe or rundll32.exe against a library of regular expressions known to correspond to malicious use, such as downloading files or executing scriptlets.
  answer_sources:
    - Windows Event ID 4688
    - User workstations
    - Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each process creation event (4688)
        MATCH command_line against LOLBAS regex library
        IF a known abuse pattern is matched
          ALERT "High-Severity: LOLBAS abuse pattern detected"
- question: Was a high-risk system utility (e.g., powershell.exe) executed with command-line switches that are statistically rare for that utility in the environment?
  context: This is a statistical approach to detecting LOLBAS abuse. Instead of relying only on known patterns, it baselines the normal usage of powerful utilities. For example, 'powershell.exe -ExecutionPolicy Bypass' might be common, but 'powershell.exe -w hidden -enc' is rare and highly suspicious. By identifying statistically rare combinations of command-line switches for a given binary, this method can uncover novel or unusual abuse techniques.
  answer_sources:
    - Windows Event ID 4688
    - User workstations
    - Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each high-risk utility (e.g., powershell.exe)
        BASELINE frequency of command-line switches used
        FOR each new execution
        IF a rare switch or combination of switches is used
          ALERT "Statistical Anomaly: Anomalous command-line switch use for system utility"
- question: Can a character-level NLP model classify a full command-line as malicious, even if it uses novel LOLBAS techniques?
  context: This is the most advanced form of command-line analysis. A sophisticated NLP model, like a character-level Convolutional Neural Network (CNN), can learn the deep structural and token-based patterns of malicious commands without being told what to look for. This allows it to generalize from its training data to identify brand-new, never-before-seen LOLBAS techniques that would evade both regex and simple statistical checks.
  answer_sources:
    - Windows Event ID 4688
    - User workstations
    - Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each process creation event (4688)
        FEED full command_line into character-level CNN classifier
        IF classification is "malicious" with high confidence
          ALERT "ML Detection: Novel malicious command-line structure detected"
- question: Is a non-browser process making network connections to a domain that was registered very recently?
  context: Adversaries often use newly registered domains (NRDs) for their C2 infrastructure to evade reputation-based blocklists. While users might occasionally visit an NRD through a browser, it is highly unusual for a non-browser process (like svchost.exe or a random executable) to do so. Correlating network connection data with process information and domain registration (WHOIS) data can uncover this high-confidence C2 indicator.
  answer_sources:
    - Zeek conn.log
    - Zeek dns.log
    - Windows Event ID 4688
    - Network egress points
    - DNS servers
    - User workstations
    - WHOIS data
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each DNS request to a domain with creation_date < 30 days
        CORRELATE source_ip to the process that initiated the request
        IF process is not a web browser
          ALERT "High-Severity: Non-browser process connecting to newly registered domain"
- question: Are there network connections exhibiting C2 characteristics like highly periodic beaconing or high-entropy DNS queries indicative of a Domain Generation Algorithm (DGA)?
  context: This question looks for two classic statistical indicators of C2 communications. First, automated implants often "beacon" out at very regular intervals, which can be detected by finding a low standard deviation in the time between connections. Second, to make their C2 domains hard to block, adversaries use DGAs to create random-looking domain names. These domains have high character entropy, which can be measured and flagged.
  answer_sources:
    - Zeek conn.log
    - Zeek dns.log
    - Windows Event ID 4688
    - Network egress points
    - DNS servers
    - User workstations
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each source-destination network pair, calculate stdev of inter-arrival times. IF low, ALERT "Beaconing"
        FOR each DNS query, calculate entropy of the query name. IF high, ALERT "DGA"
- question: Can a time-series anomaly detection model (like an LSTM autoencoder) identify a host's network traffic pattern as a deviation from its normal behavior?
  context: This question applies advanced time-series analysis to find C2 traffic. An LSTM-based autoencoder can be trained on a host's normal network behavior (e.g., bytes out, connections per minute). The model learns to "reconstruct" this normal pattern. When C2 traffic begins, it introduces a new pattern that the model cannot reconstruct well, resulting in a high "reconstruction error." This error spike is a strong indicator of anomalous network activity.
  answer_sources:
    - Zeek conn.log
    - Zeek dns.log
    - Windows Event ID 4688
    - Network egress points
    - DNS servers
    - User workstations
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each host, train LSTM autoencoder on time series of network features
        IN real-time, feed current traffic into the model
        IF reconstruction_error is high
          ALERT "ML Detection: Anomalous network traffic pattern detected"
- question: Has a service account been used for an interactive login, potentially to masquerade malicious activity as a legitimate process?
  context: This question is critical for defense evasion. Service accounts are meant for automated processes. If an adversary compromises a service account and uses it to log in interactively, their activity may be overlooked because the account name itself seems legitimate and automated. Detecting this clear violation of intended use (interactive logon by a non-interactive account) is key to unmasking the adversary.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Application Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        MAINTAIN a watchlist of service account names
        FOR each successful login (EventID 4624)
        IF username is on watchlist AND LogonType is (2 or 10)
          ALERT "Critical: Interactive logon by service account detected"
- question: Has a service account, for which an interactive login is a zero-frequency event, been used for an interactive or remote interactive login?
  context: This is a statistical method for detecting service account abuse for defense evasion. By profiling every account's logon history, we can identify those that have never, or almost never, had an interactive logon. For such an account, the very first occurrence of a Logon Type 2 or 10 is a high-confidence anomaly, suggesting its credentials have been stolen and are being used by a human operator trying to hide.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Application Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        FOR each account, check if LogonType 2 or 10 has a near-zero historical probability
        IF such an account has a new LogonType 2 or 10 event
          ALERT "Statistical Anomaly: Zero-frequency interactive logon for service-like account"
- question: Does an unsupervised anomaly detection model flag an interactive login as a severe deviation from a service account's learned behavior?
  context: This uses machine learning to automatically profile and detect service account abuse. An anomaly detection model like Isolation Forest can learn a multi-dimensional profile of a service account's normal behavior (e.g., Logon Type 5, from specific hosts, at specific times). An interactive login by a human adversary will be a severe outlier from this learned profile and will be easily flagged by the model as an anomaly.
  answer_sources:
    - Windows Event ID 4624
    - Domain Controllers
    - Application Servers
  range: Last 90 days
  queries:
    - technology: pseudocode
      query: |
        TRAIN an Isolation Forest model on each account's historical login features
        FOR each new login
        SCORE the login with the account's model
        IF login is a significant outlier for a service-like account
          ALERT "ML Detection: Interactive login flagged as severe anomaly for service account"