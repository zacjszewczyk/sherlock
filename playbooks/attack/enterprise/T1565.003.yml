name: T1565.003: Runtime Data Manipulation
id: f9c5d7e8-a0b1-4c2d-8e3f-4a5b6c7d8e9f
description: This playbook helps investigate whether an adversary has altered or replaced a critical application binary or its in-memory process to impact data integrity. This involves looking for unauthorized modifications to application files, configuration changes via command-line or registry edits, process injection into critical applications, self-modifying processes, or suspicious network activity preceding file or memory manipulation.
type: technique
related:
  - TA0040: Impact
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a critical application binary been modified by an unauthorized process or a known malicious file?
    context: This question seeks to identify direct file manipulation of critical applications. Adversaries may replace legitimate software with malicious versions to achieve persistence or impact data integrity. By monitoring file creation events in sensitive directories and correlating them with the creating process, we can detect unauthorized modifications. Comparing the new file's hash against threat intelligence and the writing process against an allowlist of legitimate patchers (like 'msiexec.exe' or 'TrustedInstaller.exe') helps distinguish malicious activity from normal software updates.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH file_creation_events (Sysmon EID 11) in critical_app_directories
          JOIN process_info (Windows EID 4688) on process_id
          WHERE (writing_process_name NOT IN (allowlist: 'msiexec.exe', 'TrustedInstaller.exe'))
          OR (file_hash IN (threat_intelligence_feed))
          ALERT on match
  - question: Is a critical application binary being modified at an abnormally high frequency?
    context: This question helps detect suspicious modification patterns by focusing on the rate of change. Legitimate updates occur during scheduled maintenance windows, whereas repeated, frequent modifications outside these windows can indicate an adversary's attempts to manipulate a file. By baselining normal modification frequency and alerting on statistical outliers (e.g., exceeding the 99th percentile), we can identify activity that deviates from established norms.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CALCULATE historical 90-day modification count for each critical_binary_path
          CALCULATE 99th percentile threshold for each path
          MONITOR daily modification count for each path
          ALERT if daily_count > 99th_percentile_threshold
  - question: Does a machine learning model classify a file write event on a critical application as malicious?
    context: This question leverages a machine learning model to detect subtle or novel manipulation attempts that rule-based methods might miss. The model is trained on features like the writing process, parent process, user context, and command line arguments to distinguish between benign patching and malicious activity. An alert from a high-confidence model score suggests a sophisticated attempt to alter a critical binary.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new file_write_event in critical_app_directory
          EXTRACT features (process_name, parent_process, user, cmd_line, time_of_day)
          SCORE event using pre-trained classification model
          ALERT if score > high_confidence_threshold
  - question: Has a command-line utility been used to modify a registry key that controls critical application data?
    context: This question aims to detect adversaries using built-in tools like 'reg.exe' or 'powershell.exe' to alter an application's behavior by changing its configuration in the registry. Such changes can affect how data is processed, validated, or displayed. Monitoring for specific command-line arguments targeting known sensitive registry paths, especially when executed by unexpected user accounts, can reveal attempts to manipulate data integrity at the configuration level.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Process execution logs and registry monitoring logs on servers hosting financial, industrial control, or proprietary data processing applications.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation (Sysmon EID 1) OR registry_modification (Sysmon EID 13)
          WHERE process_name IN ('reg.exe', 'powershell.exe')
          AND command_line contains 'add HKLM\\Software\\CriticalApp\\...'
          AND user_account is not an authorized administrator
          ALERT on match
  - question: Is there a sudden increase in the complexity of command-line arguments on a critical host?
    context: This question uses the concept of entropy to detect obfuscated commands. Adversaries often use complex, randomized, or encoded command-line strings to hide their actions. A sharp increase in the Shannon entropy of command lines for processes like 'powershell.exe' can indicate an attempt to execute obfuscated code for data manipulation, deviating from the typically simple and predictable commands used in normal operations.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Process execution logs and registry monitoring logs on servers hosting financial, industrial control, or proprietary data processing applications.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CALCULATE 24-hour rolling average and standard deviation of command-line entropy for processes like 'powershell.exe' on critical_host
          MONITOR entropy in 5-minute windows
          ALERT if current_entropy > (rolling_average + 3 * std_dev)
  - question: Has a machine learning model classified a command-line string as a suspicious or malicious data manipulation attempt?
    context: This question applies Natural Language Processing (NLP) to analyze the intent behind command-line instructions. A fine-tuned model can recognize patterns associated with malicious actions, such as disabling data validation or redirecting data streams, which may not be obvious through simple keyword matching. This provides a more sophisticated layer of detection for command-line based attacks on critical systems.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Process execution logs and registry monitoring logs on servers hosting financial, industrial control, or proprietary data processing applications.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new process_creation_event on critical_system
          EXTRACT command_line_string
          CLASSIFY string using pre-trained NLP model (benign, suspicious, malicious)
          ALERT if classification is 'suspicious' or 'malicious'
  - question: Has a remote thread been created in a critical application by an unauthorized source process?
    context: This question targets process injection, a common technique for manipulating a process's in-memory data. By monitoring for remote thread creation events (Sysmon Event ID 8) and comparing the source-target process pair against an allowlist of legitimate interactions (e.g., debuggers, OS processes), we can identify unauthorized attempts to inject code into critical applications like 'sap.exe' or 'sqlserver.exe'.
    answer_sources:
      - Sysmon Event ID 8
      - Process memory space of critical applications (e.g., 'sqlserver.exe', 'oracle.exe', custom financial software) on production servers, monitored via endpoint detection and response (EDR) agents.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH remote_thread_creation_events (Sysmon EID 8)
          WHERE TargetImage is a critical_application
          AND SourceImage is NOT IN (allowlist_of_legitimate_injectors)
          ALERT on match
  - question: Has a rare or never-before-seen process injected a thread into a critical application?
    context: This question uses statistical analysis to find anomalous process injection activity. Normal system behavior involves a predictable set of processes injecting threads into others. By building a graph or frequency model of these interactions, we can flag source-target pairs that are historically rare or have never been observed. This approach can uncover novel attack tools or legitimate tools being used in an unprecedented, malicious way.
    answer_sources:
      - Sysmon Event ID 8
      - Process memory space of critical applications (e.g., 'sqlserver.exe', 'oracle.exe', custom financial software) on production servers, monitored via endpoint detection and response (EDR) agents.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE historical frequency of all (SourceImage, TargetImage) pairs for remote thread creation
          MONITOR for new remote_thread_creation_events
          ALERT if (SourceImage, TargetImage) pair has a frequency < 0.1% or has not been seen in the last 90 days
  - question: Does a machine learning clustering model identify a remote thread creation event as an outlier?
    context: This question uses unsupervised machine learning to identify anomalous process injection without relying on pre-defined rules or signatures. By clustering normal remote thread creation events based on features like source/target paths and user context, the model can identify events that do not fit any known-good cluster. These 'noise' or outlier events are highly suspicious and may represent a novel attack technique.
    answer_sources:
      - Sysmon Event ID 8
      - Process memory space of critical applications (e.g., 'sqlserver.exe', 'oracle.exe', custom financial software) on production servers, monitored via endpoint detection and response (EDR) agents.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CLUSTER historical remote_thread_events using DBSCAN based on features (source_path, target_path, user)
          FOR each new remote_thread_event
          CLASSIFY event against existing clusters
          ALERT if event is classified as noise/outlier
  - question: Is a critical process modifying its own executable file or a DLL it has loaded?
    context: This question aims to detect self-modifying code or runtime patching by a potentially compromised process. A legitimate process should not typically write to its own on-disk executable file or the DLLs it is using. By correlating file write events with loaded DLLs and the process's own image path, we can detect this highly suspicious behavior, while excluding known software updaters.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Application installation directories (e.g., C:\Program Files\CriticalApp), system directories containing shared libraries (e.g., C:\Windows\System32), and process memory space on critical servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH for file_write_events (Sysmon EID 11)
          WHERE process is not a known_updater
          AND (target_file_path == process_image_path) OR (target_file_path IN loaded_dlls_for_process (Sysmon EID 7))
          ALERT on match
  - question: Is a critical process writing to an executable file type outside of its normal behavior?
    context: This question establishes a baseline of normal file write activity for a critical process to detect deviations. A process like a database engine typically writes to log or data files (e.g., '.log', '.mdf'), not executable files ('.exe', '.dll'). Alerting when a process writes to an executable file, if that behavior is not in its historical baseline, can uncover attempts to drop or modify executables on the system.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Application installation directories (e.g., C:\Program Files\CriticalApp), system directories containing shared libraries (e.g., C:\Windows\System32), and process memory space on critical servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE file write patterns (file extensions, directories) for each critical_process
          MONITOR new file_write_events
          ALERT if critical_process writes to a file with extension ('.exe', '.dll', '.sys') AND this behavior is not in its historical baseline
  - question: Has a machine learning model detected that a critical process is performing an anomalous file write?
    context: This question uses a one-class SVM or similar anomaly detection model to identify file write operations that are outliers compared to a process's normal behavior. The model is trained only on legitimate activity, and anything that deviates significantly—such as writing to a system-critical directory or an unusual file type—is flagged. This can detect sophisticated attacks where an adversary uses a compromised process for malicious actions.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Application installation directories (e.g., C:\Program Files\CriticalApp), system directories containing shared libraries (e.g., C:\Windows\System32), and process memory space on critical servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          TRAIN one-class SVM model on normal file_write_behavior for a critical_process
          FOR each new file_write_event
          SCORE event with the model
          ALERT if event is classified as an outlier
  - question: Was a high-risk host event preceded by an inbound network connection from an unauthorized internal source?
    context: This question links suspicious network activity to subsequent malicious host actions. An adversary often needs to first connect to a target machine before manipulating it. By correlating an inbound connection from a non-allowlisted IP with a high-risk event (like process injection or critical file modification) occurring shortly after, we can build a stronger, more contextual alert that points to a potential attack chain.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Sysmon Event ID 11
      - Sysmon Event ID 8
      - Network traffic to/from critical application server subnets, internal network gateways, and host-based endpoint logs on those servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH for inbound_network_connection (Sysmon EID 3)
          WHERE SourceIP is NOT IN (authorized_ip_allowlist)
          CORRELATE with host_events on DestinationIP within 60 seconds
          ALERT if subsequent event is process_injection (Sysmon EID 8) or critical_file_write (Sysmon EID 11)
  - question: Did a critical server receive a network connection from a rare source IP or with an unusually large payload?
    context: This question uses statistical analysis of network logs to find anomalous connections that may be precursors to an attack. A connection from an IP address that rarely or never communicates with a critical server is suspicious. Likewise, a connection with a data payload size that is a statistical outlier could indicate file transfer or command-and-control activity. Alerting on these deviations helps to spot potential reconnaissance or initial access attempts.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Sysmon Event ID 11
      - Sysmon Event ID 8
      - Network traffic to/from critical application server subnets, internal network gateways, and host-based endpoint logs on those servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE source IP frequency and connection byte size for each critical_server
          MONITOR new inbound connections
          ALERT if (Source IP is in bottom 1% of frequency)
          OR (connection_bytes > 99th percentile of historical average)
  - question: Has a graph-based machine learning model detected an anomalous network connection to a critical server?
    context: This question models the entire internal network as a graph to understand normal communication pathways. A machine learning model can learn these patterns and detect statistically improbable connections, such as a host from a marketing VLAN connecting to a database server's administrative port. Such an anomaly, flagged by the model, is a strong indicator of lateral movement or an internal adversary attempting to access a critical asset.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Sysmon Event ID 11
      - Sysmon Event ID 8
      - Network traffic to/from critical application server subnets, internal network gateways, and host-based endpoint logs on those servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          MODEL internal network as a graph (nodes=hosts, edges=connections)
          USE graph-based anomaly detection algorithm to learn normal patterns
          MONITOR for new connections (edges)
          ALERT if a new edge is flagged as a high-risk anomaly by the model