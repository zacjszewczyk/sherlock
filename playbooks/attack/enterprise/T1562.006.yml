name: T1562.006: Indicator Blocking
id: d9c9e8f0-68a8-4c9f-8f8b-3d7e5e4d2c1b
description: This playbook helps determine if an adversary is actively blocking security telemetry or indicators to evade detection. It covers various methods, including the execution of known indicator-blocking tools, command-line manipulation to clear logs or modify firewall rules, triggering high-fidelity events like clearing the security log, causing an active host to cease sending telemetry, or executing a rapid sequence of discovery and termination commands against security services.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process being created with a file hash matching a known indicator blocking tool?
    context: Adversaries often use publicly available or known tools to disable security products or telemetry sources. Comparing file hashes of newly created processes against a curated threat intelligence list of such tools is a high-confidence method for detecting this specific evasion technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint workstations
      - Critical servers (e.g., Domain Controllers, file servers)
      - Log aggregation servers
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_events(event_id:1 OR event_id:4688)
          WHERE file_hash IN known_indicator_blocking_tool_hashes
          RETURN host, user, process_name, file_hash

  - question: Are rare but recurring processes being executed across multiple hosts, suggesting the deployment of a new, potentially malicious tool?
    context: Attackers may use custom or newly developed tools that are not yet present in threat intelligence feeds. Identifying file hashes with very low enterprise-wide prevalence (i.e., rare) that appear on more than one host in a short period can uncover the coordinated deployment of a previously unseen tool.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint workstations
      - Critical servers (e.g., Domain Controllers, file servers)
      - Log aggregation servers
    range: Last 90 days
    queries:
      - pseudocode: |
          CALCULATE prevalence of file_hashes from process_creation_events over 24h
          FILTER where unique_host_count > 1 AND prevalence < 0.5%
          RETURN file_hash, host_list, process_name

  - question: Can we use machine learning to identify suspicious processes that might be indicator blocking tools, even if their hash is unknown?
    context: Signature-based detections using file hashes can be bypassed by recompiling or modifying tools. A machine learning model can provide more resilient detection by scoring processes based on behavioral and metadata features (e.g., unsigned binary, parent process, user context), flagging suspicious activity even without a known signature.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint workstations
      - Critical servers (e.g., Domain Controllers, file servers)
      - Log aggregation servers
    range: Last 90 days
    queries:
      - pseudocode: |
          EXTRACT features (parent_process, user, file_properties) from process_creation_events
          APPLY classification_model to score process
          ALERT where score > high_probability_threshold

  - question: Are commands being executed that contain keywords or patterns associated with disabling event logs, firewall rules, or Event Tracing for Windows (ETW)?
    context: Adversaries often use built-in command-line utilities to directly manipulate and disable security controls. Searching for specific command-line strings and patterns (e.g., 'wevtutil.exe cl', 'Clear-EventLog', 'sc.exe stop Sysmon64') is a direct method for detecting these defense evasion attempts.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows PowerShell Event ID 4104
      - Endpoint workstations
      - Servers with local administrative privileges
      - PowerShell execution environments
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH command_line_logs OR powershell_script_blocks
          WHERE command_line MATCHES REGEX ('wevtutil.*cl', 'Clear-EventLog', 'Set-EtwTraceProvider', 'netsh.*block')
          RETURN host, user, command_line

  - question: Are legitimate system processes like powershell.exe or cmd.exe being executed with unusually long or complex (high entropy) command-line arguments?
    context: To evade simple keyword-based searches, attackers often obfuscate malicious commands passed to legitimate interpreters like PowerShell or Cmd. Baselining the normal length and character entropy of command-line arguments for these processes can help detect anomalies that indicate obfuscation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows PowerShell Event ID 4104
      - Endpoint workstations
      - Servers with local administrative privileges
      - PowerShell execution environments
    range: Last 90 days
    queries:
      - pseudocode: |
          BASELINE cmd_length_and_entropy per (user, process)
          SEARCH new command_line_executions
          ALERT where length or entropy > 99th_percentile_of_baseline

  - question: Can a natural language processing model differentiate between benign administrative commands and malicious defense evasion commands?
    context: The same command can be benign or malicious depending on context. A semantic model (like a fine-tuned transformer) can analyze the structure and arguments of a command to better understand its intent, distinguishing legitimate administrative actions from malicious attempts to disable defenses.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows PowerShell Event ID 4104
      - Endpoint workstations
      - Servers with local administrative privileges
      - PowerShell execution environments
    range: Last 90 days
    queries:
      - pseudocode: |
          INPUT command_line_string into semantic_classification_model
          ALERT where model_output_class is 'malicious_defense_evasion'
          RETURN host, user, command_line, confidence_score

  - question: Has a critical, high-fidelity defense evasion event occurred, such as clearing the security log or modifying the Sysmon configuration?
    context: Certain events, such as Windows Event ID 1102 (The audit log was cleared) and Sysmon Event ID 16 (Sysmon configuration change), are almost exclusively associated with malicious activity. These events are high-fidelity indicators of tampering and warrant immediate, high-priority investigation.
    answer_sources:
      - Sysmon Event ID 16
      - Windows Security Event ID 1102
      - Windows Firewall Event ID 4947
      - Windows Security Event ID 5152
      - All Windows endpoints and servers
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: |
          CREATE non-suppressible alert
          TRIGGER on (Windows Security Event ID 1102) OR (Sysmon Event ID 16)
          RETURN host, user, event_details

  - question: Has an anomalous firewall rule modification been made, such as one manually added by a non-administrator or one designed to block telemetry?
    context: While firewall rules are modified during normal operations (e.g., via Group Policy), malicious modifications often have distinct characteristics. Anomalies to look for include rules created outside of standard processes, rules targeting the IP addresses of SIEMs or log collectors, or rules created by non-administrative users.
    answer_sources:
      - Sysmon Event ID 16
      - Windows Security Event ID 1102
      - Windows Firewall Event ID 4947
      - Windows Security Event ID 5152
      - All Windows endpoints and servers
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH for firewall_rule_modification_events (Event ID 4947)
          ALERT where destination_ip IN (log_collector_ips) OR user NOT IN (admin_group)
          RETURN host, user, rule_details

  - question: Can we detect anomalous sequences of events on a host, such as a suspicious login followed by a log clearing event?
    context: The significance of an event can be amplified by its surrounding context. A sequence mining algorithm can learn normal patterns of activity on a host and identify anomalous sequences, such as a suspicious login, followed by log clearing (Event ID 1102), and a subsequent drop in telemetry, which strongly validates a tampering attempt.
    answer_sources:
      - Sysmon Event ID 16
      - Windows Security Event ID 1102
      - Windows Firewall Event ID 4947
      - Windows Security Event ID 5152
      - All Windows endpoints and servers
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: |
          MODEL event sequences per host using HMM or LSTM
          ALERT when a new sequence has a high anomaly score
          PRIORITIZE sequences like (login -> event_log_clear -> telemetry_drop)

  - question: Has a host that is active on the network suddenly stopped sending logs to the SIEM?
    context: A "silent host" is a critical indicator of potential compromise. By correlating a lack of log ingestion from a host with network flow data showing the host is still active, an analyst can distinguish between a benign shutdown and a deliberate attempt by an adversary to stop or block the logging agent.
    answer_sources:
      - Zeek conn.log
      - SIEM/Log Aggregator ingestion health logs
      - Network chokepoints
      - All log-generating endpoints and servers
    range: Last 90 days
    queries:
      - pseudocode: |
          FOR each host that stopped sending logs in the last 30 minutes
          QUERY network flow logs for the host's IP
          IF traffic is found, ALERT for 'Silent Host'

  - question: Has the log volume from a specific host or source dropped significantly below its normal, expected baseline?
    context: A sudden, sharp drop in the volume of logs from a host can be an early indicator of tampering, even if the logs haven't stopped completely. By modeling the expected log volume for each host and alerting on significant negative deviations, this technique can catch service degradation or partial blocking.
    answer_sources:
      - Zeek conn.log
      - SIEM/Log Aggregator ingestion health logs
      - Network chokepoints
      - All log-generating endpoints and servers
    range: Last 90 days
    queries:
      - pseudocode: |
          BASELINE hourly log volume per host using a time-series model
          ALERT when current volume is > 3 standard deviations below the expected mean
          RETURN host, log_source, expected_volume, actual_volume

  - question: Can an automated model detect unexpected drops in log ingestion rates while accounting for normal daily and weekly fluctuations?
    context: Simple log volume thresholds can be noisy due to natural seasonality (e.g., time of day, day of week). An unsupervised anomaly detection model can automatically learn these patterns and only alert on sudden drops in telemetry that are statistically inconsistent with the learned normal behavior for that specific time.
    answer_sources:
      - Zeek conn.log
      - SIEM/Log Aggregator ingestion health logs
      - Network chokepoints
      - All log-generating endpoints and servers
    range: Last 90 days
    queries:
      - pseudocode: |
          APPLY Isolation Forest or Seasonal-ESD model to log ingestion time-series data per host
          ALERT when an anomaly (sudden drop) is detected
          RETURN host, timestamp, anomaly_score

  - question: Has a user or process run a discovery command (like 'tasklist') immediately followed by a termination command (like 'taskkill') targeting a security service?
    context: The "discover-then-kill" pattern is a classic adversary behavior used to manually disable security agents. Creating a correlation rule that looks for a process discovery command followed within minutes by a termination command targeting a known security tool on the same host and session is a highly effective detection strategy.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint workstations
      - Servers with interactive user logins
      - Privileged Access Workstations (PAWs)
    range: Last 90 days
    queries:
      - pseudocode: |
          CORRELATE process_creation_events on (host, user_session)
          ALERT if (process_name IN discovery_tools) is followed within 5 min by (process_name IN termination_tools AND target_process IN security_agents)

  - question: Are statistically rare sequences of commands being executed, particularly a discovery command followed by a termination command?
    context: By analyzing sequences of commands as n-grams (e.g., pairs or triplets), we can establish a baseline of common command progressions. A sequence like ('tasklist', 'taskkill') is statistically very rare in benign administrative activity and can be flagged as a high-confidence indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint workstations
      - Servers with interactive user logins
      - Privileged Access Workstations (PAWs)
    range: Last 90 days
    queries:
      - pseudocode: |
          CALCULATE n-gram (n=2) frequency for command-line executions
          ALERT on statistically rare sequences, especially ('tasklist', 'taskkill') or ('sc query', 'sc stop')
          RETURN host, user, command_sequence

  - question: Can a deep learning model trained on normal user command sequences detect the anomalous 'discover-then-kill' pattern?
    context: Sequence-to-sequence models (e.g., LSTM autoencoders) can learn the 'grammar' of typical command-line activity within a user session. When a new sequence of commands deviates significantly from this learned grammar (i.e., has a high reconstruction error), it indicates an anomalous pattern, such as an adversary's 'discover-then-kill' behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint workstations
      - Servers with interactive user logins
      - Privileged Access Workstations (PAWs)
    range: Last 90 days
    queries:
      - pseudocode: |
          TRAIN LSTM autoencoder on process creation sequences per user session
          APPLY model to new sequences
          ALERT if reconstruction_error > threshold