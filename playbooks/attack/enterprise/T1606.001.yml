name: T1606.001: Forge Web Cookies
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: >-
  This playbook helps determine if an adversary has forged authentication material, such as web cookies, to gain unauthorized access to web resources. It provides investigative steps to detect this activity by analyzing various indicators, including sessions originating from malicious IP addresses or unusual geographic locations, the use of abnormal User-Agent strings, web sessions that lack a corresponding endpoint logon event, and anomalous post-authentication behavior like high-rate data access or enumeration of sensitive URLs.
type: technique
related:
  - 'TA0006: Credential Access'
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an authenticated web session originating from an IP address found on a threat intelligence blocklist?
    context: >-
      This question seeks to identify successful web sessions coming from infrastructure known to be malicious, such as command and control (C2) servers, anonymous proxies, or TOR exit nodes. An alert from this query is a high-confidence indicator that a valid session cookie has been compromised or forged and is being used by an adversary.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - Web Proxies
      - Public-facing Web Applications
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each authenticated_session IN http_logs:
            source_ip = session.source_ip
            IF source_ip IN threat_intel_blocklist:
              ALERT "Authenticated session from known malicious IP"
  - question: Is a user authenticating from an Autonomous System Number (ASN) that is historically rare for them?
    context: >-
      This question aims to detect credential access from unusual network locations, even if the source IP is not on a blocklist. By baselining the normal ASNs for each user, a login from a statistically rare ASN (e.g., one accounting for <1% of sessions) can indicate that the user's session has been hijacked or their cookie has been stolen and is being used from an attacker's infrastructure.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - Web Proxies
      - Public-facing Web Applications
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user:
            user_asn_baseline = GET_HISTORICAL_ASN_FREQUENCY(user, last 90 days)
          FOR each new_authenticated_session:
            session_asn = GET_ASN(session.source_ip)
            IF FREQUENCY(session_asn IN user_asn_baseline) < 1%:
              ALERT "Authenticated session from a rare ASN for this user"
  - question: Does a machine learning model classify the source IP of an authenticated session as malicious?
    context: >-
      This question leverages a machine learning model to provide a dynamic and nuanced assessment of an IP's reputation, going beyond static blocklists. The model considers features like ASN, country, and historical usage across the organization to classify IPs in real-time. An IP flagged as 'malicious' by the model suggests a high risk of compromise, warranting immediate investigation into the session.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - Web Proxies
      - Public-facing Web Applications
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_authenticated_session:
            ip_features = EXTRACT_FEATURES(session.source_ip)
            ip_reputation = IP_REPUTATION_MODEL.predict(ip_features)
            IF ip_reputation == 'malicious':
              ALERT "Authenticated session from an IP classified as malicious by ML model"
  - question: Is a user's authenticated web session originating from a location that is physically impossible to travel to since their last session?
    context: >-
      This question aims to detect 'impossible travel' scenarios. By calculating the required travel speed between the geolocations of consecutive user logins, speeds exceeding a realistic maximum (e.g., 1000 km/h) strongly indicate that at least one of the sessions is fraudulent, likely resulting from a forged or stolen cookie.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - VPN Concentrators
      - Public-facing Web Applications
      - Cloud Service Gateways
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_authenticated_session:
            current_location = GET_GEOLOCATION(session.source_ip)
            current_time = session.timestamp
            last_session = GET_LAST_SESSION(session.user)
            last_location = GET_GEOLOCATION(last_session.source_ip)
            last_time = last_session.timestamp
            speed = CALCULATE_SPEED(current_location, current_time, last_location, last_time)
            IF speed > 1000:
              ALERT "Impossible travel detected for user"
  - question: Is a user logging in from a geographic location that is both new to them and statistically rare for the organization?
    context: >-
      This question identifies logins from locations that are unusual for both the specific user and the organization as a whole. This statistical approach helps filter out benign new travel locations (e.g., a user visiting a popular conference city) and focuses on logins from truly anomalous places, which have a higher probability of being malicious.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - VPN Concentrators
      - Public-facing Web Applications
      - Cloud Service Gateways
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          org_location_rarity = GET_LOCATION_PERCENTILES_ACROSS_ORG()
          FOR each new_authenticated_session:
            user_top_locations = GET_USER_TOP_5_LOCATIONS(session.user)
            current_location = GET_GEOLOCATION(session.source_ip)
            IF current_location NOT IN user_top_locations AND org_location_rarity[current_location] < 5th_percentile:
              ALERT "User login from a location that is new to them and rare for the organization"
  - question: Does a machine learning model identify a user's transition between login locations as a low-probability, anomalous event?
    context: >-
      This question uses a sequence model, like a Markov Chain, to learn a user's typical movement patterns between locations. The model can then predict the probability of a new login location given the previous one. A transition with a very low probability suggests a break in the user's normal pattern, which could indicate a session hijack or cookie forgery.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - VPN Concentrators
      - Public-facing Web Applications
      - Cloud Service Gateways
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_authenticated_session:
            user_model = GET_USER_LOCATION_SEQUENCE_MODEL(session.user)
            last_location = GET_GEOLOCATION(GET_LAST_SESSION(session.user).source_ip)
            current_location = GET_GEOLOCATION(session.source_ip)
            transition_probability = user_model.predict_probability(from=last_location, to=current_location)
            IF transition_probability < 0.01:
              ALERT "Anomalous location transition detected by ML model"
  - question: Is an authenticated web session using a User-Agent string associated with known hacking tools or scanners?
    context: >-
      This question provides a high-confidence method for detecting malicious activity by matching the User-Agent string of a web request against a blocklist of tools commonly used by attackers (e.g., sqlmap, nmap, python-requests). A match strongly indicates that the request is not from a standard web browser and is likely part of an attack.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Public-facing Web Applications
      - Web Proxies
      - Internet Gateway
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each web_request IN http_logs:
            user_agent = web_request.user_agent
            IF user_agent MATCHES hacking_tool_blocklist:
              ALERT "Web request from User-Agent associated with a hacking tool"
  - question: Is a user's authenticated session using a User-Agent string that has never been seen for that user before?
    context: >-
      This question uses 'first-seen' logic to detect deviations in user behavior. Most users consistently use a small set of browsers and devices, resulting in a predictable set of User-Agent strings. A new, never-before-seen User-Agent for a particular user is anomalous and could indicate that their session cookie has been stolen and is being used on an attacker's machine.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Public-facing Web Applications
      - Web Proxies
      - Internet Gateway
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_authenticated_session:
            historical_user_agents = GET_HISTORICAL_USER_AGENTS(session.user, last 90 days)
            current_user_agent = session.user_agent
            IF current_user_agent NOT IN historical_user_agents:
              ALERT "First-seen User-Agent for this user"
  - question: Does a multi-variate anomaly detection model flag a user's session as anomalous based on a combination of features including the User-Agent string?
    context: >-
      This question uses a holistic approach to anomaly detection. Instead of looking at single indicators, a machine learning model analyzes a combination of session features (time of day, source ASN rarity, User-Agent rarity, etc.) to learn what a 'normal' session looks like. Sessions that deviate significantly from this learned norm are assigned a high anomaly score, indicating potential compromise.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Public-facing Web Applications
      - Web Proxies
      - Internet Gateway
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_authenticated_session:
            session_features = EXTRACT_FEATURES(session)
            anomaly_score = ANOMALY_DETECTION_MODEL.predict(session_features)
            IF anomaly_score > threshold:
              ALERT "Multi-variate session anomaly detected"
  - question: Did a user's authenticated web session from an external IP occur without a corresponding endpoint logon event within a preceding time window?
    context: >-
      This question seeks to identify web sessions that were not initiated through a normal, interactive logon on a corporate device. A legitimate remote user typically logs into their machine (generating a Windows logon event) before accessing web apps. The absence of this preceding logon event for an external web session strongly suggests the session was initiated using a stolen or forged cookie.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Authentication Servers (e.g., Active Directory Domain Controllers)
      - Endpoints
      - Public-facing Web Applications
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each authenticated_web_session from external_ip:
            username = session.user
            session_time = session.timestamp
            logon_event = FIND_WINDOWS_LOGON(user=username, type IN [2,3,10], time between session_time-30min and session_time)
            IF logon_event IS NULL:
              ALERT "Web session without a corresponding endpoint logon event"
  - question: Is the time delta between a user's endpoint logon and their subsequent web session statistically abnormal compared to their baseline behavior?
    context: >-
      This question establishes a behavioral baseline for each user regarding the typical time lag between logging into their endpoint and accessing a web application. A significant deviation from this baseline (e.g., a web session occurring much sooner or later than usual after a logon) can indicate an anomalous session initiation pattern that may be related to credential or cookie theft.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Authentication Servers (e.g., Active Directory Domain Controllers)
      - Endpoints
      - Public-facing Web Applications
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user:
            baseline_delta = CALCULATE_BASELINE_TIME_DELTA(user)
          FOR each authenticated_web_session:
            logon_event = FIND_PRECEDING_LOGON(session.user)
            current_delta = session.timestamp - logon_event.timestamp
            IF current_delta is > 3 STDEV from baseline_delta.mean:
              ALERT "Abnormal time delta between logon and web session"
  - question: Does a sequence mining model identify a user's web session as an anomalous starting point for an event sequence, lacking a preceding logon event?
    context: >-
      This question uses machine learning to understand valid sequences of user actions across different data sources. The model learns that a typical sequence starts with an event like a Windows Logon. When it observes a sequence starting directly with a web application access event, it flags this as a high-risk anomaly, as it breaks the learned pattern and suggests the session was initiated illegitimately.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Authentication Servers (e.g., Active Directory Domain Controllers)
      - Endpoints
      - Public-facing Web Applications
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_event_sequence for a user:
            is_valid_start = SEQUENCE_MINING_MODEL.validate_start(sequence)
            IF NOT is_valid_start AND sequence.first_event == 'web_access':
              ALERT "Anomalous event sequence start detected by ML model"
  - question: Did a user's authenticated session access a predefined sensitive or 'honeypot' URL?
    context: >-
      This question provides a high-fidelity alerting mechanism by monitoring access to specific, highly sensitive URLs that regular users should not access (e.g., administrative panels, data export functions, backup files). Any access to these 'honeypot' URLs is an immediate, high-severity red flag that an account or session has been compromised.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Public-facing Web Applications
      - File Servers
      - Database Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          honeypot_urls = ['/admin/config', '/api/export_all', '/_backup.zip']
          FOR each web_request IN http_logs:
            IF web_request.uri IN honeypot_urls:
              ALERT "Access to sensitive honeypot URL detected"
  - question: Did a user's authenticated session exceed their normal baseline for request rate or data downloaded?
    context: >-
      This question aims to detect anomalous post-authentication behavior such as rapid enumeration or large-scale data exfiltration. By establishing a baseline of normal activity (e.g., 99th percentile of requests per minute or data per session) for each user, any significant deviation from this baseline can be flagged, indicating that a compromised session is being used for malicious purposes.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Public-facing Web Applications
      - File Servers
      - Database Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user:
            request_rate_threshold = GET_BASELINE(user, 'request_rate_99th_percentile')
            data_volume_threshold = GET_BASELINE(user, 'data_volume_99th_percentile')
            current_rate = CALCULATE_REQUEST_RATE(user, last 5 mins)
            current_volume = CALCULATE_DATA_VOLUME(user, current_session)
            IF current_rate > request_rate_threshold OR current_volume > data_volume_threshold:
              ALERT "Anomalous request rate or data volume detected"
  - question: Does a sequence-aware machine learning model flag a user's navigation path within a web application as a low-probability, anomalous sequence?
    context: >-
      This question leverages a sophisticated machine learning model (like an RNN or LSTM) to learn the 'grammar' of how users typically navigate through a web application. The model can then predict, at each step, what the next likely action is. A request for a URL that has a very low probability of occurring at that point in the sequence is flagged as anomalous navigation, which could indicate an attacker exploring the application.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Public-facing Web Applications
      - File Servers
      - Database Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_web_request in a session:
            session_history = GET_PRECEDING_URLS_IN_SESSION(request)
            model = GET_NAVIGATION_MODEL(request.application)
            request_probability = model.predict_probability(request.uri, given=session_history)
            IF request_probability < threshold:
              ALERT "Anomalous user navigation sequence detected by ML model"