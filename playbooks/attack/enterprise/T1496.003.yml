name: "T1496.003: SMS Pumping"
id: "2f8b5f8a-c0b7-4b7e-9f3a-6d1c8e0b4a9f"
description: "This playbook helps determine if an adversary is causing financial or availability impact via SMS pumping. It focuses on identifying malicious web form submissions, abnormally high request frequencies from single IPs, execution of known SMS pumping tools, excessive outbound SMS requests, spikes in messaging costs correlated with high-risk destinations, anomalous geographic distributions of phone numbers, and impossible travel scenarios associated with SMS-generating requests."
type: "technique"
related:
  - "TA0040: Impact"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are SMS-generating web form submissions originating from IPs or User-Agents found in threat intelligence feeds?"
    context: "This question aims to identify known malicious actors by cross-referencing real-time web traffic and messaging logs against curated lists of fraudulent phone number prefixes, malicious botnet IPs, and suspicious User-Agents. A match provides a high-confidence signal of an attack."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Public-facing Web Servers hosting OTP/verification forms"
      - "API Gateway"
      - "Cloud tenant for Messaging Services"
      - "Threat Intelligence Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each web request or SMS event:
            IP = event.source_ip
            USER_AGENT = event.user_agent
            DEST_PHONE = event.destination_phone_number
          IF IP in threat_intel.botnet_ips OR USER_AGENT in threat_intel.malicious_user_agents OR DEST_PHONE.prefix in threat_intel.fraudulent_prefixes:
            ALERT (High Severity)
  - question: "Is any single source IP submitting an unusually high number of requests to SMS-generating web forms compared to a historical baseline?"
    context: "This question seeks to detect automated activity from bots that may not yet be on a known threat list. By establishing a normal request frequency baseline (e.g., the 99th percentile), it can flag source IPs that exceed this threshold, indicating a potential brute-force or SMS pumping attack."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Public-facing Web Servers hosting OTP/verification forms"
      - "API Gateway"
      - "Cloud tenant for Messaging Services"
      - "Threat Intelligence Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          BASELINE = 99th_percentile(requests_per_ip_per_5min) over last 30 days
          FOR each source IP:
            CURRENT_COUNT = count(requests) in last 5 minutes
          IF CURRENT_COUNT > BASELINE:
            ALERT (Potential Bot Activity)
  - question: "Can machine learning classify incoming OTP/form requests as high-risk bot activity based on multiple features?"
    context: "This question leverages a machine learning model to provide a more nuanced risk assessment than simple thresholding. By training a classifier on features like IP reputation, User-Agent commonality, time of day, and origin country, it can score each request in real-time and identify sophisticated bot activity that might evade simpler detection methods."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Public-facing Web Servers hosting OTP/verification forms"
      - "API Gateway"
      - "Cloud tenant for Messaging Services"
      - "Threat Intelligence Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each incoming request:
            FEATURES = extract_features(IP_reputation, User-Agent, time_of_day, country)
            RISK_SCORE = classification_model.predict(FEATURES)
          IF RISK_SCORE == 'high-risk bot':
            FLAG for investigation
  - question: "Are there requests to SMS-generating endpoints using User-Agent strings associated with common automation tools?"
    context: "This question looks for explicit evidence of scripting by searching web logs for User-Agent strings of tools like 'curl', 'python-requests', or 'HeadlessChrome'. Finding these targeting OTP endpoints, outside of legitimate and documented use cases, is a strong indicator of an automated attack."
    answer_sources:
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Public-facing Web Servers"
      - "Web Application Firewalls (WAFs)"
      - "Network Security Monitoring Sensors"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          AUTOMATION_AGENTS = ['curl', 'python-requests', 'HeadlessChrome']
          SEARCH web_logs where endpoint is SMS_generator
          FOR each request:
            IF request.user_agent in AUTOMATION_AGENTS AND request.source NOT in legitimate_testing_IPs:
              ALERT (Suspicious Automation Tool)
  - question: "Does the timing between consecutive requests from a single IP show an unnaturally low standard deviation, suggesting robotic consistency?"
    context: "This question aims to identify bots by analyzing the timing of their requests. Human users have natural, variable delays between actions. In contrast, a script often executes with near-perfect, consistent timing. A very low standard deviation in the time deltas between requests from a single IP is a tell-tale sign of automation."
    answer_sources:
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Public-facing Web Servers"
      - "Web Application Firewalls (WAFs)"
      - "Network Security Monitoring Sensors"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each source IP making requests to OTP_form in a 5_min_window:
            TIME_DELTAS = calculate_time_diffs(consecutive_requests)
            STD_DEV = standard_deviation(TIME_DELTAS)
          IF STD_DEV < 0.5 seconds:
            ALERT (Robotic Timing Detected)
  - question: "Can unsupervised machine learning group bot-like activity into distinct clusters, separating it from legitimate user traffic?"
    context: "This question applies clustering algorithms like DBSCAN to web log data to automatically discover groups of similar, suspicious activity without pre-existing signatures. By using features like source IP, User-Agent, and request timing, this method can identify new or evolving bot campaigns that would be missed by signature-based or simple statistical methods."
    answer_sources:
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Public-facing Web Servers"
      - "Web Application Firewalls (WAFs)"
      - "Network Security Monitoring Sensors"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FEATURES = extract_features(source_IP, User-Agent, request_timing) from web_logs
          CLUSTERS = dbscan_model.fit_predict(FEATURES)
          ANALYZE clusters identified as outliers or distinct from main user group
          FLAG anomalous clusters for investigation
  - question: "Is there evidence of known SMS pumping tools or scripts being executed on internal systems?"
    context: "This question focuses on detecting the internal execution of malicious scripts. By monitoring process creation events and PowerShell logs for specific command-line arguments, process names, or script hashes associated with known SMS pumping tools, an organization can catch an attacker who has already gained a foothold internally."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Internal application servers"
      - "Developer workstations with API access to messaging services"
      - "Endpoint Detection and Response (EDR) platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          KNOWN_TOOLS = ['smspump.py', 'send-sms-bulk', ...]
          SEARCH process_creation_logs (EID 4688) OR powershell_logs (EID 4104)
          FOR each event:
            IF event.command_line contains any string in KNOWN_TOOLS:
              ALERT (Known SMS Pumping Tool Executed)
  - question: "Are there rare or anomalous processes being run by service accounts or developers on hosts with access to messaging APIs?"
    context: "This question aims to identify suspicious activity by baselining normal behavior on critical internal systems. An attacker might use a generic or custom tool not on a known-bad list. By identifying processes that are rarely executed by a specific user or from a specific parent process, especially if that process makes network connections to SMS gateways, security teams can uncover novel threats."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Internal application servers"
      - "Developer workstations with API access to messaging services"
      - "Endpoint Detection and Response (EDR) platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          BASELINE normal process execution for users on SMS-API-accessible servers
          FOR each new process creation event:
            RARITY_SCORE = calculate_rarity(process_name, user, parent_process)
          IF RARITY_SCORE is high AND process makes network connection to SMS_Gateway:
            ALERT (Anomalous Process Activity)
  - question: "Is a machine learning model detecting abnormal command sequences involving network utilities on hosts with access to SMS gateways?"
    context: "This question uses a more advanced method to detect malicious internal activity by modeling entire sequences of commands. A sequence-based model can learn the normal workflow for a developer or service account. A significant deviation, such as an unusual invocation of 'curl.exe' or 'Invoke-WebRequest' targeting an SMS endpoint, would be flagged as an anomaly, even if the individual commands are not malicious on their own."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Internal application servers"
      - "Developer workstations with API access to messaging services"
      - "Endpoint Detection and Response (EDR) platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each user session on critical server:
            COMMAND_SEQUENCE = get_command_history()
            RECONSTRUCTION_ERROR = sequence_model.predict(COMMAND_SEQUENCE)
          IF RECONSTRUCTION_ERROR is high AND sequence involves network utility targeting SMS_Gateway:
            ALERT (Anomalous Command Sequence)
  - question: "Has any single API key or web form generated an unusually high number of SMS requests in a short time window?"
    context: "This question aims to catch abuse of a specific credential or endpoint using a simple, fixed threshold. While less sophisticated than statistical baselining, a hard limit (e.g., >100 SMS requests in 1 minute) can serve as an effective tripwire for egregious abuse that far exceeds any legitimate use case."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Web Server Access Logs"
      - "Zeek conn.log"
      - "API Gateway"
      - "Cloud Messaging Service Console"
      - "Network Egress Points"
      - "SIEM Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          THRESHOLD = 100
          FOR each API_key or web_form_endpoint:
            REQUEST_COUNT = count(SMS_requests) in last 1 minute
          IF REQUEST_COUNT > THRESHOLD:
            ALERT (High Volume SMS Burst)
  - question: "Is the rate of SMS requests from any source significantly exceeding its own historical baseline?"
    context: "This question provides a more intelligent, adaptive approach to volume-based detection. By calculating a moving average and standard deviation for each API key or endpoint, it creates a tailored baseline of normal activity. An alert is triggered only when a source's activity significantly deviates from its own established pattern, reducing false positives from naturally busy sources while catching anomalies in quieter ones."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Web Server Access Logs"
      - "Zeek conn.log"
      - "API Gateway"
      - "Cloud Messaging Service Console"
      - "Network Egress Points"
      - "SIEM Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each API_key and web_form:
            BASELINE = moving_avg(requests_per_5min) over last 30 days
            STD_DEV = standard_deviation(requests_per_5min) over last 30 days
            CURRENT_COUNT = count(requests) in last 5 minutes
          IF CURRENT_COUNT > (BASELINE + 3 * STD_DEV):
            ALERT (Statistical Volume Anomaly)
  - question: "Is a time-series model forecasting a significant, unexpected spike in SMS volume from any single source?"
    context: "This question leverages a predictive model to detect anomalies. A time-series model like ARIMA learns the typical patterns, including seasonality and trends, for each SMS source. It then forecasts the expected volume for the next time period. If the actual volume dramatically exceeds the forecasted upper confidence bound, it signals an anomaly that the model could not explain based on historical data, indicating a likely attack."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Web Server Access Logs"
      - "Zeek conn.log"
      - "API Gateway"
      - "Cloud Messaging Service Console"
      - "Network Egress Points"
      - "SIEM Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each SMS source (API_key, form):
            FORECAST, UPPER_BOUND = arima_model.predict_next_interval(historical_data)
            ACTUAL_VOLUME = get_current_volume()
          IF ACTUAL_VOLUME > UPPER_BOUND:
            ALERT (Time-Series Anomaly Detected)
  - question: "Is a spike in SMS costs correlated with messages being sent to high-risk or non-business-relevant countries?"
    context: "This question directly links financial impact (cost alerts) to suspicious activity (geographic destinations). An alert for high SMS costs becomes much more actionable when it can be immediately correlated with logs showing a high volume of messages sent to phone prefixes on a blocklist of high-fraud or irrelevant countries."
    answer_sources:
      - "Cloud Provider Billing and Cost Management Logs"
      - "Cloud Messaging Service Logs"
      - "Cloud Billing Console"
      - "Financial Reporting Systems"
      - "Cloud Messaging Service Console"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          IF cloud_billing.alert for SMS_cost_overrun in last 24 hours:
            DESTINATIONS = get_destination_countries from SMS_logs in same 24h period
          IF any DESTINATION in high_risk_country_blocklist:
            ALERT (Cost Spike Correlated with High-Risk Geo)
  - question: "Following a daily SMS cost spike, is the distribution of destination countries abnormally focused on one or two unusual locations?"
    context: "This question uses statistics to find the 'smoking gun' after a cost anomaly. If a daily cost alert is triggered, this analytic automatically analyzes the geographic distribution of that day's messages. A legitimate traffic increase would likely show a diverse geographic spread, while a fraud attack often concentrates on a few high-cost prefixes. A low-entropy, skewed distribution is a strong indicator of fraud."
    answer_sources:
      - "Cloud Provider Billing and Cost Management Logs"
      - "Cloud Messaging Service Logs"
      - "Cloud Billing Console"
      - "Financial Reporting Systems"
      - "Cloud Messaging Service Console"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          IF daily_sms_cost > 95th_percentile(last 90 days):
            DISTRIBUTION = frequency_distribution(destination_country_codes) for that day
          IF DISTRIBUTION is heavily skewed to unusual countries:
            ALERT (Cost Spike Correlated with Geographic Concentration)
  - question: "Is a machine learning model detecting that SMS costs are disproportionately high for the given message volume and destination mix?"
    context: "This question uses a sophisticated model to find subtle fraud. Attackers may try to 'blend in' by using a mix of destinations. A multivariate model can learn the complex relationship between cost, volume, and geography. It can then flag periods where the cost is anomalously high, even if volume and destinations seem plausible in isolation, suggesting a shift to more expensive premium-rate numbers within those geos."
    answer_sources:
      - "Cloud Provider Billing and Cost Management Logs"
      - "Cloud Messaging Service Logs"
      - "Cloud Billing Console"
      - "Financial Reporting Systems"
      - "Cloud Messaging Service Console"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL = train_model(cost ~ volume + geo_distribution)
          FOR each time period:
            ANOMALY_SCORE = MODEL.predict(current_cost, current_volume, current_geo_mix)
          IF ANOMALY_SCORE is high:
            ALERT (Disproportionate Cost Anomaly)
  - question: "Are SMS messages being sent to countries outside of an explicit business-approved allowlist?"
    context: "This is a straightforward and highly effective control. By maintaining an explicit allowlist of country codes where the business operates, any SMS message sent to a destination outside this list is immediately flagged as suspicious. This provides a clear, high-confidence signal of either a misconfiguration or malicious activity."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Cloud Messaging Service Console"
      - "SIEM Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          ALLOWLIST = [list of approved country codes]
          FOR each outbound SMS event:
            DEST_COUNTRY = get_country_code(event.destination_phone)
          IF DEST_COUNTRY not in ALLOWLIST:
            ALERT (SMS to Unapproved Country)
  - question: "Has the diversity of destination countries for SMS messages dropped sharply, indicating a focus on a few specific countries?"
    context: "This question uses information theory to detect an attack signature. Normal business traffic usually goes to a relatively diverse set of countries, resulting in high entropy. An SMS pumping attack often focuses traffic on a small number of high-cost countries, causing a sharp drop in entropy. Monitoring for a significant drop from the baseline entropy level can detect this shift in geographic focus."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Cloud Messaging Service Console"
      - "SIEM Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          BASELINE_ENTROPY, STD_DEV = calculate_baseline(shannon_entropy(country_codes)) over 1h windows
          CURRENT_ENTROPY = shannon_entropy(country_codes) in last 1 hour
          IF CURRENT_ENTROPY < (BASELINE_ENTROPY - 2 * STD_DEV):
            ALERT (Geographic Concentration Anomaly)
  - question: "Is machine learning identifying a new, distinct cluster of SMS destinations centered on a high-risk region?"
    context: "This question uses unsupervised learning to discover new attack patterns. A clustering algorithm can be applied to historical SMS destination data to identify normal geographic patterns. When a new batch of messages forms a new, separate cluster—especially one located in a region known for toll fraud—it can be flagged as a potential new attack campaign that doesn't match previous patterns."
    answer_sources:
      - "Cloud Messaging Service Logs"
      - "Cloud Messaging Service Console"
      - "SIEM Platform"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL = train_clustering_model(historical_sms_geolocations)
          NEW_CLUSTER = MODEL.predict(latest_batch_of_sms_geolocations)
          IF NEW_CLUSTER is distinct from known_good_clusters AND centered in high_risk_region:
            ALERT (Anomalous Geographic Cluster Detected)
  - question: "Has a user session associated with SMS generation appeared to switch countries within an impossibly short time frame?"
    context: "This question seeks to identify session hijacking or proxy abuse through simple 'impossible travel' detection. If a request for a given session token comes from one country, and a subsequent request within a short window (e.g., 10 minutes) comes from a different country, it's a low-fidelity but useful signal that the session may be compromised or routed through a distributed botnet."
    answer_sources:
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Windows Event ID 4624"
      - "Public-facing Web Servers"
      - "Authentication Servers"
      - "Geolocation Enrichment Service"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each user session:
            PREVIOUS_COUNTRY = get_country(request[N-1].source_ip)
            CURRENT_COUNTRY = get_country(request[N].source_ip)
            TIME_DELTA = request[N].timestamp - request[N-1].timestamp
          IF CURRENT_COUNTRY != PREVIOUS_COUNTRY AND TIME_DELTA < 10 minutes:
            ALERT (Anomalous Country Switch)
  - question: "Has a user session generated requests from multiple IPs where the travel speed required to move between them is physically impossible?"
    context: "This question provides a higher-fidelity version of 'impossible travel' detection. For each user session, it calculates the physical distance and time between consecutive requests from different geolocated IPs. If the implied speed exceeds that of a commercial aircraft (e.g., 800 km/h), it's a strong indicator that the session is being used by a distributed, automated actor."
    answer_sources:
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Windows Event ID 4624"
      - "Public-facing Web Servers"
      - "Authentication Servers"
      - "Geolocation Enrichment Service"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each user session with requests from multiple IPs:
            DISTANCE = great_circle_distance(ip1.geo, ip2.geo)
            TIME_DELTA = ip2.timestamp - ip1.timestamp
            SPEED = DISTANCE / TIME_DELTA
          IF SPEED > 800 km/h:
            ALERT (Impossible Travel Detected)
  - question: "Is a machine learning model detecting anomalous mobility patterns for user sessions involved in SMS generation?"
    context: "This question uses a sophisticated sequence-based model to learn what 'normal' user movement looks like, even within a single geographic area. An autoencoder, for example, can be trained on sequences of timestamps and IP geolocations. It can then flag sessions that have a high reconstruction error, indicating a pattern of movement (e.g., rapid, erratic IP changes) that is unlike legitimate user behavior."
    answer_sources:
      - "Zeek http.log"
      - "Web Server Access Logs"
      - "Windows Event ID 4624"
      - "Public-facing Web Servers"
      - "Authentication Servers"
      - "Geolocation Enrichment Service"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL = train_lstm_autoencoder(sequences_of_session_geolocations)
          FOR each user session:
            SEQUENCE = get_geolocation_sequence(session)
            RECONSTRUCTION_ERROR = MODEL.predict(SEQUENCE)
          IF RECONSTRUCTION_ERROR is high:
            ALERT (Anomalous Session Mobility Pattern)