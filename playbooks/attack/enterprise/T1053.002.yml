name: T1053.002: At
id: 0a7b8c9d-1e2f-4a5b-9c8d-7e6f5a4b3c2d
description: "This playbook provides an investigative framework for detecting adversaries using the 'at' utility for scheduled task execution, a technique identified as T1053.002 in the MITRE ATT&CK framework. Adversaries may leverage the 'at' command or related WMI classes to schedule malicious code execution for various purposes, including initial access, persistence, and privilege escalation. This playbook focuses on analyzing process creation logs, task creation events, network connection data, and WMI activity to uncover suspicious scheduling behavior. Key investigative paths include correlating executed binaries and network connections with threat intelligence, identifying the use of the deprecated at.exe utility, detecting anomalous parent-child process relationships originating from the task scheduler, flagging tasks that execute from non-standard directories, uncovering persistence mechanisms through suspicious triggers (e.g., logon, startup), and identifying privilege escalation attempts where standard users create tasks that run with SYSTEM privileges."
type: technique
related:
  - TA0002: Execution
  - TA0003: Persistence
  - TA0004: Privilege-Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there process or task creation events containing observables (hashes, domains, IPs) that match our threat intelligence?
    context: This question aims to find direct evidence of malicious activity. When a scheduled task executes a process or contains command-line arguments with indicators of compromise (IOCs) from a known threat feed, it's a strong signal that an adversary is using a known malicious tool or connecting to known malicious infrastructure. A match warrants immediate investigation.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - On: Domain Controllers, Critical Application Servers, Standard User Workstations, Network Egress Points
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs OR task_creation_logs | EXTRACT file_hash, domain, ip FROM command_line | JOIN with threat_intel_feed ON (file_hash OR domain OR ip) | ALERT if match_found
  - question: Are processes spawned by scheduled tasks making network connections to rare or unique IP addresses?
    context: Adversaries often use novel or short-lived infrastructure for command and control (C2) or data exfiltration. Legitimate software updates and communications typically go to common, well-known servers. By identifying destination IPs that are rarely contacted by other systems in the enterprise, we can uncover potentially malicious C2 channels associated with a scheduled task.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - On: Domain Controllers, Critical Application Servers, Standard User Workstations, Network Egress Points
    range: Last 30 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | JOIN with network_logs ON (source_ip, timestamp) | CALCULATE prevalence(destination_ip) over 30d | ALERT if prevalence < 1st_percentile
  - question: Are scheduled tasks executing commands with characteristics (e.g., high entropy, obfuscation) indicative of malicious behavior?
    context: Malicious command-line strings are often obfuscated, unusually long, or contain encoded scripts to evade simple signature-based detection. By applying a machine learning model to analyze features like character randomness (entropy) and length, we can score commands for their likelihood of being malicious, even without a known signature. A high score for a command run by a scheduled task suggests an attempt at defense evasion.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - On: Domain Controllers, Critical Application Servers, Standard User Workstations, Network Egress Points
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | EXTRACT features(command_line) | SCORE with logistic_regression_model | ALERT if score > 0.8
  - question: Is the deprecated 'at.exe' utility being executed on any systems?
    context: The 'at.exe' utility is a legacy component that has been replaced by 'schtasks.exe' in modern Windows versions. Its execution is highly anomalous and a classic indicator of an adversary using older, well-documented techniques that may bypass modern security controls focused on newer tools. Any execution should be treated as suspicious and investigated immediately.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5861
      - On: Domain Controllers, Tier 0/1 Servers, Standard User Workstations
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs | WHERE process_path ENDS_WITH '\at.exe' | ALERT on any result
  - question: Is the Task Scheduler service spawning rare or never-before-seen script interpreters or commands?
    context: While the Task Scheduler legitimately runs scripts, most organizations have a predictable set of administrative and software-related tasks. An adversary introducing a new malicious script will create a new parent-child-commandline relationship that has never been seen before or is extremely rare. Baselining normal activity and alerting on these statistical outliers is an effective way to detect novel malicious scheduled tasks.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5861
      - On: Domain Controllers, Tier 0/1 Servers, Standard User Workstations
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler_svchost AND child_is_script_interpreter | CALCULATE frequency(parent, child, command_line) | ALERT if frequency is new OR < 1st_percentile
  - question: Are there anomalous WMI events related to task scheduling that deviate from normal patterns?
    context: Adversaries may use WMI to create or trigger scheduled tasks to be less "noisy" than using command-line tools. Legitimate WMI activity for task scheduling tends to follow predictable patterns. By using an anomaly detection model like Isolation Forest, we can identify unusual WMI events (e.g., a strange process using WMI to schedule a task) that don't fit the established baseline, indicating potential misuse.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Microsoft-Windows-WMI-Activity/Operational Event ID 5861
      - On: Domain Controllers, Tier 0/1 Servers, Standard User Workstations
    range: Last 90 days
    queries:
      - pseudocode: SEARCH wmi_activity_logs | EXTRACT features(client_pid, user, query_text) | SCORE with isolation_forest_model | ALERT on anomalous scores
  - question: Is the Task Scheduler executing any processes that are not on an approved allow-list?
    context: In a mature security environment, it's possible to build an allow-list of executables that are expected to be run by the Task Scheduler. This query provides a high-fidelity method for detecting unauthorized or malicious software being executed via a scheduled task, as any deviation from the allow-list is inherently suspicious.
    answer_sources:
      - Windows Event ID 4688
      - On: All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | CHECK if child_process_name IN known_good_executables_list | ALERT if NOT IN list
  - question: Are any scheduled tasks executing with command-line arguments that are statistically rare across the enterprise?
    context: Similar to baselining parent-child relationships, analyzing the prevalence of command-line strings themselves can reveal outliers. Legitimate tasks often use standardized, recurring command lines. An adversary's custom script or command will likely be unique or very rare. Flagging these low-frequency command lines helps focus investigative efforts on the most unusual activity.
    answer_sources:
      - Windows Event ID 4688
      - On: All Windows Endpoints and Servers
    range: Last 30 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | CALCULATE prevalence(command_line) over 30d | ALERT if prevalence < 1st_percentile
  - question: Can we identify clusters of anomalous scheduled task executions that differ from common behavior?
    context: Unsupervised machine learning, such as clustering, can group similar activities together without pre-existing labels. Normal, widespread administrative tasks will form large, dense clusters. Malicious or one-off tasks will form small, isolated clusters or be flagged as noise. This approach helps discover previously unknown threats by identifying activity that "doesn't belong."
    answer_sources:
      - Windows Event ID 4688
      - On: All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | EXTRACT features(process_path, entropy(command_line)) | APPLY DBSCAN clustering | INVESTIGATE small or outlier clusters
  - question: Are scheduled tasks executing binaries from user-writable or non-standard directories?
    context: Legitimate scheduled tasks typically execute binaries from protected system directories like C:\Windows\System32 or application directories like C:\Program Files. Adversaries often drop their payloads into user-writable directories (%APPDATA%, %TEMP%, C:\Users\Public) to bypass permissions issues. Alerting on executions from these locations is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: Standard User Workstations, Multi-user Servers (e.g., Citrix, RDS)
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs OR process_creation_logs | WHERE executable_path MATCHES ('\Users\', '\Temp\', '\ProgramData\') | ALERT on any match
  - question: Are scheduled tasks running executables from statistically rare directory paths?
    context: This is a statistical approach to finding non-standard execution locations. Instead of relying on a fixed list of suspicious directories, this method baselines all execution directories used by scheduled tasks across the enterprise. A binary running from a directory that is rarely or never used for scheduled tasks is a strong anomaly that could indicate an adversary's attempt to hide their tools.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: Standard User Workstations, Multi-user Servers (e.g., Citrix, RDS)
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | EXTRACT parent_directory(executable_path) | CALCULATE prevalence(parent_directory) over 90d | ALERT if prevalence < 5th_percentile
  - question: Do the file paths of executables run by scheduled tasks have characteristics of malicious paths?
    context: Malicious file paths often have distinct features, such as being very deep, containing random-looking directory names, or using unusual file extensions. A machine learning classifier can be trained to recognize these patterns and assign a risk score to any given path. This allows for the detection of suspicious execution locations that might not be caught by simple directory name matching.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: Standard User Workstations, Multi-user Servers (e.g., Citrix, RDS)
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs OR process_creation_logs | EXTRACT features(executable_path) | SCORE with Naive_Bayes_path_model | ALERT if risk_score is high
  - question: Are persistently scheduled tasks making network connections to known malicious IPs?
    context: Adversaries use persistent scheduled tasks (e.g., tasks that run at logon or startup) to maintain access to a compromised system. A key indicator of this is when the process executed by the persistent task communicates with known C2 infrastructure. This query connects the persistence mechanism (the task) with the malicious action (the C2 connection) and provides high-confidence alerts.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - On: All Windows Endpoints and Servers, Network Egress Points, DNS Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs WHERE trigger_is_persistent | CORRELATE with process_creation_logs | CORRELATE with network_logs | JOIN with threat_intel_feed ON destination_ip | ALERT on match
  - question: Are persistent tasks associated with DNS queries that appear random, suggesting the use of a Domain Generation Algorithm (DGA)?
    context: Domain Generation Algorithms (DGAs) are used by malware to periodically generate a large number of domain names for C2, making blocklisting ineffective. These algorithmically generated domains appear random and have high character entropy. Monitoring DNS queries from processes run by persistent tasks for high entropy is a classic method for detecting DGA-based C2 channels.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - On: All Windows Endpoints and Servers, Network Egress Points, DNS Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE task_is_persistent | CORRELATE with dns_logs | CALCULATE entropy(dns_query_name) over 5_min_window | ALERT if entropy > 3.5
  - question: Do network connections from persistent tasks exhibit periodic, 'heartbeat' patterns typical of C2 beaconing?
    context: Command and control malware often communicates with its server on a regular, timed interval (a "beacon" or "heartbeat"). This creates a highly predictable pattern in network traffic. Time-series analysis models can detect this periodicity, even if the destination IP is unknown or changes frequently, providing a way to find C2 activity based on its behavior rather than its signature.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - On: All Windows Endpoints and Servers, Network Egress Points, DNS Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH network_logs FROM process_run_by_persistent_task | APPLY time_series_analysis (ARIMA) to connection_counts | ALERT on detected periodic patterns
  - question: Are there new or updated scheduled tasks configured for high-frequency execution or persistence that are not on an approved allow-list?
    context: Adversaries favor triggers like system startup, user logon, or frequent repetition (e.g., every few minutes) to ensure their malware runs reliably and often. While legitimate software also uses these triggers, they can be baselined or added to an allow-list. This query focuses on newly created tasks with these high-risk triggers that are not part of known, legitimate activity.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4702
      - On: Domain Controllers, All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs OR task_update_logs | WHERE (trigger IS logon OR trigger IS startup OR repeat_interval < 15_min) AND task_name NOT IN allow_list | ALERT on match
  - question: Are there newly created tasks with statistically rare combinations of triggers and user contexts?
    context: This query seeks to find anomalous persistence mechanisms by looking at the combination of *who* created the task and *how* it's configured to run. For example, a standard user creating a task that runs at every system startup is highly unusual. By baselining common combinations and alerting on rare ones, we can detect suspicious configurations that might indicate an adversary setting up persistence.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4702
      - On: Domain Controllers, All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs | CALCULATE frequency(trigger_type, user_context) | ALERT if frequency < 5
  - question: Can we detect anomalous task configurations that combine legitimate-looking properties in an unusual way?
    context: Sophisticated adversaries may try to blend in by creating persistent tasks that use legitimate-looking properties (e.g., a common trigger, a plausible author). However, the *combination* of these properties might be unique. A One-Class SVM model can be trained on the multi-dimensional profile of all legitimate tasks and will then flag any new task that doesn't conform to that learned profile, even if each individual attribute seems normal.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4702
      - On: Domain Controllers, All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs | EXTRACT features(trigger, author, path) | SCORE with one_class_svm_model | ALERT on anomalous scores
  - question: Are there new scheduled tasks that have persisted for an unusually long time and are not on an allow-list?
    context: Many legitimate tasks are transient (e.g., for a software installation) and are deleted after a short period. Adversary persistence tasks, by definition, are designed to last. This query identifies tasks that are created but never deleted (or not deleted within a long timeframe), filtering out known-good persistent tasks to focus on potentially malicious ones.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4699
      - On: Configuration Management Database (CMDB), All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs | LEFT_JOIN task_deletion_logs ON task_name, host | WHERE deletion_event IS NULL AND creation_time > 30d_ago AND task_name NOT IN allow_list | ALERT on match
  - question: Are there new tasks with a statistically very long or indefinite lifespan compared to normal tasks?
    context: This is a statistical approach to finding long-lived tasks. By analyzing the typical lifespan of all scheduled tasks in the environment, we can identify what constitutes an "abnormally long" time. New tasks that are configured to last indefinitely or are observed to persist far longer than the norm are candidates for being malicious persistence mechanisms.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4699
      - On: Configuration Management Database (CMDB), All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: CALCULATE lifespan distribution for all tasks | FOR new_tasks, CALCULATE lifespan | ALERT if lifespan > 99th_percentile AND source IS NOT known_installer
  - question: Do any persistent tasks have names or descriptions that are nonsensical, obfuscated, or unclassifiable?
    context: Adversaries are often lazy or careless when naming their malicious tasks, using random strings or generic names like "Update". An NLP model can be trained to recognize the patterns and keywords in legitimate task names (e.g., "Adobe Updater," "System Cleanup"). Tasks whose names and descriptions don't fit these learned categories and are classified as 'Unknown' are highly suspicious and warrant investigation.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4699
      - On: Configuration Management Database (CMDB), All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs WHERE task_is_persistent | APPLY NLP model to task_name, task_description | ALERT if classification IS 'Unknown'
  - question: Are scheduled tasks executing files that are known privilege escalation or credential theft tools?
    context: This is a high-confidence detection for privilege escalation attempts. If a scheduled task executes a binary whose hash matches a known tool like Mimikatz or a Potato exploit variant, it's a clear sign that an adversary is attempting to escalate their privileges on the system.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: All Windows Endpoints and Servers, especially Domain Controllers and Tier 0/1 Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | HASH process_executable | JOIN with threat_intel_feed_hacking_tools ON file_hash | ALERT on match
  - question: Are scheduled tasks executing binaries that are rare or unique within the environment?
    context: Legitimate software executed by scheduled tasks is usually present on many machines. Hacking tools and custom exploits, however, are often used surgically on a small number of targets. By identifying executables run by tasks that are present on only one or a few machines, we can find these non-widespread, potentially malicious tools.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: All Windows Endpoints and Servers, especially Domain Controllers and Tier 0/1 Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler | CALCULATE prevalence(file_hash) across all hosts | ALERT if prevalence < 5 hosts
  - question: Do newly seen binaries executed by scheduled tasks have features characteristic of malicious PE files?
    context: Even if a file hash is unknown, the structure of the file itself can reveal its intent. Malicious binaries often have packed sections (high entropy), suspicious imported functions, or a lack of standard resources. A machine learning model can analyze these Portable Executable (PE) file features to classify a new binary as malicious, providing a way to detect zero-day or custom-compiled hacking tools.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: All Windows Endpoints and Servers, especially Domain Controllers and Tier 0/1 Servers
    range: Last 90 days
    queries:
      - pseudocode: ON new_file_execution_by_scheduler: | EXTRACT PE_features(file) | SCORE with PE_malware_model | ALERT if risk_score is high
  - question: Are privileged (SYSTEM) scheduled tasks executing commands commonly used for privilege escalation?
    context: An adversary who has gained the ability to run a task as SYSTEM will use that privilege to further entrench themselves. Common actions include adding a new administrative user, adding an existing user to the local administrators group, or creating a new malicious service. This query looks for these specific, high-risk commands being run by a SYSTEM-level task, which is a direct indicator of a privilege escalation objective.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: Domain Controllers, Member Servers, Administrator Workstations
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler AND user IS SYSTEM | WHERE command_line MATCHES ('net user .* /add', 'net localgroup .* /add') | ALERT on match
  - question: Are privileged scheduled tasks executing command sequences that are statistically unusual compared to normal administrative activity?
    context: While adversaries use common commands like `net user`, they may use them with unusual combinations of arguments. N-gram analysis can model the typical sequences of arguments and flags used in legitimate commands. By flagging sequences that are statistically improbable, this technique can detect the misuse of legitimate tools for malicious purposes, even if the individual commands themselves are common.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: Domain Controllers, Member Servers, Administrator Workstations
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE parent_is_scheduler AND user IS SYSTEM | APPLY n-gram analysis to command_line | ALERT on statistically improbable sequences
  - question: Does a privileged command executed by a task deviate from the learned sequence of typical administrative commands on a host?
    context: System administration on a specific server often follows a predictable workflow or sequence of commands. A sequence-based model like an LSTM can learn these temporal patterns. When an adversary executes a privileged command via a scheduled task, it often occurs out of context and breaks the learned sequence of normal operations. This deviation from the expected workflow is a strong signal of an anomaly.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 4688
      - On: Domain Controllers, Member Servers, Administrator Workstations
    range: Last 90 days
    queries:
      - pseudocode: FOR each sensitive_host: | SEARCH process_creation_logs WHERE user IS SYSTEM | FEED command_line_sequence to LSTM_model | ALERT if model predicts high anomaly_score
  - question: Are any standard, non-administrative users creating scheduled tasks configured to run with SYSTEM privileges?
    context: This is a classic privilege escalation pattern. A standard user should not have the ability to create a task that runs as the highly privileged SYSTEM account. If such an event occurs, it almost certainly means the standard user account is compromised and the adversary is exploiting a vulnerability or misconfiguration (like SeImpersonatePrivilege) to create a high-privilege task. This is a critical alert.
    answer_sources:
      - Windows Event ID 4698
      - On: All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs | WHERE creator_is_non_admin AND run_as_user IS SYSTEM | ALERT on any match
  - question: Are there any users who are creating a statistically abnormal number of privileged tasks compared to their peers?
    context: While some administrators may legitimately create privileged tasks, a user who suddenly starts creating many of them, or a standard user who creates any, is an anomaly. By calculating a ratio for each user and comparing it to the organizational norm, we can identify outlier accounts. This could indicate a compromised account being used for privilege escalation.
    answer_sources:
      - Windows Event ID 4698
      - On: All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: FOR each_user: CALCULATE ratio = (privileged_tasks_created / total_tasks_created) | CALCULATE mean and std_dev of ratio for all users | ALERT if user_ratio > (mean + 3 * std_dev)
  - question: Are there anomalous task creation events based on a combination of factors like the creator, the 'run-as' user, the host, and the time?
    context: A privilege escalation attempt might involve a combination of factors that are not individually suspicious but are anomalous together. For example, a non-IT user creating a SYSTEM-level task on a domain controller in the middle of the night. An Isolation Forest model can analyze multiple features simultaneously to find these unusual combinations that would be missed by single-variate rules, pointing to potential exploitation.
    answer_sources:
      - Windows Event ID 4698
      - On: All Windows Endpoints and Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH task_creation_logs | EXTRACT features(creator_privs, run_as_privs, host, time_of_day) | SCORE with isolation_forest_model | ALERT on anomalous scores