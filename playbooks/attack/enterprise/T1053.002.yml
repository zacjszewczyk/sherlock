name: T1053.002: At
id: f8a9b7c6-d5e4-4f32-1a0b-9c8d7e6f5a4b
description: This playbook focuses on detecting adversaries using the 'at' utility or other scheduled task methods for execution, persistence, and privilege escalation (MITRE ATT&CK T1053.002). It provides investigative steps to identify malicious scheduling activity by analyzing process creation events, command-line arguments, WMI activity, and task configurations. Key indicators include tasks executing binaries from non-standard locations, processes matching threat intelligence feeds, the use of the deprecated 'at.exe' binary, tasks configured with persistence triggers like logon or startup, and tasks created by standard users but configured to run with SYSTEM privileges. The goal is to uncover scheduled tasks used to run malicious code, maintain a foothold, or elevate privileges on a system.
type: technique
related:
- TA0002: Execution
- TA0003: Persistence
- TA0004: Privilege-Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are scheduled tasks executing processes whose command-line arguments contain observables (hashes, domains, IPs) that match our threat intelligence blocklist?
  context: Adversaries often use scheduled tasks to execute malware or scripts that communicate with their infrastructure. By extracting indicators like file hashes, domain names, and IP addresses from the command lines of processes spawned by scheduled tasks and comparing them against known-bad intelligence, we can quickly identify confirmed malicious activity. A match provides a high-confidence signal that a compromised tool is being executed on the host.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Relevant on: Domain Controllers, Critical Application Servers, Standard User Workstations, Network Egress Points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task creation events (4698) OR process creation events (4688)
      EXTRACT file_hash, domain, ip FROM command_line
      LOOKUP against threat_intelligence_feed WHERE observable = file_hash OR observable = domain OR observable = ip
      IF match, ALERT
- question: Are processes spawned by scheduled tasks communicating with rare or unique destination IP addresses?
  context: Legitimate software and administrative scripts executed by scheduled tasks typically communicate with common, well-known servers. Adversary command and control (C2) infrastructure, however, is often unique to a campaign or tool. By identifying destination IPs that are rarely contacted by other systems in the enterprise (low prevalence), we can uncover potential C2 channels that would otherwise be missed. This is a powerful anomaly detection technique for finding novel threats.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Relevant on: Domain Controllers, Critical Application Servers, Standard User Workstations, Network Egress Points.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (4688) from scheduled tasks
      JOIN with network connection logs (conn.log) on source_ip, timestamp
      CALCULATE prevalence of destination_ip across all enterprise traffic over 30 days
      IF prevalence < 1st_percentile, FLAG for investigation
- question: Are scheduled tasks executing commands with characteristics (e.g., high entropy, obfuscation) that a machine learning model identifies as likely malicious?
  context: Adversaries frequently obfuscate commands to evade simple signature-based detections. These obfuscated commands often have tell-tale statistical properties, such as unusual length, high character randomness (entropy), or embedded encoded scripts. By using a trained machine learning model to score command-line strings, we can detect these suspicious patterns automatically and flag commands that have a high probability of being malicious, even if they don't contain known-bad indicators.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Relevant on: Domain Controllers, Critical Application Servers, Standard User Workstations, Network Egress Points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (4688) from scheduled tasks
      FOR each command_line:
        CALCULATE features (length, entropy, patterns)
        SCORE with logistic_regression_model
      IF score > 0.8, ALERT
- question: Is the deprecated 'at.exe' utility being executed on any system?
  context: The 'at.exe' command-line utility for scheduling tasks is deprecated in modern Windows versions and has been replaced by 'schtasks.exe'. Its execution is highly anomalous and a strong indicator of an adversary using older, less-monitored techniques for execution or persistence. Any execution of 'at.exe' should be treated as a critical security event and investigated immediately.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698, Microsoft-Windows-WMI-Activity/Operational Event ID 5861. Relevant on: Domain Controllers, Tier 0/1 Servers, Standard User Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (4688)
      WHERE process_image_path = 'C:\Windows\System32\at.exe'
      ALERT with critical severity
- question: Is the Task Scheduler service (svchost.exe) spawning rare or never-before-seen script interpreters or commands?
  context: The Task Scheduler service (running under svchost.exe) typically executes a predictable set of tasks. Adversaries may introduce new scheduled tasks that run malicious scripts using interpreters like PowerShell or cmd. By baselining normal parent-child relationships and command-line arguments, we can detect anomalous executions. A new or extremely rare script being launched by the scheduler is a strong signal of potentially unauthorized activity.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698, Microsoft-Windows-WMI-Activity/Operational Event ID 5861. Relevant on: Domain Controllers, Tier 0/1 Servers, Standard User Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (4688) WHERE parent_process = 'svchost.exe' AND child_process IN ('powershell.exe', 'cmd.exe', 'cscript.exe', 'wscript.exe')
      CALCULATE frequency of each unique (parent, child, command_line) combination over historical data
      IF combination is new OR frequency < 1st_percentile, ALERT
- question: Are there anomalous WMI events related to task scheduling that deviate from normal patterns?
  context: Adversaries can use WMI to create or trigger scheduled tasks, which can be stealthier than using command-line tools. By analyzing WMI activity events (Event ID 5861) with an anomaly detection model like Isolation Forest, we can identify unusual scheduling behavior. The model can learn what normal WMI-based scheduling looks like in your environment and flag deviations, such as an unusual user or process creating a task via WMI.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698, Microsoft-Windows-WMI-Activity/Operational Event ID 5861. Relevant on: Domain Controllers, Tier 0/1 Servers, Standard User Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH WMI events (5861) related to Win32_ScheduledJob
      EXTRACT features (client_pid, user, wmi_query_text)
      SCORE with Isolation Forest model
      IF score indicates anomaly, ALERT
- question: Are scheduled tasks executing processes that are not on an established allow-list of known-good executables?
  context: Mature environments can maintain an allow-list of approved applications and scripts that are permitted to be run by the Task Scheduler. Any process executed by a scheduled task that is not on this list is, by definition, unauthorized and suspicious. This is a highly effective method for detecting novel malware or unapproved tools.
  answer_sources: Windows Event ID 4688. Relevant on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (4688) with parent_process in ('svchost.exe', 'taskeng.exe')
      LOOKUP child_process_name in known_good_task_executables_allowlist
      IF not found, ALERT
- question: Are any scheduled tasks executing commands that are extremely rare across the environment?
  context: Legitimate scheduled tasks, such as those for software updates or system maintenance, tend to use the same command-line arguments across many machines. In contrast, a malicious task might use a unique or rare command. By calculating the frequency of every command line executed by the Task Scheduler, we can flag those that are statistical outliers (e.g., in the lowest percentile), pointing to potentially malicious, targeted activity.
  answer_sources: Windows Event ID 4688. Relevant on: All Windows Endpoints and Servers.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process creation events (4688) from Task Scheduler service
      CALCULATE frequency of each unique command_line over 30 days
      IF frequency < 1st_percentile, ALERT
- question: Are there clusters of anomalous scheduled task executions that differ from common, legitimate task behavior?
  context: Using unsupervised machine learning, we can group all scheduled task executions based on their properties (e.g., process path, command line features). Legitimate tasks will form large, dense clusters, while malicious or anomalous tasks will form small, isolated clusters or be flagged as noise. Investigating these small clusters is an efficient way to hunt for unusual activity that doesn't conform to normal operational patterns.
  answer_sources: Windows Event ID 4688. Relevant on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process events (4688) from Task Scheduler
      EXTRACT features (process_path, command_line_entropy, parent_process)
      APPLY DBSCAN clustering algorithm
      INVESTIGATE small or isolated clusters
- question: Are scheduled tasks executing binaries from user-writable or non-standard system directories?
  context: Legitimate scheduled tasks typically execute binaries from protected system directories like C:\Windows\System32. Adversaries often place their payloads in user-writable locations such as %APPDATA%, %TEMP%, or C:\Users\Public\, as these do not require elevated privileges to write to. A detection rule that alerts on tasks executing from these directories can effectively catch malware attempting to persist or execute.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: Standard User Workstations, Multi-user Servers (e.g., Citrix, RDS).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task creation (4698) or process execution (4688) events
      WHERE executable_path matches patterns like '\Users\', '\Temp\', '\ProgramData\'
      ALERT
- question: Have scheduled tasks been observed executing from statistically rare directory locations?
  context: Beyond common user-writable directories, adversaries may use obscure or newly created folders to hide their tools. By profiling all parent directories of executables launched by scheduled tasks over a long period, we can establish a baseline of normal locations. Any task executing from a directory that is statistically rare compared to this baseline should be investigated as a potential non-standard or malicious execution location.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: Standard User Workstations, Multi-user Servers (e.g., Citrix, RDS).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process events (4688) from scheduled tasks
      EXTRACT parent_directory of process_path
      CALCULATE frequency of each parent_directory over 90 days
      IF frequency < 5th_percentile, FLAG for investigation
- question: Are scheduled tasks executing binaries from file paths that a machine learning model deems suspicious?
  context: Malicious file paths often have characteristics that distinguish them from legitimate ones, such as greater depth, random-looking directory names, or unusual file extensions. A trained classifier, like Naive Bayes, can analyze these features to score the likelihood that a given path is suspicious. Applying this model to the executable paths in scheduled task events provides a probabilistic method for detecting malware hidden in non-standard locations.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: Standard User Workstations, Multi-user Servers (e.g., Citrix, RDS).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task events (4698, 4688)
      FOR each executable_path:
        EXTRACT features (path_depth, directory_name_semantics, file_extension)
        SCORE with Naive_Bayes_classifier
      IF score exceeds threshold, ALERT
- question: Has a scheduled task with a persistence trigger (e.g., logon) been observed making network connections to a known-bad IP address?
  context: Adversaries establish persistence by creating tasks that run automatically at startup or user logon. These tasks often include a C2 component that "calls home" after triggering. By correlating task executions that have persistence triggers with their subsequent network activity, we can identify connections to malicious infrastructure listed on an IOC blocklist. This provides a high-confidence alert for an active, persistent threat.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Relevant on: All Windows Endpoints and Servers, Network Egress Points, DNS Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task creation events (4698) with persistence triggers
      CORRELATE with process execution (4688) and network connections (conn.log)
      LOOKUP destination_ip against IOC_blocklist
      IF match, ALERT
- question: Are processes spawned by persistent scheduled tasks making DNS queries with high entropy, suggesting DGA usage?
  context: To make their C2 infrastructure resilient, adversaries often use Domain Generation Algorithms (DGAs) to create a large number of random-looking domain names. DNS queries for these domains have high character randomness (entropy). By monitoring the DNS queries made by processes launched from persistent scheduled tasks, a sustained period of high-entropy queries can indicate the presence of a DGA-based C2 mechanism.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Relevant on: All Windows Endpoints and Servers, Network Egress Points, DNS Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process events (4688) from persistent tasks
      ANALYZE associated DNS queries (dns.log) in a 5-minute window
      CALCULATE Shannon entropy of queried domains
      IF entropy > 3.5, ALERT
- question: Is a process associated with a persistent scheduled task exhibiting periodic, 'heartbeat' network traffic indicative of C2 beaconing?
  context: Malware often communicates with its C2 server on a regular, periodic schedule (a "heartbeat" or "beacon") to receive commands or exfiltrate data. By using time-series analysis on the network traffic of processes launched by persistent tasks, we can detect these repeating patterns. Identifying such beaconing behavior is a strong indicator of an active C2 channel, even if the destination is not on a blocklist.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Relevant on: All Windows Endpoints and Servers, Network Egress Points, DNS Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR outbound traffic (conn.log) for processes from persistent tasks
      APPLY time-series analysis (e.g., ARIMA) to connection counts and volume
      DETECT periodic, 'heartbeat' patterns
      IF pattern detected, ALERT
- question: Has a new scheduled task been created with a high-frequency or persistent trigger that is not on an established allow-list?
  context: Adversaries often create tasks that run on logon, at startup, or at very frequent intervals (e.g., every few minutes) to ensure their code executes reliably and quickly. Legitimate software rarely requires such aggressive scheduling. By creating a rule that alerts on any new task with these trigger types that isn't on an allow-list of known administrative tasks, we can effectively catch attempts to establish aggressive persistence.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702. Relevant on: Domain Controllers, All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task creation (4698) or update (4702) events
      WHERE (trigger IN ('logon', 'startup') OR repetition_interval < 15_minutes)
      AND task_name NOT IN admin_task_allowlist
      ALERT
- question: Has a scheduled task been created with a statistically rare combination of trigger type and user context?
  context: The context in which a task is created (who created it, what account it runs as, how it's triggered) is often predictable for legitimate activities. Adversaries may create tasks with unusual combinations, such as a standard user creating a task that runs at startup. By baselining normal task configurations, we can use statistical analysis to flag any new task whose combination of properties is an outlier, suggesting it may be malicious.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702. Relevant on: Domain Controllers, All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE trigger types and user contexts for all scheduled tasks
      ON new task creation (4698), check if (trigger_type, user_context) combination is a statistical outlier
      IF combination is rare (e.g., seen < 5 times), ALERT
- question: Has a new scheduled task been created with properties that an anomaly detection model identifies as novel or unusual?
  context: While rule-based methods are effective, a sophisticated adversary might create a malicious task using a combination of seemingly legitimate attributes. A one-class SVM or similar machine learning model can be trained on the properties of all legitimate tasks in an environment. This model can then detect any new task that, as a whole, deviates from the learned norm, even if no single attribute is suspicious on its own.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702. Relevant on: Domain Controllers, All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN one-class SVM on legitimate task properties (trigger, author, path, signature)
      ON new task creation (4698), score the new task with the model
      IF score indicates anomaly, ALERT
- question: Has a scheduled task been created that was not deleted and cannot be correlated with approved change management or software deployment activity?
  context: Many legitimate tasks are transient, created by installers or scripts and deleted shortly after. Persistent tasks are typically long-lived and associated with specific software or administrative functions. A task that is created and persists for an extended period without being on an allow-list or matching a change management ticket is suspicious, as it may be an adversary's foothold.
  answer_sources: Windows Event ID 4698, Windows Event ID 4699. Relevant on: Configuration Management Database (CMDB), All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN task creation (4698) with task deletion (4699) events
      IDENTIFY tasks that persist > 30 days
      CHECK if task is on known-good allow-list OR in CMDB change ticket
      IF not, ALERT
- question: Has a new scheduled task been created with an unusually long intended or observed lifespan compared to typical tasks?
  context: The lifespans of scheduled tasks (time between creation and deletion) often follow a predictable distribution. Most are either very short-lived (temporary) or very long-lived (permanent software). A newly created task with a lifespan that falls into the extreme upper percentile (e.g., configured to run indefinitely but not from a known installer) is an anomaly that warrants investigation as a potential persistence mechanism.
  answer_sources: Windows Event ID 4698, Windows Event ID 4699. Relevant on: Configuration Management Database (CMDB), All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ANALYZE historical distribution of task lifespans (deletion_time - creation_time)
      FOR new tasks, check observed lifespan
      IF lifespan falls in the 99th percentile AND is not from a known software installer, FLAG
- question: Has a persistent scheduled task been created with a name or description that an NLP model classifies as 'Unknown' or suspicious?
  context: Legitimate software vendors and administrators usually give scheduled tasks descriptive names (e.g., 'Microsoft Office Click-to-Run Task'). Adversaries often use generic, random, or empty names. By using a Natural Language Processing (NLP) model to classify task names and descriptions, we can automatically categorize them. Tasks that persist and are classified as 'Unknown' can then be prioritized for human review.
  answer_sources: Windows Event ID 4698, Windows Event ID 4699. Relevant on: Configuration Management Database (CMDB), All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR persisting tasks (from event 4698 without a corresponding 4699)
      PARSE task_name and task_description with NLP model
      IF classification is 'Unknown' or suspicious, ALERT for investigation
- question: Is a scheduled task executing a file that is a known hacking tool, exploit, or credential theft utility?
  context: Adversaries frequently use scheduled tasks to execute well-known offensive security tools for privilege escalation (e.g., Potato exploits) or credential theft (e.g., Mimikatz). By hashing the executable file run by a scheduled task and comparing it against a curated threat intelligence feed of such tools, we can generate a high-confidence alert for a significant security event.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: All Windows Endpoints and Servers, especially Domain Controllers and Tier 0/1 Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON task execution (4688), HASH the executable file
      LOOKUP file_hash against a threat intelligence feed of hacking tools
      IF match, generate a high-confidence ALERT
- question: Is a scheduled task executing a file that is extremely rare across the enterprise?
  context: Common software and scripts are, by definition, common. Hacking tools and custom exploits used for privilege escalation are typically deployed to a very small number of target machines. Therefore, by profiling the prevalence of all file hashes executed by scheduled tasks, any hash that is unique or seen on only a handful of systems is highly suspicious and should be investigated as a potential hacking tool.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: All Windows Endpoints and Servers, especially Domain Controllers and Tier 0/1 Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE prevalence of all file_hashes executed by scheduled tasks
      IF prevalence for a hash is < 5 machines, FLAG for analysis
- question: Is a scheduled task executing a previously unseen binary that a machine learning model classifies as malicious?
  context: To evade signature-based detection, adversaries can use custom or packed executables. A machine learning model that analyzes the static features of a Portable Executable (PE) file (such as its imported functions, section entropy, and resource types) can classify a binary as malicious without needing to have seen it before. Submitting previously unseen binaries from scheduled tasks to such a model can help catch novel privilege escalation tools.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: All Windows Endpoints and Servers, especially Domain Controllers and Tier 0/1 Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON task execution (4688) of a previously unseen binary:
        EXTRACT PE file features (imports, sections, entropy)
        SCORE with pre-trained classification model
      IF risk_score > threshold, ALERT
- question: Is a scheduled task running as SYSTEM executing commands commonly used for privilege escalation?
  context: Once an adversary gains the ability to run a task as the SYSTEM account, they may use it to execute commands that create new administrative accounts or modify system services to solidify their access. A rule that specifically looks for processes spawned by the scheduler, running as SYSTEM, and containing command-line patterns for user creation ('net user /add') or service modification ('sc.exe create') is a critical detection for active privilege escalation.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: Domain Controllers, Member Servers, Administrator Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process events (4688) where parent is scheduler AND user is 'SYSTEM'
      WHERE command_line matches regex for 'net user .* /add', 'net localgroup administrators .* /add', or 'sc.exe create'
      CREATE high-severity ALERT
- question: Is a privileged scheduled task executing a command sequence that is statistically improbable compared to a baseline of normal administrative commands?
  context: While some privileged commands may be legitimate, the sequence and combination in which they are run can be revealing. By using n-gram analysis to model common sequences of administrative commands executed by SYSTEM-level tasks, we can establish a baseline of normal behavior. A new command sequence that is statistically improbable compared to this baseline can indicate an adversary's attempt at privilege escalation.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: Domain Controllers, Member Servers, Administrator Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE common administrative command patterns for SYSTEM-level tasks using n-gram analysis
      FOR new commands from privileged tasks, calculate probability of the command sequence
      IF probability is very low, FLAG as anomalous
- question: Is a privileged command executed by a task a significant deviation from the learned sequence of commands on a sensitive host?
  context: On sensitive systems, the sequence of administrative actions is often highly predictable. A sequence-based model like an LSTM can be trained on the command-line history of these hosts to learn what is normal. When a privileged command is executed by a scheduled task, it can be evaluated against the model. If the command represents a significant deviation from the learned legitimate sequences, it should be alerted on as a potential threat.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. Relevant on: Domain Controllers, Member Servers, Administrator Workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN LSTM model on command-line histories for sensitive hosts
      WHEN a privileged command is run by a task, check if it deviates from the learned sequence
      IF significant deviation, ALERT
- question: Has a standard, non-administrative user created a scheduled task configured to run as SYSTEM or another privileged account?
  context: A classic privilege escalation technique involves a lower-privileged user creating a task that is configured to run with higher privileges (e.g., as SYSTEM). This is highly suspicious behavior, as standard users should not be able to create tasks that run outside of their own security context. An alert that triggers when the creating user's SID is non-privileged but the task's 'run as' user is SYSTEM (S-1-5-18) is a high-fidelity indicator of a privilege escalation attempt.
  answer_sources: Windows Event ID 4698. Relevant on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH task creation events (4698)
      WHERE SubjectUserSid is NOT in a privileged group AND PrincipalUserId is 'S-1-5-18' (SYSTEM)
      CREATE high-severity ALERT
- question: Is a specific user creating an anomalously high ratio of privileged tasks compared to other users?
  context: While some administrators may create privileged tasks, a standard user account that suddenly starts creating many tasks that run as SYSTEM is an anomaly. By calculating the ratio of privileged-to-unprivileged tasks created by each user, we can identify outliers. A user whose ratio is significantly higher than the organizational average may have their account compromised and used for privilege escalation.
  answer_sources: Windows Event ID 4698. Relevant on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user, calculate ratio = (tasks created as privileged) / (total tasks created)
      CALCULATE mean and standard deviation of this ratio across all users
      FLAG users with a ratio > 3 standard deviations above the mean
- question: Has an anomaly detection model identified an unusual combination of task creator, 'run-as' account, and host?
  context: A privilege escalation attempt may involve a combination of factors that are not individually suspicious but are anomalous when combined. For example, a specific user creating a SYSTEM task on a workstation they've never touched before at 3 AM. An anomaly detection algorithm like Isolation Forest can be trained on features like creator privileges, 'run-as' privileges, host, and time of day to identify these unusual combinations that signify a potential attack.
  answer_sources: Windows Event ID 4698. Relevant on: All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN Isolation Forest model on task creation features (creator_privs, run_as_privs, host, time_of_day)
      SCORE new task creation events (4698) with the model
      IF score indicates anomaly, ALERT