name: T1205: Traffic Signaling
id: 5a9b8c7d-6e0f-4a1b-9c8d-7e6f5a4b3c2d
description: This playbook focuses on detecting adversary use of traffic signaling, a technique where specific network traffic is used to trigger actions. Adversaries use methods like port knocking, magic packets with specific byte sequences, or Wake-on-LAN (WoL) packets to activate dormant implants, modify firewall rules for access, evade defenses, or establish command and control (C2) channels. The investigation involves analyzing network traffic for these unusual patterns, monitoring for unexpected process behaviors like loading packet capture libraries, and correlating network events with system states (e.g., system boot times) to uncover hidden malicious activities.
type: technique
related:
  - TA0003: Persistence
  - TA0005: Defense Evasion
  - TA0011: Command and Control
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Can we detect traffic signaling by inspecting packet payloads for known magic values?
    context: Adversaries may use a specific byte sequence, or 'magic value', in a packet's payload to activate a dormant implant. This technique avoids constant beaconing. This question aims to find these known malicious signatures in network traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek notice.log
      - Network traffic sensors at internet gateways, traffic between VLANs (especially server/workstation segments), and on host endpoints themselves.
    range: Last 90 days
    queries:
      - pseudocode: SEARCH network_payloads WHERE payload CONTAINS known_magic_values
  - question: Can we identify potential traffic signaling by finding small, high-entropy payloads from rare source IPs?
    context: Malicious signaling packets can be small and may be encrypted or packed, resulting in high entropy. When these packets come from a source IP not commonly seen, it increases the likelihood of malicious activity. This question seeks to find this combination of factors.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek notice.log
      - Network traffic sensors at internet gateways, traffic between VLANs (especially server/workstation segments), and on host endpoints themselves.
    range: Last 90 days
    queries:
      - pseudocode: FIND inbound_connections with payload_size < 64 bytes | CALCULATE payload_entropy | FILTER entropy > 98th_percentile | CALCULATE source_ip_rarity | ALERT where ip_rarity is high
  - question: Can a machine learning model be used to classify inbound connections as probable malicious signaling attempts?
    context: By training a model on various network session features like payload entropy, packet size, port rarity, and IP geolocation, we can create a sophisticated detector that can identify complex patterns associated with traffic signaling that simple rules might miss.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek notice.log
      - Network traffic sensors at internet gateways, traffic between VLANs (especially server/workstation segments), and on host endpoints themselves.
    range: Last 90 days
    queries:
      - pseudocode: SCORE inbound_connections using ML_model(features=[entropy, size, port_rarity, geo, ja3]) | ALERT on high_probability_score
  - question: Has a non-standard process loaded a packet capture library, especially when initiated by a non-administrative user?
    context: Malware may need to sniff network traffic to look for its activation signal. It can do this by loading packet capture libraries (like `wpcap.dll`). This question looks for unusual processes (e.g., `svchost.exe`) loading these libraries, especially when the user is not a network administrator who would typically use such tools.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 7
      - Domain Controllers, application servers, administrator workstations, and developer workstations.
    range: Last 90 days
    queries:
      - pseudocode: SEARCH process_events WHERE (dll_loaded = 'wpcap.dll' OR dll_loaded = 'npcap.dll') AND process_name NOT IN (allowlist) AND user NOT IN ('Network Administrators')
  - question: Have any statistically rare process-DLL combinations involving packet capture libraries been observed?
    context: Legitimate software has predictable library-loading behavior. By baselining normal (process, DLL) pairs across the enterprise, we can spot anomalies. An extremely rare combination, like `outlook.exe` loading `wpcap.dll`, is highly suspicious and could indicate process injection or other malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 7
      - Domain Controllers, application servers, administrator workstations, and developer workstations.
    range: Last 90 days
    queries:
      - pseudocode: BASELINE (process_name, loaded_dll) pairs | CALCULATE rarity of each pair | ALERT on new pairs involving capture_dlls that are in bottom 1st percentile of frequency
  - question: Can an anomaly detection model identify unusual library loading events related to packet capture?
    context: An unsupervised model can learn the normal patterns of library loads, considering the process, parent process, and user context. It can then flag outliers that deviate from this learned norm, providing a flexible way to detect novel threats without relying on predefined rules.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 7
      - Domain Controllers, application servers, administrator workstations, and developer workstations.
    range: Last 90 days
    queries:
      - pseudocode: SCORE library_load_events using Anomaly_Model(features=[process, parent_process, dll, user]) | ALERT on high anomaly_score
  - question: Has any source IP made a series of failed connection attempts followed by a successful connection?
    context: This pattern is the hallmark of port knocking, a technique where an adversary sends packets to a predefined sequence of closed ports to trigger a firewall rule change, which then allows a subsequent connection to a specific, now-open port.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Externally facing servers (e.g., web servers, VPN concentrators), DMZ bastion hosts, and critical internal servers that should have a very restricted set of open ports.
    range: Last 90 days
    queries:
      - pseudocode: TRACK connections by (source_ip, dest_ip) | IF (N_failed_connections to distinct_ports THEN 1_successful_connection) within T_seconds | ALERT
  - question: Is there evidence of port scanning from a source IP that is immediately followed by a successful connection from that same IP?
    context: Port knocking often begins with a port scan or a series of probes to different ports. Calculating the entropy of destination ports from a single source can detect this scanning behavior. Correlating a high entropy event with a subsequent successful connection strengthens the evidence for a port knock.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Externally facing servers (e.g., web servers, VPN concentrators), DMZ bastion hosts, and critical internal servers that should have a very restricted set of open ports.
    range: Last 90 days
    queries:
      - pseudocode: CALCULATE port_entropy per (source_ip, dest_ip) in 1min_window | IF port_entropy > 99th_percentile AND subsequent_successful_connection from same_source | ALERT
  - question: Can a time-series model detect anomalous spikes in failed connections that are characteristic of port knocking?
    context: For critical hosts, the rate of failed connections should be relatively stable. A time-series model can detect a sudden, sharp spike in failed connections from a single source. If this anomaly is followed by a successful connection, it can be classified as a potential port knock.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Externally facing servers (e.g., web servers, VPN concentrators), DMZ bastion hosts, and critical internal servers that should have a very restricted set of open ports.
    range: Last 90 days
    queries:
      - pseudocode: MODEL failed_connection_rate per host using Time_Series_Model | ALERT on un-forecasted_spike from single_source | CORRELATE with subsequent successful connection
  - question: Has a system booted up outside of business hours without being triggered by an authorized Wake-on-LAN packet?
    context: Adversaries can use Wake-on-LAN (WoL) to power on a compromised machine to maintain persistence. This question aims to find suspicious boot events by correlating system startup logs with network logs, filtering out legitimate administrative actions.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Windows Event ID 6005
      - Zeek notice.log
      - All endpoint subnets, especially those containing workstations that are regularly powered down overnight, and server subnets where systems are expected to be online 24/7.
    range: Last 90 days
    queries:
      - pseudocode: FIND boot_event (EID 6005) | IF boot_time is outside_business_hours AND no_auth_WoL_packet in last 5min | ALERT
  - question: Has a host initiated network traffic during a time when it is statistically unlikely to be active?
    context: By baselining the normal 'active hours' for each host based on its historical network traffic, we can identify when a machine comes online at an unusual time. This could indicate it was activated by a malicious WoL packet for adversary purposes.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Windows Event ID 6005
      - Zeek notice.log
      - All endpoint subnets, especially those containing workstations that are regularly powered down overnight, and server subnets where systems are expected to be online 24/7.
    range: Last 90 days
    queries:
      - pseudocode: PROFILE host active_hours based on historical traffic | CALCULATE probability of activity for current_hour | IF new_traffic_initiated AND probability < 5% | ALERT
  - question: Can a predictive model detect an anomalous transition from an 'inactive' to an 'active' state for a host?
    context: A machine learning model like an RNN or LSTM can learn the typical daily and weekly active/inactive cycles of a host. An unpredicted transition from inactive to active is a strong anomaly that could signify a malicious wake-up event.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Windows Event ID 6005
      - Zeek notice.log
      - All endpoint subnets, especially those containing workstations that are regularly powered down overnight, and server subnets where systems are expected to be online 24/7.
    range: Last 90 days
    queries:
      - pseudocode: PREDICT host_state (active/inactive) using RNN/LSTM model | IF predicted_state = inactive AND actual_state = active | ALERT
  - question: Has a Wake-on-LAN packet been observed originating from a non-authorized management server?
    context: Adversaries may use WoL packets to activate systems for lateral movement or other actions. This question focuses on detecting WoL packets on the network and alerting if they do not originate from a pre-approved, legitimate administrative source.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Network sensors monitoring broadcast traffic on all internal VLANs.
    range: Last 90 days
    queries:
      - pseudocode: SEARCH for WoL_packets | IF source_ip NOT IN authorized_wol_servers_allowlist | ALERT
  - question: Has there been a statistically significant increase in UDP broadcast traffic on WoL ports (7 or 9)?
    context: A sudden surge in WoL-related broadcast traffic from a single host could indicate malicious activity, such as an attempt to wake up multiple machines at once. This question uses statistical baselining to detect such anomalous volume increases.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Network sensors monitoring broadcast traffic on all internal VLANs.
    range: Last 90 days
    queries:
      - pseudocode: BASELINE UDP broadcast volume on ports 7,9 per VLAN | ALERT if current_volume > (3 * stdev + 30day_moving_avg)
  - question: Can a machine learning model be used to classify Wake-on-LAN events as malicious or benign?
    context: A model can provide a more nuanced assessment than a simple allowlist by considering multiple features, such as the source IP's role, the time of day, and the target device's profile, to calculate the probability of a WoL event being malicious.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Network sensors monitoring broadcast traffic on all internal VLANs.
    range: Last 90 days
    queries:
      - pseudocode: SCORE WoL_events using ML_model(features=[source_ip_role, time_of_day, target_mac_profile]) | ALERT on high_probability_score
  - question: Is a single source IP generating a high number of connections with unusual TCP flags or states indicative of scanning?
    context: Network scanning tools often use non-standard TCP flag combinations (e.g., FIN/SYN) or generate connections that result in unusual states. A high volume of these from one source to one destination is a strong indicator of a scan used for defense evasion or discovery.
    answer_sources:
      - Zeek conn.log
      - Network firewalls, intrusion detection systems, externally facing hosts, and internal network choke points between security zones.
    range: Last 90 days
    queries:
      - pseudocode: COUNT connections with unusual_conn_state (e.g., OTH, S2, S3) per (source_ip, dest_ip) in 1min_window | IF count > 10 | ALERT
  - question: Does any source IP have an abnormally high ratio of failed-to-successful connections?
    context: A legitimate client should have a very low ratio of failed to successful connections. An adversary scanning a network will have a very high ratio. This question aims to identify scanning behavior by finding source IPs with a statistically anomalous failure ratio.
    answer_sources:
      - Zeek conn.log
      - Network firewalls, intrusion detection systems, externally facing hosts, and internal network choke points between security zones.
    range: Last 90 days
    queries:
      - pseudocode: CALCULATE ratio = (failed_connections / successful_connections) per source_ip in 5min_window | ALERT if ratio > 98th_percentile
  - question: Can clustering identify outlier network connections that represent scanning activity?
    context: Unsupervised learning algorithms like DBSCAN can group normal network traffic into large clusters based on features like ports, flags, and connection states. Activity that doesn't fit these clusters (outliers) often represents anomalous behavior like network scanning and should be investigated.
    answer_sources:
      - Zeek conn.log
      - Network firewalls, intrusion detection systems, externally facing hosts, and internal network choke points between security zones.
    range: Last 90 days
    queries:
      - pseudocode: CLUSTER network_connections using DBSCAN(features=[src_ip, dst_port_dist, flags, conn_state]) | ALERT on outlier_points or small_clusters
  - question: Has a firewall 'allow' rule been created for a source IP immediately after that same IP generated a series of blocked connection attempts?
    context: This sequence of events is highly indicative of a successful port knock, where the blocked attempts were the 'knock' that triggered the firewall to open a port for the subsequent, now-permitted, connection.
    answer_sources:
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Windows Event ID 4950
      - Host-based firewalls on critical servers (e.g., Domain Controllers, database servers) and administrator workstations.
    range: Last 90 days
    queries:
      - pseudocode: FIND firewall_rule_change(EID 4950) OR new_allowed_connection(EID 5156) | LOOKUP for blocked_connections(EID 5157) from same_ip in last 5min | ALERT if found
  - question: Has a port that is historically always blocked on a host suddenly started allowing connections?
    context: Critical hosts should have a stable firewall policy. If a port that is consistently in the 'top blocked' list suddenly appears in the 'allow' logs, it represents a significant and suspicious change in the host's security posture, possibly due to a port knock.
    answer_sources:
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Windows Event ID 4950
      - Host-based firewalls on critical servers (e.g., Domain Controllers, database servers) and administrator workstations.
    range: Last 90 days
    queries:
      - pseudocode: BASELINE blocked_ports_per_host | IF port in top_10_percent_blocked suddenly appears in allow_logs | ALERT
  - question: Can an anomaly detection model detect a sudden drop in block events for a specific port, indicating a new firewall rule?
    context: For a port that is constantly being probed, a time-series model would expect a continuous stream of 'block' events. A sudden, un-forecasted drop to zero for that port's block count is a strong anomaly, suggesting the port is now open. This should be correlated with other data.
    answer_sources:
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Windows Event ID 4950
      - Host-based firewalls on critical servers (e.g., Domain Controllers, database servers) and administrator workstations.
    range: Last 90 days
    queries:
      - pseudocode: MODEL block_event_count per port using LSTM | IF un-forecasted_drop_to_zero | QUERY for corresponding rule_change or successful_connection
  - question: Has a suspected traffic signaling event (like a port knock) involved an IP address on a CTI feed of known C2 servers?
    context: Correlating suspicious network patterns like port knocking with external threat intelligence provides powerful validation. A successful connection following a port knock is suspicious; if that connection is to a known C2 server, it becomes a critical alert.
    answer_sources:
      - Zeek conn.log
      - Zeek intel.log
      - Windows Event ID 5157
      - Network egress points, DNS servers, and proxy servers where outbound connections are logged.
    range: Last 90 days
    queries:
      - pseudocode: FIND successful_connection preceded by signaling_pattern | CHECK if ip in CTI_feed (e.g., Zeek intel.log) | ALERT if match
  - question: Can we create a risk score for outbound connections that combines CTI data with observed signaling activity?
    context: A single indicator may not be enough to alert. By creating a composite risk score based on multiple factors—IP reputation, port rarity, data volume, and preceding signaling activity—we can generate higher-fidelity alerts for likely C2 communications.
    answer_sources:
      - Zeek conn.log
      - Zeek intel.log
      - Windows Event ID 5157
      - Network egress points, DNS servers, and proxy servers where outbound connections are logged.
    range: Last 90 days
    queries:
      - pseudocode: CALCULATE risk_score = func(cti_score, port_rarity, data_volume, preceded_by_signal) | ALERT if risk_score > 99.5th_percentile
  - question: Can a machine learning model be trained to identify C2 connections that were initiated by traffic signaling?
    context: This approach uses a supervised model to explicitly look for C2 connections. By including a feature that indicates whether the connection was preceded by a known signaling pattern, the model can learn to identify this specific TTP with high accuracy.
    answer_sources:
      - Zeek conn.log
      - Zeek intel.log
      - Windows Event ID 5157
      - Network egress points, DNS servers, and proxy servers where outbound connections are logged.
    range: Last 90 days
    queries:
      - pseudocode: SCORE connection using C2_Classifier_Model(features=[ip_rep, asn_rep, ja3, preceded_by_signal]) | ALERT on high_probability_score
  - question: Has a specific, known sequence of network events matching a malware C2 activation pattern been observed?
    context: Some malware families use a specific sequence to activate C2, for example, an inbound UDP packet with a magic value followed by an outbound TCP connection from the victim to the attacker. This question aims to detect this exact, stateful TTP.
    answer_sources:
      - Zeek conn.log
      - Network egress points and internal network segments monitoring traffic between endpoints and servers.
    range: Last 90 days
    queries:
      - pseudocode: DETECT sequence: (1. Inbound UDP from B to A with magic_payload) -> (2. Outbound TCP from A to B within 30s) | ALERT
  - question: Are there any external IPs exhibiting a statistically unusual frequency of trigger-and-callback behavior with internal hosts?
    context: This is a more generalized, statistical approach to finding the trigger-and-callback pattern. By tracking pairs of (inbound UDP, outbound TCP) between an internal host and an external IP, we can find external IPs that are communicating in this unusual manner far more often than others.
    answer_sources:
      - Zeek conn.log
      - Network egress points and internal network segments monitoring traffic between endpoints and servers.
    range: Last 90 days
    queries:
      - pseudocode: TRACK (inbound_udp, outbound_tcp) pairs between internal_host and external_ip in 60s_window | CALCULATE frequency per external_ip | ALERT if frequency > 99th_percentile
  - question: Can a sequence-aware model like an LSTM detect anomalous network connection sequences indicative of C2 activation?
    context: An LSTM can learn a host's normal sequences of network communications (e.g., DNS lookup -> outbound HTTPS). An unusual sequence, like an inbound UDP packet from a new source followed immediately by an outbound TCP connection to that same source, would be flagged as a high-scoring anomaly.
    answer_sources:
      - Zeek conn.log
      - Network egress points and internal network segments monitoring traffic between endpoints and servers.
    range: Last 90 days
    queries:
      - pseudocode: MODEL connection_sequences using LSTM | ALERT on anomalous_sequences like (UDP-in, TCP-out) to a new entity
  - question: Has a host that has been inactive for over 24 hours initiated an outbound connection immediately after receiving an unsolicited inbound packet?
    context: A long-dormant host suddenly becoming active and phoning home right after receiving an external packet is highly suspicious. This rule-based approach aims to detect this specific scenario, which strongly suggests activation of a sleeper agent.
    answer_sources:
      - Zeek conn.log
      - Endpoint subnets, especially for user workstations and servers that have predictable on/off cycles.
    range: Last 90 days
    queries:
      - pseudocode: MAINTAIN host_state_table | IF host_state = inactive > 24h AND new_outbound_traffic within 5min of unsolicited_inbound_packet | ALERT
  - question: Has a host initiated an outbound connection after a 'silent time' that is statistically anomalous for that host?
    context: Every host has a typical rhythm of communication. By calculating the normal time between its outbound connections, we can detect when a host remains silent for an unusually long period and then suddenly communicates, suggesting it was awakened by an external trigger.
    answer_sources:
      - Zeek conn.log
      - Endpoint subnets, especially for user workstations and servers that have predictable on/off cycles.
    range: Last 90 days
    queries:
      - pseudocode: CALCULATE mean and stdev of 'silent_time' per host | IF current_silent_time > (mean + 4 * stdev) | ALERT
  - question: Can a time-series forecasting model detect outbound traffic from a host during a period when it is predicted to be completely silent?
    context: A forecasting model like Prophet can predict periods of zero activity (e.g., overnight for a workstation) with a high degree of confidence. Any outbound traffic that occurs during a forecasted zero-activity window is a strong anomaly, especially if it follows an inbound packet.
    answer_sources:
      - Zeek conn.log
      - Endpoint subnets, especially for user workstations and servers that have predictable on/off cycles.
    range: Last 90 days
    queries:
      - pseudocode: FORECAST bytes_out per host using Prophet | IF actual_bytes_out > 0 when forecast = 0 | ALERT
  - question: Following a suspected signaling event, has the target host established a new, periodic connection indicative of C2 beaconing?
    context: A common adversary pattern is to use a signal (like a port knock) to activate an implant, which then begins regular C2 beaconing. This question looks for this two-stage pattern a signal, followed by a new, highly regular (in time and size) connection.
    answer_sources:
      - Zeek conn.log
      - Network egress points (firewalls, proxies) where outbound C2 traffic would be visible.
    range: Last 90 days
    queries:
      - pseudocode: FLAG destination_ip from post-signal_event | MONITOR subsequent connections to flagged_ip | IF connections > 10 AND time_interval is regular AND payload_size is regular | ALERT as beaconing
  - question: Do connections established after a signaling event exhibit strong statistical indicators of beaconing, such as low time-delta deviation and low payload-size entropy?
    context: This question uses statistical measures to identify beaconing. A very low standard deviation in the time between connections points to periodicity. Low entropy in payload sizes points to repetitive communication. The combination is a strong signal for automated C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Network egress points (firewalls, proxies) where outbound C2 traffic would be visible.
    range: Last 90 days
    queries:
      - pseudocode: FOR connections to post-signal_destination | CALCULATE stdev(time_delta) and entropy(payload_size) | IF stdev is low AND entropy is low | ALERT as beaconing
  - question: Can a frequency analysis (FFT) of connection start times reveal a periodic C2 beacon established after a signaling event?
    context: A Fast Fourier Transform (FFT) is a powerful mathematical tool for identifying periodicity in a time series. Applying it to the timestamps of connections to a destination that was activated by a signal can reveal a hidden, machine-like rhythm characteristic of C2 beaconing, even if there is some jitter.
    answer_sources:
      - Zeek conn.log
      - Network egress points (firewalls, proxies) where outbound C2 traffic would be visible.
    range: Last 90 days
    queries:
      - pseudocode: FOR connections to post-signal_destination | CREATE time_series of connection_start_times | APPLY FFT | IF strong_peak in frequency_domain | ALERT as beaconing