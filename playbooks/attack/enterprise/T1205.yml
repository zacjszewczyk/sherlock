name: T1205: Traffic Signaling
id: 5a8e0d1c-8b1f-4e6a-9f3d-2c7b6a9e1d0f
description: |
  This playbook helps investigate whether an adversary is using traffic signaling for persistence, defense evasion, or command and control. Adversaries may use specific, non-standard network traffic sequences or packet contents to activate dormant implants, open firewalls, or establish C2 channels. This can involve techniques like sending packets with 'magic values', executing a port knock sequence, using Wake-on-LAN (WoL) packets maliciously, or loading packet capture libraries in unexpected processes to listen for trigger events. The goal is to identify these subtle signals that indicate a hidden malicious presence.
type: technique
related:
  - TA0003: Persistence
  - TA0005: Defense Evasion
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have we detected any network packets containing known malicious 'magic values' used for traffic signaling?
    context: >
      Adversaries may send a specific, non-standard byte sequence (a 'magic value') in a UDP or TCP packet to activate a dormant implant. This is a form of persistence or C2 activation. Deploying a signature-based rule is a direct method to detect these known malicious signals by inspecting packet payloads.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek notice.log
      - Network traffic sensors at internet gateways, traffic between VLANs (especially server/workstation segments), and on host endpoints themselves.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH network traffic logs
          WHERE payload CONTAINS known_magic_values
          GENERATE alert
  - question: Have we observed any inbound connections with small, high-entropy payloads from rare or new source IP addresses?
    context: >
      Malicious signaling packets are often small and may be encrypted or obfuscated, resulting in high entropy. When such a packet comes from a source IP that has rarely or never been seen before, it increases the likelihood of a targeted signaling attempt rather than legitimate, albeit unusual, traffic. This helps find unknown or novel signaling techniques that signature-based methods would miss.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek notice.log
      - Network traffic sensors at internet gateways, traffic between VLANs (especially server/workstation segments), and on host endpoints themselves.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each inbound connection with payload_size < 64 bytes
          CALCULATE payload_entropy
          IF payload_entropy > high_threshold
            CALCULATE source_ip_rarity over last 30 days
            IF source_ip_rarity is very_high
              GENERATE alert
  - question: Have any inbound network sessions been classified as malicious signaling attempts by our machine learning model?
    context: >
      A supervised machine learning model can be trained to recognize the subtle, combined characteristics of malicious traffic signaling. By analyzing features like payload entropy, packet size, port rarity, IP geolocation, and TLS fingerprinting (JA3/JA3S), the model can score new connections for their probability of being a malicious signal, providing a more sophisticated and adaptable detection method.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek notice.log
      - Network traffic sensors at internet gateways, traffic between VLANs (especially server/workstation segments), and on host endpoints themselves.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each new inbound network session
          EXTRACT features (entropy, size, port_rarity, geo, ja3)
          APPLY trained_classification_model
          IF model_score > alert_threshold
            GENERATE alert
  - question: Has a process, not associated with a standard network analysis tool, loaded a packet capture library while running under a non-administrative user account?
    context: >
      Malware waiting for a network signal must listen to network traffic. It can do this by loading packet capture libraries like `wpcap.dll` or `npcap.dll`. When a common process like `svchost.exe` or `powershell.exe` loads one of these libraries, especially under a standard user account, it's highly suspicious and may indicate a hidden implant. This rule specifically looks for this behavior from users who are not expected to be performing network analysis.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 7
      - Domain Controllers, application servers, administrator workstations, and developer workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH process and library load events
          WHERE (library is 'wpcap.dll' or 'npcap.dll')
          AND (process_name is not in 'wireshark.exe', 'tcpdump.exe', etc.)
          AND (user is not in 'Network Administrators' group)
          GENERATE alert
  - question: Have we observed any enterprise-wide rare combinations of processes loading packet capture libraries?
    context: >
      By baselining all process and DLL-loading combinations across the entire organization, we can identify statistically rare events. A legitimate process like `outlook.exe` loading `wpcap.dll` would be extremely unusual and have a very low frequency of occurrence. Alerting on these rare pairs is an effective way to find novel or unexpected software behavior that could be a sign of a malicious implant.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 7
      - Domain Controllers, application servers, administrator workstations, and developer workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR all library_load_events ('Sysmon Event ID 7')
          CREATE baseline of (process_name, loaded_dll) pair frequencies
          SEARCH for new library_load_events
          IF (process_name, loaded_dll) pair frequency < 1st_percentile
            GENERATE alert
  - question: Has an anomaly detection model identified any unusual library loading events related to packet capture?
    context: >
      An unsupervised anomaly detection model, such as an Isolation Forest, can learn the normal patterns of library loading behavior based on features like the process name, parent process, and user account. It can then flag outliers that deviate from this learned norm. This is particularly useful for detecting a malicious process masquerading as a legitimate one while loading a packet capture library in an unusual context.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 7
      - Domain Controllers, application servers, administrator workstations, and developer workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each library_load_event ('Sysmon Event ID 7')
          EXTRACT features (process_hash, parent_hash, library_hash, user_context)
          APPLY trained_anomaly_detection_model
          IF event is flagged as an anomaly
            GENERATE alert
  - question: Have we detected a potential port knocking sequence, characterized by a series of failed connections followed by a successful one from the same source?
    context: >
      Port knocking is a method to open a port on a firewall by sending a predefined sequence of connection attempts to closed ports. A stateful rule can track connection states from a source IP. If it sees a specific number of failed connections (e.g., TCP Resets) followed immediately by a successful connection, it strongly indicates a port knock attempt to activate a hidden service or backdoor.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Externally facing servers (e.g., web servers, VPN concentrators), DMZ bastion hosts, and critical internal servers that should have a very restricted set of open ports.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          TRACK connection attempts per (source_ip, dest_ip) over T_seconds
          IF count(failed_connections to distinct_ports) >= N
          AND a successful_connection follows immediately
          GENERATE alert
  - question: Has any source IP exhibited high entropy in destination port numbers, consistent with a port scan, immediately before a successful connection?
    context: >
      Instead of looking for a fixed sequence, this method detects the reconnaissance phase of port knocking. A high Shannon entropy of destination ports from a single source indicates the source is scanning or probing many different ports, which is not normal behavior. If this scanning activity is immediately followed by a successful connection, it suggests the scan was a 'knock' that successfully opened a port.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Externally facing servers (e.g., web servers, VPN concentrators), DMZ bastion hosts, and critical internal servers that should have a very restricted set of open ports.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each source_ip, dest_host in 1-minute window
          CALCULATE shannon_entropy of destination_ports
          IF entropy > 99th_percentile_threshold
            CHECK for subsequent successful connection from source_ip
            IF successful_connection exists
              GENERATE alert
  - question: Has a time-series model detected a sharp, anomalous spike in failed connections from a single IP, followed by a successful connection?
    context: >
      Time-series anomaly detection can model the normal rate of failed connection events for critical hosts. A sudden, un-forecasted spike in these events from one source IP is a clear anomaly. This approach can detect the 'knocking' part of a port knock sequence. Correlating this anomaly with a subsequent successful connection from the same source provides high-confidence evidence of this technique.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Externally facing servers (e.g., web servers, VPN concentrators), DMZ bastion hosts, and critical internal servers that should have a very restricted set of open ports.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each critical_host
          MODEL time-series of failed_connection_events (e.g., Win Event 5157)
          IF un-forecasted spike from single_source_ip is detected
            CHECK for subsequent successful connection from same source_ip
            IF found
              GENERATE alert
  - question: Has a system boot event been observed outside of business hours that was not preceded by an authorized Wake-on-LAN (WoL) packet?
    context: >
      Adversaries can use Wake-on-LAN (WoL) packets to power on a compromised machine to maintain persistence or for lateral movement. By correlating system boot events with network WoL traffic, we can identify unauthorized startups. A machine booting outside of normal hours without a corresponding WoL packet from a known management server is highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Windows Event ID 6005
      - Zeek notice.log
      - All endpoint subnets, especially those containing workstations that are regularly powered down overnight, and server subnets where systems are expected to be online 24/7.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH for boot_events ('Win Event 6005')
          IF boot_time is outside_business_hours
            CHECK for WoL_packet to host in last 5 minutes
            IF WoL_packet not found OR source_ip is not in allowlist
              GENERATE alert
  - question: Has any host initiated network traffic during a time when it has a very low historical probability of being active?
    context: >
      By profiling the typical 'online' hours for every host based on its historical network activity, we can build a probabilistic model of its behavior. If a host, like a workstation that is normally off overnight, suddenly starts transmitting data at 3 AM, this represents a statistically significant deviation from its normal pattern and could indicate it was woken up for a malicious purpose.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Windows Event ID 6005
      - Zeek notice.log
      - All endpoint subnets, especially those containing workstations that are regularly powered down overnight, and server subnets where systems are expected to be online 24/7.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, create profile of active_hours
          FOR each new network_traffic event
          CALCULATE probability of host being active at current_time
          IF probability < 5%
            GENERATE alert
  - question: Has a machine learning model detected an unpredicted transition from an 'inactive' to an 'active' state for any host?
    context: >
      A recurrent neural network (RNN) or LSTM can learn the complex temporal patterns of a host's active/inactive cycles, including time of day and day of week. The model can then predict the host's next state. An unpredicted transition from inactive to active is a high-confidence anomaly, as it breaks the established pattern and suggests an external, unscheduled trigger like a malicious WoL packet.
    answer_sources:
      - Zeek conn.log
      - Zeek dhcp.log
      - Windows Event ID 6005
      - Zeek notice.log
      - All endpoint subnets, especially those containing workstations that are regularly powered down overnight, and server subnets where systems are expected to be online 24/7.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, model active/inactive state as a time series
          TRAIN RNN/LSTM model to predict next state
          IF model predicts 'inactive' but observes 'active'
            GENERATE alert
  - question: Have we observed any Wake-on-LAN (WoL) packets originating from a source IP not on the authorized allowlist of network management servers?
    context: >
      While WoL is a legitimate administrative feature, it can be abused by adversaries for lateral movement or to activate dormant systems. By specifically identifying WoL packets (which have a unique structure) and checking their source, we can filter out legitimate use. Any WoL packet coming from a non-authorized server is a strong indicator of malicious activity.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Network sensors monitoring broadcast traffic on all internal VLANs.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DEPLOY Zeek script to identify WoL packets
          ON WoL_packet_detected event
          IF source_ip is NOT in management_server_allowlist
            GENERATE alert
  - question: Has there been an anomalous volume of UDP broadcast traffic on WoL-associated ports (7 or 9) from a single host?
    context: >
      An adversary attempting to find or wake multiple systems might generate a high volume of WoL packets. By baselining the normal amount of broadcast traffic on WoL ports for each network segment, we can detect significant deviations. A single host sending a volume of traffic that is several standard deviations above the norm is a statistical anomaly worth investigating.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Network sensors monitoring broadcast traffic on all internal VLANs.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each network_segment
          BASELINE UDP broadcast traffic on ports 7 and 9
          MONITOR new traffic from each source_host
          IF traffic_volume > (3 * stdev) + moving_average
            GENERATE alert
  - question: Has a machine learning model classified any Wake-on-LAN events as likely malicious?
    context: >
      A supervised classification model can provide a more nuanced assessment of a WoL event's risk. By considering features beyond just the source IP—such as the time of day, day of week, and whether the target machine is expected to be woken remotely—the model can calculate a probability score. This helps distinguish legitimate, but perhaps unscheduled, admin activity from clearly malicious use.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Network sensors monitoring broadcast traffic on all internal VLANs.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each detected WoL_event
          EXTRACT features (source_ip_type, time_of_day, target_mac_profile)
          APPLY trained_classification_model
          IF model_score > alert_threshold
            GENERATE alert
  - question: Has any source IP generated an unusual number of connections with anomalous TCP flags or connection states indicative of scanning?
    context: >
      Adversaries often use network scanning tools to discover live hosts, open ports, and firewall rulesets. These tools frequently use non-standard TCP flag combinations (e.g., FIN/SYN, NULL scans) or generate connections that are quickly reset or left incomplete. Monitoring for a high rate of connections with anomalous states (like Zeek's 'OTH', 'S2', 'S3') from a single source is a classic way to detect this reconnaissance activity.
    answer_sources:
      - Zeek conn.log
      - Network firewalls, intrusion detection systems, externally facing hosts, and internal network choke points between security zones.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH network connection logs
          WHERE source_ip generates > 10 connections in 1 minute
          AND (conn_state is 'OTH' or history contains 'S2' or 'S3')
          TO a single destination_host
          GENERATE alert
  - question: Has any source IP shown an abnormally high ratio of failed/rejected connections to successful connections?
    context: >
      Legitimate network clients typically have a high success rate in making connections. In contrast, an IP address engaged in scanning or probing will generate a large number of failed or rejected connections compared to successful ones. Calculating this ratio for each source IP and alerting on outliers (e.g., those in the 98th percentile) can effectively identify scanning behavior without relying on specific signatures.
    answer_sources:
      - Zeek conn.log
      - Network firewalls, intrusion detection systems, externally facing hosts, and internal network choke points between security zones.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each source_ip over 5-minute window
          CALCULATE ratio = (failed_connections + rejected_connections) / successful_connections
          IF ratio > 98th_percentile_of_all_ratios
            GENERATE alert
  - question: Has an unsupervised clustering algorithm identified any network traffic as an outlier or part of a small, anomalous cluster?
    context: >
      Clustering algorithms like DBSCAN can group network connections based on their characteristics (source, port distribution, flags, etc.) without prior labeling. Normal, legitimate traffic will form large, dense clusters. Malicious activity, such as scanning or other anomalies, will often appear as outliers (noise points) or form their own small, distinct clusters. This provides a powerful, unsupervised method for discovering novel attack patterns.
    answer_sources:
      - Zeek conn.log
      - Network firewalls, intrusion detection systems, externally facing hosts, and internal network choke points between security zones.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          APPLY DBSCAN clustering to network connection logs
          FEATURES = (source_ip, dest_port_dist, tcp_flags, conn_state)
          IF a connection is classified as an outlier or part of a small cluster
            GENERATE alert
  - question: Has a new firewall 'allow' rule been created immediately following a series of blocked connection attempts from the now-permitted source IP?
    context: >
      This is a direct detection for a port-knocking-like technique at the host level. An adversary sends a specific sequence of packets that are blocked by the firewall (the 'knock'). This knock is detected by a malicious implant on the host, which then creates a new firewall rule to allow the adversary's IP address. Correlating the block events with the subsequent rule change and 'allow' event provides a high-fidelity alert for this activity.
    answer_sources:
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Windows Event ID 4950
      - Host-based firewalls on critical servers (e.g., Domain Controllers, database servers) and administrator workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH for firewall rule change ('Win Event 4950') or new allow event ('Win Event 5156')
          CHECK for a series of block events ('Win Event 5157') from the same source_ip in the last 5 minutes
          IF preceding block events are found
            GENERATE alert
  - question: Has a port that is historically almost always blocked on a critical host suddenly started appearing in the firewall 'allow' logs?
    context: >
      By baselining the firewall logs for critical hosts, we can determine which ports are consistently blocked. If a port that is statistically almost never allowed (e.g., in the top 10% of most-blocked ports) suddenly appears in the 'allow' logs, it represents a significant and suspicious change in the host's security posture. This could indicate that a malicious action has opened a previously-closed port.
    answer_sources:
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Windows Event ID 4950
      - Host-based firewalls on critical servers (e.g., Domain Controllers, database servers) and administrator workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each critical_host, create baseline of blocked_port frequencies
          IDENTIFY top 10% most frequently blocked ports
          MONITOR allow_logs ('Win Event 5156')
          IF an allowed connection uses a port from the top_blocked list
            GENERATE alert
  - question: Has a time-series anomaly detector noted a sudden, un-forecasted drop to zero in 'block' events for a port that is normally frequently blocked?
    context: >
      This is an inverse detection method. Instead of looking for a new 'allow' event, we look for the absence of expected 'block' events. A time-series model can predict the normal rate of blocked connections for a specific port. If the model predicts continued blocks but the actual count drops to zero, it's a high-confidence anomaly. This implies that something (like a new firewall rule) has changed to now allow traffic on that port.
    answer_sources:
      - Windows Event ID 5157
      - Windows Event ID 5156
      - Windows Event ID 4950
      - Host-based firewalls on critical servers (e.g., Domain Controllers, database servers) and administrator workstations.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each critical_host and port
          MODEL time-series of block_event_counts ('Win Event 5157')
          IF model predicts > 0 blocks but observes 0
            FLAG as anomaly
            QUERY for corresponding rule change or successful connection
            GENERATE alert
  - question: Have we observed traffic with signaling characteristics (like port knocking) involving an IP address on a known C2 threat intelligence feed?
    context: >
      This combines two powerful indicators: behavioral patterns (signaling) and reputation data (threat intelligence). If a connection sequence matches a signaling pattern like a port knock, and the source or destination IP is a known malicious C2 server, the confidence of a true positive is extremely high. Integrating CTI directly into the network sensor (e.g., Zeek) allows for real-time correlation and critical alerting.
    answer_sources:
      - Zeek conn.log
      - Zeek intel.log
      - Windows Event ID 5157
      - Network egress points, DNS servers, and proxy servers where outbound connections are logged.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DETECT signaling pattern (e.g., port knock) involving an IP_address
          CHECK if IP_address is in C2_threat_intel_feed
          IF match is found
            GENERATE critical_alert
  - question: Have any outbound connections, preceded by inbound signaling activity, received a high risk score based on CTI and other factors?
    context: >
      A risk score can be calculated for each connection by combining multiple weak indicators into a stronger one. Factors can include the IP's reputation score from CTI, the rarity of the destination port, and the data volume. If a connection is established immediately after a suspected signaling event, its risk score should be significantly boosted. This allows for alerting on connections that cross a high-risk threshold.
    answer_sources:
      - Zeek conn.log
      - Zeek intel.log
      - Windows Event ID 5157
      - Network egress points, DNS servers, and proxy servers where outbound connections are logged.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each outbound connection
          ENRICH with CTI_reputation_score
          CALCULATE risk_score based on (CTI_score, port_rarity, data_volume)
          IF connection was preceded by inbound_signaling_activity
            INCREASE risk_score
          IF risk_score > 99.5th_percentile
            GENERATE alert
  - question: Has a machine learning model classified any connection as a C2 attempt, especially if it was preceded by a signaling pattern?
    context: >
      A dedicated classification model can be trained to identify C2 connections. By using a rich feature set including IP/ASN reputation, TLS hashes (JA3/JA3S), and a specific feature indicating whether the connection was preceded by a known signaling pattern, the model can provide a highly accurate probability score for each connection being malicious C2, improving detection accuracy.
    answer_sources:
      - Zeek conn.log
      - Zeek intel.log
      - Windows Event ID 5157
      - Network egress points, DNS servers, and proxy servers where outbound connections are logged.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each connection
          EXTRACT features (ip_rep, asn_rep, ja3, preceded_by_signal)
          APPLY trained_C2_classification_model
          IF model_probability > alert_threshold
            GENERATE alert
  - question: Have we observed a specific multi-stage network sequence matching a known malware TTP, such as a magic UDP packet followed by a TCP callback?
    context: >
      Some malware families use a specific, hardcoded sequence to activate their C2 channel. A common example is receiving an inbound UDP packet with a 'magic value' which triggers the implant to initiate an outbound TCP connection back to the UDP source. A stateful signature that detects this exact sequence of events provides a very high-fidelity detection for that specific malware TTP.
    answer_sources:
      - Zeek conn.log
      - Network egress points and internal network segments monitoring traffic between endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          DETECT inbound UDP packet to host_A from source_B with specific_payload
          IF within 30 seconds
            DETECT outbound TCP connection from host_A to source_B on non-standard_port
            GENERATE alert
  - question: Have we observed a statistically unusual frequency of paired inbound UDP/outbound TCP events between an internal host and a single external IP?
    context: >
      This is a statistical approach to find the 'trigger-and-callback' pattern without knowing the specific payload or ports. By tracking pairs of (inbound UDP from X, outbound TCP to X) within a short time window, we can baseline what is normal. If a particular external IP (X) is involved in these paired events far more frequently than any other, it suggests a non-random, potentially malicious relationship.
    answer_sources:
      - Zeek conn.log
      - Network egress points and internal network segments monitoring traffic between endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each internal_host
          TRACK (inbound_UDP_from_X, outbound_TCP_to_X) pairs within 60s window
          CALCULATE frequency of pairs for each external_ip_X
          IF frequency for a specific X > 99th_percentile
            GENERATE alert
  - question: Has a sequence-aware model like an LSTM flagged a sequence like (inbound UDP, outbound TCP) to a new external entity as anomalous?
    context: >
      LSTMs are well-suited to learning normal sequences of events. We can represent a host's network activity as a sequence of tuples (protocol, direction, port). The model learns what sequences are common (e.g., DNS query out, DNS response in). A sequence that breaks the learned pattern, such as an unsolicited inbound UDP packet followed by an outbound TCP connection to a new destination, will be flagged as a high-scoring anomaly.
    answer_sources:
      - Zeek conn.log
      - Network egress points and internal network segments monitoring traffic between endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MODEL host network activity as sequences of (protocol, direction, port) tuples
          TRAIN LSTM to learn normal sequences
          IF a new sequence like (UDP-in, TCP-out) to a new_entity is observed
          AND model flags it as a high-scoring anomaly
            GENERATE alert
  - question: Has a host that has been inactive for over 24 hours initiated an outbound connection immediately after receiving an unsolicited inbound packet?
    context: >
      Dormant implants may remain inactive for long periods to evade detection. They 'wake up' upon receiving a trigger packet. This rule specifically looks for this behavior by maintaining a state of active hosts. If a host is marked as 'inactive' for a long time (e.g., >24 hours) and then suddenly sends outbound traffic right after receiving an unsolicited inbound packet, it's a strong signal of activation.
    answer_sources:
      - Zeek conn.log
      - Endpoint subnets, especially for user workstations and servers that have predictable on/off cycles.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MAINTAIN state table of active hosts
          IF host is 'inactive' for > 24 hours
          AND host receives unsolicited_inbound_packet
          AND host sends outbound_traffic within 5 minutes
            GENERATE high_priority_alert
  - question: Has any host ended a 'silent period' (time between outbound connections) that was statistically much longer than its average?
    context: >
      This is another way to detect a host being 'awakened'. By calculating the average and standard deviation of the 'silent time' between a host's outbound communications, we can establish a baseline of its normal activity rhythm. If a host suddenly communicates after a silent period that is an extreme outlier (e.g., more than 4 standard deviations above the mean), it suggests the communication was not part of its normal pattern and was likely triggered externally.
    answer_sources:
      - Zeek conn.log
      - Endpoint subnets, especially for user workstations and servers that have predictable on/off cycles.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, calculate mean and stdev of 'silent_time' between outbound connections
          FOR each new outbound connection
          CALCULATE duration of preceding silent_time
          IF duration > (mean + 4 * stdev)
            GENERATE alert
  - question: Has a time-series forecasting model detected outbound traffic from a host during a period when zero traffic was forecasted?
    context: >
      Time-series forecasting models like Prophet can learn a host's daily and weekly traffic patterns, including periods where it is typically silent. The model produces a forecast with an uncertainty interval. If the host generates any outbound traffic during a time when the forecast (including the uncertainty band) is zero, it constitutes a high-confidence anomaly. This can be made even stronger if it occurs shortly after an inbound signaling event.
    answer_sources:
      - Zeek conn.log
      - Endpoint subnets, especially for user workstations and servers that have predictable on/off cycles.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each host, model bytes_out time series with Prophet
          IF actual_bytes_out > 0 during a period where forecast_upper_bound is 0
            FLAG as anomaly
            IF anomaly occurred after an inbound_signaling_event
              INCREASE alert severity
            GENERATE alert
  - question: After a suspected signaling event, has the target host established a new, periodic, low-volume connection indicative of C2 beaconing?
    context: >
      After a successful signal (like a port knock), the implant often establishes a C2 channel. This channel frequently manifests as highly regular, periodic 'beaconing' traffic. This rule first identifies a connection established after a signal, then monitors subsequent traffic to that same destination. If it observes a highly regular pattern in time intervals and data sizes, it classifies the traffic as beaconing.
    answer_sources:
      - Zeek conn.log
      - Network egress points (firewalls, proxies) where outbound C2 traffic would be visible.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FLAG destination_IP/port connected to after a signaling_event
          MONITOR subsequent connections to flagged_destination
          IF > 10 connections with time_interval_jitter < 10% AND payload_size_jitter < 10 bytes
            CLASSIFY as beaconing and GENERATE alert
  - question: For a connection established after a signal, does the traffic exhibit low standard deviation in time deltas and low entropy in payload sizes?
    context: >
      This is a statistical method to detect beaconing. Highly periodic traffic will have a very low standard deviation in the time between connections. Repetitive C2 check-ins often use similar or identical packet sizes, resulting in low entropy. The combination of these two statistical properties in traffic to a destination that was activated by a signal is a very strong indicator of automated C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Network egress points (firewalls, proxies) where outbound C2 traffic would be visible.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR connections to a post-signal destination
          CALCULATE stdev of time_delta_between_connections
          CALCULATE entropy of payload_sizes
          IF stdev is very_low AND entropy is very_low
            GENERATE alert
  - question: For a connection established after a signal, does a Fast Fourier Transform (FFT) of the connection times reveal a strong periodic signal?
    context: >
      FFT is a powerful mathematical technique for identifying periodic components in a time series. By applying an FFT to the series of connection start times, we can move from the time domain to the frequency domain. A strong, sharp peak in the frequency domain is a definitive sign of periodicity, which is a hallmark of C2 beaconing. This automates the discovery of regular communication intervals.
    answer_sources:
      - Zeek conn.log
      - Network egress points (firewalls, proxies) where outbound C2 traffic would be visible.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR a source-destination pair established after a signal
          CREATE time series of connection_start_times
          APPLY FFT to the time series
          IF a sharp peak with high power-to-noise ratio is found
            GENERATE alert for beaconing at that frequency