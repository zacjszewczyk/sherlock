name: T1021.003: Distributed Component Object Model
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps analysts investigate potential lateral movement using the Distributed Component Object Model (DCOM), as defined by MITRE ATT&CK technique T1021.003. The primary goal is to determine if an adversary is leveraging DCOM for remote execution. Investigative angles include correlating network traffic on TCP port 135 with remote host logons, identifying suspicious process creation chains originating from DCOM-related parent processes (e.g., mmc.exe, excel.exe), monitoring for anomalous child processes spawned by the DCOM surrogate `dllhost.exe`, detecting network patterns indicative of DCOM spraying (a single host connecting to many destinations), and observing modifications to sensitive DCOM-related registry keys (AppID, CLSID) that may precede remote access.
type: technique
related:
- TA0008: Lateral Movement
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Can we detect suspicious DCOM activity by correlating network traffic to port 135 with remote logon events from watchlisted IPs or users?
  context: |
    This question aims to identify high-fidelity instances of potential lateral movement. By correlating network-level DCOM connection attempts (TCP port 135) with host-level successful remote logons (Logon Type 3), we can link a specific network action to a successful authentication event. Layering on watchlists for suspicious IP addresses and user accounts helps to filter out benign administrative activity and focus on known or suspected threat actor infrastructure or compromised accounts.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Internal network segments, Domain Controllers, Member Servers, Core network switches providing traffic telemetry
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      JOIN (
        SELECT source_ip, dest_ip, timestamp
        FROM network_logs
        WHERE dest_port = 135
        AND source_ip IN watchlist_ips
      ) AS net
      ON net.dest_ip = win.host
      AND net.source_ip = win.source_network_address
      WITH (
        SELECT host, source_network_address, account_name, timestamp
        FROM auth_logs
        WHERE event_id = 4624
        AND logon_type = 3
        AND account_name IN watchlist_users
      ) AS win
      WHERE win.timestamp - net.timestamp BETWEEN 0 AND 60 SECONDS
- question: Can we identify hosts exhibiting an unusual burst of outbound DCOM activity compared to their own historical baseline?
  context: |
    This question focuses on detecting anomalous behavior on a per-host basis. Adversaries using DCOM for lateral movement may cause a sudden spike in outbound connections on port 135 from a compromised host. By establishing a 30-day baseline of normal activity for each host, accounting for time-of-day patterns, and alerting on significant deviations (e.g., 3 standard deviations), we can spot these outliers without relying on pre-defined signatures or watchlists. This is effective for catching previously unknown attack patterns.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Internal network segments, Domain Controllers, Member Servers, Core network switches providing traffic telemetry
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR EACH host:
        // Calculate 30-day baseline for the current hour
        historical_avg = AVG(COUNT(outbound_dcom_connections)) PER HOUR OVER 30 days
        historical_stddev = STDEV(COUNT(outbound_dcom_connections)) PER HOUR OVER 30 days

        // Check current hour
        current_count = COUNT(outbound_dcom_connections) in last 1 hour
        IF current_count > (historical_avg + 3 * historical_stddev):
          ALERT "Anomalous DCOM activity from host"
- question: Can we use a machine learning model to score the maliciousness of individual DCOM connections based on various contextual features?
  context: |
    This question proposes an advanced, data-driven approach. A supervised model (e.g., Random Forest) can learn complex patterns from labeled historical data. By using features like source/destination IP, historical communication frequency, time of day, data volume, and watchlist inclusion, the model can provide a risk score for every new DCOM connection. This allows analysts to prioritize the most suspicious activity in a high-volume environment.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Internal network segments, Domain Controllers, Member Servers, Core network switches providing traffic telemetry
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Feature Engineering
      FOR EACH dcom_connection:
        features = {
          source_ip, dest_ip,
          historical_freq(source, dest),
          time_of_day, bytes_transferred,
          is_on_watchlist(source_user)
        }

      // Scoring
      prediction = ml_model.predict(features)
      IF prediction == 'malicious':
        ALERT "High-risk DCOM connection detected by ML model"
- question: Have any common DCOM-related parent processes spawned suspicious child processes used for command-line interaction?
  context: |
    Adversaries often abuse legitimate applications that use DCOM (like Microsoft Office or MMC) to execute malicious code. This question looks for a common TTP where a process like 'excel.exe' or 'outlook.exe' spawns a shell process like 'cmd.exe' or 'powershell.exe'. This is highly unusual for normal application behavior and is a strong indicator of remote code execution via DCOM.
  answer_sources:
  - Windows Event ID 4688 (with command line logging enabled)
  - Workstations, Application Servers, Domain Controllers, High-value user endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT * FROM process_creation_logs
      WHERE event_id = 4688
      AND parent_process IN ['mmc.exe', 'excel.exe', 'winword.exe', 'outlook.exe', 'mshta.exe']
      AND child_process IN ['cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'rundll32.exe']
- question: Are there any statistically rare parent-child process relationships involving DCOM-related applications?
  context: |
    This question moves beyond a static list of suspicious pairs to a data-driven approach. By calculating the probability of every parent-child process pair observed across the enterprise, we can identify events that are extremely uncommon. For example, if 'excel.exe' spawning 'powershell.exe' has only occurred a handful of times in 90 days out of millions of process events, it is a statistical anomaly worth investigating, even if not on a predefined blocklist. This helps find novel or targeted attack variations.
  answer_sources:
  - Windows Event ID 4688 (with command line logging enabled)
  - Workstations, Application Servers, Domain Controllers, High-value user endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Baseline calculation (over 90 days)
      prob_table = CALCULATE P(Child | Parent) for all process pairs

      // Real-time check
      FOR EACH new_process_event:
        IF parent_process IN DCOM_related_list:
          event_prob = prob_table.lookup(parent_process, child_process)
          IF event_prob < 1st_percentile_of_all_probs:
            ALERT "Statistically rare DCOM-related process creation"
- question: Can an unsupervised model identify anomalous process creation events related to DCOM without prior labeling?
  context: |
    This question proposes using an unsupervised model like an Isolation Forest to find outliers in process creation data. Instead of just looking at parent-child names, this model considers multiple features at once: the parent, the child, the user context, command-line length, and entropy. It can identify unusual combinations that a human or simple rule might miss, such as 'outlook.exe' spawning 'powershell.exe' with an abnormally long and complex (high entropy) command line, which is a strong sign of obfuscated, fileless malware.
  answer_sources:
  - Windows Event ID 4688 (with command line logging enabled)
  - Workstations, Application Servers, Domain Controllers, High-value user endpoints
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Feature Engineering
      FOR EACH process_event:
        features = {
          parent_process, child_process,
          user_context, command_line_length,
          command_line_entropy
        }

      // Anomaly detection
      anomaly_score = isolation_forest_model.predict(features)
      IF anomaly_score is high:
        ALERT "Anomalous process creation event detected by unsupervised model"
- question: Has the DCOM Surrogate process (dllhost.exe) spawned any unauthorized child processes or been executed by a non-SYSTEM user?
  context: |
    The 'dllhost.exe' process is a legitimate Windows component that hosts COM objects. However, adversaries can abuse it to execute malicious code. This question sets up a two-pronged detection. First, it checks if 'dllhost.exe' is running under any user context other than the typical 'NT AUTHORITY\\SYSTEM', which is suspicious. Second, it checks if the child process spawned by 'dllhost.exe' is on a pre-approved allowlist for your environment. Any process not on the list is a strong candidate for investigation.
  answer_sources:
  - Windows Event ID 4688 (with command line logging enabled)
  - Application Servers, Workstations with custom COM objects, Member Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT * FROM process_creation_logs
      WHERE event_id = 4688
      AND parent_process = 'dllhost.exe'
      AND (
        user_context != 'NT AUTHORITY\\SYSTEM'
        OR child_process NOT IN (allowlist_of_dllhost_children)
      )
- question: Has a child process of dllhost.exe been executed with an unusually complex or obfuscated command line?
  context: |
    Even if a child process of 'dllhost.exe' is a legitimate, allowlisted application (like 'cmd.exe'), adversaries can pass malicious instructions through its command-line arguments. This question aims to detect this by analyzing the entropy (a measure of randomness or complexity) of the command line. A baseline for normal command-line entropy is established for each legitimate child process. An alert is triggered if a new instance has a command line with an entropy that is statistically significantly higher than its baseline, suggesting obfuscation or packed commands.
  answer_sources:
  - Windows Event ID 4688 (with command line logging enabled)
  - Application Servers, Workstations with custom COM objects, Member Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Establish baseline for each child process of dllhost.exe
      FOR EACH child_process_name:
        baseline_entropy_avg = AVG(entropy(command_line)) OVER 90 days
        baseline_entropy_stddev = STDEV(entropy(command_line)) OVER 90 days

      // Real-time check
      FOR EACH new event where parent is 'dllhost.exe':
        current_entropy = entropy(command_line)
        IF current_entropy > (baseline_entropy_avg + 3 * baseline_entropy_stddev):
          ALERT "Anomalous command-line entropy for dllhost.exe child"
- question: Can we use clustering to find rare and potentially malicious dllhost.exe child process activity?
  context: |
    This question proposes using a clustering algorithm like DBSCAN to automatically group similar 'dllhost.exe' child process events. Normal, repetitive system activity will form dense clusters. Malicious or rare administrative actions will not fit into these clusters and will be classified as 'noise' or outliers. By vectorizing features like the child process name, user context, and a TF-IDF representation of the command-line arguments, this technique can effectively surface novel threats without relying on predefined rules or baselines.
  answer_sources:
  - Windows Event ID 4688 (with command line logging enabled)
  - Application Servers, Workstations with custom COM objects, Member Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Vectorize features for all dllhost.exe child process events
      event_vectors = vectorize(child_process_name, user_context, tfidf(command_line))

      // Cluster the data
      clusters = DBSCAN.fit(event_vectors)

      // Alert on noise
      FOR EACH event classified as 'noise':
        ALERT "Outlier dllhost.exe child process event detected by clustering"
- question: Has any DCOM traffic violated established network segmentation policies?
  context: |
    This is a high-fidelity detection based on network architecture. Many organizations have network segmentation policies that forbid direct communication between certain zones (e.g., a standard user workstation VLAN should not communicate with a production database or SCADA systems VLAN). This question checks for any DCOM traffic (TCP port 135) that crosses these forbidden boundaries. Any such connection is an immediate policy violation and a high-severity security event that requires investigation.
  answer_sources:
  - Zeek conn.log
  - East-West traffic on core network switches, Internal network segments, VLANs containing servers and workstations
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SELECT * FROM network_logs
      WHERE dest_port = 135
      AND IS_VIOLATION(source_zone, dest_zone) = TRUE
- question: Is any single host performing DCOM 'spraying' by connecting to an abnormally large number of unique destinations?
  context: |
    Adversaries often automate lateral movement, causing a compromised host to rapidly attempt DCOM connections to many other hosts on the network in a 'spraying' pattern. This question aims to detect this behavior. By counting the number of unique destination IPs each source host connects to on port 135 within a short window (e.g., 1 hour), we can identify outliers. A host whose connection count exceeds a high percentile (e.g., the 99th) of all other hosts is exhibiting anomalous fan-out behavior indicative of scanning or automated lateral movement.
  answer_sources:
  - Zeek conn.log
  - East-West traffic on core network switches, Internal network segments, VLANs containing servers and workstations
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Calculate threshold
      percentile_99 = 99th_percentile(COUNT(UNIQUE dest_ip)) for all source_ips in last hour on port 135

      // Check hosts against threshold
      FOR EACH source_ip:
        unique_dest_count = COUNT(UNIQUE dest_ip) in last hour on port 135
        IF unique_dest_count > percentile_99:
          ALERT "Potential DCOM spraying detected from source_ip"
- question: Has there been an abnormal surge in the rate of new DCOM source-destination pairs across the network?
  context: |
    This question looks for a macro-level anomaly across the entire network. A time-series forecasting model (like Prophet or SARIMA) can learn the normal 'heartbeat' of DCOM activity, including daily and weekly cycles. If an adversary begins a large-scale lateral movement campaign, it will likely create many new, never-before-seen DCOM source-destination connections. This would cause a spike in the observed rate of new pairs, exceeding the model's predicted upper confidence bound and triggering an alert for a network-wide anomaly.
  answer_sources:
  - Zeek conn.log
  - East-West traffic on core network switches, Internal network segments, VLANs containing servers and workstations
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Train model on historical data
      model = train_timeseries_model(COUNT(NEW source-dest pairs per minute))

      // Predict and compare
      predicted_upper_bound = model.predict_upper_bound(current_minute)
      observed_count = COUNT(NEW source-dest pairs) in current_minute
      IF observed_count > predicted_upper_bound:
        ALERT "Anomalous spike in new DCOM connections network-wide"
- question: Have there been any modifications to DCOM-related registry keys followed closely by a remote network logon?
  context: |
    To enable certain DCOM-based attacks, an adversary may first need to modify registry keys that control COM object permissions or server registrations (keys under AppID or CLSID). This question sets up a correlation to detect this setup activity. It triggers an alert if a modification to one of these sensitive registry paths is followed within a short time window (e.g., 10 minutes) by a remote logon (Logon Type 3) to the same host, especially from an IP not on an administrative allowlist. This sequence strongly suggests COM hijacking for remote access.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4624
  - Zeek conn.log
  - Registry hives on critical servers and workstations, Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      JOIN (
        SELECT host, timestamp FROM registry_logs
        WHERE event_id = 4657
        AND key_path CONTAINS ('\\AppID\\' OR '\\CLSID\\')
      ) AS reg
      ON reg.host = logon.host
      WITH (
        SELECT host, source_ip, timestamp FROM auth_logs
        WHERE event_id = 4624 AND logon_type = 3
        AND source_ip NOT IN admin_subnets
      ) AS logon
      WHERE logon.timestamp - reg.timestamp BETWEEN 0 AND 10 MINUTES
- question: Has any host experienced an unusual burst of modifications to DCOM-related registry keys?
  context: |
    This question uses behavioral analysis to detect reconnaissance or setup for COM hijacking. Instead of looking for a single specific change, it profiles the rate of change for sensitive DCOM registry paths (`HKEY_CLASSES_ROOT\\CLSID\\` and `HKEY_CLASSES_ROOT\\AppID\\`) on a per-host basis. If the number of modification events in a short window (e.g., 1 hour) on a single host dramatically exceeds its own historical average (e.g., by 3 standard deviations), it indicates an abnormal level of activity that could be part of an attack script modifying multiple keys.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4624
  - Zeek conn.log
  - Registry hives on critical servers and workstations, Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Establish baseline for each host
      baseline_avg = AVG(COUNT(dcom_reg_mod_events)) per hour OVER 90 days
      baseline_stddev = STDEV(COUNT(dcom_reg_mod_events)) per hour OVER 90 days

      // Real-time check
      current_count = COUNT(dcom_reg_mod_events) in last hour
      IF current_count > (baseline_avg + 3 * baseline_stddev):
        ALERT "Anomalous rate of DCOM registry modifications on host"
- question: Can a sequence analysis model detect anomalous chains of events involving DCOM registry modifications and logons?
  context: |
    This question proposes using an advanced model like a Long Short-Term Memory (LSTM) network to understand the normal *sequence* of events on a host. The model is trained on vast amounts of event streams (registry mods, process creations, logons) to learn what constitutes typical user and administrative behavior. It can then identify and flag event sequences that have a very low probability of occurring based on its training. A sequence like [Registry CLSID Key Write -> Remote Network Logon -> dllhost.exe process creation] would likely be flagged as highly anomalous and indicative of a DCOM-based attack.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4624
  - Zeek conn.log
  - Registry hives on critical servers and workstations, Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Train model on historical event sequences
      model = train_lstm_on_event_streams(registry_mods, process_events, auth_events)

      // Score new sequences
      current_sequence = [event_n-2, event_n-1, event_n]
      probability = model.predict_probability(current_sequence)
      IF probability is very low:
        ALERT "Anomalous event sequence detected involving DCOM activity"