name: T1021.003: Distributed Component Object Model
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigators determine if an adversary is moving laterally within the network using the Distributed Component Object Model (DCOM). It focuses on identifying malicious DCOM usage by correlating network traffic (TCP port 135) with host-based events such as remote logons, anomalous process creation (e.g., office applications spawning shells), suspicious child processes of the DCOM surrogate (dllhost.exe), widespread DCOM "spraying" across the network, and the modification of specific registry keys (AppID, CLSID) that configure COM objects.
type: technique
related:
  - TA0008: Lateral Movement
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is there evidence of a user or IP from a watchlist initiating DCOM traffic that results in a successful remote logon on a destination host?
    context: This question attempts to link suspicious network activity with a successful host compromise. Correlating DCOM/RPC network traffic (TCP port 135) from a known suspicious IP or user with a subsequent successful remote logon (Logon Type 3) on the target system within a very short time window is a high-fidelity indicator of targeted lateral movement.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Internal network segments
      - Domain Controllers
      - Member Servers
      - Core network switches providing traffic telemetry
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRIGGER on Zeek conn.log where dest_port == 135 AND src_ip IN suspicious_ips_watchlist
          CORRELATE within 1 minute with Windows Event ID 4624 on dest_ip
          WHERE LogonType == 3 AND SourceNetworkAddress == src_ip AND AccountName IN suspicious_users_watchlist
  - question: Has any host exhibited an anomalous burst of outbound DCOM connections compared to its own historical baseline?
    context: This question seeks to identify hosts behaving unusually. By profiling the normal hourly volume of outbound DCOM connections for each host over a 30-day period, we can establish a dynamic baseline. An alert is generated if a host's current hourly connection count significantly exceeds this baseline (e.g., by 3 standard deviations), pointing to a potential scanning or lateral movement burst.
    answer_sources:
      - Zeek conn.log
      - Internal network segments
      - Domain Controllers
      - Member Servers
      - Core network switches providing traffic telemetry
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            CALCULATE 30-day rolling average and stdev of hourly outbound port 135 connections.
          ALERT if current_hour_count > (avg_for_this_hour + 3 * stdev_for_this_hour).
  - question: Can machine learning classify DCOM connections as malicious based on features like communication frequency, time of day, and data volume?
    context: This question explores a proactive, predictive approach to detection. By training a supervised machine learning model (e.g., Random Forest) on features from network logs—such as source/destination, historical communication patterns, time, and data volume—analysts can score new DCOM connections for maliciousness in near real-time, catching subtle attacks that rule-based systems might miss.
    answer_sources:
      - Zeek conn.log
      - Internal network segments
      - Domain Controllers
      - Member Servers
      - Core network switches providing traffic telemetry
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FEATURES = [src_ip, dest_ip, time_of_day, bytes_transferred, is_on_watchlist]
          MODEL = train_random_forest(labeled_dcom_data, FEATURES)
          SCORE new_dcom_connection with MODEL.
  - question: Are common DCOM-related parent processes (like mmc.exe, excel.exe) spawning suspicious child processes (like cmd.exe, powershell.exe)?
    context: Adversaries often abuse legitimate applications that use DCOM to execute malicious code. This question looks for the specific, high-confidence pattern of a trusted parent process (e.g., Microsoft Office applications, MMC) spawning a command-line or scripting interpreter, which is highly indicative of DCOM-based code execution.
    answer_sources:
      - Windows Event ID 4688 (with command line logging enabled)
      - Workstations
      - Application Servers
      - Domain Controllers
      - High-value user endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALERT on Windows Event 4688 where ParentProcessName IN ['mmc.exe', 'excel.exe', 'outlook.exe', 'mshta.exe']
          AND ProcessName IN ['cmd.exe', 'powershell.exe', 'wscript.exe', 'rundll32.exe'].
  - question: Have any DCOM-related parent processes spawned child processes that are statistically rare for the enterprise?
    context: This question moves beyond static lists to find what is truly anomalous in the environment. By calculating the historical probability of every observed parent-child process pair over a 90-day period, we can flag instances where a DCOM-related application spawns a child process that is exceptionally rare (e.g., in the bottom 1st percentile of probabilities), suggesting a novel or unusual execution chain.
    answer_sources:
      - Windows Event ID 4688 (with command line logging enabled)
      - Workstations
      - Application Servers
      - Domain Controllers
      - High-value user endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE P(Child | Parent) for all process pairs over 90 days.
          ALERT when a new event occurs with parent in DCOM_list and P(Child | Parent) < 1st_percentile.
  - question: Can an unsupervised model detect anomalous process creation events originating from DCOM-related parents based on features like command-line entropy?
    context: This question leverages machine learning to find novel threats without prior labeling. An unsupervised model (e.g., Isolation Forest) can analyze features like parent/child process names, user context, and command-line characteristics (length, entropy). It can then identify and flag events that are outliers from the established norm, such as Outlook spawning PowerShell with a highly obfuscated command.
    answer_sources:
      - Windows Event ID 4688 (with command line logging enabled)
      - Workstations
      - Application Servers
      - Domain Controllers
      - High-value user endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FEATURES = [parent_name, child_name, user_context, cmd_line_length, cmd_line_entropy]
          MODEL = train_isolation_forest(process_data, FEATURES)
          FLAG events that the MODEL scores as anomalous.
  - question: Has the DCOM Surrogate process (dllhost.exe) spawned a child process that is not on an allowlist or was initiated by a non-SYSTEM user?
    context: The DCOM Surrogate, dllhost.exe, is a common vehicle for COM-based execution. Legitimate usage typically involves it running as the SYSTEM account and spawning a predictable set of processes. This question targets two key indicators of abuse: execution by a standard user account, or the creation of a child process not on a curated allowlist for the environment.
    answer_sources:
      - Windows Event ID 4688 (with command line logging enabled)
      - Application Servers
      - Workstations with custom COM objects
      - Member Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALERT on Windows Event 4688 where ParentProcessName == 'dllhost.exe'
          AND (UserName != 'NT AUTHORITY\\SYSTEM' OR ProcessName NOT IN dllhost_child_allowlist).
  - question: Is a child process spawned by dllhost.exe using command-line arguments with unusually high entropy, suggesting obfuscation?
    context: Even if dllhost.exe spawns an otherwise legitimate child process, adversaries can pass malicious instructions via obfuscated command-line arguments. This question aims to detect this by establishing a baseline for the normal command-line entropy of each known-good child process. An alert on a significant deviation from this baseline suggests that obfuscated or unusually complex parameters are being used.
    answer_sources:
      - Windows Event ID 4688 (with command line logging enabled)
      - Application Servers
      - Workstations with custom COM objects
      - Member Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each known child_process of dllhost.exe:
            CALCULATE baseline cmd_line_entropy_mean and stdev.
          ALERT on new event if entropy > (mean + 3 * stdev) for that child_process.
  - question: Can clustering analysis identify rare and anomalous 'dllhost.exe' child process events that deviate from normal, dense clusters of activity?
    context: This question uses unsupervised learning to automatically separate normal from abnormal. A density-based clustering algorithm (e.g., DBSCAN) can group the vast majority of repetitive, legitimate dllhost.exe child process events into dense clusters. Any event that does not fit into a cluster is classified as "noise" or an outlier, representing a rare and potentially malicious deviation that warrants investigation.
    answer_sources:
      - Windows Event ID 4688 (with command line logging enabled)
      - Application Servers
      - Workstations with custom COM objects
      - Member Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FEATURES = vectorize([child_process_name, user_context, cmd_line_tfidf])
          CLUSTERS = DBSCAN(dllhost_child_events, FEATURES)
          ALERT on any event classified as a noise point.
  - question: Is DCOM traffic occurring between network zones where it is explicitly forbidden by policy?
    context: This is a high-confidence, policy-based question. If network segmentation is enforced, any observed DCOM/RPC traffic (destination port 135) between zones where it should not exist (e.g., from a general user VLAN to a secure server or SCADA VLAN) constitutes a direct policy violation and a significant security event.
    answer_sources:
      - Zeek conn.log
      - East-West traffic on core network switches
      - Internal network segments
      - VLANs containing servers and workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALERT on Zeek conn.log where dest_port == 135
          AND is_traffic_forbidden(src_zone, dest_zone) == TRUE.
  - question: Has any single host initiated DCOM connections to an abnormally high number of unique destination hosts in a short time frame?
    context: This question is designed to detect "DCOM spraying," a technique where an attacker uses a compromised host to attempt lateral movement to a large number of other hosts. By counting the number of unique destinations (out-degree) for each source host within a sliding window (e.g., 1 hour) and alerting when this count is in the top percentile, we can effectively flag this fan-out behavior.
    answer_sources:
      - Zeek conn.log
      - East-West traffic on core network switches
      - Internal network segments
      - VLANs containing servers and workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          IN 1-hour windows:
            CALCULATE out_degree (unique dest_ips on port 135) for each src_ip.
          ALERT if any host's out_degree > 99th_percentile of all host out_degrees.
  - question: Is the overall rate of new DCOM source-destination pairs across the network significantly exceeding the predicted normal 'heartbeat' of the network?
    context: This question provides a network-wide, macro view of DCOM activity. A time-series forecasting model (e.g., SARIMA, Prophet) can learn the normal ebb and flow of new DCOM connections, including daily and weekly cycles. An alert is triggered when the observed number of new connections significantly exceeds the model's predicted upper confidence bound, which could indicate a large-scale, coordinated lateral movement campaign.
    answer_sources:
      - Zeek conn.log
      - East-West traffic on core network switches
      - Internal network segments
      - VLANs containing servers and workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_timeseries_model(historical_new_dcom_pairs_per_minute)
          PREDICT expected_count and confidence_interval for current_minute.
          ALERT if observed_count > upper_confidence_bound.
  - question: Has a DCOM-related registry key (AppID, CLSID) been modified, followed shortly by a remote network logon to the same host?
    context: This question looks for a common attack sequence. Adversaries often modify DCOM-related registry keys to hijack legitimate COM objects or change their permissions. Correlating this preparatory action with a subsequent remote network logon (Logon Type 3) from an external or non-standard source is a strong signal that an attacker is setting up and then utilizing a DCOM-based backdoor.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4624
      - Zeek conn.log
      - Registry hives on critical servers and workstations
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRIGGER on Windows Event 4657 where ObjectName contains '\\AppID\\' or '\\CLSID\\'
          CORRELATE within 10 minutes with Windows Event 4624 on same host
          WHERE LogonType == 3 AND SourceNetworkAddress NOT IN admin_subnets_allowlist.
  - question: Has any host experienced an abnormally high rate of modifications to DCOM-related registry keys?
    context: While occasional modification of DCOM registry keys is normal (e.g., during software installs), a flurry of such changes on a single machine is highly suspicious. This question establishes a baseline rate of change for these specific keys on a per-host basis and alerts if the current rate in a given window exceeds the historical average by a significant margin (e.g., 3 standard deviations), indicating potential COM hijacking or persistence setup.
    answer_sources:
      - Windows Event ID 4657
      - Registry hives on critical servers and workstations
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            CALCULATE baseline rate and stdev of Event 4657 on CLSID/AppID keys.
          ALERT if current_hour_rate > (baseline_rate + 3 * stdev).
  - question: Can a sequence analysis model detect anomalous sequences of events involving DCOM registry modifications, network logons, and process creations?
    context: This question proposes using an advanced model (e.g., an LSTM) to understand the 'grammar' of normal host activity. The model learns valid sequences of events. It can then flag a sequence like [Registry CLSID Write -> Remote Logon -> dllhost.exe Spawn] as anomalous because it has a very low probability of occurring in legitimate operations, effectively detecting the entire attack chain.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Zeek conn.log
      - Registry hives on critical servers and workstations
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_lstm_on_event_sequences(event_streams)
          FOR each new event sequence on a host:
            CALCULATE probability of sequence with MODEL.
          ALERT if probability is below a learned threshold.