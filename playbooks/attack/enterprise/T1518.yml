name: T1518: Software Discovery
id: f4a7b8c9-d0e1-4f2a-8b3c-1d4e5f6a7b8c
description: This playbook helps investigate whether an adversary is performing reconnaissance of installed software on the network. This activity can be identified by observing the execution of known discovery tools or scripts, the use of built-in system commands (e.g., 'wmic', 'Get-Package') by non-administrative users, high-volume read attempts to registry keys associated with installed software (e.g., HKLM:\...\Uninstall), and the correlation of these discovery actions with subsequent anomalous network behavior, such as internal scanning or communication with suspicious external destinations, which could indicate data exfiltration.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any processes running with file hashes that match known software discovery tools or scripts?
  context: Adversaries often use well-known reconnaissance tools like Seatbelt or SharpHound to discover software on a system. Matching process execution events against a curated list of malicious file hashes for these tools is a high-fidelity method for detecting their presence and use.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations and servers), Domain Controllers, and Critical Application Servers where process creation logging is enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE process_hash IN (known_malicious_discovery_tool_hashes)
- question: Have any rarely seen processes been executed across the enterprise recently?
  context: Malicious tools are often not widely deployed like legitimate software. Calculating the prevalence of each executed process hash across the enterprise can help identify outliers. A process hash that has run on a very small percentage of hosts (e.g., less than 1%) and is not part of a known, legitimate software deployment or administrative action is highly suspicious and warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations and servers), Domain Controllers, and Critical Application Servers where process creation logging is enabled.
  range: Last 30 days
  queries:
  - technology: pseudocode
    query: CALCULATE prevalence(process_hash) across all hosts over 30 days. FILTER process_hash WHERE prevalence < 1% AND process NOT IN (approved_software_list)
- question: Has a machine learning model identified any process executions as suspicious or malicious based on their characteristics?
  context: A pre-trained classification model can analyze multiple features of a process execution event—such as the parent process, user context, command-line arguments, and hash prevalence—to identify complex patterns of maliciousness. A classification of 'malicious' or 'suspicious' for a rare process serves as a high-confidence indicator that requires immediate analysis.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations and servers), Domain Controllers, and Critical Application Servers where process creation logging is enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: INPUT process_creation_events INTO classification_model. RETURN events WHERE prediction IN ('malicious', 'suspicious')
- question: Are built-in software discovery commands being executed by users or processes not associated with system administration?
  context: Adversaries abuse legitimate, built-in commands (e.g., 'wmic product get', 'Get-Package', 'rpm -qa') to enumerate installed software without dropping new tools on a system. While these commands are used by administrators, their execution by regular users or from non-standard parent processes (e.g., a web server process) is a strong indicator of malicious reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows endpoints and servers with command-line process auditing and PowerShell Script Block Logging enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (process_logs OR powershell_logs) WHERE command_line MATCHES (discovery_command_regex) AND executing_user NOT IN (admin_group) AND parent_process NOT IN (it_management_tools)
- question: Has any user account shown an unusual increase in the frequency or complexity of software discovery commands?
  context: By establishing a historical baseline of command execution for each user, you can detect anomalous behavior. A sudden spike in the number of discovery-related commands or an increase in their complexity (entropy) for a user who does not typically perform such actions can indicate that their account has been compromised and is being used for internal reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows endpoints and servers with command-line process auditing and PowerShell Script Block Logging enabled.
  range: Last 30 days
  queries:
  - technology: pseudocode
    query: FOR each user, CALCULATE baseline of discovery_command_frequency over 30 days. ALERT if current_day_frequency > 95th_percentile(baseline)
- question: Has a time-series model detected an anomalous spike in the overall frequency of discovery-related commands on any host or by any user?
  context: A time-series anomaly detection model can learn the normal rhythm of discovery command usage across the environment. This approach can identify significant deviations from the forecasted pattern of activity, flagging unusual spikes per host or per user that might indicate a coordinated or widespread reconnaissance effort.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows endpoints and servers with command-line process auditing and PowerShell Script Block Logging enabled.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: INPUT discovery_command_frequency_per_host_per_user INTO time_series_model. ALERT on significant_deviations_from_forecast
- question: Has any process, not on an allowlist, rapidly read a large number of registry keys related to installed software?
  context: A common method for software discovery is to query the Windows Registry, specifically keys under 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall'. A process that is not a known inventory tool generating hundreds of read events for these keys in a very short time frame is a strong indicator of active reconnaissance. This detection requires specific audit policies (SACLs) to be configured on the relevant registry hives.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on high-value assets and standard endpoints, requiring SACLs configured to audit read access on specific software-related registry hives (e.g., 'HKLM\SOFTWARE').
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_audit_logs WHERE event_id=4663 AND object_name CONTAINS 'Uninstall'. COUNT events per process per minute. ALERT if count > 100 AND process NOT IN (allowlist)
- question: Has any process exhibited a statistically significant increase in its rate of reading software-related registry keys?
  context: This is a more advanced detection method that establishes a normal baseline for the rate of registry reads for each process on a host. By alerting when a process exceeds its typical behavior by a statistically significant margin (e.g., 3 standard deviations above its mean), this approach can catch more subtle or "low-and-slow" enumeration attempts that might evade a simple volumetric threshold.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on high-value assets and standard endpoints, requiring SACLs configured to audit read access on specific software-related registry hives (e.g., 'HKLM\SOFTWARE').
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process, CALCULATE baseline_rate of registry_reads_to_software_hives. ALERT if current_rate > (mean + 3 * std_dev) of baseline
- question: Have any processes been identified as anomalous outliers by a clustering algorithm based on their registry access behavior?
  context: Machine learning, specifically clustering algorithms like DBSCAN, can group processes based on multiple behavioral features, such as the volume of registry reads, the entropy of the paths being accessed, and the parent process. Malicious reconnaissance activity will often form a small, distinct cluster separate from the large clusters of normal system behavior, allowing it to be identified as an anomalous outlier for investigation.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on high-value assets and standard endpoints, requiring SACLs configured to audit read access on specific software-related registry hives (e.g., 'HKLM\SOFTWARE').
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER processes based on (registry_read_volume, path_entropy, parent_process). INVESTIGATE processes in sparse, anomalous_clusters
- question: Did any host that performed software discovery subsequently connect to a low-reputation or newly seen external destination?
  context: Software discovery is often a precursor to another action, such as data exfiltration. This question seeks to connect the dots by correlating a confirmed discovery event on a host with subsequent suspicious network egress from that same host. A connection to a known bad IP or a domain registered within the last 24 hours shortly after discovery is a high-confidence indicator of potential exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points and internal network segments monitored by Zeek sensors, endpoint process logs, and DNS resolvers.
  range: 30 minutes following a discovery event
  queries:
  - technology: pseudocode
    query: IF software_discovery_alert_on_host, THEN SEARCH network_logs FOR 30_minutes WHERE source_ip=host_ip AND (destination_ip_reputation='low' OR destination_domain_age < 24h)
- question: Did any host that performed software discovery subsequently begin scanning the internal network?
  context: After identifying installed software, an adversary may scan the internal network to find other machines running the same, potentially vulnerable, software. This question looks for this pivot to internal reconnaissance by monitoring a host's network activity after a discovery alert. A sudden, sharp increase in the number of unique internal IPs and ports it connects to is indicative of scanning for lateral movement.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Network egress points and internal network segments monitored by Zeek sensors, endpoint process logs, and DNS resolvers.
  range: 1 hour following a discovery event
  queries:
  - technology: pseudocode
    query: IF software_discovery_alert_on_host, THEN MONITOR network_logs FOR 1_hour. COUNT unique_internal_destinations. ALERT if count > 99th_percentile(host_baseline)
- question: Has graph analysis revealed that a host, after performing software discovery, anomalously changed its network communication patterns?
  context: Graph-based analysis can model the normal relationships and communication flows between hosts on a network. If a host that recently performed software discovery suddenly and significantly changes its position in the network graph—for example, by changing its community or centrality score by making many new, short-lived connections—it indicates a fundamental shift in behavior consistent with post-discovery scanning or preparation for lateral movement.
  answer_sources:
  - Zeek conn.log
  - Network egress points and internal network segments monitored by Zeek sensors, endpoint process logs, and DNS resolvers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: BUILD host_communication_graph from network_logs. IF host triggers discovery_alert, MONITOR its graph_centrality_score. ALERT on significant_change