name: T1027.005: Indicator Removal from Tools
id: 5b991a3c-3523-4188-812e-213203039537
description: This playbook focuses on detecting adversaries who modify their tools to evade signature-based defenses. This involves identifying the use of binary packers or obfuscators on non-standard hosts, detecting network-transferred executables that are variants of known malware through fuzzy hashing, and correlating AV/EDR blocks with immediate follow-up activity. It also looks for on-host compilation of malicious code on non-developer machines and detects processes that attempt to modify their own executable file on disk, a behavior known as self-modification.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known binary packing, obfuscation, or hex editing utility been executed on a non-developer or non-security research host?
  context: This question aims to identify the direct use of tools designed to modify executables. Adversaries use these tools (like UPX, HxD) to alter a malware's signature, bypassing static, signature-based antivirus detection. Detecting their execution on systems where they have no legitimate purpose (e.g., standard user workstations, servers) is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Standard User Workstations
  - Production Servers
  - Domain Controllers
  - Critical System File Directories
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH process_creation_events(4688) WHERE process_name IN (watchlist_of_modification_tools) AND hostname NOT IN (developer_asset_group, security_research_asset_group)
- question: Is the execution of a file modification tool anomalous for the specific host or user?
  context: This question seeks to find outliers in tool usage. Even if a tool might have a fringe legitimate use, a sudden or first-time execution by a specific user or on a particular host is highly suspicious. This approach helps filter out noise by focusing on statistically rare events, which are more likely to be associated with an adversary's one-off evasion attempt.
  answer_sources:
  - Windows Event ID 4688
  - Standard User Workstations
  - Production Servers
  - Domain Controllers
  - Critical System File Directories
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOREACH execution of modification_tool, CALCULATE historical_frequency(tool, host, user). ALERT if frequency is zero OR in 99.9th_percentile.
- question: Can machine learning predict whether the execution of a process is part of a legitimate development workflow or a potential evasion technique?
  context: This question leverages machine learning to build a predictive model for malicious process execution. By training a classifier on features like parent process, user context, and command-line arguments, the system can learn the nuanced differences between normal developer activity and an adversary attempting to disguise their actions. This provides a more sophisticated, behavior-based detection method.
  answer_sources:
  - Windows Event ID 4688
  - Standard User Workstations
  - Production Servers
  - Domain Controllers
  - Critical System File Directories
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: APPLY pre-trained_ML_model ON process_creation_events(4688). FLAG events classified as 'potential evasion' with high confidence.
- question: Has an executable file transferred over the network been identified as a variant of known malware using fuzzy hashing?
  context: This question addresses the detection of slightly modified malware. Adversaries make minor changes to code to alter the file's cryptographic hash (like SHA256), but fuzzy hashing algorithms (like SSDEEP) can still identify similarities. Comparing fuzzy hashes of new executables against a threat intelligence database helps catch these altered variants that would evade simple hash-based blocking.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network Egress Points
  - DMZ Network Segment
  - Internal Server-to-Server Traffic
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOREACH new_executable IN network_traffic_logs, COMPUTE fuzzy_hash. ALERT if fuzzy_hash MATCHES known_malware_fuzzy_hash_database.
- question: Does a network-transferred executable exhibit combined characteristics of high entropy and similarity to known malware?
  context: This question combines two powerful indicators. High file entropy (>7.5) often signifies that a file is packed or encrypted, a common obfuscation technique. When this is combined with a high fuzzy hash similarity score to known malware, it creates a high-confidence signal that the file is not just packed, but is a packed version of a known malicious tool.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network Egress Points
  - DMZ Network Segment
  - Internal Server-to-Server Traffic
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOREACH new_executable, CALCULATE entropy and fuzzy_hash_similarity. ALERT if entropy > 7.5 AND similarity > 85.
- question: Can clustering analysis on fuzzy hashes reveal new, previously unknown malware variants?
  context: This question uses unsupervised machine learning to discover relationships between files. By clustering executables based on the similarity of their fuzzy hashes, analysts can find groups of related files. If one file in a cluster is identified as malicious, it is highly probable that all other files in the same cluster are related variants, allowing for proactive discovery of new threats.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Network Egress Points
  - DMZ Network Segment
  - Internal Server-to-Server Traffic
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: APPLY DBSCAN_clustering ON recent_executable_fuzzy_hashes. INVESTIGATE clusters containing a known_malicious_hash.
- question: Following an AV/EDR file block, did the same host exhibit suspicious activity, such as creating a new process or connecting to a known C2 server?
  context: This question looks for immediate follow-on activity after a defensive tool has taken action. Adversaries often have automated scripts that, upon detection, will download or execute a slightly modified payload. Correlating a block alert with a subsequent suspicious process or network connection on the same host within a short time window (e.g., 60 minutes) can reveal this automated evasion attempt.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - AV/EDR Alert Logs
  - Infected Host Endpoint
  - Domain Controllers
  - Network Gateway
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ON AV/EDR_block_alert, MONITOR host for 60_minutes. ALERT if new_process_created OR new_network_connection_to_C2_watchlist.
- question: After an AV/EDR block, did a new process execute with a different hash but highly similar command-line arguments?
  context: This question focuses on identifying re-tooling attempts by comparing process behaviors. Adversaries may change the file (altering the hash) but reuse the same execution parameters. By calculating the Levenshtein distance (a measure of string similarity) between the command-line arguments of the blocked process and new processes, we can detect a re-run of the same malicious logic with a new, slightly altered tool.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - AV/EDR Alert Logs
  - Infected Host Endpoint
  - Domain Controllers
  - Network Gateway
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ON AV/EDR_block_alert, CAPTURE original_args. FOR new_processes in next hour, CALCULATE Levenshtein_distance(new_args, original_args). ALERT if hash is different AND distance < threshold.
- question: Did an AV/EDR block trigger a statistically significant spike in other related security alerts from the same host?
  context: This question uses time-series analysis to detect an adversary's automated response to being blocked. A single AV/EDR block is normal, but if it is immediately followed by a cascade of other, different security alerts from the same system, it deviates from the normal baseline. This pattern suggests an automated evasion framework is at play, attempting multiple vectors after the initial failure.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - AV/EDR Alert Logs
  - Infected Host Endpoint
  - Domain Controllers
  - Network Gateway
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: APPLY time-series_anomaly_model ON security_alerts_per_host. ALERT on AV/EDR_block followed by significant_spike in other related alerts.
- question: Has a compiler or build utility been executed on a non-developer host, followed shortly by the execution of a newly created file from a temporary directory?
  context: This question aims to detect 'living-off-the-land' compilation. Adversaries may bring source code onto a compromised machine and use legitimate, on-host compilers to create their malicious executable directly on the target. This avoids transferring a known-bad binary. Detecting the sequence of compiler -> new executable in a temp location on a non-developer machine is a strong indicator of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Production Application Servers
  - Financial Department Workstations
  - Temporary File Directories (%TEMP%, %APPDATA%)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: TRIGGER on compiler_execution on non-dev_host. CORRELate with subsequent process_execution from temp_directory within 5_minutes.
- question: Is there an anomalous time delta between a file being written and then executed, where the parent process is a known compiler on a non-developer machine?
  context: This question establishes a behavioral baseline of file write-to-execute actions. On a non-developer machine, the sequence of a compiler writing an executable and that executable being immediately run should never happen. Therefore, the baseline frequency is zero. Any occurrence of this specific sequence (compiler -> write -> execute) is, by definition, a statistical anomaly and highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Production Application Servers
  - Financial Department Workstations
  - Temporary File Directories (%TEMP%, %APPDATA%)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BASELINE time_delta(file_write, file_execute). ALERT on any instance where parent_process_of_write is a compiler on a non-dev_host.
- question: Has a sequence of process executions matching a known malicious compilation pattern been observed by a behavioral model?
  context: This question applies a state machine model (HMM) to understand normal sequences of process execution. A transition from a shell to a compiler, to a file write in a temp directory, and then to the execution of that new file is an extremely improbable sequence for a production server. An HMM trained on normal behavior would flag this sequence as a very low-probability event, generating a high-confidence alert.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Production Application Servers
  - Financial Department Workstations
  - Temporary File Directories (%TEMP%, %APPDATA%)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: APPLY HMM_model to process_execution_sequences. ALERT on low-probability transition like 'shell -> compiler -> write -> execute_new_file'.
- question: Has a process, not on a known software updater allowlist, been observed writing to its own executable file?
  context: This question targets polymorphic or self-modifying malware. A process that modifies its own file on disk is a highly unusual and suspicious behavior. While legitimate software updaters do this, they are a known and limited set of programs. By creating a rule to detect any process writing to its own image path and excluding the known good updaters, we can effectively isolate this malicious technique.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Application Directories (e.g., C:\Program Files)
  - User Profile Directories
  - System Directories (e.g., C:\Windows\System32)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH file_access_events(4663) WHERE process_name == object_name AND access_type == 'write' AND process_name NOT IN (updater_allowlist).
- question: Is a process performing a self-write anomalous when compared to a baseline of legitimate self-writing processes?
  context: This question improves upon the previous one by creating a dynamic baseline of normal self-writing behavior. Instead of a static allowlist, this approach profiles processes that perform self-writes and flags any new or un-profiled process exhibiting this behavior. The risk is further increased if the process's parent is a shell or scripting engine, which is not typical for legitimate software updaters.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Application Directories (e.g., C:\Program Files)
  - User Profile Directories
  - System Directories (e.g., C:\Windows\System32)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BASELINE self_writing_processes. ALERT on any new self_writing_process NOT in baseline. INCREASE_RISK if parent is 'powershell.exe' or 'wscript.exe'.
- question: Does a self-writing process deviate from the learned behavior of legitimate software updaters, as determined by a machine learning model?
  context: This question uses a one-class classifier (like a One-Class SVM) to build a sophisticated model of what 'normal' updater behavior looks like. The model is trained exclusively on the features of legitimate updaters. Any self-writing process that falls outside this tightly defined model of normalcy is classified as an anomaly, providing a powerful method for detecting unknown malicious self-modifiers.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Application Directories (e.g., C:\Program Files)
  - User Profile Directories
  - System Directories (e.g., C:\Windows\System32)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: APPLY One-Class_SVM_model (trained on legit_updaters) to self-writing_processes. ALERT on any process classified as an anomaly.