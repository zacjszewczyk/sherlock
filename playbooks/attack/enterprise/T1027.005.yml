name: T1027.005: Indicator Removal from Tools
id: 9a8b7c6d-5e4f-4a3b-2c1d-0f9e8d7c6b5a
description: This playbook focuses on detecting adversaries who modify their tools to evade signature-based defenses. The central investigative question is whether an adversary is actively altering malware post-detection. This is identified by observing the use of binary packing or obfuscation utilities on non-developer hosts, finding network-transferred executables with high fuzzy hash similarity to known malware despite having new SHA256 hashes, detecting rapid follow-on activity after an AV/EDR block, identifying on-host compilation on non-developer machines, and spotting processes that attempt to modify their own executable files on disk.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known binary packing, obfuscation, or hex editing utilities being executed on hosts not designated for development or security research?
    context: This question seeks to identify the misuse of legitimate or dual-use tools for malicious purposes. Adversaries use utilities like UPX, MPRESS, or HxD to pack or modify malware, changing its signature to evade detection. Observing these tools on standard user workstations or production servers, which have no legitimate reason to run them, is a strong indicator of defense evasion activity.
    answer_sources:
      - Windows Event ID 4688
      - Standard User Workstations, Production Servers, Domain Controllers, Critical System File Directories
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events (e.g., Windows Event ID 4688) WHERE process_name IN (watchlist_of_modification_tools) AND hostname NOT IN (developer_asset_group, security_research_asset_group).
  - question: Is a known modification tool being executed with anomalous frequency on a specific host or by a particular user?
    context: This question aims to detect unusual usage patterns of modification tools, even on systems where they might occasionally be used. A sudden spike in execution or the first-ever use of a tool like UPX by a user or on a host can signify that an adversary is actively modifying files to bypass security controls. This is especially relevant post-breach, where an attacker might try to repack their tools after initial detection.
    answer_sources:
      - Windows Event ID 4688
      - Standard User Workstations, Production Servers, Domain Controllers, Critical System File Directories
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_events WHERE process_name IN (watchlist_of_modification_tools). GROUP BY hostname, user, process_name. CALCULATE historical_frequency. ALERT if frequency is 0 (first time) or > 99.9th percentile.
  - question: Can machine learning models distinguish between legitimate use of modification tools and their use for defense evasion based on execution context?
    context: This question explores using a machine learning approach to reduce false positives and increase detection confidence. By analyzing features like the parent process (e.g., 'powershell.exe' vs. 'devenv.exe'), user context, and command-line arguments, a model can learn the nuanced differences between a developer compiling code and an adversary obfuscating a payload. This helps automate the identification of high-probability evasion attempts.
    answer_sources:
      - Windows Event ID 4688
      - Standard User Workstations, Production Servers, Domain Controllers, Critical System File Directories
    range: last 90 days
    queries:
      - pseudocode: INPUT process_events features (process_name, parent_process, user, command_line). APPLY Random Forest model. OUTPUT classification ('legitimate' or 'evasion'). ALERT on 'evasion' with high confidence.
  - question: Are executables traversing the network that are slight variations of known malware?
    context: Adversaries frequently make minor modifications to malware to change its file hash (e.g., SHA256) and evade simple blocklists. Fuzzy hashes, like SSDEEP, are designed to identify files that are structurally similar, even if they are not identical. This question helps detect these modified variants by comparing the fuzzy hash of network-transferred files against a threat intelligence database of known malware fuzzy hashes.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network Egress Points, DMZ Network Segment, Internal Server-to-Server Traffic
    range: last 90 days
    queries:
      - pseudocode: FOR each new executable file from network_logs (e.g., Zeek files.log). COMPUTE SSDEEP hash. SEARCH hash against threat_intel_fuzzy_hash_db. ALERT on match.
  - question: Can we identify highly suspicious executables by combining file entropy with fuzzy hash similarity to known malware?
    context: This question layers two analytical techniques to improve detection fidelity. High file entropy (>7.5) often indicates that a file is packed or encrypted, a common tactic to obscure malicious code. When a file exhibits both high entropy and a high degree of similarity (SSDEEP > 85) to a known malicious file, the likelihood of it being a purposefully evasive malware variant increases significantly. This combined risk score helps prioritize the most suspicious files for investigation.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network Egress Points, DMZ Network Segment, Internal Server-to-Server Traffic
    range: last 90 days
    queries:
      - pseudocode: FOR each new executable from network_logs. CALCULATE entropy and SSDEEP_similarity_to_malware_db. CREATE risk_score. ALERT if entropy > 7.5 AND SSDEEP_similarity > 85.
  - question: Can we discover new, related malware variants by clustering files based on fuzzy hash similarity?
    context: This question uses unsupervised machine learning to proactively hunt for malware campaigns. By clustering all observed executables based on their SSDEEP hash similarity, we can group files that are likely related. If a single file within a cluster is identified as malicious (either now or in the future), the entire cluster becomes highly suspect. This allows analysts to uncover a whole family of malware variants from a single known indicator.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network Egress Points, DMZ Network Segment, Internal Server-to-Server Traffic
    range: last 90 days
    queries:
      - pseudocode: COLLECT SSDEEP hashes of all executables over a time period (e.g., 7 days). APPLY DBSCAN clustering. IF a cluster contains a known_malicious_hash, FLAG all other hashes in the cluster for investigation.
  - question: Following an AV/EDR block, does the affected host exhibit suspicious process or network activity, suggesting an automated or rapid re-tooling attempt?
    context: This question looks for immediate follow-on activity after a security tool has successfully blocked a threat. Sophisticated adversaries or malware may have automated mechanisms to try a different payload or technique. By correlating a 'file blocked' alert with subsequent suspicious events—like a new process execution or a connection to a known C2 server—within a short time window (60 minutes), we can detect this evasion attempt in near real-time.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - AV/EDR Alert Logs
      - Infected Host Endpoint, Domain Controllers, Network Gateway
    range: last 90 days
    queries:
      - pseudocode: ON AV/EDR_block_alert for a host. START monitoring for 60 minutes. ALERT if new_process_created OR new_network_connection to C2_watchlist_destination.
  - question: After a malicious process is blocked, is a new, slightly modified process launched with very similar command-line arguments?
    context: This question focuses on detecting a specific evasion tactic: recompiling or repacking a tool to get a new file hash, but then launching it with almost the same command-line parameters as the original, blocked tool. By comparing the command-line arguments of the blocked process with new processes on the same host, using a string similarity metric like Levenshtein distance, we can link the two events and identify the evasion.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - AV/EDR Alert Logs
      - Infected Host Endpoint, Domain Controllers, Network Gateway
    range: last 90 days
    queries:
      - pseudocode: ON AV/EDR_block_alert, STORE blocked_process_command_line. FOR new processes on host in next hour, CALCULATE Levenshtein_distance(new_command_line, stored_command_line). ALERT if new_process_hash != blocked_process_hash AND distance < threshold (e.g., 0.2).
  - question: Does a host exhibit a statistically anomalous pattern of security alerts immediately following an AV/EDR file block?
    context: This question uses time-series analysis to detect sophisticated, multi-stage evasion attempts. A single AV/EDR block is a discrete event. However, if that event is followed by a sudden, abnormal increase in other behavior-based alerts (like suspicious network beaconing or unusual process chains), it suggests the adversary's toolset is automatically adapting and trying different attack vectors. This detects the 'evasion sequence' as a whole, rather than just its individual components.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek files.log
      - AV/EDR Alert Logs
      - Infected Host Endpoint, Domain Controllers, Network Gateway
    range: last 90 days
    queries:
      - pseudocode: BASELINE alert rate/type per host using ARIMA. ON AV/EDR_block_alert, MONITOR subsequent alerts. ALERT if alert pattern deviates significantly from baseline in the following hour.
  - question: Is a compiler being used on a non-developer system to create and immediately run an executable from a temporary or user-writable directory?
    context: This question targets 'living-off-the-land' compilation, where an adversary uses compilers already on a system (or brings their own) to create malware on the target host. This avoids transferring a pre-compiled malicious binary over the network. Correlating the execution of a compiler (e.g., csc.exe) with the subsequent execution of a newly created file from a non-standard location (like %TEMP%) on a server or a non-developer's workstation is a strong indicator of this technique.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Production Application Servers, Financial Department Workstations, Temporary File Directories (%TEMP%, %APPDATA%)
    range: last 90 days
    queries:
      - pseudocode: SEARCH for compiler_process_execution on non-dev_host. IF found, SEARCH for subsequent_process_execution from same host within 5 minutes WHERE process_path IN (temp_directories). ALERT on correlation.
  - question: Can we detect on-host compilation by identifying anomalous 'write-then-execute' sequences originating from a compiler process on a non-developer machine?
    context: This question provides a more granular way to detect on-host compilation. The normal time delta between a file being written and then executed is typically zero for this activity. By baselining this behavior, we can spot anomalies. On a production server, the baseline for a compiler writing and then executing a file should be zero. Any instance of this sequence (a write event followed immediately by an execute event for the same file, with the parent process being a compiler) is inherently suspicious and should be flagged.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Production Application Servers, Financial Department Workstations, Temporary File Directories (%TEMP%, %APPDATA%)
    range: last 90 days
    queries:
      - pseudocode: FOR each host, BASELINE time_delta between file_write (4663) and file_execute (4688) for the same path. ALERT if a write/execute sequence with near-zero delta occurs where the parent_process is a known_compiler AND host is not a dev_machine.
  - question: Can a Hidden Markov Model detect on-host compilation by identifying it as a low-probability sequence of process events?
    context: This question applies a more advanced modeling technique to understand normal system behavior. An HMM can learn the typical sequences of process executions on a given host or host type. A sequence like a command shell launching a compiler, which then writes an executable to a temporary directory, which is then executed, is a logical chain of events for this attack but is extremely abnormal for a production server. The HMM would flag this as a very low-probability state transition, generating a high-confidence alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Production Application Servers, Financial Department Workstations, Temporary File Directories (%TEMP%, %APPDATA%)
    range: last 90 days
    queries:
      - pseudocode: INPUT stream of process_events into a pre-trained HMM for the host type. ALERT if the model identifies a sequence with extremely low transition probability, such as 'shell -> compiler -> write -> execute'.
  - question: Is a process attempting to write to its own executable file on disk, excluding known software updaters?
    context: This question targets a technique known as process hollowing or self-modification, where malware overwrites its own image on disk to change its signature or load a new payload. By monitoring for file write access events (Windows Event ID 4663) where the process performing the write is the same as the file being written to, we can detect this behavior. An allowlist of legitimate software updaters is necessary to filter out benign activity.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Application Directories (e.g., C:\Program Files), User Profile Directories, System Directories (e.g., C:\Windows\System32)
    range: last 90 days
    queries:
      - pseudocode: SEARCH file_access_events (e.g., Win EID 4663) WHERE process_name == object_name AND access_type includes 'Write' AND process_name NOT IN (updater_allowlist).
  - question: Are there any previously unseen processes performing self-writes, especially if launched from a scripting engine or shell?
    context: This question aims to build a dynamic baseline of legitimate self-writing processes (updaters) within the environment and alert on any deviation. Any process that performs a self-write and is not on this learned baseline is inherently anomalous. The risk is considered even higher if the anomalous process was spawned by a command shell or scripting engine (like PowerShell), as this is a common TTP for attackers to launch their tools.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Application Directories (e.g., C:\Program Files), User Profile Directories, System Directories (e.g., C:\Windows\System32)
    range: last 90 days
    queries:
      - pseudocode: BUILD baseline of legitimate self-writing processes. FOR each new self-write event, CHECK if process is in baseline. IF NOT, ALERT. INCREASE severity if parent_process IN (shell, script_engine_list).
  - question: Can a one-class classifier model distinguish legitimate software update behavior from malicious self-modification?
    context: This question proposes an anomaly detection model to automate the identification of malicious self-writes. A One-Class SVM can be trained exclusively on the features of legitimate updater processes (e.g., their parent process, user context, file path, whether they are digitally signed). Any new self-writing process that the model classifies as an 'outlier' is highly likely to be malicious, as it does not conform to the established pattern of normal update behavior.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Application Directories (e.g., C:\Program Files), User Profile Directories, System Directories (e.g., C:\Windows\System32)
    range: last 90 days
    queries:
      - pseudocode: TRAIN One-Class SVM on features of legitimate updater processes. APPLY model to all new self-writing processes. ALERT on any process classified as an outlier/anomaly.