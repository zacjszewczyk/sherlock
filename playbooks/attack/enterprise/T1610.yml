name: T1610: Deploy Container
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is executing code or evading defenses by deploying containers. This involves looking for containers deployed from known malicious images, using anomalously rare image names, or having suspicious characteristics. It also checks for deployment commands with dangerous arguments like reverse shells or flags that bypass container segmentation ('--net=host'). The playbook investigates post-deployment behavior, such as connections to C2 servers, credential theft attempts from cloud metadata services, and network scanning. It also verifies that deployments are performed by authorized users and do not use excessively permissive configurations, such as the '--privileged' flag, sensitive volume mounts, or vulnerable base images.
type: technique
related:
  - TA0002: Execution
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a container being deployed using an image name or tag that matches a known malicious or dual-use container image?
    context: Adversaries often leverage pre-built container images containing malicious tools like cryptominers, C2 frameworks, or penetration testing suites. Detecting the deployment of an image from a known-bad threat intelligence feed is a high-fidelity indicator of malicious activity. This question aims to identify such deployments by parsing command lines from process and container logs.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Container Registries (internal and external)
      - Docker Hosts
      - Kubernetes Cluster API Server
      - Developer Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation OR container_logs | WHERE command_line CONTAINS ('docker run', 'kubectl apply', 'ctr run') | EXTRACT image_name | LOOKUP image_name against known_bad_image_list | RETURN results where match_found
  - question: Are any container images being deployed that are anomalously rare compared to historical usage?
    context: To evade signature-based detection, attackers may use unique, custom-built, or newly created image names. By baselining the deployment frequency of all container images over a rolling 30-day window, we can identify outliers. Images that are rarely seen (e.g., in the bottom 5th percentile) are suspicious and may warrant investigation as they deviate from normal operational patterns.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Container Registries (internal and external)
      - Docker Hosts
      - Kubernetes Cluster API Server
      - Developer Workstations
    range: last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments over last 30 days | GROUPBY image_name | COUNT occurrences | CALCULATE frequency_percentile | RETURN results where percentile < 5
  - question: Can we predict if a container image name is malicious or algorithmically generated based on its characteristics?
    context: This question uses a machine learning approach to proactively identify suspicious image names. Malicious or automatically generated names often have distinct features, such as high character entropy, unusual length, or lack of common dictionary words. By training a model on these features from known good and bad examples, we can score new images for their likelihood of being malicious, catching threats that don't appear on static watchlists.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Container Registries (internal and external)
      - Docker Hosts
      - Kubernetes Cluster API Server
      - Developer Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR new_image_deployment | EXTRACT image_name | GENERATE_FEATURES (length, entropy, n-grams, etc.) | INPUT features into classification_model | RETURN results where prediction is 'malicious'
  - question: Is a container being deployed with command-line arguments indicative of suspicious activity, such as invoking a shell script via curl or enabling host namespace access?
    context: Adversaries may use container deployment commands to execute malicious one-liners, such as reverse shells or script downloads. They may also use flags like '--net=host' or '--pid=host' to break out of container isolation and gain broader access to the host system. This question uses regular expressions to find these known-bad patterns in command-line arguments.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Docker Hosts
      - Kubernetes Worker Nodes
      - CI/CD Pipelines
      - Container Orchestration API
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation | PARSE command_line | WHERE command_line MATCHES_REGEX ('bash -i', 'nc -e', 'curl...|...sh', '--net=host', '--pid=host') | RETURN matching events
  - question: Are any container deployment commands exhibiting unusually high character entropy, potentially indicating obfuscated payloads?
    context: To hide their intentions, attackers often encode or obfuscate the commands passed to a container's entrypoint. This obfuscation typically results in a higher character entropy compared to legitimate, human-readable commands. By establishing a baseline entropy for normal commands, we can flag deployments with anomalously high entropy for further review.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Docker Hosts
      - Kubernetes Worker Nodes
      - CI/CD Pipelines
      - Container Orchestration API
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments | PARSE command_line_arguments | CALCULATE entropy of arguments | COMPARE to baseline_entropy | RETURN results where entropy > (mean + 3*stdev)
  - question: Is there a sudden, anomalous spike in the use of suspicious container flags like '--net=host'?
    context: While some applications may legitimately use flags that weaken container isolation, a sudden increase in their usage across the environment can signal a coordinated attack. This question applies a time-series anomaly detection model to monitor the frequency of these flags. An unexpected spike, deviating from the historical trend, would trigger an alert for a potential campaign.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Docker Hosts
      - Kubernetes Worker Nodes
      - CI/CD Pipelines
      - Container Orchestration API
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments daily | COUNT deployments with suspicious_flags | INPUT daily_count into time_series_model | RETURN alerts on detected anomalies (spikes)
  - question: Does a host initiate network connections to a known C2 server shortly after deploying a container?
    context: A common adversary tactic is to deploy a container that immediately 'calls home' to a Command and Control (C2) server to receive further instructions. This question correlates container deployment events with subsequent network activity from the same host, alerting if a connection is made to a destination on a C2 threat intelligence feed within a 10-minute window.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Zeek dns.log
      - Network Egress Points (Firewalls/Gateways)
      - Docker Hosts
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN (SEARCH container_deployments) with (SEARCH network_connections) on source_ip | WHERE connection_time is within 10_minutes of deployment_time | LOOKUP destination_ip in C2_threat_feed | RETURN results where match_found
  - question: Is a host exhibiting network traffic patterns characteristic of C2 beaconing (low jitter, consistent size) after a container deployment?
    context: Automated C2 beaconing often produces highly regular network traffic, with consistent intervals (low jitter) and similar data volumes between connections. This is different from typical human or application traffic. This question analyzes post-deployment network flows to identify these statistical signatures of beaconing, which can uncover novel C2 infrastructure not yet on threat lists.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Zeek dns.log
      - Network Egress Points (Firewalls/Gateways)
      - Docker Hosts
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each host post-deployment | ANALYZE connections to a single destination | CALCULATE jitter and data_volume_stdev | RETURN results where jitter < threshold AND data_volume_stdev < threshold
  - question: Does the outgoing network traffic from a host show a strong, new periodic signal after a container is deployed?
    context: The regular nature of C2 beaconing creates a periodic signal in a host's network traffic data. This question uses a time-series decomposition model to separate a traffic stream into its trend, seasonal (periodic), and residual components. The emergence of a strong periodic component that wasn't present before the container deployment is a high-fidelity indicator of automated C2 activity.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Zeek dns.log
      - Network Egress Points (Firewalls/Gateways)
      - Docker Hosts
      - DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: GET outgoing_traffic_volume_timeseries for host post-deployment | APPLY time_series_decomposition | DETECT new, strong periodic component | RETURN alert if new period is detected
  - question: Is a container being deployed by an unauthorized user account or by a service account from an interactive logon session?
    context: Container deployments should only be performed by specific, authorized personnel or automated CI/CD service accounts. A deployment by any other user, or a service account logging in interactively (a sign of account compromise), is highly suspicious. This question verifies the legitimacy of the executing user and their session type against an authorized list and expected behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Authentication Servers (Active Directory)
      - Docker Hosts
      - Kubernetes Master Nodes
      - CI/CD Runners
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments | GET executing_user and logon_id | LOOKUP user_groups in AD | ALERT if user not in 'container_admins' group | LOOKUP logon_id in logon_events | ALERT if logon_type is 'Interactive' for a service_account
  - question: Is a container deployment being initiated by a user from a host they have rarely or never used for this purpose before?
    context: Legitimate administrative actions typically follow established patterns. A user deploying a container from an unusual source host may indicate a compromised account being used from an attacker's machine. By baselining the frequency of (user, source host) pairs for container deployments, we can flag new or very rare combinations as high-risk anomalies.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Authentication Servers (Active Directory)
      - Docker Hosts
      - Kubernetes Master Nodes
      - CI/CD Runners
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments | EXTRACT user, source_host | LOOKUP historical frequency of (user, source_host) pair | RETURN alert if frequency is zero or below 1st percentile
  - question: Does a container deployment event appear anomalous when compared to a model of normal deployment behavior?
    context: This question uses a 'one-class' machine learning model to build a comprehensive profile of what constitutes a 'normal' container deployment, considering features like the user, source host, and time of day. Any deployment that significantly deviates from this learned profile is flagged as an 'outlier' or anomaly. This is effective for catching novel or complex attacks that don't match specific rules.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Authentication Servers (Active Directory)
      - Docker Hosts
      - Kubernetes Master Nodes
      - CI/CD Runners
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each new deployment | EXTRACT features (user, host, time) | INPUT features into one-class_SVM_model | RETURN alert if classified as 'outlier'
  - question: Is a container being deployed from an image known to have a critical vulnerability?
    context: Adversaries may intentionally deploy containers with known vulnerabilities (CVEs) as a means to achieve remote code execution, privilege escalation, or escape the container to the underlying host. This question checks the image name and tag of each new deployment against a vulnerability database, alerting on the use of images with critical CVEs, especially those related to container security.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Container Registries
      - Docker Hosts
      - Vulnerability Scanners/Databases
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments | EXTRACT image_name | QUERY vulnerability_database with image_name | RETURN alert if image has critical_CVE (e.g., CVE-2019-5736)
  - question: Has there been a sharp, sustained increase in the overall vulnerability surface of the container environment?
    context: While individual vulnerable deployments are a concern, a sudden and sustained rise in the total count of critical vulnerabilities across the environment can indicate a widespread campaign or a systemic failure in security hygiene that an adversary could exploit. This question uses a CUSUM control chart to monitor the aggregate vulnerability count and detect statistically significant increases from the baseline.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Container Registries
      - Docker Hosts
      - Vulnerability Scanners/Databases
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PERIODICALLY scan running_containers for CVEs | CALCULATE total_critical_cve_count | INPUT count into CUSUM_control_chart | RETURN alert if sharp, sustained increase is detected
  - question: Can we assign a risk score to a container image based on its vulnerability profile to predict the likelihood of exploitation?
    context: Not all vulnerabilities are created equal. This question aims to quantify the risk of an image by training a regression model on its vulnerability data. Features like the CVSS score, the number of vulnerabilities, their age, and the availability of public exploits are used to predict a risk score. Deployments of images exceeding a certain risk threshold are flagged, prioritizing the most dangerous images for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Container Registries
      - Docker Hosts
      - Vulnerability Scanners/Databases
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each image | GATHER vulnerability_data (CVSS, age, exploit_available) | INPUT features into regression_model | CALCULATE risk_score | ALERT on deployment of images with high_risk_score
  - question: Is a container being deployed with excessive permissions, such as the '--privileged' flag or sensitive host path mounts?
    context: The '--privileged' flag effectively disables all container isolation, giving the container root access to the host. Similarly, mounting sensitive host directories like '/' or '/var/run/docker.sock' allows a container to manipulate the host system. This question uses rule-based searches to find these explicitly dangerous configurations, which are strong indicators of a container escape attempt.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Docker Hosts
      - Kubernetes Worker Nodes
      - Container Orchestration API
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation | PARSE docker_run_command | ALERT if command contains '--privileged', '--pid=host', or mounts like '-v /:/host_root' or '-v /var/run/docker.sock:/docker.sock'
  - question: Is a container being deployed with a privileged flag or volume mount that is not on an approved allow-list or is used very rarely?
    context: While some applications require specific privileges, their usage should be known and documented. This question compares the permissions of a new deployment against a pre-defined allow-list for legitimate use cases. Any privileged flag or mount not on the list, or one that is statistically rare, is flagged as suspicious, helping to enforce a policy of least privilege.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Docker Hosts
      - Kubernetes Worker Nodes
      - Container Orchestration API
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments | EXTRACT flags and volume_mounts | ALERT if flag_or_mount not in allow_list | CALCULATE frequency of all flags/mounts | ALERT on flags/mounts with frequency < 1%
  - question: Can a machine learning model classify a container's configuration as suspicious based on its permission settings?
    context: By analyzing the combination of permissions granted to a container (privileged flags, volume mounts, etc.), a machine learning model can learn the patterns of legitimate configurations. This question uses a classification model trained on known good and bad examples to score every new deployment. This allows for the detection of suspicious combinations of permissions that might not trigger individual rules.
    answer_sources:
      - Windows Event ID 4688
      - Zeek docker.log
      - Docker Hosts
      - Kubernetes Worker Nodes
      - Container Orchestration API
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each deployment | CREATE feature_vector (binary flags, mount counts, path sensitivity) | INPUT features into classification_model | ALERT if classified as 'suspicious'
  - question: Is a container host attempting to steal cloud credentials from the metadata service immediately after a deployment?
    context: In cloud environments, a common post-exploitation step is to query the instance metadata service (at 169.254.169.254) to steal the IAM role credentials attached to the machine. This question looks for this specific, high-fidelity indicator of credential theft originating from a host where a container was just deployed.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Cloud Instance Metadata Service Endpoint
      - Internal Network Segments
      - Docker Hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH http_logs | ALERT where destination_ip = '169.254.169.254' AND url CONTAINS '/iam/security-credentials/' AND source_ip recently deployed a container
  - question: Is a container host performing horizontal network scanning after a deployment?
    context: After gaining a foothold, adversaries often scan the internal network to discover other hosts and services to target. This activity is characterized by a single source making connection attempts to many unique internal IP addresses in a short time. This question establishes a baseline for normal fan-out and flags any host that exceeds this baseline (e.g., 99th percentile) as potentially performing a network scan.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Cloud Instance Metadata Service Endpoint
      - Internal Network Segments
      - Docker Hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_logs in 5_minute_windows | GROUPBY source_ip | COUNT unique destination_ips | ALERT if unique_destination_count > 99th_percentile_baseline for that source
  - question: Does the network connection pattern from a newly deployed container host exhibit an anomalous 'starburst' shape indicative of scanning?
    context: Network scanning creates a distinct pattern in a graph of network connections, where a new node (the scanner) rapidly creates many short-lived connections to other nodes. This question uses graph-based anomaly detection to identify this 'starburst' topology. This approach can be more robust than simple statistical counts for identifying scanning behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Cloud Instance Metadata Service Endpoint
      - Internal Network Segments
      - Docker Hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL network_flows as a graph | FOR new container_host_node | DETECT rapid creation of many new, short-lived edges (starburst pattern) | ALERT on detection
  - question: Is a container being deployed with a non-standard or unauthorized network mode, such as '--network=host'?
    context: Using '--network=host' makes the container share the host's networking namespace, bypassing network segmentation controls defined by container-specific networks. This question checks if a deployment uses this mode or specifies a network name that is not on an approved list, which could be an attempt to evade network defenses.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek docker.log
      - Docker Hosts
      - Network Gateways
      - Container Network Interfaces
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation | PARSE docker_run_command for '--network' flag | ALERT if flag value is 'host' or not in approved_network_list
  - question: Is a container exposing a port that is not part of its application's baseline or is statistically rare in the environment?
    context: Applications typically expose a known set of ports. An adversary might expose an unusual port for a C2 channel or to bind a shell. This question baselines the normal exposed ports for each application and across the environment. It flags deployments that deviate from the application's baseline or expose a very rare port (e.g., below 1st percentile frequency), indicating a potential backdoor.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek docker.log
      - Docker Hosts
      - Network Gateways
      - Container Network Interfaces
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH container_deployments | EXTRACT exposed_ports | ALERT if port not in application_baseline | CALCULATE frequency of all exposed ports | ALERT on ports with frequency < 1%
  - question: Does a container's network configuration appear anomalous when compared to a model of normal configurations?
    context: This question uses an autoencoder, a type of neural network, to learn the normal patterns of network configurations (network mode, exposed ports). When a new deployment's configuration is processed, the model tries to reconstruct it. A high reconstruction error means the configuration is unlike anything the model has seen before and is therefore anomalous, signaling a potential threat.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek docker.log
      - Docker Hosts
      - Network Gateways
      - Container Network Interfaces
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each deployment | CREATE feature_vector (network mode, exposed ports) | INPUT vector into autoencoder_model | CALCULATE reconstruction_error | ALERT if error > threshold