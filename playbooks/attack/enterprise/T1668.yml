name: T1668: Exclusive Control
id: 6e9b8a3f-1c7d-4b8a-9f0e-3d2c1b0a9e8f
description: This playbook helps investigate if an adversary is attempting to maintain exclusive control over a compromised system. This is often achieved by eliminating competing malware, disabling security tools, modifying firewall rules, uninstalling security software, manipulating user accounts to lock out legitimate users, or patching the vulnerability they used for initial access to prevent others from using it. Indicators include the execution of known malware removal or security tool disablers, command-line arguments that disable security services, unauthorized registry modifications to security product configurations, unusual process parent-child relationships modifying system security settings, rapid creation and use of privileged accounts to disable others, and patching or service modification immediately following suspicious network activity.
type: technique
related:
- TA0003: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a new process been created whose hash matches a known malware removal or security tool disabling utility?
  context: Adversaries often deploy tools to remove competing malware or disable security software to maintain their foothold. This question checks if any newly executed process is a known tool used for such purposes, like PCHunter or GMER, by comparing its hash against a threat intelligence feed. A match is a strong indicator of an adversary trying to establish exclusive control.
  answer_sources: Windows Event ID 4688, Zeek files.log. Applicable to all endpoints and servers, particularly Domain Controllers and critical application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
      GET process_hash
      IF process_hash IN known_exclusive_control_tool_hashes_feed
        ALERT "Known exclusive control tool detected"
- question: Have any rare or uncommon processes been executed across the environment recently?
  context: Malware or attacker tools are often not widely distributed like legitimate software. This question aims to identify these outliers by calculating the prevalence of each new process hash across the entire network. A process seen on a very small percentage of machines (e.g., less than 0.1%) is suspicious and could be part of an attacker's toolkit, especially if it's not part of an approved software deployment.
  answer_sources: Windows Event ID 4688, Zeek files.log. Applicable to all endpoints and servers, particularly Domain Controllers and critical application servers.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      FOR each unique_process_hash in last 30 days
      CALCULATE prevalence = (count(distinct_hosts_with_hash) / total_hosts) * 100
      IF prevalence < 0.1 AND process_hash NOT IN approved_software_hashes
        ALERT "Rare process execution detected"
- question: Has a machine learning model identified any process that is classified as malicious but masquerades as a legitimate utility or security tool?
  context: Attackers often disguise their malicious executables by naming them after legitimate system utilities or security tools. This question leverages a machine learning model to analyze file metadata. It specifically looks for files that the model deems malicious but have names or properties suggesting they are benign cleaners or anti-malware, indicating a likely attempt at deception and exclusive control.
  answer_sources: Windows Event ID 4688, Zeek files.log. Applicable to all endpoints and servers, particularly Domain Controllers and critical application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
      GET file_metadata
      prediction = classify_file(file_metadata)
      IF prediction == "malicious" AND (file_name matches "cleaner" OR file_name matches "antivirus")
        ALERT "ML detected malicious file masquerading as utility"
- question: Have any command-line arguments been executed that match patterns known to disable security controls?
  context: A direct way for an adversary to gain control is to disable existing security measures via the command line. This question uses regular expressions to search for specific, known commands used to turn off firewalls, disable security services, or alter security product settings. A match is a high-fidelity indicator of malicious activity.
  answer_sources: Windows Event ID 4688. Applicable to all endpoints and servers, especially those hosting security management consoles or acting as domain controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE command_line MATCHES regex("netsh.*advfirewall.*off", "sc.*config.*disabled", "Set-MpPreference.*DisableRealtimeMonitoring.*true")
      ALERT "Command-line security disable attempt detected"
- question: Have any common system processes been executed with unusually complex or obfuscated command-line arguments?
  context: Adversaries often obfuscate their commands to evade simple keyword-based detection. This question identifies such attempts by measuring the Shannon entropy (randomness) of command-line arguments for processes like PowerShell and cmd.exe. A command with an entropy score significantly higher than the established baseline for that process suggests obfuscation and warrants investigation.
  answer_sources: Windows Event ID 4688. Applicable to all endpoints and servers, especially those hosting security management consoles or acting as domain controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each command_line in (powershell.exe, cmd.exe, wscript.exe)
      CALCULATE entropy_score
      GET baseline_entropy_95th_percentile for process
      IF entropy_score > baseline_entropy_95th_percentile
        ALERT "High entropy command-line detected"
- question: Has a machine learning model classified any executed command-line strings as malicious?
  context: This question uses a machine learning model trained to differentiate between benign and malicious command lines. The model analyzes various features like length, character types, and suspicious keywords. This approach can detect novel or complex malicious commands that might be missed by static rules or entropy analysis alone.
  answer_sources: Windows Event ID 4688. Applicable to all endpoints and servers, especially those hosting security management consoles or acting as domain controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
      GET command_line
      prediction = classify_command(command_line)
      IF prediction == "malicious"
        ALERT "ML detected malicious command-line"
- question: Has a critical security-related registry key been modified by an unauthorized process?
  context: Security products rely on specific registry keys for their configuration. Adversaries may modify these keys to disable or cripple security tools. This question monitors a watchlist of these critical keys and alerts if any process not on an approved list (like legitimate installers) attempts to modify them.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688. Applicable to system registries on all endpoints and servers, with a focus on administrator workstations and critical servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_modification_events
      WHERE registry_key IN critical_security_keys_watchlist AND process_name NOT IN authorized_process_allowlist
      ALERT "Unauthorized modification of security registry key"
- question: Has a process modified a security-related registry key for the first time?
  context: Legitimate processes that modify registry keys tend to be predictable. This question establishes a baseline of which processes normally modify specific security-related keys. An alert is generated when a new, previously unobserved process-key pair is seen, indicating an anomalous and potentially malicious modification.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688. Applicable to system registries on all endpoints and servers, with a focus on administrator workstations and critical servers.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      FOR each registry_modification_event on critical_keys_watchlist
      GET (process_name, registry_key_path) pair
      IF pair IS NOT IN baseline_of_normal_pairs
        ALERT "Anomalous registry modification by new process"
- question: Has there been an anomalous spike in the number of modifications to security-related registry keys?
  context: While individual modifications might be missed, a large-scale attack or a script disabling security features could cause a sudden burst of registry changes. This question uses a time-series model to detect unusual spikes in the volume of security-related registry modifications that don't align with normal maintenance schedules.
  answer_sources: Windows Event ID 4657, Windows Event ID 4688. Applicable to system registries on all endpoints and servers, with a focus on administrator workstations and critical servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GET hourly_count of security_registry_modifications
      INPUT counts into time_series_anomaly_model
      IF model_detects_anomaly(current_hour_count)
        ALERT "Anomalous spike in security registry modifications"
- question: Has a non-interactive process, like a web server or Office application, spawned a shell that was then used to degrade system security?
  context: Processes like web servers or Microsoft Office applications should not typically spawn command shells to modify system settings. This question looks for a suspicious chain of events: a non-interactive parent spawning a shell (like cmd.exe), followed shortly by a security degradation event (like a firewall change or service stop) on the same machine.
  answer_sources: Windows Event ID 4688, Windows Event ID 4947, Windows Event ID 7036. Applicable to Internet-facing web servers, remote access gateways, and general user endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events where (parent_process IN [winword.exe, wmiprvse.exe] spawns child_process IN [cmd.exe, powershell.exe])
      WITHIN 5 minutes on same host
      FOLLOWED BY (firewall_change_event OR service_stop_event)
      ALERT "Suspicious process chain led to security degradation"
- question: Have any rare or statistically unlikely parent-child process relationships been observed, especially involving sensitive system utilities?
  context: Normal system operations result in predictable parent-child process relationships (e.g., explorer.exe launching cmd.exe). This question builds a model of these normal relationships and their probabilities. It then flags any rare pairings, such as a web server process (`w3wp.exe`) spawning a system utility (`netsh.exe`), as these are highly indicative of post-exploitation activity.
  answer_sources: Windows Event ID 4688, Windows Event ID 4947, Windows Event ID 7036. Applicable to Internet-facing web servers, remote access gateways, and general user endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each parent_child_process_event
      CALCULATE probability P(Child|Parent) from baseline model
      IF P < 0.01 AND child_process IN [netsh.exe, sc.exe, powershell.exe]
        ALERT "Rare parent-child process relationship detected"
- question: Has graph-based anomaly detection identified any abnormal process execution chains?
  context: This question models system activity as a graph of process executions. By learning the normal structure of these graphs, anomaly detection algorithms can identify entire subgraphs or chains of execution that deviate from the norm. This is a powerful way to spot complex attacker behavior, such as a multi-stage process injection leading to system modification.
  answer_sources: Windows Event ID 4688, Windows Event ID 4947, Windows Event ID 7036. Applicable to Internet-facing web servers, remote access gateways, and general user endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BUILD process execution graph from process events
      RUN graph_anomaly_detection_algorithm
      IF anomalous_subgraph is found
        ALERT "Anomalous process execution graph structure detected"
- question: Has a newly created account been quickly promoted to a privileged group and then used to disable or delete another account?
  context: This is a classic smash-and-grab tactic. An attacker creates an account, immediately gives it admin rights, and then uses it to lock out legitimate administrators. This question uses a stateful rule to detect this specific, high-confidence sequence of events (account creation -> privilege escalation -> another account disabled/deleted) within a short time window.
  answer_sources: Windows Event ID 4720, 4726, 4732, 4725. Applicable to Domain Controllers, Active Directory databases, and local account databases on critical servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events on Domain Controller within 15 minutes:
      SEQUENCE [account_created (4720), account_added_to_privileged_group (4732), other_account_disabled_or_deleted (4725, 4726)]
      BY new_account_name
      ALERT "Rapid new account privilege abuse detected"
- question: Have any user accounts been promoted to a privileged group suspiciously quickly after their creation?
  context: In normal operations, there is usually a delay between creating a user account and granting it high-level privileges. Automated attacks, however, do this almost instantaneously. This question flags accounts where the 'time-to-privilege' is unusually short (e.g., in the bottom 1st percentile), as this is a strong signal of malicious automation.
  answer_sources: Windows Event ID 4720, 4726, 4732, 4725. Applicable to Domain Controllers, Active Directory databases, and local account databases on critical servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each account_added_to_privileged_group event (4732)
      GET creation_time from corresponding account_creation event (4720)
      CALCULATE time_delta = privilege_time - creation_time
      IF time_delta < 1st_percentile_baseline
        ALERT "Anomalously short time-to-privilege detected"
- question: Has a machine learning model identified a high-risk user creation event that was immediately followed by privileged activity?
  context: This question uses a model to score the risk of a new user creation based on factors like username patterns and time of day. It then correlates high-risk creations with subsequent privileged actions, such as disabling another account. This combines the power of machine learning for initial detection with rule-based correlation to generate a high-confidence alert.
  answer_sources: Windows Event ID 4720, 4726, 4732, 4725. Applicable to Domain Controllers, Active Directory databases, and local account databases on critical servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_user_creation event (4720)
      GET risk_score from classification_model
      IF risk_score > threshold AND new_user performs privileged_action within 5 minutes
        ALERT "High-risk user creation followed by privileged activity"
- question: Has a system security setting (like a service status) been changed or a patch been applied shortly after an inbound exploitation attempt was detected?
  context: After successfully exploiting a vulnerability, an attacker might patch the system to prevent other attackers from using the same entry point. This question correlates network-level exploitation alerts (from Zeek) with subsequent host-level events like a service being stopped or a patch-like process running, indicating an attacker is securing their new foothold.
  answer_sources: Zeek conn.log, Zeek notice.log, Windows Event ID 4688, Windows Event ID 7036. Applicable to Internet-facing servers, network perimeter security devices, and patch management systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE (Zeek notice_log for exploitation OR conn_log from malicious_IP)
      WITHIN 1 hour on same host
      FOLLOWED BY (service_stop_event (7036) OR patch_process_execution (4688))
      ALERT "Post-exploitation patching or hardening detected"
- question: Has patching or service management activity occurred outside of normal, baselined behavior?
  context: Corporate patching and service management usually follow a predictable schedule and are performed by specific tools. This question establishes a baseline of this normal activity. It then flags any service modification or patch installation that is a statistical outlier (e.g., occurs at an odd time, initiated by a strange process like PowerShell instead of a dedicated management tool).
  answer_sources: Zeek conn.log, Zeek notice.log, Windows Event ID 4688, Windows Event ID 7036. Applicable to Internet-facing servers, network perimeter security devices, and patch management systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for service_modification (7036) or patch_process (msiexec.exe)
      WHERE (time is outside maintenance_window) OR (initiating_process is not in [TrustedInstaller.exe, SCCM_agent.exe])
      ALERT "Anomalous patching or service management activity"
- question: Does a time-series analysis show a novel correlation between external network threats and internal host service changes?
  context: This advanced question seeks to find hidden relationships between external network events and internal host changes over time. By modeling the normal correlation (or lack thereof) between network alerts and service changes, the system can flag a new, strong correlation as it emerges, potentially indicating a new attack campaign where exploitation is followed by system hardening.
  answer_sources: Zeek conn.log, Zeek notice.log, Windows Event ID 4688, Windows Event ID 7036. Applicable to Internet-facing servers, network perimeter security devices, and patch management systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL cross_correlation between (time_series of Zeek_alerts) and (time_series of service_change_events)
      IF model_detects_new_high_correlation_spike
        ALERT "Novel correlation found between network threats and host changes"