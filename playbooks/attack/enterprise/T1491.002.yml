name: T1491.002: External Defacement
id: e5a3b9c7-2f8d-4e1a-b6c0-9d7e8f0a1b2c
description: This playbook helps investigate whether an adversary has impacted the integrity of external-facing web applications through defacement. It focuses on detecting unauthorized content changes, web exploitation attempts that often precede defacement, anomalous file modifications, process execution indicative of web shells, and suspicious file uploads. By analyzing file integrity, network traffic, and host-based logs, analysts can identify and respond to attempts to publicly alter or vandalize an organization's web presence.
type: technique
related:
  - TA0040: Impact
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any files written to a web server directory or served via HTTP response matched known defacement signatures or malicious script indicators?
    context: This question aims to detect known defacement attacks by comparing file hashes and content against threat intelligence. A match provides a high-confidence indicator that a web asset has been compromised and its integrity violated with recognized malicious content.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Windows Event ID 4663
      - File systems of public-facing web servers (e.g., C:\inetpub\wwwroot)
      - Network traffic egress points capturing HTTP responses
      - File integrity monitoring agent logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          search file write events (EID 4663) in web directories -> extract file hash -> compare hash against defacement TI feed.
          search HTTP responses (zeek http.log) -> scan body for defacement strings/signatures.
  - question: Have any modified web pages shown a statistically significant deviation from their previous content baseline or been modified outside of normal deployment windows?
    context: This question seeks to identify defacement by detecting substantial, unexpected changes to web page content. By calculating content similarity (e.g., Jaccard score) and correlating it with deployment schedules, analysts can uncover unauthorized modifications that don't match known signatures.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Windows Event ID 4663
      - File systems of public-facing web servers (e.g., C:\inetpub\wwwroot)
      - Network traffic egress points capturing HTTP responses
      - File integrity monitoring agent logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each file modification event (EID 4663) -> get previous version -> calculate jaccard similarity -> alert if score < threshold. correlate alert with deployment schedule.
  - question: Can the text content of new or modified web pages be classified as 'Defacement' using a machine learning model?
    context: This question leverages text classification models to detect novel defacement attacks that may not have known signatures. By training a model on a corpus of defaced and legitimate pages, it can identify suspicious content based on linguistic patterns, keywords, and structure characteristic of defacement.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Windows Event ID 4663
      - File systems of public-facing web servers (e.g., C:\inetpub\wwwroot)
      - Network traffic egress points capturing HTTP responses
      - File integrity monitoring agent logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          on file modification event (EID 4663) -> extract text content -> pass to text classification model -> alert if classified as 'Defacement' or 'Suspicious'.
  - question: Are there any inbound HTTP requests containing patterns of common web application exploits like SQLi, XSS, or Command Injection?
    context: This question aims to proactively identify exploitation attempts that often precede defacement. By searching for common attack strings in URI parameters and POST bodies, analysts can detect potentially successful intrusions before the full impact is realized.
    answer_sources:
      - Zeek http.log
      - Network traffic sensors monitoring the DMZ
      - Logs from Web Application Firewalls (WAFs)
      - Reverse proxy server logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          search zeek http.log for URI/POST body matching regex for SQLi, XSS, CmdI patterns AND response_code is 2xx.
  - question: Do any inbound HTTP requests exhibit a sudden spike in entropy for their parameter values, suggesting obfuscated payloads?
    context: This question looks for statistical anomalies in HTTP request parameters. A sharp increase in Shannon entropy can indicate that an attacker is using encoding or obfuscation to bypass signature-based detection, a common tactic in web exploitation.
    answer_sources:
      - Zeek http.log
      - Network traffic sensors monitoring the DMZ
      - Logs from Web Application Firewalls (WAFs)
      - Reverse proxy server logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each source IP and URI parameter -> calculate shannon entropy of value -> compare to historical baseline -> alert if entropy > 95th percentile.
  - question: Can inbound HTTP requests be classified as malicious attacks using a supervised machine learning model?
    context: This question uses a machine learning classifier to distinguish between benign and malicious HTTP requests in real-time. By analyzing features like request length, parameter counts, and special character frequency, this approach can identify sophisticated or novel attacks that evade simpler detection methods.
    answer_sources:
      - Zeek http.log
      - Network traffic sensors monitoring the DMZ
      - Logs from Web Application Firewalls (WAFs)
      - Reverse proxy server logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each inbound HTTP request -> extract features (length, param count, etc.) -> pass to classification model -> alert if classified as 'Attack'.
  - question: Have any web content files been modified by a non-approved user account or a suspicious parent process?
    context: This question focuses on the authorization context of file modifications. Changes made by accounts not associated with standard deployment or administrative procedures, or spawned by unexpected processes, are strong indicators of unauthorized access and potential defacement.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of public-facing web servers, especially web root directories such as C:\inetpub\wwwroot or /var/www/html
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          search file write events (EID 4663) in web root -> check if user is not on allowlist.
          correlate with parent process (EID 4688) -> alert if parent is not a legitimate deployment tool.
  - question: Has there been a statistically anomalous spike in file modification activity on a web server, or have modifications been made by rare user-process pairs?
    context: This question uses statistical baselining to detect unusual patterns of file modification. A sudden increase in changes or modifications performed by a user and process combination that is rarely seen can signify automated defacement activity or an attacker operating outside of normal behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of public-facing web servers, especially web root directories such as C:\inetpub\wwwroot or /var/www/html
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          baseline file modification (EID 4663) activity by user/process/time -> alert if activity > 3 standard deviations from mean OR if user-process pair is statistically rare.
  - question: Can file modification events on web servers be identified as anomalous using a machine learning model?
    context: This question applies unsupervised anomaly detection to identify suspicious file modifications. By modeling the multi-dimensional characteristics of normal deployment activity (e.g., time, user, process, file type), an algorithm like Isolation Forest can flag deviations that indicate a potential compromise.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of public-facing web servers, especially web root directories such as C:\inetpub\wwwroot or /var/www/html
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          extract features from file mod events (EID 4663, 4688) -> pass to anomaly detection model (Isolation Forest) -> alert on anomalous events.
  - question: Has a web server process spawned a command shell or scripting interpreter, indicating a potential web shell?
    context: This question looks for a classic indicator of a web shell, where the web server's own process is used to execute system commands. This behavior is highly anomalous and a strong sign that an attacker has established a foothold to manipulate the server, often as a precursor to defacement.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (Sysmon, Windows Security) on public-facing web servers
      - Network connection logs from sensors monitoring traffic to and from these servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          search process creation events (EID 4688) where parent process is a web server process (w3wp.exe, httpd.exe) AND child process is a shell (cmd.exe, powershell.exe, bash).
  - question: Are there any statistically rare command-line arguments being executed by processes spawned from a web server process?
    context: This question aims to detect web shell activity by analyzing the rarity of commands being executed. Attackers often use uncommon commands or arguments for reconnaissance or file manipulation. A high rarity score (e.g., via TF-IDF) for a command initiated by a web server process is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (Sysmon, Windows Security) on public-facing web servers
      - Network connection logs from sensors monitoring traffic to and from these servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          for processes spawned by web server (EID 4688) -> calculate TF-IDF score for command-line arguments against baseline -> alert on high-scoring (rare) commands.
  - question: Can a sequence of events, such as a connection from a rare IP followed by a web server spawning a shell and writing a file, be identified as a malicious attack chain?
    context: This question uses sequence analysis to connect disparate events into a coherent attack narrative. A model like a Hidden Markov Model can learn normal sequences of operations and flag a chain of events that, while individually might be low-fidelity, together represent a high-confidence malicious pattern like a web shell upload and defacement.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (Sysmon, Windows Security) on public-facing web servers
      - Network connection logs from sensors monitoring traffic to and from these servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          model normal event sequences (Zeek conn, EID 4688, EID 4663) using HMM -> search for anomalous sequences like [rare IP conn -> web server spawns shell -> file write to web root].
  - question: Have there been any HTTP POST requests uploading script files (e.g., .php, .aspx) to directories intended for static content?
    context: This question targets a common method for installing web shells, where an attacker uploads an executable script to a directory (like an image or document upload folder) that lacks proper execution controls. Detecting this type of file upload is critical for preventing server compromise.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - DMZ network segments
      - Reverse proxy logs
      - Load balancer logs
      - Web server logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          search HTTP POST requests (zeek http.log) where uploaded filename (zeek files.log) has script extension (.php, .aspx) AND target directory is for static content.
  - question: Have any HTTP POST requests to a specific URI had a body length that is statistically anomalous compared to its historical baseline?
    context: This question uses the size of a POST request as an indicator of compromise. An unusually large request body for a given web page could signify an attacker uploading a large defacement file or a toolkit, deviating significantly from normal user interaction.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - DMZ network segments
      - Reverse proxy logs
      - Load balancer logs
      - Web server logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each URI, baseline POST request body lengths -> search zeek http.log for POST requests where body length > 99th percentile of baseline for that URI.
  - question: Can clustering algorithms identify outlier HTTP POST requests that may represent the upload of a web shell or defacement tool?
    context: This question applies unsupervised learning to group similar, legitimate POST requests together based on features like source IP, user-agent, and size. Requests that do not fit into any normal cluster are flagged as outliers, potentially representing malicious upload activity that doesn't match any known pattern.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - DMZ network segments
      - Reverse proxy logs
      - Load balancer logs
      - Web server logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          extract features (source IP, user-agent, length, URI) from POST requests -> apply DBSCAN clustering -> investigate requests identified as noise/outliers.