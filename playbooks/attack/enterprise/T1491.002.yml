name: T1491.002: External Defacement
id: c4a1b2d3-e4f5-4a6b-8c7d-9e0f1a2b3c4d
description: This playbook helps determine if an adversary has impacted the integrity of external-facing web applications through defacement. It provides investigative steps to detect defacement by analyzing file modifications for known signatures and statistical anomalies, monitoring inbound HTTP traffic for common web exploits, tracking unauthorized file changes by suspicious accounts or processes, identifying web shell process execution, and detecting anomalous file uploads.
type: technique
related:
  - TA0040: Impact
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any files written to web server directories been identified as known defacement content based on hash or signature matching?
    context: This question aims to detect known defacement attacks by comparing newly written files against threat intelligence. By checking file hashes and scanning content for specific strings or malicious script signatures, analysts can quickly identify common defacement tools, images, or messages used by threat actors. A match provides a high-confidence indicator of a successful defacement.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Windows Event ID 4663
      - File systems of public-facing web servers (e.g., C:\inetpub\wwwroot)
      - Network traffic egress points capturing HTTP responses
      - File integrity monitoring agent logs.
    range: last 90 days
    queries:
      - pseudocode: SEARCH file write events (EID 4663) in web directories. FOR EACH file, GET hash and content. COMPARE hash against threat intel feed. SCAN content for known defacement signatures. ALERT on match.
  - question: Have any modified web pages shown a statistically significant deviation from their previous versions, suggesting a potential defacement?
    context: This question focuses on detecting unexpected or drastic changes to web page content. By establishing a baseline for each page and calculating a similarity score (like Jaccard) upon modification, analysts can identify changes that are not typical of routine updates. A low similarity score, especially outside of normal deployment windows, strongly suggests that the page's original content has been replaced, which is a hallmark of defacement.
    answer_sources:
      - Windows Event ID 4663
      - File systems of public-facing web servers (e.g., C:\inetpub\wwwroot)
      - Network traffic egress points capturing HTTP responses
      - File integrity monitoring agent logs.
    range: last 90 days
    queries:
      - pseudocode: ON file modification event (EID 4663), FETCH previous and new file versions. CALCULATE Jaccard similarity score. IF score < threshold (e.g., 0.5) AND time is outside deployment window, ALERT.
  - question: Can machine learning models classify new or modified web page content as a potential defacement, even without known signatures?
    context: This question leverages machine learning to identify novel defacement attacks that do not match existing signatures. By training a text classification model on a large dataset of known defaced and legitimate web pages, the system can learn the linguistic and structural patterns associated with defacement. This allows for the detection of previously unseen attack content, providing a proactive defense against emerging threats.
    answer_sources:
      - Windows Event ID 4663
      - File systems of public-facing web servers (e.g., C:\inetpub\wwwroot)
      - Network traffic egress points capturing HTTP responses
      - File integrity monitoring agent logs.
    range: last 90 days
    queries:
      - pseudocode: ON new or modified web page, EXTRACT text content. INPUT text into pre-trained classification model (e.g., Naive Bayes). IF classification is 'Defacement' or 'Suspicious', ALERT.
  - question: Are there any inbound HTTP requests containing patterns indicative of common web application exploits like SQLi, XSS, or Command Injection?
    context: This question aims to proactively identify exploit attempts that often serve as the precursor to a defacement. By searching network traffic logs for common attack strings (e.g., SQL keywords, script tags), analysts can detect adversaries trying to find or leverage vulnerabilities in the web application. Correlating these attempts with successful server responses (2xx status codes) helps prioritize potentially successful breaches.
    answer_sources:
      - Zeek http.log
      - Network traffic sensors monitoring the DMZ
      - Logs from Web Application Firewalls (WAFs)
      - Reverse proxy server logs.
    range: last 90 days
    queries:
      - pseudocode: SEARCH http logs for regex patterns of SQLi, XSS, Command Injection in URI or POST body. IF match found AND response code is 2xx, ALERT.
  - question: Have any HTTP request parameters shown a sudden and anomalous increase in entropy, suggesting obfuscated attack payloads?
    context: This question addresses the challenge of detecting obfuscated or encoded attack strings that may evade simple pattern matching. By baselining the normal complexity (entropy) of parameter values for each URI, the system can flag sudden spikes in entropy. Such spikes are often caused by attackers using encoding or complex obfuscation techniques to hide their exploit payloads, making this a valuable method for detecting advanced attacks.
    answer_sources:
      - Zeek http.log
      - Network traffic sensors monitoring the DMZ
      - Logs from Web Application Firewalls (WAFs)
      - Reverse proxy server logs.
    range: last 90 days
    queries:
      - pseudocode: FOR EACH incoming HTTP request, CALCULATE Shannon entropy of URI parameter values. COMPARE to historical baseline for that parameter. IF entropy > 95th percentile, ALERT.
  - question: Can a machine learning model classify inbound HTTP requests as malicious based on their collective features?
    context: This question uses a holistic, feature-based machine learning approach to identify malicious requests. Instead of relying on a single indicator, a model can analyze a combination of features—such as request length, character frequency, and entropy—to build a comprehensive profile of an attack. This allows for the detection of a wider range of malicious requests by learning the subtle characteristics that distinguish them from benign traffic.
    answer_sources:
      - Zeek http.log
      - Network traffic sensors monitoring the DMZ
      - Logs from Web Application Firewalls (WAFs)
      - Reverse proxy server logs.
    range: last 90 days
    queries:
      - pseudocode: FOR EACH inbound HTTP request, EXTRACT features (length, param count, special chars, entropy). INPUT features into trained classifier. IF classification is 'Attack', ALERT.
  - question: Have web content files been modified by a non-standard user account or a suspicious parent process?
    context: This question helps identify unauthorized changes by focusing on the actor and context of the modification. An alert is triggered if a file write occurs in a web directory by an account not on an approved list (e.g., deployment or admin accounts). Correlating this with the parent process helps distinguish legitimate administrative actions from potentially malicious activity, such as a web shell spawning a process to alter files.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of public-facing web servers, especially web root directories such as C:\inetpub\wwwroot or /var/www/html.
    range: last 90 days
    queries:
      - pseudocode: SEARCH for file writes (EID 4663) in web root. IF user is not in allowlist, GET parent process (EID 4688). IF parent process is not a legitimate tool, ALERT.
  - question: Has there been a statistically anomalous volume of file modifications on web servers?
    context: This question seeks to identify unusual patterns of file modification activity that deviate from normal operational behavior. By establishing a baseline of file changes by user, process, and time, the system can detect spikes in modification volume or changes made by rare user-process combinations. Such anomalies can indicate a mass file-writing event typical of a defacement or a compromised account being used for unauthorized changes.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of public-facing web servers, especially web root directories such as C:\inetpub\wwwroot or /var/www/html.
    range: last 90 days
    queries:
      - pseudocode: BASELINE file modification (EID 4663) counts by user, process, and hour. ALERT if current activity exceeds 3 standard deviations from the mean for any dimension.
  - question: Can an anomaly detection model identify file modifications that deviate from normal deployment patterns?
    context: This question uses machine learning to build a multi-dimensional profile of normal file modification activity. An anomaly detection model, such as an Isolation Forest, can learn the complex relationships between time of day, user account, parent process, and file type. It can then flag modifications that do not conform to this learned pattern, effectively identifying novel or stealthy attempts to alter web content outside of legitimate deployment processes.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - File systems of public-facing web servers, especially web root directories such as C:\inetpub\wwwroot or /var/www/html.
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features (time, user, parent process, extension) from file modification events. INPUT features into trained Isolation Forest model. IF flagged as anomaly, ALERT.
  - question: Has a web server process spawned a command shell or scripting interpreter?
    context: This is a critical question for detecting web shells. A web server process (like w3wp.exe or apache2) should not normally be the parent of a command-line process (like cmd.exe or bash). Such an event is a very strong indicator that an attacker has established a web shell and is executing commands on the server, a common step taken to deface a site or escalate privileges.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (Sysmon, Windows Security) on public-facing web servers
      - Network connection logs from sensors monitoring traffic to and from these servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process creation logs (EID 4688) WHERE parent process is a web server process AND child process is a shell/interpreter (cmd.exe, powershell.exe, bash). ALERT on match.
  - question: Are there statistically rare command-line arguments being used in processes spawned by a web server?
    context: This question aims to detect web shell activity by analyzing the commands being executed, rather than just the process names. Attackers often use specific or unusual command-line arguments. By using a technique like TF-IDF to score the rarity of command-line arguments, analysts can identify commands that are statistically unlikely to be used in normal operations, especially when initiated by a web server process.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (Sysmon, Windows Security) on public-facing web servers
      - Network connection logs from sensors monitoring traffic to and from these servers.
    range: last 90 days
    queries:
      - pseudocode: FOR EACH command spawned by a web server process, CALCULATE TF-IDF score of its arguments against a baseline of common commands. IF score is high, ALERT.
  - question: Can a sequence analysis model detect a chain of events indicative of a web shell attack?
    context: This question moves beyond single indicators to identify a logical attack chain. A malicious sequence might involve an inbound connection from a rare IP, followed by the web server spawning a shell, which in turn writes a file to the web root. A sequence model like a Hidden Markov Model can be trained to recognize normal sequences of events and flag a series of actions that, when combined, represent a high-confidence attack pattern.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Process execution logs (Sysmon, Windows Security) on public-facing web servers
      - Network connection logs from sensors monitoring traffic to and from these servers.
    range: last 90 days
    queries:
      - pseudocode: MODEL normal event sequences using an HMM. FEED real-time events (Zeek conn, EID 4688, EID 4663) into the model. IF sequence is flagged as anomalous (e.g., rare IP -> shell spawn -> file write), ALERT.
  - question: Have any script files been uploaded to static content directories via HTTP POST requests?
    context: This question helps detect the initial placement of a web shell or defacement script. Web applications often have directories for user-uploaded images or documents. A rule that detects when an executable script file (.php, .aspx, etc.) is uploaded to one of these non-executable directories is a high-fidelity indicator that an attacker is attempting to place a malicious payload on the server.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - DMZ network segments
      - Reverse proxy logs
      - Load balancer logs
      - Web server logs.
    range: last 90 days
    queries:
      - pseudocode: SEARCH http logs for POST requests where file extension is a script type AND destination directory is a static content folder. ALERT on match.
  - question: Are there any HTTP POST requests with an anomalously large body size for a given URI?
    context: This question helps detect the upload of large files that may be part of a defacement. By baselining the typical size of POST request bodies for each unique URI, the system can flag requests that are statistically unusual. An attacker uploading a large defacement page with embedded images or a toolkit would likely trigger such an alert, providing an early warning of a potential compromise.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - DMZ network segments
      - Reverse proxy logs
      - Load balancer logs
      - Web server logs.
    range: last 90 days
    queries:
      - pseudocode: FOR EACH URI, baseline POST request body size. ON new POST request, IF body size > 99th percentile for that URI, ALERT.
  - question: Can clustering algorithms identify anomalous HTTP POST requests that represent web shell uploads?
    context: This question uses unsupervised machine learning to find outliers in POST request activity. By clustering requests based on features like source IP, user-agent, and request size, the system can group together 'normal' behaviors. Requests that do not fit into any cluster are considered outliers. This is effective for detecting novel attacks or uploads from unusual sources that might be attempting to place a web shell or defacement tool.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - DMZ network segments
      - Reverse proxy logs
      - Load balancer logs
      - Web server logs.
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features (source IP, user-agent, body length, URI) from POST requests. APPLY DBSCAN clustering. ALERT on any request classified as noise/outlier.