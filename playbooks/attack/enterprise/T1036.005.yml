name: T1036.005: Match Legitimate Resource Name or Location
id: 5a9b8c7d-6e3f-4a1b-9c8d-7e6f5a4b3c2d
description: Investigates adversary attempts to evade defenses by masquerading as a legitimate process or resource. This playbook focuses on detecting discrepancies between a process's observed attributes and its expected behavior. This includes checking if a process with a legitimate name has a malicious hash, is running from an unusual file path, contains incorrect or spoofed PE metadata, is spawned by an unexpected parent process, or exhibits anomalous secondary behaviors such as suspicious network connections or command-line arguments.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
investigative_questions:
  - question: Is a process with a legitimate name executing with a hash known to be malicious?
    context: Adversaries often disguise their malware by naming it after common system utilities (e.g., svchost.exe, lsass.exe). While the name appears benign, the underlying file is malicious. Comparing the file hash of the running process against a threat intelligence feed of known malicious hashes is a high-fidelity method for detecting this type of masquerading. A match is a strong indicator of a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - SIEM/Data Lake containing aggregated process creation logs
      - Integrated threat intelligence feed of known malicious file hashes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN (common_system_utilities) | JOIN file_hash WITH threat_intel_feed | RETURN events WHERE match_is_found
  - question: How prevalent is the file hash of a potentially masquerading process across the environment?
    context: Legitimate system files are typically identical across all hosts and therefore have a high prevalence. Conversely, malware is often deployed to a small number of targets. Calculating the environmental prevalence of a file hash helps to prioritize alerts. A hash seen on only a few machines, especially if the process name is for a common utility, is highly anomalous and warrants immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - SIEM/Data Lake containing aggregated process creation logs from all Windows hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | STATS count(endpoints) BY file_hash | WHERE count < threshold | RETURN rare_hashes
  - question: Can a machine learning model identify and score the likelihood that a process is masquerading based on its metadata?
    context: A machine learning model can automate the detection of subtle masquerading patterns by analyzing multiple features at once, such as filename, hash, file path, parent process, and threat intelligence status. This approach generates a 'masquerade confidence score' for each process, enabling analysts to efficiently prioritize the most suspicious events for review.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - SIEM/Data Lake with process metadata
      - Integrated threat intelligence feed
      - Pre-trained binary classification model
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT process_creation_events | APPLY ML_model(features=[filename, hash, path, parent, threat_intel_match]) | RETURN events WHERE masquerade_score > threshold
  - question: Is a critical system process executing from a non-standard or unauthorized file path?
    context: Critical Windows processes like lsass.exe and csrss.exe have specific, predictable execution paths (e.g., %SystemRoot%\System32). Adversaries may place a malicious executable with the same name in a different location, such as a temporary directory or user profile. Alerting on executions from non-approved paths is a highly effective way to detect this common evasion tactic.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Log aggregation platform collecting process creation events
      - An established allowlist of full execution paths for critical system processes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | WHERE process_name IN (critical_processes) AND process_path NOT IN (approved_paths_for_that_process) | RETURN suspicious_events
  - question: Is a process executing from a file path that is statistically rare for that process name across the enterprise?
    context: Beyond just critical system files, most applications tend to execute from consistent locations. By establishing a statistical baseline of normal (ProcessName, Path) pairs, we can identify outliers. A process executing from a directory that is unusual for it enterprise-wide could indicate a masquerading file or a legitimate tool dropped in an unexpected location for malicious purposes.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Log aggregation platform collecting process creation events
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | BASELINE frequency of (process_name, process_path) pairs over 30 days | ALERT on pairs with frequency < rarity_threshold
  - question: Can anomalous execution locations be identified by clustering process creation events based on file path characteristics?
    context: Clustering algorithms can group events based on similar features. By using characteristics of the file path (e.g., path depth, presence of keywords like 'Temp', character distribution) as features, we can identify normal clusters of execution behavior. Events that do not fit into any cluster are considered outliers and represent atypical executions from locations that deviate from established patterns, warranting investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Log aggregation platform with process path information
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT process_creation_events | CLUSTER using DBSCAN on features(path_depth, path_keywords) | INVESTIGATE outlier_events
  - question: Does the embedded PE metadata of a process match the expected values for its filename?
    context: Legitimate executables contain PE (Portable Executable) metadata, such as the original filename, company name, and product version. Adversaries who rename a malicious file to masquerade as a legitimate one often neglect to, or are unable to, alter this embedded metadata. Checking for null fields or mismatches between the on-disk filename and the PE metadata's 'OriginalFilename' can reveal a masquerading attempt.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - SIEM or log repository ingesting Sysmon Event ID 1 data with PE header information
      - A known-good baseline dictionary of PE metadata for common system binaries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH sysmon_eid_1 | WHERE process_name IN (common_system_binaries) | COMPARE PE_metadata_fields WITH known_good_baseline | ALERT on mismatch or null_fields
  - question: Are there statistical anomalies in the PE metadata of a process, such as high entropy or string distance?
    context: To bypass simple metadata checks, adversaries may fill PE fields with randomized or junk data. We can detect this by applying statistical analysis. Calculating the Levenshtein distance between the filename and the 'OriginalFilename' metadata can reveal renames. Similarly, high Shannon entropy in text fields like 'CompanyName' suggests randomized data rather than legitimate information.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - SIEM or log repository ingesting Sysmon Event ID 1 data with PE header information
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH sysmon_eid_1 | CALCULATE levenshtein_distance(filename, OriginalFilename) | CALCULATE shannon_entropy(CompanyName) | ALERT on high_distance or high_entropy
  - question: Can a machine learning model predict if a binary's PE metadata is inconsistent with a legitimate file?
    context: A machine learning classifier can be trained to distinguish between legitimate and suspicious PE metadata. By using features such as boolean flags for metadata matches, entropy scores, and string distance metrics, the model can provide a confidence score. This helps analysts focus on binaries whose metadata is most likely to have been manipulated as part of a masquerading attempt.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - SIEM or log repository ingesting Sysmon Event ID 1 data with PE header information
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT sysmon_eid_1 | APPLY ML_model(features=[metadata_match_flags, entropy_scores, string_distance]) | RETURN events WHERE inconsistency_score > threshold
  - question: Is a critical system process being spawned by an unexpected parent process?
    context: Operating systems have a predictable process hierarchy (e.g., wininit.exe is the parent of services.exe, which is a parent of svchost.exe). An adversary might cause a user-facing application like Microsoft Word (winword.exe) to launch a critical system process. This violates the expected process tree and is a strong indicator of compromise. Enforcing an allowlist of parent-child relationships for critical processes can detect this.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Process creation logs aggregated from all Windows hosts
      - An allowlist of known-good parent-child process relationships
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | WHERE child_process IN (critical_processes) AND parent_process NOT IN (allowed_parents_for_child) | RETURN violative_events
  - question: Is a statistically rare parent-child process pair being observed in the environment?
    context: Even for non-critical processes, certain parent-child relationships are common while others are not. By calculating the frequency of all observed parent-child pairs across the enterprise, we can identify statistically rare combinations. A rare pair could indicate an unusual execution chain initiated by an adversary and should be investigated.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Process creation logs aggregated from all Windows hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | CALCULATE frequency of all (parent_process, child_process) pairs over 30 days | ALERT on pairs with frequency in bottom_percentile
  - question: Has there been a sudden spike in the frequency of a high-risk parent-child process pair?
    context: Certain parent-child relationships, while sometimes legitimate, are also high-risk (e.g., outlook.exe spawning powershell.exe). A sudden, sharp increase in the frequency of such an event could signal a widespread, automated attack, such as a phishing campaign. Monitoring the counts of these pairs as a time series and applying anomaly detection can automatically flag such campaigns.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Process creation logs aggregated from all Windows hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR hourly_count of (outlook.exe -> powershell.exe) as time_series | APPLY anomaly_detection_model | ALERT on significant_spikes
  - question: Is a process with a legitimate system name making network connections to known malicious destinations?
    context: A process masquerading as a system utility (e.g., lsass.exe) must still communicate with its command-and-control (C2) server. Correlating network connection logs with threat intelligence feeds of known malicious IPs and domains is a direct way to unmask a masquerading process. A system process connecting to a known C2 server is a critical alert.
    answer_sources:
      - Windows Event ID 3 (Sysmon)
      - Zeek conn.log
      - Threat intelligence feeds of C2 servers and malicious domains
      - Process creation logs (Sysmon Event ID 1) for correlation
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connection_logs | JOIN destination_ip_or_domain WITH threat_intel_feed | WHERE process_name IN (system_utilities) AND match_is_found | RETURN critical_alerts
  - question: Is a process with a legitimate system name exhibiting anomalous command-line, network, or DNS behavior?
    context: Masquerading processes often give themselves away through their secondary actions. By building a behavioral profile for legitimate system processes, we can spot outliers. Anomalies to check for include: high-entropy command-line arguments (indicating obfuscated commands), network connections to unusual ports, or DNS requests for domains that appear algorithmically generated. Each of these deviations from the baseline suggests malicious activity.
    answer_sources:
      - Windows Event ID 1 (Sysmon) for command lines
      - Windows Event ID 3 (Sysmon) and Zeek conn.log for network connections
      - Zeek dns.log for DNS requests
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR process_name IN (system_utilities) | BASELINE normal behavior (CLI entropy, destination ports, DNS query patterns) | ALERT on deviations from baseline
  - question: Can an anomaly detection model identify masquerading processes based on a combined set of behavioral features?
    context: An advanced method for detecting masquerading is to use a model like an Isolation Forest that is trained on a feature set representing normal behavior. By combining features like command-line length and entropy, network bytes transferred, destination port, and DNS query characteristics, the model can identify outliers with high confidence. Any activity instance that the model flags as an anomaly is a strong indicator of a masquerading process.
    answer_sources:
      - Windows Event ID 1 (Sysmon)
      - Windows Event ID 3 (Sysmon)
      - Zeek conn.log
      - Zeek dns.log
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT process_and_network_events | APPLY IsolationForest(features=[cli_entropy, bytes_sent, dest_port, dns_entropy]) | RETURN events flagged as outliers