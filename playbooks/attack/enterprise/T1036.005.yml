name: T1036.005: Match Legitimate Resource Name or Location
id: 9e54d3e5-8a2e-4f36-8a71-2b834458f4c2
description: This playbook focuses on detecting adversaries attempting to evade defenses by making malicious executables appear as legitimate system utilities or resources. It addresses masquerading techniques such as using legitimate names with malicious file hashes, executing from non-standard file paths, having inconsistent embedded PE metadata, being spawned by anomalous parent processes, and exhibiting unusual secondary behaviors like suspicious network connections or command-line arguments. The goal is to uncover malware hiding in plain sight by identifying these discrepancies.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any process creation events for common system utilities where the file hash matches a known malicious signature from our threat intelligence feed?
  context: This question aims to identify the most direct form of masquerading, where an adversary replaces a legitimate system file with a malicious one of the same name. By joining process creation logs with threat intelligence, we can detect known malware attempting to hide in plain sight. A match provides a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - SIEM/Data Lake containing aggregated process creation logs (Sysmon Event ID 1, Windows Event ID 4688) from all Windows hosts, with a focus on servers hosting critical services (e.g., Domain Controllers, database servers) and user endpoints.
  - Integrated threat intelligence feed of known malicious file hashes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      WHERE process_name IN (common_system_utilities_list)
      JOIN file_hash with threat_intelligence_feed
      WHERE threat_intelligence_match = TRUE
      RETURN process_name, file_hash, hostname, timestamp
- question: For legitimate-looking processes with hashes matching known malware, what is their environmental prevalence, and can we prioritize the rarest occurrences?
  context: After identifying a masquerading process via a threat intel match, it's crucial to understand its scope. A malicious hash seen on only one or a few machines is far more suspicious and potentially indicative of a targeted, non-widespread attack. This question helps analysts prioritize investigations by focusing on the rarest, and therefore most anomalous, events.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - SIEM/Data Lake containing aggregated process creation logs (Sysmon Event ID 1, Windows Event ID 4688) from all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      WHERE file_hash IN (malicious_hashes_from_previous_query)
      STATS count(distinct hostname) by file_hash
      SORT by count(distinct hostname) ASC
      RETURN file_hash, prevalence_count
- question: Can we use a machine learning model to generate a 'masquerade confidence score' for process creation events to prioritize potentially malicious activity?
  context: This question explores a more advanced, probabilistic approach. A machine learning model can analyze multiple features of a process (filename, hash, path, parent process) simultaneously to identify subtle patterns of masquerading that might be missed by simple rules. A high confidence score from the model allows analysts to focus their efforts on the most likely threats.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - SIEM/Data Lake containing aggregated process creation logs with enriched metadata (e.g., threat intel match status, parent process info).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      STREAM process_creation_events
      INPUT_FEATURES (filename, hash, file_path, parent_process_name, threat_intel_match_status)
      APPLY classification_model
      WHERE masquerade_confidence_score > 0.9
      RETURN event, masquerade_confidence_score
- question: Are critical system processes executing from paths not on our established allowlist?
  context: Critical system processes have expected, standard execution paths (e.g., lsass.exe from System32). An adversary placing a malicious binary with the same name in a different location (e.g., C:\Temp) is a common evasion technique. This question uses a strict allowlist to quickly identify these high-confidence anomalies.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Log aggregation platform collecting process creation events from all Windows hosts, with specific focus on monitoring temporary file locations (%TEMP%, %TMP%, C:\Users\Public), user profile directories, and network-accessible shares.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      WHERE process_name IN (critical_system_processes_list)
      COMPARE (process_name, file_path) against (approved_path_allowlist)
      WHERE is_not_on_allowlist
      RETURN hostname, process_name, file_path
- question: Are there statistically rare process name and path combinations occurring in the environment?
  context: Beyond just critical processes, any process executing from an unusual location can be suspicious. This question moves from a rigid allowlist to a statistical approach, building a baseline of normal execution paths and flagging any process-path pair that is statistically rare across the enterprise, which could indicate an adversary's tool.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Log aggregation platform collecting process creation events from all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      STATS frequency of each (process_name, file_path) pair
      WHERE frequency < threshold (e.g., bottom 1st percentile)
      RETURN process_name, file_path, frequency_count
- question: Can we identify outlier clusters of process executions based on file path characteristics?
  context: This question applies unsupervised machine learning to detect anomalous execution locations. By clustering processes based on features of their file paths (like depth, or keywords like 'Temp'), we can programmatically identify groups of outliers that do not conform to any established pattern of normal behavior, warranting investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Log aggregation platform collecting process creation events from all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      EXTRACT features from file_path (e.g., path_depth, keyword_presence)
      APPLY DBSCAN clustering on path_features
      RETURN events in outlier_clusters
- question: Are common system binaries executing with PE metadata that doesn't match our known-good baseline?
  context: Adversaries often fail to replicate the rich PE metadata (e.g., CompanyName, OriginalFilename) of the legitimate files they are impersonating. This question checks the metadata of executed files against a dictionary of known-good values. Mismatched or null fields for a system binary are strong indicators of a counterfeit file.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - SIEM or log repository ingesting Sysmon Event ID 1 data from all Windows systems, with PE header information collection enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH sysmon_eid_1_logs
      WHERE process_name IN (common_system_binaries_list)
      COMPARE (PE_OriginalFilename, PE_InternalName, PE_CompanyName) against (known_good_metadata_dictionary)
      WHERE metadata_is_null OR metadata_does_not_match
      RETURN hostname, process_name, PE_metadata_fields
- question: Can we detect renamed system files or junk PE metadata using string distance and entropy calculations?
  context: This question provides a more nuanced way to detect metadata anomalies. It checks for discrepancies between the on-disk filename and the internal 'OriginalFilename' (indicating a rename) and calculates the entropy of text fields. Abnormally high entropy can suggest that an adversary used random characters to fill metadata fields, which is a sign of a fake binary.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - SIEM or log repository ingesting Sysmon Event ID 1 data from all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH sysmon_eid_1_logs
      CALCULATE levenshtein_distance(on_disk_filename, PE_OriginalFilename)
      CALCULATE shannon_entropy(PE_Description, PE_CompanyName)
      WHERE levenshtein_distance > 0 OR shannon_entropy > threshold
      RETURN event_details, distance_score, entropy_score
- question: Can a machine learning model predict whether a binary's PE metadata is inconsistent with a legitimate file?
  context: This question proposes using a classifier to synthesize various metadata signals (field matches, entropy scores, string distances) into a single, actionable score. This allows for a more robust detection capability that can weigh multiple weak signals to identify suspicious binaries with higher confidence.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - SIEM or log repository ingesting Sysmon Event ID 1 data from all Windows systems.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      STREAM sysmon_eid_1_logs
      INPUT_FEATURES (metadata_match_flags, entropy_scores, string_distance_metrics)
      APPLY random_forest_classifier
      WHERE is_inconsistent_metadata_prediction > 0.9
      RETURN event, prediction_score
- question: Are critical system processes being spawned by parent processes that violate our established parent-child allowlist?
  context: Legitimate system processes have predictable parent processes (e.g., wininit.exe is the parent of lsass.exe). A violation of this hierarchy, such as winword.exe spawning lsass.exe, is a major red flag for process injection or other malicious activity. This question uses a strict allowlist to detect such violations.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Aggregated process creation logs from all Windows hosts, including parent-child relationships.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      WHERE child_process IN (high_value_system_processes)
      COMPARE (parent_process, child_process) against (parent_child_allowlist)
      WHERE relationship_is_not_on_allowlist
      RETURN hostname, parent_process, child_process
- question: Are there any statistically rare parent-child process pairs occurring that could indicate an unusual execution chain?
  context: This question expands the parent-child analysis beyond a fixed allowlist. By calculating the frequency of all parent-child pairs across the enterprise, we can identify statistically rare relationships. An unusual pairing, even if not involving a critical system process, can reveal an adversary's execution chain.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Aggregated process creation logs from all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs
      STATS frequency of each (parent_process, child_process) pair
      WHERE frequency < threshold (e.g., bottom 1st percentile)
      RETURN parent_process, child_process, frequency_count
- question: Are there anomalous spikes in the frequency of high-risk parent-child process pairs?
  context: Certain process chains, while sometimes legitimate, are also high-risk (e.g., an office application spawning a script host). This question applies time-series anomaly detection to monitor the rate of these events. A sudden, sharp increase in their frequency could signal the start of a widespread malicious campaign, such as phishing.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Aggregated process creation logs from all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_logs WHERE (parent_process, child_process) in (high_risk_pairs_list)
      CREATE time_series of hourly/daily counts
      APPLY SARIMA or Prophet model
      WHERE anomaly_detected
      RETURN timestamp, count, anomaly_score
- question: Are processes with legitimate system names making network connections to known malicious destinations?
  context: This question seeks to identify a masquerading process by its actions. Even if a process looks legitimate by name, path, and parent, a network connection to a known command-and-control (C2) server is a definitive indicator of compromise. This involves correlating process network activity with threat intelligence.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - Zeek dns.log
  - Network and endpoint logs correlated with threat intelligence feeds.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_connection_logs (Sysmon EID 3, Zeek)
      JOIN process_info from process_creation_logs (Sysmon EID 1)
      WHERE process_name IN (legitimate_system_names_list)
      JOIN destination_ip OR destination_domain with threat_intel_feed
      WHERE threat_intel_match = TRUE
      RETURN hostname, process_name, destination
- question: Are legitimate-looking system processes exhibiting anomalous behavior such as high-entropy command lines, connections to unusual ports, or DNS requests for suspicious domains?
  context: This question aims to build a behavioral baseline for legitimate processes and flag deviations. A masquerading process may give itself away by its secondary actions, such as using obfuscated command-line arguments (high entropy), connecting to non-standard ports, or making DNS lookups for algorithmically generated domains (DGA).
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - Zeek dns.log
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_and_network_logs
      FOR each known_system_process:
        CALCULATE entropy(command_line) and check if > 95th percentile
        CHECK if destination_port is not in top 99% of historical ports
        CALCULATE entropy(dns_query) and check if statistically high
      WHERE any_behavioral_check_is_true
      RETURN event, anomalous_behavior_type
- question: Can an anomaly detection model identify system processes behaving as outliers based on a combination of features?
  context: This question proposes using an unsupervised model like Isolation Forest to holistically detect behavioral anomalies. By feeding the model a feature set including command-line metrics, network statistics, and DNS query characteristics, it can learn the profile of 'normal' and automatically flag any process that behaves as a multi-dimensional outlier, indicating a likely masquerade.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - Zeek dns.log
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      STREAM process_and_network_events
      INPUT_FEATURES (cmd_line_entropy, bytes_sent, dest_port, dns_query_entropy, etc.)
      APPLY Isolation_Forest_model
      WHERE is_outlier = TRUE
      RETURN event, outlier_score