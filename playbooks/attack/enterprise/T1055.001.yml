name: T1055.001: Dynamic-link Library Injection
id: c4d9a8e0-7b5f-4a0e-9d2c-1f6a8b7c6d5e
description: This playbook provides investigative steps to detect Dynamic-link Library (DLL) Injection (T1055.001), a technique where adversaries run arbitrary code in the address space of a separate live process. This is often used for privilege escalation and defense evasion. The playbook focuses on identifying evidence such as processes loading known malicious or statistically rare DLLs, high-integrity processes loading unsigned DLLs, processes creating remote threads across integrity levels, privileged processes loading DLLs from non-standard paths, and the close temporal relationship between memory write and remote thread creation events. It also covers defense evasion scenarios, such as trusted processes loading malicious DLLs, suspicious command-line executions, and anomalous network C2 traffic following a DLL load. The investigative questions leverage symbolic, statistical, and machine learning approaches to analyze data from sources like Sysmon and network logs.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any processes loading DLLs with file hashes known to be malicious?
    context: This question seeks to identify classic DLL injection attacks where an adversary uses a known malicious DLL. By continuously monitoring image load events (Sysmon Event ID 7) and comparing the hash of every loaded DLL against a high-confidence threat intelligence feed, we can detect the use of malware with a high degree of certainty. A match indicates a compromised system and requires immediate investigation.
    answer_sources: Sysmon Event ID 7, Threat Intelligence Feed. Applicable on Domain Controllers, Application Servers, User Workstations.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 7 | JOIN with Threat_Intel_Hashes ON DLL_Hash | WHERE match_found
  - question: Are privileged processes loading statistically rare or never-before-seen DLLs?
    context: Adversaries may use novel or custom DLLs that are not in threat intelligence feeds. This question aims to find such anomalies by baselining normal behavior. For critical, high-integrity processes like lsass.exe, a profile of normally loaded DLLs is established. Any DLL loaded by these processes that is statistically rare (e.g., in the 1st percentile of load frequency across the environment) is highly suspicious and could indicate a targeted injection attempt.
    answer_sources: Sysmon Event ID 7. Applicable on Domain Controllers, Application Servers, User Workstations.
    range: last 90 days
    queries:
      - statistical: SEARCH Sysmon Event ID 7 for privileged processes | GROUPBY DLL_Name | CALCULATE frequency | FILTER frequency < 1st percentile
  - question: Can machine learning models predict if a DLL load event is likely malicious based on its characteristics?
    context: This question leverages machine learning to move beyond simple signatures and statistics. By training a classification model on features from image load events (e.g., parent/target process, DLL signature status, path entropy), the model can learn the complex patterns of both benign and malicious DLL loads. This allows for the scoring and flagging of suspicious events that might otherwise be missed by symbolic or statistical methods.
    answer_sources: Sysmon Event ID 7. Applicable on Domain Controllers, Application Servers, User Workstations.
    range: last 90 days
    queries:
      - machine_learning: INPUT Sysmon Event ID 7 features (process_name, dll_path, signature_status) INTO trained_classifier | OUTPUT malicious_likelihood_score | ALERT on score > threshold
  - question: Are any high-integrity system processes loading unsigned DLLs or DLLs with mismatched filenames?
    context: This question focuses on a common indicator of malicious activity. Legitimate system components are almost always digitally signed. An unsigned DLL being loaded by a critical system process (like lsass.exe or services.exe), or a DLL whose internal metadata name doesn't match its disk filename, is a strong indicator of compromise. This query filters for such events while allowing for a pre-approved exclusion list of known-good unsigned DLLs to reduce false positives.
    answer_sources: Sysmon Event ID 7. Applicable on Domain Controllers, Critical System Servers, User Workstations.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 7 | WHERE target_process is system_critical AND DLL_signed is false | EXCLUDE known_good_unsigned_DLLs
  - question: Are certain processes loading an anomalously high percentage of unsigned DLLs compared to their baseline?
    context: Instead of looking at a single event, this question analyzes behavior over time. By establishing a baseline for the percentage of unsigned DLLs loaded by each process across the enterprise, we can use statistical methods (like a Z-score) to detect significant deviations. A process that suddenly starts loading a much higher proportion of unsigned DLLs than its historical norm is behaving anomalously and warrants investigation for potential compromise.
    answer_sources: Sysmon Event ID 7. Applicable on Domain Controllers, Critical System Servers, User Workstations.
    range: last 90 days
    queries:
      - statistical: For each process, CALCULATE percentage of unsigned DLL loads over time | ESTABLISH baseline | ALERT if current percentage > 99th percentile of baseline
  - question: Can we identify anomalous clusters of unsigned DLLs being loaded into high-integrity processes?
    context: This question applies unsupervised machine learning to find suspicious patterns. By clustering DLL load events based on features like signature status, process integrity level, and DLL path, we can distinguish normal activity from outliers. Clusters of unsigned DLLs being loaded into high-integrity processes that are distinct from known, benign clusters can reveal sophisticated or previously unseen injection techniques.
    answer_sources: Sysmon Event ID 7. Applicable on Domain Controllers, Critical System Servers, User Workstations.
    range: last 90 days
    queries:
      - machine_learning: CLUSTER Sysmon Event ID 7 events on features (signature, integrity, path) | IDENTIFY outlier clusters of unsigned DLLs in high-integrity processes
  - question: Is any process creating a remote thread in another process with a higher integrity level?
    context: This is a classic pattern for privilege escalation via process injection. A lower-privilege process (e.g., running as a standard user) should not be creating threads in a higher-privilege process (e.g., running as SYSTEM). This question identifies this specific, high-fidelity indicator by monitoring for remote thread creation events (Sysmon Event ID 8) where the source process integrity is lower than the target's. Known benign exceptions, like specific system management tools, should be excluded.
    answer_sources: Sysmon Event ID 8. Applicable on User Workstations, Terminal Servers, Domain Controllers.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 8 | WHERE source_integrity_level < target_integrity_level | EXCLUDE known_good_source_target_pairs
  - question: Are statistically rare source-to-target process pairs creating remote threads with an integrity level increase?
    context: This question aims to find unusual process interactions that could signal an attack. While some cross-process thread creation is normal, an adversary might use an uncommon combination of processes. By building a frequency distribution of all source-target pairs for remote thread creation, we can identify and alert on pairs that are statistically rare and also involve an increase in integrity level, pointing to a likely privilege escalation attempt.
    answer_sources: Sysmon Event ID 8. Applicable on User Workstations, Terminal Servers, Domain Controllers.
    range: last 90 days
    queries:
      - statistical: SEARCH Sysmon Event ID 8 with integrity increase | CALCULATE frequency of source-target pairs | ALERT on pairs with frequency < threshold (e.g., 5 times in 30 days)
  - question: Has a time-series anomaly been detected in the rate of low-to-high integrity remote thread creations on any host?
    context: This question looks for a sudden spike in privilege escalation activity on a single machine. By modeling the normal rate of low-to-high integrity remote thread creations per host over time, an anomaly detection model can flag any host that suddenly exhibits a burst of these events. Such a spike is a strong indicator that an active privilege escalation attack is underway on that machine.
    answer_sources: Sysmon Event ID 8. Applicable on User Workstations, Terminal Servers, Domain Controllers.
    range: last 90 days
    queries:
      - machine_learning: For each host, MODEL time-series of low-to-high integrity remote thread creations | DETECT anomalous spikes compared to host's own baseline and peers
  - question: Are privileged system processes loading DLLs from non-standard or user-writable locations?
    context: This question targets a common adversarial tactic of placing a malicious DLL in an unsecured location and tricking a privileged process into loading it. System processes should only load DLLs from trusted system directories (e.g., C:\Windows\System32). An alert should be generated if a privileged process (e.g., svchost.exe) loads a DLL from a user-writable path like 'C:\Users\*' or a temporary directory, as this is highly indicative of DLL hijacking or injection.
    answer_sources: Sysmon Event ID 7. Applicable on File Servers, User Workstations, Application Servers.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 7 | WHERE target_process is privileged AND DLL_path is in a non-standard location (e.g., C:\Users\*, C:\Windows\Temp\*)
  - question: Are system-critical processes loading DLLs from paths with unusually high entropy?
    context: To evade detection based on static paths, adversaries often use randomized directory or file names. This question aims to detect this by calculating the Shannon entropy of the DLL path. For a given critical process, we can establish a baseline for the normal entropy of its loaded DLL paths. A path with an entropy score significantly higher than the baseline suggests a randomized, algorithmically generated path, which is a hallmark of malware.
    answer_sources: Sysmon Event ID 7. Applicable on File Servers, User Workstations, Application Servers.
    range: last 90 days
    queries:
      - statistical: For critical processes, CALCULATE entropy of loaded DLL paths | ESTABLISH baseline entropy | ALERT if new DLL path entropy is > 3 standard deviations from mean
  - question: Can a machine learning model identify anomalous DLL load paths for critical processes?
    context: This question uses a one-class classification model to learn the profile of 'normal' DLL load paths for critical processes. By training a model like a One-Class SVM on legitimate path features, it creates a boundary that defines normal behavior. Any new DLL load path that falls outside this learned boundary is classified as an anomaly, providing a powerful way to detect novel or obfuscated malicious file placements.
    answer_sources: Sysmon Event ID 7. Applicable on File Servers, User Workstations, Application Servers.
    range: last 90 days
    queries:
      - machine_learning: TRAIN a One-Class SVM on legitimate DLL load paths for critical processes | CLASSIFY new load paths | ALERT on paths classified as anomalies
  - question: Has a process written to another process's memory and immediately created a remote thread in it?
    context: This question looks for the specific, tightly-coupled sequence of events that defines a classic process injection attack. An adversary must first write their malicious code into the target's memory (Process Access, Event ID 10) and then execute it by creating a thread (Create Remote Thread, Event ID 8). Correlating these two events from the same source to the same target within a very short timeframe (e.g., <1 second) is a high-fidelity indicator of malicious injection.
    answer_sources: Sysmon Event ID 10, Sysmon Event ID 8. Applicable on User Workstations, Domain Controllers, Servers hosting sensitive applications.
    range: last 90 days
    queries:
      - symbolic: SEARCH for Event ID 10 (with memory write access) and Event ID 8 | CORRELATE by source/target process | ALERT if same pair occurs within 1 second
  - question: Are there instances of process memory access followed by remote thread creation with an unusually short time delay?
    context: While the symbolic query looks for a near-instantaneous sequence, this statistical approach analyzes the time delta between memory access and thread creation events for all source/target pairs. Benign interactions may have a wide distribution of delays. Malicious injection, however, is typically automated and will consistently have a very short delay. Events in the lowest percentile of this time delta distribution are highly suspicious and likely represent a scripted injection sequence.
    answer_sources: Sysmon Event ID 10, Sysmon Event ID 8. Applicable on User Workstations, Domain Controllers, Servers hosting sensitive applications.
    range: last 90 days
    queries:
      - statistical: For all source/target pairs, CALCULATE time delta between Event 10 (write) and Event 8 (thread) | ANALYZE distribution of deltas | ALERT on deltas in <1st percentile
  - question: Is a sequence of system events occurring that has a low probability of being benign?
    context: This question uses a more advanced sequential model to understand system behavior. By training a Hidden Markov Model (HMM) on vast amounts of benign system event sequences, the model learns what 'normal' state transitions look like. A sequence like ProcessAccess followed immediately by CreateRemoteThread might have a very low probability under this benign model, thus flagging it as a significant anomaly consistent with process injection.
    answer_sources: Sysmon Event ID 10, Sysmon Event ID 8. Applicable on User Workstations, Domain Controllers, Servers hosting sensitive applications.
    range: last 90 days
    queries:
      - machine_learning: TRAIN a Hidden Markov Model on benign event sequences | CALCULATE probability of observed sequences (e.g., Event 10 -> Event 8) | ALERT on low-probability sequences
  - question: Are commonly trusted processes loading DLLs that are known to be malicious?
    context: Adversaries inject into trusted processes (e.g., explorer.exe, chrome.exe) to masquerade their activity and bypass firewalls or security controls. This question seeks to detect this evasion technique by monitoring for image load events where a trusted parent process loads a DLL whose hash or file path is a known indicator of compromise from a threat intelligence feed.
    answer_sources: Sysmon Event ID 7. Applicable on User Workstations, Web Proxies, Application Servers.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 7 | WHERE parent_process is trusted (e.g., explorer.exe) AND DLL_hash or DLL_path is on a threat intel list
  - question: Are trusted processes loading a set of DLLs that significantly deviates from their normal baseline?
    context: This question aims to detect injection of novel or unknown DLLs into trusted processes. For each trusted process, a baseline set of normally loaded DLLs is established. During a given time window, the set of newly loaded DLLs is compared to this baseline using a similarity metric like the Jaccard index. A low similarity score indicates that the process is loading a very different set of DLLs than usual, which could be the result of a process injection attack.
    answer_sources: Sysmon Event ID 7. Applicable on User Workstations, Web Proxies, Application Servers.
    range: last 90 days
    queries:
      - statistical: For each trusted process, PROFILE baseline set of loaded DLLs | In a time window, COMPARE current loaded DLLs to baseline using Jaccard index | ALERT on low similarity score
  - question: Can a machine learning model detect anomalous DLL loads into trusted processes?
    context: This question uses an autoencoder neural network to learn a compressed representation of legitimate DLL loads for trusted processes. The model is trained to reconstruct feature vectors of normal events with low error. When a new DLL load event occurs (e.g., from an injection), its characteristics will differ from the training data, resulting in a high reconstruction error. This high error flags the event as anomalous and potentially malicious.
    answer_sources: Sysmon Event ID 7. Applicable on User Workstations, Web Proxies, Application Servers.
    range: last 90 days
    queries:
      - machine_learning: TRAIN autoencoder on legitimate DLL load features for trusted processes | CALCULATE reconstruction error for new events | ALERT on high error
  - question: Is rundll32.exe being used to load DLLs from suspicious locations, or are there unusual parent-child process relationships?
    context: Adversaries frequently use the legitimate Windows utility 'rundll32.exe' to execute malicious DLLs. This question looks for its use with suspicious arguments, such as a DLL located in a temporary or user-writable directory. It also hunts for unusual process chains, such as a Microsoft Office application spawning a command shell or PowerShell, which is a common pattern for executing a secondary payload after initial compromise.
    answer_sources: Sysmon Event ID 1, Windows Security Event ID 4688. Applicable on User Workstations, Servers, Domain Controllers.
    range: last 90 days
    queries:
      - symbolic: SEARCH Process Creation events | WHERE process is rundll32.exe AND DLL_path is suspicious OR parent is Office app AND child is powershell.exe/cmd.exe
  - question: Are statistically rare parent-child process relationships being observed, especially with high-entropy command lines?
    context: This question seeks to find anomalous process execution chains that might be missed by static rules. By calculating the rarity of all parent-child process relationships across the enterprise, we can flag uncommon events, such as winword.exe spawning rundll32.exe. This is made even more suspicious if the command line arguments of the child process have high entropy, suggesting obfuscation or randomization used by an attacker.
    answer_sources: Sysmon Event ID 1, Windows Security Event ID 4688. Applicable on User Workstations, Servers, Domain Controllers.
    range: last 90 days
    queries:
      - statistical: CALCULATE rarity of parent-child process pairs | ALERT on rare pairs (e.g., winword.exe -> rundll32.exe) | INCREASE alert severity if command line entropy is high
  - question: Can a machine learning model detect anomalous or obfuscated command-line arguments?
    context: Adversaries often obfuscate command-line arguments to hide their intent. This question uses a sequence-based model like an LSTM, which is well-suited for analyzing text, to learn the structure of benign command lines. By training on millions of normal commands, the model can flag new commands that are syntactically or semantically anomalous, effectively detecting obfuscated commands used for process injection or other malicious actions.
    answer_sources: Sysmon Event ID 1, Windows Security Event ID 4688. Applicable on User Workstations, Servers, Domain Controllers.
    range: last 90 days
    queries:
      - machine_learning: TRAIN LSTM model on benign command-line strings | USE model to flag syntactically or semantically anomalous new commands
  - question: After a suspicious DLL load, is the parent process making network connections to known malicious destinations?
    context: A common goal of DLL injection is to establish a command-and-control (C2) channel. This question correlates a suspicious DLL load event with subsequent network activity from the same process. If that process then initiates a connection to an IP or domain on a threat intelligence blocklist, it provides strong evidence that the injected DLL is malicious and is 'calling home'.
    answer_sources: Sysmon Event ID 7, Zeek conn.log, Zeek dns.log. Applicable on Network Egress Points, DNS Servers, User Workstations.
    range: last 90 days
    queries:
      - symbolic: ON suspicious DLL load (Sysmon EID 7), monitor process network activity (Zeek logs) | ALERT if destination IP/domain is on a threat intel list
  - question: Following a suspicious DLL load, does the process exhibit periodic, 'heartbeat' network traffic?
    context: C2 traffic often manifests as periodic, 'heartbeat' beacons from the compromised host to the C2 server. This question aims to detect this pattern. After a suspicious DLL load is observed, the network traffic of the affected process is analyzed for periodicity. Using techniques like a Fourier transform on the time intervals between connections can reveal a strong, regular frequency, which is uncharacteristic of normal user-driven traffic and is a hallmark of C2 beaconing.
    answer_sources: Sysmon Event ID 7, Zeek conn.log. Applicable on Network Egress Points, DNS Servers, User Workstations.
    range: last 90 days
    queries:
      - statistical: ON suspicious DLL load, analyze subsequent network connection time deltas | USE Fourier transform to detect strong periodicity (beaconing) | ALERT on detection
  - question: After a suspicious DLL load, does the process's network traffic volume deviate from its forecasted norm?
    context: This question uses time-series forecasting to detect anomalous network behavior. A model (e.g., ARIMA) is trained on the normal network traffic volume for a given trusted process. After a suspicious DLL load is flagged, the process's subsequent network traffic is monitored. If the actual traffic volume deviates significantly from what the model forecasted, it indicates a change in behavior, potentially due to malicious C2 activity.
    answer_sources: Sysmon Event ID 7, Zeek conn.log. Applicable on Network Egress Points, DNS Servers, User Workstations.
    range: last 90 days
    queries:
      - machine_learning: TRAIN ARIMA model on normal process network traffic volume | ON suspicious DLL load, FORECAST expected traffic | ALERT if actual traffic significantly deviates from forecast
  - question: Are there any DLL load events where the file path on disk is null or empty?
    context: This question targets an advanced evasion technique known as reflective DLL injection. In this method, an adversary loads a DLL directly from memory without it ever touching the disk. In many logging systems, like Sysmon, this can result in an Image Load event (Event ID 7) where the 'ImageLoaded' path is null. Alerting on any such event can catch adversaries who are attempting to bypass on-disk antivirus and file-based detection.
    answer_sources: Sysmon Event ID 7. Applicable on User Workstations, Application Servers, Web Servers.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 7 | ALERT where 'ImageLoaded' field is null or empty
  - question: Are processes loading DLLs from directories that are statistically uncommon for that process?
    context: Even if a DLL is not reflectively loaded, an adversary may place it in an unusual but valid directory. This question establishes a profile of all legitimate DLL load locations for a given process across the enterprise. It then calculates the frequency of use for each source directory. A DLL being loaded from a directory in the bottom percentile of usage frequency (e.g., a user's Downloads folder for svchost.exe) is highly anomalous and should be investigated.
    answer_sources: Sysmon Event ID 7. Applicable on User Workstations, Application Servers, Web Servers.
    range: last 90 days
    queries:
      - statistical: For each process, build frequency profile of DLL load directories | ALERT if a DLL is loaded from a directory in the <1st percentile of usage
  - question: Can a machine learning model identify anomalous DLL load paths?
    context: This question uses an anomaly detection model to identify outlier paths that do not conform to normal patterns. By extracting features from a DLL path (e.g., path depth, directory name entropy, presence of keywords like 'Temp'), an Isolation Forest model can efficiently identify paths that are structurally different from the millions of legitimate paths seen in a benign environment. This can catch injection attempts from unexpected or algorithmically generated locations.
    answer_sources: Sysmon Event ID 7. Applicable on User Workstations, Application Servers, Web Servers.
    range: last 90 days
    queries:
      - machine_learning: TRAIN Isolation Forest model on features from legitimate DLL paths | IDENTIFY outlier paths that do not conform to normal patterns
  - question: Is a common user application creating a remote thread in another unrelated process?
    context: This question hunts for illogical or unexpected process interactions. A process like a web browser or office application has no legitimate reason to be creating a remote thread in another process like svchost.exe or notepad.exe. Such an action is a strong indicator that the source application has been compromised and is being used to inject code into another process for evasion or persistence. This query hunts for these unlikely source-target pairs.
    answer_sources: Sysmon Event ID 8. Applicable on User Workstations, Terminal Servers.
    range: last 90 days
    queries:
      - symbolic: SEARCH Sysmon Event ID 8 | WHERE source is a common user app (chrome.exe, winword.exe) AND target is another common process (svchost.exe, notepad.exe) | EXCLUDE known good pairs
  - question: Are statistically uncommon source-to-target process pairs being observed for remote thread creation?
    context: This question uses a simple frequency analysis to find rare process interactions. By creating a frequency table of all SourceImage/TargetImage pairs for remote thread creation across the entire enterprise, we can assign a rarity score to each interaction. Pairs that are extremely rare (e.g., occurring only once or twice) are highly suspicious and warrant investigation, as they may represent a novel attack pathway.
    answer_sources: Sysmon Event ID 8. Applicable on User Workstations, Terminal Servers.
    range: last 90 days
    queries:
      - statistical: CREATE frequency table of all SourceImage/TargetImage pairs for Event ID 8 | CALCULATE rarity score (e.g., 1/frequency) | ALERT on scores above a threshold
  - question: Can graph-based anomaly detection find unusual remote thread creation events?
    context: This question models the entire system's behavior as a large graph, where processes are nodes and interactions like remote thread creation are directed edges. By applying graph-based anomaly detection algorithms, we can find anomalous edges (rare source-target connections) or even entire subgraphs that deviate from the normal process interaction graph of the enterprise. This provides a holistic view and can uncover complex, multi-step attack chains involving process injection.
    answer_sources: Sysmon Event ID 8. Applicable on User Workstations, Terminal Servers.
    range: last 90 days
    queries:
      - machine_learning: MODEL processes as nodes and remote thread creations as edges in a graph | USE graph anomaly detection algorithms to find anomalous edges or subgraphs