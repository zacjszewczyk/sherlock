name: "T1055.001: Dynamic-link Library Injection"
id: "f8a1b2c3-d4e5-4f6a-b7c8-d9e0f1a2b3c4"
description: |
  This playbook helps analysts investigate Dynamic-link Library (DLL) Injection, a technique used by adversaries for privilege escalation and defense evasion. The investigation focuses on identifying attempts to run malicious code in the context of a separate live process. Key indicators include: a process loading a DLL with a known malicious hash; a high-integrity system process loading an unsigned or mismatched DLL; a lower-integrity process creating a remote thread in a higher-integrity process; a privileged process loading a DLL from a non-standard or user-writable path; and the rapid, correlated sequence of a process gaining memory write access and then creating a remote thread in a target. Evasion techniques covered include injecting into commonly trusted processes, using utilities like rundll32.exe with suspicious arguments, subsequent C2 network traffic following a suspicious DLL load, and reflective or in-memory loading where the DLL has no on-disk file path.
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Is a process loading a DLL with a file hash that matches a known malicious indicator?"
    context: "This question aims to detect the most direct form of DLL injection where malware is loaded into another process. By correlating DLL file hashes from loaded images (Sysmon Event ID 7) against threat intelligence, analysts can identify known malicious code being executed under the context of another process, a common technique for privilege escalation and evasion. A match provides a high-confidence indicator of compromise."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Domain Controllers"
      - "Application Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 | JOIN with Threat_Intel_Feed ON file_hash | WHERE match_found RETURN hostname, process_name, dll_path, dll_hash"
  - question: "Is a privileged process loading a statistically rare or never-before-seen DLL?"
    context: "This question focuses on identifying anomalous behavior without prior knowledge of a malicious hash. Privileged processes typically have a stable set of DLLs they load. By establishing a baseline and using frequency analysis, analysts can detect when a rare or novel DLL is loaded into a high-value process like lsass.exe. This is a strong indicator of an adversary attempting to inject code into a process with elevated permissions."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Domain Controllers"
      - "Application Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 WHERE process is privileged | GROUP BY process, loaded_dll | CALCULATE frequency | WHERE frequency is in 1st percentile RETURN hostname, process, loaded_dll, frequency"
  - question: "Can a machine learning model classify a DLL load event as malicious based on its characteristics?"
    context: "This question leverages machine learning to build a predictive model for detecting malicious DLL loads. By training a classifier on features like the parent process, target process, DLL signature status, and path characteristics, the model can learn the complex patterns that differentiate benign activity from malicious injection attempts. This provides a more nuanced and potentially proactive detection method."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Domain Controllers"
      - "Application Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "INPUT Sysmon Event ID 7 features (parent_process, target_process, dll_signature, dll_path_entropy) | APPLY classification_model | WHERE prediction is 'malicious' RETURN hostname, process, loaded_dll, score"
  - question: "Is a critical system process loading an unsigned DLL?"
    context: "This question targets a TTP where adversaries use unsigned DLLs for injection, as legitimate system DLLs are almost always signed. Monitoring for unsigned DLLs being loaded by critical processes (lsass.exe, services.exe) provides a strong signal of potential tampering or malicious code injection, helping to bypass trust-based defenses."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Domain Controllers"
      - "Critical System Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 WHERE process is system_critical AND dll_is_signed is false AND dll not in known_good_unsigned_list | RETURN hostname, process, unsigned_dll_path"
  - question: "Is a process suddenly loading an anomalously high proportion of unsigned DLLs compared to its baseline?"
    context: "Instead of looking at a single event, this question analyzes the behavior of a process over time. A sudden spike in the proportion of unsigned DLLs being loaded by a process, compared to its own historical baseline, can indicate that the process has been compromised and is being used to load multiple malicious modules. This statistical approach helps find subtler injection activities."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Domain Controllers"
      - "Critical System Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 | CALCULATE percentage of unsigned DLLs per process | COMPARE to baseline | WHERE Z_score > 3 RETURN hostname, process, current_percentage, baseline_percentage"
  - question: "Are there distinct clusters of unsigned DLLs being loaded into high-integrity processes that are separate from normal activity?"
    context: "This question applies unsupervised machine learning to discover hidden patterns. By clustering DLL load events based on features like signature status and process integrity, analysts can identify groups of anomalous activity (e.g., a small, dense cluster of unsigned DLLs loaded into various high-integrity processes) that stand out from the large clusters of benign, everyday operations."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Domain Controllers"
      - "Critical System Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "INPUT Sysmon Event ID 7 features (signature_status, process_integrity, dll_path) | APPLY DBSCAN clustering | IDENTIFY anomalous clusters | RETURN events in anomalous_clusters"
  - question: "Is a lower-integrity process creating a remote thread in a higher-integrity process?"
    context: "This question directly targets the core mechanism of many privilege escalation techniques. An adversary with code execution in a standard user process (Medium integrity) may inject into a system process (High or System integrity) to gain its privileges. Monitoring for this specific cross-integrity remote thread creation (Sysmon Event ID 8) is a fundamental detection for this type of escalation."
    answer_sources:
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Terminal Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 8 WHERE source_integrity < target_integrity AND (source, target) not in known_good_pairs | RETURN hostname, source_process, target_process"
  - question: "Is a statistically rare source-target process pair involved in a remote thread creation that also involves an integrity level increase?"
    context: "This question adds a layer of statistical rarity to the previous question to reduce false positives. This approach focuses on identifying source-target process pairs for remote thread creation that have rarely or never been seen before, which are more likely to be adversarial."
    answer_sources:
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Terminal Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 8 WHERE source_integrity < target_integrity | GROUP BY source_process, target_process | CALCULATE frequency | WHERE frequency is rare (e.g., < 5) RETURN hostname, source_process, target_process, frequency"
  - question: "Is there an anomalous spike in the number of low-to-high integrity remote thread creations on a specific host?"
    context: "This question shifts the focus from individual events to the overall volume of suspicious activity on a host. A sudden increase in the rate of low-to-high integrity remote thread creations on a single machine, compared to its own history and its peers, strongly suggests an active privilege escalation attack, possibly involving multiple injection attempts."
    answer_sources:
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Terminal Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "COUNT Sysmon Event ID 8 WHERE source_integrity < target_integrity GROUP BY time, hostname | APPLY time_series_anomaly_detection | WHERE anomaly_score is high RETURN hostname, time, event_count"
  - question: "Is a privileged system process loading a DLL from a non-standard or user-writable directory?"
    context: "This question aims to detect DLL side-loading or injection from suspicious locations. System processes should only load DLLs from trusted system directories. Loading a DLL from a user's profile, a temp directory, or a network share is highly irregular and a strong indicator that an attacker has placed a malicious DLL where the system will load it."
    answer_sources:
      - "Sysmon Event ID 7"
      - "File Servers"
      - "User Workstations"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 WHERE process is privileged AND dll_path in suspicious_locations (e.g., C:\\Users\\*, C:\\Windows\\Temp\\*) | RETURN hostname, process, dll_path"
  - question: "Is a critical process loading a DLL from a path or with a filename that has unusually high entropy?"
    context: "This question helps detect evasion techniques where adversaries use randomized names and paths to avoid static signatures. By calculating the Shannon entropy of the DLL path and filename, analysts can flag loads that deviate significantly from the norm for a given process. High entropy often points to algorithmically generated names used by malware."
    answer_sources:
      - "Sysmon Event ID 7"
      - "File Servers"
      - "User Workstations"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 WHERE process is system_critical | CALCULATE entropy of dll_path | WHERE entropy > baseline_threshold | RETURN hostname, process, dll_path, entropy_score"
  - question: "Does a new DLL load path for a critical process fall outside the boundary of known legitimate paths as determined by a machine learning model?"
    context: "This question uses a one-class classification model to define 'normal' for DLL load paths. The model is trained exclusively on legitimate paths for critical processes. Any new path that the model classifies as an outlier or anomaly is flagged for investigation. This is effective at catching novel, never-before-seen malicious paths."
    answer_sources:
      - "Sysmon Event ID 7"
      - "File Servers"
      - "User Workstations"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "INPUT dll_load_paths for critical_process | APPLY one_class_SVM_model | WHERE prediction is 'anomaly' | RETURN hostname, process, anomalous_dll_path"
  - question: "Did a process gain write access to another process and then immediately create a remote thread in it?"
    context: "This question reconstructs the classic process injection sequence. An attacker's process needs to get a handle to the target process with memory write permissions (Sysmon Event ID 10) to write the malicious code, and then create a thread (Sysmon Event ID 8) to execute it. Correlating these two events for the same source/target pair within a very short timeframe provides high-fidelity evidence of an injection attempt."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Domain Controllers"
      - "Servers hosting sensitive applications"
    range: "last 90 days"
    queries:
      - "JOIN (SEARCH Sysmon Event ID 10 with write_access) AND (SEARCH Sysmon Event ID 8) ON source_process, target_process WHERE time_delta < 1s | RETURN hostname, source_process, target_process"
  - question: "Is the time delta between a process accessing another process's memory and creating a remote thread in it statistically unusual?"
    context: "This question refines the previous one by using statistics to find the most suspicious correlations. Malicious injection is typically automated and extremely fast. By analyzing the distribution of time deltas between these events, those in the lowest percentile (sub-second) can be flagged as highly indicative of a scripted attack."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Domain Controllers"
      - "Servers hosting sensitive applications"
    range: "last 90 days"
    queries:
      - "JOIN (SEARCH Sysmon Event ID 10 with write_access) AND (SEARCH Sysmon Event ID 8) ON source_process, target_process | CALCULATE time_delta | WHERE time_delta is in 1st percentile | RETURN hostname, source_process, target_process, time_delta"
  - question: "Does the sequence of a process accessing memory followed by creating a remote thread have a low probability of being benign according to a sequence analysis model?"
    context: "This question applies a more advanced modeling technique to detect malicious sequences of behavior. A Hidden Markov Model (HMM) can be trained on normal sequences of system events. An observed sequence like ProcessAccess -> CreateRemoteThread may have a very low probability under the 'benign' model, thus flagging it as a likely malicious state transition."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Domain Controllers"
      - "Servers hosting sensitive applications"
    range: "last 90 days"
    queries:
      - "INPUT sequence of events (ProcessAccess, CreateRemoteThread) for a source/target pair | APPLY HMM_model | WHERE sequence_probability is low | RETURN hostname, source_process, target_process, probability"
  - question: "Is a trusted process, like a web browser or system utility, loading a DLL that is a known indicator of compromise?"
    context: "This question targets a key defense evasion technique where adversaries inject into legitimate, trusted processes to masquerade their activity. By specifically monitoring trusted processes (explorer.exe, svchost.exe) for the loading of DLLs with known malicious hashes or paths, analysts can detect when these processes are hijacked to execute malicious code."
    answer_sources:
      - "Sysmon Event ID 7"
      - "User Workstations"
      - "Web Proxies"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 WHERE process in trusted_process_list AND (dll_hash in threat_intel OR dll_path in threat_intel) | RETURN hostname, process, dll_path, dll_hash"
  - question: "Has the set of DLLs loaded by a trusted process significantly changed compared to its established baseline?"
    context: "This question aims to detect the injection of new DLLs into a trusted process without relying on known signatures. The Jaccard index measures the similarity between the set of currently loaded DLLs and the historical baseline. A low similarity score indicates a significant change, suggesting that one or more foreign DLLs have been introduced."
    answer_sources:
      - "Sysmon Event ID 7"
      - "User Workstations"
      - "Web Proxies"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 for a trusted_process in a time_window | CREATE set of loaded_dlls | COMPARE to baseline_dll_set using Jaccard_index | WHERE similarity_score is low | RETURN hostname, process, similarity_score"
  - question: "Is a DLL load event into a trusted process considered anomalous by an autoencoder model due to high reconstruction error?"
    context: "This question uses an autoencoder, a type of neural network, to learn a compressed representation of 'normal' DLL loads for trusted processes. When a new DLL load event is fed into the model, if it cannot be accurately reconstructed (high reconstruction error), it means the event does not fit the learned pattern of normal behavior and is therefore anomalous and suspicious."
    answer_sources:
      - "Sysmon Event ID 7"
      - "User Workstations"
      - "Web Proxies"
      - "Application Servers"
    range: "last 90 days"
    queries:
      - "INPUT feature_vector for DLL_load_event | APPLY autoencoder_model | CALCULATE reconstruction_error | WHERE error > threshold | RETURN hostname, process, dll_path, error_score"
  - question: "Is `rundll32.exe` being used to execute a DLL from a suspicious location, or is a Microsoft Office application spawning a command shell?"
    context: "This question targets two common execution and evasion methods. Adversaries abuse `rundll32.exe` to run malicious DLLs, so monitoring its command line for suspicious paths is crucial. Additionally, Office applications spawning shells (cmd.exe, powershell.exe) is a classic sign of a malicious document executing a payload."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Security Event ID 4688"
      - "User Workstations"
      - "Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 1 | WHERE (process is 'rundll32.exe' AND command_line contains suspicious_path) OR (parent_process is office_app AND process is shell) | RETURN hostname, parent_process, process, command_line"
  - question: "Is a statistically rare parent-child process relationship occurring, such as an Office application spawning `rundll32.exe`?"
    context: "This question uses statistical rarity to identify suspicious process execution chains. By calculating the frequency of all parent-child relationships across the environment, analysts can automatically flag rare and unexpected pairings that often indicate malicious activity, such as an Office application spawning a shell."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Security Event ID 4688"
      - "User Workstations"
      - "Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 1 | GROUP BY parent_process, process | CALCULATE frequency | WHERE frequency is rare AND parent_process is suspicious (e.g. winword.exe) | RETURN hostname, parent_process, process, frequency"
  - question: "Is a process command-line argument flagged as anomalous by a sequence analysis model, suggesting obfuscation?"
    context: "Adversaries often heavily obfuscate command-line arguments to hide their intent. This question proposes using a model like an LSTM to analyze the structure of command lines. By training it on benign examples, the model can learn normal syntax and flag commands that are structurally bizarre or anomalous, even if they don't contain known bad strings."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Security Event ID 4688"
      - "User Workstations"
      - "Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "INPUT command_line from Sysmon Event ID 1 | APPLY LSTM_model | WHERE anomaly_score is high | RETURN hostname, process, command_line, anomaly_score"
  - question: "After loading a suspicious DLL, did the process initiate network connections to a known malicious domain or IP address?"
    context: "This question connects endpoint behavior (DLL load) with network behavior (C2 communication). A key step after successful injection is for the malware to call back to the attacker. Correlating a suspicious DLL load with subsequent network connections to destinations on a threat intelligence feed can confirm a compromise and identify C2 infrastructure."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "JOIN (SEARCH Sysmon Event ID 7 for suspicious_dll_load) AND (SEARCH Zeek logs for network_connections) ON process, hostname | WHERE destination in threat_intel_feed | RETURN hostname, process, destination_ip"
  - question: "After loading a suspicious DLL, did the process exhibit periodic, 'heartbeat'-like network traffic indicative of C2 beaconing?"
    context: "This question hunts for C2 communication patterns without relying on known bad IPs. Malware often 'beacons' out to its C2 server at regular intervals. By analyzing the timing of network connections from a process after a suspicious DLL load, statistical techniques like Fourier analysis can detect this periodicity, providing strong evidence of automated C2 traffic."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "FILTER Zeek conn.log for connections from process after suspicious_dll_load | ANALYZE connection time_intervals for periodicity | WHERE periodicity is detected | RETURN hostname, process, destination_ip, beacon_interval"
  - question: "After a suspicious DLL load, did the process's network traffic volume deviate significantly from its forecasted normal behavior?"
    context: "This question uses time-series forecasting to establish a baseline of normal network behavior for a process. After a suspicious DLL is loaded, the model continues to forecast expected traffic. If the actual observed traffic volume deviates significantly, it indicates an anomaly caused by the malicious code."
    answer_sources:
      - "Sysmon Event ID 7"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
    range: "last 90 days"
    queries:
      - "FORECAST network_traffic_volume for a process using ARIMA model | AFTER suspicious_dll_load, COMPARE actual_traffic to forecast | WHERE residual_error is high | RETURN hostname, process, traffic_anomaly_details"
  - question: "Is a process loading a DLL without a corresponding on-disk file path, indicating a potential reflective load?"
    context: "This question targets reflective DLL injection, where a DLL is loaded directly from memory, bypassing many traditional antivirus scanners. In Sysmon Event ID 7, this often manifests as a null or empty `ImageLoaded` path, making it a critical and high-fidelity indicator of sophisticated malware."
    answer_sources:
      - "Sysmon Event ID 7"
      - "User Workstations"
      - "Application Servers"
      - "Web Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 WHERE dll_path is null or empty | RETURN hostname, process, event_details"
  - question: "Is a process loading a DLL from a directory that is statistically rare for that process across the enterprise?"
    context: "Instead of looking for generically 'bad' paths, this question establishes a profile of common, legitimate DLL source directories for each process. A DLL being loaded from a directory that is rarely used for that purpose (e.g., a Downloads folder for svchost.exe) is statistically anomalous and warrants investigation."
    answer_sources:
      - "Sysmon Event ID 7"
      - "User Workstations"
      - "Application Servers"
      - "Web Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 7 | GROUP BY process, dll_directory | CALCULATE frequency | WHERE frequency is in 1st percentile | RETURN hostname, process, dll_directory, frequency"
  - question: "Is a DLL's load path identified as an outlier by an anomaly detection model based on features like path depth and entropy?"
    context: "This question uses an efficient machine learning model, Isolation Forest, to find 'needles in a haystack.' By converting DLL path characteristics into numerical features, the model can quickly isolate paths that are structurally different from the vast majority of benign paths, effectively flagging novel or unusual locations used by malware."
    answer_sources:
      - "Sysmon Event ID 7"
      - "User Workstations"
      - "Application Servers"
      - "Web Servers"
    range: "last 90 days"
    queries:
      - "INPUT features of dll_path (depth, entropy, keywords) | APPLY Isolation_Forest_model | WHERE prediction is 'anomaly' | RETURN hostname, process, anomalous_dll_path"
  - question: "Is a common user application, like a browser or Office program, creating a remote thread in another process?"
    context: "This question focuses on illogical or unexpected process interactions. While system tools might create remote threads for legitimate reasons, a web browser creating a remote thread in svchost.exe is highly suspicious. This behavior often indicates that the user application has been compromised and is being used to inject code into another process."
    answer_sources:
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Terminal Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 8 WHERE source_process is user_app AND (source_process, target_process) not in known_good_pairs | RETURN hostname, source_process, target_process"
  - question: "Is a remote thread being created between a statistically rare pair of source and target processes?"
    context: "This question quantifies the 'unusualness' of a process interaction. By analyzing all remote thread creations across the enterprise, analysts can assign a rarity score to each source-target pair. Alerting on pairs with a high rarity score automates the discovery of abnormal interactions that would be difficult to define with static rules."
    answer_sources:
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Terminal Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon Event ID 8 | GROUP BY source_process, target_process | CALCULATE frequency | CALCULATE rarity_score = 1/frequency | WHERE rarity_score > threshold | RETURN hostname, source_process, target_process, rarity_score"
  - question: "Is a remote thread creation event identified as an anomalous edge in a process interaction graph?"
    context: "This question represents process activity as a large graph, where processes are nodes and interactions (like remote thread creation) are edges. Graph-based machine learning algorithms can then analyze this graph to find anomalous edges—connections between processes that are rare or break the typical community structure of the graph. This is a powerful way to visualize and detect sophisticated attack paths."
    answer_sources:
      - "Sysmon Event ID 8"
      - "User Workstations"
      - "Terminal Servers"
    range: "last 90 days"
    queries:
      - "MODEL all Sysmon Event ID 8 as a graph | APPLY graph_anomaly_detection_algorithm | IDENTIFY anomalous_edges | RETURN hostname, source_process, target_process"