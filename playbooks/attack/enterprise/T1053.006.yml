name: T1053.006: Systemd Timers
id: f1b3a2d1-8c7f-4e6a-9b5d-0c3e1f2a3b4d
description: This playbook addresses the malicious use of systemd timers (T1053.006) for execution, persistence, and privilege escalation. It provides investigative questions to detect this technique by monitoring for the execution of known malicious or rare processes spawned by systemd (PPID 1), anomalous usage of the `systemd-run` utility, suspicious outbound network connections from systemd-spawned processes, and execution from non-standard directories like /tmp. It also covers persistence and privilege escalation vectors, such as the creation or modification of `.timer` and `.service` files that contain IOCs, point to suspicious paths, are modified by unexpected processes, or are configured to improperly elevate privileges.
type: technique
related:
  - TA0002: Execution
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process spawned by systemd (PPID 1) a known indicator of compromise (IOC)?
    context: |
      This question aims to identify malicious activity by cross-referencing processes started by the systemd init system (which have a Parent Process ID of 1) with known bad indicators from threat intelligence. A match suggests a compromised systemd timer or service is executing a known malicious payload, providing a high-confidence signal of a breach.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - Threat Intelligence Platform
      - All Linux servers and workstations, particularly those hosting critical services.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE parent_pid == 1 | LOOKUP hash, command_line IN threat_intel_feed | ALERT on_match
  - question: Is a process spawned by systemd (PPID 1) statistically rare across the enterprise?
    context: |
      This question focuses on identifying outliers. Legitimate systemd-spawned processes are usually common and consistent across similar systems. A process executable (identified by its hash) that is rare or has a very low prevalence is suspicious because it could be a custom malicious tool deployed by an adversary that has not been seen before.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - Threat Intelligence Platform
      - All Linux servers and workstations, particularly those hosting critical services.
    range: last 30 days
    queries:
      - pseudocode: SEARCH process_logs WHERE parent_pid == 1 | STATS count(endpoints) by hash | WHERE prevalence < 1% | ALERT
  - question: Does a machine learning model classify a process spawned by systemd (PPID 1) as malicious?
    context: |
      This question describes a more advanced, behavioral detection approach. By training a supervised classification model on features of known good and bad processes (e.g., user, path, arguments), it can predict the likelihood of a new, unseen process being malicious. This helps catch novel threats that are not yet present on IOC lists.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - Threat Intelligence Platform
      - All Linux servers and workstations, particularly those hosting critical services.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE parent_pid == 1 | SCORE event with ML_model | WHERE score > threshold | ALERT
  - question: Is the 'systemd-run' utility being used with suspicious command-line arguments to execute remote or encoded payloads?
    context: |
      The `systemd-run` command can be abused to schedule one-off tasks. This question looks for specific patterns, like piping downloaded content from 'curl' or 'wget' directly into a shell, or decoding a Base64 payload. These are common attacker techniques for "living off the land" and executing code without writing a file to disk first.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - Zeek conn.log
      - Zeek dns.log
      - All Linux endpoints, Network egress gateways, DNS resolvers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE process_name == 'systemd-run' AND command_line MATCHES regex('curl .*\\|.*sh', 'base64 -d') | CORRELATE with network_logs | ALERT
  - question: Is a user's execution of 'systemd-run' anomalous compared to their historical baseline?
    context: |
      This question tries to detect unusual behavior on a per-user basis. An administrator might use `systemd-run` in predictable ways. A command that is significantly different in structure or length from their past usage could indicate account compromise or malicious activity by an insider or adversary.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - Zeek conn.log
      - Zeek dns.log
      - All Linux endpoints, Network egress gateways, DNS resolvers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE process_name == 'systemd-run' | COMPARE command_line_structure against user_baseline | WHERE deviation > threshold | ALERT
  - question: Does a machine learning model flag a 'systemd-run' command line as a significant deviation from normal patterns?
    context: |
      This is an unsupervised machine learning approach. An autoencoder model learns to reconstruct "normal" `systemd-run` command lines. When it fails to accurately reconstruct a new command (resulting in a high reconstruction error), it suggests the command is anomalous and potentially malicious, without prior knowledge of the threat.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - Zeek conn.log
      - Zeek dns.log
      - All Linux endpoints, Network egress gateways, DNS resolvers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE process_name == 'systemd-run' | SCORE command_line with autoencoder_model | WHERE reconstruction_error > threshold | ALERT
  - question: Is a process spawned by systemd (PPID 1) making a network connection to a known-bad or suspicious destination?
    context: |
      This question seeks to identify command-and-control (C2) activity. A process spawned by a systemd timer that connects to a destination on a C2 blocklist is a strong indicator of compromise. Correlating process events with network logs is crucial for this detection.
    answer_sources:
      - Linux audit.log (syscall=execve, syscall=connect)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress gateways, DNS resolvers, All Linux endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE parent_pid == 1 | JOIN pid with network_logs | LOOKUP destination_ip, destination_domain in C2_feed | ALERT on_match
  - question: Is a process spawned by systemd (PPID 1) making a statistically rare or algorithmically generated network connection?
    context: |
      This question hunts for C2 activity that evades simple blocklists. It identifies connections to destinations that are rare across the enterprise or domains that appear algorithmically generated (DGA), a common technique for C2 infrastructure. High entropy in subdomains is a key indicator of DGA.
    answer_sources:
      - Linux audit.log (syscall=execve, syscall=connect)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress gateways, DNS resolvers, All Linux endpoints.
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs from process WHERE parent_pid == 1 | ANALYZE destination_frequency, domain_entropy | WHERE frequency < 5th_percentile OR entropy > threshold | ALERT
  - question: Is a process spawned by systemd (PPID 1) exhibiting anomalous network traffic volume?
    context: |
      This question uses time-series analysis to detect changes in behavior. A sudden spike in the volume or byte count of outbound traffic from a systemd-spawned process, deviating from its historical forecast, could indicate a newly activated malicious timer, data exfiltration, or other C2 communications.
    answer_sources:
      - Linux audit.log (syscall=execve, syscall=connect)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress gateways, DNS resolvers, All Linux endpoints.
    range: last 90 days
    queries:
      - pseudocode: FORECAST traffic_volume for systemd_processes on host | COMPARE actual_traffic to forecast | ALERT if deviation > threshold
  - question: Is a process spawned by systemd (PPID 1) executing from a non-standard or world-writable directory?
    context: |
      Legitimate systemd services typically execute from standard system paths like /bin, /sbin, or /usr/bin. Execution from world-writable directories such as /tmp, /var/tmp, or /dev/shm is highly suspicious, as these locations are common drop points for malware and attacker tools.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - File systems on all Linux servers and workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE parent_pid == 1 AND executable_path MATCHES regex('^/(tmp|var/tmp|dev/shm)/.*') | ALERT
  - question: Is a process spawned by systemd (PPID 1) executing from a path or with a filename that is statistically rare or anomalous?
    context: |
      This question looks for anomalous execution paths beyond a simple deny-list. An executable path that has never been seen before (first occurrence) or is extremely rare is a strong signal of potential malicious activity. Additionally, high-entropy filenames can indicate randomly-named malware.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - File systems on all Linux servers and workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs WHERE parent_pid == 1 | ANALYZE path_frequency, filename_entropy | WHERE frequency < 1% OR entropy > threshold | ALERT
  - question: Does a clustering model identify a systemd-spawned process (PPID 1) as an outlier?
    context: |
      This question applies unsupervised machine learning to group similar, legitimate systemd-spawned processes together based on features like path and arguments. Any process that does not fit into a known cluster is flagged as a "noise point" or outlier, indicating it behaves differently from the norm and warrants investigation.
    answer_sources:
      - Linux audit.log (syscall=execve)
      - File systems on all Linux servers and workstations.
    range: last 90 days
    queries:
      - pseudocode: CLUSTER process_logs WHERE parent_pid == 1 on features (path, user, args) | IDENTIFY noise_points (outliers) | ALERT
  - question: Does a newly created or modified systemd timer or service file contain known malicious indicators?
    context: |
      This question focuses on detecting persistence mechanisms at the point of creation. By monitoring for file writes to systemd directories and immediately scanning the contents with YARA rules, it's possible to detect when an adversary drops a malicious service file containing known C2 domains, tools, or command structures.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - File content from host
      - Threat Intelligence Platform
      - Systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/, ~/.config/systemd/user/) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: ON file_write to *.timer, *.service in systemd_dirs | SCAN file_content with yara_rules | ALERT on_match
  - question: Is the content of a new or modified systemd service file a statistical outlier?
    context: |
      This question aims to detect malicious service files that do not match known signatures. By baselining the typical length and 'ExecStart' paths of legitimate service files, any new file that is unusually long or points to a rare executable path can be flagged as anomalous and potentially malicious.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - File content from host
      - Threat Intelligence Platform
      - Systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/, ~/.config/systemd/user/) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: ON file_write to *.service in systemd_dirs | COMPARE content_length, execstart_path to baseline | ALERT if outlier
  - question: Does a machine learning model classify a new or modified systemd unit file as malicious?
    context: |
      This question applies text classification to the content of systemd unit files. By training a model on the text of known benign and malicious files, it can learn to automatically classify new files. This provides a scalable way to detect novel or obfuscated malicious service definitions.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - File content from host
      - Threat Intelligence Platform
      - Systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/, ~/.config/systemd/user/) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: ON file_write to *.service, *.timer in systemd_dirs | CLASSIFY file_content with text_model | ALERT if malicious
  - question: Does a new systemd service file point to an executable in a high-risk or hidden directory?
    context: |
      This is a high-confidence indicator of malicious persistence. A service file's 'ExecStart' directive should not point to an executable in a world-writable location like /tmp or a hidden directory. Such a configuration is a classic sign of an adversary attempting to maintain execution of their payload.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - File content from host
      - Systemd unit file directories and world-writable directories (/tmp, /dev/shm, /var/tmp) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: ON file_write to *.service in systemd_dirs | PARSE execstart_path | IF path MATCHES regex('^/(tmp|dev/shm|var/tmp)/.*', '/\\..*') | ALERT
  - question: Is a systemd unit file being modified by an unexpected process?
    context: |
      Systemd unit files are typically managed by package managers (yum, apt) or administrative commands. Modification by other processes, such as a web server daemon (nginx, apache2) or an interactive shell, is highly irregular and suggests a compromised process is being used to establish persistence.
    answer_sources:
      - Linux audit.log (syscall=open, openat, execve)
      - Systemd unit file directories on all Linux hosts, especially web servers and multi-user systems.
    range: last 90 days
    queries:
      - pseudocode: SEARCH file_writes in systemd_dirs | IF parent_process_name IN ('nginx', 'httpd', 'sshd') | ALERT
  - question: Is a systemd timer or service file being created in the home directory of a service account or an inactive user?
    context: |
      Adversaries may place user-level systemd timers for persistence. This is particularly suspicious if the target user is a service account (UID < 1000) which should not have interactive timers, or if it is the first time an interactive user has ever created such a file, indicating a sharp deviation from normal behavior.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - User home directories, specifically `~/.config/systemd/user/` paths, on all multi-user Linux systems.
    range: last 90 days
    queries:
      - pseudocode: ON file_creation in '*/.config/systemd/user/*' | IF user_uid < 1000 OR is_first_time_for_user | ALERT
  - question: Is a new privileged systemd service file configured to execute a known privilege escalation tool?
    context: |
      This question looks for attempts to use systemd timers for privilege escalation. If a new service file is created in a privileged path (e.g., /etc/systemd/system/) and its 'ExecStart' line contains the name of a known enumeration or exploit script (like 'linpeas.sh' or 'dirtyc0w'), it's a strong sign of an attempt to gain root access.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - File content from host
      - Threat Intelligence Platform
      - Privileged systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: ON file_write to privileged_systemd_dir | SCAN content for execstart_line | IF execstart_line CONTAINS privesc_tool_keyword | ALERT
  - question: Is a new privileged systemd service file configured to run as root from a world-writable location?
    context: |
      This is a classic privilege escalation vector. An attacker creates a service file that runs as root by default (lacking a 'User=' directive) and points its 'ExecStart' to a script in a location they can write to, like /tmp. This allows them to execute any code they want with root privileges. Detecting this specific combination of conditions is critical.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - File content from host
      - Privileged systemd unit directories and world-writable directories (/tmp, /dev/shm) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: ON file_write to '/etc/systemd/system/*.service' | IF content LACKS 'User=' AND execstart_path IS world_writable AND executable IS world_writable | ALERT
  - question: Is a non-root user creating or modifying a privileged systemd service file?
    context: |
      This is a direct and high-fidelity indicator of privilege escalation. Only the root user (or a process with root privileges) should be able to write to privileged systemd directories like /etc/systemd/system/. A write event in this directory from a process with an effective user ID (euid) other than 0 indicates a successful exploit is in progress.
    answer_sources:
      - Linux audit.log (syscall=open, openat)
      - Privileged systemd unit file directories (/etc/systemd/system/, /usr/lib/systemd/system/) on all Linux hosts.
    range: last 90 days
    queries:
      - pseudocode: SEARCH file_writes to privileged_systemd_dir | IF process_euid != 0 | ALERT
  - question: Is a root process spawned by systemd modifying critical system configuration files?
    context: |
      This question detects the post-exploitation actions following a successful privilege escalation. After using a systemd timer to gain root, an adversary may try to create a new user, change a password, or grant sudo rights. This is detected by correlating a root process spawned by systemd (PPID 1, euid 0) with subsequent file writes to files like /etc/passwd or /etc/sudoers.d/.
    answer_sources:
      - Linux audit.log (syscall=execve, syscall=open, openat)
      - All Linux hosts, focusing on directories containing critical authentication and configuration files (e.g., /etc/, /etc/sudoers.d/).
    range: last 90 days
    queries:
      - pseudocode: CORRELATE process_logs (ppid=1, euid=0) with file_writes from same pid | IF target_file IN ('/etc/passwd', '/etc/shadow', '/etc/sudoers.d/*') | ALERT