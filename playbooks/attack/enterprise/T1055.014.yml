name: T1055.014: VDSO Hijacking
id: c6f5a3b9-1d2a-4c8e-9a1b-0d9c4f8a7b6c
description: This playbook helps analysts investigate potential VDSO hijacking, a technique used for privilege escalation and defense evasion on Linux systems. It focuses on detecting evidence such as the execution of known malicious tools by matching file hashes against threat intelligence, identifying statistically rare or newly seen executables, and using machine learning to classify suspicious binaries. It also covers detecting specific malicious syscall sequences, like a low-privilege process using `ptrace` to manipulate a high-privilege process's memory. Further investigation points include looking for anomalous behavior following a `ptrace` event, such as a process spawning unusual children, accessing sensitive files, or making suspicious network connections. Finally, it addresses advanced detection methods like identifying syscalls originating from improper user-space memory locations and detecting tampering with security tools through memory scanning or monitoring log output for unexpected drops.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process executed that matches the file hash of a known VDSO hijacking tool?
    context: This question aims to identify the most direct evidence of VDSO hijacking by checking for the execution of a tool specifically designed for this purpose. By comparing the file hashes of all executed binaries against a threat intelligence feed, we can quickly detect known malicious tools. A match provides a high-confidence indicator that an adversary is attempting to hijack the vDSO.
    answer_sources:
      - auditd execve records
      - osquery process_file_events
      - EDR process creation logs
      - Critical Linux servers (e.g., web servers, database servers, authentication servers)
      - Linux developer workstations
      - Production container environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          FOR_EACH event
            COMPARE event.file_hash against threat_intelligence_hashes
            IF match_found
              ALERT (High Severity) with details: event.hostname, event.process_name, event.file_hash
  - question: Has a low-prevalence or newly-observed executable been run on the network?
    context: Adversaries often use custom or rare tools to avoid signature-based detection. A file seen on very few hosts (low prevalence) or for the first time is statistically anomalous and therefore suspicious. This helps uncover potentially malicious tools that are not yet in threat intelligence feeds.
    answer_sources:
      - auditd execve records
      - osquery process_file_events
      - EDR process creation logs
      - Critical Linux servers (e.g., web servers, database servers, authentication servers)
      - Linux developer workstations
      - Production container environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH new_process_execution_event
            CALCULATE prevalence = (count of hosts with this file_hash) / (total hosts)
            GET first_seen_timestamp for this file_hash
            IF prevalence < 0.01 OR first_seen_timestamp is within last 24 hours
              FLAG for investigation
  - question: Does a newly executed file have metadata features consistent with malicious process injection tools?
    context: Machine learning can proactively identify new, unknown threats by analyzing file characteristics. Features like file size, string entropy (a measure of randomness), and imported functions often differ between benign system utilities and malicious tools designed for injection, allowing a model to flag suspicious executables even if their hash is unknown.
    answer_sources:
      - auditd execve records
      - osquery process_file_events
      - EDR process creation logs
      - Critical Linux servers (e.g., web servers, database servers, authentication servers)
      - Linux developer workstations
      - Production container environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH new_file_execution
            EXTRACT metadata features (file size, entropy, imports, etc.)
            INPUT features into trained classification model
            GET probability_of_malice score
            IF score > threshold
              ALERT for investigation
  - question: Has a lower-privilege process used a ptrace-attach, open-maps, and ptrace-pokedata/mmap sequence against a higher-privilege process?
    context: This specific, ordered sequence of system calls is a hallmark of process injection and memory manipulation. When a process with lower privileges (e.g., a web server user) targets a process with higher privileges (e.g., root), it is a strong indicator of a malicious privilege escalation attempt.
    answer_sources:
      - auditd SYSCALL records
      - eBPF trace data
      - Falco logs
      - Critical Linux servers
      - Privileged user accounts
      - Core system daemons (e.g., sshd, cron, systemd)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR syscalls in a stateful manner, keyed by source PID and target PID
          WHEN ptrace(PTRACE_ATTACH) is seen from source_pid to target_pid
            IF source_process_uid < target_process_uid
              START tracking this interaction for 60 seconds
              IF openat('/proc/[target_pid]/maps') AND (ptrace(PTRACE_POKEDATA) OR mmap()) are seen
                ALERT (High Severity) on privilege escalation attempt
  - question: Has a process exhibited a statistically improbable sequence of syscalls involving ptrace?
    context: Normal programs have predictable syscall patterns which can be modeled. A Markov chain model learns the probability of one syscall following another for a given program. A rare sequence, especially one involving the powerful `ptrace` syscall, deviates from this learned baseline and may indicate that the process's execution flow has been hijacked.
    answer_sources:
      - auditd SYSCALL records
      - eBPF trace data
      - Falco logs
      - Critical Linux servers
      - Privileged user accounts
      - Core system daemons (e.g., sshd, cron, systemd)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH process_type (e.g., 'nginx')
            LOAD pre-computed Markov chain model of normal syscall transitions
          FOR_EACH live_syscall_sequence
            CALCULATE joint probability of the sequence using the model
            IF probability < 1st_percentile_threshold AND sequence contains 'ptrace'
              FLAG as anomalous behavior
  - question: Has a sequence of syscalls from a monitored process deviated significantly from the behavior learned by a deep learning model?
    context: Recurrent Neural Networks (RNNs) are powerful for modeling complex sequential data like system calls. A model trained on millions of benign syscall sequences learns what "normal" looks like. A significant spike in the model's prediction error means the current sequence is unlike any benign behavior it has seen, suggesting a potential compromise.
    answer_sources:
      - auditd SYSCALL records
      - eBPF trace data
      - Falco logs
      - Critical Linux servers
      - Privileged user accounts
      - Core system daemons (e.g., sshd, cron, systemd)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM real-time syscalls for monitored processes into a trained RNN model
          MONITOR the model's prediction error (difference between predicted and actual next syscall)
          IF error spikes significantly above baseline
            ALERT on anomalous syscall sequence
  - question: After being targeted by ptrace, did a process spawn a shell or open a sensitive file for writing?
    context: This correlation is highly suspicious. The `ptrace` syscall allows one process to control another. If the targeted process subsequently spawns a shell (`/bin/sh`) or modifies a critical system file like `/etc/shadow` or `/etc/sudoers`, it is a strong indication that an attacker has hijacked the process to gain privileged access or establish persistence.
    answer_sources:
      - auditd SYSCALL records
      - auditd EXECVE records
      - osquery process_events
      - System configuration directories (e.g., /etc/, /root/)
      - Authentication-related files (e.g., /etc/shadow, /etc/sudoers)
      - Privileged processes on critical servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'ptrace' syscall event is detected targeting target_pid
            MONITOR target_pid for 5 minutes
            IF target_pid spawns a shell (e.g., '/bin/bash') OR opens '/etc/shadow' or '/etc/sudoers' with write permissions
              ALERT (Critical Severity) on post-hijack activity
  - question: Following a ptrace event, did the targeted process exhibit statistically rare behavior, such as spawning an unusual child process?
    context: Every process has a typical behavioral profile, including the child processes it normally creates. By establishing a historical baseline, we can spot anomalies. If a high-privilege process like a database is targeted by `ptrace` and then spawns a rare child process like `ncat` or `socat`, it's a strong sign it has been compromised.
    answer_sources:
      - auditd SYSCALL records
      - auditd EXECVE records
      - osquery process_events
      - System configuration directories (e.g., /etc/, /root/)
      - Authentication-related files (e.g., /etc/shadow, /etc/sudoers)
      - Privileged processes on critical servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'ptrace' syscall targets a high-privilege process
            MONITOR subsequent child processes and file accesses
            CALCULATE rarity score for the observed child process name or file path based on historical data for the parent
            IF rarity score > 99.9th percentile
              FLAG for investigation
  - question: Has a process, after being targeted by ptrace, exhibited behavior flagged as an outlier by a one-class SVM model?
    context: Anomaly detection models like One-Class SVM or Isolation Forest can create a detailed profile of a critical process's normal behavior (child processes, file access, user context, etc.). Any activity that the model flags as a significant outlier, especially after a `ptrace` event, indicates a likely compromise, as the process is operating outside its established norms.
    answer_sources:
      - auditd SYSCALL records
      - auditd EXECVE records
      - osquery process_events
      - System configuration directories (e.g., /etc/, /root/)
      - Authentication-related files (e.g., /etc/shadow, /etc/sudoers)
      - Privileged processes on critical servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'ptrace' syscall targets a critical process
            CAPTURE subsequent activity features (child process names, file paths, etc.)
            FEED features into the process's specific one-class SVM model
            IF model classifies the activity as an outlier/anomaly
              ALERT on likely compromise
  - question: Is a syscall's instruction pointer pointing to user-space memory instead of the kernel or vDSO?
    context: This is a direct method to detect vDSO hijacking. Normally, a syscall transitions execution to a highly-privileged, protected memory region (the kernel or vDSO). If the instruction pointer for a syscall points to a regular user-space memory address, it means the syscall function has been redirected, or "hooked," to attacker-controlled code.
    answer_sources:
      - eBPF trace data
      - Custom Kernel module logging
      - Kernel memory space on critical Linux hosts
      - vDSO memory region of running processes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ATTACH eBPF probe to a kernel tracepoint (e.g., sys_enter)
          FOR_EACH syscall
            GET instruction pointer address
            GET process's valid memory maps for kernel and vDSO
            IF instruction pointer is NOT within the valid ranges
              ALERT (Critical Severity) on syscall redirection
  - question: Has the entropy of a process's syscall handler addresses suddenly increased?
    context: For a normal process, the memory addresses of its syscall handlers are constant, residing in the kernel and vDSO. Therefore, the entropy (a measure of randomness) of these addresses over time should be near zero. A sudden spike in entropy indicates that syscalls are being redirected to multiple, varying locations in memory, a strong sign of a sophisticated hooking mechanism.
    answer_sources:
      - eBPF trace data
      - Custom Kernel module logging
      - Kernel memory space on critical Linux hosts
      - vDSO memory region of running processes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH critical process
            COLLECT syscall handler instruction pointer addresses in 1-minute windows
            CALCULATE entropy of the set of addresses
            MAINTAIN a moving average and standard deviation of entropy
            IF current entropy > (moving_average + 3 * std_dev)
              ALERT on anomalous syscall handler locations
  - question: Is a process's syscall handler address an outlier when clustered with addresses from all other instances of that process?
    context: Across an entire fleet of servers, all instances of a program (e.g., `sshd`) should have their syscall handlers in the same few memory regions. When we cluster all observed handler addresses, they should form dense groups. Any address that falls outside these clusters (a "noise point") is a significant anomaly and likely points to a malicious, user-space hook on a single compromised machine.
    answer_sources:
      - eBPF trace data
      - Custom Kernel module logging
      - Kernel memory space on critical Linux hosts
      - vDSO memory region of running processes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          COLLECT all syscall handler addresses for a given process name (e.g., 'sshd') across the enterprise
          APPLY DBSCAN clustering algorithm to the set of addresses
          FOR_EACH address classified as a 'noise' point
            ALERT on outlier syscall handler address, indicating a potential hook
  - question: Does a memory scan of a security agent process reveal signatures of vDSO hooks or shellcode?
    context: Adversaries may target security tools themselves to evade detection. This question focuses on finding evidence of such tampering. By periodically scanning the memory of EDR or audit agents with YARA rules, we can detect known malicious code patterns, hooks, or shellcode that have been injected directly into the agent's process space.
    answer_sources:
      - Live memory dumps via osquery
      - YARA scan results
      - osquery memory_map
      - Memory space of security tools (EDR, auditd, AV) on critical Linux hosts and developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SCHEDULE periodic job on hosts
          TARGET security agent processes (e.g., 'auditd', 'osqueryd')
          SCAN process memory with YARA ruleset for hooks and shellcode
          IF YARA rule match is found
            ALERT (Critical Severity) on security tool compromise
  - question: Has the number of executable, file-unbacked memory segments in a security process anomalously increased?
    context: When code is injected into a process without a corresponding file on disk (a common technique for malware), it often resides in a memory segment marked as executable but "private" or "unbacked". While some legitimate processes use this, a sudden increase from a stable baseline in a security agent is a strong indicator of malicious code injection.
    answer_sources:
      - Live memory dumps via osquery
      - YARA scan results
      - osquery memory_map
      - Memory space of security tools (EDR, auditd, AV) on critical Linux hosts and developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH security process
            PERIODICALLY query its memory map
            COUNT segments where permissions are 'execute' and type is 'private' (unbacked)
            MAINTAIN baseline count (mean, std_dev)
            IF current count > (mean + 2 * std_dev)
              ALERT on anomalous memory segment increase
  - question: Does a classification model identify injected malicious code within the memory segments of a security tool?
    context: This is a proactive approach to finding unknown threats within security tools. A machine learning model can be trained to distinguish between the features of benign memory segments (like from a shared library) and malicious ones (injected code). By applying this model in real-time, it can flag suspicious memory regions indicative of hijacking, even if no known signatures are present.
    answer_sources:
      - Live memory dumps via osquery
      - YARA scan results
      - osquery memory_map
      - Memory space of security tools (EDR, auditd, AV) on critical Linux hosts and developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH memory segment in a security process
            EXTRACT features (entropy, size, permissions, etc.)
            INPUT features into trained classification model
            IF model flags segment as anomalous/malicious
              ALERT on potential code injection in security tool
  - question: Has a security process been targeted by ptrace, followed by modification of its configuration or log files?
    context: This is a clear and direct defense evasion tactic. An attacker first uses `ptrace` to gain control of a security agent like `auditd`, and then uses that control (or another process) to delete its logs or change its configuration to disable it. Correlating these two events provides a high-confidence alert for active tampering.
    answer_sources:
      - auditd SYSCALL records
      - eBPF trace data
      - File system paths for security tool configurations and logs (e.g., /etc/audit/, /var/log/audit/, /opt/edr/)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'ptrace(PTRACE_ATTACH)' syscall targets a known security process (e.g., 'auditd')
            START monitoring for 60 seconds
            IF 'openat' or 'unlinkat' syscall targets that tool's config or log directories
              ALERT (Critical Severity) on security tool tampering
  - question: Has an anomalous or rare process used ptrace to attach to a security process?
    context: While some legitimate tools like debuggers (`gdb`) might `ptrace` a process, it's generally a rare event, especially against a security agent. By profiling which processes normally initiate `ptrace` calls, we can identify any actor that is an outlier. A `ptrace` from a web server process to `auditd`, for example, is highly anomalous and likely malicious.
    answer_sources:
      - auditd SYSCALL records
      - eBPF trace data
      - File system paths for security tool configurations and logs (e.g., /etc/audit/, /var/log/audit/, /opt/edr/)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD a historical profile of source processes that call 'ptrace' on security agents
          WHEN a new 'ptrace' event targets a security agent
            CALCULATE rarity score for the source process name based on the profile
            IF source process is in the bottom 1st percentile of rarity
              FLAG as anomalous actor
  - question: Does a graph-based anomaly detection model identify a ptrace call to a security agent as a structural anomaly?
    context: Modeling system activity as a graph (processes and files as nodes, interactions as edges) can reveal unusual relationships. A `ptrace` call from an unexpected process to a security agent would create an edge that does not fit the learned "normal" structure of the graph, allowing algorithms to flag it as a suspicious structural anomaly.
    answer_sources:
      - auditd SYSCALL records
      - eBPF trace data
      - File system paths for security tool configurations and logs (e.g., /etc/audit/, /var/log/audit/, /opt/edr/)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL process-file interactions as a graph
          USE a graph anomaly algorithm to learn normal graph structures
          WHEN a new edge is added (e.g., process A ptraces process B)
            IF the algorithm flags the new edge as a structural anomaly
              ALERT on anomalous system interaction
  - question: After being targeted by ptrace, did a process initiate a network connection to a known malicious C2 server?
    context: This investigative question links process hijacking directly to command-and-control activity. If a process is compromised via `ptrace` and immediately "calls home" to an IP address on a threat intelligence feed, it's a strong sign that the attacker has taken control and is establishing a C2 channel.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - auditd SYSCALL records
      - Network egress points (firewalls, proxies)
      - DNS servers
      - Critical Linux servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'ptrace' event is detected on a host
            CORRELATE with network connection logs from that host's IP
            IF a connection is made to a destination IP on a C2 threat feed
              ALERT (High Severity) on post-compromise C2 activity
  - question: Following a ptrace event, did the targeted process begin exhibiting periodic network beaconing or connect to a rare destination?
    context: This question looks for more subtle signs of C2 communication. Malware often beacons out at regular intervals (e.g., every 60 seconds). A low standard deviation in the time between connections indicates this periodicity. Additionally, a connection to a destination IP that is very rare across the enterprise is suspicious, as it's not a standard corporate service.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - auditd SYSCALL records
      - Network egress points (firewalls, proxies)
      - DNS servers
      - Critical Linux servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHEN 'ptrace' event is detected on a host
            ANALYZE subsequent network connections from that host
            CALCULATE time deltas between connections to the same destination
            IF standard deviation of deltas is low
              FLAG as beaconing
            CALCULATE prevalence of destination IPs across the enterprise
            IF destination IP is in the bottom 1st percentile
              FLAG as rare destination
  - question: After a ptrace event, did the process's outbound data volume significantly exceed its forecasted normal behavior?
    context: This uses time-series forecasting to detect data exfiltration. A model can learn the normal rhythm of a process's network traffic volume. If, after a `ptrace` event, the process suddenly sends out a large amount of data that significantly exceeds the model's prediction, it could indicate that an attacker is using the compromised process to steal data.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - auditd SYSCALL records
      - Network egress points (firewalls, proxies)
      - DNS servers
      - Critical Linux servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          USE ARIMA model to forecast expected outbound data volume for a process
          WHEN 'ptrace' event is detected for that process
            MONITOR actual outbound data volume
            IF actual volume significantly exceeds the forecast's confidence interval
              ALERT on potential data exfiltration
  - question: Has a ptrace syscall ever been observed targeting a logging daemon like auditd or rsyslogd?
    context: This is a simple but powerful detection. There is virtually no legitimate reason for any process to use `ptrace` on a core logging daemon. This action is unequivocally an attempt to tamper with or disable security monitoring at its source and should be treated as a critical, high-confidence indicator of an attack.
    answer_sources:
      - SIEM health monitoring logs
      - auditd SYSCALL records
      - Log forwarder agent heartbeats
      - Log aggregation platform (SIEM)
      - Logging daemons (auditd, rsyslogd, journald) on all Linux hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CREATE alert
          TRIGGER on any 'ptrace' syscall where the target process name is 'auditd', 'rsyslogd', or 'journald'
          SEVERITY = Critical
  - question: Has a host's log shipping volume dropped significantly below its established baseline?
    context: This question seeks to detect log tampering by observing its effect on the log aggregator (SIEM). Every host has a normal logging rate. If this rate suddenly drops far below its moving average for a sustained period, it implies the logging service on the host has been stopped, disabled, or is otherwise being tampered with.
    answer_sources:
      - SIEM health monitoring logs
      - auditd SYSCALL records
      - Log forwarder agent heartbeats
      - Log aggregation platform (SIEM)
      - Logging daemons (auditd, rsyslogd, journald) on all Linux hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH reporting host in SIEM
            CALCULATE moving average and standard deviation of events-per-second (EPS)
            IF current EPS drops below (moving_average - 3 * std_dev) for more than 5 minutes
              ALERT on potential log tampering or offline sensor
  - question: Has a time-series anomaly detection model flagged a significant drop in a host's log volume?
    context: This is a more sophisticated version of the baseline-deviation method. A time-series model like an autoencoder can learn a host's complex logging patterns, including daily and weekly cycles. The model can then identify an anomalous drop with greater accuracy than a simple moving average, providing a more reliable signal of potential log tampering, especially when correlated with other suspicious activity on the host.
    answer_sources:
      - SIEM health monitoring logs
      - auditd SYSCALL records
      - Log forwarder agent heartbeats
      - Log aggregation platform (SIEM)
      - Logging daemons (auditd, rsyslogd, journald) on all Linux hosts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR_EACH host
            STREAM log volume data into a trained time-series autoencoder model
            MONITOR the model's reconstruction error
            IF reconstruction error spikes (indicating an anomaly) AND log volume has dropped
              ALERT on anomalous drop in log volume, possibly correlated with 'ptrace' events on the host