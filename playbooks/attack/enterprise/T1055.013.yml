name: T1055.013: Process Doppelgänging
id: 9a7b3c2d-8e4f-4a1b-9c6d-0f3e2a1b7c5d
description: This playbook helps investigate whether an adversary is using Process Doppelgänging (T1055.013) to achieve privilege escalation or defense evasion. This technique involves creating a process from a malicious executable but making it appear as a legitimate application. Indicators include the use of deprecated Transactional NTFS (TxF) APIs, legitimate processes spawning unusual children or making suspicious network connections, anomalous parent-child process relationships (e.g., a user-facing app spawning a core system process with an elevated token), and a previously suspicious process attempting to access sensitive resources like lsass.exe or the SAM database.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a known malicious parent process spawning a legitimate system binary?
    context: This question helps detect Process Doppelgänging by identifying a key indicator, where a process associated with a known malicious tool (via its hash) launches a trusted system process like svchost.exe. This is highly anomalous because legitimate system binaries are typically spawned by other specific system processes, not by tools known to be used for malicious activities. An alert here strongly suggests a masquerading attempt.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Threat Intelligence Feeds
      - Relevant on Domain Controllers, Critical Application Servers, Executive Workstations, All Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SELECT * FROM process_creation_events WHERE parent_process_hash IN (threat_intel_hashes) AND child_process_name IN ('svchost.exe', 'explorer.exe', 'csc.exe');
  - question: Does a parent process have an unusually complex or random command line when spawning a child process?
    context: Adversaries often use obfuscated or randomized command-line arguments to hide their actions. Calculating the Shannon entropy of a parent process's command line and comparing it to a historical baseline can reveal these anomalies. A high entropy score for a common parent process suggests that the command line contains more randomness than usual, which is a potential indicator of malicious parameter obfuscation.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Critical Application Servers, Executive Workstations, All Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR process IN process_creation_events, CALCULATE entropy(process.parent_command_line). ALERT if entropy > baseline_99th_percentile(process.parent_name);
  - question: Can machine learning classify a process creation event as suspicious based on features associated with Process Doppelgänging?
    context: This question proposes using a supervised machine learning model to proactively identify complex malicious patterns that are difficult to capture with simple rules. By training a model on features like parent/child image names and command-line length from both benign and known-malicious process creation events, it can learn to recognize the subtle characteristics of Process Doppelgänging.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Critical Application Servers, Executive Workstations, All Windows Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_classifier(features=['ParentImage', 'Image', 'CommandLine_length'], labels=['benign', 'malicious']). PREDICT on new_process_creation_events;
  - question: Is a common user application spawning a core system process with an elevated token?
    context: User-facing applications like Microsoft Word or Chrome should not be creating core system processes like lsass.exe, especially with an elevated token (Type 2 / %%1937). This behavior strongly suggests that the user application has been compromised and is being used as a launchpad to inject or spawn a malicious process with higher privileges.
    answer_sources:
      - Windows Event ID 4688
      - Relevant on User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SELECT * FROM process_creation_events WHERE parent_process_name IN ('winword.exe', 'chrome.exe', ...) AND child_process_name IN ('lsass.exe', 'csrss.exe', ...) AND token_elevation_type == 'Type 2';
  - question: Has a statistically rare parent-child process relationship been observed?
    context: Malicious activity often creates process relationships that are not seen during normal operations. By analyzing all parent-child process pairs across the enterprise and identifying the least common ones (e.g., the bottom 1st percentile), we can surface these statistical outliers. A rare pairing is a high-fidelity indicator of a potential threat that warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Relevant on User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE frequency of all (parent_process, child_process) pairs. ALERT if observed_pair_frequency < 1st_percentile_of_all_pairs;
  - question: Does an unsupervised machine learning model identify a process creation event as an outlier?
    context: Unsupervised learning can find anomalies without prior knowledge of what is "bad." By clustering all process creation events based on their features, normal activity will form dense clusters. Malicious events, like Process Doppelgänging, will likely have a unique combination of features and will not fit into any normal cluster, thus being flagged as an outlier by the algorithm.
    answer_sources:
      - Windows Event ID 4688
      - Relevant on User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_clustering_model(features=['parent', 'child', 'user', 'token_type']). IDENTIFY outliers from new_process_creation_events;
  - question: Did a process, recently flagged as suspicious, attempt to access credentials from lsass.exe?
    context: This question connects two key stages of an attack, the creation of a suspicious process and its subsequent attempt to steal credentials. By correlating a high-risk process creation alert with a nearly immediate attempt by that same process to read memory from lsass.exe (indicated by access rights like 0x1010), we can build a high-confidence alert for credential dumping.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Relevant on Domain Controllers, Authentication Servers, Credential Stores
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN suspicious_process_alerts with lsass_access_events ON process_id. ALERT if time_delta < 60s AND access_rights LIKE '%0x1010%';
  - question: Is a statistically uncommon process accessing the lsass.exe process?
    context: Access to the lsass.exe process is critical for credential dumping. By baselining which processes normally access lsass.exe, you can create high-fidelity alerts when a rare or never-before-seen process attempts this action. This is a strong indicator that a doppelgänged process is attempting to steal credentials.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Relevant on Domain Controllers, Authentication Servers, Credential Stores
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE frequency of processes accessing lsass.exe. ALERT if accessing_process_name is not in top 95% of common accessors;
  - question: Does a sequence of events match a known malicious attack chain, such as anomalous creation followed by credential access and exfiltration?
    context: This moves beyond single events to analyze the sequence of an attack. A sequence analysis model can be trained on normal operations to identify a malicious sequence, such as an anomalous process being created, then accessing lsass.exe, and finally making an outbound network connection. Such a sequence has a very low probability of being benign.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Relevant on Domain Controllers, Authentication Servers, Credential Stores
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_sequence_model(event_sequences). ALERT if probability(new_sequence=['Anomalous_Create', 'LSASS_Access', 'Network_Outbound']) < benign_threshold;
  - question: Is a process rapidly using the CreateTransaction, CreateFileTransacted, and RollbackTransaction API sequence?
    context: This sequence of API calls is the hallmark of Process Doppelgänging. The technique uses Transactional NTFS (TxF) to write a malicious payload, map it to memory, and then roll back the transaction, leaving no file on disk. Since TxF is deprecated and rarely used, observing this sequence is a very high-fidelity indicator of an attack.
    answer_sources:
      - EDR Telemetry (API Monitoring)
      - Sysmon Event ID 26 (FileCreateTransacted)
      - Relevant on All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR process in processes, CHECK for API sequence ('CreateTransaction', 'CreateFileTransacted', 'RollbackTransaction') within 5 seconds. ALERT if found;
  - question: Is a non-allowlisted process using Transactional NTFS (TxF) APIs?
    context: Given that TxF APIs are deprecated, very few legitimate processes should be using them. By creating an allow-list of the known good processes that do (e.g., specific installers), any other process making these API calls (like CreateFileTransacted from Sysmon Event ID 26) becomes immediately suspicious. This isolates the rare behavior associated with Process Doppelgänging.
    answer_sources:
      - EDR Telemetry (API Monitoring)
      - Sysmon Event ID 26 (FileCreateTransacted)
      - Relevant on All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: IDENTIFY processes using TxF APIs. ALERT if process_name NOT IN ('trusted_installer.exe', ...);
  - question: Does a process's sequence of API calls deviate from patterns learned by an autoencoder model?
    context: An autoencoder trained on benign API call sequences learns to "reconstruct" them accurately. When fed an anomalous sequence, such as the one used in Process Doppelgänging, it will fail to reconstruct it properly, resulting in a high "reconstruction error." This error serves as a powerful, model-driven alert for novel or obfuscated malicious activity.
    answer_sources:
      - EDR Telemetry (API Monitoring)
      - Sysmon Event ID 26 (FileCreateTransacted)
      - Relevant on All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_autoencoder(benign_api_sequences). IF reconstruction_error(new_sequence) > threshold, ALERT;
  - question: Is a core system process making a network connection to a known malicious domain or IP?
    context: Core system binaries like csc.exe should not initiate direct outbound network connections, especially to destinations flagged by threat intelligence. This question aims to detect a doppelgänged process that, after being created, establishes a command-and-control (C2) channel. Correlating process data (Sysmon) with network data (Zeek, TI feeds) provides strong evidence of compromise.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Relevant on Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_network_events with dns_logs and threat_intel. ALERT if process_name IN ('csc.exe', ...) AND destination_ip IN (threat_intel_ips);
  - question: Is a system process connecting to a high-risk domain (e.g., newly registered, high entropy)?
    context: Adversaries often use Domain Generation Algorithms (DGAs) which produce high-entropy domain names, and they use newly registered domains for C2 infrastructure. A high-risk score, derived from factors like domain age and randomness (entropy), associated with a connection from a system process is a strong indicator of a C2 beacon from a doppelgänged process.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Relevant on Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE risk_score(domain_age, domain_entropy). ALERT if system_process connects to domain with risk_score > threshold;
  - question: Does the network behavior of a specific system process deviate from its established normal profile?
    context: Legitimate system processes have predictable network behavior. An anomaly detection model can learn this normal profile. If a doppelgänged svchost.exe process starts beaconing to a C2 server on a non-standard port, the model will flag this new connection as an anomaly, providing a precise alert without needing pre-existing indicators.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Relevant on Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_anomaly_detector(svchost_network_data). PREDICT on new_svchost_connections. ALERT if anomaly_score is high;
  - question: Was a critical system process spawned by an unexpected parent?
    context: The Windows OS has a well-defined process hierarchy (e.g., wininit.exe -> services.exe -> svchost.exe). A deviation from this lineage, such as explorer.exe spawning svchost.exe, is a significant anomaly. This rule violation is a strong indicator that an adversary has compromised a process and is using it to launch a doppelgänged system process.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on User Workstations, Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: DEFINE tree of normal_parent_child_pairs. FOR new_process in process_events, ALERT if (new_process.parent, new_process.child) NOT IN tree;
  - question: Does a critical system process have an anomalous command-line structure (e.g., null, or unusually long)?
    context: Legitimate system processes are often launched with predictable command-line arguments. Process Doppelgänging can result in a process being created with a null or empty command line when one is normally expected. By baselining the typical command-line length for processes, we can flag outliers, which strongly suggests the process was not created through its normal execution flow.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on User Workstations, Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE command_line_length for 'rundll32.exe'. ALERT if new_instance_length is 0 or > 3_std_deviations_from_mean;
  - question: Does a machine learning model, trained only on normal creation events for a specific process, classify a new instance as an outlier?
    context: A One-Class SVM learns the boundary of "normal" behavior from a dataset of only benign examples. When a new process creation event occurs, the model checks if it falls within this learned boundary. If it falls outside—because its parent, command line, or user context is abnormal—it is classified as an outlier, signaling a potential masquerading attempt.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on User Workstations, Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_one_class_svm(benign_rundll32_events). PREDICT on new_rundll32_events. ALERT if prediction is 'outlier';
  - question: Is a system process responsible for traffic that Zeek has identified as potential C2 beaconing?
    context: Zeek can identify suspicious network patterns like beaconing. This question seeks to add process context to these network-based alerts. By correlating the source IP from a Zeek notice back to the process on the endpoint that generated the traffic (via Sysmon Event ID 3), we can determine if a supposedly legitimate system process is the culprit.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Zeek notice.log
      - Relevant on Network Egress Points, DNS recursive resolvers, Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN zeek_notices with sysmon_network_events ON source_ip. ALERT if zeek_notice_type == 'C2::Beaconing' AND process_name IN ('svchost.exe', ...);
  - question: Is a system process making highly periodic network connections with low jitter?
    context: C2 beaconing is often characterized by connections at very regular intervals (low jitter). By calculating the standard deviation of time between connections for each source-destination pair, we can mathematically identify this regularity. If a system process is found to be the source of such periodic traffic, it is a strong sign of automated C2 communication.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Zeek notice.log
      - Relevant on Network Egress Points, DNS recursive resolvers, Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: GROUP connections by src_ip, dst_ip. CALCULATE std_dev(time_between_connections). IF std_dev < 1.0, GET src_process_name. ALERT if src_process_name is system_binary;
  - question: Did a system process suddenly send an anomalously large amount of outbound data compared to its forecast?
    context: This question uses time-series forecasting to model the normal data transfer behavior of system processes. An alert is triggered when the actual observed data volume for a process significantly deviates from the model's forecast, which could indicate a data exfiltration event or a large C2 payload download by a doppelgänged process.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Zeek notice.log
      - Relevant on Network Egress Points, DNS recursive resolvers, Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_timeseries_model(process_data_volume). FORECAST expected_volume. ALERT if actual_volume > forecast + confidence_interval;
  - question: Did a core system process spawn an interactive shell or a reconnaissance tool?
    context: This is a very high-fidelity indicator of malicious activity. Core, non-interactive system processes like lsass.exe or services.exe should never spawn tools like cmd.exe, powershell.exe, or whoami.exe. Such an event almost certainly means an adversary has compromised the parent process and is using it to open a shell or gather information.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Internal Web Servers, Developer Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SELECT * FROM process_creation_events WHERE parent_process_name IN ('svchost.exe', 'lsass.exe', ...) AND child_process_name IN ('cmd.exe', 'powershell.exe', 'whoami.exe', ...);
  - question: Has a system process spawned a child process that is historically rare or has never been seen before?
    context: By building a comprehensive baseline of every child process ever spawned by parent system processes, we can immediately detect when a new or extremely rare child process appears. This is a powerful anomaly detection technique because it will flag attacker activity, like spawning net.exe from services.exe, which would be statistically absent from a large historical dataset.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Internal Web Servers, Developer Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE children for each system_process. ALERT if 'svchost.exe' spawns child_process not in baseline OR child_process_frequency < 1st_percentile;
  - question: Does a process creation event create a link between two previously disconnected "communities" of processes in a relationship graph?
    context: In a process relationship graph, normal activity forms distinct "communities." A malicious event, like a compromised svchost.exe (system community) spawning cmd.exe (user community), creates an anomalous edge connecting these two separate communities. Identifying these "bridge" events is an effective way to spot lateral movement or privilege escalation.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Internal Web Servers, Developer Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD process_graph and identify_communities. ALERT on new edge that connects two different communities, e.g., (svchost_node, cmd_node);