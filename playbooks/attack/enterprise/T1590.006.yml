name: T1590.006: Network Security Appliances
id: 3a1f8b8e-5b4c-4e8a-9c7d-2e1a6f0b3c4d
description: This playbook helps to determine if an adversary is actively gathering information about an organization's network security appliances. It provides questions and queries to detect various reconnaissance techniques, including scanning from known malicious IPs, the use of automated tool signatures (e.g., Nmap, Nuclei), horizontal scanning across internal hosts, vertical port scanning against a single appliance, and anomalous access attempts to sensitive management ports from unusual locations.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known malicious IP addresses from cyber threat intelligence (CTI) feeds attempting to connect to our network security appliances?
    context: This question aims to identify reconnaissance activity from known adversaries. Correlating inbound connection attempts against a high-confidence CTI feed is a direct method for detecting threats early. A match indicates that an actor with a history of malicious activity is probing our perimeter defenses, which warrants immediate investigation.
    answer_sources:
      - Zeek conn.log
      - DMZ Firewalls
      - VPN Concentrators
      - Internet Gateway Routers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SELECT timestamp, source_ip, destination_ip
          FROM connection_logs
          WHERE destination_ip IN (network_security_appliances)
            AND source_ip IN (cti_malicious_ip_feed)
  - question: Are any known malicious IP addresses scanning an unusually high number of ports on our network?
    context: This question detects scanning behavior from known malicious actors. By establishing a baseline for normal connection patterns (number of distinct ports contacted by an IP), we can statistically identify outliers. An IP from a CTI feed that also exceeds this baseline (e.g., 99th percentile) is highly likely to be performing a port scan as part of a reconnaissance effort.
    answer_sources:
      - Zeek conn.log
      - DMZ Firewalls
      - VPN Concentrators
      - Internet Gateway Routers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE baseline AS 99th_percentile(distinct_ports_per_source_ip in 1_min)
          SELECT timestamp, source_ip, COUNT(DISTINCT destination_port)
          FROM connection_logs
          GROUP BY source_ip, 1_minute_window
          HAVING source_ip IN (cti_malicious_ip_feed)
            AND COUNT(DISTINCT destination_port) > baseline
  - question: Can we use machine learning to classify inbound connections to security appliances as potential reconnaissance?
    context: This question leverages a machine learning model to proactively identify reconnaissance activity that might evade simpler symbolic or statistical checks. By training a model on features like IP reputation, connection counts, failure rates, and ASN data, the system can learn the subtle characteristics of scanning and fingerprinting attempts, providing a more robust and adaptive detection capability.
    answer_sources:
      - Zeek conn.log
      - DMZ Firewalls
      - VPN Concentrators
      - Internet Gateway Routers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          PREDICT connection_class (benign, reconnaissance)
          FROM connection_logs
          USING ML_model(features=[source_ip_reputation, connection_count, failure_ratio, asn_info])
          WHERE prediction = 'reconnaissance' AND probability > 0.9
  - question: Are there inbound HTTP/S requests to our security appliances that contain signatures of known reconnaissance tools?
    context: This question focuses on identifying automated scanning tools by their unique fingerprints. Tools like Nmap, Zgrab, and Nuclei often use specific User-Agent strings, request common sensitive file paths (like `/.git/config`), or have unique TLS handshake parameters (JA3 hashes). Detecting these signatures provides strong evidence that an automated tool, rather than a legitimate user, is interacting with our systems.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Web Application Firewalls (WAFs)
      - Reverse Proxies
      - VPN Concentrator Web Portals
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SELECT timestamp, source_ip, user_agent, uri, ja3_hash
          FROM http_logs, ssl_logs
          WHERE destination_ip IN (network_security_appliances)
            AND (user_agent MATCHES (tool_signatures)
            OR uri MATCHES (sensitive_paths)
            OR ja3_hash IN (malicious_ja3_list))
  - question: Are any inbound HTTP requests to our security appliances using User-Agent strings with unusual complexity or randomness?
    context: This question helps detect illegitimate traffic by analyzing the User-Agent string's entropy. Legitimate browsers have predictable User-Agent formats and thus a typical entropy range. Automated tools may use overly simple, hardcoded strings (low entropy) or randomly generated strings (high entropy). Flagging User-Agents with entropy scores outside the normal range can uncover covert scanning attempts.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Web Application Firewalls (WAFs)
      - Reverse Proxies
      - VPN Concentrator Web Portals
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE baseline_entropy_mean, baseline_entropy_std_dev FROM historical_http_logs
          SELECT source_ip, user_agent, shannon_entropy(user_agent)
          FROM http_logs
          WHERE destination_ip IN (network_security_appliances)
            AND ABS(shannon_entropy(user_agent) - baseline_entropy_mean) > 3 * baseline_entropy_std_dev
  - question: Is there a significant and unexpected spike in the volume of requests matching scanner signatures, suggesting a coordinated campaign?
    context: This question aims to detect large-scale reconnaissance campaigns. While a few scanning requests might be noise, a sudden, large-scale increase in requests matching tool signatures (e.g., 'nmap') is a strong indicator of a targeted or widespread scanning effort. A time series model can predict the expected volume and alert when the observed volume significantly exceeds the forecast.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Web Application Firewalls (WAFs)
      - Reverse Proxies
      - VPN Concentrator Web Portals
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          PREDICT expected_volume, confidence_interval
          FROM ML_timeseries_model(historical_scanner_requests)
          COMPARE observed_volume of requests with scanner signatures
          ALERT IF observed_volume > confidence_interval_upper_bound
  - question: Is a single external IP address attempting to connect to a large number of different internal hosts on the same port in a short time frame?
    context: This question is designed to detect horizontal scanning, a common reconnaissance technique where an attacker scans across a network to discover live hosts. Alerting on a single source IP connecting to many unique destinations (e.g., >50) on one port within a tight window (e.g., <10 minutes) is a classic indicator of this activity.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway Routers
      - Core Network Switches
      - DMZ Firewalls
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SELECT source_ip, destination_port, COUNT(DISTINCT destination_ip)
          FROM connection_logs
          GROUP BY source_ip, destination_port, 10_minute_window
          HAVING COUNT(DISTINCT destination_ip) > 50
  - question: Are any external source IPs connecting to a statistically anomalous number of unique internal hosts compared to typical behavior?
    context: This question provides a dynamic way to detect horizontal scanning by using a statistical baseline. Instead of a fixed threshold, it identifies outliers by flagging any source IP whose fan-out (number of unique destinations) is in the extreme upper percentile (e.g., 99.9th) of all activity in a given time window. This approach adapts to changing network traffic patterns.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway Routers
      - Core Network Switches
      - DMZ Firewalls
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE threshold AS 99.9th_percentile(unique_destinations_per_source_ip in 10_min)
          SELECT source_ip, COUNT(DISTINCT destination_ip)
          FROM connection_logs
          GROUP BY source_ip, 10_minute_window
          HAVING COUNT(DISTINCT destination_ip) > threshold
  - question: Can we use clustering algorithms to automatically identify groups of connections that represent horizontal scanning activity?
    context: This question applies unsupervised machine learning to discover scanning patterns without predefined rules. A clustering algorithm like DBSCAN can group connection events based on their features (source IP, port, time between connections). A dense cluster of events with the same source IP and port but many different destination IPs would be automatically identified as an anomalous pattern corresponding to a horizontal scan.
    answer_sources:
      - Zeek conn.log
      - Internet Gateway Routers
      - Core Network Switches
      - DMZ Firewalls
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          IDENTIFY clusters
          FROM connection_logs
          USING DBSCAN(features=[source_ip, dest_port, time_delta])
          FILTER for clusters WHERE unique_source_ips = 1 AND unique_dest_ips > 50
  - question: Is a single external IP address attempting to connect to a large number of different ports on one of our network security appliances?
    context: This question is designed to detect vertical port scanning, where an attacker probes a single host to discover all of its open services. A simple rule that alerts when a source IP tries to connect to an excessive number of ports (e.g., >100) on a single security appliance within a short timeframe (e.g., <5 minutes) is a highly effective way to catch this common reconnaissance technique.
    answer_sources:
      - Zeek conn.log
      - DMZ Firewalls
      - VPN Concentrators
      - Public-facing Routers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SELECT source_ip, destination_ip, COUNT(DISTINCT destination_port)
          FROM connection_logs
          WHERE destination_ip IN (network_security_appliances)
          GROUP BY source_ip, destination_ip, 5_minute_window
          HAVING COUNT(DISTINCT destination_port) > 100
  - question: Are any source IPs connecting to our security appliances experiencing a statistically high ratio of failed-to-successful connections?
    context: This question helps identify port scanning by focusing on connection outcomes. Scanners inherently generate many failed connections as they probe closed ports. By calculating the ratio of failed connections (e.g., TCP Resets) to total connections for each source IP, we can flag those with an anomalously high failure rate (e.g., above the 95th percentile), which strongly indicates a port scan is in progress.
    answer_sources:
      - Zeek conn.log
      - DMZ Firewalls
      - VPN Concentrators
      - Public-facing Routers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE threshold AS 95th_percentile(failed_connection_ratio_per_source)
          SELECT source_ip, (SUM(CASE WHEN conn_state = 'REJ' THEN 1 ELSE 0 END) / COUNT(*)) AS failure_ratio
          FROM connection_logs
          WHERE destination_ip IN (network_security_appliances)
          GROUP BY source_ip
          HAVING failure_ratio > threshold
  - question: Can we use an anomaly detection model to identify any connection to a security appliance that deviates from a learned profile of normal traffic?
    context: This question employs anomaly detection to find novel or evasive scanning techniques. A one-class SVM is trained only on 'normal' traffic data. When a new connection arrives, the model determines if it fits this learned profile. Connections that deviate significantly—even if they don't match a specific rule—are flagged as anomalous. This can catch vertical scans that are slow or use non-standard techniques.
    answer_sources:
      - Zeek conn.log
      - DMZ Firewalls
      - VPN Concentrators
      - Public-facing Routers
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          PREDICT anomaly_score
          FROM connection_logs
          USING OneClassSVM_model(trained_on_normal_traffic_features)
          WHERE destination_ip IN (network_security_appliances)
            AND anomaly_score indicates outlier
  - question: Are there any connection attempts to our sensitive management ports from IP addresses that are not on our approved allow-list?
    context: This question enforces a strict access control policy on critical administrative interfaces. Management ports (like SSH, RDP, or web admin UIs) should only be accessible from a small, well-defined set of trusted IP ranges. Any connection attempt from an unauthorized source is a high-severity event and a strong indicator of targeted reconnaissance.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Event ID 4625
      - Firewall Management Interfaces
      - VPN Administrator Portals
      - Router Management Consoles
      - Bastion Hosts
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SELECT timestamp, source_ip, destination_ip, destination_port
          FROM connection_logs, authentication_logs
          WHERE destination_port IN (management_ports)
            AND source_ip NOT IN (admin_ip_allow_list)
  - question: Are there connection attempts to management services from countries or Autonomous Systems (ASNs) that have no history of legitimate administrative activity?
    context: This question uses historical data to spot anomalous access patterns. Legitimate administrative access typically originates from a predictable set of geographic locations and network providers (ASNs). A connection attempt to a management port from a country or ASN that has never been seen before is a significant deviation from the norm and may indicate an external adversary is attempting to access these critical interfaces.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Event ID 4625
      - Firewall Management Interfaces
      - VPN Administrator Portals
      - Router Management Consoles
      - Bastion Hosts
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEFINE historical_countries, historical_asns FROM past 90 days of connection_logs to management_ports
          SELECT source_ip, source_country, source_asn
          FROM new_connection_logs to management_ports
          WHERE source_country NOT IN (historical_countries)
            OR source_asn NOT IN (historical_asns)
  - question: Can we use a neural network to detect anomalous connections to management interfaces based on a holistic set of features?
    context: This question applies a sophisticated deep learning approach for high-fidelity anomaly detection. An autoencoder is trained to 'reconstruct' normal connection patterns based on features like ports, protocol, time, and ASN. When a malicious connection attempt occurs, its characteristics will not match the learned patterns, resulting in a high 'reconstruction error' and triggering an alert.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Windows Event ID 4625
      - Firewall Management Interfaces
      - VPN Administrator Portals
      - Router Management Consoles
      - Bastion Hosts
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CALCULATE reconstruction_error
          FROM new_connection_logs to management_ports
          USING Autoencoder_model(features=[port, protocol, ja3, time_of_day, asn])
          ALERT IF reconstruction_error > learned_threshold