name: T1203: Exploitation for Client Execution
id: 17b0704c-3575-4705-95f7-87353982e5b8
description: Has the adversary executed code on client systems via exploitation? This
  involves looking for client applications like browsers or document readers making
  outbound connections to known malicious indicators (exploit kits, malware C2, phishing
  sites). It also includes detecting when common client applications spawn command-line
  interpreters (cmd.exe, powershell.exe) with obfuscated commands, or when they spawn
  statistically rare child processes. Further indicators are client applications
  creating files with mismatched extensions and magic bytes (e.g., a .pdf that is
  actually an .exe), or writing executables to non-standard user directories. Finally,
  it covers monitoring for anomalous network connections from client applications,
  such as direct-to-IP connections, use of non-standard ports, or communication with
  high-entropy domains.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a client application connected to a known malicious destination associated
    with exploit kits, C2, or phishing?
  context: This question aims to identify the initial compromise vector where a user's
    application, like a web browser, is directed to a malicious server. By correlating
    network and web logs with threat intelligence, analysts can detect connections
    to infrastructure known to host exploit kits or facilitate malware delivery, which
    is a common pattern in drive-by compromise attacks.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek files.log
  - Internet gateway
  - Forward proxy servers
  - DNS resolvers
  - User workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH Zeek conn.log AND Zeek http.log
      JOIN threat_intelligence_feed ON (conn.log.destination_ip = feed.indicator OR http.log.host = feed.indicator)
      WHERE feed.category IN ('exploit kit', 'malware C2', 'phishing')
      RETURN conn.log.source_ip, conn.log.destination_ip, http.log.host
- question: Has a client application connected to a statistically rare domain and
    downloaded a high-risk file?
  context: Adversaries often use newly registered or obscure domains for exploit
    delivery to evade reputation-based blocking. This question helps uncover these
    by identifying domains that are infrequently visited across the enterprise. Correlating
    a connection to such a domain with the download of a file type commonly used
    in exploits (.pdf, .doc, etc.) significantly increases the likelihood of a client-side
    exploitation attempt.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek files.log
  - Internet gateway
  - Forward proxy servers
  - DNS resolvers
  - User workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      // Step 1: Find rare domains
      RARE_DOMAINS = SEARCH Zeek dns.log over last 30 days
        | GROUP BY domain
        | COUNT
        | WHERE count < 5th_percentile_threshold

      // Step 2: Find connections to rare domains with risky file downloads
      SEARCH Zeek conn.log AND Zeek files.log
      WHERE conn.log.destination_domain IN RARE_DOMAINS
        AND files.log.source_ip = conn.log.source_ip
        AND files.log.file_extension IN ('.pdf', '.doc', '.xls', '.swf')
      RETURN conn.log.source_ip, conn.log.destination_domain, files.log.filename
- question: Has any user exhibited an anomalous spike in connections to newly observed
    domains, potentially indicating a drive-by compromise?
  context: This question uses behavioral analytics to detect deviations from a user's
    normal browsing patterns. A sudden increase in connections to brand-new domains
    for a specific user is highly irregular and can be a sign of their browser being
    redirected through a series of malicious sites, a hallmark of exploit kits. Tying
    this anomaly to a file download further strengthens the evidence of a successful
    compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek files.log
  - Internet gateway
  - Forward proxy servers
  - DNS resolvers
  - User workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH user:
        // Step 1: Build a time-series model of new domain connections
        MODEL = TRAIN time_series_model ON historical_data (count of new domains per day)

        // Step 2: Detect anomalies
        CURRENT_COUNT = COUNT new domains for user today
        PREDICTED_COUNT, CONFIDENCE_INTERVAL = MODEL.predict()
        IF CURRENT_COUNT > CONFIDENCE_INTERVAL.upper_bound:
          ALERT "Anomalous new domain connections for user"
          CORRELATE with Zeek files.log for risky downloads
- question: Has a common client application spawned a command interpreter with a suspicious
    or obfuscated command line?
  context: Legitimate client applications like Microsoft Office or web browsers rarely
    need to spawn command shells or script hosts to perform their normal functions.
    This behavior is a classic indicator of post-exploitation activity, where an
    exploit has succeeded and is now executing a payload. This question looks for
    this specific parent-child relationship coupled with command-line arguments known
    to be used for downloading secondary payloads or executing malicious code.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Remote Desktop Session Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH (Sysmon Event ID 1 OR Windows Event ID 4688)
      WHERE ParentProcess IN ('WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE', 'AcroRd32.exe', 'chrome.exe', 'msedge.exe')
        AND ChildProcess IN ('cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'mshta.exe')
        AND CommandLine CONTAINS_REGEX ('-enc|DownloadString|certutil -urlcache|bitsadmin /transfer|long_base64_string')
      RETURN ParentProcess, ChildProcess, CommandLine
- question: Has a client application spawned a child process with an unusually complex
    or high-entropy command line?
  context: Adversaries frequently use obfuscation (like Base64 or custom encoding)
    to hide their malicious commands from simple keyword-based detections. High Shannon
    entropy is a mathematical indicator of randomness and complexity. By baselining
    the normal command-line entropy for specific process pairs and alerting on significant
    deviations, analysts can detect obfuscated payloads even if the specific keywords
    are unknown.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Remote Desktop Session Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH event in Sysmon Event ID 1:
        PARENT_CHILD_PAIR = (event.ParentProcess, event.ChildProcess)
        BASELINE_ENTROPY = GET_BASELINE_ENTROPY(PARENT_CHILD_PAIR)
        CURRENT_ENTROPY = CALCULATE_ENTROPY(event.CommandLine)
        IF CURRENT_ENTROPY > 99th_percentile(BASELINE_ENTROPY):
          ALERT "High entropy command line detected"
          RETURN event.ParentProcess, event.ChildProcess, event.CommandLine
- question: Has a machine learning model identified a command line as malicious, originating
    from a common client application?
  context: This question leverages advanced AI/ML to move beyond static rules and
    statistical anomalies. A transformer model trained on millions of command lines
    can understand the structure and semantics of commands, enabling it to identify
    novel or complex malicious commands that might evade other detection methods.
    This provides a sophisticated, adaptable layer of defense against evolving attacker
    techniques.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations
  - Virtual Desktop Infrastructure (VDI) instances
  - Remote Desktop Session Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH event in Sysmon Event ID 1:
        IF event.ParentProcess IN ('WINWORD.EXE', 'chrome.exe', etc.):
          PREDICTION, CONFIDENCE = ML_MODEL.classify(event.CommandLine)
          IF PREDICTION == 'malicious' AND CONFIDENCE > 0.9:
            ALERT "ML model detected malicious command line"
            RETURN event.ParentProcess, event.ChildProcess, event.CommandLine, CONFIDENCE
- question: Has a client application spawned a child process that is on a list of
    explicitly forbidden relationships?
  context: Some process relationships are almost universally indicative of malicious
    activity. For example, a PDF reader should never need to run a disk partitioning
    utility. This question codifies this expert knowledge into high-fidelity, low-noise
    alerts. By maintaining a blocklist of known-bad pairings, security teams can
    immediately flag egregious policy violations that strongly suggest a compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - User workstations
  - Application servers (e.g., Citrix)
  - DNS resolvers
  - Internet gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FORBIDDEN_PAIRS = [('AcroRd32.exe', 'regsvr32.exe'), ('chrome.exe', 'diskpart.exe'), ...]
      SEARCH Sysmon Event ID 1
      WHERE (ParentProcess, ChildProcess) IN FORBIDDEN_PAIRS
      RETURN ParentProcess, ChildProcess, CommandLine
- question: Has a client application spawned a child process that is statistically
    rare for that parent across the enterprise?
  context: Beyond explicitly forbidden pairs, some process creations are suspicious
    simply because they are rare. This question aims to find these "needle in a haystack"
    events. By building a statistical baseline of all parent-child relationships,
    the system can automatically flag any new process creation that is a significant
    outlier, pointing investigators to behavior that deviates from the established
    norm for the entire organization.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - User workstations
  - Application servers (e.g., Citrix)
  - DNS resolvers
  - Internet gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      // Step 1: Build probability table
      PROB_TABLE = CALCULATE P(Child | Parent) for all pairs over last 30 days
      
      // Step 2: Check new events
      FOR EACH event in Sysmon Event ID 1:
        PROBABILITY = PROB_TABLE.get(event.ParentProcess, event.ChildProcess)
        IF PROBABILITY < 0.001 OR PROBABILITY is NULL:
          ALERT "Statistically rare parent-child process pair detected"
          RETURN event.ParentProcess, event.ChildProcess
- question: Has a graph-based anomaly detection model identified an unusual process
    creation event, potentially correlated with anomalous network activity?
  context: This question treats the enterprise's process activity as a massive interconnected
    graph. Graph-based machine learning can identify subtle, anomalous relationships
    that are difficult to spot with simple frequency analysis. An anomalous edge
    in this graph represents a process creation that doesn't fit the learned pattern
    of normal system behavior. Correlating this with strange network activity from
    the anomalous process provides a powerful, multi-faceted signal of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Zeek conn.log
  - User workstations
  - Application servers (e.g., Citrix)
  - DNS resolvers
  - Internet gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      // Step 1: Build and train graph model
      PROCESS_GRAPH = BUILD_GRAPH from Sysmon Event ID 1 data
      GRAPH_MODEL = TRAIN GNN_autoencoder on PROCESS_GRAPH

      // Step 2: Find anomalous edges
      FOR EACH new_edge in PROCESS_GRAPH:
        RECONSTRUCTION_ERROR = GRAPH_MODEL.get_error(new_edge)
        IF RECONSTRUCTION_ERROR > threshold:
          ALERT "Anomalous process creation detected by graph model"
          // Step 3: Correlate with network data
          CORRELATE new_edge.child_process with anomalous Zeek conn.log events
- question: Has a client application written an executable file to a non-standard
    or suspicious directory?
  context: This is a classic "dropper" behavior. After an exploit, malware often
    writes its next stage or persistence mechanism to disk. Legitimate applications
    rarely drop executables into temporary or public user directories. This question
    targets this specific, high-confidence indicator of compromise by looking for
    common client applications creating executable files in unusual locations.
  answer_sources:
  - Sysmon Event ID 11
  - Zeek files.log
  - User workstations
  - Network file shares
  - Web content filters
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SUSPICIOUS_PATHS = ['C:\\Users\\Public\\*', 'C:\\PerfLogs\\*', '%APPDATA%\\..\\Local\\Temp\\*']
      EXECUTABLE_EXTENSIONS = ['.exe', '.dll', '.scr', '.ps1', '.vbs', '.hta', '.bat']
      SEARCH Sysmon Event ID 11
      WHERE Image IN ('chrome.exe', 'WINWORD.EXE', etc.)
        AND TargetFilename.extension IN EXECUTABLE_EXTENSIONS
        AND TargetFilename.path IN SUSPICIOUS_PATHS
      RETURN Image, TargetFilename
- question: Has a client application written a file to a location or with an extension
    that is statistically rare for that application?
  context: Moving beyond static lists of suspicious locations, this question uses
    statistical baselining to find abnormal file write behavior. For instance, a
    web browser might normally write ".jpg" files to the Downloads folder, but writing
    a ".ps1" file to "C:\PerfLogs" would be extremely rare. By profiling what's normal
    for each application, this method can detect novel attacker techniques that use
    previously unseen file paths or types.
  answer_sources:
  - Sysmon Event ID 11
  - Zeek files.log
  - User workstations
  - Network file shares
  - Web content filters
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      // Step 1: Build frequency baseline
      BASELINE = COUNT (process, directory, extension) tuples from Sysmon Event ID 11 over last 30 days

      // Step 2: Check new events
      FOR EACH event in Sysmon Event ID 11:
        TUPLE = (event.Image, event.TargetFilename.directory, event.TargetFilename.extension)
        FREQUENCY = BASELINE.get_frequency(TUPLE)
        IF FREQUENCY < 1st_percentile:
          ALERT "Rare file write event detected"
          RETURN TUPLE
- question: Has a file been downloaded or created where its actual file type (from
    magic bytes) does not match its file extension?
  context: This is a common evasion technique where an attacker disguises a malicious
    executable (like an .exe) by giving it a benign file extension (like .jpg or
    .pdf). This can bypass simple extension-based filters. This question seeks to
    uncover this deception by comparing the file's apparent type (extension) with
    its true type, as determined by its internal structure (magic bytes). A mismatch
    is a strong indicator of malicious intent.
  answer_sources:
  - Sysmon Event ID 11
  - Zeek files.log
  - User workstations
  - Network file shares
  - Web content filters
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH file in (Zeek files.log OR Sysmon Event ID 11):
        PREDICTED_TYPE = CLASSIFY_FROM_MAGIC_BYTES(file.content)
        ACTUAL_EXTENSION = file.extension
        IF PREDICTED_TYPE != map_extension_to_type(ACTUAL_EXTENSION):
          ALERT "File type mismatch detected"
          RETURN file.name, PREDICTED_TYPE, ACTUAL_EXTENSION
- question: Has a client application made a direct-to-IP network connection without
    a preceding DNS lookup?
  context: Most legitimate user-driven network traffic begins with a DNS query to
    resolve a domain name to an IP address. Malware, on the other hand, often has
    hardcoded IP addresses for its C2 servers to avoid DNS-based blocking and analysis.
    This question flags this suspicious behavior by looking for connections from client
    apps that go straight to an IP address without first asking a DNS server "what
    is the IP for this domain?".
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - User workstations
  - Internet gateway
  - Egress firewalls
  - DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH Sysmon Event ID 3 AND Zeek conn.log AND Zeek dns.log
      FOR EACH connection in conn.log from a client_app_process:
        HAS_DNS = SEARCH dns.log for query matching connection.dest_ip in last 5 minutes from same source_ip
        IF NOT HAS_DNS AND connection.dest_ip is not private/allowlisted:
          ALERT "Direct-to-IP connection from client application"
          RETURN client_app_process, connection.dest_ip
- question: Is a client application connecting to a non-standard port or a high-entropy
    (random-looking) domain?
  context: This question combines two indicators of anomalous network behavior. First,
    applications typically use standard ports for communication (e.g., browsers use
    80/443). Using an unusual port can indicate C2 traffic or data exfiltration. Second,
    algorithmically generated domains (DGA) used by malware often appear random and
    have high character entropy. Alerting on either or both of these conditions helps
    detect C2 channels that are trying to blend in but exhibit statistical anomalies.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - User workstations
  - Internet gateway
  - Egress firewalls
  - DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      // Query 1: Anomalous port
      FOR EACH process in Sysmon Event ID 3:
        BASELINE_PORTS = GET_HISTORICAL_PORTS(process)
        CURRENT_PORT = GET_CURRENT_PORT(process, Zeek conn.log)
        IF CURRENT_PORT not in 95th_percentile(BASELINE_PORTS):
          ALERT "Anomalous port usage by process"

      // Query 2: High entropy domain
      FOR EACH query in Zeek dns.log:
        ENTROPY = CALCULATE_ENTROPY(query.domain)
        IF ENTROPY > 4.0:
          ALERT "High entropy domain requested"
- question: Has an unsupervised machine learning model detected an anomalous network
    connection for a specific user and application?
  context: This question applies machine learning to create a highly contextualized
    baseline of "normal" network activity for every user and every application they
    run. The model learns what is typical in terms of ports, data volume, connection
    length, and other features. Any new connection that significantly deviates from
    this learned profile is flagged as an anomaly. This is a powerful method for
    catching unknown threats, as it focuses on "abnormal behavior" rather than known
    "bad signatures."
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - User workstations
  - Internet gateway
  - Egress firewalls
  - DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR EACH user_process_pair (e.g., 'user_A', 'chrome.exe'):
        // Step 1: Train model on historical connection data
        MODEL = TRAIN IsolationForest on features (port, protocol, bytes_in, bytes_out, duration)

        // Step 2: Score new connections
        FOR EACH new_connection for user_process_pair:
          ANOMALY_SCORE = MODEL.predict(new_connection.features)
          IF ANOMALY_SCORE is high:
            ALERT "Anomalous network connection detected by ML model"
            RETURN new_connection.details