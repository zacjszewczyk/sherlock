name: T1114.001: Local Email Collection
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigators determine if an adversary has collected sensitive data from local email files, such as Outlook .pst or .ost archives. It provides methods to detect various collection techniques, including access by known malicious processes, suspicious command-line operations targeting email files, unusual processes reading email data and then exfiltrating it over the network, staging of email files in temporary directories, and a single account anomalously accessing email archives from multiple user profiles.
type: technique
related:
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I detect if a known malicious process is accessing local email files?
    context: This question focuses on a high-confidence indicator of compromise. By monitoring for file access to local email archives like .pst or .ost files, we can identify the process responsible. If that process's hash is present in our threat intelligence feeds, it strongly suggests that a known malicious tool is attempting to collect email data. This is a direct, symbolic detection method that relies on matching known bad indicators.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations
      - Executive laptops
      - Mail archive servers
      - Backup servers
    range: last 90 days
    queries:
      - symbolic: "search: File access events (Event ID 4663) where target_file ends with .pst or .ost -> join ProcessID with Process creation events (Event ID 4688) -> check file_hash against threat intel -> alert on match"
  - question: How can I statistically identify unusual or rare processes that are accessing local email files?
    context: This question aims to uncover unknown or novel threats that aren't yet in threat intelligence feeds. Instead of looking for known bad hashes, this approach uses statistical analysis to find outliers. A process that is rarely seen across the organization (low prevalence) and runs from an unusual file path (high entropy) is inherently suspicious. When such a process accesses sensitive email archives, it warrants an investigation as a potential data collection activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations
      - Executive laptops
      - Mail archive servers
      - Backup servers
    range: last 90 days
    queries:
      - statistical: "search: File access to .pst/.ost -> get process_name and process_path -> calculate prevalence of process_name across enterprise -> calculate entropy of process_path -> score = (1 - prevalence) + entropy -> alert if score > threshold"
  - question: Can a machine learning model be used to classify process access to email files as malicious?
    context: This question explores a more advanced, adaptive detection method using a random forest classifier. By training a model on a rich feature set—including process name, parent process, command-line arguments, and path entropy—the system can learn the subtle characteristics that distinguish malicious collection from benign activity (like an email client indexing files). This approach is robust against minor changes in attacker tools and can achieve a high degree of accuracy with proper training.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User workstations
      - Executive laptops
      - Mail archive servers
      - Backup servers
    range: last 90 days
    queries:
      - machine_learning: "train: Random Forest model on labeled process/file access events (benign vs. malicious) -> features: process_name, parent_process, cmd_line, path_entropy, accesses_email_file -> predict: Classify new events in real-time"
  - question: How can I detect if command-line interpreters are being used to copy or archive local email files?
    context: This question focuses on detecting "living off the land" techniques, where adversaries use legitimate system tools like cmd.exe or PowerShell to perform malicious actions. By monitoring process creation events and inspecting command-line arguments for specific patterns (e.g., 'copy *.pst', 'Compress-Archive *.ost'), we can catch attempts to collect and stage email data using built-in utilities, which might otherwise evade simpler detection methods.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI) instances
      - Administrative jump boxes
      - Domain Controllers
    range: last 90 days
    queries:
      - symbolic: "search: Process creation events (Event ID 4688) for cmd.exe, powershell.exe, etc. -> apply regex library to command_line to find patterns like 'copy *.pst' or 'robocopy ... *.ost' -> alert on match"
  - question: How can I use statistical rarity to find suspicious command-line manipulation of email files?
    context: This question addresses the challenge of distinguishing malicious command-line activity from benign administrative scripts. By creating a unique signature for each command (process name + arguments) and calculating its frequency across the enterprise, we can identify commands that are exceptionally rare. A command that both targets email files and has a very high rarity score is highly suspicious and likely represents a non-standard, potentially malicious action.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI) instances
      - Administrative jump boxes
      - Domain Controllers
    range: last 90 days
    queries:
      - statistical: "search: Process creation events with '.pst' or '.ost' in command line -> tokenize process_name + arguments to create signature -> calculate rarity score of signature based on 30-day baseline -> alert if rarity is in top 1 percentile"
  - question: Can a machine learning model classify command-line activity involving email files as malicious?
    context: This question proposes using Natural Language Processing (NLP) to understand the intent behind command-line arguments. By converting command strings into numerical vectors (e.g., using TF-IDF), a logistic regression model can be trained to differentiate between benign commands (e.g., a backup script) and malicious ones (e.g., an attacker staging data). This method is powerful because it can generalize from learned patterns to identify novel malicious commands.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI) instances
      - Administrative jump boxes
      - Domain Controllers
    range: last 90 days
    queries:
      - machine_learning: "train: Logistic Regression model with TF-IDF vectorized command lines -> labels: benign_admin_action vs. suspicious_collection -> predict: Classify new command lines that reference .pst/.ost"
  - question: How can I detect if a non-standard process accesses an email file and then connects to a malicious external IP?
    context: This question aims to link suspicious internal behavior (accessing email files) with external communication, a strong indicator of data exfiltration. The logic involves creating a stateful rule that first flags when a process not on an allowlist (e.g., not Outlook) reads a .pst or .ost file. It then watches for that same host to make a network connection to a known-bad IP address within a short time window. This correlation provides high-confidence alerts.
    answer_sources:
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations
      - Network egress points (Firewalls, Proxies)
      - DNS servers
      - Cloud storage gateways
    range: last 90 days
    queries:
      - symbolic: "rule: On file read of .pst/.ost (Event ID 4663) by process not in allowlist -> within 5 mins, check if same host connects to IP in threat intel feed (Zeek conn.log) -> alert on correlation"
  - question: How can I statistically detect anomalous network traffic following access to an email file?
    context: This question provides a way to detect exfiltration without relying on threat intelligence feeds. It works by first baselining the normal network behavior (e.g., average bytes sent, common ports) for each process. When a process accesses an email file, any subsequent network connection that significantly deviates from its established baseline (e.g., sending a much larger amount of data than usual) is flagged as a potential exfiltration event.
    answer_sources:
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations
      - Network egress points (Firewalls, Proxies)
      - DNS servers
      - Cloud storage gateways
    range: last 90 days
    queries:
      - statistical: "search: Process accesses .pst/.ost -> establish baseline network behavior for that process (avg bytes sent, common ports) from Zeek logs -> alert if subsequent connection deviates >3 standard deviations from baseline"
  - question: Can a machine learning model detect network exfiltration anomalies after email file access?
    context: This question proposes an advanced method for detecting exfiltration by modeling the normal rhythm of a host's network traffic. A time-series anomaly detection model (like an LSTM Autoencoder) is trained on a host's typical outbound data volume. When an email file access event occurs, the host's subsequent network traffic is fed to the model. If the model reports a high anomaly score, it indicates the traffic pattern is unusual and could represent data being exfiltrated.
    answer_sources:
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations
      - Network egress points (Firewalls, Proxies)
      - DNS servers
      - Cloud storage gateways
    range: last 90 days
    queries:
      - machine_learning: "train: LSTM Autoencoder on host's outbound traffic volume (bytes_out) to learn normal patterns -> on .pst/.ost access event, feed subsequent traffic to model -> alert if anomaly score exceeds threshold"
  - question: How can I detect if a utility like robocopy is being used to stage email files in a temporary directory?
    context: This question targets a common adversary behavior: copying sensitive files to a staging area before exfiltration. This symbolic rule looks for specific process creation events, such as 'cmd.exe' or 'robocopy.exe', and inspects their command lines for patterns that indicate a .pst or .ost file is being copied to a common temporary or publicly writable directory (e.g., C:\\PerfLogs, C:\\Users\\Public). A direct match is a strong indicator of staging.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User workstations
      - File servers
      - Publicly writable network shares
      - Temporary file directories
    range: last 90 days
    queries:
      - symbolic: "search: Process creation events for cmd.exe, robocopy.exe, etc. -> search command line for patterns like 'copy C:\\...\\*.pst C:\\Windows\\Temp\\' -> alert on match"
  - question: How can I statistically identify an unusually high number of file writes to a staging directory after an email file is read?
    context: This question uses volume-based statistical analysis to detect staging behavior. It monitors for a process reading a .pst or .ost file and then tracks that process's subsequent file write operations to known staging directories. If the number of writes in a short time window is abnormally high for that user or process (e.g., above the 95th percentile of their normal activity), it suggests that a large file is being broken up or copied, which could be a staging action.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User workstations
      - File servers
      - Publicly writable network shares
      - Temporary file directories
    range: last 90 days
    queries:
      - statistical: "search: File read on .pst/.ost -> for the same process, monitor file writes to staging dirs over 10 min window -> alert if write count is > 95th percentile of user's daily write activity"
  - question: Can a graph-based model detect the pattern of reading an email file and writing to a staging directory?
    context: This question conceptualizes the detection problem as a graph traversal. Processes and files are nodes, and access events are edges. The goal is to detect a specific malicious subgraph: a non-standard process node creating an edge to a .pst/.ost file node (a read), followed by that same process node creating an edge to a new file node in a temporary directory (a write). Finding this 'read-then-write-to-temp' pattern is a very high-fidelity indicator of data staging.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User workstations
      - File servers
      - Publicly writable network shares
      - Temporary file directories
    range: last 90 days
    queries:
      - machine_learning: "build: Process-file interaction graph -> search for subgraph pattern: (non-standard_process) -> reads -> (.pst/.ost_file) AND (non-standard_process) -> writes -> (new_file_in_temp_dir) -> alert on pattern discovery"
  - question: How can I detect if a single, non-administrative account is accessing email files from multiple different user profiles?
    context: This question targets lateral movement and widespread collection. Normal user activity involves an account accessing its own email files. An adversary, however, might compromise one account and use it to access email archives belonging to many different users. This symbolic rule alerts when any account not on a pre-defined allowlist (e.g., backup agents) accesses .pst or .ost files from more than one unique user profile directory within a short time frame.
    answer_sources:
      - Windows Event ID 4663
      - File servers hosting roaming profiles
      - Shared workstations
      - Citrix/VDI servers
      - Backup and archive servers
    range: last 90 days
    queries:
      - symbolic: "search: File access to .pst/.ost (Event ID 4663) -> if source_user is not on admin_allowlist, extract target_user from file path -> if source_user accesses >1 unique target_user profiles within 1 hour -> alert"
  - question: How can I statistically find users who are accessing an anomalous number of unique user email archives?
    context: This question provides a statistical method to detect widespread collection. For every user, it counts the number of unique user profiles whose email files they access within a rolling one-hour window. A baseline is established for each user (for most, this will be 1). An alert is triggered if a user's access count suddenly spikes, exceeding a static threshold (e.g., >2) or deviating significantly from their own established baseline, indicating they are accessing files beyond their own.
    answer_sources:
      - Windows Event ID 4663
      - File servers hosting roaming profiles
      - Shared workstations
      - Citrix/VDI servers
      - Backup and archive servers
    range: last 90 days
    queries:
      - statistical: "for each source_user, count unique target_user_profiles from .pst/.ost file paths over 1 hour -> establish baseline for each source_user -> alert if count > 2 OR count > 3 standard deviations above baseline"
  - question: Can an unsupervised machine learning model cluster normal email file access and identify outliers?
    context: This question applies unsupervised learning to find anomalous access patterns without pre-defined rules. By clustering file access events using features like the source user, source process, and target user profile, a model like DBSCAN can automatically group "normal" activity (e.g., a user accessing their own files via Outlook) into a large, dense cluster. Any events that fall outside this main cluster are treated as outliers—for example, one user accessing many profiles—and flagged as suspicious.
    answer_sources:
      - Windows Event ID 4663
      - File servers hosting roaming profiles
      - Shared workstations
      - Citrix/VDI servers
      - Backup and archive servers
    range: last 90 days
    queries:
      - machine_learning: "model: Use DBSCAN to cluster file access events -> features: source_user, source_process, target_user_profile -> investigate events classified as outliers or belonging to small, sparse clusters"