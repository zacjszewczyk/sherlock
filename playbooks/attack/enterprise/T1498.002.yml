name: T1498.002: Reflection Amplification
id: 5c9d8e7f-6a5b-4c3d-2e1f-0a9b8c7d6e5f
description: This playbook helps investigate potential network reflection amplification
  attacks, a type of Denial-of-Service (DoS) attack. The goal is to determine if
  an adversary is attempting to impact network availability or functionality by sending
  requests with a spoofed source IP to a third-party server (reflector), which then
  sends a much larger response to the target (the spoofed IP). The playbook focuses
  on identifying key indicators such as high-volume UDP traffic from known reflectors
  on ports like 53 (DNS), 123 (NTP), and 11211 (Memcached); the presence of specific
  high-amplification queries (e.g., DNS 'ANY', NTP 'monlist'); statistically significant
  deviations in traffic volume and amplification factors; and a sudden spike in the
  diversity (entropy) of source IP addresses.
type: technique
related:
- TA0040: Impact
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is inbound traffic originating from IP addresses on a threat intelligence
    list of known open reflectors?
  context: This question uses a symbolic approach to identify traffic from known
    malicious or misconfigured servers. By comparing inbound source IPs against a
    CTI feed of open reflectors, analysts can quickly detect the initial stages or
    ongoing activity of a reflection attack. This is a high-fidelity signal, as legitimate
    traffic from these sources is unlikely.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search Zeek conn.log
      where destination_port in (53, 123, 11211)
      and source_ip in (watchlist:open_reflectors)
      return count by source_ip, destination_port
- question: Is there an anomalous connection rate from a single source IP to common
    reflection service ports?
  context: This statistical question aims to detect potential reflectors that may
    not yet be on a CTI list. By establishing a baseline of normal connection rates
    for each source IP, a sudden, significant spike (e.g., exceeding the 99th percentile)
    can indicate that a specific server is being used to reflect traffic towards
    the organization's assets.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search Zeek conn.log
      where destination_port in (53, 123, 11211)
      calculate connections_per_minute by source_ip
      alert if connections_per_minute > 99th_percentile(historical_connections_per_minute)
- question: Can a machine learning model classify inbound connections as malicious
    reflection traffic?
  context: This question leverages a machine learning classifier to provide a more
    nuanced detection than symbolic or simple statistical rules. By training a model
    on features like ASN, connection duration, and byte/packet counts, it can learn
    the subtle patterns of reflection attacks and identify them with a high degree
    of confidence, reducing false positives from legitimate high-volume traffic.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each new connection in Zeek conn.log:
        extract features (ASN, duration, packet_count, byte_count)
        score_connection with classification_model
        if classification == 'malicious' and confidence > 0.90:
          generate alert
- question: Are we receiving high-amplification query types from untrusted sources?
  context: This question focuses on detecting the specific commands used to generate
    large responses in reflection attacks. Queries like DNS 'ANY', NTP 'monlist',
    or Memcached 'stats' have legitimate uses but are also commonly abused. Alerting
    when these queries originate from any IP not on an explicit allow-list helps
    identify reconnaissance or an active attack.
  answer_sources:
  - Zeek dns.log
  - Zeek ntp.log
  - Zeek datagram.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search Zeek dns.log where query_type == 'ANY' and source_ip not in (allowlist)
      OR search Zeek ntp.log where mode == 7
      OR search packet_data for 'stats' on UDP port 11211
- question: Has the ratio of high-amplification queries to normal queries exceeded
    a statistical baseline?
  context: This question aims to detect a shift in traffic patterns that indicates
    an attack. While some high-amplification queries may be normal, a sudden increase
    in their proportion relative to standard queries is a strong indicator of malicious
    activity. This statistical approach can catch attacks even when the overall traffic
    volume has not yet reached a critical threshold.
  answer_sources:
  - Zeek dns.log
  - Zeek ntp.log
  - Zeek datagram.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      calculate ratio = (count(high_amp_queries) / count(normal_queries)) over 5_min_window
      alert if ratio > (mean_ratio + 3 * stdev_ratio)
- question: Can an anomaly detection model identify protocol interactions indicative
    of a reflection attack?
  context: This question uses an unsupervised machine learning model to identify
    unusual behavior without pre-existing labels. By learning the normal profile
    of protocol interactions (based on query type, size, source ASN, etc.), an Isolation
    Forest or similar model can flag sessions that are strong outliers, which are
    likely to be malicious reconnaissance or attack traffic.
  answer_sources:
  - Zeek dns.log
  - Zeek ntp.log
  - Zeek datagram.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each new session:
        extract features (query_type, request_size, source_ASN)
        score_session with anomaly_detection_model
        if score indicates outlier:
          generate alert
- question: Has the inbound traffic volume on critical UDP service ports breached
    a predefined static threshold?
  context: This question provides a simple, fail-safe detection mechanism. While
    statistical and ML models are more sophisticated, a static threshold (e.g., 1
    Gbps) serves as a critical, last-line-of-defense alert. If this threshold is
    breached, it indicates a significant volumetric event that requires immediate
    attention, regardless of what more complex models might indicate.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      monitor traffic_volume on ports (53, 123, 11211)
      if traffic_volume > 1_Gbps:
        generate critical alert
- question: Is there a statistically significant deviation in inbound traffic volume
    compared to the historical baseline?
  context: This question uses a dynamic baseline to detect anomalous traffic volumes
    more effectively than a static threshold. By calculating a moving average and
    standard deviation over a 30-day period, this method can account for normal fluctuations
    (like time of day) and alert only when traffic exceeds a significant deviation
    (e.g., 4-sigma), indicating a probable DoS event.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      aggregate traffic_bytes, traffic_packets into 1_min_bins for ports (53, 123, 11211)
      calculate 30_day_moving_avg and stdev
      alert if current_bin > (moving_avg + 4 * stdev) for 2 consecutive bins
- question: Does the observed traffic volume significantly deviate from a time-series
    forecast?
  context: This question applies predictive analytics for early detection. A time-series
    model like ARIMA or Prophet can learn complex patterns, including daily and weekly
    seasonality. By forecasting the expected traffic volume, it can generate an alert
    when observed traffic deviates from the predicted range, often detecting an attack
    earlier than methods that rely on historical averages.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      forecast expected_traffic_volume and confidence_interval for next 15_mins
      if observed_traffic_volume > upper_bound(confidence_interval):
        generate alert
- question: Are we observing connections with amplification factors that exceed known
    malicious thresholds?
  context: This question uses domain knowledge about specific protocols to set hard
    limits on what is considered a normal amplification factor (response bytes /
    request bytes). For services like DNS or Memcached, amplification factors beyond
    a certain point (e.g., 500x) are almost certainly malicious. This symbolic rule
    provides a high-confidence alert for the most egregious amplification attempts.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search Zeek conn.log
      calculate amplification = response_bytes / request_bytes
      if (port == 53 and amplification > 500) or (port == 11211 and amplification > 10000):
        generate alert
- question: Are there new connections with an amplification factor that is a statistical
    outlier?
  context: This question identifies anomalous amplification factors without relying
    on predefined thresholds. By maintaining a historical distribution of amplification
    factors for each service, it can flag any new connection where the factor is
    an extreme outlier (e.g., in the 99.9th percentile). This allows for the detection
    of novel or less common amplification techniques.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each connection on ports (53, 123, 11211):
        calculate amplification_factor
        alert if amplification_factor > 99.9th_percentile(historical_factors)
- question: Can a clustering algorithm group new connections into a 'potential reflection
    attack' category?
  context: This question uses unsupervised machine learning to automatically group
    network connections based on their behavior. By clustering on features like amplification
    factor, duration, and packet count, the model can identify a distinct cluster
    that corresponds to reflection attack traffic. New connections assigned to this
    cluster can then be flagged for investigation.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each new connection:
        extract features (amplification_factor, duration, packet_count)
        assign connection to a cluster using clustering_model
        if cluster_label == 'potential_reflection_attack':
          generate alert
- question: Are an excessive number of unique source IPs from a single network block
    connecting to a service port?
  context: This question aims to detect a distributed attack, even a naive one, originating
    from a concentrated source like a single cloud provider or botnet segment. By
    setting a limit on the number of unique source IPs seen from a single /16 CIDR
    block within a short time frame, this rule can catch coordinated activity that
    might otherwise be missed.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search Zeek conn.log
      group by destination_port, source_ip_cidr_16
      count unique source_ip over 1_minute
      alert if unique_source_ip_count > 500
- question: Has the entropy of source IP addresses targeting a service port spiked
    concurrently with an increase in traffic volume?
  context: This question combines two key indicators of a Distributed Reflection
    DoS (DRDoS) attack. A spike in traffic volume indicates a volumetric event, while
    a concurrent spike in source IP entropy (a measure of randomness/diversity) indicates
    that the traffic is coming from a large number of different sources. The combination
    is a very strong signal of a distributed attack.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      in 1_min_windows for each service port:
        calculate shannon_entropy(source_ips)
        calculate total_traffic_volume
        alert if entropy > baseline_entropy_threshold and volume > baseline_volume_threshold
- question: Can an ensemble model combine multiple weak indicators to generate a high-confidence
    DRDoS alert?
  context: This question proposes the most advanced detection method, using an ensemble
    model (like XGBoost) to synthesize multiple, potentially weak, signals into a
    single, high-confidence alert. By weighing features like traffic volume, source
    IP entropy, and average amplification factor, the model can identify complex
    attack patterns and produce a risk score, allowing for more effective and prioritized
    alerting.
  answer_sources:
  - Zeek conn.log
  - Internet Gateway
  - DMZ Firewalls
  - Public-facing DNS/NTP/Memcached Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      in 1_min_windows:
        aggregate features (volume, entropy, avg_amplification_factor)
        calculate risk_score using ensemble_model
        if risk_score > alert_threshold:
          generate high_confidence_alert