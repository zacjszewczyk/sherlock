name: T1007: System Service Discovery
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps determine if an adversary is attempting to discover system services as part of internal reconnaissance. It focuses on identifying the execution of built-in service discovery utilities (sc.exe, net.exe, tasklist.exe) with suspicious arguments, anomalous parent processes (e.g., an Office application spawning sc.exe), the use of PowerShell or WMI to enumerate services, unusual spikes in the volume of discovery commands from a single host, and the chaining of service discovery with subsequent discovery or lateral movement techniques.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process executions of sc.exe, net.exe, or tasklist.exe using command-line arguments indicative of broad reconnaissance?
    context: |
      This question aims to identify the use of built-in Windows service discovery tools with command-line arguments that are highly characteristic of malicious reconnaissance rather than normal administrative activity. Adversaries often use specific flags to gather a comprehensive list of all running services (e.g., `sc query type= service state= all`), which is a common precursor to identifying high-value targets or misconfigurations. This symbolic approach relies on matching known suspicious command patterns.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Windows Endpoints and Servers, especially Domain Controllers and Application Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (EventID 4688)
          WHERE process_name IN ('sc.exe', 'net.exe', 'tasklist.exe')
          AND command_line CONTAINS ('query type= service state= all', 'net start', 'tasklist /svc >')
          RETURN hostname, timestamp, user, process_name, command_line
  - question: Have any hosts executed sc.exe, net.exe, or tasklist.exe with command-line arguments that are statistically rare for that host or its peer group?
    context: |
      This question seeks to uncover novel or unusual uses of service discovery utilities that may not match known malicious patterns. By establishing a baseline of "normal" command-line arguments for each host (or groups of similar hosts, like developer workstations), we can flag executions with rare argument combinations. An argument string that falls into the bottom 1% of historical usage frequency could represent an adversary's attempt to evade signature-based detections.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Windows Endpoints and Servers, especially Domain Controllers and Application Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            CALCULATE historical frequency of command-line arguments for ('sc.exe', 'net.exe', 'tasklist.exe') over the last 90 days.
            FOR each new execution:
              IF frequency of current_arguments < 1st_percentile_of_historical_frequencies:
                ALERT on rare command usage
  - question: Can machine learning models identify malicious executions of sc.exe, net.exe, or tasklist.exe based on command-line features?
    context: |
      This question explores a more advanced, adaptive approach to detection. A machine learning model, such as a logistic regression classifier, can be trained to distinguish between benign and malicious command-line executions. By analyzing features like command length, argument count, and character patterns (n-grams), the model can learn the subtle characteristics of malicious commands and score new, unseen events in real-time, providing a probabilistic assessment of risk.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All Windows Endpoints and Servers, especially Domain Controllers and Application Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process_creation_event for ('sc.exe', 'net.exe', 'tasklist.exe'):
            EXTRACT features (e.g., command_length, arg_count, n_grams)
            INPUT features into trained_logistic_regression_model
            IF model_output_score > alert_threshold:
              ALERT on high-probability malicious execution
  - question: Have service discovery utilities like sc.exe been spawned by unusual parent processes such as Office applications?
    context: |
      This question focuses on process lineage to find anomalies. Legitimate administrative use of service discovery tools typically originates from predictable parent processes like a command prompt (cmd.exe) or PowerShell. When a utility like `sc.exe` is spawned by a process like `winword.exe` or a web server worker process (`w3wp.exe`), it is a strong indicator of compromise, suggesting an attacker is executing commands through a malicious macro or a web shell.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Web Servers, and Application Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE allowlist_parents = ['cmd.exe', 'powershell.exe', 'explorer.exe']
          SEARCH process_creation_events (EventID 4688)
          WHERE process_name IN ('sc.exe', 'tasklist.exe', 'net.exe')
          AND parent_process_name NOT IN allowlist_parents
          RETURN hostname, timestamp, process_name, parent_process_name
  - question: Are there any statistically rare parent-child process relationships involving service discovery utilities?
    context: |
      This question moves beyond a static allowlist to a probabilistic approach. For every potential parent process, we can calculate the historical probability of it spawning a service discovery utility. An alert is triggered when a spawning event occurs that is extremely improbable based on the host's own history (e.g., the conditional probability is less than 0.001). This can uncover sophisticated attackers using legitimate but unusual processes to launch their tools.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Web Servers, and Application Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new parent-child process pair (parent, child):
            WHERE child IN ('sc.exe', 'tasklist.exe', 'net.exe')
            CALCULATE P(child | parent) based on historical data for that host.
            IF P(child | parent) < 0.001:
              ALERT on statistically rare parent-child relationship
  - question: Can graph-based anomaly detection identify unusual process lineage leading to the execution of service discovery tools?
    context: |
      This question applies machine learning to the entire process execution chain. By modeling all process creation events as a directed graph, we can train a model to understand the "normal" shape and structure of process trees within the environment. An execution of `sc.exe` that originates from a path in the graph that is highly unusual or has never been seen before would be flagged as an anomaly, catching complex execution chains that might bypass simpler rules.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Web Servers, and Application Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN a graph model of all parent-child process relationships.
          FOR each new process creation event (edge):
            SCORE the rarity of the edge within the graph structure.
            IF edge involves a service discovery utility AND has a high rarity score:
              ALERT on anomalous process lineage
  - question: Are there any PowerShell script blocks or WMI queries enumerating system services, possibly with obfuscation?
    context: |
      This question targets adversary tradecraft that moves beyond simple command-line utilities. Attackers frequently use PowerShell (`Get-Service`) or WMI (`Get-WmiObject Win32_Service`) for discovery because they are powerful, built-in, and can be easily obfuscated. This query involves searching PowerShell and WMI logs for specific keywords related to service enumeration, as well as common indicators of obfuscation like Base64 encoding or invocation expressions (`IEX`).
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 5861
      - All Windows Endpoints and Servers with PowerShell v5+ Script Block Logging and WMI Activity logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH powershell_script_block_logs (EventID 4104)
          WHERE script_block_text CONTAINS ('Get-Service', 'Get-WmiObject Win32_Service', 'gwmi Win32_Service')
          AND (script_block_text CONTAINS ('FromBase64String', 'IEX'))
          RETURN hostname, timestamp, script_block_text
  - question: Do any PowerShell script blocks containing service discovery keywords also exhibit high entropy, suggesting obfuscation?
    context: |
      This question provides a statistical method for detecting obfuscation without relying on specific keywords. Obfuscated code, due to compression or character randomization, often has a higher Shannon entropy than plain-text code. By establishing a baseline entropy for normal administrative scripts, we can create a rule that alerts on any script block that both contains service discovery keywords and has an abnormally high entropy score, indicating it is likely obfuscated to evade detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 5861
      - All Windows Endpoints and Servers with PowerShell v5+ Script Block Logging and WMI Activity logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new powershell_script_block_log (EventID 4104):
            IF script_block_text CONTAINS ('Get-Service', 'gwmi Win32_Service'):
              CALCULATE shannon_entropy of script_block_text.
              IF shannon_entropy > 95th_percentile_of_baseline:
                ALERT on probable obfuscated script
  - question: Can a text classification model distinguish between malicious and benign PowerShell scripts that perform service discovery?
    context: |
      This question applies machine learning to the content of PowerShell scripts. A model like a Naive Bayes classifier can be trained on a large dataset of labeled good and bad scripts. It learns to associate certain patterns, function calls, variable names, and structures (represented as TF-IDF vectors) with malicious intent. When a new script containing service discovery cmdlets is observed, the model can classify it as malicious or benign based on its overall composition, not just a few keywords.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Event ID 5861
      - All Windows Endpoints and Servers with PowerShell v5+ Script Block Logging and WMI Activity logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new powershell_script_block_log (EventID 4104):
            IF script_block_text CONTAINS ('Get-Service', 'gwmi Win32_Service'):
              INPUT script_block_text into trained_text_classification_model.
              IF model_classifies_as 'malicious':
                ALERT on malicious PowerShell script
  - question: Has any single host or user executed an unusually high number of service discovery commands in a short time frame?
    context: |
      This question aims to detect brute-force or scripted reconnaissance activity by looking at the volume of commands. While an administrator might run one or two service discovery commands, an adversary's script might run dozens in quick succession to enumerate services across many machines. A simple threshold rule, such as alerting when more than 10 discovery commands are seen from one host in a 5-minute window, is an effective way to catch this "low and slow" scanning behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Security Information and Event Management (SIEM) system or data lake containing aggregated endpoint logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE counts of service discovery commands by source_host over 5-minute windows.
          WHERE command_count > 10
          ALERT on unusual volume of discovery activity
  - question: Is there a statistically significant spike in the rate of service discovery commands from any host compared to its historical baseline?
    context: |
      This question enhances the volume-based approach with statistical rigor. Instead of a fixed threshold, this method establishes a dynamic baseline of normal activity (mean and standard deviation) for each host over a long period (e.g., 30 days). An alert is generated only when the number of discovery commands in a given time window exceeds a dynamic threshold (e.g., mean + 3 standard deviations), indicating a statistically significant deviation from that host's normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Security Information and Event Management (SIEM) system or data lake containing aggregated endpoint logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            CALCULATE mean (μ) and standard_deviation (σ) of discovery commands per 5-minute bin over last 30 days.
            FOR each new 5-minute bin:
              IF current_count > (μ + 3σ):
                ALERT on statistically significant spike
  - question: Can a time-series anomaly detection model identify abnormal bursts of service discovery activity that deviate from learned seasonal patterns?
    context: |
      This question uses advanced machine learning to model the temporal patterns of administrative activity. Legitimate service checks may happen at regular intervals (e.g., every morning, or weekly on Tuesdays). A time-series model can learn these daily and weekly seasonalities. The model can then flag any burst of service discovery commands that does not fit these learned patterns, effectively identifying activity that is abnormal in its timing, not just its volume.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Security Information and Event Management (SIEM) system or data lake containing aggregated endpoint logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            APPLY seasonal time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to the stream of discovery command events.
            IF model flags a time point as anomalous:
              ALERT on deviation from normal activity rhythm
  - question: Is the execution of a service discovery command followed by other discovery or lateral movement activities from the same host within a short window?
    context: |
      This question focuses on the context of the attack lifecycle by correlating different ATT&CK techniques. A single service discovery command may be benign, but when it is immediately followed by network share discovery (T1018) or a remote service session (T1021.002) from the same host, it becomes highly suspicious. This rule connects the dots, creating a higher-fidelity alert by identifying a logical sequence of attacker behaviors.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Centralized log aggregation platform (SIEM/Data Lake) capable of correlating endpoint and network data.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE sequence_rule:
            EVENT A: T1007 (e.g., 'sc query') on host X
            FOLLOWED BY (within 30 mins)
            EVENT B: T1018 ('net view') or T1021.002 (outbound SMB to new host) from host X
          TRIGGER high-severity alert
  - question: Has a statistically improbable sequence of ATT&CK techniques, beginning with service discovery, been observed on any host?
    context: |
      This question uses probability to find unusual chains of events. By analyzing historical data, we can build a transition matrix that shows the probability of one ATT&CK technique following another. A sequence of events, such as T1007 (Service Discovery) -> T1018 (Remote System Discovery) -> T1021 (Remote Services), can be scored based on its joint probability. If this probability is extremely low based on past observations, it suggests an anomalous and potentially malicious chain of activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Centralized log aggregation platform (SIEM/Data Lake) capable of correlating endpoint and network data.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE historical transition matrix P(Technique_B | Technique_A) for all techniques.
          FOR each new observed sequence starting with T1007 (e.g., T1007 -> T1018 -> T1021):
            CALCULATE joint probability of the sequence.
            IF joint_probability < alert_threshold:
              ALERT on statistically rare technique sequence
  - question: Can a Hidden Markov Model identify a transition from a 'Discovery' state to a 'Lateral Movement' state based on the observed sequence of ATT&CK techniques?
    context: |
      This question uses a sophisticated machine learning model to infer attacker intent. A Hidden Markov Model (HMM) can be designed where the hidden states represent abstract goals like 'Reconnaissance', 'Execution', or 'Lateral Movement', and the observations are the concrete ATT&CK techniques detected. The model learns the likely transitions between these states. An alert is triggered when the model, given a sequence of observed techniques starting with T1007, determines with high probability that the attacker has transitioned from a 'Discovery' state to a 'Lateral Movement' state.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Centralized log aggregation platform (SIEM/Data Lake) capable of correlating endpoint and network data.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT sequence of observed ATT&CK techniques into a trained Hidden Markov Model.
          THE model's hidden states represent attacker intent (e.g., 'Discovery', 'Lateral Movement').
          IF model shows a high-probability transition from 'Discovery' state to 'Lateral Movement' state:
            ALERT on inferred malicious state transition