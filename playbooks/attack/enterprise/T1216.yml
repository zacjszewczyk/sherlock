name: 'T1216: System Script Proxy Execution'
id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
description: 'Investigates whether an adversary is attempting to evade defenses by using system script proxies. This is identified by monitoring for script proxy processes (like cscript.exe, pubprn.vbs) created with command lines containing indicators from threat intelligence feeds, matching known malicious regex patterns, creating anomalous child processes (e.g., cmd.exe, powershell.exe), initiating outbound network connections to rare or low-reputation destinations, or executing scripts from unusual file paths like temporary directories or user download folders.'
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
  - 'Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: 'Has a known script proxy process been executed with a command line containing an indicator (URL, IP, domain, hash) from a high-confidence threat intelligence feed?'
    context: 'This question aims to detect the most direct evidence of malicious activity. Adversaries often use script proxies to execute commands or download payloads, and the command line may contain indicators like C2 domains or payload hashes. Matching these against a reliable threat intelligence feed is a high-fidelity way to identify known threats.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Application Servers'
      - 'Jump Servers'
      - 'Domain Controllers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each process_creation_event (e.g., WinEvent 4688)
            IF process_name in [cscript.exe, wscript.exe, pubprn.vbs, mshta.exe, etc.]
              EXTRACT indicators (IPs, domains, hashes) from command_line
              FOR each indicator
                IF indicator in high_confidence_threat_intelligence_feed
                  ALERT
  - question: 'Is a script proxy process interacting with a domain or IP address that is statistically rare within the enterprise?'
    context: 'This question helps uncover unknown or novel threats that are not yet in threat intelligence feeds. Malicious domains and IPs are often new and used by a small number of victims, making them appear infrequently in an organization''s logs. Identifying script proxy executions involving these rare indicators can surface suspicious activity that would otherwise be missed.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Application Servers'
      - 'Jump Servers'
      - 'Domain Controllers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            EXTRACT domain/IP from command_line
            CALCULATE frequency of domain/IP in last 90 days across enterprise
            IF frequency < 5th_percentile
              ALERT
  - question: 'Does a machine learning model classify a script proxy execution as malicious based on its command-line features and context?'
    context: 'This question leverages machine learning to make a holistic judgment about a script proxy execution. By combining multiple features—such as the presence and type of IOCs, threat intelligence reputation, and user context—the model can identify complex patterns of maliciousness that are difficult to define with simple rules or statistical thresholds. This provides a more nuanced and potentially more accurate detection method.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Application Servers'
      - 'Jump Servers'
      - 'Domain Controllers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            BUILD feature_vector (has_ioc, ioc_type, ioc_reputation, script_name, user_context)
            PREDICT probability = classification_model(feature_vector)
            IF probability > 0.85
              ALERT
  - question: 'Did a script proxy process execute with a command-line structure that matches a known malicious regex pattern?'
    context: 'This question focuses on identifying specific, known-bad command-line patterns used by adversaries and their tools. For example, certain malware families use a consistent syntax for executing remote scripts via `pubprn.vbs`. Using regular expressions to match these signature patterns provides a high-confidence method for detecting the use of these specific techniques.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Application Servers'
      - 'systems enforcing Application Control (e.g., AppLocker)'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            IF command_line MATCHES malicious_regex_library
              ALERT
  - question: 'Was a script proxy executed with a command line that has an unusually high entropy score compared to the established baseline?'
    context: 'This question helps detect obfuscated commands. Adversaries often encode or randomize their scripts and command-line arguments to evade signature-based detection. These obfuscated strings typically have a higher Shannon entropy (a measure of randomness) than legitimate, human-readable commands. Flagging high-entropy command lines can reveal attempts at evasion.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Application Servers'
      - 'systems enforcing Application Control (e.g., AppLocker)'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            CALCULATE entropy of command_line_arguments
            IF entropy > 95th_percentile_baseline
              ALERT
  - question: 'Does a machine learning model classify a script proxy command line as malicious based on its structural and content-based features?'
    context: 'This question uses a machine learning approach to analyze the command line itself, without relying on external indicators. By training a model on features like command length, character distribution, argument count, and entropy, it can learn the subtle differences between benign and malicious command structures, enabling the detection of novel or obfuscated attack patterns.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Application Servers'
      - 'systems enforcing Application Control (e.g., AppLocker)'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            BUILD feature_vector (length, special_char_count, has_url, entropy, etc.)
            PREDICT classification = random_forest_model(feature_vector)
            IF classification == 'malicious'
              ALERT
  - question: 'Has a script proxy process spawned a child process that is not on the approved allow-list of legitimate child processes?'
    context: 'This question aims to detect when a script proxy is used to launch a subsequent malicious stage. Legitimate scripts typically have predictable process chains. An adversary using a script proxy to launch `powershell.exe`, `cmd.exe`, or an unknown/unsigned binary is a strong indicator of malicious intent. Maintaining an allow-list of normal behavior and alerting on deviations is an effective detection strategy.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Jump Servers'
      - 'Development/Test Environment Servers where scripting is common'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each process_creation_event
            IF parent_process is script_proxy
              AND child_process NOT IN allow_list
              ALERT
  - question: 'Has a script proxy process spawned a child process that is statistically rare for that specific host or its peer group?'
    context: 'This question provides a more dynamic alternative to a static allow-list by baselining normal parent-child process relationships on a per-host or per-group basis. A script proxy spawning a child process it has never spawned before on a particular server, or one that is rare across similar servers, is a significant anomaly that warrants investigation. This approach adapts to different system roles and environments.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Jump Servers'
      - 'Development/Test Environment Servers where scripting is common'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_parent_child_event on a host
            CALCULATE frequency of this parent-child_pair on this host/peer_group
            IF frequency < 1st_percentile
              ALERT
  - question: 'Has a host''s script proxy process behavior been flagged as an outlier by an unsupervised machine learning model?'
    context: 'This question uses unsupervised learning to automatically identify systems that are behaving differently from their peers. By clustering hosts based on their typical script proxy and child process behaviors, the model can detect when a single host deviates from its established group norm. This can indicate a compromise or other anomalous activity without prior knowledge of what "bad" looks like.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Jump Servers'
      - 'Development/Test Environment Servers where scripting is common'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each host
            BUILD feature_vector of script_proxy_process_behaviors
            RUN clustering_algorithm (e.g., DBSCAN) on all host feature_vectors
            IF host is classified as 'outlier'
              ALERT
  - question: 'Did a script proxy process or its child initiate a network connection to a known malicious C2 domain or IP address?'
    context: 'This question seeks to correlate process activity with network activity to find high-confidence indicators of compromise. By linking a script proxy execution to an outbound network connection and checking the destination against a C2 blocklist, analysts can directly confirm that the script is communicating with a malicious infrastructure.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Network Egress Points (Firewalls, Proxies)'
      - 'DNS Resolvers'
      - 'User Endpoints'
      - 'Internet-facing Servers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          CORRELATE process_events with network_events and dns_events
          FOR each network_connection from a script_proxy or its child
            IF destination_ip OR destination_domain in C2_blocklist
              ALERT
  - question: 'Did a script proxy process initiate a network connection to a destination FQDN or IP that is exceptionally rare for the enterprise?'
    context: 'This question aims to detect connections to novel or targeted C2 infrastructure by focusing on rarity. Most enterprise network traffic goes to a relatively small set of common domains. A script proxy connecting to a domain or IP that has been seen very rarely, or never before, across the entire organization is highly suspicious and could indicate a first-stage C2 channel.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Network Egress Points (Firewalls, Proxies)'
      - 'DNS Resolvers'
      - 'User Endpoints'
      - 'Internet-facing Servers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each network_connection from a script_proxy
            CALCULATE enterprise-wide frequency of destination_domain/IP
            IF frequency < 1st_percentile
              ALERT
  - question: 'Has a time series anomaly detection model detected a statistically significant spike in the volume or diversity of outbound connections from script proxy processes?'
    context: 'This question looks for changes in the overall pattern of network behavior related to script proxies. An adversary deploying a tool or starting a campaign might cause a sudden increase in the number of connections or a spike in connections to many new, unique destinations. A time series model can learn the normal "rhythm" of this traffic and automatically flag such anomalous deviations.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Network Egress Points (Firewalls, Proxies)'
      - 'DNS Resolvers'
      - 'User Endpoints'
      - 'Internet-facing Servers'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          AGGREGATE time_series_data (connection_count, unique_dest_count) from script_proxies
          APPLY anomaly_detection_model to time_series_data
          IF anomaly_detected (e.g., significant spike)
            ALERT
  - question: 'Has a script proxy process executed a script from a known high-risk directory like a temp folder, user downloads folder, or world-writable location?'
    context: 'This question focuses on the location of the executed script. Adversaries frequently drop their script payloads into non-standard, often user-writable, locations to bypass protections and hide from administrators. Executing scripts from directories like `%TEMP%`, `%APPDATA%`, or `C:\Users\Public\` is abnormal for legitimate software and is a strong signal of malicious activity.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Multi-user Servers (e.g., Citrix, RDS)'
      - 'Network File Shares'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            EXTRACT script_path from command_line
            IF script_path IN high_risk_directory_list
              ALERT
  - question: 'Is a script proxy executing a script from a path that has unusually high entropy or is located in a directory that is rarely used across the enterprise?'
    context: 'This question uses statistical properties of the file path to find suspicious executions. Adversaries may use randomized directory or file names to avoid signature-based blocking, which results in high-entropy paths. Similarly, dropping a script into a rarely used directory can be an attempt at "hiding in plain sight." Combining these two statistical measures—path entropy and directory rarity—can effectively surface these evasion techniques.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Multi-user Servers (e.g., Citrix, RDS)'
      - 'Network File Shares'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            EXTRACT script_path
            CALCULATE path_entropy and parent_directory_frequency
            IF path_entropy > 95th_percentile OR parent_directory_frequency < 5th_percentile
              ALERT
  - question: 'Has a one-class SVM model, trained on legitimate script paths, classified a new script execution path as an anomaly?'
    context: 'This question uses an anomaly detection model to learn what "normal" script execution paths look like. By training on features of legitimate paths (e.g., path depth, directory names, file extension), a one-class SVM can create a boundary of normal behavior. Any new execution whose path falls outside this boundary is flagged as anomalous, allowing for the detection of novel or unusual TTPs without needing pre-labeled malicious examples.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User Endpoints'
      - 'Multi-user Servers (e.g., Citrix, RDS)'
      - 'Network File Shares'
    range: 'last 90 days'
    queries:
      - technology: 'pseudocode'
        query: |
          FOR each script_proxy_execution_event
            EXTRACT script_path
            BUILD feature_vector from path (depth, tokens, extension)
            PREDICT classification = one_class_svm_model(feature_vector)
            IF classification == 'anomaly'
              ALERT