name: T1071: Application Layer Protocol
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps to determine if an adversary has established command and control using a common application layer protocol (like HTTP, DNS, TLS) to blend in with normal network traffic. It focuses on identifying C2 activity by analyzing network connections for several key indicators: connections to known malicious infrastructure from CTI feeds; traffic containing signatures of C2 frameworks (e.g., specific User-Agents, JA3 hashes); automated beaconing patterns characterized by regular intervals and consistent data sizes; network activity from unusual processes; DNS queries exhibiting signs of tunneling or DGA; abnormal data transfer ratios (e.g., large uploads over HTTP); and the use of standard protocols on non-standard ports.
type: technique
related:
- TA0011: Command And Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any internal hosts communicated with destination IPs, domains, or TLS server names known to be malicious C2 infrastructure?
  context: This question aims to detect direct communication with known adversary command and control servers. By correlating network logs (connection, DNS, and SSL/TLS) with high-confidence Cyber Threat Intelligence (CTI) feeds, we can identify compromised systems that are actively communicating with malicious infrastructure. A match provides a strong signal of a potential breach and warrants immediate investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Egress points (e.g., firewalls, web proxies), DNS resolvers, Core network switches
  range: last 90 days
  queries:
  - pseudocode: SEARCH network logs (conn, dns, ssl) for destination IPs, domains, or server names that MATCH entries in CTI feed of known C2 infrastructure.
- question: Which internal hosts are most frequently or broadly communicating with known C2 indicators, and should be prioritized for investigation?
  context: After identifying hosts communicating with known C2 infrastructure, it's crucial to prioritize the response. This question focuses on risk-stacking by analyzing the frequency and breadth of these communications. Hosts that connect to multiple different C2 indicators or exhibit an unusually high frequency of connections to a single indicator are more likely to be under active adversary control and represent a higher risk.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Egress points (e.g., firewalls, web proxies), DNS resolvers, Core network switches
  range: last 90 days
  queries:
  - pseudocode: GIVEN CTI matches, GROUP by internal host and COUNT distinct C2 indicators and total connections over 24 hours. FILTER for hosts with multiple C2s or connection frequency > 95th percentile for that host.
- question: Can we automate the prioritization of CTI-based alerts to reduce analyst fatigue and focus on the most critical threats?
  context: CTI feeds can generate a high volume of alerts, not all of which represent a true positive or an immediate threat. This question explores using machine learning to automatically score and rank alerts. By training a model on features like CTI source reputation, indicator age, and historical alert accuracy within the environment, we can more intelligently surface the most credible and high-risk C2 communications for analyst review.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Egress points (e.g., firewalls, web proxies), DNS resolvers, Core network switches
  range: last 90 days
  queries:
  - pseudocode: TRAIN a classification model with features (CTI source, indicator age, historical true positive rate). APPLY model to new CTI-matched events to generate a priority score.
- question: Is there any outbound HTTP/S traffic containing User-Agent strings, URI patterns, or JA3/JA3S hashes that match signatures of known C2 frameworks?
  context: This question aims to identify C2 frameworks like Cobalt Strike or Metasploit by their unique network signatures. Malware often uses hardcoded User-Agents or URI patterns for C2 communication. Similarly, the TLS client library used by malware produces a unique JA3/JA3S hash. Matching these artifacts in HTTP and SSL logs against a database of known C2 framework signatures can reveal compromised systems.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Web proxies, Egress points, Endpoints generating web traffic, Application delivery controllers
  range: last 90 days
  queries:
  - pseudocode: SEARCH http logs for user_agents and URIs matching known C2 signatures. SEARCH ssl logs for JA3/JA3S hashes matching known C2 fingerprints.
- question: Are there any rare User-Agents or JA3 hashes in the environment that could indicate the presence of unauthorized or malicious software?
  context: Beyond known signatures, this question seeks to find novel or unknown C2 tools by hunting for statistical anomalies. Legitimate applications are typically deployed across many hosts, resulting in common User-Agents and JA3 hashes. A User-Agent or JA3 hash that appears on only a handful of systems (e.g., less than 0.1% of the fleet) is highly suspicious and could represent a C2 implant that warrants investigation.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Web proxies, Egress points, Endpoints generating web traffic, Application delivery controllers
  range: last 90 days
  queries:
  - pseudocode: CALCULATE prevalence of all user_agents and JA3 hashes over 30 days. FILTER for values with prevalence < 0.1% of total hosts.
- question: Can we identify groups of clients with anomalous TLS configurations that may represent a novel C2 implant?
  context: This question uses unsupervised machine learning to find 'unknown unknowns'. By clustering all JA3 hashes observed in the environment, we can group clients that use similar TLS software. Most clients will fall into large clusters representing common browsers or operating systems. Small, isolated clusters or outlier points represent hosts with unique TLS configurations, which could be indicative of a custom C2 tool not yet part of any signature database.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Web proxies, Egress points, Endpoints generating web traffic, Application delivery controllers
  range: last 90 days
  queries:
  - pseudocode: APPLY a clustering algorithm (e.g., DBSCAN) to all JA3 hashes from SSL logs. INVESTIGATE small clusters and outlier points as potential non-standard clients.
- question: Has any internal host established an unusually high number of connections to a single external destination, potentially indicating C2 activity?
  context: This question is a simple, rule-based approach to detecting potential C2 beaconing. While not as precise as statistical methods, a high volume of connections from one host to a single external IP, especially to an un-categorized or low-reputation destination, is abnormal and can be an early indicator of a C2 channel. This serves as a broad net to catch unsophisticated beaconing behavior.
  answer_sources:
  - Zeek conn.log
  - Egress points (e.g., firewalls), Network taps monitoring internal subnets, Core network switches
  range: last 90 days
  queries:
  - pseudocode: SEARCH connection logs for internal hosts with > 100 connections to a single external IP on the same port within a 24-hour period.
- question: Are there any network connections exhibiting highly regular time intervals and consistent data sizes, which are strong indicators of automated C2 beaconing?
  context: This question aims to statistically identify the 'heartbeat' of a C2 implant. Automated malware beacons are characterized by very low 'jitter' (variance in time between connections) and consistent payload sizes. By calculating the standard deviation of both the time deltas between connections and the total bytes transferred for a given source-destination pair, we can precisely identify this machine-like pattern, distinguishing it from human-generated traffic.
  answer_sources:
  - Zeek conn.log
  - Egress points (e.g., firewalls), Network taps monitoring internal subnets, Core network switches
  range: last 90 days
  queries:
  - pseudocode: FOR each source-destination pair, CALCULATE standard deviation of time deltas between connections and standard deviation of connection bytes. FLAG pairs with very low standard deviation in both metrics.
- question: Can we use time series analysis to detect periodic C2 beaconing, even if it includes jitter or other evasive techniques?
  context: This question applies more advanced analytics to find sophisticated beaconing. Adversaries may introduce random jitter to evade simple statistical checks. Time series analysis models (like ARIMA or STL) can decompose a connection history into its trend, seasonal (periodic), and residual components. The presence of a strong, repeating seasonal component, even with noise, is a powerful signal of automated C2 activity.
  answer_sources:
  - Zeek conn.log
  - Egress points (e.g., firewalls), Network taps monitoring internal subnets, Core network switches
  range: last 90 days
  queries:
  - pseudocode: APPLY time series decomposition model to connection timestamps for high-volume host-destination pairs. FLAG pairs with a strong periodic component.
- question: Has a process that typically does not initiate network traffic (e.g., calc.exe, notepad.exe) or is running from a non-standard path made an outbound connection?
  context: This question seeks to identify malware masquerading as a legitimate process or being injected into one. By creating a watchlist of processes that have no business making network connections (like system utilities) or processes running from unusual locations (like a user's temp folder), we can alert when they are observed making outbound calls. This requires correlating process execution events with network connection events on the endpoint.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - User workstations, Application servers, Domain Controllers, High-value asset servers
  range: last 90 days
  queries:
  - pseudocode: CORRELATE process creation events with network connection events. ALERT if a process on a 'no-network' watchlist or from a non-standard path initiates a network connection.
- question: Has any process made a network connection to a destination port that is unusual for that specific process?
  context: This question establishes a behavioral baseline to find anomalies. Most legitimate applications communicate over a predictable set of destination ports. By profiling all (Process, Port) combinations over time, we can identify new or statistically rare pairs. For example, if svchost.exe suddenly starts communicating over port 8080 for the first time in the environment, it is highly suspicious and warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - User workstations, Application servers, Domain Controllers, High-value asset servers
  range: last 90 days
  queries:
  - pseudocode: CREATE baseline of (ProcessName, DestinationPort) frequency over 30 days. FLAG any new or rare tuples that fall below a frequency threshold.
- question: Can we use machine learning to detect anomalous process-level network events that might indicate C2 activity?
  context: This question uses an anomaly detection model to find suspicious process network behavior without relying on pre-defined rules. By training a model like an Isolation Forest on features of legitimate events (process path, parent process, user context, port), it learns what 'normal' looks like. The model can then score new events in real-time, flagging significant outliers that deviate from this learned baseline, which are strong candidates for malicious C2 activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - User workstations, Application servers, Domain Controllers, High-value asset servers
  range: last 90 days
  queries:
  - pseudocode: TRAIN an Isolation Forest model on features from legitimate process network events. APPLY the model to score new events and investigate high-scoring outliers.
- question: Are there any DNS queries matching known DGA patterns, CTI feeds, or containing encoded data in subdomains?
  context: This question focuses on detecting DNS-based C2 using signature-based methods. It involves searching for DNS queries that match known patterns of Domain Generation Algorithms (DGAs), are listed on CTI feeds of malicious domains, or show clear signs of data encoding (like Base64 or hex) within the subdomains, which is a common technique for DNS tunneling.
  answer_sources:
  - Zeek dns.log
  - Internal DNS resolvers, Domain Controllers, Egress points monitoring DNS traffic
  range: last 90 days
  queries:
  - pseudocode: SEARCH dns logs for queries matching DGA regex, CTI feeds, or containing Base64/hex patterns in subdomains.
- question: Are there any DNS queries with high entropy, or is any host exhibiting an anomalous ratio of query types (e.g., TXT vs A), suggesting DGA or DNS tunneling?
  context: This question uses statistical properties of DNS traffic to find C2. DGA-generated domains are often random-looking and have high Shannon entropy. Separately, C2 that uses DNS for data exfiltration often abuses TXT or NULL records. By calculating the entropy of domain names and monitoring the ratio of query types per host, we can spot statistical anomalies indicative of malicious DNS usage.
  answer_sources:
  - Zeek dns.log
  - Internal DNS resolvers, Domain Controllers, Egress points monitoring DNS traffic
  range: last 90 days
  queries:
  - pseudocode: CALCULATE Shannon entropy for all DNS queries and flag high-entropy results. FOR each host, track the ratio of query types (TXT/A) and flag sudden spikes in TXT queries.
- question: Can a machine learning model be trained to automatically classify DNS queries as benign or malicious in real time?
  context: This question proposes a machine learning solution for robustly identifying malicious DNS traffic. By extracting a rich set of features from DNS queries (e.g., length, entropy, character ratios, query type), a classifier like a Random Forest can be trained to distinguish between benign queries and those used for DGA or tunneling. This provides a more resilient detection capability than static rules or simple statistical thresholds.
  answer_sources:
  - Zeek dns.log
  - Internal DNS resolvers, Domain Controllers, Egress points monitoring DNS traffic
  range: last 90 days
  queries:
  - pseudocode: TRAIN a Random Forest classifier on labeled DNS query data using features like length, entropy, and character ratios. USE the model to classify new queries.
- question: Are there any connections exhibiting obviously abnormal data transfer patterns, such as large DNS queries or HTTP POSTs to raw IP addresses?
  context: This question uses simple, high-confidence rules to detect anomalous data transfers. A DNS query should never be large, so a request exceeding the typical 512-byte limit is highly suspicious. Similarly, legitimate web traffic usually involves POSTing data to a fully qualified domain name (FQDN), not a raw IP address. These simple checks can catch unsophisticated C2 data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Egress points (e.g., firewalls, web proxies), Core network switches, Network taps
  range: last 90 days
  queries:
  - pseudocode: SEARCH connection logs for DNS queries with sent bytes > 512. SEARCH http logs for POST requests to a destination IP address instead of a domain name.
- question: Are there any connections where the ratio of uploaded to downloaded data is a statistical outlier compared to the normal baseline for that protocol?
  context: This question seeks to find C2 exfiltration by looking for inverted traffic ratios. For most client-server protocols like HTTP/S, clients download far more data than they upload. By establishing a baseline for the normal ratio of sent-to-received bytes for each service, we can use statistical methods (like Z-score) to flag connections that deviate significantly. A large upload from a client over HTTP is a strong sign of data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Egress points (e.g., firewalls, web proxies), Core network switches, Network taps
  range: last 90 days
  queries:
  - pseudocode: FOR each service (http, ssl, etc.), calculate a baseline for the ratio of (sent_bytes / received_bytes). FLAG connections where this ratio is a statistical outlier (e.g., Z-score > 3).
- question: Can we use unsupervised clustering to automatically identify anomalous connections that do not fit into patterns of normal network behavior?
  context: This question uses clustering to find 'weird' connections without pre-defining what 'weird' is. By feeding connection features (bytes sent, bytes received, duration, protocol, service) into an algorithm like DBSCAN, we can automatically group connections into clusters of 'normal' activity (e.g., web browsing, DNS lookups). Any connection that doesn't fit into these clusters is flagged as an outlier and represents a potentially malicious anomaly, such as C2, worth investigating.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Egress points (e.g., firewalls, web proxies), Core network switches, Network taps
  range: last 90 days
  queries:
  - pseudocode: APPLY DBSCAN clustering to connection features (sent_bytes, received_bytes, duration, etc.). INVESTIGATE outlier connections that do not belong to any major cluster.
- question: Are there any connections using a standard application protocol (like HTTP, SSL, DNS) over a non-standard port, or are there any protocol violation notices being generated?
  context: This question aims to find adversaries hiding C2 traffic by running a common service on an uncommon port to evade port-based firewall rules. By comparing the protocol identified by deep packet inspection (e.g., Zeek's `service` field) with the actual port number used, we can detect these mismatches. Additionally, protocol violation notices can indicate that one protocol is being tunneled over another, which is a common C2 technique.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Egress points (e.g., firewalls), Core network switches, Application servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH connection logs where the identified service (e.g., 'http') does not match the standard port (e.g., 80, 8080). SEARCH notice logs for protocol violation alerts.
- question: Are there any service-and-port combinations occurring in the network that are statistically rare for the enterprise?
  context: This question hunts for C2 on non-standard ports by baselining all observed (service, port) pairings. While some applications might legitimately use non-standard ports, these are typically consistent across an organization. A (service, port) pair that is extremely rare or has never been seen before is a strong candidate for a covert C2 channel and should be investigated.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Egress points (e.g., firewalls), Core network switches, Application servers
  range: last 90 days
  queries:
  - pseudocode: CREATE a baseline of (service, port) tuple frequency over 30 days. FLAG any new or rare tuples that fall below a low prevalence threshold.
- question: Can an anomaly detection model identify suspicious connections based on their configuration features, such as port, protocol, and service?
  context: This question applies machine learning to find C2 using non-standard configurations. An Isolation Forest model can be trained on features of legitimate connections (port, protocol, service, duration, etc.) to learn a profile of 'normal'. The model can then score new connections, and those that are flagged as anomalies likely represent non-standard C2 channels that deviate from the established communication patterns in the environment.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Egress points (e.g., firewalls), Core network switches, Application servers
  range: last 90 days
  queries:
  - pseudocode: TRAIN an Isolation Forest model on connection features (port, protocol, service, etc.). USE the model to score new connections and investigate high-scoring anomalies.