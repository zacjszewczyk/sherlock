name: T1134.005: SID-History Injection
id: 3f9a1b8c-5e2d-4f6a-8b1c-9d0e1f2a3b4c
description: This playbook helps detect adversarial use of SID-History Injection (T1134.005) for privilege escalation and defense evasion. It focuses on identifying the use of specific injection tools (e.g., mimikatz), analyzing anomalous modifications to the sIDHistory Active Directory attribute, correlating these changes with subsequent suspicious logon and resource access events, and performing regular audits to find undocumented or unauthorized SID-History values. The goal is to uncover attempts by an adversary to illegitimately gain the rights and permissions of another user or group to access resources and escalate privileges within a domain.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any known SID-History injection tools (like mimikatz) been executed on Domain Controllers?
    context: This question aims to detect the direct execution of malicious tools used for SID-History injection. Adversaries often use well-known utilities with specific command-line flags (`sid::add`, `sid::patch`) to manipulate SIDs. Alerting on these specific patterns in process creation events (Windows Event ID 4688) provides a high-fidelity signal of an active attack attempt.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_events WHERE (device_is_domain_controller AND command_line CONTAINS ('sid::add' OR 'sid::patch' OR 'Invoke-SIDHistory' OR 'Add-DomainObjectSidHistory' OR 'lsadump::dcsync /user:victim /patch_sid'))
  - question: Are there any unusually complex or obfuscated command-line executions on Domain Controllers that could indicate a hidden SID-History injection attempt?
    context: Adversaries may obfuscate or encode their commands to evade simple signature-based detection. High Shannon entropy in a command-line string suggests a high degree of randomness, which is characteristic of encoded payloads or complex, non-standard commands. By baselining normal command-line entropy and alerting on significant deviations, we can uncover attempts to hide malicious tool usage.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CALCULATE entropy(command_line) for process_creation_events WHERE device_is_domain_controller | ALERT if entropy > 98th_percentile_baseline
  - question: Can machine learning models identify process creation events on Domain Controllers that are likely malicious but don't match known signatures?
    context: This question leverages a more advanced, behavioral approach. A supervised machine learning model can learn the subtle characteristics that differentiate malicious command-line usage from benign administrative activity. This allows for the detection of novel or slightly modified attack tools that might otherwise be missed by static rules or entropy analysis alone.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SCORE process_creation_events on domain_controllers using classification_model | ALERT if score > high_probability_threshold
  - question: Has the sIDHistory attribute of any account been modified to include a well-known privileged SID or a SID from the same domain?
    context: This is a direct indicator of abuse. Legitimate sIDHistory modifications occur during inter-domain migrations, meaning the added SID should come from a different domain. Adding a privileged SID (like Domain Admins) or a SID from the same domain is a classic technique to illegitimately escalate privileges. Monitoring for these specific conditions in Directory Service Change events (Windows Event ID 5136) is critical.
    answer_sources:
      - Windows Event ID 5136
      - Zeek ldap.log
      - Domain Controllers
      - Network segments containing LDAP traffic to Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH directory_service_changes (EventID 5136) WHERE (attribute == 'sIDHistory' AND (new_value CONTAINS 'S-1-5-domain-512' OR new_value CONTAINS 'S-1-5-domain-519' OR domain(new_value) == domain(target_account_sid)))
  - question: Have any user accounts experienced an unusually high frequency of sIDHistory modifications?
    context: Legitimate sIDHistory modifications are rare, typically happening once per user during a migration. Multiple modifications in a short period for a single account, or a modification rate that deviates significantly from the norm, is highly suspicious. This could indicate an attacker making multiple attempts or injecting several SIDs to gain different sets of permissions.
    answer_sources:
      - Windows Event ID 5136
      - Zeek ldap.log
      - Domain Controllers
      - Network segments containing LDAP traffic to Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: COUNT sIDHistory_modifications (EventID 5136) by user over 24_hours | ALERT if count > 1 OR count > 99th_percentile_baseline
  - question: Are there any sIDHistory modifications occurring under anomalous circumstances (e.g., unusual source IP, time of day)?
    context: This question seeks to identify attacks by looking at the context surrounding the modification event, not just the event itself. An unsupervised model can learn what 'normal' migration activity looks like (e.g., performed by specific admin accounts from specific subnets during business hours). It can then flag modifications that deviate from this pattern, such as one initiated from an unexpected country or at 3 AM on a Sunday, as potential threats.
    answer_sources:
      - Windows Event ID 5136
      - Zeek ldap.log
      - Domain Controllers
      - Network segments containing LDAP traffic to Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SCORE sIDHistory_modification_events using anomaly_detection_model on features(source_ip, source_account, time) | ALERT on anomalous_scores
  - question: Has an account logged into a critical system for the first time shortly after its sIDHistory was modified?
    context: This is a powerful correlation that links the setup (SID injection) to the payoff (privileged access). An attacker injects a SID to gain access they didn't have before. Therefore, observing an sIDHistory modification followed closely by a logon to a high-value asset (like a Domain Controller) where that user has never logged on before is a strong signal of privilege escalation in action.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - Domain Controllers
      - Critical servers (e.g., database servers, application servers)
      - SIEM/Log Aggregator
    range: last 30 minutes
    queries:
      - technology: Pseudocode
        query: CORRELATE sIDHistory_modification(user) with successful_logon(user) to critical_asset within 30_minutes | ALERT if logon is first_time_for_user_on_asset AND user not on allow_list
  - question: After an sIDHistory modification, did the user log on to a host that is rare for them?
    context: This question operationalizes the concept of 'unusual access' by quantifying it. Instead of just looking at first-time logons to critical systems, this approach scores all subsequent logons by their historical rarity. A logon to any host that the user rarely or never accesses, immediately after an sIDHistory change, is suspicious and warrants investigation.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - Domain Controllers
      - Critical servers (e.g., database servers, application servers)
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON sIDHistory_modification(user), MONITOR subsequent logons(user) | CALCULATE rarity_score(logon.host) based on user's logon_history | ALERT on high_rarity_score
  - question: Has a user exhibited the specific attack sequence of sIDHistory modification, followed by a logon to a new critical asset, and then execution of a privileged command?
    context: This advances simple correlation by looking for a full attack chain. By modeling typical user behavior sequences, a machine learning model can identify the specific, high-risk sequence of 'SID injection -> access -> action' as a severe anomaly. This provides a very high-fidelity alert that captures the entire local attack lifecycle.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - Domain Controllers
      - Critical servers (e.g., database servers, application servers)
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ANALYZE user_activity_sequences using sequence_model | ALERT on sequence('sIDHistory_mod' -> 'logon_to_new_critical_asset' -> 'privileged_cmd_execution')
  - question: Has there been a bulk modification of sIDHistory attributes in a short period of time?
    context: While a single sIDHistory modification can be an attack, a sudden burst of them is highly abnormal and could indicate a large-scale or automated attack. A simple threshold rule can catch this brute-force activity, which would stand out against the typical background rate of near-zero modifications.
    answer_sources:
      - Windows Event ID 5136
      - Domain Controllers
      - SIEM/Log Aggregator
    range: last 1 hour
    queries:
      - technology: Pseudocode
        query: COUNT sIDHistory_modifications (EventID 5136) over 1_hour | ALERT if count > 5
  - question: Is the current rate of sIDHistory modifications statistically unusual compared to its recent history?
    context: This is a more dynamic version of the fixed threshold. Instead of a static number, it uses a moving average and standard deviation to define 'normal.' This approach adapts to changing baselines and is better at detecting spikes that are significant relative to the recent activity level, reducing false positives.
    answer_sources:
      - Windows Event ID 5136
      - Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CALCULATE moving_average and std_dev for sIDHistory_modification_counts per hour | ALERT if current_count > (moving_average + 3 * std_dev)
  - question: Does the volume of sIDHistory modifications show a statistically significant spike when accounting for long-term trends and seasonality?
    context: This is the most sophisticated volume-based detection method. Advanced time-series algorithms can decompose the event data into trend, seasonality, and remainder components. By flagging anomalies in the remainder, this method can identify unusual spikes while effectively ignoring predictable, benign fluctuations.
    answer_sources:
      - Windows Event ID 5136
      - Domain Controllers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: APPLY time_series_anomaly_detection to sIDHistory_modification_counts | ALERT on statistically_significant_spikes
  - question: Was an sIDHistory modification performed by an unauthorized user or from an unauthorized system?
    context: Legitimate domain migration tasks are typically performed by a small, designated set of administrative accounts from specific, secured workstations. This question aims to enforce that policy by checking every sIDHistory modification against an allow-list of approved users and source systems. Any modification from an entity not on this list is, by definition, unauthorized and highly suspicious.
    answer_sources:
      - Windows Event ID 5136
      - Zeek ldap.log
      - Windows Event ID 4624
      - Domain Controllers
      - Administrative workstations
      - Network segments with LDAP traffic
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH sIDHistory_modifications | JOIN with logon_events to get source_ip | ALERT if (source_user NOT IN admin_allow_list OR source_ip NOT IN admin_ip_allow_list)
  - question: Was an sIDHistory modification performed by a user/system combination that rarely or never performs this action?
    context: This question provides a data-driven alternative to a static allow-list. It baselines which accounts and IPs normally perform sIDHistory modifications. An event triggered by an account-IP pair that has never, or very rarely, been seen performing this action before is a strong anomaly. This can catch a compromised admin account being used from an unusual location.
    answer_sources:
      - Windows Event ID 5136
      - Zeek ldap.log
      - Windows Event ID 4624
      - Domain Controllers
      - Administrative workstations
      - Network segments with LDAP traffic
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR EACH sIDHistory_modification, CALCULATE historical_frequency(source_user, source_ip) for this action | ALERT if frequency is in the 1st_percentile (very rare)
  - question: Did an sIDHistory modification event exhibit characteristics that differ from the profile of normal, legitimate modifications?
    context: This uses an unsupervised machine learning model to create a multi-dimensional profile of 'normal' sIDHistory modification activity. The model then flags any new event that doesn't fit this learned profile, which is effective at detecting novel evasion techniques where the attacker uses a combination of attributes that has never been seen before.
    answer_sources:
      - Windows Event ID 5136
      - Zeek ldap.log
      - Windows Event ID 4624
      - Domain Controllers
      - Administrative workstations
      - Network segments with LDAP traffic
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SCORE sIDHistory_modification_events using One_Class_SVM_model | ALERT if event is flagged as an outlier/anomaly
  - question: Has the sIDHistory attribute been modified for a dormant or service account that is not part of a planned migration?
    context: Adversaries often target dormant or service accounts because their activity is not closely monitored. This question specifically looks for this tactic by cross-referencing the target account of an sIDHistory modification with lists of known dormant and service accounts, flagging any unauthorized changes.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - PowerShell Get-ADUser output
      - Domain Controllers
      - Active Directory User and Computer Objects
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON sIDHistory_modification(target_user), CHECK if target_user IN (dormant_accounts_list OR service_accounts_list) AND NOT IN approved_change_list | ALERT if true
  - question: Was the sIDHistory of one of the most dormant accounts in the environment recently modified?
    context: This is a statistical approach to identifying modifications on dormant accounts. Instead of a fixed 90-day threshold, it identifies the accounts that are most dormant relative to the entire organization. Flagging modifications on accounts in the top percentile of dormancy focuses analyst attention on the highest-risk events.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - PowerShell Get-ADUser output
      - Domain Controllers
      - Active Directory User and Computer Objects
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON sIDHistory_modification(target_user), GET days_since_last_logon for target_user | ALERT if days_since_last_logon > 95th_percentile_of_all_users
  - question: Has an account whose behavior profile clusters with 'dormant' or 'service' accounts suddenly had its sIDHistory modified?
    context: This question uses machine learning to automatically categorize accounts based on their behavior. K-Means clustering can group accounts into profiles like 'normal user,' 'admin,' 'service account,' or 'dormant.' An sIDHistory modification is a major anomaly for a 'dormant' or 'service account' cluster, indicating a likely compromise.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - PowerShell Get-ADUser output
      - Domain Controllers
      - Active Directory User and Computer Objects
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CLUSTER user_accounts by activity_patterns | ON sIDHistory_modification(target_user), GET user_cluster | ALERT if cluster is 'dormant' or 'service_account'
  - question: Has a user with an injected SID performed a privileged action that their explicit group memberships do not grant them?
    context: This question seeks to find the 'smoking gun' of SID-History abuse. It requires correlating a privileged action with the actor's AD group memberships and sIDHistory status. If an account performs an admin-level action but isn't in an admin group, and their sIDHistory is populated, it's definitive proof that the injected SID was used to evade permission controls.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4728
      - Windows Event ID 4732
      - Domain Controllers
      - Member Servers
      - Active Directory Group Objects
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON privileged_action(user, action), GET user.group_memberships and user.sIDHistory_populated | CHECK if action is authorized by group_memberships | ALERT if (authorized == false AND sIDHistory_populated == true)
  - question: Has a user with a populated sIDHistory performed an action that is anomalous for them and their peers?
    context: User and Entity Behavior Analytics (UEBA) systems automatically learn what is 'normal' for each user and their peers. When a user with a known sIDHistory modification performs an action that is rare for them and their peers, the UEBA system flags it as a high-risk deviation, pointing to abuse of the injected privileges.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4728
      - Windows Event ID 4732
      - Domain Controllers
      - Member Servers
      - Active Directory Group Objects
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MONITOR actions by users with populated_sIDHistory | ALERT if UEBA_system flags an action as anomalous for user and peer_group
  - question: Can a graph-based model detect when a user leverages an implicit permission from an injected SID to access a resource that is 'far away' in the access control graph?
    context: This approach views Active Directory and permissions as a graph. An injected SID creates a new, implicit permission 'edge.' A graph model can detect when a user traverses this implicit edge to perform an action that would otherwise be impossible or improbable based on their explicit permissions, flagging a sophisticated attack path.
    answer_sources:
      - Windows Event ID 5136
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4728
      - Windows Event ID 4732
      - Domain Controllers
      - Member Servers
      - Active Directory Group Objects
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL AD_permissions as a graph | ON user_action, CHECK path_in_graph | ALERT if path uses an 'implicit_edge' from sIDHistory and is topologically improbable
  - question: Are there currently any user accounts with undocumented sIDHistory attributes?
    context: This is a proactive, hygiene-focused question. By periodically scanning all AD user objects for populated sIDHistory attributes and comparing the findings against change management records, an organization can uncover dormant, unauthorized privilege escalations before they are abused.
    answer_sources:
      - PowerShell Get-ADUser output
      - Change Management Records
      - Domain Controllers
      - Active Directory Database (ntds.dit)
      - Change Management System/Ticketing System
    range: Current state
    queries:
      - technology: Pseudocode
        query: RUN weekly script: GET all users with non-null sIDHistory | COMPARE list with approved_migration_accounts_list | ALERT on discrepancies
  - question: Has the total number of accounts with populated sIDHistory attributes increased unexpectedly?
    context: This question provides a high-level, environmental view. A sudden, unplanned increase in the total number of accounts with injected SIDs is a strong indicator of a widespread campaign. Tracking this metric over time can reveal subtle but important shifts in the security posture of Active Directory.
    answer_sources:
      - PowerShell Get-ADUser output
      - Change Management Records
      - Domain Controllers
      - Active Directory Database (ntds.dit)
      - Change Management System/Ticketing System
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRACK count(users with non-null sIDHistory) over time | ALERT if count increases sharply without corresponding change_request
  - question: Can we automatically verify that every account with a populated sIDHistory attribute has a corresponding, approved change ticket?
    context: This automates the manual audit process. An NLP model can read and understand unstructured text in change management systems to extract key information. This structured output can then be programmatically compared against the live state of Active Directory, creating a continuous, automated control that flags any sIDHistory attribute that lacks proper documentation.
    answer_sources:
      - PowerShell Get-ADUser output
      - Change Management Records
      - Domain Controllers
      - Active Directory Database (ntds.dit)
      - Change Management System/Ticketing System
    range: Current state
    queries:
      - technology: Pseudocode
        query: PARSE change_tickets with NLP to get approved_sIDHistory_changes | SCRIPT: GET all users with non-null sIDHistory | COMPARE live_state with parsed_tickets | ALERT on discrepancies