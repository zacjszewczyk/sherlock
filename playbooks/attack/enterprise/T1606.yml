name: T1606: Forge Web Credentials
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Investigates whether an adversary is forging web credentials, such as SAML tokens or web cookies, to gain unauthorized access. This playbook provides guidance for detecting forged credentials by analyzing web session data for connections from known-malicious sources or with anomalous cookie structures; monitoring for processes and command-line arguments associated with credential theft tools; inspecting SAML assertions for invalid attributes or suspicious lifetimes; correlating Service Provider and Identity Provider logs to find logins without a corresponding IdP authentication; identifying session hijacking through behavioral inconsistencies like impossible travel; and flagging authenticated sessions that exhibit anomalous user activity.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are web sessions originating from known malicious IP addresses or containing known-bad cookie values?
    context: This question aims to detect credential forgery by checking for two clear indicators of compromise. The first is whether a session's source IP is on a threat intelligence feed for credential abuse, suggesting the connection originates from a known bad actor. The second is whether the HTTP cookie matches a known malicious signature, which could indicate the use of specific forgery tools. A match on either condition is a high-fidelity alert for potential unauthorized access.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet Gateway
      - Web Proxies
      - VPN Concentrators
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH Zeek conn.log FOR source_ip IN threat_intel_feed(credential_abuse)
          UNION
          SEARCH Zeek http.log FOR cookie_value IN known_bad_cookie_signatures
  - question: Are there web sessions with statistically anomalous cookie lengths or entropy?
    context: This question seeks to identify forged credentials by looking for statistical deviations in session cookies. Attackers who generate their own cookies may create values that differ significantly in length or randomness (entropy) compared to legitimate, server-generated cookies. By baselining normal cookie characteristics for each application, we can flag outliers that may represent synthetically created, and therefore forged, session credentials.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet Gateway
      - Web Proxies
      - VPN Concentrators
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each web_application:
            CALCULATE baseline_cookie_length_avg, baseline_cookie_length_stddev
            CALCULATE baseline_cookie_entropy_avg, baseline_cookie_entropy_stddev
          SEARCH Zeek http.log
          WHERE cookie_length > (baseline_cookie_length_avg + 3 * baseline_cookie_length_stddev)
          OR cookie_entropy > (baseline_cookie_entropy_avg + 3 * baseline_cookie_entropy_stddev)
  - question: Can a machine learning model classify any web sessions as likely malicious based on a combination of session features?
    context: This question uses a machine learning approach to detect complex forgery attempts that may evade simpler checks. By training a model on a wide range of session features—such as the User-Agent, request timing, and network origin—it can learn the subtle patterns that distinguish legitimate sessions from forged ones. This allows for the detection of sophisticated attacks where individual indicators might not be anomalous, but their combination is highly suspicious.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet Gateway
      - Web Proxies
      - VPN Concentrators
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each new_web_session:
            EXTRACT features (user_agent, timing, asn, geo, headers)
            APPLY classification_model(features)
            IF prediction_score > high_confidence_threshold:
              ALERT as potentially_forged_session
  - question: Have any processes been created with command-line arguments matching known credential forging utilities?
    context: This question focuses on detecting the execution of specific tools used for forging credentials or stealing the necessary keys. By monitoring process creation events on critical servers for command-line arguments containing keywords like 'mimikatz', 'ADFSDump', or 'shimit', analysts can catch direct attempts to compromise credential systems. An alert on these keywords, especially on an ADFS server, is a high-severity indicator of an active attack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Active Directory Federation Services (ADFS) Servers
      - Domain Controllers
      - Application Servers with web-facing components (e.g., Zimbra)
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon EID 1, Windows EID 4688)
          WHERE command_line CONTAINS ('mimikatz' OR 'ADFSDump' OR 'shimit' OR 'gdpak')
          AND hostname IS ('ADFS Server' OR 'Domain Controller')
  - question: Have any processes shown a sudden, anomalous spike in command-line argument entropy?
    context: This question aims to uncover obfuscated commands used to steal signing keys. Attackers often encode or obfuscate their malicious PowerShell or command-line scripts to evade simple keyword-based detection. A sudden spike in the character randomness (entropy) of command-line arguments for a process, particularly one run by a service account on a server like ADFS, can indicate such obfuscation and should be investigated as a potential key theft attempt.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Active Directory Federation Services (ADFS) Servers
      - Domain Controllers
      - Application Servers with web-facing components (e.g., Zimbra)
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each host, process (e.g., powershell.exe):
            CALCULATE 30day_rolling_avg_entropy, 30day_rolling_stddev_entropy
          SEARCH process_creation_events
          WHERE current_cmd_entropy > (30day_rolling_avg_entropy + 3 * 30day_rolling_stddev_entropy)
          AND user_account IS service_account
  - question: Have any anomalous parent-child process relationships been observed on critical identity servers?
    context: This question uses process ancestry analysis to detect suspicious behavior on servers that manage identity, like ADFS. A legitimate service process, such as the ADFS service host, should have a predictable and limited set of child processes. If this service suddenly spawns an unexpected process like PowerShell, which then makes network connections or accesses cryptographic libraries, it is a strong anomaly. This could indicate that the service has been compromised and is being used to steal signing keys.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Active Directory Federation Services (ADFS) Servers
      - Domain Controllers
      - Application Servers with web-facing components (e.g., Zimbra)
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH Sysmon EID 1
          WHERE parent_process_name IS 'Microsoft.IdentityServer.ServiceHost.exe'
          AND child_process_name IS 'powershell.exe'
          ALERT on any match
  - question: Have any SAML assertions been observed from an unapproved issuer or using a weak signature algorithm?
    context: This question provides a direct check for forged SAML assertions by validating their fundamental properties. A SAML assertion should only come from a trusted Identity Provider (IdP) and should be signed with a strong cryptographic algorithm. An assertion appearing from an unknown issuer or signed with a deprecated algorithm like SHA1 is a definitive indicator of forgery and a critical security event.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Federation Gateways
      - Reverse Proxies
      - Cloud Application Security Brokers (CASB)
      - Web Application Firewalls (WAF)
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          EXTRACT SAML assertions from HTTP traffic
          FOR each assertion:
            IF 'Issuer' NOT IN allow_list_of_IdPs OR 'SignatureAlgorithm' IS 'SHA1':
              ALERT as forged_saml_assertion
  - question: Are there SAML assertions with an unusually long validity period?
    context: This question seeks to identify forged SAML assertions by looking for abnormal lifetime durations. Legitimate assertions typically have a standard, relatively short lifespan (e.g., 8-10 hours). An attacker forging an assertion may give it an exceptionally long validity period (e.g., days or weeks) for persistent access. Flagging assertions with lifetimes that are statistical outliers compared to the established norm can effectively detect this forgery technique.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Federation Gateways
      - Reverse Proxies
      - Cloud Application Security Brokers (CASB)
      - Web Application Firewalls (WAF)
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          CALCULATE 99th_percentile_lifetime from all SAML assertions
          EXTRACT SAML assertions from HTTP traffic
          FOR each assertion:
            CALCULATE lifetime = NotOnOrAfter - IssueInstant
            IF lifetime > 99th_percentile_lifetime:
              ALERT as anomalous_saml_lifetime
  - question: Does a machine learning model identify any SAML assertions as structurally anomalous?
    context: This question applies machine learning to detect subtly malformed or unusual SAML assertions that might be missed by simple rule-based checks. An autoencoder model can be trained on the structure of legitimate SAML traffic to learn what 'normal' looks like. Forged assertions, even if they have valid-looking individual fields, may have an overall combination of features that deviates from this learned norm. The model will flag these deviations with a high reconstruction error, pointing to likely forgeries.
    answer_sources:
      - Zeek http.log
      - Zeek files.log
      - Federation Gateways
      - Reverse Proxies
      - Cloud Application Security Brokers (CASB)
      - Web Application Firewalls (WAF)
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each new_saml_assertion:
            VECTORIZE assertion features (lifetime, algorithm, issuer, etc.)
            CALCULATE reconstruction_error using trained_autoencoder_model
            IF reconstruction_error > anomaly_threshold:
              ALERT as structurally_anomalous_assertion
  - question: Have there been any successful logins at a Service Provider without a preceding authentication at the Identity Provider?
    context: This question identifies a classic "pass-the-token" attack, which is a strong indicator of a forged credential. In a normal federated authentication flow, a user login at a Service Provider (SP) must be immediately preceded by a successful authentication event at the Identity Provider (IdP). If an SP login occurs without a corresponding IdP event for that user within a short time window, it implies the token was stolen or forged, not legitimately issued.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - ADFS Servers
      - Service Provider (SP) application servers
      - SIEM/Log Aggregator
      - Cloud Identity Provider
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each successful_SP_login(user, time):
            SEARCH for successful_IdP_login(user)
            WHERE login_time is between (time - 10 minutes) and time
            IF no matching IdP login found:
              ALERT as potential_pass_the_token_attack
  - question: Are any users exhibiting a statistically high ratio of Service Provider logins to Identity Provider logins?
    context: This question provides a statistical method to hunt for potential "pass-the-token" or forged token activity at scale. While a one-to-one correlation is ideal, log loss or timing issues can occur. By analyzing the ratio of SP logins to IdP logins per user, analysts can identify users whose activity deviates significantly from their own or their peers' baseline. A high ratio suggests that the user is accessing services without authenticating through the IdP, which could be due to token theft or forgery.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - ADFS Servers
      - Service Provider (SP) application servers
      - SIEM/Log Aggregator
      - Cloud Identity Provider
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each user:
            CALCULATE sp_login_count / idp_login_count over 24 hours
            CALCULATE peer_group_baseline_ratio
            IF user_ratio is a statistical outlier compared to baseline:
              INVESTIGATE user for token abuse
  - question: Can a time-series model detect Service Provider logins that are temporally anomalous?
    context: This question uses a machine learning approach to detect forged credentials by analyzing the timing and sequence of login events. A time-series model can learn the normal temporal patterns of IdP and SP logins for each user. An SP login event that occurs at an unexpected time, without the typical preceding IdP login event in its sequence, would be flagged as a temporal anomaly. This method is effective at catching forged credential use that breaks established user login rhythms.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Azure AD Sign-in Logs
      - ADFS Servers
      - Service Provider (SP) application servers
      - SIEM/Log Aggregator
      - Cloud Identity Provider
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each user:
            TRAIN LSTM model on sequence of (IdP_Login, SP_Login) events
          FOR each new SP_Login event:
            CALCULATE anomaly_score based on preceding event sequence
            IF score > threshold:
              ALERT as temporal_login_anomaly
  - question: Has a session cookie been used in an "impossible travel" scenario?
    context: This question aims to detect a stolen or forged session cookie by applying a simple, high-fidelity logical test. If a cookie is used from one geographic location and then, a short time later, from a location that is physically impossible to have traveled to in that time frame, it is a strong sign that the cookie has been compromised and is being used by two different entities. This requires enriching IP addresses with geolocation data.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet Gateway
      - Web Application Firewalls (WAF)
      - User Endpoint Devices
      - Reverse Proxies
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each session_cookie_use(ip_address, timestamp):
            GET previous_use(ip_address_prev, timestamp_prev) for same cookie
            CALCULATE travel_speed = distance(ip_address, ip_address_prev) / (timestamp - timestamp_prev)
            IF travel_speed > 600 mph:
              ALERT as impossible_travel
  - question: Are there sessions being conducted with a highly unusual combination of attributes for that user?
    context: This question seeks to identify a compromised session by profiling its constituent attributes against a user's historical baseline. A user typically has a predictable set of User-Agents, network locations (ASNs), and source countries. A session that uses a combination of attributes that are individually or collectively rare for that user is highly anomalous. This suggests the session may be initiated by an attacker using a stolen or forged cookie.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet Gateway
      - Web Application Firewalls (WAF)
      - User Endpoint Devices
      - Reverse Proxies
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each user:
            CREATE profile of common User-Agents, ASNs, countries
          FOR each new_session:
            CALCULATE rarity_score for each session attribute
            IF cumulative_rarity_score > 98th_percentile_threshold:
              ALERT as anomalous_session
  - question: Can a machine learning model identify any user sessions as behavioral outliers?
    context: This question uses unsupervised machine learning to find sessions that do not conform to a user's normal patterns of behavior. By clustering session data based on features like User-Agent, network origin, and time of day, the algorithm can group typical user activity into dense clusters. Any session that does not fall into a cluster is considered "noise" and represents a significant behavioral deviation, making it a strong candidate for being a forged or stolen session.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internet Gateway
      - Web Application Firewalls (WAF)
      - User Endpoint Devices
      - Reverse Proxies
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each user:
            VECTORIZE all sessions with features (User-Agent, ASN, country, time)
            APPLY DBSCAN clustering algorithm
            FLAG any session marked as 'noise' as a behavioral outlier
  - question: Has a non-administrative user attempted to access high-privilege URL paths?
    context: This question tries to detect privilege escalation attempts using a forged token. If an attacker forges a credential, they may create one with elevated privileges. A simple way to detect this is to monitor for authenticated users attempting to access administrative or configuration pages that their role should not permit. This is a strong signal that the user's session may be compromised or that they are using a forged, high-privilege credential.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Windows Event ID 4624
      - Internal Application Servers
      - SaaS Platforms
      - Database Servers
      - DNS Resolvers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          DEFINE high_privilege_urls = ['/admin', '/config', '/api/v1/users/delete']
          SEARCH Zeek http.log
          WHERE user IS NOT administrator AND url_path IN high_privilege_urls
          ALERT on any match
  - question: Are there authenticated sessions exhibiting statistically anomalous request timing or URL path sequences?
    context: This question seeks to identify sessions that are likely automated or scripted, which is a common characteristic of an attacker's exploratory behavior after gaining access with a forged credential. By measuring the randomness (entropy) of the URLs visited and the time between requests, we can flag sessions that deviate from normal, human-driven browsing patterns. A session with abnormally high entropy or unnaturally consistent timing is likely automated and malicious.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Windows Event ID 4624
      - Internal Application Servers
      - SaaS Platforms
      - Database Servers
      - DNS Resolvers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each user_session:
            CALCULATE entropy of visited_url_paths
            CALCULATE stddev of time_between_requests
            COMPARE to user's historical baseline
            IF entropy OR timing_stddev is > 3 stddev from norm:
              ALERT as anomalous_session_behavior
  - question: Has any user session followed a highly improbable navigation path?
    context: This question models user behavior as a sequence of steps to detect deviations from normal workflows. By creating a Markov chain model of typical navigation paths (e.g., from 'login' to 'dashboard'), we can calculate the probability of any given sequence of actions. A session that involves a series of very low-probability transitions (e.g., jumping from a public page to a deep administrative setting without visiting intermediate pages) strongly deviates from normal behavior and could indicate a compromised session using a forged credential to bypass normal application flow.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Windows Event ID 4624
      - Internal Application Servers
      - SaaS Platforms
      - Database Servers
      - DNS Resolvers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          FOR each user/role:
            TRAIN Markov chain model on URL navigation sequences
          FOR each active_session:
            CALCULATE probability of the observed URL transition sequence
            IF probability is below a very_low_threshold:
              ALERT as improbable_navigation_path