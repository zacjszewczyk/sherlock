name: T1606: Forge Web Credentials
id: e4a2b1f0-8c9d-4e5f-a6b7-c8d9e0f1a2b3
description: This playbook helps investigate if an adversary is forging web credentials, such as SAML tokens or web cookies, to gain unauthorized access. Indicators of this activity include web sessions originating from malicious IPs or containing suspicious cookies, processes created to steal signing keys, observations of invalid SAML assertions, successful service provider logins without corresponding identity provider authentications, session cookies used with inconsistent attributes (like IP address or user-agent), and authenticated sessions exhibiting anomalous behavior that deviates from established user baselines.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Is there evidence of web sessions originating from IP addresses known for credential abuse or containing known-bad cookie values?
  context: This question aims to identify straightforward indicators of credential forgery by checking for known bads. It correlates live web traffic source IPs against threat intelligence feeds and inspects session cookies for values or patterns associated with known forgery tools. A match provides a high-confidence signal of malicious activity.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Internet Gateway
  - Web Proxies
  - VPN Concentrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each session in conn.log
        JOIN session.source_ip with threat_intel_feed.ip
        IF match THEN alert.
      FOR each request in http.log
        IF request.cookie matches known_bad_signature THEN alert.
- question: Are there web sessions with cookies that have statistically anomalous length or character entropy?
  context: This question looks for forged credentials by identifying session cookies that are statistical outliers. Adversaries might generate cookies that don't match the typical structure of legitimate ones. By baselining the normal length and entropy for each application, we can spot synthetically generated cookies that deviate significantly (e.g., by 3+ standard deviations) from the norm.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Internet Gateway
  - Web Proxies
  - VPN Concentrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each web_app:
        CALCULATE baseline_cookie_length_stdev and baseline_cookie_entropy_stdev.
      FOR each new session:
        IF session.cookie_length > 3 * baseline_cookie_length_stdev OR session.cookie_entropy > 3 * baseline_cookie_entropy_stdev THEN alert.
- question: Can a machine learning model classify any web sessions as likely forged based on a combination of session features?
  context: This question leverages a machine learning model to detect complex forgery patterns that symbolic or statistical methods might miss. By training a classifier on features like User-Agent, request timing, ASN, and geolocation from a labeled dataset of good and bad sessions, the model can predict the probability that a new, unseen session is malicious.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Internet Gateway
  - Web Proxies
  - VPN Concentrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      EXTRACT features (user_agent, timing, asn, geo) from session logs.
      APPLY pre-trained classification model to feature set.
      IF model_output_probability > high_confidence_threshold THEN alert.
- question: Have any processes been executed with command-line arguments containing keywords for known credential forging tools?
  context: This question looks for the direct execution of credential theft or forgery utilities. By monitoring process creation events (like Windows Event ID 4688 or Sysmon Event ID 1) for specific keywords (e.g., 'mimikatz', 'ADFSDump') in the command line, especially on critical servers like ADFS, we can detect blatant attempts to steal signing keys.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Active Directory Federation Services (ADFS) Servers
  - Domain Controllers
  - Application Servers with web-facing components (e.g., Zimbra)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event:
        IF event.command_line CONTAINS ('mimikatz', 'ADFSDump', 'shimit', 'gdpak') THEN create high_severity_alert.
- question: Have any common processes (e.g., powershell.exe) been launched with command-line arguments exhibiting unusually high entropy?
  context: This question aims to detect obfuscated or encoded commands used to steal signing keys. Adversaries often hide their commands to evade simple keyword-based detection. A sudden spike in command-line entropy for a process, especially one run by a service account on a critical server, can indicate a hidden payload and should be investigated.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Active Directory Federation Services (ADFS) Servers
  - Domain Controllers
  - Application Servers with web-facing components (e.g., Zimbra)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host, process_name:
        CALCULATE baseline_cmd_entropy_stdev over 30 days.
      FOR each new process_event:
        CALCULATE event.cmd_entropy.
        IF event.cmd_entropy > 3 * baseline_cmd_entropy_stdev THEN alert.
- question: Are there any anomalous parent-child process relationships on critical servers that could indicate signing key theft?
  context: This question seeks to identify key theft by analyzing the sequence of process execution. A legitimate service process, like the one for ADFS, should not normally spawn tools like PowerShell. A machine learning model trained on normal process trees can flag these anomalous chains as potential indicators of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Active Directory Federation Services (ADFS) Servers
  - Domain Controllers
  - Application Servers with web-facing components (e.g., Zimbra)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL process relationships as a graph.
      FOR each new process_chain:
        IF chain (e.g., ADFS_service -> powershell.exe -> network_connection) is anomalous according to trained graph model THEN alert.
- question: Have any SAML assertions been observed with an unknown issuer or a deprecated signature algorithm?
  context: This question checks for fundamental flaws in SAML assertions that point to forgery. By extracting SAML assertions from network traffic and validating the issuer against an allow-list of trusted Identity Providers and checking for weak algorithms (like SHA1), we can quickly identify and alert on crudely forged tokens.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Federation Gateways
  - Reverse Proxies
  - Cloud Application Security Brokers (CASB)
  - Web Application Firewalls (WAF)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each saml_assertion in http.log:
        IF assertion.issuer NOT IN approved_idp_list OR assertion.signature_algorithm IN ('sha1') THEN alert.
- question: Have any SAML assertions been observed with a statistically anomalous validity period?
  context: This question aims to detect forged SAML tokens by looking for abnormal lifetime durations. Adversaries may create 'golden SAML' tokens with unusually long validity periods to maintain persistent access. By baselining normal lifetimes (e.g., 8 hours), we can flag assertions with outlier durations (e.g., > 24 hours) as suspicious.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Federation Gateways
  - Reverse Proxies
  - Cloud Application Security Brokers (CASB)
  - Web Application Firewalls (WAF)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE 99th_percentile_lifetime from historical saml_assertions.
      FOR each new saml_assertion:
        CALCULATE assertion.lifetime.
        IF assertion.lifetime > 99th_percentile_lifetime THEN alert.
- question: Does a machine learning model identify any SAML assertions as structurally anomalous?
  context: This question uses an unsupervised learning model (an autoencoder) to find SAML assertions that don't conform to the learned structure of legitimate traffic. By training the model on known-good assertions, it can flag any new assertion with a high reconstruction error, indicating it has an unusual combination of features (lifetime, issuer, etc.) and is potentially forged.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Federation Gateways
  - Reverse Proxies
  - Cloud Application Security Brokers (CASB)
  - Web Application Firewalls (WAF)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each saml_assertion:
        CREATE feature_vector (lifetime, algorithm, issuer, etc.).
        INPUT vector to pre-trained autoencoder.
        CALCULATE reconstruction_error.
        IF reconstruction_error > threshold THEN alert.
- question: Are there successful logins at a Service Provider (SP) that are not preceded by a recent, corresponding login at the Identity Provider (IdP)?
  context: This is a critical question for detecting 'pass-the-token' attacks. In a normal federated login flow, an IdP login event must precede an SP login. If an SP login occurs for a user without a corresponding IdP login for that same user within a short time window (e.g., 10 minutes), it is a very strong indicator that a stolen or forged token was used.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Azure AD Sign-in Logs
  - ADFS Servers
  - Service Provider (SP) application servers
  - SIEM/Log Aggregator
  - Cloud Identity Provider
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each successful sp_login_event for user_x at time_t:
        QUERY for successful idp_login_event for user_x between time_t-10m and time_t.
        IF no_event_found THEN alert.
- question: Does any user exhibit a statistically unusual ratio of Service Provider (SP) logins to Identity Provider (IdP) logins?
  context: This question identifies potential token abuse by analyzing the ratio of SP to IdP logins. A user with a significantly high ratio compared to their own baseline or their peers might be reusing a stolen token for multiple SP sessions without re-authenticating at the IdP. This requires correlating logs from both sources.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Azure AD Sign-in Logs
  - ADFS Servers
  - Service Provider (SP) application servers
  - SIEM/Log Aggregator
  - Cloud Identity Provider
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user:
        CALCULATE ratio = count(sp_logins) / count(idp_logins) over 24h.
        CALCULATE baseline_ratio_percentile for peer_group.
        IF user.ratio > 95th_percentile THEN alert.
- question: Does a time-series model detect any anomalous sequences of user login events across Identity and Service Providers?
  context: This question uses a more sophisticated temporal analysis to find forged credentials. A time-series model (like an LSTM) can learn the normal sequence and timing of login events for a user. An SP login event that occurs at an unexpected time or without the typical preceding IdP event can be flagged by the model as a temporal anomaly, even if it passes simpler checks.
  answer_sources:
  - Zeek http.log
  - Windows Event ID 4624
  - Azure AD Sign-in Logs
  - ADFS Servers
  - Service Provider (SP) application servers
  - SIEM/Log Aggregator
  - Cloud Identity Provider
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE time-series of (idp_login, sp_login) events per user.
      APPLY pre-trained LSTM model to the series.
      IF model flags an sp_login event as a temporal_anomaly THEN alert.
- question: Has a session cookie been used from two geographic locations in a time frame that would require impossible travel speeds?
  context: This question aims to detect stolen session cookies by applying a classic 'impossible travel' check. If a cookie is used from one IP address and then, shortly after, from a geographically distant IP, the implied travel speed can be calculated. If this speed is physically impossible (e.g., >600 mph), it is a strong sign that the cookie has been compromised and is being used by two different entities.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Internet Gateway
  - Web Application Firewalls (WAF)
  - User Endpoint Devices
  - Reverse Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each session_cookie:
        GET list of (ip, timestamp).
        SORT by timestamp.
      FOR each adjacent pair of logins:
        CALCULate distance and time_delta.
        CALCULATE speed.
        IF speed > 600 mph THEN alert.
- question: Has any user session exhibited a combination of attributes (User-Agent, ASN, country) that is statistically rare for that user?
  context: This question seeks to identify stolen or forged sessions by profiling a user's typical behavior. For each user, we can build a profile of common User-Agents, source networks (ASNs), and countries. A new session that uses a combination of rare attributes (e.g., a rare User-Agent from a rare ASN) will have a high cumulative rarity score and should be flagged for review.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Internet Gateway
  - Web Application Firewalls (WAF)
  - User Endpoint Devices
  - Reverse Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user:
        BUILD historical frequency profile for (user_agent, asn, country).
      FOR each new session:
        CALCULATE rarity_score for each attribute.
        SUM scores.
        IF total_score > 98th_percentile_threshold THEN alert.
- question: Does a clustering model identify any user sessions as significant outliers from their normal activity clusters?
  context: This question uses unsupervised machine learning to find anomalous sessions that don't fit a user's normal patterns. By representing each session as a vector of features (User-Agent, ASN, time of day, etc.) and applying a density-based clustering algorithm like DBSCAN, normal activity will form dense clusters. Any session that falls outside these clusters is labeled as noise and represents a significant behavioral deviation, possibly due to a stolen cookie.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Internet Gateway
  - Web Application Firewalls (WAF)
  - User Endpoint Devices
  - Reverse Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user:
        CREATE session_feature_vectors.
        APPLY DBSCAN clustering algorithm.
        IF session is marked as 'noise' (not in a cluster) THEN alert.
- question: Has any non-privileged user attempted to access high-privilege URL paths after authenticating?
  context: This question looks for attempts to escalate privileges using a forged token. By defining a list of sensitive administrative URLs (e.g., '/admin'), we can monitor for access attempts from users who are not authorized. Such an attempt indicates that the user's session may be compromised, or they are using a forged token with elevated permissions.
  answer_sources:
  - Zeek http.log
  - Zeek dns.log
  - Windows Event ID 4624
  - Internal Application Servers
  - SaaS Platforms
  - Database Servers
  - DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each http_request:
        IF request.user NOT IN admin_group AND request.url IN high_privilege_url_list THEN alert.
- question: Does any user session show statistically anomalous URL access patterns or request timing?
  context: This question aims to identify automated or scripted behavior indicative of a compromised session. A human user typically has a certain rhythm and pattern to their navigation. A session with abnormally high entropy in the requested URLs (indicating random browsing) or unusually consistent timing between requests (indicating automation) is a statistical outlier and could be driven by an attacker's script rather than the legitimate user.
  answer_sources:
  - Zeek http.log
  - Zeek dns.log
  - Windows Event ID 4624
  - Internal Application Servers
  - SaaS Platforms
  - Database Servers
  - DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user_session:
        CALCULATE url_path_entropy and request_timing_stdev.
        COMPARE to user's historical baseline.
        IF current_session_metrics are > 3 standard deviations from baseline THEN alert.
- question: Has any user session followed a highly improbable navigation path according to a probabilistic model of their normal behavior?
  context: This question uses a state-based model (like a Markov chain) to detect deviations from a user's learned workflow. By modeling normal navigation as a series of probable transitions between URL categories (e.g., 'dashboard' -> 'settings'), the model can calculate the probability of a new sequence of actions. A session with a very low probability sequence suggests the user is not following their typical workflow, which may indicate a compromise.
  answer_sources:
  - Zeek http.log
  - Zeek dns.log
  - Windows Event ID 4624
  - Internal Application Servers
  - SaaS Platforms
  - Database Servers
  - DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user:
        TRAIN Markov chain model on historical url_path_transitions.
      FOR each active_session:
        CALCULATE probability of observed transition_sequence.
        IF probability < low_probability_threshold THEN alert.