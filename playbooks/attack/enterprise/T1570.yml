name: T1570: Lateral Tool Transfer
id: f3e5b6d1-7c8b-4a9e-8d6f-2c1b3a4d5e6f
description: This playbook helps investigate whether an adversary is moving tools or other files laterally within the network. This can be identified by observing files transferred between internal systems that have a hash matching a known-bad indicator or a filename associated with common adversary tooling. It also looks for files written to unusual directories commonly abused by adversaries (e.g., C:\Windows\Temp), or file transfers initiated by processes not typically associated with network administration (e.g., winword.exe). Other indicators include a file being transferred from a single source to a statistically significant number of destinations in a short time, or direct connections between internal endpoints over non-standard protocols or ports.
type: technique
related:
  - TA0008: Lateral Movement
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are files being transferred internally that match known-bad hashes or are associated with adversary tool names?
    context: This question aims to detect the lateral movement of malicious tools by checking transferred files against threat intelligence. Adversaries often reuse common hacking tools (like mimikatz.exe) or malware with known signatures. By hashing transferred files from network logs and correlating them with process execution events on endpoints, analysts can identify the introduction of malicious payloads that match known-bad hash lists or watchlists of suspicious tool names.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - All internal network segments
      - Domain Controllers
      - File Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: SIEM
        query: |
          // Correlate file transfers with process creation and check against threat intel
          JOIN (source='Zeek files.log') AND (source='Sysmon Event ID 1' OR source='Windows Event ID 4688')
          WHERE file_transfer.hash IN (threat_intelligence_hashes)
             OR process_creation.name IN (adversary_tool_watchlist)
          RETURN file_transfer.source_ip, file_transfer.dest_ip, process_creation.name, file_transfer.hash

  - question: Are files with unusually random or high-entropy filenames being transferred across the network?
    context: This question targets evasion techniques where adversaries use randomized filenames to avoid signature-based detection. By calculating the Shannon entropy of filenames, we can quantify their randomness. A filename with entropy significantly higher than the established network baseline suggests an attempt to obfuscate the file's purpose and evade simple name-based watchlists. This is a common indicator of algorithmically generated names used by malware.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - All internal network segments
      - Domain Controllers
      - File Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: Data Analytics Platform
        query: |
          // Calculate filename entropy and compare to a dynamic baseline
          FROM file_transfers
          CALCULATE shannon_entropy(filename) AS file_entropy
          WHERE file_entropy > (baseline_95th_percentile_entropy)
          RETURN source_ip, dest_ip, filename, file_entropy

  - question: Can machine learning predict which file transfers are likely malicious based on a combination of network and host features?
    context: This question proposes a more advanced, behavioral approach to detection. A supervised machine learning model can analyze multiple features simultaneously (e.g., file MIME type, size, protocol, source/destination context, parent process) to identify subtle patterns associated with malicious transfers. This method can detect novel threats that don't match known signatures and provides a risk score to help analysts prioritize the most suspicious events.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - All internal network segments
      - Domain Controllers
      - File Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: Machine Learning Platform
        query: |
          // Apply a trained classification model to file transfer events
          INPUT features = [file.mime_type, file.size, conn.duration, process.parent_name]
          MODEL random_forest_classifier
          PREDICT is_malicious_transfer_probability
          WHERE is_malicious_transfer_probability > 0.85
          RETURN event_details, prediction_score

  - question: Are files being written to sensitive or non-standard directories from an internal network source?
    context: This question helps detect when an adversary, having gained a foothold, transfers a tool or payload to a suspicious location on a target system. Adversaries frequently use world-writable directories like C:\Windows\Temp or C:\Users\Public to store their tools. Monitoring for file writes to a watchlist of such directories, where the source is another internal system, can effectively uncover lateral tool transfer activity.
    answer_sources:
      - Zeek smb_files.log
      - Zeek ftp.log
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Workstation-to-workstation traffic
      - Server-to-server traffic
      - Critical application servers
      - File servers
    range: last 90 days
    queries:
      - search_technology: SIEM
        query: |
          // Monitor for file writes to suspicious directories from internal sources
          FROM (source='Sysmon Event ID 11' OR source='Windows Event ID 4663' OR source='Zeek smb_files.log')
          WHERE destination_path IN (suspicious_path_watchlist)
            AND source_ip IS_INTERNAL
          RETURN source_ip, destination_host, destination_path, filename

  - question: Are files being written to anomalously rare directories on a given host?
    context: This question focuses on identifying unusual behavior on a per-host basis. While some directories are universally suspicious, an adversary might write a file to a location that is legitimate but rarely used on a specific server or workstation. By creating a baseline of normal file write locations for each host, we can flag writes to infrequent paths as potential outliers that warrant investigation, even if the path itself is not on a static watchlist.
    answer_sources:
      - Zeek smb_files.log
      - Zeek ftp.log
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Workstation-to-workstation traffic
      - Server-to-server traffic
      - Critical application servers
      - File servers
    range: last 90 days
    queries:
      - search_technology: Data Analytics Platform
        query: |
          // Identify file writes to paths that are statistically rare for a specific host
          FOR_EACH host
            CALCULATE frequency(destination_path) over last 30 days
            IF current_write.path_frequency < 5th_percentile
              ALERT
          RETURN host, destination_path, filename, path_frequency

  - question: Can we identify anomalous clusters of file creation activity that represent tool transfers?
    context: This question leverages unsupervised machine learning to find outliers in file creation events. By clustering events based on features like the creating process, path characteristics, and file properties, normal activity (e.g., software updates, user document creation) will form large, dense clusters. Malicious tool drops often appear as small, distinct clusters or noise points because their combination of features is unique. This approach can find novel attacks without prior knowledge.
    answer_sources:
      - Zeek smb_files.log
      - Zeek ftp.log
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Workstation-to-workstation traffic
      - Server-to-server traffic
      - Critical application servers
      - File servers
    range: last 90 days
    queries:
      - search_technology: Machine Learning Platform
        query: |
          // Apply clustering to file creation events to find anomalous groups
          INPUT features = [process.name, path.depth, file.extension, file.is_signed]
          MODEL DBSCAN_clusterer
          IDENTIFY clusters flagged as 'noise' or with size < N
          RETURN anomalous_cluster_events

  - question: Are non-standard processes initiating file transfers to other internal systems?
    context: This question helps detect when adversaries abuse legitimate, non-administrative processes to move files, a technique known as living-off-the-land. A process like Microsoft Word ('winword.exe') or a web server process ('w3wp.exe') should not typically be initiating SMB or FTP connections to transfer files. Alerting on such behavior can uncover adversaries who are trying to blend in with normal user or application activity.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek smb_files.log
      - Application servers (e.g., web servers, database servers)
      - User workstations
      - Privileged access workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: SIEM
        query: |
          // Correlate process creation with network connections on file sharing ports
          JOIN (source='Sysmon Event ID 1' OR source='Sysmon Event ID 3') AND (source='Zeek conn.log')
          WHERE process.name IN (non_standard_transfer_tools_watchlist)
            AND network.dest_port IN (21, 22, 445)
            AND network.dest_ip IS_INTERNAL
          RETURN process.name, source_ip, dest_ip, dest_port

  - question: Are processes exhibiting statistically rare child process or network connection behavior?
    context: This question establishes a behavioral baseline for every process in the environment to detect anomalies. For example, 'powershell.exe' might normally connect to certain servers but not others. If it suddenly initiates a connection to a new internal destination or spawns an unusual child process (like 'bitsadmin.exe'), this would be flagged as a low-frequency, anomalous event. This method is powerful for detecting misuse of legitimate tools for lateral movement.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek smb_files.log
      - Application servers (e.g., web servers, database servers)
      - User workstations
      - Privileged access workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: Data Analytics Platform
        query: |
          // Build statistical baselines of process behavior to find rare events
          FOR_EACH process_name
            CALCULATE frequency(child_process) and frequency(dest_port)
            IF current_event.frequency < 1st_percentile
              ALERT
          RETURN parent_process, child_process, dest_port, event_frequency

  - question: Can a time-series model detect deviations in a host's normal sequence of process and network activity?
    context: This question proposes using a deep learning model to learn the 'rhythm' of a host's operations. An LSTM autoencoder, for example, can be trained on sequences of events (e.g., parent process -> child process -> network connection). When an adversary performs a lateral tool transfer, the resulting sequence of events will likely be novel and differ from the learned patterns. The model will fail to reconstruct this new sequence accurately, resulting in a high reconstruction error and triggering an alert.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek smb_files.log
      - Application servers (e.g., web servers, database servers)
      - User workstations
      - Privileged access workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: Machine Learning Platform
        query: |
          // Use a sequence-based anomaly detection model
          INPUT sequence = [event1, event2, event3, ...]
          MODEL LSTM_autoencoder
          CALCULATE reconstruction_error(sequence)
          WHERE reconstruction_error > threshold
          RETURN anomalous_sequence, error_score

  - question: Is a single internal host transferring the same file to a large number of other hosts in a short time?
    context: This question is designed to detect the mass deployment of tools or malware, a common step after an adversary has established a foothold and wants to expand their presence. A 'fan-out' pattern, where one source IP sends the same file (identified by hash or name) to more than a threshold number of destinations (e.g., >10) within a small time window (e.g., <30 minutes), is a strong indicator of automated lateral movement, such as spreading via a script.
    answer_sources:
      - Zeek files.log
      - Zeek smb_files.log
      - Windows Event ID 4663
      - Entire internal network address space
      - Subnets containing high-value assets
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: SIEM
        query: |
          // Use a stateful rule to count distinct destinations for a file from a single source
          FROM (source='Zeek files.log' OR source='Zeek smb_files.log')
          GROUP BY source_ip, file_hash, file_name
          COUNT distinct(dest_ip) AS fan_out_count
          WITHIN 30 minutes
          WHERE fan_out_count > 10
          RETURN source_ip, file_hash, fan_out_count

  - question: Is any single file being transferred to a statistically anomalous number of hosts?
    context: This question takes a broader, environment-wide view compared to the single-source fan-out. It establishes a dynamic baseline for how widely any given file typically spreads. For example, a legitimate patch might be sent to thousands of hosts, while most files are sent to only one or two. If a new file, identified by its hash, is suddenly transferred to a number of hosts that exceeds the 99th percentile of this baseline, it indicates an unusually widespread distribution that could be malicious.
    answer_sources:
      - Zeek files.log
      - Zeek smb_files.log
      - Windows Event ID 4663
      - Entire internal network address space
      - Subnets containing high-value assets
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: Data Analytics Platform
        query: |
          // Compare the fan-out count of each file to a dynamic, long-term baseline
          FROM file_transfers within 1 hour
          GROUP BY file_hash
          COUNT distinct(dest_host) AS fan_out_count
          WHERE fan_out_count > (baseline_99th_percentile_fan_out)
          RETURN file_hash, fan_out_count

  - question: Can we detect mass file distribution events by monitoring for sudden changes in a network graph?
    context: This question reframes the problem using graph analytics. By modeling hosts as nodes and file transfers as directed edges, a lateral tool transfer 'fan-out' will appear as a 'star' pattern where many new edges suddenly emanate from a single source node. Graph analytics platforms can be configured to alert on these sudden spikes in a node's out-degree, especially when the edges (transfers) share properties like the same file hash, providing a powerful visual and analytical way to detect mass deployment.
    answer_sources:
      - Zeek files.log
      - Zeek smb_files.log
      - Windows Event ID 4663
      - Entire internal network address space
      - Subnets containing high-value assets
      - Domain Controllers
    range: last 90 days
    queries:
      - search_technology: Graph Analytics Platform
        query: |
          // Monitor for rapid increases in a node's out-degree
          CONSTRUCT graph from file transfers
          MONITOR node.out_degree
          ALERT if node.out_degree increases by X% in Y minutes
            AND new_edges.file_hash are identical
          RETURN source_node, affected_edges

  - question: Are internal hosts communicating over protocols or ports that are not on the approved allow-list for east-west traffic?
    context: This question enforces a strict security policy to detect unexpected lateral communication. In a well-architected network, internal host-to-host traffic (east-west) should be predictable and limited to necessary protocols (e.g., SMB, RDP). Any connection observed between internal systems that uses a port or protocol not on an explicit allow-list is inherently suspicious and could represent an adversary using a custom C2 channel or an unexpected tool for lateral movement.
    answer_sources:
      - Zeek conn.log
      - East-west traffic between all internal subnets
      - Network traffic to/from bastion hosts
      - VPN user subnets
    range: last 90 days
    queries:
      - search_technology: SIEM
        query: |
          // Alert on any internal connection not on the approved port/protocol list
          FROM (source='Zeek conn.log')
          WHERE source_ip IS_INTERNAL AND dest_ip IS_INTERNAL
            AND (protocol, dest_port) NOT IN (east_west_allow_list)
          RETURN source_ip, dest_ip, protocol, dest_port

  - question: Is the volume of data transferred between any two internal hosts a statistical outlier?
    context: This question focuses on detecting anomalous data volumes as an indicator of tool transfer. While two servers might communicate regularly, the transfer of a large binary or tool would likely cause a spike in the amount of data exchanged. By establishing a baseline (mean and standard deviation) for the data volume between each pair of communicating hosts, we can automatically flag any connection where the transferred bytes ($$ \text{volume} > \mu + 3\sigma $$) significantly exceeds the norm, pointing to a potential file transfer.
    answer_sources:
      - Zeek conn.log
      - East-west traffic between all internal subnets
      - Network traffic to/from bastion hosts
      - VPN user subnets
    range: last 90 days
    queries:
      - search_technology: Data Analytics Platform
        query: |
          // For each IP pair, alert if daily data volume exceeds 3 standard deviations from the mean
          FOR_EACH (source_ip, dest_ip) pair
            CALCULATE mean(daily_volume) and stdev(daily_volume) over 30 days
            IF current_day.volume > (mean + 3 * stdev)
              ALERT
          RETURN source_ip, dest_ip, current_day.volume

  - question: Can an unsupervised model identify the most anomalous internal network connections?
    context: This question uses a holistic, unsupervised machine learning approach to find suspicious lateral movement without predefined rules. An Isolation Forest model can analyze multiple dimensions of a network connection at once (protocol, port, duration, flags, subnet roles, etc.) to identify connections that are 'different' from the majority. This is effective at finding novel or stealthy techniques, as the connections that are easiest for the model to 'isolate' are the most anomalous and thus the most worthy of investigation.
    answer_sources:
      - Zeek conn.log
      - East-west traffic between all internal subnets
      - Network traffic to/from bastion hosts
      - VPN user subnets
    range: last 90 days
    queries:
      - search_technology: Machine Learning Platform
        query: |
          // Use an Isolation Forest to score the anomaly level of all internal connections
          INPUT features = [protocol, port, duration, bytes, tcp_flags, subnet_role]
          MODEL isolation_forest
          PREDICT anomaly_score
          WHERE anomaly_score is high
          RETURN connection_details, anomaly_score