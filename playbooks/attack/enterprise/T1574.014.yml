name: T1574.014: AppDomainManager
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: >-
  This playbook is designed to detect adversaries hijacking the .NET AppDomainManager for persistence, privilege escalation, and defense evasion. The investigation focuses on identifying .NET processes that load unsigned, rare, or known-malicious modules; initiate suspicious network connections to C2 infrastructure; or are launched after specific environment variables (COMPLUS_AppDomainManager_Assembly, COMPLUS_AppDomainManager_Type) or .config file XML elements (<appDomainManagerAssembly>) are set. It also tracks post-compromise activity, such as the creation of new persistence mechanisms (Scheduled Tasks, Services), unexpected child process spawning (cmd.exe, powershell.exe), or anomalous access to sensitive data and system resources by trusted .NET processes.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a .NET process loaded a module or initiated a network connection that matches known threat intelligence?
    context: >-
      This question aims to detect the most direct evidence of compromise, where a hijacked .NET process uses a known malicious DLL or connects to a known command-and-control server. A match provides a high-confidence signal that the process has been compromised for persistence.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Windows Event ID 7
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint Fleet
      - Application Servers
      - Developer Workstations
      - Network Egress Points
      - DNS Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH (process_loads WHERE process_is_dotnet) OR (network_connections WHERE process_is_dotnet). JOIN with threat_intel_feed on (module_hash) or (destination_ip, destination_domain). RETURN alerts on match.
  - question: Is a .NET process loading an unsigned and rare module or connecting to a statistically unusual network destination?
    context: >-
      Adversaries often use custom or rare tools that are not signed. This question helps identify these by flagging modules with low prevalence across the enterprise. Similarly, hijacked processes may connect to new or unusual Autonomous System Numbers (ASNs) for C2, which deviates from established baselines.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Windows Event ID 7
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint Fleet
      - Application Servers
      - Developer Workstations
      - Network Egress Points
      - DNS Servers
    range: last 90 days
    queries:
      - pseudocode: FOR each dotnet_process, GET loaded_modules. IF module is unsigned AND prevalence < threshold, ALERT. FOR each dotnet_process, GET network_connections. IF destination_ASN is statistically rare, ALERT.
  - question: Does a machine learning model classify the behavior of a .NET process as malicious, particularly when it loads a rare module and connects to a new external address?
    context: >-
      This question leverages machine learning to combine multiple weak signals (process parent, command line, module rarity, network novelty) into a single, higher-confidence assessment. A high probability score from the model suggests a likely hijacking event that might be missed by individual rules.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Windows Event ID 7
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint Fleet
      - Application Servers
      - Developer Workstations
      - Network Egress Points
      - DNS Servers
    range: last 90 days
    queries:
      - pseudocode: INPUT process_features (parent, cmdline, loaded_modules, net_dest) into classification_model. IF model_score > threshold AND module_is_rare AND net_dest_is_new, ALERT.
  - question: Has a process command line included 'COMPLUS_AppDomainManager_Assembly' or 'COMPLUS_AppDomainManager_Type', or has a .config file been modified to include '<appDomainManagerAssembly>'?
    context: >-
      These specific strings are the direct mechanism used to hijack the AppDomainManager. Monitoring for their appearance in process command lines or .config files is a high-fidelity method for detecting this specific persistence technique.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Domain Controllers
      - Application Servers (e.g., IIS)
      - Developer Workstations
      - Endpoint Fleet
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events for command_line containing "COMPLUS_AppDomainManager_...". SEARCH file_modification_events for file_name ending in ".config" and content containing "<appDomainManagerAssembly>". ALERT on any match.
  - question: Is the process or user setting AppDomainManager properties statistically anomalous compared to historical behavior?
    context: >-
      While legitimate processes might set these properties, it's often done by specific administrative users or deployment tools. This question aims to find outliers, such as a standard user's Word document process modifying a critical .config file, which would be highly suspicious.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Domain Controllers
      - Application Servers (e.g., IIS)
      - Developer Workstations
      - Endpoint Fleet
    range: last 90 days
    queries:
      - pseudocode: FOR each AppDomainManager_modification_event, CALCULATE anomaly_score based on rarity of (user, parent_process). IF score > threshold, ALERT.
  - question: Does an unsupervised anomaly detection model flag a process command line containing 'COMPLUS_AppDomainManager' as abnormal?
    context: >-
      This question uses machine learning to learn the structure of normal command lines across the environment. It can detect novel or unusually structured command lines that set AppDomainManager properties, which may indicate obfuscation or an unusual execution method used by an adversary.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Domain Controllers
      - Application Servers (e.g., IIS)
      - Developer Workstations
      - Endpoint Fleet
    range: last 90 days
    queries:
      - pseudocode: INPUT command_line_text into isolation_forest_model. IF model_flags_as_anomaly AND command_line contains "COMPLUS_AppDomainManager", ALERT.
  - question: Did a .NET process create a new Scheduled Task, Service, or Registry Run Key shortly after it started?
    context: >-
      A common follow-on action for an adversary after hijacking a process is to establish a more durable form of persistence. This question looks for this chain of events, where a .NET process, shortly after its creation, is observed creating a new task, service, or run key.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 12
      - Windows Event ID 13
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Zeek conn.log
      - Domain Controllers
      - Application Servers
      - Endpoint Fleet
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: TRIGGER when dotnet_process (PID) creates ScheduledTask OR Service OR RunKey within 60 seconds of process_start. ALERT.
  - question: Is a .NET process exhibiting network beaconing behavior, characterized by unusually regular connection intervals or anomalous connection counts?
    context: >-
      Command-and-control channels often use periodic "beaconing" to check in. This question aims to detect this robotic pattern by establishing a baseline of normal network traffic for a process and alerting when the timing between connections becomes too regular (low standard deviation) or when connection volume spikes.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Windows Event ID 12
      - Windows Event ID 13
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Zeek conn.log
      - Domain Controllers
      - Application Servers
      - Endpoint Fleet
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: FOR each dotnet_process, BASELINE network behavior. IF time_delta_std_dev < low_threshold OR connection_count > high_threshold, ALERT.
  - question: Are the network metrics of a .NET process, such as bytes sent or unique ports used, significantly deviating from forecasted values?
    context: >-
      This question uses a more advanced time-series model (like ARIMA) to predict what a process's network traffic *should* look like. An alert is generated when the actual traffic deviates significantly from the prediction, which can indicate a change in the process's behavior due to hijacking.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 3
      - Windows Event ID 12
      - Windows Event ID 13
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Zeek conn.log
      - Domain Controllers
      - Application Servers
      - Endpoint Fleet
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: FORECAST network_metrics (bytes_out, unique_ports) for dotnet_process. IF observed_metrics significantly deviate from forecast_confidence_interval, ALERT.
  - question: Has a high-privilege .NET process loaded a module that is unsigned or matches a known malicious hash?
    context: >-
      Adversaries may target high-privilege processes to escalate their own permissions. This question focuses on these critical processes (running as High or System integrity) and checks if they load unsigned or known-bad DLLs, which is a strong indicator of a privilege escalation attempt.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 7
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_loads WHERE process_integrity is "High" or "System". IF module_is_unsigned OR module_hash in threat_intel, ALERT.
  - question: Is a high-privilege .NET process loading a DLL that is statistically rare across the enterprise?
    context: >-
      High-privilege system processes typically load a predictable set of modules. This question establishes a baseline of normal DLLs for these processes and alerts when they load a new, rare module, suggesting an attacker has introduced a custom tool to run with elevated privileges.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 7
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - pseudocode: FOR high_privilege_dotnet_process, BASELINE loaded_modules. IF a loaded_module has prevalence < threshold, ALERT.
  - question: Does a machine learning model assign a high risk score to a module being loaded by a high-integrity .NET process?
    context: >-
      This question uses a risk-scoring model that considers multiple factors (process integrity, module signature, module prevalence) to evaluate the danger of a specific module load event. A high score for a privileged process provides a strong, context-aware signal of a potential privilege escalation attempt.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 7
      - Domain Controllers
      - Critical Application Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - pseudocode: INPUT event_features (process_integrity, module_signature, module_prevalence) into classification_model. IF model_score > threshold for high_integrity_process, ALERT.
  - question: Has a .config file or registry key for a high-privilege .NET application been modified by a non-administrative user or a low-integrity process?
    context: >-
      This is a direct detection for a common privilege escalation vector. An adversary with low-privilege access might try to modify the configuration of a high-privilege service to hijack it. This question alerts when such a modification is made by an unauthorized principal.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Windows Event ID 13
      - Application Servers
      - Domain Controllers
      - Privileged Access Workstations
    range: last 90 days
    queries:
      - pseudocode: ON modification of watched_config_file_or_regkey, IF modifying_user is not admin OR modifying_process_integrity is not High/System, ALERT.
  - question: Is a configuration modification to a high-privilege .NET application being performed by a statistically rare combination of user and process?
    context: >-
      This question goes beyond a static allowlist by learning who and what normally modifies sensitive configurations. It can then flag anomalous modifications, such as a standard user account using explorer.exe to change a SYSTEM service's config file, as a high-risk event.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Windows Event ID 13
      - Application Servers
      - Domain Controllers
      - Privileged Access Workstations
    range: last 90 days
    queries:
      - pseudocode: FOR each config_modification_event, CALCULATE anomaly_score based on rarity of (user, process, target_file). IF score > threshold, ALERT.
  - question: Has a user's action of modifying a system-level .NET config file been flagged as a significant deviation from the behavior of their peers?
    context: >-
      User and Entity Behavior Analytics (UEBA) can identify when an individual's actions are abnormal compared to their role-based peers. This question leverages UEBA to detect if a user, for example, a member of the 'Marketing' group, performs an action (modifying a system config) that is typical for 'Domain Admins' but not their own group, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 11
      - Windows Event ID 13
      - Application Servers
      - Domain Controllers
      - Privileged Access Workstations
    range: last 90 days
    queries:
      - pseudocode: INPUT user_activity (modify system .NET config) into UEBA_model. IF user_behavior deviates from peer_group_baseline, ALERT.
  - question: Has a high-privilege .NET service spawned a child process, such as cmd.exe or powershell.exe, that is not on its approved allowlist?
    context: >-
      Once a high-privilege process is hijacked, adversaries often use it to spawn an interactive shell for further actions. This question uses a strict allowlist approach to detect any unexpected child process, providing a high-fidelity alert for post-escalation activity.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 4720
      - Domain Controllers
      - Member Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - pseudocode: FOR high_privilege_dotnet_service, IF spawned_child_process not in allowlist, ALERT.
  - question: Has a high-privilege .NET process spawned a historically rare child process, or is the child process's command line indicative of obfuscation?
    context: >-
      This question uses statistical analysis to find anomalies in process lineage. It flags parent-child relationships that have rarely or never been seen before. Additionally, it analyzes the command line of the child process for high entropy, which can suggest the use of encoded or obfuscated commands, a common attacker technique.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 4720
      - Domain Controllers
      - Member Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - pseudocode: FOR parent_child_pair (high_priv_dotnet_parent), IF pair_frequency < threshold, ALERT. CALCULATE child_cmd_line_entropy. IF entropy > threshold, INCREASE_RISK.
  - question: Does a process activity graph show an anomalous path originating from a high-privilege .NET service, such as spawning a process that then accesses the network?
    context: >-
      This question models process activity as a graph to understand complex chains of events. An anomaly is detected when a new, unexpected path appears in the graph, such as a normally isolated system service suddenly spawning a shell that connects to the internet. This contextualizes the activity and detects suspicious sequences.
    answer_sources:
      - Windows Event ID 1
      - Windows Event ID 4720
      - Domain Controllers
      - Member Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - pseudocode: MODEL process_activity as a graph. IF new_path from high_priv_dotnet_service is anomalous (e.g., leads to network_connection), ALERT.
  - question: Has a trusted, signed .NET process like MSBuild.exe initiated a network connection to a known malicious IP address or domain?
    context: >-
      This is a classic defense evasion technique: using a legitimate, trusted application to perform malicious actions ("living off the land"). This question specifically looks for trusted .NET binaries making connections to destinations found on threat intelligence feeds, which is a very strong indicator of compromise.
    answer_sources:
      - Windows Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points
      - DNS Servers
      - Endpoint Fleet
      - Developer Workstations
      - Build Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_connections from trusted_dotnet_process_list. JOIN with threat_intel_feed on (destination_ip, destination_domain). ALERT on match.
  - question: Is a trusted .NET process using an unusual TLS fingerprint (JA3/JA3S), connecting to a rare ASN, or making DNS queries with high entropy?
    context: >-
      Adversaries may inject code that uses its own networking library, resulting in a different TLS fingerprint (JA3/JA3S) than the legitimate application. This question aims to detect these subtle changes, along with other network anomalies like connecting to unusual network locations (ASNs) or using domain generation algorithms (high DNS query entropy).
    answer_sources:
      - Windows Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points
      - DNS Servers
      - Endpoint Fleet
      - Developer Workstations
      - Build Servers
    range: last 90 days
    queries:
      - pseudocode: FOR trusted_dotnet_process, BASELINE network characteristics. IF JA3_hash is new OR destination_ASN is rare OR DNS_query_entropy is high, ALERT.
  - question: Does a time-series model detect a shift in the network traffic pattern of a trusted .NET process towards rigid, periodic beaconing?
    context: >-
      Legitimate user-driven or system applications usually have 'bursty' or random network traffic. C2 implants often use robotic, periodic beaconing. This question applies a time-series model to detect when a trusted process's traffic pattern changes from normal to this highly structured C2-like behavior.
    answer_sources:
      - Windows Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network Egress Points
      - DNS Servers
      - Endpoint Fleet
      - Developer Workstations
      - Build Servers
    range: last 90 days
    queries:
      - pseudocode: APPLY time-series_model to network_traffic of trusted_dotnet_process. IF model detects shift to periodic beaconing pattern, ALERT.
  - question: Has a script interpreter like powershell.exe or cmd.exe set 'COMPLUS_AppDomainManager_Assembly' in its command line and then immediately launched a trusted .NET application?
    context: >-
      This is a specific and highly suspicious execution chain. An adversary uses a script to set the hijacking environment variables and then immediately launches the target .NET application. Detecting this parent-child sequence provides a strong signal of a defense evasion attempt.
    answer_sources:
      - Windows Event ID 1
      - Endpoint Fleet
      - Developer Workstations
      - Servers running .NET applications
    range: last 90 days
    queries:
      - pseudocode: SEARCH for process_creation where parent is (powershell.exe, cmd.exe) AND parent_cmd_line contains "COMPLUS_AppDomainManager_..." AND child is trusted_dotnet_app. ALERT on match.
  - question: When a trusted .NET application is launched, is the parent process's command line an outlier in terms of length or character distribution?
    context: >-
      To evade simple string matching, adversaries often obfuscate or encode payloads within command lines, making them unusually long or filled with non-standard characters. This question uses statistical analysis to flag command lines that are outliers, suggesting they may contain a hidden payload.
    answer_sources:
      - Windows Event ID 1
      - Endpoint Fleet
      - Developer Workstations
      - Servers running .NET applications
    range: last 90 days
    queries:
      - pseudocode: FOR command_lines launching trusted_dotnet_apps, CALCULATE length and char_frequency stats. IF command_line is outlier (e.g., >3 std dev in length), ALERT.
  - question: Does a sequence-based machine learning model flag the parent-child command line pair as an anomalous execution sequence?
    context: >-
      This question uses a more advanced model (like an LSTM) that understands the *sequence* of commands and arguments. It can learn what normal interactions look like and flag deviations, such as a command prompt passing a long, Base64-encoded string as an environment variable to a .NET compiler, as highly anomalous.
    answer_sources:
      - Windows Event ID 1
      - Endpoint Fleet
      - Developer Workstations
      - Servers running .NET applications
    range: last 90 days
    queries:
      - pseudocode: INPUT parent_cmd_line and child_cmd_line into sequence_model. IF model flags sequence as anomalous, ALERT.
  - question: Has a known .NET LOLbin (like InstallUtil.exe) created an executable file in a suspicious location or attempted to access the memory of lsass.exe?
    context: >-
      This question uses specific, high-confidence rules to detect when a legitimate .NET tool is used for malicious purposes. Actions like writing a new DLL to a public folder or trying to dump credentials from LSASS are not normal behaviors for these tools and are strong indicators of compromise.
    answer_sources:
      - Windows Event ID 10
      - Windows Event ID 11
      - Windows Event ID 13
      - Endpoint Fleet
      - File Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: ALERT if dotnet_lolbin creates .exe/.dll in world_writable_dir OR dotnet_lolbin attempts to read lsass.exe memory.
  - question: Has a trusted .NET LOLbin accessed a file path, such as a browser credential store, that is statistically rare for that process?
    context: >-
      This question builds a profile of normal file access for each .NET LOLbin. It then flags any access to an unusual or sensitive path (like a user's browser profile folder) as anomalous. This can detect credential theft attempts that use legitimate tools to evade detection.
    answer_sources:
      - Windows Event ID 10
      - Windows Event ID 11
      - Windows Event ID 13
      - Endpoint Fleet
      - File Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: FOR each dotnet_lolbin, BASELINE file_access_patterns. IF process accesses statistically rare path (e.g., browser profile), ALERT.
  - question: Does a clustering algorithm group the behavior of a trusted .NET process with known malware or identify it as a unique, isolated anomaly?
    context: >-
      This question takes a holistic view of a process's behavior (file access, registry mods, network connections). By using a clustering algorithm, it can identify when a trusted .NET process's overall activity profile looks more like known malware than its legitimate peers, or when it behaves so uniquely that it forms its own anomalous cluster.
    answer_sources:
      - Windows Event ID 10
      - Windows Event ID 11
      - Windows Event ID 13
      - Endpoint Fleet
      - File Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: CLUSTER processes based on activity features (file_paths, reg_keys, net_conns). IF trusted_dotnet_process is in malware_cluster OR is isolated_anomaly, ALERT.