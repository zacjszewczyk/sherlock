name: T1574.014: AppDomainManager
id: 3a9e8f6c-8d1b-4f7e-9a2c-5b0d1e4a6f3b
description: This playbook focuses on detecting adversaries hijacking the .NET AppDomainManager for persistence, privilege escalation, and defense evasion. This technique involves an adversary setting specific environment variables (COMPLUS_AppDomainManager_Assembly, COMPLUS_AppDomainManager_Type) or modifying .NET configuration files (<appDomainManagerAssembly>, <appDomainManagerType>) to force a legitimate .NET process to load a malicious DLL. Detections should focus on identifying the setting of these indicators, the loading of unusual modules (unsigned, rare, or known-malicious) by .NET processes, especially high-privilege or trusted processes, and subsequent malicious behavior such as establishing persistence (new services, scheduled tasks), spawning unexpected child processes (cmd.exe), or exhibiting C2 network patterns (beaconing, connections to malicious IPs).
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a .NET process loading a malicious module or connecting to a known malicious IP/domain?
  context: This question aims to detect the most direct evidence of hijacking, where a .NET process is compromised and used to load a known malicious DLL or communicate with command-and-control infrastructure. A match against threat intelligence is a high-confidence indicator of malicious activity.
  answer_sources:
  - Windows Event ID 7
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Fleet
  - Application Servers
  - Developer Workstations
  - Network Egress Points
  - DNS Servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH .NET process events (module loads, network connections). JOIN hash/IP/domain with Threat Intel Feed. ALERT on match.
- question: Is a .NET process loading an unusually rare, unsigned module or connecting to an anomalous network destination?
  context: Adversaries often use custom or rare tools that are not signed. This question looks for statistical anomalies that suggest a legitimate .NET process has been co-opted. It identifies unsigned DLLs with low prevalence across the enterprise or network connections to Autonomous Systems that the process does not normally communicate with, which can indicate C2 or data exfiltration channels.
  answer_sources:
  - Windows Event ID 7
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Fleet
  - Application Servers
  - Developer Workstations
  - Network Egress Points
  - DNS Servers
  range: last 90 days
  queries:
  - pseudocode: FOR each .NET process, FIND loaded modules. IF module is unsigned AND prevalence < 1%, FLAG. FOR each .NET process, FIND destination ASN. IF ASN is statistically rare, FLAG.
- question: Does the overall behavior of a .NET process (parent, command line, loaded modules, network destinations) align with a machine learning model's definition of malicious activity?
  context: This question leverages machine learning to perform a holistic assessment of a .NET process's behavior. By combining multiple weak signals—such as loading a rare module and connecting to a new external address—a classification model can identify complex hijacking patterns that might be missed by single-indicator rules. A high probability score from the model suggests likely compromise.
  answer_sources:
  - Windows Event ID 7
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Fleet
  - Application Servers
  - Developer Workstations
  - Network Egress Points
  - DNS Servers
  range: last 90 days
  queries:
  - pseudocode: INPUT process features (parent, cmdline, modules, netconns) into classification model. IF model_score > threshold, ALERT.
- question: Is a process being created with AppDomainManager environment variables in its command line, or is a .NET config file being modified to set the AppDomainManager?
  context: This is a direct detection for the setup phase of this technique. Adversaries must set specific environment variables ('COMPLUS_AppDomainManager_Assembly', 'COMPLUS_AppDomainManager_Type') or modify a .config file with specific XML tags ('<appDomainManagerAssembly>') to hijack the AppDomainManager. Monitoring for the appearance of these literal strings in command lines or file modifications provides a high-fidelity signal of an attempted hijack.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Domain Controllers
  - Application Servers (e.g., IIS)
  - Developer Workstations
  - Endpoint Fleet
  range: last 90 days
  queries:
  - pseudocode: SEARCH process creation events FOR command line containing 'COMPLUS_AppDomainManager_*'. SEARCH file modification events on *.config files FOR '<appDomainManagerAssembly>'. ALERT on match.
- question: Is the process or user setting AppDomainManager properties statistically anomalous?
  context: While some legitimate developer or administrative actions might set AppDomainManager properties, these actions are typically performed by specific users and processes. This question seeks to find outliers. For example, if a standard user's Microsoft Word process modifies a .config file, it's highly suspicious. Calculating an anomaly score based on the rarity of the user-process combination helps distinguish malicious activity from benign administrative tasks.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Domain Controllers
  - Application Servers (e.g., IIS)
  - Developer Workstations
  - Endpoint Fleet
  range: last 90 days
  queries:
  - pseudocode: FOR each AppDomainManager modification event, CALCULATE anomaly score for user-process pair. IF score > threshold (e.g., 3 std dev), ALERT.
- question: Does a process command line containing 'COMPLUS_AppDomainManager' appear anomalous when compared to historical command line data?
  context: Adversaries often embed payloads or unusual parameters in command lines, making them structurally different from normal commands. This question uses an unsupervised learning model to learn the patterns of normal command lines. It can then flag commands that, while containing the necessary 'COMPLUS_AppDomainManager' string, are structured in a way that the model identifies as a significant anomaly, indicating potential obfuscation or malicious intent.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Domain Controllers
  - Application Servers (e.g., IIS)
  - Developer Workstations
  - Endpoint Fleet
  range: last 90 days
  queries:
  - pseudocode: INPUT command lines containing 'COMPLUS_AppDomainManager' into anomaly detection model. IF model flags as high-scoring anomaly, ALERT.
- question: Did a .NET process create a new persistence mechanism (Scheduled Task, Service, Run Key) shortly after it started?
  context: A common post-compromise step is to establish long-term persistence. This question looks for a temporal link between the start of a .NET process and the creation of a common persistence mechanism. If a .NET application, within a minute of launching, also creates a new service or a scheduled task, it strongly suggests the application was hijacked to install a backdoor.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 12
  - Windows Event ID 13
  - Windows Event ID 4698
  - Windows Event ID 7045
  - Domain Controllers
  - Application Servers
  - Endpoint Fleet
  range: last 90 days
  queries:
  - pseudocode: SEARCH for .NET process creation. WITHIN 60 seconds for same process ID, SEARCH for new Scheduled Task, Service, or Run Key creation. ALERT on match.
- question: Is a .NET process exhibiting robotic, beacon-like network behavior?
  context: Command-and-control implants often communicate with their server on a regular, predictable schedule (beaconing). This question aims to detect this behavior by baselining a process's normal network activity. A sudden shift to highly regular time intervals between connections (low standard deviation) or an unusual burst of connections can indicate that the process has been hijacked and is now communicating with a C2 server.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Domain Controllers
  - Application Servers
  - Endpoint Fleet
  - Network Egress Points
  range: last 90 days
  queries:
  - pseudocode: FOR each .NET process, BASELINE network connection time deltas. IF time delta std dev is unusually low OR connection count spikes above 99th percentile, ALERT.
- question: Has the network traffic profile of a .NET process significantly deviated from its forecasted behavior?
  context: This question uses a more advanced statistical method to detect behavioral changes. By creating a time-series forecast for metrics like bytes sent or unique ports contacted, we can predict what the process's network behavior should look like. If the actual observed behavior falls outside the model's confidence interval, it signals a significant and unexpected change, potentially caused by a hijack.
  answer_sources:
  - Zeek conn.log
  - Domain Controllers
  - Application Servers
  - Endpoint Fleet
  - Network Egress Points
  range: last 90 days
  queries:
  - pseudocode: FOR each .NET process, FORECAST network metrics (bytes, ports). IF observed metrics significantly deviate from forecast, ALERT.
- question: Is a high-privilege .NET process loading an unsigned or known-malicious DLL?
  context: This targets privilege escalation by looking for a process already running with high or system integrity loading a suspicious module. A high-privilege process is a valuable target for an attacker, and loading an unsigned or known-bad DLL into it is a direct method of executing code with elevated permissions.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Domain Controllers
  - Critical Application Servers
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - pseudocode: SEARCH module loads (Win EID 7) for processes with High/System integrity (Win EID 1). IF module is unsigned OR hash matches TI feed, ALERT.
- question: Is a high-privilege .NET process loading a DLL that is extremely rare across the enterprise?
  context: Similar to the persistence check, but focused on high-privilege processes. Legitimate system processes typically load a predictable set of common DLLs. The introduction of a very rare DLL into a high-privilege process is a strong anomaly, suggesting an attacker is using a custom tool to escalate or maintain privileged access.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Domain Controllers
  - Critical Application Servers
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - pseudocode: FOR high-privilege .NET processes, CALCULATE prevalence of all loaded DLLs. IF DLL prevalence is below threshold (e.g., < 5 hosts), ALERT.
- question: Does a machine learning model classify a module load by a high-privilege process as high-risk?
  context: This question uses a risk-scoring model to combine factors like process integrity, module signature status, and module prevalence. This provides a more nuanced detection than a simple rule, allowing for the identification of suspicious events that might not trigger individual alerts but are risky when considered together, specifically in the context of privilege escalation.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Domain Controllers
  - Critical Application Servers
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - pseudocode: INPUT module load features (process integrity, module signed status, prevalence) into classification model. IF risk_score is high for high-integrity process, ALERT.
- question: Is a low-privilege user or process modifying the AppDomainManager configuration for a high-privilege application?
  context: This question focuses on a clear violation of privilege boundaries. Configuration for high-privilege services should only be modified by administrators. If a standard user account or a medium-integrity process alters the .config file or registry key for a SYSTEM-level .NET service, it is a very strong indicator of a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Windows Event ID 13
  - Application Servers
  - Domain Controllers
  - Privileged Access Workstations
  range: last 90 days
  queries:
  - pseudocode: ON watchlist of high-privilege .config/registry keys, ALERT if modification is from non-High/System integrity process or non-admin user.
- question: Is the user and process combination modifying a high-privilege .NET configuration anomalous?
  context: This question looks for unusual behavior patterns related to configuration changes. Even if an administrator account is used, the way the change is made can be suspicious. For example, an administrator modifying a service config via explorer.exe instead of a management console would be statistically rare and generate a high anomaly score, suggesting the account may be compromised.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Windows Event ID 13
  - Application Servers
  - Domain Controllers
  - Privileged Access Workstations
  range: last 90 days
  queries:
  - pseudocode: PROFILE user-process-target combinations for config changes. IF a modification's anomaly score is >3 std dev from norm, ALERT.
- question: Does a user's modification of a system-level .NET config file deviate from the behavior of their peers?
  context: This question uses User and Entity Behavior Analytics (UEBA) to spot outliers. The model understands what is normal for a group of users (e.g., "Database Administrators"). If one DBA starts modifying .NET service configs while none of their peers do, the model flags this as a deviation, suggesting a potential account compromise or insider threat.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 11
  - Windows Event ID 13
  - Application Servers
  - Domain Controllers
  - Privileged Access Workstations
  range: last 90 days
  queries:
  - pseudocode: USE UEBA model to compare user activity to peer group. IF user modifying .NET config is an outlier in their peer group, ALERT.
- question: Has a high-privilege .NET service spawned an unexpected child process like a command shell?
  context: Legitimate high-privilege services have predictable process behaviors. Spawning an interactive shell like cmd.exe or powershell.exe is almost always a sign of compromise, as it gives an attacker direct, privileged access to the system. This question uses a strict allowlist to detect any such deviation.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4720
  - Domain Controllers
  - Member Servers
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - pseudocode: FOR high-privilege .NET services, CHECK child processes against allowlist. ALERT on any deviation, especially shells (cmd, powershell).
- question: Has a high-privilege .NET service created a statistically rare parent-child process relationship?
  context: This question looks for anomalous process lineage without requiring a pre-built allowlist. By analyzing historical data, it can identify when a high-privilege service spawns a child process it has never spawned before. It also analyzes the child's command line for high entropy, which can indicate obfuscation used to hide malicious commands.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4720
  - Domain Controllers
  - Member Servers
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - pseudocode: CALCULATE frequency of parent-child pairs. ALERT on rare pairs (e.g., <0.1% frequency) involving high-privilege .NET parent. INCREASE risk if child command line has high entropy.
- question: Does the process activity chain originating from a high-privilege .NET service form an anomalous graph?
  context: This question models process activity as a graph to detect complex, multi-step attack chains. A legitimate service might spawn a helper process, but it's anomalous if that helper process then connects to the internet or modifies a sensitive file. A graph-based model can detect these unusual sequences of actions.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 4720
  - Domain Controllers
  - Member Servers
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - pseudocode: MODEL process lineage and actions as a graph. SEARCH for anomalous paths originating from high-privilege .NET services. ALERT on anomaly.
- question: Is a trusted, signed .NET process (LOLbin) communicating with a known malicious destination?
  context: This question targets a key defense evasion tactic, using a legitimate, trusted application to carry out malicious activity. By correlating its network traffic against threat intelligence, we can catch instances where a trusted process like MSBuild.exe is being used as a proxy for C2 communications.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network Egress Points
  - DNS Servers
  - Endpoint Fleet
  - Developer Workstations
  - Build Servers
  range: last 90 days
  queries:
  - pseudocode: FILTER network connections from trusted .NET LOLbins (MSBuild, InstallUtil). JOIN destination IP/domain with CTI feed. ALERT on match.
- question: Is a trusted .NET process exhibiting anomalous network characteristics, such as a rare JA3/JA3S hash or DGA-like DNS queries?
  context: Attackers may use custom TLS libraries or Domain Generation Algorithms (DGAs) that differ from the legitimate application's normal behavior. A change in the TLS client fingerprint (JA3/JA3S) or a sudden spike in the randomness of DNS queries can reveal that a trusted process's network stack has been hijacked for C2.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Network Egress Points
  - DNS Servers
  - Endpoint Fleet
  - Developer Workstations
  - Build Servers
  range: last 90 days
  queries:
  - pseudocode: BASELINE JA3/JA3S hashes and DNS query entropy for trusted .NET processes. ALERT if a new JA3/JA3S appears or DNS entropy spikes.
- question: Is a trusted .NET process showing signs of rigid, periodic C2 beaconing in its network traffic?
  context: This question uses time-series analysis to distinguish human-driven network traffic from the robotic, periodic patterns of C2 beacons. A trusted process that suddenly starts communicating on a fixed interval is highly indicative of being compromised for C2, a classic defense evasion technique.
  answer_sources:
  - Zeek conn.log
  - Network Egress Points
  - DNS Servers
  - Endpoint Fleet
  - Developer Workstations
  - Build Servers
  range: last 90 days
  queries:
  - pseudocode: USE time-series model on trusted .NET process network traffic. ALERT if model detects rigid, periodic patterns characteristic of C2 beaconing.
- question: Is a command shell setting AppDomainManager environment variables before launching a trusted .NET application?
  context: This question looks for a specific, high-fidelity launch sequence for hijacking a trusted LOLbin. An attacker uses a shell (cmd.exe or powershell.exe) to set the malicious environment variables and then immediately launch the target .NET application. This 'wrapper' approach is a common way to inject malicious code into a trusted process at startup.
  answer_sources:
  - Windows Event ID 1
  - Endpoint Fleet
  - Developer Workstations
  - Servers running .NET applications
  range: last 90 days
  queries:
  - pseudocode: SEARCH for parent (cmd, powershell) with 'COMPLUS_AppDomainManager_*' in cmdline that spawns a trusted .NET child process. ALERT on this sequence.
- question: Is the command line used to launch a trusted .NET application anomalously long or complex?
  context: To evade detection, attackers may encode payloads or use heavy obfuscation within the command line itself. This question looks for statistical outliers in command line structure. A command that is significantly longer than usual or contains an unusual distribution of characters for a given process can indicate an attempt to pass malicious data.
  answer_sources:
  - Windows Event ID 1
  - Endpoint Fleet
  - Developer Workstations
  - Servers running .NET applications
  range: last 90 days
  queries:
  - pseudocode: ANALYZE command line length and character frequency for trusted .NET apps. ALERT if command line is an outlier (>3 std dev from mean length).
- question: Is a sequence-based model flagging the command-line interaction between a parent process and a trusted .NET child as anomalous?
  context: This question uses a model (e.g., LSTM) that understands the sequence and structure of legitimate command-line arguments. If a trusted application is suddenly called by an unusual parent with an abnormal argument structure (like a Base64 string), the model will recognize this sequence as a deviation from learned benign behavior.
  answer_sources:
  - Windows Event ID 1
  - Endpoint Fleet
  - Developer Workstations
  - Servers running .NET applications
  range: last 90 days
  queries:
  - pseudocode: TRAIN sequence model (e.g., LSTM) on parent-child command line pairs. ALERT if model flags a sequence involving a trusted .NET child as anomalous.
- question: Is a trusted .NET LOLbin performing suspicious follow-on actions like writing executables or accessing credentials?
  context: This question focuses on the post-hijack behavior of a 'living-off-the-land' binary. A trusted binary like RegAsm.exe has no legitimate reason to write a new executable file to a public directory or access the LSASS process memory. This rule looks for these clear indicators of malicious activity being performed under the guise of a trusted process.
  answer_sources:
  - Windows Event ID 10
  - Windows Event ID 11
  - Windows Event ID 13
  - Endpoint Fleet
  - File Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: ALERT when a .NET LOLbin writes an EXE/DLL to a non-standard path (e.g., C:\Users\Public) or attempts to access lsass.exe.
- question: Is a trusted .NET LOLbin accessing statistically rare file paths, such as browser credential stores?
  context: This question uses statistical rarity to find suspicious file access. By baselining the file paths normally accessed by a LOLbin like MSBuild.exe, we can flag any access to a path that is highly unusual for that process. Accessing a path inside a user's browser profile to steal credentials would be a prime example of such a rare and malicious action.
  answer_sources:
  - Windows Event ID 11
  - Endpoint Fleet
  - File Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: BASELINE file access patterns for .NET LOLbins. ALERT if a LOLbin accesses a statistically rare file path (e.g., a path in a browser profile).
- question: Does the collective activity of a trusted .NET process cause it to be clustered with known malware by an unsupervised model?
  context: This question takes a holistic, behavioral view. An unsupervised clustering algorithm groups processes based on their overall activity. If a trusted .NET process, after being hijacked, starts behaving like known malware, the model will group it into the same cluster, effectively re-categorizing the trusted process as malicious based on its actions.
  answer_sources:
  - Windows Event ID 10
  - Windows Event ID 11
  - Windows Event ID 13
  - Endpoint Fleet
  - File Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: USE clustering algorithm (e.g., DBSCAN) on process activity features. ALERT if a trusted .NET process is grouped in a cluster with known malware.