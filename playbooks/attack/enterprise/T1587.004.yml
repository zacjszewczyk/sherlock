name: T1587.004: Exploits
id: 5e9b8f2c-7a9d-4b8e-8f2a-7c8d9e0f1a2b
description: This playbook focuses on identifying if an adversary is actively testing or deploying newly developed exploits against the network perimeter. It involves detecting outbound connections to known malicious infrastructure, analyzing inbound web requests for signs of vulnerability scanning, identifying network port scanning activities (both vertical and horizontal), flagging anomalous network sessions to known-vulnerable services, and correlating application crashes on public-facing servers with preceding suspicious network activity from untrusted sources.
type: technique
related:
- TA0042: Resource Development
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are internal hosts making successful outbound connections to IP addresses or domains known for exploit development or malware staging?
  context: This question aims to detect direct communication with adversary infrastructure. By correlating network logs with threat intelligence, we can identify compromised hosts or malicious activity trying to download tools or establish command and control. A successful connection to a known-bad destination is a high-fidelity indicator of a potential breach.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Threat intelligence feeds
  - Egress points of the network, including internet gateways and forward proxy servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN (Zeek conn.log, Zeek dns.log) WITH (Threat Intel List) WHERE connection_state NOT IN ('S0', 'REJ', 'RSTO') AND tag IN ('exploit-development', 'vulnerability-research', 'malware-staging')
- question: Is an internal host connecting to an unusually high number of newly registered domains compared to its own baseline?
  context: Adversaries often use newly registered domains (NRDs) for their campaigns to evade reputation-based blocking. This question helps identify this tactic by baselining normal behavior for each host. A significant deviation from this baseline when connecting to very new domains can indicate algorithmically generated domains (DGA) or a new attack campaign.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - WHOIS data
  - Egress points of the network, including internet gateways and forward proxy servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM (Outbound Connections) CALCULATE (Baseline of connections to new domains per host); ALERT WHERE (Connection to domain registered < 30 days) AND (Connection volume > 3 * stddev of baseline)
- question: Can we use machine learning to predict if an outbound connection is malicious based on its characteristics?
  context: This question explores a proactive, predictive approach. By training a model on features like destination IP reputation, ASN, geo-location, port, protocol, and data transfer volume, we can score new, unseen connections. This helps surface suspicious activity that might not match known indicators, providing a more robust and adaptive detection capability.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - IP Reputation Data
  - ASN Data
  - Geolocation Data
  - Egress points of the network, including internet gateways and forward proxy servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCORE (New Outbound Connections) USING (Trained Classification Model); ALERT WHERE (Maliciousness Probability > Threshold)
- question: Are we observing inbound web requests from unauthorized sources with User-Agents or URIs matching known vulnerability scanners?
  context: Adversaries begin reconnaissance by scanning for vulnerabilities. This question focuses on detecting the tools they use. By matching User-Agent strings and URI patterns against a list of known scanners (like Nmap, Nuclei, Metasploit) and excluding authorized internal scanners, we can identify external reconnaissance efforts against our public-facing web applications.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers, reverse proxies, and Web Application Firewalls (WAFs) in the DMZ.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Zeek http.log) FOR (regex match on user_agent OR uri for known scanners) WHERE source_ip NOT IN (Authorized Scanners); ALERT
- question: Is a single external IP generating web requests with an unusually high variety of URI paths, combined with a high rate of errors?
  context: This question aims to detect automated scanning or fuzzing behavior that doesn't rely on specific signatures. A high entropy in requested URIs from a single source suggests the scanner is trying many different paths, possibly looking for hidden files or vulnerabilities. A corresponding high rate of client/server errors (4xx/5xx) reinforces that this is likely non-legitimate probing rather than normal user browsing.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers, reverse proxies, and Web Application Firewalls (WAFs) in the DMZ.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR (each source IP in 5min window) CALCULATE (Shannon Entropy of URI); ALERT WHERE (URI entropy > 98th percentile) AND (Rate of 4xx/5xx status codes is high)
- question: Can we automatically classify inbound User-Agent strings to identify new or unknown scanning tools?
  context: Signature-based detection can miss new or customized tools. This question uses unsupervised machine learning to group similar User-Agent strings. By analyzing the characteristics of these strings (e.g., token count, structure), we can identify clusters that represent scanners or bots. Any new User-Agent falling into a "scanner" cluster that isn't on an allowlist can be flagged for investigation.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Public-facing web servers, reverse proxies, and Web Application Firewalls (WAFs) in the DMZ.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER (User-Agent strings) USING (K-Means on features); CLASSIFY (New User-Agents); ALERT WHERE (cluster == 'scanner') AND (source NOT in allowlist)
- question: Is a single external IP attempting to connect to a large number of ports on one host (vertical scan) or to many hosts on the same port (horizontal scan)?
  context: This question looks for classic network scanning patterns. A vertical scan (port scan) seeks to identify all open services on a single target, while a horizontal scan seeks a specific vulnerable service across many targets. Detecting these high-volume, systematic connection attempts in a short time window is a fundamental way to identify active reconnaissance.
  answer_sources:
  - Zeek conn.log
  - Internet-facing firewalls, network gateways, and DMZ network segments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Zeek conn.log in 1min window) WHERE (count(distinct destination_ports) > 20 for one destination_host) OR (count(distinct destination_hosts) > 20 for one destination_port); ALERT
- question: Can we statistically identify vertical and horizontal scanning behavior by analyzing the ratio of unique ports to unique hosts?
  context: This provides a more nuanced way to detect scanning than simple thresholding. By calculating the ratio of ports-to-hosts for a given source IP, we can differentiate between normal traffic and scanning. A high ratio indicates a vertical scan (many ports, few hosts), while a low ratio with a high host count suggests a horizontal scan. This method is more resilient to slow scanning techniques.
  answer_sources:
  - Zeek conn.log
  - Internet-facing firewalls, network gateways, and DMZ network segments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR (each source IP in 5min window) CALCULATE (ratio = unique_ports / unique_hosts); ALERT WHERE (ratio > 10) OR (ratio < 1 AND unique_hosts > 10)
- question: Can we use graph analysis to visualize and detect scanning communities within our network traffic?
  context: This question applies graph theory to network security. By modeling IPs as nodes and connections as edges, we can use algorithms to find "communities" or densely connected subgraphs. A scanning pattern will appear as a community where a single external node has many connections to a large number of internal nodes, making it visually and algorithmically distinct from normal traffic patterns.
  answer_sources:
  - Zeek conn.log
  - Internet-facing firewalls, network gateways, and DMZ network segments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL (IPs as nodes, connections as edges) in Graph DB; APPLY (Community Detection); IDENTIFY (Communities with one external IP connected to many internal IPs)
- question: Are untrusted external IPs attempting to connect to services we know are vulnerable?
  context: This is a highly targeted question that prioritizes risk. By correlating real-time network traffic with vulnerability scan data (e.g., a list of hosts with unpatched, high-severity vulnerabilities), we can immediately flag any connection attempt from an unapproved source to a known-vulnerable port. This provides an early warning of a potential targeted exploit attempt.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Vulnerability Scan Data
  - Public-facing application servers, VPN concentrators, RDP Gateway servers, and other remotely accessible services.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN (Inbound Zeek conn.log, Vulnerable Host/Port List) WHERE (source_ip NOT IN allowlist); ALERT
- question: Are connections to our critical, vulnerable services exhibiting anomalous characteristics like unusual data sizes or session durations?
  context: This question aims to detect exploit attempts even without a specific signature. Legitimate traffic to a service usually has predictable characteristics (e.g., payload size, duration). An exploit attempt, buffer overflow, or probe may deviate significantly. By baselining normal connection metrics and alerting on outliers, we can spot these non-standard interactions.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Public-facing application servers, VPN concentrators, RDP Gateway servers, and other remotely accessible services.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR (each critical port) ESTABLISH (baseline of connection metrics); ALERT ON (new connection) WHERE (metrics are outside 5th-95th percentile)
- question: Can we use an unsupervised machine learning model to detect potential exploit attempts against a specific vulnerable service?
  context: This question leverages anomaly detection for high-value targets. By training a model like an Isolation Forest on the metadata of known-good connections to a specific vulnerable service, we can create a highly tailored detector. The model learns what "normal" looks like for that service and can then score new connections in real-time, flagging those that are statistically different and thus potentially malicious.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Public-facing application servers, VPN concentrators, RDP Gateway servers, and other remotely accessible services.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCORE (new connections to service) USING (trained Isolation Forest model); ALERT WHERE (anomaly score is high)
- question: Did a critical application on a public-facing server crash immediately after a network session with an untrusted external IP?
  context: This question directly links a potential cause (network connection) with an effect (application crash). A successful or failed exploit attempt can often cause the target application to become unstable and crash. By correlating application crash events (like Windows Event ID 1000) with preceding network connections from unknown sources, we can pinpoint the likely source of a potential exploit.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 1001
  - Zeek conn.log
  - Public-facing Windows-based servers (e.g., running IIS, Exchange, RDP services).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON (Windows Event ID 1000) SEARCH (Zeek conn.log) FOR (connection to server from non-allowlisted IP that ended <60s before event); ALERT
- question: Is there a statistical correlation between a spike in new external IP connections and a subsequent spike in application crashes on a server?
  context: This question looks for broader patterns of cause and effect over time. Instead of linking a single connection to a single crash, it uses time-series analysis. If we consistently observe that a surge in connection attempts from new IPs is followed by an increase in the application crash rate, it strongly suggests that the server is being targeted by scanning or exploitation attempts that are causing instability.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 1001
  - Zeek conn.log
  - Public-facing Windows-based servers (e.g., running IIS, Exchange, RDP services).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE (Cross-correlation between time series of new IPs and time series of Event ID 1000); ALERT WHERE (correlation is statistically significant)
- question: Can we statistically prove that connection attempts from a specific external IP are causing application crashes on a server?
  context: This question applies a rigorous statistical test to establish causality. The Granger causality test determines if one time series is useful for forecasting another. If the history of connection attempts from a specific IP helps predict future application crashes on a server, it provides strong statistical evidence that the connections are the cause, effectively identifying an attacker's IP that is successfully or unsuccessfully exploiting a service.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 1001
  - Zeek conn.log
  - Public-facing Windows-based servers (e.g., running IIS, Exchange, RDP services).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: APPLY (Granger causality test) WHERE (X = time series of connections from source IP) AND (Y = time series of Event ID 1000); ALERT WHERE (p-value is significant)