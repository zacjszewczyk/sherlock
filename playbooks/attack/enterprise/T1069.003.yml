name: T1069.003: Cloud Groups
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary has attempted to discover cloud groups and permissions. It focuses on identifying enumeration activity through various means, such as specific command-line arguments or API calls (e.g., 'Get-MsolRole', 'ListRolePolicies'), high-volume or rapid execution of enumeration commands from a single user or IP, behavioral deviations from established user or peer group baselines, and enumeration originating from high-risk sources (e.g., IPs on threat feeds, rare geolocations). The playbook also looks for suspicious sequences, such as enumeration followed closely by a high-risk action like privilege escalation, and anomalous network traffic patterns to cloud API endpoints from internal hosts.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events or cloud audit logs containing command-line arguments or API calls that are high-fidelity indicators of cloud group discovery?
    context: This question aims to detect known malicious or reconnaissance commands using a symbolic, signature-based approach. By maintaining a watchlist of specific command strings and API calls strongly associated with discovery (e.g., 'Get-MsolRole', 'ListRolePolicies', 'az ad user get-member-groups'), analysts can create high-fidelity alerts. This is most effective when combined with an allowlist for known administrative users or systems to reduce false positives.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Cloud provider IAM/Audit Log services
      - Domain Controllers
      - Administrator workstations
      - CI/CD pipeline runners
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH process_creation_logs OR cloud_audit_logs
          WHERE (command_line CONTAINS 'Get-MsolRole' OR 'ListRolePolicies' OR 'az ad user get-member-groups' OR 'gcloud iam roles list')
          AND (user NOT IN admin_allowlist OR source_system NOT IN admin_allowlist)
          GROUP BY user, command_line

  - question: Are there any command-line arguments for cloud CLI tools with unusually high entropy, suggesting obfuscation or complex scripting?
    context: This question seeks to identify potentially malicious commands that are obfuscated or unusually complex, which often deviate from normal, interactive administrative use. By calculating the Shannon entropy of command-line arguments for processes like 'powershell.exe' or 'bash' and comparing it to a user's baseline, analysts can flag commands that are statistical outliers, potentially indicating automated or obfuscated reconnaissance scripts.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Cloud provider IAM/Audit Log services
      - Domain Controllers
      - Administrator workstations
      - CI/CD pipeline runners
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH process_creation_logs WHERE parent_process IN ('powershell.exe', 'bash')
          FOR EACH event:
            CALCULATE entropy(event.command_line)
            COMPARE entropy against user_baseline_99th_percentile
            IF entropy > baseline_threshold:
              ALERT

  - question: Can we use a machine learning model to classify command-line arguments as benign or malicious discovery attempts based on their features?
    context: This question leverages a supervised machine learning model to score new commands for their probability of being malicious. By training a model on labeled data (benign vs. malicious discovery commands) and engineering features like command length, keyword counts ('list', 'get', 'group'), and parent process, a more nuanced and adaptive detection can be achieved compared to static rules, catching novel or slightly modified attack strings.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Cloud provider IAM/Audit Log services
      - Domain Controllers
      - Administrator workstations
      - CI/CD pipeline runners
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH new_command_event:
            EXTRACT features (length, keywords, special_chars, parent_process)
            PREDICT probability = classification_model.predict(features)
            IF probability > malicious_threshold:
              ALERT

  - question: Has a single user or IP address executed a high volume of distinct cloud group enumeration calls or used wildcard queries within a short time frame?
    context: This question helps detect automated reconnaissance by looking for behavior that is not typical of human, interactive use. A symbolic rule can be created to trigger an alert if a user exceeds a threshold of distinct enumeration calls (e.g., 'ListGroups', 'ListRoles') in a short window or uses broad, wildcard-based queries. This is a strong indicator of a script gathering as much information as possible.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Cloud provider API gateways
      - Internal network egress points
      - Administrator workstations and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH cloud_audit_logs
          AGGREGATE distinct_count(api_call) BY user, source_ip OVER 1_minute_window
          WHERE distinct_count > 20
          OR (api_call CONTAINS 'wildcard_query_pattern' AND user NOT IN service_account_allowlist)
          ALERT

  - question: Is the rate of enumeration API calls for any user or IP address statistically anomalous compared to their historical baseline?
    context: This question aims to identify anomalous activity by establishing a baseline of normal behavior. By calculating a rolling count of enumeration API calls per minute for each user and IP, and comparing the current rate to the historical mean and standard deviation, analysts can flag activity that is statistically significant (e.g., 3 standard deviations above the mean). This method is effective at finding unusual spikes in activity for a specific entity.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Cloud provider API gateways
      - Internal network egress points
      - Administrator workstations and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user, source_ip:
            CALCULATE rolling_count_per_minute(enumeration_api_calls)
            FETCH historical_baseline (mean, std_dev) for user/ip
            IF rolling_count > (mean + 3 * std_dev):
              ALERT

  - question: Are there sudden spikes or pattern changes in the time-series data of enumeration events per user or IP, indicating a potential scripted attack?
    context: This question applies time-series anomaly detection to learn the normal cadence of activity for users and IPs. A model like ARIMA or LSTM can forecast expected behavior based on historical patterns (e.g., time of day, day of week). When observed activity deviates significantly from the forecasted behavior, it suggests a change in the underlying process, such as the start of an automated, scripted attack.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Cloud provider API gateways
      - Internal network egress points
      - Administrator workstations and servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user, source_ip:
            INPUT time_series_of_enumeration_counts
            FORECAST expected_count using time_series_model
            CALCULATE deviation = observed_count - expected_count
            IF deviation > anomaly_threshold:
              ALERT

  - question: Have any non-administrative user accounts executed privileged enumeration commands, violating the principle of least privilege?
    context: This question enforces a policy of least privilege by checking for policy violations. A symbolic rule can be defined to alert whenever a user account that is not in a pre-defined 'Cloud Administrators' group executes a command known to be for privileged enumeration (e.g., 'Get-MsolRole', 'gcloud iam roles list'). This is a simple but powerful way to detect potential privilege escalation or insider threats.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Cloud provider IAM/Audit Log services
      - User and Entity Behavior Analytics (UEBA) platform data lake
      - SIEM log repository
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH cloud_audit_logs
          WHERE command IN privileged_enumeration_list
          AND user NOT IN 'Cloud Administrators' group
          ALERT

  - question: Has a user's cloud enumeration behavior, measured by the variety of API calls, significantly deviated from their historical baseline?
    context: This question seeks to identify when a user starts performing actions they have not performed before. By profiling the set of unique enumeration API calls a user typically makes over a 30-day window, we can establish a behavioral baseline. The Jaccard similarity between their recent activity (e.g., in a 1-hour window) and their historical baseline can be calculated. A low similarity score indicates a significant and potentially suspicious change in behavior.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Cloud provider IAM/Audit Log services
      - User and Entity Behavior Analytics (UEBA) platform data lake
      - SIEM log repository
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user:
            GET historical_set_of_api_calls (last 30 days)
            GET recent_set_of_api_calls (last 1 hour)
            CALCULATE jaccard_similarity(historical_set, recent_set)
            IF jaccard_similarity < 0.2:
              ALERT

  - question: Have any users been re-classified into a high-risk activity cluster or identified as an outlier based on their enumeration behavior?
    context: This question uses unsupervised machine learning to group users based on their behavior without pre-existing labels. By creating feature vectors for each user (e.g., API call frequency, diversity, time-of-day), a clustering algorithm like DBSCAN can group similar users. An alert can be generated when a user moves from a 'low-risk' cluster to a 'high-risk' one, or is flagged as an outlier, indicating a significant behavioral shift.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Cloud provider IAM/Audit Log services
      - User and Entity Behavior Analytics (UEBA) platform data lake
      - SIEM log repository
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR ALL users:
            CREATE feature_vectors (api_frequency, api_diversity, time_distribution)
            RUN clustering_algorithm(feature_vectors)
          FOR EACH user:
            IF user_moves_to_high_risk_cluster OR user_is_outlier:
              ALERT

  - question: Did a cloud group enumeration event originate from a high-risk source IP, such as one on a threat intel feed, from a rare geolocation, or a non-corporate ASN?
    context: This question adds context to an enumeration event by scrutinizing its origin. For every enumeration event, the source IP should be enriched with geolocation data and checked against threat intelligence feeds (e.g., known malicious IPs, TOR exit nodes). By maintaining an allowlist of approved countries and ASNs, any activity from an unknown or high-risk source can be immediately flagged for investigation.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Network gateway firewalls and proxies
      - VPN concentrators
      - Endpoint process monitoring agents
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH cloud_enumeration_events
          FOR EACH event:
            ENRICH source_ip with geo_location, ASN, threat_intel_feeds
            IF (source_ip IN threat_intel_feed) OR (geo_country NOT IN allowlist) OR (ASN NOT IN allowlist):
              ALERT

  - question: Did an enumeration event originate from a source geolocation or ASN that is statistically rare for that specific user?
    context: This question identifies anomalous origins on a per-user basis. Instead of a global allowlist, this approach builds a historical baseline of source geolocations and ASNs for each individual user. An enumeration event originating from a location or ASN that is statistically rare for that specific user (e.g., in the bottom 1st percentile of frequency) is flagged as suspicious, even if the location itself is not on a global blocklist.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Network gateway firewalls and proxies
      - VPN concentrators
      - Endpoint process monitoring agents
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH cloud_enumeration_events
          FOR EACH event:
            GET user_baseline_frequency_for(event.source_geo, event.source_asn)
            IF frequency < 1st_percentile_threshold:
              ALERT

  - question: Can a machine learning model classify an enumeration event as illegitimate based on contextual features like source IP, time of day, and user role?
    context: This question uses a supervised machine learning model to make a holistic judgment on the legitimacy of an enumeration event. By training a model (e.g., Random Forest) with a rich set of features including source IP context (geo, ASN), temporal data (time of day, day of week), user role, and endpoint data (parent process), the model can learn complex patterns and provide a probability score for how likely an event is to be anomalous, triggering alerts for low-probability events.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Network gateway firewalls and proxies
      - VPN concentrators
      - Endpoint process monitoring agents
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH cloud_enumeration_events
          FOR EACH event:
            EXTRACT features (source_ip_context, time_of_day, user_role, parent_process)
            PREDICT probability = legitimacy_model.predict(features)
            IF probability < low_legitimacy_threshold:
              ALERT

  - question: Was a cloud group enumeration event followed by a high-risk action (like privilege escalation or credential access) by the same user within a short time window?
    context: This question focuses on detecting the "reconnaissance followed by action" attack chain. A SIEM correlation rule can be implemented to look for a specific sequence: a cloud enumeration API call (e.g., 'List*', 'Get*') followed within a short window (e.g., 10 minutes) by a high-risk API call (e.g., 'AssumeRole', 'GetSecretValue') performed by the same user. This sequence is a strong indicator of an adversary acting on information they just gathered.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - SIEM correlation engine
      - Data Loss Prevention (DLP) systems
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CORRELATE (EVENT_A: api_call matches 'List*') with (EVENT_B: api_call matches 'AssumeRole' or 'GetSecretValue')
          WHERE EVENT_A.user == EVENT_B.user
          AND timestamp(EVENT_B) - timestamp(EVENT_A) < 10 minutes
          ALERT

  - question: Is the observed probability of a user transitioning from an enumeration action to a high-risk action statistically anomalous?
    context: This question models user behavior as a sequence of states (API call types) to find unusual transitions. By calculating the historical transition probabilities between states for all users (e.g., the probability of a 'High-Risk Action' following an 'Enumeration Action'), a baseline can be established. If a user's session exhibits a transition probability that is significantly higher than the historical average, it indicates a statistical anomaly worth investigating.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - SIEM correlation engine
      - Data Loss Prevention (DLP) systems
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH user_session:
            CALCULATE transition_probability('High-Risk Action' | 'Enumeration Action')
            FETCH historical_average_transition_probability
            IF session_probability >> historical_average:
              ALERT

  - question: Have any rare or high-risk paths, such as enumeration followed by credential access, been identified in the graph of cloud activity?
    context: This question models all cloud activity as a large-scale directed graph, where nodes are entities (users, roles, resources) and edges are the API calls connecting them. Graph-based anomaly detection algorithms can then be used to identify paths that are rare or represent high-risk sequences (e.g., User -> ListRoles -> Role -> AssumeRole -> GetSecretValue). This approach can uncover complex attack chains that might be missed by simple correlation rules.
    answer_sources:
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - SIEM correlation engine
      - Data Loss Prevention (DLP) systems
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          BUILD graph from cloud_audit_logs where nodes=entities, edges=api_calls
          RUN graph_anomaly_detection_algorithm(graph)
          IDENTIFY rare_or_high_risk_paths (e.g., 'User->List->AssumeRole->GetSecret')
          ALERT on new findings

  - question: Has an internal host generated an unusually high volume of DNS queries for cloud API FQDNs in a short period?
    context: This question uses network data as a proxy for identifying hosts that are preparing to or are actively conducting cloud reconnaissance. A symbolic rule can alert if a single internal host makes an excessive number of unique DNS queries for cloud provider API endpoints (e.g., '*.amazonaws.com', 'management.azure.com') in a short time frame, as this can indicate a script resolving endpoints before making API calls.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Network TAPs at internet egress points
      - DNS resolvers
      - SIEM log repository
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH dns_logs
          AGGREGATE distinct_count(query) by source_host OVER 5_minute_window
          WHERE query matches '*.amazonaws.com' OR 'management.azure.com' OR '*.googleapis.com'
          AND distinct_count > 100
          ALERT

  - question: Are there network connections from internal hosts to cloud API endpoints with abnormally low byte counts, suggesting rapid enumeration checks?
    context: This question analyzes network connection metadata to find signs of automated enumeration. Many discovery API calls involve small requests and receive small responses. A series of connections to cloud API endpoints with unusually low byte counts ('orig_bytes' and 'resp_bytes' in Zeek) can indicate rapid-fire checks. By flagging hosts whose average connection size drops significantly below their baseline, analysts can spot this behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Network TAPs at internet egress points
      - DNS resolvers
      - SIEM log repository
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH network_connection_logs TO cloud_api_ips
          FOR EACH source_host:
            CALCULATE avg_connection_size (orig_bytes + resp_bytes)
            FETCH historical_mean_size for host
            IF avg_connection_size < (mean - 2 * std_dev):
              ALERT

  - question: Does the volume of connections per second from an internal host to cloud APIs show a machine-like cadence or anomalous burst of activity?
    context: This question applies time-series analysis to network connection volume to detect machine-like activity. A model can learn the normal daily and weekly seasonality of network traffic from internal hosts to cloud APIs. It can then flag anomalies such as a sudden burst of connections, or connections occurring with a steady, non-human cadence, which could indicate a reconnaissance script is running on the host.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - AWS CloudTrail
      - Azure Monitor Audit Logs
      - GCP Cloud Audit Logs
      - Network TAPs at internet egress points
      - DNS resolvers
      - SIEM log repository
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR EACH source_host:
            INPUT time_series_of_connections_per_second_to_cloud_apis
            RUN time_series_anomaly_model(time_series)
            IF model_detects_burst or non_human_cadence:
              ALERT