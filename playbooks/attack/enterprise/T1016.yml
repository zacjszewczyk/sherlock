name: T1016: System Network Configuration Discovery
id: c1b2a3d4-e5f6-4a9b-8c7d-0e1f2a3b4c5d
description: Is the adversary attempting to discover network configuration information on the enterprise network? This playbook helps investigate potential System Network Configuration Discovery (T1016) activity. This involves looking for indicators such as the execution of network discovery commands (e.g., ipconfig, arp) with suspicious arguments or output redirection; the execution of these utilities by non-standard parent processes like Microsoft Word or Adobe Reader; a rapid sequence of multiple unique discovery commands from a single host; a single host remotely executing discovery commands across numerous other systems; or a host generating an anomalous volume of network connection attempts, indicative of local network scanning.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
- none
questions:
- question: Are there any process creation events for network discovery commands that contain known malicious command-line patterns or suspicious output redirection?
  context: This question focuses on identifying high-confidence malicious activity by searching for specific command-line patterns or output redirection paths that are known to be used by adversaries. Matching on signatures derived from threat intelligence allows for precise detection with a low false-positive rate. For example, an attacker might run `ipconfig /all` and redirect the output to a file in a publicly writable directory like `C:\Users\Public\`.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Critical Application Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH process_creation_logs (EID 4688, Sysmon EID 1)
      WHERE process_name IN ('ipconfig.exe', 'arp.exe', 'route.exe')
      AND command_line MATCHES REGEX (known_malicious_patterns OR suspicious_output_paths)
- question: Have any common network discovery commands been executed with statistically rare command-line arguments or output file paths?
  context: This question aims to detect anomalous behavior by identifying outliers. While commands like `ipconfig` are common, the specific arguments or file paths used by an attacker may be unique. By establishing a baseline of normal usage and alerting on statistically rare occurrences (e.g., in the bottom 1st percentile of historical frequency), analysts can uncover novel or evasive techniques that signature-based rules might miss.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Critical Application Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Step 1: Baseline creation
      CALCULATE frequency of each command_line_argument and output_file_path for discovery commands over last 90 days.
      IDENTIFY arguments/paths in the bottom 1st percentile of frequency.

      // Step 2: Detection
      SEARCH process_creation_logs
      WHERE process_name IN ('ipconfig.exe', 'arp.exe', 'route.exe', 'nbtstat.exe')
      AND (command_line_argument IN (rare_arguments) OR output_file_path IN (rare_paths))
- question: Can a machine learning model identify malicious network discovery commands based on their features?
  context: This is a proactive, machine learning-based approach to detection. By training a classifier (like logistic regression) on a labeled dataset of benign and malicious command-line executions, we can create a model that scores new, unseen commands for their likelihood of being malicious. This model considers multiple features simultaneously—such as the command itself, the number of arguments, the use of redirection, and the randomness (entropy) of file paths—to make a more nuanced decision than a simple rule.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Critical Application Servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Model Training (Offline)
      FEATURE_EXTRACT from labeled_command_line_data (command, arg_count, has_redirection, path_entropy, etc.)
      TRAIN logistic_regression_model on features.

      // Model Inference (Real-time)
      FOR each new process_creation_event:
        EXTRACT features from command_line
        SCORE event with trained_model
        ALERT if score > malicious_threshold
- question: Have any network discovery utilities been launched by an unusual parent process?
  context: This question helps identify process injection or other execution anomalies. Network discovery tools are typically run from a command shell (`cmd.exe`, `powershell.exe`) or by `explorer.exe`. When a discovery tool is launched by a process like Microsoft Word (`WINWORD.EXE`) or a web browser, it is highly suspicious and could indicate that an exploit or malicious macro has been used to gain execution on the host.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Member Servers
  - Human Resources Systems
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH process_creation_logs (EID 4688, Sysmon EID 1)
      WHERE process_name IN ('ipconfig.exe', 'arp.exe', 'route.exe', 'nbtstat.exe')
      AND parent_process_name NOT IN ('cmd.exe', 'powershell.exe', 'explorer.exe')
- question: Has any user executed network discovery commands with a frequency that is anomalous for their role?
  context: This question uses user behavior analytics to find deviations from the norm. An IT administrator running `ipconfig` frequently is normal, but a user from the HR department running it multiple times in a day is not. By creating role-based baselines for command execution frequency and alerting on significant deviations (e.g., more than 3 standard deviations above the mean), we can detect when an account might be compromised or being used for reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Member Servers
  - Human Resources Systems
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Step 1: Baseline creation
      FOR each user_role:
        CALCULATE mean and stddev of discovery command executions per user per 24h window.

      // Step 2: Detection
      AGGREGATE discovery command counts per user over last 24h.
      ALERT if count > (mean_for_user_role + 3 * stddev_for_user_role)
- question: Can unsupervised machine learning identify anomalous clusters of activity involving network discovery commands?
  context: This question seeks to find "unknown unknowns" by grouping similar process execution events into clusters. Normal, frequent activities will form large, dense clusters. Malicious or rare activities, such as a discovery command run by an unusual user at 3 AM from a strange parent process, will either not belong to any cluster (becoming a noise point) or form a small, distinct cluster. Investigating these small or noisy clusters can reveal suspicious behaviors that don't match any predefined rules.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Member Servers
  - Human Resources Systems
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Model Execution
      CREATE feature_vectors from process_logs (user, host, parent_process, command, time_of_day)
      RUN DBSCAN clustering algorithm on feature_vectors.
      INVESTIGATE small clusters and noise points, especially those containing discovery commands.
- question: Has any single host executed a rapid succession of several different network discovery commands?
  context: This question looks for a common reconnaissance pattern where an adversary runs a sequence of commands to build a complete picture of the host's network environment. For example, running `ipconfig`, then `arp -a`, then `route print` in a short period. A correlation rule can detect this behavior by tracking unique discovery commands per host and triggering an alert when a threshold (e.g., 3 unique commands in 5 minutes) is met.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Development Environments
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH process_creation_logs
      GROUP BY host
      COUNT distinct discovery_commands (e.g., 'ipconfig', 'arp', 'route', 'nbtstat') within a 5-minute window.
      ALERT if distinct_count >= 3
- question: Has there been a sudden spike in the diversity of commands executed on a host, particularly involving discovery commands?
  context: This question uses information theory to detect unusual bursts of activity. Normal host activity often involves repetitive command usage (low entropy). A reconnaissance phase, however, often involves running many different commands in a short period, leading to a sudden increase in command name entropy. By monitoring this entropy for each host and alerting on significant spikes, we can detect these bursts of exploratory activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Development Environments
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Step 1: Baseline creation
      FOR each host, calculate baseline command_name_entropy over a 10-minute sliding window.

      // Step 2: Detection
      FOR each host, continuously calculate current command_name_entropy.
      ALERT if current_entropy > (baseline_entropy + 2.5 * stddev_of_entropy)
      AND window contains discovery commands.
- question: Have any command sequences with a very low probability of occurring been observed, especially if they include network discovery commands?
  context: This question leverages sequence analysis to understand not just *what* commands are run, but in *what order*. Models like HMMs can learn the normal transitions between commands (e.g., `cd` is often followed by `dir`). An attacker's command sequence (e.g., `whoami` -> `ipconfig` -> `net user`) may have a very low probability according to the trained model, allowing for the detection of anomalous chains of activity that might otherwise look benign individually.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Development Environments
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Model Training (Offline)
      TRAIN HMM on sequences of commands from normal user/system behavior.

      // Model Inference (Real-time)
      FOR each new command sequence per host:
        CALCULATE probability of sequence using the trained HMM.
        ALERT if probability < low_probability_threshold
        AND sequence contains discovery commands.
- question: Is a single source host remotely logging into multiple destinations and then immediately running network discovery commands?
  context: This question aims to detect lateral movement combined with reconnaissance. An attacker who has compromised one machine will often use it as a pivot point to explore the network. This involves remotely logging into other machines (e.g., via RDP or WinRM, generating Event ID 4624 Logon Type 3) and then running discovery commands. Correlating these two events across multiple destinations from a single source is a strong indicator of malicious activity.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Internal Network Segments
  - Internal Servers and Workstations
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH for successful remote logins (EID 4624, Type 3) from source_host to destination_host.
      CORRELATE with process_creation_events (EID 4688) for discovery commands on destination_host within 5 minutes.
      COUNT distinct destination_hosts per source_host over 1 hour.
      ALERT if distinct_destination_count > 5
- question: Is any host initiating an anomalously high number of outbound remote administration connections?
  context: This question focuses on the network traffic associated with lateral movement. Before executing remote commands, an attacker must connect to the target hosts using protocols like SMB, WinRM, or RDP (ports 135, 445, 5985, etc.). A compromised host acting as a pivot will suddenly initiate connections to many other internal systems. By baselining normal connection behavior and alerting when a host's connection count exceeds a high threshold (like the 99th percentile), we can detect this precursor to remote execution.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Internal Network Segments
  - Internal Servers and Workstations
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Step 1: Baseline creation
      USING Zeek conn.log, for each host, calculate the 99th percentile of unique outbound remote admin connections (ports 135, 445, 5985, 5986) per hour.

      // Step 2: Detection
      COUNT unique outbound remote admin connections per host per hour.
      ALERT if count > 99th_percentile_baseline.
- question: Are there remote administration connections occurring between hosts that do not normally communicate, followed by discovery command execution?
  context: This question uses graph analysis to model normal network behavior. Hosts on a network tend to form communication clusters (e.g., workstations talk to servers, but rarely to each other). An attacker moving laterally will often create connections that violate these established community structures. By identifying these anomalous connections that cross cluster boundaries and are immediately followed by discovery commands on the target, we can pinpoint suspicious lateral movement.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Internal Network Segments
  - Internal Servers and Workstations
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Model Execution
      BUILD host communication graph from Zeek conn.log.
      APPLY community detection algorithm (e.g., Louvain) to identify normal clusters.
      IDENTIFY remote admin connections that cross community boundaries.
      CORRELATE these anomalous connections with subsequent discovery commands on the target host.
      ALERT on matches.
- question: Has Zeek detected a network scan that can be correlated with a high volume of connection attempts from the same source?
  context: This question leverages Zeek's built-in scan detection capabilities. The `Scan::Address_Scan` notice is a high-fidelity alert that Zeek's scan detector has been triggered. To add confidence and context, this alert should be correlated with the raw connection data in `conn.log`. Seeing both the abstract notice and a concrete spike in connection attempts from the same source host within a short time window provides strong evidence of an active network scan.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek weird.log
  - Internal Network Segments
  - VLANs containing sensitive systems
  - Data Center Networks
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH Zeek notice.log for event_type = 'Scan::Address_Scan'.
      FOR each scan notice, get the source_ip.
      SEARCH Zeek conn.log for a spike in connection attempts from that source_ip within the next 5 minutes.
      ALERT on correlation.
- question: Is any host attempting to connect to an anomalously large number of unique hosts on its local subnet?
  context: This question aims to detect horizontal scanning within a network segment. A compromised host will often probe its local subnet to find other live hosts. This results in a sudden increase in the number of unique destination IPs it tries to contact. By establishing a baseline of normal "neighbor" communication for each host and alerting on significant deviations (e.g., >3 standard deviations), we can detect this scanning behavior directly from network connection logs.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek weird.log
  - Internal Network Segments
  - VLANs containing sensitive systems
  - Data Center Networks
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Step 1: Baseline creation
      USING Zeek conn.log, for each host, calculate the mean and stddev of unique local subnet destinations contacted per hour.

      // Step 2: Detection
      COUNT unique local subnet destinations per host per hour.
      ALERT if count > (mean_for_host + 3 * stddev_for_host)
- question: Can a time-series anomaly detection model identify unusual bursts in the rate of new connection attempts from a host?
  context: This question applies advanced machine learning to detect scanning behavior by analyzing the *rate* of connections over time. An LSTM autoencoder can learn the normal rhythm and pattern of a host's connection activity. When a host begins a scan, it will generate a burst of new connections at a rate that deviates significantly from its learned normal pattern. The model will fail to reconstruct this anomalous pattern accurately, leading to a high reconstruction error, which can be used to trigger an alert.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek weird.log
  - Internal Network Segments
  - VLANs containing sensitive systems
  - Data Center Networks
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      // Model Training (Offline)
      FOR each host, create a time-series of new connections per second from Zeek conn.log.
      TRAIN an LSTM autoencoder model on this time-series data.

      // Model Inference (Real-time)
      FOR each host, feed the current connection rate time-series to the trained model.
      CALCULATE the reconstruction error.
      ALERT if reconstruction_error > anomaly_threshold.