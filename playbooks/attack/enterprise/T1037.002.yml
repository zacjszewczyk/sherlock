name: T1037.002: Login Hook
id: 18b1050a-500b-4158-a42e-15a153b2d699
description: This playbook provides investigative steps to determine if an adversary is achieving persistence or escalating privileges by creating or modifying a macOS Login/Logout Hook. This involves looking for the use of the `defaults` command-line utility to write a `LoginHook` or `LogoutHook` to the `com.apple.loginwindow.plist` file, or direct modification of this file. It also covers detecting suspicious behavior from processes spawned by `loginwindow`, such as unusual outbound network connections or the execution of commands with root privileges (UID 0) that are indicative of defense evasion, credential access, or further persistence mechanisms.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any command lines been executed to set a LoginHook or LogoutHook using the 'defaults' utility?
    context: This question aims to identify direct attempts to establish persistence by creating or modifying a macOS Login or Logout Hook. The `defaults` command-line utility is a common and straightforward method for adversaries to write a `LoginHook` or `LogoutHook` key to the `/Library/Preferences/com.apple.loginwindow.plist` file. Detecting the execution of this specific command pattern is a high-fidelity indicator of this persistence technique.
    answer_sources:
      - macOS process execution logs (e.g., ESF ES_EVENT_TYPE_NOTIFY_EXEC)
      - osquery process_events
      - bash/zsh history logs
      - All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_execution_logs WHERE command_line CONTAINS "defaults write /Library/Preferences/com.apple.loginwindow LoginHook" OR command_line CONTAINS "defaults write /Library/Preferences/com.apple.loginwindow LogoutHook"
  - question: Are there any instances of the 'com.apple.loginwindow.plist' file with an unusually rare or non-whitelisted hash?
    context: Adversaries may modify the `com.apple.loginwindow.plist` file to add persistence hooks. By tracking the hash of this file across all systems, we can identify outliers. A file with a rare hash (low prevalence) or a hash not on an approved list suggests unauthorized modification, as legitimate changes (e.g., by system updates or MDM software) would typically result in a common, known-good hash across many devices.
    answer_sources:
      - File modification events for /Library/Preferences/com.apple.loginwindow.plist
      - All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_monitoring_logs FOR "/Library/Preferences/com.apple.loginwindow.plist" | GROUP by file_hash | CALCULATE prevalence | FILTER prevalence < 0.01 OR file_hash NOT IN (whitelist)
  - question: Can machine learning models identify malicious modifications to 'com.apple.loginwindow.plist' based on the modifying process's characteristics?
    context: This question explores a proactive, machine-learning-based approach to detection. Instead of relying on static rules, a classification model can learn the nuanced characteristics of legitimate versus malicious modifications. By analyzing features of the process that alters the plist file—such as its name, parent, user context, and arguments—the model can identify novel or sophisticated attacks that might evade simpler detection methods and alert on suspicious modifications with a high confidence score.
    answer_sources:
      - File modification events for /Library/Preferences/com.apple.loginwindow.plist
      - macOS process execution logs
      - All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL train RandomForest on labeled_plist_modifications | PREDICT on new_file_modification_events FOR "/Library/Preferences/com.apple.loginwindow.plist" | ALERT on prediction == "malicious" AND confidence > 0.9
  - question: Has a process spawned by 'loginwindow' initiated a network connection to a known malicious IP address?
    context: A Login/Logout Hook executes a script or application upon login or logout. If an adversary uses this for persistence, the spawned process might initiate a command-and-control (C2) connection. This question checks for this specific behavior by correlating processes spawned by `loginwindow` with network connection logs. A connection to an IP address on a threat intelligence blocklist is a strong indicator of compromise.
    answer_sources:
      - macOS process execution logs
      - Zeek conn.log
      - macOS endpoints, network egress points (gateways, firewalls), centralized log management system.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_logs, network_logs ON source_ip, timestamp | FILTER process_parent_name == "loginwindow" AND network_dest_ip IN (threat_intel_feed) | ALERT
  - question: Has a process spawned by 'loginwindow' connected to an unusually rare destination for that specific host?
    context: This question uses anomaly detection to find suspicious C2 communications that don't rely on known-bad indicators. Legitimate processes spawned by `loginwindow` (if any) typically connect to a predictable set of destinations. By baselining this normal activity for each host, we can flag connections to new or very infrequent destinations. Such a connection is anomalous and could represent a previously unknown C2 server.
    answer_sources:
      - macOS process execution logs
      - Zeek conn.log
      - Zeek dns.log
      - macOS endpoints, network egress points (gateways, firewalls), DNS resolvers, centralized log management system.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE network connections from processes with parent "loginwindow" over 30 days per host | MONITOR new connections | ALERT if destination_ip_or_domain_frequency < 1st_percentile for that host
  - question: Is there an anomalous spike in outbound data volume from processes spawned by 'loginwindow'?
    context: Adversarial C2 activity, such as periodic heartbeats or data exfiltration staging, can manifest as unusual patterns in network traffic volume. This question involves creating a time-series model to learn the normal rhythm (e.g., daily and weekly seasonality) of outbound data from `loginwindow`-spawned processes. An alert is generated when the actual data volume significantly exceeds the model's prediction, which could indicate data exfiltration or other malicious C2 communications.
    answer_sources:
      - macOS process execution logs
      - Zeek conn.log
      - macOS endpoints, network egress points (gateways, firewalls), centralized log management system.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL time-series of outbound_bytes from processes with parent "loginwindow" per host | MONITOR new data points | ALERT if outbound_bytes > upper_confidence_bound
  - question: Has the script defined in a Login/Logout Hook been executed with root privileges?
    context: Login and Logout Hooks run with root privileges, making them a powerful tool for privilege escalation. This question directly checks for the execution of a hook-defined script as root (UID 0) by the `loginwindow` process. By first identifying the script path specified in the hook and then watching for its execution with elevated privileges, we can confirm the successful use of this technique for privilege escalation.
    answer_sources:
      - macOS process execution logs with user context
      - osquery process_events table
      - File content logs for /Library/Preferences/com.apple.loginwindow.plist
      - macOS Unified Log for login context
      - macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CACHE hook_script_path from "com.apple.loginwindow.plist" per host | SEARCH process_logs WHERE user_id == 0 AND parent_process_name == "loginwindow" AND process_path == cached_hook_script_path | ALERT
  - question: Has an unusually rare process been executed with root privileges by 'loginwindow'?
    context: This question uses fleet-wide analytics to find anomalous root executions originating from `loginwindow`. While some legitimate software might use hooks, these processes would typically be common across many systems. An adversary, however, is likely to use a custom or less common tool. By identifying processes that run as root under `loginwindow` but are extremely rare or have never been seen before across the entire fleet, we can effectively pinpoint suspicious or malicious activity.
    answer_sources:
      - macOS process execution logs with user context
      - osquery process_events table
      - macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_logs over 30 days | GROUP by process_name, user_id, parent_process_name | CALCULATE fleet_prevalence | ALERT on new executions WHERE user_id == 0 AND parent_process_name == "loginwindow" AND prevalence < 0.005
  - question: Has an anomalous sequence of user and system events, characteristic of setting up and executing a malicious Login Hook, been observed?
    context: This question looks beyond single events to the entire attack chain. Adversaries follow a sequence of actions: setting the hook, creating or modifying the script, and then the script executing after the next login. A sequence-based model like an LSTM autoencoder can learn what normal sequences of user activity look like. It can then flag a session that contains the specific, malicious sequence of setting a hook and that hook's subsequent execution as root, even if individual events seem benign.
    answer_sources:
      - macOS process execution logs
      - macOS file integrity monitoring logs
      - macOS Unified Log for login context
      - macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL user_session_event_sequences with LSTM autoencoder | MONITOR new sessions | ALERT on high reconstruction_error, especially if session contains (set_hook -> modify_script -> root_execution_by_loginwindow)
  - question: Has a process spawned by 'loginwindow' executed commands known to be used for defense evasion, credential access, or further persistence?
    context: Once an adversary gains root execution via a Login Hook, their next step is often to consolidate their access. This question searches for specific follow-on commands executed by the hook's process. These commands—like creating new users (`dscl`), disabling security controls (`spctl`), unloading daemons (`launchctl`), or modifying sensitive system files—are strong indicators that the hook is being used for malicious purposes beyond simple persistence.
    answer_sources:
      - macOS process execution logs
      - macOS file integrity monitoring logs
      - macOS Unified Log
      - bash/zsh history logs
      - System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_logs WHERE parent_process_name == "loginwindow" AND (command_line CONTAINS "dscl . -create" OR command_line CONTAINS "spctl --master-disable" OR command_line CONTAINS "launchctl unload" OR command_line CONTAINS "writing to /etc/sudoers") | ALERT
  - question: Did a process spawned by 'loginwindow' have a command-line with unusually high entropy, suggesting obfuscation?
    context: To evade detection based on simple string matching, adversaries often obfuscate their commands (e.g., using Base64 or other encoding). This obfuscation results in command-line strings that are more random-looking and have higher information entropy. This question establishes a baseline for the normal entropy of commands run by `loginwindow`-spawned processes on each host and alerts when a new command has an abnormally high entropy score, which is a strong sign of obfuscation.
    answer_sources:
      - macOS process execution logs
      - bash/zsh history logs
      - System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE shannon_entropy of command_lines from processes with parent "loginwindow" per host | MONITOR new commands | ALERT if entropy_score > 98th_percentile for that host
  - question: Does the post-login activity graph, originating from a 'loginwindow'-spawned process, show an anomalous structure or match a known malicious pattern?
    context: This question employs advanced graph-based analysis to understand the relationships between processes, files, and network connections after a login. A Graph Neural Network (GNN) can learn the 'shape' of normal system activity. It can then identify when a process spawned by `loginwindow` initiates a chain of events (a subgraph) that is structurally different from normal behavior, such as creating a new user, modifying a system timer (like a LaunchDaemon), and then making a rare external network call. This holistic view can detect complex, multi-step attacks.
    answer_sources:
      - macOS process execution logs
      - macOS file integrity monitoring logs
      - macOS Unified Log
      - System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL system_activity as a graph with GNN | MONITOR subgraphs originating from "loginwindow"-spawned processes | ALERT if subgraph is topologically anomalous OR matches known malicious graph pattern