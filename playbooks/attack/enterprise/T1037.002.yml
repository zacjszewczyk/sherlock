name: T1037.002: Login Hook
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversaries achieving persistence and escalating privileges by creating or modifying a macOS Login/Logout Hook. These hooks are scripts or applications that run with root privileges at user login or logout. The investigation involves monitoring for direct modifications to the `com.apple.loginwindow.plist` file, analyzing processes spawned by the `loginwindow` parent process for anomalous network activity, and identifying subsequent malicious behaviors like defense evasion or credential access performed by the hook's payload.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is the `defaults` command being used to create or modify a LoginHook or LogoutHook?
    context: This question looks for the specific `defaults write` command used to set a Login or Logout hook in the `com.apple.loginwindow.plist` file. This is a direct and common method for establishing this form of persistence on macOS. Detecting this command can be a high-fidelity indicator of an adversary's attempt to set up a hook.
    answer_sources:
      - macOS process execution logs (e.g., ESF ES_EVENT_TYPE_NOTIFY_EXEC)
      - osquery process_events
      - bash/zsh history logs
      - All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.
    range: last 90 days
    queries:
      - pseudocode: Search process execution logs for command lines matching 'defaults write /Library/Preferences/com.apple.loginwindow LoginHook *' or 'defaults write /Library/Preferences/com.apple.loginwindow LogoutHook *'.
  - question: Has the `/Library/Preferences/com.apple.loginwindow.plist` file been modified in an anomalous way across the environment?
    context: This question aims to detect modifications to the login window preferences file by identifying rare or unauthorized versions of the file. Instead of looking for the act of modification, this approach analyzes the state of the file across all endpoints. A file hash that is uncommon or not on an approved list suggests a potentially unauthorized change, which could be the addition of a malicious LoginHook.
    answer_sources:
      - File modification events for /Library/Preferences/com.apple.loginwindow.plist
      - All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.
    range: last 90 days
    queries:
      - pseudocode: Query file monitoring logs to get SHA256 of '/Library/Preferences/com.apple.loginwindow.plist' from all macOS endpoints. Flag any hash with a prevalence < 1% or not on an approved whitelist.
  - question: Can machine learning classify modifications to `/Library/Preferences/com.apple.loginwindow.plist` as malicious?
    context: This question explores a more advanced, behavioral approach. By training a machine learning model on known legitimate (e.g., from MDM software) and malicious modifications, the system can learn to distinguish between them based on the characteristics of the process making the change (e.g., process name, parent, user). This helps to automatically identify novel or sophisticated attempts to set a LoginHook while reducing false positives from legitimate administrative actions.
    answer_sources:
      - File modification events for /Library/Preferences/com.apple.loginwindow.plist
      - macOS process execution logs (e.g., ESF ES_EVENT_TYPE_NOTIFY_EXEC)
      - All macOS endpoints, particularly those of privileged users like developers or administrators; centralized log management system.
    range: last 90 days
    queries:
      - pseudocode: Classify new modification events for '/Library/Preferences/com.apple.loginwindow.plist' using a pre-trained ML model. Alert on events classified as malicious with high confidence.
  - question: Is a process spawned by `loginwindow` making a network connection to a known malicious destination?
    context: A LoginHook executes a script or application at login. If this payload is malicious, it may try to establish a command and control (C2) channel. This question looks for the immediate aftermath of a hook's execution by correlating process events (parent is `loginwindow`) with network logs. A connection to an IP on a threat intelligence list is a strong indicator of compromise.
    answer_sources:
      - macOS process execution logs
      - Zeek conn.log
      - Zeek dns.log
      - macOS endpoints, network egress points (gateways, firewalls), DNS resolvers, centralized log management system.
    range: last 90 days
    queries:
      - pseudocode: Join process logs with network logs. Filter for processes with parent 'loginwindow'. Alert if the destination IP is on a threat intelligence blocklist.
  - question: Is a process spawned by `loginwindow` making an unusually rare network connection for a given host?
    context: Attackers may use novel C2 infrastructure not yet on threat intelligence feeds. This question uses anomaly detection to find such activity. By baselining normal network destinations for processes spawned by `loginwindow` on each host, we can flag connections to new or very rare domains/IPs. This is a statistical method to find suspicious C2 communications without prior knowledge of the malicious destination.
    answer_sources:
      - macOS process execution logs
      - Zeek conn.log
      - Zeek dns.log
      - macOS endpoints, network egress points (gateways, firewalls), DNS resolvers, centralized log management system.
    range: last 90 days
    queries:
      - pseudocode: For a given host, baseline destination IPs/domains for processes with parent 'loginwindow'. Alert on new connections to destinations that are statistically rare (e.g., < 1st percentile frequency).
  - question: Is there an anomalous amount of outbound data from a process spawned by `loginwindow`?
    context: This question focuses on the volume of network traffic, which can indicate data exfiltration or a "heartbeat" from C2 malware. By creating a time-series model of the expected outbound data volume for `loginwindow`-spawned processes, we can detect significant deviations. An unexpected spike in traffic volume, even to a seemingly legitimate destination, could signal malicious activity.
    answer_sources:
      - macOS process execution logs
      - Zeek conn.log
      - macOS endpoints, network egress points (gateways, firewalls), DNS resolvers, centralized log management system.
    range: last 90 days
    queries:
      - pseudocode: Model the time series of outbound bytes for traffic from 'loginwindow'-spawned processes. Alert when observed volume exceeds the model's predicted upper confidence bound.
  - question: Is a script defined in a Login/Logout Hook being executed with root privileges?
    context: LoginHooks execute with root privileges, making them a powerful tool for privilege escalation. This question directly checks for this behavior. It involves first identifying the script path specified in the `com.apple.loginwindow.plist` file and then watching for a process execution event where that exact script is run by the `loginwindow` process with a User ID (UID) of 0 (root). This provides a direct link between the persistence mechanism and its privileged execution.
    answer_sources:
      - macOS process execution logs with user context
      - osquery process_events table
      - File content logs for /Library/Preferences/com.apple.loginwindow.plist
      - macOS Unified Log for login context
      - macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.
    range: last 90 days
    queries:
      - pseudocode: Cache LoginHook/LogoutHook script paths from plist files. Alert if a process event shows parent 'loginwindow', UID=0, and the process path matches the cached script path for that host.
  - question: Is a process that has never been seen before being executed by `loginwindow` with root privileges?
    context: This question uses a fleet-wide statistical approach to find anomalous root executions by `loginwindow`. By baselining all processes that normally run with root privileges under `loginwindow`, the system can identify new or rare processes. An alert on a process name that has never been seen in this context, or is extremely rare across the entire organization, could indicate a newly deployed malicious payload via a LoginHook.
    answer_sources:
      - macOS process execution logs with user context
      - osquery process_events table
      - macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.
    range: last 90 days
    queries:
      - pseudocode: Aggregate process executions by process name, UID, and parent. Alert on executions where parent is 'loginwindow', UID=0, and the process name is new or rare (< 0.5% prevalence).
  - question: Does a user session exhibit a sequence of events indicative of setting and triggering a malicious LoginHook?
    context: This question moves beyond single events to analyze the entire sequence of actions in a user session. By training a model on normal session behavior, it can detect anomalous sequences. A high-risk sequence would involve a user writing to the loginwindow plist, modifying the target script, logging out, and then upon next login, that script executing as root. This contextual analysis can link the setup and execution phases of the attack.
    answer_sources:
      - macOS process execution logs with user context
      - File content logs for /Library/Preferences/com.apple.loginwindow.plist
      - File modification events for /Library/Preferences/com.apple.loginwindow.plist
      - macOS endpoints, particularly multi-user systems or those accessed by standard users; authentication log servers.
    range: last 90 days
    queries:
      - pseudocode: Use a sequence-based anomaly detection model on user session events. Alert on sessions with high reconstruction error, especially those containing the pattern - plist write, script modify, script execution by 'loginwindow' as root.
  - question: Is a process spawned by `loginwindow` with root privileges executing commands associated with defense evasion or credential access?
    context: Once a malicious LoginHook executes as root, the adversary will likely perform follow-on actions. This question looks for those actions by searching for specific command-line patterns. These patterns include creating users (`dscl`), disabling security controls (`spctl`), unloading system services (`launchctl`), or modifying sensitive system files (`/etc/sudoers`). Detecting these commands in a process spawned by `loginwindow` is a strong indicator of malicious intent post-escalation.
    answer_sources:
      - macOS process execution logs
      - macOS file integrity monitoring logs
      - macOS Unified Log
      - bash/zsh history logs
      - System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.
    range: last 90 days
    queries:
      - pseudocode: Create a rule to detect processes with parent 'loginwindow' and command lines containing suspicious strings like 'dscl . -create', 'spctl --master-disable', 'launchctl unload', etc.
  - question: Does a command executed by a `loginwindow`-spawned process appear to be obfuscated?
    context: Attackers often obfuscate their commands to evade simple signature-based detection. This question uses Shannon entropy to measure the randomness of a command-line string. A high entropy score suggests the command may be packed, encoded, or encrypted. By baselining the normal entropy of commands from `loginwindow`-spawned processes, we can flag outliers that are likely obfuscated and malicious.
    answer_sources:
      - macOS process execution logs
      - bash/zsh history logs
      - System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.
    range: last 90 days
    queries:
      - pseudocode: Calculate Shannon entropy of command-line strings for processes with parent 'loginwindow'. Alert when entropy exceeds the 98th percentile of the host's baseline.
  - question: Does the graph of system interactions following a login event match a known malicious pattern?
    context: This advanced question models system activity as a graph of interactions (processes, files, network connections). By using a Graph Neural Network (GNN), the system can learn the structure of normal post-login behavior. It can then identify subgraphs originating from a `loginwindow`-spawned process that are topologically different from the norm or match a pre-defined malicious pattern. This provides a holistic view of the attack chain.
    answer_sources:
      - macOS process execution logs
      - macOS file integrity monitoring logs
      - macOS Unified Log
      - System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files, endpoint security agent configuration files and directories.
    range: last 90 days
    queries:
      - pseudocode: Use a GNN to model post-login activity. Flag subgraphs originating from 'loginwindow'-spawned processes that are topologically anomalous or match known malicious patterns.