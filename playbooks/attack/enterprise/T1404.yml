name: T1404: Exploitation for Privilege Escalation
id: f4b5c6d7-e8f9-4a1b-2c3d-4e5f6a7b8c9d
description: This playbook helps investigate if an adversary has successfully elevated privileges on a mobile device by exploiting a software vulnerability. This is often indicated by changes in a device's integrity status (e.g., becoming jailbroken or rooted), the installation of known malicious applications, anomalous system-level events like unexpected API calls or process spawning from a non-system app, or security configuration changes that deviate from corporate policy, such as enabling developer mode or installing untrusted certificates.
type: technique
related:
  - TA0029: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a device's integrity status changed to indicate it is jailbroken or rooted?
    context: MDM/UEM platforms monitor the security posture of managed devices. An explicit log indicating a device has been jailbroken or rooted is a high-fidelity indicator of a successful privilege escalation exploit. This question helps an analyst immediately detect and respond to these critical events by triggering a real-time alert.
    answer_sources:
      - MDM/UEM compliance logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/UEM management servers, cloud management console, managed mobile devices (corporate and BYOD), enterprise network gateways, VPN concentrators, and DNS resolvers.
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH mdm_uem_logs
          WHERE (isJailbroken = 'true' OR isRooted = 'true' OR (complianceStatus = 'non-compliant' AND reason CONTAINS 'integrity'))
          ALERT on new results
  - question: Did a device that was recently rooted or jailbroken exhibit anomalous network behavior prior to the event?
    context: Exploits are often delivered over the network. By analyzing the network traffic leading up to a compromise, analysts can identify suspicious connections that may have been part of the exploit delivery or C2 setup. This question focuses on finding precursor activity by identifying network connections to rare destination ports or previously unseen Autonomous Systems (ASNs), which can indicate communication with attacker infrastructure.
    answer_sources:
      - MDM/UEM compliance logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/UEM management servers, cloud management console, managed mobile devices (corporate and BYOD), enterprise network gateways, VPN concentrators, and DNS resolvers.
    range: 24 hours preceding the integrity failure event
    queries:
      - technology: Pseudocode
        query: |
          DEVICE_ID = [ID of compromised device]
          EVENT_TIME = [Timestamp of integrity failure]
          BASELINE = GET_NETWORK_BASELINE(DEVICE_ID, last 30 days)
          CONNECTIONS = SEARCH network_logs(DEVICE_ID, EVENT_TIME - 24h, EVENT_TIME)
          FOR each CONNECTION in CONNECTIONS:
            PORT_RARITY = CALCULATE_RARITY(CONNECTION.dest_port, BASELINE.ports)
            ASN_RARITY = CALCULATE_RARITY(CONNECTION.dest_asn, BASELINE.asns)
            IF PORT_RARITY < 5th_percentile AND ASN_RARITY is 'new':
              FLAG_CONNECTION(CONNECTION)
  - question: Can machine learning identify the specific network connection that delivered the exploit or established C2 communications?
    context: While rarity analysis helps narrow down suspicious connections, a more advanced approach using machine learning can provide higher confidence. This question applies an anomaly detection model (Isolation Forest) to flagged connections. By analyzing features like connection duration, data volume, and SSL/TLS fingerprints (JA3/JA3S), the model can pinpoint the specific session that is most likely the malicious channel, focusing the investigation.
    answer_sources:
      - MDM/UEM compliance logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/UEM management servers, cloud management console, managed mobile devices (corporate and BYOD), enterprise network gateways, VPN concentrators, and DNS resolvers.
    range: 60 minutes preceding the integrity failure event
    queries:
      - technology: Pseudocode / ML
        query: |
          FLAGGED_CONNECTIONS = [Output from previous query]
          MODEL = LOAD_ISOLATION_FOREST_MODEL()
          FOR each CONNECTION in FLAGGED_CONNECTIONS:
            IF CONNECTION.timestamp > (EVENT_TIME - 60m):
              FEATURES = EXTRACT_FEATURES(CONNECTION) // duration, bytes, protocol, JA3, etc.
              ANOMALY_SCORE = MODEL.PREDICT(FEATURES)
              IF ANOMALY_SCORE is high:
                FLAG as likely exploit/C2 channel
  - question: Has a known malicious application been installed on a mobile device?
    context: Adversaries often package exploits within malicious applications. A key detection strategy is to compare indicators from newly installed applications (file hash, package name, signing certificate) against a threat intelligence feed of known malicious indicators. This question helps automate the detection of known threats, providing a clear signal of compromise.
    answer_sources:
      - MDM/UEM application inventory logs
      - Mobile Threat Protection (MTP) agent logs
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile devices with MTP agents, MDM/UEM management console, integrated threat intelligence platforms, network egress points, and corporate Wi-Fi infrastructure.
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH app_install_logs
          JOIN threat_intel_feed ON (app_hash, package_name, cert_serial)
          ALERT on any match
  - question: Did a device exhibit suspicious DNS activity, such as communication with algorithmically generated domains (DGAs), prior to a malicious app installation?
    context: Malware and exploit kits often use Domain Generation Algorithms (DGAs) for command and control (C2) beaconing. These domains appear random and have high entropy. A high rate of failed DNS lookups (NXDOMAIN) can also indicate beaconing activity. This question helps identify potential C2 communication by analyzing the DNS queries made by a device before a known malicious app was installed.
    answer_sources:
      - MDM/UEM application inventory logs
      - Mobile Threat Protection (MTP) agent logs
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile devices with MTP agents, MDM/UEM management console, integrated threat intelligence platforms, network egress points, and corporate Wi-Fi infrastructure.
    range: 24 hours prior to the malicious app installation
    queries:
      - technology: Pseudocode
        query: |
          DEVICE_ID = [ID of compromised device]
          INSTALL_TIME = [Timestamp of malicious app install]
          DNS_QUERIES = SEARCH dns_logs(DEVICE_ID, INSTALL_TIME - 24h, INSTALL_TIME)
          FOR each QUERY in DNS_QUERIES:
            ENTROPY = CALCULATE_SHANNON_ENTROPY(QUERY.domain)
            IF ENTROPY > 95th_percentile_for_peer_group:
              FLAG_QUERY(QUERY)
          NXDOMAIN_RATIO = CALCULATE_NXDOMAIN_RATIO(DNS_QUERIES)
          IF NXDOMAIN_RATIO > 3_std_dev_from_baseline:
            FLAG_DEVICE as potential C2 beaconing
  - question: Can the network session responsible for downloading the malicious application be identified using machine learning?
    context: Identifying the exact download source of a malicious application is crucial for understanding the attack vector. This question uses a classification model (Random Forest) to analyze network sessions. By evaluating features like the User-Agent string, SSL/TLS fingerprint, URL structure, and IP reputation, the model can automatically classify sessions as malicious, pointing directly to the exploit delivery vector.
    answer_sources:
      - MDM/UEM application inventory logs
      - Mobile Threat Protection (MTP) agent logs
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile devices with MTP agents, MDM/UEM management console, integrated threat intelligence platforms, network egress points, and corporate Wi-Fi infrastructure.
    range: Analyze sessions preceding the malicious app installation
    queries:
      - technology: Pseudocode / ML
        query: |
          MODEL = LOAD_RANDOM_FOREST_MODEL()
          NETWORK_SESSIONS = SEARCH network_logs(DEVICE_ID, before_install_time)
          FOR each SESSION in NETWORK_SESSIONS:
            FEATURES = EXTRACT_FEATURES(SESSION) // User-Agent, JA3/JA3S, URL chars, IP rep, etc.
            PREDICTION = MODEL.PREDICT(FEATURES)
            IF PREDICTION is 'malicious':
              FLAG as likely exploit delivery vector
  - question: Has a non-system application spawned a shell process or modified a critical system file?
    context: A legitimate, user-installed application should not spawn a shell (`su`, `sh`) or write to protected system areas. Such behavior is a strong indicator that the application has exploited a vulnerability to gain root or system-level privileges. This question focuses on creating a high-severity alert for this unambiguous sign of compromise, enabling rapid response.
    answer_sources:
      - Mobile Threat Protection (MTP) process event logs
      - Mobile Threat Protection (MTP) API call logs
      - Zeek conn.log
      - Zeek dns.log
      - Managed mobile devices (corporate and BYOD) with MTP agents installed, Enterprise network gateways, DNS resolvers.
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH mtp_process_logs
          WHERE app_type = 'non-system' AND (child_process IN ['su', 'sh'] OR file_modified IN [critical_system_files])
          ALERT on new results
  - question: Is an application making an unusually high number of API calls or using APIs it has never used before?
    context: Exploit code often involves making a rapid series of specific API calls to trigger a vulnerability. By baselining the normal API behavior of each application, analysts can detect significant deviations. This question helps identify suspicious activity by alerting when an application's API call frequency spikes or when it starts using a new, potentially dangerous set of APIs, which could indicate an exploit in progress.
    answer_sources:
      - Mobile Threat Protection (MTP) process event logs
      - Mobile Threat Protection (MTP) API call logs
      - Zeek conn.log
      - Zeek dns.log
      - Managed mobile devices (corporate and BYOD) with MTP agents installed, Enterprise network gateways, DNS resolvers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each APP on DEVICE:
            BASELINE = GET_API_CALL_BASELINE(APP, last 30 days) // frequency, distinct calls
            CURRENT_API_CALLS = GET_CURRENT_API_CALLS(APP)
            IF CURRENT_API_CALLS.frequency > 99th_percentile(BASELINE.frequency):
              ALERT 'Anomalous API call frequency'
            IF CURRENT_API_CALLS.set contains new_api not in BASELINE.set:
              ALERT 'Anomalous new API call detected'
  - question: Does the sequence of API calls from an application match the pattern of a multi-stage exploit chain?
    context: Multi-stage exploits execute a specific sequence of API calls. While individual calls may seem benign, the sequence is anomalous. This question uses a sophisticated machine learning model (LSTM autoencoder) trained on legitimate API call sequences. When a real-time sequence from an application cannot be accurately reconstructed by the model (high reconstruction error), it suggests the sequence is abnormal and likely part of an exploit.
    answer_sources:
      - Mobile Threat Protection (MTP) process event logs
      - Mobile Threat Protection (MTP) API call logs
      - Zeek conn.log
      - Zeek dns.log
      - Managed mobile devices (corporate and BYOD) with MTP agents installed, Enterprise network gateways, DNS resolvers.
    range: last 90 days
    queries:
      - technology: Pseudocode / ML
        query: |
          MODEL = LOAD_LSTM_AUTOENCODER_MODEL()
          API_SEQUENCES = GET_REALTIME_API_SEQUENCES_from_mtp()
          FOR each SEQUENCE in API_SEQUENCES:
            RECONSTRUCTION_ERROR = MODEL.CALCULATE_ERROR(SEQUENCE)
            IF RECONSTRUCTION_ERROR is high:
              FLAG as anomalous sequence
              CORRELATE with network beaconing from same device
  - question: Has a device's security configuration been changed to a non-compliant state, such as enabling Developer Mode?
    context: After gaining privileged access, an adversary may alter a device's security settings to facilitate further actions, such as installing more tools or intercepting traffic. Changes like enabling 'Developer Mode' or 'Unknown Sources' are significant security regressions and violations of typical corporate policy. This question provides a direct alert when such a policy-violating change is detected by the MDM/UEM platform.
    answer_sources:
      - MDM/UEM configuration logs
      - MDM/UEM compliance logs
      - Zeek ssl.log
      - Zeek x509.log
      - MDM/UEM management console, managed mobile devices, enterprise certificate authorities, network gateways.
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          SEARCH mdm_uem_logs
          WHERE developerMode_enabled = 'true' OR unknownSources_allowed = 'true'
          ALERT on new results
  - question: Have any new, untrusted root certificates been installed on the device?
    context: Installing a new root certificate is a powerful technique for an attacker, allowing them to perform man-in-the-middle (MitM) attacks by signing fake certificates for legitimate domains. This question involves baselining the set of trusted certificates on a device and then periodically checking for any changes. A low similarity score between the baseline and the current set indicates that a new certificate has been added or removed, which is a major security concern.
    answer_sources:
      - MDM/UEM configuration logs
      - MDM/UEM compliance logs
      - Zeek ssl.log
      - Zeek x509.log
      - MDM/UEM management console, managed mobile devices, enterprise certificate authorities, network gateways.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          DEVICE_ID = [ID of device]
          BASELINE_CERTS = GET_BASELINE_CERT_SET(DEVICE_ID)
          CURRENT_CERTS = SEARCH x509_logs for certs from DEVICE_ID
          JACCARD_SCORE = CALCULATE_JACCARD_SIMILARITY(BASELINE_CERTS, CURRENT_CERTS)
          IF JACCARD_SCORE < 0.95:
            ALERT 'Untrusted certificate change detected'
  - question: Can a machine learning model identify devices with non-compliant or anomalous security configurations?
    context: While individual rule violations are important, a machine learning model can detect more subtle patterns of misconfiguration that might indicate a compromise. This question uses a One-Class SVM model, which learns what a 'normal,' compliant device configuration looks like. It can then flag any device whose configuration snapshot deviates from this norm as an outlier, even if it doesn't violate a specific, hard-coded rule.
    answer_sources:
      - MDM/UEM configuration logs
      - MDM/UEM compliance logs
      - Zeek ssl.log
      - Zeek x509.log
      - MDM/UEM management console, managed mobile devices, enterprise certificate authorities, network gateways.
    range: last 90 days
    queries:
      - technology: Pseudocode / ML
        query: |
          MODEL = LOAD_ONE_CLASS_SVM_MODEL()
          DEVICE_CONFIGS = GET_REALTIME_CONFIGS_from_mdm()
          FOR each CONFIG in DEVICE_CONFIGS:
            PREDICTION = MODEL.PREDICT(CONFIG)
            IF PREDICTION is 'outlier':
              FLAG device as potentially compromised