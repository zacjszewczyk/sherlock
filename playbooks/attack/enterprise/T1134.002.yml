name: T1134.002: Create Process with Token
id: f9e1b2a0-c3d4-4e5f-8b6a-7c8d9e0f1a2b
description: "This playbook investigates whether an adversary has escalated privileges or evaded defenses by creating a new process with a stolen or manipulated token. This technique involves an attacker obtaining a token from another process (e.g., a higher-privileged one) and then using it to launch a new process that inherits the rights and permissions of that token. Investigative context includes looking for non-privileged users creating privileged processes with known hacking tools; sensitive system processes (like lsass.exe) spawning interactive shells (like cmd.exe or powershell.exe); processes being created with a higher integrity level or different user context than their parent; and observing suspicious network activity immediately following a token elevation event. Further indicators of evasion include trusted processes like explorer.exe spawning suspicious children, high-privilege processes spawning unsigned executables from unusual locations, manipulations of the process ancestry chain, and the reuse of a single non-interactive logon token for multiple, disparate malicious activities."
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: "Have any processes been created by non-privileged users that resulted in a privileged context, where the process name or command line matches a known token manipulation tool?"
    context: "This question aims to detect the most direct evidence of token manipulation for privilege escalation. Adversaries often use well-known tools (e.g., incognito.exe, psgetsys.exe) or scripts (e.g., Invoke-TokenManipulation) to create a new process with a stolen token. By monitoring for the creation of processes by non-privileged users that result in a privileged process (e.g., running as NT AUTHORITY\\SYSTEM), and filtering for the names or command-line arguments of these specific tools, analysts can identify clear-cut instances of this technique."
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Administrator Workstations, Critical Application Servers, Tier 0 Assets
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 WHERE (NewProcessName IN watchlist OR CommandLine CONTAINS watchlist) AND TargetUserName IS privileged AND CreatorUserName IS NOT privileged"
  - question: "Have any statistically rare or unusual processes created child processes with elevated tokens?"
    context: "Legitimate privilege escalation is typically performed by a small, predictable set of parent processes. This question seeks to identify outliers. By calculating the enterprise-wide rarity of any process that spawns a child with an elevated token, we can surface anomalous behavior. A process that has rarely or never been seen creating privileged children across the enterprise is highly suspicious and warrants investigation as a potential attacker tool or compromised legitimate application."
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Administrator Workstations, Critical Application Servers, Tier 0 Assets
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 WHERE TokenElevationType IN (1, 2) | STATS frequency(CreatorProcessName) | FIND creator processes with frequency < 5th percentile"
  - question: "Can a machine learning model, trained on historical process creation data, classify any new privilege escalations as suspicious?"
    context: "This question leverages a machine learning model to distinguish between legitimate and malicious token usage. The model is trained on features like parent/child process names, user contexts, and command-line characteristics. It learns the complex patterns of benign escalations (e.g., software installers) and can then predict whether a new, unseen escalation event is more likely to be malicious, providing a more nuanced detection capability than simple rules."
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Administrator Workstations, Critical Application Servers, Tier 0 Assets
    range: last 90 days
    queries:
      - "INPUT WindowsEventID:4688 | APPLY ML_Model_Suspicious_Token_Escalation | FIND classification == 'suspicious'"
  - question: "Have any sensitive system processes spawned an interactive shell or script interpreter?"
    context: "This question looks for a common pattern of privilege escalation where an attacker, having gained control of a high-privilege system process (e.g., wininit.exe, services.exe), uses that access to spawn an interactive shell like cmd.exe or powershell.exe. This gives the attacker an interactive command prompt with system-level privileges. Legitimate system processes rarely, if ever, spawn interactive shells, making this a high-fidelity indicator of compromise."
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Standard User Endpoints, Web Servers, Core Infrastructure Servers
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 WHERE CreatorProcessName IN (lsass.exe, services.exe, etc.) AND NewProcessName IN (cmd.exe, powershell.exe, etc.)"
  - question: "Have any statistically rare parent-child process relationships been observed, especially when resulting in a privileged context?"
    context: "This question aims to detect anomalies in process lineage. By profiling normal parent-child relationships across the environment, we can identify when a process spawns a child it has never or rarely spawned before. Such an event, especially when the new process is running with higher privileges than the parent, strongly suggests that the parent process was compromised and used to launch a malicious tool or shell."
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Standard User Endpoints, Web Servers, Core Infrastructure Servers
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 | STATS frequency(CreatorProcessName, NewProcessName) | FIND pairs with frequency < 1st percentile AND TargetUserName IS privileged"
  - question: "Can an anomaly detection model identify unusual process creation events, such as a system service spawning PowerShell with a long, encoded command?"
    context: "This question uses machine learning to find outliers in process creation behavior without pre-defined rules. The model learns what constitutes 'normal' for various process attributes (parent, child, path, command line). It can then flag events that deviate significantly, such as the system process `services.exe` suddenly spawning `powershell.exe` with a long, high-entropy command line, which is a classic indicator of a fileless attack."
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers, Standard User Endpoints, Web Servers, Core Infrastructure Servers
    range: last 90 days
    queries:
      - "INPUT ProcessCreationEvents | APPLY ML_Model_Process_Anomaly_Detection | FIND event is outlier"
  - question: "Has a process been created where a non-privileged user's process spawned a process as a privileged user, and the parent process is not a known, legitimate privilege broker?"
    context: "This question hones in on illegitimate privilege escalation. While some programs (like `runas.exe` or UAC via `consent.exe`) are designed to create processes with different user contexts, most applications are not. This query looks for instances where a process from a standard user account creates a new process running as a privileged account (like SYSTEM) and explicitly excludes the known, legitimate programs that perform this function, filtering the noise and highlighting suspicious activity."
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 WHERE TargetUserName IS privileged AND CreatorUserName IS NOT privileged AND CreatorProcessName NOT IN (svchost.exe, consent.exe, runas.exe)"
  - question: "Has a process created a child process for a user account it has never been associated with before, where that new user is privileged?"
    context: "This question establishes a behavioral baseline for each parent process, noting the user accounts it typically creates processes for. It then looks for significant deviations. For example, if `outlook.exe` suddenly creates a process as the `NT AUTHORITY\\SYSTEM` user, this is highly anomalous and deviates from its baseline of creating processes for the logged-on user. This indicates a potential exploit and token manipulation."
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "FOR each CreatorProcessName, BASELINE the set of TargetUserNames | SEARCH new WindowsEventID:4688 | ALERT if JaccardDistance(new.TargetUserName, baseline) > 0.9 AND new.TargetUserName IS privileged"
  - question: "Has a time-series anomaly detection model detected a sudden spike in the rate of privilege escalations on any single host?"
    context: "This question shifts the focus from individual events to the rate of events over time on a per-host basis. A sudden, sharp increase in the number of privilege escalations (where a child process has more privileges than its parent) on one machine, outside of normal business hours or patching windows, can indicate an automated attack script or an adversary actively working on the machine to escalate their access."
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 where TargetPrivileges > CreatorPrivileges | TIMESERIES count by host | APPLY ML_Model_Spike_Detection | FIND anomalous spikes"
  - question: "Has a process with an elevated token been created, followed within five minutes by an outbound network connection to a known-bad IP or unusual port?"
    context: "This question correlates host-based privilege escalation with network activity to identify post-exploitation behavior. Attackers often escalate privileges to gain less restricted network access. This query looks for the sequence of a token elevation event followed shortly by a network connection to a destination on a threat intelligence list or to a non-standard port, which could indicate C2 communication or data exfiltration."
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint Devices, DNS Servers, Network Egress Points, Firewalls
    range: last 90 days
    queries:
      - "JOIN (SEARCH WindowsEventID:4688 WHERE TokenElevationType IN (1,2)) with (SEARCH Zeek:conn.log) on host_ip within 5min | WHERE conn.dest_ip IN threat_intel OR conn.dest_port NOT IN (80, 443, 22, 3389)"
  - question: "Following a process's token elevation, did the host make DNS requests for high-entropy domains or connect to statistically rare ports?"
    context: "This question uses statistical measures to find suspicious network follow-on activity without relying on threat intelligence. High-entropy or algorithmically generated domain names (DGA) are a hallmark of malware C2. Likewise, connections to very rare ports across the enterprise can indicate a custom C2 channel. Correlating this activity to a recent privilege escalation event increases the likelihood that it is malicious."
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint Devices, DNS Servers, Network Egress Points, Firewalls
    range: last 90 days
    queries:
      - "CORRELATE (SEARCH WindowsEventID:4688 WHERE TokenElevationType IN (1,2)) with subsequent DNS/Conn logs on host within 1min | FIND DNS query entropy > 3.5 OR destination port frequency < 1st percentile"
  - question: "Does the sequence of host and network events following a token escalation match a known malicious pattern, according to a sequence analysis model?"
    context: "This question uses a sophisticated ML model to understand the entire sequence of actions following a privilege escalation. The model is trained to recognize legitimate workflows (e.g., an update service escalates, reads a config file, and binds to a local port). It can then flag sequences that don't fit these patterns, such as an escalation followed by a DNS query to a dynamic domain and an outbound connection, as likely malicious."
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint Devices, DNS Servers, Network Egress Points, Firewalls
    range: last 90 days
    queries:
      - "INPUT sequences of host/network events post-escalation | APPLY ML_Model_Sequence_Analysis | FIND sequences with low probability under 'legitimate' model"
  - question: "Have any commonly impersonated trusted processes, like explorer.exe or svchost.exe, spawned a child process that is a known suspicious tool or uses a malicious command-line pattern?"
    context: "This question targets a defense evasion technique where adversaries use the token of a trusted process (like `explorer.exe`) to launch their malicious tools. This makes the malicious process appear as a legitimate child of a trusted parent, potentially fooling simple detection rules. This query checks if these trusted parents are spawning children that are on a watchlist of malicious tools (e.g., `mimikatz.exe`) or using suspicious command-line arguments (e.g., `powershell -enc`)."
    answer_sources:
      - Windows Event ID 4688
      - Standard User Endpoints, Critical Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 WHERE CreatorProcessName IN (explorer.exe, svchost.exe) AND (NewProcessName IN watchlist OR CommandLine CONTAINS suspicious_patterns)"
  - question: "Have trusted parent processes like explorer.exe or svchost.exe spawned a child process that is statistically rare, has an unusually long command line, or has never been seen before?"
    context: "This question uses statistical baselining to find anomalous children of trusted processes. Since the child processes of `explorer.exe` and `svchost.exe` are generally predictable, any deviation from the norm is suspicious. This query flags when these parents spawn a child that is an enterprise-wide rarity, has a command line in the 99th percentile for length (often indicative of obfuscated scripts), or is entirely novel, suggesting a new or unknown tool being used for evasion."
    answer_sources:
      - Windows Event ID 4688
      - Standard User Endpoints, Critical Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - "SEARCH WindowsEventID:4688 WHERE CreatorProcessName IN (explorer.exe, svchost.exe) | FIND child process frequency < 0.1 percentile OR command-line length > 99th percentile OR is_new_child"
  - question: "Can a graph-based community detection model identify a new process that, despite being spawned by a trusted parent, belongs to a different 'community' of processes?"
    context: "This question models the entire system's process relationships as a graph. Legitimate processes form tightly-knit communities (e.g., the 'Office Suite' community, the 'OS Core' community). If a trusted parent like `svchost.exe` spawns a new process that the model places in a small, isolated, or unrelated community, it's a strong indicator that the new process does not belong and is likely malicious, using the trusted parent as a disguise."
    answer_sources:
      - Windows Event ID 4688
      - Standard User Endpoints, Critical Application Servers, Terminal Servers
    range: last 90 days
    queries:
      - "MODEL process relationships as a graph | APPLY community detection algorithm | FIND child process in different community than its trusted parent"
  - question: "Have any critical system processes spawned a child process that is unsigned or located in a user-writable directory?"
    context: "This query looks for a key indicator of defense evasion. Critical system processes like `lsass.exe` or `services.exe` should only ever spawn legitimate, signed Microsoft binaries from protected system directories. An alert for one of these processes spawning an unsigned executable, or any executable from a temporary or user-profile folder (e.g., C:\\Users\\*), is a high-fidelity signal of compromise. Any child of `lsass.exe` is especially critical."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Core Infrastructure Servers (e.g., AD, DNS), All Windows Servers
    range: last 90 days
    queries:
      - "SEARCH SysmonEventID:1 WHERE ParentProcess IN (lsass.exe, wininit.exe, etc.) AND (Image path is in user-writable dir OR Signed is false)"
  - question: "Has a critical system process spawned a child whose attributes (e.g., command-line length) deviate significantly from the established baseline for its legitimate children?"
    context: "This question establishes a detailed statistical profile for the normal children of critical parent processes. It records attributes like typical file paths, signature status, and command-line length. It then flags any new child process that is a major outlier, for example, having a command-line length that is more than three standard deviations longer than the mean. This can catch attackers using legitimate tools like PowerShell with abnormally long, obfuscated scripts."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Core Infrastructure Servers (e.g., AD, DNS), All Windows Servers
    range: last 90 days
    queries:
      - "FOR each critical parent, BASELINE child attributes (path, signature, cmd_length) | SEARCH for new child processes | ALERT if new child attribute deviates > 3 std deviations from baseline"
  - question: "Can a one-class SVM model, trained on the attributes of legitimate child processes, identify any new child of a high-privilege parent as anomalous?"
    context: "This question uses a machine learning model designed specifically for anomaly detection. The one-class SVM is trained only on 'normal' data—in this case, the attributes of legitimate child processes for parents like `services.exe`. It creates a precise boundary around this normal behavior. Any new process that falls outside this boundary is immediately flagged as an anomaly, allowing for the detection of novel evasion techniques that might not be caught by rules or statistical thresholds."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers, Core Infrastructure Servers (e.g., AD, DNS), All Windows Servers
    range: last 90 days
    queries:
      - "INPUT attributes of new child process | APPLY One-Class_SVM_Model for that parent | FIND process is classified as outlier"
  - question: "Have any instances occurred where the 'Creator Process ID' (from event 4688) does not match the 'Parent Process ID' (from Sysmon event 1) for the same new process?"
    context: "This question identifies a sophisticated evasion technique known as process hollowing or process doppelgänging, which breaks the parent-child process chain. Normally, the process that creates a new process is also its parent. By correlating Windows audit logs with Sysmon logs, we can detect when these two IDs do not match. This mismatch is a very strong indicator of an advanced threat attempting to hide its process ancestry from security tools."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers with advanced audit logging and Sysmon enabled
    range: last 90 days
    queries:
      - "JOIN (SysmonEventID:1) with (WindowsEventID:4688) on ProcessID | WHERE Sysmon.ParentProcessID != Windows.CreatorProcessID"
  - question: "Among instances of Creator/Parent process ID mismatches, are there any triplets (Creator, Parent, Child) that are statistically rare?"
    context: "While some legitimate software (like EDRs or admin tools) may cause Creator/Parent mismatches, their process name combinations are typically consistent. This question filters out that known-good noise by looking for new or rare combinations of the creator, the 'fake' parent, and the new child process. A triplet that has never or rarely been seen before is more likely to be a novel malicious tool rather than a known benign application."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers with advanced audit logging and Sysmon enabled
    range: last 90 days
    queries:
      - "SEARCH for Creator/Parent mismatches | STATS frequency of (CreatorProcessName, ParentProcessName, NewProcessName) triplet | FIND triplets with frequency < 1st percentile"
  - question: "Using clustering on Creator/Parent mismatch events, are there any events that are identified as 'noise' or do not belong to a known cluster of benign activity?"
    context: "This question uses machine learning to automatically group benign instances of Creator/Parent mismatches. Legitimate tools will create dense clusters of activity based on their consistent process names and paths. The DBSCAN clustering algorithm is particularly useful as it identifies events that don't belong to any cluster, classifying them as 'noise'. These noise points represent sporadic, un-grouped events that are highly likely to be unique, malicious tools and should be prioritized for investigation."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers with advanced audit logging and Sysmon enabled
    range: last 90 days
    queries:
      - "INPUT features from mismatch events | APPLY DBSCAN clustering algorithm | FIND events classified as noise points"
  - question: "Has a single non-interactive logon session been used to spawn more than 5 different processes from more than 3 different parent processes within 10 minutes?"
    context: "This question seeks to identify an adversary reusing a single stolen token (obtained via a network or service logon) for multiple, unrelated purposes. A legitimate service logon might spawn one or two related processes. It is highly unusual for a single non-interactive session to spawn many different types of processes from different parents in a short time. This rule-based approach provides a clear threshold for detecting this suspicious reuse of a single logon session."
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Multi-user Systems (e.g., Terminal Servers), Critical Servers, Domain Controllers
    range: last 90 days
    queries:
      - "JOIN (EventID:4624 WHERE LogonType NOT IN (2,10)) with (EventID:4688) on LogonID | GROUP by LogonID over 10min | FIND distinct_count(NewProcessName) > 5 AND distinct_count(CreatorProcessName) > 3"
  - question: "For any single non-interactive logon session, has the rate of process creation or the variety (entropy) of process names exceeded the 99th percentile of its historical baseline?"
    context: "This question establishes a statistical baseline for the normal behavior of non-interactive logon sessions on a per-host and per-type basis. It learns the typical rate of process creation and the variety of processes spawned. An alert is triggered when a session dramatically exceeds these norms, such as a service account suddenly spawning 50 different processes in an hour when it normally spawns two. This detects anomalous token reuse that might not be caught by a fixed-threshold rule."
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Multi-user Systems (e.g., Terminal Servers), Critical Servers, Domain Controllers
    range: last 90 days
    queries:
      - "FOR each non-interactive LogonID, CALCULATE hourly process creation rate and name entropy | BASELINE these metrics | ALERT when a new session's metrics > 99th percentile of baseline"
  - question: "Can a sequence-to-sequence autoencoder model detect a non-interactive logon session whose sequence of created processes has a high reconstruction error?"
    context: "This question uses an advanced ML model to learn the 'grammar' of legitimate process sequences within non-interactive sessions (e.g., a patching service starts, runs an installer, which spawns a temp file, then exits). An autoencoder is trained to reproduce these legitimate sequences. When an adversary reuses a token for disparate tasks, the resulting process sequence (e.g., run whoami, then powershell, then net.exe) will not match any learned legitimate workflow. The model will fail to reconstruct this sequence accurately, resulting in a high 'reconstruction error' and flagging the session as anomalous."
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Multi-user Systems (e.g., Terminal Servers), Critical Servers, Domain Controllers
    range: last 90 days
    queries:
      - "MODEL process sequences within logon sessions using a seq2seq autoencoder | FIND sessions where sequence reconstruction error is high"