name: T1134.002: Create Process with Token
id: 7f9c3b8a-1d9e-4f0a-9c8b-3e2a1b0c4d5e
description: This playbook focuses on detecting adversaries who have escalated privileges or are evading defenses by creating a new process with a stolen, manipulated, or elevated token. This technique, T1134.002, involves an adversary gaining access to a security token (e.g., from another process) and then using it to launch a new process under the security context of the token's owner. This allows them to operate as another user or at a higher integrity level. Indicators of this activity include unusual parent-child process relationships (e.g., a system process spawning an interactive shell), mismatches between the user context of the creator process and the new process, the use of known token manipulation tools, a single non-interactive logon session spawning many disparate processes, and attempts to break the process ancestry chain to hide the origin of malicious activity.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any process creation events where a non-privileged user created a privileged process using a known token manipulation tool?
  context: This question aims to identify the most direct evidence of token manipulation: the use of known malicious tools. Adversaries often use specific utilities (e.g., incognito.exe, Invoke-TokenManipulation) to steal and use tokens. By looking for process creation events where a low-privilege user creates a high-privilege process using one of these tools, analysts can quickly pinpoint explicit privilege escalation attempts.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Administrator Workstations
  - Critical Application Servers
  - Tier 0 Assets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE (process_name IN watchlist_token_tools OR command_line CONTAINS watchlist_token_tools)
      AND target_user_is_privileged = true
      AND creator_user_is_privileged = false
- question: Has an unusually rare process created a child process with an elevated token?
  context: This question helps find anomalous processes performing token elevation. While some legitimate processes elevate privileges, novel or custom malware will appear as statistically rare processes performing this action. By calculating the enterprise-wide rarity of a parent process that spawns a child with a full or elevated token, analysts can uncover suspicious tools that are not yet on a known-bad watchlist.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Administrator Workstations
  - Critical Application Servers
  - Tier 0 Assets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE token_elevation_type IN ('Type 1', 'Type 2')
      CALCULATE enterprise_rarity of creator_process_name
      FILTER rarity < 5th_percentile
- question: Can a machine learning model classify any recent process creation events as suspicious escalations based on historical patterns?
  context: This question uses a supervised model to find complex, non-obvious patterns of malicious token usage that simple symbolic or statistical methods might miss. By training on features like process names, user contexts, and command-line characteristics from labeled historical data, the model can learn the subtle differences between benign and suspicious privilege escalations.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Administrator Workstations
  - Critical Application Servers
  - Tier 0 Assets
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT process_event_features (creator_process, new_process, users, cmd_line_entropy)
      INTO supervised_classification_model
      OUTPUT classification (benign_escalation/suspicious_escalation)
- question: Has a sensitive system process (like lsass.exe or services.exe) spawned an interactive shell or script interpreter?
  context: Sensitive, non-interactive system processes should not spawn interactive shells like cmd.exe or powershell.exe. This behavior is a strong indicator that an adversary has injected into or manipulated a high-privilege system process to gain execution and operate with system-level permissions. This is a high-fidelity indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Standard User Endpoints
  - Web Servers
  - Core Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE creator_process_name IN (sensitive_system_processes_list)
      AND new_process_name IN (interactive_shells_list)
- question: Have any statistically rare parent-child process relationships been observed, especially involving a change to a privileged user context?
  context: This question aims to detect novel or unusual process chains that deviate from established enterprise-wide baselines. By profiling all normal parent-child relationships, analysts can flag when a rare pairing occurs (e.g., winlogon.exe spawning something other than its usual children), which could indicate a new or customized attack technique that doesn't rely on known tools.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Standard User Endpoints
  - Web Servers
  - Core Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      CALCULATE frequency of (creator_process_name, new_process_name) pair
      FILTER frequency < 1st_percentile
      AND target_user_is_privileged = true
      AND target_user != creator_user
- question: Has an anomaly detection model flagged any process creation events as outliers based on their attributes?
  context: This question uses unsupervised machine learning to identify suspicious process creation by learning normal behavior and flagging significant deviations. An anomaly detection model can consider multiple features at once (parent, child, path, command line) to flag events like `services.exe` spawning `powershell.exe` with a long, encoded command line, which might be missed by simpler methods.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Standard User Endpoints
  - Web Servers
  - Core Infrastructure Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT process_event_features (parent_process, child_process, path, cmd_line_entropy)
      INTO anomaly_detection_model (e.g., Isolation Forest)
      OUTPUT flagged_outliers
- question: Did a non-privileged user create a privileged process where the parent process is not a known, legitimate privilege broker?
  context: This question helps to filter out legitimate privilege escalations (e.g., UAC prompts handled by consent.exe, or administrative tasks via runas.exe) to focus on unauthorized escalations. By maintaining an allow-list of legitimate "broker" processes, analysts can create high-fidelity alerts for escalations originating from unexpected parent processes.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE target_user_is_privileged = true
      AND creator_user_is_privileged = false
      AND creator_process_name NOT IN (allow_list_of_brokers)
- question: Has a process created a child process for a highly unusual target user account compared to its historical baseline?
  context: This question helps detect when a process, which normally creates child processes for a specific user or set of users, suddenly creates a child process as a different, privileged user. This indicates potential token theft and reuse, where an adversary uses a compromised process to launch new payloads with an elevated token.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR_EACH process_creation_event
      COMPARE new_target_user to historical_target_users_for_creator_process
      CALCULATE set_dissimilarity (e.g., Jaccard distance)
      FILTER dissimilarity_score > 0.9 AND new_target_user is privileged
- question: Has a time-series model detected an anomalous spike in the rate of privilege escalations on any single host?
  context: This question seeks to identify a sudden burst of privilege escalation activity on a machine, which is a strong signal of active compromise. Normal system activity may involve a low, steady rate of escalations, but a sudden spike outside of a maintenance window suggests an adversary is actively using exploits or stolen tokens.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT time_series_of (escalation_events per hour per host)
      INTO time_series_anomaly_detection_model (e.g., Prophet, LSTM)
      OUTPUT hosts with anomalous spikes in escalation rate
- question: Following a process creation with an elevated token, did the host make an outbound network connection to a known-bad IP or an unusual port?
  context: This question correlates an internal privilege escalation event with external command-and-control (C2) or exfiltration activity. This is critical for linking the escalation directly to its malicious purpose and understanding the attack lifecycle. An escalation followed immediately by a connection to a threat-intel-flagged IP is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Devices
  - DNS Servers
  - Network Egress Points
  - Firewalls
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      JOIN (SEARCH process_creation_events WHERE token_is_elevated = true)
      WITH (SEARCH network_connection_logs) ON host, time_window=5min
      FILTER outbound_connection.dest_ip IN (threat_intel_feed)
      OR outbound_connection.dest_port NOT IN (common_ports_list)
- question: After a process was created with an elevated token, did it make DNS requests for high-entropy domains or connect to statistically rare ports?
  context: This question helps identify likely C2 activity by looking for tell-tale signs like algorithmically generated domain names (DGA), which have high character entropy, or connections to non-standard ports used to bypass firewall rules. An adversary may escalate privileges and then immediately reach out to their C2 infrastructure.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Devices
  - DNS Servers
  - Network Egress Points
  - Firewalls
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR_EACH process_creation_event with elevated_token
      ANALYZE subsequent_dns_and_network_events(within 1min)
      CALCULATE dns_query_entropy or destination_port_rarity
      FILTER dns_entropy > 3.5 OR port_rarity > 99th_percentile
- question: Does the sequence of host and network events following a token escalation match a known malicious pattern?
  context: This question uses sequence analysis to distinguish between legitimate post-escalation workflows (e.g., patching) and malicious ones (e.g., C2 beaconing). By modeling legitimate sequences, a machine learning model can flag a series of actions like 'escalation -> DNS query for dynamic domain -> outbound connection to rare port' as highly anomalous.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint Devices
  - DNS Servers
  - Network Egress Points
  - Firewalls
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT event_sequence (escalation, dns, network_conn, file_access)
      INTO sequence_analysis_model (e.g., HMM, LSTM)
      OUTPUT sequences with a low probability under the 'legitimate activity' model
- question: Has a commonly impersonated trusted process, like explorer.exe, spawned a child process that matches a known suspicious tool or command?
  context: This question aims to detect adversaries masquerading their malicious processes as children of trusted Windows processes (e.g., explorer.exe, svchost.exe) to blend in and evade simple detection. By looking for a trusted parent spawning a suspicious child (e.g., mimikatz.exe or powershell with an encoded command), analysts can uncover this evasion technique.
  answer_sources:
  - Windows Event ID 4688
  - Standard User Endpoints
  - Critical Application Servers
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE creator_process_name IN (trusted_impersonated_processes)
      AND (new_process_name IN (suspicious_tools_list) OR command_line CONTAINS (suspicious_patterns))
- question: Has a trusted parent process like explorer.exe or svchost.exe spawned a statistically rare or never-before-seen child process?
  context: This question identifies defense evasion by baselining all normal child processes of commonly impersonated parents and alerting on any deviations. This is effective for detecting novel malicious payloads that are not yet on any signature list, as their appearance as a child of explorer.exe would be statistically anomalous.
  answer_sources:
  - Windows Event ID 4688
  - Standard User Endpoints
  - Critical Application Servers
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE creator_process_name IN (trusted_impersonated_processes)
      CALCULATE frequency of new_process_name
      FILTER frequency < 0.1st_percentile OR command_line_length > 99th_percentile
- question: Has a graph-based model identified a new process that, despite having a trusted parent, belongs to a different, anomalous community of processes?
  context: This question uses graph analysis to model normal process relationships as communities. An anomaly occurs when a new process, spawned by a trusted parent like 'explorer.exe', is relationally closer to a 'malicious' group of processes than its parent's typical children, indicating it doesn't belong and is likely an attempt at evasion.
  answer_sources:
  - Windows Event ID 4688
  - Standard User Endpoints
  - Critical Application Servers
  - Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      MODEL all_process_relationships as a graph
      APPLY community_detection_algorithm
      FIND new_process where parent_node_community != child_node_community
- question: Has a critical system process like lsass.exe or services.exe spawned a child process that is unsigned or located in a user-writable directory?
  context: This is a high-confidence indicator of compromise. Critical system processes should only spawn signed, legitimate children from protected system directories (%SystemRoot%\\System32). A child process located in a temp folder, user profile, or that is unsigned is highly suspicious and warrants immediate investigation. Any child process of lsass.exe is especially critical.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Core Infrastructure Servers (e.g., AD, DNS)
  - All Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_events (EventID 4688 or Sysmon EventID 1)
      WHERE creator_process_name IN (critical_system_processes)
      AND (new_process_path IN (user_writable_directories) OR new_process_is_unsigned = true)
- question: Did a critical system process spawn a child whose attributes (e.g., path, signature, command-line length) deviate significantly from the established baseline?
  context: This question helps detect sophisticated attacks where an adversary might use a legitimate but unusual child process. By baselining multiple attributes of normal children for a critical parent, this method can detect subtle deviations (e.g., an abnormally long command line for a typically simple process) that a simple rule might miss.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Core Infrastructure Servers (e.g., AD, DNS)
  - All Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR_EACH new_child_of_critical_parent
      COMPARE child_attributes (path, signature_status, cmd_length) to historical_baseline
      ALERT if any attribute deviates > 3 standard_deviations from the mean
- question: Has a one-class SVM model, trained on legitimate child process attributes, flagged any new process as an anomaly?
  context: This question uses a machine learning model to create a precise boundary of 'normal' for the children of high-privilege processes. By training on features like file path entropy and signer status of legitimate children, the model can effectively flag any new process that falls outside this learned boundary as anomalous and requiring investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Core Infrastructure Servers (e.g., AD, DNS)
  - All Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT new_child_process_features
      INTO one-class_SVM_model trained on legitimate_child_processes
      OUTPUT anomalies falling outside the learned boundary
- question: Are there any instances where the Creator Process ID (from Event 4688) does not match the Parent Process ID (from Sysmon Event 1) for the same new process?
  context: This is a direct detection for process parent PID spoofing, an advanced defense evasion technique. Adversaries use this to hide the true origin of a malicious process and break the chain of events for forensic analysis. A mismatch between the creator PID (who called the API) and the parent PID (who the OS lists as parent) is a strong indicator of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers with advanced audit logging and Sysmon enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      JOIN (Sysmon Event 1) and (Windows Event 4688) on new_process_id
      ALERT where Sysmon.ParentProcessID != Event4688.CreatorProcessID
- question: Among events with mismatched parent/creator PIDs, are there any process triplets (Creator, Parent, New Process) that are statistically rare?
  context: This question helps to filter out known benign software (like EDRs or admin tools) that legitimately uses PID spoofing. By focusing on rare and previously unseen combinations of the creator, parent, and child processes involved in a mismatch, analysts can prioritize novel activity that is more likely to be malicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers with advanced audit logging and Sysmon enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FIND all events with mismatched Parent/Creator PIDs
      CALCULATE frequency of the (creator_name, parent_name, new_process_name) triplet
      ALERT if frequency < 1st_percentile
- question: Has a clustering algorithm identified any PID mismatch events as un-clustered noise points, separate from dense clusters of benign activity?
  context: This question automates the process of separating known-good from unknown-bad. Legitimate PID spoofing by management tools will form dense, predictable clusters based on process names and paths. A clustering algorithm like DBSCAN can group this activity, leaving sporadic, un-clustered 'noise points' that are more likely to be unique, malicious tools and should be prioritized.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints and Servers with advanced audit logging and Sysmon enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT features_of_mismatched_PID_events
      INTO DBSCAN_clustering_model
      INVESTIGATE resulting noise_points (un-clustered events)
- question: Has a single non-interactive logon session (e.g., network or service logon) been used to spawn a high number of distinct processes from multiple different creators in a short time frame?
  context: This question seeks to detect the reuse of a single stolen token or credential (e.g., from a network or service logon) to perform multiple disparate actions. This is uncharacteristic of automated services, which are typically predictable, and is more indicative of an interactive adversary using a compromised token to explore a system.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Multi-user Systems (e.g., Terminal Servers)
  - Critical Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      JOIN (Event 4624) and (Event 4688) on LogonID
      WHERE LogonType is non-interactive (e.g., 3, 5)
      GROUP BY LogonID, 10_minute_window
      ALERT if COUNT(DISTINCT new_process_name) > 5 AND COUNT(DISTINCT creator_process_name) > 3
- question: For a non-interactive logon session, is the rate of process creation or the variety (entropy) of process names significantly higher than the established baseline?
  context: This provides a statistical method to detect the same behavior as the symbolic rule but is adapted to the specific baselines of different hosts and logon types. This reduces false positives from unusually busy (but legitimate) services by alerting only when the volume or variety of process creation is statistically abnormal for that specific context.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Multi-user Systems (e.g., Terminal Servers)
  - Critical Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR_EACH non-interactive_logon_session
      CALCULATE process_creation_rate_per_hour and process_name_entropy_per_hour
      COMPARE metrics to historical_baseline for that host/logon_type
      ALERT if metric > 99th_percentile
- question: Does the sequence of processes created within a non-interactive logon session have a high reconstruction error when passed through a sequence-to-sequence autoencoder?
  context: This question models the 'grammar' of legitimate process sequences for automated tasks (e.g., a service starting, running a script, then stopping). A sequence that the model cannot accurately reconstruct is considered anomalous because it doesn't follow any known legitimate workflow, suggesting it may be an adversary manually executing commands with a stolen token.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Multi-user Systems (e.g., Terminal Servers)
  - Critical Servers
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      INPUT sequence_of_process_names_from_a_logon_session
      INTO sequence_autoencoder_model
      ALERT if reconstruction_error is high