name: T1137.005: Outlook Rules
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is maintaining persistence by creating malicious Outlook rules. Adversaries can configure rules to automatically execute malicious code, often triggered by receiving an email with specific characteristics. This can manifest as OUTLOOK.EXE spawning suspicious child processes, the use of specialized tools or PowerShell scripts to manipulate mail rules, or processes executing from unusual file paths and making outbound network connections to command-and-control infrastructure.
type: technique
related:
  - TA0003: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is OUTLOOK.EXE spawning a child process whose hash is a known malicious indicator or that is connecting to a known malicious IP address or domain?
    context: Adversaries can abuse Outlook rules to automatically execute malicious code upon receiving a specially crafted email. This question aims to detect this activity by checking for direct evidence of compromise: a known malicious file being executed by Outlook or a network connection from an Outlook-spawned process to a known command-and-control (C2) server. A match is a high-confidence indicator of a breach.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - User workstations
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - "Symbolic (IOC Match): SEARCH Windows Event Logs (4688) WHERE ParentProcessName = 'OUTLOOK.EXE'. HASH ChildProcess executable. CORRELATE hash with threat intelligence feeds. Concurrently, SEARCH network logs (Zeek conn.log, dns.log) for traffic from the same host. CORRELATE destination IPs and domains with C2 blocklists."
  - question: Are processes spawned by OUTLOOK.EXE making DNS queries for domain names with unusually high entropy, possibly indicating the use of a Domain Generation Algorithm (DGA)?
    context: Domain Generation Algorithms (DGAs) are frequently used by malware to create a large number of pseudo-random domain names to contact C2 servers, making them difficult to block. High entropy (a measure of randomness) in a domain name is a key characteristic of DGA activity. This question seeks to identify this anomalous behavior originating from processes launched by Outlook rules.
    answer_sources:
      - Zeek dns.log
      - User workstations
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - "Statistical (Anomaly Detection): SEARCH Zeek dns.log for queries from hosts where OUTLOOK.EXE has spawned a child process. CALCULATE Shannon entropy for each queried domain. ALERT if the entropy score exceeds the established baseline (e.g., 98th percentile)."
  - question: Is there evidence of beaconing behavior, characterized by highly regular network connections, from processes spawned by OUTLOOK.EXE?
    context: Malware often communicates with its C2 server using a 'heartbeat' or beacon at regular intervals. This pattern is distinct from normal, more sporadic user-driven network traffic. This question applies time-series analysis to detect these highly regular, low-volume connection patterns from Outlook-spawned processes, which can uncover C2 channels even if the destination is not on a known blocklist.
    answer_sources:
      - Zeek conn.log
      - User workstations
      - Network egress points
      - DNS resolvers
    range: last 90 days
    queries:
      - "Machine Learning (Time-Series Analysis): GATHER Zeek conn.log data for processes spawned by Outlook. MODEL connection frequency, duration, and data volume over time using a forecasting model (e.g., ARIMA). ALERT on new traffic that significantly deviates from the forecast in a regular, 'heartbeat'-like pattern."
  - question: Has a known MAPI manipulation tool (e.g., MFCMapi.exe, Ruler.exe) been executed, or have PowerShell scripts containing cmdlets for Outlook rule modification been observed?
    context: Adversaries use specific tools and PowerShell commands to programmatically create or modify Outlook rules for persistence. This question looks for the direct use of these known malicious tools (Ruler, MFCMapi) or specific script functions (New-InboxRule, Ews.Service.dll), which is a strong indicator of an attempt to create a malicious persistence mechanism.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - User workstations
      - Exchange Servers
      - Administrative jump boxes
      - Microsoft 365 / Exchange Online audit logs
    range: last 90 days
    queries:
      - "Symbolic (Keyword/Signature Match): SEARCH process creation logs (Event ID 4688) for NewProcessName matching 'MFCMapi.exe' or 'Ruler.exe'. Concurrently, SEARCH PowerShell script block logs (Event ID 4104) for text containing 'New-InboxRule', 'Set-InboxRule', or 'Ews.Service.dll'."
  - question: Has PowerShell been observed as a child process of OUTLOOK.EXE, or are there PowerShell scripts with an unusually high frequency of rare terms related to mail rule manipulation?
    context: It is highly anomalous for the Outlook client to launch PowerShell directly. Such an event is a strong indicator of malicious activity. Furthermore, analyzing the content of PowerShell scripts can reveal malicious intent. This question uses TF-IDF analysis to find scripts that contain an unusual concentration of rare terms associated with mail rule manipulation, helping to surface malicious scripts from a large volume of benign administrative activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - User workstations
      - Exchange Servers
      - Administrative jump boxes
      - Microsoft 365 / Exchange Online audit logs
    range: last 90 days
    queries:
      - "Statistical (Frequency Analysis): SEARCH process creation logs (Event ID 4688) for events where ParentProcessName is 'OUTLOOK.EXE' and NewProcessName is 'powershell.exe'. ALERT on any occurrence. Separately, CALCULATE TF-IDF scores on PowerShell script blocks (Event ID 4104) and ALERT on scripts with high scores for mail rule manipulation terms."
  - question: Can we classify PowerShell script executions as malicious attempts to manipulate mail rules based on features like obfuscation, length, and specific API calls?
    context: To evade detection, adversaries often obfuscate PowerShell scripts. This question proposes using a supervised machine learning model to automatically classify scripts based on a variety of features. The model learns from known malicious and benign examples to identify characteristics like obfuscated content, unusual script length, and the presence of specific API calls, enabling it to detect new and unknown malicious scripts.
    answer_sources:
      - Windows Event ID 4104
      - User workstations
      - Exchange Servers
      - Administrative jump boxes
      - Microsoft 365 / Exchange Online audit logs
    range: last 90 days
    queries:
      - "Machine Learning (Classification): EXTRACT features from PowerShell script block logs (Event ID 4104), such as script length, character distribution, presence of obfuscation, and API/cmdlet counts. APPLY a trained classification model (e.g., Random Forest) to classify new scripts as benign or malicious."
  - question: Has OUTLOOK.EXE been observed spawning a command-line interpreter (cmd.exe, powershell.exe) or a scripting host (wscript.exe, cscript.exe, mshta.exe)?
    context: Legitimate use of the Outlook application almost never involves launching a command shell or scripting engine. This behavior is a very strong indicator that a malicious rule has been triggered to execute a command or script on the system, providing the adversary with a direct method of execution and persistence.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI) instances
    range: last 90 days
    queries:
      - "Symbolic (Rule-Based Logic): SEARCH process creation logs (Event ID 4688) for events where the 'ParentProcessName' is 'OUTLOOK.EXE' and the 'NewProcessName' is one of 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', or 'mshta.exe'. Generate a high-priority alert on any match."
  - question: Has a new or 'first-seen' child process been spawned by OUTLOOK.EXE for any user in the organization?
    context: The set of child processes spawned by an application like Outlook is typically stable and predictable for a given user or user group. This question focuses on identifying deviations from that norm by establishing a baseline of normal activity. When a process like 'cmd.exe' is spawned by Outlook for the very first time for any user, it represents a significant anomaly that warrants immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI) instances
    range: last 90 days
    queries:
      - "Statistical (First-Seen Analysis): BUILD a historical baseline of all child processes spawned by 'OUTLOOK.EXE' per user. Continuously monitor process creation logs (Event ID 4688) and ALERT when a new parent-child relationship involving 'OUTLOOK.EXE' is observed for the first time for any user."
  - question: Are there any anomalous process creation events involving OUTLOOK.EXE that are identified as outliers by an unsupervised clustering model?
    context: This question uses unsupervised machine learning to find 'unknown unknowns.' By clustering all process creation events based on their features (parent, child, user, command line), normal activity forms dense clusters. Malicious activity, being rare and different, will likely fall outside these clusters and be flagged as an outlier or noise point, providing a way to detect novel attack variations involving Outlook.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI) instances
    range: last 90 days
    queries:
      - "Machine Learning (Clustering): APPLY an unsupervised clustering algorithm (e.g., DBSCAN) to process creation events (Event ID 4688). Use features like parent process, child process, user context, and command-line arguments. IDENTIFY and ALERT on any event classified as an outlier, paying special attention to those where 'OUTLOOK.EXE' is the parent."
  - question: Has a child process spawned by OUTLOOK.EXE from a user-writable directory (e.g., AppData, Temp) made a network connection to a known-bad IP or domain?
    context: Adversaries often drop their payloads into temporary or user-specific directories that do not require administrative privileges for writes. This question correlates two highly suspicious events: a process launched by Outlook from a non-standard location and that same process communicating with a known malicious destination. The combination of these events provides a high-fidelity alert.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - User workstations
      - Network egress points
      - Web proxies
    range: last 90 days
    queries:
      - "Symbolic (Correlation Rule): CORRELATE process creation logs (Event ID 4688) with network logs (Zeek) on host IP and timestamp. TRIGGER an alert if a process with parent 'OUTLOOK.EXE' executes from a path like '*\\AppData\\*' or '*\\Temp\\*' AND its host connects to a destination on a threat intelligence feed."
  - question: Are processes spawned by OUTLOOK.EXE connecting to newly registered domains (NRDs) or using uncommon network ports?
    context: Attackers frequently use newly registered domains for their C2 infrastructure to evade reputation-based blocking. Likewise, malware may communicate over non-standard ports to bypass simple firewall rules. This question looks for these two statistical anomalies in network traffic originating from processes that were spawned by Outlook, as they can indicate malicious C2 activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - User workstations
      - Network egress points
      - Web proxies
    range: last 90 days
    queries:
      - "Statistical (Thresholding): For traffic from Outlook-spawned processes, ENRICH DNS logs with WHOIS data and ALERT on connections to domains registered within the last 30 days. Concurrently, ANALYZE destination ports in connection logs and ALERT on any port that is statistically rare for that host."
  - question: Does a sequence of host and network events, beginning with OUTLOOK.EXE spawning a child process, match a pattern indicative of malicious activity?
    context: A cyberattack is often a sequence of discrete actions (e.g., drop payload, execute payload, connect to C2). This question uses a sequence analysis model to learn what these malicious chains of events look like. By analyzing a new sequence of events in real-time, the model can predict whether the sequence is likely to be malicious, enabling detection even before the full attack chain is completed.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - User workstations
      - Network egress points
      - Web proxies
    range: last 90 days
    queries:
      - "Machine Learning (Sequence Analysis): DEFINE a state sequence (e.g., Outlook spawns child from temp -> Child process starts -> Child makes DNS query -> Child connects to IP). TRAIN a sequence analysis model (e.g., RNN) on labeled benign and malicious sequences. DEPLOY model to predict the probability that a new sequence is malicious."