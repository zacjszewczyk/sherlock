name: T1036.002: Right-to-Left Override
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting the use of the Right-to-Left Override (RTLO) Unicode character (U+202E) to evade defenses by manipulating filenames. Adversaries use this technique to make malicious files appear as harmless documents or images, tricking users into executing them. The playbook provides investigative questions to detect the RTLO character itself in system and network logs, identify files with disguised executable extensions, uncover suspicious process chains originating from document-handling applications, and correlate file downloads with immediate executions involving RTLO-obfuscated files.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any filenames, process command lines, DNS queries, or registry values that contain the Right-to-Left Override (RTLO) character or its encoded variants?
    context: Adversaries use the RTLO character (U+202E) to reverse the characters that follow it in a string, a technique to make a malicious file like 'report_exe.scr' appear as a harmless one like 'report_rcs.exe'. This question aims to directly detect the presence of the character's byte sequence (E2 80 AE) or its common encoded forms ('\u202e', '%E2%80%AE') in various log sources. Finding this character is a high-fidelity indicator of an attempt to disguise a file's true nature.
    answer_sources:
      - Windows Event ID 4688, Windows Event ID 4657, Sysmon Event ID 1, Sysmon Event ID 11, Zeek files.log, Zeek http.log, Zeek dns.log from User Workstations, Web Proxies, Mail Gateways, Active Directory Domain Controllers, and DNS Resolvers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_command_lines, created_filenames, registry_values, network_log_fields FOR (E280AE OR '\u202e' OR '%E2%80%AE'); ALERT on match.
  - question: Are there any process command lines or filenames with unusually high complexity (entropy) that might indicate obfuscation?
    context: Adversaries may use complex strings, including the RTLO character, to obfuscate filenames and command lines. High Shannon entropy can be an indicator of such obfuscation, as complex character sequences have higher entropy than typical human-readable text. This question seeks to identify statistical outliers by comparing the entropy of new events against an established baseline for normal activity. A significant deviation could signal an attempt to evade simple string-based detections.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 11 from User Workstations, Web Proxies, Mail Gateways, Active Directory Domain Controllers, and DNS Resolvers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each process_creation OR file_creation event, CALCULATE entropy of command_line/filename. COMPARE to historical baseline for that process/file_type. ALERT if entropy > 99th percentile.
  - question: Can machine learning models identify filenames or command lines that are likely malicious based on their structural features?
    context: This question proposes a proactive detection method using machine learning. Instead of relying on specific signatures, a classification model can learn the complex patterns that distinguish malicious filenames from benign ones. Features like n-gram frequency, character-type counts, and the presence of control characters (like RTLO) are used to predict the probability of a string being malicious, allowing for the detection of novel obfuscation techniques.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11 from User Workstations, Web Proxies, Mail Gateways, Active Directory Domain Controllers, and DNS Resolvers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each process_creation OR file_creation event, EXTRACT features (n-grams, char_counts, length, etc.). SCORE with trained ML model. ALERT if malicious_probability > 0.90.
  - question: Are there any files or processes using the RTLO character to specifically reverse an executable extension, making it appear as a benign file type?
    context: This is a classic application of the RTLO technique. An attacker names a file like 'document_gpj.scr' and inserts the RTLO character before 'gpj', causing it to render as 'document_rcs.jpg'. The user sees a JPG file but is actually running a screensaver executable. This question focuses on detecting this specific, high-confidence pattern using regular expressions and correlating it with network data (MIME types) to confirm the file's true executable nature.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Zeek files.log, Zeek http.log from Network Egress Points, User Workstations, Email Servers, and File Shares.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH command_lines, network_filenames for REGEX pattern (U+202E + reversed_executable_extension). IF network_match, CORRELATE with mime_type. ALERT if mime_type is executable.
  - question: Is there an anomalous rate of files being transferred where the file extension (.pdf, .jpg, etc.) does not match the actual file type (MIME type)?
    context: Adversaries using RTLO often cause a mismatch between the apparent file extension and the true file type. For example, a file appearing as a '.jpg' may have an 'application/x-dosexec' MIME type. This question aims to detect this anomaly at scale by baselining the normal rate of extension/MIME type mismatches and alerting on statistically significant increases, which could indicate a widespread phishing or malware delivery campaign.
    answer_sources:
      - Zeek files.log from Network Egress Points, User Workstations, Email Servers, and File Shares.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: AGGREGATE hourly file transfers. CALCULATE proportion of 'extension/mime_type' mismatch. ESTABLISH baseline. ALERT if current proportion > 3 standard deviations above 7-day rolling average.
  - question: Is there a statistically unexpected spike in the number of files with mismatched extensions and MIME types?
    context: This question uses time-series analysis to model the normal rhythm of file transfers with mismatched extensions and MIME types. Business operations might have legitimate, periodic reasons for such mismatches. A time-series model like SARIMA can learn this seasonality and flag any sudden, sharp increase that deviates from the established pattern, providing a more robust anomaly detection capability than simple thresholding.
    answer_sources:
      - Zeek files.log from Network Egress Points, User Workstations, Email Servers, and File Shares.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL hourly count of 'extension/mime_type' mismatches using SARIMA on 30+ days of data. ALERT on observations flagged as anomalous by the model.
  - question: Are legitimate document-handling applications (e.g., Word, Acrobat) spawning shell or interpreter processes (e.g., cmd.exe, powershell.exe)?
    context: After a user is tricked by an RTLO-disguised file, the malicious payload often executes by having the parent application (like Microsoft Word) spawn a command shell or script interpreter to continue the attack chain. This behavior is highly anomalous, as document viewers should not be launching processes like 'powershell.exe'. This question seeks to create a high-confidence detection rule for this specific, suspicious parent-child process relationship.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1 from User Workstations, Terminal Servers, and File Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH for process creation events where PARENT is in (winword.exe, excel.exe, acrord32.exe, etc.) AND CHILD is in (powershell.exe, cmd.exe, wscript.exe, etc.). ALERT on match.
  - question: Are there any statistically rare or never-before-seen parent-child process relationships occurring on hosts?
    context: While a static list of suspicious parent-child process relationships is effective, adversaries can use less common processes to evade detection. This question proposes a data-driven approach by calculating the probability of every observed parent-child pair across the environment. Any new process creation event that represents a very low probability or a previously unobserved pairing is flagged as a potential anomaly, allowing for the discovery of novel execution chains.
    answer_sources:
      - Sysmon Event ID 1 from User Workstations, Terminal Servers, and File Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each new process creation, CALCULATE conditional probability P(Child|Parent) based on 30-day history. ALERT if probability < 0.001 or pair is previously unseen.
  - question: Can graph analysis reveal anomalous process execution patterns, such as a process from one functional cluster spawning a process from another?
    context: This question treats process activity as a graph, where processes are nodes and parent-child relationships are edges. Normal activity forms distinct clusters (e.g., 'Office Applications', 'System Processes', 'Developer Tools'). An anomaly occurs when a process from one cluster spawns a process in a completely different, unrelated cluster, such as an Office application spawning a network reconnaissance tool. This indicates a potential pivot or escalation in an attack.
    answer_sources:
      - Sysmon Event ID 1 from User Workstations, Terminal Servers, and File Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CONSTRUCT process execution graph. APPLY community detection algorithm. FLAG new executions that connect two previously unconnected or loosely connected communities.
  - question: Is a file being downloaded and then executed within a very short time window, where the executed filename contains the RTLO character?
    context: This question aims to chain together network and host events to identify a common attack pattern: a user downloads a file, and it is immediately executed. By correlating a network file transfer log (showing a download of a file with a benign-seeming extension) with a host process creation log (showing execution of a file with the same name but containing the RTLO character), analysts can gain high-confidence insight into a successful phishing or drive-by-download attack.
    answer_sources:
      - Sysmon Event ID 11, Windows Event ID 4688, Sysmon Event ID 1, Zeek files.log from User Workstations, and Network Egress Points.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: JOIN network file logs with host process logs on hostname and time (< 60s). ALERT if downloaded file has benign extension AND executed file has same base name + RTLO character.
  - question: Is any user exhibiting an abnormal burst of 'file-create-then-process-create' sequences originating from a browser or email client?
    context: A user falling for a phishing campaign might rapidly download and execute multiple malicious files. This question establishes a baseline for each user's normal frequency of creating a file and then immediately executing it from a browser or email client. By monitoring for activity that exceeds a dynamic, user-specific threshold (e.g., 3 standard deviations above their average), security teams can detect unusual bursts of activity that may indicate a user is compromised or under active attack.
    answer_sources:
      - Sysmon Event ID 11, Sysmon Event ID 1 from User Workstations, and Network Egress Points.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: PROFILE each user's hourly frequency of 'file-create -> process-create' sequences. ALERT when a user's activity exceeds their personal baseline (e.g., mean + 3 std dev).
  - question: Can unsupervised machine learning identify anomalous 'download-then-execute' events that do not fit normal patterns?
    context: Many 'download-then-execute' events are legitimate (e.g., software installers). This question proposes using an unsupervised clustering model like DBSCAN to automatically group these normal, frequent events into large clusters. Events that do not fit into any cluster (classified as noise) or form very small, rare clusters are considered anomalous. This allows for the discovery of suspicious activities without pre-existing rules, based on features like time delta, file type, source domain, and filename entropy.
    answer_sources:
      - Sysmon Event ID 11, Sysmon Event ID 1, Zeek files.log from User Workstations, and Network Egress Points.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN a DBSCAN model on 'download-then-execute' events using features like time_delta, file_type, source_domain, filename_entropy. FLAG events classified as noise or belonging to very small clusters.