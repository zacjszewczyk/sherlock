name: 'T1055.011: Extra Window Memory Injection'
id: 3a7b8c9d-1e2f-4a5b-8c9d-0e1f2a3b4c5d
description: |
  This playbook is designed to detect adversaries leveraging Extra Window Memory Injection (T1055.011) for privilege escalation and defense evasion. This technique involves a process manipulating the extra window memory of another process, typically one with higher privileges or one that is allow-listed, to execute malicious code. Indicators include suspicious API call sequences like `SetWindowLongPtrA/W` followed by `SendNotifyMessage`, a process accessing another process's memory, or a non-networking application initiating network connections. The playbook also looks for correlated suspicious events, such as a low-privilege process creation followed by a sensitive action from a high-privilege process without a direct parent-child relationship, or a standard application spawning an obfuscated command-line interpreter. These activities can lead to command and control communication, data exfiltration, or the creation of new users or services.
type: technique
related:
  - 'TA0004: Privilege Escalation'
  - 'TA0005: Defense Evasion'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process performed a symbolic Extra Window Memory Injection by calling SetWindowLongPtrA/W and SendNotifyMessage against another process's window?
    context: |
      This question looks for the core API call sequence of EWM injection. An adversary uses `SetWindowLongPtrA/W` to replace a window's procedure pointer (`GWLP_WNDPROC`) with a pointer to their malicious shellcode. They then use `SendNotifyMessage` to trigger the target process to execute that shellcode, achieving code execution within the context of the target process. This is a direct method for privilege escalation if the target process has higher permissions.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - Endpoint devices
      - Privileged Access Workstations
      - Critical Application Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH API_calls
          WHERE api_name = "SetWindowLongPtrA/W" AND index = "GWLP_WNDPROC" AND source_process_id != target_process_id
          JOIN (
            SEARCH API_calls
            WHERE api_name = "SendNotifyMessage"
          ) ON target_window_handle
          WHERE time_diff < 1_second
          FILTER source_process_name NOT IN ("dwm.exe", "csrss.exe")
  - question: Is a non-window-managing process making an anomalously high number of SetWindowLongPtrA/W or SendNotifyMessage API calls?
    context: |
      This statistical approach aims to find outliers. Processes that do not normally manage windows (like script interpreters `powershell.exe`, `mshta.exe`, etc.) suddenly making many of these calls is highly suspicious. It can indicate an adversary using a script to perform EWM injection, deviating from the process's normal behavior profile.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - Endpoint devices
      - Privileged Access Workstations
      - Critical Application Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH API_calls
          WHERE api_name IN ("SetWindowLongPtrA/W", "SendNotifyMessage")
          AGGREGATE count by source_process_name, time_window
          COMPARE count to historical_baseline(source_process_name)
          ALERT where count > 3_std_dev_above_mean
          FILTER source_process_name IN ("powershell.exe", "mshta.exe", "wscript.exe")
  - question: Has a machine learning model detected an anomalous sequence of API calls indicative of memory mapping followed by window procedure hijacking?
    context: |
      This question uses a machine learning model to identify malicious sequences that might be missed by simple rules. The sequence of mapping memory (`CreateFileMapping`, `MapViewOfFile`), writing to it, and then triggering execution via window messages (`SetWindowLongPtr`, `SendNotifyMessage`) is a strong pattern for injection that a model can learn to flag, especially when initiated by an unusual process like a script host or document reader.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - Endpoint devices
      - Privileged Access Workstations
      - Critical Application Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          INPUT api_call_sequences into ML_Model(type=LSTM/Transformer)
          SEARCH for sequences like [...CreateFileMapping -> MapViewOfFile -> SetWindowLongPtr -> SendNotifyMessage...]
          FLAG sequences with high_anomaly_score
          PRIORITIZE flags where source_process is a script_interpreter or document_reader
  - question: Has a commonly abused low-privilege process been created shortly before a sensitive system event was initiated by a high-privilege process on the same host?
    context: |
      This question looks for the secondary effects of a successful privilege escalation via injection. An adversary might use EWM to inject from a low-privilege process (e.g., `mshta.exe`) into a high-privilege one (e.g., `services.exe`). The now-compromised high-privilege process is then used to perform a sensitive action, like creating a new user or installing a service. This rule correlates these two seemingly disconnected events within a short time window.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4720
      - Windows Event ID 4697
      - Domain Controllers
      - Critical Application Servers
      - Privileged User Workstations
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation (EventID 4688)
          WHERE process_name IN ("mshta.exe", "wscript.exe", "regsvr32.exe") as low_priv_event
          JOIN (
            SEARCH sensitive_events (EventID 4720, 4697)
            WHERE source_process IN ("services.exe", "lsass.exe", "wininit.exe")
          ) as high_priv_event ON hostname
          WHERE time_diff(high_priv_event, low_priv_event) BETWEEN 0 AND 60_seconds
  - question: Did a high-privilege process execute after being preceded by a statistically rare process?
    context: |
      This question establishes a baseline of normal process execution sequences to spot anomalies. If a high-privilege process is consistently preceded by a specific set of other processes, the appearance of a rare or unexpected preceding process (e.g., `mshta.exe` running just before `services.exe` creates a user) can indicate that the rare process initiated an action, like EWM injection, that caused the high-privilege process to act.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4720
      - Windows Event ID 4697
      - Domain Controllers
      - Critical Application Servers
      - Privileged User Workstations
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each high_privilege_process_event
          LOOKUP preceding_process_event within last 5 minutes on same host
          COMPARE preceding_process_name to baseline_of_common_predecessors
          ALERT if preceding_process_name is in less than 1% of historical sequences
  - question: Has a machine learning model detected an anomalous sequence of host events, such as mshta.exe activity followed by user creation from services.exe?
    context: |
      This question uses a sequence analysis model to understand the narrative of events on a host. A benign sequence might be a user logging in and then starting an application. A sequence where a script host runs, followed by a system service creating a new user account, is highly anomalous and has a low probability under a model trained on normal behavior, strongly indicating a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4720
      - Windows Event ID 4697
      - Domain Controllers
      - Critical Application Servers
      - Privileged User Workstations
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          INPUT host_event_sequences (process_creations, user_creations, service_installations) to ML_Model(type=LSTM)
          SEARCH for sequences like [mshta_activity -> services_creates_user]
          FLAG sequences with high_anomaly_score based on low probability
  - question: Has a non-administrative process launched a command-line interpreter, followed by a service installation pointing to a non-standard directory?
    context: |
      This question tracks a common post-exploitation pattern. An adversary gains initial execution in a user-level process like Word or Acrobat, then spawns a shell to execute further commands. If this is followed by a new service being installed by a system process, where the service binary is in a suspicious location like a temp or user public folder, it strongly suggests privilege escalation occurred, allowing the attacker to establish persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4697
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation (EventID 4688)
          WHERE parent_process IN ("winword.exe", "acrord32.exe") AND child_process IN ("cmd.exe", "powershell.exe") as shell_event
          JOIN (
            SEARCH service_installation (EventID 4697)
            WHERE service_binary_path contains ("C:\\Users\\Public\\", "C:\\Windows\\Temp\\")
          ) as service_event ON hostname
          WHERE time_diff(service_event, shell_event) BETWEEN 0 AND 5_minutes
  - question: Has a new scheduled task been created with a high-entropy command line shortly after a non-admin process spawned a shell?
    context: |
      This question looks for obfuscated persistence mechanisms. High character entropy in a command line often indicates obfuscation (e.g., Base64 or custom encoding) used to hide malicious commands. When such a task is created shortly after a user-level application spawned a shell, it suggests an attacker escalated privileges and is now setting up a stealthy way to maintain access.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4697
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new_scheduled_task (EventID 4698)
          CALCULATE shannon_entropy of command_line_arguments
          COMPARE entropy to historical_95th_percentile
          ALERT if entropy is high AND a shell was spawned by a non-admin process within the last 5 minutes on the same host
  - question: Has a machine learning model classified a sequence of process and service creation events as malicious?
    context: |
      This question leverages a classification model to make a definitive judgment on an event sequence. By training a model on features like parent/child process names, user context, time between events, and command-line characteristics (length, entropy), the system can learn to distinguish benign administrative activity from malicious sequences indicative of privilege escalation and persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4697
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          EXTRACT features from process_creation (4688) and task/service_creation events
          FEATURES: parent_process, child_process, user_context, time_delta, command_line_entropy
          INPUT features into ML_Model(type=RandomForest)
          ALERT on sequences classified as "malicious"
  - question: Has a non-debugging process been granted SeDebugPrivilege and then used it to access LSASS memory?
    context: |
      This is a classic credential dumping pattern. `SeDebugPrivilege` allows a process to debug and inspect the memory of other processes, including `lsass.exe`, which stores credentials. While legitimate debuggers use this, it's highly suspicious for a common application like `notepad.exe` to be granted this privilege and then immediately access LSASS. This strongly indicates an attacker has escalated privileges and is attempting to steal credentials.
    answer_sources:
      - Windows Event ID 4672
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers (for LSASS access)
      - Privileged Access Workstations
      - Tier 0 Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH privilege_assignment (EventID 4672)
          WHERE privilege = "SeDebugPrivilege" AND process_name NOT IN (allowlist of debuggers) as priv_event
          JOIN (
            SEARCH process_access (EventID 4656/4663, Sysmon 10)
            WHERE target_process = "lsass.exe"
          ) as access_event ON source_process_id
          WHERE access_event occurs after priv_event
  - question: Has a process been assigned a privilege that is statistically rare for it?
    context: |
      This question detects privilege escalation by baselining normal behavior. Most applications run with a consistent, limited set of privileges. If a process like `notepad.exe` is suddenly granted a powerful privilege like `SeDebugPrivilege` or `SeTcbPrivilege`, which it has almost never had before, it's a strong statistical anomaly indicating a potential compromise or misuse of that process.
    answer_sources:
      - Windows Event ID 4672
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers (for LSASS access)
      - Privileged Access Workstations
      - Tier 0 Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each privilege_assignment (EventID 4672)
          LOOKUP historical frequency of (process_name, privilege) pair
          ALERT if frequency is < 0.1%
  - question: Has a machine learning model flagged an anomalous combination of Process Name, Granted Privilege, and Target Process Name?
    context: |
      This question uses anomaly detection to find toxic combinations of actions. An Isolation Forest or similar model can be trained on normal process behaviors. A data point representing an outlier, such as `(ProcessName: notepad.exe, GrantedPrivilege: SeDebugPrivilege, TargetProcessName: lsass.exe)`, would be quickly isolated by the model and flagged as a high-scoring anomaly, indicating a likely attack.
    answer_sources:
      - Windows Event ID 4672
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers (for LSASS access)
      - Privileged Access Workstations
      - Tier 0 Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CREATE feature_vector: (ProcessName, GrantedPrivilege, TargetProcessName)
          INPUT vectors into ML_Model(type=IsolationForest)
          ALERT on vectors with high anomaly scores, e.g., (notepad.exe, SeDebugPrivilege, lsass.exe)
  - question: Has a high-privilege system process initiated a network connection to a known malicious indicator?
    context: |
      This is a direct indicator of a compromised system process being used for C2 communications. System processes like `services.exe` or `svchost.exe` should generally not make external network connections, especially to destinations on a threat intelligence list. Such an event, particularly when correlated with other suspicious host activity, strongly suggests a successful privilege escalation and post-exploitation activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network Egress Points
      - DNS Servers
      - Endpoint devices
      - Internal Network Segments
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH network_connections (Zeek conn.log, EventID 5156)
          WHERE source_process IN ("services.exe", "wininit.exe", "svchost.exe")
          JOIN threat_intelligence_feed ON destination_ip or destination_domain
          ALERT on any match
  - question: Has a critical system process connected to a rare port or spawned an anomalous child process?
    context: |
      This question uses statistical baselining to detect when a compromised system process deviates from its normal function. For example, `svchost.exe` spawning `powershell.exe` is extremely unusual and a major red flag. Similarly, a system process connecting to a non-standard, high-numbered port instead of its usual ports (e.g., 80, 443, 135) can indicate C2 activity from injected code.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network Egress Points
      - DNS Servers
      - Endpoint devices
      - Internal Network Segments
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each critical_system_process
          COMPARE current_destination_port to historical_99th_percentile_ports
          COMPARE current_child_process to historical_child_processes
          ALERT on any deviation (e.g., svchost.exe spawning powershell.exe)
  - question: Has a time-series model detected a significant deviation in the volume of outbound data from a critical system process?
    context: |
      This question seeks to identify data exfiltration or heavy C2 traffic. By forecasting the expected network behavior of a system process using a model like ARIMA, a sudden, unexplained spike in outbound data volume (`orig_bytes`) can be detected. This deviation from the forecast suggests the process's behavior has changed, possibly due to compromise and misuse for data staging or exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network Egress Points
      - DNS Servers
      - Endpoint devices
      - Internal Network Segments
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each critical_system_process
          INPUT time_series of outbound_data_volume into ML_Model(type=ARIMA)
          FORECAST expected_volume
          ALERT if observed_volume significantly deviates from forecast
  - question: Has a process performed Extra Window Memory Injection against a common, allow-listed application like a browser or office program?
    context: |
      This question targets EWM injection used for defense evasion. Adversaries inject code into trusted, allow-listed processes (e.g., `chrome.exe`, `outlook.exe`) to bypass application control and other process-based defenses. The malicious activity then appears to originate from a legitimate process, making it harder to spot. This rule specifically looks for the EWM API sequence targeting these common applications.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - User Workstations
      - Application Servers with GUI components
      - Virtual Desktop Infrastructure (VDI)
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH API_calls
          WHERE api_name = "SetWindowLongPtrA/W" AND source_process_id != target_process_id
          AND target_process_name IN ("chrome.exe", "outlook.exe", "winword.exe")
          FILTER source_process_name NOT IN ("dwm.exe", "csrss.exe")
          ALERT on any match
  - question: Has a statistically rare process, like a script interpreter, been observed interacting with the window handles of a common GUI application?
    context: |
      This question establishes a baseline of normal process interactions to find anomalies. A web browser's window handles are typically managed by the OS and the browser process itself. If a script host like `powershell.exe` suddenly starts making EWM-related API calls to the browser's windows, it's a strong statistical anomaly, suggesting it is trying to inject code for defense evasion purposes.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - User Workstations
      - Application Servers with GUI components
      - Virtual Desktop Infrastructure (VDI)
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each GUI_application (e.g., chrome.exe)
          BASELINE processes that interact with its window handles
          ALERT if a statistically rare process (e.g., powershell.exe) makes an EWM-related API call to the GUI application
  - question: Has a graph-based machine learning model detected an anomalous interaction between processes, such as a script host making an EWM call to a browser?
    context: |
      This question models the system as a graph of processes and their interactions. In a benign graph, a script host and a browser might not have a direct edge representing an EWM API call. A model trained on these benign graphs would immediately flag the creation of this new, unexpected edge as a structural anomaly, indicating a likely injection attempt for defense evasion.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - User Workstations
      - Application Servers with GUI components
      - Virtual Desktop Infrastructure (VDI)
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          MODEL system as graph where nodes=processes, edges=interactions (API calls)
          TRAIN ML model on benign process interaction graphs
          ALERT on new, anomalous edges like (script_host -> EWM_call -> browser)
  - question: Has a common user application initiated a connection to a known malicious domain or IP address?
    context: |
      This question aims to detect C2 traffic masquerading as legitimate user activity. If an adversary injects code into a process like a web browser or Outlook, the subsequent C2 network traffic will appear to originate from that trusted application. By correlating this traffic with threat intelligence, we can identify when a trusted process is communicating with a known-bad destination.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points
      - DNS Servers
      - Web Proxies
      - Endpoint devices
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH network_connections (Zeek conn.log)
          WHERE source_process IN ("chrome.exe", "winword.exe", "outlook.exe")
          JOIN threat_intelligence_feed ON destination_ip or destination_domain
          ALERT on any match
  - question: Has a user application initiated a TLS connection using a rare or known-malicious JA3/JA3S hash?
    context: |
      This question fingerprints the client-side of a TLS connection to detect anomalies. The JA3/JA3S hash is a fingerprint of how a client initiates a TLS session. Injected code might use its own networking library, creating a different fingerprint than the host application (e.g., Chrome). Alerting on rare or known-malicious hashes can reveal when a legitimate process is making network connections using a non-standard, and likely malicious, library.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points
      - DNS Servers
      - Web Proxies
      - Endpoint devices
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each TLS_handshake from user_app (Zeek ssl.log)
          EXTRACT JA3/JA3S hash
          COMPARE hash to baseline of common hashes for that application
          ALERT if hash frequency is < 1st percentile or matches known-malicious hashes
  - question: Has a machine learning model detected anomalous C2-like beaconing from a standard user application?
    context: |
      This question uses an autoencoder to learn the "rhythm" of normal network traffic. Benign user traffic is often bursty and irregular. C2 beaconing, however, is typically highly regular (e.g., connections every 60 seconds) with small, fixed-size payloads. An LSTM autoencoder trained on benign patterns would fail to reconstruct this C2 pattern accurately, resulting in a high anomaly score.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points
      - DNS Servers
      - Web Proxies
      - Endpoint devices
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          TRAIN LSTM autoencoder on benign traffic patterns (frequency, duration, size)
          INPUT traffic from standard user applications
          ALERT on highly regular connections with small payloads that have a high reconstruction error (anomaly score)
  - question: Has a common GUI application spawned a command-line interpreter like cmd.exe or powershell.exe?
    context: |
      This is a classic indicator of malicious code execution, often stemming from a malicious document or exploit. Applications like Word, Excel, or Adobe Reader should not be spawning shells. This behavior is a strong signal that a user has opened a malicious file and an embedded macro or script is executing, which is a common vector for attacks that then use injection for defense evasion.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - User Workstations
      - Application Servers
      - Virtual Desktop Infrastructure (VDI)
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation (EventID 4688)
          WHERE parent_process IN ("winword.exe", "excel.exe", "acrord32.exe")
          AND child_process IN ("cmd.exe", "powershell.exe", "rundll32.exe")
          ALERT on any match
  - question: Has a GUI application spawned a statistically rare child process or a process with a high-entropy command line?
    context: |
      This question looks for two signs of obfuscation and unusual behavior. First, if a GUI application like Word spawns a child process that it has almost never spawned before, it's an anomaly. Second, even if it spawns a common child like `powershell.exe`, if the command line has high entropy, it suggests the commands are obfuscated to hide their malicious intent. Both are strong indicators of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - User Workstations
      - Application Servers
      - Virtual Desktop Infrastructure (VDI)
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each child_process from a GUI parent
          ALERT if child is statistically rare (< 0.5% historical frequency)
          CALCULATE shannon_entropy of child_process command line
          ALERT if entropy > 98th percentile for that parent-child pair
  - question: Has a graph-based anomaly detection model identified an anomalous process tree, such as Acrobat Reader spawning PowerShell which then makes a network connection?
    context: |
      This question views process ancestry as a graph or tree structure. A model trained on benign process trees would learn that `acrord32.exe` does not normally have `powershell.exe` as a descendant, especially one that makes external network calls. When this anomalous subgraph appears, the model flags it as a structural deviation from the norm, indicating a likely exploit chain.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - User Workstations
      - Application Servers
      - Virtual Desktop Infrastructure (VDI)
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          MODEL process relationships as a graph/tree
          TRAIN model on benign process trees
          FLAG new, unseen subgraphs like `acrord32.exe -> powershell.exe -> external_ip` as anomalous
  - question: Has a non-networking application, like notepad.exe or calc.exe, initiated an outbound network connection?
    context: |
      This is a simple but highly effective rule. Applications like Calculator or Notepad have no legitimate reason to access the network. If they are observed making an outbound connection, it is an extremely strong indicator that they are hosting injected code which is performing C2 or exfiltration. This is a clear sign of defense evasion where the attacker uses a benign-looking process for malicious networking.
    answer_sources:
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network Egress Points
      - DNS Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          MAINTAIN allowlist of networking applications
          SEARCH network_connections (EventID 5156, Zeek conn.log)
          ALERT if source_process is NOT on the allowlist (e.g., "notepad.exe", "calc.exe")
  - question: Has a legitimate networking application, like a browser, connected to an anomalous destination port?
    context: |
      This question aims to find injected code that uses non-standard ports for C2 within an otherwise legitimate process. A web browser typically connects to ports 80 and 443. If it is suddenly observed making a connection to a non-standard port like 6667 (IRC) or 4444 (common for Metasploit), it suggests that injected code, not the browser itself, is responsible for the connection.
    answer_sources:
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network Egress Points
      - DNS Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each networking_application
          BASELINE its common destination ports
          ALERT if a connection is made to a port outside the top 99% of its historical ports
  - question: Has a machine learning model detected that a process has anomalously changed its network behavior profile?
    context: |
      This question uses clustering to group processes by their network behavior (e.g., ports, protocols, data volume). A process like `svchost.exe` might normally belong to a cluster of "internal Windows services." If, due to injected code, it starts beaconing to an external IP, its feature set will change, and a clustering algorithm would detect this shift, flagging it as moving to a different, potentially malicious cluster (e.g., "external C2").
    answer_sources:
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network Egress Points
      - DNS Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CLUSTER processes using features (ports, protocols, volume, destination ASN) via DBSCAN
          ALERT if a process moves from its typical cluster to an anomalous one
  - question: Has a process experienced multiple application crashes while also connecting to a newly registered domain?
    context: |
      This question correlates application instability with suspicious network activity. Unstable or poorly written shellcode can cause the host process to crash (generating Event ID 1000). If these crashes coincide with network connections to a domain that was registered very recently (a common tactic for attackers), it strongly suggests that injected, unstable code is attempting to establish C2.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 1000
      - Endpoint devices
      - Network Egress Points
      - Mail Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH application_crashes (EventID 1000)
          WHERE count > 5 within 10 minutes for a single process
          CORRELATE with network connections from the same process to domains registered < 30 days ago
  - question: Has the network data volume for a user application deviated significantly from its hourly or daily baseline?
    context: |
      This question uses time-series analysis to spot anomalous data transfers that could indicate exfiltration. An application like Outlook has a predictable pattern of network usage based on the time of day and day of the week. A sudden, massive spike in outbound data that is several standard deviations above its moving average for that specific time window is a strong indicator of compromise and data theft.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 1000
      - Endpoint devices
      - Network Egress Points
      - Mail Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each user_application
          CALCULATE time-series baseline of network data volume per hour/day
          ALERT if current volume > 3 standard deviations above the moving average for that time window
  - question: Has a change point detection algorithm identified a simultaneous, significant shift in multiple metrics for a single process?
    context: |
      This is an advanced detection method that looks for a fundamental state change in a process's behavior. An adversary injecting code can cause multiple behaviors to change at once (e.g., network connections spike, error rates increase, CPU usage changes). A change point detection algorithm can monitor multiple time-series metrics simultaneously and alert when it finds a single point in time where all of them deviate from their norms, signaling a likely compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 1000
      - Endpoint devices
      - Network Egress Points
      - Mail Servers
    range: The last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          APPLY change point detection algorithm to multiple time-series metrics for a process (e.g., network connections/min, data volume, app errors/min)
          ALERT if a simultaneous, statistically significant change point is detected across multiple metrics