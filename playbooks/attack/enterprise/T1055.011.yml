name: T1055.011: Extra Window Memory Injection
id: f8a5c6b1-e9d0-4f3a-8b7c-2d1e9f6a4b3c
description: This playbook helps analysts investigate whether an adversary has leveraged Extra Window Memory Injection (T1055.011) for privilege escalation or defense evasion. This technique involves writing code into the extra memory of a window and triggering its execution, often by using API calls like `SetWindowLongPtrA/W` and `SendNotifyMessage`. Indicators of this activity include suspicious API call sequences, anomalous process creation chains (e.g., a low-privilege process followed by a high-privilege action without a direct parent-child link), unusual service or scheduled task creation, unexpected privilege assignments (`SeDebugPrivilege`), and anomalous network activity from processes that are not typically network-facing or are behaving outside their normal patterns.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Has a process made sequential API calls indicative of EWM injection, such as `SetWindowLongPtrA/W` followed by `SendNotifyMessage`?
    context: This question looks for the core symbolic pattern of Extra Window Memory Injection. An adversary calls `SetWindowLongPtrA/W` to overwrite a window's procedure pointer (`GWLP_WNDPROC`) in a different process, pointing it to their malicious shellcode. They then call `SendNotifyMessage` to trigger the execution of that shellcode in the context of the victim process. Detecting this specific, short sequence is a high-fidelity indicator of an injection attempt, especially when the source process is not a typical window manager and the target is a higher-privilege application.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - Endpoint devices, Privileged Access Workstations, Critical Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH API_calls WHERE api_name="SetWindowLongPtr" AND index="GWLP_WNDPROC" | GROUP by process, target_process, window_handle | JOIN (SEARCH API_calls WHERE api_name="SendNotifyMessage") on process, target_process, window_handle WHERE time_diff < 1s | EXCLUDE known_good_processes ("dwm.exe", "csrss.exe")
  - question: Has a process exhibited a statistically anomalous frequency of `SetWindowLongPtrA/W` and `SendNotifyMessage` calls?
    context: This question aims to find EWM injection by looking for behavioral outliers. While legitimate applications may use these API calls, a process not normally involved in window management (like `powershell.exe` or `wscript.exe`) suddenly making many of these calls is highly suspicious. By baselining normal call frequency per process, we can flag significant deviations that may indicate malicious activity.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - Endpoint devices, Privileged Access Workstations, Critical Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH API_calls WHERE api_name IN ("SetWindowLongPtr", "SendNotifyMessage") | STATS count by process, time_bucket | COMPARE count to historical_baseline(process) | WHERE count > 3 * stdev(historical_baseline) AND process IN suspicious_process_list
  - question: Has a sequence-based anomaly detection model identified an API call sequence consistent with EWM injection?
    context: This question uses a more advanced, context-aware detection method. Benign processes have predictable API call patterns. A machine learning model trained on these patterns can recognize when a new, unusual sequence appears. A pattern like `CreateFileMapping -> MapViewOfFile -> SetWindowLongPtr -> SendNotifyMessage`, especially from a script interpreter, deviates strongly from normal behavior and would be flagged by the model as a potential threat.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - Endpoint devices, Privileged Access Workstations, Critical Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT API_call_sequences into sequence_model | FILTER for sequences with high_anomaly_score | ANALYZE anomalous_sequences for EWM_injection_patterns (e.g., SetWindowLongPtr, SendNotifyMessage)
  - question: Has a low-privilege process been created shortly before a sensitive, high-privilege action occurred on the same host without a direct parent-child link?
    context: This question seeks to identify the effects of a successful privilege escalation via injection. The adversary might use a low-privilege process (e.g., `mshta.exe`) to inject code into a high-privilege one (e.g., `services.exe`). The now-compromised high-privilege process then performs a sensitive action, like creating a new user or installing a service. Because the injection breaks the parent-child process chain, correlating these seemingly unrelated events in a short time window is key to detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4720
      - Windows Event ID 4697
      - Domain Controllers, Critical Application Servers, Privileged User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation (event_id=4688) WHERE process_name IN low_priv_watchlist | JOIN (SEARCH sensitive_events (event_id IN (4720, 4697))) on host WHERE time_diff < 60s AND sensitive_event.process_name IN high_priv_list
  - question: Has a high-privilege process performed an action that was preceded by a statistically rare process on the same host?
    context: This question aims to find anomalous event sequences. High-privilege processes typically have a predictable set of preceding events and processes. By establishing a baseline of these "normal" preceding processes, we can flag instances where a rare or unexpected process (like a script interpreter) appears just before the high-privilege action, suggesting it may have been the trigger via an injection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4720
      - Windows Event ID 4697
      - Domain Controllers, Critical Application Servers, Privileged User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each high_priv_process_event | GET preceding_process_events(time_window=5m) | COMPARE preceding_process_name to historical_baseline(high_priv_process) | ALERT if preceding_process_name is rare (<1% frequency)
  - question: Has a sequence analysis model flagged a sequence of host events (e.g., process creation followed by user creation) as anomalous?
    context: This question leverages machine learning to understand the probability of entire event sequences. A model trained on countless benign sequences on a host learns what is normal. A sequence like `mshta.exe` runs, followed shortly by `services.exe` creating a new user, is highly improbable in a normal environment. The model would assign this sequence a high anomaly score, flagging it for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4672
      - Windows Event ID 4720
      - Windows Event ID 4697
      - Domain Controllers, Critical Application Servers, Privileged User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT host_event_sequences (process_create, user_create, service_install) into sequence_model | FILTER for sequences with high_anomaly_score | ANALYZE flagged sequences for signs of privilege_escalation
  - question: Did a non-administrative process spawn a command-line interpreter, followed shortly by a new service installation pointing to an unusual directory?
    context: This is a classic pattern for persistence or privilege escalation following initial access. The adversary uses a non-admin process (e.g., a macro in Word) to launch a shell, which is then used to stage and execute a payload. A subsequent service installation, especially one where the service executable is located in a user-writable or temporary directory like `C:\Users\Public\`, is a strong indicator that the initial shell was used to escalate privileges and establish persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4697
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation(event_id=4688) where parent_process IN (winword.exe, acrord32.exe) AND child_process IN (cmd.exe, powershell.exe) | JOIN (SEARCH service_install(event_id=4697)) on host WHERE time_diff < 5m AND service_path IN ("C:\\Users\\Public\\*", "C:\\Windows\\Temp\\*")
  - question: Has a new scheduled task been created with a command line that has unusually high character entropy?
    context: Adversaries often obfuscate commands used in scheduled tasks to hide their functionality. This obfuscation (e.g., Base64 or custom encoding) results in a command line with high character randomness, or entropy. By calculating the entropy of all new scheduled task commands and comparing it to a historical baseline, we can flag tasks with abnormally high entropy as suspicious, especially if they are created after a shell was spawned from a non-admin process.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4697
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH new_scheduled_task(event_id=4698) | CALCULATE shannon_entropy(command_line) | COMPARE entropy to historical_distribution | ALERT if entropy > 95th_percentile
  - question: Has a machine learning model classified a sequence of process creation and task/service creation events as malicious?
    context: This question uses a classification model to predict if a sequence of events is malicious based on various features. By feeding the model features like parent/child process names, the time between events, user context, and command-line characteristics (length, entropy), it can learn to distinguish between benign administrative activity and malicious sequences indicative of privilege escalation and persistence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Windows Event ID 4697
      - Domain Controllers, Enterprise Workstations, Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: EXTRACT features (parent_process, child_process, time_delta, cmd_entropy) from event_sequences | INPUT features into classification_model | ALERT on sequences predicted as "malicious"
  - question: Has a non-debugger process been granted `SeDebugPrivilege` and then used it to access `lsass.exe` memory?
    context: `SeDebugPrivilege` allows a process to debug and access the memory of other processes, including the highly sensitive `lsass.exe` which stores credentials. While legitimate debuggers and security tools need this privilege, it is extremely suspicious for a common application like `notepad.exe` to be granted it. If such a process then immediately attempts to access `lsass.exe`, it is a very strong indicator of a credential dumping attempt, often following a privilege escalation.
    answer_sources:
      - Windows Event ID 4672
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers (for LSASS access), Privileged Access Workstations, Tier 0 Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH privilege_assigned(event_id=4672) WHERE privilege="SeDebugPrivilege" AND process_name NOT IN debugger_allowlist | JOIN (SEARCH process_access (event_id IN (4656, 4663) or sysmon_id=10)) on process_name, host WHERE target_process="lsass.exe"
  - question: Has a process been assigned a privilege that is statistically rare for that specific application?
    context: This question focuses on identifying anomalous privilege assignments. Every application has a typical set of privileges it operates with. By creating a statistical baseline of these privileges for each process executable, we can automatically flag any deviation. For example, if `notepad.exe` is suddenly granted `SeDebugPrivilege`, and this has occurred in less than 0.1% of historical observations for `notepad.exe`, it is a significant anomaly worth investigating.
    answer_sources:
      - Windows Event ID 4672
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers (for LSASS access), Privileged Access Workstations, Tier 0 Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH privilege_assigned(event_id=4672) | COMPARE assigned_privilege to historical_baseline(process_name) | ALERT if privilege_frequency < 0.1% for that process
  - question: Has an anomaly detection model flagged a combination of process, privilege, and target process as a high-scoring anomaly?
    context: This question uses a model to find unusual combinations of events. An Isolation Forest or similar algorithm can be trained on feature sets representing normal system activity, such as `(ProcessName, GrantedPrivilege, TargetProcessName)`. A benign instance might be `(procexp.exe, SeDebugPrivilege, svchost.exe)`. A malicious instance like `(notepad.exe, SeDebugPrivilege, lsass.exe)` would be isolated quickly by the model as a rare and suspicious anomaly.
    answer_sources:
      - Windows Event ID 4672
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers (for LSASS access), Privileged Access Workstations, Tier 0 Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT feature_vector(ProcessName, GrantedPrivilege, TargetProcessName) into anomaly_detection_model | ALERT on instances with high_anomaly_score
  - question: Has a high-privilege system process made a network connection to a known malicious IP or domain?
    context: High-privilege system processes like `services.exe` or `svchost.exe` should generally only communicate with known, trusted Microsoft servers or internal resources. A connection from one of these processes to an IP or domain on a threat intelligence list is a major red flag. It often indicates that the process has been compromised, possibly through injection, and is now being used for command and control (C2) or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network Egress Points, DNS Servers, Endpoint devices, Internal Network Segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections WHERE process_name IN high_priv_system_list | JOIN threat_intel_feed on destination_ip OR destination_domain | ALERT on match
  - question: Has a critical system process connected to a statistically rare port or spawned a statistically rare child process?
    context: This question hunts for behavioral deviations in critical processes. System processes have very predictable network behavior and child processes. For example, `svchost.exe` spawning `powershell.exe` is almost always malicious. By baselining normal ports and child processes, we can alert on any statistical outlier, which could be a sign of code injection causing the process to behave in an unexpected way.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network Egress Points, DNS Servers, Endpoint devices, Internal Network Segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_events for critical_system_process | IF event is network_connection, COMPARE dest_port to historical_baseline. ALERT if rare. | IF event is process_creation, COMPARE child_process to historical_baseline. ALERT if rare (e.g., powershell.exe).
  - question: Has time-series analysis detected a significant deviation in the volume of outbound data for a critical system process?
    context: This question uses time-series forecasting to detect data exfiltration. For a critical system process, we can model its expected outbound data volume over time. A sudden, significant spike in data volume that deviates from the model's forecast suggests that the process might be compromised and is being used to exfiltrate large amounts of data, a common post-privilege-escalation objective.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Network Egress Points, DNS Servers, Endpoint devices, Internal Network Segments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT time_series(outbound_bytes) for critical_system_process into ARIMA_model | FORECAST expected_volume | ALERT if actual_volume significantly deviates from forecast
  - question: Has a process called `SetWindowLongPtrA/W` to modify a window belonging to a different, commonly allow-listed application?
    context: This question focuses on EWM injection being used for defense evasion. Adversaries inject code into trusted, allow-listed processes (like web browsers or office applications) to make their malicious code appear as legitimate activity. Detecting a process, especially a non-system one, modifying the window procedure of a separate, trusted application is a strong indicator of this evasion technique.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - User Workstations, Application Servers with GUI components, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH API_calls WHERE api_name="SetWindowLongPtr" AND source_process != target_process AND target_process IN allow_listed_apps (chrome.exe, outlook.exe) | EXCLUDE known_good_processes ("dwm.exe", "csrss.exe")
  - question: Has a statistically rare process (e.g., a script interpreter) been observed interacting with the window handles of a common GUI application?
    context: This question establishes a baseline of normal process interactions for GUI applications. A web browser, for example, is typically only interacted with by the user, the window manager, and accessibility tools. If a script interpreter like `powershell.exe` suddenly starts making API calls related to the browser's windows, it is a statistical anomaly that suggests it may be attempting to inject code to hijack the browser's functionality or network identity.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - User Workstations, Application Servers with GUI components, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH window_api_calls WHERE target_process IN common_gui_apps | STATS count by source_process | COMPARE source_process to historical_baseline(target_process) | ALERT if source_process is rare
  - question: Has a graph-based anomaly detection model identified an unusual interaction between two processes, such as a script host making EWM-related calls to a browser?
    context: This question models the entire system as a graph of interacting processes. In a benign environment, the graph has a predictable structure. A machine learning model can learn this structure. An EWM injection for defense evasion creates a new, anomalous edge in this graph (e.g., an edge from `powershell.exe` to `chrome.exe` representing a `SetWindowLongPtr` call). The model would flag this as a structural anomaly, indicating a likely attack.
    answer_sources:
      - EDR Telemetry (API Call Monitoring)
      - Sysmon Event ID 25 (Process Tampering)
      - Sysmon Event ID 10 (ProcessAccess)
      - User Workstations, Application Servers with GUI components, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD process_interaction_graph from API_calls | INPUT graph into graph_anomaly_model | ALERT on new/anomalous edges representing EWM_calls between unexpected_nodes (e.g., script_host -> browser)
  - question: Has a common user-facing application (e.g., browser, Office app) been observed communicating with a known malicious IP or domain?
    context: This is a straightforward but effective detection method. If an adversary injects code into a browser, that browser process may then be used to communicate with a C2 server. By checking all outbound connections from these common applications against a threat intelligence feed, we can catch instances where a trusted process is being used for malicious communication, a hallmark of defense evasion.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, DNS Servers, Web Proxies, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections WHERE process_name IN (chrome.exe, winword.exe, outlook.exe) | JOIN threat_intel_feed on destination_ip OR destination_domain | ALERT on match
  - question: Has a user application initiated a TLS connection using a rare or known-malicious JA3/JA3S hash?
    context: A JA3/JA3S hash is a fingerprint of the TLS client library used to initiate a connection. A standard browser will always use the same library, producing a consistent fingerprint. If injected code uses its own, different TLS library for C2 communication, it will produce a different, anomalous JA3/JA3S hash. By baselining the normal hashes for each application, we can detect these outliers, indicating that a non-standard client is operating within the trusted process.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, DNS Servers, Web Proxies, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH tls_connections (zeek_ssl) | STATS count by process_name, ja3_hash | COMPARE ja3_hash to historical_baseline(process_name) | ALERT if ja3_hash is rare (<1% frequency) or on a known-bad list
  - question: Has a machine learning model detected anomalous C2-like beaconing behavior from a standard user application?
    context: This question uses an LSTM autoencoder, which is excellent at learning normal time-series patterns. Malicious C2 beaconing is often highly regular (e.g., connecting every 60 seconds) with fixed-size payloads. This rigid pattern is different from the more variable patterns of human-driven web browsing. The model, trained on benign traffic, would fail to reconstruct this C2 pattern accurately, resulting in a high anomaly score and an alert.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 5156
      - Network Egress Points, DNS Servers, Web Proxies, Endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT network_traffic_time_series (conn_freq, data_size, duration) for user_apps into LSTM_autoencoder | ALERT on traffic patterns with high_reconstruction_error
  - question: Has a common GUI application (e.g., Word, Excel, Acrobat) spawned a shell process like `cmd.exe` or `powershell.exe`?
    context: This is a classic indicator of initial access or defense evasion. It is highly irregular for a document reader or spreadsheet program to spawn a command-line interpreter. This behavior almost always indicates that a malicious macro or exploit in a document has executed, providing the attacker with a shell on the system. It's a critical, high-fidelity event to alert on.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation(event_id=4688) WHERE parent_process IN (winword.exe, excel.exe, acrord32.exe) AND child_process IN (cmd.exe, powershell.exe, rundll32.exe) | ALERT
  - question: Has a GUI application spawned a statistically rare child process or a child process with a high-entropy command line?
    context: This question goes beyond just looking for `cmd.exe`. By building a statistical model of all child processes for a given GUI parent, we can detect any unusual child process, not just the common shells. Furthermore, analyzing the command-line entropy of the child process helps detect obfuscation. A high-entropy command line, even for a seemingly legitimate child process, is a strong signal of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation(event_id=4688) WHERE parent_process IN gui_app_list | COMPARE child_process to historical_baseline(parent_process). ALERT if rare. | CALCULATE shannon_entropy(child_command_line). ALERT if > 98th_percentile.
  - question: Has a graph-based anomaly model detected an anomalous process tree, such as a document reader spawning a shell that makes a network connection?
    context: This question views process relationships as a graph structure. A benign process tree might be `outlook.exe -> winword.exe`. A malicious one could be `winword.exe -> powershell.exe -> [external_ip]`. A machine learning model trained on benign process trees can identify these malicious subgraphs as new, anomalous structures that do not fit the learned patterns of normal system behavior.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - User Workstations, Application Servers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD process_ancestry_graphs | INPUT graphs into graph_anomaly_model | ALERT on anomalous subgraphs like (document_reader -> shell -> network_connection)
  - question: Has a non-networking application, such as `notepad.exe` or `calc.exe`, initiated an outbound network connection?
    context: This is a very high-fidelity indicator of compromise. Applications like Calculator or Notepad have no legitimate reason to make network connections. If one is observed, it almost certainly means the process has been compromised via injection, and the injected code is now using the process's identity to establish a C2 channel or exfiltrate data, thus evading defenses that might be monitoring more common networking applications.
    answer_sources:
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Network Egress Points, DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections | WHERE process_name IN non_networking_app_list (notepad.exe, calc.exe, mspaint.exe) | ALERT
  - question: Has a networking-capable application (like a browser) connected to a statistically rare destination port?
    context: Even for applications that are supposed to use the network, their behavior is often predictable. A web browser typically connects to ports 80 and 443. If that same browser process is suddenly observed connecting to port 6667 (IRC) or 4444 (a common shell port), this is a statistical anomaly. It suggests that injected code within the browser is using it to communicate over a non-standard channel for C2.
    answer_sources:
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Network Egress Points, DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections WHERE process_name IN networking_app_list | COMPARE destination_port to historical_baseline(process_name) | ALERT if port is outside top 99% common ports
  - question: Has a clustering algorithm detected that a process has anomalously shifted its network behavior profile?
    context: This question uses unsupervised machine learning to group processes by their network behavior. A process like `svchost.exe` would normally fall into a cluster characterized by internal DNS and Kerberos traffic. If, due to code injection, it starts beaconing to an external C2 server, its network feature set (destination ports, data volume, etc.) will change. The clustering algorithm would detect this shift, showing that the process has moved from a "benign internal services" cluster to an "anomalous external C2" cluster.
    answer_sources:
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Network Egress Points, DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CLUSTER processes based on network_behavior_features | TRACK cluster_membership over time | ALERT if a process (e.g., svchost.exe) moves to an anomalous cluster
  - question: Has a process generated multiple application crashes within a short time frame while also connecting to a recently registered domain?
    context: Unstable or poorly written shellcode can cause the host process to crash. A spike in application errors (Event ID 1000) can therefore be an indicator of process injection. Correlating these crashes with network connections to newly registered domains (a common tactic for attackers) provides a powerful, combined signal that the process is not only unstable but is also communicating with a suspicious, ephemeral destination, likely a C2 server.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 1000
      - Endpoint devices, Network Egress Points, Mail Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH app_crashes(event_id=1000) | COUNT by process, host, time_window=10m | WHERE count > 5 | JOIN (SEARCH network_connections where domain_age < 30_days) on process, host
  - question: Has a user application exhibited a network data transfer volume that is several standard deviations above its hourly or daily average?
    context: This question uses time-series analysis to detect anomalous data exfiltration. An application like Outlook has a predictable data usage pattern based on user activity during business hours. A sudden, massive spike in outbound data, especially outside of normal hours, is a strong statistical anomaly. It may indicate that injected code is using the process to exfiltrate large volumes of data.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 1000
      - Endpoint devices, Network Egress Points, Mail Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each user_app | COMPUTE time_series_baseline(data_volume) by hour_of_day, day_of_week | ALERT if current_volume > 3 * stdev(baseline)
  - question: Has a change point detection algorithm identified a simultaneous, significant shift across multiple behavioral metrics for a single process?
    context: This is an advanced detection method that looks for a fundamental state change in a process's behavior. Instead of just looking at one metric (like data volume), it monitors several (e.g., network connection rate, data volume, crash rate) simultaneously. A sophisticated attack might cause all of these to change at once. A change point detection algorithm can identify this simultaneous shift, providing a very strong signal that the process's core behavior has been altered, likely due to compromise or injection.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 1000
      - Endpoint devices, Network Egress Points, Mail Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT multiple_time_series (network_rate, data_volume, error_rate) for a process into change_point_model | ALERT if a simultaneous change_point is detected across metrics