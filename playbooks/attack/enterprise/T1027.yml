name: "T1027: Obfuscated Files or Information"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook addresses the adversary's attempt to evade defenses by using obfuscated files or information. It provides investigative steps to detect this activity by identifying files matching known packed or obfuscated malware signatures, analyzing process command lines for obfuscation patterns like Base64 encoding or excessive escape characters, correlating the use of decoding utilities with recent file downloads, measuring Shannon entropy to find unexpected compression or encryption, and detecting mismatches between a file's extension and its actual type (MIME type or magic number)."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are file hashes observed in network transfers or process creation events matching known threat intelligence signatures for packed or obfuscated malware?"
    context: "This question aims to identify the presence of known malicious files that use packing or obfuscation to evade signature-based detection. By comparing file hashes from network logs and endpoint events against a curated threat intelligence database, analysts can quickly spot malware that has been previously identified and fingerprinted, even if its contents are scrambled."
    answer_sources:
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "Internet gateways"
      - "Email servers"
      - "User endpoints"
      - "File servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH file_creation_events (WinEvent:4688) OR network_file_transfers (zeek:file.log) | LOOKUP file_hash against threat_intel_database WHERE category IN ('packer', 'obfuscated_malware') | RETURN results"
  - question: "Is there an anomalous frequency of file magic numbers associated with common packers in network file transfers?"
    context: "This question seeks to detect an unusual surge in packed files within the environment. Common packers often leave a specific signature or 'magic number' at the beginning of the file. By monitoring the frequency of these magic numbers and comparing it to a historical baseline, analysts can identify potential campaigns where an adversary is introducing a large number of packed tools or malware, even if the specific file hashes are unknown."
    answer_sources:
      - "Zeek file.log"
      - "Internet gateways"
      - "Email servers"
      - "User endpoints"
      - "File servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH network_file_transfers (zeek:file.log) | PARSE file_magic_number | STATS count(file_magic_number) by time_window | COMPARE count to historical_baseline | ALERT if count > 95th_percentile"
  - question: "Does the volume of alerts for packed/obfuscated files significantly exceed the predicted volume?"
    context: "This question uses predictive modeling to identify widespread campaigns that cause a statistically significant increase in alerts compared to normal activity. By training a time-series model on the historical volume of alerts, it can predict the expected number for a future interval. An actual count that significantly exceeds the prediction's confidence interval indicates a potential widespread attack."
    answer_sources:
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "Internet gateways"
      - "Email servers"
      - "User endpoints"
      - "File servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "MODEL alert_volume with ARIMA | PREDICT next_interval_volume | COMPARE actual_volume to prediction | ALERT if actual > confidence_interval"
  - question: "Are processes being created with command-line arguments containing obfuscation patterns like Base64 flags or excessive escape characters?"
    context: "This question focuses on detecting common command-line obfuscation techniques used to hide malicious commands from simple keyword-based detection. By using regular expressions to scan for patterns like PowerShell's '-e' or '-enc' flags, extensive use of carets (^) in cmd.exe, or string manipulation functions, analysts can uncover hidden malicious activity directly from process creation logs."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "User endpoints"
      - "Application servers"
      - "Web servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH WinEvent:4688 | REGEX on command_line for patterns ('-enc', 'powershell -e', '[b][a][s][e]64', excessive carets) | ALERT on match"
  - question: "Are there command-line arguments with unusually high entropy for their associated process?"
    context: "This question aims to identify obfuscated or encrypted command-line payloads by measuring their randomness (Shannon entropy). A high entropy value for a command line in a typically cleartext process (like powershell.exe or cmd.exe) is highly suspicious and suggests the command is not human-readable. By baselining normal entropy levels for each process, this method can flag significant deviations."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "User endpoints"
      - "Application servers"
      - "Web servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH WinEvent:4688 | CALCULATE entropy(command_line) | GROUP by process_name | COMPARE entropy to 30day_baseline | ALERT if entropy > 3_standard_deviations_from_mean"
  - question: "Does a machine learning model classify any observed command-line strings as likely malicious or obfuscated?"
    context: "This question leverages a pre-trained classification model to provide a high-fidelity probability score of maliciousness for a given command line. The model analyzes multiple features (e.g., length, character ratios, entropy, keywords) to catch complex obfuscation that may be missed by simpler methods, thereby improving detection accuracy and reducing false positives."
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "User endpoints"
      - "Application servers"
      - "Web servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "STREAM WinEvent:4688 command_lines to ML_classification_model | RECEIVE probability_score | ALERT if score > defined_threshold"
  - question: "Is a known decoding utility (e.g., certutil.exe -decode) being executed shortly after a file was downloaded to the same host?"
    context: "This question detects a common attack chain where an adversary downloads an encoded payload and immediately uses a legitimate system utility to decode it into its malicious form. By correlating a file download event from network logs with a subsequent process creation event for a decoding tool on the same host within a short time window (e.g., 60 seconds), analysts can catch this evasive behavior."
    answer_sources:
      - "Zeek file.log"
      - "Zeek http.log"
      - "Windows Event ID 4688"
      - "User endpoints"
      - "Developer workstations"
      - "System administrator consoles"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "CORRELATE (file_download_event from zeek) AND (process_creation_event for decoding_tool from WinEvent:4688) ON same_host within 60_seconds | ALERT on match"
  - question: "Is a rare or anomalous parent process (e.g., an office application) spawning a known decoding utility?"
    context: "Adversaries often abuse legitimate applications (like Outlook or Word) to launch malicious scripts or tools. This question identifies such behavior by flagging parent-child process relationships that are statistically rare in the environment. Alerting when an unusual parent process spawns a deobfuscation utility like 'certutil.exe' can uncover social engineering attacks or malicious document execution."
    answer_sources:
      - "Windows Event ID 4688"
      - "User endpoints"
      - "Developer workstations"
      - "System administrator consoles"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH WinEvent:4688 | BUILD frequency_table of parent_child_processes over 30_days | COMPARE new_pair to frequency_table | ALERT if pair_frequency is in bottom_1st_percentile"
  - question: "Does a sequence analysis model identify an anomalous chain of events, such as a file download followed by execution of a deobfuscation tool?"
    context: "This question uses advanced modeling (like an LSTM) to learn the 'normal grammar' of endpoint activities. The model is trained on sequences of events (network connection -> file write -> process execution) and can then flag new sequences that have a low probability of occurring, indicating a deviation from normal behavior and a potential attack."
    answer_sources:
      - "Zeek file.log"
      - "Zeek http.log"
      - "Windows Event ID 4688"
      - "User endpoints"
      - "Developer workstations"
      - "System administrator consoles"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "STREAM endpoint_event_sequence (network, file, process) to sequence_analysis_model | RECEIVE probability_score | ALERT if score is anomalously_low"
  - question: "Are there script files or command-line arguments with Shannon entropy scores exceeding a predefined static threshold?"
    context: "This provides a direct method for detecting potential obfuscation or encryption. By setting a static entropy threshold (e.g., > 6.0 for scripts like .ps1 or .vbs, > 4.5 for command lines), analysts can quickly flag content that is highly random and unlikely to be legitimate, human-readable code or commands, suggesting it is packed or encrypted."
    answer_sources:
      - "Zeek file.log"
      - "Zeek http.log"
      - "Windows Event ID 4688"
      - "Internet gateways"
      - "User endpoints"
      - "Critical servers hosting sensitive data"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH logs (zeek:file.log, WinEvent:4688) | CALCULATE entropy(content) | IF (file_type is script AND entropy > 6.0) OR (is_command_line AND entropy > 4.5) THEN ALERT"
  - question: "Does a file transferred over the network have an entropy score that is an outlier compared to other files of the same MIME type?"
    context: "This refines entropy analysis by creating dynamic baselines for different file categories. The expected entropy of a JPEG is high, while a text file's is low. This method detects anomalies by comparing a file's entropy to its peers (e.g., a .txt file with the entropy of a JPEG), which reduces false positives from naturally high-entropy file types and highlights true outliers."
    answer_sources:
      - "Zeek file.log"
      - "Internet gateways"
      - "User endpoints"
      - "Critical servers hosting sensitive data"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH zeek:file.log | CALCULATE entropy(file) | GROUP by MIME_type | COMPARE file_entropy to 30day_MIME_type_baseline | ALERT if entropy > 99th_percentile"
  - question: "Does a multi-dimensional anomaly detection model flag any files as outliers based on a combination of their entropy, size, and type?"
    context: "This question uses more sophisticated anomaly detection (like an Isolation Forest) to find unusual combinations of file attributes. The model can identify suspicious cases that might be missed by single-metric analysis, such as a very small file with unusually high entropy, which is a strong indicator of a packed or encrypted payload that warrants investigation."
    answer_sources:
      - "Zeek file.log"
      - "Internet gateways"
      - "User endpoints"
      - "Critical servers hosting sensitive data"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "STREAM file_features (entropy, size, type) from zeek:file.log to anomaly_detection_model | RECEIVE outlier_score | ALERT if flagged as outlier"
  - question: "Are files being transferred with a benign extension (e.g., '.jpg') but a mismatched executable or binary MIME type (e.g., 'application/x-dosexec')?"
    context: "This question aims to uncover file masquerading, a common technique where an adversary renames an executable file (e.g., 'malware.exe' to 'image.jpg') to bypass simple extension-based filters. By comparing the file extension to the actual file type identified from its content (MIME type) in network logs, analysts can detect this deception."
    answer_sources:
      - "Zeek file.log"
      - "Web servers"
      - "Email gateways"
      - "User endpoints"
      - "Network file shares"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH zeek:file.log | LOOKUP file_extension in benign_extension_to_MIME_map | IF MIME_type NOT IN expected_MIME_types (especially if application/x-dosexec) THEN ALERT"
  - question: "Is any user exhibiting an anomalously high rate of file type mismatches (extension vs. MIME type) compared to their own historical behavior?"
    context: "Instead of alerting on every file type mismatch, this approach focuses on behavioral change. It identifies users who suddenly start generating a high volume of mismatched files per hour. This could indicate a compromised account being used to download malicious tools or a user engaging in suspicious activity, warranting a focused investigation on that user's activity."
    answer_sources:
      - "Zeek file.log"
      - "Web servers"
      - "Email gateways"
      - "User endpoints"
      - "Network file shares"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH zeek:file.log | COUNT mismatches by user, by hour | COMPARE user_mismatch_count to user_historical_baseline | ALERT if count exceeds Z-score or 98th_percentile"
  - question: "Does a decision tree classifier predict a high risk of maliciousness for a file based on features like the presence of a mismatch, its source, and its size?"
    context: "This uses a machine learning model to make a more intelligent decision about whether a file mismatch is truly malicious. The model can learn that a mismatch from an untrusted external IP address is much more dangerous than one from an internal server, leading to higher-fidelity alerts and helping analysts prioritize the most critical events."
    answer_sources:
      - "Zeek file.log"
      - "Web servers"
      - "Email gateways"
      - "User endpoints"
      - "Network file shares"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "STREAM file_features (mismatch_present, source_ip, file_size, MIME_type) to decision_tree_model | RECEIVE risk_prediction | ALERT if risk is high"