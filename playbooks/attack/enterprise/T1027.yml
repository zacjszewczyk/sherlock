name: T1027: Obfuscated Files or Information
id: 9a8b7c6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d
description: This playbook helps determine if an adversary is attempting to evade defenses using obfuscated files or information. This involves detecting files whose hashes match known obfuscated malware or packers; identifying command-line arguments that contain obfuscation patterns like Base64 encoding or excessive escape characters; observing the use of decoding utilities immediately following a file download; flagging files or commands with abnormally high Shannon entropy suggesting encryption or compression; and finding inconsistencies between a file's extension and its actual MIME type or magic number, which indicates masquerading.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are file hashes observed in network or endpoint logs associated with known packed or obfuscated malware?
    context: This question seeks to identify known malicious files that have been obfuscated or packed to avoid signature-based detection. It involves querying file creation logs (Windows Event ID 4688) and network file transfer logs (Zeek file.log) to extract file hashes. These hashes are then compared against a threat intelligence database that contains signatures for known packers (e.g., UPX, MPRESS) or obfuscated malware. A match provides a high-confidence indicator that an adversary is attempting to introduce a hidden malicious payload into the environment.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4688
      - Internet gateways
      - Email servers
      - User endpoints
      - File servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (WinEvent:4688 OR zeek:file.log) | EXTRACT file_hash | LOOKUP threat_intel_db ON file_hash WHERE category IN ('packer', 'obfuscator')
  - question: Is there an anomalous frequency of file magic numbers associated with common packers observed in network traffic?
    context: This question aims to detect the use of file packers by analyzing file headers in network traffic. The rationale is that even if a hash is unknown, the file's structure may still betray the tool used to pack it. This involves scanning files from network logs (Zeek file.log) for specific magic numbers (e.g., 'UPX!') that identify common packers. By establishing a baseline for the normal frequency of these signatures, a sudden spike exceeding a statistical threshold (e.g., the 95th percentile) can indicate a widespread campaign using packed malware.
    answer_sources:
      - Zeek file.log
      - Internet gateways
      - Email servers
      - User endpoints
      - File servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH zeek:file.log | EXTRACT magic_number | WHERE magic_number IN ('UPX!', ...) | STATS count BY time_window | COMPARE count TO baseline_95th_percentile
  - question: Is the volume of signature-based alerts for packed or obfuscated files significantly higher than predicted by historical trends?
    context: This question uses predictive analytics to identify large-scale attacks that might otherwise be lost in noise. By training a time-series model (e.g., ARIMA) on the historical volume of alerts specifically related to packed or obfuscated files, we can forecast the expected number of such alerts for a given time period. If the actual number of alerts significantly exceeds the model's prediction and its confidence interval, it suggests an abnormal, coordinated event, such as a new malware campaign.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4688
      - Internet gateways
      - Email servers
      - User endpoints
      - File servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL time_series_model ON (alert_stream WHERE signature='packed_file') | PREDICT expected_count FOR next_interval | ALERT IF actual_count > prediction_confidence_interval
  - question: Are processes being created with command-line arguments that contain patterns indicative of obfuscation?
    context: This question focuses on detecting attempts to hide malicious commands executed on an endpoint. Adversaries often use obfuscation within command-line tools like PowerShell and CMD to evade logging and detection. This action involves using regular expressions to scan process creation logs (Windows Event ID 4688) for common obfuscation patterns, such as PowerShell's base64 encoding flags (`-e`, `-enc`), excessive use of CMD escape characters (`^`), or string manipulation functions. Finding these patterns is a strong indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - User endpoints
      - Application servers
      - Web servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH WinEvent:4688 | REGEX on CommandLine for 'powershell -e|-enc', 'excessive ^', '-join', '-replace'
  - question: Are command-line arguments for common processes exhibiting unusually high entropy, suggesting obfuscation?
    context: This question aims to identify obfuscated commands by measuring their randomness (Shannon entropy). Normal commands for processes like `powershell.exe` or `cmd.exe` have relatively low entropy, while encoded or encrypted commands are highly random. By establishing a statistical baseline (mean and standard deviation) of entropy for command lines of specific processes, we can flag any new command whose entropy is a significant outlier (e.g., more than three standard deviations from the mean). This provides a mathematical way to spot hidden code.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - User endpoints
      - Application servers
      - Web servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH WinEvent:4688 | GROUP BY process_name | CALCULATE entropy(CommandLine) | COMPARE entropy TO historical_baseline_for_process (mean + 3*stddev)
  - question: Can a machine learning model classify command-line strings as malicious or obfuscated based on their features?
    context: This question proposes using a machine learning classifier for a more sophisticated and high-fidelity detection of malicious command lines. A model (e.g., Random Forest) can be trained on a variety of features extracted from command-line strings, such as length, character ratios, entropy, and the presence of specific keywords (`iex`, `downloadstring`). The model then outputs a probability score indicating the likelihood of the command being malicious or obfuscated, allowing for more nuanced alerting than static rules or thresholds.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - User endpoints
      - Application servers
      - Web servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE WinEvent:4688.CommandLine TO ml_classifier_model | ALERT IF model_output_score > threshold
  - question: Is a known decoding or deobfuscation utility being executed shortly after a file was downloaded to the same host?
    context: This question targets a common adversary TTP: downloading an encoded payload and then decoding it locally to bypass network defenses. This is highly suspicious behavior that can be caught with a correlation rule. The rule would trigger an alert when a process associated with a deobfuscation tool (e.g., `certutil.exe -decode`) is launched on a host within a short time window (e.g., 60 seconds) of a file being downloaded to that same host, linking the two events as a probable attack sequence.
    answer_sources:
      - Zeek file.log
      - Zeek http.log
      - Windows Event ID 4688
      - User endpoints
      - Developer workstations
      - System administrator consoles
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE (zeek:file.log OR zeek:http.log WHERE action=download) AND (WinEvent:4688 WHERE process IN ('certutil.exe', 'expand.exe')) ON host, filename WITHIN 60s
  - question: Are rare or anomalous parent-child process relationships involving deobfuscation utilities occurring?
    context: This question seeks to identify unusual execution chains that could indicate malicious activity. While a developer might run `certutil.exe` from a command prompt, it is highly abnormal for a program like `outlook.exe` or `winword.exe` to spawn it. By building a frequency table of all parent-child process relationships observed in the environment over a baseline period, we can alert on new pairings that are statistically rare (e.g., in the bottom 1st percentile of frequency), as these often represent an adversary's attempt to execute code in an unexpected way.
    answer_sources:
      - Windows Event ID 4688
      - User endpoints
      - Developer workstations
      - System administrator consoles
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH WinEvent:4688 | BUILD frequency_table of parent_process, child_process | ALERT IF (parent, child) pair frequency is in bottom 1st percentile
  - question: Are sequences of endpoint events, such as network download followed by deobfuscation, deviating from learned normal behavior?
    context: This question uses advanced sequence analysis to understand the "story" of events on an endpoint and spot deviations. A model (like an LSTM) can be trained on correlated network and endpoint event logs to learn normal sequences of activity (e.g., `browser -> download -> no execution`). The model can then analyze a live stream of events and flag sequences that have a low probability of occurring based on the learned patterns, such as `email client -> file write -> certutil execution`. This helps detect complex, multi-stage attack chains.
    answer_sources:
      - Zeek file.log
      - Zeek http.log
      - Windows Event ID 4688
      - User endpoints
      - Developer workstations
      - System administrator consoles
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE event_stream (zeek, winevents) TO sequence_analysis_model | ALERT IF sequence_probability < threshold
  - question: Are files or command-line arguments exhibiting high Shannon entropy scores indicative of obfuscation?
    context: This question provides a direct, mathematical approach to finding hidden data. Shannon entropy measures randomness; cleartext is ordered, while encrypted or compressed data is random. This action involves creating a rule to calculate the entropy of content like script files or command-line arguments. An alert is triggered if the entropy score exceeds a fixed threshold (e.g., > 6.0 for a script file, > 4.5 for a command line), providing a simple yet effective way to flag content that is likely obfuscated.
    answer_sources:
      - Zeek file.log
      - Zeek http.log
      - Windows Event ID 4688
      - Internet gateways
      - User endpoints
      - Critical servers hosting sensitive data
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (zeek:file.log OR WinEvent:4688) | CALCULATE entropy(content) | ALERT IF (file_type=script AND entropy > 6.0) OR (type=command AND entropy > 4.5)
  - question: Are files transferred over the network showing entropy scores that are statistical outliers for their specific file type?
    context: This question refines entropy analysis by adding context. Instead of using a single, global threshold for entropy, this method establishes a separate baseline for each file type (e.g., by MIME type). A JavaScript file is expected to have a different entropy profile than a PNG image. The system alerts when a transferred file's entropy is a major outlier (e.g., in the 99th percentile) compared to other files of its own type. This reduces false positives and more accurately identifies files that are unusually random for what they claim to be.
    answer_sources:
      - Zeek file.log
      - Zeek http.log
      - Internet gateways
      - User endpoints
      - Critical servers hosting sensitive data
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH zeek:file.log | GROUP BY mime_type | CALCULATE entropy(file_content) | COMPARE entropy TO historical_baseline_for_mime_type (99th percentile)
  - question: Can a multi-dimensional anomaly detection model identify files with anomalous combinations of features like entropy, size, and type?
    context: This question uses a more powerful anomaly detection technique to find suspicious files that don't trigger simpler rules. A model like an Isolation Forest can analyze multiple file features simultaneously (e.g., entropy, size, source, type). It learns what normal combinations of these features look like and can then identify outliers. For example, a tiny file with very high entropy might be flagged as anomalous, even if its entropy score alone wasn't above a hard threshold. This is effective for finding novel or subtle obfuscation techniques.
    answer_sources:
      - Zeek file.log
      - Internet gateways
      - User endpoints
      - Critical servers hosting sensitive data
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE features (entropy, size, type) from zeek:file.log TO isolation_forest_model | ALERT ON anomalies
  - question: Are files being transferred with a file extension that is inconsistent with the file's actual MIME type, suggesting masquerading?
    context: This question aims to unmask malicious files masquerading as benign ones (e.g., an executable renamed to `document.txt`). This technique involves creating a mapping of common "safe" file extensions (`.jpg`, `.txt`, `.png`) to their expected MIME types. A rule then monitors file transfers (from Zeek file.log) and triggers an alert when a file has one of these extensions but its actual MIME type, as identified by Zeek, is something suspicious like `application/x-dosexec` or `application/octet-stream`.
    answer_sources:
      - Zeek file.log
      - Web servers
      - Email gateways
      - User endpoints
      - Network file shares
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH zeek:file.log | LOOKUP mime_type FOR file_extension in benign_map | ALERT IF mime_type != expected_mime_type AND mime_type IN ('application/x-dosexec', 'application/octet-stream')
  - question: Is any user exhibiting an anomalously high rate of file type mismatches (extension vs. MIME type) over time?
    context: This question applies user behavior analytics (UBA) to the problem of file masquerading. The goal is to find compromised accounts or malicious insiders. The system counts the number of file type mismatches (extension vs. MIME type) for each user over a set time window (e.g., per hour). By baselining each user's normal rate of such mismatches, the system can alert when a user's activity significantly deviates from their own history (e.g., using a Z-score or percentile), indicating a potential threat.
    answer_sources:
      - Zeek file.log
      - Web servers
      - Email gateways
      - User endpoints
      - Network file shares
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH zeek:file.log | WHERE extension_mismatches_mime | STATS count BY user, time_window | COMPARE count to user_baseline (e.g., Z-score > 3)
  - question: Can a machine learning classifier predict if a file is malicious based on features including file type mismatch, source, and size?
    context: This question proposes using a classifier model to provide a holistic risk score for a file, rather than relying on a single indicator. A model like a decision tree can be trained to predict malice based on a combination of features, such as the presence of a MIME/extension mismatch, the reputation of the source IP, the file size, and the specific MIME type. This allows the system to make more intelligent decisions, for instance by assigning a higher risk to a mismatched file from an unknown external IP that is the size of a typical executable.
    answer_sources:
      - Zeek file.log
      - Web servers
      - Email gateways
      - User endpoints
      - Network file shares
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PIPE features (mismatch_present, source_ip, size, mime_type) from zeek:file.log TO decision_tree_model | ALERT IF prediction is 'malicious'