name: T1612: Build Image on Host
id: 2d8f9b9f-4b9d-4c3a-9e8d-7f6a5b4c3d2e
description: Detects if an adversary is building malicious container images directly on a host to evade defenses. This involves monitoring for container build commands (e.g., 'docker build') and correlating them with suspicious activity such as connections to known malicious infrastructure, the use of obfuscated command-line arguments, execution on unauthorized systems, connections to non-standard repositories, or immediate execution followed by anomalous network behavior like C2 beaconing.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a container build process communicating with known malicious infrastructure or involving known malware files?
  context: This question aims to detect when a container build process, identified by commands like 'docker build', is used to download malicious tools or connect to command-and-control (C2) servers. By correlating the build event with network and file activity on the same host within a 5-minute window, we can check destination IPs, domains, and file hashes against threat intelligence feeds to find high-fidelity indicators of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Zeek files.log
  - Container host systems
  - CI/CD pipeline servers
  - Network egress points
  - DNS resolvers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      SEARCH process logs for 'docker build' on host H at time T.
      SEARCH network and file logs from host H between T and T+5min.
      EXTRACT destination IPs/domains and file hashes.
      CHECK IPs, domains, and hashes against threat intelligence feeds.
      ALERT on match.
- question: Is a container build process exhibiting signs of Domain Generation Algorithm (DGA) usage in its DNS requests?
  context: Adversaries often use DGA to create numerous random-looking domain names for C2 communication, making them difficult to block. This question focuses on detecting such activity by calculating the Shannon entropy (a measure of randomness) of domain names requested during a build process. An unusually high entropy compared to a historical baseline can indicate DGA activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Zeek files.log
  - Container host systems
  - CI/CD pipeline servers
  - Network egress points
  - DNS resolvers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      BASELINE Shannon entropy for DNS queries during all 'docker build' events over 30 days.
      FOR each new build event, calculate entropy of associated DNS queries.
      ALERT if entropy exceeds the 95th percentile of the baseline.
- question: Does the network profile of a container build process match patterns of previously identified malicious activity?
  context: Malicious network traffic often has distinct characteristics (e.g., specific TLS fingerprints, unusual ports, connection durations). This question involves using a supervised machine learning model, trained on features from known benign and malicious build events, to classify the network activity of new builds. A 'malicious' classification with high confidence warrants immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Zeek files.log
  - Container host systems
  - CI/CD pipeline servers
  - Network egress points
  - DNS resolvers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      TRAIN a Random Forest model on labeled network features (JA3/JA3S, port, etc.) from past builds.
      FOR each new build, extract its network features.
      CLASSIFY the build's network profile using the trained model.
      ALERT if classified as 'malicious' with high confidence.
- question: Are suspicious command-line arguments or patterns being used in container build commands?
  context: Adversaries may use specific command-line flags to evade detection or caching mechanisms. This question focuses on identifying these tactics by scanning 'docker build' commands for suspicious arguments like '--no-cache' (to force re-downloading), '-f /tmp/...' (to use a Dockerfile from a non-standard location), or piping a Dockerfile from a network utility like `curl`.
  answer_sources:
  - Windows Event ID 4688
  - Container host systems
  - Developer workstations
  - CI/CD pipeline servers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      SEARCH process creation logs for 'docker build' or 'buildah'.
      MATCH command-line arguments against a list of suspicious patterns (e.g., '--no-cache', '-f /tmp/', 'curl | docker build').
      ALERT on any match.
- question: Is a user executing a container build command with arguments that deviate significantly from their normal behavior?
  context: A user's build commands typically follow a consistent pattern. A sudden, drastic change in the arguments used can indicate a compromised account or an insider threat. This question involves establishing a baseline of each user's historical 'docker build' arguments and using a similarity score (like Jaccard) to detect and alert on commands that are highly dissimilar to their established norm.
  answer_sources:
  - Windows Event ID 4688
  - Container host systems
  - Developer workstations
  - CI/CD pipeline servers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      FOR each user, create a baseline set of 'docker build' arguments used over 90 days.
      FOR each new build, calculate the Jaccard similarity score between its arguments and the user's baseline.
      ALERT if the score is below a defined threshold (e.g., < 0.2).
- question: Is a container build command structurally anomalous compared to all other build commands across the organization?
  context: While some build commands may be unique, most adhere to common structural patterns within an organization. This question uses an unsupervised anomaly detection algorithm (like Isolation Forest) to learn these common patterns from all 'docker build' commands. The model can then score new commands and flag any that are high-scoring outliers, suggesting they are structurally unusual and potentially malicious.
  answer_sources:
  - Windows Event ID 4688
  - Container host systems
  - Developer workstations
  - CI/CD pipeline servers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      TOKENIZE command-line arguments from all 'docker build' events.
      TRAIN an Isolation Forest model on the tokenized argument vectors.
      SCORE new build commands using the trained model.
      ALERT on commands identified as high-scoring outliers.
- question: Is a container build being executed on an unauthorized host or by an unauthorized user account?
  context: In a well-managed environment, container builds should only occur on designated systems (like CI/CD servers or developer workstations) and be performed by authorized personnel or service accounts. This question aims to enforce this policy by checking every 'docker build' event against explicit allow-lists of hostnames and user accounts, and alerting on any violation.
  answer_sources:
  - Windows Event ID 4688
  - Domain controllers
  - Production application servers
  - Database servers
  - Container host systems
  - Identity and Access Management (IAM) systems
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      MAINTAIN allow-lists for authorized build hostnames and user accounts.
      ON 'docker build' event, check if the executing hostname and username are on the respective allow-lists.
      ALERT if either is not on the list.
- question: Has a container build command been executed for the first time on a specific host?
  context: A 'docker build' command appearing on a production server, domain controller, or database server where one has never been seen before is a strong indicator of anomalous, and likely malicious, activity. This question involves tracking build command frequency per host and generating an alert for the first occurrence of a build on any host with no prior build history.
  answer_sources:
  - Windows Event ID 4688
  - Domain controllers
  - Production application servers
  - Database servers
  - Container host systems
  - Identity and Access Management (IAM) systems
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      FOR each host, track the frequency of 'docker build' commands over a 30-day window.
      ALERT if a build command occurs on a host where the historical frequency is zero.
- question: Does a container build event deviate from the established profile of legitimate build activity based on user, host, and time?
  context: Legitimate build activities often follow predictable patterns related to who, where, and when they occur. This question uses a One-Class SVM model, trained on features of normal builds (e.g., user's AD group, host's role, time of day), to learn this profile of legitimacy. The model can then classify new build events and flag any that do not conform to this profile as anomalous.
  answer_sources:
  - Windows Event ID 4688
  - Domain controllers
  - Production application servers
  - Database servers
  - Container host systems
  - Identity and Access Management (IAM) systems
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      TRAIN a One-Class SVM model on features (user group, host role, time) from legitimate build events.
      FOR each new build event, extract its features.
      CLASSIFY the event using the trained model.
      ALERT if the event is classified as an anomaly.
- question: Is a container build process connecting to network destinations that are not on the approved list of registries or repositories?
  context: During a build, containers typically pull layers and packages from a limited set of approved sources like Docker Hub, GCR, or an internal Artifactory. This question aims to detect when a build process connects to an unapproved, external destination, which could be an adversary-controlled server used to download malware or exfiltrate data.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points
  - DNS resolvers
  - Container host systems
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      CORRELATE 'docker build' events with concurrent network connections.
      COMPARE destination domains/IPs against an allow-list of approved registries and repositories.
      ALERT on any connection to a destination not on the list.
- question: Is a container build process connecting to a rare or unusual Autonomous System Number (ASN)?
  context: Corporate network traffic, including during container builds, usually flows to a predictable set of network providers (ASNs). A connection to an ASN that is rarely or never seen in build traffic could indicate communication with a non-standard or suspicious part of the internet. This question involves baselining ASN usage and alerting on connections to statistically rare ASNs.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points
  - DNS resolvers
  - Container host systems
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      PROFILE the distribution of destination ASNs for all build-related network connections over 30 days.
      FOR a new build, identify the ASNs of its network destinations.
      ALERT if the build connects to an ASN not in the top 98% of the baseline distribution.
- question: Is the volume of data transferred during a container build to a non-allow-listed destination anomalously high?
  context: Even if a connection to a non-allow-listed destination occurs, the volume of data transferred can be an indicator of intent. A small transfer might be incidental, but a large download could be a malicious payload. This question uses a time series model to forecast the expected data volume for such connections and alerts when the actual amount significantly exceeds the prediction.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points
  - DNS resolvers
  - Container host systems
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      FORECAST the expected volume of data transfer to non-allow-listed destinations during builds.
      MEASURE the actual data transfer volume for a new build.
      ALERT if the actual volume significantly exceeds the forecast (e.g., >3 standard deviations).
- question: Has a 'build-then-run' container sequence resulted in network connections to known command-and-control (C2) infrastructure?
  context: A common adversary pattern is to build a malicious image on a host and then immediately run it. This question uses a stateful rule to detect this specific sequence of events: a 'docker build' is followed by a 'docker run' of that new image within 10 minutes, and the resulting container's traffic includes connections to IPs found on a C2 threat intelligence feed.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Container host systems
  - Network egress points
  - Internal network segments
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      CREATE a stateful rule that triggers when:
      1. 'docker build' completes on host H.
      2. 'docker run' of the new image occurs on host H within 10 minutes.
      3. The container's network traffic connects to an IP on a C2 threat feed.
      ALERT on trigger.
- question: Is a container launched immediately after a build exhibiting periodic, beacon-like network behavior?
  context: Malware and C2 agents often communicate with their home base using highly regular, periodic network connections (beacons). This question aims to detect this behavior by analyzing the time intervals between outbound connections from a container that was just built and run. A very low standard deviation in these time deltas indicates a lack of human interaction and suggests automated beaconing.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Container host systems
  - Network egress points
  - Internal network segments
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      FOR a 'build-then-run' sequence, capture outbound network connection timestamps from the new container.
      CALCULATE the standard deviation of the time deltas between consecutive connections.
      ALERT if the standard deviation is extremely low (e.g., < 1 second).
- question: Does the sequence of system events following a 'build-then-run' action deviate from normal post-deployment behavior?
  context: Legitimate container deployments typically result in a predictable sequence of follow-on system events (e.g., specific processes starting, network connections to known services). This question involves using a sequence analysis model, like a Hidden Markov Model (HMM), trained on these normal event sequences. The model can then identify and alert on event sequences following a 'build-then-run' that have a low probability of being legitimate.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Container host systems
  - Network egress points
  - Internal network segments
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      TRAIN a Hidden Markov Model (HMM) on event sequences following legitimate container deployments.
      FEED the event sequence from a new 'build-then-run' event into the model.
      ALERT for sequences that receive a low probability score from the model.