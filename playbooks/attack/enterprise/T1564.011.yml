name: T1564.011: Ignore Process Interrupts
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is attempting to evade defenses by ensuring a process continues execution despite potential interruptions. This involves looking for processes created with known malicious command strings, commands containing keywords or syntax used to ignore interrupts (e.g., 'nohup', '-ErrorAction SilentlyContinue'), processes that remain active long after their parent process or user session has terminated, and processes exhibiting these behaviors that then initiate suspicious external network connections.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Did a process creation event contain a command-line string that is an exact match to a known malicious command used for ignoring process interrupts?
    context: This question aims to identify high-confidence threats by matching process command lines against a curated list of known-bad strings from threat intelligence. An exact match indicates a known malicious indicator is present and requires immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Application Servers, Domain Controllers, Critical Production Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs (e.g., Windows Event ID 4688) WHERE command_line IN (list_of_known_malicious_strings)
  - question: Has there been a statistically significant spike in the number of exact-match detections for commands that ignore process interrupts?
    context: This question seeks to detect widespread, coordinated campaigns by baselining the normal frequency of exact-match detections. A significant deviation from the mean (e.g., more than three standard deviations) suggests an unusual, potentially malicious, increase in activity across the enterprise.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Application Servers, Domain Controllers, Critical Production Servers
    range: last 90 days
    queries:
      - pseudocode: CALCULATE 30-day_rolling_baseline (mean, std_dev) of daily_exact_match_counts. ALERT IF today's_count > (mean + 3 * std_dev)
  - question: Can we identify novel or obfuscated commands used to ignore process interrupts by using a machine learning model to analyze command-line semantics?
    context: This question leverages natural language processing (NLP) to find variations of malicious commands that are not on an exact-match list. By analyzing the structure and semantics, the model can flag suspicious commands that are similar to known malicious patterns, thus detecting novel threats.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Application Servers, Domain Controllers, Critical Production Servers
    range: last 90 days
    queries:
      - pseudocode: APPLY pre-trained_NLP_model to process_command_lines. FLAG commands with high_malicious_similarity_score
  - question: Was a process created with a command line containing keywords or patterns commonly used to ignore interrupts, such as 'nohup' or '-ErrorAction SilentlyContinue'?
    context: This question looks for specific syntax patterns and keywords in process command lines and PowerShell script blocks that are indicative of an attempt to make a process resilient to termination. These patterns are suspicious and warrant further triage, even if not tied to a known-bad signature.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - User Workstations, Servers with PowerShell, Windows Subsystem for Linux (WSL) enabled hosts, Developer environments
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_logs (4688) and powershell_script_logs (4104) FOR regex_patterns ('nohup .* &', 'disown', '-ErrorAction SilentlyContinue', etc.)
  - question: Is the usage of an interrupt-ignoring command pattern anomalous for a specific user, host, or parent process?
    context: This question establishes a baseline for the normal usage of potentially evasive command patterns. An alert is triggered if a pattern is used by a user or on a host for the first time, or if its frequency exceeds its historical 95th percentile, highlighting unusual and potentially malicious behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - User Workstations, Servers with PowerShell, Windows Subsystem for Linux (WSL) enabled hosts, Developer environments
    range: last 90 days
    queries:
      - pseudocode: BASELINE frequency of each pattern per user/host. ALERT IF new_usage_observed OR daily_count > 95th_percentile_of_historical_usage
  - question: Can a machine learning model classify a command line as evasive based on features like character entropy, keyword counts, and special character ratios?
    context: This question uses a classification model to score command lines for their likelihood of being evasive. By engineering features that capture the characteristics of obfuscated or suspicious commands, the model can identify malicious activity with a high degree of confidence, even for previously unseen commands.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - User Workstations, Servers with PowerShell, Windows Subsystem for Linux (WSL) enabled hosts, Developer environments
    range: last 90 days
    queries:
      - pseudocode: EXTRACT features (length, entropy, keyword_count) from command_lines. APPLY classification_model. FLAG commands with score > confidence_threshold
  - question: Did a process remain active for an extended period (e.g., >5 minutes) after its parent process terminated or the spawning user session logged off?
    context: This question aims to identify 'orphaned' processes that have detached from their original session, a common behavior for malicious persistence. By correlating process termination and user logoff events, we can find processes that outlive their expected lifecycle, while allowing for legitimate, long-running system services.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4634
      - Authentication Servers, Domain Controllers, User Workstations, Remote Desktop (RDS) and Terminal Servers
    range: last 90 days
    queries:
      - pseudocode: CORRELATE process_termination_events with parent_termination and user_logoff (4634) events. ALERT IF child_termination_time > (parent_termination_time + 5_minutes) AND process NOT in allowlist
  - question: Has a child process exhibited an anomalously long lifetime relative to its parent process compared to historical norms?
    context: This question establishes a baseline for the normal time delta between a parent process's termination and its children's. By identifying outliers that exceed the 99th percentile for that parent-child relationship, we can spot anomalously long-lived processes that may be malicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4634
      - Authentication Servers, Domain Controllers, User Workstations, Remote Desktop (RDS) and Terminal Servers
    range: last 90 days
    queries:
      - pseudocode: CALCULATE baseline_distribution of (child_termination_time - parent_termination_time) for each parent_process_type. ALERT IF new_delta > 99th_percentile
  - question: Is there an anomalous increase in the number of active orphaned processes on a host, as predicted by a time series model?
    context: This question uses time series forecasting to model the normal cyclical count of orphaned processes on a host. A significant deviation from the forecasted count suggests an unusual event, such as an adversary detaching multiple malicious processes at once.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4634
      - Authentication Servers, Domain Controllers, User Workstations, Remote Desktop (RDS) and Terminal Servers
    range: last 90 days
    queries:
      - pseudocode: MODEL count_of_orphaned_processes per host over time. ALERT IF observed_count deviates from forecasted_confidence_interval
  - question: Did a process flagged for ignoring interrupts initiate a network connection to a known malicious IP address or domain?
    context: This question correlates process-level detections with network-level threat intelligence. A process already identified as evasive that then communicates with a destination on a threat feed is a high-priority indicator of compromise, strongly suggesting C2 communication or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Network Egress Points, DNS Server Logs, Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - pseudocode: CORRELATE flagged_process_events with network_connection_logs within 5 minutes. ALERT IF destination_IP/domain IN threat_intelligence_feed
  - question: Is a process that is ignoring interrupts communicating with a statistically risky domain based on its age, entropy, or rarity?
    context: This question assesses the risk of a network destination without relying on a threat intelligence feed. By scoring domains based on characteristics common to malicious infrastructure (e.g., newly registered, high entropy), we can flag suspicious communications from evasive processes that may be using novel C2 domains.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Network Egress Points, DNS Server Logs, Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - pseudocode: CALCULATE risk_score for destination_domains based on age, entropy, suffix_prevalence. FLAG if process communicates with a domain in the top 5th_percentile_risk_score
  - question: Does a graph-based model identify an anomalous network connection from a process that is ignoring interrupts?
    context: This question uses a graph model to learn the normal communication patterns within the network. It can identify anomalous connections, such as an evasive PowerShell process making a long-running connection to a single, previously unseen IP address, which stands out from typical network behavior.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices, Network Egress Points, DNS Server Logs, Network Security Monitoring (NSM) sensors
    range: last 90 days
    queries:
      - pseudocode: MODEL network_traffic as a graph (nodes=processes/IPs, edges=connections). IDENTIFY anomalous edges originating from flagged_processes