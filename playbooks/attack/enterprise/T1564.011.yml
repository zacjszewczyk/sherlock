name: T1564.011: Ignore Process Interrupts
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversary attempts to evade defenses by ensuring a process continues execution despite potential interruptions, such as user logoffs or parent process terminations. It covers techniques like using specific command-line strings from threat intelligence, employing keywords to suppress termination (e.g., '-ErrorAction SilentlyContinue'), creating orphaned processes that outlive their parent session, and observing suspicious network activity from these detached processes.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is a process being created with a command-line string that exactly matches a known malicious command used for ignoring process interrupts?
  context: This question aims to identify the most straightforward and high-fidelity indicators of this technique. By maintaining a curated list of known-bad command strings from threat intelligence and creating an exact-match rule against process creation logs (specifically the 'CommandLine' field), analysts can quickly spot confirmed malicious activity. A positive match is a strong signal of compromise and requires immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Application Servers
  - Domain Controllers
  - Critical Production Servers
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events (e.g., Event ID 4688)
      WHERE command_line IN (list_of_known_malicious_interrupt_ignore_commands)
      RETURN hostname, user, process_name, command_line
- question: Is there a statistically significant spike in the number of exact-match detections for commands that ignore process interrupts across the enterprise?
  context: This question helps detect widespread campaigns that might be missed by looking at individual alerts in isolation. By establishing a baseline (mean and standard deviation) of daily detections over a 30-day period, a sudden increase beyond a statistical threshold (e.g., three standard deviations) can indicate a coordinated attack. This allows analysts to escalate from a single host incident to a potential enterprise-wide event.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Application Servers
  - Domain Controllers
  - Critical Production Servers
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      CALCULATE daily_count of exact_match_detections over past 30 days
      CALCULATE mean and std_dev of daily_count
      ALERT if today's_count > (mean + 3 * std_dev)
- question: Can a machine learning model identify novel or obfuscated command-line strings that are semantically similar to known commands for ignoring process interrupts?
  context: This question addresses the limitation of exact-match rules, which can be bypassed by minor variations in a command. By using an NLP model (like a one-class SVM or transformer) trained on a large dataset of both benign and malicious commands, the system can detect new or previously unseen malicious command strings. This provides a proactive defense against evolving adversary TTPs that signature-based methods would miss.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations
  - Application Servers
  - Domain Controllers
  - Critical Production Servers
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH new_command_line in process_creation_events:
        score = NLP_MODEL.predict(new_command_line)
        IF score > confidence_threshold:
          ALERT on suspicious command
- question: Is a process being created with a command line or PowerShell script containing keywords or syntax patterns known to ignore interrupts or detach from a session?
  context: This question seeks to identify suspicious commands that use common utilities or parameters for defense evasion, even if the full command string isn't on a known-bad list. By using regular expressions to search for patterns like 'nohup', 'disown', 'Start-Process -WindowStyle Hidden', or '-ErrorAction SilentlyContinue' in process and script logs, analysts can flag potentially malicious activity for further review. These alerts are typically lower severity as these patterns can have legitimate uses.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - User Workstations
  - Servers with PowerShell
  - Windows Subsystem for Linux (WSL) enabled hosts
  - Developer environments
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events (4688) or powershell_script_blocks (4104)
      WHERE command_line MATCHES REGEX ('nohup .* &|disown|setsid|Start-Process -WindowStyle Hidden|trap { continue; }|-ErrorAction SilentlyContinue')
      RETURN hostname, user, process_name, command_line
- question: Is the usage of a specific interrupt-ignoring pattern (e.g., 'nohup', '-ErrorAction SilentlyContinue') statistically anomalous for a particular user, host, or parent process?
  context: This question helps to reduce false positives from the previous pattern-matching question by adding behavioral context. Legitimate use of these patterns often follows predictable norms. By baselining the frequency of use for each pattern by user, host, and parent process, the system can flag first-time usage or a sudden spike in frequency (e.g., exceeding the 95th percentile). This helps prioritize alerts that deviate from established normal behavior.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - User Workstations
  - Servers with PowerShell
  - Windows Subsystem for Linux (WSL) enabled hosts
  - Developer environments
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH user, hostname, parent_process:
        BASELINE usage_frequency of interrupt_ignore_patterns
      ALERT when current_usage > 95th_percentile_of_baseline OR first_time_usage
- question: Can a machine learning model, based on features like command length, entropy, and keyword counts, classify a command line as likely being evasive?
  context: This question uses a feature-based machine learning approach to detect malicious commands. Instead of analyzing the raw text, the model is trained on engineered features like command length, character entropy, keyword presence, and special character ratios. This allows a classification model (like Gradient Boosting) to identify complex combinations of features that are indicative of an evasive command, even if the command uses novel syntax, and assign a confidence score to flag suspicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - User Workstations
  - Servers with PowerShell
  - Windows Subsystem for Linux (WSL) enabled hosts
  - Developer environments
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH new_command_line:
        features = EXTRACT_FEATURES(length, entropy, keywords, special_chars_ratio)
        score = CLASSIFICATION_MODEL.predict(features)
        IF score > 0.85:
          ALERT on suspicious command
- question: Is there evidence of an 'orphaned' process that continued to run for a significant time (e.g., >5 minutes) after its parent process terminated or its associated user logged off?
  context: This question aims to find processes that have been deliberately detached from their parent session to ensure persistence. The logic involves correlating process termination events with their corresponding creation and parent termination events. If a child process outlives its parent or the user's session by a notable margin (e.g., 5 minutes), it's a strong indicator of an attempt to ignore termination signals. An allowlist for known-good system processes is crucial to reduce false positives.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4634
  - Authentication Servers
  - Domain Controllers
  - User Workstations
  - Remote Desktop (RDS) and Terminal Servers
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH process_termination_event (child):
        FIND child_creation_event to get ParentPID and LogonID
        FIND parent_termination_event or user_logoff_event (4634) for ParentPID/LogonID
        IF (child_termination_time - parent_termination_time) > 5 minutes AND child_process NOT IN allowlist:
          ALERT on orphaned process
- question: Is a process exhibiting an anomalously long lifespan after its parent process (e.g., 'explorer.exe') has terminated, compared to the normal behavior for that parent-child relationship?
  context: This question refines the search for orphaned processes by focusing on statistical deviation. Different parent processes (like 'explorer.exe' or 'svchost.exe') have different norms for how long their child processes run. By baselining the time delta between parent and child termination for specific parent process types, the system can identify when a particular child process lives for an unusually long time (e.g., exceeding the 99th percentile). This points to an anomalously long-lived process that warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4634
  - Authentication Servers
  - Domain Controllers
  - User Workstations
  - Remote Desktop (RDS) and Terminal Servers
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH parent_process_type (e.g., 'explorer.exe'):
        BASELINE distribution of (child_term_time - parent_term_time)
      FOR EACH new parent-child_termination_pair:
        IF (child_term_time - parent_term_time) > 99th_percentile_of_baseline:
          ALERT on anomalous orphan
- question: Is there a sudden, anomalous increase in the total number of active orphaned processes on a host, as predicted by a time series forecasting model?
  context: This question provides a host-level view of this evasive behavior. Instead of looking at individual orphans, it uses a time series model (like SARIMA or Prophet) to learn the normal rhythm and volume of orphaned processes on a given host over time. An alert is triggered when the actual count of orphaned processes in a time window (e.g., 15 minutes) significantly exceeds the model's prediction. This can indicate a large-scale event where an adversary is detaching multiple malicious processes at once.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4634
  - Authentication Servers
  - Domain Controllers
  - User Workstations
  - Remote Desktop (RDS) and Terminal Servers
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH host:
        MODEL count_of_orphaned_processes in 15-min intervals with time_series_forecast
      ALERT if observed_count > forecasted_confidence_interval
- question: Did a process, already flagged for ignoring interrupts, initiate a network connection to a known-malicious IP or domain shortly after it was created?
  context: This question elevates the priority of an alert by correlating suspicious process behavior with suspicious network behavior. If a process identified by other rules in this playbook (e.g., using 'nohup' or being orphaned) also makes an outbound connection to an IP or domain on a threat intelligence feed, the likelihood of malicious activity is extremely high. Correlating these events within a short time window (e.g., 5 minutes) creates a high-priority alert for immediate C2 channel investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network Egress Points
  - DNS Server Logs
  - Network Security Monitoring (NSM) sensors
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FIND processes flagged as ignoring_interrupts
      CORRELATE with network_connection_logs within 5 minutes of process_start
      IF destination_ip OR destination_domain IN (threat_intelligence_feed):
        TRIGGER high_priority_alert
- question: Is a process, flagged for ignoring interrupts, communicating with a statistically risky or anomalous domain (e.g., newly registered, high entropy)?
  context: This question helps identify potential C2 domains that are not yet on threat intelligence feeds. For a process already deemed suspicious, its network destinations are scrutinized. A risk score is calculated for each destination domain based on indicators of maliciousness like recent registration (domain age), high randomness in the name (subdomain entropy), and use of an uncommon top-level domain. Communication with a domain scoring in the top percentile of risk indicates a likely C2 channel.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network Egress Points
  - DNS Server Logs
  - Network Security Monitoring (NSM) sensors
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR EACH process flagged as ignoring_interrupts:
        ANALYZE its destination_domains
        CALCULATE risk_score (domain_age, entropy, suffix_prevalence)
        IF risk_score > 95th_percentile_of_all_new_domains:
          ALERT on suspicious C2 communication
- question: Using a graph-based model, is a process flagged for ignoring interrupts exhibiting anomalous network connection patterns compared to the learned baseline of normal behavior?
  context: This question uses a sophisticated graph-based model to understand the relationships between processes, IPs, and connection attributes. The model learns what 'normal' communication graphs look like (e.g., 'chrome.exe' connecting to many Google IPs). It can then identify anomalous edges in the graph, such as a suspicious 'powershell.exe' process making a long-duration, high-volume connection to a single, previously unseen IP address. This method is powerful for detecting novel C2 patterns that other methods might miss.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices
  - Network Egress Points
  - DNS Server Logs
  - Network Security Monitoring (NSM) sensors
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      BUILD graph of (processes, IPs, connections) with features
      TRAIN model on normal communication graph patterns
      ALERT on anomalous_edges, e.g., (suspicious_process -> new_ip) with unusual_connection_features