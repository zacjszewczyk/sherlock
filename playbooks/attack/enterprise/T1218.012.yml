name: T1218.012: Verclsid
id: 5a9b8c7d-1e2f-4a6b-8d9c-0f1a2b3c4d5e
description: This playbook addresses the adversary technique of abusing the Extension CLSID Verification Host (verclsid.exe) to proxy code execution and evade defenses. It provides investigative questions to detect this activity by identifying several key indicators of compromise. These indicators include the use of known-malicious or rare CLSIDs, verclsid.exe being spawned by an unusual parent process (e.g., an Office application or script interpreter), obfuscation in the parent's command line, anomalous network activity originating from or shortly after verclsid.exe execution, the creation of child processes by verclsid.exe, and the use of CLSIDs that are not registered on the host system.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any verclsid.exe processes being executed with a known-malicious Class ID (CLSID)?
  context: This question aims to detect the direct use of verclsid.exe with a CLSID that has already been identified as malicious by threat intelligence. A match provides a high-confidence indicator of compromise, as it shows an adversary is leveraging a known malicious COM object for execution.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers; Threat intelligence platforms providing CLSID-based indicators of compromise.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events WHERE process_name == "verclsid.exe"
      EXTRACT CLSID from command_line
      JOIN with threat_intelligence_watchlist on CLSID
      RETURN matching_events
- question: Have any verclsid.exe processes been executed with an unusually rare CLSID?
  context: This question focuses on identifying novel or rare CLSIDs used with verclsid.exe. Adversaries often use custom or newly created COM objects that will not appear in threat intelligence feeds immediately. Detecting rarity helps uncover these zero-day or targeted attack tools by flagging them as statistical outliers compared to common, legitimate CLSIDs.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers; Threat intelligence platforms providing CLSID-based indicators of compromise.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events WHERE process_name == "verclsid.exe"
      EXTRACT CLSID from command_line
      COUNT frequency of each CLSID across the environment
      RETURN events where CLSID_frequency < rarity_threshold
- question: Can machine learning models identify malicious verclsid.exe executions based on features like parent process, user context, and the invoked CLSID?
  context: This question explores a proactive, machine-learning-based approach. By training a model on known benign and malicious verclsid.exe executions, we can develop a system that automatically scores new, unseen events. This moves beyond simple signature or rarity checks to identify complex patterns indicative of malicious behavior.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers; Threat intelligence platforms providing CLSID-based indicators of compromise.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      INPUT: new verclsid.exe event with features (parent_process, user, host, CLSID)
      MODEL: pre-trained classification model
      SCORE event using model
      RETURN event if score > 0.9
- question: Is verclsid.exe being spawned by an anomalous parent process?
  context: Legitimate execution of verclsid.exe is typically initiated by system processes like explorer.exe or svchost.exe. When spawned by other processes, especially Office applications, command shells, or scripting engines, it is a strong indicator of malicious activity, such as a malicious macro or script attempting to proxy code execution.
  answer_sources:
  - Windows Event ID 4688
  - User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events WHERE child_process_name == "verclsid.exe"
      FILTER parent_process_name NOT IN ('explorer.exe', 'svchost.exe')
      RETURN events, especially where parent is Office app, shell, or script engine
- question: Are there new or previously unseen parent-child process relationships involving verclsid.exe for a specific user or host?
  context: This question seeks to identify anomalous behavior on a per-user or per-host basis. Even if a parent process like winword.exe is seen spawning verclsid.exe elsewhere, it may be highly anomalous for a specific user's typical activity. This helps detect targeted attacks or initial breaches on systems by flagging deviations from established individual baselines.
  answer_sources:
  - Windows Event ID 4688
  - User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events WHERE child_process_name == "verclsid.exe"
      FOR each user/host:
        COMPARE parent_process_name against historical baseline of parents for that user/host
        RETURN event if parent_process is new for that user/host
- question: Can an unsupervised model detect anomalous parent-child process relationships involving verclsid.exe?
  context: This question leverages unsupervised machine learning to find outliers without pre-defined rules. An Isolation Forest or similar model can learn the normal distribution of [Parent, Child, User, Host] tuples and flag any verclsid.exe creation event that deviates significantly from this learned norm, providing a flexible way to detect novel attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      INPUT: new event [Parent, 'verclsid.exe', User, Host]
      MODEL: pre-trained unsupervised anomaly detection model
      SCORE event using model
      RETURN event if identified as outlier
- question: Does the command line of the parent process that spawned verclsid.exe contain explicit malicious script content?
  context: This question looks for direct evidence of malicious intent within the parent process's command line. Adversaries often use command-line scripting to download and execute payloads. Searching for keywords like 'DownloadString', 'IEX', or URLs pointing to script files provides high-confidence evidence that the parent process is malicious and is using verclsid.exe as part of its execution chain.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints, particularly user workstations where malicious documents or scripts might be opened.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events WHERE child_process_name == "verclsid.exe"
      INSPECT parent_command_line for keywords like '.DownloadString', 'IEX', 'FromBase64String'
      RETURN events with keyword matches
- question: Does the command line of the parent process that spawned verclsid.exe exhibit high entropy?
  context: High entropy (randomness) in a command line is a classic sign of obfuscation. Adversaries use obfuscation to hide their malicious code from simple signature-based detections. By calculating the entropy of the parent's command line and alerting when it exceeds a baseline, we can detect likely attempts to conceal malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints, particularly user workstations where malicious documents or scripts might be opened.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events WHERE child_process_name == "verclsid.exe"
      CALCULATE Shannon entropy of parent_command_line
      RETURN events where entropy > threshold (e.g., 4.5)
- question: Can a sequence model or CNN classify the parent process command line as malicious?
  context: This question proposes using advanced deep learning models to analyze the raw text of the parent command line. Unlike simple keyword matching or entropy calculation, these models can learn the complex structures and character sequences that differentiate malicious commands from benign ones, allowing for more robust and accurate detection of sophisticated obfuscation techniques.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints, particularly user workstations where malicious documents or scripts might be opened.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      INPUT: parent_command_line text from verclsid.exe spawn event
      MODEL: pre-trained CNN or LSTM for malicious command classification
      CLASSIFY command_line using model
      RETURN event if classified as malicious
- question: Is a verclsid.exe process making any outbound network connections?
  context: The verclsid.exe process is a local verification host; it has no legitimate reason to initiate network connections. Any outbound network activity from this process is therefore inherently suspicious and a strong indicator that it has been compromised or is being used to proxy malicious C2 traffic or data exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and all Windows endpoints.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      CORRELATE process_creation_events (process_name == "verclsid.exe") with network_connection_logs
      JOIN on host_ip and timestamp (within 30 seconds)
      RETURN any correlated network connection from verclsid.exe
- question: If a network connection from verclsid.exe is detected, is the destination suspicious?
  context: This question adds enrichment to a network connection alert from verclsid.exe. While any connection is suspicious, one to a rare, newly registered, or low-reputation domain significantly increases the likelihood of malicious activity. This helps analysts prioritize alerts and understand the nature of the potential command and control (C2) channel.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and all Windows endpoints.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      ON verclsid.exe network alert:
      ENRICH destination_ip with DNS logs and threat intelligence
      CHECK for rare domain, new domain age, low reputation
      RETURN enriched alert with risk factors
- question: Can a graph-based model detect anomalous network connections from verclsid.exe?
  context: This question models system activity as a graph of processes and network endpoints. In this model, a legitimate verclsid.exe node should be an isolate with no network edges. A graph-based anomaly detection model would instantly flag the creation of an edge between a verclsid.exe node and any IP address node as a structural anomaly, representing a deviation from expected behavior.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, and all Windows endpoints.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      MODEL system activity as a graph of (process, ip_address) connections
      TRAIN a graph anomaly model on normal behavior
      FLAG any new edge connecting a 'verclsid.exe' node to an IP node
- question: Has a verclsid.exe process created any child processes?
  context: The sole purpose of verclsid.exe is to verify shell extension class identifiers. It should never spawn child processes. Any instance of verclsid.exe acting as a parent process is a high-fidelity indicator of compromise, suggesting it is being used to launch a subsequent stage of an attack.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE parent_process_name == "verclsid.exe"
      RETURN all matching events
- question: How can we prioritize alerts for child processes spawned by verclsid.exe?
  context: While any child process from verclsid.exe is an alert, not all are equally critical. This question focuses on risk-scoring the resulting alert. A child process that is rare, has a high-entropy command line, or makes network connections should be prioritized for immediate investigation over a more common process like cmd.exe, as it is more likely to be the core malicious payload.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      ON alert for verclsid.exe spawning a child:
      CALCULATE risk score for the child process based on its own properties (rarity, command line, network activity)
      PRIORITIZE alert based on score
- question: Can a simple decision tree model be used to detect child process creation by verclsid.exe?
  context: This question frames the detection of a verclsid.exe child process as a simple, interpretable machine learning problem. A decision tree trained on process creation events would quickly learn a single, powerful rule: if a process's parent is 'verclsid.exe', classify it as malicious. This provides a formal, model-based approach to codify this high-confidence detection logic.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      MODEL: decision tree on process creation events
      FEATURE: ParentProcessName
      LABEL: 'malicious' if ParentProcessName == 'verclsid.exe'
      DEPLOY model for automated detection
- question: Is verclsid.exe being executed with a CLSID that is not present in the host's registry?
  context: This question aims to detect the use of phantom or in-memory COM objects. If verclsid.exe is called to verify a CLSID that doesn't exist in the registry, it suggests the adversary has manipulated the process in memory to load their malicious code without leaving a persistent trace on disk or in the registry, a common stealth technique.
  answer_sources:
  - Windows Event ID 4688
  - EDR Registry Query Logs
  - The Windows Registry on all endpoints and servers; Centralized log repository containing historical process execution data.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      ON verclsid.exe execution with CLSID argument:
      TRIGGER remote query to host's registry for HKEY_CLASSES_ROOT\CLSID\{CLSID}
      RETURN alert if registry key does not exist
- question: Has verclsid.exe been invoked with a CLSID never before seen in the environment?
  context: This question focuses on identifying novelty at an enterprise level. By maintaining a historical set of all CLSIDs ever used with verclsid.exe, any execution involving a 'first seen' CLSID can be flagged. This is a powerful threat hunting technique to uncover new attack campaigns or tools as soon as they are introduced into the environment.
  answer_sources:
  - Windows Event ID 4688
  - EDR Registry Query Logs
  - The Windows Registry on all endpoints and servers; Centralized log repository containing historical process execution data.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      ON verclsid.exe execution with CLSID:
      LOOKUP CLSID in historical set of all seen CLSIDs
      RETURN alert if CLSID is not in the set
- question: Has there been an anomalous spike in the number of 'first seen' CLSIDs across the enterprise?
  context: This question uses time-series analysis to monitor the health of the entire environment. A sudden increase in the daily count of new CLSIDs being introduced could signal a widespread, coordinated attack campaign. A time-series model can automatically detect such a spike, distinguishing it from normal fluctuations and enabling a proactive, large-scale threat hunt.
  answer_sources:
  - Windows Event ID 4688
  - EDR Registry Query Logs
  - The Windows Registry on all endpoints and servers; Centralized log repository containing historical process execution data.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      MONITOR daily count of 'first seen' CLSIDs
      APPLY time-series anomaly detection model (e.g., ARIMA)
      RETURN alert if an anomalous spike is detected in the daily count