name: T1218.012: Verclsid
id: 6a2c8e3d-9d4b-4b8f-8e4a-1c9f2d7b6a0c
description: This playbook investigates the abuse of the Extension CLSID Verification Host (verclsid.exe) to proxy code execution and evade defenses. Adversaries may use this signed Windows binary to execute malicious code via COM objects. The investigation focuses on identifying verclsid.exe executions involving known-malicious or rare CLSIDs, anomalous parent processes (e.g., Office applications, script interpreters), obfuscated parent command lines, suspicious network connections, child process creation, and the use of unregistered CLSIDs.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is verclsid.exe being executed with a command-line argument containing a known-malicious Class ID (CLSID)?
    context: This question aims to detect the most direct form of verclsid.exe abuse, where an adversary uses a pre-identified malicious COM object to execute code. By comparing the CLSID from the command line against a threat intelligence watchlist, analysts can quickly identify known threats. A match is a high-fidelity indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Threat intelligence platforms providing CLSID-based indicators of compromise.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ProcessName == 'verclsid.exe'. EXTRACT CLSID from CommandLine. JOIN CLSID with ThreatIntel_Malicious_CLSID_Watchlist. ALERT on match."
  - question: Has verclsid.exe been executed with a statistically rare or uncommon CLSID within the environment?
    context: Adversaries often introduce new or custom COM objects to bypass signature-based detections. This question focuses on identifying these novel objects by looking for rarity. A CLSID that has been seen very few times (or never before) across the entire organization is suspicious, as it deviates from established software norms and could represent a newly deployed malicious tool.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ProcessName == 'verclsid.exe'. EXTRACT CLSID from CommandLine. CALCULATE frequency of each CLSID across all hosts. ALERT if CLSID frequency is below a defined rarity threshold (e.g., < 5)."
  - question: Can machine learning models classify verclsid.exe execution events as malicious based on features like parent process, user context, and the invoked CLSID?
    context: This question explores using advanced analytics to move beyond simple rule-based detection. By training a machine learning model on various contextual features (parent process, user, host, command-line properties), it's possible to identify complex, non-obvious patterns of malicious behavior that might not trigger specific rules. This provides a probabilistic assessment of risk for each execution.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers.
    range: last 90 days
    queries:
      - "INPUT: Labeled dataset of verclsid.exe executions (benign/malicious). FEATURES: ParentProcessName, ParentCommandLineEntropy, User, Host, CLSID. MODEL: Train Random Forest classifier. PREDICT: Score new verclsid.exe events in real-time. ALERT if prediction_score > 0.9."
  - question: Is verclsid.exe being spawned by an unusual or unauthorized parent process?
    context: Legitimate execution of verclsid.exe is typically initiated by a small set of system processes like `explorer.exe` or `svchost.exe`. Adversaries often launch it from other processes, such as Microsoft Office applications during a macro-based attack or from scripting engines like `powershell.exe`. This question identifies such anomalous parent-child relationships, which are strong indicators of defense evasion.
    answer_sources:
      - Windows Event ID 4688
      - User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ChildProcessName == 'verclsid.exe'. CHECK if ParentProcessName is NOT IN ('explorer.exe', 'svchost.exe'). ALERT on mismatch, especially for parents like 'winword.exe', 'excel.exe', 'powershell.exe'."
  - question: Has a new parent-child process relationship involving verclsid.exe appeared for a specific user or host for the first time?
    context: This question moves from a global allowlist to user- and host-specific behavioral baselining. Even if a parent process is generally legitimate, its appearance spawning `verclsid.exe` for a particular user or on a specific server where it has never done so before is anomalous. This helps detect targeted attacks or lateral movement where an adversary's actions deviate from an established user/host profile.
    answer_sources:
      - Windows Event ID 4688
      - User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ChildProcessName == 'verclsid.exe'. BUILD historical baseline of (ParentProcessName, User, Host) tuples. ALERT if a new (ParentProcessName, User, Host) tuple is observed for the first time."
  - question: Can an unsupervised anomaly detection model identify verclsid.exe process creation events that are outliers compared to historical activity?
    context: This question leverages machine learning to automatically learn what 'normal' process creation behavior looks like without pre-defined rules or labels. An Isolation Forest or similar model can analyze multiple dimensions (parent, child, user, host) simultaneously to find events that are 'different' from the vast majority of historical data. This is effective for finding unknown-unknowns, where the attack vector doesn't match any pre-conceived pattern.
    answer_sources:
      - Windows Event ID 4688
      - User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.
    range: last 90 days
    queries:
      - "INPUT: Historical process creation data. FEATURES: ParentProcessName, ChildProcessName, User, Host. MODEL: Train Isolation Forest. PREDICT: Score new verclsid.exe creation events. ALERT on events identified as outliers/anomalies."
  - question: Does the command line of the parent process that spawned verclsid.exe contain suspicious keywords or patterns indicative of malicious scripting?
    context: Adversaries often use scripting to launch other processes as part of their execution chain. This question looks for tell-tale signs of malicious activity within the parent's command line, such as commands to download and execute code (`DownloadString`, `IEX`), decode Base64 strings, or access suspicious file types. Finding these patterns provides strong evidence that the `verclsid.exe` execution is part of a malicious script.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints, particularly user workstations where malicious documents or scripts might be opened.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ChildProcessName == 'verclsid.exe'. GET ParentProcessCommandLine. REGEX_MATCH ParentProcessCommandLine for patterns like '.DownloadString', 'IEX', 'FromBase64String'. ALERT on match."
  - question: Does the command line of the parent process of verclsid.exe exhibit unusually high character entropy, suggesting obfuscation?
    context: To evade keyword-based detections, attackers often obfuscate their command-line scripts. This obfuscation typically increases the randomness or entropy of the character string. This question aims to detect such obfuscation by measuring the Shannon entropy of the parent's command line. A significantly high entropy score, especially for common script interpreters like `powershell.exe`, is a strong indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ChildProcessName == 'verclsid.exe'. GET ParentProcessCommandLine. CALCULATE Shannon entropy of ParentProcessCommandLine. ALERT if entropy > threshold (e.g., 4.5) or is a statistical outlier for that ParentProcessName."
  - question: Can a deep learning model classify the parent command line of a verclsid.exe execution as malicious?
    context: This question proposes using advanced deep learning models (like CNNs or LSTMs) that can learn the subtle, character-level and structural patterns of malicious command lines without relying on specific keywords or entropy scores. These models can be more robust against novel obfuscation techniques and provide a sophisticated method for classifying command-line intent.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints.
    range: last 90 days
    queries:
      - "INPUT: Labeled dataset of malicious/benign command lines. MODEL: Train a character-level CNN/LSTM classifier. PREDICT: For new verclsid.exe events, classify the ParentProcessCommandLine. ALERT if classified as malicious with high confidence."
  - question: Did a verclsid.exe process make an outbound network connection, or did its host make a connection shortly after its execution?
    context: `verclsid.exe` is a local verification host and has no legitimate reason to initiate network connections. This question seeks to identify this highly anomalous behavior. Correlating the process execution time with network logs from the same host is a high-fidelity detection method for identifying when `verclsid.exe` is being used to proxy network communication, likely for command and control (C2) or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, and all Windows endpoints.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ProcessName == 'verclsid.exe'. JOIN with Network:Connection logs on HostIP within 30 seconds of process creation. ALERT on any join."
  - question: If a network connection related to verclsid.exe is found, does the destination appear suspicious (e.g., rare, newly registered, or low reputation)?
    context: Following up on a network connection, this question adds crucial context to help an analyst prioritize the alert. A connection to a known-good domain is less concerning than a connection to a randomly generated domain name registered yesterday. By enriching the connection data with domain age, prevalence, and threat intelligence reputation, analysts can quickly assess the likely risk of the C2 channel.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, and all Windows endpoints.
    range: last 90 days
    queries:
      - "ON ALERT from previous question: GET DestinationIP. LOOKUP domain in DNS logs. QUERY threat intelligence for domain reputation, age, and enterprise-wide prevalence. ADD enrichment data to alert. INCREASE severity for rare, new, or low-reputation domains."
  - question: Can a graph-based anomaly detection model identify network connections from verclsid.exe as a structural anomaly?
    context: This question reframes the detection problem using graph theory. In a graph of normal process-to-network communications, `verclsid.exe` nodes should be 'isolates' with no network edges. A graph-based model can learn this structure. The appearance of an edge connecting `verclsid.exe` to any IP address would be a clear structural anomaly, providing a mathematically rigorous way to detect this illicit behavior.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Network egress points, DNS resolvers, and all Windows endpoints.
    range: last 90 days
    queries:
      - "MODEL: Construct a bipartite graph of (Process, RemoteIP) connections. Train a graph anomaly model (e.g., GraphSAGE). PREDICT: Score new edges. ALERT if an edge is created involving a 'verclsid.exe' node, as it is a structural anomaly."
  - question: Has verclsid.exe spawned any child processes?
    context: The legitimate function of `verclsid.exe` is to verify shell extensions; it should not be creating other processes. This question targets the highly suspicious behavior of `verclsid.exe` acting as a parent process. Any instance of this is a strong indicator of compromise, suggesting an adversary is using it to launch the next stage of an attack, such as a command shell or malware payload.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers.
    range: last 90 days
    queries:
      - "SEARCH Process:Create Events WHERE ParentProcessName == 'verclsid.exe'. ALERT on any match."
  - question: If verclsid.exe creates a child process, what is the risk profile of that child process?
    context: While any child process is an alert, not all are equally urgent. This question focuses on automatically prioritizing the investigation. A child process that is itself rare, has an obfuscated command line, or is known to make network connections should be investigated immediately. This helps analysts focus on the highest-risk events first in a potential flood of alerts.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers.
    range: last 90 days
    queries:
      - "ON ALERT from previous question: GET ChildProcessName and ChildCommandLine. CALCULATE risk score based on ChildProcess prevalence, CommandLine entropy, and known network behavior. PRIORITIZE alert based on score."
  - question: Can a simple decision tree model be used to automatically classify any process with verclsid.exe as its parent as malicious?
    context: This question highlights the simplicity and high fidelity of this specific detection. Because `verclsid.exe` should never have a child process, this can be modeled as a very simple, interpretable rule. Using a decision tree is a formal way to represent this logic (`ParentProcessName == 'verclsid.exe' -> Malicious`), making it easy to implement and justify in an automated detection system.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers.
    range: last 90 days
    queries:
      - "MODEL: Train a decision tree on Process:Create events. FEATURE: ParentProcessName. LABEL: Malicious if ParentProcessName == 'verclsid.exe'. DEPLOY: The resulting rule will automatically flag any such event."
  - question: Was verclsid.exe executed with a CLSID that is not registered on the local machine?
    context: For `verclsid.exe` to legitimately verify a COM object, that object's CLSID must be present in the Windows Registry. This question seeks to find cases where this is not true. An unregistered CLSID suggests the use of a 'phantom' COM object or an in-memory-only payload, which are advanced techniques for evading file-based and registry-based detections. This requires an active response (querying the live registry) to confirm.
    answer_sources:
      - Windows Event ID 4688
      - EDR Registry Query Logs
      - The Windows Registry on all endpoints and servers.
    range: last 90 days
    queries:
      - "ON `verclsid.exe` execution: EXTRACT CLSID from command line. TRIGGER EDR query on host for registry key `HKCR\\CLSID\\{CLSID}`. ALERT if key does not exist."
  - question: Has a CLSID been used with verclsid.exe that has never been seen before anywhere in the enterprise?
    context: This question applies the concept of rarity at an enterprise-wide, historical level. By checking against a historical database of all CLSIDs ever seen, this method can spot the absolute first time a new COM object is invoked via `verclsid.exe`. This is a powerful technique for identifying the entry point of a new campaign or tool.
    answer_sources:
      - Windows Event ID 4688
      - Centralized log repository containing historical process execution data.
    range: last 90 days
    queries:
      - "ON `verclsid.exe` execution: EXTRACT CLSID from command line. LOOKUP CLSID in historical, enterprise-wide set of all seen CLSIDs. ALERT if CLSID is not in the set."
  - question: Has there been an anomalous spike in the number of 'first seen' CLSIDs being used with verclsid.exe across the enterprise?
    context: This question elevates the 'first seen' analysis from an individual event to a trend. A single 'first seen' CLSID might be a one-off event, but a sudden surge in the *number* of new, distinct CLSIDs appearing in a short time frame is a strong indicator of a widespread, coordinated attack campaign. A time-series model can automatically detect such spikes against the normal background noise of software updates.
    answer_sources:
      - Windows Event ID 4688
      - Centralized log repository containing historical process execution data.
    range: last 90 days
    queries:
      - "CALCULATE daily count of 'first seen' CLSIDs from the previous query. INPUT this time-series data into an anomaly detection model (e.g., ARIMA). ALERT if the model flags a day's count as an anomalous spike."