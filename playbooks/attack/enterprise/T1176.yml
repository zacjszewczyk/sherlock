name: T1176: Software Extensions
id: d2a1b3c4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: Is the adversary maintaining persistence using malicious or abused software extensions? This playbook helps investigate this by looking for several key indicators: browser processes making suspicious network connections to C2 servers, identified through threat intelligence, statistical rarity, or DGA patterns; browsers being launched with command-line arguments to load unpacked extensions from non-standard directories; unauthorized processes accessing sensitive browser data files like credentials or cookies; network traffic from browsers exhibiting C2 characteristics like beaconing or communication with newly registered domains; and the temporal correlation of a new extension installation with other persistence mechanisms like new services or scheduled tasks.
type: technique
related:
- TA0003: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can I detect if a browser process is connecting to a known command-and-control server by correlating process creation and network logs?
  context: This question aims to identify definitive malicious activity by cross-referencing outbound browser connections with high-confidence threat intelligence. A match indicates a likely compromise via a malicious extension communicating with its C2 infrastructure. This is a high-fidelity indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Windows Event ID 4688
  - Endpoint devices, Network egress points, DNS resolvers, SIEM/Data Lake
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process_creation_logs (EventID=4688) where process_name is a browser
      JOIN network_connection_logs (Zeek conn.log, Zeek dns.log) ON hostname
      WHERE destination_ip OR resolved_domain IN threat_intel_feed(type='C2')
      RETURN hostname, process_name, destination_ip, domain
- question: How can I statistically identify anomalous browser connections that might indicate a malicious extension, even without prior threat intelligence?
  context: This question uses statistical methods to find outliers. It hunts for browsers communicating with destinations that are extremely rare across the enterprise, which could be newly stood-up C2 servers. It also checks for significant shifts in a user's browsing behavior by comparing current domains to their historical baseline, flagging potential session hijacking or redirection by a malicious extension.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Windows Event ID 4688
  - Endpoint devices, Network egress points, DNS resolvers, SIEM/Data Lake
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      // Query 1: Find rare destination IPs
      SEARCH network_logs (Zeek conn.log) over last 30 days
      GROUP BY destination_ip, COUNT(DISTINCT hostname) as host_count
      FILTER host_count < (total_enterprise_hosts * 0.0001)
      RETURN destination_ip, host_count

      // Query 2: Jaccard Similarity for user browsing behavior
      DEFINE historical_domains = SEARCH dns_logs (last 90 days) for a given user
      DEFINE current_domains = SEARCH dns_logs (today) for the same user
      CALCULATE jaccard_similarity(historical_domains, current_domains)
      IF similarity_score < 0.5 THEN ALERT
- question: Can a machine learning model be used to detect browser-initiated DNS queries to algorithmically generated domains (DGAs), which are a hallmark of C2 communication?
  context: This question applies Natural Language Processing (NLP) to proactively identify malicious domains that might not yet be on any threat intelligence feed. Malicious extensions often use DGAs to make their C2 infrastructure resilient. Detecting these patterns in real-time provides an early warning of a potential compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Windows Event ID 4688
  - Endpoint devices, Network egress points, DNS resolvers, SIEM/Data Lake
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      STREAM dns_logs (Zeek dns.log)
      WHERE source_process is a browser
      PIPE query_name to nlp_dga_classifier_model
      IF model_confidence > 0.9 AND classification == 'DGA'
      THEN ALERT
- question: How can I detect if a browser is being launched with command-line flags to load an unpacked extension from a suspicious, user-writable directory?
  context: This is a direct detection for a known adversary technique. Developers use these flags for legitimate testing, but in a typical enterprise environment, seeing a browser load an extension from a temporary or public folder is highly suspicious and often indicates a malicious payload being sideloaded.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations, servers)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process_creation_logs (EventID IN [4688, 1])
      WHERE process_name IN [chrome.exe, msedge.exe, firefox.exe]
      AND command_line CONTAINS ('--load-extension=' OR '--user-data-dir=')
      AND path_argument IN [%TEMP%, %APPDATA%\..\LocalLow, C:\Users\Public]
      THEN ALERT
- question: How can I statistically identify unusual parent-child process relationships where a non-standard process (like Word or PowerShell) launches a browser with extension-loading flags?
  context: This question aims to find anomalies in how browsers are started. Normally, a user or the OS (explorer.exe) launches a browser. If a document (winword.exe) or a script (powershell.exe) launches a browser and instructs it to load an extension, it's a strong indicator of a malicious document or script trying to establish persistence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations, servers)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process_creation_logs (EventID IN [4688, 1])
      WHERE child_process_name IN [chrome.exe, msedge.exe, firefox.exe]
      AND command_line CONTAINS ('--load-extension=')
      CALCULATE rarity_of(parent_process, child_process) across enterprise
      IF rarity < 1st_percentile AND parent_process NOT IN [explorer.exe]
      THEN ALERT
- question: Can a machine learning model be trained to score browser launch events and identify those with a high probability of being a malicious extension sideloading attempt?
  context: This question proposes a more sophisticated, model-based approach to analyzing command-line arguments. By learning the characteristics of normal browser launches, the model can flag events with unusual combinations of features (e.g., high argument count, high entropy paths) that might not be caught by simple string matching, providing a more robust detection method.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations, servers)
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      STREAM process_creation_events (EventID IN [4688, 1])
      WHERE process_name IN [chrome.exe, msedge.exe, firefox.exe]
      EXTRACT_FEATURES(command_line) including count, length, path entropy, keywords
      SCORE with classification_model(type='Random Forest')
      IF score > malicious_threshold
      THEN ALERT
- question: How can I detect if a non-browser process is accessing sensitive browser files like 'Login Data' or 'Cookies'?
  context: This question focuses on protecting credential and session data stored by browsers. Legitimate access is limited to the browser itself and a few known tools. By deploying file access auditing and creating an allowlist, an analyst can quickly identify unauthorized processes (like malware or scripts) attempting to steal this sensitive information.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 10
  - Endpoint devices, File servers hosting roaming user profiles
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH file_access_logs (EventID=4663) OR process_access_logs (Sysmon EID=10)
      WHERE target_file IN ['Login Data', 'Cookies']
      AND process_name NOT IN [chrome.exe, software_reporter_tool.exe, legitimate_updaters]
      THEN ALERT
- question: How can I use statistical entropy to detect an anomalous number of processes accessing key browser data files?
  context: This question provides a statistical method to find abnormal access patterns without maintaining a strict allowlist. A sudden spike in the variety (entropy) of processes accessing a file like 'Login Data' suggests that multiple unauthorized tools or scripts may be active on the host, which is a strong signal of a broader compromise.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 10
  - Endpoint devices, File servers hosting roaming user profiles
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH file_access_logs (EventID=4663) for target_file='Login Data'
      AGGREGATE by host over 24-hour windows
      CALCULATE shannon_entropy of accessing_process_names
      COMPARE to historical mean and standard deviation for that host
      IF current_entropy > (mean + 3 * std_dev)
      THEN ALERT
- question: Can an anomaly detection model identify suspicious access patterns to sensitive browser files?
  context: This question proposes using an unsupervised machine learning model to find highly unusual file access events that might indicate theft. By training on features like process name, file path, access type, and time of day, an Isolation Forest can learn what normal activity looks like and flag deviations, such as a script accessing the cookie database in the middle of the night.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 10
  - Endpoint devices, File servers hosting roaming user profiles
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      STREAM file_access_events (EventID=4663)
      EXTRACT_FEATURES(process_name, file_path, access_type, time_of_day)
      SCORE with anomaly_detection_model(type='Isolation Forest')
      IF anomaly_score is high
      THEN ALERT
- question: How can I detect browser network connections that are indicative of C2 communication using symbolic rules?
  context: This question focuses on creating simple, high-fidelity rules to detect suspicious network behavior from browsers. It specifically looks for connections to domains registered very recently (a common tactic for attackers) or connections over non-standard web ports, both of which are atypical for normal browsing and may indicate C2 activity from a malicious extension.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek weird.log
  - Network egress points, Web proxies, DNS servers, SIEM/Data Lake
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      // Query 1: Recently Registered Domains
      SEARCH dns_logs (Zeek dns.log)
      ENRICH with WHOIS data
      IF domain_registration_date < 30 days ago THEN ALERT

      // Query 2: Non-Standard Ports
      SEARCH connection_logs (Zeek conn.log) where process is a browser
      IF destination_port NOT IN [80, 443] AND service is not known-good
      THEN ALERT
- question: How can I statistically identify C2 beaconing or high-entropy domains generated by a browser?
  context: This question uses statistical analysis of network logs to find two common C2 patterns. High entropy in domain names can indicate the use of DGAs. Highly periodic, repetitive connections (beaconing) with a low standard deviation in their time intervals are a classic sign of a malware implant checking in with its C2 server.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek weird.log
  - Network egress points, Web proxies, DNS servers, SIEM/Data Lake
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      // Query 1: High Entropy Domains
      SEARCH dns_logs (Zeek dns.log) from browsers per host over 5-min windows
      CALCULATE shannon_entropy of requested domain names
      IF entropy_score > 95th_percentile_of_enterprise_baseline THEN ALERT

      // Query 2: Beaconing Detection
      SEARCH connection_logs (Zeek conn.log)
      GROUP BY src_ip, dest_ip
      CALCULATE standard_deviation of time delta between connections
      IF std_dev is near zero for >= 5 connections THEN ALERT
- question: Can a time-series anomaly detection model identify deviations from a host's normal network traffic patterns?
  context: This question proposes a sophisticated machine learning approach to detect C2 activity by modeling the 'rhythm' of a host's network traffic over time. A model like an LSTM Autoencoder can learn a host's baseline patterns (e.g., bytes in/out, connection counts per minute) and flag time windows where the activity significantly deviates, indicating a possible new C2 channel.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Zeek weird.log
  - Network egress points, Web proxies, DNS servers, SIEM/Data Lake
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      AGGREGATE network traffic features (bytes_out, bytes_in, conn_count) per host per minute
      INPUT time-series data into LSTM_Autoencoder_model
      CALCULATE reconstruction_error for current activity
      IF reconstruction_error is high (exceeds trained threshold)
      THEN ALERT
- question: How can I create a rule to detect when a new browser extension installation is immediately followed by a common persistence event?
  context: This question seeks to link the installation of a potentially malicious extension directly to a subsequent persistence action. An alert that fires when a file is created in an extension directory, and is then followed within minutes by a new service, scheduled task, or registry run key modification on the same host, provides strong, contextualized evidence of a successful attack.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 7045
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Endpoint devices, Active Directory domain controllers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH for file_creation (Sysmon EID=11) in browser extension paths
      WITHIN 10 minutes on the same host, SEARCH for
        new_service (EID=7045) OR
        new_scheduled_task (EID=4698) OR
        registry_autorun_modification (EID=4657)
      IF both events found, THEN ALERT
- question: Is the statistical association between a new extension installation and a new persistence mechanism significant enough to warrant an alert?
  context: This question uses statistical testing to determine if the act of installing an extension and the act of creating a persistence mechanism are happening together more often than they would by pure chance. A statistically significant association (a low p-value from a chi-squared test) suggests a causal link and can be used as a reliable detection signal.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 7045
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Endpoint devices, Active Directory domain controllers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CALCULATE P(PersistenceEvent | ExtensionInstallEvent in last hour)
      CALCULATE P(PersistenceEvent) and P(ExtensionInstallEvent) as independent baseline frequencies
      PERFORM chi-squared test on observed vs. expected frequencies
      IF p_value < 0.01
      THEN ALERT
- question: Can a sequence analysis model learn normal post-extension-install behavior and flag deviations that include persistence events?
  context: This question proposes using machine learning to understand the common, benign sequences of system events that follow a legitimate extension installation (e.g., browser restart, log file writes). By modeling these normal sequences, the system can then flag any installation that is followed by a rare or anomalous sequence, especially one that includes a known persistence event like 'Schtasks-Create'.
  answer_sources:
  - Sysmon Event ID 11
  - Windows Event ID 7045
  - Windows Event ID 4698
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Endpoint devices, Active Directory domain controllers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      STREAM host events into a sequence analysis model
      DEFINE event items like 'extension_install', 'new_service', 'schtasks_create'
      LEARN frequent benign sequences post-'extension_install'
      IF a new sequence deviates from learned patterns OR contains a rare transition to a persistence event
      THEN ALERT