name: T1611: Escape to Host
id: d8b5b6a0-5c1d-4e9f-8a2b-1c4d9e0f3b7c
description: This playbook helps investigate whether an adversary has escalated privileges by escaping from a container or virtualized environment to the underlying host. This involves looking for indicators such as the creation of suspicious processes on the host by container-related processes, file writes to sensitive host paths followed by execution, direct process creation on the host by container runtimes, suspicious commands sent to the Docker control socket, access to host files or registry keys outside of defined volumes, and outbound network connections from processes suspected of being part of an escape.
type: technique
related:
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process being created on a container host that matches a known container escape tool or malware?
  context: This question seeks to identify the direct execution of a known container escape tool. Adversaries often use publicly available or custom tools to exploit vulnerabilities and break out of a container. By comparing the name or file hash of newly created processes on a container host against a threat intelligence feed of known escape tools, analysts can detect this activity. A match is a strong indicator of an escape attempt, especially when the parent process is a container-related service.
  answer_sources:
  - Windows Event ID 4688
  - Container host server process execution logs and file systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (e.g., WinEventID:4688)
      WHERE device_is_container_host
      AND (process_name IN (known_escape_tools) OR process_hash IN (known_escape_tool_hashes))
      RETURN process_name, command_line, parent_process_name, timestamp
- question: Is a process being created on a container host with an unusually high command-line entropy?
  context: This question aims to detect obfuscated commands that adversaries use to evade signature-based detection during a container escape. A command-line's Shannon entropy score measures its randomness; a score that significantly exceeds the host's established baseline suggests obfuscation. This analytic can flag potentially malicious activity even if the tool itself is unknown.
  answer_sources:
  - Windows Event ID 4688
  - Container host server process execution logs and file systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event ON container_hosts
      CALCULATE entropy(command_line)
      ALERT if entropy > 95th_percentile_baseline(host)
- question: Can machine learning models identify malicious process creation events indicative of a container escape?
  context: This question explores using a machine learning model to proactively identify suspicious process creation events that may not match known signatures. By training a classifier (e.g., Random Forest) on features like parent process name, command-line length, and entropy, the model can score new process events and flag those classified as malicious with high confidence, providing a more dynamic detection capability.
  answer_sources:
  - Windows Event ID 4688
  - Container host server process execution logs and file systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY ML_model(process_features) TO process_creation_events ON container_hosts
      ALERT if prediction is 'malicious' with high_confidence
- question: Has a file written by a containerized process to a sensitive host path been executed shortly after?
  context: This question detects a common 'write-then-execute' pattern. An adversary may escape a container to write a malicious payload to a sensitive host directory (e.g., C:\Windows\System32) and then immediately execute it. Correlating a file write event from a containerized process with a process execution event of that same file within a short time window (e.g., 60 seconds) is a high-fidelity indicator of a successful breakout.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Container host server file system and process audit logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE file_write_events (from_container_process to sensitive_host_path)
      WITH process_creation_events (for same_path)
      WHERE time_difference < 60_seconds
- question: Is a containerized process writing to an unusual or never-before-seen file path on the host?
  context: This question uses behavioral baselining to spot anomalous file activity. Normal container operations typically write to a predictable set of paths. When a containerized process writes to a host file path that is statistically rare or has never been observed for that specific container image, it suggests a deviation from normal behavior that could indicate a container escape.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Container host server file system and process audit logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE file_write_paths per container_image
      ALERT if new_write_event from container_process has path_frequency < 0.1% for that image
- question: Are there new and infrequent sequences of file writes followed by process executions originating from a container?
  context: This question applies sequence analysis to detect anomalous chains of events. Benign software often follows predictable sequences of actions (e.g., write to temp, execute from temp). By mining event logs to learn these normal sequences, we can flag any new, rare sequence that involves a container writing to a host path and that file then being executed, as it breaks the established pattern and may signal malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Container host server file system and process audit logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MINE event_logs for common (file_write, process_execute) sequences
      ALERT on new, infrequent sequences where write originates from container_process to host_path
- question: Is a process on the host being created directly by a container runtime or shim process?
  context: This question looks for direct evidence of a container runtime being manipulated to spawn a process on the host. Normally, container runtimes (e.g., 'containerd-shim-runc-v2.exe', 'dockerd.exe') manage processes within the container's isolated environment. If one of these runtimes becomes the direct parent of a host process like 'powershell.exe' or 'cmd.exe', it strongly indicates that the isolation has been broken.
  answer_sources:
  - Windows Event ID 4688
  - Process creation logs on all container hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (e.g., WinEventID:4688)
      WHERE parent_process_name IN (container_runtimes)
      AND process_name IN (host_shells_or_utilities)
- question: Are there new parent-child process relationships involving container-related processes on the host?
  context: This question focuses on identifying anomalous parent-child process relationships as an indicator of an escape. By building a baseline of all normal parent-child process pairs on container hosts, any newly observed pair where the parent is a container runtime or service and the child is a host process can be flagged as a potential threat.
  answer_sources:
  - Windows Event ID 4688
  - Process creation logs on all container hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE (parent_process, child_process) pairs on container_hosts
      ALERT on new pair where parent_process is container-related
- question: Does graph analysis reveal a new connection from a container sub-graph to a host process sub-graph?
  context: This question uses graph-based anomaly detection to visualize and detect a container escape. The process execution history of a host can be modeled as a graph. A container escape would manifest as a new edge connecting a node within the 'container' sub-graph to a node representing a sensitive 'host' process. This structural anomaly is a strong indicator of a breakout.
  answer_sources:
  - Windows Event ID 4688
  - Process creation logs on all container hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL process_history as graph
      DETECT new edges from container_process_nodes to host_process_nodes
- question: Is a suspicious Docker command being executed shortly after a container connects to the Docker control socket?
  context: This question aims to detect the abuse of the Docker control socket/pipe from within a compromised container. An adversary may connect to the pipe (e.g., `\\.\pipe\docker_engine`) and then issue a `docker` command with high-risk flags like `--privileged` or `-v /:/host` to create a new, fully privileged container or mount the host's filesystem. Correlating the network connection with the subsequent command is key.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Container hosts, specifically monitoring process command-lines and network connections to the container daemon
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE network_connection_events (to docker_pipe from container)
      WITH process_creation_events (for 'docker.exe' with privileged_flags)
      WITHIN a short time window
- question: Are there any Docker commands being run with statistically rare or novel arguments?
  context: This question uses baselining to detect anomalous Docker command usage. While administrators use Docker commands for legitimate purposes, an adversary's command might use an unusual combination of flags or mount a path that is not typical for the environment. By profiling the frequency of command arguments, especially for `docker run`, any command with a near-zero frequency can be flagged as suspicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Container hosts, specifically monitoring process command-lines and network connections to the container daemon
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE docker command arguments and their frequencies
      ALERT on 'docker run' command with rare or new '-v' mounts or other flags
- question: Can an NLP model detect anomalous Docker command-line structures?
  context: This question leverages Natural Language Processing (NLP) to identify malicious Docker commands that are structurally different from benign ones. By training a model on the syntax and structure of normal administrative `docker.exe` commands, it can flag new command lines that are dissimilar or use arguments in a novel way, potentially indicating an attempt to chain options for a malicious purpose.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Zeek conn.log
  - Container hosts, specifically monitoring process command-lines and network connections to the container daemon
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN NLP model on benign 'docker.exe' command_lines
      APPLY model to new command_lines and ALERT on structural anomalies
- question: Is a containerized process accessing a host file or registry key that is outside its defined volumes?
  context: This question checks for violations of container isolation boundaries. Containers are meant to be restricted to their own filesystem and any explicitly mounted volumes. If a process identified as being containerized is observed accessing or modifying a file or registry key on the host that is not part of a configured mount, it is a clear sign that the process has escaped its intended sandbox.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Windows Event ID 4688
  - File integrity monitoring (FIM) and registry audit logs on container hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each file/registry access event
      IF process is containerized AND target_path is not in container's mounted_volumes
      THEN ALERT
- question: Is a containerized process accessing file paths or registry keys not in its historical baseline?
  context: This question uses behavioral profiling to detect anomalous access patterns. By building a baseline of all file paths and registry keys that a specific container image normally accesses, any access to a path or key outside of this baseline can be flagged as an anomaly. This can detect an escape even if the path is not obviously sensitive, as it represents a deviation from known-good behavior.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Windows Event ID 4688
  - File integrity monitoring (FIM) and registry audit logs on container hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE file/registry access patterns for each container_image
      ALERT if process from image accesses a path/key not in its baseline
- question: Does a process's file access pattern identify it as an outlier compared to normal container processes?
  context: This question uses clustering to identify an escaped process by its anomalous behavior. The file access patterns of normal containerized processes should form dense clusters. An escaped process that begins accessing host files will have a very different access pattern, causing it to be flagged as a noise point or outlier by a clustering algorithm like DBSCAN, as it won't fit any established cluster of normal behavior.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4657
  - Windows Event ID 4688
  - File integrity monitoring (FIM) and registry audit logs on container hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLUSTER processes based on file access pattern vectors
      ALERT on processes classified as outliers or noise points
- question: Has a process previously flagged as a potential container escape initiated an outbound network connection?
  context: This question seeks to confirm a suspected container escape by observing follow-on activity, such as C2 communication or data exfiltration. If a process ID that was flagged by another container escape analytic is subsequently seen in network logs making an external connection (especially to an IP on a blocklist), it significantly increases the confidence that a true positive escape has occurred.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Container host process logs and network egress points (e.g., Firewalls, Core Routers, Zeek sensors)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      IF process_id is in (container_escape_alerts)
      AND process_id appears in network_logs making external_connection
      THEN create high-severity ALERT
- question: Is a process, flagged as a potential escape, making network connections with anomalous attributes?
  context: This question analyzes the characteristics of network connections from a suspected escaped process to find anomalies. Even if the destination IP is not on a blocklist, the connection might be suspicious if its attributes (destination port, ASN, protocol, data volume) are statistical outliers compared to the host's historical network behavior. For example, connecting to a new ASN on a rarely used port is highly anomalous.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Container host process logs and network egress points (e.g., Firewalls, Core Routers, Zeek sensors)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR process flagged as potential_escape
      ANALYZE its network connections
      ALERT if connection attributes are statistical outliers compared to host baseline
- question: Is there a significant spike in outbound network traffic from a host immediately following a suspected container escape?
  context: This question uses time-series analysis of network traffic volume to corroborate a container escape event. A successful breakout is often followed by data exfiltration or C2 beaconing, which can cause a detectable spike in outbound traffic. Applying an anomaly detection model (e.g., ARIMA) to the host's traffic data can reveal an unexplained increase immediately following the time of a suspected escape, providing strong supporting evidence.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Container host process logs and network egress points (e.g., Firewalls, Core Routers, Zeek sensors)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      IF container_escape suspected at time T
      APPLY time-series anomaly detection to host's outbound traffic
      ALERT on significant unexplained spike in traffic after time T