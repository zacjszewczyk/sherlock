name: T1074: Data Staged
id: 8b7c6d5e-4f32-4a0b-9c8d-7e6f5a4b3c2d
description: |
  This playbook helps answer the primary investigative requirement: Is the adversary staging data prior to exfiltration? It provides investigative questions and queries to detect various data staging indicators. These indicators include the creation of files with malicious hashes or high-entropy names often used by automated tools; the suspicious execution of archiving utilities (e.g., 7z.exe, powershell.exe) with command-line arguments for compression or encryption in temporary directories; evidence of a single process rapidly reading a large number of unique files before writing to a single archive; sudden, statistically significant increases in file creation volume within known staging directories (e.g., C:\Windows\Temp); and large-volume internal network transfers from servers to a single non-server host, suggesting data consolidation.
type: technique
related:
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are newly created files associated with known malicious indicators, such as matching a malicious hash or having a filename that matches known malicious patterns?
    context: |
      This question aims to identify data staging by looking for direct, high-fidelity indicators of compromise. Adversaries often use known malware or tools to package data, which can be identified by their file hashes. Additionally, their automation scripts may generate predictable or patterned filenames (e.g., 'a9b8c7d6e5f4g3h2.zip'). By joining file creation events with process creation events and comparing file hashes against threat intelligence feeds and filenames against regex patterns, analysts can quickly detect known malicious staging activities.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - User home directories
      - Shared network drives
      - Common staging directories (e.g., C:\Windows\Temp, C:\Users\Public)
      - Application data folders
      - Cloud storage synchronization folders (e.g., OneDrive, Dropbox)
    range: last 90 days
    queries: |
      SEARCH file creation events (Sysmon 11) AND process creation events (Sysmon 1).
      JOIN on ProcessGUID.
      FOR each file, COMPARE file hash against threat intelligence feed.
      ALSO, COMPARE filename against known malicious regex patterns.
      ALERT on match.
  - question: Are newly created archive files exhibiting unusually high filename entropy, suggesting automated or non-human generation?
    context: |
      This question focuses on detecting algorithmically generated filenames often used by malware to create temporary or staged files. Benign user-created and application-generated filenames typically have a certain structure and lower complexity (entropy). By calculating the Shannon entropy of new archive filenames (.zip, .rar, .7z) and comparing it to a baseline, analysts can identify statistical outliers. A high entropy score, especially for a file created by a non-standard process like powershell.exe, is a strong indicator that the file was created by a script as part of a data staging operation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - User home directories
      - Shared network drives
      - Common staging directories (e.g., C:\Windows\Temp, C:\Users\Public)
      - Application data folders
      - Cloud storage synchronization folders (e.g., OneDrive, Dropbox)
    range: last 90 days
    queries: |
      SEARCH file creation events (Sysmon 11) for archive extensions.
      FOR each event, CALCULATE Shannon entropy of the filename.
      COMPARE entropy score against pre-computed baseline for that file type.
      ALERT if score exceeds 98th percentile.
  - question: Can a machine learning model classify file creation events as malicious staging activity based on file, process, and threat intelligence features?
    context: |
      This question leverages machine learning to build a more nuanced and comprehensive detection model for data staging. While symbolic and statistical methods are effective, a classifier like a Random Forest can learn complex, non-linear relationships between various features. By training a model on features such as file extension, path depth, filename entropy, parent process, command-line length, and threat intelligence hits, the system can automatically classify new file creation events in real-time, identifying suspicious staging that might evade simpler rule-based detections.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - User home directories
      - Shared network drives
      - Common staging directories (e.g., C:\Windows\Temp, C:\Users\Public)
      - Application data folders
      - Cloud storage synchronization folders (e.g., OneDrive, Dropbox)
    range: last 90 days
    queries: |
      INPUT features from file creation (Sysmon 11) and process creation (Sysmon 1) events into a pre-trained Random Forest model.
      FEATURES include: file extension, file path depth, filename entropy, parent process name, command-line length, threat intel hash match.
      ALERT if model classifies event as 'malicious staging'.
  - question: Is a known archiving utility or LOLBin being executed with command-line arguments that indicate data compression, encryption, and storage in a high-risk directory?
    context: |
      This question seeks to identify the misuse of legitimate tools for malicious purposes. Adversaries frequently use built-in utilities (LOLBins) like PowerShell or common archivers like 7-Zip to compress and password-protect stolen data. This query looks for the specific combination of a suspicious process (e.g., 'certutil.exe', 'rar.exe'), command-line flags indicating password protection or silent operation, and an output path pointing to a non-standard or temporary location (e.g., 'C:\Users\Public', '%TEMP%'). This combination is a strong signal of data staging.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Common staging directories (e.g., C:\Windows\Temp, C:\$Recycle.Bin)
      - User profile directories (e.g., %APPDATA%)
      - Network-accessible temporary folders
      - User-created folders at the root of a drive (e.g., C:\Intel)
    range: last 90 days
    queries: |
      SEARCH process creation events (Sysmon 1).
      FILTER for process names in [7z.exe, rar.exe, powershell.exe, etc.].
      FILTER for command lines containing password/silent flags.
      FILTER for output paths in high-risk directories.
      ALERT on match.
  - question: Are there statistically rare combinations of process, parent process, and output directory associated with process executions?
    context: |
      This question aims to find anomalous process behavior by analyzing the relationships between a process, its parent, and where it writes files. In a stable environment, certain process chains are common (e.g., explorer.exe launching cmd.exe). An unusual combination, such as 'cmd.exe' spawning 'powershell.exe' which then creates an archive in a rarely used system directory like 'C:\PerfLogs', would have a very low historical frequency. By tracking the frequency of (process, parent, output directory) tuples, analysts can spot these rare occurrences that often indicate malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Common staging directories (e.g., C:\Windows\Temp, C:\$Recycle.Bin)
      - User profile directories (e.g., %APPDATA%)
      - Network-accessible temporary folders
      - User-created folders at the root of a drive (e.g., C:\Intel)
    range: last 90 days
    queries: |
      FOR each process creation event (Sysmon 1), create a tuple of (process_name, parent_process_name, output_directory).
      COUNT frequency of each unique tuple over a 30-day window.
      ALERT if a tuple's frequency is in the bottom 1st percentile.
  - question: Can a pre-trained language model detect anomalous or malicious command-line argument sequences?
    context: |
      This question applies advanced natural language processing (NLP) techniques to command-line analysis. Adversarial command lines often have a different structure and token combination than benign ones. By fine-tuning a Transformer-based model (like BERT) on a baseline of normal command lines from the environment, the model learns the 'language' of legitimate system administration. When a new command line is executed, the model can assess its similarity to the learned baseline. Command lines with high anomaly or perplexity scores, especially those containing file paths and compression/password flags, can be flagged as potentially malicious staging commands.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Common staging directories (e.g., C:\Windows\Temp, C:\$Recycle.Bin)
      - User profile directories (e.g., %APPDATA%)
      - Network-accessible temporary folders
      - User-created folders at the root of a drive (e.g., C:\Intel)
    range: last 90 days
    queries: |
      INPUT command-line string from process creation events (Sysmon 1) into a fine-tuned Transformer (BERT) model.
      The model calculates an anomaly or perplexity score.
      ALERT if the score is high, especially for commands with file paths and archive-related flags.
  - question: Is a single, non-allowlisted process rapidly reading a large number of unique files from diverse directories and then writing to a single archive file?
    context: |
      This question targets the classic 'smash and grab' data collection pattern. An adversary, after gaining access, will use a script or tool to quickly gather sensitive files from various locations and consolidate them into a single archive for easier exfiltration. This query looks for a specific sequence of events: a process (that isn't a known backup or indexing tool) reading an unusually high number of files from multiple directories in a short time, followed immediately by the creation of an archive file. This behavior is a very strong indicator of active data collection.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - File servers
      - Document repositories (e.g., SharePoint mount points)
      - User home directories
      - Source code repositories
      - Cloud-synced directories on endpoints
      - Databases accessible via workstations
    range: last 90 days
    queries: |
      CORRELATE file read events (Win EID 4663) and file create events (Sysmon 11) with process creation events (Sysmon 1) by ProcessGUID.
      IF a process is not on an allowlist AND reads > 50 unique files from > 5 unique directories in 5 minutes AND then creates an archive file, ALERT.
  - question: Is a process accessing files from a set of directories with unusually high entropy, deviating from its normal behavior?
    context: |
      This question uses information theory to detect abnormal file access patterns. Most processes have a predictable scope of file access; for example, a web server primarily accesses files in its webroot, resulting in low directory entropy. An adversary's collection script, however, will likely traverse many disparate parts of the file system, resulting in a high-entropy set of accessed directories. By establishing a baseline of directory access entropy for each process, analysts can detect when a process's entropy score significantly deviates from its norm, indicating it is 'exploring' the file system in a way characteristic of data collection.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - File servers
      - Document repositories (e.g., SharePoint mount points)
      - User home directories
      - Source code repositories
      - Cloud-synced directories on endpoints
      - Databases accessible via workstations
    range: last 90 days
    queries: |
      FOR each process, over a 1-minute window, collect the set of unique directory paths from file access logs.
      CALCULATE the Shannon entropy of this set.
      COMPARE the entropy score to the historical mean and standard deviation for that process name.
      ALERT if the score is > 3 standard deviations above the mean.
  - question: Can unsupervised machine learning algorithms identify anomalous process sessions based on file I/O behavior?
    context: |
      This question uses clustering algorithms to find outliers without pre-labeled data. By creating a feature set for each process session (identified by ProcessGUID) that describes its file system interaction—such as counts of files/directories read, read/write ratios, and path entropy—most processes will form a dense cluster of 'normal' behavior. Anomaly detection algorithms like Isolation Forest or DBSCAN are designed to find data points that lie far from this main cluster. These outliers represent process sessions with unusual I/O patterns, making them prime candidates for investigation as potential data staging activities.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - File servers
      - Document repositories (e.g., SharePoint mount points)
      - User home directories
      - Source code repositories
      - Cloud-synced directories on endpoints
      - Databases accessible via workstations
    range: last 90 days
    queries: |
      FOR each ProcessGUID session, engineer features: count of unique files read, count of unique directories, read/write ratio, source path entropy, total bytes read/written.
      INPUT feature vectors into an Isolation Forest or DBSCAN model.
      ALERT on sessions identified as outliers/anomalies.
  - question: Has the number of files created in a known staging directory by a single, non-allowlisted process exceeded a predefined threshold in a short time?
    context: |
      This question provides a simple, threshold-based method to detect a 'data dump' into a common staging area. Adversaries often copy many files into a temporary directory before archiving them. This query sets a hard limit (e.g., 100 files in 5 minutes) for file creation activity in sensitive directories like 'C:\Windows\Temp'. If a single process that is not a known software installer or patch manager exceeds this threshold, it triggers an alert, indicating a high probability of data staging.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - System-wide temporary directories (C:\Windows\Temp)
      - User-specific temporary directories (%TEMP%)
      - Public folders (C:\Users\Public)
      - The Recycle Bin for all users
    range: last 90 days
    queries: |
      MONITOR file creation events (Sysmon 11) in specific staging directories.
      COUNT events per ProcessGUID over a 5-minute window.
      IF count > 100 AND process is not on allowlist, ALERT.
  - question: Is there a statistically significant spike in the rate of file creation in a key staging directory compared to its historical moving average?
    context: |
      This question uses time-series analysis to find anomalous bursts of activity that are relative to the system's own baseline. Instead of a fixed threshold, this method adapts to the normal rhythm of a host. It calculates a moving average and standard deviation for file creation rates in directories like 'C:\Windows\Temp'. A sudden spike in activity that significantly exceeds the recent average (e.g., more than 4 standard deviations above) is flagged as an anomaly. This can detect staging activity even on busy systems where a fixed threshold might generate false positives.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - System-wide temporary directories (C:\Windows\Temp)
      - User-specific temporary directories (%TEMP%)
      - Public folders (C:\Users\Public)
      - The Recycle Bin for all users
    range: last 90 days
    queries: |
      FOR key staging directories, create a time-series of file creation counts per minute.
      CALCULATE a 60-minute simple moving average (SMA) and standard deviation (SD).
      IF current minute's count > (SMA + 4*SD), ALERT.
  - question: Can a time-series forecasting model detect an anomalous volume of data being written to key staging directories that cannot be explained by normal seasonality?
    context: |
      This question applies more sophisticated time-series models to detect abnormal data dumps. Systems often have predictable daily and weekly cycles of disk activity (e.g., nightly backups, weekly reports). A model like Prophet or one using Seasonal-Trend-Loess decomposition can learn these complex patterns. It then forecasts the expected volume of data to be written to a staging directory. If the actual observed data volume falls significantly outside the model's prediction confidence interval, it indicates an unusual event not explained by normal system behavior, pointing strongly to data staging.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - System-wide temporary directories (C:\Windows\Temp)
      - User-specific temporary directories (%TEMP%)
      - Public folders (C:\Users\Public)
      - The Recycle Bin for all users
    range: last 90 days
    queries: |
      MODEL time-series of bytes written per hour to key directories using Prophet or STL.
      FORECAST expected volume and confidence interval for the current hour.
      IF actual bytes written falls outside the 99% confidence interval, ALERT.
  - question: Has a large volume of data been transferred from a server to a workstation over an internal network using a non-standard protocol?
    context: |
      This question focuses on identifying the consolidation phase of data staging, where an adversary moves collected data from multiple sources to a single compromised host before exfiltration. This query looks for a specific, high-risk scenario in network traffic logs: a very large data transfer (e.g., >1 GB) from a server to a host in the workstation IP range, using a protocol that is not typically used for legitimate large file transfers (i.e., not SMB or NFS). This is a strong indicator that the workstation is being used as a staging point.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Internal network segments, especially east-west traffic between VLANs
      - Traffic flowing from servers to workstations
      - The network egress point
    range: last 90 days
    queries: |
      SEARCH network connection logs (Zeek conn.log).
      FILTER for internal IP pairs where source is server and destination is workstation.
      IF 'resp_bytes' > 1 GB AND 'service' is not in [smb, nfs, bacula], ALERT.
  - question: Has a network connection between two internal hosts involved a volume of data that is statistically anomalous for that specific communication path?
    context: |
      This question aims to detect unusual data transfers by baselining what is 'normal' for every pair of communicating hosts on the network. Some hosts may regularly exchange large amounts of data, while for others, it would be highly unusual. This method calculates a historical baseline (e.g., the 95th percentile of bytes transferred) for each source-destination pair. An alert is generated only when a new connection exceeds its own specific, established threshold. This tailored approach is highly effective at spotting abnormal data consolidation while minimizing false positives from normally 'chatty' hosts.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Internal network segments, especially east-west traffic between VLANs
      - Traffic flowing from servers to workstations
      - The network egress point
    range: last 90 days
    queries: |
      FOR each internal source-destination IP pair, calculate the 95th percentile of 'resp_bytes' over a 30-day period.
      FOR each new connection, COMPARE 'resp_bytes' to the established percentile for that pair.
      IF it exceeds the percentile, ALERT.
  - question: Has a workstation's 'centrality' in the network graph suddenly increased to resemble that of a server, indicating it's being used as a data hub?
    context: |
      This question uses graph theory to model network behavior and identify changes in a host's role. In a typical network, servers are central nodes (hubs) that communicate with many clients. Workstations are usually peripheral nodes. By modeling the network as a graph and using algorithms like PageRank, we can quantify the 'centrality' of each host. A machine learning model can learn the normal centrality scores for workstations. If a workstation's score suddenly spikes into the range typically seen by servers, it's a strong mathematical indicator that it has become a consolidation point for data, i.e., a staging hub.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Internal network segments, especially east-west traffic between VLANs
      - Traffic flowing from servers to workstations
      - The network egress point
    range: last 90 days
    queries: |
      MODEL internal network as a directed graph from connection logs.
      NODES are IPs, EDGES are weighted by total bytes transferred.
      CALCULATE PageRank or another centrality score for each node daily.
      IF a workstation's centrality score suddenly increases into the server-score range, ALERT.