name: T1497.003: Time Based Evasion
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is attempting to evade defenses or discover the environment using time-based methods. This includes detecting encoded PowerShell commands with programmatic delays (e.g., Start-Sleep), the use of system utilities like 'timeout.exe' or 'ping.exe' to pause execution, and identifying 'sleeper' payloads that remain dormant for long periods before acting. It also covers techniques for detecting sandbox environments, such as checking for time acceleration, using high-frequency API calls ('API hammering') to exhaust analysis time, and staging discovery commands to run only after a significant delay.
type: technique
related:
  - TA0005: Defense Evasion
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any encoded PowerShell commands being executed that contain time-based evasion functions?
    context: Adversaries often use encoded PowerShell commands (e.g., using flags like -e, -en, -enc) to obscure malicious code. This question focuses on identifying scripts that, once decoded, contain functions or cmdlets designed to pause execution, such as 'Start-Sleep' or .NET methods like '[System.Threading.Thread]::Sleep'. Detecting these is a strong indicator of an attempt to bypass automated security analysis that may have a limited execution timeout.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Windows Event ID 4104 (Script Block Logging)
      - Data from all Windows endpoints and servers, particularly those with PowerShell v5+ script block logging enabled and systems with security monitoring agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (EID 4688) WHERE process_name = 'powershell.exe' AND command_line CONTAINS '-e' OR '-en' OR '-enc'.
          FOR EACH event, DECODE command_line.
          SEARCH decoded string for 'Start-Sleep', 'GetTickCount', 'Measure-Command', '[System.Threading.Thread]::Sleep'.
          CONCURRENTLY, SEARCH script block logs (EID 4104) for the same keywords.
          ALERT on any match.
  - question: Are there any PowerShell scripts with unusually high entropy, suggesting obfuscation?
    context: Obfuscated or packed code often has higher entropy (a measure of randomness) than normal script code. This question aims to identify malicious PowerShell scripts by calculating the Shannon entropy of all captured script blocks (from Event ID 4104). By establishing a baseline entropy score from legitimate scripts, we can flag any script with a significantly higher score as suspicious and likely obfuscated to hide its true purpose, which may include time-based evasion.
    answer_sources:
      - Windows Event ID 4104 (Script Block Logging)
      - Data from all Windows endpoints and servers, particularly those with PowerShell v5+ script block logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ANALYZE script block logs (EID 4104) over the last 30 days to establish a baseline Shannon entropy score for legitimate scripts.
          CALCULATE the 95th percentile of the baseline entropy.
          FOR EACH new script block, CALCULATE its entropy.
          ALERT if the script's entropy exceeds the 95th percentile threshold.
  - question: Can we use a machine learning model to classify PowerShell command lines as malicious based on their structure?
    context: This question proposes a more advanced detection method using a logistic regression model. By training a model on features like command length, character frequency, and the presence of specific keywords, it can learn to distinguish between benign and malicious command lines. This approach can proactively identify new or unknown obfuscated commands, including those used for time-based evasion, that might be missed by simple keyword searches.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Windows Event ID 4104 (Script Block Logging)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a logistic regression model on a labeled dataset of command lines with features (length, char_freq, n-grams, keywords).
          APPLY the trained model to new command lines from Event ID 4688 and 4104.
          SCORE each command line for maliciousness.
          ALERT on command lines classified as malicious with high confidence.
  - question: Is 'timeout.exe' or 'ping.exe' being used to create unusually long delays?
    context: Adversaries may use common system utilities like 'timeout.exe' or 'ping.exe' (pinging a loopback address) to pause script execution. This question seeks to find instances where these tools are used with parameters specifying a very long delay (e.g., more than 5 minutes). Such long delays are highly uncharacteristic of normal interactive or administrative use and strongly suggest an attempt to wait out a sandbox environment's analysis window.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers, especially critical servers or those where interactive command-line usage is rare.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (EID 4688) where (process_name = 'timeout.exe' AND command_line contains '/t [number > 300]')
          OR (process_name = 'ping.exe' AND command_line contains '-n [number > 300]' AND target_ip is '127.0.0.1').
          ALERT on match.
  - question: Are there executions of 'timeout.exe' or 'ping.exe' with delays that are statistical outliers for the environment?
    context: Rather than using a fixed threshold, this question aims to establish a dynamic baseline for what constitutes a "long" delay within a specific organization. By analyzing the delay values used with 'timeout.exe' and 'ping.exe' over a 30-day period, we can calculate a high percentile (e.g., the 99th). Any execution that exceeds this dynamically calculated threshold is considered a statistical anomaly and may represent a malicious attempt at time-based evasion.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          COLLECT all delay/count values from 'timeout.exe' and 'ping.exe' executions (EID 4688) over a 30-day rolling window.
          CALCULATE the 99th percentile for these values.
          MONITOR for new executions of 'timeout.exe' or 'ping.exe'.
          ALERT if the delay/count value exceeds the calculated 99th percentile threshold.
  - question: Is there an anomalous spike in delay-inducing commands on any specific host?
    context: This question uses time-series analysis to model the normal behavior of delay-inducing commands ('timeout.exe', 'ping.exe') on a per-host basis. By applying a forecasting model, we can predict the expected frequency and magnitude of these commands. A significant deviation from the forecast, such as a sudden spike in long delays, indicates an anomaly on that host that could be related to a malware infection or an intruder's activities.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH host, create a time series of 'timeout.exe' and 'ping.exe' execution counts and delay values.
          APPLY a forecasting model (e.g., SARIMA, LSTM) to the time series.
          MONITOR for new activity.
          ALERT if observed activity significantly deviates from the model's forecast.
  - question: Are there any 'sleeper' processes that remain dormant for a long time before taking action?
    context: Malware sometimes employs a 'sleeper' tactic, where a process is launched but remains inactive for an extended period (e.g., 10+ minutes) to evade detection systems that only monitor initial process behavior. This question aims to identify such processes by correlating their creation time with their first significant action, such as a network connection, file write, or registry modification. A long delay between these events is highly suspicious.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Windows Event ID 4663 (File Write/Access)
      - Windows Event ID 4657 (Registry Modification)
      - Zeek conn.log (Network Connections)
      - Data from all Windows endpoints, servers, Domain Controllers, and network choke points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH new process (EID 4688), track its Process ID.
          MONITOR for subsequent network (Zeek), file (EID 4663), or registry (EID 4657) events with the same Process ID.
          CALCULATE the time delta between process creation and the first subsequent activity.
          ALERT if the time delta is > 10 minutes and no activity was seen in the first 60 seconds.
  - question: Are there any processes exhibiting an abnormally long delay before their first network activity?
    context: This question focuses specifically on the delay between process creation and its first outbound network connection, which is a common pattern for 'sleeper' malware. By baselining the typical delay for each unique process name (e.g., 'chrome.exe' vs 'svchost.exe'), we can identify significant outliers. A process that takes much longer than its peers to initiate network traffic (e.g., > 3 standard deviations from the mean) is a strong candidate for a malicious sleeper payload.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Zeek conn.log (Network Connections)
      - Data from all Windows endpoints, servers, and network choke points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH unique process name, calculate the distribution of time deltas between creation (EID 4688) and first network connection (Zeek).
          ESTABLISH a baseline mean and standard deviation for each process name.
          FOR EACH new process instance, calculate its delay-to-network-activity.
          ALERT if the delay exceeds three standard deviations from the mean for its process name.
  - question: Can we identify anomalous 'sleeper' processes using clustering algorithms?
    context: This question proposes using an unsupervised machine learning approach to find 'sleeper' processes. By creating a set of features for each process (e.g., time to first network connection, time to first file write, parent process rarity) and applying a clustering algorithm like DBSCAN, we can automatically group normal processes together. Processes that do not fit into any cluster are identified as noise or outliers, and those characterized by long time-delay features are prime suspects for investigation.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Windows Event ID 4663 (File Write/Access)
      - Windows Event ID 4657 (Registry Modification)
      - Zeek conn.log (Network Connections)
      - Data from all Windows endpoints, servers, and network choke points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process, engineer features: [time_to_first_net_conn, time_to_first_file_write, process_rarity, parent_process_name].
          APPLY DBSCAN clustering to the dataset of process features.
          ALERT on processes identified as outliers/noise, especially those with high values in time-delay features.
  - question: Is any process checking for sandbox time acceleration by comparing requested sleep time with actual elapsed time?
    context: A classic sandbox evasion technique involves requesting a sleep for a certain duration (e.g., 60 seconds) and then checking the system clock to see how much time actually passed. In some sandboxes that accelerate time to speed up analysis, the actual elapsed time will be far less than requested. This question looks for the specific sequence of [time query -> sleep command -> time query] and alerts if a significant discrepancy is found, indicating a likely sandbox check.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers, with a focus on virtualized environments and sandboxes.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRACK process activity by Process ID.
          IDENTIFY sequence: [time query] -> [sleep command with duration X] -> [second time query] within 60 seconds.
          CALCULATE actual_elapsed_time between the two time queries.
          ALERT if actual_elapsed_time < (0.5 * X).
  - question: Are any processes making an unusually high number of time-query commands?
    context: This question aims to detect a potential sandbox check or delay tactic by looking for an abnormally high frequency of time-query commands (e.g., 'time /t', 'date /t') from a single process. By calculating a Z-score for the count of these commands per process, we can identify statistical outliers. A process that queries the time far more often than its peers, especially if it also uses a sleep command, is highly suspicious.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process, count the number of time-query commands executed.
          BASELINE this count against all other processes over a 7-day period.
          CALCULATE a Z-score for each process's time-query count.
          ALERT if a process has a Z-score > 3, especially if also associated with a sleep command.
  - question: Can we detect the specific command sequence of a time-acceleration check using a Hidden Markov Model?
    context: This question proposes using a Hidden Markov Model (HMM) to learn the typical sequences of commands for both benign and malicious activities. An HMM can model the probability of transitioning from one command type to another (e.g., from 'query_time' to 'sleep'). By training the model, it can then score new, unseen command sequences and flag those that closely match a known malicious pattern, such as the 'query_time -> sleep -> query_time' sandbox check, with high confidence.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a Hidden Markov Model (HMM) on sequences of command-line executions from benign and known malicious activity.
          USE the trained model to score new command sequences.
          ALERT on sequences that match the high-probability malicious state transition of 'query_time -> sleep -> query_time'.
  - question: Is any process 'hammering' time-query APIs to stall for time?
    context: 'API hammering' is a technique where malware repeatedly calls a fast, simple function (like a time query) in a tight loop to consume time without performing any other observable actions. This is done to wait out an automated analysis period. This question aims to detect this by setting a threshold for a high number of time-query commands from a single process within a short window, especially when there is no corresponding network or file system activity.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Zeek conn.log (Network Connections)
      - Windows Event ID 4663 (File Write/Access)
      - Data from all Windows endpoints and servers, particularly automated analysis systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ALERT if a single Process ID (from EID 4688) executes > 50 time-query commands within a 30-second window,
          AND no network (Zeek) or file modification (EID 4663) events are logged for that PID during its lifetime.
  - question: Are any processes exhibiting a disproportionately high ratio of time-queries to other commands?
    context: This question provides a more robust way to detect 'API hammering' by looking at the proportion of commands. A normal process performs a variety of actions, while a process engaged in API hammering will have a command history dominated by time queries. By calculating the ratio of time-query commands to all commands for each process and flagging statistical outliers (e.g., 99.9th percentile), we can identify this suspicious behavior.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process, calculate the ratio of (count of time-query commands) / (count of all commands).
          ESTABLISH a baseline distribution for this ratio across all processes over a 30-day window.
          ALERT if a process's ratio falls into the 99.9th percentile of the distribution.
  - question: Can an autoencoder model detect anomalous command sequences indicative of time-based API hammering?
    context: This question suggests using an autoencoder, a type of neural network, to learn what normal sequences of command-line events look like. When the trained model is given an anomalous sequence, such as the repetitive, non-diverse pattern of API hammering, it will be unable to reconstruct it accurately, resulting in a high 'reconstruction error'. This high error score serves as a strong signal for an anomaly that warrants investigation.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN an autoencoder model on sequences of benign command-line events.
          FEED new command sequences into the trained model and calculate the reconstruction error.
          ALERT if a process generates a reconstruction error above a statistically determined threshold.
  - question: Is an adversary using a delay process before running discovery commands?
    context: This question looks for a specific attack chain where an adversary tries to evade initial detection by first running a 'sleeper' process (e.g., 'timeout /t 300') and then, only after the delay is over, running discovery commands ('whoami', 'net user', etc.) to perform reconnaissance. By correlating process creation events and tracking parent-child relationships, we can detect when a parent process spawns a delay, waits for it to finish, and then immediately spawns a discovery tool.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers, especially high-value assets like Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRACK process events by Parent Process ID (Parent_PID).
          ALERT if a Parent_PID spawns a child process executing a long delay (e.g., 'timeout /t > 300').
          AND THEN, upon termination of the delay process, the same Parent_PID spawns a discovery tool ('whoami.exe', 'net.exe', etc.) within 60 seconds.
  - question: Are discovery commands being executed at unusual, recurring times across the enterprise?
    context: If an adversary schedules a delayed, malicious task, it may result in discovery commands being run at the same unusual time every day across multiple machines (e.g., 2:05 AM). This question aims to detect such coordinated, scheduled activity by performing a time-of-day analysis on the execution of common discovery tools. A sharp, recurring peak in activity during non-business hours is a strong statistical indicator of a scheduled, malicious payload.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          COLLECT execution times for discovery commands ('ipconfig', 'net user', etc.) from a 30-day dataset.
          PLOT the execution count per hour for the entire enterprise.
          INVESTIGATE any recurring, sharp peaks at unusual, non-business hours.
  - question: Can we statistically prove that the execution of discovery commands is caused by a preceding delay process?
    context: Correlation does not equal causation. This question proposes using a more rigorous statistical method, like Granger causality analysis, to determine if there is a causal link between the completion of a delay process and the subsequent execution of a discovery command. A high causality score would provide strong, defensible evidence that the discovery command was intentionally staged to run after the delay, distinguishing it from coincidental, unrelated activity.
    answer_sources:
      - Windows Event ID 4688 (Process Creation)
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON a per-host basis, create time series for 'delay process completions' and 'discovery command executions'.
          APPLY a Granger causality analysis to test if the delay series statistically predicts the discovery series.
          ALERT on hosts where a high causality score is found, indicating a deliberate execution chain.