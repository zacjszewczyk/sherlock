name: T1633: Virtualization-Sandbox Evasion
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if malware on a corporate mobile device is attempting to detect if it is running in a sandbox or emulator. This involves looking for applications that query for system properties associated with Android emulators, request permissions for multiple human-interaction sensors followed by network dormancy, or make numerous DNS queries to public NTP or IP geolocation services shortly after installation.
type: technique
related:
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a non-allowlisted application querying for multiple known emulator artifact properties within 60 seconds of its first execution?
    context: This question aims to detect a common sandbox evasion technique where malware checks for specific system properties that only exist in emulated environments (e.g., 'ro.hardware:goldfish'). A positive match for a non-trusted application is a strong indicator of malicious intent, as the application is actively trying to determine if it's being analyzed.
    answer_sources: Android Logcat, MDM Application Inventory Logs, MDM Process Activity Logs, Zeek conn.log, Managed Mobile Device Endpoints, Mobile Device Management (MDM) Platform, Centralized Log Aggregator/SIEM, Network Security Monitoring (NSM) sensors at internet gateways
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new process start event from MDM logs:
            IF process publisher is NOT in allowlist:
              JOIN with Android Logcat data for the same device and timeframe.
              COUNT distinct emulator properties queried within 60 seconds of process start.
              IF count >= 2:
                ALERT.
  - question: Is any third-party application querying for an anomalously high number of emulator-related properties or showing low entropy in its property queries compared to a fleet-wide baseline?
    context: This question uses statistical analysis to find outliers. Instead of relying on a fixed threshold, it compares an application's behavior to the norm across all mobile devices. A high count of emulator property queries suggests a thorough check, while low entropy (e.g., checking the same few properties repeatedly) indicates a persistent, focused evasion attempt. Both are suspicious.
    answer_sources: Android Logcat, MDM Application Inventory Logs, MDM Process Activity Logs, Zeek conn.log, Managed Mobile Device Endpoints, Mobile Device Management (MDM) Platform, Centralized Log Aggregator/SIEM, Network Security Monitoring (NSM) sensors at internet gateways
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Baselining (run periodically)
          CALCULATE 99th percentile for unique emulator properties queried per app within 5 mins of launch across the fleet.
          CALCULATE baseline Shannon entropy for property names.

          // Detection
          FOR each third-party app launch:
            COUNT unique emulator properties queried in first 5 mins.
            CALCULATE Shannon entropy of queried property names.
            IF count > 99th_percentile_threshold OR entropy < low_entropy_threshold:
              ALERT.
  - question: Does a machine learning model, trained on application behavior and properties, classify a new application's activity as 'evasive'?
    context: This question leverages machine learning to identify complex patterns of evasion that simple rules might miss. The model considers multiple features simultaneously (e.g., property queries, query timing, publisher reputation, permissions) to make a holistic assessment. Correlating a high-confidence 'evasive' prediction with subsequent suspicious network activity increases the accuracy and automatically prioritizes the most critical threats.
    answer_sources: Android Logcat, MDM Application Inventory Logs, MDM Process Activity Logs, Zeek conn.log, Managed Mobile Device Endpoints, Mobile Device Management (MDM) Platform, Centralized Log Aggregator/SIEM, Network Security Monitoring (NSM) sensors at internet gateways
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Prediction
          FOR each new application:
            EXTRACT features (property query count, entropy, time-to-query, publisher, permissions).
            INPUT features into Random Forest model.
            GET prediction score.
            IF prediction is 'evasive' with high confidence:
              MONITOR network traffic from the device in Zeek logs.
              IF connection to malicious IP/port is observed:
                ESCALATE ALERT.
  - question: Has a newly launched application requested multiple 'human interaction' permissions and then exhibited network dormancy?
    context: This question targets malware that checks for signs of a real user (e.g., by accessing contacts, call logs, or motion sensors) and then stays quiet to avoid detection in automated sandboxes that lack human interaction. The combination of grabbing sensitive permissions and then "playing dead" on the network is a strong red flag.
    answer_sources: MDM Permission Grant Logs, Android Logcat, Zeek conn.log, Managed Mobile Device Endpoints, Mobile Device Management (MDM) Platform, Centralized Log Aggregator/SIEM, Network Security Monitoring (NSM) sensors at internet gateways
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each app launch event:
            COUNT 'human interaction' permissions granted within 60 seconds.
            IF count >= 3:
              CHECK Zeek logs for the next 5 minutes from the device IP.
              IF total outbound bytes < 1024 or zero connections:
                ALERT.
  - question: Is a new application's initial sequence of API calls or its sensor data entropy significantly different from the established baseline for its category?
    context: This question seeks to identify anomalies in how an application interacts with the operating system and its sensors. Legitimate apps in a category (e.g., 'Games') have similar startup routines. A significant deviation, measured by algorithms like Levenshtein distance, suggests abnormal behavior. Similarly, sensor data with near-zero entropy (no change) indicates the static environment of an emulator, not a human-held device.
    answer_sources: MDM Permission Grant Logs, Android Logcat, Zeek conn.log, Managed Mobile Device Endpoints, Mobile Device Management (MDM) Platform, Centralized Log Aggregator/SIEM, Network Security Monitoring (NSM) sensors at internet gateways
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Baselining
          FOR each app category, create baseline of API call sequences and sensor data entropy.

          // Detection
          FOR each new app launch:
            COMPARE its API call sequence to the category baseline (e.g., using Levenshtein distance).
            MONITOR sensor data entropy for 30 seconds.
            IF API sequence deviation > 98th percentile OR sensor entropy is near zero:
              ALERT.
  - question: Does a time-series anomaly detection model flag sensor data from a newly installed application as non-human?
    context: This question uses a sophisticated deep learning model (LSTM Autoencoder) specifically designed to understand time-series data, like streams from an accelerometer or gyroscope. The model learns what normal human movement looks like. When it encounters data from a static or artificially stimulated emulator, it fails to 'reconstruct' it accurately, resulting in a high error score that signals an anomaly and likely evasion attempt.
    answer_sources: MDM Permission Grant Logs, Android Logcat, Zeek conn.log, Managed Mobile Device Endpoints, Mobile Device Management (MDM) Platform, Centralized Log Aggregator/SIEM, Network Security Monitoring (NSM) sensors at internet gateways
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Prediction
          FOR each new app installation:
            STREAM real-time sensor data (accelerometer, etc.) into the LSTM Autoencoder model.
            CALCULATE reconstruction error.
            IF reconstruction error > statistically-determined_threshold:
              ALERT for anomalous non-human sensor activity.
  - question: Is a newly installed application making DNS queries for three or more distinct public time or geolocation service domains within five minutes of execution?
    context: This question looks for malware trying to verify its external environment. Sandboxes might provide incorrect time or a generic location. By querying multiple public NTP (time) and IP geolocation services, the malware can cross-reference the results to get a true picture of its surroundings and detect if it's being analyzed. A burst of such queries right after installation is highly suspicious.
    answer_sources: Zeek dns.log, Zeek conn.log, MDM Application Installation Logs, Corporate DNS Resolvers, Network Security Monitoring (NSM) sensors at internet gateways, Centralized Log Aggregator/SIEM, Mobile Device Management (MDM) Platform
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each app installation event from MDM:
            MONITOR Zeek DNS logs from the device IP for 5 minutes.
            COUNT unique domains queried from a time/geolocation watchlist.
            IF count >= 3:
              ALERT.
  - question: Is a mobile device suddenly querying time/geolocation domains at a rate that is statistically anomalous compared to its own 30-day history?
    context: This question focuses on behavioral changes for a single device. Instead of a fixed rule, it uses the device's own past activity as a baseline. A sudden spike in the number or frequency of queries to time/geolocation services, exceeding several standard deviations from its norm, indicates a significant and suspicious change in behavior that could be linked to a new piece of malware performing reconnaissance.
    answer_sources: Zeek dns.log, Zeek conn.log, MDM Application Installation Logs, Corporate DNS Resolvers, Network Security Monitoring (NSM) sensors at internet gateways, Centralized Log Aggregator/SIEM, Mobile Device Management (MDM) Platform
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Baselining
          FOR each device, create a 30-day rolling baseline of time/geo query counts and frequency.

          // Detection
          IN a 10-minute sliding window:
            COUNT distinct time/geo domains queried by a device.
            IF count > (device_baseline_mean + 3 * device_baseline_std_dev):
              ALERT.
  - question: Can unsupervised machine learning (DBSCAN) identify outlier network traffic patterns indicative of sandbox evasion reconnaissance?
    context: This question uses an unsupervised clustering algorithm, DBSCAN, to find anomalous "noise" points in network traffic data without pre-existing labels. The goal is to find devices whose behavior doesn't fit any normal cluster. By engineering features like DNS query counts, entropy, and protocol ratios, we can specifically look for outliers that match the profile of evasion: a high volume of DNS reconnaissance followed by little to no actual data transfer.
    answer_sources: Zeek dns.log, Zeek conn.log, MDM Application Installation Logs, Corporate DNS Resolvers, Network Security Monitoring (NSM) sensors at internet gateways, Centralized Log Aggregator/SIEM, Mobile Device Management (MDM) Platform
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each 5-minute window of network traffic:
            EXTRACT features (DNS query count, FQDN entropy, DNS-to-connection ratio, etc.).
            APPLY DBSCAN algorithm to the feature set.
            INVESTIGATE any data points classified as 'noise' (outliers).
            IF outlier profile matches 'high DNS recon, low data transfer':
              ALERT.