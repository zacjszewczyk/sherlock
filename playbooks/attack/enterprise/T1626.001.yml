name: T1626.001: Device Administrator Permissions
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the threat of an adversary illegitimately gaining Device Administrator permissions on a corporate mobile device. It provides investigative steps to detect this activity through static application analysis, runtime behavior monitoring, and user interaction analysis. Indicators include applications requesting 'BIND_DEVICE_ADMIN' permission that are not on an organizational allow-list; an unapproved app gaining admin rights while communicating with malicious or unknown network destinations; and evidence of automated UI interaction, such as rapid, precise tapping, to bypass user consent for activation.
type: technique
related:
  - TA0029: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a new or updated application requesting Device Administrator permissions without being on the approved allow-list?
    context: This question aims to proactively identify unauthorized applications that request powerful Device Administrator privileges during the application vetting process. By checking an application's manifest file for the `BIND_DEVICE_ADMIN` permission and verifying its package name and signing certificate against an established allow-list, security teams can catch potentially malicious apps before they are deployed to corporate devices. A mismatch indicates a policy violation and a potential attempt to install a rogue administrator app.
    answer_sources:
      - Static APK Analysis Result (AndroidManifest.xml)
      - MAM Application Inventory Record
      - Device Admin Application Allow-list
      - Corporate application repository and vetting sandbox; Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms; Security data lake or SIEM platform hosting the allow-list and correlation engine.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOREACH new_apk IN vetting_pipeline; IF 'BIND_DEVICE_ADMIN' IN new_apk.manifest; THEN CHECK if new_apk.package_name IN allow_list AND new_apk.signing_hash IN allow_list; IF NOT, ALERT 'Unauthorized Device Admin Request';
  - question: Does an application requesting Device Administrator permissions exhibit anomalous characteristics in its package name or permission set compared to legitimate admin apps?
    context: Malicious actors often use randomized or nonsensical package names to evade simple blocklists. This question uses statistical analysis to detect such anomalies. High Shannon entropy in a package name suggests randomness, while a low Jaccard similarity score indicates its requested permissions are very different from typical, legitimate device admin apps. Combining these two signals helps identify suspicious apps that might otherwise appear benign, flagging them for deeper manual review.
    answer_sources:
      - Static APK Analysis Result (AndroidManifest.xml)
      - MAM Application Inventory Record
      - Device Admin Application Allow-list
      - Corporate application repository and vetting sandbox; Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms; Security data lake or SIEM platform hosting the allow-list and correlation engine.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOREACH app WITH 'BIND_DEVICE_ADMIN'; CALCULATE package_name_entropy; CALCULATE permission_jaccard_similarity vs allow_list_apps; IF package_name_entropy > 95th_percentile AND permission_jaccard_similarity < 0.5; THEN FLAG for review;
  - question: Can a machine learning model identify applications requesting Device Administrator permissions as potentially malicious based on their static features?
    context: This question leverages a supervised machine learning model to automate the detection of malicious APKs. By training a model on features extracted from known good and bad applications—such as specific high-risk permissions, package name entropy, and code obfuscation indicators—it can generate a "maliciousness" score for new submissions. This provides a more sophisticated and scalable method for flagging high-risk apps that request device admin rights, prioritizing analyst effort on the most likely threats.
    answer_sources:
      - Static APK Analysis Result (AndroidManifest.xml)
      - MAM Application Inventory Record
      - Device Admin Application Allow-list
      - Corporate application repository and vetting sandbox; Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms; Security data lake or SIEM platform hosting the allow-list and correlation engine.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOREACH new_apk; EXTRACT features (permissions, entropy, obfuscation, etc.); SCORE apk with trained_ML_model; IF risk_score > threshold; THEN FLAG for manual analysis;
  - question: Has a non-allow-listed application been granted Device Administrator permissions on a device that is concurrently communicating with a known malicious or a newly seen IP/domain?
    context: This question seeks to find active compromises by correlating two high-fidelity events in real-time. The activation of an unauthorized device administrator is a significant security event. When this occurs within minutes of the device contacting a destination flagged by threat intelligence or a domain never before seen in the environment, it strongly indicates that the device has been compromised and is communicating with a command-and-control (C2) server. This correlation provides a critical, actionable alert.
    answer_sources:
      - MDM/MTD Audit Log (Event: DeviceAdminEnabled)
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feed
      - Device Admin Application Allow-list
      - Managed mobile endpoint devices (Android); Network egress points (e.g., corporate WiFi gateways, VPN concentrators); Security Information and Event Management (SIEM) platform for log aggregation and correlation.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON 'DeviceAdminEnabled' event; IF app NOT IN allow_list; THEN SEARCH network_logs FOR device_ip IN +/- 5_mins; IF destination in threat_intel OR destination_prevalence == 1; THEN CREATE critical_alert;
  - question: Has a rare application been granted Device Administrator permissions at an unusual time for a specific user?
    context: This question uses behavioral analytics to spot suspicious device admin activations. Adversaries may try to hide their actions by performing them during off-hours. By creating a baseline of normal device management activity for each user, we can detect outliers. An admin activation event that occurs at a statistically anomalous time (high Z-score) for an application that is rarely seen across the organization is a strong indicator of suspicious activity that warrants investigation.
    answer_sources:
      - MDM/MTD Audit Log (Event: DeviceAdminEnabled)
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feed
      - Device Admin Application Allow-list
      - Managed mobile endpoint devices (Android); Network egress points (e.g., corporate WiFi gateways, VPN concentrators); Security Information and Event Management (SIEM) platform for log aggregation and correlation.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON 'DeviceAdminEnabled' event; CALCULATE time_z_score from user_baseline; CALCULATE app_prevalence across org; IF time_z_score > 3.5 AND app_prevalence < 0.01; THEN CREATE medium_alert;
  - question: Did the sequence of events leading up to a Device Administrator activation deviate from normal, learned device behavior?
    context: This question employs a sophisticated machine learning model to understand the context surrounding a device admin activation. Normal user behavior follows certain patterns. An LSTM autoencoder can learn these normal sequences of events. If a sequence involving a `Device Administrator Enabled` event has a high reconstruction error, it means the model finds this sequence of actions to be unfamiliar and anomalous, suggesting it may have been triggered by a malicious process.
    answer_sources:
      - MDM/MTD Audit Log (Event: DeviceAdminEnabled)
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feed
      - Device Admin Application Allow-list
      - Managed mobile endpoint devices (Android); Network egress points (e.g., corporate WiFi gateways, VPN concentrators); Security Information and Event Management (SIEM) platform for log aggregation and correlation.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each device_event_sequence; CALCULATE reconstruction_error with LSTM_model; IF sequence CONTAINS 'DeviceAdminEnabled' AND reconstruction_error > threshold; THEN ALERT 'Anomalous Event Sequence';
  - question: Was a Device Administrator activation immediately preceded by a rapid series of automated-looking touch events within the activation prompt window?
    context: This question aims to detect "clickjacking" or automated tapping, where malware programmatically clicks the "Activate" button on the device admin consent screen. By using a Complex Event Processing (CEP) engine to look for the exact sequence of the admin prompt appearing, followed by a burst of rapid clicks, and culminating in the activation event all within a 2-second window, we can identify this malicious behavior with very high confidence.
    answer_sources:
      - Android logcat (tag:InputReader)
      - MTD Agent Behavioral Log (Event:TouchEvent)
      - MDM/MTD Audit Log (Event:DeviceAdminEnabled)
      - High-value or high-risk mobile devices enrolled in an enhanced MTD monitoring program capable of collecting and streaming detailed behavioral logs; Security data lake or SIEM with stream processing capabilities for log analysis.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: WITHIN 2_seconds ON device; DETECT SEQUENCE: 1. window_focus('Activate device admin') -> 2. count(touch_events) > 10 -> 3. event('DeviceAdminEnabled'); IF sequence_match; THEN CREATE critical_alert 'Automated Grant';
  - question: Did a Device Administrator activation occur within seconds of touch input that is statistically anomalous for that specific user, such as being too fast or too precise?
    context: This question uses user-specific behavioral biometrics to detect non-human interaction. Automated scripts are extremely fast and precise, unlike human touch. This query establishes a baseline of normal touch behavior for each user and then flags any interaction that is abnormally fast (99th percentile frequency) and abnormally precise (1st percentile coordinate deviation). If this anomalous interaction is immediately followed by a device admin activation, it strongly suggests an automated attack.
    answer_sources:
      - Android logcat (tag:InputReader)
      - MTD Agent Behavioral Log (Event:TouchEvent)
      - MDM/MTD Audit Log (Event:DeviceAdminEnabled)
      - High-value or high-risk mobile devices enrolled in an enhanced MTD monitoring program capable of collecting and streaming detailed behavioral logs; Security data lake or SIEM with stream processing capabilities for log analysis.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM touch_events; CALCULATE frequency, coordinate_std_dev over 1s_window; IF freq > user_99th_percentile AND std_dev < user_1st_percentile; THEN CHECK for 'DeviceAdminEnabled' in next 5s; IF found, ALERT 'Anomalous Touch Input';
  - question: Can a machine learning model classify the sequence of UI events leading to Device Administrator activation as 'human' or 'automated'?
    context: This is an advanced form of behavioral detection, using a deep learning model to analyze entire sequences of low-level UI interactions. The model is trained to recognize the subtle patterns that differentiate human interaction from automated scripts. When the model classifies a sequence ending in device admin activation as 'automated', it provides a very strong signal of compromise, justifying an immediate, automated response like quarantining the device.
    answer_sources:
      - Android logcat (tag:InputReader)
      - MTD Agent Behavioral Log (Event:TouchEvent)
      - MDM/MTD Audit Log (Event:DeviceAdminEnabled)
      - High-value or high-risk mobile devices enrolled in an enhanced MTD monitoring program capable of collecting and streaming detailed behavioral logs; Security data lake or SIEM with stream processing capabilities for log analysis.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM UI_event_sequences; FOR each_sequence ending in 'DeviceAdminEnabled'; CLASSIFY sequence with GRU_model; IF classification == 'automated'; THEN QUARANTINE device AND create high_alert;