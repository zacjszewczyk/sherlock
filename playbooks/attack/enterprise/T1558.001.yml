name: T1558.001: Golden Ticket
id: f5c3b1a2-9d8e-4f7c-8a6b-0d1e2f3a4b5d
description: This playbook helps investigate potential Golden Ticket attacks, a form of Kerberos ticket forgery used for unauthorized credential access. It focuses on detecting indicators such as the execution of credential dumping tools on Domain Controllers, the use of weak RC4 encryption in Kerberos tickets, Ticket-Granting Service (TGS) requests occurring without corresponding Ticket-Granting Tickets (TGTs), unusually long ticket lifetimes, rapid lateral movement across many hosts by a single account, and the malicious injection of high-privilege SIDs via SID-History.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any known malicious credential dumping or ticket forging tools (e.g., Mimikatz, Rubeus) been executed on Domain Controllers?
  context: This question seeks to identify the direct execution of tools used for Golden Ticket attacks. Adversaries often use well-known utilities to dump credentials or forge Kerberos tickets. Detecting their execution on critical infrastructure like Domain Controllers via hash correlation against threat intelligence is a high-fidelity indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE (device_group = 'Domain Controllers') AND (process_hash IN known_malicious_hashes) GROUP BY hostname, process_name, process_hash
- question: Are there any processes running on Domain Controllers with unusually high entropy in their names or command-line arguments, suggesting obfuscation?
  context: Adversaries may obfuscate or randomize tool names and command-line arguments to evade signature-based detection. This question uses entropy analysis to find statistical outliers in process creation events, which could represent these evasive techniques, even if the tool's hash is unknown.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE (device_group = 'Domain Controllers') | CALCULATE entropy(process_name), entropy(command_line) | DETECT outliers WHERE entropy > baseline_99th_percentile
- question: Has a machine learning model identified any process creation events on Domain Controllers as being highly indicative of credential dumping activity?
  context: This question leverages a machine learning model trained to recognize the subtle characteristics of malicious processes beyond simple hashes or entropy. The model analyzes multiple features (parent process, user context, path rarity) to score events, providing a more sophisticated and resilient method for detecting novel or heavily modified credential dumping tools.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE (device_group = 'Domain Controllers') | INVOKE ML_credential_dumping_model | RETURN events with high_confidence_malicious_score
- question: Have any Kerberos tickets been requested using the weak and deprecated RC4-HMAC encryption type?
  context: This question looks for a specific, high-fidelity indicator of ticket forging. Many attack tools default to using the RC4-HMAC cipher ('0x17') because it is easier to work with when forging tickets. Since modern, patched Windows environments have deprecated RC4, its presence in a TGT or TGS request is highly suspicious, especially for privileged accounts.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH kerberos_events WHERE (event_id IN [4768, 4769] AND encryption_type = '0x17') OR (source = 'zeek_kerberos' AND encryption_type = 'RC4-HMAC') GROUP BY user, service, client_ip
- question: Has any user account, particularly a privileged one, requested a Kerberos ticket using an encryption type that deviates from its established baseline behavior?
  context: This question aims to detect anomalies in user behavior. A user account typically uses a consistent set of Kerberos encryption types. A sudden switch to a different, especially weaker, cipher like RC4 can indicate that the account's credentials are being used by a malicious tool, even if that cipher is technically permitted in the environment.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH kerberos_events | BASELINE encryption_type by user over 30_days | DETECT deviation from baseline for user and encryption_type
- question: Has a machine learning model flagged any Kerberos ticket requests as anomalous based on the combination of user, service, client IP, and encryption type?
  context: This question employs an anomaly detection model to find improbable combinations of features in Kerberos requests. An adversary might use a legitimate user and IP but with an unusual encryption type for a rare service. The model can identify these subtle, multi-featured anomalies that might be missed by single-variable rules or baselines.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH kerberos_events | INVOKE ML_kerberos_anomaly_model on (user, service, client_ip, encryption_type) | RETURN events flagged as anomalous
- question: Has a Ticket-Granting Service (TGS) request been observed from a client for a user without a corresponding preceding Ticket-Granting Ticket (TGT) request from that same client?
  context: This question targets a key indicator of Pass-the-Ticket attacks, including the use of a forged Golden Ticket. The normal Kerberos workflow requires a client to first obtain a TGT before requesting a TGS. Bypassing this first step implies the client is using a ticket obtained through other means, such as forgery. This stateful check is a strong sign of compromise.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each TGS_request (event_id=4769), SEARCH for TGT_request (event_id=4768) WHERE (user and client_ip match) AND (timestamp is within TGT_lifetime) | ALERT if no TGT_request found
- question: Has the ratio of TGT requests to TGS requests for any client IP address deviated significantly from its established baseline?
  context: This question provides a statistical approach to detecting Pass-the-Ticket activity. A client using a forged or stolen ticket will generate many TGS requests without needing to request new TGTs. This causes a statistical drop in the TGT:TGS ratio for that client's IP address, highlighting it as an anomaly worthy of investigation.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE ratio(TGT_requests/TGS_requests) by client_ip over 24_hours | BASELINE ratio over 30_days | DETECT significant drop in ratio from baseline
- question: Has a time-series analysis model detected an abnormal sequence of Kerberos events for any user, such as a TGS request appearing without a preceding TGT request in the expected timeframe?
  context: This question leverages a machine learning model that understands the normal temporal sequence of events for a user. It can detect not just the absence of a TGT request, but also anomalies in the timing and cadence between TGT and TGS requests, providing a more nuanced detection of forged ticket usage.
  answer_sources:
  - Windows Event ID 4768
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user, FEED sequence of kerberos_events to LSTM_model | ALERT on sequences flagged as temporal anomalies
- question: Have any Kerberos TGTs been requested with a lifetime that exceeds the domain's maximum policy or matches a known default value for forged tickets?
  context: This question seeks to identify a classic indicator of a Golden Ticket. Adversaries often forge tickets with extremely long lifetimes (e.g., 10 years, or 3650 days) to ensure persistent access. Comparing the requested lifetime in TGT events against the configured domain policy is a simple and highly effective way to detect this specific forgery artifact.
  answer_sources:
  - Windows Event ID 4768
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH TGT_requests (event_id=4768) | ALERT where requested_lifetime > domain_max_lifetime OR requested_lifetime = '3650 days'
- question: Are there any TGT requests with a ticket lifetime that is a statistical outlier compared to the norm for the domain?
  context: This question identifies unusually long ticket lifetimes that may not exceed the absolute maximum policy but are still abnormal. By establishing a baseline of typical ticket lifetimes, this statistical approach can flag requests that are, for example, in the 99.9th percentile, which could indicate an adversary attempting to create a long-lived ticket without triggering a hard policy limit.
  answer_sources:
  - Windows Event ID 4768
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH TGT_requests (event_id=4768) | CALCULATE statistics(requested_lifetime) over 30_days | DETECT outliers where requested_lifetime > 99.9th_percentile
- question: Has a clustering algorithm identified any TGT requests as anomalous based on their lifetime and other features?
  context: This question uses an unsupervised machine learning approach to find anomalous TGT requests. A clustering algorithm groups 'normal' requests together based on features like lifetime, client IP, and user. Forged tickets, especially those with extremely long lifetimes, will not fit into any normal cluster and will be flagged as anomalous 'noise', providing a way to detect outliers without pre-defined thresholds.
  answer_sources:
  - Windows Event ID 4768
  - Zeek kerberos.log
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH TGT_requests (event_id=4768) | INVOKE DBSCAN_clustering_model on (lifetime, client_ip, user) | RETURN events flagged as noise/outliers
- question: Has any single user account performed successful network logons (Logon Type 3) to an excessive number of distinct hosts within a short timeframe?
  context: This question acts as a tripwire for rapid lateral movement, a common activity after obtaining a powerful credential like a Golden Ticket. An adversary will often quickly enumerate and access numerous systems on the network. A static rule that alerts when a user accesses more than a set number of hosts (e.g., 20) in an hour can catch this brute-force style of movement.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - All servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logons (event_id=4624, logon_type=3) | COUNT distinct(destination_host) by user over 1_hour | ALERT where distinct_host_count > 20
- question: Has any user's network logon activity exceeded its own historical baseline for the number of distinct hosts accessed per hour?
  context: This question refines the detection of lateral movement by personalizing it to each user. An administrator might normally access 25 hosts in an hour, while a standard user might only access 2. This statistical approach creates a dynamic baseline for each user and alerts when they exceed their own normal behavior (e.g., their 95th percentile), reducing false positives from static thresholds.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - All servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logons (event_id=4624, logon_type=3) | BASELINE distinct(destination_host) by user per hour over 30_days | DETECT when current_hour_count > user_baseline_95th_percentile
- question: Has a graph analysis model detected anomalous lateral movement patterns for any user, such as connecting to new clusters of high-value servers or an unusually high rate of new connections?
  context: This question uses a sophisticated graph-based model to understand the context of lateral movement, not just the volume. It learns which hosts a user normally connects to and how they are related. The model can then detect more subtle and targeted adversarial behavior, such as a user suddenly pivoting from their normal workstation subnet to a cluster of critical database servers, which is highly indicative of malicious intent.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - All servers and workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL authentications as a graph | INVOKE graph_anomaly_detection_model | ALERT on users with anomalous edge creation (new connections to rare/high-value node clusters)
- question: Have any Kerberos service ticket requests included a high-privilege group SID (e.g., Enterprise Admins) in the SID-History field?
  context: This question looks for a specific and powerful feature of Golden Ticket attacks, privilege escalation via SID-History injection. Adversaries can add the SID of a highly privileged group, like Enterprise Admins, to a ticket for a low-privilege user. This rule creates a high-priority alert when the 'Transited Services' field in a TGS request contains one of these well-known privileged SIDs, as it's a direct sign of an attempt to abuse this mechanism.
  answer_sources:
  - Windows Event ID 4769
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH TGS_requests (event_id=4769) WHERE sid_history is not null | ALERT if sid_history contains known_privileged_SID (e.g., 'S-1-5-21-...-519')
- question: Has a TGS request for any user contained a SID in its SID-History that has not been seen for that user in their established baseline?
  context: This question detects SID-History abuse by baselining what is normal for each user. While SID-History has legitimate uses (e.g., after a domain migration), a user's historical SIDs should be stable. This statistical check alerts when a new, previously unseen SID appears in a user's ticket, which is highly suspicious outside of a planned migration context.
  answer_sources:
  - Windows Event ID 4769
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH TGS_requests (event_id=4769) WHERE sid_history is not null | BASELINE SIDs in sid_history by user over 90_days | DETECT when a new SID appears that is not in the user's baseline
- question: Has a machine learning model scored any TGS requests as highly likely to be malicious based on the use and rarity of SIDs in the SID-History?
  context: This question uses a classification model to provide a more nuanced risk score for SID-History usage. The model can learn the difference between legitimate use (e.g., common SIDs seen during a migration) and malicious use (e.g., a rare, high-privilege SID being injected for a standard user account). This helps prioritize alerts and reduce false positives from legitimate SID-History events.
  answer_sources:
  - Windows Event ID 4769
  - Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH TGS_requests (event_id=4769) | INVOKE ML_sid_history_abuse_model on (user, service, sid_history_contents) | RETURN events with high_confidence_malicious_score